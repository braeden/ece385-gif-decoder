
console_renderer.elf:     file format elf32-littlenios2
console_renderer.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x0001203c memsz 0x0001203c flags r-x
    LOAD off    0x0001305c vaddr 0x1001205c paddr 0x10013b54 align 2**12
         filesz 0x00001af8 memsz 0x00001af8 flags rw-
    LOAD off    0x0001564c vaddr 0x1001564c paddr 0x1001564c align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001195c  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004d0  10011b8c  10011b8c  00012b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af8  1001205c  10013b54  0001305c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  1001564c  1001564c  0001564c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00014b54  2**0
                  CONTENTS
  7 .sdram        00000000  100157b0  100157b0  00014b54  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00014b54  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001218  00000000  00000000  00014b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002ff36  00000000  00000000  00015d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000bc64  00000000  00000000  00045cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e350  00000000  00000000  0005192a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000027e8  00000000  00000000  0005fc7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000042a6  00000000  00000000  00062464  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001978e  00000000  00000000  0006670a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0007fe98  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001c58  00000000  00000000  0007fea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000852ba  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000852bd  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000852c9  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000852ca  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000852cb  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000852cf  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000852d3  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000852d7  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000852e2  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000852ed  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000d  00000000  00000000  000852f8  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000034  00000000  00000000  00085305  2**0
                  CONTENTS, READONLY
 30 .jdi          00005803  00000000  00000000  00085339  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00054ea2  00000000  00000000  0008ab3c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
10011b8c l    d  .rodata	00000000 .rodata
1001205c l    d  .rwdata	00000000 .rwdata
1001564c l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
100157b0 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../console_renderer_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
10013b08 l     O .rwdata	00000003 VALID_HEADER
10013b0c l     O .rwdata	00000005 __func__.3098
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fgetc.c
00000000 l    df *ABS*	00000000 findfp.c
10001654 l     F .text	00000008 __fp_unlock
10001668 l     F .text	0000019c __sinit.part.1
10001804 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
1001205c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
10003cf8 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 vfprintf.c
10011da6 l     O .rodata	00000010 zeroes.4404
10006728 l     F .text	000000bc __sbprintf
10011db6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 dtoa.c
10006b84 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
100128a8 l     O .rwdata	00000020 lc_ctype_charset
10012888 l     O .rwdata	00000020 lc_message_charset
100128c8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
10011de4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000a3a0 l     F .text	000000fc __sprint_r.part.0
10011f08 l     O .rodata	00000010 zeroes.4349
1000b9dc l     F .text	000000bc __sbprintf
10011f18 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000f520 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000f634 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000f694 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
1000f7a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
1000f890 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000f9fc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000fae8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000fcc4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10013b44 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1000ff38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10010074 l     F .text	00000034 alt_dev_reg
10012aa8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10010350 l     F .text	0000020c altera_avalon_jtag_uart_irq
1001055c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10010ce0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10011140 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
100112a0 l     F .text	0000003c alt_get_errno
100112dc l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
10015684 g     O .bss	00000004 alt_instruction_exception_handler
10003690 g     F .text	00000018 putchar
10009c0c g     F .text	00000074 _mprec_log10
10009cf8 g     F .text	0000008c __any_on
100088fc g     F .text	00000054 _isatty_r
10011df0 g     O .rodata	00000028 __mprec_tinytens
1000fc00 g     F .text	0000007c alt_main
1000026c g     F .text	00000678 uncompress
100036a8 g     F .text	000000c0 _puts_r
100156b0 g     O .bss	00000100 alt_irq
10008a2c g     F .text	00000060 _lseek_r
10013b54 g       *ABS*	00000000 __flash_rwdata_start
1000def8 g     F .text	00000088 .hidden __eqdf2
100157b0 g       *ABS*	00000000 __alt_heap_start
1000a264 g     F .text	0000005c _kill_r
1000364c g     F .text	0000003c printf
1000bed4 g     F .text	0000009c _wcrtomb_r
1000a02c g     F .text	00000084 _signal_r
1000409c g     F .text	0000005c __sseek
100019b4 g     F .text	00000010 __sinit
1000ba98 g     F .text	00000140 __swbuf_r
10008950 g     F .text	0000007c _setlocale_r
1000180c g     F .text	00000078 __sfmoreglue
10004400 g     F .text	00000018 ungetc
1000fca0 g     F .text	00000024 __malloc_unlock
10008b70 g     F .text	0000015c memmove
1000199c g     F .text	00000018 _cleanup
10008ccc g     F .text	000000a8 _Balloc
1000df80 g     F .text	000000dc .hidden __gtdf2
100116c8 g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
100025d0 g     F .text	0000005c _fstat_r
10015650 g     O .bss	00000004 errno
10003f5c g     F .text	00000014 __srget
10004018 g     F .text	00000008 __seofread
10015670 g     O .bss	00000004 alt_argv
1001bb08 g       *ABS*	00000000 _gp
1000f788 g     F .text	00000020 getpid
10012928 g     O .rwdata	00000180 alt_fd_list
100028c4 g     F .text	00000070 _getc_r
10002934 g     F .text	00000088 getc
10003688 g     F .text	00000008 _putchar_r
100116ec g     F .text	00000090 alt_find_dev
100033ac g     F .text	00000148 memcpy
1000165c g     F .text	0000000c _cleanup_r
1000f338 g     F .text	000000dc .hidden __floatsidf
10011224 g     F .text	0000007c alt_io_redirect
1000e05c g     F .text	000000f4 .hidden __ltdf2
10011b8c g       *ABS*	00000000 __DTOR_END__
10003768 g     F .text	00000014 puts
10011948 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10009f4c g     F .text	00000074 __fpclassifyd
10009b68 g     F .text	000000a4 __ratio
1000b9c0 g     F .text	0000001c __vfiprintf_internal
10010754 g     F .text	0000021c altera_avalon_jtag_uart_read
10002b78 g     F .text	00000014 malloc
1000361c g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10001018 g     F .text	00000064 .hidden __udivsi3
1000f7e4 g     F .text	000000ac isatty
1000a0b0 g     F .text	000000bc _raise_r
100010fc g     F .text	00000068 __assert_func
10011e40 g     O .rodata	000000c8 __mprec_tens
100089cc g     F .text	0000000c __locale_charset
1001565c g     O .bss	00000004 __malloc_top_pad
1000a2c0 g     F .text	00000004 _getpid_r
10013b24 g     O .rwdata	00000004 __mb_cur_max
100089fc g     F .text	0000000c _localeconv_r
10009100 g     F .text	0000003c __i2b
10008434 g     F .text	000004c8 __sfvwrite_r
1000a16c g     F .text	000000a8 __sigtramp_r
10003f70 g     F .text	00000054 _sbrk_r
10009eec g     F .text	00000060 _read_r
10013b3c g     O .rwdata	00000004 alt_max_fd
100011b0 g     F .text	000000f0 _fclose_r
1000152c g     F .text	00000030 fflush
10015658 g     O .bss	00000004 __malloc_max_sbrked_mem
1000155c g     F .text	00000070 _fgetc_r
1000cc7c g     F .text	000008ac .hidden __adddf3
10009910 g     F .text	0000010c __b2d
1000c6b8 g     F .text	000005c4 .hidden __umoddi3
1000fb24 g     F .text	000000dc lseek
10013b14 g     O .rwdata	00000004 _global_impure_ptr
10003794 g     F .text	00000564 _realloc_r
100157b0 g       *ABS*	00000000 __bss_end
10011050 g     F .text	000000f0 alt_iic_isr_register
100115c0 g     F .text	00000108 alt_tick
1000c0bc g     F .text	000005fc .hidden __udivdi3
1000be30 g     F .text	00000024 _fputwc_r
10011e18 g     O .rodata	00000028 __mprec_bigtens
10008ee4 g     F .text	00000104 __s2b
10006b6c g     F .text	00000018 abort
1000f414 g     F .text	000000a8 .hidden __floatunsidf
10009650 g     F .text	00000060 __mcmp
100019d4 g     F .text	00000018 __fp_lock_all
10011004 g     F .text	0000004c alt_ic_irq_enabled
10011524 g     F .text	0000009c alt_alarm_stop
10015678 g     O .bss	00000004 alt_irq_active
10002170 g     F .text	00000444 _fseeko_r
100000fc g     F .exceptions	000000d4 alt_irq_handler
10012900 g     O .rwdata	00000028 alt_dev_null
10010cc0 g     F .text	00000020 alt_dcache_flush_all
10008fe8 g     F .text	00000068 __hi0bits
1000f2b8 g     F .text	00000080 .hidden __fixdfsi
10013b54 g       *ABS*	00000000 __ram_rwdata_end
10013b34 g     O .rwdata	00000008 alt_dev_list
1000ff74 g     F .text	00000100 write
10009d84 g     F .text	000000a0 _putc_r
1001205c g       *ABS*	00000000 __ram_rodata_end
1000f6d0 g     F .text	000000b8 fstat
10001a88 g     F .text	00000024 fprintf
1000f8cc g     F .text	00000130 kill
1000e05c g     F .text	000000f4 .hidden __ledf2
100093c8 g     F .text	00000140 __pow5mult
10015668 g     O .bss	00000004 __nlocale_changed
1000a4b4 g     F .text	0000150c ___vfiprintf_internal_r
1000107c g     F .text	00000058 .hidden __umodsi3
100157b0 g       *ABS*	00000000 end
1001564c g     O .bss	00000004 fileptr
100025b4 g     F .text	0000001c fseeko
10002154 g     F .text	0000001c fseek
10010290 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
10011b8c g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000f4bc g     F .text	00000064 .hidden __clzsi2
10010970 g     F .text	00000224 altera_avalon_jtag_uart_write
100019c4 g     F .text	00000004 __sfp_lock_acquire
10008a8c g     F .text	000000e4 memchr
10004430 g     F .text	000022dc ___vfprintf_internal_r
10001e40 g     F .text	00000310 _free_r
100089d8 g     F .text	00000010 __locale_mb_cur_max
10003ee8 g     F .text	00000074 __srget_r
100069ec g     F .text	00000180 __call_exitprocs
10015664 g     O .bss	00000004 __mlocale_changed
10013b1c g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
1001567c g     O .bss	00000004 _alt_tick_rate
10009508 g     F .text	00000148 __lshift
10015680 g     O .bss	00000004 _alt_nticks
1000a228 g     F .text	00000018 signal
1000fd00 g     F .text	00000104 read
100100e0 g     F .text	0000004c alt_sys_init
10011a74 g     F .text	00000118 __register_exitproc
1000913c g     F .text	0000028c __multiply
100105fc g     F .text	00000068 altera_avalon_jtag_uart_close
100010d4 g     F .text	00000028 .hidden __mulsi3
1001205c g       *ABS*	00000000 __ram_rwdata_start
10011b8c g       *ABS*	00000000 __ram_rodata_start
10015688 g     O .bss	00000028 __malloc_current_mallinfo
10009a1c g     F .text	0000014c __d2b
1000377c g     F .text	00000018 realloc
1001012c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10011884 g     F .text	000000c4 alt_get_fd
10006998 g     F .text	00000054 _close_r
100119f8 g     F .text	0000007c memcmp
100101ec g     F .text	00000050 altera_avalon_jtag_uart_close_fd
100157b0 g       *ABS*	00000000 __alt_stack_base
1001023c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
100027b4 g     F .text	000000dc _fwrite_r
10006844 g     F .text	00000154 __swsetup_r
1000d528 g     F .text	000009d0 .hidden __divdf3
10001884 g     F .text	00000118 __sfp
10009c80 g     F .text	00000078 __copybits
10012480 g     O .rwdata	00000408 __malloc_av_
100019d0 g     F .text	00000004 __sinit_lock_release
1000e150 g     F .text	0000086c .hidden __muldf3
10003fc4 g     F .text	00000054 __sread
10001ce8 g     F .text	00000034 fread
1001177c g     F .text	00000108 alt_find_file
10010d1c g     F .text	000000a4 alt_dev_llist_insert
1000fc7c g     F .text	00000024 __malloc_lock
10001a60 g     F .text	00000028 _fprintf_r
1000fe88 g     F .text	000000b0 sbrk
100014d0 g     F .text	0000005c _fflush_r
1000bbf0 g     F .text	000000dc _calloc_r
1001564c g       *ABS*	00000000 __bss_start
100034f4 g     F .text	00000128 memset
1000092c g     F .text	000005f4 main
10015674 g     O .bss	00000004 alt_envp
10015654 g     O .bss	00000004 __malloc_max_total_mem
1001018c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000bbd8 g     F .text	00000018 __swbuf
10001aac g     F .text	0000023c _fread_r
100008e4 g     F .text	00000048 skipToTerm
100040f8 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
100012a0 g     F .text	00000014 fclose
10006dac g     F .text	00001688 _dtoa_r
10002ba0 g     F .text	0000080c _malloc_r
1000c030 g     F .text	00000030 __ascii_wctomb
10013b40 g     O .rwdata	00000004 alt_errno
10004198 g     F .text	000000d4 __submore
10001a04 g     F .text	00000020 _fiprintf_r
1000a240 g     F .text	00000010 _init_signal
1000262c g     F .text	000000c4 _fwalk
10009e24 g     F .text	000000c8 putc
10000f20 g     F .text	00000084 .hidden __divsi3
10001d1c g     F .text	00000124 _malloc_trim_r
10011b8c g       *ABS*	00000000 __CTOR_END__
1000a2c4 g     F .text	000000dc strcmp
10011b8c g       *ABS*	00000000 __flash_rodata_start
10011b8c g       *ABS*	00000000 __DTOR_LIST__
1000def8 g     F .text	00000088 .hidden __nedf2
100100a8 g     F .text	00000038 alt_irq_init
1000fe04 g     F .text	00000084 alt_release_fd
100015cc g     F .text	00000088 fgetc
10011f28 g     O .rodata	00000100 .hidden __clz_tab
10015660 g     O .bss	00000004 _PathLocale
100119e4 g     F .text	00000014 atexit
100067e4 g     F .text	00000060 _write_r
10008a08 g     F .text	00000018 setlocale
10013b18 g     O .rwdata	00000004 _impure_ptr
1001566c g     O .bss	00000004 alt_argc
100012b4 g     F .text	0000021c __sflush_r
10010e20 g     F .text	00000060 _do_dtors
100089f4 g     F .text	00000008 __locale_cjk_lang
10002150 g     F .text	00000004 _fseek_r
10003d14 g     F .text	000001d4 __srefill_r
10000020 g       .exceptions	00000000 alt_irq_entry
100098ac g     F .text	00000064 __ulp
100019ec g     F .text	00000018 __fp_unlock_all
10013b2c g     O .rwdata	00000008 alt_fs_list
10000020 g       *ABS*	00000000 __ram_exceptions_start
10008a20 g     F .text	0000000c localeconv
10010ea0 g     F .text	00000050 alt_ic_isr_register
10002890 g     F .text	00000034 fwrite
10013b54 g       *ABS*	00000000 _edata
100157b0 g       *ABS*	00000000 _end
1000bccc g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
10010664 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10010f78 g     F .text	0000008c alt_ic_irq_disable
10004020 g     F .text	0000007c __swrite
10013b20 g     O .rwdata	00000004 __malloc_trim_threshold
100089e8 g     F .text	0000000c __locale_msgcharset
10001178 g     F .text	00000038 exit
10001a24 g     F .text	0000003c fiprintf
10004418 g     F .text	00000018 _vfiprintf_r
100026f0 g     F .text	000000c4 _fwalk_reent
100096b0 g     F .text	000001fc __mdiff
10000fa4 g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
100019c8 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
1000f660 g     F .text	00000034 _exit
10010b94 g     F .text	0000012c alt_alarm_start
100029bc g     F .text	000001bc __smakebuf_r
10004100 g     F .text	00000098 strlen
10009fc0 g     F .text	0000006c _init_signal_r
100113c8 g     F .text	0000015c open
1000df80 g     F .text	000000dc .hidden __gedf2
10001164 g     F .text	00000014 __assert
10013b28 g     O .rwdata	00000004 __wctomb
1000a49c g     F .text	00000018 __sprint_r
10010e80 g     F .text	00000020 alt_icache_flush_all
10013b48 g     O .rwdata	00000004 alt_priority_mask
10010ef0 g     F .text	00000088 alt_ic_irq_enable
1000670c g     F .text	0000001c __vfprintf_internal
1000c060 g     F .text	0000005c _wctomb_r
1000e9bc g     F .text	000008fc .hidden __subdf3
10009050 g     F .text	000000b0 __lo0bits
10013b4c g     O .rwdata	00000008 alt_alarm_list
1000426c g     F .text	00000194 _ungetc_r
10010dc0 g     F .text	00000060 _do_ctors
1000a250 g     F .text	00000014 __sigtramp
1000bf70 g     F .text	000000c0 wcrtomb
1000f55c g     F .text	000000d8 close
1000fa64 g     F .text	00000084 alt_load
1000be54 g     F .text	00000080 fputwc
1000a214 g     F .text	00000014 raise
10002b8c g     F .text	00000014 free
100019cc g     F .text	00000004 __sinit_lock_acquire
10008d9c g     F .text	00000148 __multadd
10008d74 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	1095ac04 	addi	r2,r2,22192
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	1095ac04 	addi	r2,r2,22192
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0a6df17 	ldw	r2,-25732(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0a6df17 	ldw	r2,-25732(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
1000023c:	d6aec214 	ori	gp,gp,47880
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000244:	10959314 	ori	r2,r2,22092

    movhi r3, %hi(__bss_end)
10000248:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
1000024c:	18d5ec14 	ori	r3,r3,22448

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	000fa640 	call	1000fa64 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	000fc000 	call	1000fc00 <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <uncompress>:
FILE *fileptr;

void uncompress(int code_length,
				const unsigned char *input,
				int input_length,
				unsigned char *out) {
1000026c:	deffec04 	addi	sp,sp,-80
10000270:	dfc01315 	stw	ra,76(sp)
10000274:	df001215 	stw	fp,72(sp)
10000278:	dc001115 	stw	r16,68(sp)
1000027c:	df001204 	addi	fp,sp,72
10000280:	e13ffb15 	stw	r4,-20(fp)
10000284:	e17ffc15 	stw	r5,-16(fp)
10000288:	e1bffd15 	stw	r6,-12(fp)
1000028c:	e1fffe15 	stw	r7,-8(fp)
	// Source for this function is:
	// https://commandlinefanatic.com/cgi-bin/showarticle.cgi?article=art011
	int i, bit;
	int code, prev = -1;
10000290:	00bfffc4 	movi	r2,-1
10000294:	e0bff015 	stw	r2,-64(fp)
	dictionary_entry_t *dictionary;
	int dictionary_ind;
	unsigned int mask = 0x01;
10000298:	00800044 	movi	r2,1
1000029c:	e0bff315 	stw	r2,-52(fp)
	int reset_code_length;
	int clear_code;	 // This varies depending on code_length
	int stop_code;	 // one more than clear code
	int match_len;

	clear_code = 1 << (code_length);
100002a0:	00c00044 	movi	r3,1
100002a4:	e0bffb17 	ldw	r2,-20(fp)
100002a8:	1884983a 	sll	r2,r3,r2
100002ac:	e0bff615 	stw	r2,-40(fp)
	stop_code = clear_code + 1;
100002b0:	e0bff617 	ldw	r2,-40(fp)
100002b4:	10800044 	addi	r2,r2,1
100002b8:	e0bff715 	stw	r2,-36(fp)
	// To handle clear codes
	reset_code_length = code_length;
100002bc:	e0bffb17 	ldw	r2,-20(fp)
100002c0:	e0bff815 	stw	r2,-32(fp)

	// Create a dictionary large enough to hold "code_length" entries.
	// Once the dictionary overflows, code_length increases
	dictionary = (dictionary_entry_t *)
		malloc(sizeof(dictionary_entry_t) * (1 << (code_length + 1)));
100002c4:	e0bffb17 	ldw	r2,-20(fp)
100002c8:	10800044 	addi	r2,r2,1
100002cc:	00c00304 	movi	r3,12
100002d0:	1884983a 	sll	r2,r3,r2
	// To handle clear codes
	reset_code_length = code_length;

	// Create a dictionary large enough to hold "code_length" entries.
	// Once the dictionary overflows, code_length increases
	dictionary = (dictionary_entry_t *)
100002d4:	1009883a 	mov	r4,r2
100002d8:	0002b780 	call	10002b78 <malloc>
100002dc:	e0bff115 	stw	r2,-60(fp)

	// Technically, it shouldn't be necessary to initialize the
	// dictionary.  The spec says that the encoder "should output a
	// clear code as the first code in the image data stream".  It doesn't
	// say must, though...
	for (dictionary_ind = 0;
100002e0:	e03ff215 	stw	zero,-56(fp)
100002e4:	00001e06 	br	10000360 <uncompress+0xf4>
		 dictionary_ind < (1 << code_length);
		 dictionary_ind++) {
		dictionary[dictionary_ind].byte = dictionary_ind;
100002e8:	e0bff217 	ldw	r2,-56(fp)
100002ec:	01400304 	movi	r5,12
100002f0:	1009883a 	mov	r4,r2
100002f4:	00010d40 	call	100010d4 <__mulsi3>
100002f8:	1007883a 	mov	r3,r2
100002fc:	e0bff117 	ldw	r2,-60(fp)
10000300:	10c5883a 	add	r2,r2,r3
10000304:	e0fff217 	ldw	r3,-56(fp)
10000308:	10c00005 	stb	r3,0(r2)
		// XXX this only works because prev is a 32-bit int (> 12 bits)
		dictionary[dictionary_ind].prev = -1;
1000030c:	e0bff217 	ldw	r2,-56(fp)
10000310:	01400304 	movi	r5,12
10000314:	1009883a 	mov	r4,r2
10000318:	00010d40 	call	100010d4 <__mulsi3>
1000031c:	1007883a 	mov	r3,r2
10000320:	e0bff117 	ldw	r2,-60(fp)
10000324:	10c5883a 	add	r2,r2,r3
10000328:	00ffffc4 	movi	r3,-1
1000032c:	10c00115 	stw	r3,4(r2)
		dictionary[dictionary_ind].len = 1;
10000330:	e0bff217 	ldw	r2,-56(fp)
10000334:	01400304 	movi	r5,12
10000338:	1009883a 	mov	r4,r2
1000033c:	00010d40 	call	100010d4 <__mulsi3>
10000340:	1007883a 	mov	r3,r2
10000344:	e0bff117 	ldw	r2,-60(fp)
10000348:	10c5883a 	add	r2,r2,r3
1000034c:	00c00044 	movi	r3,1
10000350:	10c00215 	stw	r3,8(r2)
	// dictionary.  The spec says that the encoder "should output a
	// clear code as the first code in the image data stream".  It doesn't
	// say must, though...
	for (dictionary_ind = 0;
		 dictionary_ind < (1 << code_length);
		 dictionary_ind++) {
10000354:	e0bff217 	ldw	r2,-56(fp)
10000358:	10800044 	addi	r2,r2,1
1000035c:	e0bff215 	stw	r2,-56(fp)
	// Technically, it shouldn't be necessary to initialize the
	// dictionary.  The spec says that the encoder "should output a
	// clear code as the first code in the image data stream".  It doesn't
	// say must, though...
	for (dictionary_ind = 0;
		 dictionary_ind < (1 << code_length);
10000360:	00c00044 	movi	r3,1
10000364:	e0bffb17 	ldw	r2,-20(fp)
10000368:	1884983a 	sll	r2,r3,r2

	// Technically, it shouldn't be necessary to initialize the
	// dictionary.  The spec says that the encoder "should output a
	// clear code as the first code in the image data stream".  It doesn't
	// say must, though...
	for (dictionary_ind = 0;
1000036c:	e0fff217 	ldw	r3,-56(fp)
10000370:	18bfdd16 	blt	r3,r2,100002e8 <__alt_data_end+0xf80002e8>
		dictionary[dictionary_ind].prev = -1;
		dictionary[dictionary_ind].len = 1;
	}

	// 2^code_len + 1 is the special "end" code; don't give it an entry here
	dictionary_ind++;
10000374:	e0bff217 	ldw	r2,-56(fp)
10000378:	10800044 	addi	r2,r2,1
1000037c:	e0bff215 	stw	r2,-56(fp)
	dictionary_ind++;
10000380:	e0bff217 	ldw	r2,-56(fp)
10000384:	10800044 	addi	r2,r2,1
10000388:	e0bff215 	stw	r2,-56(fp)

	// TODO verify that the very last byte is clear_code + 1
	while (input_length) {
1000038c:	00014806 	br	100008b0 <uncompress+0x644>
		code = 0x0;
10000390:	e03fef15 	stw	zero,-68(fp)
		// Always read one more bit than the code length
		for (i = 0; i < (code_length + 1); i++) {
10000394:	e03fee15 	stw	zero,-72(fp)
10000398:	00001f06 	br	10000418 <uncompress+0x1ac>
			// This is different than in the file read example; that
			// was a call to "next_bit"
			bit = (*input & mask) ? 1 : 0;
1000039c:	e0bffc17 	ldw	r2,-16(fp)
100003a0:	10800003 	ldbu	r2,0(r2)
100003a4:	10c03fcc 	andi	r3,r2,255
100003a8:	e0bff317 	ldw	r2,-52(fp)
100003ac:	1884703a 	and	r2,r3,r2
100003b0:	1004c03a 	cmpne	r2,r2,zero
100003b4:	10803fcc 	andi	r2,r2,255
100003b8:	e0bff915 	stw	r2,-28(fp)
			mask <<= 1;
100003bc:	e0bff317 	ldw	r2,-52(fp)
100003c0:	1085883a 	add	r2,r2,r2
100003c4:	e0bff315 	stw	r2,-52(fp)

			if (mask == 0x100) {
100003c8:	e0bff317 	ldw	r2,-52(fp)
100003cc:	10804018 	cmpnei	r2,r2,256
100003d0:	1000081e 	bne	r2,zero,100003f4 <uncompress+0x188>
				mask = 0x01;
100003d4:	00800044 	movi	r2,1
100003d8:	e0bff315 	stw	r2,-52(fp)
				input++;
100003dc:	e0bffc17 	ldw	r2,-16(fp)
100003e0:	10800044 	addi	r2,r2,1
100003e4:	e0bffc15 	stw	r2,-16(fp)
				input_length--;
100003e8:	e0bffd17 	ldw	r2,-12(fp)
100003ec:	10bfffc4 	addi	r2,r2,-1
100003f0:	e0bffd15 	stw	r2,-12(fp)
			}

			code = code | (bit << i);
100003f4:	e0fff917 	ldw	r3,-28(fp)
100003f8:	e0bfee17 	ldw	r2,-72(fp)
100003fc:	1884983a 	sll	r2,r3,r2
10000400:	e0ffef17 	ldw	r3,-68(fp)
10000404:	1884b03a 	or	r2,r3,r2
10000408:	e0bfef15 	stw	r2,-68(fp)

	// TODO verify that the very last byte is clear_code + 1
	while (input_length) {
		code = 0x0;
		// Always read one more bit than the code length
		for (i = 0; i < (code_length + 1); i++) {
1000040c:	e0bfee17 	ldw	r2,-72(fp)
10000410:	10800044 	addi	r2,r2,1
10000414:	e0bfee15 	stw	r2,-72(fp)
10000418:	e0bffb17 	ldw	r2,-20(fp)
1000041c:	10800044 	addi	r2,r2,1
10000420:	e0ffee17 	ldw	r3,-72(fp)
10000424:	18bfdd16 	blt	r3,r2,1000039c <__alt_data_end+0xf800039c>
			}

			code = code | (bit << i);
		}

		if (code == clear_code) {
10000428:	e0ffef17 	ldw	r3,-68(fp)
1000042c:	e0bff617 	ldw	r2,-40(fp)
10000430:	1880381e 	bne	r3,r2,10000514 <uncompress+0x2a8>
			code_length = reset_code_length;
10000434:	e0bff817 	ldw	r2,-32(fp)
10000438:	e0bffb15 	stw	r2,-20(fp)
			dictionary = (dictionary_entry_t *)realloc(dictionary,
													   sizeof(dictionary_entry_t) * (1 << (code_length + 1)));
1000043c:	e0bffb17 	ldw	r2,-20(fp)
10000440:	10800044 	addi	r2,r2,1
			code = code | (bit << i);
		}

		if (code == clear_code) {
			code_length = reset_code_length;
			dictionary = (dictionary_entry_t *)realloc(dictionary,
10000444:	00c00304 	movi	r3,12
10000448:	1884983a 	sll	r2,r3,r2
1000044c:	100b883a 	mov	r5,r2
10000450:	e13ff117 	ldw	r4,-60(fp)
10000454:	000377c0 	call	1000377c <realloc>
10000458:	e0bff115 	stw	r2,-60(fp)
													   sizeof(dictionary_entry_t) * (1 << (code_length + 1)));

			for (dictionary_ind = 0;
1000045c:	e03ff215 	stw	zero,-56(fp)
10000460:	00001e06 	br	100004dc <uncompress+0x270>
				 dictionary_ind < (1 << code_length);
				 dictionary_ind++) {
				dictionary[dictionary_ind].byte = dictionary_ind;
10000464:	e0bff217 	ldw	r2,-56(fp)
10000468:	01400304 	movi	r5,12
1000046c:	1009883a 	mov	r4,r2
10000470:	00010d40 	call	100010d4 <__mulsi3>
10000474:	1007883a 	mov	r3,r2
10000478:	e0bff117 	ldw	r2,-60(fp)
1000047c:	10c5883a 	add	r2,r2,r3
10000480:	e0fff217 	ldw	r3,-56(fp)
10000484:	10c00005 	stb	r3,0(r2)
				// XXX this only works because prev is a 32-bit int (> 12 bits)
				dictionary[dictionary_ind].prev = -1;
10000488:	e0bff217 	ldw	r2,-56(fp)
1000048c:	01400304 	movi	r5,12
10000490:	1009883a 	mov	r4,r2
10000494:	00010d40 	call	100010d4 <__mulsi3>
10000498:	1007883a 	mov	r3,r2
1000049c:	e0bff117 	ldw	r2,-60(fp)
100004a0:	10c5883a 	add	r2,r2,r3
100004a4:	00ffffc4 	movi	r3,-1
100004a8:	10c00115 	stw	r3,4(r2)
				dictionary[dictionary_ind].len = 1;
100004ac:	e0bff217 	ldw	r2,-56(fp)
100004b0:	01400304 	movi	r5,12
100004b4:	1009883a 	mov	r4,r2
100004b8:	00010d40 	call	100010d4 <__mulsi3>
100004bc:	1007883a 	mov	r3,r2
100004c0:	e0bff117 	ldw	r2,-60(fp)
100004c4:	10c5883a 	add	r2,r2,r3
100004c8:	00c00044 	movi	r3,1
100004cc:	10c00215 	stw	r3,8(r2)
			dictionary = (dictionary_entry_t *)realloc(dictionary,
													   sizeof(dictionary_entry_t) * (1 << (code_length + 1)));

			for (dictionary_ind = 0;
				 dictionary_ind < (1 << code_length);
				 dictionary_ind++) {
100004d0:	e0bff217 	ldw	r2,-56(fp)
100004d4:	10800044 	addi	r2,r2,1
100004d8:	e0bff215 	stw	r2,-56(fp)
			code_length = reset_code_length;
			dictionary = (dictionary_entry_t *)realloc(dictionary,
													   sizeof(dictionary_entry_t) * (1 << (code_length + 1)));

			for (dictionary_ind = 0;
				 dictionary_ind < (1 << code_length);
100004dc:	00c00044 	movi	r3,1
100004e0:	e0bffb17 	ldw	r2,-20(fp)
100004e4:	1884983a 	sll	r2,r3,r2
		if (code == clear_code) {
			code_length = reset_code_length;
			dictionary = (dictionary_entry_t *)realloc(dictionary,
													   sizeof(dictionary_entry_t) * (1 << (code_length + 1)));

			for (dictionary_ind = 0;
100004e8:	e0fff217 	ldw	r3,-56(fp)
100004ec:	18bfdd16 	blt	r3,r2,10000464 <__alt_data_end+0xf8000464>
				dictionary[dictionary_ind].byte = dictionary_ind;
				// XXX this only works because prev is a 32-bit int (> 12 bits)
				dictionary[dictionary_ind].prev = -1;
				dictionary[dictionary_ind].len = 1;
			}
			dictionary_ind++;
100004f0:	e0bff217 	ldw	r2,-56(fp)
100004f4:	10800044 	addi	r2,r2,1
100004f8:	e0bff215 	stw	r2,-56(fp)
			dictionary_ind++;
100004fc:	e0bff217 	ldw	r2,-56(fp)
10000500:	10800044 	addi	r2,r2,1
10000504:	e0bff215 	stw	r2,-56(fp)
			prev = -1;
10000508:	00bfffc4 	movi	r2,-1
1000050c:	e0bff015 	stw	r2,-64(fp)
			continue;
10000510:	0000e706 	br	100008b0 <uncompress+0x644>
		} else if (code == stop_code) {
10000514:	e0ffef17 	ldw	r3,-68(fp)
10000518:	e0bff717 	ldw	r2,-36(fp)
1000051c:	18800d1e 	bne	r3,r2,10000554 <uncompress+0x2e8>
			if (input_length > 1) {
10000520:	e0bffd17 	ldw	r2,-12(fp)
10000524:	10800090 	cmplti	r2,r2,2
10000528:	1000e41e 	bne	r2,zero,100008bc <uncompress+0x650>
				fprintf(stderr, "Malformed GIF (early stop code)\n");
1000052c:	d0a00417 	ldw	r2,-32752(gp)
10000530:	10800317 	ldw	r2,12(r2)
10000534:	100f883a 	mov	r7,r2
10000538:	01800804 	movi	r6,32
1000053c:	01400044 	movi	r5,1
10000540:	01040074 	movhi	r4,4097
10000544:	2106e304 	addi	r4,r4,7052
10000548:	00028900 	call	10002890 <fwrite>
				exit(0);
1000054c:	0009883a 	mov	r4,zero
10000550:	00011780 	call	10001178 <exit>
			break;
		}

		// Update the dictionary with this character plus the _entry_
		// (character or string) that came before it
		if ((prev > -1) && (code_length < 12)) {
10000554:	e0bff017 	ldw	r2,-64(fp)
10000558:	10009116 	blt	r2,zero,100007a0 <uncompress+0x534>
1000055c:	e0bffb17 	ldw	r2,-20(fp)
10000560:	10800308 	cmpgei	r2,r2,12
10000564:	10008e1e 	bne	r2,zero,100007a0 <uncompress+0x534>
			if (code > dictionary_ind) {
10000568:	e0bfef17 	ldw	r2,-68(fp)
1000056c:	e0fff217 	ldw	r3,-56(fp)
10000570:	18800a0e 	bge	r3,r2,1000059c <uncompress+0x330>
				fprintf(stderr, "code = %.02x, but dictionary_ind = %.02x\n",
10000574:	d0a00417 	ldw	r2,-32752(gp)
10000578:	10800317 	ldw	r2,12(r2)
1000057c:	e1fff217 	ldw	r7,-56(fp)
10000580:	e1bfef17 	ldw	r6,-68(fp)
10000584:	01440074 	movhi	r5,4097
10000588:	2946ec04 	addi	r5,r5,7088
1000058c:	1009883a 	mov	r4,r2
10000590:	0001a880 	call	10001a88 <fprintf>
						code, dictionary_ind);
				exit(0);
10000594:	0009883a 	mov	r4,zero
10000598:	00011780 	call	10001178 <exit>
			}

			// Special handling for KwKwK
			if (code == dictionary_ind) {
1000059c:	e0ffef17 	ldw	r3,-68(fp)
100005a0:	e0bff217 	ldw	r2,-56(fp)
100005a4:	1880271e 	bne	r3,r2,10000644 <uncompress+0x3d8>
				int ptr = prev;
100005a8:	e0bff017 	ldw	r2,-64(fp)
100005ac:	e0bff415 	stw	r2,-48(fp)

				while (dictionary[ptr].prev != -1) {
100005b0:	00000906 	br	100005d8 <uncompress+0x36c>
					ptr = dictionary[ptr].prev;
100005b4:	e0bff417 	ldw	r2,-48(fp)
100005b8:	01400304 	movi	r5,12
100005bc:	1009883a 	mov	r4,r2
100005c0:	00010d40 	call	100010d4 <__mulsi3>
100005c4:	1007883a 	mov	r3,r2
100005c8:	e0bff117 	ldw	r2,-60(fp)
100005cc:	10c5883a 	add	r2,r2,r3
100005d0:	10800117 	ldw	r2,4(r2)
100005d4:	e0bff415 	stw	r2,-48(fp)

			// Special handling for KwKwK
			if (code == dictionary_ind) {
				int ptr = prev;

				while (dictionary[ptr].prev != -1) {
100005d8:	e0bff417 	ldw	r2,-48(fp)
100005dc:	01400304 	movi	r5,12
100005e0:	1009883a 	mov	r4,r2
100005e4:	00010d40 	call	100010d4 <__mulsi3>
100005e8:	1007883a 	mov	r3,r2
100005ec:	e0bff117 	ldw	r2,-60(fp)
100005f0:	10c5883a 	add	r2,r2,r3
100005f4:	10800117 	ldw	r2,4(r2)
100005f8:	10bfffd8 	cmpnei	r2,r2,-1
100005fc:	103fed1e 	bne	r2,zero,100005b4 <__alt_data_end+0xf80005b4>
					ptr = dictionary[ptr].prev;
				}
				dictionary[dictionary_ind].byte = dictionary[ptr].byte;
10000600:	e0bff217 	ldw	r2,-56(fp)
10000604:	01400304 	movi	r5,12
10000608:	1009883a 	mov	r4,r2
1000060c:	00010d40 	call	100010d4 <__mulsi3>
10000610:	1007883a 	mov	r3,r2
10000614:	e0bff117 	ldw	r2,-60(fp)
10000618:	10e1883a 	add	r16,r2,r3
1000061c:	e0bff417 	ldw	r2,-48(fp)
10000620:	01400304 	movi	r5,12
10000624:	1009883a 	mov	r4,r2
10000628:	00010d40 	call	100010d4 <__mulsi3>
1000062c:	1007883a 	mov	r3,r2
10000630:	e0bff117 	ldw	r2,-60(fp)
10000634:	10c5883a 	add	r2,r2,r3
10000638:	10800003 	ldbu	r2,0(r2)
1000063c:	80800005 	stb	r2,0(r16)
10000640:	00002606 	br	100006dc <uncompress+0x470>
			} else {
				int ptr = code;
10000644:	e0bfef17 	ldw	r2,-68(fp)
10000648:	e0bff515 	stw	r2,-44(fp)
				while (dictionary[ptr].prev != -1) {
1000064c:	00000906 	br	10000674 <uncompress+0x408>
					ptr = dictionary[ptr].prev;
10000650:	e0bff517 	ldw	r2,-44(fp)
10000654:	01400304 	movi	r5,12
10000658:	1009883a 	mov	r4,r2
1000065c:	00010d40 	call	100010d4 <__mulsi3>
10000660:	1007883a 	mov	r3,r2
10000664:	e0bff117 	ldw	r2,-60(fp)
10000668:	10c5883a 	add	r2,r2,r3
1000066c:	10800117 	ldw	r2,4(r2)
10000670:	e0bff515 	stw	r2,-44(fp)
					ptr = dictionary[ptr].prev;
				}
				dictionary[dictionary_ind].byte = dictionary[ptr].byte;
			} else {
				int ptr = code;
				while (dictionary[ptr].prev != -1) {
10000674:	e0bff517 	ldw	r2,-44(fp)
10000678:	01400304 	movi	r5,12
1000067c:	1009883a 	mov	r4,r2
10000680:	00010d40 	call	100010d4 <__mulsi3>
10000684:	1007883a 	mov	r3,r2
10000688:	e0bff117 	ldw	r2,-60(fp)
1000068c:	10c5883a 	add	r2,r2,r3
10000690:	10800117 	ldw	r2,4(r2)
10000694:	10bfffd8 	cmpnei	r2,r2,-1
10000698:	103fed1e 	bne	r2,zero,10000650 <__alt_data_end+0xf8000650>
					ptr = dictionary[ptr].prev;
				}
				dictionary[dictionary_ind].byte = dictionary[ptr].byte;
1000069c:	e0bff217 	ldw	r2,-56(fp)
100006a0:	01400304 	movi	r5,12
100006a4:	1009883a 	mov	r4,r2
100006a8:	00010d40 	call	100010d4 <__mulsi3>
100006ac:	1007883a 	mov	r3,r2
100006b0:	e0bff117 	ldw	r2,-60(fp)
100006b4:	10e1883a 	add	r16,r2,r3
100006b8:	e0bff517 	ldw	r2,-44(fp)
100006bc:	01400304 	movi	r5,12
100006c0:	1009883a 	mov	r4,r2
100006c4:	00010d40 	call	100010d4 <__mulsi3>
100006c8:	1007883a 	mov	r3,r2
100006cc:	e0bff117 	ldw	r2,-60(fp)
100006d0:	10c5883a 	add	r2,r2,r3
100006d4:	10800003 	ldbu	r2,0(r2)
100006d8:	80800005 	stb	r2,0(r16)
			}

			dictionary[dictionary_ind].prev = prev;
100006dc:	e0bff217 	ldw	r2,-56(fp)
100006e0:	01400304 	movi	r5,12
100006e4:	1009883a 	mov	r4,r2
100006e8:	00010d40 	call	100010d4 <__mulsi3>
100006ec:	1007883a 	mov	r3,r2
100006f0:	e0bff117 	ldw	r2,-60(fp)
100006f4:	10c5883a 	add	r2,r2,r3
100006f8:	e0fff017 	ldw	r3,-64(fp)
100006fc:	10c00115 	stw	r3,4(r2)

			dictionary[dictionary_ind].len = dictionary[prev].len + 1;
10000700:	e0bff217 	ldw	r2,-56(fp)
10000704:	01400304 	movi	r5,12
10000708:	1009883a 	mov	r4,r2
1000070c:	00010d40 	call	100010d4 <__mulsi3>
10000710:	1007883a 	mov	r3,r2
10000714:	e0bff117 	ldw	r2,-60(fp)
10000718:	10e1883a 	add	r16,r2,r3
1000071c:	e0bff017 	ldw	r2,-64(fp)
10000720:	01400304 	movi	r5,12
10000724:	1009883a 	mov	r4,r2
10000728:	00010d40 	call	100010d4 <__mulsi3>
1000072c:	1007883a 	mov	r3,r2
10000730:	e0bff117 	ldw	r2,-60(fp)
10000734:	10c5883a 	add	r2,r2,r3
10000738:	10800217 	ldw	r2,8(r2)
1000073c:	10800044 	addi	r2,r2,1
10000740:	80800215 	stw	r2,8(r16)

			dictionary_ind++;
10000744:	e0bff217 	ldw	r2,-56(fp)
10000748:	10800044 	addi	r2,r2,1
1000074c:	e0bff215 	stw	r2,-56(fp)

			// GIF89a mandates that this stops at 12 bits
			if ((dictionary_ind == (1 << (code_length + 1))) &&
10000750:	e0bffb17 	ldw	r2,-20(fp)
10000754:	10800044 	addi	r2,r2,1
10000758:	00c00044 	movi	r3,1
1000075c:	1886983a 	sll	r3,r3,r2
10000760:	e0bff217 	ldw	r2,-56(fp)
10000764:	18800e1e 	bne	r3,r2,100007a0 <uncompress+0x534>
10000768:	e0bffb17 	ldw	r2,-20(fp)
1000076c:	108002c8 	cmpgei	r2,r2,11
10000770:	10000b1e 	bne	r2,zero,100007a0 <uncompress+0x534>
				(code_length < 11)) {
				code_length++;
10000774:	e0bffb17 	ldw	r2,-20(fp)
10000778:	10800044 	addi	r2,r2,1
1000077c:	e0bffb15 	stw	r2,-20(fp)

				dictionary = (dictionary_entry_t *)realloc(dictionary,
														   sizeof(dictionary_entry_t) * (1 << (code_length + 1)));
10000780:	e0bffb17 	ldw	r2,-20(fp)
10000784:	10800044 	addi	r2,r2,1
			// GIF89a mandates that this stops at 12 bits
			if ((dictionary_ind == (1 << (code_length + 1))) &&
				(code_length < 11)) {
				code_length++;

				dictionary = (dictionary_entry_t *)realloc(dictionary,
10000788:	00c00304 	movi	r3,12
1000078c:	1884983a 	sll	r2,r3,r2
10000790:	100b883a 	mov	r5,r2
10000794:	e13ff117 	ldw	r4,-60(fp)
10000798:	000377c0 	call	1000377c <realloc>
1000079c:	e0bff115 	stw	r2,-60(fp)
														   sizeof(dictionary_entry_t) * (1 << (code_length + 1)));
			}
		}

		prev = code;
100007a0:	e0bfef17 	ldw	r2,-68(fp)
100007a4:	e0bff015 	stw	r2,-64(fp)

		// Now copy the dictionary entry backwards into "out"
		match_len = dictionary[code].len;
100007a8:	e0bfef17 	ldw	r2,-68(fp)
100007ac:	01400304 	movi	r5,12
100007b0:	1009883a 	mov	r4,r2
100007b4:	00010d40 	call	100010d4 <__mulsi3>
100007b8:	1007883a 	mov	r3,r2
100007bc:	e0bff117 	ldw	r2,-60(fp)
100007c0:	10c5883a 	add	r2,r2,r3
100007c4:	10800217 	ldw	r2,8(r2)
100007c8:	e0bffa15 	stw	r2,-24(fp)
		while (code != -1) {
100007cc:	00003106 	br	10000894 <uncompress+0x628>
			out[dictionary[code].len - 1] = dictionary[code].byte;
100007d0:	e0bfef17 	ldw	r2,-68(fp)
100007d4:	01400304 	movi	r5,12
100007d8:	1009883a 	mov	r4,r2
100007dc:	00010d40 	call	100010d4 <__mulsi3>
100007e0:	1007883a 	mov	r3,r2
100007e4:	e0bff117 	ldw	r2,-60(fp)
100007e8:	10c5883a 	add	r2,r2,r3
100007ec:	10800217 	ldw	r2,8(r2)
100007f0:	10bfffc4 	addi	r2,r2,-1
100007f4:	e0fffe17 	ldw	r3,-8(fp)
100007f8:	18a1883a 	add	r16,r3,r2
100007fc:	e0bfef17 	ldw	r2,-68(fp)
10000800:	01400304 	movi	r5,12
10000804:	1009883a 	mov	r4,r2
10000808:	00010d40 	call	100010d4 <__mulsi3>
1000080c:	1007883a 	mov	r3,r2
10000810:	e0bff117 	ldw	r2,-60(fp)
10000814:	10c5883a 	add	r2,r2,r3
10000818:	10800003 	ldbu	r2,0(r2)
1000081c:	80800005 	stb	r2,0(r16)
			if (dictionary[code].prev == code) {
10000820:	e0bfef17 	ldw	r2,-68(fp)
10000824:	01400304 	movi	r5,12
10000828:	1009883a 	mov	r4,r2
1000082c:	00010d40 	call	100010d4 <__mulsi3>
10000830:	1007883a 	mov	r3,r2
10000834:	e0bff117 	ldw	r2,-60(fp)
10000838:	10c5883a 	add	r2,r2,r3
1000083c:	10c00117 	ldw	r3,4(r2)
10000840:	e0bfef17 	ldw	r2,-68(fp)
10000844:	18800a1e 	bne	r3,r2,10000870 <uncompress+0x604>
				fprintf(stderr, "Internal error; self-reference.");
10000848:	d0a00417 	ldw	r2,-32752(gp)
1000084c:	10800317 	ldw	r2,12(r2)
10000850:	100f883a 	mov	r7,r2
10000854:	018007c4 	movi	r6,31
10000858:	01400044 	movi	r5,1
1000085c:	01040074 	movhi	r4,4097
10000860:	2106f704 	addi	r4,r4,7132
10000864:	00028900 	call	10002890 <fwrite>
				exit(0);
10000868:	0009883a 	mov	r4,zero
1000086c:	00011780 	call	10001178 <exit>
			}
			code = dictionary[code].prev;
10000870:	e0bfef17 	ldw	r2,-68(fp)
10000874:	01400304 	movi	r5,12
10000878:	1009883a 	mov	r4,r2
1000087c:	00010d40 	call	100010d4 <__mulsi3>
10000880:	1007883a 	mov	r3,r2
10000884:	e0bff117 	ldw	r2,-60(fp)
10000888:	10c5883a 	add	r2,r2,r3
1000088c:	10800117 	ldw	r2,4(r2)
10000890:	e0bfef15 	stw	r2,-68(fp)

		prev = code;

		// Now copy the dictionary entry backwards into "out"
		match_len = dictionary[code].len;
		while (code != -1) {
10000894:	e0bfef17 	ldw	r2,-68(fp)
10000898:	10bfffd8 	cmpnei	r2,r2,-1
1000089c:	103fcc1e 	bne	r2,zero,100007d0 <__alt_data_end+0xf80007d0>
				exit(0);
			}
			code = dictionary[code].prev;
		}

		out += match_len;
100008a0:	e0bffa17 	ldw	r2,-24(fp)
100008a4:	e0fffe17 	ldw	r3,-8(fp)
100008a8:	1885883a 	add	r2,r3,r2
100008ac:	e0bffe15 	stw	r2,-8(fp)
	// 2^code_len + 1 is the special "end" code; don't give it an entry here
	dictionary_ind++;
	dictionary_ind++;

	// TODO verify that the very last byte is clear_code + 1
	while (input_length) {
100008b0:	e0bffd17 	ldw	r2,-12(fp)
100008b4:	103eb61e 	bne	r2,zero,10000390 <__alt_data_end+0xf8000390>
100008b8:	00000106 	br	100008c0 <uncompress+0x654>
		} else if (code == stop_code) {
			if (input_length > 1) {
				fprintf(stderr, "Malformed GIF (early stop code)\n");
				exit(0);
			}
			break;
100008bc:	0001883a 	nop
			code = dictionary[code].prev;
		}

		out += match_len;
	}
	free(dictionary);
100008c0:	e13ff117 	ldw	r4,-60(fp)
100008c4:	0002b8c0 	call	10002b8c <free>
}
100008c8:	0001883a 	nop
100008cc:	e6ffff04 	addi	sp,fp,-4
100008d0:	dfc00217 	ldw	ra,8(sp)
100008d4:	df000117 	ldw	fp,4(sp)
100008d8:	dc000017 	ldw	r16,0(sp)
100008dc:	dec00304 	addi	sp,sp,12
100008e0:	f800283a 	ret

100008e4 <skipToTerm>:

void skipToTerm() {
100008e4:	defffe04 	addi	sp,sp,-8
100008e8:	dfc00115 	stw	ra,4(sp)
100008ec:	df000015 	stw	fp,0(sp)
100008f0:	d839883a 	mov	fp,sp
	while (fgetc(fileptr) != 0x00)
100008f4:	00000306 	br	10000904 <skipToTerm+0x20>
		printf("skipping");
100008f8:	01040074 	movhi	r4,4097
100008fc:	2106ff04 	addi	r4,r4,7164
10000900:	000364c0 	call	1000364c <printf>
	}
	free(dictionary);
}

void skipToTerm() {
	while (fgetc(fileptr) != 0x00)
10000904:	d0a6d117 	ldw	r2,-25788(gp)
10000908:	1009883a 	mov	r4,r2
1000090c:	00015cc0 	call	100015cc <fgetc>
10000910:	103ff91e 	bne	r2,zero,100008f8 <__alt_data_end+0xf80008f8>
		printf("skipping");
}
10000914:	0001883a 	nop
10000918:	e037883a 	mov	sp,fp
1000091c:	dfc00117 	ldw	ra,4(sp)
10000920:	df000017 	ldw	fp,0(sp)
10000924:	dec00204 	addi	sp,sp,8
10000928:	f800283a 	ret

1000092c <main>:

int main() {
1000092c:	deffe904 	addi	sp,sp,-92
10000930:	dfc01615 	stw	ra,88(sp)
10000934:	df001515 	stw	fp,84(sp)
10000938:	df001504 	addi	fp,sp,84
	fileptr = 0x00400002;
1000093c:	00801034 	movhi	r2,64
10000940:	10800084 	addi	r2,r2,2
10000944:	d0a6d115 	stw	r2,-25788(gp)

	HeaderBlock header;
	LSD descriptor;
	fread(&header, 1, sizeof(header), fileptr);
10000948:	d0e6d117 	ldw	r3,-25788(gp)
1000094c:	e0bff804 	addi	r2,fp,-32
10000950:	180f883a 	mov	r7,r3
10000954:	01800184 	movi	r6,6
10000958:	01400044 	movi	r5,1
1000095c:	1009883a 	mov	r4,r2
10000960:	0001ce80 	call	10001ce8 <fread>
	fread(&descriptor, 1, sizeof(descriptor), fileptr);
10000964:	d0e6d117 	ldw	r3,-25788(gp)
10000968:	e0bff984 	addi	r2,fp,-26
1000096c:	180f883a 	mov	r7,r3
10000970:	018001c4 	movi	r6,7
10000974:	01400044 	movi	r5,1
10000978:	1009883a 	mov	r4,r2
1000097c:	0001ce80 	call	10001ce8 <fread>
	for (int i = 0; i < 3; i++) {
10000980:	e03feb15 	stw	zero,-84(fp)
10000984:	00001706 	br	100009e4 <main+0xb8>
		assert(header.signature[i] == VALID_HEADER[i]);
10000988:	e0fff804 	addi	r3,fp,-32
1000098c:	e0bfeb17 	ldw	r2,-84(fp)
10000990:	1885883a 	add	r2,r3,r2
10000994:	10800003 	ldbu	r2,0(r2)
10000998:	10c03fcc 	andi	r3,r2,255
1000099c:	e13feb17 	ldw	r4,-84(fp)
100009a0:	d0a00004 	addi	r2,gp,-32768
100009a4:	2085883a 	add	r2,r4,r2
100009a8:	10800003 	ldbu	r2,0(r2)
100009ac:	10803fcc 	andi	r2,r2,255
100009b0:	1080201c 	xori	r2,r2,128
100009b4:	10bfe004 	addi	r2,r2,-128
100009b8:	18800726 	beq	r3,r2,100009d8 <main+0xac>
100009bc:	01c40074 	movhi	r7,4097
100009c0:	39c70204 	addi	r7,r7,7176
100009c4:	d1a00104 	addi	r6,gp,-32764
100009c8:	01402ac4 	movi	r5,171
100009cc:	01040074 	movhi	r4,4097
100009d0:	21070c04 	addi	r4,r4,7216
100009d4:	00010fc0 	call	100010fc <__assert_func>

	HeaderBlock header;
	LSD descriptor;
	fread(&header, 1, sizeof(header), fileptr);
	fread(&descriptor, 1, sizeof(descriptor), fileptr);
	for (int i = 0; i < 3; i++) {
100009d8:	e0bfeb17 	ldw	r2,-84(fp)
100009dc:	10800044 	addi	r2,r2,1
100009e0:	e0bfeb15 	stw	r2,-84(fp)
100009e4:	e0bfeb17 	ldw	r2,-84(fp)
100009e8:	108000d0 	cmplti	r2,r2,3
100009ec:	103fe61e 	bne	r2,zero,10000988 <__alt_data_end+0xf8000988>
		assert(header.signature[i] == VALID_HEADER[i]);
	}
	assert(descriptor.packedField.globalColorFlag);	 //For all intents we're going to need a global table
100009f0:	e0fffa83 	ldbu	r3,-22(fp)
100009f4:	00bfe004 	movi	r2,-128
100009f8:	1884703a 	and	r2,r3,r2
100009fc:	10803fcc 	andi	r2,r2,255
10000a00:	1000071e 	bne	r2,zero,10000a20 <main+0xf4>
10000a04:	01c40074 	movhi	r7,4097
10000a08:	39c70e04 	addi	r7,r7,7224
10000a0c:	d1a00104 	addi	r6,gp,-32764
10000a10:	01402b44 	movi	r5,173
10000a14:	01040074 	movhi	r4,4097
10000a18:	21070c04 	addi	r4,r4,7216
10000a1c:	00010fc0 	call	100010fc <__assert_func>

	int readlGlobalColorSize = 0x2 << descriptor.packedField.globalColorSize;  // 2^(N+1) actual colors
10000a20:	e0bffa8b 	ldhu	r2,-22(fp)
10000a24:	108001cc 	andi	r2,r2,7
10000a28:	10803fcc 	andi	r2,r2,255
10000a2c:	00c00084 	movi	r3,2
10000a30:	1884983a 	sll	r2,r3,r2
10000a34:	e0bff215 	stw	r2,-56(fp)
	// printf("%d, %d\n", test, packed.actual_color_size);
	colorTableEntry *globalTable = (colorTableEntry *)
		malloc(readlGlobalColorSize * sizeof(colorTableEntry));	 // We can make this 256 for hardware
10000a38:	e0fff217 	ldw	r3,-56(fp)
10000a3c:	1805883a 	mov	r2,r3
10000a40:	1085883a 	add	r2,r2,r2
10000a44:	10c5883a 	add	r2,r2,r3
	}
	assert(descriptor.packedField.globalColorFlag);	 //For all intents we're going to need a global table

	int readlGlobalColorSize = 0x2 << descriptor.packedField.globalColorSize;  // 2^(N+1) actual colors
	// printf("%d, %d\n", test, packed.actual_color_size);
	colorTableEntry *globalTable = (colorTableEntry *)
10000a48:	1009883a 	mov	r4,r2
10000a4c:	0002b780 	call	10002b78 <malloc>
10000a50:	e0bff315 	stw	r2,-52(fp)
		malloc(readlGlobalColorSize * sizeof(colorTableEntry));	 // We can make this 256 for hardware

	//Read global color table and print it
	fread(globalTable, 3, readlGlobalColorSize, fileptr);
10000a54:	e0bff217 	ldw	r2,-56(fp)
10000a58:	d0e6d117 	ldw	r3,-25788(gp)
10000a5c:	180f883a 	mov	r7,r3
10000a60:	100d883a 	mov	r6,r2
10000a64:	014000c4 	movi	r5,3
10000a68:	e13ff317 	ldw	r4,-52(fp)
10000a6c:	0001ce80 	call	10001ce8 <fread>

	//Now let's load our images
	while (1) {
		GCE gce;
		imageDescriptor imgDesc;
		colorTableEntry *localTable = NULL;
10000a70:	e03fec15 	stw	zero,-80(fp)
		unsigned char c = fgetc(fileptr);
10000a74:	d0a6d117 	ldw	r2,-25788(gp)
10000a78:	1009883a 	mov	r4,r2
10000a7c:	00015cc0 	call	100015cc <fgetc>
10000a80:	e0bfed05 	stb	r2,-76(fp)
		while (c == 0x21) {
10000a84:	00005b06 	br	10000bf4 <main+0x2c8>
			// We encountered a extension block...
			unsigned char label = fgetc(fileptr);
10000a88:	d0a6d117 	ldw	r2,-25788(gp)
10000a8c:	1009883a 	mov	r4,r2
10000a90:	00015cc0 	call	100015cc <fgetc>
10000a94:	e0bff405 	stb	r2,-48(fp)
			switch (label) {
10000a98:	e0bff403 	ldbu	r2,-48(fp)
10000a9c:	10c03fa0 	cmpeqi	r3,r2,254
10000aa0:	1800421e 	bne	r3,zero,10000bac <main+0x280>
10000aa4:	10c03fe0 	cmpeqi	r3,r2,255
10000aa8:	1800031e 	bne	r3,zero,10000ab8 <main+0x18c>
10000aac:	10803e60 	cmpeqi	r2,r2,249
10000ab0:	1000331e 	bne	r2,zero,10000b80 <main+0x254>
10000ab4:	00003f06 	br	10000bb4 <main+0x288>
			case 0xFF: {
				// Application Extension
				printf("Loaded AEB\n");
10000ab8:	01040074 	movhi	r4,4097
10000abc:	21071804 	addi	r4,r4,7264
10000ac0:	00037680 	call	10003768 <puts>
				assert(fgetc(fileptr) == 0x0B);
10000ac4:	d0a6d117 	ldw	r2,-25788(gp)
10000ac8:	1009883a 	mov	r4,r2
10000acc:	00015cc0 	call	100015cc <fgetc>
10000ad0:	108002e0 	cmpeqi	r2,r2,11
10000ad4:	1000071e 	bne	r2,zero,10000af4 <main+0x1c8>
10000ad8:	01c40074 	movhi	r7,4097
10000adc:	39c71b04 	addi	r7,r7,7276
10000ae0:	d1a00104 	addi	r6,gp,-32764
10000ae4:	01403344 	movi	r5,205
10000ae8:	01040074 	movhi	r4,4097
10000aec:	21070c04 	addi	r4,r4,7216
10000af0:	00010fc0 	call	100010fc <__assert_func>
				fseek(fileptr, 11, SEEK_CUR);
10000af4:	d0a6d117 	ldw	r2,-25788(gp)
10000af8:	01800044 	movi	r6,1
10000afc:	014002c4 	movi	r5,11
10000b00:	1009883a 	mov	r4,r2
10000b04:	00021540 	call	10002154 <fseek>
				assert(fgetc(fileptr) == 0x03);
10000b08:	d0a6d117 	ldw	r2,-25788(gp)
10000b0c:	1009883a 	mov	r4,r2
10000b10:	00015cc0 	call	100015cc <fgetc>
10000b14:	108000e0 	cmpeqi	r2,r2,3
10000b18:	1000071e 	bne	r2,zero,10000b38 <main+0x20c>
10000b1c:	01c40074 	movhi	r7,4097
10000b20:	39c72104 	addi	r7,r7,7300
10000b24:	d1a00104 	addi	r6,gp,-32764
10000b28:	014033c4 	movi	r5,207
10000b2c:	01040074 	movhi	r4,4097
10000b30:	21070c04 	addi	r4,r4,7216
10000b34:	00010fc0 	call	100010fc <__assert_func>
				assert(fgetc(fileptr) == 0x01);
10000b38:	d0a6d117 	ldw	r2,-25788(gp)
10000b3c:	1009883a 	mov	r4,r2
10000b40:	00015cc0 	call	100015cc <fgetc>
10000b44:	10800060 	cmpeqi	r2,r2,1
10000b48:	1000071e 	bne	r2,zero,10000b68 <main+0x23c>
10000b4c:	01c40074 	movhi	r7,4097
10000b50:	39c72704 	addi	r7,r7,7324
10000b54:	d1a00104 	addi	r6,gp,-32764
10000b58:	01403404 	movi	r5,208
10000b5c:	01040074 	movhi	r4,4097
10000b60:	21070c04 	addi	r4,r4,7216
10000b64:	00010fc0 	call	100010fc <__assert_func>
				fseek(fileptr, 3, SEEK_CUR);
10000b68:	d0a6d117 	ldw	r2,-25788(gp)
10000b6c:	01800044 	movi	r6,1
10000b70:	014000c4 	movi	r5,3
10000b74:	1009883a 	mov	r4,r2
10000b78:	00021540 	call	10002154 <fseek>
				//Read repeat count if we care
				break;
10000b7c:	00001906 	br	10000be4 <main+0x2b8>
			}
			case 0xF9: {
				printf("Loaded GCE\n");
10000b80:	01040074 	movhi	r4,4097
10000b84:	21072d04 	addi	r4,r4,7348
10000b88:	00037680 	call	10003768 <puts>
				fread(&gce, 1, sizeof(gce), fileptr);
10000b8c:	d0e6d117 	ldw	r3,-25788(gp)
10000b90:	e0bffb44 	addi	r2,fp,-19
10000b94:	180f883a 	mov	r7,r3
10000b98:	01800184 	movi	r6,6
10000b9c:	01400044 	movi	r5,1
10000ba0:	1009883a 	mov	r4,r2
10000ba4:	0001ce80 	call	10001ce8 <fread>
				break;
10000ba8:	00000e06 	br	10000be4 <main+0x2b8>
			}
			case 0xFE: {
				//Comment Extension
				skipToTerm();
10000bac:	00008e40 	call	100008e4 <skipToTerm>
				break;
10000bb0:	00000c06 	br	10000be4 <main+0x2b8>
			}
			default: {
				unsigned char bytesToSkip = fgetc(fileptr);
10000bb4:	d0a6d117 	ldw	r2,-25788(gp)
10000bb8:	1009883a 	mov	r4,r2
10000bbc:	00015cc0 	call	100015cc <fgetc>
10000bc0:	e0bff445 	stb	r2,-47(fp)
				fseek(fileptr, bytesToSkip, SEEK_CUR);
10000bc4:	d0a6d117 	ldw	r2,-25788(gp)
10000bc8:	e0fff443 	ldbu	r3,-47(fp)
10000bcc:	01800044 	movi	r6,1
10000bd0:	180b883a 	mov	r5,r3
10000bd4:	1009883a 	mov	r4,r2
10000bd8:	00021540 	call	10002154 <fseek>
				skipToTerm();
10000bdc:	00008e40 	call	100008e4 <skipToTerm>
				break;
10000be0:	0001883a 	nop
			}
			}
			c = fgetc(fileptr);
10000be4:	d0a6d117 	ldw	r2,-25788(gp)
10000be8:	1009883a 	mov	r4,r2
10000bec:	00015cc0 	call	100015cc <fgetc>
10000bf0:	e0bfed05 	stb	r2,-76(fp)
	while (1) {
		GCE gce;
		imageDescriptor imgDesc;
		colorTableEntry *localTable = NULL;
		unsigned char c = fgetc(fileptr);
		while (c == 0x21) {
10000bf4:	e0bfed03 	ldbu	r2,-76(fp)
10000bf8:	10800860 	cmpeqi	r2,r2,33
10000bfc:	103fa21e 	bne	r2,zero,10000a88 <__alt_data_end+0xf8000a88>
				break;
			}
			}
			c = fgetc(fileptr);
		}
		ungetc(c, fileptr);
10000c00:	e0bfed03 	ldbu	r2,-76(fp)
10000c04:	d0e6d117 	ldw	r3,-25788(gp)
10000c08:	180b883a 	mov	r5,r3
10000c0c:	1009883a 	mov	r4,r2
10000c10:	00044000 	call	10004400 <ungetc>

		fread(&imgDesc, 1, sizeof(imgDesc), fileptr);
10000c14:	d0e6d117 	ldw	r3,-25788(gp)
10000c18:	e0bffcc4 	addi	r2,fp,-13
10000c1c:	180f883a 	mov	r7,r3
10000c20:	01800284 	movi	r6,10
10000c24:	01400044 	movi	r5,1
10000c28:	1009883a 	mov	r4,r2
10000c2c:	0001ce80 	call	10001ce8 <fread>
		assert(imgDesc.imgSeperator == 0x2C);
10000c30:	e0bffcc3 	ldbu	r2,-13(fp)
10000c34:	10803fcc 	andi	r2,r2,255
10000c38:	10800b20 	cmpeqi	r2,r2,44
10000c3c:	1000071e 	bne	r2,zero,10000c5c <main+0x330>
10000c40:	01c40074 	movhi	r7,4097
10000c44:	39c73004 	addi	r7,r7,7360
10000c48:	d1a00104 	addi	r6,gp,-32764
10000c4c:	01403ac4 	movi	r5,235
10000c50:	01040074 	movhi	r4,4097
10000c54:	21070c04 	addi	r4,r4,7216
10000c58:	00010fc0 	call	100010fc <__assert_func>
		if (imgDesc.packedField.localColorFlag) {
10000c5c:	e0ffff03 	ldbu	r3,-4(fp)
10000c60:	00bfe004 	movi	r2,-128
10000c64:	1884703a 	and	r2,r3,r2
10000c68:	10803fcc 	andi	r2,r2,255
10000c6c:	10001426 	beq	r2,zero,10000cc0 <main+0x394>
			// Load a local color table
			int realLocalColorSize = 0x2 << imgDesc.packedField.localColorSize;	 // 2^(N+1) actual colors
10000c70:	e0bfff03 	ldbu	r2,-4(fp)
10000c74:	108001cc 	andi	r2,r2,7
10000c78:	10803fcc 	andi	r2,r2,255
10000c7c:	00c00084 	movi	r3,2
10000c80:	1884983a 	sll	r2,r3,r2
10000c84:	e0bff515 	stw	r2,-44(fp)
			localTable = (colorTableEntry *)
				malloc(realLocalColorSize * sizeof(colorTableEntry));
10000c88:	e0fff517 	ldw	r3,-44(fp)
10000c8c:	1805883a 	mov	r2,r3
10000c90:	1085883a 	add	r2,r2,r2
10000c94:	10c5883a 	add	r2,r2,r3
		fread(&imgDesc, 1, sizeof(imgDesc), fileptr);
		assert(imgDesc.imgSeperator == 0x2C);
		if (imgDesc.packedField.localColorFlag) {
			// Load a local color table
			int realLocalColorSize = 0x2 << imgDesc.packedField.localColorSize;	 // 2^(N+1) actual colors
			localTable = (colorTableEntry *)
10000c98:	1009883a 	mov	r4,r2
10000c9c:	0002b780 	call	10002b78 <malloc>
10000ca0:	e0bfec15 	stw	r2,-80(fp)
				malloc(realLocalColorSize * sizeof(colorTableEntry));
			fread(localTable, 3, realLocalColorSize, fileptr);
10000ca4:	e0bff517 	ldw	r2,-44(fp)
10000ca8:	d0e6d117 	ldw	r3,-25788(gp)
10000cac:	180f883a 	mov	r7,r3
10000cb0:	100d883a 	mov	r6,r2
10000cb4:	014000c4 	movi	r5,3
10000cb8:	e13fec17 	ldw	r4,-80(fp)
10000cbc:	0001ce80 	call	10001ce8 <fread>
		}

		//Let's yeet that image data into something
		unsigned char LZWMinCode = getc(fileptr);
10000cc0:	d0a6d117 	ldw	r2,-25788(gp)
10000cc4:	1009883a 	mov	r4,r2
10000cc8:	00029340 	call	10002934 <getc>
10000ccc:	e0bff605 	stb	r2,-40(fp)
		printf("%02x\n", LZWMinCode);
10000cd0:	e0bff603 	ldbu	r2,-40(fp)
10000cd4:	100b883a 	mov	r5,r2
10000cd8:	01040074 	movhi	r4,4097
10000cdc:	21073804 	addi	r4,r4,7392
10000ce0:	000364c0 	call	1000364c <printf>
		unsigned char *data = NULL;
10000ce4:	e03fee15 	stw	zero,-72(fp)
		unsigned int dataSize = 0;
10000ce8:	e03fef15 	stw	zero,-68(fp)
		unsigned char bytesInSubblock = getc(fileptr);
10000cec:	d0a6d117 	ldw	r2,-25788(gp)
10000cf0:	1009883a 	mov	r4,r2
10000cf4:	00029340 	call	10002934 <getc>
10000cf8:	e0bff005 	stb	r2,-64(fp)
		while (bytesInSubblock) {
10000cfc:	00001606 	br	10000d58 <main+0x42c>
			data = realloc(data, (sizeof(char) * (dataSize + bytesInSubblock)));
10000d00:	e0fff003 	ldbu	r3,-64(fp)
10000d04:	e0bfef17 	ldw	r2,-68(fp)
10000d08:	1885883a 	add	r2,r3,r2
10000d0c:	100b883a 	mov	r5,r2
10000d10:	e13fee17 	ldw	r4,-72(fp)
10000d14:	000377c0 	call	1000377c <realloc>
10000d18:	e0bfee15 	stw	r2,-72(fp)
			fread(data, 1, bytesInSubblock, fileptr);
10000d1c:	e0bff003 	ldbu	r2,-64(fp)
10000d20:	d0e6d117 	ldw	r3,-25788(gp)
10000d24:	180f883a 	mov	r7,r3
10000d28:	100d883a 	mov	r6,r2
10000d2c:	01400044 	movi	r5,1
10000d30:	e13fee17 	ldw	r4,-72(fp)
10000d34:	0001ce80 	call	10001ce8 <fread>
			dataSize += bytesInSubblock;
10000d38:	e0bff003 	ldbu	r2,-64(fp)
10000d3c:	e0ffef17 	ldw	r3,-68(fp)
10000d40:	1885883a 	add	r2,r3,r2
10000d44:	e0bfef15 	stw	r2,-68(fp)
			bytesInSubblock = getc(fileptr);
10000d48:	d0a6d117 	ldw	r2,-25788(gp)
10000d4c:	1009883a 	mov	r4,r2
10000d50:	00029340 	call	10002934 <getc>
10000d54:	e0bff005 	stb	r2,-64(fp)
		unsigned char LZWMinCode = getc(fileptr);
		printf("%02x\n", LZWMinCode);
		unsigned char *data = NULL;
		unsigned int dataSize = 0;
		unsigned char bytesInSubblock = getc(fileptr);
		while (bytesInSubblock) {
10000d58:	e0bff003 	ldbu	r2,-64(fp)
10000d5c:	103fe81e 	bne	r2,zero,10000d00 <__alt_data_end+0xf8000d00>
		}

		// for (int i = 0; i < dataSize; i++) {
		// 	printf("%02x,", data[i]);
		// }
		unsigned char *dataOut = malloc(imgDesc.imgHeight * imgDesc.imgWidth);
10000d60:	e0bffe83 	ldbu	r2,-6(fp)
10000d64:	e0fffec3 	ldbu	r3,-5(fp)
10000d68:	1806923a 	slli	r3,r3,8
10000d6c:	1884b03a 	or	r2,r3,r2
10000d70:	113fffcc 	andi	r4,r2,65535
10000d74:	e0bffe03 	ldbu	r2,-8(fp)
10000d78:	e0fffe43 	ldbu	r3,-7(fp)
10000d7c:	1806923a 	slli	r3,r3,8
10000d80:	1884b03a 	or	r2,r3,r2
10000d84:	10bfffcc 	andi	r2,r2,65535
10000d88:	100b883a 	mov	r5,r2
10000d8c:	00010d40 	call	100010d4 <__mulsi3>
10000d90:	1009883a 	mov	r4,r2
10000d94:	0002b780 	call	10002b78 <malloc>
10000d98:	e0bff715 	stw	r2,-36(fp)

		// Write developed image frame to some sort of storage
		uncompress(LZWMinCode, data, dataSize, dataOut);
10000d9c:	e0bff603 	ldbu	r2,-40(fp)
10000da0:	e0ffef17 	ldw	r3,-68(fp)
10000da4:	e1fff717 	ldw	r7,-36(fp)
10000da8:	180d883a 	mov	r6,r3
10000dac:	e17fee17 	ldw	r5,-72(fp)
10000db0:	1009883a 	mov	r4,r2
10000db4:	000026c0 	call	1000026c <uncompress>
		for (int i = 0; i < imgDesc.imgHeight * imgDesc.imgWidth; i++) {
10000db8:	e03ff115 	stw	zero,-60(fp)
10000dbc:	00002406 	br	10000e50 <main+0x524>
			if (i % imgDesc.imgWidth == 0) {
10000dc0:	e0bffe03 	ldbu	r2,-8(fp)
10000dc4:	e0fffe43 	ldbu	r3,-7(fp)
10000dc8:	1806923a 	slli	r3,r3,8
10000dcc:	1884b03a 	or	r2,r3,r2
10000dd0:	10ffffcc 	andi	r3,r2,65535
10000dd4:	e0bff117 	ldw	r2,-60(fp)
10000dd8:	180b883a 	mov	r5,r3
10000ddc:	1009883a 	mov	r4,r2
10000de0:	0000fa40 	call	10000fa4 <__modsi3>
10000de4:	1000021e 	bne	r2,zero,10000df0 <main+0x4c4>
				printf("\n");
10000de8:	01000284 	movi	r4,10
10000dec:	00036900 	call	10003690 <putchar>
			}
			printf("\033[38;5;%dm", dataOut[i]);
10000df0:	e0bff117 	ldw	r2,-60(fp)
10000df4:	e0fff717 	ldw	r3,-36(fp)
10000df8:	1885883a 	add	r2,r3,r2
10000dfc:	10800003 	ldbu	r2,0(r2)
10000e00:	10803fcc 	andi	r2,r2,255
10000e04:	100b883a 	mov	r5,r2
10000e08:	01040074 	movhi	r4,4097
10000e0c:	21073a04 	addi	r4,r4,7400
10000e10:	000364c0 	call	1000364c <printf>
			printf("%02x ", dataOut[i]);
10000e14:	e0bff117 	ldw	r2,-60(fp)
10000e18:	e0fff717 	ldw	r3,-36(fp)
10000e1c:	1885883a 	add	r2,r3,r2
10000e20:	10800003 	ldbu	r2,0(r2)
10000e24:	10803fcc 	andi	r2,r2,255
10000e28:	100b883a 	mov	r5,r2
10000e2c:	01040074 	movhi	r4,4097
10000e30:	21073d04 	addi	r4,r4,7412
10000e34:	000364c0 	call	1000364c <printf>
			printf("\033[0m");
10000e38:	01040074 	movhi	r4,4097
10000e3c:	21073f04 	addi	r4,r4,7420
10000e40:	000364c0 	call	1000364c <printf>
		// }
		unsigned char *dataOut = malloc(imgDesc.imgHeight * imgDesc.imgWidth);

		// Write developed image frame to some sort of storage
		uncompress(LZWMinCode, data, dataSize, dataOut);
		for (int i = 0; i < imgDesc.imgHeight * imgDesc.imgWidth; i++) {
10000e44:	e0bff117 	ldw	r2,-60(fp)
10000e48:	10800044 	addi	r2,r2,1
10000e4c:	e0bff115 	stw	r2,-60(fp)
10000e50:	e0bffe83 	ldbu	r2,-6(fp)
10000e54:	e0fffec3 	ldbu	r3,-5(fp)
10000e58:	1806923a 	slli	r3,r3,8
10000e5c:	1884b03a 	or	r2,r3,r2
10000e60:	113fffcc 	andi	r4,r2,65535
10000e64:	e0bffe03 	ldbu	r2,-8(fp)
10000e68:	e0fffe43 	ldbu	r3,-7(fp)
10000e6c:	1806923a 	slli	r3,r3,8
10000e70:	1884b03a 	or	r2,r3,r2
10000e74:	10bfffcc 	andi	r2,r2,65535
10000e78:	100b883a 	mov	r5,r2
10000e7c:	00010d40 	call	100010d4 <__mulsi3>
10000e80:	1007883a 	mov	r3,r2
10000e84:	e0bff117 	ldw	r2,-60(fp)
10000e88:	10ffcd16 	blt	r2,r3,10000dc0 <__alt_data_end+0xf8000dc0>
		// We should write: check if localColorFlag then use that to grab colors from data[i]
		// We also need to save the image dimensions and start cords.

		// Check if we're at end of file:
		// and break loop!
		c = fgetc(fileptr);
10000e8c:	d0a6d117 	ldw	r2,-25788(gp)
10000e90:	1009883a 	mov	r4,r2
10000e94:	00015cc0 	call	100015cc <fgetc>
10000e98:	e0bfed05 	stb	r2,-76(fp)
		ungetc(c, fileptr);
10000e9c:	e0bfed03 	ldbu	r2,-76(fp)
10000ea0:	d0e6d117 	ldw	r3,-25788(gp)
10000ea4:	180b883a 	mov	r5,r3
10000ea8:	1009883a 	mov	r4,r2
10000eac:	00044000 	call	10004400 <ungetc>
		printf("\nFrame done\n");
10000eb0:	01040074 	movhi	r4,4097
10000eb4:	21074104 	addi	r4,r4,7428
10000eb8:	00037680 	call	10003768 <puts>

		free(localTable);
10000ebc:	e13fec17 	ldw	r4,-80(fp)
10000ec0:	0002b8c0 	call	10002b8c <free>
		free(data);
10000ec4:	e13fee17 	ldw	r4,-72(fp)
10000ec8:	0002b8c0 	call	10002b8c <free>
		free(dataOut);
10000ecc:	e13ff717 	ldw	r4,-36(fp)
10000ed0:	0002b8c0 	call	10002b8c <free>
		if (c == 0x3B) {
10000ed4:	e0bfed03 	ldbu	r2,-76(fp)
10000ed8:	10800ed8 	cmpnei	r2,r2,59
10000edc:	103ee41e 	bne	r2,zero,10000a70 <__alt_data_end+0xf8000a70>
			printf("\nEOF found\n");
10000ee0:	01040074 	movhi	r4,4097
10000ee4:	21074404 	addi	r4,r4,7440
10000ee8:	00037680 	call	10003768 <puts>
			break;
		}
	}

	free(globalTable);
10000eec:	e13ff317 	ldw	r4,-52(fp)
10000ef0:	0002b8c0 	call	10002b8c <free>
	printf("\n");
10000ef4:	01000284 	movi	r4,10
10000ef8:	00036900 	call	10003690 <putchar>
	fclose(fileptr);
10000efc:	d0a6d117 	ldw	r2,-25788(gp)
10000f00:	1009883a 	mov	r4,r2
10000f04:	00012a00 	call	100012a0 <fclose>
10000f08:	0005883a 	mov	r2,zero
}
10000f0c:	e037883a 	mov	sp,fp
10000f10:	dfc00117 	ldw	ra,4(sp)
10000f14:	df000017 	ldw	fp,0(sp)
10000f18:	dec00204 	addi	sp,sp,8
10000f1c:	f800283a 	ret

10000f20 <__divsi3>:
10000f20:	20001b16 	blt	r4,zero,10000f90 <__divsi3+0x70>
10000f24:	000f883a 	mov	r7,zero
10000f28:	28001616 	blt	r5,zero,10000f84 <__divsi3+0x64>
10000f2c:	200d883a 	mov	r6,r4
10000f30:	29001a2e 	bgeu	r5,r4,10000f9c <__divsi3+0x7c>
10000f34:	00800804 	movi	r2,32
10000f38:	00c00044 	movi	r3,1
10000f3c:	00000106 	br	10000f44 <__divsi3+0x24>
10000f40:	10000d26 	beq	r2,zero,10000f78 <__divsi3+0x58>
10000f44:	294b883a 	add	r5,r5,r5
10000f48:	10bfffc4 	addi	r2,r2,-1
10000f4c:	18c7883a 	add	r3,r3,r3
10000f50:	293ffb36 	bltu	r5,r4,10000f40 <__alt_data_end+0xf8000f40>
10000f54:	0005883a 	mov	r2,zero
10000f58:	18000726 	beq	r3,zero,10000f78 <__divsi3+0x58>
10000f5c:	0005883a 	mov	r2,zero
10000f60:	31400236 	bltu	r6,r5,10000f6c <__divsi3+0x4c>
10000f64:	314dc83a 	sub	r6,r6,r5
10000f68:	10c4b03a 	or	r2,r2,r3
10000f6c:	1806d07a 	srli	r3,r3,1
10000f70:	280ad07a 	srli	r5,r5,1
10000f74:	183ffa1e 	bne	r3,zero,10000f60 <__alt_data_end+0xf8000f60>
10000f78:	38000126 	beq	r7,zero,10000f80 <__divsi3+0x60>
10000f7c:	0085c83a 	sub	r2,zero,r2
10000f80:	f800283a 	ret
10000f84:	014bc83a 	sub	r5,zero,r5
10000f88:	39c0005c 	xori	r7,r7,1
10000f8c:	003fe706 	br	10000f2c <__alt_data_end+0xf8000f2c>
10000f90:	0109c83a 	sub	r4,zero,r4
10000f94:	01c00044 	movi	r7,1
10000f98:	003fe306 	br	10000f28 <__alt_data_end+0xf8000f28>
10000f9c:	00c00044 	movi	r3,1
10000fa0:	003fee06 	br	10000f5c <__alt_data_end+0xf8000f5c>

10000fa4 <__modsi3>:
10000fa4:	20001716 	blt	r4,zero,10001004 <__modsi3+0x60>
10000fa8:	000f883a 	mov	r7,zero
10000fac:	2005883a 	mov	r2,r4
10000fb0:	28001216 	blt	r5,zero,10000ffc <__modsi3+0x58>
10000fb4:	2900162e 	bgeu	r5,r4,10001010 <__modsi3+0x6c>
10000fb8:	01800804 	movi	r6,32
10000fbc:	00c00044 	movi	r3,1
10000fc0:	00000106 	br	10000fc8 <__modsi3+0x24>
10000fc4:	30000a26 	beq	r6,zero,10000ff0 <__modsi3+0x4c>
10000fc8:	294b883a 	add	r5,r5,r5
10000fcc:	31bfffc4 	addi	r6,r6,-1
10000fd0:	18c7883a 	add	r3,r3,r3
10000fd4:	293ffb36 	bltu	r5,r4,10000fc4 <__alt_data_end+0xf8000fc4>
10000fd8:	18000526 	beq	r3,zero,10000ff0 <__modsi3+0x4c>
10000fdc:	1806d07a 	srli	r3,r3,1
10000fe0:	11400136 	bltu	r2,r5,10000fe8 <__modsi3+0x44>
10000fe4:	1145c83a 	sub	r2,r2,r5
10000fe8:	280ad07a 	srli	r5,r5,1
10000fec:	183ffb1e 	bne	r3,zero,10000fdc <__alt_data_end+0xf8000fdc>
10000ff0:	38000126 	beq	r7,zero,10000ff8 <__modsi3+0x54>
10000ff4:	0085c83a 	sub	r2,zero,r2
10000ff8:	f800283a 	ret
10000ffc:	014bc83a 	sub	r5,zero,r5
10001000:	003fec06 	br	10000fb4 <__alt_data_end+0xf8000fb4>
10001004:	0109c83a 	sub	r4,zero,r4
10001008:	01c00044 	movi	r7,1
1000100c:	003fe706 	br	10000fac <__alt_data_end+0xf8000fac>
10001010:	00c00044 	movi	r3,1
10001014:	003ff106 	br	10000fdc <__alt_data_end+0xf8000fdc>

10001018 <__udivsi3>:
10001018:	200d883a 	mov	r6,r4
1000101c:	2900152e 	bgeu	r5,r4,10001074 <__udivsi3+0x5c>
10001020:	28001416 	blt	r5,zero,10001074 <__udivsi3+0x5c>
10001024:	00800804 	movi	r2,32
10001028:	00c00044 	movi	r3,1
1000102c:	00000206 	br	10001038 <__udivsi3+0x20>
10001030:	10000e26 	beq	r2,zero,1000106c <__udivsi3+0x54>
10001034:	28000516 	blt	r5,zero,1000104c <__udivsi3+0x34>
10001038:	294b883a 	add	r5,r5,r5
1000103c:	10bfffc4 	addi	r2,r2,-1
10001040:	18c7883a 	add	r3,r3,r3
10001044:	293ffa36 	bltu	r5,r4,10001030 <__alt_data_end+0xf8001030>
10001048:	18000826 	beq	r3,zero,1000106c <__udivsi3+0x54>
1000104c:	0005883a 	mov	r2,zero
10001050:	31400236 	bltu	r6,r5,1000105c <__udivsi3+0x44>
10001054:	314dc83a 	sub	r6,r6,r5
10001058:	10c4b03a 	or	r2,r2,r3
1000105c:	1806d07a 	srli	r3,r3,1
10001060:	280ad07a 	srli	r5,r5,1
10001064:	183ffa1e 	bne	r3,zero,10001050 <__alt_data_end+0xf8001050>
10001068:	f800283a 	ret
1000106c:	0005883a 	mov	r2,zero
10001070:	f800283a 	ret
10001074:	00c00044 	movi	r3,1
10001078:	003ff406 	br	1000104c <__alt_data_end+0xf800104c>

1000107c <__umodsi3>:
1000107c:	2005883a 	mov	r2,r4
10001080:	2900122e 	bgeu	r5,r4,100010cc <__umodsi3+0x50>
10001084:	28001116 	blt	r5,zero,100010cc <__umodsi3+0x50>
10001088:	01800804 	movi	r6,32
1000108c:	00c00044 	movi	r3,1
10001090:	00000206 	br	1000109c <__umodsi3+0x20>
10001094:	30000c26 	beq	r6,zero,100010c8 <__umodsi3+0x4c>
10001098:	28000516 	blt	r5,zero,100010b0 <__umodsi3+0x34>
1000109c:	294b883a 	add	r5,r5,r5
100010a0:	31bfffc4 	addi	r6,r6,-1
100010a4:	18c7883a 	add	r3,r3,r3
100010a8:	293ffa36 	bltu	r5,r4,10001094 <__alt_data_end+0xf8001094>
100010ac:	18000626 	beq	r3,zero,100010c8 <__umodsi3+0x4c>
100010b0:	1806d07a 	srli	r3,r3,1
100010b4:	11400136 	bltu	r2,r5,100010bc <__umodsi3+0x40>
100010b8:	1145c83a 	sub	r2,r2,r5
100010bc:	280ad07a 	srli	r5,r5,1
100010c0:	183ffb1e 	bne	r3,zero,100010b0 <__alt_data_end+0xf80010b0>
100010c4:	f800283a 	ret
100010c8:	f800283a 	ret
100010cc:	00c00044 	movi	r3,1
100010d0:	003ff706 	br	100010b0 <__alt_data_end+0xf80010b0>

100010d4 <__mulsi3>:
100010d4:	0005883a 	mov	r2,zero
100010d8:	20000726 	beq	r4,zero,100010f8 <__mulsi3+0x24>
100010dc:	20c0004c 	andi	r3,r4,1
100010e0:	2008d07a 	srli	r4,r4,1
100010e4:	18000126 	beq	r3,zero,100010ec <__mulsi3+0x18>
100010e8:	1145883a 	add	r2,r2,r5
100010ec:	294b883a 	add	r5,r5,r5
100010f0:	203ffa1e 	bne	r4,zero,100010dc <__alt_data_end+0xf80010dc>
100010f4:	f800283a 	ret
100010f8:	f800283a 	ret

100010fc <__assert_func>:
100010fc:	00840074 	movhi	r2,4097
10001100:	108ec604 	addi	r2,r2,15128
10001104:	10800017 	ldw	r2,0(r2)
10001108:	defffc04 	addi	sp,sp,-16
1000110c:	dfc00315 	stw	ra,12(sp)
10001110:	2015883a 	mov	r10,r4
10001114:	2811883a 	mov	r8,r5
10001118:	3813883a 	mov	r9,r7
1000111c:	11000317 	ldw	r4,12(r2)
10001120:	30000c26 	beq	r6,zero,10001154 <__assert_func+0x58>
10001124:	00c40074 	movhi	r3,4097
10001128:	18c74704 	addi	r3,r3,7452
1000112c:	3005883a 	mov	r2,r6
10001130:	01440074 	movhi	r5,4097
10001134:	29474b04 	addi	r5,r5,7468
10001138:	500f883a 	mov	r7,r10
1000113c:	480d883a 	mov	r6,r9
10001140:	d8c00115 	stw	r3,4(sp)
10001144:	da000015 	stw	r8,0(sp)
10001148:	d8800215 	stw	r2,8(sp)
1000114c:	0001a240 	call	10001a24 <fiprintf>
10001150:	0006b6c0 	call	10006b6c <abort>
10001154:	00c40074 	movhi	r3,4097
10001158:	18c74a04 	addi	r3,r3,7464
1000115c:	1805883a 	mov	r2,r3
10001160:	003ff306 	br	10001130 <__alt_data_end+0xf8001130>

10001164 <__assert>:
10001164:	deffff04 	addi	sp,sp,-4
10001168:	300f883a 	mov	r7,r6
1000116c:	000d883a 	mov	r6,zero
10001170:	dfc00015 	stw	ra,0(sp)
10001174:	00010fc0 	call	100010fc <__assert_func>

10001178 <exit>:
10001178:	defffe04 	addi	sp,sp,-8
1000117c:	000b883a 	mov	r5,zero
10001180:	dc000015 	stw	r16,0(sp)
10001184:	dfc00115 	stw	ra,4(sp)
10001188:	2021883a 	mov	r16,r4
1000118c:	00069ec0 	call	100069ec <__call_exitprocs>
10001190:	00840074 	movhi	r2,4097
10001194:	108ec504 	addi	r2,r2,15124
10001198:	11000017 	ldw	r4,0(r2)
1000119c:	20800f17 	ldw	r2,60(r4)
100011a0:	10000126 	beq	r2,zero,100011a8 <exit+0x30>
100011a4:	103ee83a 	callr	r2
100011a8:	8009883a 	mov	r4,r16
100011ac:	000f6600 	call	1000f660 <_exit>

100011b0 <_fclose_r>:
100011b0:	28003926 	beq	r5,zero,10001298 <_fclose_r+0xe8>
100011b4:	defffc04 	addi	sp,sp,-16
100011b8:	dc400115 	stw	r17,4(sp)
100011bc:	dc000015 	stw	r16,0(sp)
100011c0:	dfc00315 	stw	ra,12(sp)
100011c4:	dc800215 	stw	r18,8(sp)
100011c8:	2023883a 	mov	r17,r4
100011cc:	2821883a 	mov	r16,r5
100011d0:	20000226 	beq	r4,zero,100011dc <_fclose_r+0x2c>
100011d4:	20800e17 	ldw	r2,56(r4)
100011d8:	10002726 	beq	r2,zero,10001278 <_fclose_r+0xc8>
100011dc:	8080030f 	ldh	r2,12(r16)
100011e0:	1000071e 	bne	r2,zero,10001200 <_fclose_r+0x50>
100011e4:	0005883a 	mov	r2,zero
100011e8:	dfc00317 	ldw	ra,12(sp)
100011ec:	dc800217 	ldw	r18,8(sp)
100011f0:	dc400117 	ldw	r17,4(sp)
100011f4:	dc000017 	ldw	r16,0(sp)
100011f8:	dec00404 	addi	sp,sp,16
100011fc:	f800283a 	ret
10001200:	800b883a 	mov	r5,r16
10001204:	8809883a 	mov	r4,r17
10001208:	00012b40 	call	100012b4 <__sflush_r>
1000120c:	1025883a 	mov	r18,r2
10001210:	80800b17 	ldw	r2,44(r16)
10001214:	10000426 	beq	r2,zero,10001228 <_fclose_r+0x78>
10001218:	81400717 	ldw	r5,28(r16)
1000121c:	8809883a 	mov	r4,r17
10001220:	103ee83a 	callr	r2
10001224:	10001616 	blt	r2,zero,10001280 <_fclose_r+0xd0>
10001228:	8080030b 	ldhu	r2,12(r16)
1000122c:	1080200c 	andi	r2,r2,128
10001230:	1000151e 	bne	r2,zero,10001288 <_fclose_r+0xd8>
10001234:	81400c17 	ldw	r5,48(r16)
10001238:	28000526 	beq	r5,zero,10001250 <_fclose_r+0xa0>
1000123c:	80801004 	addi	r2,r16,64
10001240:	28800226 	beq	r5,r2,1000124c <_fclose_r+0x9c>
10001244:	8809883a 	mov	r4,r17
10001248:	0001e400 	call	10001e40 <_free_r>
1000124c:	80000c15 	stw	zero,48(r16)
10001250:	81401117 	ldw	r5,68(r16)
10001254:	28000326 	beq	r5,zero,10001264 <_fclose_r+0xb4>
10001258:	8809883a 	mov	r4,r17
1000125c:	0001e400 	call	10001e40 <_free_r>
10001260:	80001115 	stw	zero,68(r16)
10001264:	00019c40 	call	100019c4 <__sfp_lock_acquire>
10001268:	8000030d 	sth	zero,12(r16)
1000126c:	00019c80 	call	100019c8 <__sfp_lock_release>
10001270:	9005883a 	mov	r2,r18
10001274:	003fdc06 	br	100011e8 <__alt_data_end+0xf80011e8>
10001278:	00019b40 	call	100019b4 <__sinit>
1000127c:	003fd706 	br	100011dc <__alt_data_end+0xf80011dc>
10001280:	04bfffc4 	movi	r18,-1
10001284:	003fe806 	br	10001228 <__alt_data_end+0xf8001228>
10001288:	81400417 	ldw	r5,16(r16)
1000128c:	8809883a 	mov	r4,r17
10001290:	0001e400 	call	10001e40 <_free_r>
10001294:	003fe706 	br	10001234 <__alt_data_end+0xf8001234>
10001298:	0005883a 	mov	r2,zero
1000129c:	f800283a 	ret

100012a0 <fclose>:
100012a0:	00840074 	movhi	r2,4097
100012a4:	108ec604 	addi	r2,r2,15128
100012a8:	200b883a 	mov	r5,r4
100012ac:	11000017 	ldw	r4,0(r2)
100012b0:	00011b01 	jmpi	100011b0 <_fclose_r>

100012b4 <__sflush_r>:
100012b4:	2880030b 	ldhu	r2,12(r5)
100012b8:	defffb04 	addi	sp,sp,-20
100012bc:	dcc00315 	stw	r19,12(sp)
100012c0:	dc400115 	stw	r17,4(sp)
100012c4:	dfc00415 	stw	ra,16(sp)
100012c8:	dc800215 	stw	r18,8(sp)
100012cc:	dc000015 	stw	r16,0(sp)
100012d0:	10c0020c 	andi	r3,r2,8
100012d4:	2823883a 	mov	r17,r5
100012d8:	2027883a 	mov	r19,r4
100012dc:	1800311e 	bne	r3,zero,100013a4 <__sflush_r+0xf0>
100012e0:	28c00117 	ldw	r3,4(r5)
100012e4:	10820014 	ori	r2,r2,2048
100012e8:	2880030d 	sth	r2,12(r5)
100012ec:	00c04b0e 	bge	zero,r3,1000141c <__sflush_r+0x168>
100012f0:	8a000a17 	ldw	r8,40(r17)
100012f4:	40002326 	beq	r8,zero,10001384 <__sflush_r+0xd0>
100012f8:	9c000017 	ldw	r16,0(r19)
100012fc:	10c4000c 	andi	r3,r2,4096
10001300:	98000015 	stw	zero,0(r19)
10001304:	18004826 	beq	r3,zero,10001428 <__sflush_r+0x174>
10001308:	89801417 	ldw	r6,80(r17)
1000130c:	10c0010c 	andi	r3,r2,4
10001310:	18000626 	beq	r3,zero,1000132c <__sflush_r+0x78>
10001314:	88c00117 	ldw	r3,4(r17)
10001318:	88800c17 	ldw	r2,48(r17)
1000131c:	30cdc83a 	sub	r6,r6,r3
10001320:	10000226 	beq	r2,zero,1000132c <__sflush_r+0x78>
10001324:	88800f17 	ldw	r2,60(r17)
10001328:	308dc83a 	sub	r6,r6,r2
1000132c:	89400717 	ldw	r5,28(r17)
10001330:	000f883a 	mov	r7,zero
10001334:	9809883a 	mov	r4,r19
10001338:	403ee83a 	callr	r8
1000133c:	00ffffc4 	movi	r3,-1
10001340:	10c04426 	beq	r2,r3,10001454 <__sflush_r+0x1a0>
10001344:	88c0030b 	ldhu	r3,12(r17)
10001348:	89000417 	ldw	r4,16(r17)
1000134c:	88000115 	stw	zero,4(r17)
10001350:	197dffcc 	andi	r5,r3,63487
10001354:	8940030d 	sth	r5,12(r17)
10001358:	89000015 	stw	r4,0(r17)
1000135c:	18c4000c 	andi	r3,r3,4096
10001360:	18002c1e 	bne	r3,zero,10001414 <__sflush_r+0x160>
10001364:	89400c17 	ldw	r5,48(r17)
10001368:	9c000015 	stw	r16,0(r19)
1000136c:	28000526 	beq	r5,zero,10001384 <__sflush_r+0xd0>
10001370:	88801004 	addi	r2,r17,64
10001374:	28800226 	beq	r5,r2,10001380 <__sflush_r+0xcc>
10001378:	9809883a 	mov	r4,r19
1000137c:	0001e400 	call	10001e40 <_free_r>
10001380:	88000c15 	stw	zero,48(r17)
10001384:	0005883a 	mov	r2,zero
10001388:	dfc00417 	ldw	ra,16(sp)
1000138c:	dcc00317 	ldw	r19,12(sp)
10001390:	dc800217 	ldw	r18,8(sp)
10001394:	dc400117 	ldw	r17,4(sp)
10001398:	dc000017 	ldw	r16,0(sp)
1000139c:	dec00504 	addi	sp,sp,20
100013a0:	f800283a 	ret
100013a4:	2c800417 	ldw	r18,16(r5)
100013a8:	903ff626 	beq	r18,zero,10001384 <__alt_data_end+0xf8001384>
100013ac:	2c000017 	ldw	r16,0(r5)
100013b0:	108000cc 	andi	r2,r2,3
100013b4:	2c800015 	stw	r18,0(r5)
100013b8:	84a1c83a 	sub	r16,r16,r18
100013bc:	1000131e 	bne	r2,zero,1000140c <__sflush_r+0x158>
100013c0:	28800517 	ldw	r2,20(r5)
100013c4:	88800215 	stw	r2,8(r17)
100013c8:	04000316 	blt	zero,r16,100013d8 <__sflush_r+0x124>
100013cc:	003fed06 	br	10001384 <__alt_data_end+0xf8001384>
100013d0:	90a5883a 	add	r18,r18,r2
100013d4:	043feb0e 	bge	zero,r16,10001384 <__alt_data_end+0xf8001384>
100013d8:	88800917 	ldw	r2,36(r17)
100013dc:	89400717 	ldw	r5,28(r17)
100013e0:	800f883a 	mov	r7,r16
100013e4:	900d883a 	mov	r6,r18
100013e8:	9809883a 	mov	r4,r19
100013ec:	103ee83a 	callr	r2
100013f0:	80a1c83a 	sub	r16,r16,r2
100013f4:	00bff616 	blt	zero,r2,100013d0 <__alt_data_end+0xf80013d0>
100013f8:	88c0030b 	ldhu	r3,12(r17)
100013fc:	00bfffc4 	movi	r2,-1
10001400:	18c01014 	ori	r3,r3,64
10001404:	88c0030d 	sth	r3,12(r17)
10001408:	003fdf06 	br	10001388 <__alt_data_end+0xf8001388>
1000140c:	0005883a 	mov	r2,zero
10001410:	003fec06 	br	100013c4 <__alt_data_end+0xf80013c4>
10001414:	88801415 	stw	r2,80(r17)
10001418:	003fd206 	br	10001364 <__alt_data_end+0xf8001364>
1000141c:	28c00f17 	ldw	r3,60(r5)
10001420:	00ffb316 	blt	zero,r3,100012f0 <__alt_data_end+0xf80012f0>
10001424:	003fd706 	br	10001384 <__alt_data_end+0xf8001384>
10001428:	89400717 	ldw	r5,28(r17)
1000142c:	000d883a 	mov	r6,zero
10001430:	01c00044 	movi	r7,1
10001434:	9809883a 	mov	r4,r19
10001438:	403ee83a 	callr	r8
1000143c:	100d883a 	mov	r6,r2
10001440:	00bfffc4 	movi	r2,-1
10001444:	30801426 	beq	r6,r2,10001498 <__sflush_r+0x1e4>
10001448:	8880030b 	ldhu	r2,12(r17)
1000144c:	8a000a17 	ldw	r8,40(r17)
10001450:	003fae06 	br	1000130c <__alt_data_end+0xf800130c>
10001454:	98c00017 	ldw	r3,0(r19)
10001458:	183fba26 	beq	r3,zero,10001344 <__alt_data_end+0xf8001344>
1000145c:	01000744 	movi	r4,29
10001460:	19000626 	beq	r3,r4,1000147c <__sflush_r+0x1c8>
10001464:	01000584 	movi	r4,22
10001468:	19000426 	beq	r3,r4,1000147c <__sflush_r+0x1c8>
1000146c:	88c0030b 	ldhu	r3,12(r17)
10001470:	18c01014 	ori	r3,r3,64
10001474:	88c0030d 	sth	r3,12(r17)
10001478:	003fc306 	br	10001388 <__alt_data_end+0xf8001388>
1000147c:	8880030b 	ldhu	r2,12(r17)
10001480:	88c00417 	ldw	r3,16(r17)
10001484:	88000115 	stw	zero,4(r17)
10001488:	10bdffcc 	andi	r2,r2,63487
1000148c:	8880030d 	sth	r2,12(r17)
10001490:	88c00015 	stw	r3,0(r17)
10001494:	003fb306 	br	10001364 <__alt_data_end+0xf8001364>
10001498:	98800017 	ldw	r2,0(r19)
1000149c:	103fea26 	beq	r2,zero,10001448 <__alt_data_end+0xf8001448>
100014a0:	00c00744 	movi	r3,29
100014a4:	10c00226 	beq	r2,r3,100014b0 <__sflush_r+0x1fc>
100014a8:	00c00584 	movi	r3,22
100014ac:	10c0031e 	bne	r2,r3,100014bc <__sflush_r+0x208>
100014b0:	9c000015 	stw	r16,0(r19)
100014b4:	0005883a 	mov	r2,zero
100014b8:	003fb306 	br	10001388 <__alt_data_end+0xf8001388>
100014bc:	88c0030b 	ldhu	r3,12(r17)
100014c0:	3005883a 	mov	r2,r6
100014c4:	18c01014 	ori	r3,r3,64
100014c8:	88c0030d 	sth	r3,12(r17)
100014cc:	003fae06 	br	10001388 <__alt_data_end+0xf8001388>

100014d0 <_fflush_r>:
100014d0:	defffd04 	addi	sp,sp,-12
100014d4:	dc000115 	stw	r16,4(sp)
100014d8:	dfc00215 	stw	ra,8(sp)
100014dc:	2021883a 	mov	r16,r4
100014e0:	20000226 	beq	r4,zero,100014ec <_fflush_r+0x1c>
100014e4:	20800e17 	ldw	r2,56(r4)
100014e8:	10000c26 	beq	r2,zero,1000151c <_fflush_r+0x4c>
100014ec:	2880030f 	ldh	r2,12(r5)
100014f0:	1000051e 	bne	r2,zero,10001508 <_fflush_r+0x38>
100014f4:	0005883a 	mov	r2,zero
100014f8:	dfc00217 	ldw	ra,8(sp)
100014fc:	dc000117 	ldw	r16,4(sp)
10001500:	dec00304 	addi	sp,sp,12
10001504:	f800283a 	ret
10001508:	8009883a 	mov	r4,r16
1000150c:	dfc00217 	ldw	ra,8(sp)
10001510:	dc000117 	ldw	r16,4(sp)
10001514:	dec00304 	addi	sp,sp,12
10001518:	00012b41 	jmpi	100012b4 <__sflush_r>
1000151c:	d9400015 	stw	r5,0(sp)
10001520:	00019b40 	call	100019b4 <__sinit>
10001524:	d9400017 	ldw	r5,0(sp)
10001528:	003ff006 	br	100014ec <__alt_data_end+0xf80014ec>

1000152c <fflush>:
1000152c:	20000526 	beq	r4,zero,10001544 <fflush+0x18>
10001530:	00840074 	movhi	r2,4097
10001534:	108ec604 	addi	r2,r2,15128
10001538:	200b883a 	mov	r5,r4
1000153c:	11000017 	ldw	r4,0(r2)
10001540:	00014d01 	jmpi	100014d0 <_fflush_r>
10001544:	00840074 	movhi	r2,4097
10001548:	108ec504 	addi	r2,r2,15124
1000154c:	11000017 	ldw	r4,0(r2)
10001550:	01440034 	movhi	r5,4096
10001554:	29453404 	addi	r5,r5,5328
10001558:	00026f01 	jmpi	100026f0 <_fwalk_reent>

1000155c <_fgetc_r>:
1000155c:	defffd04 	addi	sp,sp,-12
10001560:	dc000115 	stw	r16,4(sp)
10001564:	dfc00215 	stw	ra,8(sp)
10001568:	2021883a 	mov	r16,r4
1000156c:	20000226 	beq	r4,zero,10001578 <_fgetc_r+0x1c>
10001570:	20800e17 	ldw	r2,56(r4)
10001574:	10000c26 	beq	r2,zero,100015a8 <_fgetc_r+0x4c>
10001578:	28800117 	ldw	r2,4(r5)
1000157c:	10bfffc4 	addi	r2,r2,-1
10001580:	28800115 	stw	r2,4(r5)
10001584:	10000c16 	blt	r2,zero,100015b8 <_fgetc_r+0x5c>
10001588:	28800017 	ldw	r2,0(r5)
1000158c:	10c00044 	addi	r3,r2,1
10001590:	28c00015 	stw	r3,0(r5)
10001594:	10800003 	ldbu	r2,0(r2)
10001598:	dfc00217 	ldw	ra,8(sp)
1000159c:	dc000117 	ldw	r16,4(sp)
100015a0:	dec00304 	addi	sp,sp,12
100015a4:	f800283a 	ret
100015a8:	d9400015 	stw	r5,0(sp)
100015ac:	00019b40 	call	100019b4 <__sinit>
100015b0:	d9400017 	ldw	r5,0(sp)
100015b4:	003ff006 	br	10001578 <__alt_data_end+0xf8001578>
100015b8:	8009883a 	mov	r4,r16
100015bc:	dfc00217 	ldw	ra,8(sp)
100015c0:	dc000117 	ldw	r16,4(sp)
100015c4:	dec00304 	addi	sp,sp,12
100015c8:	0003ee81 	jmpi	10003ee8 <__srget_r>

100015cc <fgetc>:
100015cc:	00840074 	movhi	r2,4097
100015d0:	defffd04 	addi	sp,sp,-12
100015d4:	108ec604 	addi	r2,r2,15128
100015d8:	dc400115 	stw	r17,4(sp)
100015dc:	14400017 	ldw	r17,0(r2)
100015e0:	dc000015 	stw	r16,0(sp)
100015e4:	dfc00215 	stw	ra,8(sp)
100015e8:	2021883a 	mov	r16,r4
100015ec:	88000226 	beq	r17,zero,100015f8 <fgetc+0x2c>
100015f0:	88800e17 	ldw	r2,56(r17)
100015f4:	10000d26 	beq	r2,zero,1000162c <fgetc+0x60>
100015f8:	80800117 	ldw	r2,4(r16)
100015fc:	10bfffc4 	addi	r2,r2,-1
10001600:	80800115 	stw	r2,4(r16)
10001604:	10000c16 	blt	r2,zero,10001638 <fgetc+0x6c>
10001608:	80800017 	ldw	r2,0(r16)
1000160c:	10c00044 	addi	r3,r2,1
10001610:	80c00015 	stw	r3,0(r16)
10001614:	10800003 	ldbu	r2,0(r2)
10001618:	dfc00217 	ldw	ra,8(sp)
1000161c:	dc400117 	ldw	r17,4(sp)
10001620:	dc000017 	ldw	r16,0(sp)
10001624:	dec00304 	addi	sp,sp,12
10001628:	f800283a 	ret
1000162c:	8809883a 	mov	r4,r17
10001630:	00019b40 	call	100019b4 <__sinit>
10001634:	003ff006 	br	100015f8 <__alt_data_end+0xf80015f8>
10001638:	800b883a 	mov	r5,r16
1000163c:	8809883a 	mov	r4,r17
10001640:	dfc00217 	ldw	ra,8(sp)
10001644:	dc400117 	ldw	r17,4(sp)
10001648:	dc000017 	ldw	r16,0(sp)
1000164c:	dec00304 	addi	sp,sp,12
10001650:	0003ee81 	jmpi	10003ee8 <__srget_r>

10001654 <__fp_unlock>:
10001654:	0005883a 	mov	r2,zero
10001658:	f800283a 	ret

1000165c <_cleanup_r>:
1000165c:	01440034 	movhi	r5,4096
10001660:	29446c04 	addi	r5,r5,4528
10001664:	00026f01 	jmpi	100026f0 <_fwalk_reent>

10001668 <__sinit.part.1>:
10001668:	defff704 	addi	sp,sp,-36
1000166c:	00c40034 	movhi	r3,4096
10001670:	dfc00815 	stw	ra,32(sp)
10001674:	ddc00715 	stw	r23,28(sp)
10001678:	dd800615 	stw	r22,24(sp)
1000167c:	dd400515 	stw	r21,20(sp)
10001680:	dd000415 	stw	r20,16(sp)
10001684:	dcc00315 	stw	r19,12(sp)
10001688:	dc800215 	stw	r18,8(sp)
1000168c:	dc400115 	stw	r17,4(sp)
10001690:	dc000015 	stw	r16,0(sp)
10001694:	18c59704 	addi	r3,r3,5724
10001698:	24000117 	ldw	r16,4(r4)
1000169c:	20c00f15 	stw	r3,60(r4)
100016a0:	2080bb04 	addi	r2,r4,748
100016a4:	00c000c4 	movi	r3,3
100016a8:	20c0b915 	stw	r3,740(r4)
100016ac:	2080ba15 	stw	r2,744(r4)
100016b0:	2000b815 	stw	zero,736(r4)
100016b4:	05c00204 	movi	r23,8
100016b8:	00800104 	movi	r2,4
100016bc:	2025883a 	mov	r18,r4
100016c0:	b80d883a 	mov	r6,r23
100016c4:	81001704 	addi	r4,r16,92
100016c8:	000b883a 	mov	r5,zero
100016cc:	80000015 	stw	zero,0(r16)
100016d0:	80000115 	stw	zero,4(r16)
100016d4:	80000215 	stw	zero,8(r16)
100016d8:	8080030d 	sth	r2,12(r16)
100016dc:	80001915 	stw	zero,100(r16)
100016e0:	8000038d 	sth	zero,14(r16)
100016e4:	80000415 	stw	zero,16(r16)
100016e8:	80000515 	stw	zero,20(r16)
100016ec:	80000615 	stw	zero,24(r16)
100016f0:	00034f40 	call	100034f4 <memset>
100016f4:	05840034 	movhi	r22,4096
100016f8:	94400217 	ldw	r17,8(r18)
100016fc:	05440034 	movhi	r21,4096
10001700:	05040034 	movhi	r20,4096
10001704:	04c40034 	movhi	r19,4096
10001708:	b58ff104 	addi	r22,r22,16324
1000170c:	ad500804 	addi	r21,r21,16416
10001710:	a5102704 	addi	r20,r20,16540
10001714:	9cd03e04 	addi	r19,r19,16632
10001718:	85800815 	stw	r22,32(r16)
1000171c:	85400915 	stw	r21,36(r16)
10001720:	85000a15 	stw	r20,40(r16)
10001724:	84c00b15 	stw	r19,44(r16)
10001728:	84000715 	stw	r16,28(r16)
1000172c:	00800284 	movi	r2,10
10001730:	8880030d 	sth	r2,12(r17)
10001734:	00800044 	movi	r2,1
10001738:	b80d883a 	mov	r6,r23
1000173c:	89001704 	addi	r4,r17,92
10001740:	000b883a 	mov	r5,zero
10001744:	88000015 	stw	zero,0(r17)
10001748:	88000115 	stw	zero,4(r17)
1000174c:	88000215 	stw	zero,8(r17)
10001750:	88001915 	stw	zero,100(r17)
10001754:	8880038d 	sth	r2,14(r17)
10001758:	88000415 	stw	zero,16(r17)
1000175c:	88000515 	stw	zero,20(r17)
10001760:	88000615 	stw	zero,24(r17)
10001764:	00034f40 	call	100034f4 <memset>
10001768:	94000317 	ldw	r16,12(r18)
1000176c:	00800484 	movi	r2,18
10001770:	8c400715 	stw	r17,28(r17)
10001774:	8d800815 	stw	r22,32(r17)
10001778:	8d400915 	stw	r21,36(r17)
1000177c:	8d000a15 	stw	r20,40(r17)
10001780:	8cc00b15 	stw	r19,44(r17)
10001784:	8080030d 	sth	r2,12(r16)
10001788:	00800084 	movi	r2,2
1000178c:	80000015 	stw	zero,0(r16)
10001790:	80000115 	stw	zero,4(r16)
10001794:	80000215 	stw	zero,8(r16)
10001798:	80001915 	stw	zero,100(r16)
1000179c:	8080038d 	sth	r2,14(r16)
100017a0:	80000415 	stw	zero,16(r16)
100017a4:	80000515 	stw	zero,20(r16)
100017a8:	80000615 	stw	zero,24(r16)
100017ac:	b80d883a 	mov	r6,r23
100017b0:	000b883a 	mov	r5,zero
100017b4:	81001704 	addi	r4,r16,92
100017b8:	00034f40 	call	100034f4 <memset>
100017bc:	00800044 	movi	r2,1
100017c0:	84000715 	stw	r16,28(r16)
100017c4:	85800815 	stw	r22,32(r16)
100017c8:	85400915 	stw	r21,36(r16)
100017cc:	85000a15 	stw	r20,40(r16)
100017d0:	84c00b15 	stw	r19,44(r16)
100017d4:	90800e15 	stw	r2,56(r18)
100017d8:	dfc00817 	ldw	ra,32(sp)
100017dc:	ddc00717 	ldw	r23,28(sp)
100017e0:	dd800617 	ldw	r22,24(sp)
100017e4:	dd400517 	ldw	r21,20(sp)
100017e8:	dd000417 	ldw	r20,16(sp)
100017ec:	dcc00317 	ldw	r19,12(sp)
100017f0:	dc800217 	ldw	r18,8(sp)
100017f4:	dc400117 	ldw	r17,4(sp)
100017f8:	dc000017 	ldw	r16,0(sp)
100017fc:	dec00904 	addi	sp,sp,36
10001800:	f800283a 	ret

10001804 <__fp_lock>:
10001804:	0005883a 	mov	r2,zero
10001808:	f800283a 	ret

1000180c <__sfmoreglue>:
1000180c:	defffc04 	addi	sp,sp,-16
10001810:	dc800215 	stw	r18,8(sp)
10001814:	2825883a 	mov	r18,r5
10001818:	dc000015 	stw	r16,0(sp)
1000181c:	01401a04 	movi	r5,104
10001820:	2021883a 	mov	r16,r4
10001824:	913fffc4 	addi	r4,r18,-1
10001828:	dfc00315 	stw	ra,12(sp)
1000182c:	dc400115 	stw	r17,4(sp)
10001830:	00010d40 	call	100010d4 <__mulsi3>
10001834:	8009883a 	mov	r4,r16
10001838:	11401d04 	addi	r5,r2,116
1000183c:	1023883a 	mov	r17,r2
10001840:	0002ba00 	call	10002ba0 <_malloc_r>
10001844:	1021883a 	mov	r16,r2
10001848:	10000726 	beq	r2,zero,10001868 <__sfmoreglue+0x5c>
1000184c:	11000304 	addi	r4,r2,12
10001850:	10000015 	stw	zero,0(r2)
10001854:	14800115 	stw	r18,4(r2)
10001858:	11000215 	stw	r4,8(r2)
1000185c:	89801a04 	addi	r6,r17,104
10001860:	000b883a 	mov	r5,zero
10001864:	00034f40 	call	100034f4 <memset>
10001868:	8005883a 	mov	r2,r16
1000186c:	dfc00317 	ldw	ra,12(sp)
10001870:	dc800217 	ldw	r18,8(sp)
10001874:	dc400117 	ldw	r17,4(sp)
10001878:	dc000017 	ldw	r16,0(sp)
1000187c:	dec00404 	addi	sp,sp,16
10001880:	f800283a 	ret

10001884 <__sfp>:
10001884:	defffb04 	addi	sp,sp,-20
10001888:	dc000015 	stw	r16,0(sp)
1000188c:	04040074 	movhi	r16,4097
10001890:	840ec504 	addi	r16,r16,15124
10001894:	dcc00315 	stw	r19,12(sp)
10001898:	2027883a 	mov	r19,r4
1000189c:	81000017 	ldw	r4,0(r16)
100018a0:	dfc00415 	stw	ra,16(sp)
100018a4:	dc800215 	stw	r18,8(sp)
100018a8:	20800e17 	ldw	r2,56(r4)
100018ac:	dc400115 	stw	r17,4(sp)
100018b0:	1000021e 	bne	r2,zero,100018bc <__sfp+0x38>
100018b4:	00016680 	call	10001668 <__sinit.part.1>
100018b8:	81000017 	ldw	r4,0(r16)
100018bc:	2480b804 	addi	r18,r4,736
100018c0:	047fffc4 	movi	r17,-1
100018c4:	91000117 	ldw	r4,4(r18)
100018c8:	94000217 	ldw	r16,8(r18)
100018cc:	213fffc4 	addi	r4,r4,-1
100018d0:	20000a16 	blt	r4,zero,100018fc <__sfp+0x78>
100018d4:	8080030f 	ldh	r2,12(r16)
100018d8:	10000c26 	beq	r2,zero,1000190c <__sfp+0x88>
100018dc:	80c01d04 	addi	r3,r16,116
100018e0:	00000206 	br	100018ec <__sfp+0x68>
100018e4:	18bfe60f 	ldh	r2,-104(r3)
100018e8:	10000826 	beq	r2,zero,1000190c <__sfp+0x88>
100018ec:	213fffc4 	addi	r4,r4,-1
100018f0:	1c3ffd04 	addi	r16,r3,-12
100018f4:	18c01a04 	addi	r3,r3,104
100018f8:	247ffa1e 	bne	r4,r17,100018e4 <__alt_data_end+0xf80018e4>
100018fc:	90800017 	ldw	r2,0(r18)
10001900:	10001d26 	beq	r2,zero,10001978 <__sfp+0xf4>
10001904:	1025883a 	mov	r18,r2
10001908:	003fee06 	br	100018c4 <__alt_data_end+0xf80018c4>
1000190c:	00bfffc4 	movi	r2,-1
10001910:	8080038d 	sth	r2,14(r16)
10001914:	00800044 	movi	r2,1
10001918:	8080030d 	sth	r2,12(r16)
1000191c:	80001915 	stw	zero,100(r16)
10001920:	80000015 	stw	zero,0(r16)
10001924:	80000215 	stw	zero,8(r16)
10001928:	80000115 	stw	zero,4(r16)
1000192c:	80000415 	stw	zero,16(r16)
10001930:	80000515 	stw	zero,20(r16)
10001934:	80000615 	stw	zero,24(r16)
10001938:	01800204 	movi	r6,8
1000193c:	000b883a 	mov	r5,zero
10001940:	81001704 	addi	r4,r16,92
10001944:	00034f40 	call	100034f4 <memset>
10001948:	8005883a 	mov	r2,r16
1000194c:	80000c15 	stw	zero,48(r16)
10001950:	80000d15 	stw	zero,52(r16)
10001954:	80001115 	stw	zero,68(r16)
10001958:	80001215 	stw	zero,72(r16)
1000195c:	dfc00417 	ldw	ra,16(sp)
10001960:	dcc00317 	ldw	r19,12(sp)
10001964:	dc800217 	ldw	r18,8(sp)
10001968:	dc400117 	ldw	r17,4(sp)
1000196c:	dc000017 	ldw	r16,0(sp)
10001970:	dec00504 	addi	sp,sp,20
10001974:	f800283a 	ret
10001978:	01400104 	movi	r5,4
1000197c:	9809883a 	mov	r4,r19
10001980:	000180c0 	call	1000180c <__sfmoreglue>
10001984:	90800015 	stw	r2,0(r18)
10001988:	103fde1e 	bne	r2,zero,10001904 <__alt_data_end+0xf8001904>
1000198c:	00800304 	movi	r2,12
10001990:	98800015 	stw	r2,0(r19)
10001994:	0005883a 	mov	r2,zero
10001998:	003ff006 	br	1000195c <__alt_data_end+0xf800195c>

1000199c <_cleanup>:
1000199c:	00840074 	movhi	r2,4097
100019a0:	108ec504 	addi	r2,r2,15124
100019a4:	11000017 	ldw	r4,0(r2)
100019a8:	01440034 	movhi	r5,4096
100019ac:	29446c04 	addi	r5,r5,4528
100019b0:	00026f01 	jmpi	100026f0 <_fwalk_reent>

100019b4 <__sinit>:
100019b4:	20800e17 	ldw	r2,56(r4)
100019b8:	10000126 	beq	r2,zero,100019c0 <__sinit+0xc>
100019bc:	f800283a 	ret
100019c0:	00016681 	jmpi	10001668 <__sinit.part.1>

100019c4 <__sfp_lock_acquire>:
100019c4:	f800283a 	ret

100019c8 <__sfp_lock_release>:
100019c8:	f800283a 	ret

100019cc <__sinit_lock_acquire>:
100019cc:	f800283a 	ret

100019d0 <__sinit_lock_release>:
100019d0:	f800283a 	ret

100019d4 <__fp_lock_all>:
100019d4:	00840074 	movhi	r2,4097
100019d8:	108ec604 	addi	r2,r2,15128
100019dc:	11000017 	ldw	r4,0(r2)
100019e0:	01440034 	movhi	r5,4096
100019e4:	29460104 	addi	r5,r5,6148
100019e8:	000262c1 	jmpi	1000262c <_fwalk>

100019ec <__fp_unlock_all>:
100019ec:	00840074 	movhi	r2,4097
100019f0:	108ec604 	addi	r2,r2,15128
100019f4:	11000017 	ldw	r4,0(r2)
100019f8:	01440034 	movhi	r5,4096
100019fc:	29459504 	addi	r5,r5,5716
10001a00:	000262c1 	jmpi	1000262c <_fwalk>

10001a04 <_fiprintf_r>:
10001a04:	defffe04 	addi	sp,sp,-8
10001a08:	dfc00015 	stw	ra,0(sp)
10001a0c:	d9c00115 	stw	r7,4(sp)
10001a10:	d9c00104 	addi	r7,sp,4
10001a14:	00044180 	call	10004418 <_vfiprintf_r>
10001a18:	dfc00017 	ldw	ra,0(sp)
10001a1c:	dec00204 	addi	sp,sp,8
10001a20:	f800283a 	ret

10001a24 <fiprintf>:
10001a24:	defffd04 	addi	sp,sp,-12
10001a28:	2005883a 	mov	r2,r4
10001a2c:	dfc00015 	stw	ra,0(sp)
10001a30:	d9800115 	stw	r6,4(sp)
10001a34:	d9c00215 	stw	r7,8(sp)
10001a38:	00c40074 	movhi	r3,4097
10001a3c:	18cec604 	addi	r3,r3,15128
10001a40:	19000017 	ldw	r4,0(r3)
10001a44:	280d883a 	mov	r6,r5
10001a48:	d9c00104 	addi	r7,sp,4
10001a4c:	100b883a 	mov	r5,r2
10001a50:	00044180 	call	10004418 <_vfiprintf_r>
10001a54:	dfc00017 	ldw	ra,0(sp)
10001a58:	dec00304 	addi	sp,sp,12
10001a5c:	f800283a 	ret

10001a60 <_fprintf_r>:
10001a60:	defffe04 	addi	sp,sp,-8
10001a64:	2809883a 	mov	r4,r5
10001a68:	300b883a 	mov	r5,r6
10001a6c:	dfc00015 	stw	ra,0(sp)
10001a70:	d9c00115 	stw	r7,4(sp)
10001a74:	d9800104 	addi	r6,sp,4
10001a78:	000670c0 	call	1000670c <__vfprintf_internal>
10001a7c:	dfc00017 	ldw	ra,0(sp)
10001a80:	dec00204 	addi	sp,sp,8
10001a84:	f800283a 	ret

10001a88 <fprintf>:
10001a88:	defffd04 	addi	sp,sp,-12
10001a8c:	dfc00015 	stw	ra,0(sp)
10001a90:	d9800115 	stw	r6,4(sp)
10001a94:	d9c00215 	stw	r7,8(sp)
10001a98:	d9800104 	addi	r6,sp,4
10001a9c:	000670c0 	call	1000670c <__vfprintf_internal>
10001aa0:	dfc00017 	ldw	ra,0(sp)
10001aa4:	dec00304 	addi	sp,sp,12
10001aa8:	f800283a 	ret

10001aac <_fread_r>:
10001aac:	defff404 	addi	sp,sp,-48
10001ab0:	dd000615 	stw	r20,24(sp)
10001ab4:	dcc00515 	stw	r19,20(sp)
10001ab8:	2029883a 	mov	r20,r4
10001abc:	2827883a 	mov	r19,r5
10001ac0:	3809883a 	mov	r4,r7
10001ac4:	300b883a 	mov	r5,r6
10001ac8:	ddc00915 	stw	r23,36(sp)
10001acc:	dd400715 	stw	r21,28(sp)
10001ad0:	dc000215 	stw	r16,8(sp)
10001ad4:	dfc00b15 	stw	ra,44(sp)
10001ad8:	df000a15 	stw	fp,40(sp)
10001adc:	dd800815 	stw	r22,32(sp)
10001ae0:	dc800415 	stw	r18,16(sp)
10001ae4:	dc400315 	stw	r17,12(sp)
10001ae8:	302f883a 	mov	r23,r6
10001aec:	382b883a 	mov	r21,r7
10001af0:	00010d40 	call	100010d4 <__mulsi3>
10001af4:	dc000c17 	ldw	r16,48(sp)
10001af8:	10003826 	beq	r2,zero,10001bdc <_fread_r+0x130>
10001afc:	102d883a 	mov	r22,r2
10001b00:	a0000226 	beq	r20,zero,10001b0c <_fread_r+0x60>
10001b04:	a0800e17 	ldw	r2,56(r20)
10001b08:	10006e26 	beq	r2,zero,10001cc4 <_fread_r+0x218>
10001b0c:	8080030b 	ldhu	r2,12(r16)
10001b10:	10c8000c 	andi	r3,r2,8192
10001b14:	1800061e 	bne	r3,zero,10001b30 <_fread_r+0x84>
10001b18:	81001917 	ldw	r4,100(r16)
10001b1c:	00f7ffc4 	movi	r3,-8193
10001b20:	10880014 	ori	r2,r2,8192
10001b24:	20c6703a 	and	r3,r4,r3
10001b28:	8080030d 	sth	r2,12(r16)
10001b2c:	80c01915 	stw	r3,100(r16)
10001b30:	84400117 	ldw	r17,4(r16)
10001b34:	88005f16 	blt	r17,zero,10001cb4 <_fread_r+0x208>
10001b38:	8809883a 	mov	r4,r17
10001b3c:	1080008c 	andi	r2,r2,2
10001b40:	1000281e 	bne	r2,zero,10001be4 <_fread_r+0x138>
10001b44:	b025883a 	mov	r18,r22
10001b48:	00000b06 	br	10001b78 <_fread_r+0xcc>
10001b4c:	00033ac0 	call	100033ac <memcpy>
10001b50:	80800017 	ldw	r2,0(r16)
10001b54:	9c67883a 	add	r19,r19,r17
10001b58:	9465c83a 	sub	r18,r18,r17
10001b5c:	1463883a 	add	r17,r2,r17
10001b60:	800b883a 	mov	r5,r16
10001b64:	a009883a 	mov	r4,r20
10001b68:	84400015 	stw	r17,0(r16)
10001b6c:	0003d140 	call	10003d14 <__srefill_r>
10001b70:	10004c1e 	bne	r2,zero,10001ca4 <_fread_r+0x1f8>
10001b74:	84400117 	ldw	r17,4(r16)
10001b78:	880d883a 	mov	r6,r17
10001b7c:	9809883a 	mov	r4,r19
10001b80:	81400017 	ldw	r5,0(r16)
10001b84:	8cbff136 	bltu	r17,r18,10001b4c <__alt_data_end+0xf8001b4c>
10001b88:	900d883a 	mov	r6,r18
10001b8c:	00033ac0 	call	100033ac <memcpy>
10001b90:	80c00117 	ldw	r3,4(r16)
10001b94:	81000017 	ldw	r4,0(r16)
10001b98:	a805883a 	mov	r2,r21
10001b9c:	1c87c83a 	sub	r3,r3,r18
10001ba0:	24a5883a 	add	r18,r4,r18
10001ba4:	80c00115 	stw	r3,4(r16)
10001ba8:	84800015 	stw	r18,0(r16)
10001bac:	dfc00b17 	ldw	ra,44(sp)
10001bb0:	df000a17 	ldw	fp,40(sp)
10001bb4:	ddc00917 	ldw	r23,36(sp)
10001bb8:	dd800817 	ldw	r22,32(sp)
10001bbc:	dd400717 	ldw	r21,28(sp)
10001bc0:	dd000617 	ldw	r20,24(sp)
10001bc4:	dcc00517 	ldw	r19,20(sp)
10001bc8:	dc800417 	ldw	r18,16(sp)
10001bcc:	dc400317 	ldw	r17,12(sp)
10001bd0:	dc000217 	ldw	r16,8(sp)
10001bd4:	dec00c04 	addi	sp,sp,48
10001bd8:	f800283a 	ret
10001bdc:	0005883a 	mov	r2,zero
10001be0:	003ff206 	br	10001bac <__alt_data_end+0xf8001bac>
10001be4:	b007883a 	mov	r3,r22
10001be8:	2580012e 	bgeu	r4,r22,10001bf0 <_fread_r+0x144>
10001bec:	2007883a 	mov	r3,r4
10001bf0:	81400017 	ldw	r5,0(r16)
10001bf4:	180d883a 	mov	r6,r3
10001bf8:	9809883a 	mov	r4,r19
10001bfc:	d8c00115 	stw	r3,4(sp)
10001c00:	00033ac0 	call	100033ac <memcpy>
10001c04:	d8c00117 	ldw	r3,4(sp)
10001c08:	84400017 	ldw	r17,0(r16)
10001c0c:	80800117 	ldw	r2,4(r16)
10001c10:	81400c17 	ldw	r5,48(r16)
10001c14:	88e3883a 	add	r17,r17,r3
10001c18:	10c5c83a 	sub	r2,r2,r3
10001c1c:	84400015 	stw	r17,0(r16)
10001c20:	80800115 	stw	r2,4(r16)
10001c24:	b0e5c83a 	sub	r18,r22,r3
10001c28:	28002c26 	beq	r5,zero,10001cdc <_fread_r+0x230>
10001c2c:	90002c26 	beq	r18,zero,10001ce0 <_fread_r+0x234>
10001c30:	80801004 	addi	r2,r16,64
10001c34:	28800526 	beq	r5,r2,10001c4c <_fread_r+0x1a0>
10001c38:	a009883a 	mov	r4,r20
10001c3c:	d8c00115 	stw	r3,4(sp)
10001c40:	0001e400 	call	10001e40 <_free_r>
10001c44:	d8c00117 	ldw	r3,4(sp)
10001c48:	84400017 	ldw	r17,0(r16)
10001c4c:	80000c15 	stw	zero,48(r16)
10001c50:	80800517 	ldw	r2,20(r16)
10001c54:	87000417 	ldw	fp,16(r16)
10001c58:	98e7883a 	add	r19,r19,r3
10001c5c:	d8800015 	stw	r2,0(sp)
10001c60:	00000106 	br	10001c68 <_fread_r+0x1bc>
10001c64:	90001e26 	beq	r18,zero,10001ce0 <_fread_r+0x234>
10001c68:	84c00415 	stw	r19,16(r16)
10001c6c:	84800515 	stw	r18,20(r16)
10001c70:	84c00015 	stw	r19,0(r16)
10001c74:	a009883a 	mov	r4,r20
10001c78:	800b883a 	mov	r5,r16
10001c7c:	0003d140 	call	10003d14 <__srefill_r>
10001c80:	d9000017 	ldw	r4,0(sp)
10001c84:	80c00117 	ldw	r3,4(r16)
10001c88:	87000415 	stw	fp,16(r16)
10001c8c:	81000515 	stw	r4,20(r16)
10001c90:	84400015 	stw	r17,0(r16)
10001c94:	80000115 	stw	zero,4(r16)
10001c98:	90e5c83a 	sub	r18,r18,r3
10001c9c:	98e7883a 	add	r19,r19,r3
10001ca0:	103ff026 	beq	r2,zero,10001c64 <__alt_data_end+0xf8001c64>
10001ca4:	b80b883a 	mov	r5,r23
10001ca8:	b489c83a 	sub	r4,r22,r18
10001cac:	00010180 	call	10001018 <__udivsi3>
10001cb0:	003fbe06 	br	10001bac <__alt_data_end+0xf8001bac>
10001cb4:	80000115 	stw	zero,4(r16)
10001cb8:	0009883a 	mov	r4,zero
10001cbc:	0023883a 	mov	r17,zero
10001cc0:	003f9e06 	br	10001b3c <__alt_data_end+0xf8001b3c>
10001cc4:	a009883a 	mov	r4,r20
10001cc8:	00019b40 	call	100019b4 <__sinit>
10001ccc:	8080030b 	ldhu	r2,12(r16)
10001cd0:	10c8000c 	andi	r3,r2,8192
10001cd4:	183f961e 	bne	r3,zero,10001b30 <__alt_data_end+0xf8001b30>
10001cd8:	003f8f06 	br	10001b18 <__alt_data_end+0xf8001b18>
10001cdc:	903fdc1e 	bne	r18,zero,10001c50 <__alt_data_end+0xf8001c50>
10001ce0:	a805883a 	mov	r2,r21
10001ce4:	003fb106 	br	10001bac <__alt_data_end+0xf8001bac>

10001ce8 <fread>:
10001ce8:	defffe04 	addi	sp,sp,-8
10001cec:	00840074 	movhi	r2,4097
10001cf0:	d9c00015 	stw	r7,0(sp)
10001cf4:	108ec604 	addi	r2,r2,15128
10001cf8:	300f883a 	mov	r7,r6
10001cfc:	280d883a 	mov	r6,r5
10001d00:	200b883a 	mov	r5,r4
10001d04:	11000017 	ldw	r4,0(r2)
10001d08:	dfc00115 	stw	ra,4(sp)
10001d0c:	0001aac0 	call	10001aac <_fread_r>
10001d10:	dfc00117 	ldw	ra,4(sp)
10001d14:	dec00204 	addi	sp,sp,8
10001d18:	f800283a 	ret

10001d1c <_malloc_trim_r>:
10001d1c:	defffb04 	addi	sp,sp,-20
10001d20:	dcc00315 	stw	r19,12(sp)
10001d24:	04c40074 	movhi	r19,4097
10001d28:	dc800215 	stw	r18,8(sp)
10001d2c:	dc400115 	stw	r17,4(sp)
10001d30:	dc000015 	stw	r16,0(sp)
10001d34:	dfc00415 	stw	ra,16(sp)
10001d38:	2821883a 	mov	r16,r5
10001d3c:	9cc92004 	addi	r19,r19,9344
10001d40:	2025883a 	mov	r18,r4
10001d44:	000fc7c0 	call	1000fc7c <__malloc_lock>
10001d48:	98800217 	ldw	r2,8(r19)
10001d4c:	14400117 	ldw	r17,4(r2)
10001d50:	00bfff04 	movi	r2,-4
10001d54:	88a2703a 	and	r17,r17,r2
10001d58:	8c21c83a 	sub	r16,r17,r16
10001d5c:	8403fbc4 	addi	r16,r16,4079
10001d60:	8020d33a 	srli	r16,r16,12
10001d64:	0083ffc4 	movi	r2,4095
10001d68:	843fffc4 	addi	r16,r16,-1
10001d6c:	8020933a 	slli	r16,r16,12
10001d70:	1400060e 	bge	r2,r16,10001d8c <_malloc_trim_r+0x70>
10001d74:	000b883a 	mov	r5,zero
10001d78:	9009883a 	mov	r4,r18
10001d7c:	0003f700 	call	10003f70 <_sbrk_r>
10001d80:	98c00217 	ldw	r3,8(r19)
10001d84:	1c47883a 	add	r3,r3,r17
10001d88:	10c00a26 	beq	r2,r3,10001db4 <_malloc_trim_r+0x98>
10001d8c:	9009883a 	mov	r4,r18
10001d90:	000fca00 	call	1000fca0 <__malloc_unlock>
10001d94:	0005883a 	mov	r2,zero
10001d98:	dfc00417 	ldw	ra,16(sp)
10001d9c:	dcc00317 	ldw	r19,12(sp)
10001da0:	dc800217 	ldw	r18,8(sp)
10001da4:	dc400117 	ldw	r17,4(sp)
10001da8:	dc000017 	ldw	r16,0(sp)
10001dac:	dec00504 	addi	sp,sp,20
10001db0:	f800283a 	ret
10001db4:	040bc83a 	sub	r5,zero,r16
10001db8:	9009883a 	mov	r4,r18
10001dbc:	0003f700 	call	10003f70 <_sbrk_r>
10001dc0:	00ffffc4 	movi	r3,-1
10001dc4:	10c00d26 	beq	r2,r3,10001dfc <_malloc_trim_r+0xe0>
10001dc8:	00c40074 	movhi	r3,4097
10001dcc:	18d5a204 	addi	r3,r3,22152
10001dd0:	18800017 	ldw	r2,0(r3)
10001dd4:	99000217 	ldw	r4,8(r19)
10001dd8:	8c23c83a 	sub	r17,r17,r16
10001ddc:	8c400054 	ori	r17,r17,1
10001de0:	1421c83a 	sub	r16,r2,r16
10001de4:	24400115 	stw	r17,4(r4)
10001de8:	9009883a 	mov	r4,r18
10001dec:	1c000015 	stw	r16,0(r3)
10001df0:	000fca00 	call	1000fca0 <__malloc_unlock>
10001df4:	00800044 	movi	r2,1
10001df8:	003fe706 	br	10001d98 <__alt_data_end+0xf8001d98>
10001dfc:	000b883a 	mov	r5,zero
10001e00:	9009883a 	mov	r4,r18
10001e04:	0003f700 	call	10003f70 <_sbrk_r>
10001e08:	99000217 	ldw	r4,8(r19)
10001e0c:	014003c4 	movi	r5,15
10001e10:	1107c83a 	sub	r3,r2,r4
10001e14:	28ffdd0e 	bge	r5,r3,10001d8c <__alt_data_end+0xf8001d8c>
10001e18:	01440074 	movhi	r5,4097
10001e1c:	294ec704 	addi	r5,r5,15132
10001e20:	29400017 	ldw	r5,0(r5)
10001e24:	18c00054 	ori	r3,r3,1
10001e28:	20c00115 	stw	r3,4(r4)
10001e2c:	00c40074 	movhi	r3,4097
10001e30:	1145c83a 	sub	r2,r2,r5
10001e34:	18d5a204 	addi	r3,r3,22152
10001e38:	18800015 	stw	r2,0(r3)
10001e3c:	003fd306 	br	10001d8c <__alt_data_end+0xf8001d8c>

10001e40 <_free_r>:
10001e40:	28004126 	beq	r5,zero,10001f48 <_free_r+0x108>
10001e44:	defffd04 	addi	sp,sp,-12
10001e48:	dc400115 	stw	r17,4(sp)
10001e4c:	dc000015 	stw	r16,0(sp)
10001e50:	2023883a 	mov	r17,r4
10001e54:	2821883a 	mov	r16,r5
10001e58:	dfc00215 	stw	ra,8(sp)
10001e5c:	000fc7c0 	call	1000fc7c <__malloc_lock>
10001e60:	81ffff17 	ldw	r7,-4(r16)
10001e64:	00bfff84 	movi	r2,-2
10001e68:	01040074 	movhi	r4,4097
10001e6c:	81bffe04 	addi	r6,r16,-8
10001e70:	3884703a 	and	r2,r7,r2
10001e74:	21092004 	addi	r4,r4,9344
10001e78:	308b883a 	add	r5,r6,r2
10001e7c:	2a400117 	ldw	r9,4(r5)
10001e80:	22000217 	ldw	r8,8(r4)
10001e84:	00ffff04 	movi	r3,-4
10001e88:	48c6703a 	and	r3,r9,r3
10001e8c:	2a005726 	beq	r5,r8,10001fec <_free_r+0x1ac>
10001e90:	28c00115 	stw	r3,4(r5)
10001e94:	39c0004c 	andi	r7,r7,1
10001e98:	3800091e 	bne	r7,zero,10001ec0 <_free_r+0x80>
10001e9c:	823ffe17 	ldw	r8,-8(r16)
10001ea0:	22400204 	addi	r9,r4,8
10001ea4:	320dc83a 	sub	r6,r6,r8
10001ea8:	31c00217 	ldw	r7,8(r6)
10001eac:	1205883a 	add	r2,r2,r8
10001eb0:	3a406526 	beq	r7,r9,10002048 <_free_r+0x208>
10001eb4:	32000317 	ldw	r8,12(r6)
10001eb8:	3a000315 	stw	r8,12(r7)
10001ebc:	41c00215 	stw	r7,8(r8)
10001ec0:	28cf883a 	add	r7,r5,r3
10001ec4:	39c00117 	ldw	r7,4(r7)
10001ec8:	39c0004c 	andi	r7,r7,1
10001ecc:	38003a26 	beq	r7,zero,10001fb8 <_free_r+0x178>
10001ed0:	10c00054 	ori	r3,r2,1
10001ed4:	30c00115 	stw	r3,4(r6)
10001ed8:	3087883a 	add	r3,r6,r2
10001edc:	18800015 	stw	r2,0(r3)
10001ee0:	00c07fc4 	movi	r3,511
10001ee4:	18801936 	bltu	r3,r2,10001f4c <_free_r+0x10c>
10001ee8:	1004d0fa 	srli	r2,r2,3
10001eec:	01c00044 	movi	r7,1
10001ef0:	21400117 	ldw	r5,4(r4)
10001ef4:	10c00044 	addi	r3,r2,1
10001ef8:	18c7883a 	add	r3,r3,r3
10001efc:	1005d0ba 	srai	r2,r2,2
10001f00:	18c7883a 	add	r3,r3,r3
10001f04:	18c7883a 	add	r3,r3,r3
10001f08:	1907883a 	add	r3,r3,r4
10001f0c:	3884983a 	sll	r2,r7,r2
10001f10:	19c00017 	ldw	r7,0(r3)
10001f14:	1a3ffe04 	addi	r8,r3,-8
10001f18:	1144b03a 	or	r2,r2,r5
10001f1c:	32000315 	stw	r8,12(r6)
10001f20:	31c00215 	stw	r7,8(r6)
10001f24:	20800115 	stw	r2,4(r4)
10001f28:	19800015 	stw	r6,0(r3)
10001f2c:	39800315 	stw	r6,12(r7)
10001f30:	8809883a 	mov	r4,r17
10001f34:	dfc00217 	ldw	ra,8(sp)
10001f38:	dc400117 	ldw	r17,4(sp)
10001f3c:	dc000017 	ldw	r16,0(sp)
10001f40:	dec00304 	addi	sp,sp,12
10001f44:	000fca01 	jmpi	1000fca0 <__malloc_unlock>
10001f48:	f800283a 	ret
10001f4c:	100ad27a 	srli	r5,r2,9
10001f50:	00c00104 	movi	r3,4
10001f54:	19404a36 	bltu	r3,r5,10002080 <_free_r+0x240>
10001f58:	100ad1ba 	srli	r5,r2,6
10001f5c:	28c00e44 	addi	r3,r5,57
10001f60:	18c7883a 	add	r3,r3,r3
10001f64:	29400e04 	addi	r5,r5,56
10001f68:	18c7883a 	add	r3,r3,r3
10001f6c:	18c7883a 	add	r3,r3,r3
10001f70:	1909883a 	add	r4,r3,r4
10001f74:	20c00017 	ldw	r3,0(r4)
10001f78:	01c40074 	movhi	r7,4097
10001f7c:	213ffe04 	addi	r4,r4,-8
10001f80:	39c92004 	addi	r7,r7,9344
10001f84:	20c04426 	beq	r4,r3,10002098 <_free_r+0x258>
10001f88:	01ffff04 	movi	r7,-4
10001f8c:	19400117 	ldw	r5,4(r3)
10001f90:	29ca703a 	and	r5,r5,r7
10001f94:	1140022e 	bgeu	r2,r5,10001fa0 <_free_r+0x160>
10001f98:	18c00217 	ldw	r3,8(r3)
10001f9c:	20fffb1e 	bne	r4,r3,10001f8c <__alt_data_end+0xf8001f8c>
10001fa0:	19000317 	ldw	r4,12(r3)
10001fa4:	31000315 	stw	r4,12(r6)
10001fa8:	30c00215 	stw	r3,8(r6)
10001fac:	21800215 	stw	r6,8(r4)
10001fb0:	19800315 	stw	r6,12(r3)
10001fb4:	003fde06 	br	10001f30 <__alt_data_end+0xf8001f30>
10001fb8:	29c00217 	ldw	r7,8(r5)
10001fbc:	10c5883a 	add	r2,r2,r3
10001fc0:	00c40074 	movhi	r3,4097
10001fc4:	18c92204 	addi	r3,r3,9352
10001fc8:	38c03b26 	beq	r7,r3,100020b8 <_free_r+0x278>
10001fcc:	2a000317 	ldw	r8,12(r5)
10001fd0:	11400054 	ori	r5,r2,1
10001fd4:	3087883a 	add	r3,r6,r2
10001fd8:	3a000315 	stw	r8,12(r7)
10001fdc:	41c00215 	stw	r7,8(r8)
10001fe0:	31400115 	stw	r5,4(r6)
10001fe4:	18800015 	stw	r2,0(r3)
10001fe8:	003fbd06 	br	10001ee0 <__alt_data_end+0xf8001ee0>
10001fec:	39c0004c 	andi	r7,r7,1
10001ff0:	10c5883a 	add	r2,r2,r3
10001ff4:	3800071e 	bne	r7,zero,10002014 <_free_r+0x1d4>
10001ff8:	81fffe17 	ldw	r7,-8(r16)
10001ffc:	31cdc83a 	sub	r6,r6,r7
10002000:	30c00317 	ldw	r3,12(r6)
10002004:	31400217 	ldw	r5,8(r6)
10002008:	11c5883a 	add	r2,r2,r7
1000200c:	28c00315 	stw	r3,12(r5)
10002010:	19400215 	stw	r5,8(r3)
10002014:	10c00054 	ori	r3,r2,1
10002018:	30c00115 	stw	r3,4(r6)
1000201c:	00c40074 	movhi	r3,4097
10002020:	18cec804 	addi	r3,r3,15136
10002024:	18c00017 	ldw	r3,0(r3)
10002028:	21800215 	stw	r6,8(r4)
1000202c:	10ffc036 	bltu	r2,r3,10001f30 <__alt_data_end+0xf8001f30>
10002030:	00840074 	movhi	r2,4097
10002034:	10959704 	addi	r2,r2,22108
10002038:	11400017 	ldw	r5,0(r2)
1000203c:	8809883a 	mov	r4,r17
10002040:	0001d1c0 	call	10001d1c <_malloc_trim_r>
10002044:	003fba06 	br	10001f30 <__alt_data_end+0xf8001f30>
10002048:	28c9883a 	add	r4,r5,r3
1000204c:	21000117 	ldw	r4,4(r4)
10002050:	2100004c 	andi	r4,r4,1
10002054:	2000391e 	bne	r4,zero,1000213c <_free_r+0x2fc>
10002058:	29c00217 	ldw	r7,8(r5)
1000205c:	29000317 	ldw	r4,12(r5)
10002060:	1885883a 	add	r2,r3,r2
10002064:	10c00054 	ori	r3,r2,1
10002068:	39000315 	stw	r4,12(r7)
1000206c:	21c00215 	stw	r7,8(r4)
10002070:	30c00115 	stw	r3,4(r6)
10002074:	308d883a 	add	r6,r6,r2
10002078:	30800015 	stw	r2,0(r6)
1000207c:	003fac06 	br	10001f30 <__alt_data_end+0xf8001f30>
10002080:	00c00504 	movi	r3,20
10002084:	19401536 	bltu	r3,r5,100020dc <_free_r+0x29c>
10002088:	28c01704 	addi	r3,r5,92
1000208c:	18c7883a 	add	r3,r3,r3
10002090:	294016c4 	addi	r5,r5,91
10002094:	003fb406 	br	10001f68 <__alt_data_end+0xf8001f68>
10002098:	280bd0ba 	srai	r5,r5,2
1000209c:	00c00044 	movi	r3,1
100020a0:	38800117 	ldw	r2,4(r7)
100020a4:	194a983a 	sll	r5,r3,r5
100020a8:	2007883a 	mov	r3,r4
100020ac:	2884b03a 	or	r2,r5,r2
100020b0:	38800115 	stw	r2,4(r7)
100020b4:	003fbb06 	br	10001fa4 <__alt_data_end+0xf8001fa4>
100020b8:	21800515 	stw	r6,20(r4)
100020bc:	21800415 	stw	r6,16(r4)
100020c0:	10c00054 	ori	r3,r2,1
100020c4:	31c00315 	stw	r7,12(r6)
100020c8:	31c00215 	stw	r7,8(r6)
100020cc:	30c00115 	stw	r3,4(r6)
100020d0:	308d883a 	add	r6,r6,r2
100020d4:	30800015 	stw	r2,0(r6)
100020d8:	003f9506 	br	10001f30 <__alt_data_end+0xf8001f30>
100020dc:	00c01504 	movi	r3,84
100020e0:	19400536 	bltu	r3,r5,100020f8 <_free_r+0x2b8>
100020e4:	100ad33a 	srli	r5,r2,12
100020e8:	28c01bc4 	addi	r3,r5,111
100020ec:	18c7883a 	add	r3,r3,r3
100020f0:	29401b84 	addi	r5,r5,110
100020f4:	003f9c06 	br	10001f68 <__alt_data_end+0xf8001f68>
100020f8:	00c05504 	movi	r3,340
100020fc:	19400536 	bltu	r3,r5,10002114 <_free_r+0x2d4>
10002100:	100ad3fa 	srli	r5,r2,15
10002104:	28c01e04 	addi	r3,r5,120
10002108:	18c7883a 	add	r3,r3,r3
1000210c:	29401dc4 	addi	r5,r5,119
10002110:	003f9506 	br	10001f68 <__alt_data_end+0xf8001f68>
10002114:	00c15504 	movi	r3,1364
10002118:	19400536 	bltu	r3,r5,10002130 <_free_r+0x2f0>
1000211c:	100ad4ba 	srli	r5,r2,18
10002120:	28c01f44 	addi	r3,r5,125
10002124:	18c7883a 	add	r3,r3,r3
10002128:	29401f04 	addi	r5,r5,124
1000212c:	003f8e06 	br	10001f68 <__alt_data_end+0xf8001f68>
10002130:	00c03f84 	movi	r3,254
10002134:	01401f84 	movi	r5,126
10002138:	003f8b06 	br	10001f68 <__alt_data_end+0xf8001f68>
1000213c:	10c00054 	ori	r3,r2,1
10002140:	30c00115 	stw	r3,4(r6)
10002144:	308d883a 	add	r6,r6,r2
10002148:	30800015 	stw	r2,0(r6)
1000214c:	003f7806 	br	10001f30 <__alt_data_end+0xf8001f30>

10002150 <_fseek_r>:
10002150:	00021701 	jmpi	10002170 <_fseeko_r>

10002154 <fseek>:
10002154:	00840074 	movhi	r2,4097
10002158:	108ec604 	addi	r2,r2,15128
1000215c:	300f883a 	mov	r7,r6
10002160:	280d883a 	mov	r6,r5
10002164:	200b883a 	mov	r5,r4
10002168:	11000017 	ldw	r4,0(r2)
1000216c:	00021701 	jmpi	10002170 <_fseeko_r>

10002170 <_fseeko_r>:
10002170:	deffe804 	addi	sp,sp,-96
10002174:	dd401415 	stw	r21,80(sp)
10002178:	dc801115 	stw	r18,68(sp)
1000217c:	dc401015 	stw	r17,64(sp)
10002180:	dc000f15 	stw	r16,60(sp)
10002184:	dfc01715 	stw	ra,92(sp)
10002188:	ddc01615 	stw	r23,88(sp)
1000218c:	dd801515 	stw	r22,84(sp)
10002190:	dd001315 	stw	r20,76(sp)
10002194:	dcc01215 	stw	r19,72(sp)
10002198:	2023883a 	mov	r17,r4
1000219c:	2821883a 	mov	r16,r5
100021a0:	302b883a 	mov	r21,r6
100021a4:	3825883a 	mov	r18,r7
100021a8:	20000226 	beq	r4,zero,100021b4 <_fseeko_r+0x44>
100021ac:	20800e17 	ldw	r2,56(r4)
100021b0:	10005a26 	beq	r2,zero,1000231c <_fseeko_r+0x1ac>
100021b4:	8080030b 	ldhu	r2,12(r16)
100021b8:	00c04204 	movi	r3,264
100021bc:	1080420c 	andi	r2,r2,264
100021c0:	10c05b26 	beq	r2,r3,10002330 <_fseeko_r+0x1c0>
100021c4:	85000a17 	ldw	r20,40(r16)
100021c8:	a000f626 	beq	r20,zero,100025a4 <_fseeko_r+0x434>
100021cc:	00800044 	movi	r2,1
100021d0:	90803e26 	beq	r18,r2,100022cc <_fseeko_r+0x15c>
100021d4:	00800084 	movi	r2,2
100021d8:	90801026 	beq	r18,r2,1000221c <_fseeko_r+0xac>
100021dc:	90000f26 	beq	r18,zero,1000221c <_fseeko_r+0xac>
100021e0:	00800584 	movi	r2,22
100021e4:	88800015 	stw	r2,0(r17)
100021e8:	04ffffc4 	movi	r19,-1
100021ec:	9805883a 	mov	r2,r19
100021f0:	dfc01717 	ldw	ra,92(sp)
100021f4:	ddc01617 	ldw	r23,88(sp)
100021f8:	dd801517 	ldw	r22,84(sp)
100021fc:	dd401417 	ldw	r21,80(sp)
10002200:	dd001317 	ldw	r20,76(sp)
10002204:	dcc01217 	ldw	r19,72(sp)
10002208:	dc801117 	ldw	r18,68(sp)
1000220c:	dc401017 	ldw	r17,64(sp)
10002210:	dc000f17 	ldw	r16,60(sp)
10002214:	dec01804 	addi	sp,sp,96
10002218:	f800283a 	ret
1000221c:	80800417 	ldw	r2,16(r16)
10002220:	002f883a 	mov	r23,zero
10002224:	0027883a 	mov	r19,zero
10002228:	1000cb26 	beq	r2,zero,10002558 <_fseeko_r+0x3e8>
1000222c:	8080030b 	ldhu	r2,12(r16)
10002230:	10c2068c 	andi	r3,r2,2074
10002234:	1800071e 	bne	r3,zero,10002254 <_fseeko_r+0xe4>
10002238:	10c1000c 	andi	r3,r2,1024
1000223c:	1800451e 	bne	r3,zero,10002354 <_fseeko_r+0x1e4>
10002240:	00c40034 	movhi	r3,4096
10002244:	18d02704 	addi	r3,r3,16540
10002248:	a0c0b726 	beq	r20,r3,10002528 <_fseeko_r+0x3b8>
1000224c:	10820014 	ori	r2,r2,2048
10002250:	8080030d 	sth	r2,12(r16)
10002254:	800b883a 	mov	r5,r16
10002258:	8809883a 	mov	r4,r17
1000225c:	00014d00 	call	100014d0 <_fflush_r>
10002260:	1027883a 	mov	r19,r2
10002264:	103fe01e 	bne	r2,zero,100021e8 <__alt_data_end+0xf80021e8>
10002268:	81400717 	ldw	r5,28(r16)
1000226c:	900f883a 	mov	r7,r18
10002270:	a80d883a 	mov	r6,r21
10002274:	8809883a 	mov	r4,r17
10002278:	a03ee83a 	callr	r20
1000227c:	00ffffc4 	movi	r3,-1
10002280:	10ffd926 	beq	r2,r3,100021e8 <__alt_data_end+0xf80021e8>
10002284:	81400c17 	ldw	r5,48(r16)
10002288:	28000526 	beq	r5,zero,100022a0 <_fseeko_r+0x130>
1000228c:	80801004 	addi	r2,r16,64
10002290:	28800226 	beq	r5,r2,1000229c <_fseeko_r+0x12c>
10002294:	8809883a 	mov	r4,r17
10002298:	0001e400 	call	10001e40 <_free_r>
1000229c:	80000c15 	stw	zero,48(r16)
100022a0:	8080030b 	ldhu	r2,12(r16)
100022a4:	80c00417 	ldw	r3,16(r16)
100022a8:	80000115 	stw	zero,4(r16)
100022ac:	10bdf7cc 	andi	r2,r2,63455
100022b0:	80c00015 	stw	r3,0(r16)
100022b4:	8080030d 	sth	r2,12(r16)
100022b8:	01800204 	movi	r6,8
100022bc:	000b883a 	mov	r5,zero
100022c0:	81001704 	addi	r4,r16,92
100022c4:	00034f40 	call	100034f4 <memset>
100022c8:	003fc806 	br	100021ec <__alt_data_end+0xf80021ec>
100022cc:	800b883a 	mov	r5,r16
100022d0:	8809883a 	mov	r4,r17
100022d4:	00014d00 	call	100014d0 <_fflush_r>
100022d8:	8080030b 	ldhu	r2,12(r16)
100022dc:	10c4000c 	andi	r3,r2,4096
100022e0:	18008726 	beq	r3,zero,10002500 <_fseeko_r+0x390>
100022e4:	84c01417 	ldw	r19,80(r16)
100022e8:	10c0010c 	andi	r3,r2,4
100022ec:	1800431e 	bne	r3,zero,100023fc <_fseeko_r+0x28c>
100022f0:	1080020c 	andi	r2,r2,8
100022f4:	10008026 	beq	r2,zero,100024f8 <_fseeko_r+0x388>
100022f8:	80c00017 	ldw	r3,0(r16)
100022fc:	80800417 	ldw	r2,16(r16)
10002300:	18000226 	beq	r3,zero,1000230c <_fseeko_r+0x19c>
10002304:	1887c83a 	sub	r3,r3,r2
10002308:	98e7883a 	add	r19,r19,r3
1000230c:	aceb883a 	add	r21,r21,r19
10002310:	05c00044 	movi	r23,1
10002314:	0025883a 	mov	r18,zero
10002318:	003fc306 	br	10002228 <__alt_data_end+0xf8002228>
1000231c:	00019b40 	call	100019b4 <__sinit>
10002320:	8080030b 	ldhu	r2,12(r16)
10002324:	00c04204 	movi	r3,264
10002328:	1080420c 	andi	r2,r2,264
1000232c:	10ffa51e 	bne	r2,r3,100021c4 <__alt_data_end+0xf80021c4>
10002330:	800b883a 	mov	r5,r16
10002334:	8809883a 	mov	r4,r17
10002338:	00014d00 	call	100014d0 <_fflush_r>
1000233c:	003fa106 	br	100021c4 <__alt_data_end+0xf80021c4>
10002340:	8080030b 	ldhu	r2,12(r16)
10002344:	00c10004 	movi	r3,1024
10002348:	80c01315 	stw	r3,76(r16)
1000234c:	10c4b03a 	or	r2,r2,r3
10002350:	8080030d 	sth	r2,12(r16)
10002354:	9000311e 	bne	r18,zero,1000241c <_fseeko_r+0x2ac>
10002358:	a82d883a 	mov	r22,r21
1000235c:	b800371e 	bne	r23,zero,1000243c <_fseeko_r+0x2cc>
10002360:	8080030b 	ldhu	r2,12(r16)
10002364:	1084000c 	andi	r2,r2,4096
10002368:	10007f26 	beq	r2,zero,10002568 <_fseeko_r+0x3f8>
1000236c:	80801417 	ldw	r2,80(r16)
10002370:	81800117 	ldw	r6,4(r16)
10002374:	81400c17 	ldw	r5,48(r16)
10002378:	11a7c83a 	sub	r19,r2,r6
1000237c:	28008226 	beq	r5,zero,10002588 <_fseeko_r+0x418>
10002380:	81c00f17 	ldw	r7,60(r16)
10002384:	99e7c83a 	sub	r19,r19,r7
10002388:	81000e17 	ldw	r4,56(r16)
1000238c:	80800417 	ldw	r2,16(r16)
10002390:	99a7883a 	add	r19,r19,r6
10002394:	2087c83a 	sub	r3,r4,r2
10002398:	98e7c83a 	sub	r19,r19,r3
1000239c:	38c7883a 	add	r3,r7,r3
100023a0:	b4c02b16 	blt	r22,r19,10002450 <_fseeko_r+0x2e0>
100023a4:	98c9883a 	add	r4,r19,r3
100023a8:	b100292e 	bgeu	r22,r4,10002450 <_fseeko_r+0x2e0>
100023ac:	b4e7c83a 	sub	r19,r22,r19
100023b0:	14c5883a 	add	r2,r2,r19
100023b4:	1ce7c83a 	sub	r19,r3,r19
100023b8:	80800015 	stw	r2,0(r16)
100023bc:	84c00115 	stw	r19,4(r16)
100023c0:	28000526 	beq	r5,zero,100023d8 <_fseeko_r+0x268>
100023c4:	80801004 	addi	r2,r16,64
100023c8:	28800226 	beq	r5,r2,100023d4 <_fseeko_r+0x264>
100023cc:	8809883a 	mov	r4,r17
100023d0:	0001e400 	call	10001e40 <_free_r>
100023d4:	80000c15 	stw	zero,48(r16)
100023d8:	8080030b 	ldhu	r2,12(r16)
100023dc:	01800204 	movi	r6,8
100023e0:	000b883a 	mov	r5,zero
100023e4:	10bff7cc 	andi	r2,r2,65503
100023e8:	8080030d 	sth	r2,12(r16)
100023ec:	81001704 	addi	r4,r16,92
100023f0:	00034f40 	call	100034f4 <memset>
100023f4:	0027883a 	mov	r19,zero
100023f8:	003f7c06 	br	100021ec <__alt_data_end+0xf80021ec>
100023fc:	80c00117 	ldw	r3,4(r16)
10002400:	80800c17 	ldw	r2,48(r16)
10002404:	98e7c83a 	sub	r19,r19,r3
10002408:	10003b26 	beq	r2,zero,100024f8 <_fseeko_r+0x388>
1000240c:	80c00f17 	ldw	r3,60(r16)
10002410:	80800417 	ldw	r2,16(r16)
10002414:	98e7c83a 	sub	r19,r19,r3
10002418:	003fbc06 	br	1000230c <__alt_data_end+0xf800230c>
1000241c:	8140038f 	ldh	r5,14(r16)
10002420:	d80d883a 	mov	r6,sp
10002424:	8809883a 	mov	r4,r17
10002428:	00025d00 	call	100025d0 <_fstat_r>
1000242c:	103f891e 	bne	r2,zero,10002254 <__alt_data_end+0xf8002254>
10002430:	dd800417 	ldw	r22,16(sp)
10002434:	adad883a 	add	r22,r21,r22
10002438:	b83fc926 	beq	r23,zero,10002360 <__alt_data_end+0xf8002360>
1000243c:	81400c17 	ldw	r5,48(r16)
10002440:	81800117 	ldw	r6,4(r16)
10002444:	28005026 	beq	r5,zero,10002588 <_fseeko_r+0x418>
10002448:	81c00f17 	ldw	r7,60(r16)
1000244c:	003fce06 	br	10002388 <__alt_data_end+0xf8002388>
10002450:	84c01317 	ldw	r19,76(r16)
10002454:	81400717 	ldw	r5,28(r16)
10002458:	000f883a 	mov	r7,zero
1000245c:	04e7c83a 	sub	r19,zero,r19
10002460:	9da6703a 	and	r19,r19,r22
10002464:	980d883a 	mov	r6,r19
10002468:	8809883a 	mov	r4,r17
1000246c:	a03ee83a 	callr	r20
10002470:	00ffffc4 	movi	r3,-1
10002474:	10ff7726 	beq	r2,r3,10002254 <__alt_data_end+0xf8002254>
10002478:	80800417 	ldw	r2,16(r16)
1000247c:	81400c17 	ldw	r5,48(r16)
10002480:	80000115 	stw	zero,4(r16)
10002484:	80800015 	stw	r2,0(r16)
10002488:	28000526 	beq	r5,zero,100024a0 <_fseeko_r+0x330>
1000248c:	80801004 	addi	r2,r16,64
10002490:	28800226 	beq	r5,r2,1000249c <_fseeko_r+0x32c>
10002494:	8809883a 	mov	r4,r17
10002498:	0001e400 	call	10001e40 <_free_r>
1000249c:	80000c15 	stw	zero,48(r16)
100024a0:	8080030b 	ldhu	r2,12(r16)
100024a4:	b4e7c83a 	sub	r19,r22,r19
100024a8:	10bff7cc 	andi	r2,r2,65503
100024ac:	8080030d 	sth	r2,12(r16)
100024b0:	98000b26 	beq	r19,zero,100024e0 <_fseeko_r+0x370>
100024b4:	800b883a 	mov	r5,r16
100024b8:	8809883a 	mov	r4,r17
100024bc:	0003d140 	call	10003d14 <__srefill_r>
100024c0:	103f641e 	bne	r2,zero,10002254 <__alt_data_end+0xf8002254>
100024c4:	80800117 	ldw	r2,4(r16)
100024c8:	14ff6236 	bltu	r2,r19,10002254 <__alt_data_end+0xf8002254>
100024cc:	80c00017 	ldw	r3,0(r16)
100024d0:	14c5c83a 	sub	r2,r2,r19
100024d4:	80800115 	stw	r2,4(r16)
100024d8:	1ce7883a 	add	r19,r3,r19
100024dc:	84c00015 	stw	r19,0(r16)
100024e0:	01800204 	movi	r6,8
100024e4:	000b883a 	mov	r5,zero
100024e8:	81001704 	addi	r4,r16,92
100024ec:	00034f40 	call	100034f4 <memset>
100024f0:	0027883a 	mov	r19,zero
100024f4:	003f3d06 	br	100021ec <__alt_data_end+0xf80021ec>
100024f8:	80800417 	ldw	r2,16(r16)
100024fc:	003f8306 	br	1000230c <__alt_data_end+0xf800230c>
10002500:	81400717 	ldw	r5,28(r16)
10002504:	900f883a 	mov	r7,r18
10002508:	000d883a 	mov	r6,zero
1000250c:	8809883a 	mov	r4,r17
10002510:	a03ee83a 	callr	r20
10002514:	1027883a 	mov	r19,r2
10002518:	00bfffc4 	movi	r2,-1
1000251c:	98bf3226 	beq	r19,r2,100021e8 <__alt_data_end+0xf80021e8>
10002520:	8080030b 	ldhu	r2,12(r16)
10002524:	003f7006 	br	100022e8 <__alt_data_end+0xf80022e8>
10002528:	8140038f 	ldh	r5,14(r16)
1000252c:	283f4716 	blt	r5,zero,1000224c <__alt_data_end+0xf800224c>
10002530:	d80d883a 	mov	r6,sp
10002534:	8809883a 	mov	r4,r17
10002538:	00025d00 	call	100025d0 <_fstat_r>
1000253c:	1000041e 	bne	r2,zero,10002550 <_fseeko_r+0x3e0>
10002540:	d8800117 	ldw	r2,4(sp)
10002544:	00e00014 	movui	r3,32768
10002548:	10bc000c 	andi	r2,r2,61440
1000254c:	10ff7c26 	beq	r2,r3,10002340 <__alt_data_end+0xf8002340>
10002550:	8080030b 	ldhu	r2,12(r16)
10002554:	003f3d06 	br	1000224c <__alt_data_end+0xf800224c>
10002558:	800b883a 	mov	r5,r16
1000255c:	8809883a 	mov	r4,r17
10002560:	00029bc0 	call	100029bc <__smakebuf_r>
10002564:	003f3106 	br	1000222c <__alt_data_end+0xf800222c>
10002568:	81400717 	ldw	r5,28(r16)
1000256c:	01c00044 	movi	r7,1
10002570:	000d883a 	mov	r6,zero
10002574:	8809883a 	mov	r4,r17
10002578:	a03ee83a 	callr	r20
1000257c:	00ffffc4 	movi	r3,-1
10002580:	10ff7b1e 	bne	r2,r3,10002370 <__alt_data_end+0xf8002370>
10002584:	003f3306 	br	10002254 <__alt_data_end+0xf8002254>
10002588:	80c00017 	ldw	r3,0(r16)
1000258c:	80800417 	ldw	r2,16(r16)
10002590:	000b883a 	mov	r5,zero
10002594:	1887c83a 	sub	r3,r3,r2
10002598:	98e7c83a 	sub	r19,r19,r3
1000259c:	30c7883a 	add	r3,r6,r3
100025a0:	003f7f06 	br	100023a0 <__alt_data_end+0xf80023a0>
100025a4:	00800744 	movi	r2,29
100025a8:	88800015 	stw	r2,0(r17)
100025ac:	04ffffc4 	movi	r19,-1
100025b0:	003f0e06 	br	100021ec <__alt_data_end+0xf80021ec>

100025b4 <fseeko>:
100025b4:	00840074 	movhi	r2,4097
100025b8:	108ec604 	addi	r2,r2,15128
100025bc:	300f883a 	mov	r7,r6
100025c0:	280d883a 	mov	r6,r5
100025c4:	200b883a 	mov	r5,r4
100025c8:	11000017 	ldw	r4,0(r2)
100025cc:	00021701 	jmpi	10002170 <_fseeko_r>

100025d0 <_fstat_r>:
100025d0:	defffd04 	addi	sp,sp,-12
100025d4:	2805883a 	mov	r2,r5
100025d8:	dc000015 	stw	r16,0(sp)
100025dc:	04040074 	movhi	r16,4097
100025e0:	dc400115 	stw	r17,4(sp)
100025e4:	84159404 	addi	r16,r16,22096
100025e8:	2023883a 	mov	r17,r4
100025ec:	300b883a 	mov	r5,r6
100025f0:	1009883a 	mov	r4,r2
100025f4:	dfc00215 	stw	ra,8(sp)
100025f8:	80000015 	stw	zero,0(r16)
100025fc:	000f6d00 	call	1000f6d0 <fstat>
10002600:	00ffffc4 	movi	r3,-1
10002604:	10c00526 	beq	r2,r3,1000261c <_fstat_r+0x4c>
10002608:	dfc00217 	ldw	ra,8(sp)
1000260c:	dc400117 	ldw	r17,4(sp)
10002610:	dc000017 	ldw	r16,0(sp)
10002614:	dec00304 	addi	sp,sp,12
10002618:	f800283a 	ret
1000261c:	80c00017 	ldw	r3,0(r16)
10002620:	183ff926 	beq	r3,zero,10002608 <__alt_data_end+0xf8002608>
10002624:	88c00015 	stw	r3,0(r17)
10002628:	003ff706 	br	10002608 <__alt_data_end+0xf8002608>

1000262c <_fwalk>:
1000262c:	defff704 	addi	sp,sp,-36
10002630:	dd000415 	stw	r20,16(sp)
10002634:	dfc00815 	stw	ra,32(sp)
10002638:	ddc00715 	stw	r23,28(sp)
1000263c:	dd800615 	stw	r22,24(sp)
10002640:	dd400515 	stw	r21,20(sp)
10002644:	dcc00315 	stw	r19,12(sp)
10002648:	dc800215 	stw	r18,8(sp)
1000264c:	dc400115 	stw	r17,4(sp)
10002650:	dc000015 	stw	r16,0(sp)
10002654:	2500b804 	addi	r20,r4,736
10002658:	a0002326 	beq	r20,zero,100026e8 <_fwalk+0xbc>
1000265c:	282b883a 	mov	r21,r5
10002660:	002f883a 	mov	r23,zero
10002664:	05800044 	movi	r22,1
10002668:	04ffffc4 	movi	r19,-1
1000266c:	a4400117 	ldw	r17,4(r20)
10002670:	a4800217 	ldw	r18,8(r20)
10002674:	8c7fffc4 	addi	r17,r17,-1
10002678:	88000d16 	blt	r17,zero,100026b0 <_fwalk+0x84>
1000267c:	94000304 	addi	r16,r18,12
10002680:	94800384 	addi	r18,r18,14
10002684:	8080000b 	ldhu	r2,0(r16)
10002688:	8c7fffc4 	addi	r17,r17,-1
1000268c:	813ffd04 	addi	r4,r16,-12
10002690:	b080042e 	bgeu	r22,r2,100026a4 <_fwalk+0x78>
10002694:	9080000f 	ldh	r2,0(r18)
10002698:	14c00226 	beq	r2,r19,100026a4 <_fwalk+0x78>
1000269c:	a83ee83a 	callr	r21
100026a0:	b8aeb03a 	or	r23,r23,r2
100026a4:	84001a04 	addi	r16,r16,104
100026a8:	94801a04 	addi	r18,r18,104
100026ac:	8cfff51e 	bne	r17,r19,10002684 <__alt_data_end+0xf8002684>
100026b0:	a5000017 	ldw	r20,0(r20)
100026b4:	a03fed1e 	bne	r20,zero,1000266c <__alt_data_end+0xf800266c>
100026b8:	b805883a 	mov	r2,r23
100026bc:	dfc00817 	ldw	ra,32(sp)
100026c0:	ddc00717 	ldw	r23,28(sp)
100026c4:	dd800617 	ldw	r22,24(sp)
100026c8:	dd400517 	ldw	r21,20(sp)
100026cc:	dd000417 	ldw	r20,16(sp)
100026d0:	dcc00317 	ldw	r19,12(sp)
100026d4:	dc800217 	ldw	r18,8(sp)
100026d8:	dc400117 	ldw	r17,4(sp)
100026dc:	dc000017 	ldw	r16,0(sp)
100026e0:	dec00904 	addi	sp,sp,36
100026e4:	f800283a 	ret
100026e8:	002f883a 	mov	r23,zero
100026ec:	003ff206 	br	100026b8 <__alt_data_end+0xf80026b8>

100026f0 <_fwalk_reent>:
100026f0:	defff704 	addi	sp,sp,-36
100026f4:	dd000415 	stw	r20,16(sp)
100026f8:	dfc00815 	stw	ra,32(sp)
100026fc:	ddc00715 	stw	r23,28(sp)
10002700:	dd800615 	stw	r22,24(sp)
10002704:	dd400515 	stw	r21,20(sp)
10002708:	dcc00315 	stw	r19,12(sp)
1000270c:	dc800215 	stw	r18,8(sp)
10002710:	dc400115 	stw	r17,4(sp)
10002714:	dc000015 	stw	r16,0(sp)
10002718:	2500b804 	addi	r20,r4,736
1000271c:	a0002326 	beq	r20,zero,100027ac <_fwalk_reent+0xbc>
10002720:	282b883a 	mov	r21,r5
10002724:	2027883a 	mov	r19,r4
10002728:	002f883a 	mov	r23,zero
1000272c:	05800044 	movi	r22,1
10002730:	04bfffc4 	movi	r18,-1
10002734:	a4400117 	ldw	r17,4(r20)
10002738:	a4000217 	ldw	r16,8(r20)
1000273c:	8c7fffc4 	addi	r17,r17,-1
10002740:	88000c16 	blt	r17,zero,10002774 <_fwalk_reent+0x84>
10002744:	84000304 	addi	r16,r16,12
10002748:	8080000b 	ldhu	r2,0(r16)
1000274c:	8c7fffc4 	addi	r17,r17,-1
10002750:	817ffd04 	addi	r5,r16,-12
10002754:	b080052e 	bgeu	r22,r2,1000276c <_fwalk_reent+0x7c>
10002758:	8080008f 	ldh	r2,2(r16)
1000275c:	9809883a 	mov	r4,r19
10002760:	14800226 	beq	r2,r18,1000276c <_fwalk_reent+0x7c>
10002764:	a83ee83a 	callr	r21
10002768:	b8aeb03a 	or	r23,r23,r2
1000276c:	84001a04 	addi	r16,r16,104
10002770:	8cbff51e 	bne	r17,r18,10002748 <__alt_data_end+0xf8002748>
10002774:	a5000017 	ldw	r20,0(r20)
10002778:	a03fee1e 	bne	r20,zero,10002734 <__alt_data_end+0xf8002734>
1000277c:	b805883a 	mov	r2,r23
10002780:	dfc00817 	ldw	ra,32(sp)
10002784:	ddc00717 	ldw	r23,28(sp)
10002788:	dd800617 	ldw	r22,24(sp)
1000278c:	dd400517 	ldw	r21,20(sp)
10002790:	dd000417 	ldw	r20,16(sp)
10002794:	dcc00317 	ldw	r19,12(sp)
10002798:	dc800217 	ldw	r18,8(sp)
1000279c:	dc400117 	ldw	r17,4(sp)
100027a0:	dc000017 	ldw	r16,0(sp)
100027a4:	dec00904 	addi	sp,sp,36
100027a8:	f800283a 	ret
100027ac:	002f883a 	mov	r23,zero
100027b0:	003ff206 	br	1000277c <__alt_data_end+0xf800277c>

100027b4 <_fwrite_r>:
100027b4:	defff504 	addi	sp,sp,-44
100027b8:	dc400715 	stw	r17,28(sp)
100027bc:	d9400315 	stw	r5,12(sp)
100027c0:	2023883a 	mov	r17,r4
100027c4:	300b883a 	mov	r5,r6
100027c8:	3809883a 	mov	r4,r7
100027cc:	dcc00915 	stw	r19,36(sp)
100027d0:	dc800815 	stw	r18,32(sp)
100027d4:	dc000615 	stw	r16,24(sp)
100027d8:	dfc00a15 	stw	ra,40(sp)
100027dc:	3027883a 	mov	r19,r6
100027e0:	3821883a 	mov	r16,r7
100027e4:	00010d40 	call	100010d4 <__mulsi3>
100027e8:	1025883a 	mov	r18,r2
100027ec:	d8800415 	stw	r2,16(sp)
100027f0:	d8800215 	stw	r2,8(sp)
100027f4:	d8800304 	addi	r2,sp,12
100027f8:	d8800015 	stw	r2,0(sp)
100027fc:	00800044 	movi	r2,1
10002800:	d8800115 	stw	r2,4(sp)
10002804:	d9400b17 	ldw	r5,44(sp)
10002808:	88000226 	beq	r17,zero,10002814 <_fwrite_r+0x60>
1000280c:	88800e17 	ldw	r2,56(r17)
10002810:	10001a26 	beq	r2,zero,1000287c <_fwrite_r+0xc8>
10002814:	2880030b 	ldhu	r2,12(r5)
10002818:	10c8000c 	andi	r3,r2,8192
1000281c:	1800061e 	bne	r3,zero,10002838 <_fwrite_r+0x84>
10002820:	29001917 	ldw	r4,100(r5)
10002824:	00f7ffc4 	movi	r3,-8193
10002828:	10880014 	ori	r2,r2,8192
1000282c:	20c6703a 	and	r3,r4,r3
10002830:	2880030d 	sth	r2,12(r5)
10002834:	28c01915 	stw	r3,100(r5)
10002838:	d80d883a 	mov	r6,sp
1000283c:	8809883a 	mov	r4,r17
10002840:	00084340 	call	10008434 <__sfvwrite_r>
10002844:	10000b26 	beq	r2,zero,10002874 <_fwrite_r+0xc0>
10002848:	d9000217 	ldw	r4,8(sp)
1000284c:	980b883a 	mov	r5,r19
10002850:	9109c83a 	sub	r4,r18,r4
10002854:	00010180 	call	10001018 <__udivsi3>
10002858:	dfc00a17 	ldw	ra,40(sp)
1000285c:	dcc00917 	ldw	r19,36(sp)
10002860:	dc800817 	ldw	r18,32(sp)
10002864:	dc400717 	ldw	r17,28(sp)
10002868:	dc000617 	ldw	r16,24(sp)
1000286c:	dec00b04 	addi	sp,sp,44
10002870:	f800283a 	ret
10002874:	8005883a 	mov	r2,r16
10002878:	003ff706 	br	10002858 <__alt_data_end+0xf8002858>
1000287c:	8809883a 	mov	r4,r17
10002880:	d9400515 	stw	r5,20(sp)
10002884:	00019b40 	call	100019b4 <__sinit>
10002888:	d9400517 	ldw	r5,20(sp)
1000288c:	003fe106 	br	10002814 <__alt_data_end+0xf8002814>

10002890 <fwrite>:
10002890:	defffe04 	addi	sp,sp,-8
10002894:	00840074 	movhi	r2,4097
10002898:	d9c00015 	stw	r7,0(sp)
1000289c:	108ec604 	addi	r2,r2,15128
100028a0:	300f883a 	mov	r7,r6
100028a4:	280d883a 	mov	r6,r5
100028a8:	200b883a 	mov	r5,r4
100028ac:	11000017 	ldw	r4,0(r2)
100028b0:	dfc00115 	stw	ra,4(sp)
100028b4:	00027b40 	call	100027b4 <_fwrite_r>
100028b8:	dfc00117 	ldw	ra,4(sp)
100028bc:	dec00204 	addi	sp,sp,8
100028c0:	f800283a 	ret

100028c4 <_getc_r>:
100028c4:	defffd04 	addi	sp,sp,-12
100028c8:	dc000115 	stw	r16,4(sp)
100028cc:	dfc00215 	stw	ra,8(sp)
100028d0:	2021883a 	mov	r16,r4
100028d4:	20000226 	beq	r4,zero,100028e0 <_getc_r+0x1c>
100028d8:	20800e17 	ldw	r2,56(r4)
100028dc:	10000c26 	beq	r2,zero,10002910 <_getc_r+0x4c>
100028e0:	28800117 	ldw	r2,4(r5)
100028e4:	10bfffc4 	addi	r2,r2,-1
100028e8:	28800115 	stw	r2,4(r5)
100028ec:	10000c16 	blt	r2,zero,10002920 <_getc_r+0x5c>
100028f0:	28800017 	ldw	r2,0(r5)
100028f4:	10c00044 	addi	r3,r2,1
100028f8:	28c00015 	stw	r3,0(r5)
100028fc:	10800003 	ldbu	r2,0(r2)
10002900:	dfc00217 	ldw	ra,8(sp)
10002904:	dc000117 	ldw	r16,4(sp)
10002908:	dec00304 	addi	sp,sp,12
1000290c:	f800283a 	ret
10002910:	d9400015 	stw	r5,0(sp)
10002914:	00019b40 	call	100019b4 <__sinit>
10002918:	d9400017 	ldw	r5,0(sp)
1000291c:	003ff006 	br	100028e0 <__alt_data_end+0xf80028e0>
10002920:	8009883a 	mov	r4,r16
10002924:	dfc00217 	ldw	ra,8(sp)
10002928:	dc000117 	ldw	r16,4(sp)
1000292c:	dec00304 	addi	sp,sp,12
10002930:	0003ee81 	jmpi	10003ee8 <__srget_r>

10002934 <getc>:
10002934:	00840074 	movhi	r2,4097
10002938:	defffd04 	addi	sp,sp,-12
1000293c:	108ec604 	addi	r2,r2,15128
10002940:	dc400115 	stw	r17,4(sp)
10002944:	14400017 	ldw	r17,0(r2)
10002948:	dc000015 	stw	r16,0(sp)
1000294c:	dfc00215 	stw	ra,8(sp)
10002950:	2021883a 	mov	r16,r4
10002954:	88000226 	beq	r17,zero,10002960 <getc+0x2c>
10002958:	88800e17 	ldw	r2,56(r17)
1000295c:	10000d26 	beq	r2,zero,10002994 <getc+0x60>
10002960:	80800117 	ldw	r2,4(r16)
10002964:	10bfffc4 	addi	r2,r2,-1
10002968:	80800115 	stw	r2,4(r16)
1000296c:	10000c16 	blt	r2,zero,100029a0 <getc+0x6c>
10002970:	80800017 	ldw	r2,0(r16)
10002974:	10c00044 	addi	r3,r2,1
10002978:	80c00015 	stw	r3,0(r16)
1000297c:	10800003 	ldbu	r2,0(r2)
10002980:	dfc00217 	ldw	ra,8(sp)
10002984:	dc400117 	ldw	r17,4(sp)
10002988:	dc000017 	ldw	r16,0(sp)
1000298c:	dec00304 	addi	sp,sp,12
10002990:	f800283a 	ret
10002994:	8809883a 	mov	r4,r17
10002998:	00019b40 	call	100019b4 <__sinit>
1000299c:	003ff006 	br	10002960 <__alt_data_end+0xf8002960>
100029a0:	800b883a 	mov	r5,r16
100029a4:	8809883a 	mov	r4,r17
100029a8:	dfc00217 	ldw	ra,8(sp)
100029ac:	dc400117 	ldw	r17,4(sp)
100029b0:	dc000017 	ldw	r16,0(sp)
100029b4:	dec00304 	addi	sp,sp,12
100029b8:	0003ee81 	jmpi	10003ee8 <__srget_r>

100029bc <__smakebuf_r>:
100029bc:	2880030b 	ldhu	r2,12(r5)
100029c0:	10c0008c 	andi	r3,r2,2
100029c4:	1800411e 	bne	r3,zero,10002acc <__smakebuf_r+0x110>
100029c8:	deffec04 	addi	sp,sp,-80
100029cc:	dc000f15 	stw	r16,60(sp)
100029d0:	2821883a 	mov	r16,r5
100029d4:	2940038f 	ldh	r5,14(r5)
100029d8:	dc401015 	stw	r17,64(sp)
100029dc:	dfc01315 	stw	ra,76(sp)
100029e0:	dcc01215 	stw	r19,72(sp)
100029e4:	dc801115 	stw	r18,68(sp)
100029e8:	2023883a 	mov	r17,r4
100029ec:	28001c16 	blt	r5,zero,10002a60 <__smakebuf_r+0xa4>
100029f0:	d80d883a 	mov	r6,sp
100029f4:	00025d00 	call	100025d0 <_fstat_r>
100029f8:	10001816 	blt	r2,zero,10002a5c <__smakebuf_r+0xa0>
100029fc:	d8800117 	ldw	r2,4(sp)
10002a00:	00e00014 	movui	r3,32768
10002a04:	10bc000c 	andi	r2,r2,61440
10002a08:	14c80020 	cmpeqi	r19,r2,8192
10002a0c:	10c03726 	beq	r2,r3,10002aec <__smakebuf_r+0x130>
10002a10:	80c0030b 	ldhu	r3,12(r16)
10002a14:	18c20014 	ori	r3,r3,2048
10002a18:	80c0030d 	sth	r3,12(r16)
10002a1c:	00c80004 	movi	r3,8192
10002a20:	10c0521e 	bne	r2,r3,10002b6c <__smakebuf_r+0x1b0>
10002a24:	8140038f 	ldh	r5,14(r16)
10002a28:	8809883a 	mov	r4,r17
10002a2c:	00088fc0 	call	100088fc <_isatty_r>
10002a30:	10004c26 	beq	r2,zero,10002b64 <__smakebuf_r+0x1a8>
10002a34:	8080030b 	ldhu	r2,12(r16)
10002a38:	80c010c4 	addi	r3,r16,67
10002a3c:	80c00015 	stw	r3,0(r16)
10002a40:	10800054 	ori	r2,r2,1
10002a44:	8080030d 	sth	r2,12(r16)
10002a48:	00800044 	movi	r2,1
10002a4c:	80c00415 	stw	r3,16(r16)
10002a50:	80800515 	stw	r2,20(r16)
10002a54:	04810004 	movi	r18,1024
10002a58:	00000706 	br	10002a78 <__smakebuf_r+0xbc>
10002a5c:	8080030b 	ldhu	r2,12(r16)
10002a60:	10c0200c 	andi	r3,r2,128
10002a64:	18001f1e 	bne	r3,zero,10002ae4 <__smakebuf_r+0x128>
10002a68:	04810004 	movi	r18,1024
10002a6c:	10820014 	ori	r2,r2,2048
10002a70:	8080030d 	sth	r2,12(r16)
10002a74:	0027883a 	mov	r19,zero
10002a78:	900b883a 	mov	r5,r18
10002a7c:	8809883a 	mov	r4,r17
10002a80:	0002ba00 	call	10002ba0 <_malloc_r>
10002a84:	10002c26 	beq	r2,zero,10002b38 <__smakebuf_r+0x17c>
10002a88:	80c0030b 	ldhu	r3,12(r16)
10002a8c:	01040034 	movhi	r4,4096
10002a90:	21059704 	addi	r4,r4,5724
10002a94:	89000f15 	stw	r4,60(r17)
10002a98:	18c02014 	ori	r3,r3,128
10002a9c:	80c0030d 	sth	r3,12(r16)
10002aa0:	80800015 	stw	r2,0(r16)
10002aa4:	80800415 	stw	r2,16(r16)
10002aa8:	84800515 	stw	r18,20(r16)
10002aac:	98001a1e 	bne	r19,zero,10002b18 <__smakebuf_r+0x15c>
10002ab0:	dfc01317 	ldw	ra,76(sp)
10002ab4:	dcc01217 	ldw	r19,72(sp)
10002ab8:	dc801117 	ldw	r18,68(sp)
10002abc:	dc401017 	ldw	r17,64(sp)
10002ac0:	dc000f17 	ldw	r16,60(sp)
10002ac4:	dec01404 	addi	sp,sp,80
10002ac8:	f800283a 	ret
10002acc:	288010c4 	addi	r2,r5,67
10002ad0:	28800015 	stw	r2,0(r5)
10002ad4:	28800415 	stw	r2,16(r5)
10002ad8:	00800044 	movi	r2,1
10002adc:	28800515 	stw	r2,20(r5)
10002ae0:	f800283a 	ret
10002ae4:	04801004 	movi	r18,64
10002ae8:	003fe006 	br	10002a6c <__alt_data_end+0xf8002a6c>
10002aec:	81000a17 	ldw	r4,40(r16)
10002af0:	00c40034 	movhi	r3,4096
10002af4:	18d02704 	addi	r3,r3,16540
10002af8:	20ffc51e 	bne	r4,r3,10002a10 <__alt_data_end+0xf8002a10>
10002afc:	8080030b 	ldhu	r2,12(r16)
10002b00:	04810004 	movi	r18,1024
10002b04:	84801315 	stw	r18,76(r16)
10002b08:	1484b03a 	or	r2,r2,r18
10002b0c:	8080030d 	sth	r2,12(r16)
10002b10:	0027883a 	mov	r19,zero
10002b14:	003fd806 	br	10002a78 <__alt_data_end+0xf8002a78>
10002b18:	8140038f 	ldh	r5,14(r16)
10002b1c:	8809883a 	mov	r4,r17
10002b20:	00088fc0 	call	100088fc <_isatty_r>
10002b24:	103fe226 	beq	r2,zero,10002ab0 <__alt_data_end+0xf8002ab0>
10002b28:	8080030b 	ldhu	r2,12(r16)
10002b2c:	10800054 	ori	r2,r2,1
10002b30:	8080030d 	sth	r2,12(r16)
10002b34:	003fde06 	br	10002ab0 <__alt_data_end+0xf8002ab0>
10002b38:	8080030b 	ldhu	r2,12(r16)
10002b3c:	10c0800c 	andi	r3,r2,512
10002b40:	183fdb1e 	bne	r3,zero,10002ab0 <__alt_data_end+0xf8002ab0>
10002b44:	10800094 	ori	r2,r2,2
10002b48:	80c010c4 	addi	r3,r16,67
10002b4c:	8080030d 	sth	r2,12(r16)
10002b50:	00800044 	movi	r2,1
10002b54:	80c00015 	stw	r3,0(r16)
10002b58:	80c00415 	stw	r3,16(r16)
10002b5c:	80800515 	stw	r2,20(r16)
10002b60:	003fd306 	br	10002ab0 <__alt_data_end+0xf8002ab0>
10002b64:	04810004 	movi	r18,1024
10002b68:	003fc306 	br	10002a78 <__alt_data_end+0xf8002a78>
10002b6c:	0027883a 	mov	r19,zero
10002b70:	04810004 	movi	r18,1024
10002b74:	003fc006 	br	10002a78 <__alt_data_end+0xf8002a78>

10002b78 <malloc>:
10002b78:	00840074 	movhi	r2,4097
10002b7c:	108ec604 	addi	r2,r2,15128
10002b80:	200b883a 	mov	r5,r4
10002b84:	11000017 	ldw	r4,0(r2)
10002b88:	0002ba01 	jmpi	10002ba0 <_malloc_r>

10002b8c <free>:
10002b8c:	00840074 	movhi	r2,4097
10002b90:	108ec604 	addi	r2,r2,15128
10002b94:	200b883a 	mov	r5,r4
10002b98:	11000017 	ldw	r4,0(r2)
10002b9c:	0001e401 	jmpi	10001e40 <_free_r>

10002ba0 <_malloc_r>:
10002ba0:	defff504 	addi	sp,sp,-44
10002ba4:	dc800315 	stw	r18,12(sp)
10002ba8:	dfc00a15 	stw	ra,40(sp)
10002bac:	df000915 	stw	fp,36(sp)
10002bb0:	ddc00815 	stw	r23,32(sp)
10002bb4:	dd800715 	stw	r22,28(sp)
10002bb8:	dd400615 	stw	r21,24(sp)
10002bbc:	dd000515 	stw	r20,20(sp)
10002bc0:	dcc00415 	stw	r19,16(sp)
10002bc4:	dc400215 	stw	r17,8(sp)
10002bc8:	dc000115 	stw	r16,4(sp)
10002bcc:	288002c4 	addi	r2,r5,11
10002bd0:	00c00584 	movi	r3,22
10002bd4:	2025883a 	mov	r18,r4
10002bd8:	18807f2e 	bgeu	r3,r2,10002dd8 <_malloc_r+0x238>
10002bdc:	047ffe04 	movi	r17,-8
10002be0:	1462703a 	and	r17,r2,r17
10002be4:	8800a316 	blt	r17,zero,10002e74 <_malloc_r+0x2d4>
10002be8:	8940a236 	bltu	r17,r5,10002e74 <_malloc_r+0x2d4>
10002bec:	000fc7c0 	call	1000fc7c <__malloc_lock>
10002bf0:	00807dc4 	movi	r2,503
10002bf4:	1441e92e 	bgeu	r2,r17,1000339c <_malloc_r+0x7fc>
10002bf8:	8804d27a 	srli	r2,r17,9
10002bfc:	1000a126 	beq	r2,zero,10002e84 <_malloc_r+0x2e4>
10002c00:	00c00104 	movi	r3,4
10002c04:	18811e36 	bltu	r3,r2,10003080 <_malloc_r+0x4e0>
10002c08:	8804d1ba 	srli	r2,r17,6
10002c0c:	12000e44 	addi	r8,r2,57
10002c10:	11c00e04 	addi	r7,r2,56
10002c14:	4209883a 	add	r4,r8,r8
10002c18:	04c40074 	movhi	r19,4097
10002c1c:	2109883a 	add	r4,r4,r4
10002c20:	9cc92004 	addi	r19,r19,9344
10002c24:	2109883a 	add	r4,r4,r4
10002c28:	9909883a 	add	r4,r19,r4
10002c2c:	24000117 	ldw	r16,4(r4)
10002c30:	213ffe04 	addi	r4,r4,-8
10002c34:	24009726 	beq	r4,r16,10002e94 <_malloc_r+0x2f4>
10002c38:	80800117 	ldw	r2,4(r16)
10002c3c:	01bfff04 	movi	r6,-4
10002c40:	014003c4 	movi	r5,15
10002c44:	1184703a 	and	r2,r2,r6
10002c48:	1447c83a 	sub	r3,r2,r17
10002c4c:	28c00716 	blt	r5,r3,10002c6c <_malloc_r+0xcc>
10002c50:	1800920e 	bge	r3,zero,10002e9c <_malloc_r+0x2fc>
10002c54:	84000317 	ldw	r16,12(r16)
10002c58:	24008e26 	beq	r4,r16,10002e94 <_malloc_r+0x2f4>
10002c5c:	80800117 	ldw	r2,4(r16)
10002c60:	1184703a 	and	r2,r2,r6
10002c64:	1447c83a 	sub	r3,r2,r17
10002c68:	28fff90e 	bge	r5,r3,10002c50 <__alt_data_end+0xf8002c50>
10002c6c:	3809883a 	mov	r4,r7
10002c70:	01840074 	movhi	r6,4097
10002c74:	9c000417 	ldw	r16,16(r19)
10002c78:	31892004 	addi	r6,r6,9344
10002c7c:	32000204 	addi	r8,r6,8
10002c80:	82013426 	beq	r16,r8,10003154 <_malloc_r+0x5b4>
10002c84:	80c00117 	ldw	r3,4(r16)
10002c88:	00bfff04 	movi	r2,-4
10002c8c:	188e703a 	and	r7,r3,r2
10002c90:	3c45c83a 	sub	r2,r7,r17
10002c94:	00c003c4 	movi	r3,15
10002c98:	18811f16 	blt	r3,r2,10003118 <_malloc_r+0x578>
10002c9c:	32000515 	stw	r8,20(r6)
10002ca0:	32000415 	stw	r8,16(r6)
10002ca4:	10007f0e 	bge	r2,zero,10002ea4 <_malloc_r+0x304>
10002ca8:	00807fc4 	movi	r2,511
10002cac:	11c0fd36 	bltu	r2,r7,100030a4 <_malloc_r+0x504>
10002cb0:	3806d0fa 	srli	r3,r7,3
10002cb4:	01c00044 	movi	r7,1
10002cb8:	30800117 	ldw	r2,4(r6)
10002cbc:	19400044 	addi	r5,r3,1
10002cc0:	294b883a 	add	r5,r5,r5
10002cc4:	1807d0ba 	srai	r3,r3,2
10002cc8:	294b883a 	add	r5,r5,r5
10002ccc:	294b883a 	add	r5,r5,r5
10002cd0:	298b883a 	add	r5,r5,r6
10002cd4:	38c6983a 	sll	r3,r7,r3
10002cd8:	29c00017 	ldw	r7,0(r5)
10002cdc:	2a7ffe04 	addi	r9,r5,-8
10002ce0:	1886b03a 	or	r3,r3,r2
10002ce4:	82400315 	stw	r9,12(r16)
10002ce8:	81c00215 	stw	r7,8(r16)
10002cec:	30c00115 	stw	r3,4(r6)
10002cf0:	2c000015 	stw	r16,0(r5)
10002cf4:	3c000315 	stw	r16,12(r7)
10002cf8:	2005d0ba 	srai	r2,r4,2
10002cfc:	01400044 	movi	r5,1
10002d00:	288a983a 	sll	r5,r5,r2
10002d04:	19406f36 	bltu	r3,r5,10002ec4 <_malloc_r+0x324>
10002d08:	28c4703a 	and	r2,r5,r3
10002d0c:	10000a1e 	bne	r2,zero,10002d38 <_malloc_r+0x198>
10002d10:	00bfff04 	movi	r2,-4
10002d14:	294b883a 	add	r5,r5,r5
10002d18:	2088703a 	and	r4,r4,r2
10002d1c:	28c4703a 	and	r2,r5,r3
10002d20:	21000104 	addi	r4,r4,4
10002d24:	1000041e 	bne	r2,zero,10002d38 <_malloc_r+0x198>
10002d28:	294b883a 	add	r5,r5,r5
10002d2c:	28c4703a 	and	r2,r5,r3
10002d30:	21000104 	addi	r4,r4,4
10002d34:	103ffc26 	beq	r2,zero,10002d28 <__alt_data_end+0xf8002d28>
10002d38:	02bfff04 	movi	r10,-4
10002d3c:	024003c4 	movi	r9,15
10002d40:	21800044 	addi	r6,r4,1
10002d44:	318d883a 	add	r6,r6,r6
10002d48:	318d883a 	add	r6,r6,r6
10002d4c:	318d883a 	add	r6,r6,r6
10002d50:	998d883a 	add	r6,r19,r6
10002d54:	333ffe04 	addi	r12,r6,-8
10002d58:	2017883a 	mov	r11,r4
10002d5c:	31800104 	addi	r6,r6,4
10002d60:	34000017 	ldw	r16,0(r6)
10002d64:	31fffd04 	addi	r7,r6,-12
10002d68:	81c0041e 	bne	r16,r7,10002d7c <_malloc_r+0x1dc>
10002d6c:	0000fb06 	br	1000315c <_malloc_r+0x5bc>
10002d70:	1801030e 	bge	r3,zero,10003180 <_malloc_r+0x5e0>
10002d74:	84000317 	ldw	r16,12(r16)
10002d78:	81c0f826 	beq	r16,r7,1000315c <_malloc_r+0x5bc>
10002d7c:	80800117 	ldw	r2,4(r16)
10002d80:	1284703a 	and	r2,r2,r10
10002d84:	1447c83a 	sub	r3,r2,r17
10002d88:	48fff90e 	bge	r9,r3,10002d70 <__alt_data_end+0xf8002d70>
10002d8c:	80800317 	ldw	r2,12(r16)
10002d90:	81000217 	ldw	r4,8(r16)
10002d94:	89400054 	ori	r5,r17,1
10002d98:	81400115 	stw	r5,4(r16)
10002d9c:	20800315 	stw	r2,12(r4)
10002da0:	11000215 	stw	r4,8(r2)
10002da4:	8463883a 	add	r17,r16,r17
10002da8:	9c400515 	stw	r17,20(r19)
10002dac:	9c400415 	stw	r17,16(r19)
10002db0:	18800054 	ori	r2,r3,1
10002db4:	88800115 	stw	r2,4(r17)
10002db8:	8a000315 	stw	r8,12(r17)
10002dbc:	8a000215 	stw	r8,8(r17)
10002dc0:	88e3883a 	add	r17,r17,r3
10002dc4:	88c00015 	stw	r3,0(r17)
10002dc8:	9009883a 	mov	r4,r18
10002dcc:	000fca00 	call	1000fca0 <__malloc_unlock>
10002dd0:	80800204 	addi	r2,r16,8
10002dd4:	00001b06 	br	10002e44 <_malloc_r+0x2a4>
10002dd8:	04400404 	movi	r17,16
10002ddc:	89402536 	bltu	r17,r5,10002e74 <_malloc_r+0x2d4>
10002de0:	000fc7c0 	call	1000fc7c <__malloc_lock>
10002de4:	00800184 	movi	r2,6
10002de8:	01000084 	movi	r4,2
10002dec:	04c40074 	movhi	r19,4097
10002df0:	1085883a 	add	r2,r2,r2
10002df4:	9cc92004 	addi	r19,r19,9344
10002df8:	1085883a 	add	r2,r2,r2
10002dfc:	9885883a 	add	r2,r19,r2
10002e00:	14000117 	ldw	r16,4(r2)
10002e04:	10fffe04 	addi	r3,r2,-8
10002e08:	80c0d926 	beq	r16,r3,10003170 <_malloc_r+0x5d0>
10002e0c:	80c00117 	ldw	r3,4(r16)
10002e10:	81000317 	ldw	r4,12(r16)
10002e14:	00bfff04 	movi	r2,-4
10002e18:	1884703a 	and	r2,r3,r2
10002e1c:	81400217 	ldw	r5,8(r16)
10002e20:	8085883a 	add	r2,r16,r2
10002e24:	10c00117 	ldw	r3,4(r2)
10002e28:	29000315 	stw	r4,12(r5)
10002e2c:	21400215 	stw	r5,8(r4)
10002e30:	18c00054 	ori	r3,r3,1
10002e34:	10c00115 	stw	r3,4(r2)
10002e38:	9009883a 	mov	r4,r18
10002e3c:	000fca00 	call	1000fca0 <__malloc_unlock>
10002e40:	80800204 	addi	r2,r16,8
10002e44:	dfc00a17 	ldw	ra,40(sp)
10002e48:	df000917 	ldw	fp,36(sp)
10002e4c:	ddc00817 	ldw	r23,32(sp)
10002e50:	dd800717 	ldw	r22,28(sp)
10002e54:	dd400617 	ldw	r21,24(sp)
10002e58:	dd000517 	ldw	r20,20(sp)
10002e5c:	dcc00417 	ldw	r19,16(sp)
10002e60:	dc800317 	ldw	r18,12(sp)
10002e64:	dc400217 	ldw	r17,8(sp)
10002e68:	dc000117 	ldw	r16,4(sp)
10002e6c:	dec00b04 	addi	sp,sp,44
10002e70:	f800283a 	ret
10002e74:	00800304 	movi	r2,12
10002e78:	90800015 	stw	r2,0(r18)
10002e7c:	0005883a 	mov	r2,zero
10002e80:	003ff006 	br	10002e44 <__alt_data_end+0xf8002e44>
10002e84:	01002004 	movi	r4,128
10002e88:	02001004 	movi	r8,64
10002e8c:	01c00fc4 	movi	r7,63
10002e90:	003f6106 	br	10002c18 <__alt_data_end+0xf8002c18>
10002e94:	4009883a 	mov	r4,r8
10002e98:	003f7506 	br	10002c70 <__alt_data_end+0xf8002c70>
10002e9c:	81000317 	ldw	r4,12(r16)
10002ea0:	003fde06 	br	10002e1c <__alt_data_end+0xf8002e1c>
10002ea4:	81c5883a 	add	r2,r16,r7
10002ea8:	11400117 	ldw	r5,4(r2)
10002eac:	9009883a 	mov	r4,r18
10002eb0:	29400054 	ori	r5,r5,1
10002eb4:	11400115 	stw	r5,4(r2)
10002eb8:	000fca00 	call	1000fca0 <__malloc_unlock>
10002ebc:	80800204 	addi	r2,r16,8
10002ec0:	003fe006 	br	10002e44 <__alt_data_end+0xf8002e44>
10002ec4:	9c000217 	ldw	r16,8(r19)
10002ec8:	00bfff04 	movi	r2,-4
10002ecc:	85800117 	ldw	r22,4(r16)
10002ed0:	b0ac703a 	and	r22,r22,r2
10002ed4:	b4400336 	bltu	r22,r17,10002ee4 <_malloc_r+0x344>
10002ed8:	b445c83a 	sub	r2,r22,r17
10002edc:	00c003c4 	movi	r3,15
10002ee0:	18805d16 	blt	r3,r2,10003058 <_malloc_r+0x4b8>
10002ee4:	05c40074 	movhi	r23,4097
10002ee8:	00840074 	movhi	r2,4097
10002eec:	10959704 	addi	r2,r2,22108
10002ef0:	bdcec704 	addi	r23,r23,15132
10002ef4:	15400017 	ldw	r21,0(r2)
10002ef8:	b8c00017 	ldw	r3,0(r23)
10002efc:	00bfffc4 	movi	r2,-1
10002f00:	858d883a 	add	r6,r16,r22
10002f04:	8d6b883a 	add	r21,r17,r21
10002f08:	1880ea26 	beq	r3,r2,100032b4 <_malloc_r+0x714>
10002f0c:	ad4403c4 	addi	r21,r21,4111
10002f10:	00bc0004 	movi	r2,-4096
10002f14:	a8aa703a 	and	r21,r21,r2
10002f18:	a80b883a 	mov	r5,r21
10002f1c:	9009883a 	mov	r4,r18
10002f20:	d9800015 	stw	r6,0(sp)
10002f24:	0003f700 	call	10003f70 <_sbrk_r>
10002f28:	1029883a 	mov	r20,r2
10002f2c:	00bfffc4 	movi	r2,-1
10002f30:	d9800017 	ldw	r6,0(sp)
10002f34:	a080e826 	beq	r20,r2,100032d8 <_malloc_r+0x738>
10002f38:	a180a636 	bltu	r20,r6,100031d4 <_malloc_r+0x634>
10002f3c:	07040074 	movhi	fp,4097
10002f40:	e715a204 	addi	fp,fp,22152
10002f44:	e0800017 	ldw	r2,0(fp)
10002f48:	a887883a 	add	r3,r21,r2
10002f4c:	e0c00015 	stw	r3,0(fp)
10002f50:	3500e626 	beq	r6,r20,100032ec <_malloc_r+0x74c>
10002f54:	b9000017 	ldw	r4,0(r23)
10002f58:	00bfffc4 	movi	r2,-1
10002f5c:	2080ee26 	beq	r4,r2,10003318 <_malloc_r+0x778>
10002f60:	a185c83a 	sub	r2,r20,r6
10002f64:	10c5883a 	add	r2,r2,r3
10002f68:	e0800015 	stw	r2,0(fp)
10002f6c:	a0c001cc 	andi	r3,r20,7
10002f70:	1800bc26 	beq	r3,zero,10003264 <_malloc_r+0x6c4>
10002f74:	a0e9c83a 	sub	r20,r20,r3
10002f78:	00840204 	movi	r2,4104
10002f7c:	a5000204 	addi	r20,r20,8
10002f80:	10c7c83a 	sub	r3,r2,r3
10002f84:	a545883a 	add	r2,r20,r21
10002f88:	1083ffcc 	andi	r2,r2,4095
10002f8c:	18abc83a 	sub	r21,r3,r2
10002f90:	a80b883a 	mov	r5,r21
10002f94:	9009883a 	mov	r4,r18
10002f98:	0003f700 	call	10003f70 <_sbrk_r>
10002f9c:	00ffffc4 	movi	r3,-1
10002fa0:	10c0e126 	beq	r2,r3,10003328 <_malloc_r+0x788>
10002fa4:	1505c83a 	sub	r2,r2,r20
10002fa8:	1545883a 	add	r2,r2,r21
10002fac:	10800054 	ori	r2,r2,1
10002fb0:	e0c00017 	ldw	r3,0(fp)
10002fb4:	9d000215 	stw	r20,8(r19)
10002fb8:	a0800115 	stw	r2,4(r20)
10002fbc:	a8c7883a 	add	r3,r21,r3
10002fc0:	e0c00015 	stw	r3,0(fp)
10002fc4:	84c00e26 	beq	r16,r19,10003000 <_malloc_r+0x460>
10002fc8:	018003c4 	movi	r6,15
10002fcc:	3580a72e 	bgeu	r6,r22,1000326c <_malloc_r+0x6cc>
10002fd0:	81400117 	ldw	r5,4(r16)
10002fd4:	013ffe04 	movi	r4,-8
10002fd8:	b0bffd04 	addi	r2,r22,-12
10002fdc:	1104703a 	and	r2,r2,r4
10002fe0:	2900004c 	andi	r4,r5,1
10002fe4:	2088b03a 	or	r4,r4,r2
10002fe8:	81000115 	stw	r4,4(r16)
10002fec:	01400144 	movi	r5,5
10002ff0:	8089883a 	add	r4,r16,r2
10002ff4:	21400115 	stw	r5,4(r4)
10002ff8:	21400215 	stw	r5,8(r4)
10002ffc:	3080cd36 	bltu	r6,r2,10003334 <_malloc_r+0x794>
10003000:	00840074 	movhi	r2,4097
10003004:	10959604 	addi	r2,r2,22104
10003008:	11000017 	ldw	r4,0(r2)
1000300c:	20c0012e 	bgeu	r4,r3,10003014 <_malloc_r+0x474>
10003010:	10c00015 	stw	r3,0(r2)
10003014:	00840074 	movhi	r2,4097
10003018:	10959504 	addi	r2,r2,22100
1000301c:	11000017 	ldw	r4,0(r2)
10003020:	9c000217 	ldw	r16,8(r19)
10003024:	20c0012e 	bgeu	r4,r3,1000302c <_malloc_r+0x48c>
10003028:	10c00015 	stw	r3,0(r2)
1000302c:	80c00117 	ldw	r3,4(r16)
10003030:	00bfff04 	movi	r2,-4
10003034:	1886703a 	and	r3,r3,r2
10003038:	1c45c83a 	sub	r2,r3,r17
1000303c:	1c400236 	bltu	r3,r17,10003048 <_malloc_r+0x4a8>
10003040:	00c003c4 	movi	r3,15
10003044:	18800416 	blt	r3,r2,10003058 <_malloc_r+0x4b8>
10003048:	9009883a 	mov	r4,r18
1000304c:	000fca00 	call	1000fca0 <__malloc_unlock>
10003050:	0005883a 	mov	r2,zero
10003054:	003f7b06 	br	10002e44 <__alt_data_end+0xf8002e44>
10003058:	88c00054 	ori	r3,r17,1
1000305c:	80c00115 	stw	r3,4(r16)
10003060:	8463883a 	add	r17,r16,r17
10003064:	10800054 	ori	r2,r2,1
10003068:	9c400215 	stw	r17,8(r19)
1000306c:	88800115 	stw	r2,4(r17)
10003070:	9009883a 	mov	r4,r18
10003074:	000fca00 	call	1000fca0 <__malloc_unlock>
10003078:	80800204 	addi	r2,r16,8
1000307c:	003f7106 	br	10002e44 <__alt_data_end+0xf8002e44>
10003080:	00c00504 	movi	r3,20
10003084:	18804a2e 	bgeu	r3,r2,100031b0 <_malloc_r+0x610>
10003088:	00c01504 	movi	r3,84
1000308c:	18806e36 	bltu	r3,r2,10003248 <_malloc_r+0x6a8>
10003090:	8804d33a 	srli	r2,r17,12
10003094:	12001bc4 	addi	r8,r2,111
10003098:	11c01b84 	addi	r7,r2,110
1000309c:	4209883a 	add	r4,r8,r8
100030a0:	003edd06 	br	10002c18 <__alt_data_end+0xf8002c18>
100030a4:	3804d27a 	srli	r2,r7,9
100030a8:	00c00104 	movi	r3,4
100030ac:	1880442e 	bgeu	r3,r2,100031c0 <_malloc_r+0x620>
100030b0:	00c00504 	movi	r3,20
100030b4:	18808136 	bltu	r3,r2,100032bc <_malloc_r+0x71c>
100030b8:	11401704 	addi	r5,r2,92
100030bc:	10c016c4 	addi	r3,r2,91
100030c0:	294b883a 	add	r5,r5,r5
100030c4:	294b883a 	add	r5,r5,r5
100030c8:	294b883a 	add	r5,r5,r5
100030cc:	994b883a 	add	r5,r19,r5
100030d0:	28800017 	ldw	r2,0(r5)
100030d4:	01840074 	movhi	r6,4097
100030d8:	297ffe04 	addi	r5,r5,-8
100030dc:	31892004 	addi	r6,r6,9344
100030e0:	28806526 	beq	r5,r2,10003278 <_malloc_r+0x6d8>
100030e4:	01bfff04 	movi	r6,-4
100030e8:	10c00117 	ldw	r3,4(r2)
100030ec:	1986703a 	and	r3,r3,r6
100030f0:	38c0022e 	bgeu	r7,r3,100030fc <_malloc_r+0x55c>
100030f4:	10800217 	ldw	r2,8(r2)
100030f8:	28bffb1e 	bne	r5,r2,100030e8 <__alt_data_end+0xf80030e8>
100030fc:	11400317 	ldw	r5,12(r2)
10003100:	98c00117 	ldw	r3,4(r19)
10003104:	81400315 	stw	r5,12(r16)
10003108:	80800215 	stw	r2,8(r16)
1000310c:	2c000215 	stw	r16,8(r5)
10003110:	14000315 	stw	r16,12(r2)
10003114:	003ef806 	br	10002cf8 <__alt_data_end+0xf8002cf8>
10003118:	88c00054 	ori	r3,r17,1
1000311c:	80c00115 	stw	r3,4(r16)
10003120:	8463883a 	add	r17,r16,r17
10003124:	34400515 	stw	r17,20(r6)
10003128:	34400415 	stw	r17,16(r6)
1000312c:	10c00054 	ori	r3,r2,1
10003130:	8a000315 	stw	r8,12(r17)
10003134:	8a000215 	stw	r8,8(r17)
10003138:	88c00115 	stw	r3,4(r17)
1000313c:	88a3883a 	add	r17,r17,r2
10003140:	88800015 	stw	r2,0(r17)
10003144:	9009883a 	mov	r4,r18
10003148:	000fca00 	call	1000fca0 <__malloc_unlock>
1000314c:	80800204 	addi	r2,r16,8
10003150:	003f3c06 	br	10002e44 <__alt_data_end+0xf8002e44>
10003154:	30c00117 	ldw	r3,4(r6)
10003158:	003ee706 	br	10002cf8 <__alt_data_end+0xf8002cf8>
1000315c:	5ac00044 	addi	r11,r11,1
10003160:	588000cc 	andi	r2,r11,3
10003164:	31800204 	addi	r6,r6,8
10003168:	103efd1e 	bne	r2,zero,10002d60 <__alt_data_end+0xf8002d60>
1000316c:	00002406 	br	10003200 <_malloc_r+0x660>
10003170:	14000317 	ldw	r16,12(r2)
10003174:	143f251e 	bne	r2,r16,10002e0c <__alt_data_end+0xf8002e0c>
10003178:	21000084 	addi	r4,r4,2
1000317c:	003ebc06 	br	10002c70 <__alt_data_end+0xf8002c70>
10003180:	8085883a 	add	r2,r16,r2
10003184:	10c00117 	ldw	r3,4(r2)
10003188:	81000317 	ldw	r4,12(r16)
1000318c:	81400217 	ldw	r5,8(r16)
10003190:	18c00054 	ori	r3,r3,1
10003194:	10c00115 	stw	r3,4(r2)
10003198:	29000315 	stw	r4,12(r5)
1000319c:	21400215 	stw	r5,8(r4)
100031a0:	9009883a 	mov	r4,r18
100031a4:	000fca00 	call	1000fca0 <__malloc_unlock>
100031a8:	80800204 	addi	r2,r16,8
100031ac:	003f2506 	br	10002e44 <__alt_data_end+0xf8002e44>
100031b0:	12001704 	addi	r8,r2,92
100031b4:	11c016c4 	addi	r7,r2,91
100031b8:	4209883a 	add	r4,r8,r8
100031bc:	003e9606 	br	10002c18 <__alt_data_end+0xf8002c18>
100031c0:	3804d1ba 	srli	r2,r7,6
100031c4:	11400e44 	addi	r5,r2,57
100031c8:	10c00e04 	addi	r3,r2,56
100031cc:	294b883a 	add	r5,r5,r5
100031d0:	003fbc06 	br	100030c4 <__alt_data_end+0xf80030c4>
100031d4:	84ff5926 	beq	r16,r19,10002f3c <__alt_data_end+0xf8002f3c>
100031d8:	00840074 	movhi	r2,4097
100031dc:	10892004 	addi	r2,r2,9344
100031e0:	14000217 	ldw	r16,8(r2)
100031e4:	00bfff04 	movi	r2,-4
100031e8:	80c00117 	ldw	r3,4(r16)
100031ec:	1886703a 	and	r3,r3,r2
100031f0:	003f9106 	br	10003038 <__alt_data_end+0xf8003038>
100031f4:	60800217 	ldw	r2,8(r12)
100031f8:	213fffc4 	addi	r4,r4,-1
100031fc:	1300651e 	bne	r2,r12,10003394 <_malloc_r+0x7f4>
10003200:	208000cc 	andi	r2,r4,3
10003204:	633ffe04 	addi	r12,r12,-8
10003208:	103ffa1e 	bne	r2,zero,100031f4 <__alt_data_end+0xf80031f4>
1000320c:	98800117 	ldw	r2,4(r19)
10003210:	0146303a 	nor	r3,zero,r5
10003214:	1884703a 	and	r2,r3,r2
10003218:	98800115 	stw	r2,4(r19)
1000321c:	294b883a 	add	r5,r5,r5
10003220:	117f2836 	bltu	r2,r5,10002ec4 <__alt_data_end+0xf8002ec4>
10003224:	283f2726 	beq	r5,zero,10002ec4 <__alt_data_end+0xf8002ec4>
10003228:	2886703a 	and	r3,r5,r2
1000322c:	5809883a 	mov	r4,r11
10003230:	183ec31e 	bne	r3,zero,10002d40 <__alt_data_end+0xf8002d40>
10003234:	294b883a 	add	r5,r5,r5
10003238:	2886703a 	and	r3,r5,r2
1000323c:	21000104 	addi	r4,r4,4
10003240:	183ffc26 	beq	r3,zero,10003234 <__alt_data_end+0xf8003234>
10003244:	003ebe06 	br	10002d40 <__alt_data_end+0xf8002d40>
10003248:	00c05504 	movi	r3,340
1000324c:	18801236 	bltu	r3,r2,10003298 <_malloc_r+0x6f8>
10003250:	8804d3fa 	srli	r2,r17,15
10003254:	12001e04 	addi	r8,r2,120
10003258:	11c01dc4 	addi	r7,r2,119
1000325c:	4209883a 	add	r4,r8,r8
10003260:	003e6d06 	br	10002c18 <__alt_data_end+0xf8002c18>
10003264:	00c40004 	movi	r3,4096
10003268:	003f4606 	br	10002f84 <__alt_data_end+0xf8002f84>
1000326c:	00800044 	movi	r2,1
10003270:	a0800115 	stw	r2,4(r20)
10003274:	003f7406 	br	10003048 <__alt_data_end+0xf8003048>
10003278:	1805d0ba 	srai	r2,r3,2
1000327c:	01c00044 	movi	r7,1
10003280:	30c00117 	ldw	r3,4(r6)
10003284:	388e983a 	sll	r7,r7,r2
10003288:	2805883a 	mov	r2,r5
1000328c:	38c6b03a 	or	r3,r7,r3
10003290:	30c00115 	stw	r3,4(r6)
10003294:	003f9b06 	br	10003104 <__alt_data_end+0xf8003104>
10003298:	00c15504 	movi	r3,1364
1000329c:	18801a36 	bltu	r3,r2,10003308 <_malloc_r+0x768>
100032a0:	8804d4ba 	srli	r2,r17,18
100032a4:	12001f44 	addi	r8,r2,125
100032a8:	11c01f04 	addi	r7,r2,124
100032ac:	4209883a 	add	r4,r8,r8
100032b0:	003e5906 	br	10002c18 <__alt_data_end+0xf8002c18>
100032b4:	ad400404 	addi	r21,r21,16
100032b8:	003f1706 	br	10002f18 <__alt_data_end+0xf8002f18>
100032bc:	00c01504 	movi	r3,84
100032c0:	18802336 	bltu	r3,r2,10003350 <_malloc_r+0x7b0>
100032c4:	3804d33a 	srli	r2,r7,12
100032c8:	11401bc4 	addi	r5,r2,111
100032cc:	10c01b84 	addi	r3,r2,110
100032d0:	294b883a 	add	r5,r5,r5
100032d4:	003f7b06 	br	100030c4 <__alt_data_end+0xf80030c4>
100032d8:	9c000217 	ldw	r16,8(r19)
100032dc:	00bfff04 	movi	r2,-4
100032e0:	80c00117 	ldw	r3,4(r16)
100032e4:	1886703a 	and	r3,r3,r2
100032e8:	003f5306 	br	10003038 <__alt_data_end+0xf8003038>
100032ec:	3083ffcc 	andi	r2,r6,4095
100032f0:	103f181e 	bne	r2,zero,10002f54 <__alt_data_end+0xf8002f54>
100032f4:	99000217 	ldw	r4,8(r19)
100032f8:	b545883a 	add	r2,r22,r21
100032fc:	10800054 	ori	r2,r2,1
10003300:	20800115 	stw	r2,4(r4)
10003304:	003f3e06 	br	10003000 <__alt_data_end+0xf8003000>
10003308:	01003f84 	movi	r4,254
1000330c:	02001fc4 	movi	r8,127
10003310:	01c01f84 	movi	r7,126
10003314:	003e4006 	br	10002c18 <__alt_data_end+0xf8002c18>
10003318:	00840074 	movhi	r2,4097
1000331c:	108ec704 	addi	r2,r2,15132
10003320:	15000015 	stw	r20,0(r2)
10003324:	003f1106 	br	10002f6c <__alt_data_end+0xf8002f6c>
10003328:	00800044 	movi	r2,1
1000332c:	002b883a 	mov	r21,zero
10003330:	003f1f06 	br	10002fb0 <__alt_data_end+0xf8002fb0>
10003334:	81400204 	addi	r5,r16,8
10003338:	9009883a 	mov	r4,r18
1000333c:	0001e400 	call	10001e40 <_free_r>
10003340:	00840074 	movhi	r2,4097
10003344:	1095a204 	addi	r2,r2,22152
10003348:	10c00017 	ldw	r3,0(r2)
1000334c:	003f2c06 	br	10003000 <__alt_data_end+0xf8003000>
10003350:	00c05504 	movi	r3,340
10003354:	18800536 	bltu	r3,r2,1000336c <_malloc_r+0x7cc>
10003358:	3804d3fa 	srli	r2,r7,15
1000335c:	11401e04 	addi	r5,r2,120
10003360:	10c01dc4 	addi	r3,r2,119
10003364:	294b883a 	add	r5,r5,r5
10003368:	003f5606 	br	100030c4 <__alt_data_end+0xf80030c4>
1000336c:	00c15504 	movi	r3,1364
10003370:	18800536 	bltu	r3,r2,10003388 <_malloc_r+0x7e8>
10003374:	3804d4ba 	srli	r2,r7,18
10003378:	11401f44 	addi	r5,r2,125
1000337c:	10c01f04 	addi	r3,r2,124
10003380:	294b883a 	add	r5,r5,r5
10003384:	003f4f06 	br	100030c4 <__alt_data_end+0xf80030c4>
10003388:	01403f84 	movi	r5,254
1000338c:	00c01f84 	movi	r3,126
10003390:	003f4c06 	br	100030c4 <__alt_data_end+0xf80030c4>
10003394:	98800117 	ldw	r2,4(r19)
10003398:	003fa006 	br	1000321c <__alt_data_end+0xf800321c>
1000339c:	8808d0fa 	srli	r4,r17,3
100033a0:	20800044 	addi	r2,r4,1
100033a4:	1085883a 	add	r2,r2,r2
100033a8:	003e9006 	br	10002dec <__alt_data_end+0xf8002dec>

100033ac <memcpy>:
100033ac:	defffd04 	addi	sp,sp,-12
100033b0:	dfc00215 	stw	ra,8(sp)
100033b4:	dc400115 	stw	r17,4(sp)
100033b8:	dc000015 	stw	r16,0(sp)
100033bc:	00c003c4 	movi	r3,15
100033c0:	2005883a 	mov	r2,r4
100033c4:	1980452e 	bgeu	r3,r6,100034dc <memcpy+0x130>
100033c8:	2906b03a 	or	r3,r5,r4
100033cc:	18c000cc 	andi	r3,r3,3
100033d0:	1800441e 	bne	r3,zero,100034e4 <memcpy+0x138>
100033d4:	347ffc04 	addi	r17,r6,-16
100033d8:	8822d13a 	srli	r17,r17,4
100033dc:	28c00104 	addi	r3,r5,4
100033e0:	23400104 	addi	r13,r4,4
100033e4:	8820913a 	slli	r16,r17,4
100033e8:	2b000204 	addi	r12,r5,8
100033ec:	22c00204 	addi	r11,r4,8
100033f0:	84000504 	addi	r16,r16,20
100033f4:	2a800304 	addi	r10,r5,12
100033f8:	22400304 	addi	r9,r4,12
100033fc:	2c21883a 	add	r16,r5,r16
10003400:	2811883a 	mov	r8,r5
10003404:	200f883a 	mov	r7,r4
10003408:	41000017 	ldw	r4,0(r8)
1000340c:	1fc00017 	ldw	ra,0(r3)
10003410:	63c00017 	ldw	r15,0(r12)
10003414:	39000015 	stw	r4,0(r7)
10003418:	53800017 	ldw	r14,0(r10)
1000341c:	6fc00015 	stw	ra,0(r13)
10003420:	5bc00015 	stw	r15,0(r11)
10003424:	4b800015 	stw	r14,0(r9)
10003428:	18c00404 	addi	r3,r3,16
1000342c:	39c00404 	addi	r7,r7,16
10003430:	42000404 	addi	r8,r8,16
10003434:	6b400404 	addi	r13,r13,16
10003438:	63000404 	addi	r12,r12,16
1000343c:	5ac00404 	addi	r11,r11,16
10003440:	52800404 	addi	r10,r10,16
10003444:	4a400404 	addi	r9,r9,16
10003448:	1c3fef1e 	bne	r3,r16,10003408 <__alt_data_end+0xf8003408>
1000344c:	89c00044 	addi	r7,r17,1
10003450:	380e913a 	slli	r7,r7,4
10003454:	310003cc 	andi	r4,r6,15
10003458:	02c000c4 	movi	r11,3
1000345c:	11c7883a 	add	r3,r2,r7
10003460:	29cb883a 	add	r5,r5,r7
10003464:	5900212e 	bgeu	r11,r4,100034ec <memcpy+0x140>
10003468:	1813883a 	mov	r9,r3
1000346c:	2811883a 	mov	r8,r5
10003470:	200f883a 	mov	r7,r4
10003474:	42800017 	ldw	r10,0(r8)
10003478:	4a400104 	addi	r9,r9,4
1000347c:	39ffff04 	addi	r7,r7,-4
10003480:	4abfff15 	stw	r10,-4(r9)
10003484:	42000104 	addi	r8,r8,4
10003488:	59fffa36 	bltu	r11,r7,10003474 <__alt_data_end+0xf8003474>
1000348c:	213fff04 	addi	r4,r4,-4
10003490:	2008d0ba 	srli	r4,r4,2
10003494:	318000cc 	andi	r6,r6,3
10003498:	21000044 	addi	r4,r4,1
1000349c:	2109883a 	add	r4,r4,r4
100034a0:	2109883a 	add	r4,r4,r4
100034a4:	1907883a 	add	r3,r3,r4
100034a8:	290b883a 	add	r5,r5,r4
100034ac:	30000626 	beq	r6,zero,100034c8 <memcpy+0x11c>
100034b0:	198d883a 	add	r6,r3,r6
100034b4:	29c00003 	ldbu	r7,0(r5)
100034b8:	18c00044 	addi	r3,r3,1
100034bc:	29400044 	addi	r5,r5,1
100034c0:	19ffffc5 	stb	r7,-1(r3)
100034c4:	19bffb1e 	bne	r3,r6,100034b4 <__alt_data_end+0xf80034b4>
100034c8:	dfc00217 	ldw	ra,8(sp)
100034cc:	dc400117 	ldw	r17,4(sp)
100034d0:	dc000017 	ldw	r16,0(sp)
100034d4:	dec00304 	addi	sp,sp,12
100034d8:	f800283a 	ret
100034dc:	2007883a 	mov	r3,r4
100034e0:	003ff206 	br	100034ac <__alt_data_end+0xf80034ac>
100034e4:	2007883a 	mov	r3,r4
100034e8:	003ff106 	br	100034b0 <__alt_data_end+0xf80034b0>
100034ec:	200d883a 	mov	r6,r4
100034f0:	003fee06 	br	100034ac <__alt_data_end+0xf80034ac>

100034f4 <memset>:
100034f4:	20c000cc 	andi	r3,r4,3
100034f8:	2005883a 	mov	r2,r4
100034fc:	18004426 	beq	r3,zero,10003610 <memset+0x11c>
10003500:	31ffffc4 	addi	r7,r6,-1
10003504:	30004026 	beq	r6,zero,10003608 <memset+0x114>
10003508:	2813883a 	mov	r9,r5
1000350c:	200d883a 	mov	r6,r4
10003510:	2007883a 	mov	r3,r4
10003514:	00000406 	br	10003528 <memset+0x34>
10003518:	3a3fffc4 	addi	r8,r7,-1
1000351c:	31800044 	addi	r6,r6,1
10003520:	38003926 	beq	r7,zero,10003608 <memset+0x114>
10003524:	400f883a 	mov	r7,r8
10003528:	18c00044 	addi	r3,r3,1
1000352c:	32400005 	stb	r9,0(r6)
10003530:	1a0000cc 	andi	r8,r3,3
10003534:	403ff81e 	bne	r8,zero,10003518 <__alt_data_end+0xf8003518>
10003538:	010000c4 	movi	r4,3
1000353c:	21c02d2e 	bgeu	r4,r7,100035f4 <memset+0x100>
10003540:	29003fcc 	andi	r4,r5,255
10003544:	200c923a 	slli	r6,r4,8
10003548:	3108b03a 	or	r4,r6,r4
1000354c:	200c943a 	slli	r6,r4,16
10003550:	218cb03a 	or	r6,r4,r6
10003554:	010003c4 	movi	r4,15
10003558:	21c0182e 	bgeu	r4,r7,100035bc <memset+0xc8>
1000355c:	3b3ffc04 	addi	r12,r7,-16
10003560:	6018d13a 	srli	r12,r12,4
10003564:	1a000104 	addi	r8,r3,4
10003568:	1ac00204 	addi	r11,r3,8
1000356c:	6008913a 	slli	r4,r12,4
10003570:	1a800304 	addi	r10,r3,12
10003574:	1813883a 	mov	r9,r3
10003578:	21000504 	addi	r4,r4,20
1000357c:	1909883a 	add	r4,r3,r4
10003580:	49800015 	stw	r6,0(r9)
10003584:	41800015 	stw	r6,0(r8)
10003588:	59800015 	stw	r6,0(r11)
1000358c:	51800015 	stw	r6,0(r10)
10003590:	42000404 	addi	r8,r8,16
10003594:	4a400404 	addi	r9,r9,16
10003598:	5ac00404 	addi	r11,r11,16
1000359c:	52800404 	addi	r10,r10,16
100035a0:	413ff71e 	bne	r8,r4,10003580 <__alt_data_end+0xf8003580>
100035a4:	63000044 	addi	r12,r12,1
100035a8:	6018913a 	slli	r12,r12,4
100035ac:	39c003cc 	andi	r7,r7,15
100035b0:	010000c4 	movi	r4,3
100035b4:	1b07883a 	add	r3,r3,r12
100035b8:	21c00e2e 	bgeu	r4,r7,100035f4 <memset+0x100>
100035bc:	1813883a 	mov	r9,r3
100035c0:	3811883a 	mov	r8,r7
100035c4:	010000c4 	movi	r4,3
100035c8:	49800015 	stw	r6,0(r9)
100035cc:	423fff04 	addi	r8,r8,-4
100035d0:	4a400104 	addi	r9,r9,4
100035d4:	223ffc36 	bltu	r4,r8,100035c8 <__alt_data_end+0xf80035c8>
100035d8:	393fff04 	addi	r4,r7,-4
100035dc:	2008d0ba 	srli	r4,r4,2
100035e0:	39c000cc 	andi	r7,r7,3
100035e4:	21000044 	addi	r4,r4,1
100035e8:	2109883a 	add	r4,r4,r4
100035ec:	2109883a 	add	r4,r4,r4
100035f0:	1907883a 	add	r3,r3,r4
100035f4:	38000526 	beq	r7,zero,1000360c <memset+0x118>
100035f8:	19cf883a 	add	r7,r3,r7
100035fc:	19400005 	stb	r5,0(r3)
10003600:	18c00044 	addi	r3,r3,1
10003604:	38fffd1e 	bne	r7,r3,100035fc <__alt_data_end+0xf80035fc>
10003608:	f800283a 	ret
1000360c:	f800283a 	ret
10003610:	2007883a 	mov	r3,r4
10003614:	300f883a 	mov	r7,r6
10003618:	003fc706 	br	10003538 <__alt_data_end+0xf8003538>

1000361c <_printf_r>:
1000361c:	defffd04 	addi	sp,sp,-12
10003620:	2805883a 	mov	r2,r5
10003624:	dfc00015 	stw	ra,0(sp)
10003628:	d9800115 	stw	r6,4(sp)
1000362c:	d9c00215 	stw	r7,8(sp)
10003630:	21400217 	ldw	r5,8(r4)
10003634:	d9c00104 	addi	r7,sp,4
10003638:	100d883a 	mov	r6,r2
1000363c:	00044300 	call	10004430 <___vfprintf_internal_r>
10003640:	dfc00017 	ldw	ra,0(sp)
10003644:	dec00304 	addi	sp,sp,12
10003648:	f800283a 	ret

1000364c <printf>:
1000364c:	defffc04 	addi	sp,sp,-16
10003650:	dfc00015 	stw	ra,0(sp)
10003654:	d9400115 	stw	r5,4(sp)
10003658:	d9800215 	stw	r6,8(sp)
1000365c:	d9c00315 	stw	r7,12(sp)
10003660:	00840074 	movhi	r2,4097
10003664:	108ec604 	addi	r2,r2,15128
10003668:	10800017 	ldw	r2,0(r2)
1000366c:	200b883a 	mov	r5,r4
10003670:	d9800104 	addi	r6,sp,4
10003674:	11000217 	ldw	r4,8(r2)
10003678:	000670c0 	call	1000670c <__vfprintf_internal>
1000367c:	dfc00017 	ldw	ra,0(sp)
10003680:	dec00404 	addi	sp,sp,16
10003684:	f800283a 	ret

10003688 <_putchar_r>:
10003688:	21800217 	ldw	r6,8(r4)
1000368c:	0009d841 	jmpi	10009d84 <_putc_r>

10003690 <putchar>:
10003690:	00840074 	movhi	r2,4097
10003694:	108ec604 	addi	r2,r2,15128
10003698:	200b883a 	mov	r5,r4
1000369c:	11000017 	ldw	r4,0(r2)
100036a0:	21800217 	ldw	r6,8(r4)
100036a4:	0009d841 	jmpi	10009d84 <_putc_r>

100036a8 <_puts_r>:
100036a8:	defff604 	addi	sp,sp,-40
100036ac:	dc000715 	stw	r16,28(sp)
100036b0:	2021883a 	mov	r16,r4
100036b4:	2809883a 	mov	r4,r5
100036b8:	dc400815 	stw	r17,32(sp)
100036bc:	dfc00915 	stw	ra,36(sp)
100036c0:	2823883a 	mov	r17,r5
100036c4:	00041000 	call	10004100 <strlen>
100036c8:	10c00044 	addi	r3,r2,1
100036cc:	d8800115 	stw	r2,4(sp)
100036d0:	00840074 	movhi	r2,4097
100036d4:	10875804 	addi	r2,r2,7520
100036d8:	d8800215 	stw	r2,8(sp)
100036dc:	00800044 	movi	r2,1
100036e0:	d8800315 	stw	r2,12(sp)
100036e4:	00800084 	movi	r2,2
100036e8:	dc400015 	stw	r17,0(sp)
100036ec:	d8c00615 	stw	r3,24(sp)
100036f0:	dec00415 	stw	sp,16(sp)
100036f4:	d8800515 	stw	r2,20(sp)
100036f8:	80000226 	beq	r16,zero,10003704 <_puts_r+0x5c>
100036fc:	80800e17 	ldw	r2,56(r16)
10003700:	10001426 	beq	r2,zero,10003754 <_puts_r+0xac>
10003704:	81400217 	ldw	r5,8(r16)
10003708:	2880030b 	ldhu	r2,12(r5)
1000370c:	10c8000c 	andi	r3,r2,8192
10003710:	1800061e 	bne	r3,zero,1000372c <_puts_r+0x84>
10003714:	29001917 	ldw	r4,100(r5)
10003718:	00f7ffc4 	movi	r3,-8193
1000371c:	10880014 	ori	r2,r2,8192
10003720:	20c6703a 	and	r3,r4,r3
10003724:	2880030d 	sth	r2,12(r5)
10003728:	28c01915 	stw	r3,100(r5)
1000372c:	d9800404 	addi	r6,sp,16
10003730:	8009883a 	mov	r4,r16
10003734:	00084340 	call	10008434 <__sfvwrite_r>
10003738:	1000091e 	bne	r2,zero,10003760 <_puts_r+0xb8>
1000373c:	00800284 	movi	r2,10
10003740:	dfc00917 	ldw	ra,36(sp)
10003744:	dc400817 	ldw	r17,32(sp)
10003748:	dc000717 	ldw	r16,28(sp)
1000374c:	dec00a04 	addi	sp,sp,40
10003750:	f800283a 	ret
10003754:	8009883a 	mov	r4,r16
10003758:	00019b40 	call	100019b4 <__sinit>
1000375c:	003fe906 	br	10003704 <__alt_data_end+0xf8003704>
10003760:	00bfffc4 	movi	r2,-1
10003764:	003ff606 	br	10003740 <__alt_data_end+0xf8003740>

10003768 <puts>:
10003768:	00840074 	movhi	r2,4097
1000376c:	108ec604 	addi	r2,r2,15128
10003770:	200b883a 	mov	r5,r4
10003774:	11000017 	ldw	r4,0(r2)
10003778:	00036a81 	jmpi	100036a8 <_puts_r>

1000377c <realloc>:
1000377c:	00840074 	movhi	r2,4097
10003780:	108ec604 	addi	r2,r2,15128
10003784:	280d883a 	mov	r6,r5
10003788:	200b883a 	mov	r5,r4
1000378c:	11000017 	ldw	r4,0(r2)
10003790:	00037941 	jmpi	10003794 <_realloc_r>

10003794 <_realloc_r>:
10003794:	defff604 	addi	sp,sp,-40
10003798:	dc800215 	stw	r18,8(sp)
1000379c:	dfc00915 	stw	ra,36(sp)
100037a0:	df000815 	stw	fp,32(sp)
100037a4:	ddc00715 	stw	r23,28(sp)
100037a8:	dd800615 	stw	r22,24(sp)
100037ac:	dd400515 	stw	r21,20(sp)
100037b0:	dd000415 	stw	r20,16(sp)
100037b4:	dcc00315 	stw	r19,12(sp)
100037b8:	dc400115 	stw	r17,4(sp)
100037bc:	dc000015 	stw	r16,0(sp)
100037c0:	3025883a 	mov	r18,r6
100037c4:	2800b726 	beq	r5,zero,10003aa4 <_realloc_r+0x310>
100037c8:	282b883a 	mov	r21,r5
100037cc:	2029883a 	mov	r20,r4
100037d0:	000fc7c0 	call	1000fc7c <__malloc_lock>
100037d4:	a8bfff17 	ldw	r2,-4(r21)
100037d8:	043fff04 	movi	r16,-4
100037dc:	90c002c4 	addi	r3,r18,11
100037e0:	01000584 	movi	r4,22
100037e4:	acfffe04 	addi	r19,r21,-8
100037e8:	1420703a 	and	r16,r2,r16
100037ec:	20c0332e 	bgeu	r4,r3,100038bc <_realloc_r+0x128>
100037f0:	047ffe04 	movi	r17,-8
100037f4:	1c62703a 	and	r17,r3,r17
100037f8:	8807883a 	mov	r3,r17
100037fc:	88005816 	blt	r17,zero,10003960 <_realloc_r+0x1cc>
10003800:	8c805736 	bltu	r17,r18,10003960 <_realloc_r+0x1cc>
10003804:	80c0300e 	bge	r16,r3,100038c8 <_realloc_r+0x134>
10003808:	07040074 	movhi	fp,4097
1000380c:	e7092004 	addi	fp,fp,9344
10003810:	e1c00217 	ldw	r7,8(fp)
10003814:	9c09883a 	add	r4,r19,r16
10003818:	22000117 	ldw	r8,4(r4)
1000381c:	21c06326 	beq	r4,r7,100039ac <_realloc_r+0x218>
10003820:	017fff84 	movi	r5,-2
10003824:	414a703a 	and	r5,r8,r5
10003828:	214b883a 	add	r5,r4,r5
1000382c:	29800117 	ldw	r6,4(r5)
10003830:	3180004c 	andi	r6,r6,1
10003834:	30003f26 	beq	r6,zero,10003934 <_realloc_r+0x1a0>
10003838:	1080004c 	andi	r2,r2,1
1000383c:	10008326 	beq	r2,zero,10003a4c <_realloc_r+0x2b8>
10003840:	900b883a 	mov	r5,r18
10003844:	a009883a 	mov	r4,r20
10003848:	0002ba00 	call	10002ba0 <_malloc_r>
1000384c:	1025883a 	mov	r18,r2
10003850:	10011e26 	beq	r2,zero,10003ccc <_realloc_r+0x538>
10003854:	a93fff17 	ldw	r4,-4(r21)
10003858:	10fffe04 	addi	r3,r2,-8
1000385c:	00bfff84 	movi	r2,-2
10003860:	2084703a 	and	r2,r4,r2
10003864:	9885883a 	add	r2,r19,r2
10003868:	1880ee26 	beq	r3,r2,10003c24 <_realloc_r+0x490>
1000386c:	81bfff04 	addi	r6,r16,-4
10003870:	00800904 	movi	r2,36
10003874:	1180b836 	bltu	r2,r6,10003b58 <_realloc_r+0x3c4>
10003878:	00c004c4 	movi	r3,19
1000387c:	19809636 	bltu	r3,r6,10003ad8 <_realloc_r+0x344>
10003880:	9005883a 	mov	r2,r18
10003884:	a807883a 	mov	r3,r21
10003888:	19000017 	ldw	r4,0(r3)
1000388c:	11000015 	stw	r4,0(r2)
10003890:	19000117 	ldw	r4,4(r3)
10003894:	11000115 	stw	r4,4(r2)
10003898:	18c00217 	ldw	r3,8(r3)
1000389c:	10c00215 	stw	r3,8(r2)
100038a0:	a80b883a 	mov	r5,r21
100038a4:	a009883a 	mov	r4,r20
100038a8:	0001e400 	call	10001e40 <_free_r>
100038ac:	a009883a 	mov	r4,r20
100038b0:	000fca00 	call	1000fca0 <__malloc_unlock>
100038b4:	9005883a 	mov	r2,r18
100038b8:	00001206 	br	10003904 <_realloc_r+0x170>
100038bc:	00c00404 	movi	r3,16
100038c0:	1823883a 	mov	r17,r3
100038c4:	003fce06 	br	10003800 <__alt_data_end+0xf8003800>
100038c8:	a825883a 	mov	r18,r21
100038cc:	8445c83a 	sub	r2,r16,r17
100038d0:	00c003c4 	movi	r3,15
100038d4:	18802636 	bltu	r3,r2,10003970 <_realloc_r+0x1dc>
100038d8:	99800117 	ldw	r6,4(r19)
100038dc:	9c07883a 	add	r3,r19,r16
100038e0:	3180004c 	andi	r6,r6,1
100038e4:	3420b03a 	or	r16,r6,r16
100038e8:	9c000115 	stw	r16,4(r19)
100038ec:	18800117 	ldw	r2,4(r3)
100038f0:	10800054 	ori	r2,r2,1
100038f4:	18800115 	stw	r2,4(r3)
100038f8:	a009883a 	mov	r4,r20
100038fc:	000fca00 	call	1000fca0 <__malloc_unlock>
10003900:	9005883a 	mov	r2,r18
10003904:	dfc00917 	ldw	ra,36(sp)
10003908:	df000817 	ldw	fp,32(sp)
1000390c:	ddc00717 	ldw	r23,28(sp)
10003910:	dd800617 	ldw	r22,24(sp)
10003914:	dd400517 	ldw	r21,20(sp)
10003918:	dd000417 	ldw	r20,16(sp)
1000391c:	dcc00317 	ldw	r19,12(sp)
10003920:	dc800217 	ldw	r18,8(sp)
10003924:	dc400117 	ldw	r17,4(sp)
10003928:	dc000017 	ldw	r16,0(sp)
1000392c:	dec00a04 	addi	sp,sp,40
10003930:	f800283a 	ret
10003934:	017fff04 	movi	r5,-4
10003938:	414a703a 	and	r5,r8,r5
1000393c:	814d883a 	add	r6,r16,r5
10003940:	30c01f16 	blt	r6,r3,100039c0 <_realloc_r+0x22c>
10003944:	20800317 	ldw	r2,12(r4)
10003948:	20c00217 	ldw	r3,8(r4)
1000394c:	a825883a 	mov	r18,r21
10003950:	3021883a 	mov	r16,r6
10003954:	18800315 	stw	r2,12(r3)
10003958:	10c00215 	stw	r3,8(r2)
1000395c:	003fdb06 	br	100038cc <__alt_data_end+0xf80038cc>
10003960:	00800304 	movi	r2,12
10003964:	a0800015 	stw	r2,0(r20)
10003968:	0005883a 	mov	r2,zero
1000396c:	003fe506 	br	10003904 <__alt_data_end+0xf8003904>
10003970:	98c00117 	ldw	r3,4(r19)
10003974:	9c4b883a 	add	r5,r19,r17
10003978:	11000054 	ori	r4,r2,1
1000397c:	18c0004c 	andi	r3,r3,1
10003980:	1c62b03a 	or	r17,r3,r17
10003984:	9c400115 	stw	r17,4(r19)
10003988:	29000115 	stw	r4,4(r5)
1000398c:	2885883a 	add	r2,r5,r2
10003990:	10c00117 	ldw	r3,4(r2)
10003994:	29400204 	addi	r5,r5,8
10003998:	a009883a 	mov	r4,r20
1000399c:	18c00054 	ori	r3,r3,1
100039a0:	10c00115 	stw	r3,4(r2)
100039a4:	0001e400 	call	10001e40 <_free_r>
100039a8:	003fd306 	br	100038f8 <__alt_data_end+0xf80038f8>
100039ac:	017fff04 	movi	r5,-4
100039b0:	414a703a 	and	r5,r8,r5
100039b4:	89800404 	addi	r6,r17,16
100039b8:	8151883a 	add	r8,r16,r5
100039bc:	4180590e 	bge	r8,r6,10003b24 <_realloc_r+0x390>
100039c0:	1080004c 	andi	r2,r2,1
100039c4:	103f9e1e 	bne	r2,zero,10003840 <__alt_data_end+0xf8003840>
100039c8:	adbffe17 	ldw	r22,-8(r21)
100039cc:	00bfff04 	movi	r2,-4
100039d0:	9dadc83a 	sub	r22,r19,r22
100039d4:	b1800117 	ldw	r6,4(r22)
100039d8:	3084703a 	and	r2,r6,r2
100039dc:	20002026 	beq	r4,zero,10003a60 <_realloc_r+0x2cc>
100039e0:	80af883a 	add	r23,r16,r2
100039e4:	b96f883a 	add	r23,r23,r5
100039e8:	21c05f26 	beq	r4,r7,10003b68 <_realloc_r+0x3d4>
100039ec:	b8c01c16 	blt	r23,r3,10003a60 <_realloc_r+0x2cc>
100039f0:	20800317 	ldw	r2,12(r4)
100039f4:	20c00217 	ldw	r3,8(r4)
100039f8:	81bfff04 	addi	r6,r16,-4
100039fc:	01000904 	movi	r4,36
10003a00:	18800315 	stw	r2,12(r3)
10003a04:	10c00215 	stw	r3,8(r2)
10003a08:	b0c00217 	ldw	r3,8(r22)
10003a0c:	b0800317 	ldw	r2,12(r22)
10003a10:	b4800204 	addi	r18,r22,8
10003a14:	18800315 	stw	r2,12(r3)
10003a18:	10c00215 	stw	r3,8(r2)
10003a1c:	21801b36 	bltu	r4,r6,10003a8c <_realloc_r+0x2f8>
10003a20:	008004c4 	movi	r2,19
10003a24:	1180352e 	bgeu	r2,r6,10003afc <_realloc_r+0x368>
10003a28:	a8800017 	ldw	r2,0(r21)
10003a2c:	b0800215 	stw	r2,8(r22)
10003a30:	a8800117 	ldw	r2,4(r21)
10003a34:	b0800315 	stw	r2,12(r22)
10003a38:	008006c4 	movi	r2,27
10003a3c:	11807f36 	bltu	r2,r6,10003c3c <_realloc_r+0x4a8>
10003a40:	b0800404 	addi	r2,r22,16
10003a44:	ad400204 	addi	r21,r21,8
10003a48:	00002d06 	br	10003b00 <_realloc_r+0x36c>
10003a4c:	adbffe17 	ldw	r22,-8(r21)
10003a50:	00bfff04 	movi	r2,-4
10003a54:	9dadc83a 	sub	r22,r19,r22
10003a58:	b1000117 	ldw	r4,4(r22)
10003a5c:	2084703a 	and	r2,r4,r2
10003a60:	b03f7726 	beq	r22,zero,10003840 <__alt_data_end+0xf8003840>
10003a64:	80af883a 	add	r23,r16,r2
10003a68:	b8ff7516 	blt	r23,r3,10003840 <__alt_data_end+0xf8003840>
10003a6c:	b0800317 	ldw	r2,12(r22)
10003a70:	b0c00217 	ldw	r3,8(r22)
10003a74:	81bfff04 	addi	r6,r16,-4
10003a78:	01000904 	movi	r4,36
10003a7c:	18800315 	stw	r2,12(r3)
10003a80:	10c00215 	stw	r3,8(r2)
10003a84:	b4800204 	addi	r18,r22,8
10003a88:	21bfe52e 	bgeu	r4,r6,10003a20 <__alt_data_end+0xf8003a20>
10003a8c:	a80b883a 	mov	r5,r21
10003a90:	9009883a 	mov	r4,r18
10003a94:	0008b700 	call	10008b70 <memmove>
10003a98:	b821883a 	mov	r16,r23
10003a9c:	b027883a 	mov	r19,r22
10003aa0:	003f8a06 	br	100038cc <__alt_data_end+0xf80038cc>
10003aa4:	300b883a 	mov	r5,r6
10003aa8:	dfc00917 	ldw	ra,36(sp)
10003aac:	df000817 	ldw	fp,32(sp)
10003ab0:	ddc00717 	ldw	r23,28(sp)
10003ab4:	dd800617 	ldw	r22,24(sp)
10003ab8:	dd400517 	ldw	r21,20(sp)
10003abc:	dd000417 	ldw	r20,16(sp)
10003ac0:	dcc00317 	ldw	r19,12(sp)
10003ac4:	dc800217 	ldw	r18,8(sp)
10003ac8:	dc400117 	ldw	r17,4(sp)
10003acc:	dc000017 	ldw	r16,0(sp)
10003ad0:	dec00a04 	addi	sp,sp,40
10003ad4:	0002ba01 	jmpi	10002ba0 <_malloc_r>
10003ad8:	a8c00017 	ldw	r3,0(r21)
10003adc:	90c00015 	stw	r3,0(r18)
10003ae0:	a8c00117 	ldw	r3,4(r21)
10003ae4:	90c00115 	stw	r3,4(r18)
10003ae8:	00c006c4 	movi	r3,27
10003aec:	19804536 	bltu	r3,r6,10003c04 <_realloc_r+0x470>
10003af0:	90800204 	addi	r2,r18,8
10003af4:	a8c00204 	addi	r3,r21,8
10003af8:	003f6306 	br	10003888 <__alt_data_end+0xf8003888>
10003afc:	9005883a 	mov	r2,r18
10003b00:	a8c00017 	ldw	r3,0(r21)
10003b04:	b821883a 	mov	r16,r23
10003b08:	b027883a 	mov	r19,r22
10003b0c:	10c00015 	stw	r3,0(r2)
10003b10:	a8c00117 	ldw	r3,4(r21)
10003b14:	10c00115 	stw	r3,4(r2)
10003b18:	a8c00217 	ldw	r3,8(r21)
10003b1c:	10c00215 	stw	r3,8(r2)
10003b20:	003f6a06 	br	100038cc <__alt_data_end+0xf80038cc>
10003b24:	9c67883a 	add	r19,r19,r17
10003b28:	4445c83a 	sub	r2,r8,r17
10003b2c:	e4c00215 	stw	r19,8(fp)
10003b30:	10800054 	ori	r2,r2,1
10003b34:	98800115 	stw	r2,4(r19)
10003b38:	a8bfff17 	ldw	r2,-4(r21)
10003b3c:	a009883a 	mov	r4,r20
10003b40:	1080004c 	andi	r2,r2,1
10003b44:	1462b03a 	or	r17,r2,r17
10003b48:	ac7fff15 	stw	r17,-4(r21)
10003b4c:	000fca00 	call	1000fca0 <__malloc_unlock>
10003b50:	a805883a 	mov	r2,r21
10003b54:	003f6b06 	br	10003904 <__alt_data_end+0xf8003904>
10003b58:	a80b883a 	mov	r5,r21
10003b5c:	9009883a 	mov	r4,r18
10003b60:	0008b700 	call	10008b70 <memmove>
10003b64:	003f4e06 	br	100038a0 <__alt_data_end+0xf80038a0>
10003b68:	89000404 	addi	r4,r17,16
10003b6c:	b93fbc16 	blt	r23,r4,10003a60 <__alt_data_end+0xf8003a60>
10003b70:	b0800317 	ldw	r2,12(r22)
10003b74:	b0c00217 	ldw	r3,8(r22)
10003b78:	81bfff04 	addi	r6,r16,-4
10003b7c:	01000904 	movi	r4,36
10003b80:	18800315 	stw	r2,12(r3)
10003b84:	10c00215 	stw	r3,8(r2)
10003b88:	b4800204 	addi	r18,r22,8
10003b8c:	21804336 	bltu	r4,r6,10003c9c <_realloc_r+0x508>
10003b90:	008004c4 	movi	r2,19
10003b94:	11803f2e 	bgeu	r2,r6,10003c94 <_realloc_r+0x500>
10003b98:	a8800017 	ldw	r2,0(r21)
10003b9c:	b0800215 	stw	r2,8(r22)
10003ba0:	a8800117 	ldw	r2,4(r21)
10003ba4:	b0800315 	stw	r2,12(r22)
10003ba8:	008006c4 	movi	r2,27
10003bac:	11803f36 	bltu	r2,r6,10003cac <_realloc_r+0x518>
10003bb0:	b0800404 	addi	r2,r22,16
10003bb4:	ad400204 	addi	r21,r21,8
10003bb8:	a8c00017 	ldw	r3,0(r21)
10003bbc:	10c00015 	stw	r3,0(r2)
10003bc0:	a8c00117 	ldw	r3,4(r21)
10003bc4:	10c00115 	stw	r3,4(r2)
10003bc8:	a8c00217 	ldw	r3,8(r21)
10003bcc:	10c00215 	stw	r3,8(r2)
10003bd0:	b447883a 	add	r3,r22,r17
10003bd4:	bc45c83a 	sub	r2,r23,r17
10003bd8:	e0c00215 	stw	r3,8(fp)
10003bdc:	10800054 	ori	r2,r2,1
10003be0:	18800115 	stw	r2,4(r3)
10003be4:	b0800117 	ldw	r2,4(r22)
10003be8:	a009883a 	mov	r4,r20
10003bec:	1080004c 	andi	r2,r2,1
10003bf0:	1462b03a 	or	r17,r2,r17
10003bf4:	b4400115 	stw	r17,4(r22)
10003bf8:	000fca00 	call	1000fca0 <__malloc_unlock>
10003bfc:	9005883a 	mov	r2,r18
10003c00:	003f4006 	br	10003904 <__alt_data_end+0xf8003904>
10003c04:	a8c00217 	ldw	r3,8(r21)
10003c08:	90c00215 	stw	r3,8(r18)
10003c0c:	a8c00317 	ldw	r3,12(r21)
10003c10:	90c00315 	stw	r3,12(r18)
10003c14:	30801126 	beq	r6,r2,10003c5c <_realloc_r+0x4c8>
10003c18:	90800404 	addi	r2,r18,16
10003c1c:	a8c00404 	addi	r3,r21,16
10003c20:	003f1906 	br	10003888 <__alt_data_end+0xf8003888>
10003c24:	90ffff17 	ldw	r3,-4(r18)
10003c28:	00bfff04 	movi	r2,-4
10003c2c:	a825883a 	mov	r18,r21
10003c30:	1884703a 	and	r2,r3,r2
10003c34:	80a1883a 	add	r16,r16,r2
10003c38:	003f2406 	br	100038cc <__alt_data_end+0xf80038cc>
10003c3c:	a8800217 	ldw	r2,8(r21)
10003c40:	b0800415 	stw	r2,16(r22)
10003c44:	a8800317 	ldw	r2,12(r21)
10003c48:	b0800515 	stw	r2,20(r22)
10003c4c:	31000a26 	beq	r6,r4,10003c78 <_realloc_r+0x4e4>
10003c50:	b0800604 	addi	r2,r22,24
10003c54:	ad400404 	addi	r21,r21,16
10003c58:	003fa906 	br	10003b00 <__alt_data_end+0xf8003b00>
10003c5c:	a9000417 	ldw	r4,16(r21)
10003c60:	90800604 	addi	r2,r18,24
10003c64:	a8c00604 	addi	r3,r21,24
10003c68:	91000415 	stw	r4,16(r18)
10003c6c:	a9000517 	ldw	r4,20(r21)
10003c70:	91000515 	stw	r4,20(r18)
10003c74:	003f0406 	br	10003888 <__alt_data_end+0xf8003888>
10003c78:	a8c00417 	ldw	r3,16(r21)
10003c7c:	ad400604 	addi	r21,r21,24
10003c80:	b0800804 	addi	r2,r22,32
10003c84:	b0c00615 	stw	r3,24(r22)
10003c88:	a8ffff17 	ldw	r3,-4(r21)
10003c8c:	b0c00715 	stw	r3,28(r22)
10003c90:	003f9b06 	br	10003b00 <__alt_data_end+0xf8003b00>
10003c94:	9005883a 	mov	r2,r18
10003c98:	003fc706 	br	10003bb8 <__alt_data_end+0xf8003bb8>
10003c9c:	a80b883a 	mov	r5,r21
10003ca0:	9009883a 	mov	r4,r18
10003ca4:	0008b700 	call	10008b70 <memmove>
10003ca8:	003fc906 	br	10003bd0 <__alt_data_end+0xf8003bd0>
10003cac:	a8800217 	ldw	r2,8(r21)
10003cb0:	b0800415 	stw	r2,16(r22)
10003cb4:	a8800317 	ldw	r2,12(r21)
10003cb8:	b0800515 	stw	r2,20(r22)
10003cbc:	31000726 	beq	r6,r4,10003cdc <_realloc_r+0x548>
10003cc0:	b0800604 	addi	r2,r22,24
10003cc4:	ad400404 	addi	r21,r21,16
10003cc8:	003fbb06 	br	10003bb8 <__alt_data_end+0xf8003bb8>
10003ccc:	a009883a 	mov	r4,r20
10003cd0:	000fca00 	call	1000fca0 <__malloc_unlock>
10003cd4:	0005883a 	mov	r2,zero
10003cd8:	003f0a06 	br	10003904 <__alt_data_end+0xf8003904>
10003cdc:	a8c00417 	ldw	r3,16(r21)
10003ce0:	ad400604 	addi	r21,r21,24
10003ce4:	b0800804 	addi	r2,r22,32
10003ce8:	b0c00615 	stw	r3,24(r22)
10003cec:	a8ffff17 	ldw	r3,-4(r21)
10003cf0:	b0c00715 	stw	r3,28(r22)
10003cf4:	003fb006 	br	10003bb8 <__alt_data_end+0xf8003bb8>

10003cf8 <lflush>:
10003cf8:	2080030b 	ldhu	r2,12(r4)
10003cfc:	00c00244 	movi	r3,9
10003d00:	1080024c 	andi	r2,r2,9
10003d04:	10c00226 	beq	r2,r3,10003d10 <lflush+0x18>
10003d08:	0005883a 	mov	r2,zero
10003d0c:	f800283a 	ret
10003d10:	000152c1 	jmpi	1000152c <fflush>

10003d14 <__srefill_r>:
10003d14:	defffc04 	addi	sp,sp,-16
10003d18:	dc400115 	stw	r17,4(sp)
10003d1c:	dc000015 	stw	r16,0(sp)
10003d20:	dfc00315 	stw	ra,12(sp)
10003d24:	dc800215 	stw	r18,8(sp)
10003d28:	2023883a 	mov	r17,r4
10003d2c:	2821883a 	mov	r16,r5
10003d30:	20000226 	beq	r4,zero,10003d3c <__srefill_r+0x28>
10003d34:	20800e17 	ldw	r2,56(r4)
10003d38:	10003c26 	beq	r2,zero,10003e2c <__srefill_r+0x118>
10003d3c:	80c0030b 	ldhu	r3,12(r16)
10003d40:	1908000c 	andi	r4,r3,8192
10003d44:	1805883a 	mov	r2,r3
10003d48:	2000071e 	bne	r4,zero,10003d68 <__srefill_r+0x54>
10003d4c:	81001917 	ldw	r4,100(r16)
10003d50:	18880014 	ori	r2,r3,8192
10003d54:	00f7ffc4 	movi	r3,-8193
10003d58:	20c8703a 	and	r4,r4,r3
10003d5c:	8080030d 	sth	r2,12(r16)
10003d60:	1007883a 	mov	r3,r2
10003d64:	81001915 	stw	r4,100(r16)
10003d68:	80000115 	stw	zero,4(r16)
10003d6c:	1100080c 	andi	r4,r2,32
10003d70:	2000571e 	bne	r4,zero,10003ed0 <__srefill_r+0x1bc>
10003d74:	1100010c 	andi	r4,r2,4
10003d78:	20001f26 	beq	r4,zero,10003df8 <__srefill_r+0xe4>
10003d7c:	81400c17 	ldw	r5,48(r16)
10003d80:	28000826 	beq	r5,zero,10003da4 <__srefill_r+0x90>
10003d84:	80801004 	addi	r2,r16,64
10003d88:	28800226 	beq	r5,r2,10003d94 <__srefill_r+0x80>
10003d8c:	8809883a 	mov	r4,r17
10003d90:	0001e400 	call	10001e40 <_free_r>
10003d94:	80800f17 	ldw	r2,60(r16)
10003d98:	80000c15 	stw	zero,48(r16)
10003d9c:	80800115 	stw	r2,4(r16)
10003da0:	1000391e 	bne	r2,zero,10003e88 <__srefill_r+0x174>
10003da4:	80800417 	ldw	r2,16(r16)
10003da8:	10004b26 	beq	r2,zero,10003ed8 <__srefill_r+0x1c4>
10003dac:	8480030b 	ldhu	r18,12(r16)
10003db0:	908000cc 	andi	r2,r18,3
10003db4:	10001f1e 	bne	r2,zero,10003e34 <__srefill_r+0x120>
10003db8:	81800417 	ldw	r6,16(r16)
10003dbc:	80800817 	ldw	r2,32(r16)
10003dc0:	81c00517 	ldw	r7,20(r16)
10003dc4:	81400717 	ldw	r5,28(r16)
10003dc8:	81800015 	stw	r6,0(r16)
10003dcc:	8809883a 	mov	r4,r17
10003dd0:	103ee83a 	callr	r2
10003dd4:	80800115 	stw	r2,4(r16)
10003dd8:	00800e0e 	bge	zero,r2,10003e14 <__srefill_r+0x100>
10003ddc:	0005883a 	mov	r2,zero
10003de0:	dfc00317 	ldw	ra,12(sp)
10003de4:	dc800217 	ldw	r18,8(sp)
10003de8:	dc400117 	ldw	r17,4(sp)
10003dec:	dc000017 	ldw	r16,0(sp)
10003df0:	dec00404 	addi	sp,sp,16
10003df4:	f800283a 	ret
10003df8:	1100040c 	andi	r4,r2,16
10003dfc:	20003026 	beq	r4,zero,10003ec0 <__srefill_r+0x1ac>
10003e00:	1080020c 	andi	r2,r2,8
10003e04:	1000241e 	bne	r2,zero,10003e98 <__srefill_r+0x184>
10003e08:	18c00114 	ori	r3,r3,4
10003e0c:	80c0030d 	sth	r3,12(r16)
10003e10:	003fe406 	br	10003da4 <__alt_data_end+0xf8003da4>
10003e14:	80c0030b 	ldhu	r3,12(r16)
10003e18:	1000161e 	bne	r2,zero,10003e74 <__srefill_r+0x160>
10003e1c:	18c00814 	ori	r3,r3,32
10003e20:	00bfffc4 	movi	r2,-1
10003e24:	80c0030d 	sth	r3,12(r16)
10003e28:	003fed06 	br	10003de0 <__alt_data_end+0xf8003de0>
10003e2c:	00019b40 	call	100019b4 <__sinit>
10003e30:	003fc206 	br	10003d3c <__alt_data_end+0xf8003d3c>
10003e34:	00840074 	movhi	r2,4097
10003e38:	108ec504 	addi	r2,r2,15124
10003e3c:	11000017 	ldw	r4,0(r2)
10003e40:	01440034 	movhi	r5,4096
10003e44:	00800044 	movi	r2,1
10003e48:	294f3e04 	addi	r5,r5,15608
10003e4c:	8080030d 	sth	r2,12(r16)
10003e50:	000262c0 	call	1000262c <_fwalk>
10003e54:	00800244 	movi	r2,9
10003e58:	8480030d 	sth	r18,12(r16)
10003e5c:	9480024c 	andi	r18,r18,9
10003e60:	90bfd51e 	bne	r18,r2,10003db8 <__alt_data_end+0xf8003db8>
10003e64:	800b883a 	mov	r5,r16
10003e68:	8809883a 	mov	r4,r17
10003e6c:	00012b40 	call	100012b4 <__sflush_r>
10003e70:	003fd106 	br	10003db8 <__alt_data_end+0xf8003db8>
10003e74:	18c01014 	ori	r3,r3,64
10003e78:	80000115 	stw	zero,4(r16)
10003e7c:	00bfffc4 	movi	r2,-1
10003e80:	80c0030d 	sth	r3,12(r16)
10003e84:	003fd606 	br	10003de0 <__alt_data_end+0xf8003de0>
10003e88:	80c00e17 	ldw	r3,56(r16)
10003e8c:	0005883a 	mov	r2,zero
10003e90:	80c00015 	stw	r3,0(r16)
10003e94:	003fd206 	br	10003de0 <__alt_data_end+0xf8003de0>
10003e98:	800b883a 	mov	r5,r16
10003e9c:	8809883a 	mov	r4,r17
10003ea0:	00014d00 	call	100014d0 <_fflush_r>
10003ea4:	10000a1e 	bne	r2,zero,10003ed0 <__srefill_r+0x1bc>
10003ea8:	8080030b 	ldhu	r2,12(r16)
10003eac:	00fffdc4 	movi	r3,-9
10003eb0:	80000215 	stw	zero,8(r16)
10003eb4:	1886703a 	and	r3,r3,r2
10003eb8:	80000615 	stw	zero,24(r16)
10003ebc:	003fd206 	br	10003e08 <__alt_data_end+0xf8003e08>
10003ec0:	00800244 	movi	r2,9
10003ec4:	88800015 	stw	r2,0(r17)
10003ec8:	18c01014 	ori	r3,r3,64
10003ecc:	80c0030d 	sth	r3,12(r16)
10003ed0:	00bfffc4 	movi	r2,-1
10003ed4:	003fc206 	br	10003de0 <__alt_data_end+0xf8003de0>
10003ed8:	800b883a 	mov	r5,r16
10003edc:	8809883a 	mov	r4,r17
10003ee0:	00029bc0 	call	100029bc <__smakebuf_r>
10003ee4:	003fb106 	br	10003dac <__alt_data_end+0xf8003dac>

10003ee8 <__srget_r>:
10003ee8:	defffd04 	addi	sp,sp,-12
10003eec:	dc400115 	stw	r17,4(sp)
10003ef0:	dc000015 	stw	r16,0(sp)
10003ef4:	dfc00215 	stw	ra,8(sp)
10003ef8:	2023883a 	mov	r17,r4
10003efc:	2821883a 	mov	r16,r5
10003f00:	20000226 	beq	r4,zero,10003f0c <__srget_r+0x24>
10003f04:	20800e17 	ldw	r2,56(r4)
10003f08:	10001026 	beq	r2,zero,10003f4c <__srget_r+0x64>
10003f0c:	800b883a 	mov	r5,r16
10003f10:	8809883a 	mov	r4,r17
10003f14:	0003d140 	call	10003d14 <__srefill_r>
10003f18:	10000e1e 	bne	r2,zero,10003f54 <__srget_r+0x6c>
10003f1c:	80c00017 	ldw	r3,0(r16)
10003f20:	80800117 	ldw	r2,4(r16)
10003f24:	19000044 	addi	r4,r3,1
10003f28:	10bfffc4 	addi	r2,r2,-1
10003f2c:	80800115 	stw	r2,4(r16)
10003f30:	81000015 	stw	r4,0(r16)
10003f34:	18800003 	ldbu	r2,0(r3)
10003f38:	dfc00217 	ldw	ra,8(sp)
10003f3c:	dc400117 	ldw	r17,4(sp)
10003f40:	dc000017 	ldw	r16,0(sp)
10003f44:	dec00304 	addi	sp,sp,12
10003f48:	f800283a 	ret
10003f4c:	00019b40 	call	100019b4 <__sinit>
10003f50:	003fee06 	br	10003f0c <__alt_data_end+0xf8003f0c>
10003f54:	00bfffc4 	movi	r2,-1
10003f58:	003ff706 	br	10003f38 <__alt_data_end+0xf8003f38>

10003f5c <__srget>:
10003f5c:	00840074 	movhi	r2,4097
10003f60:	108ec604 	addi	r2,r2,15128
10003f64:	200b883a 	mov	r5,r4
10003f68:	11000017 	ldw	r4,0(r2)
10003f6c:	0003ee81 	jmpi	10003ee8 <__srget_r>

10003f70 <_sbrk_r>:
10003f70:	defffd04 	addi	sp,sp,-12
10003f74:	dc000015 	stw	r16,0(sp)
10003f78:	04040074 	movhi	r16,4097
10003f7c:	dc400115 	stw	r17,4(sp)
10003f80:	84159404 	addi	r16,r16,22096
10003f84:	2023883a 	mov	r17,r4
10003f88:	2809883a 	mov	r4,r5
10003f8c:	dfc00215 	stw	ra,8(sp)
10003f90:	80000015 	stw	zero,0(r16)
10003f94:	000fe880 	call	1000fe88 <sbrk>
10003f98:	00ffffc4 	movi	r3,-1
10003f9c:	10c00526 	beq	r2,r3,10003fb4 <_sbrk_r+0x44>
10003fa0:	dfc00217 	ldw	ra,8(sp)
10003fa4:	dc400117 	ldw	r17,4(sp)
10003fa8:	dc000017 	ldw	r16,0(sp)
10003fac:	dec00304 	addi	sp,sp,12
10003fb0:	f800283a 	ret
10003fb4:	80c00017 	ldw	r3,0(r16)
10003fb8:	183ff926 	beq	r3,zero,10003fa0 <__alt_data_end+0xf8003fa0>
10003fbc:	88c00015 	stw	r3,0(r17)
10003fc0:	003ff706 	br	10003fa0 <__alt_data_end+0xf8003fa0>

10003fc4 <__sread>:
10003fc4:	defffe04 	addi	sp,sp,-8
10003fc8:	dc000015 	stw	r16,0(sp)
10003fcc:	2821883a 	mov	r16,r5
10003fd0:	2940038f 	ldh	r5,14(r5)
10003fd4:	dfc00115 	stw	ra,4(sp)
10003fd8:	0009eec0 	call	10009eec <_read_r>
10003fdc:	10000716 	blt	r2,zero,10003ffc <__sread+0x38>
10003fe0:	80c01417 	ldw	r3,80(r16)
10003fe4:	1887883a 	add	r3,r3,r2
10003fe8:	80c01415 	stw	r3,80(r16)
10003fec:	dfc00117 	ldw	ra,4(sp)
10003ff0:	dc000017 	ldw	r16,0(sp)
10003ff4:	dec00204 	addi	sp,sp,8
10003ff8:	f800283a 	ret
10003ffc:	80c0030b 	ldhu	r3,12(r16)
10004000:	18fbffcc 	andi	r3,r3,61439
10004004:	80c0030d 	sth	r3,12(r16)
10004008:	dfc00117 	ldw	ra,4(sp)
1000400c:	dc000017 	ldw	r16,0(sp)
10004010:	dec00204 	addi	sp,sp,8
10004014:	f800283a 	ret

10004018 <__seofread>:
10004018:	0005883a 	mov	r2,zero
1000401c:	f800283a 	ret

10004020 <__swrite>:
10004020:	2880030b 	ldhu	r2,12(r5)
10004024:	defffb04 	addi	sp,sp,-20
10004028:	dcc00315 	stw	r19,12(sp)
1000402c:	dc800215 	stw	r18,8(sp)
10004030:	dc400115 	stw	r17,4(sp)
10004034:	dc000015 	stw	r16,0(sp)
10004038:	dfc00415 	stw	ra,16(sp)
1000403c:	10c0400c 	andi	r3,r2,256
10004040:	2821883a 	mov	r16,r5
10004044:	2023883a 	mov	r17,r4
10004048:	3025883a 	mov	r18,r6
1000404c:	3827883a 	mov	r19,r7
10004050:	18000526 	beq	r3,zero,10004068 <__swrite+0x48>
10004054:	2940038f 	ldh	r5,14(r5)
10004058:	01c00084 	movi	r7,2
1000405c:	000d883a 	mov	r6,zero
10004060:	0008a2c0 	call	10008a2c <_lseek_r>
10004064:	8080030b 	ldhu	r2,12(r16)
10004068:	8140038f 	ldh	r5,14(r16)
1000406c:	10bbffcc 	andi	r2,r2,61439
10004070:	980f883a 	mov	r7,r19
10004074:	900d883a 	mov	r6,r18
10004078:	8809883a 	mov	r4,r17
1000407c:	8080030d 	sth	r2,12(r16)
10004080:	dfc00417 	ldw	ra,16(sp)
10004084:	dcc00317 	ldw	r19,12(sp)
10004088:	dc800217 	ldw	r18,8(sp)
1000408c:	dc400117 	ldw	r17,4(sp)
10004090:	dc000017 	ldw	r16,0(sp)
10004094:	dec00504 	addi	sp,sp,20
10004098:	00067e41 	jmpi	100067e4 <_write_r>

1000409c <__sseek>:
1000409c:	defffe04 	addi	sp,sp,-8
100040a0:	dc000015 	stw	r16,0(sp)
100040a4:	2821883a 	mov	r16,r5
100040a8:	2940038f 	ldh	r5,14(r5)
100040ac:	dfc00115 	stw	ra,4(sp)
100040b0:	0008a2c0 	call	10008a2c <_lseek_r>
100040b4:	00ffffc4 	movi	r3,-1
100040b8:	10c00826 	beq	r2,r3,100040dc <__sseek+0x40>
100040bc:	80c0030b 	ldhu	r3,12(r16)
100040c0:	80801415 	stw	r2,80(r16)
100040c4:	18c40014 	ori	r3,r3,4096
100040c8:	80c0030d 	sth	r3,12(r16)
100040cc:	dfc00117 	ldw	ra,4(sp)
100040d0:	dc000017 	ldw	r16,0(sp)
100040d4:	dec00204 	addi	sp,sp,8
100040d8:	f800283a 	ret
100040dc:	80c0030b 	ldhu	r3,12(r16)
100040e0:	18fbffcc 	andi	r3,r3,61439
100040e4:	80c0030d 	sth	r3,12(r16)
100040e8:	dfc00117 	ldw	ra,4(sp)
100040ec:	dc000017 	ldw	r16,0(sp)
100040f0:	dec00204 	addi	sp,sp,8
100040f4:	f800283a 	ret

100040f8 <__sclose>:
100040f8:	2940038f 	ldh	r5,14(r5)
100040fc:	00069981 	jmpi	10006998 <_close_r>

10004100 <strlen>:
10004100:	208000cc 	andi	r2,r4,3
10004104:	10002026 	beq	r2,zero,10004188 <strlen+0x88>
10004108:	20800007 	ldb	r2,0(r4)
1000410c:	10002026 	beq	r2,zero,10004190 <strlen+0x90>
10004110:	2005883a 	mov	r2,r4
10004114:	00000206 	br	10004120 <strlen+0x20>
10004118:	10c00007 	ldb	r3,0(r2)
1000411c:	18001826 	beq	r3,zero,10004180 <strlen+0x80>
10004120:	10800044 	addi	r2,r2,1
10004124:	10c000cc 	andi	r3,r2,3
10004128:	183ffb1e 	bne	r3,zero,10004118 <__alt_data_end+0xf8004118>
1000412c:	10c00017 	ldw	r3,0(r2)
10004130:	01ffbff4 	movhi	r7,65279
10004134:	39ffbfc4 	addi	r7,r7,-257
10004138:	00ca303a 	nor	r5,zero,r3
1000413c:	01a02074 	movhi	r6,32897
10004140:	19c7883a 	add	r3,r3,r7
10004144:	31a02004 	addi	r6,r6,-32640
10004148:	1946703a 	and	r3,r3,r5
1000414c:	1986703a 	and	r3,r3,r6
10004150:	1800091e 	bne	r3,zero,10004178 <strlen+0x78>
10004154:	10800104 	addi	r2,r2,4
10004158:	10c00017 	ldw	r3,0(r2)
1000415c:	19cb883a 	add	r5,r3,r7
10004160:	00c6303a 	nor	r3,zero,r3
10004164:	28c6703a 	and	r3,r5,r3
10004168:	1986703a 	and	r3,r3,r6
1000416c:	183ff926 	beq	r3,zero,10004154 <__alt_data_end+0xf8004154>
10004170:	00000106 	br	10004178 <strlen+0x78>
10004174:	10800044 	addi	r2,r2,1
10004178:	10c00007 	ldb	r3,0(r2)
1000417c:	183ffd1e 	bne	r3,zero,10004174 <__alt_data_end+0xf8004174>
10004180:	1105c83a 	sub	r2,r2,r4
10004184:	f800283a 	ret
10004188:	2005883a 	mov	r2,r4
1000418c:	003fe706 	br	1000412c <__alt_data_end+0xf800412c>
10004190:	0005883a 	mov	r2,zero
10004194:	f800283a 	ret

10004198 <__submore>:
10004198:	defffa04 	addi	sp,sp,-24
1000419c:	dc000015 	stw	r16,0(sp)
100041a0:	2821883a 	mov	r16,r5
100041a4:	29400c17 	ldw	r5,48(r5)
100041a8:	dfc00515 	stw	ra,20(sp)
100041ac:	dd000415 	stw	r20,16(sp)
100041b0:	dcc00315 	stw	r19,12(sp)
100041b4:	dc800215 	stw	r18,8(sp)
100041b8:	dc400115 	stw	r17,4(sp)
100041bc:	80801004 	addi	r2,r16,64
100041c0:	28801726 	beq	r5,r2,10004220 <__submore+0x88>
100041c4:	84400d17 	ldw	r17,52(r16)
100041c8:	8c67883a 	add	r19,r17,r17
100041cc:	980d883a 	mov	r6,r19
100041d0:	00037940 	call	10003794 <_realloc_r>
100041d4:	1025883a 	mov	r18,r2
100041d8:	10002226 	beq	r2,zero,10004264 <__submore+0xcc>
100041dc:	1469883a 	add	r20,r2,r17
100041e0:	880d883a 	mov	r6,r17
100041e4:	100b883a 	mov	r5,r2
100041e8:	a009883a 	mov	r4,r20
100041ec:	00033ac0 	call	100033ac <memcpy>
100041f0:	0005883a 	mov	r2,zero
100041f4:	85000015 	stw	r20,0(r16)
100041f8:	84800c15 	stw	r18,48(r16)
100041fc:	84c00d15 	stw	r19,52(r16)
10004200:	dfc00517 	ldw	ra,20(sp)
10004204:	dd000417 	ldw	r20,16(sp)
10004208:	dcc00317 	ldw	r19,12(sp)
1000420c:	dc800217 	ldw	r18,8(sp)
10004210:	dc400117 	ldw	r17,4(sp)
10004214:	dc000017 	ldw	r16,0(sp)
10004218:	dec00604 	addi	sp,sp,24
1000421c:	f800283a 	ret
10004220:	04410004 	movi	r17,1024
10004224:	880b883a 	mov	r5,r17
10004228:	0002ba00 	call	10002ba0 <_malloc_r>
1000422c:	1007883a 	mov	r3,r2
10004230:	10000c26 	beq	r2,zero,10004264 <__submore+0xcc>
10004234:	80801083 	ldbu	r2,66(r16)
10004238:	80c00c15 	stw	r3,48(r16)
1000423c:	84400d15 	stw	r17,52(r16)
10004240:	1880ffc5 	stb	r2,1023(r3)
10004244:	81401043 	ldbu	r5,65(r16)
10004248:	1900ff44 	addi	r4,r3,1021
1000424c:	0005883a 	mov	r2,zero
10004250:	1940ff85 	stb	r5,1022(r3)
10004254:	81401003 	ldbu	r5,64(r16)
10004258:	1940ff45 	stb	r5,1021(r3)
1000425c:	81000015 	stw	r4,0(r16)
10004260:	003fe706 	br	10004200 <__alt_data_end+0xf8004200>
10004264:	00bfffc4 	movi	r2,-1
10004268:	003fe506 	br	10004200 <__alt_data_end+0xf8004200>

1000426c <_ungetc_r>:
1000426c:	00bfffc4 	movi	r2,-1
10004270:	28806126 	beq	r5,r2,100043f8 <_ungetc_r+0x18c>
10004274:	defffb04 	addi	sp,sp,-20
10004278:	dcc00315 	stw	r19,12(sp)
1000427c:	dc400115 	stw	r17,4(sp)
10004280:	dc000015 	stw	r16,0(sp)
10004284:	dfc00415 	stw	ra,16(sp)
10004288:	dc800215 	stw	r18,8(sp)
1000428c:	2023883a 	mov	r17,r4
10004290:	3021883a 	mov	r16,r6
10004294:	2827883a 	mov	r19,r5
10004298:	20000226 	beq	r4,zero,100042a4 <_ungetc_r+0x38>
1000429c:	20800e17 	ldw	r2,56(r4)
100042a0:	10002e26 	beq	r2,zero,1000435c <_ungetc_r+0xf0>
100042a4:	80c0030b 	ldhu	r3,12(r16)
100042a8:	1888000c 	andi	r2,r3,8192
100042ac:	1000051e 	bne	r2,zero,100042c4 <_ungetc_r+0x58>
100042b0:	81001917 	ldw	r4,100(r16)
100042b4:	00b7ffc4 	movi	r2,-8193
100042b8:	18c80014 	ori	r3,r3,8192
100042bc:	2084703a 	and	r2,r4,r2
100042c0:	80801915 	stw	r2,100(r16)
100042c4:	00bff7c4 	movi	r2,-33
100042c8:	1884703a 	and	r2,r3,r2
100042cc:	8080030d 	sth	r2,12(r16)
100042d0:	1900010c 	andi	r4,r3,4
100042d4:	2000061e 	bne	r4,zero,100042f0 <_ungetc_r+0x84>
100042d8:	1900040c 	andi	r4,r3,16
100042dc:	20001d26 	beq	r4,zero,10004354 <_ungetc_r+0xe8>
100042e0:	18c0020c 	andi	r3,r3,8
100042e4:	1800331e 	bne	r3,zero,100043b4 <_ungetc_r+0x148>
100042e8:	10800114 	ori	r2,r2,4
100042ec:	8080030d 	sth	r2,12(r16)
100042f0:	80800c17 	ldw	r2,48(r16)
100042f4:	9c803fcc 	andi	r18,r19,255
100042f8:	10001a26 	beq	r2,zero,10004364 <_ungetc_r+0xf8>
100042fc:	80c00117 	ldw	r3,4(r16)
10004300:	80800d17 	ldw	r2,52(r16)
10004304:	18800f0e 	bge	r3,r2,10004344 <_ungetc_r+0xd8>
10004308:	80c00017 	ldw	r3,0(r16)
1000430c:	9005883a 	mov	r2,r18
10004310:	193fffc4 	addi	r4,r3,-1
10004314:	81000015 	stw	r4,0(r16)
10004318:	1cffffc5 	stb	r19,-1(r3)
1000431c:	80c00117 	ldw	r3,4(r16)
10004320:	18c00044 	addi	r3,r3,1
10004324:	80c00115 	stw	r3,4(r16)
10004328:	dfc00417 	ldw	ra,16(sp)
1000432c:	dcc00317 	ldw	r19,12(sp)
10004330:	dc800217 	ldw	r18,8(sp)
10004334:	dc400117 	ldw	r17,4(sp)
10004338:	dc000017 	ldw	r16,0(sp)
1000433c:	dec00504 	addi	sp,sp,20
10004340:	f800283a 	ret
10004344:	800b883a 	mov	r5,r16
10004348:	8809883a 	mov	r4,r17
1000434c:	00041980 	call	10004198 <__submore>
10004350:	103fed26 	beq	r2,zero,10004308 <__alt_data_end+0xf8004308>
10004354:	00bfffc4 	movi	r2,-1
10004358:	003ff306 	br	10004328 <__alt_data_end+0xf8004328>
1000435c:	00019b40 	call	100019b4 <__sinit>
10004360:	003fd006 	br	100042a4 <__alt_data_end+0xf80042a4>
10004364:	80c00417 	ldw	r3,16(r16)
10004368:	80800017 	ldw	r2,0(r16)
1000436c:	18000326 	beq	r3,zero,1000437c <_ungetc_r+0x110>
10004370:	1880022e 	bgeu	r3,r2,1000437c <_ungetc_r+0x110>
10004374:	10ffffc3 	ldbu	r3,-1(r2)
10004378:	90c01826 	beq	r18,r3,100043dc <_ungetc_r+0x170>
1000437c:	81400117 	ldw	r5,4(r16)
10004380:	80800e15 	stw	r2,56(r16)
10004384:	008000c4 	movi	r2,3
10004388:	81001004 	addi	r4,r16,64
1000438c:	80c01084 	addi	r3,r16,66
10004390:	80800d15 	stw	r2,52(r16)
10004394:	00800044 	movi	r2,1
10004398:	80800115 	stw	r2,4(r16)
1000439c:	81400f15 	stw	r5,60(r16)
100043a0:	81000c15 	stw	r4,48(r16)
100043a4:	84c01085 	stb	r19,66(r16)
100043a8:	80c00015 	stw	r3,0(r16)
100043ac:	9005883a 	mov	r2,r18
100043b0:	003fdd06 	br	10004328 <__alt_data_end+0xf8004328>
100043b4:	800b883a 	mov	r5,r16
100043b8:	8809883a 	mov	r4,r17
100043bc:	00014d00 	call	100014d0 <_fflush_r>
100043c0:	103fe41e 	bne	r2,zero,10004354 <__alt_data_end+0xf8004354>
100043c4:	8080030b 	ldhu	r2,12(r16)
100043c8:	00fffdc4 	movi	r3,-9
100043cc:	80000215 	stw	zero,8(r16)
100043d0:	1884703a 	and	r2,r3,r2
100043d4:	80000615 	stw	zero,24(r16)
100043d8:	003fc306 	br	100042e8 <__alt_data_end+0xf80042e8>
100043dc:	80c00117 	ldw	r3,4(r16)
100043e0:	10bfffc4 	addi	r2,r2,-1
100043e4:	80800015 	stw	r2,0(r16)
100043e8:	18800044 	addi	r2,r3,1
100043ec:	80800115 	stw	r2,4(r16)
100043f0:	9005883a 	mov	r2,r18
100043f4:	003fcc06 	br	10004328 <__alt_data_end+0xf8004328>
100043f8:	00bfffc4 	movi	r2,-1
100043fc:	f800283a 	ret

10004400 <ungetc>:
10004400:	00840074 	movhi	r2,4097
10004404:	108ec604 	addi	r2,r2,15128
10004408:	280d883a 	mov	r6,r5
1000440c:	200b883a 	mov	r5,r4
10004410:	11000017 	ldw	r4,0(r2)
10004414:	000426c1 	jmpi	1000426c <_ungetc_r>

10004418 <_vfiprintf_r>:
10004418:	deffff04 	addi	sp,sp,-4
1000441c:	dfc00015 	stw	ra,0(sp)
10004420:	000a4b40 	call	1000a4b4 <___vfiprintf_internal_r>
10004424:	dfc00017 	ldw	ra,0(sp)
10004428:	dec00104 	addi	sp,sp,4
1000442c:	f800283a 	ret

10004430 <___vfprintf_internal_r>:
10004430:	deffb804 	addi	sp,sp,-288
10004434:	dfc04715 	stw	ra,284(sp)
10004438:	ddc04515 	stw	r23,276(sp)
1000443c:	dd404315 	stw	r21,268(sp)
10004440:	d9002d15 	stw	r4,180(sp)
10004444:	282f883a 	mov	r23,r5
10004448:	302b883a 	mov	r21,r6
1000444c:	d9c02e15 	stw	r7,184(sp)
10004450:	df004615 	stw	fp,280(sp)
10004454:	dd804415 	stw	r22,272(sp)
10004458:	dd004215 	stw	r20,264(sp)
1000445c:	dcc04115 	stw	r19,260(sp)
10004460:	dc804015 	stw	r18,256(sp)
10004464:	dc403f15 	stw	r17,252(sp)
10004468:	dc003e15 	stw	r16,248(sp)
1000446c:	00089fc0 	call	100089fc <_localeconv_r>
10004470:	10800017 	ldw	r2,0(r2)
10004474:	1009883a 	mov	r4,r2
10004478:	d8803415 	stw	r2,208(sp)
1000447c:	00041000 	call	10004100 <strlen>
10004480:	d8803715 	stw	r2,220(sp)
10004484:	d8802d17 	ldw	r2,180(sp)
10004488:	10000226 	beq	r2,zero,10004494 <___vfprintf_internal_r+0x64>
1000448c:	10800e17 	ldw	r2,56(r2)
10004490:	1000fb26 	beq	r2,zero,10004880 <___vfprintf_internal_r+0x450>
10004494:	b880030b 	ldhu	r2,12(r23)
10004498:	10c8000c 	andi	r3,r2,8192
1000449c:	1800061e 	bne	r3,zero,100044b8 <___vfprintf_internal_r+0x88>
100044a0:	b9001917 	ldw	r4,100(r23)
100044a4:	00f7ffc4 	movi	r3,-8193
100044a8:	10880014 	ori	r2,r2,8192
100044ac:	20c6703a 	and	r3,r4,r3
100044b0:	b880030d 	sth	r2,12(r23)
100044b4:	b8c01915 	stw	r3,100(r23)
100044b8:	10c0020c 	andi	r3,r2,8
100044bc:	1800c326 	beq	r3,zero,100047cc <___vfprintf_internal_r+0x39c>
100044c0:	b8c00417 	ldw	r3,16(r23)
100044c4:	1800c126 	beq	r3,zero,100047cc <___vfprintf_internal_r+0x39c>
100044c8:	1080068c 	andi	r2,r2,26
100044cc:	00c00284 	movi	r3,10
100044d0:	10c0c626 	beq	r2,r3,100047ec <___vfprintf_internal_r+0x3bc>
100044d4:	d8c00404 	addi	r3,sp,16
100044d8:	05040074 	movhi	r20,4097
100044dc:	d9001e04 	addi	r4,sp,120
100044e0:	a5076984 	addi	r20,r20,7590
100044e4:	d8c01e15 	stw	r3,120(sp)
100044e8:	d8002015 	stw	zero,128(sp)
100044ec:	d8001f15 	stw	zero,124(sp)
100044f0:	d8003315 	stw	zero,204(sp)
100044f4:	d8003615 	stw	zero,216(sp)
100044f8:	d8003815 	stw	zero,224(sp)
100044fc:	1811883a 	mov	r8,r3
10004500:	d8003915 	stw	zero,228(sp)
10004504:	d8003a15 	stw	zero,232(sp)
10004508:	d8002f15 	stw	zero,188(sp)
1000450c:	d9002815 	stw	r4,160(sp)
10004510:	a8800007 	ldb	r2,0(r21)
10004514:	10028b26 	beq	r2,zero,10004f44 <___vfprintf_internal_r+0xb14>
10004518:	00c00944 	movi	r3,37
1000451c:	a823883a 	mov	r17,r21
10004520:	10c0021e 	bne	r2,r3,1000452c <___vfprintf_internal_r+0xfc>
10004524:	00001406 	br	10004578 <___vfprintf_internal_r+0x148>
10004528:	10c00326 	beq	r2,r3,10004538 <___vfprintf_internal_r+0x108>
1000452c:	8c400044 	addi	r17,r17,1
10004530:	88800007 	ldb	r2,0(r17)
10004534:	103ffc1e 	bne	r2,zero,10004528 <__alt_data_end+0xf8004528>
10004538:	8d61c83a 	sub	r16,r17,r21
1000453c:	80000e26 	beq	r16,zero,10004578 <___vfprintf_internal_r+0x148>
10004540:	d8c02017 	ldw	r3,128(sp)
10004544:	d8801f17 	ldw	r2,124(sp)
10004548:	45400015 	stw	r21,0(r8)
1000454c:	1c07883a 	add	r3,r3,r16
10004550:	10800044 	addi	r2,r2,1
10004554:	d8c02015 	stw	r3,128(sp)
10004558:	44000115 	stw	r16,4(r8)
1000455c:	d8801f15 	stw	r2,124(sp)
10004560:	00c001c4 	movi	r3,7
10004564:	1880a916 	blt	r3,r2,1000480c <___vfprintf_internal_r+0x3dc>
10004568:	42000204 	addi	r8,r8,8
1000456c:	d9402f17 	ldw	r5,188(sp)
10004570:	2c0b883a 	add	r5,r5,r16
10004574:	d9402f15 	stw	r5,188(sp)
10004578:	88800007 	ldb	r2,0(r17)
1000457c:	1000aa26 	beq	r2,zero,10004828 <___vfprintf_internal_r+0x3f8>
10004580:	8d400044 	addi	r21,r17,1
10004584:	8c400047 	ldb	r17,1(r17)
10004588:	0021883a 	mov	r16,zero
1000458c:	00bfffc4 	movi	r2,-1
10004590:	0025883a 	mov	r18,zero
10004594:	dc002905 	stb	r16,164(sp)
10004598:	d8002785 	stb	zero,158(sp)
1000459c:	d8002b05 	stb	zero,172(sp)
100045a0:	d8802a15 	stw	r2,168(sp)
100045a4:	d8003115 	stw	zero,196(sp)
100045a8:	04c01604 	movi	r19,88
100045ac:	05800244 	movi	r22,9
100045b0:	9021883a 	mov	r16,r18
100045b4:	4039883a 	mov	fp,r8
100045b8:	ad400044 	addi	r21,r21,1
100045bc:	88bff804 	addi	r2,r17,-32
100045c0:	98833236 	bltu	r19,r2,1000528c <___vfprintf_internal_r+0xe5c>
100045c4:	100490ba 	slli	r2,r2,2
100045c8:	00c40034 	movhi	r3,4096
100045cc:	18d17704 	addi	r3,r3,17884
100045d0:	10c5883a 	add	r2,r2,r3
100045d4:	10800017 	ldw	r2,0(r2)
100045d8:	1000683a 	jmp	r2
100045dc:	10005184 	addi	zero,r2,326
100045e0:	1000528c 	andi	zero,r2,330
100045e4:	1000528c 	andi	zero,r2,330
100045e8:	100051a4 	muli	zero,r2,326
100045ec:	1000528c 	andi	zero,r2,330
100045f0:	1000528c 	andi	zero,r2,330
100045f4:	1000528c 	andi	zero,r2,330
100045f8:	1000528c 	andi	zero,r2,330
100045fc:	1000528c 	andi	zero,r2,330
10004600:	1000528c 	andi	zero,r2,330
10004604:	1000488c 	andi	zero,r2,290
10004608:	10005094 	ori	zero,r2,322
1000460c:	1000528c 	andi	zero,r2,330
10004610:	10004750 	cmplti	zero,r2,285
10004614:	100048b0 	cmpltui	zero,r2,290
10004618:	1000528c 	andi	zero,r2,330
1000461c:	10004900 	call	11000490 <_gp+0xfe4988>
10004620:	1000490c 	andi	zero,r2,292
10004624:	1000490c 	andi	zero,r2,292
10004628:	1000490c 	andi	zero,r2,292
1000462c:	1000490c 	andi	zero,r2,292
10004630:	1000490c 	andi	zero,r2,292
10004634:	1000490c 	andi	zero,r2,292
10004638:	1000490c 	andi	zero,r2,292
1000463c:	1000490c 	andi	zero,r2,292
10004640:	1000490c 	andi	zero,r2,292
10004644:	1000528c 	andi	zero,r2,330
10004648:	1000528c 	andi	zero,r2,330
1000464c:	1000528c 	andi	zero,r2,330
10004650:	1000528c 	andi	zero,r2,330
10004654:	1000528c 	andi	zero,r2,330
10004658:	1000528c 	andi	zero,r2,330
1000465c:	1000528c 	andi	zero,r2,330
10004660:	1000528c 	andi	zero,r2,330
10004664:	1000528c 	andi	zero,r2,330
10004668:	1000528c 	andi	zero,r2,330
1000466c:	10004948 	cmpgei	zero,r2,293
10004670:	10004a10 	cmplti	zero,r2,296
10004674:	1000528c 	andi	zero,r2,330
10004678:	10004a10 	cmplti	zero,r2,296
1000467c:	1000528c 	andi	zero,r2,330
10004680:	1000528c 	andi	zero,r2,330
10004684:	1000528c 	andi	zero,r2,330
10004688:	1000528c 	andi	zero,r2,330
1000468c:	10004abc 	xorhi	zero,r2,298
10004690:	1000528c 	andi	zero,r2,330
10004694:	1000528c 	andi	zero,r2,330
10004698:	10004ac8 	cmpgei	zero,r2,299
1000469c:	1000528c 	andi	zero,r2,330
100046a0:	1000528c 	andi	zero,r2,330
100046a4:	1000528c 	andi	zero,r2,330
100046a8:	1000528c 	andi	zero,r2,330
100046ac:	1000528c 	andi	zero,r2,330
100046b0:	10004f4c 	andi	zero,r2,317
100046b4:	1000528c 	andi	zero,r2,330
100046b8:	1000528c 	andi	zero,r2,330
100046bc:	10004fb8 	rdprs	zero,r2,318
100046c0:	1000528c 	andi	zero,r2,330
100046c4:	1000528c 	andi	zero,r2,330
100046c8:	1000528c 	andi	zero,r2,330
100046cc:	1000528c 	andi	zero,r2,330
100046d0:	1000528c 	andi	zero,r2,330
100046d4:	1000528c 	andi	zero,r2,330
100046d8:	1000528c 	andi	zero,r2,330
100046dc:	1000528c 	andi	zero,r2,330
100046e0:	1000528c 	andi	zero,r2,330
100046e4:	1000528c 	andi	zero,r2,330
100046e8:	10005230 	cmpltui	zero,r2,328
100046ec:	100051b0 	cmpltui	zero,r2,326
100046f0:	10004a10 	cmplti	zero,r2,296
100046f4:	10004a10 	cmplti	zero,r2,296
100046f8:	10004a10 	cmplti	zero,r2,296
100046fc:	100051d0 	cmplti	zero,r2,327
10004700:	100051b0 	cmpltui	zero,r2,326
10004704:	1000528c 	andi	zero,r2,330
10004708:	1000528c 	andi	zero,r2,330
1000470c:	100051dc 	xori	zero,r2,327
10004710:	1000528c 	andi	zero,r2,330
10004714:	100051f0 	cmpltui	zero,r2,327
10004718:	10005074 	orhi	zero,r2,321
1000471c:	1000475c 	xori	zero,r2,285
10004720:	100050ac 	andhi	zero,r2,322
10004724:	1000528c 	andi	zero,r2,330
10004728:	100050b8 	rdprs	zero,r2,322
1000472c:	1000528c 	andi	zero,r2,330
10004730:	1000511c 	xori	zero,r2,324
10004734:	1000528c 	andi	zero,r2,330
10004738:	1000528c 	andi	zero,r2,330
1000473c:	1000513c 	xorhi	zero,r2,324
10004740:	d8c03117 	ldw	r3,196(sp)
10004744:	d8802e15 	stw	r2,184(sp)
10004748:	00c7c83a 	sub	r3,zero,r3
1000474c:	d8c03115 	stw	r3,196(sp)
10004750:	84000114 	ori	r16,r16,4
10004754:	ac400007 	ldb	r17,0(r21)
10004758:	003f9706 	br	100045b8 <__alt_data_end+0xf80045b8>
1000475c:	00800c04 	movi	r2,48
10004760:	d8802705 	stb	r2,156(sp)
10004764:	00801e04 	movi	r2,120
10004768:	d8802745 	stb	r2,157(sp)
1000476c:	d9002a17 	ldw	r4,168(sp)
10004770:	d8802e17 	ldw	r2,184(sp)
10004774:	d8002785 	stb	zero,158(sp)
10004778:	e011883a 	mov	r8,fp
1000477c:	10c00104 	addi	r3,r2,4
10004780:	14c00017 	ldw	r19,0(r2)
10004784:	002d883a 	mov	r22,zero
10004788:	80800094 	ori	r2,r16,2
1000478c:	2002ca16 	blt	r4,zero,100052b8 <___vfprintf_internal_r+0xe88>
10004790:	00bfdfc4 	movi	r2,-129
10004794:	80a4703a 	and	r18,r16,r2
10004798:	d8c02e15 	stw	r3,184(sp)
1000479c:	94800094 	ori	r18,r18,2
100047a0:	9802b41e 	bne	r19,zero,10005274 <___vfprintf_internal_r+0xe44>
100047a4:	01440074 	movhi	r5,4097
100047a8:	29476204 	addi	r5,r5,7560
100047ac:	d9403915 	stw	r5,228(sp)
100047b0:	04401e04 	movi	r17,120
100047b4:	d8802a17 	ldw	r2,168(sp)
100047b8:	0039883a 	mov	fp,zero
100047bc:	1001fa26 	beq	r2,zero,10004fa8 <___vfprintf_internal_r+0xb78>
100047c0:	0027883a 	mov	r19,zero
100047c4:	002d883a 	mov	r22,zero
100047c8:	00021906 	br	10005030 <___vfprintf_internal_r+0xc00>
100047cc:	d9002d17 	ldw	r4,180(sp)
100047d0:	b80b883a 	mov	r5,r23
100047d4:	00068440 	call	10006844 <__swsetup_r>
100047d8:	1005dc1e 	bne	r2,zero,10005f4c <___vfprintf_internal_r+0x1b1c>
100047dc:	b880030b 	ldhu	r2,12(r23)
100047e0:	00c00284 	movi	r3,10
100047e4:	1080068c 	andi	r2,r2,26
100047e8:	10ff3a1e 	bne	r2,r3,100044d4 <__alt_data_end+0xf80044d4>
100047ec:	b880038f 	ldh	r2,14(r23)
100047f0:	103f3816 	blt	r2,zero,100044d4 <__alt_data_end+0xf80044d4>
100047f4:	d9c02e17 	ldw	r7,184(sp)
100047f8:	d9002d17 	ldw	r4,180(sp)
100047fc:	a80d883a 	mov	r6,r21
10004800:	b80b883a 	mov	r5,r23
10004804:	00067280 	call	10006728 <__sbprintf>
10004808:	00001106 	br	10004850 <___vfprintf_internal_r+0x420>
1000480c:	d9002d17 	ldw	r4,180(sp)
10004810:	d9801e04 	addi	r6,sp,120
10004814:	b80b883a 	mov	r5,r23
10004818:	000a49c0 	call	1000a49c <__sprint_r>
1000481c:	1000081e 	bne	r2,zero,10004840 <___vfprintf_internal_r+0x410>
10004820:	da000404 	addi	r8,sp,16
10004824:	003f5106 	br	1000456c <__alt_data_end+0xf800456c>
10004828:	d8802017 	ldw	r2,128(sp)
1000482c:	10000426 	beq	r2,zero,10004840 <___vfprintf_internal_r+0x410>
10004830:	d9002d17 	ldw	r4,180(sp)
10004834:	d9801e04 	addi	r6,sp,120
10004838:	b80b883a 	mov	r5,r23
1000483c:	000a49c0 	call	1000a49c <__sprint_r>
10004840:	b880030b 	ldhu	r2,12(r23)
10004844:	1080100c 	andi	r2,r2,64
10004848:	1005c01e 	bne	r2,zero,10005f4c <___vfprintf_internal_r+0x1b1c>
1000484c:	d8802f17 	ldw	r2,188(sp)
10004850:	dfc04717 	ldw	ra,284(sp)
10004854:	df004617 	ldw	fp,280(sp)
10004858:	ddc04517 	ldw	r23,276(sp)
1000485c:	dd804417 	ldw	r22,272(sp)
10004860:	dd404317 	ldw	r21,268(sp)
10004864:	dd004217 	ldw	r20,264(sp)
10004868:	dcc04117 	ldw	r19,260(sp)
1000486c:	dc804017 	ldw	r18,256(sp)
10004870:	dc403f17 	ldw	r17,252(sp)
10004874:	dc003e17 	ldw	r16,248(sp)
10004878:	dec04804 	addi	sp,sp,288
1000487c:	f800283a 	ret
10004880:	d9002d17 	ldw	r4,180(sp)
10004884:	00019b40 	call	100019b4 <__sinit>
10004888:	003f0206 	br	10004494 <__alt_data_end+0xf8004494>
1000488c:	d9002e17 	ldw	r4,184(sp)
10004890:	d9402e17 	ldw	r5,184(sp)
10004894:	21000017 	ldw	r4,0(r4)
10004898:	28800104 	addi	r2,r5,4
1000489c:	d9003115 	stw	r4,196(sp)
100048a0:	203fa716 	blt	r4,zero,10004740 <__alt_data_end+0xf8004740>
100048a4:	d8802e15 	stw	r2,184(sp)
100048a8:	ac400007 	ldb	r17,0(r21)
100048ac:	003f4206 	br	100045b8 <__alt_data_end+0xf80045b8>
100048b0:	ac400007 	ldb	r17,0(r21)
100048b4:	01000a84 	movi	r4,42
100048b8:	a8c00044 	addi	r3,r21,1
100048bc:	89075826 	beq	r17,r4,10006620 <___vfprintf_internal_r+0x21f0>
100048c0:	8cbff404 	addi	r18,r17,-48
100048c4:	b486ae36 	bltu	r22,r18,10006380 <___vfprintf_internal_r+0x1f50>
100048c8:	0009883a 	mov	r4,zero
100048cc:	1823883a 	mov	r17,r3
100048d0:	01400284 	movi	r5,10
100048d4:	00010d40 	call	100010d4 <__mulsi3>
100048d8:	88c00007 	ldb	r3,0(r17)
100048dc:	1489883a 	add	r4,r2,r18
100048e0:	8d400044 	addi	r21,r17,1
100048e4:	1cbff404 	addi	r18,r3,-48
100048e8:	a823883a 	mov	r17,r21
100048ec:	b4bff82e 	bgeu	r22,r18,100048d0 <__alt_data_end+0xf80048d0>
100048f0:	1823883a 	mov	r17,r3
100048f4:	2005f616 	blt	r4,zero,100060d0 <___vfprintf_internal_r+0x1ca0>
100048f8:	d9002a15 	stw	r4,168(sp)
100048fc:	003f2f06 	br	100045bc <__alt_data_end+0xf80045bc>
10004900:	84002014 	ori	r16,r16,128
10004904:	ac400007 	ldb	r17,0(r21)
10004908:	003f2b06 	br	100045b8 <__alt_data_end+0xf80045b8>
1000490c:	8cbff404 	addi	r18,r17,-48
10004910:	d8003115 	stw	zero,196(sp)
10004914:	0009883a 	mov	r4,zero
10004918:	a823883a 	mov	r17,r21
1000491c:	01400284 	movi	r5,10
10004920:	00010d40 	call	100010d4 <__mulsi3>
10004924:	88c00007 	ldb	r3,0(r17)
10004928:	9089883a 	add	r4,r18,r2
1000492c:	ad400044 	addi	r21,r21,1
10004930:	1cbff404 	addi	r18,r3,-48
10004934:	a823883a 	mov	r17,r21
10004938:	b4bff82e 	bgeu	r22,r18,1000491c <__alt_data_end+0xf800491c>
1000493c:	1823883a 	mov	r17,r3
10004940:	d9003115 	stw	r4,196(sp)
10004944:	003f1d06 	br	100045bc <__alt_data_end+0xf80045bc>
10004948:	8025883a 	mov	r18,r16
1000494c:	dc002903 	ldbu	r16,164(sp)
10004950:	e011883a 	mov	r8,fp
10004954:	84003fcc 	andi	r16,r16,255
10004958:	8007531e 	bne	r16,zero,100066a8 <___vfprintf_internal_r+0x2278>
1000495c:	94800414 	ori	r18,r18,16
10004960:	9080080c 	andi	r2,r18,32
10004964:	1003a326 	beq	r2,zero,100057f4 <___vfprintf_internal_r+0x13c4>
10004968:	d9002e17 	ldw	r4,184(sp)
1000496c:	20800117 	ldw	r2,4(r4)
10004970:	24c00017 	ldw	r19,0(r4)
10004974:	21000204 	addi	r4,r4,8
10004978:	d9002e15 	stw	r4,184(sp)
1000497c:	102d883a 	mov	r22,r2
10004980:	10047316 	blt	r2,zero,10005b50 <___vfprintf_internal_r+0x1720>
10004984:	d9002a17 	ldw	r4,168(sp)
10004988:	df002783 	ldbu	fp,158(sp)
1000498c:	2003e416 	blt	r4,zero,10005920 <___vfprintf_internal_r+0x14f0>
10004990:	00ffdfc4 	movi	r3,-129
10004994:	9d84b03a 	or	r2,r19,r22
10004998:	90e4703a 	and	r18,r18,r3
1000499c:	10018026 	beq	r2,zero,10004fa0 <___vfprintf_internal_r+0xb70>
100049a0:	b003ab26 	beq	r22,zero,10005850 <___vfprintf_internal_r+0x1420>
100049a4:	dc402915 	stw	r17,164(sp)
100049a8:	dc001e04 	addi	r16,sp,120
100049ac:	b023883a 	mov	r17,r22
100049b0:	402d883a 	mov	r22,r8
100049b4:	9809883a 	mov	r4,r19
100049b8:	880b883a 	mov	r5,r17
100049bc:	01800284 	movi	r6,10
100049c0:	000f883a 	mov	r7,zero
100049c4:	000c6b80 	call	1000c6b8 <__umoddi3>
100049c8:	10800c04 	addi	r2,r2,48
100049cc:	843fffc4 	addi	r16,r16,-1
100049d0:	9809883a 	mov	r4,r19
100049d4:	880b883a 	mov	r5,r17
100049d8:	80800005 	stb	r2,0(r16)
100049dc:	01800284 	movi	r6,10
100049e0:	000f883a 	mov	r7,zero
100049e4:	000c0bc0 	call	1000c0bc <__udivdi3>
100049e8:	1027883a 	mov	r19,r2
100049ec:	10c4b03a 	or	r2,r2,r3
100049f0:	1823883a 	mov	r17,r3
100049f4:	103fef1e 	bne	r2,zero,100049b4 <__alt_data_end+0xf80049b4>
100049f8:	d8c02817 	ldw	r3,160(sp)
100049fc:	dc402917 	ldw	r17,164(sp)
10004a00:	b011883a 	mov	r8,r22
10004a04:	1c07c83a 	sub	r3,r3,r16
10004a08:	d8c02b15 	stw	r3,172(sp)
10004a0c:	00005f06 	br	10004b8c <___vfprintf_internal_r+0x75c>
10004a10:	8025883a 	mov	r18,r16
10004a14:	dc002903 	ldbu	r16,164(sp)
10004a18:	e011883a 	mov	r8,fp
10004a1c:	84003fcc 	andi	r16,r16,255
10004a20:	80071e1e 	bne	r16,zero,1000669c <___vfprintf_internal_r+0x226c>
10004a24:	9080020c 	andi	r2,r18,8
10004a28:	1004af26 	beq	r2,zero,10005ce8 <___vfprintf_internal_r+0x18b8>
10004a2c:	d9002e17 	ldw	r4,184(sp)
10004a30:	d9402e17 	ldw	r5,184(sp)
10004a34:	d8802e17 	ldw	r2,184(sp)
10004a38:	21000017 	ldw	r4,0(r4)
10004a3c:	29400117 	ldw	r5,4(r5)
10004a40:	10800204 	addi	r2,r2,8
10004a44:	d9003615 	stw	r4,216(sp)
10004a48:	d9403815 	stw	r5,224(sp)
10004a4c:	d8802e15 	stw	r2,184(sp)
10004a50:	d9003617 	ldw	r4,216(sp)
10004a54:	d9403817 	ldw	r5,224(sp)
10004a58:	da003d15 	stw	r8,244(sp)
10004a5c:	04000044 	movi	r16,1
10004a60:	0009f4c0 	call	10009f4c <__fpclassifyd>
10004a64:	da003d17 	ldw	r8,244(sp)
10004a68:	1404441e 	bne	r2,r16,10005b7c <___vfprintf_internal_r+0x174c>
10004a6c:	d9003617 	ldw	r4,216(sp)
10004a70:	d9403817 	ldw	r5,224(sp)
10004a74:	000d883a 	mov	r6,zero
10004a78:	000f883a 	mov	r7,zero
10004a7c:	000e05c0 	call	1000e05c <__ledf2>
10004a80:	da003d17 	ldw	r8,244(sp)
10004a84:	1005e316 	blt	r2,zero,10006214 <___vfprintf_internal_r+0x1de4>
10004a88:	df002783 	ldbu	fp,158(sp)
10004a8c:	008011c4 	movi	r2,71
10004a90:	1445580e 	bge	r2,r17,10005ff4 <___vfprintf_internal_r+0x1bc4>
10004a94:	04040074 	movhi	r16,4097
10004a98:	84075a04 	addi	r16,r16,7528
10004a9c:	00c000c4 	movi	r3,3
10004aa0:	00bfdfc4 	movi	r2,-129
10004aa4:	d8c02915 	stw	r3,164(sp)
10004aa8:	90a4703a 	and	r18,r18,r2
10004aac:	d8c02b15 	stw	r3,172(sp)
10004ab0:	d8002a15 	stw	zero,168(sp)
10004ab4:	d8003215 	stw	zero,200(sp)
10004ab8:	00003a06 	br	10004ba4 <___vfprintf_internal_r+0x774>
10004abc:	84000214 	ori	r16,r16,8
10004ac0:	ac400007 	ldb	r17,0(r21)
10004ac4:	003ebc06 	br	100045b8 <__alt_data_end+0xf80045b8>
10004ac8:	8025883a 	mov	r18,r16
10004acc:	dc002903 	ldbu	r16,164(sp)
10004ad0:	e011883a 	mov	r8,fp
10004ad4:	84003fcc 	andi	r16,r16,255
10004ad8:	8007001e 	bne	r16,zero,100066dc <___vfprintf_internal_r+0x22ac>
10004adc:	94800414 	ori	r18,r18,16
10004ae0:	9080080c 	andi	r2,r18,32
10004ae4:	1002fa26 	beq	r2,zero,100056d0 <___vfprintf_internal_r+0x12a0>
10004ae8:	d9002e17 	ldw	r4,184(sp)
10004aec:	d9402a17 	ldw	r5,168(sp)
10004af0:	d8002785 	stb	zero,158(sp)
10004af4:	20800204 	addi	r2,r4,8
10004af8:	24c00017 	ldw	r19,0(r4)
10004afc:	25800117 	ldw	r22,4(r4)
10004b00:	2804b116 	blt	r5,zero,10005dc8 <___vfprintf_internal_r+0x1998>
10004b04:	013fdfc4 	movi	r4,-129
10004b08:	9d86b03a 	or	r3,r19,r22
10004b0c:	d8802e15 	stw	r2,184(sp)
10004b10:	9124703a 	and	r18,r18,r4
10004b14:	1802fb1e 	bne	r3,zero,10005704 <___vfprintf_internal_r+0x12d4>
10004b18:	d8c02a17 	ldw	r3,168(sp)
10004b1c:	0039883a 	mov	fp,zero
10004b20:	1805e526 	beq	r3,zero,100062b8 <___vfprintf_internal_r+0x1e88>
10004b24:	0027883a 	mov	r19,zero
10004b28:	002d883a 	mov	r22,zero
10004b2c:	dc001e04 	addi	r16,sp,120
10004b30:	9806d0fa 	srli	r3,r19,3
10004b34:	b008977a 	slli	r4,r22,29
10004b38:	b02cd0fa 	srli	r22,r22,3
10004b3c:	9cc001cc 	andi	r19,r19,7
10004b40:	98800c04 	addi	r2,r19,48
10004b44:	843fffc4 	addi	r16,r16,-1
10004b48:	20e6b03a 	or	r19,r4,r3
10004b4c:	80800005 	stb	r2,0(r16)
10004b50:	9d86b03a 	or	r3,r19,r22
10004b54:	183ff61e 	bne	r3,zero,10004b30 <__alt_data_end+0xf8004b30>
10004b58:	90c0004c 	andi	r3,r18,1
10004b5c:	18014126 	beq	r3,zero,10005064 <___vfprintf_internal_r+0xc34>
10004b60:	10803fcc 	andi	r2,r2,255
10004b64:	1080201c 	xori	r2,r2,128
10004b68:	10bfe004 	addi	r2,r2,-128
10004b6c:	00c00c04 	movi	r3,48
10004b70:	10c13c26 	beq	r2,r3,10005064 <___vfprintf_internal_r+0xc34>
10004b74:	80ffffc5 	stb	r3,-1(r16)
10004b78:	d8c02817 	ldw	r3,160(sp)
10004b7c:	80bfffc4 	addi	r2,r16,-1
10004b80:	1021883a 	mov	r16,r2
10004b84:	1887c83a 	sub	r3,r3,r2
10004b88:	d8c02b15 	stw	r3,172(sp)
10004b8c:	d8802b17 	ldw	r2,172(sp)
10004b90:	d9002a17 	ldw	r4,168(sp)
10004b94:	1100010e 	bge	r2,r4,10004b9c <___vfprintf_internal_r+0x76c>
10004b98:	2005883a 	mov	r2,r4
10004b9c:	d8802915 	stw	r2,164(sp)
10004ba0:	d8003215 	stw	zero,200(sp)
10004ba4:	e7003fcc 	andi	fp,fp,255
10004ba8:	e700201c 	xori	fp,fp,128
10004bac:	e73fe004 	addi	fp,fp,-128
10004bb0:	e0000326 	beq	fp,zero,10004bc0 <___vfprintf_internal_r+0x790>
10004bb4:	d8c02917 	ldw	r3,164(sp)
10004bb8:	18c00044 	addi	r3,r3,1
10004bbc:	d8c02915 	stw	r3,164(sp)
10004bc0:	90c0008c 	andi	r3,r18,2
10004bc4:	d8c02c15 	stw	r3,176(sp)
10004bc8:	18000326 	beq	r3,zero,10004bd8 <___vfprintf_internal_r+0x7a8>
10004bcc:	d8c02917 	ldw	r3,164(sp)
10004bd0:	18c00084 	addi	r3,r3,2
10004bd4:	d8c02915 	stw	r3,164(sp)
10004bd8:	90c0210c 	andi	r3,r18,132
10004bdc:	d8c03015 	stw	r3,192(sp)
10004be0:	1801c51e 	bne	r3,zero,100052f8 <___vfprintf_internal_r+0xec8>
10004be4:	d9003117 	ldw	r4,196(sp)
10004be8:	d8c02917 	ldw	r3,164(sp)
10004bec:	20e7c83a 	sub	r19,r4,r3
10004bf0:	04c1c10e 	bge	zero,r19,100052f8 <___vfprintf_internal_r+0xec8>
10004bf4:	02400404 	movi	r9,16
10004bf8:	d8c02017 	ldw	r3,128(sp)
10004bfc:	d8801f17 	ldw	r2,124(sp)
10004c00:	4cc52f0e 	bge	r9,r19,100060c0 <___vfprintf_internal_r+0x1c90>
10004c04:	01440074 	movhi	r5,4097
10004c08:	29476d84 	addi	r5,r5,7606
10004c0c:	dc403b15 	stw	r17,236(sp)
10004c10:	d9403515 	stw	r5,212(sp)
10004c14:	9823883a 	mov	r17,r19
10004c18:	482d883a 	mov	r22,r9
10004c1c:	9027883a 	mov	r19,r18
10004c20:	070001c4 	movi	fp,7
10004c24:	8025883a 	mov	r18,r16
10004c28:	dc002d17 	ldw	r16,180(sp)
10004c2c:	00000306 	br	10004c3c <___vfprintf_internal_r+0x80c>
10004c30:	8c7ffc04 	addi	r17,r17,-16
10004c34:	42000204 	addi	r8,r8,8
10004c38:	b440130e 	bge	r22,r17,10004c88 <___vfprintf_internal_r+0x858>
10004c3c:	01040074 	movhi	r4,4097
10004c40:	18c00404 	addi	r3,r3,16
10004c44:	10800044 	addi	r2,r2,1
10004c48:	21076d84 	addi	r4,r4,7606
10004c4c:	41000015 	stw	r4,0(r8)
10004c50:	45800115 	stw	r22,4(r8)
10004c54:	d8c02015 	stw	r3,128(sp)
10004c58:	d8801f15 	stw	r2,124(sp)
10004c5c:	e0bff40e 	bge	fp,r2,10004c30 <__alt_data_end+0xf8004c30>
10004c60:	d9801e04 	addi	r6,sp,120
10004c64:	b80b883a 	mov	r5,r23
10004c68:	8009883a 	mov	r4,r16
10004c6c:	000a49c0 	call	1000a49c <__sprint_r>
10004c70:	103ef31e 	bne	r2,zero,10004840 <__alt_data_end+0xf8004840>
10004c74:	8c7ffc04 	addi	r17,r17,-16
10004c78:	d8c02017 	ldw	r3,128(sp)
10004c7c:	d8801f17 	ldw	r2,124(sp)
10004c80:	da000404 	addi	r8,sp,16
10004c84:	b47fed16 	blt	r22,r17,10004c3c <__alt_data_end+0xf8004c3c>
10004c88:	9021883a 	mov	r16,r18
10004c8c:	9825883a 	mov	r18,r19
10004c90:	8827883a 	mov	r19,r17
10004c94:	dc403b17 	ldw	r17,236(sp)
10004c98:	d9403517 	ldw	r5,212(sp)
10004c9c:	98c7883a 	add	r3,r19,r3
10004ca0:	10800044 	addi	r2,r2,1
10004ca4:	41400015 	stw	r5,0(r8)
10004ca8:	44c00115 	stw	r19,4(r8)
10004cac:	d8c02015 	stw	r3,128(sp)
10004cb0:	d8801f15 	stw	r2,124(sp)
10004cb4:	010001c4 	movi	r4,7
10004cb8:	2082c516 	blt	r4,r2,100057d0 <___vfprintf_internal_r+0x13a0>
10004cbc:	df002787 	ldb	fp,158(sp)
10004cc0:	42000204 	addi	r8,r8,8
10004cc4:	e0000c26 	beq	fp,zero,10004cf8 <___vfprintf_internal_r+0x8c8>
10004cc8:	d8801f17 	ldw	r2,124(sp)
10004ccc:	d9002784 	addi	r4,sp,158
10004cd0:	18c00044 	addi	r3,r3,1
10004cd4:	10800044 	addi	r2,r2,1
10004cd8:	41000015 	stw	r4,0(r8)
10004cdc:	01000044 	movi	r4,1
10004ce0:	41000115 	stw	r4,4(r8)
10004ce4:	d8c02015 	stw	r3,128(sp)
10004ce8:	d8801f15 	stw	r2,124(sp)
10004cec:	010001c4 	movi	r4,7
10004cf0:	20825e16 	blt	r4,r2,1000566c <___vfprintf_internal_r+0x123c>
10004cf4:	42000204 	addi	r8,r8,8
10004cf8:	d8802c17 	ldw	r2,176(sp)
10004cfc:	10000c26 	beq	r2,zero,10004d30 <___vfprintf_internal_r+0x900>
10004d00:	d8801f17 	ldw	r2,124(sp)
10004d04:	d9002704 	addi	r4,sp,156
10004d08:	18c00084 	addi	r3,r3,2
10004d0c:	10800044 	addi	r2,r2,1
10004d10:	41000015 	stw	r4,0(r8)
10004d14:	01000084 	movi	r4,2
10004d18:	41000115 	stw	r4,4(r8)
10004d1c:	d8c02015 	stw	r3,128(sp)
10004d20:	d8801f15 	stw	r2,124(sp)
10004d24:	010001c4 	movi	r4,7
10004d28:	20825816 	blt	r4,r2,1000568c <___vfprintf_internal_r+0x125c>
10004d2c:	42000204 	addi	r8,r8,8
10004d30:	d9003017 	ldw	r4,192(sp)
10004d34:	00802004 	movi	r2,128
10004d38:	2081bb26 	beq	r4,r2,10005428 <___vfprintf_internal_r+0xff8>
10004d3c:	d9402a17 	ldw	r5,168(sp)
10004d40:	d8802b17 	ldw	r2,172(sp)
10004d44:	28adc83a 	sub	r22,r5,r2
10004d48:	0580310e 	bge	zero,r22,10004e10 <___vfprintf_internal_r+0x9e0>
10004d4c:	07000404 	movi	fp,16
10004d50:	d8801f17 	ldw	r2,124(sp)
10004d54:	e584360e 	bge	fp,r22,10005e30 <___vfprintf_internal_r+0x1a00>
10004d58:	01440074 	movhi	r5,4097
10004d5c:	29476984 	addi	r5,r5,7590
10004d60:	dc402a15 	stw	r17,168(sp)
10004d64:	d9402c15 	stw	r5,176(sp)
10004d68:	b023883a 	mov	r17,r22
10004d6c:	04c001c4 	movi	r19,7
10004d70:	a82d883a 	mov	r22,r21
10004d74:	902b883a 	mov	r21,r18
10004d78:	8025883a 	mov	r18,r16
10004d7c:	dc002d17 	ldw	r16,180(sp)
10004d80:	00000306 	br	10004d90 <___vfprintf_internal_r+0x960>
10004d84:	8c7ffc04 	addi	r17,r17,-16
10004d88:	42000204 	addi	r8,r8,8
10004d8c:	e440110e 	bge	fp,r17,10004dd4 <___vfprintf_internal_r+0x9a4>
10004d90:	18c00404 	addi	r3,r3,16
10004d94:	10800044 	addi	r2,r2,1
10004d98:	45000015 	stw	r20,0(r8)
10004d9c:	47000115 	stw	fp,4(r8)
10004da0:	d8c02015 	stw	r3,128(sp)
10004da4:	d8801f15 	stw	r2,124(sp)
10004da8:	98bff60e 	bge	r19,r2,10004d84 <__alt_data_end+0xf8004d84>
10004dac:	d9801e04 	addi	r6,sp,120
10004db0:	b80b883a 	mov	r5,r23
10004db4:	8009883a 	mov	r4,r16
10004db8:	000a49c0 	call	1000a49c <__sprint_r>
10004dbc:	103ea01e 	bne	r2,zero,10004840 <__alt_data_end+0xf8004840>
10004dc0:	8c7ffc04 	addi	r17,r17,-16
10004dc4:	d8c02017 	ldw	r3,128(sp)
10004dc8:	d8801f17 	ldw	r2,124(sp)
10004dcc:	da000404 	addi	r8,sp,16
10004dd0:	e47fef16 	blt	fp,r17,10004d90 <__alt_data_end+0xf8004d90>
10004dd4:	9021883a 	mov	r16,r18
10004dd8:	a825883a 	mov	r18,r21
10004ddc:	b02b883a 	mov	r21,r22
10004de0:	882d883a 	mov	r22,r17
10004de4:	dc402a17 	ldw	r17,168(sp)
10004de8:	d9002c17 	ldw	r4,176(sp)
10004dec:	1d87883a 	add	r3,r3,r22
10004df0:	10800044 	addi	r2,r2,1
10004df4:	41000015 	stw	r4,0(r8)
10004df8:	45800115 	stw	r22,4(r8)
10004dfc:	d8c02015 	stw	r3,128(sp)
10004e00:	d8801f15 	stw	r2,124(sp)
10004e04:	010001c4 	movi	r4,7
10004e08:	20821016 	blt	r4,r2,1000564c <___vfprintf_internal_r+0x121c>
10004e0c:	42000204 	addi	r8,r8,8
10004e10:	9080400c 	andi	r2,r18,256
10004e14:	10013a1e 	bne	r2,zero,10005300 <___vfprintf_internal_r+0xed0>
10004e18:	d9402b17 	ldw	r5,172(sp)
10004e1c:	d8801f17 	ldw	r2,124(sp)
10004e20:	44000015 	stw	r16,0(r8)
10004e24:	1947883a 	add	r3,r3,r5
10004e28:	10800044 	addi	r2,r2,1
10004e2c:	41400115 	stw	r5,4(r8)
10004e30:	d8c02015 	stw	r3,128(sp)
10004e34:	d8801f15 	stw	r2,124(sp)
10004e38:	010001c4 	movi	r4,7
10004e3c:	2081f516 	blt	r4,r2,10005614 <___vfprintf_internal_r+0x11e4>
10004e40:	42000204 	addi	r8,r8,8
10004e44:	9480010c 	andi	r18,r18,4
10004e48:	90003226 	beq	r18,zero,10004f14 <___vfprintf_internal_r+0xae4>
10004e4c:	d9403117 	ldw	r5,196(sp)
10004e50:	d8802917 	ldw	r2,164(sp)
10004e54:	28a1c83a 	sub	r16,r5,r2
10004e58:	04002e0e 	bge	zero,r16,10004f14 <___vfprintf_internal_r+0xae4>
10004e5c:	04400404 	movi	r17,16
10004e60:	d8801f17 	ldw	r2,124(sp)
10004e64:	8c04c40e 	bge	r17,r16,10006178 <___vfprintf_internal_r+0x1d48>
10004e68:	01440074 	movhi	r5,4097
10004e6c:	29476d84 	addi	r5,r5,7606
10004e70:	d9403515 	stw	r5,212(sp)
10004e74:	048001c4 	movi	r18,7
10004e78:	dcc02d17 	ldw	r19,180(sp)
10004e7c:	00000306 	br	10004e8c <___vfprintf_internal_r+0xa5c>
10004e80:	843ffc04 	addi	r16,r16,-16
10004e84:	42000204 	addi	r8,r8,8
10004e88:	8c00130e 	bge	r17,r16,10004ed8 <___vfprintf_internal_r+0xaa8>
10004e8c:	01040074 	movhi	r4,4097
10004e90:	18c00404 	addi	r3,r3,16
10004e94:	10800044 	addi	r2,r2,1
10004e98:	21076d84 	addi	r4,r4,7606
10004e9c:	41000015 	stw	r4,0(r8)
10004ea0:	44400115 	stw	r17,4(r8)
10004ea4:	d8c02015 	stw	r3,128(sp)
10004ea8:	d8801f15 	stw	r2,124(sp)
10004eac:	90bff40e 	bge	r18,r2,10004e80 <__alt_data_end+0xf8004e80>
10004eb0:	d9801e04 	addi	r6,sp,120
10004eb4:	b80b883a 	mov	r5,r23
10004eb8:	9809883a 	mov	r4,r19
10004ebc:	000a49c0 	call	1000a49c <__sprint_r>
10004ec0:	103e5f1e 	bne	r2,zero,10004840 <__alt_data_end+0xf8004840>
10004ec4:	843ffc04 	addi	r16,r16,-16
10004ec8:	d8c02017 	ldw	r3,128(sp)
10004ecc:	d8801f17 	ldw	r2,124(sp)
10004ed0:	da000404 	addi	r8,sp,16
10004ed4:	8c3fed16 	blt	r17,r16,10004e8c <__alt_data_end+0xf8004e8c>
10004ed8:	d9403517 	ldw	r5,212(sp)
10004edc:	1c07883a 	add	r3,r3,r16
10004ee0:	10800044 	addi	r2,r2,1
10004ee4:	41400015 	stw	r5,0(r8)
10004ee8:	44000115 	stw	r16,4(r8)
10004eec:	d8c02015 	stw	r3,128(sp)
10004ef0:	d8801f15 	stw	r2,124(sp)
10004ef4:	010001c4 	movi	r4,7
10004ef8:	2080060e 	bge	r4,r2,10004f14 <___vfprintf_internal_r+0xae4>
10004efc:	d9002d17 	ldw	r4,180(sp)
10004f00:	d9801e04 	addi	r6,sp,120
10004f04:	b80b883a 	mov	r5,r23
10004f08:	000a49c0 	call	1000a49c <__sprint_r>
10004f0c:	103e4c1e 	bne	r2,zero,10004840 <__alt_data_end+0xf8004840>
10004f10:	d8c02017 	ldw	r3,128(sp)
10004f14:	d8803117 	ldw	r2,196(sp)
10004f18:	d9002917 	ldw	r4,164(sp)
10004f1c:	1100010e 	bge	r2,r4,10004f24 <___vfprintf_internal_r+0xaf4>
10004f20:	2005883a 	mov	r2,r4
10004f24:	d9402f17 	ldw	r5,188(sp)
10004f28:	288b883a 	add	r5,r5,r2
10004f2c:	d9402f15 	stw	r5,188(sp)
10004f30:	1801c01e 	bne	r3,zero,10005634 <___vfprintf_internal_r+0x1204>
10004f34:	a8800007 	ldb	r2,0(r21)
10004f38:	d8001f15 	stw	zero,124(sp)
10004f3c:	da000404 	addi	r8,sp,16
10004f40:	103d751e 	bne	r2,zero,10004518 <__alt_data_end+0xf8004518>
10004f44:	a823883a 	mov	r17,r21
10004f48:	003d8b06 	br	10004578 <__alt_data_end+0xf8004578>
10004f4c:	8025883a 	mov	r18,r16
10004f50:	dc002903 	ldbu	r16,164(sp)
10004f54:	e011883a 	mov	r8,fp
10004f58:	84003fcc 	andi	r16,r16,255
10004f5c:	8005e51e 	bne	r16,zero,100066f4 <___vfprintf_internal_r+0x22c4>
10004f60:	94800414 	ori	r18,r18,16
10004f64:	9080080c 	andi	r2,r18,32
10004f68:	10022b26 	beq	r2,zero,10005818 <___vfprintf_internal_r+0x13e8>
10004f6c:	d9002e17 	ldw	r4,184(sp)
10004f70:	d9402a17 	ldw	r5,168(sp)
10004f74:	d8002785 	stb	zero,158(sp)
10004f78:	20c00204 	addi	r3,r4,8
10004f7c:	24c00017 	ldw	r19,0(r4)
10004f80:	25800117 	ldw	r22,4(r4)
10004f84:	28042e16 	blt	r5,zero,10006040 <___vfprintf_internal_r+0x1c10>
10004f88:	013fdfc4 	movi	r4,-129
10004f8c:	9d84b03a 	or	r2,r19,r22
10004f90:	d8c02e15 	stw	r3,184(sp)
10004f94:	9124703a 	and	r18,r18,r4
10004f98:	0039883a 	mov	fp,zero
10004f9c:	103e801e 	bne	r2,zero,100049a0 <__alt_data_end+0xf80049a0>
10004fa0:	d9002a17 	ldw	r4,168(sp)
10004fa4:	2002e01e 	bne	r4,zero,10005b28 <___vfprintf_internal_r+0x16f8>
10004fa8:	d8002a15 	stw	zero,168(sp)
10004fac:	d8002b15 	stw	zero,172(sp)
10004fb0:	dc001e04 	addi	r16,sp,120
10004fb4:	003ef506 	br	10004b8c <__alt_data_end+0xf8004b8c>
10004fb8:	8025883a 	mov	r18,r16
10004fbc:	dc002903 	ldbu	r16,164(sp)
10004fc0:	e011883a 	mov	r8,fp
10004fc4:	84003fcc 	andi	r16,r16,255
10004fc8:	8005ba1e 	bne	r16,zero,100066b4 <___vfprintf_internal_r+0x2284>
10004fcc:	01040074 	movhi	r4,4097
10004fd0:	21075d04 	addi	r4,r4,7540
10004fd4:	d9003915 	stw	r4,228(sp)
10004fd8:	9080080c 	andi	r2,r18,32
10004fdc:	10006126 	beq	r2,zero,10005164 <___vfprintf_internal_r+0xd34>
10004fe0:	d9402e17 	ldw	r5,184(sp)
10004fe4:	2cc00017 	ldw	r19,0(r5)
10004fe8:	2d800117 	ldw	r22,4(r5)
10004fec:	29400204 	addi	r5,r5,8
10004ff0:	d9402e15 	stw	r5,184(sp)
10004ff4:	9080004c 	andi	r2,r18,1
10004ff8:	1001ac26 	beq	r2,zero,100056ac <___vfprintf_internal_r+0x127c>
10004ffc:	9d84b03a 	or	r2,r19,r22
10005000:	10038526 	beq	r2,zero,10005e18 <___vfprintf_internal_r+0x19e8>
10005004:	d8c02a17 	ldw	r3,168(sp)
10005008:	00800c04 	movi	r2,48
1000500c:	d8802705 	stb	r2,156(sp)
10005010:	dc402745 	stb	r17,157(sp)
10005014:	d8002785 	stb	zero,158(sp)
10005018:	90800094 	ori	r2,r18,2
1000501c:	18047916 	blt	r3,zero,10006204 <___vfprintf_internal_r+0x1dd4>
10005020:	00bfdfc4 	movi	r2,-129
10005024:	90a4703a 	and	r18,r18,r2
10005028:	94800094 	ori	r18,r18,2
1000502c:	0039883a 	mov	fp,zero
10005030:	d9003917 	ldw	r4,228(sp)
10005034:	dc001e04 	addi	r16,sp,120
10005038:	988003cc 	andi	r2,r19,15
1000503c:	b006973a 	slli	r3,r22,28
10005040:	2085883a 	add	r2,r4,r2
10005044:	9826d13a 	srli	r19,r19,4
10005048:	10800003 	ldbu	r2,0(r2)
1000504c:	b02cd13a 	srli	r22,r22,4
10005050:	843fffc4 	addi	r16,r16,-1
10005054:	1ce6b03a 	or	r19,r3,r19
10005058:	80800005 	stb	r2,0(r16)
1000505c:	9d84b03a 	or	r2,r19,r22
10005060:	103ff51e 	bne	r2,zero,10005038 <__alt_data_end+0xf8005038>
10005064:	d8c02817 	ldw	r3,160(sp)
10005068:	1c07c83a 	sub	r3,r3,r16
1000506c:	d8c02b15 	stw	r3,172(sp)
10005070:	003ec606 	br	10004b8c <__alt_data_end+0xf8004b8c>
10005074:	8025883a 	mov	r18,r16
10005078:	dc002903 	ldbu	r16,164(sp)
1000507c:	e011883a 	mov	r8,fp
10005080:	84003fcc 	andi	r16,r16,255
10005084:	803e9626 	beq	r16,zero,10004ae0 <__alt_data_end+0xf8004ae0>
10005088:	d8c02b03 	ldbu	r3,172(sp)
1000508c:	d8c02785 	stb	r3,158(sp)
10005090:	003e9306 	br	10004ae0 <__alt_data_end+0xf8004ae0>
10005094:	00c00044 	movi	r3,1
10005098:	d8c02905 	stb	r3,164(sp)
1000509c:	00c00ac4 	movi	r3,43
100050a0:	d8c02b05 	stb	r3,172(sp)
100050a4:	ac400007 	ldb	r17,0(r21)
100050a8:	003d4306 	br	100045b8 <__alt_data_end+0xf80045b8>
100050ac:	84000814 	ori	r16,r16,32
100050b0:	ac400007 	ldb	r17,0(r21)
100050b4:	003d4006 	br	100045b8 <__alt_data_end+0xf80045b8>
100050b8:	d8802e17 	ldw	r2,184(sp)
100050bc:	8025883a 	mov	r18,r16
100050c0:	d8002785 	stb	zero,158(sp)
100050c4:	14000017 	ldw	r16,0(r2)
100050c8:	e011883a 	mov	r8,fp
100050cc:	14c00104 	addi	r19,r2,4
100050d0:	80042d26 	beq	r16,zero,10006188 <___vfprintf_internal_r+0x1d58>
100050d4:	d8c02a17 	ldw	r3,168(sp)
100050d8:	1803e416 	blt	r3,zero,1000606c <___vfprintf_internal_r+0x1c3c>
100050dc:	180d883a 	mov	r6,r3
100050e0:	000b883a 	mov	r5,zero
100050e4:	8009883a 	mov	r4,r16
100050e8:	df003d15 	stw	fp,244(sp)
100050ec:	0008a8c0 	call	10008a8c <memchr>
100050f0:	da003d17 	ldw	r8,244(sp)
100050f4:	10046826 	beq	r2,zero,10006298 <___vfprintf_internal_r+0x1e68>
100050f8:	1405c83a 	sub	r2,r2,r16
100050fc:	d8802b15 	stw	r2,172(sp)
10005100:	1003e016 	blt	r2,zero,10006084 <___vfprintf_internal_r+0x1c54>
10005104:	df002783 	ldbu	fp,158(sp)
10005108:	d8802915 	stw	r2,164(sp)
1000510c:	dcc02e15 	stw	r19,184(sp)
10005110:	d8002a15 	stw	zero,168(sp)
10005114:	d8003215 	stw	zero,200(sp)
10005118:	003ea206 	br	10004ba4 <__alt_data_end+0xf8004ba4>
1000511c:	8025883a 	mov	r18,r16
10005120:	dc002903 	ldbu	r16,164(sp)
10005124:	e011883a 	mov	r8,fp
10005128:	84003fcc 	andi	r16,r16,255
1000512c:	803f8d26 	beq	r16,zero,10004f64 <__alt_data_end+0xf8004f64>
10005130:	d8c02b03 	ldbu	r3,172(sp)
10005134:	d8c02785 	stb	r3,158(sp)
10005138:	003f8a06 	br	10004f64 <__alt_data_end+0xf8004f64>
1000513c:	8025883a 	mov	r18,r16
10005140:	dc002903 	ldbu	r16,164(sp)
10005144:	e011883a 	mov	r8,fp
10005148:	84003fcc 	andi	r16,r16,255
1000514c:	8005661e 	bne	r16,zero,100066e8 <___vfprintf_internal_r+0x22b8>
10005150:	01040074 	movhi	r4,4097
10005154:	21076204 	addi	r4,r4,7560
10005158:	d9003915 	stw	r4,228(sp)
1000515c:	9080080c 	andi	r2,r18,32
10005160:	103f9f1e 	bne	r2,zero,10004fe0 <__alt_data_end+0xf8004fe0>
10005164:	9080040c 	andi	r2,r18,16
10005168:	1002eb26 	beq	r2,zero,10005d18 <___vfprintf_internal_r+0x18e8>
1000516c:	d8802e17 	ldw	r2,184(sp)
10005170:	002d883a 	mov	r22,zero
10005174:	14c00017 	ldw	r19,0(r2)
10005178:	10800104 	addi	r2,r2,4
1000517c:	d8802e15 	stw	r2,184(sp)
10005180:	003f9c06 	br	10004ff4 <__alt_data_end+0xf8004ff4>
10005184:	d8802b07 	ldb	r2,172(sp)
10005188:	1002e11e 	bne	r2,zero,10005d10 <___vfprintf_internal_r+0x18e0>
1000518c:	00c00044 	movi	r3,1
10005190:	d8c02905 	stb	r3,164(sp)
10005194:	00c00804 	movi	r3,32
10005198:	d8c02b05 	stb	r3,172(sp)
1000519c:	ac400007 	ldb	r17,0(r21)
100051a0:	003d0506 	br	100045b8 <__alt_data_end+0xf80045b8>
100051a4:	84000054 	ori	r16,r16,1
100051a8:	ac400007 	ldb	r17,0(r21)
100051ac:	003d0206 	br	100045b8 <__alt_data_end+0xf80045b8>
100051b0:	8025883a 	mov	r18,r16
100051b4:	dc002903 	ldbu	r16,164(sp)
100051b8:	e011883a 	mov	r8,fp
100051bc:	84003fcc 	andi	r16,r16,255
100051c0:	803de726 	beq	r16,zero,10004960 <__alt_data_end+0xf8004960>
100051c4:	d8c02b03 	ldbu	r3,172(sp)
100051c8:	d8c02785 	stb	r3,158(sp)
100051cc:	003de406 	br	10004960 <__alt_data_end+0xf8004960>
100051d0:	84001014 	ori	r16,r16,64
100051d4:	ac400007 	ldb	r17,0(r21)
100051d8:	003cf706 	br	100045b8 <__alt_data_end+0xf80045b8>
100051dc:	ac400007 	ldb	r17,0(r21)
100051e0:	00801b04 	movi	r2,108
100051e4:	88838f26 	beq	r17,r2,10006024 <___vfprintf_internal_r+0x1bf4>
100051e8:	84000414 	ori	r16,r16,16
100051ec:	003cf206 	br	100045b8 <__alt_data_end+0xf80045b8>
100051f0:	8025883a 	mov	r18,r16
100051f4:	dc002903 	ldbu	r16,164(sp)
100051f8:	e011883a 	mov	r8,fp
100051fc:	84003fcc 	andi	r16,r16,255
10005200:	80053f1e 	bne	r16,zero,10006700 <___vfprintf_internal_r+0x22d0>
10005204:	9080080c 	andi	r2,r18,32
10005208:	1002d226 	beq	r2,zero,10005d54 <___vfprintf_internal_r+0x1924>
1000520c:	d9002e17 	ldw	r4,184(sp)
10005210:	d9402f17 	ldw	r5,188(sp)
10005214:	20800017 	ldw	r2,0(r4)
10005218:	2807d7fa 	srai	r3,r5,31
1000521c:	21000104 	addi	r4,r4,4
10005220:	d9002e15 	stw	r4,184(sp)
10005224:	11400015 	stw	r5,0(r2)
10005228:	10c00115 	stw	r3,4(r2)
1000522c:	003cb806 	br	10004510 <__alt_data_end+0xf8004510>
10005230:	d8c02e17 	ldw	r3,184(sp)
10005234:	d9002e17 	ldw	r4,184(sp)
10005238:	8025883a 	mov	r18,r16
1000523c:	18800017 	ldw	r2,0(r3)
10005240:	21000104 	addi	r4,r4,4
10005244:	00c00044 	movi	r3,1
10005248:	e011883a 	mov	r8,fp
1000524c:	d8c02915 	stw	r3,164(sp)
10005250:	d8002785 	stb	zero,158(sp)
10005254:	d8801405 	stb	r2,80(sp)
10005258:	d9002e15 	stw	r4,184(sp)
1000525c:	d8c02b15 	stw	r3,172(sp)
10005260:	d8002a15 	stw	zero,168(sp)
10005264:	d8003215 	stw	zero,200(sp)
10005268:	dc001404 	addi	r16,sp,80
1000526c:	0039883a 	mov	fp,zero
10005270:	003e5306 	br	10004bc0 <__alt_data_end+0xf8004bc0>
10005274:	01040074 	movhi	r4,4097
10005278:	21076204 	addi	r4,r4,7560
1000527c:	0039883a 	mov	fp,zero
10005280:	d9003915 	stw	r4,228(sp)
10005284:	04401e04 	movi	r17,120
10005288:	003f6906 	br	10005030 <__alt_data_end+0xf8005030>
1000528c:	8025883a 	mov	r18,r16
10005290:	dc002903 	ldbu	r16,164(sp)
10005294:	e011883a 	mov	r8,fp
10005298:	84003fcc 	andi	r16,r16,255
1000529c:	8005081e 	bne	r16,zero,100066c0 <___vfprintf_internal_r+0x2290>
100052a0:	883d6126 	beq	r17,zero,10004828 <__alt_data_end+0xf8004828>
100052a4:	00c00044 	movi	r3,1
100052a8:	d8c02915 	stw	r3,164(sp)
100052ac:	dc401405 	stb	r17,80(sp)
100052b0:	d8002785 	stb	zero,158(sp)
100052b4:	003fe906 	br	1000525c <__alt_data_end+0xf800525c>
100052b8:	01440074 	movhi	r5,4097
100052bc:	29476204 	addi	r5,r5,7560
100052c0:	d9403915 	stw	r5,228(sp)
100052c4:	d8c02e15 	stw	r3,184(sp)
100052c8:	1025883a 	mov	r18,r2
100052cc:	04401e04 	movi	r17,120
100052d0:	9d84b03a 	or	r2,r19,r22
100052d4:	1000fc1e 	bne	r2,zero,100056c8 <___vfprintf_internal_r+0x1298>
100052d8:	0039883a 	mov	fp,zero
100052dc:	00800084 	movi	r2,2
100052e0:	10803fcc 	andi	r2,r2,255
100052e4:	00c00044 	movi	r3,1
100052e8:	10c20f26 	beq	r2,r3,10005b28 <___vfprintf_internal_r+0x16f8>
100052ec:	00c00084 	movi	r3,2
100052f0:	10fd3326 	beq	r2,r3,100047c0 <__alt_data_end+0xf80047c0>
100052f4:	003e0b06 	br	10004b24 <__alt_data_end+0xf8004b24>
100052f8:	d8c02017 	ldw	r3,128(sp)
100052fc:	003e7106 	br	10004cc4 <__alt_data_end+0xf8004cc4>
10005300:	00801944 	movi	r2,101
10005304:	14407e0e 	bge	r2,r17,10005500 <___vfprintf_internal_r+0x10d0>
10005308:	d9003617 	ldw	r4,216(sp)
1000530c:	d9403817 	ldw	r5,224(sp)
10005310:	000d883a 	mov	r6,zero
10005314:	000f883a 	mov	r7,zero
10005318:	d8c03c15 	stw	r3,240(sp)
1000531c:	da003d15 	stw	r8,244(sp)
10005320:	000def80 	call	1000def8 <__eqdf2>
10005324:	d8c03c17 	ldw	r3,240(sp)
10005328:	da003d17 	ldw	r8,244(sp)
1000532c:	1000f71e 	bne	r2,zero,1000570c <___vfprintf_internal_r+0x12dc>
10005330:	d8801f17 	ldw	r2,124(sp)
10005334:	01040074 	movhi	r4,4097
10005338:	21076904 	addi	r4,r4,7588
1000533c:	18c00044 	addi	r3,r3,1
10005340:	10800044 	addi	r2,r2,1
10005344:	41000015 	stw	r4,0(r8)
10005348:	01000044 	movi	r4,1
1000534c:	41000115 	stw	r4,4(r8)
10005350:	d8c02015 	stw	r3,128(sp)
10005354:	d8801f15 	stw	r2,124(sp)
10005358:	010001c4 	movi	r4,7
1000535c:	2082b816 	blt	r4,r2,10005e40 <___vfprintf_internal_r+0x1a10>
10005360:	42000204 	addi	r8,r8,8
10005364:	d8802617 	ldw	r2,152(sp)
10005368:	d9403317 	ldw	r5,204(sp)
1000536c:	11400216 	blt	r2,r5,10005378 <___vfprintf_internal_r+0xf48>
10005370:	9080004c 	andi	r2,r18,1
10005374:	103eb326 	beq	r2,zero,10004e44 <__alt_data_end+0xf8004e44>
10005378:	d8803717 	ldw	r2,220(sp)
1000537c:	d9003417 	ldw	r4,208(sp)
10005380:	d9403717 	ldw	r5,220(sp)
10005384:	1887883a 	add	r3,r3,r2
10005388:	d8801f17 	ldw	r2,124(sp)
1000538c:	41000015 	stw	r4,0(r8)
10005390:	41400115 	stw	r5,4(r8)
10005394:	10800044 	addi	r2,r2,1
10005398:	d8c02015 	stw	r3,128(sp)
1000539c:	d8801f15 	stw	r2,124(sp)
100053a0:	010001c4 	movi	r4,7
100053a4:	20832916 	blt	r4,r2,1000604c <___vfprintf_internal_r+0x1c1c>
100053a8:	42000204 	addi	r8,r8,8
100053ac:	d8803317 	ldw	r2,204(sp)
100053b0:	143fffc4 	addi	r16,r2,-1
100053b4:	043ea30e 	bge	zero,r16,10004e44 <__alt_data_end+0xf8004e44>
100053b8:	04400404 	movi	r17,16
100053bc:	d8801f17 	ldw	r2,124(sp)
100053c0:	8c00880e 	bge	r17,r16,100055e4 <___vfprintf_internal_r+0x11b4>
100053c4:	01440074 	movhi	r5,4097
100053c8:	29476984 	addi	r5,r5,7590
100053cc:	d9402c15 	stw	r5,176(sp)
100053d0:	058001c4 	movi	r22,7
100053d4:	dcc02d17 	ldw	r19,180(sp)
100053d8:	00000306 	br	100053e8 <___vfprintf_internal_r+0xfb8>
100053dc:	42000204 	addi	r8,r8,8
100053e0:	843ffc04 	addi	r16,r16,-16
100053e4:	8c00820e 	bge	r17,r16,100055f0 <___vfprintf_internal_r+0x11c0>
100053e8:	18c00404 	addi	r3,r3,16
100053ec:	10800044 	addi	r2,r2,1
100053f0:	45000015 	stw	r20,0(r8)
100053f4:	44400115 	stw	r17,4(r8)
100053f8:	d8c02015 	stw	r3,128(sp)
100053fc:	d8801f15 	stw	r2,124(sp)
10005400:	b0bff60e 	bge	r22,r2,100053dc <__alt_data_end+0xf80053dc>
10005404:	d9801e04 	addi	r6,sp,120
10005408:	b80b883a 	mov	r5,r23
1000540c:	9809883a 	mov	r4,r19
10005410:	000a49c0 	call	1000a49c <__sprint_r>
10005414:	103d0a1e 	bne	r2,zero,10004840 <__alt_data_end+0xf8004840>
10005418:	d8c02017 	ldw	r3,128(sp)
1000541c:	d8801f17 	ldw	r2,124(sp)
10005420:	da000404 	addi	r8,sp,16
10005424:	003fee06 	br	100053e0 <__alt_data_end+0xf80053e0>
10005428:	d9403117 	ldw	r5,196(sp)
1000542c:	d8802917 	ldw	r2,164(sp)
10005430:	28adc83a 	sub	r22,r5,r2
10005434:	05be410e 	bge	zero,r22,10004d3c <__alt_data_end+0xf8004d3c>
10005438:	07000404 	movi	fp,16
1000543c:	d8801f17 	ldw	r2,124(sp)
10005440:	e5838f0e 	bge	fp,r22,10006280 <___vfprintf_internal_r+0x1e50>
10005444:	01440074 	movhi	r5,4097
10005448:	29476984 	addi	r5,r5,7590
1000544c:	dc403015 	stw	r17,192(sp)
10005450:	d9402c15 	stw	r5,176(sp)
10005454:	b023883a 	mov	r17,r22
10005458:	04c001c4 	movi	r19,7
1000545c:	a82d883a 	mov	r22,r21
10005460:	902b883a 	mov	r21,r18
10005464:	8025883a 	mov	r18,r16
10005468:	dc002d17 	ldw	r16,180(sp)
1000546c:	00000306 	br	1000547c <___vfprintf_internal_r+0x104c>
10005470:	8c7ffc04 	addi	r17,r17,-16
10005474:	42000204 	addi	r8,r8,8
10005478:	e440110e 	bge	fp,r17,100054c0 <___vfprintf_internal_r+0x1090>
1000547c:	18c00404 	addi	r3,r3,16
10005480:	10800044 	addi	r2,r2,1
10005484:	45000015 	stw	r20,0(r8)
10005488:	47000115 	stw	fp,4(r8)
1000548c:	d8c02015 	stw	r3,128(sp)
10005490:	d8801f15 	stw	r2,124(sp)
10005494:	98bff60e 	bge	r19,r2,10005470 <__alt_data_end+0xf8005470>
10005498:	d9801e04 	addi	r6,sp,120
1000549c:	b80b883a 	mov	r5,r23
100054a0:	8009883a 	mov	r4,r16
100054a4:	000a49c0 	call	1000a49c <__sprint_r>
100054a8:	103ce51e 	bne	r2,zero,10004840 <__alt_data_end+0xf8004840>
100054ac:	8c7ffc04 	addi	r17,r17,-16
100054b0:	d8c02017 	ldw	r3,128(sp)
100054b4:	d8801f17 	ldw	r2,124(sp)
100054b8:	da000404 	addi	r8,sp,16
100054bc:	e47fef16 	blt	fp,r17,1000547c <__alt_data_end+0xf800547c>
100054c0:	9021883a 	mov	r16,r18
100054c4:	a825883a 	mov	r18,r21
100054c8:	b02b883a 	mov	r21,r22
100054cc:	882d883a 	mov	r22,r17
100054d0:	dc403017 	ldw	r17,192(sp)
100054d4:	d9002c17 	ldw	r4,176(sp)
100054d8:	1d87883a 	add	r3,r3,r22
100054dc:	10800044 	addi	r2,r2,1
100054e0:	41000015 	stw	r4,0(r8)
100054e4:	45800115 	stw	r22,4(r8)
100054e8:	d8c02015 	stw	r3,128(sp)
100054ec:	d8801f15 	stw	r2,124(sp)
100054f0:	010001c4 	movi	r4,7
100054f4:	20818e16 	blt	r4,r2,10005b30 <___vfprintf_internal_r+0x1700>
100054f8:	42000204 	addi	r8,r8,8
100054fc:	003e0f06 	br	10004d3c <__alt_data_end+0xf8004d3c>
10005500:	d9403317 	ldw	r5,204(sp)
10005504:	00800044 	movi	r2,1
10005508:	18c00044 	addi	r3,r3,1
1000550c:	1141530e 	bge	r2,r5,10005a5c <___vfprintf_internal_r+0x162c>
10005510:	dc401f17 	ldw	r17,124(sp)
10005514:	00800044 	movi	r2,1
10005518:	40800115 	stw	r2,4(r8)
1000551c:	8c400044 	addi	r17,r17,1
10005520:	44000015 	stw	r16,0(r8)
10005524:	d8c02015 	stw	r3,128(sp)
10005528:	dc401f15 	stw	r17,124(sp)
1000552c:	008001c4 	movi	r2,7
10005530:	14416b16 	blt	r2,r17,10005ae0 <___vfprintf_internal_r+0x16b0>
10005534:	42000204 	addi	r8,r8,8
10005538:	d8803717 	ldw	r2,220(sp)
1000553c:	d9003417 	ldw	r4,208(sp)
10005540:	8c400044 	addi	r17,r17,1
10005544:	10c7883a 	add	r3,r2,r3
10005548:	40800115 	stw	r2,4(r8)
1000554c:	41000015 	stw	r4,0(r8)
10005550:	d8c02015 	stw	r3,128(sp)
10005554:	dc401f15 	stw	r17,124(sp)
10005558:	008001c4 	movi	r2,7
1000555c:	14416916 	blt	r2,r17,10005b04 <___vfprintf_internal_r+0x16d4>
10005560:	45800204 	addi	r22,r8,8
10005564:	d9003617 	ldw	r4,216(sp)
10005568:	d9403817 	ldw	r5,224(sp)
1000556c:	000d883a 	mov	r6,zero
10005570:	000f883a 	mov	r7,zero
10005574:	d8c03c15 	stw	r3,240(sp)
10005578:	000def80 	call	1000def8 <__eqdf2>
1000557c:	d8c03c17 	ldw	r3,240(sp)
10005580:	1000bc26 	beq	r2,zero,10005874 <___vfprintf_internal_r+0x1444>
10005584:	d9403317 	ldw	r5,204(sp)
10005588:	84000044 	addi	r16,r16,1
1000558c:	8c400044 	addi	r17,r17,1
10005590:	28bfffc4 	addi	r2,r5,-1
10005594:	1887883a 	add	r3,r3,r2
10005598:	b0800115 	stw	r2,4(r22)
1000559c:	b4000015 	stw	r16,0(r22)
100055a0:	d8c02015 	stw	r3,128(sp)
100055a4:	dc401f15 	stw	r17,124(sp)
100055a8:	008001c4 	movi	r2,7
100055ac:	14414316 	blt	r2,r17,10005abc <___vfprintf_internal_r+0x168c>
100055b0:	b5800204 	addi	r22,r22,8
100055b4:	d9003a17 	ldw	r4,232(sp)
100055b8:	df0022c4 	addi	fp,sp,139
100055bc:	8c400044 	addi	r17,r17,1
100055c0:	20c7883a 	add	r3,r4,r3
100055c4:	b7000015 	stw	fp,0(r22)
100055c8:	b1000115 	stw	r4,4(r22)
100055cc:	d8c02015 	stw	r3,128(sp)
100055d0:	dc401f15 	stw	r17,124(sp)
100055d4:	008001c4 	movi	r2,7
100055d8:	14400e16 	blt	r2,r17,10005614 <___vfprintf_internal_r+0x11e4>
100055dc:	b2000204 	addi	r8,r22,8
100055e0:	003e1806 	br	10004e44 <__alt_data_end+0xf8004e44>
100055e4:	01040074 	movhi	r4,4097
100055e8:	21076984 	addi	r4,r4,7590
100055ec:	d9002c15 	stw	r4,176(sp)
100055f0:	d9002c17 	ldw	r4,176(sp)
100055f4:	1c07883a 	add	r3,r3,r16
100055f8:	44000115 	stw	r16,4(r8)
100055fc:	41000015 	stw	r4,0(r8)
10005600:	10800044 	addi	r2,r2,1
10005604:	d8c02015 	stw	r3,128(sp)
10005608:	d8801f15 	stw	r2,124(sp)
1000560c:	010001c4 	movi	r4,7
10005610:	20be0b0e 	bge	r4,r2,10004e40 <__alt_data_end+0xf8004e40>
10005614:	d9002d17 	ldw	r4,180(sp)
10005618:	d9801e04 	addi	r6,sp,120
1000561c:	b80b883a 	mov	r5,r23
10005620:	000a49c0 	call	1000a49c <__sprint_r>
10005624:	103c861e 	bne	r2,zero,10004840 <__alt_data_end+0xf8004840>
10005628:	d8c02017 	ldw	r3,128(sp)
1000562c:	da000404 	addi	r8,sp,16
10005630:	003e0406 	br	10004e44 <__alt_data_end+0xf8004e44>
10005634:	d9002d17 	ldw	r4,180(sp)
10005638:	d9801e04 	addi	r6,sp,120
1000563c:	b80b883a 	mov	r5,r23
10005640:	000a49c0 	call	1000a49c <__sprint_r>
10005644:	103e3b26 	beq	r2,zero,10004f34 <__alt_data_end+0xf8004f34>
10005648:	003c7d06 	br	10004840 <__alt_data_end+0xf8004840>
1000564c:	d9002d17 	ldw	r4,180(sp)
10005650:	d9801e04 	addi	r6,sp,120
10005654:	b80b883a 	mov	r5,r23
10005658:	000a49c0 	call	1000a49c <__sprint_r>
1000565c:	103c781e 	bne	r2,zero,10004840 <__alt_data_end+0xf8004840>
10005660:	d8c02017 	ldw	r3,128(sp)
10005664:	da000404 	addi	r8,sp,16
10005668:	003de906 	br	10004e10 <__alt_data_end+0xf8004e10>
1000566c:	d9002d17 	ldw	r4,180(sp)
10005670:	d9801e04 	addi	r6,sp,120
10005674:	b80b883a 	mov	r5,r23
10005678:	000a49c0 	call	1000a49c <__sprint_r>
1000567c:	103c701e 	bne	r2,zero,10004840 <__alt_data_end+0xf8004840>
10005680:	d8c02017 	ldw	r3,128(sp)
10005684:	da000404 	addi	r8,sp,16
10005688:	003d9b06 	br	10004cf8 <__alt_data_end+0xf8004cf8>
1000568c:	d9002d17 	ldw	r4,180(sp)
10005690:	d9801e04 	addi	r6,sp,120
10005694:	b80b883a 	mov	r5,r23
10005698:	000a49c0 	call	1000a49c <__sprint_r>
1000569c:	103c681e 	bne	r2,zero,10004840 <__alt_data_end+0xf8004840>
100056a0:	d8c02017 	ldw	r3,128(sp)
100056a4:	da000404 	addi	r8,sp,16
100056a8:	003da106 	br	10004d30 <__alt_data_end+0xf8004d30>
100056ac:	d9402a17 	ldw	r5,168(sp)
100056b0:	d8002785 	stb	zero,158(sp)
100056b4:	283f0616 	blt	r5,zero,100052d0 <__alt_data_end+0xf80052d0>
100056b8:	00ffdfc4 	movi	r3,-129
100056bc:	9d84b03a 	or	r2,r19,r22
100056c0:	90e4703a 	and	r18,r18,r3
100056c4:	103c3b26 	beq	r2,zero,100047b4 <__alt_data_end+0xf80047b4>
100056c8:	0039883a 	mov	fp,zero
100056cc:	003e5806 	br	10005030 <__alt_data_end+0xf8005030>
100056d0:	9080040c 	andi	r2,r18,16
100056d4:	1001b326 	beq	r2,zero,10005da4 <___vfprintf_internal_r+0x1974>
100056d8:	d8c02e17 	ldw	r3,184(sp)
100056dc:	d9002a17 	ldw	r4,168(sp)
100056e0:	d8002785 	stb	zero,158(sp)
100056e4:	18800104 	addi	r2,r3,4
100056e8:	1cc00017 	ldw	r19,0(r3)
100056ec:	002d883a 	mov	r22,zero
100056f0:	2001b516 	blt	r4,zero,10005dc8 <___vfprintf_internal_r+0x1998>
100056f4:	00ffdfc4 	movi	r3,-129
100056f8:	d8802e15 	stw	r2,184(sp)
100056fc:	90e4703a 	and	r18,r18,r3
10005700:	983d0526 	beq	r19,zero,10004b18 <__alt_data_end+0xf8004b18>
10005704:	0039883a 	mov	fp,zero
10005708:	003d0806 	br	10004b2c <__alt_data_end+0xf8004b2c>
1000570c:	dc402617 	ldw	r17,152(sp)
10005710:	0441d30e 	bge	zero,r17,10005e60 <___vfprintf_internal_r+0x1a30>
10005714:	dc403217 	ldw	r17,200(sp)
10005718:	d8803317 	ldw	r2,204(sp)
1000571c:	1440010e 	bge	r2,r17,10005724 <___vfprintf_internal_r+0x12f4>
10005720:	1023883a 	mov	r17,r2
10005724:	04400a0e 	bge	zero,r17,10005750 <___vfprintf_internal_r+0x1320>
10005728:	d8801f17 	ldw	r2,124(sp)
1000572c:	1c47883a 	add	r3,r3,r17
10005730:	44000015 	stw	r16,0(r8)
10005734:	10800044 	addi	r2,r2,1
10005738:	44400115 	stw	r17,4(r8)
1000573c:	d8c02015 	stw	r3,128(sp)
10005740:	d8801f15 	stw	r2,124(sp)
10005744:	010001c4 	movi	r4,7
10005748:	20826516 	blt	r4,r2,100060e0 <___vfprintf_internal_r+0x1cb0>
1000574c:	42000204 	addi	r8,r8,8
10005750:	88026116 	blt	r17,zero,100060d8 <___vfprintf_internal_r+0x1ca8>
10005754:	d9003217 	ldw	r4,200(sp)
10005758:	2463c83a 	sub	r17,r4,r17
1000575c:	04407b0e 	bge	zero,r17,1000594c <___vfprintf_internal_r+0x151c>
10005760:	05800404 	movi	r22,16
10005764:	d8801f17 	ldw	r2,124(sp)
10005768:	b4419d0e 	bge	r22,r17,10005de0 <___vfprintf_internal_r+0x19b0>
1000576c:	01040074 	movhi	r4,4097
10005770:	21076984 	addi	r4,r4,7590
10005774:	d9002c15 	stw	r4,176(sp)
10005778:	070001c4 	movi	fp,7
1000577c:	dcc02d17 	ldw	r19,180(sp)
10005780:	00000306 	br	10005790 <___vfprintf_internal_r+0x1360>
10005784:	42000204 	addi	r8,r8,8
10005788:	8c7ffc04 	addi	r17,r17,-16
1000578c:	b441970e 	bge	r22,r17,10005dec <___vfprintf_internal_r+0x19bc>
10005790:	18c00404 	addi	r3,r3,16
10005794:	10800044 	addi	r2,r2,1
10005798:	45000015 	stw	r20,0(r8)
1000579c:	45800115 	stw	r22,4(r8)
100057a0:	d8c02015 	stw	r3,128(sp)
100057a4:	d8801f15 	stw	r2,124(sp)
100057a8:	e0bff60e 	bge	fp,r2,10005784 <__alt_data_end+0xf8005784>
100057ac:	d9801e04 	addi	r6,sp,120
100057b0:	b80b883a 	mov	r5,r23
100057b4:	9809883a 	mov	r4,r19
100057b8:	000a49c0 	call	1000a49c <__sprint_r>
100057bc:	103c201e 	bne	r2,zero,10004840 <__alt_data_end+0xf8004840>
100057c0:	d8c02017 	ldw	r3,128(sp)
100057c4:	d8801f17 	ldw	r2,124(sp)
100057c8:	da000404 	addi	r8,sp,16
100057cc:	003fee06 	br	10005788 <__alt_data_end+0xf8005788>
100057d0:	d9002d17 	ldw	r4,180(sp)
100057d4:	d9801e04 	addi	r6,sp,120
100057d8:	b80b883a 	mov	r5,r23
100057dc:	000a49c0 	call	1000a49c <__sprint_r>
100057e0:	103c171e 	bne	r2,zero,10004840 <__alt_data_end+0xf8004840>
100057e4:	d8c02017 	ldw	r3,128(sp)
100057e8:	df002787 	ldb	fp,158(sp)
100057ec:	da000404 	addi	r8,sp,16
100057f0:	003d3406 	br	10004cc4 <__alt_data_end+0xf8004cc4>
100057f4:	9080040c 	andi	r2,r18,16
100057f8:	10016126 	beq	r2,zero,10005d80 <___vfprintf_internal_r+0x1950>
100057fc:	d9402e17 	ldw	r5,184(sp)
10005800:	2cc00017 	ldw	r19,0(r5)
10005804:	29400104 	addi	r5,r5,4
10005808:	d9402e15 	stw	r5,184(sp)
1000580c:	982dd7fa 	srai	r22,r19,31
10005810:	b005883a 	mov	r2,r22
10005814:	003c5a06 	br	10004980 <__alt_data_end+0xf8004980>
10005818:	9080040c 	andi	r2,r18,16
1000581c:	10003526 	beq	r2,zero,100058f4 <___vfprintf_internal_r+0x14c4>
10005820:	d8c02e17 	ldw	r3,184(sp)
10005824:	d9002a17 	ldw	r4,168(sp)
10005828:	d8002785 	stb	zero,158(sp)
1000582c:	18800104 	addi	r2,r3,4
10005830:	1cc00017 	ldw	r19,0(r3)
10005834:	002d883a 	mov	r22,zero
10005838:	20003716 	blt	r4,zero,10005918 <___vfprintf_internal_r+0x14e8>
1000583c:	00ffdfc4 	movi	r3,-129
10005840:	d8802e15 	stw	r2,184(sp)
10005844:	90e4703a 	and	r18,r18,r3
10005848:	0039883a 	mov	fp,zero
1000584c:	983dd426 	beq	r19,zero,10004fa0 <__alt_data_end+0xf8004fa0>
10005850:	00800244 	movi	r2,9
10005854:	14fc5336 	bltu	r2,r19,100049a4 <__alt_data_end+0xf80049a4>
10005858:	d8c02817 	ldw	r3,160(sp)
1000585c:	dc001dc4 	addi	r16,sp,119
10005860:	9cc00c04 	addi	r19,r19,48
10005864:	1c07c83a 	sub	r3,r3,r16
10005868:	dcc01dc5 	stb	r19,119(sp)
1000586c:	d8c02b15 	stw	r3,172(sp)
10005870:	003cc606 	br	10004b8c <__alt_data_end+0xf8004b8c>
10005874:	d8803317 	ldw	r2,204(sp)
10005878:	143fffc4 	addi	r16,r2,-1
1000587c:	043f4d0e 	bge	zero,r16,100055b4 <__alt_data_end+0xf80055b4>
10005880:	07000404 	movi	fp,16
10005884:	e400810e 	bge	fp,r16,10005a8c <___vfprintf_internal_r+0x165c>
10005888:	01440074 	movhi	r5,4097
1000588c:	29476984 	addi	r5,r5,7590
10005890:	d9402c15 	stw	r5,176(sp)
10005894:	01c001c4 	movi	r7,7
10005898:	dcc02d17 	ldw	r19,180(sp)
1000589c:	00000306 	br	100058ac <___vfprintf_internal_r+0x147c>
100058a0:	b5800204 	addi	r22,r22,8
100058a4:	843ffc04 	addi	r16,r16,-16
100058a8:	e4007b0e 	bge	fp,r16,10005a98 <___vfprintf_internal_r+0x1668>
100058ac:	18c00404 	addi	r3,r3,16
100058b0:	8c400044 	addi	r17,r17,1
100058b4:	b5000015 	stw	r20,0(r22)
100058b8:	b7000115 	stw	fp,4(r22)
100058bc:	d8c02015 	stw	r3,128(sp)
100058c0:	dc401f15 	stw	r17,124(sp)
100058c4:	3c7ff60e 	bge	r7,r17,100058a0 <__alt_data_end+0xf80058a0>
100058c8:	d9801e04 	addi	r6,sp,120
100058cc:	b80b883a 	mov	r5,r23
100058d0:	9809883a 	mov	r4,r19
100058d4:	d9c03c15 	stw	r7,240(sp)
100058d8:	000a49c0 	call	1000a49c <__sprint_r>
100058dc:	d9c03c17 	ldw	r7,240(sp)
100058e0:	103bd71e 	bne	r2,zero,10004840 <__alt_data_end+0xf8004840>
100058e4:	d8c02017 	ldw	r3,128(sp)
100058e8:	dc401f17 	ldw	r17,124(sp)
100058ec:	dd800404 	addi	r22,sp,16
100058f0:	003fec06 	br	100058a4 <__alt_data_end+0xf80058a4>
100058f4:	9080100c 	andi	r2,r18,64
100058f8:	d8002785 	stb	zero,158(sp)
100058fc:	10010e26 	beq	r2,zero,10005d38 <___vfprintf_internal_r+0x1908>
10005900:	d9402e17 	ldw	r5,184(sp)
10005904:	d8c02a17 	ldw	r3,168(sp)
10005908:	002d883a 	mov	r22,zero
1000590c:	28800104 	addi	r2,r5,4
10005910:	2cc0000b 	ldhu	r19,0(r5)
10005914:	183fc90e 	bge	r3,zero,1000583c <__alt_data_end+0xf800583c>
10005918:	d8802e15 	stw	r2,184(sp)
1000591c:	0039883a 	mov	fp,zero
10005920:	9d84b03a 	or	r2,r19,r22
10005924:	103c1e1e 	bne	r2,zero,100049a0 <__alt_data_end+0xf80049a0>
10005928:	00800044 	movi	r2,1
1000592c:	003e6c06 	br	100052e0 <__alt_data_end+0xf80052e0>
10005930:	d9002d17 	ldw	r4,180(sp)
10005934:	d9801e04 	addi	r6,sp,120
10005938:	b80b883a 	mov	r5,r23
1000593c:	000a49c0 	call	1000a49c <__sprint_r>
10005940:	103bbf1e 	bne	r2,zero,10004840 <__alt_data_end+0xf8004840>
10005944:	d8c02017 	ldw	r3,128(sp)
10005948:	da000404 	addi	r8,sp,16
1000594c:	d9003217 	ldw	r4,200(sp)
10005950:	d8802617 	ldw	r2,152(sp)
10005954:	d9403317 	ldw	r5,204(sp)
10005958:	8123883a 	add	r17,r16,r4
1000595c:	11400216 	blt	r2,r5,10005968 <___vfprintf_internal_r+0x1538>
10005960:	9100004c 	andi	r4,r18,1
10005964:	20000d26 	beq	r4,zero,1000599c <___vfprintf_internal_r+0x156c>
10005968:	d9003717 	ldw	r4,220(sp)
1000596c:	d9403417 	ldw	r5,208(sp)
10005970:	1907883a 	add	r3,r3,r4
10005974:	d9001f17 	ldw	r4,124(sp)
10005978:	41400015 	stw	r5,0(r8)
1000597c:	d9403717 	ldw	r5,220(sp)
10005980:	21000044 	addi	r4,r4,1
10005984:	d8c02015 	stw	r3,128(sp)
10005988:	41400115 	stw	r5,4(r8)
1000598c:	d9001f15 	stw	r4,124(sp)
10005990:	014001c4 	movi	r5,7
10005994:	2901e816 	blt	r5,r4,10006138 <___vfprintf_internal_r+0x1d08>
10005998:	42000204 	addi	r8,r8,8
1000599c:	d9003317 	ldw	r4,204(sp)
100059a0:	8121883a 	add	r16,r16,r4
100059a4:	2085c83a 	sub	r2,r4,r2
100059a8:	8461c83a 	sub	r16,r16,r17
100059ac:	1400010e 	bge	r2,r16,100059b4 <___vfprintf_internal_r+0x1584>
100059b0:	1021883a 	mov	r16,r2
100059b4:	04000a0e 	bge	zero,r16,100059e0 <___vfprintf_internal_r+0x15b0>
100059b8:	d9001f17 	ldw	r4,124(sp)
100059bc:	1c07883a 	add	r3,r3,r16
100059c0:	44400015 	stw	r17,0(r8)
100059c4:	21000044 	addi	r4,r4,1
100059c8:	44000115 	stw	r16,4(r8)
100059cc:	d8c02015 	stw	r3,128(sp)
100059d0:	d9001f15 	stw	r4,124(sp)
100059d4:	014001c4 	movi	r5,7
100059d8:	2901fb16 	blt	r5,r4,100061c8 <___vfprintf_internal_r+0x1d98>
100059dc:	42000204 	addi	r8,r8,8
100059e0:	8001f716 	blt	r16,zero,100061c0 <___vfprintf_internal_r+0x1d90>
100059e4:	1421c83a 	sub	r16,r2,r16
100059e8:	043d160e 	bge	zero,r16,10004e44 <__alt_data_end+0xf8004e44>
100059ec:	04400404 	movi	r17,16
100059f0:	d8801f17 	ldw	r2,124(sp)
100059f4:	8c3efb0e 	bge	r17,r16,100055e4 <__alt_data_end+0xf80055e4>
100059f8:	01440074 	movhi	r5,4097
100059fc:	29476984 	addi	r5,r5,7590
10005a00:	d9402c15 	stw	r5,176(sp)
10005a04:	058001c4 	movi	r22,7
10005a08:	dcc02d17 	ldw	r19,180(sp)
10005a0c:	00000306 	br	10005a1c <___vfprintf_internal_r+0x15ec>
10005a10:	42000204 	addi	r8,r8,8
10005a14:	843ffc04 	addi	r16,r16,-16
10005a18:	8c3ef50e 	bge	r17,r16,100055f0 <__alt_data_end+0xf80055f0>
10005a1c:	18c00404 	addi	r3,r3,16
10005a20:	10800044 	addi	r2,r2,1
10005a24:	45000015 	stw	r20,0(r8)
10005a28:	44400115 	stw	r17,4(r8)
10005a2c:	d8c02015 	stw	r3,128(sp)
10005a30:	d8801f15 	stw	r2,124(sp)
10005a34:	b0bff60e 	bge	r22,r2,10005a10 <__alt_data_end+0xf8005a10>
10005a38:	d9801e04 	addi	r6,sp,120
10005a3c:	b80b883a 	mov	r5,r23
10005a40:	9809883a 	mov	r4,r19
10005a44:	000a49c0 	call	1000a49c <__sprint_r>
10005a48:	103b7d1e 	bne	r2,zero,10004840 <__alt_data_end+0xf8004840>
10005a4c:	d8c02017 	ldw	r3,128(sp)
10005a50:	d8801f17 	ldw	r2,124(sp)
10005a54:	da000404 	addi	r8,sp,16
10005a58:	003fee06 	br	10005a14 <__alt_data_end+0xf8005a14>
10005a5c:	9088703a 	and	r4,r18,r2
10005a60:	203eab1e 	bne	r4,zero,10005510 <__alt_data_end+0xf8005510>
10005a64:	dc401f17 	ldw	r17,124(sp)
10005a68:	40800115 	stw	r2,4(r8)
10005a6c:	44000015 	stw	r16,0(r8)
10005a70:	8c400044 	addi	r17,r17,1
10005a74:	d8c02015 	stw	r3,128(sp)
10005a78:	dc401f15 	stw	r17,124(sp)
10005a7c:	008001c4 	movi	r2,7
10005a80:	14400e16 	blt	r2,r17,10005abc <___vfprintf_internal_r+0x168c>
10005a84:	45800204 	addi	r22,r8,8
10005a88:	003eca06 	br	100055b4 <__alt_data_end+0xf80055b4>
10005a8c:	01040074 	movhi	r4,4097
10005a90:	21076984 	addi	r4,r4,7590
10005a94:	d9002c15 	stw	r4,176(sp)
10005a98:	d8802c17 	ldw	r2,176(sp)
10005a9c:	1c07883a 	add	r3,r3,r16
10005aa0:	8c400044 	addi	r17,r17,1
10005aa4:	b0800015 	stw	r2,0(r22)
10005aa8:	b4000115 	stw	r16,4(r22)
10005aac:	d8c02015 	stw	r3,128(sp)
10005ab0:	dc401f15 	stw	r17,124(sp)
10005ab4:	008001c4 	movi	r2,7
10005ab8:	147ebd0e 	bge	r2,r17,100055b0 <__alt_data_end+0xf80055b0>
10005abc:	d9002d17 	ldw	r4,180(sp)
10005ac0:	d9801e04 	addi	r6,sp,120
10005ac4:	b80b883a 	mov	r5,r23
10005ac8:	000a49c0 	call	1000a49c <__sprint_r>
10005acc:	103b5c1e 	bne	r2,zero,10004840 <__alt_data_end+0xf8004840>
10005ad0:	d8c02017 	ldw	r3,128(sp)
10005ad4:	dc401f17 	ldw	r17,124(sp)
10005ad8:	dd800404 	addi	r22,sp,16
10005adc:	003eb506 	br	100055b4 <__alt_data_end+0xf80055b4>
10005ae0:	d9002d17 	ldw	r4,180(sp)
10005ae4:	d9801e04 	addi	r6,sp,120
10005ae8:	b80b883a 	mov	r5,r23
10005aec:	000a49c0 	call	1000a49c <__sprint_r>
10005af0:	103b531e 	bne	r2,zero,10004840 <__alt_data_end+0xf8004840>
10005af4:	d8c02017 	ldw	r3,128(sp)
10005af8:	dc401f17 	ldw	r17,124(sp)
10005afc:	da000404 	addi	r8,sp,16
10005b00:	003e8d06 	br	10005538 <__alt_data_end+0xf8005538>
10005b04:	d9002d17 	ldw	r4,180(sp)
10005b08:	d9801e04 	addi	r6,sp,120
10005b0c:	b80b883a 	mov	r5,r23
10005b10:	000a49c0 	call	1000a49c <__sprint_r>
10005b14:	103b4a1e 	bne	r2,zero,10004840 <__alt_data_end+0xf8004840>
10005b18:	d8c02017 	ldw	r3,128(sp)
10005b1c:	dc401f17 	ldw	r17,124(sp)
10005b20:	dd800404 	addi	r22,sp,16
10005b24:	003e8f06 	br	10005564 <__alt_data_end+0xf8005564>
10005b28:	0027883a 	mov	r19,zero
10005b2c:	003f4a06 	br	10005858 <__alt_data_end+0xf8005858>
10005b30:	d9002d17 	ldw	r4,180(sp)
10005b34:	d9801e04 	addi	r6,sp,120
10005b38:	b80b883a 	mov	r5,r23
10005b3c:	000a49c0 	call	1000a49c <__sprint_r>
10005b40:	103b3f1e 	bne	r2,zero,10004840 <__alt_data_end+0xf8004840>
10005b44:	d8c02017 	ldw	r3,128(sp)
10005b48:	da000404 	addi	r8,sp,16
10005b4c:	003c7b06 	br	10004d3c <__alt_data_end+0xf8004d3c>
10005b50:	d9402a17 	ldw	r5,168(sp)
10005b54:	04e7c83a 	sub	r19,zero,r19
10005b58:	07000b44 	movi	fp,45
10005b5c:	9804c03a 	cmpne	r2,r19,zero
10005b60:	05adc83a 	sub	r22,zero,r22
10005b64:	df002785 	stb	fp,158(sp)
10005b68:	b0adc83a 	sub	r22,r22,r2
10005b6c:	28017b16 	blt	r5,zero,1000615c <___vfprintf_internal_r+0x1d2c>
10005b70:	00bfdfc4 	movi	r2,-129
10005b74:	90a4703a 	and	r18,r18,r2
10005b78:	003b8906 	br	100049a0 <__alt_data_end+0xf80049a0>
10005b7c:	d9003617 	ldw	r4,216(sp)
10005b80:	d9403817 	ldw	r5,224(sp)
10005b84:	da003d15 	stw	r8,244(sp)
10005b88:	0009f4c0 	call	10009f4c <__fpclassifyd>
10005b8c:	da003d17 	ldw	r8,244(sp)
10005b90:	1000f026 	beq	r2,zero,10005f54 <___vfprintf_internal_r+0x1b24>
10005b94:	d9002a17 	ldw	r4,168(sp)
10005b98:	05bff7c4 	movi	r22,-33
10005b9c:	00bfffc4 	movi	r2,-1
10005ba0:	8dac703a 	and	r22,r17,r22
10005ba4:	20820026 	beq	r4,r2,100063a8 <___vfprintf_internal_r+0x1f78>
10005ba8:	008011c4 	movi	r2,71
10005bac:	b081f726 	beq	r22,r2,1000638c <___vfprintf_internal_r+0x1f5c>
10005bb0:	d9003817 	ldw	r4,224(sp)
10005bb4:	90c04014 	ori	r3,r18,256
10005bb8:	d8c02c15 	stw	r3,176(sp)
10005bbc:	20021516 	blt	r4,zero,10006414 <___vfprintf_internal_r+0x1fe4>
10005bc0:	dcc03817 	ldw	r19,224(sp)
10005bc4:	d8002905 	stb	zero,164(sp)
10005bc8:	00801984 	movi	r2,102
10005bcc:	8881f926 	beq	r17,r2,100063b4 <___vfprintf_internal_r+0x1f84>
10005bd0:	00801184 	movi	r2,70
10005bd4:	88821c26 	beq	r17,r2,10006448 <___vfprintf_internal_r+0x2018>
10005bd8:	00801144 	movi	r2,69
10005bdc:	b081ef26 	beq	r22,r2,1000639c <___vfprintf_internal_r+0x1f6c>
10005be0:	d8c02a17 	ldw	r3,168(sp)
10005be4:	d8802104 	addi	r2,sp,132
10005be8:	d8800315 	stw	r2,12(sp)
10005bec:	d9403617 	ldw	r5,216(sp)
10005bf0:	d8802504 	addi	r2,sp,148
10005bf4:	d9002d17 	ldw	r4,180(sp)
10005bf8:	d8800215 	stw	r2,8(sp)
10005bfc:	d8802604 	addi	r2,sp,152
10005c00:	d8c00015 	stw	r3,0(sp)
10005c04:	d8800115 	stw	r2,4(sp)
10005c08:	01c00084 	movi	r7,2
10005c0c:	980d883a 	mov	r6,r19
10005c10:	d8c03c15 	stw	r3,240(sp)
10005c14:	da003d15 	stw	r8,244(sp)
10005c18:	0006dac0 	call	10006dac <_dtoa_r>
10005c1c:	1021883a 	mov	r16,r2
10005c20:	008019c4 	movi	r2,103
10005c24:	d8c03c17 	ldw	r3,240(sp)
10005c28:	da003d17 	ldw	r8,244(sp)
10005c2c:	88817126 	beq	r17,r2,100061f4 <___vfprintf_internal_r+0x1dc4>
10005c30:	008011c4 	movi	r2,71
10005c34:	88829126 	beq	r17,r2,1000667c <___vfprintf_internal_r+0x224c>
10005c38:	80f9883a 	add	fp,r16,r3
10005c3c:	d9003617 	ldw	r4,216(sp)
10005c40:	000d883a 	mov	r6,zero
10005c44:	000f883a 	mov	r7,zero
10005c48:	980b883a 	mov	r5,r19
10005c4c:	da003d15 	stw	r8,244(sp)
10005c50:	000def80 	call	1000def8 <__eqdf2>
10005c54:	da003d17 	ldw	r8,244(sp)
10005c58:	10018d26 	beq	r2,zero,10006290 <___vfprintf_internal_r+0x1e60>
10005c5c:	d8802117 	ldw	r2,132(sp)
10005c60:	1700062e 	bgeu	r2,fp,10005c7c <___vfprintf_internal_r+0x184c>
10005c64:	01000c04 	movi	r4,48
10005c68:	10c00044 	addi	r3,r2,1
10005c6c:	d8c02115 	stw	r3,132(sp)
10005c70:	11000005 	stb	r4,0(r2)
10005c74:	d8802117 	ldw	r2,132(sp)
10005c78:	173ffb36 	bltu	r2,fp,10005c68 <__alt_data_end+0xf8005c68>
10005c7c:	1405c83a 	sub	r2,r2,r16
10005c80:	d8803315 	stw	r2,204(sp)
10005c84:	008011c4 	movi	r2,71
10005c88:	b0817626 	beq	r22,r2,10006264 <___vfprintf_internal_r+0x1e34>
10005c8c:	00801944 	movi	r2,101
10005c90:	1442800e 	bge	r2,r17,10006694 <___vfprintf_internal_r+0x2264>
10005c94:	d8c02617 	ldw	r3,152(sp)
10005c98:	00801984 	movi	r2,102
10005c9c:	d8c03215 	stw	r3,200(sp)
10005ca0:	8881fe26 	beq	r17,r2,1000649c <___vfprintf_internal_r+0x206c>
10005ca4:	d8c03217 	ldw	r3,200(sp)
10005ca8:	d9003317 	ldw	r4,204(sp)
10005cac:	1901dd16 	blt	r3,r4,10006424 <___vfprintf_internal_r+0x1ff4>
10005cb0:	9480004c 	andi	r18,r18,1
10005cb4:	90022b1e 	bne	r18,zero,10006564 <___vfprintf_internal_r+0x2134>
10005cb8:	1805883a 	mov	r2,r3
10005cbc:	18028316 	blt	r3,zero,100066cc <___vfprintf_internal_r+0x229c>
10005cc0:	d8c03217 	ldw	r3,200(sp)
10005cc4:	044019c4 	movi	r17,103
10005cc8:	d8c02b15 	stw	r3,172(sp)
10005ccc:	df002907 	ldb	fp,164(sp)
10005cd0:	e001531e 	bne	fp,zero,10006220 <___vfprintf_internal_r+0x1df0>
10005cd4:	df002783 	ldbu	fp,158(sp)
10005cd8:	d8802915 	stw	r2,164(sp)
10005cdc:	dc802c17 	ldw	r18,176(sp)
10005ce0:	d8002a15 	stw	zero,168(sp)
10005ce4:	003baf06 	br	10004ba4 <__alt_data_end+0xf8004ba4>
10005ce8:	d8c02e17 	ldw	r3,184(sp)
10005cec:	d9002e17 	ldw	r4,184(sp)
10005cf0:	d9402e17 	ldw	r5,184(sp)
10005cf4:	18c00017 	ldw	r3,0(r3)
10005cf8:	21000117 	ldw	r4,4(r4)
10005cfc:	29400204 	addi	r5,r5,8
10005d00:	d8c03615 	stw	r3,216(sp)
10005d04:	d9003815 	stw	r4,224(sp)
10005d08:	d9402e15 	stw	r5,184(sp)
10005d0c:	003b5006 	br	10004a50 <__alt_data_end+0xf8004a50>
10005d10:	ac400007 	ldb	r17,0(r21)
10005d14:	003a2806 	br	100045b8 <__alt_data_end+0xf80045b8>
10005d18:	9080100c 	andi	r2,r18,64
10005d1c:	1000a826 	beq	r2,zero,10005fc0 <___vfprintf_internal_r+0x1b90>
10005d20:	d8c02e17 	ldw	r3,184(sp)
10005d24:	002d883a 	mov	r22,zero
10005d28:	1cc0000b 	ldhu	r19,0(r3)
10005d2c:	18c00104 	addi	r3,r3,4
10005d30:	d8c02e15 	stw	r3,184(sp)
10005d34:	003caf06 	br	10004ff4 <__alt_data_end+0xf8004ff4>
10005d38:	d9002e17 	ldw	r4,184(sp)
10005d3c:	d9402a17 	ldw	r5,168(sp)
10005d40:	002d883a 	mov	r22,zero
10005d44:	20800104 	addi	r2,r4,4
10005d48:	24c00017 	ldw	r19,0(r4)
10005d4c:	283ebb0e 	bge	r5,zero,1000583c <__alt_data_end+0xf800583c>
10005d50:	003ef106 	br	10005918 <__alt_data_end+0xf8005918>
10005d54:	9080040c 	andi	r2,r18,16
10005d58:	1000921e 	bne	r2,zero,10005fa4 <___vfprintf_internal_r+0x1b74>
10005d5c:	9480100c 	andi	r18,r18,64
10005d60:	90013926 	beq	r18,zero,10006248 <___vfprintf_internal_r+0x1e18>
10005d64:	d9402e17 	ldw	r5,184(sp)
10005d68:	d8c02f17 	ldw	r3,188(sp)
10005d6c:	28800017 	ldw	r2,0(r5)
10005d70:	29400104 	addi	r5,r5,4
10005d74:	d9402e15 	stw	r5,184(sp)
10005d78:	10c0000d 	sth	r3,0(r2)
10005d7c:	0039e406 	br	10004510 <__alt_data_end+0xf8004510>
10005d80:	9080100c 	andi	r2,r18,64
10005d84:	10008026 	beq	r2,zero,10005f88 <___vfprintf_internal_r+0x1b58>
10005d88:	d8802e17 	ldw	r2,184(sp)
10005d8c:	14c0000f 	ldh	r19,0(r2)
10005d90:	10800104 	addi	r2,r2,4
10005d94:	d8802e15 	stw	r2,184(sp)
10005d98:	982dd7fa 	srai	r22,r19,31
10005d9c:	b005883a 	mov	r2,r22
10005da0:	003af706 	br	10004980 <__alt_data_end+0xf8004980>
10005da4:	9080100c 	andi	r2,r18,64
10005da8:	d8002785 	stb	zero,158(sp)
10005dac:	10008a1e 	bne	r2,zero,10005fd8 <___vfprintf_internal_r+0x1ba8>
10005db0:	d9002e17 	ldw	r4,184(sp)
10005db4:	d9402a17 	ldw	r5,168(sp)
10005db8:	002d883a 	mov	r22,zero
10005dbc:	20800104 	addi	r2,r4,4
10005dc0:	24c00017 	ldw	r19,0(r4)
10005dc4:	283e4b0e 	bge	r5,zero,100056f4 <__alt_data_end+0xf80056f4>
10005dc8:	9d86b03a 	or	r3,r19,r22
10005dcc:	d8802e15 	stw	r2,184(sp)
10005dd0:	183e4c1e 	bne	r3,zero,10005704 <__alt_data_end+0xf8005704>
10005dd4:	0039883a 	mov	fp,zero
10005dd8:	0005883a 	mov	r2,zero
10005ddc:	003d4006 	br	100052e0 <__alt_data_end+0xf80052e0>
10005de0:	01440074 	movhi	r5,4097
10005de4:	29476984 	addi	r5,r5,7590
10005de8:	d9402c15 	stw	r5,176(sp)
10005dec:	d9402c17 	ldw	r5,176(sp)
10005df0:	1c47883a 	add	r3,r3,r17
10005df4:	10800044 	addi	r2,r2,1
10005df8:	41400015 	stw	r5,0(r8)
10005dfc:	44400115 	stw	r17,4(r8)
10005e00:	d8c02015 	stw	r3,128(sp)
10005e04:	d8801f15 	stw	r2,124(sp)
10005e08:	010001c4 	movi	r4,7
10005e0c:	20bec816 	blt	r4,r2,10005930 <__alt_data_end+0xf8005930>
10005e10:	42000204 	addi	r8,r8,8
10005e14:	003ecd06 	br	1000594c <__alt_data_end+0xf800594c>
10005e18:	d9002a17 	ldw	r4,168(sp)
10005e1c:	d8002785 	stb	zero,158(sp)
10005e20:	203d2d16 	blt	r4,zero,100052d8 <__alt_data_end+0xf80052d8>
10005e24:	00bfdfc4 	movi	r2,-129
10005e28:	90a4703a 	and	r18,r18,r2
10005e2c:	003a6106 	br	100047b4 <__alt_data_end+0xf80047b4>
10005e30:	01040074 	movhi	r4,4097
10005e34:	21076984 	addi	r4,r4,7590
10005e38:	d9002c15 	stw	r4,176(sp)
10005e3c:	003bea06 	br	10004de8 <__alt_data_end+0xf8004de8>
10005e40:	d9002d17 	ldw	r4,180(sp)
10005e44:	d9801e04 	addi	r6,sp,120
10005e48:	b80b883a 	mov	r5,r23
10005e4c:	000a49c0 	call	1000a49c <__sprint_r>
10005e50:	103a7b1e 	bne	r2,zero,10004840 <__alt_data_end+0xf8004840>
10005e54:	d8c02017 	ldw	r3,128(sp)
10005e58:	da000404 	addi	r8,sp,16
10005e5c:	003d4106 	br	10005364 <__alt_data_end+0xf8005364>
10005e60:	d8801f17 	ldw	r2,124(sp)
10005e64:	01440074 	movhi	r5,4097
10005e68:	01000044 	movi	r4,1
10005e6c:	18c00044 	addi	r3,r3,1
10005e70:	10800044 	addi	r2,r2,1
10005e74:	29476904 	addi	r5,r5,7588
10005e78:	41000115 	stw	r4,4(r8)
10005e7c:	41400015 	stw	r5,0(r8)
10005e80:	d8c02015 	stw	r3,128(sp)
10005e84:	d8801f15 	stw	r2,124(sp)
10005e88:	010001c4 	movi	r4,7
10005e8c:	20805c16 	blt	r4,r2,10006000 <___vfprintf_internal_r+0x1bd0>
10005e90:	42000204 	addi	r8,r8,8
10005e94:	8800041e 	bne	r17,zero,10005ea8 <___vfprintf_internal_r+0x1a78>
10005e98:	d8803317 	ldw	r2,204(sp)
10005e9c:	1000021e 	bne	r2,zero,10005ea8 <___vfprintf_internal_r+0x1a78>
10005ea0:	9080004c 	andi	r2,r18,1
10005ea4:	103be726 	beq	r2,zero,10004e44 <__alt_data_end+0xf8004e44>
10005ea8:	d9003717 	ldw	r4,220(sp)
10005eac:	d8801f17 	ldw	r2,124(sp)
10005eb0:	d9403417 	ldw	r5,208(sp)
10005eb4:	20c7883a 	add	r3,r4,r3
10005eb8:	10800044 	addi	r2,r2,1
10005ebc:	41000115 	stw	r4,4(r8)
10005ec0:	41400015 	stw	r5,0(r8)
10005ec4:	d8c02015 	stw	r3,128(sp)
10005ec8:	d8801f15 	stw	r2,124(sp)
10005ecc:	010001c4 	movi	r4,7
10005ed0:	20812116 	blt	r4,r2,10006358 <___vfprintf_internal_r+0x1f28>
10005ed4:	42000204 	addi	r8,r8,8
10005ed8:	0463c83a 	sub	r17,zero,r17
10005edc:	0440730e 	bge	zero,r17,100060ac <___vfprintf_internal_r+0x1c7c>
10005ee0:	05800404 	movi	r22,16
10005ee4:	b440860e 	bge	r22,r17,10006100 <___vfprintf_internal_r+0x1cd0>
10005ee8:	01440074 	movhi	r5,4097
10005eec:	29476984 	addi	r5,r5,7590
10005ef0:	d9402c15 	stw	r5,176(sp)
10005ef4:	070001c4 	movi	fp,7
10005ef8:	dcc02d17 	ldw	r19,180(sp)
10005efc:	00000306 	br	10005f0c <___vfprintf_internal_r+0x1adc>
10005f00:	42000204 	addi	r8,r8,8
10005f04:	8c7ffc04 	addi	r17,r17,-16
10005f08:	b440800e 	bge	r22,r17,1000610c <___vfprintf_internal_r+0x1cdc>
10005f0c:	18c00404 	addi	r3,r3,16
10005f10:	10800044 	addi	r2,r2,1
10005f14:	45000015 	stw	r20,0(r8)
10005f18:	45800115 	stw	r22,4(r8)
10005f1c:	d8c02015 	stw	r3,128(sp)
10005f20:	d8801f15 	stw	r2,124(sp)
10005f24:	e0bff60e 	bge	fp,r2,10005f00 <__alt_data_end+0xf8005f00>
10005f28:	d9801e04 	addi	r6,sp,120
10005f2c:	b80b883a 	mov	r5,r23
10005f30:	9809883a 	mov	r4,r19
10005f34:	000a49c0 	call	1000a49c <__sprint_r>
10005f38:	103a411e 	bne	r2,zero,10004840 <__alt_data_end+0xf8004840>
10005f3c:	d8c02017 	ldw	r3,128(sp)
10005f40:	d8801f17 	ldw	r2,124(sp)
10005f44:	da000404 	addi	r8,sp,16
10005f48:	003fee06 	br	10005f04 <__alt_data_end+0xf8005f04>
10005f4c:	00bfffc4 	movi	r2,-1
10005f50:	003a3f06 	br	10004850 <__alt_data_end+0xf8004850>
10005f54:	008011c4 	movi	r2,71
10005f58:	1440b816 	blt	r2,r17,1000623c <___vfprintf_internal_r+0x1e0c>
10005f5c:	04040074 	movhi	r16,4097
10005f60:	84075b04 	addi	r16,r16,7532
10005f64:	00c000c4 	movi	r3,3
10005f68:	00bfdfc4 	movi	r2,-129
10005f6c:	d8c02915 	stw	r3,164(sp)
10005f70:	90a4703a 	and	r18,r18,r2
10005f74:	df002783 	ldbu	fp,158(sp)
10005f78:	d8c02b15 	stw	r3,172(sp)
10005f7c:	d8002a15 	stw	zero,168(sp)
10005f80:	d8003215 	stw	zero,200(sp)
10005f84:	003b0706 	br	10004ba4 <__alt_data_end+0xf8004ba4>
10005f88:	d8c02e17 	ldw	r3,184(sp)
10005f8c:	1cc00017 	ldw	r19,0(r3)
10005f90:	18c00104 	addi	r3,r3,4
10005f94:	d8c02e15 	stw	r3,184(sp)
10005f98:	982dd7fa 	srai	r22,r19,31
10005f9c:	b005883a 	mov	r2,r22
10005fa0:	003a7706 	br	10004980 <__alt_data_end+0xf8004980>
10005fa4:	d8c02e17 	ldw	r3,184(sp)
10005fa8:	d9002f17 	ldw	r4,188(sp)
10005fac:	18800017 	ldw	r2,0(r3)
10005fb0:	18c00104 	addi	r3,r3,4
10005fb4:	d8c02e15 	stw	r3,184(sp)
10005fb8:	11000015 	stw	r4,0(r2)
10005fbc:	00395406 	br	10004510 <__alt_data_end+0xf8004510>
10005fc0:	d9002e17 	ldw	r4,184(sp)
10005fc4:	002d883a 	mov	r22,zero
10005fc8:	24c00017 	ldw	r19,0(r4)
10005fcc:	21000104 	addi	r4,r4,4
10005fd0:	d9002e15 	stw	r4,184(sp)
10005fd4:	003c0706 	br	10004ff4 <__alt_data_end+0xf8004ff4>
10005fd8:	d9402e17 	ldw	r5,184(sp)
10005fdc:	d8c02a17 	ldw	r3,168(sp)
10005fe0:	002d883a 	mov	r22,zero
10005fe4:	28800104 	addi	r2,r5,4
10005fe8:	2cc0000b 	ldhu	r19,0(r5)
10005fec:	183dc10e 	bge	r3,zero,100056f4 <__alt_data_end+0xf80056f4>
10005ff0:	003f7506 	br	10005dc8 <__alt_data_end+0xf8005dc8>
10005ff4:	04040074 	movhi	r16,4097
10005ff8:	84075904 	addi	r16,r16,7524
10005ffc:	003aa706 	br	10004a9c <__alt_data_end+0xf8004a9c>
10006000:	d9002d17 	ldw	r4,180(sp)
10006004:	d9801e04 	addi	r6,sp,120
10006008:	b80b883a 	mov	r5,r23
1000600c:	000a49c0 	call	1000a49c <__sprint_r>
10006010:	103a0b1e 	bne	r2,zero,10004840 <__alt_data_end+0xf8004840>
10006014:	dc402617 	ldw	r17,152(sp)
10006018:	d8c02017 	ldw	r3,128(sp)
1000601c:	da000404 	addi	r8,sp,16
10006020:	003f9c06 	br	10005e94 <__alt_data_end+0xf8005e94>
10006024:	ac400043 	ldbu	r17,1(r21)
10006028:	84000814 	ori	r16,r16,32
1000602c:	ad400044 	addi	r21,r21,1
10006030:	8c403fcc 	andi	r17,r17,255
10006034:	8c40201c 	xori	r17,r17,128
10006038:	8c7fe004 	addi	r17,r17,-128
1000603c:	00395e06 	br	100045b8 <__alt_data_end+0xf80045b8>
10006040:	d8c02e15 	stw	r3,184(sp)
10006044:	0039883a 	mov	fp,zero
10006048:	003e3506 	br	10005920 <__alt_data_end+0xf8005920>
1000604c:	d9002d17 	ldw	r4,180(sp)
10006050:	d9801e04 	addi	r6,sp,120
10006054:	b80b883a 	mov	r5,r23
10006058:	000a49c0 	call	1000a49c <__sprint_r>
1000605c:	1039f81e 	bne	r2,zero,10004840 <__alt_data_end+0xf8004840>
10006060:	d8c02017 	ldw	r3,128(sp)
10006064:	da000404 	addi	r8,sp,16
10006068:	003cd006 	br	100053ac <__alt_data_end+0xf80053ac>
1000606c:	8009883a 	mov	r4,r16
10006070:	df003d15 	stw	fp,244(sp)
10006074:	00041000 	call	10004100 <strlen>
10006078:	d8802b15 	stw	r2,172(sp)
1000607c:	da003d17 	ldw	r8,244(sp)
10006080:	103c200e 	bge	r2,zero,10005104 <__alt_data_end+0xf8005104>
10006084:	0005883a 	mov	r2,zero
10006088:	003c1e06 	br	10005104 <__alt_data_end+0xf8005104>
1000608c:	d9002d17 	ldw	r4,180(sp)
10006090:	d9801e04 	addi	r6,sp,120
10006094:	b80b883a 	mov	r5,r23
10006098:	000a49c0 	call	1000a49c <__sprint_r>
1000609c:	1039e81e 	bne	r2,zero,10004840 <__alt_data_end+0xf8004840>
100060a0:	d8c02017 	ldw	r3,128(sp)
100060a4:	d8801f17 	ldw	r2,124(sp)
100060a8:	da000404 	addi	r8,sp,16
100060ac:	d9403317 	ldw	r5,204(sp)
100060b0:	10800044 	addi	r2,r2,1
100060b4:	44000015 	stw	r16,0(r8)
100060b8:	28c7883a 	add	r3,r5,r3
100060bc:	003b5b06 	br	10004e2c <__alt_data_end+0xf8004e2c>
100060c0:	01040074 	movhi	r4,4097
100060c4:	21076d84 	addi	r4,r4,7606
100060c8:	d9003515 	stw	r4,212(sp)
100060cc:	003af206 	br	10004c98 <__alt_data_end+0xf8004c98>
100060d0:	013fffc4 	movi	r4,-1
100060d4:	003a0806 	br	100048f8 <__alt_data_end+0xf80048f8>
100060d8:	0023883a 	mov	r17,zero
100060dc:	003d9d06 	br	10005754 <__alt_data_end+0xf8005754>
100060e0:	d9002d17 	ldw	r4,180(sp)
100060e4:	d9801e04 	addi	r6,sp,120
100060e8:	b80b883a 	mov	r5,r23
100060ec:	000a49c0 	call	1000a49c <__sprint_r>
100060f0:	1039d31e 	bne	r2,zero,10004840 <__alt_data_end+0xf8004840>
100060f4:	d8c02017 	ldw	r3,128(sp)
100060f8:	da000404 	addi	r8,sp,16
100060fc:	003d9406 	br	10005750 <__alt_data_end+0xf8005750>
10006100:	01040074 	movhi	r4,4097
10006104:	21076984 	addi	r4,r4,7590
10006108:	d9002c15 	stw	r4,176(sp)
1000610c:	d9002c17 	ldw	r4,176(sp)
10006110:	1c47883a 	add	r3,r3,r17
10006114:	10800044 	addi	r2,r2,1
10006118:	41000015 	stw	r4,0(r8)
1000611c:	44400115 	stw	r17,4(r8)
10006120:	d8c02015 	stw	r3,128(sp)
10006124:	d8801f15 	stw	r2,124(sp)
10006128:	010001c4 	movi	r4,7
1000612c:	20bfd716 	blt	r4,r2,1000608c <__alt_data_end+0xf800608c>
10006130:	42000204 	addi	r8,r8,8
10006134:	003fdd06 	br	100060ac <__alt_data_end+0xf80060ac>
10006138:	d9002d17 	ldw	r4,180(sp)
1000613c:	d9801e04 	addi	r6,sp,120
10006140:	b80b883a 	mov	r5,r23
10006144:	000a49c0 	call	1000a49c <__sprint_r>
10006148:	1039bd1e 	bne	r2,zero,10004840 <__alt_data_end+0xf8004840>
1000614c:	d8802617 	ldw	r2,152(sp)
10006150:	d8c02017 	ldw	r3,128(sp)
10006154:	da000404 	addi	r8,sp,16
10006158:	003e1006 	br	1000599c <__alt_data_end+0xf800599c>
1000615c:	00800044 	movi	r2,1
10006160:	10803fcc 	andi	r2,r2,255
10006164:	00c00044 	movi	r3,1
10006168:	10fa0d26 	beq	r2,r3,100049a0 <__alt_data_end+0xf80049a0>
1000616c:	00c00084 	movi	r3,2
10006170:	10fbaf26 	beq	r2,r3,10005030 <__alt_data_end+0xf8005030>
10006174:	003a6d06 	br	10004b2c <__alt_data_end+0xf8004b2c>
10006178:	01040074 	movhi	r4,4097
1000617c:	21076d84 	addi	r4,r4,7606
10006180:	d9003515 	stw	r4,212(sp)
10006184:	003b5406 	br	10004ed8 <__alt_data_end+0xf8004ed8>
10006188:	d8802a17 	ldw	r2,168(sp)
1000618c:	00c00184 	movi	r3,6
10006190:	1880012e 	bgeu	r3,r2,10006198 <___vfprintf_internal_r+0x1d68>
10006194:	1805883a 	mov	r2,r3
10006198:	d8802b15 	stw	r2,172(sp)
1000619c:	1000ef16 	blt	r2,zero,1000655c <___vfprintf_internal_r+0x212c>
100061a0:	04040074 	movhi	r16,4097
100061a4:	d8802915 	stw	r2,164(sp)
100061a8:	dcc02e15 	stw	r19,184(sp)
100061ac:	d8002a15 	stw	zero,168(sp)
100061b0:	d8003215 	stw	zero,200(sp)
100061b4:	84076704 	addi	r16,r16,7580
100061b8:	0039883a 	mov	fp,zero
100061bc:	003a8006 	br	10004bc0 <__alt_data_end+0xf8004bc0>
100061c0:	0021883a 	mov	r16,zero
100061c4:	003e0706 	br	100059e4 <__alt_data_end+0xf80059e4>
100061c8:	d9002d17 	ldw	r4,180(sp)
100061cc:	d9801e04 	addi	r6,sp,120
100061d0:	b80b883a 	mov	r5,r23
100061d4:	000a49c0 	call	1000a49c <__sprint_r>
100061d8:	1039991e 	bne	r2,zero,10004840 <__alt_data_end+0xf8004840>
100061dc:	d8802617 	ldw	r2,152(sp)
100061e0:	d9403317 	ldw	r5,204(sp)
100061e4:	d8c02017 	ldw	r3,128(sp)
100061e8:	da000404 	addi	r8,sp,16
100061ec:	2885c83a 	sub	r2,r5,r2
100061f0:	003dfb06 	br	100059e0 <__alt_data_end+0xf80059e0>
100061f4:	9080004c 	andi	r2,r18,1
100061f8:	103e8f1e 	bne	r2,zero,10005c38 <__alt_data_end+0xf8005c38>
100061fc:	d8802117 	ldw	r2,132(sp)
10006200:	003e9e06 	br	10005c7c <__alt_data_end+0xf8005c7c>
10006204:	1025883a 	mov	r18,r2
10006208:	0039883a 	mov	fp,zero
1000620c:	00800084 	movi	r2,2
10006210:	003fd306 	br	10006160 <__alt_data_end+0xf8006160>
10006214:	07000b44 	movi	fp,45
10006218:	df002785 	stb	fp,158(sp)
1000621c:	003a1b06 	br	10004a8c <__alt_data_end+0xf8004a8c>
10006220:	00c00b44 	movi	r3,45
10006224:	d8c02785 	stb	r3,158(sp)
10006228:	d8802915 	stw	r2,164(sp)
1000622c:	dc802c17 	ldw	r18,176(sp)
10006230:	d8002a15 	stw	zero,168(sp)
10006234:	07000b44 	movi	fp,45
10006238:	003a5e06 	br	10004bb4 <__alt_data_end+0xf8004bb4>
1000623c:	04040074 	movhi	r16,4097
10006240:	84075c04 	addi	r16,r16,7536
10006244:	003f4706 	br	10005f64 <__alt_data_end+0xf8005f64>
10006248:	d9002e17 	ldw	r4,184(sp)
1000624c:	d9402f17 	ldw	r5,188(sp)
10006250:	20800017 	ldw	r2,0(r4)
10006254:	21000104 	addi	r4,r4,4
10006258:	d9002e15 	stw	r4,184(sp)
1000625c:	11400015 	stw	r5,0(r2)
10006260:	0038ab06 	br	10004510 <__alt_data_end+0xf8004510>
10006264:	dd802617 	ldw	r22,152(sp)
10006268:	00bfff44 	movi	r2,-3
1000626c:	b0801c16 	blt	r22,r2,100062e0 <___vfprintf_internal_r+0x1eb0>
10006270:	d9402a17 	ldw	r5,168(sp)
10006274:	2d801a16 	blt	r5,r22,100062e0 <___vfprintf_internal_r+0x1eb0>
10006278:	dd803215 	stw	r22,200(sp)
1000627c:	003e8906 	br	10005ca4 <__alt_data_end+0xf8005ca4>
10006280:	01040074 	movhi	r4,4097
10006284:	21076984 	addi	r4,r4,7590
10006288:	d9002c15 	stw	r4,176(sp)
1000628c:	003c9106 	br	100054d4 <__alt_data_end+0xf80054d4>
10006290:	e005883a 	mov	r2,fp
10006294:	003e7906 	br	10005c7c <__alt_data_end+0xf8005c7c>
10006298:	d9002a17 	ldw	r4,168(sp)
1000629c:	df002783 	ldbu	fp,158(sp)
100062a0:	dcc02e15 	stw	r19,184(sp)
100062a4:	d9002915 	stw	r4,164(sp)
100062a8:	d9002b15 	stw	r4,172(sp)
100062ac:	d8002a15 	stw	zero,168(sp)
100062b0:	d8003215 	stw	zero,200(sp)
100062b4:	003a3b06 	br	10004ba4 <__alt_data_end+0xf8004ba4>
100062b8:	9080004c 	andi	r2,r18,1
100062bc:	0039883a 	mov	fp,zero
100062c0:	10000426 	beq	r2,zero,100062d4 <___vfprintf_internal_r+0x1ea4>
100062c4:	00800c04 	movi	r2,48
100062c8:	dc001dc4 	addi	r16,sp,119
100062cc:	d8801dc5 	stb	r2,119(sp)
100062d0:	003b6406 	br	10005064 <__alt_data_end+0xf8005064>
100062d4:	d8002b15 	stw	zero,172(sp)
100062d8:	dc001e04 	addi	r16,sp,120
100062dc:	003a2b06 	br	10004b8c <__alt_data_end+0xf8004b8c>
100062e0:	8c7fff84 	addi	r17,r17,-2
100062e4:	b5bfffc4 	addi	r22,r22,-1
100062e8:	dd802615 	stw	r22,152(sp)
100062ec:	dc4022c5 	stb	r17,139(sp)
100062f0:	b000bf16 	blt	r22,zero,100065f0 <___vfprintf_internal_r+0x21c0>
100062f4:	00800ac4 	movi	r2,43
100062f8:	d8802305 	stb	r2,140(sp)
100062fc:	00800244 	movi	r2,9
10006300:	15807016 	blt	r2,r22,100064c4 <___vfprintf_internal_r+0x2094>
10006304:	00800c04 	movi	r2,48
10006308:	b5800c04 	addi	r22,r22,48
1000630c:	d8802345 	stb	r2,141(sp)
10006310:	dd802385 	stb	r22,142(sp)
10006314:	d88023c4 	addi	r2,sp,143
10006318:	df0022c4 	addi	fp,sp,139
1000631c:	d8c03317 	ldw	r3,204(sp)
10006320:	1739c83a 	sub	fp,r2,fp
10006324:	d9003317 	ldw	r4,204(sp)
10006328:	e0c7883a 	add	r3,fp,r3
1000632c:	df003a15 	stw	fp,232(sp)
10006330:	d8c02b15 	stw	r3,172(sp)
10006334:	00800044 	movi	r2,1
10006338:	1100b30e 	bge	r2,r4,10006608 <___vfprintf_internal_r+0x21d8>
1000633c:	d8c02b17 	ldw	r3,172(sp)
10006340:	18c00044 	addi	r3,r3,1
10006344:	d8c02b15 	stw	r3,172(sp)
10006348:	1805883a 	mov	r2,r3
1000634c:	1800ac16 	blt	r3,zero,10006600 <___vfprintf_internal_r+0x21d0>
10006350:	d8003215 	stw	zero,200(sp)
10006354:	003e5d06 	br	10005ccc <__alt_data_end+0xf8005ccc>
10006358:	d9002d17 	ldw	r4,180(sp)
1000635c:	d9801e04 	addi	r6,sp,120
10006360:	b80b883a 	mov	r5,r23
10006364:	000a49c0 	call	1000a49c <__sprint_r>
10006368:	1039351e 	bne	r2,zero,10004840 <__alt_data_end+0xf8004840>
1000636c:	dc402617 	ldw	r17,152(sp)
10006370:	d8c02017 	ldw	r3,128(sp)
10006374:	d8801f17 	ldw	r2,124(sp)
10006378:	da000404 	addi	r8,sp,16
1000637c:	003ed606 	br	10005ed8 <__alt_data_end+0xf8005ed8>
10006380:	182b883a 	mov	r21,r3
10006384:	d8002a15 	stw	zero,168(sp)
10006388:	00388c06 	br	100045bc <__alt_data_end+0xf80045bc>
1000638c:	d8802a17 	ldw	r2,168(sp)
10006390:	103e071e 	bne	r2,zero,10005bb0 <__alt_data_end+0xf8005bb0>
10006394:	dc002a15 	stw	r16,168(sp)
10006398:	003e0506 	br	10005bb0 <__alt_data_end+0xf8005bb0>
1000639c:	d9002a17 	ldw	r4,168(sp)
100063a0:	20c00044 	addi	r3,r4,1
100063a4:	003e0f06 	br	10005be4 <__alt_data_end+0xf8005be4>
100063a8:	01400184 	movi	r5,6
100063ac:	d9402a15 	stw	r5,168(sp)
100063b0:	003dff06 	br	10005bb0 <__alt_data_end+0xf8005bb0>
100063b4:	d8802104 	addi	r2,sp,132
100063b8:	d8800315 	stw	r2,12(sp)
100063bc:	d8802504 	addi	r2,sp,148
100063c0:	d8800215 	stw	r2,8(sp)
100063c4:	d8802604 	addi	r2,sp,152
100063c8:	d8800115 	stw	r2,4(sp)
100063cc:	d8802a17 	ldw	r2,168(sp)
100063d0:	d9403617 	ldw	r5,216(sp)
100063d4:	d9002d17 	ldw	r4,180(sp)
100063d8:	d8800015 	stw	r2,0(sp)
100063dc:	01c000c4 	movi	r7,3
100063e0:	980d883a 	mov	r6,r19
100063e4:	da003d15 	stw	r8,244(sp)
100063e8:	0006dac0 	call	10006dac <_dtoa_r>
100063ec:	d8c02a17 	ldw	r3,168(sp)
100063f0:	da003d17 	ldw	r8,244(sp)
100063f4:	1021883a 	mov	r16,r2
100063f8:	10f9883a 	add	fp,r2,r3
100063fc:	81000007 	ldb	r4,0(r16)
10006400:	00800c04 	movi	r2,48
10006404:	20805e26 	beq	r4,r2,10006580 <___vfprintf_internal_r+0x2150>
10006408:	d8c02617 	ldw	r3,152(sp)
1000640c:	e0f9883a 	add	fp,fp,r3
10006410:	003e0a06 	br	10005c3c <__alt_data_end+0xf8005c3c>
10006414:	00c00b44 	movi	r3,45
10006418:	24e0003c 	xorhi	r19,r4,32768
1000641c:	d8c02905 	stb	r3,164(sp)
10006420:	003de906 	br	10005bc8 <__alt_data_end+0xf8005bc8>
10006424:	d8c03217 	ldw	r3,200(sp)
10006428:	00c07a0e 	bge	zero,r3,10006614 <___vfprintf_internal_r+0x21e4>
1000642c:	00800044 	movi	r2,1
10006430:	d9003317 	ldw	r4,204(sp)
10006434:	1105883a 	add	r2,r2,r4
10006438:	d8802b15 	stw	r2,172(sp)
1000643c:	10004e16 	blt	r2,zero,10006578 <___vfprintf_internal_r+0x2148>
10006440:	044019c4 	movi	r17,103
10006444:	003e2106 	br	10005ccc <__alt_data_end+0xf8005ccc>
10006448:	d9002a17 	ldw	r4,168(sp)
1000644c:	d8802104 	addi	r2,sp,132
10006450:	d8800315 	stw	r2,12(sp)
10006454:	d9000015 	stw	r4,0(sp)
10006458:	d8802504 	addi	r2,sp,148
1000645c:	d9403617 	ldw	r5,216(sp)
10006460:	d9002d17 	ldw	r4,180(sp)
10006464:	d8800215 	stw	r2,8(sp)
10006468:	d8802604 	addi	r2,sp,152
1000646c:	d8800115 	stw	r2,4(sp)
10006470:	01c000c4 	movi	r7,3
10006474:	980d883a 	mov	r6,r19
10006478:	da003d15 	stw	r8,244(sp)
1000647c:	0006dac0 	call	10006dac <_dtoa_r>
10006480:	d8c02a17 	ldw	r3,168(sp)
10006484:	da003d17 	ldw	r8,244(sp)
10006488:	1021883a 	mov	r16,r2
1000648c:	00801184 	movi	r2,70
10006490:	80f9883a 	add	fp,r16,r3
10006494:	88bfd926 	beq	r17,r2,100063fc <__alt_data_end+0xf80063fc>
10006498:	003de806 	br	10005c3c <__alt_data_end+0xf8005c3c>
1000649c:	d9002a17 	ldw	r4,168(sp)
100064a0:	00c04d0e 	bge	zero,r3,100065d8 <___vfprintf_internal_r+0x21a8>
100064a4:	2000441e 	bne	r4,zero,100065b8 <___vfprintf_internal_r+0x2188>
100064a8:	9480004c 	andi	r18,r18,1
100064ac:	9000421e 	bne	r18,zero,100065b8 <___vfprintf_internal_r+0x2188>
100064b0:	1805883a 	mov	r2,r3
100064b4:	18006f16 	blt	r3,zero,10006674 <___vfprintf_internal_r+0x2244>
100064b8:	d8c03217 	ldw	r3,200(sp)
100064bc:	d8c02b15 	stw	r3,172(sp)
100064c0:	003e0206 	br	10005ccc <__alt_data_end+0xf8005ccc>
100064c4:	df0022c4 	addi	fp,sp,139
100064c8:	dc002a15 	stw	r16,168(sp)
100064cc:	4027883a 	mov	r19,r8
100064d0:	e021883a 	mov	r16,fp
100064d4:	b009883a 	mov	r4,r22
100064d8:	01400284 	movi	r5,10
100064dc:	0000fa40 	call	10000fa4 <__modsi3>
100064e0:	10800c04 	addi	r2,r2,48
100064e4:	843fffc4 	addi	r16,r16,-1
100064e8:	b009883a 	mov	r4,r22
100064ec:	01400284 	movi	r5,10
100064f0:	80800005 	stb	r2,0(r16)
100064f4:	0000f200 	call	10000f20 <__divsi3>
100064f8:	102d883a 	mov	r22,r2
100064fc:	00800244 	movi	r2,9
10006500:	15bff416 	blt	r2,r22,100064d4 <__alt_data_end+0xf80064d4>
10006504:	9811883a 	mov	r8,r19
10006508:	b0800c04 	addi	r2,r22,48
1000650c:	8027883a 	mov	r19,r16
10006510:	997fffc4 	addi	r5,r19,-1
10006514:	98bfffc5 	stb	r2,-1(r19)
10006518:	dc002a17 	ldw	r16,168(sp)
1000651c:	2f006d2e 	bgeu	r5,fp,100066d4 <___vfprintf_internal_r+0x22a4>
10006520:	d9c02384 	addi	r7,sp,142
10006524:	3ccfc83a 	sub	r7,r7,r19
10006528:	d9002344 	addi	r4,sp,141
1000652c:	e1cf883a 	add	r7,fp,r7
10006530:	00000106 	br	10006538 <___vfprintf_internal_r+0x2108>
10006534:	28800003 	ldbu	r2,0(r5)
10006538:	20800005 	stb	r2,0(r4)
1000653c:	21000044 	addi	r4,r4,1
10006540:	29400044 	addi	r5,r5,1
10006544:	393ffb1e 	bne	r7,r4,10006534 <__alt_data_end+0xf8006534>
10006548:	d8802304 	addi	r2,sp,140
1000654c:	14c5c83a 	sub	r2,r2,r19
10006550:	d8c02344 	addi	r3,sp,141
10006554:	1885883a 	add	r2,r3,r2
10006558:	003f7006 	br	1000631c <__alt_data_end+0xf800631c>
1000655c:	0005883a 	mov	r2,zero
10006560:	003f0f06 	br	100061a0 <__alt_data_end+0xf80061a0>
10006564:	d8c03217 	ldw	r3,200(sp)
10006568:	18c00044 	addi	r3,r3,1
1000656c:	d8c02b15 	stw	r3,172(sp)
10006570:	1805883a 	mov	r2,r3
10006574:	183fb20e 	bge	r3,zero,10006440 <__alt_data_end+0xf8006440>
10006578:	0005883a 	mov	r2,zero
1000657c:	003fb006 	br	10006440 <__alt_data_end+0xf8006440>
10006580:	d9003617 	ldw	r4,216(sp)
10006584:	000d883a 	mov	r6,zero
10006588:	000f883a 	mov	r7,zero
1000658c:	980b883a 	mov	r5,r19
10006590:	d8c03c15 	stw	r3,240(sp)
10006594:	da003d15 	stw	r8,244(sp)
10006598:	000def80 	call	1000def8 <__eqdf2>
1000659c:	d8c03c17 	ldw	r3,240(sp)
100065a0:	da003d17 	ldw	r8,244(sp)
100065a4:	103f9826 	beq	r2,zero,10006408 <__alt_data_end+0xf8006408>
100065a8:	00800044 	movi	r2,1
100065ac:	10c7c83a 	sub	r3,r2,r3
100065b0:	d8c02615 	stw	r3,152(sp)
100065b4:	003f9506 	br	1000640c <__alt_data_end+0xf800640c>
100065b8:	d9002a17 	ldw	r4,168(sp)
100065bc:	d8c03217 	ldw	r3,200(sp)
100065c0:	20800044 	addi	r2,r4,1
100065c4:	1885883a 	add	r2,r3,r2
100065c8:	d8802b15 	stw	r2,172(sp)
100065cc:	103dbf0e 	bge	r2,zero,10005ccc <__alt_data_end+0xf8005ccc>
100065d0:	0005883a 	mov	r2,zero
100065d4:	003dbd06 	br	10005ccc <__alt_data_end+0xf8005ccc>
100065d8:	2000201e 	bne	r4,zero,1000665c <___vfprintf_internal_r+0x222c>
100065dc:	9480004c 	andi	r18,r18,1
100065e0:	90001e1e 	bne	r18,zero,1000665c <___vfprintf_internal_r+0x222c>
100065e4:	00800044 	movi	r2,1
100065e8:	d8802b15 	stw	r2,172(sp)
100065ec:	003db706 	br	10005ccc <__alt_data_end+0xf8005ccc>
100065f0:	00800b44 	movi	r2,45
100065f4:	05adc83a 	sub	r22,zero,r22
100065f8:	d8802305 	stb	r2,140(sp)
100065fc:	003f3f06 	br	100062fc <__alt_data_end+0xf80062fc>
10006600:	0005883a 	mov	r2,zero
10006604:	003f5206 	br	10006350 <__alt_data_end+0xf8006350>
10006608:	90a4703a 	and	r18,r18,r2
1000660c:	903f4e26 	beq	r18,zero,10006348 <__alt_data_end+0xf8006348>
10006610:	003f4a06 	br	1000633c <__alt_data_end+0xf800633c>
10006614:	00800084 	movi	r2,2
10006618:	10c5c83a 	sub	r2,r2,r3
1000661c:	003f8406 	br	10006430 <__alt_data_end+0xf8006430>
10006620:	d9402e17 	ldw	r5,184(sp)
10006624:	d9002e17 	ldw	r4,184(sp)
10006628:	ac400043 	ldbu	r17,1(r21)
1000662c:	29400017 	ldw	r5,0(r5)
10006630:	20800104 	addi	r2,r4,4
10006634:	d8802e15 	stw	r2,184(sp)
10006638:	d9402a15 	stw	r5,168(sp)
1000663c:	182b883a 	mov	r21,r3
10006640:	283e7b0e 	bge	r5,zero,10006030 <__alt_data_end+0xf8006030>
10006644:	8c403fcc 	andi	r17,r17,255
10006648:	017fffc4 	movi	r5,-1
1000664c:	8c40201c 	xori	r17,r17,128
10006650:	d9402a15 	stw	r5,168(sp)
10006654:	8c7fe004 	addi	r17,r17,-128
10006658:	0037d706 	br	100045b8 <__alt_data_end+0xf80045b8>
1000665c:	d8c02a17 	ldw	r3,168(sp)
10006660:	18c00084 	addi	r3,r3,2
10006664:	d8c02b15 	stw	r3,172(sp)
10006668:	1805883a 	mov	r2,r3
1000666c:	183d970e 	bge	r3,zero,10005ccc <__alt_data_end+0xf8005ccc>
10006670:	003fd706 	br	100065d0 <__alt_data_end+0xf80065d0>
10006674:	0005883a 	mov	r2,zero
10006678:	003f8f06 	br	100064b8 <__alt_data_end+0xf80064b8>
1000667c:	9080004c 	andi	r2,r18,1
10006680:	103f821e 	bne	r2,zero,1000648c <__alt_data_end+0xf800648c>
10006684:	d8802117 	ldw	r2,132(sp)
10006688:	1405c83a 	sub	r2,r2,r16
1000668c:	d8803315 	stw	r2,204(sp)
10006690:	b47ef426 	beq	r22,r17,10006264 <__alt_data_end+0xf8006264>
10006694:	dd802617 	ldw	r22,152(sp)
10006698:	003f1206 	br	100062e4 <__alt_data_end+0xf80062e4>
1000669c:	d8c02b03 	ldbu	r3,172(sp)
100066a0:	d8c02785 	stb	r3,158(sp)
100066a4:	0038df06 	br	10004a24 <__alt_data_end+0xf8004a24>
100066a8:	d8c02b03 	ldbu	r3,172(sp)
100066ac:	d8c02785 	stb	r3,158(sp)
100066b0:	0038aa06 	br	1000495c <__alt_data_end+0xf800495c>
100066b4:	d8c02b03 	ldbu	r3,172(sp)
100066b8:	d8c02785 	stb	r3,158(sp)
100066bc:	003a4306 	br	10004fcc <__alt_data_end+0xf8004fcc>
100066c0:	d8c02b03 	ldbu	r3,172(sp)
100066c4:	d8c02785 	stb	r3,158(sp)
100066c8:	003af506 	br	100052a0 <__alt_data_end+0xf80052a0>
100066cc:	0005883a 	mov	r2,zero
100066d0:	003d7b06 	br	10005cc0 <__alt_data_end+0xf8005cc0>
100066d4:	d8802344 	addi	r2,sp,141
100066d8:	003f1006 	br	1000631c <__alt_data_end+0xf800631c>
100066dc:	d8c02b03 	ldbu	r3,172(sp)
100066e0:	d8c02785 	stb	r3,158(sp)
100066e4:	0038fd06 	br	10004adc <__alt_data_end+0xf8004adc>
100066e8:	d8c02b03 	ldbu	r3,172(sp)
100066ec:	d8c02785 	stb	r3,158(sp)
100066f0:	003a9706 	br	10005150 <__alt_data_end+0xf8005150>
100066f4:	d8c02b03 	ldbu	r3,172(sp)
100066f8:	d8c02785 	stb	r3,158(sp)
100066fc:	003a1806 	br	10004f60 <__alt_data_end+0xf8004f60>
10006700:	d8c02b03 	ldbu	r3,172(sp)
10006704:	d8c02785 	stb	r3,158(sp)
10006708:	003abe06 	br	10005204 <__alt_data_end+0xf8005204>

1000670c <__vfprintf_internal>:
1000670c:	00840074 	movhi	r2,4097
10006710:	108ec604 	addi	r2,r2,15128
10006714:	300f883a 	mov	r7,r6
10006718:	280d883a 	mov	r6,r5
1000671c:	200b883a 	mov	r5,r4
10006720:	11000017 	ldw	r4,0(r2)
10006724:	00044301 	jmpi	10004430 <___vfprintf_internal_r>

10006728 <__sbprintf>:
10006728:	2880030b 	ldhu	r2,12(r5)
1000672c:	2ac01917 	ldw	r11,100(r5)
10006730:	2a80038b 	ldhu	r10,14(r5)
10006734:	2a400717 	ldw	r9,28(r5)
10006738:	2a000917 	ldw	r8,36(r5)
1000673c:	defee204 	addi	sp,sp,-1144
10006740:	00c10004 	movi	r3,1024
10006744:	dc011a15 	stw	r16,1128(sp)
10006748:	10bfff4c 	andi	r2,r2,65533
1000674c:	2821883a 	mov	r16,r5
10006750:	d8cb883a 	add	r5,sp,r3
10006754:	dc811c15 	stw	r18,1136(sp)
10006758:	dc411b15 	stw	r17,1132(sp)
1000675c:	dfc11d15 	stw	ra,1140(sp)
10006760:	2025883a 	mov	r18,r4
10006764:	d881030d 	sth	r2,1036(sp)
10006768:	dac11915 	stw	r11,1124(sp)
1000676c:	da81038d 	sth	r10,1038(sp)
10006770:	da410715 	stw	r9,1052(sp)
10006774:	da010915 	stw	r8,1060(sp)
10006778:	dec10015 	stw	sp,1024(sp)
1000677c:	dec10415 	stw	sp,1040(sp)
10006780:	d8c10215 	stw	r3,1032(sp)
10006784:	d8c10515 	stw	r3,1044(sp)
10006788:	d8010615 	stw	zero,1048(sp)
1000678c:	00044300 	call	10004430 <___vfprintf_internal_r>
10006790:	1023883a 	mov	r17,r2
10006794:	10000416 	blt	r2,zero,100067a8 <__sbprintf+0x80>
10006798:	d9410004 	addi	r5,sp,1024
1000679c:	9009883a 	mov	r4,r18
100067a0:	00014d00 	call	100014d0 <_fflush_r>
100067a4:	10000d1e 	bne	r2,zero,100067dc <__sbprintf+0xb4>
100067a8:	d881030b 	ldhu	r2,1036(sp)
100067ac:	1080100c 	andi	r2,r2,64
100067b0:	10000326 	beq	r2,zero,100067c0 <__sbprintf+0x98>
100067b4:	8080030b 	ldhu	r2,12(r16)
100067b8:	10801014 	ori	r2,r2,64
100067bc:	8080030d 	sth	r2,12(r16)
100067c0:	8805883a 	mov	r2,r17
100067c4:	dfc11d17 	ldw	ra,1140(sp)
100067c8:	dc811c17 	ldw	r18,1136(sp)
100067cc:	dc411b17 	ldw	r17,1132(sp)
100067d0:	dc011a17 	ldw	r16,1128(sp)
100067d4:	dec11e04 	addi	sp,sp,1144
100067d8:	f800283a 	ret
100067dc:	047fffc4 	movi	r17,-1
100067e0:	003ff106 	br	100067a8 <__alt_data_end+0xf80067a8>

100067e4 <_write_r>:
100067e4:	defffd04 	addi	sp,sp,-12
100067e8:	2805883a 	mov	r2,r5
100067ec:	dc000015 	stw	r16,0(sp)
100067f0:	04040074 	movhi	r16,4097
100067f4:	dc400115 	stw	r17,4(sp)
100067f8:	300b883a 	mov	r5,r6
100067fc:	84159404 	addi	r16,r16,22096
10006800:	2023883a 	mov	r17,r4
10006804:	380d883a 	mov	r6,r7
10006808:	1009883a 	mov	r4,r2
1000680c:	dfc00215 	stw	ra,8(sp)
10006810:	80000015 	stw	zero,0(r16)
10006814:	000ff740 	call	1000ff74 <write>
10006818:	00ffffc4 	movi	r3,-1
1000681c:	10c00526 	beq	r2,r3,10006834 <_write_r+0x50>
10006820:	dfc00217 	ldw	ra,8(sp)
10006824:	dc400117 	ldw	r17,4(sp)
10006828:	dc000017 	ldw	r16,0(sp)
1000682c:	dec00304 	addi	sp,sp,12
10006830:	f800283a 	ret
10006834:	80c00017 	ldw	r3,0(r16)
10006838:	183ff926 	beq	r3,zero,10006820 <__alt_data_end+0xf8006820>
1000683c:	88c00015 	stw	r3,0(r17)
10006840:	003ff706 	br	10006820 <__alt_data_end+0xf8006820>

10006844 <__swsetup_r>:
10006844:	00840074 	movhi	r2,4097
10006848:	defffd04 	addi	sp,sp,-12
1000684c:	108ec604 	addi	r2,r2,15128
10006850:	dc400115 	stw	r17,4(sp)
10006854:	2023883a 	mov	r17,r4
10006858:	11000017 	ldw	r4,0(r2)
1000685c:	dc000015 	stw	r16,0(sp)
10006860:	dfc00215 	stw	ra,8(sp)
10006864:	2821883a 	mov	r16,r5
10006868:	20000226 	beq	r4,zero,10006874 <__swsetup_r+0x30>
1000686c:	20800e17 	ldw	r2,56(r4)
10006870:	10003126 	beq	r2,zero,10006938 <__swsetup_r+0xf4>
10006874:	8080030b 	ldhu	r2,12(r16)
10006878:	10c0020c 	andi	r3,r2,8
1000687c:	1009883a 	mov	r4,r2
10006880:	18000f26 	beq	r3,zero,100068c0 <__swsetup_r+0x7c>
10006884:	80c00417 	ldw	r3,16(r16)
10006888:	18001526 	beq	r3,zero,100068e0 <__swsetup_r+0x9c>
1000688c:	1100004c 	andi	r4,r2,1
10006890:	20001c1e 	bne	r4,zero,10006904 <__swsetup_r+0xc0>
10006894:	1080008c 	andi	r2,r2,2
10006898:	1000291e 	bne	r2,zero,10006940 <__swsetup_r+0xfc>
1000689c:	80800517 	ldw	r2,20(r16)
100068a0:	80800215 	stw	r2,8(r16)
100068a4:	18001c26 	beq	r3,zero,10006918 <__swsetup_r+0xd4>
100068a8:	0005883a 	mov	r2,zero
100068ac:	dfc00217 	ldw	ra,8(sp)
100068b0:	dc400117 	ldw	r17,4(sp)
100068b4:	dc000017 	ldw	r16,0(sp)
100068b8:	dec00304 	addi	sp,sp,12
100068bc:	f800283a 	ret
100068c0:	2080040c 	andi	r2,r4,16
100068c4:	10002e26 	beq	r2,zero,10006980 <__swsetup_r+0x13c>
100068c8:	2080010c 	andi	r2,r4,4
100068cc:	10001e1e 	bne	r2,zero,10006948 <__swsetup_r+0x104>
100068d0:	80c00417 	ldw	r3,16(r16)
100068d4:	20800214 	ori	r2,r4,8
100068d8:	8080030d 	sth	r2,12(r16)
100068dc:	183feb1e 	bne	r3,zero,1000688c <__alt_data_end+0xf800688c>
100068e0:	1100a00c 	andi	r4,r2,640
100068e4:	01408004 	movi	r5,512
100068e8:	217fe826 	beq	r4,r5,1000688c <__alt_data_end+0xf800688c>
100068ec:	800b883a 	mov	r5,r16
100068f0:	8809883a 	mov	r4,r17
100068f4:	00029bc0 	call	100029bc <__smakebuf_r>
100068f8:	8080030b 	ldhu	r2,12(r16)
100068fc:	80c00417 	ldw	r3,16(r16)
10006900:	003fe206 	br	1000688c <__alt_data_end+0xf800688c>
10006904:	80800517 	ldw	r2,20(r16)
10006908:	80000215 	stw	zero,8(r16)
1000690c:	0085c83a 	sub	r2,zero,r2
10006910:	80800615 	stw	r2,24(r16)
10006914:	183fe41e 	bne	r3,zero,100068a8 <__alt_data_end+0xf80068a8>
10006918:	80c0030b 	ldhu	r3,12(r16)
1000691c:	0005883a 	mov	r2,zero
10006920:	1900200c 	andi	r4,r3,128
10006924:	203fe126 	beq	r4,zero,100068ac <__alt_data_end+0xf80068ac>
10006928:	18c01014 	ori	r3,r3,64
1000692c:	80c0030d 	sth	r3,12(r16)
10006930:	00bfffc4 	movi	r2,-1
10006934:	003fdd06 	br	100068ac <__alt_data_end+0xf80068ac>
10006938:	00019b40 	call	100019b4 <__sinit>
1000693c:	003fcd06 	br	10006874 <__alt_data_end+0xf8006874>
10006940:	0005883a 	mov	r2,zero
10006944:	003fd606 	br	100068a0 <__alt_data_end+0xf80068a0>
10006948:	81400c17 	ldw	r5,48(r16)
1000694c:	28000626 	beq	r5,zero,10006968 <__swsetup_r+0x124>
10006950:	80801004 	addi	r2,r16,64
10006954:	28800326 	beq	r5,r2,10006964 <__swsetup_r+0x120>
10006958:	8809883a 	mov	r4,r17
1000695c:	0001e400 	call	10001e40 <_free_r>
10006960:	8100030b 	ldhu	r4,12(r16)
10006964:	80000c15 	stw	zero,48(r16)
10006968:	80c00417 	ldw	r3,16(r16)
1000696c:	00bff6c4 	movi	r2,-37
10006970:	1108703a 	and	r4,r2,r4
10006974:	80000115 	stw	zero,4(r16)
10006978:	80c00015 	stw	r3,0(r16)
1000697c:	003fd506 	br	100068d4 <__alt_data_end+0xf80068d4>
10006980:	00800244 	movi	r2,9
10006984:	88800015 	stw	r2,0(r17)
10006988:	20801014 	ori	r2,r4,64
1000698c:	8080030d 	sth	r2,12(r16)
10006990:	00bfffc4 	movi	r2,-1
10006994:	003fc506 	br	100068ac <__alt_data_end+0xf80068ac>

10006998 <_close_r>:
10006998:	defffd04 	addi	sp,sp,-12
1000699c:	dc000015 	stw	r16,0(sp)
100069a0:	04040074 	movhi	r16,4097
100069a4:	dc400115 	stw	r17,4(sp)
100069a8:	84159404 	addi	r16,r16,22096
100069ac:	2023883a 	mov	r17,r4
100069b0:	2809883a 	mov	r4,r5
100069b4:	dfc00215 	stw	ra,8(sp)
100069b8:	80000015 	stw	zero,0(r16)
100069bc:	000f55c0 	call	1000f55c <close>
100069c0:	00ffffc4 	movi	r3,-1
100069c4:	10c00526 	beq	r2,r3,100069dc <_close_r+0x44>
100069c8:	dfc00217 	ldw	ra,8(sp)
100069cc:	dc400117 	ldw	r17,4(sp)
100069d0:	dc000017 	ldw	r16,0(sp)
100069d4:	dec00304 	addi	sp,sp,12
100069d8:	f800283a 	ret
100069dc:	80c00017 	ldw	r3,0(r16)
100069e0:	183ff926 	beq	r3,zero,100069c8 <__alt_data_end+0xf80069c8>
100069e4:	88c00015 	stw	r3,0(r17)
100069e8:	003ff706 	br	100069c8 <__alt_data_end+0xf80069c8>

100069ec <__call_exitprocs>:
100069ec:	defff504 	addi	sp,sp,-44
100069f0:	df000915 	stw	fp,36(sp)
100069f4:	dd400615 	stw	r21,24(sp)
100069f8:	dc800315 	stw	r18,12(sp)
100069fc:	dfc00a15 	stw	ra,40(sp)
10006a00:	ddc00815 	stw	r23,32(sp)
10006a04:	dd800715 	stw	r22,28(sp)
10006a08:	dd000515 	stw	r20,20(sp)
10006a0c:	dcc00415 	stw	r19,16(sp)
10006a10:	dc400215 	stw	r17,8(sp)
10006a14:	dc000115 	stw	r16,4(sp)
10006a18:	d9000015 	stw	r4,0(sp)
10006a1c:	2839883a 	mov	fp,r5
10006a20:	04800044 	movi	r18,1
10006a24:	057fffc4 	movi	r21,-1
10006a28:	00840074 	movhi	r2,4097
10006a2c:	108ec504 	addi	r2,r2,15124
10006a30:	12000017 	ldw	r8,0(r2)
10006a34:	45005217 	ldw	r20,328(r8)
10006a38:	44c05204 	addi	r19,r8,328
10006a3c:	a0001c26 	beq	r20,zero,10006ab0 <__call_exitprocs+0xc4>
10006a40:	a0800117 	ldw	r2,4(r20)
10006a44:	15ffffc4 	addi	r23,r2,-1
10006a48:	b8000d16 	blt	r23,zero,10006a80 <__call_exitprocs+0x94>
10006a4c:	14000044 	addi	r16,r2,1
10006a50:	8421883a 	add	r16,r16,r16
10006a54:	8421883a 	add	r16,r16,r16
10006a58:	84402004 	addi	r17,r16,128
10006a5c:	a463883a 	add	r17,r20,r17
10006a60:	a421883a 	add	r16,r20,r16
10006a64:	e0001e26 	beq	fp,zero,10006ae0 <__call_exitprocs+0xf4>
10006a68:	80804017 	ldw	r2,256(r16)
10006a6c:	e0801c26 	beq	fp,r2,10006ae0 <__call_exitprocs+0xf4>
10006a70:	bdffffc4 	addi	r23,r23,-1
10006a74:	843fff04 	addi	r16,r16,-4
10006a78:	8c7fff04 	addi	r17,r17,-4
10006a7c:	bd7ff91e 	bne	r23,r21,10006a64 <__alt_data_end+0xf8006a64>
10006a80:	00840034 	movhi	r2,4096
10006a84:	108ae304 	addi	r2,r2,11148
10006a88:	10000926 	beq	r2,zero,10006ab0 <__call_exitprocs+0xc4>
10006a8c:	a0800117 	ldw	r2,4(r20)
10006a90:	1000301e 	bne	r2,zero,10006b54 <__call_exitprocs+0x168>
10006a94:	a0800017 	ldw	r2,0(r20)
10006a98:	10003226 	beq	r2,zero,10006b64 <__call_exitprocs+0x178>
10006a9c:	a009883a 	mov	r4,r20
10006aa0:	98800015 	stw	r2,0(r19)
10006aa4:	0002b8c0 	call	10002b8c <free>
10006aa8:	9d000017 	ldw	r20,0(r19)
10006aac:	a03fe41e 	bne	r20,zero,10006a40 <__alt_data_end+0xf8006a40>
10006ab0:	dfc00a17 	ldw	ra,40(sp)
10006ab4:	df000917 	ldw	fp,36(sp)
10006ab8:	ddc00817 	ldw	r23,32(sp)
10006abc:	dd800717 	ldw	r22,28(sp)
10006ac0:	dd400617 	ldw	r21,24(sp)
10006ac4:	dd000517 	ldw	r20,20(sp)
10006ac8:	dcc00417 	ldw	r19,16(sp)
10006acc:	dc800317 	ldw	r18,12(sp)
10006ad0:	dc400217 	ldw	r17,8(sp)
10006ad4:	dc000117 	ldw	r16,4(sp)
10006ad8:	dec00b04 	addi	sp,sp,44
10006adc:	f800283a 	ret
10006ae0:	a0800117 	ldw	r2,4(r20)
10006ae4:	80c00017 	ldw	r3,0(r16)
10006ae8:	10bfffc4 	addi	r2,r2,-1
10006aec:	15c01426 	beq	r2,r23,10006b40 <__call_exitprocs+0x154>
10006af0:	80000015 	stw	zero,0(r16)
10006af4:	183fde26 	beq	r3,zero,10006a70 <__alt_data_end+0xf8006a70>
10006af8:	95c8983a 	sll	r4,r18,r23
10006afc:	a0806217 	ldw	r2,392(r20)
10006b00:	a5800117 	ldw	r22,4(r20)
10006b04:	2084703a 	and	r2,r4,r2
10006b08:	10000b26 	beq	r2,zero,10006b38 <__call_exitprocs+0x14c>
10006b0c:	a0806317 	ldw	r2,396(r20)
10006b10:	2088703a 	and	r4,r4,r2
10006b14:	20000c1e 	bne	r4,zero,10006b48 <__call_exitprocs+0x15c>
10006b18:	89400017 	ldw	r5,0(r17)
10006b1c:	d9000017 	ldw	r4,0(sp)
10006b20:	183ee83a 	callr	r3
10006b24:	a0800117 	ldw	r2,4(r20)
10006b28:	15bfbf1e 	bne	r2,r22,10006a28 <__alt_data_end+0xf8006a28>
10006b2c:	98800017 	ldw	r2,0(r19)
10006b30:	153fcf26 	beq	r2,r20,10006a70 <__alt_data_end+0xf8006a70>
10006b34:	003fbc06 	br	10006a28 <__alt_data_end+0xf8006a28>
10006b38:	183ee83a 	callr	r3
10006b3c:	003ff906 	br	10006b24 <__alt_data_end+0xf8006b24>
10006b40:	a5c00115 	stw	r23,4(r20)
10006b44:	003feb06 	br	10006af4 <__alt_data_end+0xf8006af4>
10006b48:	89000017 	ldw	r4,0(r17)
10006b4c:	183ee83a 	callr	r3
10006b50:	003ff406 	br	10006b24 <__alt_data_end+0xf8006b24>
10006b54:	a0800017 	ldw	r2,0(r20)
10006b58:	a027883a 	mov	r19,r20
10006b5c:	1029883a 	mov	r20,r2
10006b60:	003fb606 	br	10006a3c <__alt_data_end+0xf8006a3c>
10006b64:	0005883a 	mov	r2,zero
10006b68:	003ffb06 	br	10006b58 <__alt_data_end+0xf8006b58>

10006b6c <abort>:
10006b6c:	deffff04 	addi	sp,sp,-4
10006b70:	01000184 	movi	r4,6
10006b74:	dfc00015 	stw	ra,0(sp)
10006b78:	000a2140 	call	1000a214 <raise>
10006b7c:	01000044 	movi	r4,1
10006b80:	000f6600 	call	1000f660 <_exit>

10006b84 <quorem>:
10006b84:	defff204 	addi	sp,sp,-56
10006b88:	ddc00b15 	stw	r23,44(sp)
10006b8c:	20800417 	ldw	r2,16(r4)
10006b90:	2dc00417 	ldw	r23,16(r5)
10006b94:	dfc00d15 	stw	ra,52(sp)
10006b98:	df000c15 	stw	fp,48(sp)
10006b9c:	dd800a15 	stw	r22,40(sp)
10006ba0:	dd400915 	stw	r21,36(sp)
10006ba4:	dd000815 	stw	r20,32(sp)
10006ba8:	dcc00715 	stw	r19,28(sp)
10006bac:	dc800615 	stw	r18,24(sp)
10006bb0:	dc400515 	stw	r17,20(sp)
10006bb4:	dc000415 	stw	r16,16(sp)
10006bb8:	15c07a16 	blt	r2,r23,10006da4 <quorem+0x220>
10006bbc:	bdffffc4 	addi	r23,r23,-1
10006bc0:	bde9883a 	add	r20,r23,r23
10006bc4:	28c00504 	addi	r3,r5,20
10006bc8:	a529883a 	add	r20,r20,r20
10006bcc:	1d39883a 	add	fp,r3,r20
10006bd0:	24c00504 	addi	r19,r4,20
10006bd4:	d9400215 	stw	r5,8(sp)
10006bd8:	9d29883a 	add	r20,r19,r20
10006bdc:	e1400017 	ldw	r5,0(fp)
10006be0:	d9000015 	stw	r4,0(sp)
10006be4:	a1000017 	ldw	r4,0(r20)
10006be8:	29400044 	addi	r5,r5,1
10006bec:	d8c00115 	stw	r3,4(sp)
10006bf0:	dd000315 	stw	r20,12(sp)
10006bf4:	00010180 	call	10001018 <__udivsi3>
10006bf8:	1025883a 	mov	r18,r2
10006bfc:	10003026 	beq	r2,zero,10006cc0 <quorem+0x13c>
10006c00:	dc400117 	ldw	r17,4(sp)
10006c04:	9829883a 	mov	r20,r19
10006c08:	002d883a 	mov	r22,zero
10006c0c:	0021883a 	mov	r16,zero
10006c10:	8d400017 	ldw	r21,0(r17)
10006c14:	900b883a 	mov	r5,r18
10006c18:	8c400104 	addi	r17,r17,4
10006c1c:	a93fffcc 	andi	r4,r21,65535
10006c20:	00010d40 	call	100010d4 <__mulsi3>
10006c24:	a808d43a 	srli	r4,r21,16
10006c28:	900b883a 	mov	r5,r18
10006c2c:	15ad883a 	add	r22,r2,r22
10006c30:	00010d40 	call	100010d4 <__mulsi3>
10006c34:	a1000017 	ldw	r4,0(r20)
10006c38:	b00cd43a 	srli	r6,r22,16
10006c3c:	b0ffffcc 	andi	r3,r22,65535
10006c40:	217fffcc 	andi	r5,r4,65535
10006c44:	2c21883a 	add	r16,r5,r16
10006c48:	80c7c83a 	sub	r3,r16,r3
10006c4c:	2008d43a 	srli	r4,r4,16
10006c50:	1185883a 	add	r2,r2,r6
10006c54:	1821d43a 	srai	r16,r3,16
10006c58:	117fffcc 	andi	r5,r2,65535
10006c5c:	2149c83a 	sub	r4,r4,r5
10006c60:	2421883a 	add	r16,r4,r16
10006c64:	8008943a 	slli	r4,r16,16
10006c68:	18ffffcc 	andi	r3,r3,65535
10006c6c:	102cd43a 	srli	r22,r2,16
10006c70:	20c8b03a 	or	r4,r4,r3
10006c74:	a1000015 	stw	r4,0(r20)
10006c78:	8021d43a 	srai	r16,r16,16
10006c7c:	a5000104 	addi	r20,r20,4
10006c80:	e47fe32e 	bgeu	fp,r17,10006c10 <__alt_data_end+0xf8006c10>
10006c84:	d8c00317 	ldw	r3,12(sp)
10006c88:	18800017 	ldw	r2,0(r3)
10006c8c:	10000c1e 	bne	r2,zero,10006cc0 <quorem+0x13c>
10006c90:	18bfff04 	addi	r2,r3,-4
10006c94:	9880082e 	bgeu	r19,r2,10006cb8 <quorem+0x134>
10006c98:	18ffff17 	ldw	r3,-4(r3)
10006c9c:	18000326 	beq	r3,zero,10006cac <quorem+0x128>
10006ca0:	00000506 	br	10006cb8 <quorem+0x134>
10006ca4:	10c00017 	ldw	r3,0(r2)
10006ca8:	1800031e 	bne	r3,zero,10006cb8 <quorem+0x134>
10006cac:	10bfff04 	addi	r2,r2,-4
10006cb0:	bdffffc4 	addi	r23,r23,-1
10006cb4:	98bffb36 	bltu	r19,r2,10006ca4 <__alt_data_end+0xf8006ca4>
10006cb8:	d8c00017 	ldw	r3,0(sp)
10006cbc:	1dc00415 	stw	r23,16(r3)
10006cc0:	d9400217 	ldw	r5,8(sp)
10006cc4:	d9000017 	ldw	r4,0(sp)
10006cc8:	00096500 	call	10009650 <__mcmp>
10006ccc:	10002816 	blt	r2,zero,10006d70 <quorem+0x1ec>
10006cd0:	dc400117 	ldw	r17,4(sp)
10006cd4:	94800044 	addi	r18,r18,1
10006cd8:	980d883a 	mov	r6,r19
10006cdc:	0007883a 	mov	r3,zero
10006ce0:	31000017 	ldw	r4,0(r6)
10006ce4:	89400017 	ldw	r5,0(r17)
10006ce8:	31800104 	addi	r6,r6,4
10006cec:	20bfffcc 	andi	r2,r4,65535
10006cf0:	10c7883a 	add	r3,r2,r3
10006cf4:	28bfffcc 	andi	r2,r5,65535
10006cf8:	1885c83a 	sub	r2,r3,r2
10006cfc:	280ad43a 	srli	r5,r5,16
10006d00:	2008d43a 	srli	r4,r4,16
10006d04:	1007d43a 	srai	r3,r2,16
10006d08:	10bfffcc 	andi	r2,r2,65535
10006d0c:	2149c83a 	sub	r4,r4,r5
10006d10:	20c9883a 	add	r4,r4,r3
10006d14:	200a943a 	slli	r5,r4,16
10006d18:	8c400104 	addi	r17,r17,4
10006d1c:	2007d43a 	srai	r3,r4,16
10006d20:	2884b03a 	or	r2,r5,r2
10006d24:	30bfff15 	stw	r2,-4(r6)
10006d28:	e47fed2e 	bgeu	fp,r17,10006ce0 <__alt_data_end+0xf8006ce0>
10006d2c:	bdc5883a 	add	r2,r23,r23
10006d30:	1085883a 	add	r2,r2,r2
10006d34:	9887883a 	add	r3,r19,r2
10006d38:	18800017 	ldw	r2,0(r3)
10006d3c:	10000c1e 	bne	r2,zero,10006d70 <quorem+0x1ec>
10006d40:	18bfff04 	addi	r2,r3,-4
10006d44:	9880082e 	bgeu	r19,r2,10006d68 <quorem+0x1e4>
10006d48:	18ffff17 	ldw	r3,-4(r3)
10006d4c:	18000326 	beq	r3,zero,10006d5c <quorem+0x1d8>
10006d50:	00000506 	br	10006d68 <quorem+0x1e4>
10006d54:	10c00017 	ldw	r3,0(r2)
10006d58:	1800031e 	bne	r3,zero,10006d68 <quorem+0x1e4>
10006d5c:	10bfff04 	addi	r2,r2,-4
10006d60:	bdffffc4 	addi	r23,r23,-1
10006d64:	98bffb36 	bltu	r19,r2,10006d54 <__alt_data_end+0xf8006d54>
10006d68:	d8c00017 	ldw	r3,0(sp)
10006d6c:	1dc00415 	stw	r23,16(r3)
10006d70:	9005883a 	mov	r2,r18
10006d74:	dfc00d17 	ldw	ra,52(sp)
10006d78:	df000c17 	ldw	fp,48(sp)
10006d7c:	ddc00b17 	ldw	r23,44(sp)
10006d80:	dd800a17 	ldw	r22,40(sp)
10006d84:	dd400917 	ldw	r21,36(sp)
10006d88:	dd000817 	ldw	r20,32(sp)
10006d8c:	dcc00717 	ldw	r19,28(sp)
10006d90:	dc800617 	ldw	r18,24(sp)
10006d94:	dc400517 	ldw	r17,20(sp)
10006d98:	dc000417 	ldw	r16,16(sp)
10006d9c:	dec00e04 	addi	sp,sp,56
10006da0:	f800283a 	ret
10006da4:	0005883a 	mov	r2,zero
10006da8:	003ff206 	br	10006d74 <__alt_data_end+0xf8006d74>

10006dac <_dtoa_r>:
10006dac:	20801017 	ldw	r2,64(r4)
10006db0:	deffde04 	addi	sp,sp,-136
10006db4:	df002015 	stw	fp,128(sp)
10006db8:	dcc01b15 	stw	r19,108(sp)
10006dbc:	dc801a15 	stw	r18,104(sp)
10006dc0:	dc401915 	stw	r17,100(sp)
10006dc4:	dc001815 	stw	r16,96(sp)
10006dc8:	dfc02115 	stw	ra,132(sp)
10006dcc:	ddc01f15 	stw	r23,124(sp)
10006dd0:	dd801e15 	stw	r22,120(sp)
10006dd4:	dd401d15 	stw	r21,116(sp)
10006dd8:	dd001c15 	stw	r20,112(sp)
10006ddc:	d9c00315 	stw	r7,12(sp)
10006de0:	2039883a 	mov	fp,r4
10006de4:	3023883a 	mov	r17,r6
10006de8:	2825883a 	mov	r18,r5
10006dec:	dc002417 	ldw	r16,144(sp)
10006df0:	3027883a 	mov	r19,r6
10006df4:	10000826 	beq	r2,zero,10006e18 <_dtoa_r+0x6c>
10006df8:	21801117 	ldw	r6,68(r4)
10006dfc:	00c00044 	movi	r3,1
10006e00:	100b883a 	mov	r5,r2
10006e04:	1986983a 	sll	r3,r3,r6
10006e08:	11800115 	stw	r6,4(r2)
10006e0c:	10c00215 	stw	r3,8(r2)
10006e10:	0008d740 	call	10008d74 <_Bfree>
10006e14:	e0001015 	stw	zero,64(fp)
10006e18:	88002e16 	blt	r17,zero,10006ed4 <_dtoa_r+0x128>
10006e1c:	80000015 	stw	zero,0(r16)
10006e20:	889ffc2c 	andhi	r2,r17,32752
10006e24:	00dffc34 	movhi	r3,32752
10006e28:	10c01c26 	beq	r2,r3,10006e9c <_dtoa_r+0xf0>
10006e2c:	000d883a 	mov	r6,zero
10006e30:	000f883a 	mov	r7,zero
10006e34:	9009883a 	mov	r4,r18
10006e38:	980b883a 	mov	r5,r19
10006e3c:	000def80 	call	1000def8 <__eqdf2>
10006e40:	10002b1e 	bne	r2,zero,10006ef0 <_dtoa_r+0x144>
10006e44:	d9c02317 	ldw	r7,140(sp)
10006e48:	00800044 	movi	r2,1
10006e4c:	38800015 	stw	r2,0(r7)
10006e50:	d8802517 	ldw	r2,148(sp)
10006e54:	10019e26 	beq	r2,zero,100074d0 <_dtoa_r+0x724>
10006e58:	d8c02517 	ldw	r3,148(sp)
10006e5c:	00840074 	movhi	r2,4097
10006e60:	10876944 	addi	r2,r2,7589
10006e64:	18800015 	stw	r2,0(r3)
10006e68:	10bfffc4 	addi	r2,r2,-1
10006e6c:	dfc02117 	ldw	ra,132(sp)
10006e70:	df002017 	ldw	fp,128(sp)
10006e74:	ddc01f17 	ldw	r23,124(sp)
10006e78:	dd801e17 	ldw	r22,120(sp)
10006e7c:	dd401d17 	ldw	r21,116(sp)
10006e80:	dd001c17 	ldw	r20,112(sp)
10006e84:	dcc01b17 	ldw	r19,108(sp)
10006e88:	dc801a17 	ldw	r18,104(sp)
10006e8c:	dc401917 	ldw	r17,100(sp)
10006e90:	dc001817 	ldw	r16,96(sp)
10006e94:	dec02204 	addi	sp,sp,136
10006e98:	f800283a 	ret
10006e9c:	d8c02317 	ldw	r3,140(sp)
10006ea0:	0089c3c4 	movi	r2,9999
10006ea4:	18800015 	stw	r2,0(r3)
10006ea8:	90017726 	beq	r18,zero,10007488 <_dtoa_r+0x6dc>
10006eac:	00840074 	movhi	r2,4097
10006eb0:	10877504 	addi	r2,r2,7636
10006eb4:	d9002517 	ldw	r4,148(sp)
10006eb8:	203fec26 	beq	r4,zero,10006e6c <__alt_data_end+0xf8006e6c>
10006ebc:	10c000c7 	ldb	r3,3(r2)
10006ec0:	1801781e 	bne	r3,zero,100074a4 <_dtoa_r+0x6f8>
10006ec4:	10c000c4 	addi	r3,r2,3
10006ec8:	d9802517 	ldw	r6,148(sp)
10006ecc:	30c00015 	stw	r3,0(r6)
10006ed0:	003fe606 	br	10006e6c <__alt_data_end+0xf8006e6c>
10006ed4:	04e00034 	movhi	r19,32768
10006ed8:	9cffffc4 	addi	r19,r19,-1
10006edc:	00800044 	movi	r2,1
10006ee0:	8ce6703a 	and	r19,r17,r19
10006ee4:	80800015 	stw	r2,0(r16)
10006ee8:	9823883a 	mov	r17,r19
10006eec:	003fcc06 	br	10006e20 <__alt_data_end+0xf8006e20>
10006ef0:	d8800204 	addi	r2,sp,8
10006ef4:	d8800015 	stw	r2,0(sp)
10006ef8:	d9c00104 	addi	r7,sp,4
10006efc:	900b883a 	mov	r5,r18
10006f00:	980d883a 	mov	r6,r19
10006f04:	e009883a 	mov	r4,fp
10006f08:	8820d53a 	srli	r16,r17,20
10006f0c:	0009a1c0 	call	10009a1c <__d2b>
10006f10:	d8800915 	stw	r2,36(sp)
10006f14:	8001651e 	bne	r16,zero,100074ac <_dtoa_r+0x700>
10006f18:	dd800217 	ldw	r22,8(sp)
10006f1c:	dc000117 	ldw	r16,4(sp)
10006f20:	00800804 	movi	r2,32
10006f24:	b421883a 	add	r16,r22,r16
10006f28:	80c10c84 	addi	r3,r16,1074
10006f2c:	10c2d10e 	bge	r2,r3,10007a74 <_dtoa_r+0xcc8>
10006f30:	00801004 	movi	r2,64
10006f34:	81010484 	addi	r4,r16,1042
10006f38:	10c7c83a 	sub	r3,r2,r3
10006f3c:	9108d83a 	srl	r4,r18,r4
10006f40:	88e2983a 	sll	r17,r17,r3
10006f44:	2448b03a 	or	r4,r4,r17
10006f48:	000f4140 	call	1000f414 <__floatunsidf>
10006f4c:	017f8434 	movhi	r5,65040
10006f50:	01800044 	movi	r6,1
10006f54:	1009883a 	mov	r4,r2
10006f58:	194b883a 	add	r5,r3,r5
10006f5c:	843fffc4 	addi	r16,r16,-1
10006f60:	d9801115 	stw	r6,68(sp)
10006f64:	000d883a 	mov	r6,zero
10006f68:	01cffe34 	movhi	r7,16376
10006f6c:	000e9bc0 	call	1000e9bc <__subdf3>
10006f70:	0198dbf4 	movhi	r6,25455
10006f74:	01cff4f4 	movhi	r7,16339
10006f78:	3190d844 	addi	r6,r6,17249
10006f7c:	39e1e9c4 	addi	r7,r7,-30809
10006f80:	1009883a 	mov	r4,r2
10006f84:	180b883a 	mov	r5,r3
10006f88:	000e1500 	call	1000e150 <__muldf3>
10006f8c:	01a2d874 	movhi	r6,35681
10006f90:	01cff1f4 	movhi	r7,16327
10006f94:	31b22cc4 	addi	r6,r6,-14157
10006f98:	39e28a04 	addi	r7,r7,-30168
10006f9c:	180b883a 	mov	r5,r3
10006fa0:	1009883a 	mov	r4,r2
10006fa4:	000cc7c0 	call	1000cc7c <__adddf3>
10006fa8:	8009883a 	mov	r4,r16
10006fac:	1029883a 	mov	r20,r2
10006fb0:	1823883a 	mov	r17,r3
10006fb4:	000f3380 	call	1000f338 <__floatsidf>
10006fb8:	019427f4 	movhi	r6,20639
10006fbc:	01cff4f4 	movhi	r7,16339
10006fc0:	319e7ec4 	addi	r6,r6,31227
10006fc4:	39d104c4 	addi	r7,r7,17427
10006fc8:	1009883a 	mov	r4,r2
10006fcc:	180b883a 	mov	r5,r3
10006fd0:	000e1500 	call	1000e150 <__muldf3>
10006fd4:	100d883a 	mov	r6,r2
10006fd8:	180f883a 	mov	r7,r3
10006fdc:	a009883a 	mov	r4,r20
10006fe0:	880b883a 	mov	r5,r17
10006fe4:	000cc7c0 	call	1000cc7c <__adddf3>
10006fe8:	1009883a 	mov	r4,r2
10006fec:	180b883a 	mov	r5,r3
10006ff0:	1029883a 	mov	r20,r2
10006ff4:	1823883a 	mov	r17,r3
10006ff8:	000f2b80 	call	1000f2b8 <__fixdfsi>
10006ffc:	000d883a 	mov	r6,zero
10007000:	000f883a 	mov	r7,zero
10007004:	a009883a 	mov	r4,r20
10007008:	880b883a 	mov	r5,r17
1000700c:	d8800515 	stw	r2,20(sp)
10007010:	000e05c0 	call	1000e05c <__ledf2>
10007014:	10028716 	blt	r2,zero,10007a34 <_dtoa_r+0xc88>
10007018:	d8c00517 	ldw	r3,20(sp)
1000701c:	00800584 	movi	r2,22
10007020:	10c27536 	bltu	r2,r3,100079f8 <_dtoa_r+0xc4c>
10007024:	180490fa 	slli	r2,r3,3
10007028:	00c40074 	movhi	r3,4097
1000702c:	18c79004 	addi	r3,r3,7744
10007030:	1885883a 	add	r2,r3,r2
10007034:	11000017 	ldw	r4,0(r2)
10007038:	11400117 	ldw	r5,4(r2)
1000703c:	900d883a 	mov	r6,r18
10007040:	980f883a 	mov	r7,r19
10007044:	000df800 	call	1000df80 <__gedf2>
10007048:	00828d0e 	bge	zero,r2,10007a80 <_dtoa_r+0xcd4>
1000704c:	d9000517 	ldw	r4,20(sp)
10007050:	d8000e15 	stw	zero,56(sp)
10007054:	213fffc4 	addi	r4,r4,-1
10007058:	d9000515 	stw	r4,20(sp)
1000705c:	b42dc83a 	sub	r22,r22,r16
10007060:	b5bfffc4 	addi	r22,r22,-1
10007064:	b0026f16 	blt	r22,zero,10007a24 <_dtoa_r+0xc78>
10007068:	d8000815 	stw	zero,32(sp)
1000706c:	d9c00517 	ldw	r7,20(sp)
10007070:	38026416 	blt	r7,zero,10007a04 <_dtoa_r+0xc58>
10007074:	b1ed883a 	add	r22,r22,r7
10007078:	d9c00d15 	stw	r7,52(sp)
1000707c:	d8000a15 	stw	zero,40(sp)
10007080:	d9800317 	ldw	r6,12(sp)
10007084:	00800244 	movi	r2,9
10007088:	11811436 	bltu	r2,r6,100074dc <_dtoa_r+0x730>
1000708c:	00800144 	movi	r2,5
10007090:	1184e10e 	bge	r2,r6,10008418 <_dtoa_r+0x166c>
10007094:	31bfff04 	addi	r6,r6,-4
10007098:	d9800315 	stw	r6,12(sp)
1000709c:	0023883a 	mov	r17,zero
100070a0:	d9800317 	ldw	r6,12(sp)
100070a4:	008000c4 	movi	r2,3
100070a8:	30836726 	beq	r6,r2,10007e48 <_dtoa_r+0x109c>
100070ac:	1183410e 	bge	r2,r6,10007db4 <_dtoa_r+0x1008>
100070b0:	d9c00317 	ldw	r7,12(sp)
100070b4:	00800104 	movi	r2,4
100070b8:	38827c26 	beq	r7,r2,10007aac <_dtoa_r+0xd00>
100070bc:	00800144 	movi	r2,5
100070c0:	3884c41e 	bne	r7,r2,100083d4 <_dtoa_r+0x1628>
100070c4:	00800044 	movi	r2,1
100070c8:	d8800b15 	stw	r2,44(sp)
100070cc:	d8c00517 	ldw	r3,20(sp)
100070d0:	d9002217 	ldw	r4,136(sp)
100070d4:	1907883a 	add	r3,r3,r4
100070d8:	19800044 	addi	r6,r3,1
100070dc:	d8c00c15 	stw	r3,48(sp)
100070e0:	d9800615 	stw	r6,24(sp)
100070e4:	0183a40e 	bge	zero,r6,10007f78 <_dtoa_r+0x11cc>
100070e8:	d9800617 	ldw	r6,24(sp)
100070ec:	3021883a 	mov	r16,r6
100070f0:	e0001115 	stw	zero,68(fp)
100070f4:	008005c4 	movi	r2,23
100070f8:	1184c92e 	bgeu	r2,r6,10008420 <_dtoa_r+0x1674>
100070fc:	00c00044 	movi	r3,1
10007100:	00800104 	movi	r2,4
10007104:	1085883a 	add	r2,r2,r2
10007108:	11000504 	addi	r4,r2,20
1000710c:	180b883a 	mov	r5,r3
10007110:	18c00044 	addi	r3,r3,1
10007114:	313ffb2e 	bgeu	r6,r4,10007104 <__alt_data_end+0xf8007104>
10007118:	e1401115 	stw	r5,68(fp)
1000711c:	e009883a 	mov	r4,fp
10007120:	0008ccc0 	call	10008ccc <_Balloc>
10007124:	d8800715 	stw	r2,28(sp)
10007128:	e0801015 	stw	r2,64(fp)
1000712c:	00800384 	movi	r2,14
10007130:	1400f736 	bltu	r2,r16,10007510 <_dtoa_r+0x764>
10007134:	8800f626 	beq	r17,zero,10007510 <_dtoa_r+0x764>
10007138:	d9c00517 	ldw	r7,20(sp)
1000713c:	01c39a0e 	bge	zero,r7,10007fa8 <_dtoa_r+0x11fc>
10007140:	388003cc 	andi	r2,r7,15
10007144:	100490fa 	slli	r2,r2,3
10007148:	382bd13a 	srai	r21,r7,4
1000714c:	00c40074 	movhi	r3,4097
10007150:	18c79004 	addi	r3,r3,7744
10007154:	1885883a 	add	r2,r3,r2
10007158:	a8c0040c 	andi	r3,r21,16
1000715c:	12400017 	ldw	r9,0(r2)
10007160:	12000117 	ldw	r8,4(r2)
10007164:	18037926 	beq	r3,zero,10007f4c <_dtoa_r+0x11a0>
10007168:	00840074 	movhi	r2,4097
1000716c:	10878604 	addi	r2,r2,7704
10007170:	11800817 	ldw	r6,32(r2)
10007174:	11c00917 	ldw	r7,36(r2)
10007178:	9009883a 	mov	r4,r18
1000717c:	980b883a 	mov	r5,r19
10007180:	da001715 	stw	r8,92(sp)
10007184:	da401615 	stw	r9,88(sp)
10007188:	000d5280 	call	1000d528 <__divdf3>
1000718c:	da001717 	ldw	r8,92(sp)
10007190:	da401617 	ldw	r9,88(sp)
10007194:	ad4003cc 	andi	r21,r21,15
10007198:	040000c4 	movi	r16,3
1000719c:	1023883a 	mov	r17,r2
100071a0:	1829883a 	mov	r20,r3
100071a4:	a8001126 	beq	r21,zero,100071ec <_dtoa_r+0x440>
100071a8:	05c40074 	movhi	r23,4097
100071ac:	bdc78604 	addi	r23,r23,7704
100071b0:	4805883a 	mov	r2,r9
100071b4:	4007883a 	mov	r3,r8
100071b8:	a980004c 	andi	r6,r21,1
100071bc:	1009883a 	mov	r4,r2
100071c0:	a82bd07a 	srai	r21,r21,1
100071c4:	180b883a 	mov	r5,r3
100071c8:	30000426 	beq	r6,zero,100071dc <_dtoa_r+0x430>
100071cc:	b9800017 	ldw	r6,0(r23)
100071d0:	b9c00117 	ldw	r7,4(r23)
100071d4:	84000044 	addi	r16,r16,1
100071d8:	000e1500 	call	1000e150 <__muldf3>
100071dc:	bdc00204 	addi	r23,r23,8
100071e0:	a83ff51e 	bne	r21,zero,100071b8 <__alt_data_end+0xf80071b8>
100071e4:	1013883a 	mov	r9,r2
100071e8:	1811883a 	mov	r8,r3
100071ec:	480d883a 	mov	r6,r9
100071f0:	400f883a 	mov	r7,r8
100071f4:	8809883a 	mov	r4,r17
100071f8:	a00b883a 	mov	r5,r20
100071fc:	000d5280 	call	1000d528 <__divdf3>
10007200:	d8800f15 	stw	r2,60(sp)
10007204:	d8c01015 	stw	r3,64(sp)
10007208:	d8c00e17 	ldw	r3,56(sp)
1000720c:	18000626 	beq	r3,zero,10007228 <_dtoa_r+0x47c>
10007210:	d9000f17 	ldw	r4,60(sp)
10007214:	d9401017 	ldw	r5,64(sp)
10007218:	000d883a 	mov	r6,zero
1000721c:	01cffc34 	movhi	r7,16368
10007220:	000e05c0 	call	1000e05c <__ledf2>
10007224:	10040b16 	blt	r2,zero,10008254 <_dtoa_r+0x14a8>
10007228:	8009883a 	mov	r4,r16
1000722c:	000f3380 	call	1000f338 <__floatsidf>
10007230:	d9800f17 	ldw	r6,60(sp)
10007234:	d9c01017 	ldw	r7,64(sp)
10007238:	1009883a 	mov	r4,r2
1000723c:	180b883a 	mov	r5,r3
10007240:	000e1500 	call	1000e150 <__muldf3>
10007244:	000d883a 	mov	r6,zero
10007248:	01d00734 	movhi	r7,16412
1000724c:	1009883a 	mov	r4,r2
10007250:	180b883a 	mov	r5,r3
10007254:	000cc7c0 	call	1000cc7c <__adddf3>
10007258:	1021883a 	mov	r16,r2
1000725c:	d8800617 	ldw	r2,24(sp)
10007260:	047f3034 	movhi	r17,64704
10007264:	1c63883a 	add	r17,r3,r17
10007268:	10031826 	beq	r2,zero,10007ecc <_dtoa_r+0x1120>
1000726c:	d8c00517 	ldw	r3,20(sp)
10007270:	db000617 	ldw	r12,24(sp)
10007274:	d8c01315 	stw	r3,76(sp)
10007278:	d9000b17 	ldw	r4,44(sp)
1000727c:	20038f26 	beq	r4,zero,100080bc <_dtoa_r+0x1310>
10007280:	60bfffc4 	addi	r2,r12,-1
10007284:	100490fa 	slli	r2,r2,3
10007288:	00c40074 	movhi	r3,4097
1000728c:	18c79004 	addi	r3,r3,7744
10007290:	1885883a 	add	r2,r3,r2
10007294:	11800017 	ldw	r6,0(r2)
10007298:	11c00117 	ldw	r7,4(r2)
1000729c:	d8800717 	ldw	r2,28(sp)
100072a0:	0009883a 	mov	r4,zero
100072a4:	014ff834 	movhi	r5,16352
100072a8:	db001615 	stw	r12,88(sp)
100072ac:	15c00044 	addi	r23,r2,1
100072b0:	000d5280 	call	1000d528 <__divdf3>
100072b4:	800d883a 	mov	r6,r16
100072b8:	880f883a 	mov	r7,r17
100072bc:	1009883a 	mov	r4,r2
100072c0:	180b883a 	mov	r5,r3
100072c4:	000e9bc0 	call	1000e9bc <__subdf3>
100072c8:	d9401017 	ldw	r5,64(sp)
100072cc:	d9000f17 	ldw	r4,60(sp)
100072d0:	102b883a 	mov	r21,r2
100072d4:	d8c01215 	stw	r3,72(sp)
100072d8:	000f2b80 	call	1000f2b8 <__fixdfsi>
100072dc:	1009883a 	mov	r4,r2
100072e0:	1029883a 	mov	r20,r2
100072e4:	000f3380 	call	1000f338 <__floatsidf>
100072e8:	d9000f17 	ldw	r4,60(sp)
100072ec:	d9401017 	ldw	r5,64(sp)
100072f0:	100d883a 	mov	r6,r2
100072f4:	180f883a 	mov	r7,r3
100072f8:	000e9bc0 	call	1000e9bc <__subdf3>
100072fc:	1823883a 	mov	r17,r3
10007300:	d8c00717 	ldw	r3,28(sp)
10007304:	d9401217 	ldw	r5,72(sp)
10007308:	a2000c04 	addi	r8,r20,48
1000730c:	1021883a 	mov	r16,r2
10007310:	1a000005 	stb	r8,0(r3)
10007314:	800d883a 	mov	r6,r16
10007318:	880f883a 	mov	r7,r17
1000731c:	a809883a 	mov	r4,r21
10007320:	4029883a 	mov	r20,r8
10007324:	000df800 	call	1000df80 <__gedf2>
10007328:	00841d16 	blt	zero,r2,100083a0 <_dtoa_r+0x15f4>
1000732c:	800d883a 	mov	r6,r16
10007330:	880f883a 	mov	r7,r17
10007334:	0009883a 	mov	r4,zero
10007338:	014ffc34 	movhi	r5,16368
1000733c:	000e9bc0 	call	1000e9bc <__subdf3>
10007340:	d9401217 	ldw	r5,72(sp)
10007344:	100d883a 	mov	r6,r2
10007348:	180f883a 	mov	r7,r3
1000734c:	a809883a 	mov	r4,r21
10007350:	000df800 	call	1000df80 <__gedf2>
10007354:	db001617 	ldw	r12,88(sp)
10007358:	00840e16 	blt	zero,r2,10008394 <_dtoa_r+0x15e8>
1000735c:	00800044 	movi	r2,1
10007360:	13006b0e 	bge	r2,r12,10007510 <_dtoa_r+0x764>
10007364:	d9000717 	ldw	r4,28(sp)
10007368:	dd800f15 	stw	r22,60(sp)
1000736c:	dcc01015 	stw	r19,64(sp)
10007370:	2319883a 	add	r12,r4,r12
10007374:	dcc01217 	ldw	r19,72(sp)
10007378:	602d883a 	mov	r22,r12
1000737c:	dc801215 	stw	r18,72(sp)
10007380:	b825883a 	mov	r18,r23
10007384:	00000906 	br	100073ac <_dtoa_r+0x600>
10007388:	000e9bc0 	call	1000e9bc <__subdf3>
1000738c:	a80d883a 	mov	r6,r21
10007390:	980f883a 	mov	r7,r19
10007394:	1009883a 	mov	r4,r2
10007398:	180b883a 	mov	r5,r3
1000739c:	000e05c0 	call	1000e05c <__ledf2>
100073a0:	1003e816 	blt	r2,zero,10008344 <_dtoa_r+0x1598>
100073a4:	b825883a 	mov	r18,r23
100073a8:	bd83e926 	beq	r23,r22,10008350 <_dtoa_r+0x15a4>
100073ac:	a809883a 	mov	r4,r21
100073b0:	980b883a 	mov	r5,r19
100073b4:	000d883a 	mov	r6,zero
100073b8:	01d00934 	movhi	r7,16420
100073bc:	000e1500 	call	1000e150 <__muldf3>
100073c0:	000d883a 	mov	r6,zero
100073c4:	01d00934 	movhi	r7,16420
100073c8:	8009883a 	mov	r4,r16
100073cc:	880b883a 	mov	r5,r17
100073d0:	102b883a 	mov	r21,r2
100073d4:	1827883a 	mov	r19,r3
100073d8:	000e1500 	call	1000e150 <__muldf3>
100073dc:	180b883a 	mov	r5,r3
100073e0:	1009883a 	mov	r4,r2
100073e4:	1821883a 	mov	r16,r3
100073e8:	1023883a 	mov	r17,r2
100073ec:	000f2b80 	call	1000f2b8 <__fixdfsi>
100073f0:	1009883a 	mov	r4,r2
100073f4:	1029883a 	mov	r20,r2
100073f8:	000f3380 	call	1000f338 <__floatsidf>
100073fc:	8809883a 	mov	r4,r17
10007400:	800b883a 	mov	r5,r16
10007404:	100d883a 	mov	r6,r2
10007408:	180f883a 	mov	r7,r3
1000740c:	000e9bc0 	call	1000e9bc <__subdf3>
10007410:	a5000c04 	addi	r20,r20,48
10007414:	a80d883a 	mov	r6,r21
10007418:	980f883a 	mov	r7,r19
1000741c:	1009883a 	mov	r4,r2
10007420:	180b883a 	mov	r5,r3
10007424:	95000005 	stb	r20,0(r18)
10007428:	1021883a 	mov	r16,r2
1000742c:	1823883a 	mov	r17,r3
10007430:	000e05c0 	call	1000e05c <__ledf2>
10007434:	bdc00044 	addi	r23,r23,1
10007438:	800d883a 	mov	r6,r16
1000743c:	880f883a 	mov	r7,r17
10007440:	0009883a 	mov	r4,zero
10007444:	014ffc34 	movhi	r5,16368
10007448:	103fcf0e 	bge	r2,zero,10007388 <__alt_data_end+0xf8007388>
1000744c:	d8c01317 	ldw	r3,76(sp)
10007450:	d8c00515 	stw	r3,20(sp)
10007454:	d9400917 	ldw	r5,36(sp)
10007458:	e009883a 	mov	r4,fp
1000745c:	0008d740 	call	10008d74 <_Bfree>
10007460:	d9000517 	ldw	r4,20(sp)
10007464:	d9802317 	ldw	r6,140(sp)
10007468:	d9c02517 	ldw	r7,148(sp)
1000746c:	b8000005 	stb	zero,0(r23)
10007470:	20800044 	addi	r2,r4,1
10007474:	30800015 	stw	r2,0(r6)
10007478:	3802aa26 	beq	r7,zero,10007f24 <_dtoa_r+0x1178>
1000747c:	3dc00015 	stw	r23,0(r7)
10007480:	d8800717 	ldw	r2,28(sp)
10007484:	003e7906 	br	10006e6c <__alt_data_end+0xf8006e6c>
10007488:	00800434 	movhi	r2,16
1000748c:	10bfffc4 	addi	r2,r2,-1
10007490:	88a2703a 	and	r17,r17,r2
10007494:	883e851e 	bne	r17,zero,10006eac <__alt_data_end+0xf8006eac>
10007498:	00840074 	movhi	r2,4097
1000749c:	10877204 	addi	r2,r2,7624
100074a0:	003e8406 	br	10006eb4 <__alt_data_end+0xf8006eb4>
100074a4:	10c00204 	addi	r3,r2,8
100074a8:	003e8706 	br	10006ec8 <__alt_data_end+0xf8006ec8>
100074ac:	01400434 	movhi	r5,16
100074b0:	297fffc4 	addi	r5,r5,-1
100074b4:	994a703a 	and	r5,r19,r5
100074b8:	9009883a 	mov	r4,r18
100074bc:	843f0044 	addi	r16,r16,-1023
100074c0:	294ffc34 	orhi	r5,r5,16368
100074c4:	dd800217 	ldw	r22,8(sp)
100074c8:	d8001115 	stw	zero,68(sp)
100074cc:	003ea506 	br	10006f64 <__alt_data_end+0xf8006f64>
100074d0:	00840074 	movhi	r2,4097
100074d4:	10876904 	addi	r2,r2,7588
100074d8:	003e6406 	br	10006e6c <__alt_data_end+0xf8006e6c>
100074dc:	e0001115 	stw	zero,68(fp)
100074e0:	000b883a 	mov	r5,zero
100074e4:	e009883a 	mov	r4,fp
100074e8:	0008ccc0 	call	10008ccc <_Balloc>
100074ec:	01bfffc4 	movi	r6,-1
100074f0:	01c00044 	movi	r7,1
100074f4:	d8800715 	stw	r2,28(sp)
100074f8:	d9800c15 	stw	r6,48(sp)
100074fc:	e0801015 	stw	r2,64(fp)
10007500:	d8000315 	stw	zero,12(sp)
10007504:	d9c00b15 	stw	r7,44(sp)
10007508:	d9800615 	stw	r6,24(sp)
1000750c:	d8002215 	stw	zero,136(sp)
10007510:	d8800117 	ldw	r2,4(sp)
10007514:	10008916 	blt	r2,zero,1000773c <_dtoa_r+0x990>
10007518:	d9000517 	ldw	r4,20(sp)
1000751c:	00c00384 	movi	r3,14
10007520:	19008616 	blt	r3,r4,1000773c <_dtoa_r+0x990>
10007524:	200490fa 	slli	r2,r4,3
10007528:	00c40074 	movhi	r3,4097
1000752c:	d9802217 	ldw	r6,136(sp)
10007530:	18c79004 	addi	r3,r3,7744
10007534:	1885883a 	add	r2,r3,r2
10007538:	14000017 	ldw	r16,0(r2)
1000753c:	14400117 	ldw	r17,4(r2)
10007540:	30016316 	blt	r6,zero,10007ad0 <_dtoa_r+0xd24>
10007544:	800d883a 	mov	r6,r16
10007548:	880f883a 	mov	r7,r17
1000754c:	9009883a 	mov	r4,r18
10007550:	980b883a 	mov	r5,r19
10007554:	000d5280 	call	1000d528 <__divdf3>
10007558:	180b883a 	mov	r5,r3
1000755c:	1009883a 	mov	r4,r2
10007560:	000f2b80 	call	1000f2b8 <__fixdfsi>
10007564:	1009883a 	mov	r4,r2
10007568:	102b883a 	mov	r21,r2
1000756c:	000f3380 	call	1000f338 <__floatsidf>
10007570:	800d883a 	mov	r6,r16
10007574:	880f883a 	mov	r7,r17
10007578:	1009883a 	mov	r4,r2
1000757c:	180b883a 	mov	r5,r3
10007580:	000e1500 	call	1000e150 <__muldf3>
10007584:	100d883a 	mov	r6,r2
10007588:	180f883a 	mov	r7,r3
1000758c:	9009883a 	mov	r4,r18
10007590:	980b883a 	mov	r5,r19
10007594:	000e9bc0 	call	1000e9bc <__subdf3>
10007598:	d9c00717 	ldw	r7,28(sp)
1000759c:	1009883a 	mov	r4,r2
100075a0:	a8800c04 	addi	r2,r21,48
100075a4:	38800005 	stb	r2,0(r7)
100075a8:	3dc00044 	addi	r23,r7,1
100075ac:	d9c00617 	ldw	r7,24(sp)
100075b0:	01800044 	movi	r6,1
100075b4:	180b883a 	mov	r5,r3
100075b8:	2005883a 	mov	r2,r4
100075bc:	39803826 	beq	r7,r6,100076a0 <_dtoa_r+0x8f4>
100075c0:	000d883a 	mov	r6,zero
100075c4:	01d00934 	movhi	r7,16420
100075c8:	000e1500 	call	1000e150 <__muldf3>
100075cc:	000d883a 	mov	r6,zero
100075d0:	000f883a 	mov	r7,zero
100075d4:	1009883a 	mov	r4,r2
100075d8:	180b883a 	mov	r5,r3
100075dc:	1025883a 	mov	r18,r2
100075e0:	1827883a 	mov	r19,r3
100075e4:	000def80 	call	1000def8 <__eqdf2>
100075e8:	103f9a26 	beq	r2,zero,10007454 <__alt_data_end+0xf8007454>
100075ec:	d9c00617 	ldw	r7,24(sp)
100075f0:	d8c00717 	ldw	r3,28(sp)
100075f4:	b829883a 	mov	r20,r23
100075f8:	38bfffc4 	addi	r2,r7,-1
100075fc:	18ad883a 	add	r22,r3,r2
10007600:	00000a06 	br	1000762c <_dtoa_r+0x880>
10007604:	000e1500 	call	1000e150 <__muldf3>
10007608:	000d883a 	mov	r6,zero
1000760c:	000f883a 	mov	r7,zero
10007610:	1009883a 	mov	r4,r2
10007614:	180b883a 	mov	r5,r3
10007618:	1025883a 	mov	r18,r2
1000761c:	1827883a 	mov	r19,r3
10007620:	b829883a 	mov	r20,r23
10007624:	000def80 	call	1000def8 <__eqdf2>
10007628:	103f8a26 	beq	r2,zero,10007454 <__alt_data_end+0xf8007454>
1000762c:	800d883a 	mov	r6,r16
10007630:	880f883a 	mov	r7,r17
10007634:	9009883a 	mov	r4,r18
10007638:	980b883a 	mov	r5,r19
1000763c:	000d5280 	call	1000d528 <__divdf3>
10007640:	180b883a 	mov	r5,r3
10007644:	1009883a 	mov	r4,r2
10007648:	000f2b80 	call	1000f2b8 <__fixdfsi>
1000764c:	1009883a 	mov	r4,r2
10007650:	102b883a 	mov	r21,r2
10007654:	000f3380 	call	1000f338 <__floatsidf>
10007658:	800d883a 	mov	r6,r16
1000765c:	880f883a 	mov	r7,r17
10007660:	1009883a 	mov	r4,r2
10007664:	180b883a 	mov	r5,r3
10007668:	000e1500 	call	1000e150 <__muldf3>
1000766c:	100d883a 	mov	r6,r2
10007670:	180f883a 	mov	r7,r3
10007674:	9009883a 	mov	r4,r18
10007678:	980b883a 	mov	r5,r19
1000767c:	000e9bc0 	call	1000e9bc <__subdf3>
10007680:	aa000c04 	addi	r8,r21,48
10007684:	a2000005 	stb	r8,0(r20)
10007688:	000d883a 	mov	r6,zero
1000768c:	01d00934 	movhi	r7,16420
10007690:	1009883a 	mov	r4,r2
10007694:	180b883a 	mov	r5,r3
10007698:	a5c00044 	addi	r23,r20,1
1000769c:	b53fd91e 	bne	r22,r20,10007604 <__alt_data_end+0xf8007604>
100076a0:	100d883a 	mov	r6,r2
100076a4:	180f883a 	mov	r7,r3
100076a8:	1009883a 	mov	r4,r2
100076ac:	180b883a 	mov	r5,r3
100076b0:	000cc7c0 	call	1000cc7c <__adddf3>
100076b4:	100d883a 	mov	r6,r2
100076b8:	180f883a 	mov	r7,r3
100076bc:	8009883a 	mov	r4,r16
100076c0:	880b883a 	mov	r5,r17
100076c4:	1027883a 	mov	r19,r2
100076c8:	1825883a 	mov	r18,r3
100076cc:	000e05c0 	call	1000e05c <__ledf2>
100076d0:	10000816 	blt	r2,zero,100076f4 <_dtoa_r+0x948>
100076d4:	980d883a 	mov	r6,r19
100076d8:	900f883a 	mov	r7,r18
100076dc:	8009883a 	mov	r4,r16
100076e0:	880b883a 	mov	r5,r17
100076e4:	000def80 	call	1000def8 <__eqdf2>
100076e8:	103f5a1e 	bne	r2,zero,10007454 <__alt_data_end+0xf8007454>
100076ec:	ad40004c 	andi	r21,r21,1
100076f0:	a83f5826 	beq	r21,zero,10007454 <__alt_data_end+0xf8007454>
100076f4:	bd3fffc3 	ldbu	r20,-1(r23)
100076f8:	b8bfffc4 	addi	r2,r23,-1
100076fc:	1007883a 	mov	r3,r2
10007700:	01400e44 	movi	r5,57
10007704:	d9800717 	ldw	r6,28(sp)
10007708:	00000506 	br	10007720 <_dtoa_r+0x974>
1000770c:	18ffffc4 	addi	r3,r3,-1
10007710:	11824726 	beq	r2,r6,10008030 <_dtoa_r+0x1284>
10007714:	1d000003 	ldbu	r20,0(r3)
10007718:	102f883a 	mov	r23,r2
1000771c:	10bfffc4 	addi	r2,r2,-1
10007720:	a1003fcc 	andi	r4,r20,255
10007724:	2100201c 	xori	r4,r4,128
10007728:	213fe004 	addi	r4,r4,-128
1000772c:	217ff726 	beq	r4,r5,1000770c <__alt_data_end+0xf800770c>
10007730:	a2000044 	addi	r8,r20,1
10007734:	12000005 	stb	r8,0(r2)
10007738:	003f4606 	br	10007454 <__alt_data_end+0xf8007454>
1000773c:	d9000b17 	ldw	r4,44(sp)
10007740:	2000c826 	beq	r4,zero,10007a64 <_dtoa_r+0xcb8>
10007744:	d9800317 	ldw	r6,12(sp)
10007748:	00c00044 	movi	r3,1
1000774c:	1980f90e 	bge	r3,r6,10007b34 <_dtoa_r+0xd88>
10007750:	d8800617 	ldw	r2,24(sp)
10007754:	d8c00a17 	ldw	r3,40(sp)
10007758:	157fffc4 	addi	r21,r2,-1
1000775c:	1d41f316 	blt	r3,r21,10007f2c <_dtoa_r+0x1180>
10007760:	1d6bc83a 	sub	r21,r3,r21
10007764:	d9c00617 	ldw	r7,24(sp)
10007768:	3802aa16 	blt	r7,zero,10008214 <_dtoa_r+0x1468>
1000776c:	dd000817 	ldw	r20,32(sp)
10007770:	d8800617 	ldw	r2,24(sp)
10007774:	d8c00817 	ldw	r3,32(sp)
10007778:	01400044 	movi	r5,1
1000777c:	e009883a 	mov	r4,fp
10007780:	1887883a 	add	r3,r3,r2
10007784:	d8c00815 	stw	r3,32(sp)
10007788:	b0ad883a 	add	r22,r22,r2
1000778c:	00091000 	call	10009100 <__i2b>
10007790:	1023883a 	mov	r17,r2
10007794:	a0000826 	beq	r20,zero,100077b8 <_dtoa_r+0xa0c>
10007798:	0580070e 	bge	zero,r22,100077b8 <_dtoa_r+0xa0c>
1000779c:	a005883a 	mov	r2,r20
100077a0:	b500b916 	blt	r22,r20,10007a88 <_dtoa_r+0xcdc>
100077a4:	d9000817 	ldw	r4,32(sp)
100077a8:	a0a9c83a 	sub	r20,r20,r2
100077ac:	b0adc83a 	sub	r22,r22,r2
100077b0:	2089c83a 	sub	r4,r4,r2
100077b4:	d9000815 	stw	r4,32(sp)
100077b8:	d9800a17 	ldw	r6,40(sp)
100077bc:	0181810e 	bge	zero,r6,10007dc4 <_dtoa_r+0x1018>
100077c0:	d9c00b17 	ldw	r7,44(sp)
100077c4:	3800b326 	beq	r7,zero,10007a94 <_dtoa_r+0xce8>
100077c8:	a800b226 	beq	r21,zero,10007a94 <_dtoa_r+0xce8>
100077cc:	880b883a 	mov	r5,r17
100077d0:	a80d883a 	mov	r6,r21
100077d4:	e009883a 	mov	r4,fp
100077d8:	00093c80 	call	100093c8 <__pow5mult>
100077dc:	d9800917 	ldw	r6,36(sp)
100077e0:	100b883a 	mov	r5,r2
100077e4:	e009883a 	mov	r4,fp
100077e8:	1023883a 	mov	r17,r2
100077ec:	000913c0 	call	1000913c <__multiply>
100077f0:	1021883a 	mov	r16,r2
100077f4:	d8800a17 	ldw	r2,40(sp)
100077f8:	d9400917 	ldw	r5,36(sp)
100077fc:	e009883a 	mov	r4,fp
10007800:	1545c83a 	sub	r2,r2,r21
10007804:	d8800a15 	stw	r2,40(sp)
10007808:	0008d740 	call	10008d74 <_Bfree>
1000780c:	d8c00a17 	ldw	r3,40(sp)
10007810:	18009f1e 	bne	r3,zero,10007a90 <_dtoa_r+0xce4>
10007814:	05c00044 	movi	r23,1
10007818:	e009883a 	mov	r4,fp
1000781c:	b80b883a 	mov	r5,r23
10007820:	00091000 	call	10009100 <__i2b>
10007824:	d9000d17 	ldw	r4,52(sp)
10007828:	102b883a 	mov	r21,r2
1000782c:	2000ce26 	beq	r4,zero,10007b68 <_dtoa_r+0xdbc>
10007830:	200d883a 	mov	r6,r4
10007834:	100b883a 	mov	r5,r2
10007838:	e009883a 	mov	r4,fp
1000783c:	00093c80 	call	100093c8 <__pow5mult>
10007840:	d9800317 	ldw	r6,12(sp)
10007844:	102b883a 	mov	r21,r2
10007848:	b981810e 	bge	r23,r6,10007e50 <_dtoa_r+0x10a4>
1000784c:	0027883a 	mov	r19,zero
10007850:	a8800417 	ldw	r2,16(r21)
10007854:	05c00804 	movi	r23,32
10007858:	10800104 	addi	r2,r2,4
1000785c:	1085883a 	add	r2,r2,r2
10007860:	1085883a 	add	r2,r2,r2
10007864:	a885883a 	add	r2,r21,r2
10007868:	11000017 	ldw	r4,0(r2)
1000786c:	0008fe80 	call	10008fe8 <__hi0bits>
10007870:	b885c83a 	sub	r2,r23,r2
10007874:	1585883a 	add	r2,r2,r22
10007878:	108007cc 	andi	r2,r2,31
1000787c:	1000b326 	beq	r2,zero,10007b4c <_dtoa_r+0xda0>
10007880:	00c00804 	movi	r3,32
10007884:	1887c83a 	sub	r3,r3,r2
10007888:	01000104 	movi	r4,4
1000788c:	20c2cd0e 	bge	r4,r3,100083c4 <_dtoa_r+0x1618>
10007890:	00c00704 	movi	r3,28
10007894:	1885c83a 	sub	r2,r3,r2
10007898:	d8c00817 	ldw	r3,32(sp)
1000789c:	a0a9883a 	add	r20,r20,r2
100078a0:	b0ad883a 	add	r22,r22,r2
100078a4:	1887883a 	add	r3,r3,r2
100078a8:	d8c00815 	stw	r3,32(sp)
100078ac:	d9800817 	ldw	r6,32(sp)
100078b0:	0180040e 	bge	zero,r6,100078c4 <_dtoa_r+0xb18>
100078b4:	800b883a 	mov	r5,r16
100078b8:	e009883a 	mov	r4,fp
100078bc:	00095080 	call	10009508 <__lshift>
100078c0:	1021883a 	mov	r16,r2
100078c4:	0580050e 	bge	zero,r22,100078dc <_dtoa_r+0xb30>
100078c8:	a80b883a 	mov	r5,r21
100078cc:	b00d883a 	mov	r6,r22
100078d0:	e009883a 	mov	r4,fp
100078d4:	00095080 	call	10009508 <__lshift>
100078d8:	102b883a 	mov	r21,r2
100078dc:	d9c00e17 	ldw	r7,56(sp)
100078e0:	3801211e 	bne	r7,zero,10007d68 <_dtoa_r+0xfbc>
100078e4:	d9800617 	ldw	r6,24(sp)
100078e8:	0181380e 	bge	zero,r6,10007dcc <_dtoa_r+0x1020>
100078ec:	d8c00b17 	ldw	r3,44(sp)
100078f0:	1800ab1e 	bne	r3,zero,10007ba0 <_dtoa_r+0xdf4>
100078f4:	dc800717 	ldw	r18,28(sp)
100078f8:	dcc00617 	ldw	r19,24(sp)
100078fc:	9029883a 	mov	r20,r18
10007900:	00000206 	br	1000790c <_dtoa_r+0xb60>
10007904:	0008d9c0 	call	10008d9c <__multadd>
10007908:	1021883a 	mov	r16,r2
1000790c:	a80b883a 	mov	r5,r21
10007910:	8009883a 	mov	r4,r16
10007914:	0006b840 	call	10006b84 <quorem>
10007918:	10800c04 	addi	r2,r2,48
1000791c:	90800005 	stb	r2,0(r18)
10007920:	94800044 	addi	r18,r18,1
10007924:	9507c83a 	sub	r3,r18,r20
10007928:	000f883a 	mov	r7,zero
1000792c:	01800284 	movi	r6,10
10007930:	800b883a 	mov	r5,r16
10007934:	e009883a 	mov	r4,fp
10007938:	1cfff216 	blt	r3,r19,10007904 <__alt_data_end+0xf8007904>
1000793c:	1011883a 	mov	r8,r2
10007940:	d8800617 	ldw	r2,24(sp)
10007944:	0082370e 	bge	zero,r2,10008224 <_dtoa_r+0x1478>
10007948:	d9000717 	ldw	r4,28(sp)
1000794c:	0025883a 	mov	r18,zero
10007950:	20af883a 	add	r23,r4,r2
10007954:	01800044 	movi	r6,1
10007958:	800b883a 	mov	r5,r16
1000795c:	e009883a 	mov	r4,fp
10007960:	da001715 	stw	r8,92(sp)
10007964:	00095080 	call	10009508 <__lshift>
10007968:	a80b883a 	mov	r5,r21
1000796c:	1009883a 	mov	r4,r2
10007970:	d8800915 	stw	r2,36(sp)
10007974:	00096500 	call	10009650 <__mcmp>
10007978:	da001717 	ldw	r8,92(sp)
1000797c:	0081800e 	bge	zero,r2,10007f80 <_dtoa_r+0x11d4>
10007980:	b93fffc3 	ldbu	r4,-1(r23)
10007984:	b8bfffc4 	addi	r2,r23,-1
10007988:	1007883a 	mov	r3,r2
1000798c:	01800e44 	movi	r6,57
10007990:	d9c00717 	ldw	r7,28(sp)
10007994:	00000506 	br	100079ac <_dtoa_r+0xc00>
10007998:	18ffffc4 	addi	r3,r3,-1
1000799c:	11c12326 	beq	r2,r7,10007e2c <_dtoa_r+0x1080>
100079a0:	19000003 	ldbu	r4,0(r3)
100079a4:	102f883a 	mov	r23,r2
100079a8:	10bfffc4 	addi	r2,r2,-1
100079ac:	21403fcc 	andi	r5,r4,255
100079b0:	2940201c 	xori	r5,r5,128
100079b4:	297fe004 	addi	r5,r5,-128
100079b8:	29bff726 	beq	r5,r6,10007998 <__alt_data_end+0xf8007998>
100079bc:	21000044 	addi	r4,r4,1
100079c0:	11000005 	stb	r4,0(r2)
100079c4:	a80b883a 	mov	r5,r21
100079c8:	e009883a 	mov	r4,fp
100079cc:	0008d740 	call	10008d74 <_Bfree>
100079d0:	883ea026 	beq	r17,zero,10007454 <__alt_data_end+0xf8007454>
100079d4:	90000426 	beq	r18,zero,100079e8 <_dtoa_r+0xc3c>
100079d8:	94400326 	beq	r18,r17,100079e8 <_dtoa_r+0xc3c>
100079dc:	900b883a 	mov	r5,r18
100079e0:	e009883a 	mov	r4,fp
100079e4:	0008d740 	call	10008d74 <_Bfree>
100079e8:	880b883a 	mov	r5,r17
100079ec:	e009883a 	mov	r4,fp
100079f0:	0008d740 	call	10008d74 <_Bfree>
100079f4:	003e9706 	br	10007454 <__alt_data_end+0xf8007454>
100079f8:	01800044 	movi	r6,1
100079fc:	d9800e15 	stw	r6,56(sp)
10007a00:	003d9606 	br	1000705c <__alt_data_end+0xf800705c>
10007a04:	d8800817 	ldw	r2,32(sp)
10007a08:	d8c00517 	ldw	r3,20(sp)
10007a0c:	d8000d15 	stw	zero,52(sp)
10007a10:	10c5c83a 	sub	r2,r2,r3
10007a14:	00c9c83a 	sub	r4,zero,r3
10007a18:	d8800815 	stw	r2,32(sp)
10007a1c:	d9000a15 	stw	r4,40(sp)
10007a20:	003d9706 	br	10007080 <__alt_data_end+0xf8007080>
10007a24:	05adc83a 	sub	r22,zero,r22
10007a28:	dd800815 	stw	r22,32(sp)
10007a2c:	002d883a 	mov	r22,zero
10007a30:	003d8e06 	br	1000706c <__alt_data_end+0xf800706c>
10007a34:	d9000517 	ldw	r4,20(sp)
10007a38:	000f3380 	call	1000f338 <__floatsidf>
10007a3c:	100d883a 	mov	r6,r2
10007a40:	180f883a 	mov	r7,r3
10007a44:	a009883a 	mov	r4,r20
10007a48:	880b883a 	mov	r5,r17
10007a4c:	000def80 	call	1000def8 <__eqdf2>
10007a50:	103d7126 	beq	r2,zero,10007018 <__alt_data_end+0xf8007018>
10007a54:	d9c00517 	ldw	r7,20(sp)
10007a58:	39ffffc4 	addi	r7,r7,-1
10007a5c:	d9c00515 	stw	r7,20(sp)
10007a60:	003d6d06 	br	10007018 <__alt_data_end+0xf8007018>
10007a64:	dd400a17 	ldw	r21,40(sp)
10007a68:	dd000817 	ldw	r20,32(sp)
10007a6c:	0023883a 	mov	r17,zero
10007a70:	003f4806 	br	10007794 <__alt_data_end+0xf8007794>
10007a74:	10e3c83a 	sub	r17,r2,r3
10007a78:	9448983a 	sll	r4,r18,r17
10007a7c:	003d3206 	br	10006f48 <__alt_data_end+0xf8006f48>
10007a80:	d8000e15 	stw	zero,56(sp)
10007a84:	003d7506 	br	1000705c <__alt_data_end+0xf800705c>
10007a88:	b005883a 	mov	r2,r22
10007a8c:	003f4506 	br	100077a4 <__alt_data_end+0xf80077a4>
10007a90:	dc000915 	stw	r16,36(sp)
10007a94:	d9800a17 	ldw	r6,40(sp)
10007a98:	d9400917 	ldw	r5,36(sp)
10007a9c:	e009883a 	mov	r4,fp
10007aa0:	00093c80 	call	100093c8 <__pow5mult>
10007aa4:	1021883a 	mov	r16,r2
10007aa8:	003f5a06 	br	10007814 <__alt_data_end+0xf8007814>
10007aac:	01c00044 	movi	r7,1
10007ab0:	d9c00b15 	stw	r7,44(sp)
10007ab4:	d8802217 	ldw	r2,136(sp)
10007ab8:	0081280e 	bge	zero,r2,10007f5c <_dtoa_r+0x11b0>
10007abc:	100d883a 	mov	r6,r2
10007ac0:	1021883a 	mov	r16,r2
10007ac4:	d8800c15 	stw	r2,48(sp)
10007ac8:	d8800615 	stw	r2,24(sp)
10007acc:	003d8806 	br	100070f0 <__alt_data_end+0xf80070f0>
10007ad0:	d8800617 	ldw	r2,24(sp)
10007ad4:	00be9b16 	blt	zero,r2,10007544 <__alt_data_end+0xf8007544>
10007ad8:	10010f1e 	bne	r2,zero,10007f18 <_dtoa_r+0x116c>
10007adc:	880b883a 	mov	r5,r17
10007ae0:	000d883a 	mov	r6,zero
10007ae4:	01d00534 	movhi	r7,16404
10007ae8:	8009883a 	mov	r4,r16
10007aec:	000e1500 	call	1000e150 <__muldf3>
10007af0:	900d883a 	mov	r6,r18
10007af4:	980f883a 	mov	r7,r19
10007af8:	1009883a 	mov	r4,r2
10007afc:	180b883a 	mov	r5,r3
10007b00:	000df800 	call	1000df80 <__gedf2>
10007b04:	002b883a 	mov	r21,zero
10007b08:	0023883a 	mov	r17,zero
10007b0c:	1000bf16 	blt	r2,zero,10007e0c <_dtoa_r+0x1060>
10007b10:	d9802217 	ldw	r6,136(sp)
10007b14:	ddc00717 	ldw	r23,28(sp)
10007b18:	018c303a 	nor	r6,zero,r6
10007b1c:	d9800515 	stw	r6,20(sp)
10007b20:	a80b883a 	mov	r5,r21
10007b24:	e009883a 	mov	r4,fp
10007b28:	0008d740 	call	10008d74 <_Bfree>
10007b2c:	883e4926 	beq	r17,zero,10007454 <__alt_data_end+0xf8007454>
10007b30:	003fad06 	br	100079e8 <__alt_data_end+0xf80079e8>
10007b34:	d9c01117 	ldw	r7,68(sp)
10007b38:	3801bc26 	beq	r7,zero,1000822c <_dtoa_r+0x1480>
10007b3c:	10810cc4 	addi	r2,r2,1075
10007b40:	dd400a17 	ldw	r21,40(sp)
10007b44:	dd000817 	ldw	r20,32(sp)
10007b48:	003f0a06 	br	10007774 <__alt_data_end+0xf8007774>
10007b4c:	00800704 	movi	r2,28
10007b50:	d9000817 	ldw	r4,32(sp)
10007b54:	a0a9883a 	add	r20,r20,r2
10007b58:	b0ad883a 	add	r22,r22,r2
10007b5c:	2089883a 	add	r4,r4,r2
10007b60:	d9000815 	stw	r4,32(sp)
10007b64:	003f5106 	br	100078ac <__alt_data_end+0xf80078ac>
10007b68:	d8c00317 	ldw	r3,12(sp)
10007b6c:	b8c1fc0e 	bge	r23,r3,10008360 <_dtoa_r+0x15b4>
10007b70:	0027883a 	mov	r19,zero
10007b74:	b805883a 	mov	r2,r23
10007b78:	003f3e06 	br	10007874 <__alt_data_end+0xf8007874>
10007b7c:	880b883a 	mov	r5,r17
10007b80:	e009883a 	mov	r4,fp
10007b84:	000f883a 	mov	r7,zero
10007b88:	01800284 	movi	r6,10
10007b8c:	0008d9c0 	call	10008d9c <__multadd>
10007b90:	d9000c17 	ldw	r4,48(sp)
10007b94:	1023883a 	mov	r17,r2
10007b98:	0102040e 	bge	zero,r4,100083ac <_dtoa_r+0x1600>
10007b9c:	d9000615 	stw	r4,24(sp)
10007ba0:	0500050e 	bge	zero,r20,10007bb8 <_dtoa_r+0xe0c>
10007ba4:	880b883a 	mov	r5,r17
10007ba8:	a00d883a 	mov	r6,r20
10007bac:	e009883a 	mov	r4,fp
10007bb0:	00095080 	call	10009508 <__lshift>
10007bb4:	1023883a 	mov	r17,r2
10007bb8:	9801241e 	bne	r19,zero,1000804c <_dtoa_r+0x12a0>
10007bbc:	8829883a 	mov	r20,r17
10007bc0:	d9000617 	ldw	r4,24(sp)
10007bc4:	dcc00717 	ldw	r19,28(sp)
10007bc8:	9480004c 	andi	r18,r18,1
10007bcc:	20bfffc4 	addi	r2,r4,-1
10007bd0:	9885883a 	add	r2,r19,r2
10007bd4:	d8800415 	stw	r2,16(sp)
10007bd8:	dc800615 	stw	r18,24(sp)
10007bdc:	a80b883a 	mov	r5,r21
10007be0:	8009883a 	mov	r4,r16
10007be4:	0006b840 	call	10006b84 <quorem>
10007be8:	880b883a 	mov	r5,r17
10007bec:	8009883a 	mov	r4,r16
10007bf0:	102f883a 	mov	r23,r2
10007bf4:	00096500 	call	10009650 <__mcmp>
10007bf8:	a80b883a 	mov	r5,r21
10007bfc:	a00d883a 	mov	r6,r20
10007c00:	e009883a 	mov	r4,fp
10007c04:	102d883a 	mov	r22,r2
10007c08:	00096b00 	call	100096b0 <__mdiff>
10007c0c:	1007883a 	mov	r3,r2
10007c10:	10800317 	ldw	r2,12(r2)
10007c14:	bc800c04 	addi	r18,r23,48
10007c18:	180b883a 	mov	r5,r3
10007c1c:	10004e1e 	bne	r2,zero,10007d58 <_dtoa_r+0xfac>
10007c20:	8009883a 	mov	r4,r16
10007c24:	d8c01615 	stw	r3,88(sp)
10007c28:	00096500 	call	10009650 <__mcmp>
10007c2c:	d8c01617 	ldw	r3,88(sp)
10007c30:	e009883a 	mov	r4,fp
10007c34:	d8801615 	stw	r2,88(sp)
10007c38:	180b883a 	mov	r5,r3
10007c3c:	0008d740 	call	10008d74 <_Bfree>
10007c40:	d8801617 	ldw	r2,88(sp)
10007c44:	1000041e 	bne	r2,zero,10007c58 <_dtoa_r+0xeac>
10007c48:	d9800317 	ldw	r6,12(sp)
10007c4c:	3000021e 	bne	r6,zero,10007c58 <_dtoa_r+0xeac>
10007c50:	d8c00617 	ldw	r3,24(sp)
10007c54:	18003726 	beq	r3,zero,10007d34 <_dtoa_r+0xf88>
10007c58:	b0002016 	blt	r22,zero,10007cdc <_dtoa_r+0xf30>
10007c5c:	b000041e 	bne	r22,zero,10007c70 <_dtoa_r+0xec4>
10007c60:	d9000317 	ldw	r4,12(sp)
10007c64:	2000021e 	bne	r4,zero,10007c70 <_dtoa_r+0xec4>
10007c68:	d8c00617 	ldw	r3,24(sp)
10007c6c:	18001b26 	beq	r3,zero,10007cdc <_dtoa_r+0xf30>
10007c70:	00810716 	blt	zero,r2,10008090 <_dtoa_r+0x12e4>
10007c74:	d8c00417 	ldw	r3,16(sp)
10007c78:	9d800044 	addi	r22,r19,1
10007c7c:	9c800005 	stb	r18,0(r19)
10007c80:	b02f883a 	mov	r23,r22
10007c84:	98c10626 	beq	r19,r3,100080a0 <_dtoa_r+0x12f4>
10007c88:	800b883a 	mov	r5,r16
10007c8c:	000f883a 	mov	r7,zero
10007c90:	01800284 	movi	r6,10
10007c94:	e009883a 	mov	r4,fp
10007c98:	0008d9c0 	call	10008d9c <__multadd>
10007c9c:	1021883a 	mov	r16,r2
10007ca0:	000f883a 	mov	r7,zero
10007ca4:	01800284 	movi	r6,10
10007ca8:	880b883a 	mov	r5,r17
10007cac:	e009883a 	mov	r4,fp
10007cb0:	8d002526 	beq	r17,r20,10007d48 <_dtoa_r+0xf9c>
10007cb4:	0008d9c0 	call	10008d9c <__multadd>
10007cb8:	a00b883a 	mov	r5,r20
10007cbc:	000f883a 	mov	r7,zero
10007cc0:	01800284 	movi	r6,10
10007cc4:	e009883a 	mov	r4,fp
10007cc8:	1023883a 	mov	r17,r2
10007ccc:	0008d9c0 	call	10008d9c <__multadd>
10007cd0:	1029883a 	mov	r20,r2
10007cd4:	b027883a 	mov	r19,r22
10007cd8:	003fc006 	br	10007bdc <__alt_data_end+0xf8007bdc>
10007cdc:	9011883a 	mov	r8,r18
10007ce0:	00800e0e 	bge	zero,r2,10007d1c <_dtoa_r+0xf70>
10007ce4:	800b883a 	mov	r5,r16
10007ce8:	01800044 	movi	r6,1
10007cec:	e009883a 	mov	r4,fp
10007cf0:	da001715 	stw	r8,92(sp)
10007cf4:	00095080 	call	10009508 <__lshift>
10007cf8:	a80b883a 	mov	r5,r21
10007cfc:	1009883a 	mov	r4,r2
10007d00:	1021883a 	mov	r16,r2
10007d04:	00096500 	call	10009650 <__mcmp>
10007d08:	da001717 	ldw	r8,92(sp)
10007d0c:	0081960e 	bge	zero,r2,10008368 <_dtoa_r+0x15bc>
10007d10:	00800e44 	movi	r2,57
10007d14:	40817026 	beq	r8,r2,100082d8 <_dtoa_r+0x152c>
10007d18:	ba000c44 	addi	r8,r23,49
10007d1c:	8825883a 	mov	r18,r17
10007d20:	9dc00044 	addi	r23,r19,1
10007d24:	9a000005 	stb	r8,0(r19)
10007d28:	a023883a 	mov	r17,r20
10007d2c:	dc000915 	stw	r16,36(sp)
10007d30:	003f2406 	br	100079c4 <__alt_data_end+0xf80079c4>
10007d34:	00800e44 	movi	r2,57
10007d38:	9011883a 	mov	r8,r18
10007d3c:	90816626 	beq	r18,r2,100082d8 <_dtoa_r+0x152c>
10007d40:	05bff516 	blt	zero,r22,10007d18 <__alt_data_end+0xf8007d18>
10007d44:	003ff506 	br	10007d1c <__alt_data_end+0xf8007d1c>
10007d48:	0008d9c0 	call	10008d9c <__multadd>
10007d4c:	1023883a 	mov	r17,r2
10007d50:	1029883a 	mov	r20,r2
10007d54:	003fdf06 	br	10007cd4 <__alt_data_end+0xf8007cd4>
10007d58:	e009883a 	mov	r4,fp
10007d5c:	0008d740 	call	10008d74 <_Bfree>
10007d60:	00800044 	movi	r2,1
10007d64:	003fbc06 	br	10007c58 <__alt_data_end+0xf8007c58>
10007d68:	a80b883a 	mov	r5,r21
10007d6c:	8009883a 	mov	r4,r16
10007d70:	00096500 	call	10009650 <__mcmp>
10007d74:	103edb0e 	bge	r2,zero,100078e4 <__alt_data_end+0xf80078e4>
10007d78:	800b883a 	mov	r5,r16
10007d7c:	000f883a 	mov	r7,zero
10007d80:	01800284 	movi	r6,10
10007d84:	e009883a 	mov	r4,fp
10007d88:	0008d9c0 	call	10008d9c <__multadd>
10007d8c:	1021883a 	mov	r16,r2
10007d90:	d8800517 	ldw	r2,20(sp)
10007d94:	d8c00b17 	ldw	r3,44(sp)
10007d98:	10bfffc4 	addi	r2,r2,-1
10007d9c:	d8800515 	stw	r2,20(sp)
10007da0:	183f761e 	bne	r3,zero,10007b7c <__alt_data_end+0xf8007b7c>
10007da4:	d9000c17 	ldw	r4,48(sp)
10007da8:	0101730e 	bge	zero,r4,10008378 <_dtoa_r+0x15cc>
10007dac:	d9000615 	stw	r4,24(sp)
10007db0:	003ed006 	br	100078f4 <__alt_data_end+0xf80078f4>
10007db4:	00800084 	movi	r2,2
10007db8:	3081861e 	bne	r6,r2,100083d4 <_dtoa_r+0x1628>
10007dbc:	d8000b15 	stw	zero,44(sp)
10007dc0:	003f3c06 	br	10007ab4 <__alt_data_end+0xf8007ab4>
10007dc4:	dc000917 	ldw	r16,36(sp)
10007dc8:	003e9206 	br	10007814 <__alt_data_end+0xf8007814>
10007dcc:	d9c00317 	ldw	r7,12(sp)
10007dd0:	00800084 	movi	r2,2
10007dd4:	11fec50e 	bge	r2,r7,100078ec <__alt_data_end+0xf80078ec>
10007dd8:	d9000617 	ldw	r4,24(sp)
10007ddc:	20013c1e 	bne	r4,zero,100082d0 <_dtoa_r+0x1524>
10007de0:	a80b883a 	mov	r5,r21
10007de4:	000f883a 	mov	r7,zero
10007de8:	01800144 	movi	r6,5
10007dec:	e009883a 	mov	r4,fp
10007df0:	0008d9c0 	call	10008d9c <__multadd>
10007df4:	100b883a 	mov	r5,r2
10007df8:	8009883a 	mov	r4,r16
10007dfc:	102b883a 	mov	r21,r2
10007e00:	00096500 	call	10009650 <__mcmp>
10007e04:	dc000915 	stw	r16,36(sp)
10007e08:	00bf410e 	bge	zero,r2,10007b10 <__alt_data_end+0xf8007b10>
10007e0c:	d9c00717 	ldw	r7,28(sp)
10007e10:	00800c44 	movi	r2,49
10007e14:	38800005 	stb	r2,0(r7)
10007e18:	d8800517 	ldw	r2,20(sp)
10007e1c:	3dc00044 	addi	r23,r7,1
10007e20:	10800044 	addi	r2,r2,1
10007e24:	d8800515 	stw	r2,20(sp)
10007e28:	003f3d06 	br	10007b20 <__alt_data_end+0xf8007b20>
10007e2c:	d9800517 	ldw	r6,20(sp)
10007e30:	d9c00717 	ldw	r7,28(sp)
10007e34:	00800c44 	movi	r2,49
10007e38:	31800044 	addi	r6,r6,1
10007e3c:	d9800515 	stw	r6,20(sp)
10007e40:	38800005 	stb	r2,0(r7)
10007e44:	003edf06 	br	100079c4 <__alt_data_end+0xf80079c4>
10007e48:	d8000b15 	stw	zero,44(sp)
10007e4c:	003c9f06 	br	100070cc <__alt_data_end+0xf80070cc>
10007e50:	903e7e1e 	bne	r18,zero,1000784c <__alt_data_end+0xf800784c>
10007e54:	00800434 	movhi	r2,16
10007e58:	10bfffc4 	addi	r2,r2,-1
10007e5c:	9884703a 	and	r2,r19,r2
10007e60:	1000ea1e 	bne	r2,zero,1000820c <_dtoa_r+0x1460>
10007e64:	9cdffc2c 	andhi	r19,r19,32752
10007e68:	9800e826 	beq	r19,zero,1000820c <_dtoa_r+0x1460>
10007e6c:	d9c00817 	ldw	r7,32(sp)
10007e70:	b5800044 	addi	r22,r22,1
10007e74:	04c00044 	movi	r19,1
10007e78:	39c00044 	addi	r7,r7,1
10007e7c:	d9c00815 	stw	r7,32(sp)
10007e80:	d8800d17 	ldw	r2,52(sp)
10007e84:	103e721e 	bne	r2,zero,10007850 <__alt_data_end+0xf8007850>
10007e88:	00800044 	movi	r2,1
10007e8c:	003e7906 	br	10007874 <__alt_data_end+0xf8007874>
10007e90:	8009883a 	mov	r4,r16
10007e94:	000f3380 	call	1000f338 <__floatsidf>
10007e98:	d9800f17 	ldw	r6,60(sp)
10007e9c:	d9c01017 	ldw	r7,64(sp)
10007ea0:	1009883a 	mov	r4,r2
10007ea4:	180b883a 	mov	r5,r3
10007ea8:	000e1500 	call	1000e150 <__muldf3>
10007eac:	000d883a 	mov	r6,zero
10007eb0:	01d00734 	movhi	r7,16412
10007eb4:	1009883a 	mov	r4,r2
10007eb8:	180b883a 	mov	r5,r3
10007ebc:	000cc7c0 	call	1000cc7c <__adddf3>
10007ec0:	047f3034 	movhi	r17,64704
10007ec4:	1021883a 	mov	r16,r2
10007ec8:	1c63883a 	add	r17,r3,r17
10007ecc:	d9000f17 	ldw	r4,60(sp)
10007ed0:	d9401017 	ldw	r5,64(sp)
10007ed4:	000d883a 	mov	r6,zero
10007ed8:	01d00534 	movhi	r7,16404
10007edc:	000e9bc0 	call	1000e9bc <__subdf3>
10007ee0:	800d883a 	mov	r6,r16
10007ee4:	880f883a 	mov	r7,r17
10007ee8:	1009883a 	mov	r4,r2
10007eec:	180b883a 	mov	r5,r3
10007ef0:	102b883a 	mov	r21,r2
10007ef4:	1829883a 	mov	r20,r3
10007ef8:	000df800 	call	1000df80 <__gedf2>
10007efc:	00806c16 	blt	zero,r2,100080b0 <_dtoa_r+0x1304>
10007f00:	89e0003c 	xorhi	r7,r17,32768
10007f04:	800d883a 	mov	r6,r16
10007f08:	a809883a 	mov	r4,r21
10007f0c:	a00b883a 	mov	r5,r20
10007f10:	000e05c0 	call	1000e05c <__ledf2>
10007f14:	103d7e0e 	bge	r2,zero,10007510 <__alt_data_end+0xf8007510>
10007f18:	002b883a 	mov	r21,zero
10007f1c:	0023883a 	mov	r17,zero
10007f20:	003efb06 	br	10007b10 <__alt_data_end+0xf8007b10>
10007f24:	d8800717 	ldw	r2,28(sp)
10007f28:	003bd006 	br	10006e6c <__alt_data_end+0xf8006e6c>
10007f2c:	d9000a17 	ldw	r4,40(sp)
10007f30:	d9800d17 	ldw	r6,52(sp)
10007f34:	dd400a15 	stw	r21,40(sp)
10007f38:	a905c83a 	sub	r2,r21,r4
10007f3c:	308d883a 	add	r6,r6,r2
10007f40:	d9800d15 	stw	r6,52(sp)
10007f44:	002b883a 	mov	r21,zero
10007f48:	003e0606 	br	10007764 <__alt_data_end+0xf8007764>
10007f4c:	9023883a 	mov	r17,r18
10007f50:	9829883a 	mov	r20,r19
10007f54:	04000084 	movi	r16,2
10007f58:	003c9206 	br	100071a4 <__alt_data_end+0xf80071a4>
10007f5c:	04000044 	movi	r16,1
10007f60:	dc000c15 	stw	r16,48(sp)
10007f64:	dc000615 	stw	r16,24(sp)
10007f68:	dc002215 	stw	r16,136(sp)
10007f6c:	e0001115 	stw	zero,68(fp)
10007f70:	000b883a 	mov	r5,zero
10007f74:	003c6906 	br	1000711c <__alt_data_end+0xf800711c>
10007f78:	3021883a 	mov	r16,r6
10007f7c:	003ffb06 	br	10007f6c <__alt_data_end+0xf8007f6c>
10007f80:	1000021e 	bne	r2,zero,10007f8c <_dtoa_r+0x11e0>
10007f84:	4200004c 	andi	r8,r8,1
10007f88:	403e7d1e 	bne	r8,zero,10007980 <__alt_data_end+0xf8007980>
10007f8c:	01000c04 	movi	r4,48
10007f90:	00000106 	br	10007f98 <_dtoa_r+0x11ec>
10007f94:	102f883a 	mov	r23,r2
10007f98:	b8bfffc4 	addi	r2,r23,-1
10007f9c:	10c00007 	ldb	r3,0(r2)
10007fa0:	193ffc26 	beq	r3,r4,10007f94 <__alt_data_end+0xf8007f94>
10007fa4:	003e8706 	br	100079c4 <__alt_data_end+0xf80079c4>
10007fa8:	d8800517 	ldw	r2,20(sp)
10007fac:	00a3c83a 	sub	r17,zero,r2
10007fb0:	8800a426 	beq	r17,zero,10008244 <_dtoa_r+0x1498>
10007fb4:	888003cc 	andi	r2,r17,15
10007fb8:	100490fa 	slli	r2,r2,3
10007fbc:	00c40074 	movhi	r3,4097
10007fc0:	18c79004 	addi	r3,r3,7744
10007fc4:	1885883a 	add	r2,r3,r2
10007fc8:	11800017 	ldw	r6,0(r2)
10007fcc:	11c00117 	ldw	r7,4(r2)
10007fd0:	9009883a 	mov	r4,r18
10007fd4:	980b883a 	mov	r5,r19
10007fd8:	8823d13a 	srai	r17,r17,4
10007fdc:	000e1500 	call	1000e150 <__muldf3>
10007fe0:	d8800f15 	stw	r2,60(sp)
10007fe4:	d8c01015 	stw	r3,64(sp)
10007fe8:	8800e826 	beq	r17,zero,1000838c <_dtoa_r+0x15e0>
10007fec:	05040074 	movhi	r20,4097
10007ff0:	a5078604 	addi	r20,r20,7704
10007ff4:	04000084 	movi	r16,2
10007ff8:	8980004c 	andi	r6,r17,1
10007ffc:	1009883a 	mov	r4,r2
10008000:	8823d07a 	srai	r17,r17,1
10008004:	180b883a 	mov	r5,r3
10008008:	30000426 	beq	r6,zero,1000801c <_dtoa_r+0x1270>
1000800c:	a1800017 	ldw	r6,0(r20)
10008010:	a1c00117 	ldw	r7,4(r20)
10008014:	84000044 	addi	r16,r16,1
10008018:	000e1500 	call	1000e150 <__muldf3>
1000801c:	a5000204 	addi	r20,r20,8
10008020:	883ff51e 	bne	r17,zero,10007ff8 <__alt_data_end+0xf8007ff8>
10008024:	d8800f15 	stw	r2,60(sp)
10008028:	d8c01015 	stw	r3,64(sp)
1000802c:	003c7606 	br	10007208 <__alt_data_end+0xf8007208>
10008030:	00c00c04 	movi	r3,48
10008034:	10c00005 	stb	r3,0(r2)
10008038:	d8c00517 	ldw	r3,20(sp)
1000803c:	bd3fffc3 	ldbu	r20,-1(r23)
10008040:	18c00044 	addi	r3,r3,1
10008044:	d8c00515 	stw	r3,20(sp)
10008048:	003db906 	br	10007730 <__alt_data_end+0xf8007730>
1000804c:	89400117 	ldw	r5,4(r17)
10008050:	e009883a 	mov	r4,fp
10008054:	0008ccc0 	call	10008ccc <_Balloc>
10008058:	89800417 	ldw	r6,16(r17)
1000805c:	89400304 	addi	r5,r17,12
10008060:	11000304 	addi	r4,r2,12
10008064:	31800084 	addi	r6,r6,2
10008068:	318d883a 	add	r6,r6,r6
1000806c:	318d883a 	add	r6,r6,r6
10008070:	1027883a 	mov	r19,r2
10008074:	00033ac0 	call	100033ac <memcpy>
10008078:	01800044 	movi	r6,1
1000807c:	980b883a 	mov	r5,r19
10008080:	e009883a 	mov	r4,fp
10008084:	00095080 	call	10009508 <__lshift>
10008088:	1029883a 	mov	r20,r2
1000808c:	003ecc06 	br	10007bc0 <__alt_data_end+0xf8007bc0>
10008090:	00800e44 	movi	r2,57
10008094:	90809026 	beq	r18,r2,100082d8 <_dtoa_r+0x152c>
10008098:	92000044 	addi	r8,r18,1
1000809c:	003f1f06 	br	10007d1c <__alt_data_end+0xf8007d1c>
100080a0:	9011883a 	mov	r8,r18
100080a4:	8825883a 	mov	r18,r17
100080a8:	a023883a 	mov	r17,r20
100080ac:	003e2906 	br	10007954 <__alt_data_end+0xf8007954>
100080b0:	002b883a 	mov	r21,zero
100080b4:	0023883a 	mov	r17,zero
100080b8:	003f5406 	br	10007e0c <__alt_data_end+0xf8007e0c>
100080bc:	61bfffc4 	addi	r6,r12,-1
100080c0:	300490fa 	slli	r2,r6,3
100080c4:	00c40074 	movhi	r3,4097
100080c8:	18c79004 	addi	r3,r3,7744
100080cc:	1885883a 	add	r2,r3,r2
100080d0:	11000017 	ldw	r4,0(r2)
100080d4:	11400117 	ldw	r5,4(r2)
100080d8:	d8800717 	ldw	r2,28(sp)
100080dc:	880f883a 	mov	r7,r17
100080e0:	d9801215 	stw	r6,72(sp)
100080e4:	800d883a 	mov	r6,r16
100080e8:	db001615 	stw	r12,88(sp)
100080ec:	15c00044 	addi	r23,r2,1
100080f0:	000e1500 	call	1000e150 <__muldf3>
100080f4:	d9401017 	ldw	r5,64(sp)
100080f8:	d9000f17 	ldw	r4,60(sp)
100080fc:	d8c01515 	stw	r3,84(sp)
10008100:	d8801415 	stw	r2,80(sp)
10008104:	000f2b80 	call	1000f2b8 <__fixdfsi>
10008108:	1009883a 	mov	r4,r2
1000810c:	1021883a 	mov	r16,r2
10008110:	000f3380 	call	1000f338 <__floatsidf>
10008114:	d9000f17 	ldw	r4,60(sp)
10008118:	d9401017 	ldw	r5,64(sp)
1000811c:	100d883a 	mov	r6,r2
10008120:	180f883a 	mov	r7,r3
10008124:	000e9bc0 	call	1000e9bc <__subdf3>
10008128:	1829883a 	mov	r20,r3
1000812c:	d8c00717 	ldw	r3,28(sp)
10008130:	84000c04 	addi	r16,r16,48
10008134:	1023883a 	mov	r17,r2
10008138:	1c000005 	stb	r16,0(r3)
1000813c:	db001617 	ldw	r12,88(sp)
10008140:	00800044 	movi	r2,1
10008144:	60802226 	beq	r12,r2,100081d0 <_dtoa_r+0x1424>
10008148:	d9c00717 	ldw	r7,28(sp)
1000814c:	8805883a 	mov	r2,r17
10008150:	b82b883a 	mov	r21,r23
10008154:	3b19883a 	add	r12,r7,r12
10008158:	6023883a 	mov	r17,r12
1000815c:	a007883a 	mov	r3,r20
10008160:	dc800f15 	stw	r18,60(sp)
10008164:	000d883a 	mov	r6,zero
10008168:	01d00934 	movhi	r7,16420
1000816c:	1009883a 	mov	r4,r2
10008170:	180b883a 	mov	r5,r3
10008174:	000e1500 	call	1000e150 <__muldf3>
10008178:	180b883a 	mov	r5,r3
1000817c:	1009883a 	mov	r4,r2
10008180:	1829883a 	mov	r20,r3
10008184:	1025883a 	mov	r18,r2
10008188:	000f2b80 	call	1000f2b8 <__fixdfsi>
1000818c:	1009883a 	mov	r4,r2
10008190:	1021883a 	mov	r16,r2
10008194:	000f3380 	call	1000f338 <__floatsidf>
10008198:	100d883a 	mov	r6,r2
1000819c:	180f883a 	mov	r7,r3
100081a0:	9009883a 	mov	r4,r18
100081a4:	a00b883a 	mov	r5,r20
100081a8:	84000c04 	addi	r16,r16,48
100081ac:	000e9bc0 	call	1000e9bc <__subdf3>
100081b0:	ad400044 	addi	r21,r21,1
100081b4:	ac3fffc5 	stb	r16,-1(r21)
100081b8:	ac7fea1e 	bne	r21,r17,10008164 <__alt_data_end+0xf8008164>
100081bc:	1023883a 	mov	r17,r2
100081c0:	d8801217 	ldw	r2,72(sp)
100081c4:	dc800f17 	ldw	r18,60(sp)
100081c8:	1829883a 	mov	r20,r3
100081cc:	b8af883a 	add	r23,r23,r2
100081d0:	d9001417 	ldw	r4,80(sp)
100081d4:	d9401517 	ldw	r5,84(sp)
100081d8:	000d883a 	mov	r6,zero
100081dc:	01cff834 	movhi	r7,16352
100081e0:	000cc7c0 	call	1000cc7c <__adddf3>
100081e4:	880d883a 	mov	r6,r17
100081e8:	a00f883a 	mov	r7,r20
100081ec:	1009883a 	mov	r4,r2
100081f0:	180b883a 	mov	r5,r3
100081f4:	000e05c0 	call	1000e05c <__ledf2>
100081f8:	10003e0e 	bge	r2,zero,100082f4 <_dtoa_r+0x1548>
100081fc:	d9001317 	ldw	r4,76(sp)
10008200:	bd3fffc3 	ldbu	r20,-1(r23)
10008204:	d9000515 	stw	r4,20(sp)
10008208:	003d3b06 	br	100076f8 <__alt_data_end+0xf80076f8>
1000820c:	0027883a 	mov	r19,zero
10008210:	003f1b06 	br	10007e80 <__alt_data_end+0xf8007e80>
10008214:	d8800817 	ldw	r2,32(sp)
10008218:	11e9c83a 	sub	r20,r2,r7
1000821c:	0005883a 	mov	r2,zero
10008220:	003d5406 	br	10007774 <__alt_data_end+0xf8007774>
10008224:	00800044 	movi	r2,1
10008228:	003dc706 	br	10007948 <__alt_data_end+0xf8007948>
1000822c:	d8c00217 	ldw	r3,8(sp)
10008230:	00800d84 	movi	r2,54
10008234:	dd400a17 	ldw	r21,40(sp)
10008238:	10c5c83a 	sub	r2,r2,r3
1000823c:	dd000817 	ldw	r20,32(sp)
10008240:	003d4c06 	br	10007774 <__alt_data_end+0xf8007774>
10008244:	dc800f15 	stw	r18,60(sp)
10008248:	dcc01015 	stw	r19,64(sp)
1000824c:	04000084 	movi	r16,2
10008250:	003bed06 	br	10007208 <__alt_data_end+0xf8007208>
10008254:	d9000617 	ldw	r4,24(sp)
10008258:	203f0d26 	beq	r4,zero,10007e90 <__alt_data_end+0xf8007e90>
1000825c:	d9800c17 	ldw	r6,48(sp)
10008260:	01bcab0e 	bge	zero,r6,10007510 <__alt_data_end+0xf8007510>
10008264:	d9401017 	ldw	r5,64(sp)
10008268:	d9000f17 	ldw	r4,60(sp)
1000826c:	000d883a 	mov	r6,zero
10008270:	01d00934 	movhi	r7,16420
10008274:	000e1500 	call	1000e150 <__muldf3>
10008278:	81000044 	addi	r4,r16,1
1000827c:	d8800f15 	stw	r2,60(sp)
10008280:	d8c01015 	stw	r3,64(sp)
10008284:	000f3380 	call	1000f338 <__floatsidf>
10008288:	d9800f17 	ldw	r6,60(sp)
1000828c:	d9c01017 	ldw	r7,64(sp)
10008290:	1009883a 	mov	r4,r2
10008294:	180b883a 	mov	r5,r3
10008298:	000e1500 	call	1000e150 <__muldf3>
1000829c:	01d00734 	movhi	r7,16412
100082a0:	000d883a 	mov	r6,zero
100082a4:	1009883a 	mov	r4,r2
100082a8:	180b883a 	mov	r5,r3
100082ac:	000cc7c0 	call	1000cc7c <__adddf3>
100082b0:	d9c00517 	ldw	r7,20(sp)
100082b4:	047f3034 	movhi	r17,64704
100082b8:	1021883a 	mov	r16,r2
100082bc:	39ffffc4 	addi	r7,r7,-1
100082c0:	d9c01315 	stw	r7,76(sp)
100082c4:	1c63883a 	add	r17,r3,r17
100082c8:	db000c17 	ldw	r12,48(sp)
100082cc:	003bea06 	br	10007278 <__alt_data_end+0xf8007278>
100082d0:	dc000915 	stw	r16,36(sp)
100082d4:	003e0e06 	br	10007b10 <__alt_data_end+0xf8007b10>
100082d8:	01000e44 	movi	r4,57
100082dc:	8825883a 	mov	r18,r17
100082e0:	9dc00044 	addi	r23,r19,1
100082e4:	99000005 	stb	r4,0(r19)
100082e8:	a023883a 	mov	r17,r20
100082ec:	dc000915 	stw	r16,36(sp)
100082f0:	003da406 	br	10007984 <__alt_data_end+0xf8007984>
100082f4:	d9801417 	ldw	r6,80(sp)
100082f8:	d9c01517 	ldw	r7,84(sp)
100082fc:	0009883a 	mov	r4,zero
10008300:	014ff834 	movhi	r5,16352
10008304:	000e9bc0 	call	1000e9bc <__subdf3>
10008308:	880d883a 	mov	r6,r17
1000830c:	a00f883a 	mov	r7,r20
10008310:	1009883a 	mov	r4,r2
10008314:	180b883a 	mov	r5,r3
10008318:	000df800 	call	1000df80 <__gedf2>
1000831c:	00bc7c0e 	bge	zero,r2,10007510 <__alt_data_end+0xf8007510>
10008320:	01000c04 	movi	r4,48
10008324:	00000106 	br	1000832c <_dtoa_r+0x1580>
10008328:	102f883a 	mov	r23,r2
1000832c:	b8bfffc4 	addi	r2,r23,-1
10008330:	10c00007 	ldb	r3,0(r2)
10008334:	193ffc26 	beq	r3,r4,10008328 <__alt_data_end+0xf8008328>
10008338:	d9801317 	ldw	r6,76(sp)
1000833c:	d9800515 	stw	r6,20(sp)
10008340:	003c4406 	br	10007454 <__alt_data_end+0xf8007454>
10008344:	d9801317 	ldw	r6,76(sp)
10008348:	d9800515 	stw	r6,20(sp)
1000834c:	003cea06 	br	100076f8 <__alt_data_end+0xf80076f8>
10008350:	dd800f17 	ldw	r22,60(sp)
10008354:	dcc01017 	ldw	r19,64(sp)
10008358:	dc801217 	ldw	r18,72(sp)
1000835c:	003c6c06 	br	10007510 <__alt_data_end+0xf8007510>
10008360:	903e031e 	bne	r18,zero,10007b70 <__alt_data_end+0xf8007b70>
10008364:	003ebb06 	br	10007e54 <__alt_data_end+0xf8007e54>
10008368:	103e6c1e 	bne	r2,zero,10007d1c <__alt_data_end+0xf8007d1c>
1000836c:	4080004c 	andi	r2,r8,1
10008370:	103e6a26 	beq	r2,zero,10007d1c <__alt_data_end+0xf8007d1c>
10008374:	003e6606 	br	10007d10 <__alt_data_end+0xf8007d10>
10008378:	d8c00317 	ldw	r3,12(sp)
1000837c:	00800084 	movi	r2,2
10008380:	10c02916 	blt	r2,r3,10008428 <_dtoa_r+0x167c>
10008384:	d9000c17 	ldw	r4,48(sp)
10008388:	003e8806 	br	10007dac <__alt_data_end+0xf8007dac>
1000838c:	04000084 	movi	r16,2
10008390:	003b9d06 	br	10007208 <__alt_data_end+0xf8007208>
10008394:	d9001317 	ldw	r4,76(sp)
10008398:	d9000515 	stw	r4,20(sp)
1000839c:	003cd606 	br	100076f8 <__alt_data_end+0xf80076f8>
100083a0:	d8801317 	ldw	r2,76(sp)
100083a4:	d8800515 	stw	r2,20(sp)
100083a8:	003c2a06 	br	10007454 <__alt_data_end+0xf8007454>
100083ac:	d9800317 	ldw	r6,12(sp)
100083b0:	00800084 	movi	r2,2
100083b4:	11801516 	blt	r2,r6,1000840c <_dtoa_r+0x1660>
100083b8:	d9c00c17 	ldw	r7,48(sp)
100083bc:	d9c00615 	stw	r7,24(sp)
100083c0:	003df706 	br	10007ba0 <__alt_data_end+0xf8007ba0>
100083c4:	193d3926 	beq	r3,r4,100078ac <__alt_data_end+0xf80078ac>
100083c8:	00c00f04 	movi	r3,60
100083cc:	1885c83a 	sub	r2,r3,r2
100083d0:	003ddf06 	br	10007b50 <__alt_data_end+0xf8007b50>
100083d4:	e009883a 	mov	r4,fp
100083d8:	e0001115 	stw	zero,68(fp)
100083dc:	000b883a 	mov	r5,zero
100083e0:	0008ccc0 	call	10008ccc <_Balloc>
100083e4:	d8800715 	stw	r2,28(sp)
100083e8:	d8c00717 	ldw	r3,28(sp)
100083ec:	00bfffc4 	movi	r2,-1
100083f0:	01000044 	movi	r4,1
100083f4:	d8800c15 	stw	r2,48(sp)
100083f8:	e0c01015 	stw	r3,64(fp)
100083fc:	d9000b15 	stw	r4,44(sp)
10008400:	d8800615 	stw	r2,24(sp)
10008404:	d8002215 	stw	zero,136(sp)
10008408:	003c4106 	br	10007510 <__alt_data_end+0xf8007510>
1000840c:	d8c00c17 	ldw	r3,48(sp)
10008410:	d8c00615 	stw	r3,24(sp)
10008414:	003e7006 	br	10007dd8 <__alt_data_end+0xf8007dd8>
10008418:	04400044 	movi	r17,1
1000841c:	003b2006 	br	100070a0 <__alt_data_end+0xf80070a0>
10008420:	000b883a 	mov	r5,zero
10008424:	003b3d06 	br	1000711c <__alt_data_end+0xf800711c>
10008428:	d8800c17 	ldw	r2,48(sp)
1000842c:	d8800615 	stw	r2,24(sp)
10008430:	003e6906 	br	10007dd8 <__alt_data_end+0xf8007dd8>

10008434 <__sfvwrite_r>:
10008434:	30800217 	ldw	r2,8(r6)
10008438:	10006726 	beq	r2,zero,100085d8 <__sfvwrite_r+0x1a4>
1000843c:	28c0030b 	ldhu	r3,12(r5)
10008440:	defff404 	addi	sp,sp,-48
10008444:	dd400715 	stw	r21,28(sp)
10008448:	dd000615 	stw	r20,24(sp)
1000844c:	dc000215 	stw	r16,8(sp)
10008450:	dfc00b15 	stw	ra,44(sp)
10008454:	df000a15 	stw	fp,40(sp)
10008458:	ddc00915 	stw	r23,36(sp)
1000845c:	dd800815 	stw	r22,32(sp)
10008460:	dcc00515 	stw	r19,20(sp)
10008464:	dc800415 	stw	r18,16(sp)
10008468:	dc400315 	stw	r17,12(sp)
1000846c:	1880020c 	andi	r2,r3,8
10008470:	2821883a 	mov	r16,r5
10008474:	202b883a 	mov	r21,r4
10008478:	3029883a 	mov	r20,r6
1000847c:	10002726 	beq	r2,zero,1000851c <__sfvwrite_r+0xe8>
10008480:	28800417 	ldw	r2,16(r5)
10008484:	10002526 	beq	r2,zero,1000851c <__sfvwrite_r+0xe8>
10008488:	1880008c 	andi	r2,r3,2
1000848c:	a4400017 	ldw	r17,0(r20)
10008490:	10002a26 	beq	r2,zero,1000853c <__sfvwrite_r+0x108>
10008494:	05a00034 	movhi	r22,32768
10008498:	0027883a 	mov	r19,zero
1000849c:	0025883a 	mov	r18,zero
100084a0:	b5bf0004 	addi	r22,r22,-1024
100084a4:	980d883a 	mov	r6,r19
100084a8:	a809883a 	mov	r4,r21
100084ac:	90004626 	beq	r18,zero,100085c8 <__sfvwrite_r+0x194>
100084b0:	900f883a 	mov	r7,r18
100084b4:	b480022e 	bgeu	r22,r18,100084c0 <__sfvwrite_r+0x8c>
100084b8:	01e00034 	movhi	r7,32768
100084bc:	39ff0004 	addi	r7,r7,-1024
100084c0:	80800917 	ldw	r2,36(r16)
100084c4:	81400717 	ldw	r5,28(r16)
100084c8:	103ee83a 	callr	r2
100084cc:	00805a0e 	bge	zero,r2,10008638 <__sfvwrite_r+0x204>
100084d0:	a0c00217 	ldw	r3,8(r20)
100084d4:	98a7883a 	add	r19,r19,r2
100084d8:	90a5c83a 	sub	r18,r18,r2
100084dc:	1885c83a 	sub	r2,r3,r2
100084e0:	a0800215 	stw	r2,8(r20)
100084e4:	103fef1e 	bne	r2,zero,100084a4 <__alt_data_end+0xf80084a4>
100084e8:	0005883a 	mov	r2,zero
100084ec:	dfc00b17 	ldw	ra,44(sp)
100084f0:	df000a17 	ldw	fp,40(sp)
100084f4:	ddc00917 	ldw	r23,36(sp)
100084f8:	dd800817 	ldw	r22,32(sp)
100084fc:	dd400717 	ldw	r21,28(sp)
10008500:	dd000617 	ldw	r20,24(sp)
10008504:	dcc00517 	ldw	r19,20(sp)
10008508:	dc800417 	ldw	r18,16(sp)
1000850c:	dc400317 	ldw	r17,12(sp)
10008510:	dc000217 	ldw	r16,8(sp)
10008514:	dec00c04 	addi	sp,sp,48
10008518:	f800283a 	ret
1000851c:	800b883a 	mov	r5,r16
10008520:	a809883a 	mov	r4,r21
10008524:	00068440 	call	10006844 <__swsetup_r>
10008528:	1000ee1e 	bne	r2,zero,100088e4 <__sfvwrite_r+0x4b0>
1000852c:	80c0030b 	ldhu	r3,12(r16)
10008530:	a4400017 	ldw	r17,0(r20)
10008534:	1880008c 	andi	r2,r3,2
10008538:	103fd61e 	bne	r2,zero,10008494 <__alt_data_end+0xf8008494>
1000853c:	1880004c 	andi	r2,r3,1
10008540:	1000421e 	bne	r2,zero,1000864c <__sfvwrite_r+0x218>
10008544:	0039883a 	mov	fp,zero
10008548:	0025883a 	mov	r18,zero
1000854c:	90001a26 	beq	r18,zero,100085b8 <__sfvwrite_r+0x184>
10008550:	1880800c 	andi	r2,r3,512
10008554:	84c00217 	ldw	r19,8(r16)
10008558:	10002126 	beq	r2,zero,100085e0 <__sfvwrite_r+0x1ac>
1000855c:	982f883a 	mov	r23,r19
10008560:	94c09636 	bltu	r18,r19,100087bc <__sfvwrite_r+0x388>
10008564:	1881200c 	andi	r2,r3,1152
10008568:	1000a11e 	bne	r2,zero,100087f0 <__sfvwrite_r+0x3bc>
1000856c:	81000017 	ldw	r4,0(r16)
10008570:	b80d883a 	mov	r6,r23
10008574:	e00b883a 	mov	r5,fp
10008578:	0008b700 	call	10008b70 <memmove>
1000857c:	80c00217 	ldw	r3,8(r16)
10008580:	81000017 	ldw	r4,0(r16)
10008584:	9005883a 	mov	r2,r18
10008588:	1ce7c83a 	sub	r19,r3,r19
1000858c:	25cf883a 	add	r7,r4,r23
10008590:	84c00215 	stw	r19,8(r16)
10008594:	81c00015 	stw	r7,0(r16)
10008598:	a0c00217 	ldw	r3,8(r20)
1000859c:	e0b9883a 	add	fp,fp,r2
100085a0:	90a5c83a 	sub	r18,r18,r2
100085a4:	18a7c83a 	sub	r19,r3,r2
100085a8:	a4c00215 	stw	r19,8(r20)
100085ac:	983fce26 	beq	r19,zero,100084e8 <__alt_data_end+0xf80084e8>
100085b0:	80c0030b 	ldhu	r3,12(r16)
100085b4:	903fe61e 	bne	r18,zero,10008550 <__alt_data_end+0xf8008550>
100085b8:	8f000017 	ldw	fp,0(r17)
100085bc:	8c800117 	ldw	r18,4(r17)
100085c0:	8c400204 	addi	r17,r17,8
100085c4:	003fe106 	br	1000854c <__alt_data_end+0xf800854c>
100085c8:	8cc00017 	ldw	r19,0(r17)
100085cc:	8c800117 	ldw	r18,4(r17)
100085d0:	8c400204 	addi	r17,r17,8
100085d4:	003fb306 	br	100084a4 <__alt_data_end+0xf80084a4>
100085d8:	0005883a 	mov	r2,zero
100085dc:	f800283a 	ret
100085e0:	81000017 	ldw	r4,0(r16)
100085e4:	80800417 	ldw	r2,16(r16)
100085e8:	11005a36 	bltu	r2,r4,10008754 <__sfvwrite_r+0x320>
100085ec:	85c00517 	ldw	r23,20(r16)
100085f0:	95c05836 	bltu	r18,r23,10008754 <__sfvwrite_r+0x320>
100085f4:	00a00034 	movhi	r2,32768
100085f8:	10bfffc4 	addi	r2,r2,-1
100085fc:	9009883a 	mov	r4,r18
10008600:	1480012e 	bgeu	r2,r18,10008608 <__sfvwrite_r+0x1d4>
10008604:	1009883a 	mov	r4,r2
10008608:	b80b883a 	mov	r5,r23
1000860c:	0000f200 	call	10000f20 <__divsi3>
10008610:	b80b883a 	mov	r5,r23
10008614:	1009883a 	mov	r4,r2
10008618:	00010d40 	call	100010d4 <__mulsi3>
1000861c:	81400717 	ldw	r5,28(r16)
10008620:	80c00917 	ldw	r3,36(r16)
10008624:	100f883a 	mov	r7,r2
10008628:	e00d883a 	mov	r6,fp
1000862c:	a809883a 	mov	r4,r21
10008630:	183ee83a 	callr	r3
10008634:	00bfd816 	blt	zero,r2,10008598 <__alt_data_end+0xf8008598>
10008638:	8080030b 	ldhu	r2,12(r16)
1000863c:	10801014 	ori	r2,r2,64
10008640:	8080030d 	sth	r2,12(r16)
10008644:	00bfffc4 	movi	r2,-1
10008648:	003fa806 	br	100084ec <__alt_data_end+0xf80084ec>
1000864c:	0027883a 	mov	r19,zero
10008650:	0011883a 	mov	r8,zero
10008654:	0039883a 	mov	fp,zero
10008658:	0025883a 	mov	r18,zero
1000865c:	90001f26 	beq	r18,zero,100086dc <__sfvwrite_r+0x2a8>
10008660:	40005a26 	beq	r8,zero,100087cc <__sfvwrite_r+0x398>
10008664:	982d883a 	mov	r22,r19
10008668:	94c0012e 	bgeu	r18,r19,10008670 <__sfvwrite_r+0x23c>
1000866c:	902d883a 	mov	r22,r18
10008670:	81000017 	ldw	r4,0(r16)
10008674:	80800417 	ldw	r2,16(r16)
10008678:	b02f883a 	mov	r23,r22
1000867c:	81c00517 	ldw	r7,20(r16)
10008680:	1100032e 	bgeu	r2,r4,10008690 <__sfvwrite_r+0x25c>
10008684:	80c00217 	ldw	r3,8(r16)
10008688:	38c7883a 	add	r3,r7,r3
1000868c:	1d801816 	blt	r3,r22,100086f0 <__sfvwrite_r+0x2bc>
10008690:	b1c03e16 	blt	r22,r7,1000878c <__sfvwrite_r+0x358>
10008694:	80800917 	ldw	r2,36(r16)
10008698:	81400717 	ldw	r5,28(r16)
1000869c:	e00d883a 	mov	r6,fp
100086a0:	da000115 	stw	r8,4(sp)
100086a4:	a809883a 	mov	r4,r21
100086a8:	103ee83a 	callr	r2
100086ac:	102f883a 	mov	r23,r2
100086b0:	da000117 	ldw	r8,4(sp)
100086b4:	00bfe00e 	bge	zero,r2,10008638 <__alt_data_end+0xf8008638>
100086b8:	9de7c83a 	sub	r19,r19,r23
100086bc:	98001f26 	beq	r19,zero,1000873c <__sfvwrite_r+0x308>
100086c0:	a0800217 	ldw	r2,8(r20)
100086c4:	e5f9883a 	add	fp,fp,r23
100086c8:	95e5c83a 	sub	r18,r18,r23
100086cc:	15efc83a 	sub	r23,r2,r23
100086d0:	a5c00215 	stw	r23,8(r20)
100086d4:	b83f8426 	beq	r23,zero,100084e8 <__alt_data_end+0xf80084e8>
100086d8:	903fe11e 	bne	r18,zero,10008660 <__alt_data_end+0xf8008660>
100086dc:	8f000017 	ldw	fp,0(r17)
100086e0:	8c800117 	ldw	r18,4(r17)
100086e4:	0011883a 	mov	r8,zero
100086e8:	8c400204 	addi	r17,r17,8
100086ec:	003fdb06 	br	1000865c <__alt_data_end+0xf800865c>
100086f0:	180d883a 	mov	r6,r3
100086f4:	e00b883a 	mov	r5,fp
100086f8:	da000115 	stw	r8,4(sp)
100086fc:	d8c00015 	stw	r3,0(sp)
10008700:	0008b700 	call	10008b70 <memmove>
10008704:	d8c00017 	ldw	r3,0(sp)
10008708:	80800017 	ldw	r2,0(r16)
1000870c:	800b883a 	mov	r5,r16
10008710:	a809883a 	mov	r4,r21
10008714:	10c5883a 	add	r2,r2,r3
10008718:	80800015 	stw	r2,0(r16)
1000871c:	d8c00015 	stw	r3,0(sp)
10008720:	00014d00 	call	100014d0 <_fflush_r>
10008724:	d8c00017 	ldw	r3,0(sp)
10008728:	da000117 	ldw	r8,4(sp)
1000872c:	103fc21e 	bne	r2,zero,10008638 <__alt_data_end+0xf8008638>
10008730:	182f883a 	mov	r23,r3
10008734:	9de7c83a 	sub	r19,r19,r23
10008738:	983fe11e 	bne	r19,zero,100086c0 <__alt_data_end+0xf80086c0>
1000873c:	800b883a 	mov	r5,r16
10008740:	a809883a 	mov	r4,r21
10008744:	00014d00 	call	100014d0 <_fflush_r>
10008748:	103fbb1e 	bne	r2,zero,10008638 <__alt_data_end+0xf8008638>
1000874c:	0011883a 	mov	r8,zero
10008750:	003fdb06 	br	100086c0 <__alt_data_end+0xf80086c0>
10008754:	94c0012e 	bgeu	r18,r19,1000875c <__sfvwrite_r+0x328>
10008758:	9027883a 	mov	r19,r18
1000875c:	980d883a 	mov	r6,r19
10008760:	e00b883a 	mov	r5,fp
10008764:	0008b700 	call	10008b70 <memmove>
10008768:	80800217 	ldw	r2,8(r16)
1000876c:	80c00017 	ldw	r3,0(r16)
10008770:	14c5c83a 	sub	r2,r2,r19
10008774:	1cc7883a 	add	r3,r3,r19
10008778:	80800215 	stw	r2,8(r16)
1000877c:	80c00015 	stw	r3,0(r16)
10008780:	10004326 	beq	r2,zero,10008890 <__sfvwrite_r+0x45c>
10008784:	9805883a 	mov	r2,r19
10008788:	003f8306 	br	10008598 <__alt_data_end+0xf8008598>
1000878c:	b00d883a 	mov	r6,r22
10008790:	e00b883a 	mov	r5,fp
10008794:	da000115 	stw	r8,4(sp)
10008798:	0008b700 	call	10008b70 <memmove>
1000879c:	80800217 	ldw	r2,8(r16)
100087a0:	80c00017 	ldw	r3,0(r16)
100087a4:	da000117 	ldw	r8,4(sp)
100087a8:	1585c83a 	sub	r2,r2,r22
100087ac:	1dad883a 	add	r22,r3,r22
100087b0:	80800215 	stw	r2,8(r16)
100087b4:	85800015 	stw	r22,0(r16)
100087b8:	003fbf06 	br	100086b8 <__alt_data_end+0xf80086b8>
100087bc:	81000017 	ldw	r4,0(r16)
100087c0:	9027883a 	mov	r19,r18
100087c4:	902f883a 	mov	r23,r18
100087c8:	003f6906 	br	10008570 <__alt_data_end+0xf8008570>
100087cc:	900d883a 	mov	r6,r18
100087d0:	01400284 	movi	r5,10
100087d4:	e009883a 	mov	r4,fp
100087d8:	0008a8c0 	call	10008a8c <memchr>
100087dc:	10003e26 	beq	r2,zero,100088d8 <__sfvwrite_r+0x4a4>
100087e0:	10800044 	addi	r2,r2,1
100087e4:	1727c83a 	sub	r19,r2,fp
100087e8:	02000044 	movi	r8,1
100087ec:	003f9d06 	br	10008664 <__alt_data_end+0xf8008664>
100087f0:	80800517 	ldw	r2,20(r16)
100087f4:	81400417 	ldw	r5,16(r16)
100087f8:	81c00017 	ldw	r7,0(r16)
100087fc:	10a7883a 	add	r19,r2,r2
10008800:	9885883a 	add	r2,r19,r2
10008804:	1026d7fa 	srli	r19,r2,31
10008808:	396dc83a 	sub	r22,r7,r5
1000880c:	b1000044 	addi	r4,r22,1
10008810:	9885883a 	add	r2,r19,r2
10008814:	1027d07a 	srai	r19,r2,1
10008818:	2485883a 	add	r2,r4,r18
1000881c:	980d883a 	mov	r6,r19
10008820:	9880022e 	bgeu	r19,r2,1000882c <__sfvwrite_r+0x3f8>
10008824:	1027883a 	mov	r19,r2
10008828:	100d883a 	mov	r6,r2
1000882c:	18c1000c 	andi	r3,r3,1024
10008830:	18001c26 	beq	r3,zero,100088a4 <__sfvwrite_r+0x470>
10008834:	300b883a 	mov	r5,r6
10008838:	a809883a 	mov	r4,r21
1000883c:	0002ba00 	call	10002ba0 <_malloc_r>
10008840:	102f883a 	mov	r23,r2
10008844:	10002926 	beq	r2,zero,100088ec <__sfvwrite_r+0x4b8>
10008848:	81400417 	ldw	r5,16(r16)
1000884c:	b00d883a 	mov	r6,r22
10008850:	1009883a 	mov	r4,r2
10008854:	00033ac0 	call	100033ac <memcpy>
10008858:	8080030b 	ldhu	r2,12(r16)
1000885c:	00fedfc4 	movi	r3,-1153
10008860:	10c4703a 	and	r2,r2,r3
10008864:	10802014 	ori	r2,r2,128
10008868:	8080030d 	sth	r2,12(r16)
1000886c:	bd89883a 	add	r4,r23,r22
10008870:	9d8fc83a 	sub	r7,r19,r22
10008874:	85c00415 	stw	r23,16(r16)
10008878:	84c00515 	stw	r19,20(r16)
1000887c:	81000015 	stw	r4,0(r16)
10008880:	9027883a 	mov	r19,r18
10008884:	81c00215 	stw	r7,8(r16)
10008888:	902f883a 	mov	r23,r18
1000888c:	003f3806 	br	10008570 <__alt_data_end+0xf8008570>
10008890:	800b883a 	mov	r5,r16
10008894:	a809883a 	mov	r4,r21
10008898:	00014d00 	call	100014d0 <_fflush_r>
1000889c:	103fb926 	beq	r2,zero,10008784 <__alt_data_end+0xf8008784>
100088a0:	003f6506 	br	10008638 <__alt_data_end+0xf8008638>
100088a4:	a809883a 	mov	r4,r21
100088a8:	00037940 	call	10003794 <_realloc_r>
100088ac:	102f883a 	mov	r23,r2
100088b0:	103fee1e 	bne	r2,zero,1000886c <__alt_data_end+0xf800886c>
100088b4:	81400417 	ldw	r5,16(r16)
100088b8:	a809883a 	mov	r4,r21
100088bc:	0001e400 	call	10001e40 <_free_r>
100088c0:	8080030b 	ldhu	r2,12(r16)
100088c4:	00ffdfc4 	movi	r3,-129
100088c8:	1884703a 	and	r2,r3,r2
100088cc:	00c00304 	movi	r3,12
100088d0:	a8c00015 	stw	r3,0(r21)
100088d4:	003f5906 	br	1000863c <__alt_data_end+0xf800863c>
100088d8:	94c00044 	addi	r19,r18,1
100088dc:	02000044 	movi	r8,1
100088e0:	003f6006 	br	10008664 <__alt_data_end+0xf8008664>
100088e4:	00bfffc4 	movi	r2,-1
100088e8:	003f0006 	br	100084ec <__alt_data_end+0xf80084ec>
100088ec:	00800304 	movi	r2,12
100088f0:	a8800015 	stw	r2,0(r21)
100088f4:	8080030b 	ldhu	r2,12(r16)
100088f8:	003f5006 	br	1000863c <__alt_data_end+0xf800863c>

100088fc <_isatty_r>:
100088fc:	defffd04 	addi	sp,sp,-12
10008900:	dc000015 	stw	r16,0(sp)
10008904:	04040074 	movhi	r16,4097
10008908:	dc400115 	stw	r17,4(sp)
1000890c:	84159404 	addi	r16,r16,22096
10008910:	2023883a 	mov	r17,r4
10008914:	2809883a 	mov	r4,r5
10008918:	dfc00215 	stw	ra,8(sp)
1000891c:	80000015 	stw	zero,0(r16)
10008920:	000f7e40 	call	1000f7e4 <isatty>
10008924:	00ffffc4 	movi	r3,-1
10008928:	10c00526 	beq	r2,r3,10008940 <_isatty_r+0x44>
1000892c:	dfc00217 	ldw	ra,8(sp)
10008930:	dc400117 	ldw	r17,4(sp)
10008934:	dc000017 	ldw	r16,0(sp)
10008938:	dec00304 	addi	sp,sp,12
1000893c:	f800283a 	ret
10008940:	80c00017 	ldw	r3,0(r16)
10008944:	183ff926 	beq	r3,zero,1000892c <__alt_data_end+0xf800892c>
10008948:	88c00015 	stw	r3,0(r17)
1000894c:	003ff706 	br	1000892c <__alt_data_end+0xf800892c>

10008950 <_setlocale_r>:
10008950:	30001b26 	beq	r6,zero,100089c0 <_setlocale_r+0x70>
10008954:	01440074 	movhi	r5,4097
10008958:	defffe04 	addi	sp,sp,-8
1000895c:	29477604 	addi	r5,r5,7640
10008960:	3009883a 	mov	r4,r6
10008964:	dc000015 	stw	r16,0(sp)
10008968:	dfc00115 	stw	ra,4(sp)
1000896c:	3021883a 	mov	r16,r6
10008970:	000a2c40 	call	1000a2c4 <strcmp>
10008974:	1000061e 	bne	r2,zero,10008990 <_setlocale_r+0x40>
10008978:	00840074 	movhi	r2,4097
1000897c:	10875704 	addi	r2,r2,7516
10008980:	dfc00117 	ldw	ra,4(sp)
10008984:	dc000017 	ldw	r16,0(sp)
10008988:	dec00204 	addi	sp,sp,8
1000898c:	f800283a 	ret
10008990:	01440074 	movhi	r5,4097
10008994:	29475704 	addi	r5,r5,7516
10008998:	8009883a 	mov	r4,r16
1000899c:	000a2c40 	call	1000a2c4 <strcmp>
100089a0:	103ff526 	beq	r2,zero,10008978 <__alt_data_end+0xf8008978>
100089a4:	01440074 	movhi	r5,4097
100089a8:	29474a04 	addi	r5,r5,7464
100089ac:	8009883a 	mov	r4,r16
100089b0:	000a2c40 	call	1000a2c4 <strcmp>
100089b4:	103ff026 	beq	r2,zero,10008978 <__alt_data_end+0xf8008978>
100089b8:	0005883a 	mov	r2,zero
100089bc:	003ff006 	br	10008980 <__alt_data_end+0xf8008980>
100089c0:	00840074 	movhi	r2,4097
100089c4:	10875704 	addi	r2,r2,7516
100089c8:	f800283a 	ret

100089cc <__locale_charset>:
100089cc:	00840074 	movhi	r2,4097
100089d0:	108a2a04 	addi	r2,r2,10408
100089d4:	f800283a 	ret

100089d8 <__locale_mb_cur_max>:
100089d8:	00840074 	movhi	r2,4097
100089dc:	108ec904 	addi	r2,r2,15140
100089e0:	10800017 	ldw	r2,0(r2)
100089e4:	f800283a 	ret

100089e8 <__locale_msgcharset>:
100089e8:	00840074 	movhi	r2,4097
100089ec:	108a2204 	addi	r2,r2,10376
100089f0:	f800283a 	ret

100089f4 <__locale_cjk_lang>:
100089f4:	0005883a 	mov	r2,zero
100089f8:	f800283a 	ret

100089fc <_localeconv_r>:
100089fc:	00840074 	movhi	r2,4097
10008a00:	108a3204 	addi	r2,r2,10440
10008a04:	f800283a 	ret

10008a08 <setlocale>:
10008a08:	00840074 	movhi	r2,4097
10008a0c:	108ec604 	addi	r2,r2,15128
10008a10:	280d883a 	mov	r6,r5
10008a14:	200b883a 	mov	r5,r4
10008a18:	11000017 	ldw	r4,0(r2)
10008a1c:	00089501 	jmpi	10008950 <_setlocale_r>

10008a20 <localeconv>:
10008a20:	00840074 	movhi	r2,4097
10008a24:	108a3204 	addi	r2,r2,10440
10008a28:	f800283a 	ret

10008a2c <_lseek_r>:
10008a2c:	defffd04 	addi	sp,sp,-12
10008a30:	2805883a 	mov	r2,r5
10008a34:	dc000015 	stw	r16,0(sp)
10008a38:	04040074 	movhi	r16,4097
10008a3c:	dc400115 	stw	r17,4(sp)
10008a40:	300b883a 	mov	r5,r6
10008a44:	84159404 	addi	r16,r16,22096
10008a48:	2023883a 	mov	r17,r4
10008a4c:	380d883a 	mov	r6,r7
10008a50:	1009883a 	mov	r4,r2
10008a54:	dfc00215 	stw	ra,8(sp)
10008a58:	80000015 	stw	zero,0(r16)
10008a5c:	000fb240 	call	1000fb24 <lseek>
10008a60:	00ffffc4 	movi	r3,-1
10008a64:	10c00526 	beq	r2,r3,10008a7c <_lseek_r+0x50>
10008a68:	dfc00217 	ldw	ra,8(sp)
10008a6c:	dc400117 	ldw	r17,4(sp)
10008a70:	dc000017 	ldw	r16,0(sp)
10008a74:	dec00304 	addi	sp,sp,12
10008a78:	f800283a 	ret
10008a7c:	80c00017 	ldw	r3,0(r16)
10008a80:	183ff926 	beq	r3,zero,10008a68 <__alt_data_end+0xf8008a68>
10008a84:	88c00015 	stw	r3,0(r17)
10008a88:	003ff706 	br	10008a68 <__alt_data_end+0xf8008a68>

10008a8c <memchr>:
10008a8c:	208000cc 	andi	r2,r4,3
10008a90:	280f883a 	mov	r7,r5
10008a94:	10003426 	beq	r2,zero,10008b68 <memchr+0xdc>
10008a98:	30bfffc4 	addi	r2,r6,-1
10008a9c:	30001a26 	beq	r6,zero,10008b08 <memchr+0x7c>
10008aa0:	20c00003 	ldbu	r3,0(r4)
10008aa4:	29803fcc 	andi	r6,r5,255
10008aa8:	30c0051e 	bne	r6,r3,10008ac0 <memchr+0x34>
10008aac:	00001806 	br	10008b10 <memchr+0x84>
10008ab0:	10001526 	beq	r2,zero,10008b08 <memchr+0x7c>
10008ab4:	20c00003 	ldbu	r3,0(r4)
10008ab8:	10bfffc4 	addi	r2,r2,-1
10008abc:	30c01426 	beq	r6,r3,10008b10 <memchr+0x84>
10008ac0:	21000044 	addi	r4,r4,1
10008ac4:	20c000cc 	andi	r3,r4,3
10008ac8:	183ff91e 	bne	r3,zero,10008ab0 <__alt_data_end+0xf8008ab0>
10008acc:	020000c4 	movi	r8,3
10008ad0:	40801136 	bltu	r8,r2,10008b18 <memchr+0x8c>
10008ad4:	10000c26 	beq	r2,zero,10008b08 <memchr+0x7c>
10008ad8:	20c00003 	ldbu	r3,0(r4)
10008adc:	29403fcc 	andi	r5,r5,255
10008ae0:	28c00b26 	beq	r5,r3,10008b10 <memchr+0x84>
10008ae4:	20c00044 	addi	r3,r4,1
10008ae8:	39803fcc 	andi	r6,r7,255
10008aec:	2089883a 	add	r4,r4,r2
10008af0:	00000306 	br	10008b00 <memchr+0x74>
10008af4:	18c00044 	addi	r3,r3,1
10008af8:	197fffc3 	ldbu	r5,-1(r3)
10008afc:	31400526 	beq	r6,r5,10008b14 <memchr+0x88>
10008b00:	1805883a 	mov	r2,r3
10008b04:	20fffb1e 	bne	r4,r3,10008af4 <__alt_data_end+0xf8008af4>
10008b08:	0005883a 	mov	r2,zero
10008b0c:	f800283a 	ret
10008b10:	2005883a 	mov	r2,r4
10008b14:	f800283a 	ret
10008b18:	28c03fcc 	andi	r3,r5,255
10008b1c:	1812923a 	slli	r9,r3,8
10008b20:	02ffbff4 	movhi	r11,65279
10008b24:	02a02074 	movhi	r10,32897
10008b28:	48d2b03a 	or	r9,r9,r3
10008b2c:	4806943a 	slli	r3,r9,16
10008b30:	5affbfc4 	addi	r11,r11,-257
10008b34:	52a02004 	addi	r10,r10,-32640
10008b38:	48d2b03a 	or	r9,r9,r3
10008b3c:	20c00017 	ldw	r3,0(r4)
10008b40:	48c6f03a 	xor	r3,r9,r3
10008b44:	1acd883a 	add	r6,r3,r11
10008b48:	00c6303a 	nor	r3,zero,r3
10008b4c:	30c6703a 	and	r3,r6,r3
10008b50:	1a86703a 	and	r3,r3,r10
10008b54:	183fe01e 	bne	r3,zero,10008ad8 <__alt_data_end+0xf8008ad8>
10008b58:	10bfff04 	addi	r2,r2,-4
10008b5c:	21000104 	addi	r4,r4,4
10008b60:	40bff636 	bltu	r8,r2,10008b3c <__alt_data_end+0xf8008b3c>
10008b64:	003fdb06 	br	10008ad4 <__alt_data_end+0xf8008ad4>
10008b68:	3005883a 	mov	r2,r6
10008b6c:	003fd706 	br	10008acc <__alt_data_end+0xf8008acc>

10008b70 <memmove>:
10008b70:	2005883a 	mov	r2,r4
10008b74:	29000b2e 	bgeu	r5,r4,10008ba4 <memmove+0x34>
10008b78:	298f883a 	add	r7,r5,r6
10008b7c:	21c0092e 	bgeu	r4,r7,10008ba4 <memmove+0x34>
10008b80:	2187883a 	add	r3,r4,r6
10008b84:	198bc83a 	sub	r5,r3,r6
10008b88:	30004826 	beq	r6,zero,10008cac <memmove+0x13c>
10008b8c:	39ffffc4 	addi	r7,r7,-1
10008b90:	39000003 	ldbu	r4,0(r7)
10008b94:	18ffffc4 	addi	r3,r3,-1
10008b98:	19000005 	stb	r4,0(r3)
10008b9c:	28fffb1e 	bne	r5,r3,10008b8c <__alt_data_end+0xf8008b8c>
10008ba0:	f800283a 	ret
10008ba4:	00c003c4 	movi	r3,15
10008ba8:	1980412e 	bgeu	r3,r6,10008cb0 <memmove+0x140>
10008bac:	2886b03a 	or	r3,r5,r2
10008bb0:	18c000cc 	andi	r3,r3,3
10008bb4:	1800401e 	bne	r3,zero,10008cb8 <memmove+0x148>
10008bb8:	33fffc04 	addi	r15,r6,-16
10008bbc:	781ed13a 	srli	r15,r15,4
10008bc0:	28c00104 	addi	r3,r5,4
10008bc4:	13400104 	addi	r13,r2,4
10008bc8:	781c913a 	slli	r14,r15,4
10008bcc:	2b000204 	addi	r12,r5,8
10008bd0:	12c00204 	addi	r11,r2,8
10008bd4:	73800504 	addi	r14,r14,20
10008bd8:	2a800304 	addi	r10,r5,12
10008bdc:	12400304 	addi	r9,r2,12
10008be0:	2b9d883a 	add	r14,r5,r14
10008be4:	2811883a 	mov	r8,r5
10008be8:	100f883a 	mov	r7,r2
10008bec:	41000017 	ldw	r4,0(r8)
10008bf0:	39c00404 	addi	r7,r7,16
10008bf4:	18c00404 	addi	r3,r3,16
10008bf8:	393ffc15 	stw	r4,-16(r7)
10008bfc:	193ffc17 	ldw	r4,-16(r3)
10008c00:	6b400404 	addi	r13,r13,16
10008c04:	5ac00404 	addi	r11,r11,16
10008c08:	693ffc15 	stw	r4,-16(r13)
10008c0c:	61000017 	ldw	r4,0(r12)
10008c10:	4a400404 	addi	r9,r9,16
10008c14:	42000404 	addi	r8,r8,16
10008c18:	593ffc15 	stw	r4,-16(r11)
10008c1c:	51000017 	ldw	r4,0(r10)
10008c20:	63000404 	addi	r12,r12,16
10008c24:	52800404 	addi	r10,r10,16
10008c28:	493ffc15 	stw	r4,-16(r9)
10008c2c:	1bbfef1e 	bne	r3,r14,10008bec <__alt_data_end+0xf8008bec>
10008c30:	79000044 	addi	r4,r15,1
10008c34:	2008913a 	slli	r4,r4,4
10008c38:	328003cc 	andi	r10,r6,15
10008c3c:	02c000c4 	movi	r11,3
10008c40:	1107883a 	add	r3,r2,r4
10008c44:	290b883a 	add	r5,r5,r4
10008c48:	5a801e2e 	bgeu	r11,r10,10008cc4 <memmove+0x154>
10008c4c:	1813883a 	mov	r9,r3
10008c50:	2811883a 	mov	r8,r5
10008c54:	500f883a 	mov	r7,r10
10008c58:	41000017 	ldw	r4,0(r8)
10008c5c:	4a400104 	addi	r9,r9,4
10008c60:	39ffff04 	addi	r7,r7,-4
10008c64:	493fff15 	stw	r4,-4(r9)
10008c68:	42000104 	addi	r8,r8,4
10008c6c:	59fffa36 	bltu	r11,r7,10008c58 <__alt_data_end+0xf8008c58>
10008c70:	513fff04 	addi	r4,r10,-4
10008c74:	2008d0ba 	srli	r4,r4,2
10008c78:	318000cc 	andi	r6,r6,3
10008c7c:	21000044 	addi	r4,r4,1
10008c80:	2109883a 	add	r4,r4,r4
10008c84:	2109883a 	add	r4,r4,r4
10008c88:	1907883a 	add	r3,r3,r4
10008c8c:	290b883a 	add	r5,r5,r4
10008c90:	30000b26 	beq	r6,zero,10008cc0 <memmove+0x150>
10008c94:	198d883a 	add	r6,r3,r6
10008c98:	29c00003 	ldbu	r7,0(r5)
10008c9c:	18c00044 	addi	r3,r3,1
10008ca0:	29400044 	addi	r5,r5,1
10008ca4:	19ffffc5 	stb	r7,-1(r3)
10008ca8:	19bffb1e 	bne	r3,r6,10008c98 <__alt_data_end+0xf8008c98>
10008cac:	f800283a 	ret
10008cb0:	1007883a 	mov	r3,r2
10008cb4:	003ff606 	br	10008c90 <__alt_data_end+0xf8008c90>
10008cb8:	1007883a 	mov	r3,r2
10008cbc:	003ff506 	br	10008c94 <__alt_data_end+0xf8008c94>
10008cc0:	f800283a 	ret
10008cc4:	500d883a 	mov	r6,r10
10008cc8:	003ff106 	br	10008c90 <__alt_data_end+0xf8008c90>

10008ccc <_Balloc>:
10008ccc:	20801317 	ldw	r2,76(r4)
10008cd0:	defffc04 	addi	sp,sp,-16
10008cd4:	dc400115 	stw	r17,4(sp)
10008cd8:	dc000015 	stw	r16,0(sp)
10008cdc:	dfc00315 	stw	ra,12(sp)
10008ce0:	dc800215 	stw	r18,8(sp)
10008ce4:	2023883a 	mov	r17,r4
10008ce8:	2821883a 	mov	r16,r5
10008cec:	10000f26 	beq	r2,zero,10008d2c <_Balloc+0x60>
10008cf0:	8407883a 	add	r3,r16,r16
10008cf4:	18c7883a 	add	r3,r3,r3
10008cf8:	10c7883a 	add	r3,r2,r3
10008cfc:	18800017 	ldw	r2,0(r3)
10008d00:	10001126 	beq	r2,zero,10008d48 <_Balloc+0x7c>
10008d04:	11000017 	ldw	r4,0(r2)
10008d08:	19000015 	stw	r4,0(r3)
10008d0c:	10000415 	stw	zero,16(r2)
10008d10:	10000315 	stw	zero,12(r2)
10008d14:	dfc00317 	ldw	ra,12(sp)
10008d18:	dc800217 	ldw	r18,8(sp)
10008d1c:	dc400117 	ldw	r17,4(sp)
10008d20:	dc000017 	ldw	r16,0(sp)
10008d24:	dec00404 	addi	sp,sp,16
10008d28:	f800283a 	ret
10008d2c:	01800844 	movi	r6,33
10008d30:	01400104 	movi	r5,4
10008d34:	000bbf00 	call	1000bbf0 <_calloc_r>
10008d38:	88801315 	stw	r2,76(r17)
10008d3c:	103fec1e 	bne	r2,zero,10008cf0 <__alt_data_end+0xf8008cf0>
10008d40:	0005883a 	mov	r2,zero
10008d44:	003ff306 	br	10008d14 <__alt_data_end+0xf8008d14>
10008d48:	01400044 	movi	r5,1
10008d4c:	2c24983a 	sll	r18,r5,r16
10008d50:	8809883a 	mov	r4,r17
10008d54:	91800144 	addi	r6,r18,5
10008d58:	318d883a 	add	r6,r6,r6
10008d5c:	318d883a 	add	r6,r6,r6
10008d60:	000bbf00 	call	1000bbf0 <_calloc_r>
10008d64:	103ff626 	beq	r2,zero,10008d40 <__alt_data_end+0xf8008d40>
10008d68:	14000115 	stw	r16,4(r2)
10008d6c:	14800215 	stw	r18,8(r2)
10008d70:	003fe606 	br	10008d0c <__alt_data_end+0xf8008d0c>

10008d74 <_Bfree>:
10008d74:	28000826 	beq	r5,zero,10008d98 <_Bfree+0x24>
10008d78:	28c00117 	ldw	r3,4(r5)
10008d7c:	20801317 	ldw	r2,76(r4)
10008d80:	18c7883a 	add	r3,r3,r3
10008d84:	18c7883a 	add	r3,r3,r3
10008d88:	10c5883a 	add	r2,r2,r3
10008d8c:	10c00017 	ldw	r3,0(r2)
10008d90:	28c00015 	stw	r3,0(r5)
10008d94:	11400015 	stw	r5,0(r2)
10008d98:	f800283a 	ret

10008d9c <__multadd>:
10008d9c:	defff704 	addi	sp,sp,-36
10008da0:	dc800215 	stw	r18,8(sp)
10008da4:	2c800417 	ldw	r18,16(r5)
10008da8:	dd800615 	stw	r22,24(sp)
10008dac:	dd400515 	stw	r21,20(sp)
10008db0:	dd000415 	stw	r20,16(sp)
10008db4:	dcc00315 	stw	r19,12(sp)
10008db8:	dc400115 	stw	r17,4(sp)
10008dbc:	dc000015 	stw	r16,0(sp)
10008dc0:	dfc00815 	stw	ra,32(sp)
10008dc4:	ddc00715 	stw	r23,28(sp)
10008dc8:	2827883a 	mov	r19,r5
10008dcc:	2029883a 	mov	r20,r4
10008dd0:	3023883a 	mov	r17,r6
10008dd4:	3821883a 	mov	r16,r7
10008dd8:	2d400504 	addi	r21,r5,20
10008ddc:	002d883a 	mov	r22,zero
10008de0:	adc00017 	ldw	r23,0(r21)
10008de4:	880b883a 	mov	r5,r17
10008de8:	ad400104 	addi	r21,r21,4
10008dec:	b93fffcc 	andi	r4,r23,65535
10008df0:	00010d40 	call	100010d4 <__mulsi3>
10008df4:	b808d43a 	srli	r4,r23,16
10008df8:	880b883a 	mov	r5,r17
10008dfc:	1421883a 	add	r16,r2,r16
10008e00:	00010d40 	call	100010d4 <__mulsi3>
10008e04:	800ed43a 	srli	r7,r16,16
10008e08:	80ffffcc 	andi	r3,r16,65535
10008e0c:	b5800044 	addi	r22,r22,1
10008e10:	11c5883a 	add	r2,r2,r7
10008e14:	100e943a 	slli	r7,r2,16
10008e18:	1020d43a 	srli	r16,r2,16
10008e1c:	38c7883a 	add	r3,r7,r3
10008e20:	a8ffff15 	stw	r3,-4(r21)
10008e24:	b4bfee16 	blt	r22,r18,10008de0 <__alt_data_end+0xf8008de0>
10008e28:	80000926 	beq	r16,zero,10008e50 <__multadd+0xb4>
10008e2c:	98800217 	ldw	r2,8(r19)
10008e30:	9080130e 	bge	r18,r2,10008e80 <__multadd+0xe4>
10008e34:	90800144 	addi	r2,r18,5
10008e38:	1085883a 	add	r2,r2,r2
10008e3c:	1085883a 	add	r2,r2,r2
10008e40:	9885883a 	add	r2,r19,r2
10008e44:	14000015 	stw	r16,0(r2)
10008e48:	94800044 	addi	r18,r18,1
10008e4c:	9c800415 	stw	r18,16(r19)
10008e50:	9805883a 	mov	r2,r19
10008e54:	dfc00817 	ldw	ra,32(sp)
10008e58:	ddc00717 	ldw	r23,28(sp)
10008e5c:	dd800617 	ldw	r22,24(sp)
10008e60:	dd400517 	ldw	r21,20(sp)
10008e64:	dd000417 	ldw	r20,16(sp)
10008e68:	dcc00317 	ldw	r19,12(sp)
10008e6c:	dc800217 	ldw	r18,8(sp)
10008e70:	dc400117 	ldw	r17,4(sp)
10008e74:	dc000017 	ldw	r16,0(sp)
10008e78:	dec00904 	addi	sp,sp,36
10008e7c:	f800283a 	ret
10008e80:	99400117 	ldw	r5,4(r19)
10008e84:	a009883a 	mov	r4,r20
10008e88:	29400044 	addi	r5,r5,1
10008e8c:	0008ccc0 	call	10008ccc <_Balloc>
10008e90:	99800417 	ldw	r6,16(r19)
10008e94:	99400304 	addi	r5,r19,12
10008e98:	11000304 	addi	r4,r2,12
10008e9c:	31800084 	addi	r6,r6,2
10008ea0:	318d883a 	add	r6,r6,r6
10008ea4:	318d883a 	add	r6,r6,r6
10008ea8:	1023883a 	mov	r17,r2
10008eac:	00033ac0 	call	100033ac <memcpy>
10008eb0:	98000a26 	beq	r19,zero,10008edc <__multadd+0x140>
10008eb4:	98c00117 	ldw	r3,4(r19)
10008eb8:	a0801317 	ldw	r2,76(r20)
10008ebc:	18c7883a 	add	r3,r3,r3
10008ec0:	18c7883a 	add	r3,r3,r3
10008ec4:	10c5883a 	add	r2,r2,r3
10008ec8:	10c00017 	ldw	r3,0(r2)
10008ecc:	98c00015 	stw	r3,0(r19)
10008ed0:	14c00015 	stw	r19,0(r2)
10008ed4:	8827883a 	mov	r19,r17
10008ed8:	003fd606 	br	10008e34 <__alt_data_end+0xf8008e34>
10008edc:	8827883a 	mov	r19,r17
10008ee0:	003fd406 	br	10008e34 <__alt_data_end+0xf8008e34>

10008ee4 <__s2b>:
10008ee4:	defff904 	addi	sp,sp,-28
10008ee8:	dc400115 	stw	r17,4(sp)
10008eec:	dc000015 	stw	r16,0(sp)
10008ef0:	2023883a 	mov	r17,r4
10008ef4:	2821883a 	mov	r16,r5
10008ef8:	39000204 	addi	r4,r7,8
10008efc:	01400244 	movi	r5,9
10008f00:	dcc00315 	stw	r19,12(sp)
10008f04:	dc800215 	stw	r18,8(sp)
10008f08:	dfc00615 	stw	ra,24(sp)
10008f0c:	dd400515 	stw	r21,20(sp)
10008f10:	dd000415 	stw	r20,16(sp)
10008f14:	3825883a 	mov	r18,r7
10008f18:	3027883a 	mov	r19,r6
10008f1c:	0000f200 	call	10000f20 <__divsi3>
10008f20:	00c00044 	movi	r3,1
10008f24:	000b883a 	mov	r5,zero
10008f28:	1880030e 	bge	r3,r2,10008f38 <__s2b+0x54>
10008f2c:	18c7883a 	add	r3,r3,r3
10008f30:	29400044 	addi	r5,r5,1
10008f34:	18bffd16 	blt	r3,r2,10008f2c <__alt_data_end+0xf8008f2c>
10008f38:	8809883a 	mov	r4,r17
10008f3c:	0008ccc0 	call	10008ccc <_Balloc>
10008f40:	d8c00717 	ldw	r3,28(sp)
10008f44:	10c00515 	stw	r3,20(r2)
10008f48:	00c00044 	movi	r3,1
10008f4c:	10c00415 	stw	r3,16(r2)
10008f50:	00c00244 	movi	r3,9
10008f54:	1cc0210e 	bge	r3,r19,10008fdc <__s2b+0xf8>
10008f58:	80eb883a 	add	r21,r16,r3
10008f5c:	a829883a 	mov	r20,r21
10008f60:	84e1883a 	add	r16,r16,r19
10008f64:	a1c00007 	ldb	r7,0(r20)
10008f68:	01800284 	movi	r6,10
10008f6c:	a5000044 	addi	r20,r20,1
10008f70:	100b883a 	mov	r5,r2
10008f74:	39fff404 	addi	r7,r7,-48
10008f78:	8809883a 	mov	r4,r17
10008f7c:	0008d9c0 	call	10008d9c <__multadd>
10008f80:	a43ff81e 	bne	r20,r16,10008f64 <__alt_data_end+0xf8008f64>
10008f84:	ace1883a 	add	r16,r21,r19
10008f88:	843ffe04 	addi	r16,r16,-8
10008f8c:	9c800a0e 	bge	r19,r18,10008fb8 <__s2b+0xd4>
10008f90:	94e5c83a 	sub	r18,r18,r19
10008f94:	84a5883a 	add	r18,r16,r18
10008f98:	81c00007 	ldb	r7,0(r16)
10008f9c:	01800284 	movi	r6,10
10008fa0:	84000044 	addi	r16,r16,1
10008fa4:	100b883a 	mov	r5,r2
10008fa8:	39fff404 	addi	r7,r7,-48
10008fac:	8809883a 	mov	r4,r17
10008fb0:	0008d9c0 	call	10008d9c <__multadd>
10008fb4:	84bff81e 	bne	r16,r18,10008f98 <__alt_data_end+0xf8008f98>
10008fb8:	dfc00617 	ldw	ra,24(sp)
10008fbc:	dd400517 	ldw	r21,20(sp)
10008fc0:	dd000417 	ldw	r20,16(sp)
10008fc4:	dcc00317 	ldw	r19,12(sp)
10008fc8:	dc800217 	ldw	r18,8(sp)
10008fcc:	dc400117 	ldw	r17,4(sp)
10008fd0:	dc000017 	ldw	r16,0(sp)
10008fd4:	dec00704 	addi	sp,sp,28
10008fd8:	f800283a 	ret
10008fdc:	84000284 	addi	r16,r16,10
10008fe0:	1827883a 	mov	r19,r3
10008fe4:	003fe906 	br	10008f8c <__alt_data_end+0xf8008f8c>

10008fe8 <__hi0bits>:
10008fe8:	20bfffec 	andhi	r2,r4,65535
10008fec:	1000141e 	bne	r2,zero,10009040 <__hi0bits+0x58>
10008ff0:	2008943a 	slli	r4,r4,16
10008ff4:	00800404 	movi	r2,16
10008ff8:	20ffc02c 	andhi	r3,r4,65280
10008ffc:	1800021e 	bne	r3,zero,10009008 <__hi0bits+0x20>
10009000:	2008923a 	slli	r4,r4,8
10009004:	10800204 	addi	r2,r2,8
10009008:	20fc002c 	andhi	r3,r4,61440
1000900c:	1800021e 	bne	r3,zero,10009018 <__hi0bits+0x30>
10009010:	2008913a 	slli	r4,r4,4
10009014:	10800104 	addi	r2,r2,4
10009018:	20f0002c 	andhi	r3,r4,49152
1000901c:	1800031e 	bne	r3,zero,1000902c <__hi0bits+0x44>
10009020:	2109883a 	add	r4,r4,r4
10009024:	10800084 	addi	r2,r2,2
10009028:	2109883a 	add	r4,r4,r4
1000902c:	20000316 	blt	r4,zero,1000903c <__hi0bits+0x54>
10009030:	2110002c 	andhi	r4,r4,16384
10009034:	2000041e 	bne	r4,zero,10009048 <__hi0bits+0x60>
10009038:	00800804 	movi	r2,32
1000903c:	f800283a 	ret
10009040:	0005883a 	mov	r2,zero
10009044:	003fec06 	br	10008ff8 <__alt_data_end+0xf8008ff8>
10009048:	10800044 	addi	r2,r2,1
1000904c:	f800283a 	ret

10009050 <__lo0bits>:
10009050:	20c00017 	ldw	r3,0(r4)
10009054:	188001cc 	andi	r2,r3,7
10009058:	10000826 	beq	r2,zero,1000907c <__lo0bits+0x2c>
1000905c:	1880004c 	andi	r2,r3,1
10009060:	1000211e 	bne	r2,zero,100090e8 <__lo0bits+0x98>
10009064:	1880008c 	andi	r2,r3,2
10009068:	1000211e 	bne	r2,zero,100090f0 <__lo0bits+0xa0>
1000906c:	1806d0ba 	srli	r3,r3,2
10009070:	00800084 	movi	r2,2
10009074:	20c00015 	stw	r3,0(r4)
10009078:	f800283a 	ret
1000907c:	18bfffcc 	andi	r2,r3,65535
10009080:	10001326 	beq	r2,zero,100090d0 <__lo0bits+0x80>
10009084:	0005883a 	mov	r2,zero
10009088:	19403fcc 	andi	r5,r3,255
1000908c:	2800021e 	bne	r5,zero,10009098 <__lo0bits+0x48>
10009090:	1806d23a 	srli	r3,r3,8
10009094:	10800204 	addi	r2,r2,8
10009098:	194003cc 	andi	r5,r3,15
1000909c:	2800021e 	bne	r5,zero,100090a8 <__lo0bits+0x58>
100090a0:	1806d13a 	srli	r3,r3,4
100090a4:	10800104 	addi	r2,r2,4
100090a8:	194000cc 	andi	r5,r3,3
100090ac:	2800021e 	bne	r5,zero,100090b8 <__lo0bits+0x68>
100090b0:	1806d0ba 	srli	r3,r3,2
100090b4:	10800084 	addi	r2,r2,2
100090b8:	1940004c 	andi	r5,r3,1
100090bc:	2800081e 	bne	r5,zero,100090e0 <__lo0bits+0x90>
100090c0:	1806d07a 	srli	r3,r3,1
100090c4:	1800051e 	bne	r3,zero,100090dc <__lo0bits+0x8c>
100090c8:	00800804 	movi	r2,32
100090cc:	f800283a 	ret
100090d0:	1806d43a 	srli	r3,r3,16
100090d4:	00800404 	movi	r2,16
100090d8:	003feb06 	br	10009088 <__alt_data_end+0xf8009088>
100090dc:	10800044 	addi	r2,r2,1
100090e0:	20c00015 	stw	r3,0(r4)
100090e4:	f800283a 	ret
100090e8:	0005883a 	mov	r2,zero
100090ec:	f800283a 	ret
100090f0:	1806d07a 	srli	r3,r3,1
100090f4:	00800044 	movi	r2,1
100090f8:	20c00015 	stw	r3,0(r4)
100090fc:	f800283a 	ret

10009100 <__i2b>:
10009100:	defffd04 	addi	sp,sp,-12
10009104:	dc000015 	stw	r16,0(sp)
10009108:	04000044 	movi	r16,1
1000910c:	dc400115 	stw	r17,4(sp)
10009110:	2823883a 	mov	r17,r5
10009114:	800b883a 	mov	r5,r16
10009118:	dfc00215 	stw	ra,8(sp)
1000911c:	0008ccc0 	call	10008ccc <_Balloc>
10009120:	14400515 	stw	r17,20(r2)
10009124:	14000415 	stw	r16,16(r2)
10009128:	dfc00217 	ldw	ra,8(sp)
1000912c:	dc400117 	ldw	r17,4(sp)
10009130:	dc000017 	ldw	r16,0(sp)
10009134:	dec00304 	addi	sp,sp,12
10009138:	f800283a 	ret

1000913c <__multiply>:
1000913c:	deffef04 	addi	sp,sp,-68
10009140:	dc400815 	stw	r17,32(sp)
10009144:	dc000715 	stw	r16,28(sp)
10009148:	34400417 	ldw	r17,16(r6)
1000914c:	2c000417 	ldw	r16,16(r5)
10009150:	dd800d15 	stw	r22,52(sp)
10009154:	dc800915 	stw	r18,36(sp)
10009158:	dfc01015 	stw	ra,64(sp)
1000915c:	df000f15 	stw	fp,60(sp)
10009160:	ddc00e15 	stw	r23,56(sp)
10009164:	dd400c15 	stw	r21,48(sp)
10009168:	dd000b15 	stw	r20,44(sp)
1000916c:	dcc00a15 	stw	r19,40(sp)
10009170:	2825883a 	mov	r18,r5
10009174:	302d883a 	mov	r22,r6
10009178:	8440050e 	bge	r16,r17,10009190 <__multiply+0x54>
1000917c:	8007883a 	mov	r3,r16
10009180:	3025883a 	mov	r18,r6
10009184:	8821883a 	mov	r16,r17
10009188:	282d883a 	mov	r22,r5
1000918c:	1823883a 	mov	r17,r3
10009190:	90800217 	ldw	r2,8(r18)
10009194:	8447883a 	add	r3,r16,r17
10009198:	d8c00215 	stw	r3,8(sp)
1000919c:	91400117 	ldw	r5,4(r18)
100091a0:	10c0010e 	bge	r2,r3,100091a8 <__multiply+0x6c>
100091a4:	29400044 	addi	r5,r5,1
100091a8:	0008ccc0 	call	10008ccc <_Balloc>
100091ac:	d8c00217 	ldw	r3,8(sp)
100091b0:	d8800615 	stw	r2,24(sp)
100091b4:	18eb883a 	add	r21,r3,r3
100091b8:	ad6b883a 	add	r21,r21,r21
100091bc:	10c00504 	addi	r3,r2,20
100091c0:	1d6b883a 	add	r21,r3,r21
100091c4:	d8c00115 	stw	r3,4(sp)
100091c8:	dd400315 	stw	r21,12(sp)
100091cc:	1805883a 	mov	r2,r3
100091d0:	1d40042e 	bgeu	r3,r21,100091e4 <__multiply+0xa8>
100091d4:	d8c00317 	ldw	r3,12(sp)
100091d8:	10000015 	stw	zero,0(r2)
100091dc:	10800104 	addi	r2,r2,4
100091e0:	10fffc36 	bltu	r2,r3,100091d4 <__alt_data_end+0xf80091d4>
100091e4:	8c63883a 	add	r17,r17,r17
100091e8:	b5800504 	addi	r22,r22,20
100091ec:	8c63883a 	add	r17,r17,r17
100091f0:	94800504 	addi	r18,r18,20
100091f4:	8421883a 	add	r16,r16,r16
100091f8:	b463883a 	add	r17,r22,r17
100091fc:	8421883a 	add	r16,r16,r16
10009200:	dd800015 	stw	r22,0(sp)
10009204:	dc800415 	stw	r18,16(sp)
10009208:	dc400515 	stw	r17,20(sp)
1000920c:	9429883a 	add	r20,r18,r16
10009210:	b4404f2e 	bgeu	r22,r17,10009350 <__multiply+0x214>
10009214:	d8c00017 	ldw	r3,0(sp)
10009218:	1c800017 	ldw	r18,0(r3)
1000921c:	947fffcc 	andi	r17,r18,65535
10009220:	88001e26 	beq	r17,zero,1000929c <__multiply+0x160>
10009224:	dd800117 	ldw	r22,4(sp)
10009228:	dd400417 	ldw	r21,16(sp)
1000922c:	0027883a 	mov	r19,zero
10009230:	ac800017 	ldw	r18,0(r21)
10009234:	b4000017 	ldw	r16,0(r22)
10009238:	880b883a 	mov	r5,r17
1000923c:	913fffcc 	andi	r4,r18,65535
10009240:	00010d40 	call	100010d4 <__mulsi3>
10009244:	9008d43a 	srli	r4,r18,16
10009248:	84bfffcc 	andi	r18,r16,65535
1000924c:	1485883a 	add	r2,r2,r18
10009250:	14e5883a 	add	r18,r2,r19
10009254:	8020d43a 	srli	r16,r16,16
10009258:	9026d43a 	srli	r19,r18,16
1000925c:	880b883a 	mov	r5,r17
10009260:	00010d40 	call	100010d4 <__mulsi3>
10009264:	1405883a 	add	r2,r2,r16
10009268:	14e1883a 	add	r16,r2,r19
1000926c:	90ffffcc 	andi	r3,r18,65535
10009270:	8024943a 	slli	r18,r16,16
10009274:	ad400104 	addi	r21,r21,4
10009278:	b005883a 	mov	r2,r22
1000927c:	90c6b03a 	or	r3,r18,r3
10009280:	b0c00015 	stw	r3,0(r22)
10009284:	8026d43a 	srli	r19,r16,16
10009288:	b5800104 	addi	r22,r22,4
1000928c:	ad3fe836 	bltu	r21,r20,10009230 <__alt_data_end+0xf8009230>
10009290:	d8c00017 	ldw	r3,0(sp)
10009294:	14c00115 	stw	r19,4(r2)
10009298:	1c800017 	ldw	r18,0(r3)
1000929c:	9024d43a 	srli	r18,r18,16
100092a0:	90002226 	beq	r18,zero,1000932c <__multiply+0x1f0>
100092a4:	d8c00117 	ldw	r3,4(sp)
100092a8:	dd800417 	ldw	r22,16(sp)
100092ac:	002f883a 	mov	r23,zero
100092b0:	1f000017 	ldw	fp,0(r3)
100092b4:	1823883a 	mov	r17,r3
100092b8:	182b883a 	mov	r21,r3
100092bc:	e021883a 	mov	r16,fp
100092c0:	00000106 	br	100092c8 <__multiply+0x18c>
100092c4:	982b883a 	mov	r21,r19
100092c8:	b100000b 	ldhu	r4,0(r22)
100092cc:	8020d43a 	srli	r16,r16,16
100092d0:	900b883a 	mov	r5,r18
100092d4:	00010d40 	call	100010d4 <__mulsi3>
100092d8:	1405883a 	add	r2,r2,r16
100092dc:	15ef883a 	add	r23,r2,r23
100092e0:	b804943a 	slli	r2,r23,16
100092e4:	e0ffffcc 	andi	r3,fp,65535
100092e8:	8c400104 	addi	r17,r17,4
100092ec:	10c6b03a 	or	r3,r2,r3
100092f0:	88ffff15 	stw	r3,-4(r17)
100092f4:	b5800104 	addi	r22,r22,4
100092f8:	b13fff17 	ldw	r4,-4(r22)
100092fc:	acc00104 	addi	r19,r21,4
10009300:	900b883a 	mov	r5,r18
10009304:	2008d43a 	srli	r4,r4,16
10009308:	9c000017 	ldw	r16,0(r19)
1000930c:	00010d40 	call	100010d4 <__mulsi3>
10009310:	b806d43a 	srli	r3,r23,16
10009314:	813fffcc 	andi	r4,r16,65535
10009318:	1105883a 	add	r2,r2,r4
1000931c:	10f9883a 	add	fp,r2,r3
10009320:	e02ed43a 	srli	r23,fp,16
10009324:	b53fe736 	bltu	r22,r20,100092c4 <__alt_data_end+0xf80092c4>
10009328:	af000115 	stw	fp,4(r21)
1000932c:	d8c00017 	ldw	r3,0(sp)
10009330:	d9000517 	ldw	r4,20(sp)
10009334:	18c00104 	addi	r3,r3,4
10009338:	d8c00015 	stw	r3,0(sp)
1000933c:	d8c00117 	ldw	r3,4(sp)
10009340:	18c00104 	addi	r3,r3,4
10009344:	d8c00115 	stw	r3,4(sp)
10009348:	d8c00017 	ldw	r3,0(sp)
1000934c:	193fb136 	bltu	r3,r4,10009214 <__alt_data_end+0xf8009214>
10009350:	d8c00217 	ldw	r3,8(sp)
10009354:	00c00c0e 	bge	zero,r3,10009388 <__multiply+0x24c>
10009358:	d8c00317 	ldw	r3,12(sp)
1000935c:	18bfff17 	ldw	r2,-4(r3)
10009360:	1d7fff04 	addi	r21,r3,-4
10009364:	10000326 	beq	r2,zero,10009374 <__multiply+0x238>
10009368:	00000706 	br	10009388 <__multiply+0x24c>
1000936c:	a8800017 	ldw	r2,0(r21)
10009370:	1000051e 	bne	r2,zero,10009388 <__multiply+0x24c>
10009374:	d8c00217 	ldw	r3,8(sp)
10009378:	ad7fff04 	addi	r21,r21,-4
1000937c:	18ffffc4 	addi	r3,r3,-1
10009380:	d8c00215 	stw	r3,8(sp)
10009384:	183ff91e 	bne	r3,zero,1000936c <__alt_data_end+0xf800936c>
10009388:	d8c00617 	ldw	r3,24(sp)
1000938c:	d9000217 	ldw	r4,8(sp)
10009390:	1805883a 	mov	r2,r3
10009394:	19000415 	stw	r4,16(r3)
10009398:	dfc01017 	ldw	ra,64(sp)
1000939c:	df000f17 	ldw	fp,60(sp)
100093a0:	ddc00e17 	ldw	r23,56(sp)
100093a4:	dd800d17 	ldw	r22,52(sp)
100093a8:	dd400c17 	ldw	r21,48(sp)
100093ac:	dd000b17 	ldw	r20,44(sp)
100093b0:	dcc00a17 	ldw	r19,40(sp)
100093b4:	dc800917 	ldw	r18,36(sp)
100093b8:	dc400817 	ldw	r17,32(sp)
100093bc:	dc000717 	ldw	r16,28(sp)
100093c0:	dec01104 	addi	sp,sp,68
100093c4:	f800283a 	ret

100093c8 <__pow5mult>:
100093c8:	defffa04 	addi	sp,sp,-24
100093cc:	dcc00315 	stw	r19,12(sp)
100093d0:	dc000015 	stw	r16,0(sp)
100093d4:	dfc00515 	stw	ra,20(sp)
100093d8:	dd000415 	stw	r20,16(sp)
100093dc:	dc800215 	stw	r18,8(sp)
100093e0:	dc400115 	stw	r17,4(sp)
100093e4:	308000cc 	andi	r2,r6,3
100093e8:	3021883a 	mov	r16,r6
100093ec:	2027883a 	mov	r19,r4
100093f0:	10002f1e 	bne	r2,zero,100094b0 <__pow5mult+0xe8>
100093f4:	2825883a 	mov	r18,r5
100093f8:	8021d0ba 	srai	r16,r16,2
100093fc:	80001a26 	beq	r16,zero,10009468 <__pow5mult+0xa0>
10009400:	9c401217 	ldw	r17,72(r19)
10009404:	8800061e 	bne	r17,zero,10009420 <__pow5mult+0x58>
10009408:	00003406 	br	100094dc <__pow5mult+0x114>
1000940c:	8021d07a 	srai	r16,r16,1
10009410:	80001526 	beq	r16,zero,10009468 <__pow5mult+0xa0>
10009414:	88800017 	ldw	r2,0(r17)
10009418:	10001c26 	beq	r2,zero,1000948c <__pow5mult+0xc4>
1000941c:	1023883a 	mov	r17,r2
10009420:	8080004c 	andi	r2,r16,1
10009424:	103ff926 	beq	r2,zero,1000940c <__alt_data_end+0xf800940c>
10009428:	880d883a 	mov	r6,r17
1000942c:	900b883a 	mov	r5,r18
10009430:	9809883a 	mov	r4,r19
10009434:	000913c0 	call	1000913c <__multiply>
10009438:	90001b26 	beq	r18,zero,100094a8 <__pow5mult+0xe0>
1000943c:	91000117 	ldw	r4,4(r18)
10009440:	98c01317 	ldw	r3,76(r19)
10009444:	8021d07a 	srai	r16,r16,1
10009448:	2109883a 	add	r4,r4,r4
1000944c:	2109883a 	add	r4,r4,r4
10009450:	1907883a 	add	r3,r3,r4
10009454:	19000017 	ldw	r4,0(r3)
10009458:	91000015 	stw	r4,0(r18)
1000945c:	1c800015 	stw	r18,0(r3)
10009460:	1025883a 	mov	r18,r2
10009464:	803feb1e 	bne	r16,zero,10009414 <__alt_data_end+0xf8009414>
10009468:	9005883a 	mov	r2,r18
1000946c:	dfc00517 	ldw	ra,20(sp)
10009470:	dd000417 	ldw	r20,16(sp)
10009474:	dcc00317 	ldw	r19,12(sp)
10009478:	dc800217 	ldw	r18,8(sp)
1000947c:	dc400117 	ldw	r17,4(sp)
10009480:	dc000017 	ldw	r16,0(sp)
10009484:	dec00604 	addi	sp,sp,24
10009488:	f800283a 	ret
1000948c:	880d883a 	mov	r6,r17
10009490:	880b883a 	mov	r5,r17
10009494:	9809883a 	mov	r4,r19
10009498:	000913c0 	call	1000913c <__multiply>
1000949c:	88800015 	stw	r2,0(r17)
100094a0:	10000015 	stw	zero,0(r2)
100094a4:	003fdd06 	br	1000941c <__alt_data_end+0xf800941c>
100094a8:	1025883a 	mov	r18,r2
100094ac:	003fd706 	br	1000940c <__alt_data_end+0xf800940c>
100094b0:	10bfffc4 	addi	r2,r2,-1
100094b4:	1085883a 	add	r2,r2,r2
100094b8:	00c40074 	movhi	r3,4097
100094bc:	18c77904 	addi	r3,r3,7652
100094c0:	1085883a 	add	r2,r2,r2
100094c4:	1885883a 	add	r2,r3,r2
100094c8:	11800017 	ldw	r6,0(r2)
100094cc:	000f883a 	mov	r7,zero
100094d0:	0008d9c0 	call	10008d9c <__multadd>
100094d4:	1025883a 	mov	r18,r2
100094d8:	003fc706 	br	100093f8 <__alt_data_end+0xf80093f8>
100094dc:	05000044 	movi	r20,1
100094e0:	a00b883a 	mov	r5,r20
100094e4:	9809883a 	mov	r4,r19
100094e8:	0008ccc0 	call	10008ccc <_Balloc>
100094ec:	1023883a 	mov	r17,r2
100094f0:	00809c44 	movi	r2,625
100094f4:	88800515 	stw	r2,20(r17)
100094f8:	8d000415 	stw	r20,16(r17)
100094fc:	9c401215 	stw	r17,72(r19)
10009500:	88000015 	stw	zero,0(r17)
10009504:	003fc606 	br	10009420 <__alt_data_end+0xf8009420>

10009508 <__lshift>:
10009508:	defff904 	addi	sp,sp,-28
1000950c:	dd400515 	stw	r21,20(sp)
10009510:	dcc00315 	stw	r19,12(sp)
10009514:	302bd17a 	srai	r21,r6,5
10009518:	2cc00417 	ldw	r19,16(r5)
1000951c:	28800217 	ldw	r2,8(r5)
10009520:	dd000415 	stw	r20,16(sp)
10009524:	ace7883a 	add	r19,r21,r19
10009528:	dc800215 	stw	r18,8(sp)
1000952c:	dc400115 	stw	r17,4(sp)
10009530:	dc000015 	stw	r16,0(sp)
10009534:	dfc00615 	stw	ra,24(sp)
10009538:	9c000044 	addi	r16,r19,1
1000953c:	2823883a 	mov	r17,r5
10009540:	3029883a 	mov	r20,r6
10009544:	2025883a 	mov	r18,r4
10009548:	29400117 	ldw	r5,4(r5)
1000954c:	1400030e 	bge	r2,r16,1000955c <__lshift+0x54>
10009550:	1085883a 	add	r2,r2,r2
10009554:	29400044 	addi	r5,r5,1
10009558:	143ffd16 	blt	r2,r16,10009550 <__alt_data_end+0xf8009550>
1000955c:	9009883a 	mov	r4,r18
10009560:	0008ccc0 	call	10008ccc <_Balloc>
10009564:	10c00504 	addi	r3,r2,20
10009568:	0540070e 	bge	zero,r21,10009588 <__lshift+0x80>
1000956c:	ad6b883a 	add	r21,r21,r21
10009570:	ad6b883a 	add	r21,r21,r21
10009574:	1809883a 	mov	r4,r3
10009578:	1d47883a 	add	r3,r3,r21
1000957c:	20000015 	stw	zero,0(r4)
10009580:	21000104 	addi	r4,r4,4
10009584:	193ffd1e 	bne	r3,r4,1000957c <__alt_data_end+0xf800957c>
10009588:	8a000417 	ldw	r8,16(r17)
1000958c:	89000504 	addi	r4,r17,20
10009590:	a18007cc 	andi	r6,r20,31
10009594:	4211883a 	add	r8,r8,r8
10009598:	4211883a 	add	r8,r8,r8
1000959c:	2211883a 	add	r8,r4,r8
100095a0:	30002326 	beq	r6,zero,10009630 <__lshift+0x128>
100095a4:	02400804 	movi	r9,32
100095a8:	4993c83a 	sub	r9,r9,r6
100095ac:	000b883a 	mov	r5,zero
100095b0:	21c00017 	ldw	r7,0(r4)
100095b4:	1815883a 	mov	r10,r3
100095b8:	18c00104 	addi	r3,r3,4
100095bc:	398e983a 	sll	r7,r7,r6
100095c0:	21000104 	addi	r4,r4,4
100095c4:	394ab03a 	or	r5,r7,r5
100095c8:	197fff15 	stw	r5,-4(r3)
100095cc:	217fff17 	ldw	r5,-4(r4)
100095d0:	2a4ad83a 	srl	r5,r5,r9
100095d4:	223ff636 	bltu	r4,r8,100095b0 <__alt_data_end+0xf80095b0>
100095d8:	51400115 	stw	r5,4(r10)
100095dc:	28001a1e 	bne	r5,zero,10009648 <__lshift+0x140>
100095e0:	843fffc4 	addi	r16,r16,-1
100095e4:	14000415 	stw	r16,16(r2)
100095e8:	88000826 	beq	r17,zero,1000960c <__lshift+0x104>
100095ec:	89000117 	ldw	r4,4(r17)
100095f0:	90c01317 	ldw	r3,76(r18)
100095f4:	2109883a 	add	r4,r4,r4
100095f8:	2109883a 	add	r4,r4,r4
100095fc:	1907883a 	add	r3,r3,r4
10009600:	19000017 	ldw	r4,0(r3)
10009604:	89000015 	stw	r4,0(r17)
10009608:	1c400015 	stw	r17,0(r3)
1000960c:	dfc00617 	ldw	ra,24(sp)
10009610:	dd400517 	ldw	r21,20(sp)
10009614:	dd000417 	ldw	r20,16(sp)
10009618:	dcc00317 	ldw	r19,12(sp)
1000961c:	dc800217 	ldw	r18,8(sp)
10009620:	dc400117 	ldw	r17,4(sp)
10009624:	dc000017 	ldw	r16,0(sp)
10009628:	dec00704 	addi	sp,sp,28
1000962c:	f800283a 	ret
10009630:	21400017 	ldw	r5,0(r4)
10009634:	18c00104 	addi	r3,r3,4
10009638:	21000104 	addi	r4,r4,4
1000963c:	197fff15 	stw	r5,-4(r3)
10009640:	223ffb36 	bltu	r4,r8,10009630 <__alt_data_end+0xf8009630>
10009644:	003fe606 	br	100095e0 <__alt_data_end+0xf80095e0>
10009648:	9c000084 	addi	r16,r19,2
1000964c:	003fe406 	br	100095e0 <__alt_data_end+0xf80095e0>

10009650 <__mcmp>:
10009650:	20800417 	ldw	r2,16(r4)
10009654:	28c00417 	ldw	r3,16(r5)
10009658:	10c5c83a 	sub	r2,r2,r3
1000965c:	1000111e 	bne	r2,zero,100096a4 <__mcmp+0x54>
10009660:	18c7883a 	add	r3,r3,r3
10009664:	18c7883a 	add	r3,r3,r3
10009668:	21000504 	addi	r4,r4,20
1000966c:	29400504 	addi	r5,r5,20
10009670:	20c5883a 	add	r2,r4,r3
10009674:	28cb883a 	add	r5,r5,r3
10009678:	00000106 	br	10009680 <__mcmp+0x30>
1000967c:	20800a2e 	bgeu	r4,r2,100096a8 <__mcmp+0x58>
10009680:	10bfff04 	addi	r2,r2,-4
10009684:	297fff04 	addi	r5,r5,-4
10009688:	11800017 	ldw	r6,0(r2)
1000968c:	28c00017 	ldw	r3,0(r5)
10009690:	30fffa26 	beq	r6,r3,1000967c <__alt_data_end+0xf800967c>
10009694:	30c00236 	bltu	r6,r3,100096a0 <__mcmp+0x50>
10009698:	00800044 	movi	r2,1
1000969c:	f800283a 	ret
100096a0:	00bfffc4 	movi	r2,-1
100096a4:	f800283a 	ret
100096a8:	0005883a 	mov	r2,zero
100096ac:	f800283a 	ret

100096b0 <__mdiff>:
100096b0:	28c00417 	ldw	r3,16(r5)
100096b4:	30800417 	ldw	r2,16(r6)
100096b8:	defffa04 	addi	sp,sp,-24
100096bc:	dcc00315 	stw	r19,12(sp)
100096c0:	dc800215 	stw	r18,8(sp)
100096c4:	dfc00515 	stw	ra,20(sp)
100096c8:	dd000415 	stw	r20,16(sp)
100096cc:	dc400115 	stw	r17,4(sp)
100096d0:	dc000015 	stw	r16,0(sp)
100096d4:	1887c83a 	sub	r3,r3,r2
100096d8:	2825883a 	mov	r18,r5
100096dc:	3027883a 	mov	r19,r6
100096e0:	1800141e 	bne	r3,zero,10009734 <__mdiff+0x84>
100096e4:	1085883a 	add	r2,r2,r2
100096e8:	1085883a 	add	r2,r2,r2
100096ec:	2a000504 	addi	r8,r5,20
100096f0:	34000504 	addi	r16,r6,20
100096f4:	4087883a 	add	r3,r8,r2
100096f8:	8085883a 	add	r2,r16,r2
100096fc:	00000106 	br	10009704 <__mdiff+0x54>
10009700:	40c0592e 	bgeu	r8,r3,10009868 <__mdiff+0x1b8>
10009704:	18ffff04 	addi	r3,r3,-4
10009708:	10bfff04 	addi	r2,r2,-4
1000970c:	19c00017 	ldw	r7,0(r3)
10009710:	11400017 	ldw	r5,0(r2)
10009714:	397ffa26 	beq	r7,r5,10009700 <__alt_data_end+0xf8009700>
10009718:	3940592e 	bgeu	r7,r5,10009880 <__mdiff+0x1d0>
1000971c:	9005883a 	mov	r2,r18
10009720:	4023883a 	mov	r17,r8
10009724:	9825883a 	mov	r18,r19
10009728:	05000044 	movi	r20,1
1000972c:	1027883a 	mov	r19,r2
10009730:	00000406 	br	10009744 <__mdiff+0x94>
10009734:	18005616 	blt	r3,zero,10009890 <__mdiff+0x1e0>
10009738:	34400504 	addi	r17,r6,20
1000973c:	2c000504 	addi	r16,r5,20
10009740:	0029883a 	mov	r20,zero
10009744:	91400117 	ldw	r5,4(r18)
10009748:	0008ccc0 	call	10008ccc <_Balloc>
1000974c:	92400417 	ldw	r9,16(r18)
10009750:	9b000417 	ldw	r12,16(r19)
10009754:	12c00504 	addi	r11,r2,20
10009758:	4a51883a 	add	r8,r9,r9
1000975c:	6319883a 	add	r12,r12,r12
10009760:	4211883a 	add	r8,r8,r8
10009764:	6319883a 	add	r12,r12,r12
10009768:	15000315 	stw	r20,12(r2)
1000976c:	8211883a 	add	r8,r16,r8
10009770:	8b19883a 	add	r12,r17,r12
10009774:	0007883a 	mov	r3,zero
10009778:	81400017 	ldw	r5,0(r16)
1000977c:	89c00017 	ldw	r7,0(r17)
10009780:	59800104 	addi	r6,r11,4
10009784:	293fffcc 	andi	r4,r5,65535
10009788:	20c7883a 	add	r3,r4,r3
1000978c:	393fffcc 	andi	r4,r7,65535
10009790:	1909c83a 	sub	r4,r3,r4
10009794:	280ad43a 	srli	r5,r5,16
10009798:	380ed43a 	srli	r7,r7,16
1000979c:	2007d43a 	srai	r3,r4,16
100097a0:	213fffcc 	andi	r4,r4,65535
100097a4:	29cbc83a 	sub	r5,r5,r7
100097a8:	28c7883a 	add	r3,r5,r3
100097ac:	180a943a 	slli	r5,r3,16
100097b0:	8c400104 	addi	r17,r17,4
100097b4:	84000104 	addi	r16,r16,4
100097b8:	2908b03a 	or	r4,r5,r4
100097bc:	59000015 	stw	r4,0(r11)
100097c0:	1807d43a 	srai	r3,r3,16
100097c4:	3015883a 	mov	r10,r6
100097c8:	3017883a 	mov	r11,r6
100097cc:	8b3fea36 	bltu	r17,r12,10009778 <__alt_data_end+0xf8009778>
100097d0:	8200162e 	bgeu	r16,r8,1000982c <__mdiff+0x17c>
100097d4:	8017883a 	mov	r11,r16
100097d8:	59400017 	ldw	r5,0(r11)
100097dc:	31800104 	addi	r6,r6,4
100097e0:	5ac00104 	addi	r11,r11,4
100097e4:	293fffcc 	andi	r4,r5,65535
100097e8:	20c7883a 	add	r3,r4,r3
100097ec:	280ed43a 	srli	r7,r5,16
100097f0:	180bd43a 	srai	r5,r3,16
100097f4:	193fffcc 	andi	r4,r3,65535
100097f8:	3947883a 	add	r3,r7,r5
100097fc:	180a943a 	slli	r5,r3,16
10009800:	1807d43a 	srai	r3,r3,16
10009804:	2908b03a 	or	r4,r5,r4
10009808:	313fff15 	stw	r4,-4(r6)
1000980c:	5a3ff236 	bltu	r11,r8,100097d8 <__alt_data_end+0xf80097d8>
10009810:	0406303a 	nor	r3,zero,r16
10009814:	1a07883a 	add	r3,r3,r8
10009818:	1806d0ba 	srli	r3,r3,2
1000981c:	18c00044 	addi	r3,r3,1
10009820:	18c7883a 	add	r3,r3,r3
10009824:	18c7883a 	add	r3,r3,r3
10009828:	50d5883a 	add	r10,r10,r3
1000982c:	50ffff04 	addi	r3,r10,-4
10009830:	2000041e 	bne	r4,zero,10009844 <__mdiff+0x194>
10009834:	18ffff04 	addi	r3,r3,-4
10009838:	19000017 	ldw	r4,0(r3)
1000983c:	4a7fffc4 	addi	r9,r9,-1
10009840:	203ffc26 	beq	r4,zero,10009834 <__alt_data_end+0xf8009834>
10009844:	12400415 	stw	r9,16(r2)
10009848:	dfc00517 	ldw	ra,20(sp)
1000984c:	dd000417 	ldw	r20,16(sp)
10009850:	dcc00317 	ldw	r19,12(sp)
10009854:	dc800217 	ldw	r18,8(sp)
10009858:	dc400117 	ldw	r17,4(sp)
1000985c:	dc000017 	ldw	r16,0(sp)
10009860:	dec00604 	addi	sp,sp,24
10009864:	f800283a 	ret
10009868:	000b883a 	mov	r5,zero
1000986c:	0008ccc0 	call	10008ccc <_Balloc>
10009870:	00c00044 	movi	r3,1
10009874:	10c00415 	stw	r3,16(r2)
10009878:	10000515 	stw	zero,20(r2)
1000987c:	003ff206 	br	10009848 <__alt_data_end+0xf8009848>
10009880:	8023883a 	mov	r17,r16
10009884:	0029883a 	mov	r20,zero
10009888:	4021883a 	mov	r16,r8
1000988c:	003fad06 	br	10009744 <__alt_data_end+0xf8009744>
10009890:	9005883a 	mov	r2,r18
10009894:	94400504 	addi	r17,r18,20
10009898:	9c000504 	addi	r16,r19,20
1000989c:	9825883a 	mov	r18,r19
100098a0:	05000044 	movi	r20,1
100098a4:	1027883a 	mov	r19,r2
100098a8:	003fa606 	br	10009744 <__alt_data_end+0xf8009744>

100098ac <__ulp>:
100098ac:	295ffc2c 	andhi	r5,r5,32752
100098b0:	00bf3034 	movhi	r2,64704
100098b4:	2887883a 	add	r3,r5,r2
100098b8:	00c0020e 	bge	zero,r3,100098c4 <__ulp+0x18>
100098bc:	0005883a 	mov	r2,zero
100098c0:	f800283a 	ret
100098c4:	00c7c83a 	sub	r3,zero,r3
100098c8:	1807d53a 	srai	r3,r3,20
100098cc:	008004c4 	movi	r2,19
100098d0:	10c00b0e 	bge	r2,r3,10009900 <__ulp+0x54>
100098d4:	18bffb04 	addi	r2,r3,-20
100098d8:	01000784 	movi	r4,30
100098dc:	0007883a 	mov	r3,zero
100098e0:	20800516 	blt	r4,r2,100098f8 <__ulp+0x4c>
100098e4:	010007c4 	movi	r4,31
100098e8:	2089c83a 	sub	r4,r4,r2
100098ec:	00800044 	movi	r2,1
100098f0:	1104983a 	sll	r2,r2,r4
100098f4:	f800283a 	ret
100098f8:	00800044 	movi	r2,1
100098fc:	f800283a 	ret
10009900:	01400234 	movhi	r5,8
10009904:	28c7d83a 	sra	r3,r5,r3
10009908:	0005883a 	mov	r2,zero
1000990c:	f800283a 	ret

10009910 <__b2d>:
10009910:	defffa04 	addi	sp,sp,-24
10009914:	dc000015 	stw	r16,0(sp)
10009918:	24000417 	ldw	r16,16(r4)
1000991c:	dc400115 	stw	r17,4(sp)
10009920:	24400504 	addi	r17,r4,20
10009924:	8421883a 	add	r16,r16,r16
10009928:	8421883a 	add	r16,r16,r16
1000992c:	8c21883a 	add	r16,r17,r16
10009930:	dc800215 	stw	r18,8(sp)
10009934:	84bfff17 	ldw	r18,-4(r16)
10009938:	dd000415 	stw	r20,16(sp)
1000993c:	dcc00315 	stw	r19,12(sp)
10009940:	9009883a 	mov	r4,r18
10009944:	2829883a 	mov	r20,r5
10009948:	dfc00515 	stw	ra,20(sp)
1000994c:	0008fe80 	call	10008fe8 <__hi0bits>
10009950:	00c00804 	movi	r3,32
10009954:	1889c83a 	sub	r4,r3,r2
10009958:	a1000015 	stw	r4,0(r20)
1000995c:	01000284 	movi	r4,10
10009960:	84ffff04 	addi	r19,r16,-4
10009964:	20801216 	blt	r4,r2,100099b0 <__b2d+0xa0>
10009968:	018002c4 	movi	r6,11
1000996c:	308dc83a 	sub	r6,r6,r2
10009970:	9186d83a 	srl	r3,r18,r6
10009974:	18cffc34 	orhi	r3,r3,16368
10009978:	8cc0212e 	bgeu	r17,r19,10009a00 <__b2d+0xf0>
1000997c:	813ffe17 	ldw	r4,-8(r16)
10009980:	218cd83a 	srl	r6,r4,r6
10009984:	10800544 	addi	r2,r2,21
10009988:	9084983a 	sll	r2,r18,r2
1000998c:	1184b03a 	or	r2,r2,r6
10009990:	dfc00517 	ldw	ra,20(sp)
10009994:	dd000417 	ldw	r20,16(sp)
10009998:	dcc00317 	ldw	r19,12(sp)
1000999c:	dc800217 	ldw	r18,8(sp)
100099a0:	dc400117 	ldw	r17,4(sp)
100099a4:	dc000017 	ldw	r16,0(sp)
100099a8:	dec00604 	addi	sp,sp,24
100099ac:	f800283a 	ret
100099b0:	8cc00f2e 	bgeu	r17,r19,100099f0 <__b2d+0xe0>
100099b4:	117ffd44 	addi	r5,r2,-11
100099b8:	80bffe17 	ldw	r2,-8(r16)
100099bc:	28000e26 	beq	r5,zero,100099f8 <__b2d+0xe8>
100099c0:	1949c83a 	sub	r4,r3,r5
100099c4:	9164983a 	sll	r18,r18,r5
100099c8:	1106d83a 	srl	r3,r2,r4
100099cc:	81bffe04 	addi	r6,r16,-8
100099d0:	948ffc34 	orhi	r18,r18,16368
100099d4:	90c6b03a 	or	r3,r18,r3
100099d8:	89800e2e 	bgeu	r17,r6,10009a14 <__b2d+0x104>
100099dc:	81bffd17 	ldw	r6,-12(r16)
100099e0:	1144983a 	sll	r2,r2,r5
100099e4:	310ad83a 	srl	r5,r6,r4
100099e8:	2884b03a 	or	r2,r5,r2
100099ec:	003fe806 	br	10009990 <__alt_data_end+0xf8009990>
100099f0:	10bffd44 	addi	r2,r2,-11
100099f4:	1000041e 	bne	r2,zero,10009a08 <__b2d+0xf8>
100099f8:	90cffc34 	orhi	r3,r18,16368
100099fc:	003fe406 	br	10009990 <__alt_data_end+0xf8009990>
10009a00:	000d883a 	mov	r6,zero
10009a04:	003fdf06 	br	10009984 <__alt_data_end+0xf8009984>
10009a08:	90a4983a 	sll	r18,r18,r2
10009a0c:	0005883a 	mov	r2,zero
10009a10:	003ff906 	br	100099f8 <__alt_data_end+0xf80099f8>
10009a14:	1144983a 	sll	r2,r2,r5
10009a18:	003fdd06 	br	10009990 <__alt_data_end+0xf8009990>

10009a1c <__d2b>:
10009a1c:	defff804 	addi	sp,sp,-32
10009a20:	dc000215 	stw	r16,8(sp)
10009a24:	3021883a 	mov	r16,r6
10009a28:	dc400315 	stw	r17,12(sp)
10009a2c:	8022907a 	slli	r17,r16,1
10009a30:	dd000615 	stw	r20,24(sp)
10009a34:	2829883a 	mov	r20,r5
10009a38:	01400044 	movi	r5,1
10009a3c:	dcc00515 	stw	r19,20(sp)
10009a40:	dc800415 	stw	r18,16(sp)
10009a44:	dfc00715 	stw	ra,28(sp)
10009a48:	3825883a 	mov	r18,r7
10009a4c:	8822d57a 	srli	r17,r17,21
10009a50:	0008ccc0 	call	10008ccc <_Balloc>
10009a54:	1027883a 	mov	r19,r2
10009a58:	00800434 	movhi	r2,16
10009a5c:	10bfffc4 	addi	r2,r2,-1
10009a60:	808c703a 	and	r6,r16,r2
10009a64:	88000126 	beq	r17,zero,10009a6c <__d2b+0x50>
10009a68:	31800434 	orhi	r6,r6,16
10009a6c:	d9800015 	stw	r6,0(sp)
10009a70:	a0002426 	beq	r20,zero,10009b04 <__d2b+0xe8>
10009a74:	d9000104 	addi	r4,sp,4
10009a78:	dd000115 	stw	r20,4(sp)
10009a7c:	00090500 	call	10009050 <__lo0bits>
10009a80:	d8c00017 	ldw	r3,0(sp)
10009a84:	10002f1e 	bne	r2,zero,10009b44 <__d2b+0x128>
10009a88:	d9000117 	ldw	r4,4(sp)
10009a8c:	99000515 	stw	r4,20(r19)
10009a90:	1821003a 	cmpeq	r16,r3,zero
10009a94:	01000084 	movi	r4,2
10009a98:	2421c83a 	sub	r16,r4,r16
10009a9c:	98c00615 	stw	r3,24(r19)
10009aa0:	9c000415 	stw	r16,16(r19)
10009aa4:	88001f1e 	bne	r17,zero,10009b24 <__d2b+0x108>
10009aa8:	10bef384 	addi	r2,r2,-1074
10009aac:	90800015 	stw	r2,0(r18)
10009ab0:	00900034 	movhi	r2,16384
10009ab4:	10bfffc4 	addi	r2,r2,-1
10009ab8:	8085883a 	add	r2,r16,r2
10009abc:	1085883a 	add	r2,r2,r2
10009ac0:	1085883a 	add	r2,r2,r2
10009ac4:	9885883a 	add	r2,r19,r2
10009ac8:	11000517 	ldw	r4,20(r2)
10009acc:	8020917a 	slli	r16,r16,5
10009ad0:	0008fe80 	call	10008fe8 <__hi0bits>
10009ad4:	d8c00817 	ldw	r3,32(sp)
10009ad8:	8085c83a 	sub	r2,r16,r2
10009adc:	18800015 	stw	r2,0(r3)
10009ae0:	9805883a 	mov	r2,r19
10009ae4:	dfc00717 	ldw	ra,28(sp)
10009ae8:	dd000617 	ldw	r20,24(sp)
10009aec:	dcc00517 	ldw	r19,20(sp)
10009af0:	dc800417 	ldw	r18,16(sp)
10009af4:	dc400317 	ldw	r17,12(sp)
10009af8:	dc000217 	ldw	r16,8(sp)
10009afc:	dec00804 	addi	sp,sp,32
10009b00:	f800283a 	ret
10009b04:	d809883a 	mov	r4,sp
10009b08:	00090500 	call	10009050 <__lo0bits>
10009b0c:	d8c00017 	ldw	r3,0(sp)
10009b10:	04000044 	movi	r16,1
10009b14:	9c000415 	stw	r16,16(r19)
10009b18:	98c00515 	stw	r3,20(r19)
10009b1c:	10800804 	addi	r2,r2,32
10009b20:	883fe126 	beq	r17,zero,10009aa8 <__alt_data_end+0xf8009aa8>
10009b24:	00c00d44 	movi	r3,53
10009b28:	8c7ef344 	addi	r17,r17,-1075
10009b2c:	88a3883a 	add	r17,r17,r2
10009b30:	1885c83a 	sub	r2,r3,r2
10009b34:	d8c00817 	ldw	r3,32(sp)
10009b38:	94400015 	stw	r17,0(r18)
10009b3c:	18800015 	stw	r2,0(r3)
10009b40:	003fe706 	br	10009ae0 <__alt_data_end+0xf8009ae0>
10009b44:	01000804 	movi	r4,32
10009b48:	2089c83a 	sub	r4,r4,r2
10009b4c:	1908983a 	sll	r4,r3,r4
10009b50:	d9400117 	ldw	r5,4(sp)
10009b54:	1886d83a 	srl	r3,r3,r2
10009b58:	2148b03a 	or	r4,r4,r5
10009b5c:	99000515 	stw	r4,20(r19)
10009b60:	d8c00015 	stw	r3,0(sp)
10009b64:	003fca06 	br	10009a90 <__alt_data_end+0xf8009a90>

10009b68 <__ratio>:
10009b68:	defff904 	addi	sp,sp,-28
10009b6c:	dc400315 	stw	r17,12(sp)
10009b70:	2823883a 	mov	r17,r5
10009b74:	d9400104 	addi	r5,sp,4
10009b78:	dfc00615 	stw	ra,24(sp)
10009b7c:	dcc00515 	stw	r19,20(sp)
10009b80:	dc800415 	stw	r18,16(sp)
10009b84:	2027883a 	mov	r19,r4
10009b88:	dc000215 	stw	r16,8(sp)
10009b8c:	00099100 	call	10009910 <__b2d>
10009b90:	d80b883a 	mov	r5,sp
10009b94:	8809883a 	mov	r4,r17
10009b98:	1025883a 	mov	r18,r2
10009b9c:	1821883a 	mov	r16,r3
10009ba0:	00099100 	call	10009910 <__b2d>
10009ba4:	8a000417 	ldw	r8,16(r17)
10009ba8:	99000417 	ldw	r4,16(r19)
10009bac:	d9400117 	ldw	r5,4(sp)
10009bb0:	2209c83a 	sub	r4,r4,r8
10009bb4:	2010917a 	slli	r8,r4,5
10009bb8:	d9000017 	ldw	r4,0(sp)
10009bbc:	2909c83a 	sub	r4,r5,r4
10009bc0:	4109883a 	add	r4,r8,r4
10009bc4:	01000e0e 	bge	zero,r4,10009c00 <__ratio+0x98>
10009bc8:	2008953a 	slli	r4,r4,20
10009bcc:	2421883a 	add	r16,r4,r16
10009bd0:	100d883a 	mov	r6,r2
10009bd4:	180f883a 	mov	r7,r3
10009bd8:	9009883a 	mov	r4,r18
10009bdc:	800b883a 	mov	r5,r16
10009be0:	000d5280 	call	1000d528 <__divdf3>
10009be4:	dfc00617 	ldw	ra,24(sp)
10009be8:	dcc00517 	ldw	r19,20(sp)
10009bec:	dc800417 	ldw	r18,16(sp)
10009bf0:	dc400317 	ldw	r17,12(sp)
10009bf4:	dc000217 	ldw	r16,8(sp)
10009bf8:	dec00704 	addi	sp,sp,28
10009bfc:	f800283a 	ret
10009c00:	2008953a 	slli	r4,r4,20
10009c04:	1907c83a 	sub	r3,r3,r4
10009c08:	003ff106 	br	10009bd0 <__alt_data_end+0xf8009bd0>

10009c0c <_mprec_log10>:
10009c0c:	defffe04 	addi	sp,sp,-8
10009c10:	dc000015 	stw	r16,0(sp)
10009c14:	dfc00115 	stw	ra,4(sp)
10009c18:	008005c4 	movi	r2,23
10009c1c:	2021883a 	mov	r16,r4
10009c20:	11000d0e 	bge	r2,r4,10009c58 <_mprec_log10+0x4c>
10009c24:	0005883a 	mov	r2,zero
10009c28:	00cffc34 	movhi	r3,16368
10009c2c:	843fffc4 	addi	r16,r16,-1
10009c30:	000d883a 	mov	r6,zero
10009c34:	01d00934 	movhi	r7,16420
10009c38:	1009883a 	mov	r4,r2
10009c3c:	180b883a 	mov	r5,r3
10009c40:	000e1500 	call	1000e150 <__muldf3>
10009c44:	803ff91e 	bne	r16,zero,10009c2c <__alt_data_end+0xf8009c2c>
10009c48:	dfc00117 	ldw	ra,4(sp)
10009c4c:	dc000017 	ldw	r16,0(sp)
10009c50:	dec00204 	addi	sp,sp,8
10009c54:	f800283a 	ret
10009c58:	202090fa 	slli	r16,r4,3
10009c5c:	00840074 	movhi	r2,4097
10009c60:	10879004 	addi	r2,r2,7744
10009c64:	1421883a 	add	r16,r2,r16
10009c68:	80800017 	ldw	r2,0(r16)
10009c6c:	80c00117 	ldw	r3,4(r16)
10009c70:	dfc00117 	ldw	ra,4(sp)
10009c74:	dc000017 	ldw	r16,0(sp)
10009c78:	dec00204 	addi	sp,sp,8
10009c7c:	f800283a 	ret

10009c80 <__copybits>:
10009c80:	297fffc4 	addi	r5,r5,-1
10009c84:	280fd17a 	srai	r7,r5,5
10009c88:	30c00417 	ldw	r3,16(r6)
10009c8c:	30800504 	addi	r2,r6,20
10009c90:	39c00044 	addi	r7,r7,1
10009c94:	18c7883a 	add	r3,r3,r3
10009c98:	39cf883a 	add	r7,r7,r7
10009c9c:	18c7883a 	add	r3,r3,r3
10009ca0:	39cf883a 	add	r7,r7,r7
10009ca4:	10c7883a 	add	r3,r2,r3
10009ca8:	21cf883a 	add	r7,r4,r7
10009cac:	10c00d2e 	bgeu	r2,r3,10009ce4 <__copybits+0x64>
10009cb0:	200b883a 	mov	r5,r4
10009cb4:	12000017 	ldw	r8,0(r2)
10009cb8:	29400104 	addi	r5,r5,4
10009cbc:	10800104 	addi	r2,r2,4
10009cc0:	2a3fff15 	stw	r8,-4(r5)
10009cc4:	10fffb36 	bltu	r2,r3,10009cb4 <__alt_data_end+0xf8009cb4>
10009cc8:	1985c83a 	sub	r2,r3,r6
10009ccc:	10bffac4 	addi	r2,r2,-21
10009cd0:	1004d0ba 	srli	r2,r2,2
10009cd4:	10800044 	addi	r2,r2,1
10009cd8:	1085883a 	add	r2,r2,r2
10009cdc:	1085883a 	add	r2,r2,r2
10009ce0:	2089883a 	add	r4,r4,r2
10009ce4:	21c0032e 	bgeu	r4,r7,10009cf4 <__copybits+0x74>
10009ce8:	20000015 	stw	zero,0(r4)
10009cec:	21000104 	addi	r4,r4,4
10009cf0:	21fffd36 	bltu	r4,r7,10009ce8 <__alt_data_end+0xf8009ce8>
10009cf4:	f800283a 	ret

10009cf8 <__any_on>:
10009cf8:	20c00417 	ldw	r3,16(r4)
10009cfc:	2805d17a 	srai	r2,r5,5
10009d00:	21000504 	addi	r4,r4,20
10009d04:	18800d0e 	bge	r3,r2,10009d3c <__any_on+0x44>
10009d08:	18c7883a 	add	r3,r3,r3
10009d0c:	18c7883a 	add	r3,r3,r3
10009d10:	20c7883a 	add	r3,r4,r3
10009d14:	20c0192e 	bgeu	r4,r3,10009d7c <__any_on+0x84>
10009d18:	18bfff17 	ldw	r2,-4(r3)
10009d1c:	18ffff04 	addi	r3,r3,-4
10009d20:	1000041e 	bne	r2,zero,10009d34 <__any_on+0x3c>
10009d24:	20c0142e 	bgeu	r4,r3,10009d78 <__any_on+0x80>
10009d28:	18ffff04 	addi	r3,r3,-4
10009d2c:	19400017 	ldw	r5,0(r3)
10009d30:	283ffc26 	beq	r5,zero,10009d24 <__alt_data_end+0xf8009d24>
10009d34:	00800044 	movi	r2,1
10009d38:	f800283a 	ret
10009d3c:	10c00a0e 	bge	r2,r3,10009d68 <__any_on+0x70>
10009d40:	1085883a 	add	r2,r2,r2
10009d44:	1085883a 	add	r2,r2,r2
10009d48:	294007cc 	andi	r5,r5,31
10009d4c:	2087883a 	add	r3,r4,r2
10009d50:	283ff026 	beq	r5,zero,10009d14 <__alt_data_end+0xf8009d14>
10009d54:	19800017 	ldw	r6,0(r3)
10009d58:	3144d83a 	srl	r2,r6,r5
10009d5c:	114a983a 	sll	r5,r2,r5
10009d60:	317ff41e 	bne	r6,r5,10009d34 <__alt_data_end+0xf8009d34>
10009d64:	003feb06 	br	10009d14 <__alt_data_end+0xf8009d14>
10009d68:	1085883a 	add	r2,r2,r2
10009d6c:	1085883a 	add	r2,r2,r2
10009d70:	2087883a 	add	r3,r4,r2
10009d74:	003fe706 	br	10009d14 <__alt_data_end+0xf8009d14>
10009d78:	f800283a 	ret
10009d7c:	0005883a 	mov	r2,zero
10009d80:	f800283a 	ret

10009d84 <_putc_r>:
10009d84:	defffc04 	addi	sp,sp,-16
10009d88:	dc000215 	stw	r16,8(sp)
10009d8c:	dfc00315 	stw	ra,12(sp)
10009d90:	2021883a 	mov	r16,r4
10009d94:	20000226 	beq	r4,zero,10009da0 <_putc_r+0x1c>
10009d98:	20800e17 	ldw	r2,56(r4)
10009d9c:	10001b26 	beq	r2,zero,10009e0c <_putc_r+0x88>
10009da0:	30800217 	ldw	r2,8(r6)
10009da4:	10bfffc4 	addi	r2,r2,-1
10009da8:	30800215 	stw	r2,8(r6)
10009dac:	10000a16 	blt	r2,zero,10009dd8 <_putc_r+0x54>
10009db0:	30800017 	ldw	r2,0(r6)
10009db4:	11400005 	stb	r5,0(r2)
10009db8:	30800017 	ldw	r2,0(r6)
10009dbc:	10c00044 	addi	r3,r2,1
10009dc0:	30c00015 	stw	r3,0(r6)
10009dc4:	10800003 	ldbu	r2,0(r2)
10009dc8:	dfc00317 	ldw	ra,12(sp)
10009dcc:	dc000217 	ldw	r16,8(sp)
10009dd0:	dec00404 	addi	sp,sp,16
10009dd4:	f800283a 	ret
10009dd8:	30c00617 	ldw	r3,24(r6)
10009ddc:	10c00616 	blt	r2,r3,10009df8 <_putc_r+0x74>
10009de0:	30800017 	ldw	r2,0(r6)
10009de4:	00c00284 	movi	r3,10
10009de8:	11400005 	stb	r5,0(r2)
10009dec:	30800017 	ldw	r2,0(r6)
10009df0:	11400003 	ldbu	r5,0(r2)
10009df4:	28fff11e 	bne	r5,r3,10009dbc <__alt_data_end+0xf8009dbc>
10009df8:	8009883a 	mov	r4,r16
10009dfc:	dfc00317 	ldw	ra,12(sp)
10009e00:	dc000217 	ldw	r16,8(sp)
10009e04:	dec00404 	addi	sp,sp,16
10009e08:	000ba981 	jmpi	1000ba98 <__swbuf_r>
10009e0c:	d9400015 	stw	r5,0(sp)
10009e10:	d9800115 	stw	r6,4(sp)
10009e14:	00019b40 	call	100019b4 <__sinit>
10009e18:	d9800117 	ldw	r6,4(sp)
10009e1c:	d9400017 	ldw	r5,0(sp)
10009e20:	003fdf06 	br	10009da0 <__alt_data_end+0xf8009da0>

10009e24 <putc>:
10009e24:	00840074 	movhi	r2,4097
10009e28:	defffc04 	addi	sp,sp,-16
10009e2c:	108ec604 	addi	r2,r2,15128
10009e30:	dc000115 	stw	r16,4(sp)
10009e34:	14000017 	ldw	r16,0(r2)
10009e38:	dc400215 	stw	r17,8(sp)
10009e3c:	dfc00315 	stw	ra,12(sp)
10009e40:	2023883a 	mov	r17,r4
10009e44:	80000226 	beq	r16,zero,10009e50 <putc+0x2c>
10009e48:	80800e17 	ldw	r2,56(r16)
10009e4c:	10001a26 	beq	r2,zero,10009eb8 <putc+0x94>
10009e50:	28800217 	ldw	r2,8(r5)
10009e54:	10bfffc4 	addi	r2,r2,-1
10009e58:	28800215 	stw	r2,8(r5)
10009e5c:	10000b16 	blt	r2,zero,10009e8c <putc+0x68>
10009e60:	28800017 	ldw	r2,0(r5)
10009e64:	14400005 	stb	r17,0(r2)
10009e68:	28800017 	ldw	r2,0(r5)
10009e6c:	10c00044 	addi	r3,r2,1
10009e70:	28c00015 	stw	r3,0(r5)
10009e74:	10800003 	ldbu	r2,0(r2)
10009e78:	dfc00317 	ldw	ra,12(sp)
10009e7c:	dc400217 	ldw	r17,8(sp)
10009e80:	dc000117 	ldw	r16,4(sp)
10009e84:	dec00404 	addi	sp,sp,16
10009e88:	f800283a 	ret
10009e8c:	28c00617 	ldw	r3,24(r5)
10009e90:	10c00e16 	blt	r2,r3,10009ecc <putc+0xa8>
10009e94:	28800017 	ldw	r2,0(r5)
10009e98:	01000284 	movi	r4,10
10009e9c:	14400005 	stb	r17,0(r2)
10009ea0:	28800017 	ldw	r2,0(r5)
10009ea4:	10c00003 	ldbu	r3,0(r2)
10009ea8:	193ff01e 	bne	r3,r4,10009e6c <__alt_data_end+0xf8009e6c>
10009eac:	280d883a 	mov	r6,r5
10009eb0:	180b883a 	mov	r5,r3
10009eb4:	00000706 	br	10009ed4 <putc+0xb0>
10009eb8:	8009883a 	mov	r4,r16
10009ebc:	d9400015 	stw	r5,0(sp)
10009ec0:	00019b40 	call	100019b4 <__sinit>
10009ec4:	d9400017 	ldw	r5,0(sp)
10009ec8:	003fe106 	br	10009e50 <__alt_data_end+0xf8009e50>
10009ecc:	280d883a 	mov	r6,r5
10009ed0:	880b883a 	mov	r5,r17
10009ed4:	8009883a 	mov	r4,r16
10009ed8:	dfc00317 	ldw	ra,12(sp)
10009edc:	dc400217 	ldw	r17,8(sp)
10009ee0:	dc000117 	ldw	r16,4(sp)
10009ee4:	dec00404 	addi	sp,sp,16
10009ee8:	000ba981 	jmpi	1000ba98 <__swbuf_r>

10009eec <_read_r>:
10009eec:	defffd04 	addi	sp,sp,-12
10009ef0:	2805883a 	mov	r2,r5
10009ef4:	dc000015 	stw	r16,0(sp)
10009ef8:	04040074 	movhi	r16,4097
10009efc:	dc400115 	stw	r17,4(sp)
10009f00:	300b883a 	mov	r5,r6
10009f04:	84159404 	addi	r16,r16,22096
10009f08:	2023883a 	mov	r17,r4
10009f0c:	380d883a 	mov	r6,r7
10009f10:	1009883a 	mov	r4,r2
10009f14:	dfc00215 	stw	ra,8(sp)
10009f18:	80000015 	stw	zero,0(r16)
10009f1c:	000fd000 	call	1000fd00 <read>
10009f20:	00ffffc4 	movi	r3,-1
10009f24:	10c00526 	beq	r2,r3,10009f3c <_read_r+0x50>
10009f28:	dfc00217 	ldw	ra,8(sp)
10009f2c:	dc400117 	ldw	r17,4(sp)
10009f30:	dc000017 	ldw	r16,0(sp)
10009f34:	dec00304 	addi	sp,sp,12
10009f38:	f800283a 	ret
10009f3c:	80c00017 	ldw	r3,0(r16)
10009f40:	183ff926 	beq	r3,zero,10009f28 <__alt_data_end+0xf8009f28>
10009f44:	88c00015 	stw	r3,0(r17)
10009f48:	003ff706 	br	10009f28 <__alt_data_end+0xf8009f28>

10009f4c <__fpclassifyd>:
10009f4c:	00a00034 	movhi	r2,32768
10009f50:	10bfffc4 	addi	r2,r2,-1
10009f54:	2884703a 	and	r2,r5,r2
10009f58:	10000726 	beq	r2,zero,10009f78 <__fpclassifyd+0x2c>
10009f5c:	00fffc34 	movhi	r3,65520
10009f60:	019ff834 	movhi	r6,32736
10009f64:	28c7883a 	add	r3,r5,r3
10009f68:	31bfffc4 	addi	r6,r6,-1
10009f6c:	30c00536 	bltu	r6,r3,10009f84 <__fpclassifyd+0x38>
10009f70:	00800104 	movi	r2,4
10009f74:	f800283a 	ret
10009f78:	2000021e 	bne	r4,zero,10009f84 <__fpclassifyd+0x38>
10009f7c:	00800084 	movi	r2,2
10009f80:	f800283a 	ret
10009f84:	00dffc34 	movhi	r3,32752
10009f88:	019ff834 	movhi	r6,32736
10009f8c:	28cb883a 	add	r5,r5,r3
10009f90:	31bfffc4 	addi	r6,r6,-1
10009f94:	317ff62e 	bgeu	r6,r5,10009f70 <__alt_data_end+0xf8009f70>
10009f98:	01400434 	movhi	r5,16
10009f9c:	297fffc4 	addi	r5,r5,-1
10009fa0:	28800236 	bltu	r5,r2,10009fac <__fpclassifyd+0x60>
10009fa4:	008000c4 	movi	r2,3
10009fa8:	f800283a 	ret
10009fac:	10c00226 	beq	r2,r3,10009fb8 <__fpclassifyd+0x6c>
10009fb0:	0005883a 	mov	r2,zero
10009fb4:	f800283a 	ret
10009fb8:	2005003a 	cmpeq	r2,r4,zero
10009fbc:	f800283a 	ret

10009fc0 <_init_signal_r>:
10009fc0:	2080b717 	ldw	r2,732(r4)
10009fc4:	10000226 	beq	r2,zero,10009fd0 <_init_signal_r+0x10>
10009fc8:	0005883a 	mov	r2,zero
10009fcc:	f800283a 	ret
10009fd0:	defffe04 	addi	sp,sp,-8
10009fd4:	01402004 	movi	r5,128
10009fd8:	dc000015 	stw	r16,0(sp)
10009fdc:	dfc00115 	stw	ra,4(sp)
10009fe0:	2021883a 	mov	r16,r4
10009fe4:	0002ba00 	call	10002ba0 <_malloc_r>
10009fe8:	8080b715 	stw	r2,732(r16)
10009fec:	10000d26 	beq	r2,zero,1000a024 <_init_signal_r+0x64>
10009ff0:	0007883a 	mov	r3,zero
10009ff4:	01002004 	movi	r4,128
10009ff8:	00000106 	br	1000a000 <_init_signal_r+0x40>
10009ffc:	8080b717 	ldw	r2,732(r16)
1000a000:	10c5883a 	add	r2,r2,r3
1000a004:	10000015 	stw	zero,0(r2)
1000a008:	18c00104 	addi	r3,r3,4
1000a00c:	193ffb1e 	bne	r3,r4,10009ffc <__alt_data_end+0xf8009ffc>
1000a010:	0005883a 	mov	r2,zero
1000a014:	dfc00117 	ldw	ra,4(sp)
1000a018:	dc000017 	ldw	r16,0(sp)
1000a01c:	dec00204 	addi	sp,sp,8
1000a020:	f800283a 	ret
1000a024:	00bfffc4 	movi	r2,-1
1000a028:	003ffa06 	br	1000a014 <__alt_data_end+0xf800a014>

1000a02c <_signal_r>:
1000a02c:	00c007c4 	movi	r3,31
1000a030:	19401536 	bltu	r3,r5,1000a088 <_signal_r+0x5c>
1000a034:	2080b717 	ldw	r2,732(r4)
1000a038:	defffc04 	addi	sp,sp,-16
1000a03c:	dc800215 	stw	r18,8(sp)
1000a040:	dc400115 	stw	r17,4(sp)
1000a044:	dc000015 	stw	r16,0(sp)
1000a048:	dfc00315 	stw	ra,12(sp)
1000a04c:	3023883a 	mov	r17,r6
1000a050:	2021883a 	mov	r16,r4
1000a054:	2825883a 	mov	r18,r5
1000a058:	10000f26 	beq	r2,zero,1000a098 <_signal_r+0x6c>
1000a05c:	948b883a 	add	r5,r18,r18
1000a060:	294b883a 	add	r5,r5,r5
1000a064:	114b883a 	add	r5,r2,r5
1000a068:	28800017 	ldw	r2,0(r5)
1000a06c:	2c400015 	stw	r17,0(r5)
1000a070:	dfc00317 	ldw	ra,12(sp)
1000a074:	dc800217 	ldw	r18,8(sp)
1000a078:	dc400117 	ldw	r17,4(sp)
1000a07c:	dc000017 	ldw	r16,0(sp)
1000a080:	dec00404 	addi	sp,sp,16
1000a084:	f800283a 	ret
1000a088:	00c00584 	movi	r3,22
1000a08c:	20c00015 	stw	r3,0(r4)
1000a090:	00bfffc4 	movi	r2,-1
1000a094:	f800283a 	ret
1000a098:	0009fc00 	call	10009fc0 <_init_signal_r>
1000a09c:	1000021e 	bne	r2,zero,1000a0a8 <_signal_r+0x7c>
1000a0a0:	8080b717 	ldw	r2,732(r16)
1000a0a4:	003fed06 	br	1000a05c <__alt_data_end+0xf800a05c>
1000a0a8:	00bfffc4 	movi	r2,-1
1000a0ac:	003ff006 	br	1000a070 <__alt_data_end+0xf800a070>

1000a0b0 <_raise_r>:
1000a0b0:	008007c4 	movi	r2,31
1000a0b4:	11402936 	bltu	r2,r5,1000a15c <_raise_r+0xac>
1000a0b8:	20c0b717 	ldw	r3,732(r4)
1000a0bc:	defffd04 	addi	sp,sp,-12
1000a0c0:	dc400115 	stw	r17,4(sp)
1000a0c4:	dc000015 	stw	r16,0(sp)
1000a0c8:	dfc00215 	stw	ra,8(sp)
1000a0cc:	2021883a 	mov	r16,r4
1000a0d0:	2823883a 	mov	r17,r5
1000a0d4:	18001726 	beq	r3,zero,1000a134 <_raise_r+0x84>
1000a0d8:	2945883a 	add	r2,r5,r5
1000a0dc:	1085883a 	add	r2,r2,r2
1000a0e0:	1887883a 	add	r3,r3,r2
1000a0e4:	19800017 	ldw	r6,0(r3)
1000a0e8:	30001226 	beq	r6,zero,1000a134 <_raise_r+0x84>
1000a0ec:	00800044 	movi	r2,1
1000a0f0:	30800e26 	beq	r6,r2,1000a12c <_raise_r+0x7c>
1000a0f4:	013fffc4 	movi	r4,-1
1000a0f8:	31000926 	beq	r6,r4,1000a120 <_raise_r+0x70>
1000a0fc:	18000015 	stw	zero,0(r3)
1000a100:	2809883a 	mov	r4,r5
1000a104:	303ee83a 	callr	r6
1000a108:	0005883a 	mov	r2,zero
1000a10c:	dfc00217 	ldw	ra,8(sp)
1000a110:	dc400117 	ldw	r17,4(sp)
1000a114:	dc000017 	ldw	r16,0(sp)
1000a118:	dec00304 	addi	sp,sp,12
1000a11c:	f800283a 	ret
1000a120:	00c00584 	movi	r3,22
1000a124:	80c00015 	stw	r3,0(r16)
1000a128:	003ff806 	br	1000a10c <__alt_data_end+0xf800a10c>
1000a12c:	0005883a 	mov	r2,zero
1000a130:	003ff606 	br	1000a10c <__alt_data_end+0xf800a10c>
1000a134:	8009883a 	mov	r4,r16
1000a138:	000a2c00 	call	1000a2c0 <_getpid_r>
1000a13c:	880d883a 	mov	r6,r17
1000a140:	100b883a 	mov	r5,r2
1000a144:	8009883a 	mov	r4,r16
1000a148:	dfc00217 	ldw	ra,8(sp)
1000a14c:	dc400117 	ldw	r17,4(sp)
1000a150:	dc000017 	ldw	r16,0(sp)
1000a154:	dec00304 	addi	sp,sp,12
1000a158:	000a2641 	jmpi	1000a264 <_kill_r>
1000a15c:	00800584 	movi	r2,22
1000a160:	20800015 	stw	r2,0(r4)
1000a164:	00bfffc4 	movi	r2,-1
1000a168:	f800283a 	ret

1000a16c <__sigtramp_r>:
1000a16c:	008007c4 	movi	r2,31
1000a170:	11402436 	bltu	r2,r5,1000a204 <__sigtramp_r+0x98>
1000a174:	20c0b717 	ldw	r3,732(r4)
1000a178:	defffd04 	addi	sp,sp,-12
1000a17c:	dc400115 	stw	r17,4(sp)
1000a180:	dc000015 	stw	r16,0(sp)
1000a184:	dfc00215 	stw	ra,8(sp)
1000a188:	2021883a 	mov	r16,r4
1000a18c:	2823883a 	mov	r17,r5
1000a190:	18001826 	beq	r3,zero,1000a1f4 <__sigtramp_r+0x88>
1000a194:	8c45883a 	add	r2,r17,r17
1000a198:	1085883a 	add	r2,r2,r2
1000a19c:	1885883a 	add	r2,r3,r2
1000a1a0:	10c00017 	ldw	r3,0(r2)
1000a1a4:	18001126 	beq	r3,zero,1000a1ec <__sigtramp_r+0x80>
1000a1a8:	013fffc4 	movi	r4,-1
1000a1ac:	19000d26 	beq	r3,r4,1000a1e4 <__sigtramp_r+0x78>
1000a1b0:	01000044 	movi	r4,1
1000a1b4:	19000926 	beq	r3,r4,1000a1dc <__sigtramp_r+0x70>
1000a1b8:	10000015 	stw	zero,0(r2)
1000a1bc:	8809883a 	mov	r4,r17
1000a1c0:	183ee83a 	callr	r3
1000a1c4:	0005883a 	mov	r2,zero
1000a1c8:	dfc00217 	ldw	ra,8(sp)
1000a1cc:	dc400117 	ldw	r17,4(sp)
1000a1d0:	dc000017 	ldw	r16,0(sp)
1000a1d4:	dec00304 	addi	sp,sp,12
1000a1d8:	f800283a 	ret
1000a1dc:	008000c4 	movi	r2,3
1000a1e0:	003ff906 	br	1000a1c8 <__alt_data_end+0xf800a1c8>
1000a1e4:	00800084 	movi	r2,2
1000a1e8:	003ff706 	br	1000a1c8 <__alt_data_end+0xf800a1c8>
1000a1ec:	00800044 	movi	r2,1
1000a1f0:	003ff506 	br	1000a1c8 <__alt_data_end+0xf800a1c8>
1000a1f4:	0009fc00 	call	10009fc0 <_init_signal_r>
1000a1f8:	1000041e 	bne	r2,zero,1000a20c <__sigtramp_r+0xa0>
1000a1fc:	80c0b717 	ldw	r3,732(r16)
1000a200:	003fe406 	br	1000a194 <__alt_data_end+0xf800a194>
1000a204:	00bfffc4 	movi	r2,-1
1000a208:	f800283a 	ret
1000a20c:	00bfffc4 	movi	r2,-1
1000a210:	003fed06 	br	1000a1c8 <__alt_data_end+0xf800a1c8>

1000a214 <raise>:
1000a214:	00840074 	movhi	r2,4097
1000a218:	108ec604 	addi	r2,r2,15128
1000a21c:	200b883a 	mov	r5,r4
1000a220:	11000017 	ldw	r4,0(r2)
1000a224:	000a0b01 	jmpi	1000a0b0 <_raise_r>

1000a228 <signal>:
1000a228:	00840074 	movhi	r2,4097
1000a22c:	108ec604 	addi	r2,r2,15128
1000a230:	280d883a 	mov	r6,r5
1000a234:	200b883a 	mov	r5,r4
1000a238:	11000017 	ldw	r4,0(r2)
1000a23c:	000a02c1 	jmpi	1000a02c <_signal_r>

1000a240 <_init_signal>:
1000a240:	00840074 	movhi	r2,4097
1000a244:	108ec604 	addi	r2,r2,15128
1000a248:	11000017 	ldw	r4,0(r2)
1000a24c:	0009fc01 	jmpi	10009fc0 <_init_signal_r>

1000a250 <__sigtramp>:
1000a250:	00840074 	movhi	r2,4097
1000a254:	108ec604 	addi	r2,r2,15128
1000a258:	200b883a 	mov	r5,r4
1000a25c:	11000017 	ldw	r4,0(r2)
1000a260:	000a16c1 	jmpi	1000a16c <__sigtramp_r>

1000a264 <_kill_r>:
1000a264:	defffd04 	addi	sp,sp,-12
1000a268:	2805883a 	mov	r2,r5
1000a26c:	dc000015 	stw	r16,0(sp)
1000a270:	04040074 	movhi	r16,4097
1000a274:	dc400115 	stw	r17,4(sp)
1000a278:	84159404 	addi	r16,r16,22096
1000a27c:	2023883a 	mov	r17,r4
1000a280:	300b883a 	mov	r5,r6
1000a284:	1009883a 	mov	r4,r2
1000a288:	dfc00215 	stw	ra,8(sp)
1000a28c:	80000015 	stw	zero,0(r16)
1000a290:	000f8cc0 	call	1000f8cc <kill>
1000a294:	00ffffc4 	movi	r3,-1
1000a298:	10c00526 	beq	r2,r3,1000a2b0 <_kill_r+0x4c>
1000a29c:	dfc00217 	ldw	ra,8(sp)
1000a2a0:	dc400117 	ldw	r17,4(sp)
1000a2a4:	dc000017 	ldw	r16,0(sp)
1000a2a8:	dec00304 	addi	sp,sp,12
1000a2ac:	f800283a 	ret
1000a2b0:	80c00017 	ldw	r3,0(r16)
1000a2b4:	183ff926 	beq	r3,zero,1000a29c <__alt_data_end+0xf800a29c>
1000a2b8:	88c00015 	stw	r3,0(r17)
1000a2bc:	003ff706 	br	1000a29c <__alt_data_end+0xf800a29c>

1000a2c0 <_getpid_r>:
1000a2c0:	000f7881 	jmpi	1000f788 <getpid>

1000a2c4 <strcmp>:
1000a2c4:	2144b03a 	or	r2,r4,r5
1000a2c8:	108000cc 	andi	r2,r2,3
1000a2cc:	1000171e 	bne	r2,zero,1000a32c <strcmp+0x68>
1000a2d0:	20800017 	ldw	r2,0(r4)
1000a2d4:	28c00017 	ldw	r3,0(r5)
1000a2d8:	10c0141e 	bne	r2,r3,1000a32c <strcmp+0x68>
1000a2dc:	027fbff4 	movhi	r9,65279
1000a2e0:	4a7fbfc4 	addi	r9,r9,-257
1000a2e4:	0086303a 	nor	r3,zero,r2
1000a2e8:	02202074 	movhi	r8,32897
1000a2ec:	1245883a 	add	r2,r2,r9
1000a2f0:	42202004 	addi	r8,r8,-32640
1000a2f4:	10c4703a 	and	r2,r2,r3
1000a2f8:	1204703a 	and	r2,r2,r8
1000a2fc:	10000226 	beq	r2,zero,1000a308 <strcmp+0x44>
1000a300:	00002306 	br	1000a390 <strcmp+0xcc>
1000a304:	1000221e 	bne	r2,zero,1000a390 <strcmp+0xcc>
1000a308:	21000104 	addi	r4,r4,4
1000a30c:	20c00017 	ldw	r3,0(r4)
1000a310:	29400104 	addi	r5,r5,4
1000a314:	29800017 	ldw	r6,0(r5)
1000a318:	1a4f883a 	add	r7,r3,r9
1000a31c:	00c4303a 	nor	r2,zero,r3
1000a320:	3884703a 	and	r2,r7,r2
1000a324:	1204703a 	and	r2,r2,r8
1000a328:	19bff626 	beq	r3,r6,1000a304 <__alt_data_end+0xf800a304>
1000a32c:	20800003 	ldbu	r2,0(r4)
1000a330:	10c03fcc 	andi	r3,r2,255
1000a334:	18c0201c 	xori	r3,r3,128
1000a338:	18ffe004 	addi	r3,r3,-128
1000a33c:	18000c26 	beq	r3,zero,1000a370 <strcmp+0xac>
1000a340:	29800007 	ldb	r6,0(r5)
1000a344:	19800326 	beq	r3,r6,1000a354 <strcmp+0x90>
1000a348:	00001306 	br	1000a398 <strcmp+0xd4>
1000a34c:	29800007 	ldb	r6,0(r5)
1000a350:	11800b1e 	bne	r2,r6,1000a380 <strcmp+0xbc>
1000a354:	21000044 	addi	r4,r4,1
1000a358:	20c00003 	ldbu	r3,0(r4)
1000a35c:	29400044 	addi	r5,r5,1
1000a360:	18803fcc 	andi	r2,r3,255
1000a364:	1080201c 	xori	r2,r2,128
1000a368:	10bfe004 	addi	r2,r2,-128
1000a36c:	103ff71e 	bne	r2,zero,1000a34c <__alt_data_end+0xf800a34c>
1000a370:	0007883a 	mov	r3,zero
1000a374:	28800003 	ldbu	r2,0(r5)
1000a378:	1885c83a 	sub	r2,r3,r2
1000a37c:	f800283a 	ret
1000a380:	28800003 	ldbu	r2,0(r5)
1000a384:	18c03fcc 	andi	r3,r3,255
1000a388:	1885c83a 	sub	r2,r3,r2
1000a38c:	f800283a 	ret
1000a390:	0005883a 	mov	r2,zero
1000a394:	f800283a 	ret
1000a398:	10c03fcc 	andi	r3,r2,255
1000a39c:	003ff506 	br	1000a374 <__alt_data_end+0xf800a374>

1000a3a0 <__sprint_r.part.0>:
1000a3a0:	28801917 	ldw	r2,100(r5)
1000a3a4:	defff604 	addi	sp,sp,-40
1000a3a8:	dd400515 	stw	r21,20(sp)
1000a3ac:	dfc00915 	stw	ra,36(sp)
1000a3b0:	df000815 	stw	fp,32(sp)
1000a3b4:	ddc00715 	stw	r23,28(sp)
1000a3b8:	dd800615 	stw	r22,24(sp)
1000a3bc:	dd000415 	stw	r20,16(sp)
1000a3c0:	dcc00315 	stw	r19,12(sp)
1000a3c4:	dc800215 	stw	r18,8(sp)
1000a3c8:	dc400115 	stw	r17,4(sp)
1000a3cc:	dc000015 	stw	r16,0(sp)
1000a3d0:	1088000c 	andi	r2,r2,8192
1000a3d4:	302b883a 	mov	r21,r6
1000a3d8:	10002e26 	beq	r2,zero,1000a494 <__sprint_r.part.0+0xf4>
1000a3dc:	30800217 	ldw	r2,8(r6)
1000a3e0:	35800017 	ldw	r22,0(r6)
1000a3e4:	10002926 	beq	r2,zero,1000a48c <__sprint_r.part.0+0xec>
1000a3e8:	2827883a 	mov	r19,r5
1000a3ec:	2029883a 	mov	r20,r4
1000a3f0:	b5c00104 	addi	r23,r22,4
1000a3f4:	04bfffc4 	movi	r18,-1
1000a3f8:	bc400017 	ldw	r17,0(r23)
1000a3fc:	b4000017 	ldw	r16,0(r22)
1000a400:	0039883a 	mov	fp,zero
1000a404:	8822d0ba 	srli	r17,r17,2
1000a408:	8800031e 	bne	r17,zero,1000a418 <__sprint_r.part.0+0x78>
1000a40c:	00001806 	br	1000a470 <__sprint_r.part.0+0xd0>
1000a410:	84000104 	addi	r16,r16,4
1000a414:	8f001526 	beq	r17,fp,1000a46c <__sprint_r.part.0+0xcc>
1000a418:	81400017 	ldw	r5,0(r16)
1000a41c:	980d883a 	mov	r6,r19
1000a420:	a009883a 	mov	r4,r20
1000a424:	000be300 	call	1000be30 <_fputwc_r>
1000a428:	e7000044 	addi	fp,fp,1
1000a42c:	14bff81e 	bne	r2,r18,1000a410 <__alt_data_end+0xf800a410>
1000a430:	9005883a 	mov	r2,r18
1000a434:	a8000215 	stw	zero,8(r21)
1000a438:	a8000115 	stw	zero,4(r21)
1000a43c:	dfc00917 	ldw	ra,36(sp)
1000a440:	df000817 	ldw	fp,32(sp)
1000a444:	ddc00717 	ldw	r23,28(sp)
1000a448:	dd800617 	ldw	r22,24(sp)
1000a44c:	dd400517 	ldw	r21,20(sp)
1000a450:	dd000417 	ldw	r20,16(sp)
1000a454:	dcc00317 	ldw	r19,12(sp)
1000a458:	dc800217 	ldw	r18,8(sp)
1000a45c:	dc400117 	ldw	r17,4(sp)
1000a460:	dc000017 	ldw	r16,0(sp)
1000a464:	dec00a04 	addi	sp,sp,40
1000a468:	f800283a 	ret
1000a46c:	a8800217 	ldw	r2,8(r21)
1000a470:	8c63883a 	add	r17,r17,r17
1000a474:	8c63883a 	add	r17,r17,r17
1000a478:	1445c83a 	sub	r2,r2,r17
1000a47c:	a8800215 	stw	r2,8(r21)
1000a480:	b5800204 	addi	r22,r22,8
1000a484:	bdc00204 	addi	r23,r23,8
1000a488:	103fdb1e 	bne	r2,zero,1000a3f8 <__alt_data_end+0xf800a3f8>
1000a48c:	0005883a 	mov	r2,zero
1000a490:	003fe806 	br	1000a434 <__alt_data_end+0xf800a434>
1000a494:	00084340 	call	10008434 <__sfvwrite_r>
1000a498:	003fe606 	br	1000a434 <__alt_data_end+0xf800a434>

1000a49c <__sprint_r>:
1000a49c:	30c00217 	ldw	r3,8(r6)
1000a4a0:	18000126 	beq	r3,zero,1000a4a8 <__sprint_r+0xc>
1000a4a4:	000a3a01 	jmpi	1000a3a0 <__sprint_r.part.0>
1000a4a8:	30000115 	stw	zero,4(r6)
1000a4ac:	0005883a 	mov	r2,zero
1000a4b0:	f800283a 	ret

1000a4b4 <___vfiprintf_internal_r>:
1000a4b4:	deffca04 	addi	sp,sp,-216
1000a4b8:	dd403115 	stw	r21,196(sp)
1000a4bc:	dfc03515 	stw	ra,212(sp)
1000a4c0:	df003415 	stw	fp,208(sp)
1000a4c4:	ddc03315 	stw	r23,204(sp)
1000a4c8:	dd803215 	stw	r22,200(sp)
1000a4cc:	dd003015 	stw	r20,192(sp)
1000a4d0:	dcc02f15 	stw	r19,188(sp)
1000a4d4:	dc802e15 	stw	r18,184(sp)
1000a4d8:	dc402d15 	stw	r17,180(sp)
1000a4dc:	dc002c15 	stw	r16,176(sp)
1000a4e0:	d9002115 	stw	r4,132(sp)
1000a4e4:	d9402015 	stw	r5,128(sp)
1000a4e8:	d9c02215 	stw	r7,136(sp)
1000a4ec:	302b883a 	mov	r21,r6
1000a4f0:	20000226 	beq	r4,zero,1000a4fc <___vfiprintf_internal_r+0x48>
1000a4f4:	20800e17 	ldw	r2,56(r4)
1000a4f8:	1000cf26 	beq	r2,zero,1000a838 <___vfiprintf_internal_r+0x384>
1000a4fc:	d8c02017 	ldw	r3,128(sp)
1000a500:	1880030b 	ldhu	r2,12(r3)
1000a504:	10c8000c 	andi	r3,r2,8192
1000a508:	1800071e 	bne	r3,zero,1000a528 <___vfiprintf_internal_r+0x74>
1000a50c:	d9402017 	ldw	r5,128(sp)
1000a510:	00f7ffc4 	movi	r3,-8193
1000a514:	10880014 	ori	r2,r2,8192
1000a518:	29001917 	ldw	r4,100(r5)
1000a51c:	2880030d 	sth	r2,12(r5)
1000a520:	20c6703a 	and	r3,r4,r3
1000a524:	28c01915 	stw	r3,100(r5)
1000a528:	10c0020c 	andi	r3,r2,8
1000a52c:	1800a526 	beq	r3,zero,1000a7c4 <___vfiprintf_internal_r+0x310>
1000a530:	d9002017 	ldw	r4,128(sp)
1000a534:	20c00417 	ldw	r3,16(r4)
1000a538:	1800a226 	beq	r3,zero,1000a7c4 <___vfiprintf_internal_r+0x310>
1000a53c:	1080068c 	andi	r2,r2,26
1000a540:	00c00284 	movi	r3,10
1000a544:	10c0a826 	beq	r2,r3,1000a7e8 <___vfiprintf_internal_r+0x334>
1000a548:	d9001a04 	addi	r4,sp,104
1000a54c:	d94019c4 	addi	r5,sp,103
1000a550:	04840074 	movhi	r18,4097
1000a554:	2145c83a 	sub	r2,r4,r5
1000a558:	9487c204 	addi	r18,r18,7944
1000a55c:	d9001e15 	stw	r4,120(sp)
1000a560:	d9401f15 	stw	r5,124(sp)
1000a564:	dec01a15 	stw	sp,104(sp)
1000a568:	d8001c15 	stw	zero,112(sp)
1000a56c:	d8001b15 	stw	zero,108(sp)
1000a570:	d811883a 	mov	r8,sp
1000a574:	d8002615 	stw	zero,152(sp)
1000a578:	d8002415 	stw	zero,144(sp)
1000a57c:	d8802815 	stw	r2,160(sp)
1000a580:	a82d883a 	mov	r22,r21
1000a584:	b0800007 	ldb	r2,0(r22)
1000a588:	10040d26 	beq	r2,zero,1000b5c0 <___vfiprintf_internal_r+0x110c>
1000a58c:	00c00944 	movi	r3,37
1000a590:	b029883a 	mov	r20,r22
1000a594:	10c0021e 	bne	r2,r3,1000a5a0 <___vfiprintf_internal_r+0xec>
1000a598:	00001606 	br	1000a5f4 <___vfiprintf_internal_r+0x140>
1000a59c:	10c00326 	beq	r2,r3,1000a5ac <___vfiprintf_internal_r+0xf8>
1000a5a0:	a5000044 	addi	r20,r20,1
1000a5a4:	a0800007 	ldb	r2,0(r20)
1000a5a8:	103ffc1e 	bne	r2,zero,1000a59c <__alt_data_end+0xf800a59c>
1000a5ac:	a5a1c83a 	sub	r16,r20,r22
1000a5b0:	80001026 	beq	r16,zero,1000a5f4 <___vfiprintf_internal_r+0x140>
1000a5b4:	d8c01c17 	ldw	r3,112(sp)
1000a5b8:	d8801b17 	ldw	r2,108(sp)
1000a5bc:	45800015 	stw	r22,0(r8)
1000a5c0:	80c7883a 	add	r3,r16,r3
1000a5c4:	10800044 	addi	r2,r2,1
1000a5c8:	44000115 	stw	r16,4(r8)
1000a5cc:	d8c01c15 	stw	r3,112(sp)
1000a5d0:	d8801b15 	stw	r2,108(sp)
1000a5d4:	010001c4 	movi	r4,7
1000a5d8:	2080750e 	bge	r4,r2,1000a7b0 <___vfiprintf_internal_r+0x2fc>
1000a5dc:	1803951e 	bne	r3,zero,1000b434 <___vfiprintf_internal_r+0xf80>
1000a5e0:	d8c02417 	ldw	r3,144(sp)
1000a5e4:	d8001b15 	stw	zero,108(sp)
1000a5e8:	d811883a 	mov	r8,sp
1000a5ec:	1c07883a 	add	r3,r3,r16
1000a5f0:	d8c02415 	stw	r3,144(sp)
1000a5f4:	a0800007 	ldb	r2,0(r20)
1000a5f8:	1002e026 	beq	r2,zero,1000b17c <___vfiprintf_internal_r+0xcc8>
1000a5fc:	a5800044 	addi	r22,r20,1
1000a600:	a0c00047 	ldb	r3,1(r20)
1000a604:	d8001d85 	stb	zero,118(sp)
1000a608:	0027883a 	mov	r19,zero
1000a60c:	d8002305 	stb	zero,140(sp)
1000a610:	043fffc4 	movi	r16,-1
1000a614:	d8002515 	stw	zero,148(sp)
1000a618:	0023883a 	mov	r17,zero
1000a61c:	05001604 	movi	r20,88
1000a620:	05400244 	movi	r21,9
1000a624:	402f883a 	mov	r23,r8
1000a628:	b5800044 	addi	r22,r22,1
1000a62c:	18bff804 	addi	r2,r3,-32
1000a630:	a0827736 	bltu	r20,r2,1000b010 <___vfiprintf_internal_r+0xb5c>
1000a634:	100490ba 	slli	r2,r2,2
1000a638:	01040074 	movhi	r4,4097
1000a63c:	21299304 	addi	r4,r4,-22964
1000a640:	1105883a 	add	r2,r2,r4
1000a644:	10800017 	ldw	r2,0(r2)
1000a648:	1000683a 	jmp	r2
1000a64c:	1000ad10 	cmplti	zero,r2,692
1000a650:	1000b010 	cmplti	zero,r2,704
1000a654:	1000b010 	cmplti	zero,r2,704
1000a658:	1000ad2c 	andhi	zero,r2,692
1000a65c:	1000b010 	cmplti	zero,r2,704
1000a660:	1000b010 	cmplti	zero,r2,704
1000a664:	1000b010 	cmplti	zero,r2,704
1000a668:	1000b010 	cmplti	zero,r2,704
1000a66c:	1000b010 	cmplti	zero,r2,704
1000a670:	1000b010 	cmplti	zero,r2,704
1000a674:	1000af34 	orhi	zero,r2,700
1000a678:	1000af58 	cmpnei	zero,r2,701
1000a67c:	1000b010 	cmplti	zero,r2,704
1000a680:	1000a850 	cmplti	zero,r2,673
1000a684:	1000af6c 	andhi	zero,r2,701
1000a688:	1000b010 	cmplti	zero,r2,704
1000a68c:	1000ad38 	rdprs	zero,r2,692
1000a690:	1000ad44 	addi	zero,r2,693
1000a694:	1000ad44 	addi	zero,r2,693
1000a698:	1000ad44 	addi	zero,r2,693
1000a69c:	1000ad44 	addi	zero,r2,693
1000a6a0:	1000ad44 	addi	zero,r2,693
1000a6a4:	1000ad44 	addi	zero,r2,693
1000a6a8:	1000ad44 	addi	zero,r2,693
1000a6ac:	1000ad44 	addi	zero,r2,693
1000a6b0:	1000ad44 	addi	zero,r2,693
1000a6b4:	1000b010 	cmplti	zero,r2,704
1000a6b8:	1000b010 	cmplti	zero,r2,704
1000a6bc:	1000b010 	cmplti	zero,r2,704
1000a6c0:	1000b010 	cmplti	zero,r2,704
1000a6c4:	1000b010 	cmplti	zero,r2,704
1000a6c8:	1000b010 	cmplti	zero,r2,704
1000a6cc:	1000b010 	cmplti	zero,r2,704
1000a6d0:	1000b010 	cmplti	zero,r2,704
1000a6d4:	1000b010 	cmplti	zero,r2,704
1000a6d8:	1000b010 	cmplti	zero,r2,704
1000a6dc:	1000ad84 	addi	zero,r2,694
1000a6e0:	1000b010 	cmplti	zero,r2,704
1000a6e4:	1000b010 	cmplti	zero,r2,704
1000a6e8:	1000b010 	cmplti	zero,r2,704
1000a6ec:	1000b010 	cmplti	zero,r2,704
1000a6f0:	1000b010 	cmplti	zero,r2,704
1000a6f4:	1000b010 	cmplti	zero,r2,704
1000a6f8:	1000b010 	cmplti	zero,r2,704
1000a6fc:	1000b010 	cmplti	zero,r2,704
1000a700:	1000b010 	cmplti	zero,r2,704
1000a704:	1000b010 	cmplti	zero,r2,704
1000a708:	1000adc0 	call	11000adc <_gp+0xfe4fd4>
1000a70c:	1000b010 	cmplti	zero,r2,704
1000a710:	1000b010 	cmplti	zero,r2,704
1000a714:	1000b010 	cmplti	zero,r2,704
1000a718:	1000b010 	cmplti	zero,r2,704
1000a71c:	1000b010 	cmplti	zero,r2,704
1000a720:	1000ae1c 	xori	zero,r2,696
1000a724:	1000b010 	cmplti	zero,r2,704
1000a728:	1000b010 	cmplti	zero,r2,704
1000a72c:	1000ae90 	cmplti	zero,r2,698
1000a730:	1000b010 	cmplti	zero,r2,704
1000a734:	1000b010 	cmplti	zero,r2,704
1000a738:	1000b010 	cmplti	zero,r2,704
1000a73c:	1000b010 	cmplti	zero,r2,704
1000a740:	1000b010 	cmplti	zero,r2,704
1000a744:	1000b010 	cmplti	zero,r2,704
1000a748:	1000b010 	cmplti	zero,r2,704
1000a74c:	1000b010 	cmplti	zero,r2,704
1000a750:	1000b010 	cmplti	zero,r2,704
1000a754:	1000b010 	cmplti	zero,r2,704
1000a758:	1000ac38 	rdprs	zero,r2,688
1000a75c:	1000ac68 	cmpgeui	zero,r2,689
1000a760:	1000b010 	cmplti	zero,r2,704
1000a764:	1000b010 	cmplti	zero,r2,704
1000a768:	1000b010 	cmplti	zero,r2,704
1000a76c:	1000afb8 	rdprs	zero,r2,702
1000a770:	1000ac68 	cmpgeui	zero,r2,689
1000a774:	1000b010 	cmplti	zero,r2,704
1000a778:	1000b010 	cmplti	zero,r2,704
1000a77c:	1000ab10 	cmplti	zero,r2,684
1000a780:	1000b010 	cmplti	zero,r2,704
1000a784:	1000ab24 	muli	zero,r2,684
1000a788:	1000ab5c 	xori	zero,r2,685
1000a78c:	1000a85c 	xori	zero,r2,673
1000a790:	1000ab04 	addi	zero,r2,684
1000a794:	1000b010 	cmplti	zero,r2,704
1000a798:	1000aed0 	cmplti	zero,r2,699
1000a79c:	1000b010 	cmplti	zero,r2,704
1000a7a0:	1000af1c 	xori	zero,r2,700
1000a7a4:	1000b010 	cmplti	zero,r2,704
1000a7a8:	1000b010 	cmplti	zero,r2,704
1000a7ac:	1000abe0 	cmpeqi	zero,r2,687
1000a7b0:	42000204 	addi	r8,r8,8
1000a7b4:	d8c02417 	ldw	r3,144(sp)
1000a7b8:	1c07883a 	add	r3,r3,r16
1000a7bc:	d8c02415 	stw	r3,144(sp)
1000a7c0:	003f8c06 	br	1000a5f4 <__alt_data_end+0xf800a5f4>
1000a7c4:	d9402017 	ldw	r5,128(sp)
1000a7c8:	d9002117 	ldw	r4,132(sp)
1000a7cc:	00068440 	call	10006844 <__swsetup_r>
1000a7d0:	1003c11e 	bne	r2,zero,1000b6d8 <___vfiprintf_internal_r+0x1224>
1000a7d4:	d9402017 	ldw	r5,128(sp)
1000a7d8:	00c00284 	movi	r3,10
1000a7dc:	2880030b 	ldhu	r2,12(r5)
1000a7e0:	1080068c 	andi	r2,r2,26
1000a7e4:	10ff581e 	bne	r2,r3,1000a548 <__alt_data_end+0xf800a548>
1000a7e8:	d8c02017 	ldw	r3,128(sp)
1000a7ec:	1880038f 	ldh	r2,14(r3)
1000a7f0:	103f5516 	blt	r2,zero,1000a548 <__alt_data_end+0xf800a548>
1000a7f4:	d9c02217 	ldw	r7,136(sp)
1000a7f8:	d9002117 	ldw	r4,132(sp)
1000a7fc:	a80d883a 	mov	r6,r21
1000a800:	180b883a 	mov	r5,r3
1000a804:	000b9dc0 	call	1000b9dc <__sbprintf>
1000a808:	dfc03517 	ldw	ra,212(sp)
1000a80c:	df003417 	ldw	fp,208(sp)
1000a810:	ddc03317 	ldw	r23,204(sp)
1000a814:	dd803217 	ldw	r22,200(sp)
1000a818:	dd403117 	ldw	r21,196(sp)
1000a81c:	dd003017 	ldw	r20,192(sp)
1000a820:	dcc02f17 	ldw	r19,188(sp)
1000a824:	dc802e17 	ldw	r18,184(sp)
1000a828:	dc402d17 	ldw	r17,180(sp)
1000a82c:	dc002c17 	ldw	r16,176(sp)
1000a830:	dec03604 	addi	sp,sp,216
1000a834:	f800283a 	ret
1000a838:	00019b40 	call	100019b4 <__sinit>
1000a83c:	003f2f06 	br	1000a4fc <__alt_data_end+0xf800a4fc>
1000a840:	d8c02517 	ldw	r3,148(sp)
1000a844:	d8802215 	stw	r2,136(sp)
1000a848:	00c7c83a 	sub	r3,zero,r3
1000a84c:	d8c02515 	stw	r3,148(sp)
1000a850:	8c400114 	ori	r17,r17,4
1000a854:	b0c00007 	ldb	r3,0(r22)
1000a858:	003f7306 	br	1000a628 <__alt_data_end+0xf800a628>
1000a85c:	00800c04 	movi	r2,48
1000a860:	d9402217 	ldw	r5,136(sp)
1000a864:	d8801d05 	stb	r2,116(sp)
1000a868:	00801e04 	movi	r2,120
1000a86c:	d8801d45 	stb	r2,117(sp)
1000a870:	d8001d85 	stb	zero,118(sp)
1000a874:	b811883a 	mov	r8,r23
1000a878:	28c00104 	addi	r3,r5,4
1000a87c:	2cc00017 	ldw	r19,0(r5)
1000a880:	0029883a 	mov	r20,zero
1000a884:	88800094 	ori	r2,r17,2
1000a888:	80032516 	blt	r16,zero,1000b520 <___vfiprintf_internal_r+0x106c>
1000a88c:	00bfdfc4 	movi	r2,-129
1000a890:	88a2703a 	and	r17,r17,r2
1000a894:	d8c02215 	stw	r3,136(sp)
1000a898:	8c400094 	ori	r17,r17,2
1000a89c:	98032a1e 	bne	r19,zero,1000b548 <___vfiprintf_internal_r+0x1094>
1000a8a0:	00840074 	movhi	r2,4097
1000a8a4:	10876204 	addi	r2,r2,7560
1000a8a8:	d8802615 	stw	r2,152(sp)
1000a8ac:	002b883a 	mov	r21,zero
1000a8b0:	8001741e 	bne	r16,zero,1000ae84 <___vfiprintf_internal_r+0x9d0>
1000a8b4:	0021883a 	mov	r16,zero
1000a8b8:	0029883a 	mov	r20,zero
1000a8bc:	ddc01a04 	addi	r23,sp,104
1000a8c0:	8027883a 	mov	r19,r16
1000a8c4:	8500010e 	bge	r16,r20,1000a8cc <___vfiprintf_internal_r+0x418>
1000a8c8:	a027883a 	mov	r19,r20
1000a8cc:	ad403fcc 	andi	r21,r21,255
1000a8d0:	ad40201c 	xori	r21,r21,128
1000a8d4:	ad7fe004 	addi	r21,r21,-128
1000a8d8:	a8000126 	beq	r21,zero,1000a8e0 <___vfiprintf_internal_r+0x42c>
1000a8dc:	9cc00044 	addi	r19,r19,1
1000a8e0:	89c0008c 	andi	r7,r17,2
1000a8e4:	38000126 	beq	r7,zero,1000a8ec <___vfiprintf_internal_r+0x438>
1000a8e8:	9cc00084 	addi	r19,r19,2
1000a8ec:	88c0210c 	andi	r3,r17,132
1000a8f0:	1801dd1e 	bne	r3,zero,1000b068 <___vfiprintf_internal_r+0xbb4>
1000a8f4:	d9402517 	ldw	r5,148(sp)
1000a8f8:	2cebc83a 	sub	r21,r5,r19
1000a8fc:	0541da0e 	bge	zero,r21,1000b068 <___vfiprintf_internal_r+0xbb4>
1000a900:	07000404 	movi	fp,16
1000a904:	d8801c17 	ldw	r2,112(sp)
1000a908:	e543be0e 	bge	fp,r21,1000b804 <___vfiprintf_internal_r+0x1350>
1000a90c:	01440074 	movhi	r5,4097
1000a910:	2947c604 	addi	r5,r5,7960
1000a914:	dc002715 	stw	r16,156(sp)
1000a918:	d9801b17 	ldw	r6,108(sp)
1000a91c:	a821883a 	mov	r16,r21
1000a920:	d9402315 	stw	r5,140(sp)
1000a924:	028001c4 	movi	r10,7
1000a928:	d9c02915 	stw	r7,164(sp)
1000a92c:	182b883a 	mov	r21,r3
1000a930:	00000506 	br	1000a948 <___vfiprintf_internal_r+0x494>
1000a934:	31000084 	addi	r4,r6,2
1000a938:	42000204 	addi	r8,r8,8
1000a93c:	180d883a 	mov	r6,r3
1000a940:	843ffc04 	addi	r16,r16,-16
1000a944:	e4000f0e 	bge	fp,r16,1000a984 <___vfiprintf_internal_r+0x4d0>
1000a948:	01040074 	movhi	r4,4097
1000a94c:	10800404 	addi	r2,r2,16
1000a950:	30c00044 	addi	r3,r6,1
1000a954:	2107c604 	addi	r4,r4,7960
1000a958:	41000015 	stw	r4,0(r8)
1000a95c:	47000115 	stw	fp,4(r8)
1000a960:	d8801c15 	stw	r2,112(sp)
1000a964:	d8c01b15 	stw	r3,108(sp)
1000a968:	50fff20e 	bge	r10,r3,1000a934 <__alt_data_end+0xf800a934>
1000a96c:	1001b21e 	bne	r2,zero,1000b038 <___vfiprintf_internal_r+0xb84>
1000a970:	843ffc04 	addi	r16,r16,-16
1000a974:	000d883a 	mov	r6,zero
1000a978:	01000044 	movi	r4,1
1000a97c:	d811883a 	mov	r8,sp
1000a980:	e43ff116 	blt	fp,r16,1000a948 <__alt_data_end+0xf800a948>
1000a984:	a807883a 	mov	r3,r21
1000a988:	d9c02917 	ldw	r7,164(sp)
1000a98c:	802b883a 	mov	r21,r16
1000a990:	dc002717 	ldw	r16,156(sp)
1000a994:	d9402317 	ldw	r5,140(sp)
1000a998:	a885883a 	add	r2,r21,r2
1000a99c:	45400115 	stw	r21,4(r8)
1000a9a0:	41400015 	stw	r5,0(r8)
1000a9a4:	d8801c15 	stw	r2,112(sp)
1000a9a8:	d9001b15 	stw	r4,108(sp)
1000a9ac:	014001c4 	movi	r5,7
1000a9b0:	29026216 	blt	r5,r4,1000b33c <___vfiprintf_internal_r+0xe88>
1000a9b4:	d9801d87 	ldb	r6,118(sp)
1000a9b8:	42000204 	addi	r8,r8,8
1000a9bc:	21400044 	addi	r5,r4,1
1000a9c0:	3001ae1e 	bne	r6,zero,1000b07c <___vfiprintf_internal_r+0xbc8>
1000a9c4:	3801bb26 	beq	r7,zero,1000b0b4 <___vfiprintf_internal_r+0xc00>
1000a9c8:	d9001d04 	addi	r4,sp,116
1000a9cc:	10800084 	addi	r2,r2,2
1000a9d0:	41000015 	stw	r4,0(r8)
1000a9d4:	01000084 	movi	r4,2
1000a9d8:	41000115 	stw	r4,4(r8)
1000a9dc:	d8801c15 	stw	r2,112(sp)
1000a9e0:	d9401b15 	stw	r5,108(sp)
1000a9e4:	010001c4 	movi	r4,7
1000a9e8:	2142680e 	bge	r4,r5,1000b38c <___vfiprintf_internal_r+0xed8>
1000a9ec:	1002b11e 	bne	r2,zero,1000b4b4 <___vfiprintf_internal_r+0x1000>
1000a9f0:	01802004 	movi	r6,128
1000a9f4:	01400044 	movi	r5,1
1000a9f8:	0009883a 	mov	r4,zero
1000a9fc:	d811883a 	mov	r8,sp
1000aa00:	1981ae1e 	bne	r3,r6,1000b0bc <___vfiprintf_internal_r+0xc08>
1000aa04:	d8c02517 	ldw	r3,148(sp)
1000aa08:	1cf9c83a 	sub	fp,r3,r19
1000aa0c:	0701ab0e 	bge	zero,fp,1000b0bc <___vfiprintf_internal_r+0xc08>
1000aa10:	05400404 	movi	r21,16
1000aa14:	af03a90e 	bge	r21,fp,1000b8bc <___vfiprintf_internal_r+0x1408>
1000aa18:	01440074 	movhi	r5,4097
1000aa1c:	2947c204 	addi	r5,r5,7944
1000aa20:	d9402315 	stw	r5,140(sp)
1000aa24:	01c001c4 	movi	r7,7
1000aa28:	00000506 	br	1000aa40 <___vfiprintf_internal_r+0x58c>
1000aa2c:	21800084 	addi	r6,r4,2
1000aa30:	42000204 	addi	r8,r8,8
1000aa34:	1809883a 	mov	r4,r3
1000aa38:	e73ffc04 	addi	fp,fp,-16
1000aa3c:	af000d0e 	bge	r21,fp,1000aa74 <___vfiprintf_internal_r+0x5c0>
1000aa40:	10800404 	addi	r2,r2,16
1000aa44:	20c00044 	addi	r3,r4,1
1000aa48:	44800015 	stw	r18,0(r8)
1000aa4c:	45400115 	stw	r21,4(r8)
1000aa50:	d8801c15 	stw	r2,112(sp)
1000aa54:	d8c01b15 	stw	r3,108(sp)
1000aa58:	38fff40e 	bge	r7,r3,1000aa2c <__alt_data_end+0xf800aa2c>
1000aa5c:	10022b1e 	bne	r2,zero,1000b30c <___vfiprintf_internal_r+0xe58>
1000aa60:	e73ffc04 	addi	fp,fp,-16
1000aa64:	01800044 	movi	r6,1
1000aa68:	0009883a 	mov	r4,zero
1000aa6c:	d811883a 	mov	r8,sp
1000aa70:	af3ff316 	blt	r21,fp,1000aa40 <__alt_data_end+0xf800aa40>
1000aa74:	d8c02317 	ldw	r3,140(sp)
1000aa78:	1705883a 	add	r2,r2,fp
1000aa7c:	47000115 	stw	fp,4(r8)
1000aa80:	40c00015 	stw	r3,0(r8)
1000aa84:	d8801c15 	stw	r2,112(sp)
1000aa88:	d9801b15 	stw	r6,108(sp)
1000aa8c:	00c001c4 	movi	r3,7
1000aa90:	19829416 	blt	r3,r6,1000b4e4 <___vfiprintf_internal_r+0x1030>
1000aa94:	8521c83a 	sub	r16,r16,r20
1000aa98:	42000204 	addi	r8,r8,8
1000aa9c:	31400044 	addi	r5,r6,1
1000aaa0:	3009883a 	mov	r4,r6
1000aaa4:	04018716 	blt	zero,r16,1000b0c4 <___vfiprintf_internal_r+0xc10>
1000aaa8:	a085883a 	add	r2,r20,r2
1000aaac:	45c00015 	stw	r23,0(r8)
1000aab0:	45000115 	stw	r20,4(r8)
1000aab4:	d8801c15 	stw	r2,112(sp)
1000aab8:	d9401b15 	stw	r5,108(sp)
1000aabc:	00c001c4 	movi	r3,7
1000aac0:	1941c20e 	bge	r3,r5,1000b1cc <___vfiprintf_internal_r+0xd18>
1000aac4:	1002531e 	bne	r2,zero,1000b414 <___vfiprintf_internal_r+0xf60>
1000aac8:	d8001b15 	stw	zero,108(sp)
1000aacc:	8c40010c 	andi	r17,r17,4
1000aad0:	88023226 	beq	r17,zero,1000b39c <___vfiprintf_internal_r+0xee8>
1000aad4:	d9002517 	ldw	r4,148(sp)
1000aad8:	24e3c83a 	sub	r17,r4,r19
1000aadc:	04432916 	blt	zero,r17,1000b784 <___vfiprintf_internal_r+0x12d0>
1000aae0:	d8802517 	ldw	r2,148(sp)
1000aae4:	14c0010e 	bge	r2,r19,1000aaec <___vfiprintf_internal_r+0x638>
1000aae8:	9805883a 	mov	r2,r19
1000aaec:	d8c02417 	ldw	r3,144(sp)
1000aaf0:	1887883a 	add	r3,r3,r2
1000aaf4:	d8c02415 	stw	r3,144(sp)
1000aaf8:	d8001b15 	stw	zero,108(sp)
1000aafc:	d811883a 	mov	r8,sp
1000ab00:	003ea006 	br	1000a584 <__alt_data_end+0xf800a584>
1000ab04:	8c400814 	ori	r17,r17,32
1000ab08:	b0c00007 	ldb	r3,0(r22)
1000ab0c:	003ec606 	br	1000a628 <__alt_data_end+0xf800a628>
1000ab10:	b0c00007 	ldb	r3,0(r22)
1000ab14:	00801b04 	movi	r2,108
1000ab18:	18832026 	beq	r3,r2,1000b79c <___vfiprintf_internal_r+0x12e8>
1000ab1c:	8c400414 	ori	r17,r17,16
1000ab20:	003ec106 	br	1000a628 <__alt_data_end+0xf800a628>
1000ab24:	9cc03fcc 	andi	r19,r19,255
1000ab28:	b811883a 	mov	r8,r23
1000ab2c:	9803981e 	bne	r19,zero,1000b990 <___vfiprintf_internal_r+0x14dc>
1000ab30:	8880080c 	andi	r2,r17,32
1000ab34:	1002be26 	beq	r2,zero,1000b630 <___vfiprintf_internal_r+0x117c>
1000ab38:	d9002217 	ldw	r4,136(sp)
1000ab3c:	d9402417 	ldw	r5,144(sp)
1000ab40:	20800017 	ldw	r2,0(r4)
1000ab44:	2807d7fa 	srai	r3,r5,31
1000ab48:	21000104 	addi	r4,r4,4
1000ab4c:	d9002215 	stw	r4,136(sp)
1000ab50:	11400015 	stw	r5,0(r2)
1000ab54:	10c00115 	stw	r3,4(r2)
1000ab58:	003e8a06 	br	1000a584 <__alt_data_end+0xf800a584>
1000ab5c:	9cc03fcc 	andi	r19,r19,255
1000ab60:	b811883a 	mov	r8,r23
1000ab64:	9803871e 	bne	r19,zero,1000b984 <___vfiprintf_internal_r+0x14d0>
1000ab68:	8880080c 	andi	r2,r17,32
1000ab6c:	10009a26 	beq	r2,zero,1000add8 <___vfiprintf_internal_r+0x924>
1000ab70:	d9002217 	ldw	r4,136(sp)
1000ab74:	d8001d85 	stb	zero,118(sp)
1000ab78:	20800204 	addi	r2,r4,8
1000ab7c:	24c00017 	ldw	r19,0(r4)
1000ab80:	25000117 	ldw	r20,4(r4)
1000ab84:	8002a416 	blt	r16,zero,1000b618 <___vfiprintf_internal_r+0x1164>
1000ab88:	013fdfc4 	movi	r4,-129
1000ab8c:	9d06b03a 	or	r3,r19,r20
1000ab90:	d8802215 	stw	r2,136(sp)
1000ab94:	8922703a 	and	r17,r17,r4
1000ab98:	18009b26 	beq	r3,zero,1000ae08 <___vfiprintf_internal_r+0x954>
1000ab9c:	002b883a 	mov	r21,zero
1000aba0:	ddc01a04 	addi	r23,sp,104
1000aba4:	9806d0fa 	srli	r3,r19,3
1000aba8:	a008977a 	slli	r4,r20,29
1000abac:	a028d0fa 	srli	r20,r20,3
1000abb0:	9cc001cc 	andi	r19,r19,7
1000abb4:	98800c04 	addi	r2,r19,48
1000abb8:	bdffffc4 	addi	r23,r23,-1
1000abbc:	20e6b03a 	or	r19,r4,r3
1000abc0:	b8800005 	stb	r2,0(r23)
1000abc4:	9d06b03a 	or	r3,r19,r20
1000abc8:	183ff61e 	bne	r3,zero,1000aba4 <__alt_data_end+0xf800aba4>
1000abcc:	88c0004c 	andi	r3,r17,1
1000abd0:	18021f1e 	bne	r3,zero,1000b450 <___vfiprintf_internal_r+0xf9c>
1000abd4:	d9401e17 	ldw	r5,120(sp)
1000abd8:	2de9c83a 	sub	r20,r5,r23
1000abdc:	003f3806 	br	1000a8c0 <__alt_data_end+0xf800a8c0>
1000abe0:	9cc03fcc 	andi	r19,r19,255
1000abe4:	b811883a 	mov	r8,r23
1000abe8:	98034f1e 	bne	r19,zero,1000b928 <___vfiprintf_internal_r+0x1474>
1000abec:	00840074 	movhi	r2,4097
1000abf0:	10876204 	addi	r2,r2,7560
1000abf4:	d8802615 	stw	r2,152(sp)
1000abf8:	8880080c 	andi	r2,r17,32
1000abfc:	1000ac26 	beq	r2,zero,1000aeb0 <___vfiprintf_internal_r+0x9fc>
1000ac00:	d9002217 	ldw	r4,136(sp)
1000ac04:	24c00017 	ldw	r19,0(r4)
1000ac08:	25000117 	ldw	r20,4(r4)
1000ac0c:	21000204 	addi	r4,r4,8
1000ac10:	d9002215 	stw	r4,136(sp)
1000ac14:	8880004c 	andi	r2,r17,1
1000ac18:	1001e726 	beq	r2,zero,1000b3b8 <___vfiprintf_internal_r+0xf04>
1000ac1c:	9d04b03a 	or	r2,r19,r20
1000ac20:	10025c1e 	bne	r2,zero,1000b594 <___vfiprintf_internal_r+0x10e0>
1000ac24:	d8001d85 	stb	zero,118(sp)
1000ac28:	80024416 	blt	r16,zero,1000b53c <___vfiprintf_internal_r+0x1088>
1000ac2c:	00bfdfc4 	movi	r2,-129
1000ac30:	88a2703a 	and	r17,r17,r2
1000ac34:	003f1d06 	br	1000a8ac <__alt_data_end+0xf800a8ac>
1000ac38:	d8c02217 	ldw	r3,136(sp)
1000ac3c:	04c00044 	movi	r19,1
1000ac40:	b811883a 	mov	r8,r23
1000ac44:	18800017 	ldw	r2,0(r3)
1000ac48:	18c00104 	addi	r3,r3,4
1000ac4c:	d8001d85 	stb	zero,118(sp)
1000ac50:	d8801005 	stb	r2,64(sp)
1000ac54:	d8c02215 	stw	r3,136(sp)
1000ac58:	9829883a 	mov	r20,r19
1000ac5c:	ddc01004 	addi	r23,sp,64
1000ac60:	0021883a 	mov	r16,zero
1000ac64:	003f1e06 	br	1000a8e0 <__alt_data_end+0xf800a8e0>
1000ac68:	9cc03fcc 	andi	r19,r19,255
1000ac6c:	b811883a 	mov	r8,r23
1000ac70:	9803331e 	bne	r19,zero,1000b940 <___vfiprintf_internal_r+0x148c>
1000ac74:	8880080c 	andi	r2,r17,32
1000ac78:	10004826 	beq	r2,zero,1000ad9c <___vfiprintf_internal_r+0x8e8>
1000ac7c:	d9002217 	ldw	r4,136(sp)
1000ac80:	20800117 	ldw	r2,4(r4)
1000ac84:	24c00017 	ldw	r19,0(r4)
1000ac88:	21000204 	addi	r4,r4,8
1000ac8c:	d9002215 	stw	r4,136(sp)
1000ac90:	1029883a 	mov	r20,r2
1000ac94:	10024c16 	blt	r2,zero,1000b5c8 <___vfiprintf_internal_r+0x1114>
1000ac98:	dd401d83 	ldbu	r21,118(sp)
1000ac9c:	80007116 	blt	r16,zero,1000ae64 <___vfiprintf_internal_r+0x9b0>
1000aca0:	00ffdfc4 	movi	r3,-129
1000aca4:	9d04b03a 	or	r2,r19,r20
1000aca8:	88e2703a 	and	r17,r17,r3
1000acac:	1000d126 	beq	r2,zero,1000aff4 <___vfiprintf_internal_r+0xb40>
1000acb0:	a0023526 	beq	r20,zero,1000b588 <___vfiprintf_internal_r+0x10d4>
1000acb4:	ddc01a04 	addi	r23,sp,104
1000acb8:	4039883a 	mov	fp,r8
1000acbc:	9809883a 	mov	r4,r19
1000acc0:	a00b883a 	mov	r5,r20
1000acc4:	01800284 	movi	r6,10
1000acc8:	000f883a 	mov	r7,zero
1000accc:	000c6b80 	call	1000c6b8 <__umoddi3>
1000acd0:	10800c04 	addi	r2,r2,48
1000acd4:	bdffffc4 	addi	r23,r23,-1
1000acd8:	9809883a 	mov	r4,r19
1000acdc:	a00b883a 	mov	r5,r20
1000ace0:	b8800005 	stb	r2,0(r23)
1000ace4:	01800284 	movi	r6,10
1000ace8:	000f883a 	mov	r7,zero
1000acec:	000c0bc0 	call	1000c0bc <__udivdi3>
1000acf0:	1027883a 	mov	r19,r2
1000acf4:	10c4b03a 	or	r2,r2,r3
1000acf8:	1829883a 	mov	r20,r3
1000acfc:	103fef1e 	bne	r2,zero,1000acbc <__alt_data_end+0xf800acbc>
1000ad00:	d9001e17 	ldw	r4,120(sp)
1000ad04:	e011883a 	mov	r8,fp
1000ad08:	25e9c83a 	sub	r20,r4,r23
1000ad0c:	003eec06 	br	1000a8c0 <__alt_data_end+0xf800a8c0>
1000ad10:	d8802307 	ldb	r2,140(sp)
1000ad14:	1002361e 	bne	r2,zero,1000b5f0 <___vfiprintf_internal_r+0x113c>
1000ad18:	00c00804 	movi	r3,32
1000ad1c:	d8c02305 	stb	r3,140(sp)
1000ad20:	04c00044 	movi	r19,1
1000ad24:	b0c00007 	ldb	r3,0(r22)
1000ad28:	003e3f06 	br	1000a628 <__alt_data_end+0xf800a628>
1000ad2c:	8c400054 	ori	r17,r17,1
1000ad30:	b0c00007 	ldb	r3,0(r22)
1000ad34:	003e3c06 	br	1000a628 <__alt_data_end+0xf800a628>
1000ad38:	8c402014 	ori	r17,r17,128
1000ad3c:	b0c00007 	ldb	r3,0(r22)
1000ad40:	003e3906 	br	1000a628 <__alt_data_end+0xf800a628>
1000ad44:	dc002715 	stw	r16,156(sp)
1000ad48:	d8002515 	stw	zero,148(sp)
1000ad4c:	1f3ff404 	addi	fp,r3,-48
1000ad50:	0009883a 	mov	r4,zero
1000ad54:	b021883a 	mov	r16,r22
1000ad58:	01400284 	movi	r5,10
1000ad5c:	00010d40 	call	100010d4 <__mulsi3>
1000ad60:	80c00007 	ldb	r3,0(r16)
1000ad64:	e089883a 	add	r4,fp,r2
1000ad68:	b5800044 	addi	r22,r22,1
1000ad6c:	1f3ff404 	addi	fp,r3,-48
1000ad70:	b021883a 	mov	r16,r22
1000ad74:	af3ff82e 	bgeu	r21,fp,1000ad58 <__alt_data_end+0xf800ad58>
1000ad78:	d9002515 	stw	r4,148(sp)
1000ad7c:	dc002717 	ldw	r16,156(sp)
1000ad80:	003e2a06 	br	1000a62c <__alt_data_end+0xf800a62c>
1000ad84:	9cc03fcc 	andi	r19,r19,255
1000ad88:	b811883a 	mov	r8,r23
1000ad8c:	9802e91e 	bne	r19,zero,1000b934 <___vfiprintf_internal_r+0x1480>
1000ad90:	8c400414 	ori	r17,r17,16
1000ad94:	8880080c 	andi	r2,r17,32
1000ad98:	103fb81e 	bne	r2,zero,1000ac7c <__alt_data_end+0xf800ac7c>
1000ad9c:	8880040c 	andi	r2,r17,16
1000ada0:	10022e26 	beq	r2,zero,1000b65c <___vfiprintf_internal_r+0x11a8>
1000ada4:	d9402217 	ldw	r5,136(sp)
1000ada8:	2cc00017 	ldw	r19,0(r5)
1000adac:	29400104 	addi	r5,r5,4
1000adb0:	d9402215 	stw	r5,136(sp)
1000adb4:	9829d7fa 	srai	r20,r19,31
1000adb8:	a005883a 	mov	r2,r20
1000adbc:	003fb506 	br	1000ac94 <__alt_data_end+0xf800ac94>
1000adc0:	9cc03fcc 	andi	r19,r19,255
1000adc4:	b811883a 	mov	r8,r23
1000adc8:	9802fa1e 	bne	r19,zero,1000b9b4 <___vfiprintf_internal_r+0x1500>
1000adcc:	8c400414 	ori	r17,r17,16
1000add0:	8880080c 	andi	r2,r17,32
1000add4:	103f661e 	bne	r2,zero,1000ab70 <__alt_data_end+0xf800ab70>
1000add8:	8880040c 	andi	r2,r17,16
1000addc:	10020626 	beq	r2,zero,1000b5f8 <___vfiprintf_internal_r+0x1144>
1000ade0:	d9402217 	ldw	r5,136(sp)
1000ade4:	d8001d85 	stb	zero,118(sp)
1000ade8:	0029883a 	mov	r20,zero
1000adec:	28800104 	addi	r2,r5,4
1000adf0:	2cc00017 	ldw	r19,0(r5)
1000adf4:	80020816 	blt	r16,zero,1000b618 <___vfiprintf_internal_r+0x1164>
1000adf8:	00ffdfc4 	movi	r3,-129
1000adfc:	d8802215 	stw	r2,136(sp)
1000ae00:	88e2703a 	and	r17,r17,r3
1000ae04:	983f651e 	bne	r19,zero,1000ab9c <__alt_data_end+0xf800ab9c>
1000ae08:	002b883a 	mov	r21,zero
1000ae0c:	8002cf26 	beq	r16,zero,1000b94c <___vfiprintf_internal_r+0x1498>
1000ae10:	0027883a 	mov	r19,zero
1000ae14:	0029883a 	mov	r20,zero
1000ae18:	003f6106 	br	1000aba0 <__alt_data_end+0xf800aba0>
1000ae1c:	9cc03fcc 	andi	r19,r19,255
1000ae20:	b811883a 	mov	r8,r23
1000ae24:	9802e01e 	bne	r19,zero,1000b9a8 <___vfiprintf_internal_r+0x14f4>
1000ae28:	8c400414 	ori	r17,r17,16
1000ae2c:	8880080c 	andi	r2,r17,32
1000ae30:	1000641e 	bne	r2,zero,1000afc4 <___vfiprintf_internal_r+0xb10>
1000ae34:	8880040c 	andi	r2,r17,16
1000ae38:	1001c81e 	bne	r2,zero,1000b55c <___vfiprintf_internal_r+0x10a8>
1000ae3c:	8880100c 	andi	r2,r17,64
1000ae40:	d8001d85 	stb	zero,118(sp)
1000ae44:	1002281e 	bne	r2,zero,1000b6e8 <___vfiprintf_internal_r+0x1234>
1000ae48:	d9002217 	ldw	r4,136(sp)
1000ae4c:	0029883a 	mov	r20,zero
1000ae50:	20800104 	addi	r2,r4,4
1000ae54:	24c00017 	ldw	r19,0(r4)
1000ae58:	8001c60e 	bge	r16,zero,1000b574 <___vfiprintf_internal_r+0x10c0>
1000ae5c:	d8802215 	stw	r2,136(sp)
1000ae60:	002b883a 	mov	r21,zero
1000ae64:	9d04b03a 	or	r2,r19,r20
1000ae68:	103f911e 	bne	r2,zero,1000acb0 <__alt_data_end+0xf800acb0>
1000ae6c:	00800044 	movi	r2,1
1000ae70:	10803fcc 	andi	r2,r2,255
1000ae74:	00c00044 	movi	r3,1
1000ae78:	10c05f26 	beq	r2,r3,1000aff8 <___vfiprintf_internal_r+0xb44>
1000ae7c:	00c00084 	movi	r3,2
1000ae80:	10ffe31e 	bne	r2,r3,1000ae10 <__alt_data_end+0xf800ae10>
1000ae84:	0027883a 	mov	r19,zero
1000ae88:	0029883a 	mov	r20,zero
1000ae8c:	00015106 	br	1000b3d4 <___vfiprintf_internal_r+0xf20>
1000ae90:	9cc03fcc 	andi	r19,r19,255
1000ae94:	b811883a 	mov	r8,r23
1000ae98:	9802c01e 	bne	r19,zero,1000b99c <___vfiprintf_internal_r+0x14e8>
1000ae9c:	01440074 	movhi	r5,4097
1000aea0:	29475d04 	addi	r5,r5,7540
1000aea4:	d9402615 	stw	r5,152(sp)
1000aea8:	8880080c 	andi	r2,r17,32
1000aeac:	103f541e 	bne	r2,zero,1000ac00 <__alt_data_end+0xf800ac00>
1000aeb0:	8880040c 	andi	r2,r17,16
1000aeb4:	1001f226 	beq	r2,zero,1000b680 <___vfiprintf_internal_r+0x11cc>
1000aeb8:	d9402217 	ldw	r5,136(sp)
1000aebc:	0029883a 	mov	r20,zero
1000aec0:	2cc00017 	ldw	r19,0(r5)
1000aec4:	29400104 	addi	r5,r5,4
1000aec8:	d9402215 	stw	r5,136(sp)
1000aecc:	003f5106 	br	1000ac14 <__alt_data_end+0xf800ac14>
1000aed0:	d8c02217 	ldw	r3,136(sp)
1000aed4:	b811883a 	mov	r8,r23
1000aed8:	d8001d85 	stb	zero,118(sp)
1000aedc:	1dc00017 	ldw	r23,0(r3)
1000aee0:	1f000104 	addi	fp,r3,4
1000aee4:	b8025926 	beq	r23,zero,1000b84c <___vfiprintf_internal_r+0x1398>
1000aee8:	80023316 	blt	r16,zero,1000b7b8 <___vfiprintf_internal_r+0x1304>
1000aeec:	800d883a 	mov	r6,r16
1000aef0:	000b883a 	mov	r5,zero
1000aef4:	b809883a 	mov	r4,r23
1000aef8:	da002a15 	stw	r8,168(sp)
1000aefc:	0008a8c0 	call	10008a8c <memchr>
1000af00:	da002a17 	ldw	r8,168(sp)
1000af04:	10026826 	beq	r2,zero,1000b8a8 <___vfiprintf_internal_r+0x13f4>
1000af08:	15e9c83a 	sub	r20,r2,r23
1000af0c:	dd401d83 	ldbu	r21,118(sp)
1000af10:	df002215 	stw	fp,136(sp)
1000af14:	0021883a 	mov	r16,zero
1000af18:	003e6906 	br	1000a8c0 <__alt_data_end+0xf800a8c0>
1000af1c:	9cc03fcc 	andi	r19,r19,255
1000af20:	b811883a 	mov	r8,r23
1000af24:	983fc126 	beq	r19,zero,1000ae2c <__alt_data_end+0xf800ae2c>
1000af28:	d8c02303 	ldbu	r3,140(sp)
1000af2c:	d8c01d85 	stb	r3,118(sp)
1000af30:	003fbe06 	br	1000ae2c <__alt_data_end+0xf800ae2c>
1000af34:	d9002217 	ldw	r4,136(sp)
1000af38:	d9402217 	ldw	r5,136(sp)
1000af3c:	21000017 	ldw	r4,0(r4)
1000af40:	28800104 	addi	r2,r5,4
1000af44:	d9002515 	stw	r4,148(sp)
1000af48:	203e3d16 	blt	r4,zero,1000a840 <__alt_data_end+0xf800a840>
1000af4c:	d8802215 	stw	r2,136(sp)
1000af50:	b0c00007 	ldb	r3,0(r22)
1000af54:	003db406 	br	1000a628 <__alt_data_end+0xf800a628>
1000af58:	00c00ac4 	movi	r3,43
1000af5c:	d8c02305 	stb	r3,140(sp)
1000af60:	04c00044 	movi	r19,1
1000af64:	b0c00007 	ldb	r3,0(r22)
1000af68:	003daf06 	br	1000a628 <__alt_data_end+0xf800a628>
1000af6c:	b0c00007 	ldb	r3,0(r22)
1000af70:	01000a84 	movi	r4,42
1000af74:	b4000044 	addi	r16,r22,1
1000af78:	19025e26 	beq	r3,r4,1000b8f4 <___vfiprintf_internal_r+0x1440>
1000af7c:	1f3ff404 	addi	fp,r3,-48
1000af80:	0009883a 	mov	r4,zero
1000af84:	af025236 	bltu	r21,fp,1000b8d0 <___vfiprintf_internal_r+0x141c>
1000af88:	01400284 	movi	r5,10
1000af8c:	00010d40 	call	100010d4 <__mulsi3>
1000af90:	80c00007 	ldb	r3,0(r16)
1000af94:	1709883a 	add	r4,r2,fp
1000af98:	85800044 	addi	r22,r16,1
1000af9c:	1f3ff404 	addi	fp,r3,-48
1000afa0:	b021883a 	mov	r16,r22
1000afa4:	af3ff82e 	bgeu	r21,fp,1000af88 <__alt_data_end+0xf800af88>
1000afa8:	2021883a 	mov	r16,r4
1000afac:	203d9f0e 	bge	r4,zero,1000a62c <__alt_data_end+0xf800a62c>
1000afb0:	043fffc4 	movi	r16,-1
1000afb4:	003d9d06 	br	1000a62c <__alt_data_end+0xf800a62c>
1000afb8:	8c401014 	ori	r17,r17,64
1000afbc:	b0c00007 	ldb	r3,0(r22)
1000afc0:	003d9906 	br	1000a628 <__alt_data_end+0xf800a628>
1000afc4:	d9002217 	ldw	r4,136(sp)
1000afc8:	d8001d85 	stb	zero,118(sp)
1000afcc:	20c00204 	addi	r3,r4,8
1000afd0:	24c00017 	ldw	r19,0(r4)
1000afd4:	25000117 	ldw	r20,4(r4)
1000afd8:	8001e716 	blt	r16,zero,1000b778 <___vfiprintf_internal_r+0x12c4>
1000afdc:	013fdfc4 	movi	r4,-129
1000afe0:	9d04b03a 	or	r2,r19,r20
1000afe4:	d8c02215 	stw	r3,136(sp)
1000afe8:	8922703a 	and	r17,r17,r4
1000afec:	002b883a 	mov	r21,zero
1000aff0:	103f2f1e 	bne	r2,zero,1000acb0 <__alt_data_end+0xf800acb0>
1000aff4:	803e2f26 	beq	r16,zero,1000a8b4 <__alt_data_end+0xf800a8b4>
1000aff8:	0027883a 	mov	r19,zero
1000affc:	9cc00c04 	addi	r19,r19,48
1000b000:	dcc019c5 	stb	r19,103(sp)
1000b004:	dd002817 	ldw	r20,160(sp)
1000b008:	ddc019c4 	addi	r23,sp,103
1000b00c:	003e2c06 	br	1000a8c0 <__alt_data_end+0xf800a8c0>
1000b010:	9cc03fcc 	andi	r19,r19,255
1000b014:	b811883a 	mov	r8,r23
1000b018:	9802571e 	bne	r19,zero,1000b978 <___vfiprintf_internal_r+0x14c4>
1000b01c:	18005726 	beq	r3,zero,1000b17c <___vfiprintf_internal_r+0xcc8>
1000b020:	04c00044 	movi	r19,1
1000b024:	d8c01005 	stb	r3,64(sp)
1000b028:	d8001d85 	stb	zero,118(sp)
1000b02c:	9829883a 	mov	r20,r19
1000b030:	ddc01004 	addi	r23,sp,64
1000b034:	003f0a06 	br	1000ac60 <__alt_data_end+0xf800ac60>
1000b038:	d9402017 	ldw	r5,128(sp)
1000b03c:	d9002117 	ldw	r4,132(sp)
1000b040:	d9801a04 	addi	r6,sp,104
1000b044:	da802a15 	stw	r10,168(sp)
1000b048:	000a3a00 	call	1000a3a0 <__sprint_r.part.0>
1000b04c:	da802a17 	ldw	r10,168(sp)
1000b050:	1000501e 	bne	r2,zero,1000b194 <___vfiprintf_internal_r+0xce0>
1000b054:	d9801b17 	ldw	r6,108(sp)
1000b058:	d8801c17 	ldw	r2,112(sp)
1000b05c:	d811883a 	mov	r8,sp
1000b060:	31000044 	addi	r4,r6,1
1000b064:	003e3606 	br	1000a940 <__alt_data_end+0xf800a940>
1000b068:	d9001b17 	ldw	r4,108(sp)
1000b06c:	d8801c17 	ldw	r2,112(sp)
1000b070:	21400044 	addi	r5,r4,1
1000b074:	d9801d87 	ldb	r6,118(sp)
1000b078:	303e5226 	beq	r6,zero,1000a9c4 <__alt_data_end+0xf800a9c4>
1000b07c:	01800044 	movi	r6,1
1000b080:	d9001d84 	addi	r4,sp,118
1000b084:	1185883a 	add	r2,r2,r6
1000b088:	41000015 	stw	r4,0(r8)
1000b08c:	41800115 	stw	r6,4(r8)
1000b090:	d8801c15 	stw	r2,112(sp)
1000b094:	d9401b15 	stw	r5,108(sp)
1000b098:	010001c4 	movi	r4,7
1000b09c:	2140b00e 	bge	r4,r5,1000b360 <___vfiprintf_internal_r+0xeac>
1000b0a0:	1000f61e 	bne	r2,zero,1000b47c <___vfiprintf_internal_r+0xfc8>
1000b0a4:	3800b31e 	bne	r7,zero,1000b374 <___vfiprintf_internal_r+0xec0>
1000b0a8:	0009883a 	mov	r4,zero
1000b0ac:	300b883a 	mov	r5,r6
1000b0b0:	d811883a 	mov	r8,sp
1000b0b4:	01802004 	movi	r6,128
1000b0b8:	19be5226 	beq	r3,r6,1000aa04 <__alt_data_end+0xf800aa04>
1000b0bc:	8521c83a 	sub	r16,r16,r20
1000b0c0:	043e790e 	bge	zero,r16,1000aaa8 <__alt_data_end+0xf800aaa8>
1000b0c4:	05400404 	movi	r21,16
1000b0c8:	ac01b00e 	bge	r21,r16,1000b78c <___vfiprintf_internal_r+0x12d8>
1000b0cc:	01440074 	movhi	r5,4097
1000b0d0:	2947c204 	addi	r5,r5,7944
1000b0d4:	d9402315 	stw	r5,140(sp)
1000b0d8:	070001c4 	movi	fp,7
1000b0dc:	00000506 	br	1000b0f4 <___vfiprintf_internal_r+0xc40>
1000b0e0:	21400084 	addi	r5,r4,2
1000b0e4:	42000204 	addi	r8,r8,8
1000b0e8:	1809883a 	mov	r4,r3
1000b0ec:	843ffc04 	addi	r16,r16,-16
1000b0f0:	ac000d0e 	bge	r21,r16,1000b128 <___vfiprintf_internal_r+0xc74>
1000b0f4:	10800404 	addi	r2,r2,16
1000b0f8:	20c00044 	addi	r3,r4,1
1000b0fc:	44800015 	stw	r18,0(r8)
1000b100:	45400115 	stw	r21,4(r8)
1000b104:	d8801c15 	stw	r2,112(sp)
1000b108:	d8c01b15 	stw	r3,108(sp)
1000b10c:	e0fff40e 	bge	fp,r3,1000b0e0 <__alt_data_end+0xf800b0e0>
1000b110:	1000101e 	bne	r2,zero,1000b154 <___vfiprintf_internal_r+0xca0>
1000b114:	843ffc04 	addi	r16,r16,-16
1000b118:	01400044 	movi	r5,1
1000b11c:	0009883a 	mov	r4,zero
1000b120:	d811883a 	mov	r8,sp
1000b124:	ac3ff316 	blt	r21,r16,1000b0f4 <__alt_data_end+0xf800b0f4>
1000b128:	d8c02317 	ldw	r3,140(sp)
1000b12c:	1405883a 	add	r2,r2,r16
1000b130:	44000115 	stw	r16,4(r8)
1000b134:	40c00015 	stw	r3,0(r8)
1000b138:	d8801c15 	stw	r2,112(sp)
1000b13c:	d9401b15 	stw	r5,108(sp)
1000b140:	00c001c4 	movi	r3,7
1000b144:	19401916 	blt	r3,r5,1000b1ac <___vfiprintf_internal_r+0xcf8>
1000b148:	42000204 	addi	r8,r8,8
1000b14c:	29400044 	addi	r5,r5,1
1000b150:	003e5506 	br	1000aaa8 <__alt_data_end+0xf800aaa8>
1000b154:	d9402017 	ldw	r5,128(sp)
1000b158:	d9002117 	ldw	r4,132(sp)
1000b15c:	d9801a04 	addi	r6,sp,104
1000b160:	000a3a00 	call	1000a3a0 <__sprint_r.part.0>
1000b164:	10000b1e 	bne	r2,zero,1000b194 <___vfiprintf_internal_r+0xce0>
1000b168:	d9001b17 	ldw	r4,108(sp)
1000b16c:	d8801c17 	ldw	r2,112(sp)
1000b170:	d811883a 	mov	r8,sp
1000b174:	21400044 	addi	r5,r4,1
1000b178:	003fdc06 	br	1000b0ec <__alt_data_end+0xf800b0ec>
1000b17c:	d8801c17 	ldw	r2,112(sp)
1000b180:	10000426 	beq	r2,zero,1000b194 <___vfiprintf_internal_r+0xce0>
1000b184:	d9402017 	ldw	r5,128(sp)
1000b188:	d9002117 	ldw	r4,132(sp)
1000b18c:	d9801a04 	addi	r6,sp,104
1000b190:	000a3a00 	call	1000a3a0 <__sprint_r.part.0>
1000b194:	d9402017 	ldw	r5,128(sp)
1000b198:	2880030b 	ldhu	r2,12(r5)
1000b19c:	1080100c 	andi	r2,r2,64
1000b1a0:	10014d1e 	bne	r2,zero,1000b6d8 <___vfiprintf_internal_r+0x1224>
1000b1a4:	d8802417 	ldw	r2,144(sp)
1000b1a8:	003d9706 	br	1000a808 <__alt_data_end+0xf800a808>
1000b1ac:	1000d21e 	bne	r2,zero,1000b4f8 <___vfiprintf_internal_r+0x1044>
1000b1b0:	00c00044 	movi	r3,1
1000b1b4:	a005883a 	mov	r2,r20
1000b1b8:	ddc00015 	stw	r23,0(sp)
1000b1bc:	dd000115 	stw	r20,4(sp)
1000b1c0:	dd001c15 	stw	r20,112(sp)
1000b1c4:	d8c01b15 	stw	r3,108(sp)
1000b1c8:	d811883a 	mov	r8,sp
1000b1cc:	42000204 	addi	r8,r8,8
1000b1d0:	8c40010c 	andi	r17,r17,4
1000b1d4:	88004026 	beq	r17,zero,1000b2d8 <___vfiprintf_internal_r+0xe24>
1000b1d8:	d9002517 	ldw	r4,148(sp)
1000b1dc:	24e3c83a 	sub	r17,r4,r19
1000b1e0:	04403d0e 	bge	zero,r17,1000b2d8 <___vfiprintf_internal_r+0xe24>
1000b1e4:	04000404 	movi	r16,16
1000b1e8:	8441a90e 	bge	r16,r17,1000b890 <___vfiprintf_internal_r+0x13dc>
1000b1ec:	00c40074 	movhi	r3,4097
1000b1f0:	18c7c604 	addi	r3,r3,7960
1000b1f4:	d9001b17 	ldw	r4,108(sp)
1000b1f8:	d8c02315 	stw	r3,140(sp)
1000b1fc:	050001c4 	movi	r20,7
1000b200:	dd402117 	ldw	r21,132(sp)
1000b204:	ddc02017 	ldw	r23,128(sp)
1000b208:	00000506 	br	1000b220 <___vfiprintf_internal_r+0xd6c>
1000b20c:	21400084 	addi	r5,r4,2
1000b210:	42000204 	addi	r8,r8,8
1000b214:	1809883a 	mov	r4,r3
1000b218:	8c7ffc04 	addi	r17,r17,-16
1000b21c:	84400f0e 	bge	r16,r17,1000b25c <___vfiprintf_internal_r+0xda8>
1000b220:	01440074 	movhi	r5,4097
1000b224:	10800404 	addi	r2,r2,16
1000b228:	20c00044 	addi	r3,r4,1
1000b22c:	2947c604 	addi	r5,r5,7960
1000b230:	41400015 	stw	r5,0(r8)
1000b234:	44000115 	stw	r16,4(r8)
1000b238:	d8801c15 	stw	r2,112(sp)
1000b23c:	d8c01b15 	stw	r3,108(sp)
1000b240:	a0fff20e 	bge	r20,r3,1000b20c <__alt_data_end+0xf800b20c>
1000b244:	1000141e 	bne	r2,zero,1000b298 <___vfiprintf_internal_r+0xde4>
1000b248:	8c7ffc04 	addi	r17,r17,-16
1000b24c:	01400044 	movi	r5,1
1000b250:	0009883a 	mov	r4,zero
1000b254:	d811883a 	mov	r8,sp
1000b258:	847ff116 	blt	r16,r17,1000b220 <__alt_data_end+0xf800b220>
1000b25c:	d8c02317 	ldw	r3,140(sp)
1000b260:	1445883a 	add	r2,r2,r17
1000b264:	44400115 	stw	r17,4(r8)
1000b268:	40c00015 	stw	r3,0(r8)
1000b26c:	d8801c15 	stw	r2,112(sp)
1000b270:	d9401b15 	stw	r5,108(sp)
1000b274:	00c001c4 	movi	r3,7
1000b278:	1940170e 	bge	r3,r5,1000b2d8 <___vfiprintf_internal_r+0xe24>
1000b27c:	1000101e 	bne	r2,zero,1000b2c0 <___vfiprintf_internal_r+0xe0c>
1000b280:	d8802517 	ldw	r2,148(sp)
1000b284:	14c11616 	blt	r2,r19,1000b6e0 <___vfiprintf_internal_r+0x122c>
1000b288:	d9002417 	ldw	r4,144(sp)
1000b28c:	2089883a 	add	r4,r4,r2
1000b290:	d9002415 	stw	r4,144(sp)
1000b294:	003e1806 	br	1000aaf8 <__alt_data_end+0xf800aaf8>
1000b298:	d9801a04 	addi	r6,sp,104
1000b29c:	b80b883a 	mov	r5,r23
1000b2a0:	a809883a 	mov	r4,r21
1000b2a4:	000a3a00 	call	1000a3a0 <__sprint_r.part.0>
1000b2a8:	103fba1e 	bne	r2,zero,1000b194 <__alt_data_end+0xf800b194>
1000b2ac:	d9001b17 	ldw	r4,108(sp)
1000b2b0:	d8801c17 	ldw	r2,112(sp)
1000b2b4:	d811883a 	mov	r8,sp
1000b2b8:	21400044 	addi	r5,r4,1
1000b2bc:	003fd606 	br	1000b218 <__alt_data_end+0xf800b218>
1000b2c0:	d9402017 	ldw	r5,128(sp)
1000b2c4:	d9002117 	ldw	r4,132(sp)
1000b2c8:	d9801a04 	addi	r6,sp,104
1000b2cc:	000a3a00 	call	1000a3a0 <__sprint_r.part.0>
1000b2d0:	103fb01e 	bne	r2,zero,1000b194 <__alt_data_end+0xf800b194>
1000b2d4:	d8801c17 	ldw	r2,112(sp)
1000b2d8:	d8c02517 	ldw	r3,148(sp)
1000b2dc:	1cc0010e 	bge	r3,r19,1000b2e4 <___vfiprintf_internal_r+0xe30>
1000b2e0:	9807883a 	mov	r3,r19
1000b2e4:	d9002417 	ldw	r4,144(sp)
1000b2e8:	20c9883a 	add	r4,r4,r3
1000b2ec:	d9002415 	stw	r4,144(sp)
1000b2f0:	103e0126 	beq	r2,zero,1000aaf8 <__alt_data_end+0xf800aaf8>
1000b2f4:	d9402017 	ldw	r5,128(sp)
1000b2f8:	d9002117 	ldw	r4,132(sp)
1000b2fc:	d9801a04 	addi	r6,sp,104
1000b300:	000a3a00 	call	1000a3a0 <__sprint_r.part.0>
1000b304:	103dfc26 	beq	r2,zero,1000aaf8 <__alt_data_end+0xf800aaf8>
1000b308:	003fa206 	br	1000b194 <__alt_data_end+0xf800b194>
1000b30c:	d9402017 	ldw	r5,128(sp)
1000b310:	d9002117 	ldw	r4,132(sp)
1000b314:	d9801a04 	addi	r6,sp,104
1000b318:	d9c02b15 	stw	r7,172(sp)
1000b31c:	000a3a00 	call	1000a3a0 <__sprint_r.part.0>
1000b320:	d9c02b17 	ldw	r7,172(sp)
1000b324:	103f9b1e 	bne	r2,zero,1000b194 <__alt_data_end+0xf800b194>
1000b328:	d9001b17 	ldw	r4,108(sp)
1000b32c:	d8801c17 	ldw	r2,112(sp)
1000b330:	d811883a 	mov	r8,sp
1000b334:	21800044 	addi	r6,r4,1
1000b338:	003dbf06 	br	1000aa38 <__alt_data_end+0xf800aa38>
1000b33c:	1000d81e 	bne	r2,zero,1000b6a0 <___vfiprintf_internal_r+0x11ec>
1000b340:	d9001d87 	ldb	r4,118(sp)
1000b344:	20000a26 	beq	r4,zero,1000b370 <___vfiprintf_internal_r+0xebc>
1000b348:	00800044 	movi	r2,1
1000b34c:	d9001d84 	addi	r4,sp,118
1000b350:	100b883a 	mov	r5,r2
1000b354:	d9000015 	stw	r4,0(sp)
1000b358:	d8800115 	stw	r2,4(sp)
1000b35c:	d811883a 	mov	r8,sp
1000b360:	2809883a 	mov	r4,r5
1000b364:	42000204 	addi	r8,r8,8
1000b368:	29400044 	addi	r5,r5,1
1000b36c:	003d9506 	br	1000a9c4 <__alt_data_end+0xf800a9c4>
1000b370:	3800fd26 	beq	r7,zero,1000b768 <___vfiprintf_internal_r+0x12b4>
1000b374:	00800084 	movi	r2,2
1000b378:	d9001d04 	addi	r4,sp,116
1000b37c:	d9000015 	stw	r4,0(sp)
1000b380:	d8800115 	stw	r2,4(sp)
1000b384:	01400044 	movi	r5,1
1000b388:	d811883a 	mov	r8,sp
1000b38c:	2809883a 	mov	r4,r5
1000b390:	42000204 	addi	r8,r8,8
1000b394:	29400044 	addi	r5,r5,1
1000b398:	003f4606 	br	1000b0b4 <__alt_data_end+0xf800b0b4>
1000b39c:	d8802517 	ldw	r2,148(sp)
1000b3a0:	14c0010e 	bge	r2,r19,1000b3a8 <___vfiprintf_internal_r+0xef4>
1000b3a4:	9805883a 	mov	r2,r19
1000b3a8:	d9402417 	ldw	r5,144(sp)
1000b3ac:	288b883a 	add	r5,r5,r2
1000b3b0:	d9402415 	stw	r5,144(sp)
1000b3b4:	003dd006 	br	1000aaf8 <__alt_data_end+0xf800aaf8>
1000b3b8:	d8001d85 	stb	zero,118(sp)
1000b3bc:	80005d16 	blt	r16,zero,1000b534 <___vfiprintf_internal_r+0x1080>
1000b3c0:	00ffdfc4 	movi	r3,-129
1000b3c4:	9d04b03a 	or	r2,r19,r20
1000b3c8:	88e2703a 	and	r17,r17,r3
1000b3cc:	103d3726 	beq	r2,zero,1000a8ac <__alt_data_end+0xf800a8ac>
1000b3d0:	002b883a 	mov	r21,zero
1000b3d4:	d9002617 	ldw	r4,152(sp)
1000b3d8:	ddc01a04 	addi	r23,sp,104
1000b3dc:	988003cc 	andi	r2,r19,15
1000b3e0:	a006973a 	slli	r3,r20,28
1000b3e4:	2085883a 	add	r2,r4,r2
1000b3e8:	9826d13a 	srli	r19,r19,4
1000b3ec:	10800003 	ldbu	r2,0(r2)
1000b3f0:	a028d13a 	srli	r20,r20,4
1000b3f4:	bdffffc4 	addi	r23,r23,-1
1000b3f8:	1ce6b03a 	or	r19,r3,r19
1000b3fc:	b8800005 	stb	r2,0(r23)
1000b400:	9d04b03a 	or	r2,r19,r20
1000b404:	103ff51e 	bne	r2,zero,1000b3dc <__alt_data_end+0xf800b3dc>
1000b408:	d8801e17 	ldw	r2,120(sp)
1000b40c:	15e9c83a 	sub	r20,r2,r23
1000b410:	003d2b06 	br	1000a8c0 <__alt_data_end+0xf800a8c0>
1000b414:	d9402017 	ldw	r5,128(sp)
1000b418:	d9002117 	ldw	r4,132(sp)
1000b41c:	d9801a04 	addi	r6,sp,104
1000b420:	000a3a00 	call	1000a3a0 <__sprint_r.part.0>
1000b424:	103f5b1e 	bne	r2,zero,1000b194 <__alt_data_end+0xf800b194>
1000b428:	d8801c17 	ldw	r2,112(sp)
1000b42c:	d811883a 	mov	r8,sp
1000b430:	003f6706 	br	1000b1d0 <__alt_data_end+0xf800b1d0>
1000b434:	d9402017 	ldw	r5,128(sp)
1000b438:	d9002117 	ldw	r4,132(sp)
1000b43c:	d9801a04 	addi	r6,sp,104
1000b440:	000a3a00 	call	1000a3a0 <__sprint_r.part.0>
1000b444:	103f531e 	bne	r2,zero,1000b194 <__alt_data_end+0xf800b194>
1000b448:	d811883a 	mov	r8,sp
1000b44c:	003cd906 	br	1000a7b4 <__alt_data_end+0xf800a7b4>
1000b450:	10803fcc 	andi	r2,r2,255
1000b454:	1080201c 	xori	r2,r2,128
1000b458:	10bfe004 	addi	r2,r2,-128
1000b45c:	00c00c04 	movi	r3,48
1000b460:	10ffe926 	beq	r2,r3,1000b408 <__alt_data_end+0xf800b408>
1000b464:	b8ffffc5 	stb	r3,-1(r23)
1000b468:	d8c01e17 	ldw	r3,120(sp)
1000b46c:	b8bfffc4 	addi	r2,r23,-1
1000b470:	102f883a 	mov	r23,r2
1000b474:	18a9c83a 	sub	r20,r3,r2
1000b478:	003d1106 	br	1000a8c0 <__alt_data_end+0xf800a8c0>
1000b47c:	d9402017 	ldw	r5,128(sp)
1000b480:	d9002117 	ldw	r4,132(sp)
1000b484:	d9801a04 	addi	r6,sp,104
1000b488:	d8c02a15 	stw	r3,168(sp)
1000b48c:	d9c02b15 	stw	r7,172(sp)
1000b490:	000a3a00 	call	1000a3a0 <__sprint_r.part.0>
1000b494:	d8c02a17 	ldw	r3,168(sp)
1000b498:	d9c02b17 	ldw	r7,172(sp)
1000b49c:	103f3d1e 	bne	r2,zero,1000b194 <__alt_data_end+0xf800b194>
1000b4a0:	d9001b17 	ldw	r4,108(sp)
1000b4a4:	d8801c17 	ldw	r2,112(sp)
1000b4a8:	d811883a 	mov	r8,sp
1000b4ac:	21400044 	addi	r5,r4,1
1000b4b0:	003d4406 	br	1000a9c4 <__alt_data_end+0xf800a9c4>
1000b4b4:	d9402017 	ldw	r5,128(sp)
1000b4b8:	d9002117 	ldw	r4,132(sp)
1000b4bc:	d9801a04 	addi	r6,sp,104
1000b4c0:	d8c02a15 	stw	r3,168(sp)
1000b4c4:	000a3a00 	call	1000a3a0 <__sprint_r.part.0>
1000b4c8:	d8c02a17 	ldw	r3,168(sp)
1000b4cc:	103f311e 	bne	r2,zero,1000b194 <__alt_data_end+0xf800b194>
1000b4d0:	d9001b17 	ldw	r4,108(sp)
1000b4d4:	d8801c17 	ldw	r2,112(sp)
1000b4d8:	d811883a 	mov	r8,sp
1000b4dc:	21400044 	addi	r5,r4,1
1000b4e0:	003ef406 	br	1000b0b4 <__alt_data_end+0xf800b0b4>
1000b4e4:	1000bd1e 	bne	r2,zero,1000b7dc <___vfiprintf_internal_r+0x1328>
1000b4e8:	01400044 	movi	r5,1
1000b4ec:	0009883a 	mov	r4,zero
1000b4f0:	d811883a 	mov	r8,sp
1000b4f4:	003ef106 	br	1000b0bc <__alt_data_end+0xf800b0bc>
1000b4f8:	d9402017 	ldw	r5,128(sp)
1000b4fc:	d9002117 	ldw	r4,132(sp)
1000b500:	d9801a04 	addi	r6,sp,104
1000b504:	000a3a00 	call	1000a3a0 <__sprint_r.part.0>
1000b508:	103f221e 	bne	r2,zero,1000b194 <__alt_data_end+0xf800b194>
1000b50c:	d9401b17 	ldw	r5,108(sp)
1000b510:	d8801c17 	ldw	r2,112(sp)
1000b514:	d811883a 	mov	r8,sp
1000b518:	29400044 	addi	r5,r5,1
1000b51c:	003d6206 	br	1000aaa8 <__alt_data_end+0xf800aaa8>
1000b520:	01440074 	movhi	r5,4097
1000b524:	29476204 	addi	r5,r5,7560
1000b528:	d9402615 	stw	r5,152(sp)
1000b52c:	d8c02215 	stw	r3,136(sp)
1000b530:	1023883a 	mov	r17,r2
1000b534:	9d04b03a 	or	r2,r19,r20
1000b538:	103fa51e 	bne	r2,zero,1000b3d0 <__alt_data_end+0xf800b3d0>
1000b53c:	002b883a 	mov	r21,zero
1000b540:	00800084 	movi	r2,2
1000b544:	003e4a06 	br	1000ae70 <__alt_data_end+0xf800ae70>
1000b548:	01440074 	movhi	r5,4097
1000b54c:	29476204 	addi	r5,r5,7560
1000b550:	002b883a 	mov	r21,zero
1000b554:	d9402615 	stw	r5,152(sp)
1000b558:	003f9e06 	br	1000b3d4 <__alt_data_end+0xf800b3d4>
1000b55c:	d9402217 	ldw	r5,136(sp)
1000b560:	d8001d85 	stb	zero,118(sp)
1000b564:	0029883a 	mov	r20,zero
1000b568:	28800104 	addi	r2,r5,4
1000b56c:	2cc00017 	ldw	r19,0(r5)
1000b570:	803e3a16 	blt	r16,zero,1000ae5c <__alt_data_end+0xf800ae5c>
1000b574:	00ffdfc4 	movi	r3,-129
1000b578:	d8802215 	stw	r2,136(sp)
1000b57c:	88e2703a 	and	r17,r17,r3
1000b580:	002b883a 	mov	r21,zero
1000b584:	983e9b26 	beq	r19,zero,1000aff4 <__alt_data_end+0xf800aff4>
1000b588:	00800244 	movi	r2,9
1000b58c:	14fdc936 	bltu	r2,r19,1000acb4 <__alt_data_end+0xf800acb4>
1000b590:	003e9a06 	br	1000affc <__alt_data_end+0xf800affc>
1000b594:	00800c04 	movi	r2,48
1000b598:	d8c01d45 	stb	r3,117(sp)
1000b59c:	d8801d05 	stb	r2,116(sp)
1000b5a0:	d8001d85 	stb	zero,118(sp)
1000b5a4:	88c00094 	ori	r3,r17,2
1000b5a8:	80009c16 	blt	r16,zero,1000b81c <___vfiprintf_internal_r+0x1368>
1000b5ac:	00bfdfc4 	movi	r2,-129
1000b5b0:	88a2703a 	and	r17,r17,r2
1000b5b4:	8c400094 	ori	r17,r17,2
1000b5b8:	002b883a 	mov	r21,zero
1000b5bc:	003f8506 	br	1000b3d4 <__alt_data_end+0xf800b3d4>
1000b5c0:	b029883a 	mov	r20,r22
1000b5c4:	003c0b06 	br	1000a5f4 <__alt_data_end+0xf800a5f4>
1000b5c8:	04e7c83a 	sub	r19,zero,r19
1000b5cc:	05400b44 	movi	r21,45
1000b5d0:	9804c03a 	cmpne	r2,r19,zero
1000b5d4:	0529c83a 	sub	r20,zero,r20
1000b5d8:	dd401d85 	stb	r21,118(sp)
1000b5dc:	a0a9c83a 	sub	r20,r20,r2
1000b5e0:	80009716 	blt	r16,zero,1000b840 <___vfiprintf_internal_r+0x138c>
1000b5e4:	00bfdfc4 	movi	r2,-129
1000b5e8:	88a2703a 	and	r17,r17,r2
1000b5ec:	003db006 	br	1000acb0 <__alt_data_end+0xf800acb0>
1000b5f0:	b0c00007 	ldb	r3,0(r22)
1000b5f4:	003c0c06 	br	1000a628 <__alt_data_end+0xf800a628>
1000b5f8:	8880100c 	andi	r2,r17,64
1000b5fc:	d8001d85 	stb	zero,118(sp)
1000b600:	1000461e 	bne	r2,zero,1000b71c <___vfiprintf_internal_r+0x1268>
1000b604:	d9002217 	ldw	r4,136(sp)
1000b608:	0029883a 	mov	r20,zero
1000b60c:	20800104 	addi	r2,r4,4
1000b610:	24c00017 	ldw	r19,0(r4)
1000b614:	803df80e 	bge	r16,zero,1000adf8 <__alt_data_end+0xf800adf8>
1000b618:	9d06b03a 	or	r3,r19,r20
1000b61c:	d8802215 	stw	r2,136(sp)
1000b620:	183d5e1e 	bne	r3,zero,1000ab9c <__alt_data_end+0xf800ab9c>
1000b624:	002b883a 	mov	r21,zero
1000b628:	0005883a 	mov	r2,zero
1000b62c:	003e1006 	br	1000ae70 <__alt_data_end+0xf800ae70>
1000b630:	8880040c 	andi	r2,r17,16
1000b634:	1000321e 	bne	r2,zero,1000b700 <___vfiprintf_internal_r+0x124c>
1000b638:	8c40100c 	andi	r17,r17,64
1000b63c:	88008d26 	beq	r17,zero,1000b874 <___vfiprintf_internal_r+0x13c0>
1000b640:	d9402217 	ldw	r5,136(sp)
1000b644:	d8c02417 	ldw	r3,144(sp)
1000b648:	28800017 	ldw	r2,0(r5)
1000b64c:	29400104 	addi	r5,r5,4
1000b650:	d9402215 	stw	r5,136(sp)
1000b654:	10c0000d 	sth	r3,0(r2)
1000b658:	003bca06 	br	1000a584 <__alt_data_end+0xf800a584>
1000b65c:	8880100c 	andi	r2,r17,64
1000b660:	10003a26 	beq	r2,zero,1000b74c <___vfiprintf_internal_r+0x1298>
1000b664:	d8802217 	ldw	r2,136(sp)
1000b668:	14c0000f 	ldh	r19,0(r2)
1000b66c:	10800104 	addi	r2,r2,4
1000b670:	d8802215 	stw	r2,136(sp)
1000b674:	9829d7fa 	srai	r20,r19,31
1000b678:	a005883a 	mov	r2,r20
1000b67c:	003d8506 	br	1000ac94 <__alt_data_end+0xf800ac94>
1000b680:	8880100c 	andi	r2,r17,64
1000b684:	10002b26 	beq	r2,zero,1000b734 <___vfiprintf_internal_r+0x1280>
1000b688:	d8802217 	ldw	r2,136(sp)
1000b68c:	0029883a 	mov	r20,zero
1000b690:	14c0000b 	ldhu	r19,0(r2)
1000b694:	10800104 	addi	r2,r2,4
1000b698:	d8802215 	stw	r2,136(sp)
1000b69c:	003d5d06 	br	1000ac14 <__alt_data_end+0xf800ac14>
1000b6a0:	d9402017 	ldw	r5,128(sp)
1000b6a4:	d9002117 	ldw	r4,132(sp)
1000b6a8:	d9801a04 	addi	r6,sp,104
1000b6ac:	d8c02a15 	stw	r3,168(sp)
1000b6b0:	d9c02b15 	stw	r7,172(sp)
1000b6b4:	000a3a00 	call	1000a3a0 <__sprint_r.part.0>
1000b6b8:	d8c02a17 	ldw	r3,168(sp)
1000b6bc:	d9c02b17 	ldw	r7,172(sp)
1000b6c0:	103eb41e 	bne	r2,zero,1000b194 <__alt_data_end+0xf800b194>
1000b6c4:	d9001b17 	ldw	r4,108(sp)
1000b6c8:	d8801c17 	ldw	r2,112(sp)
1000b6cc:	d811883a 	mov	r8,sp
1000b6d0:	21400044 	addi	r5,r4,1
1000b6d4:	003e6706 	br	1000b074 <__alt_data_end+0xf800b074>
1000b6d8:	00bfffc4 	movi	r2,-1
1000b6dc:	003c4a06 	br	1000a808 <__alt_data_end+0xf800a808>
1000b6e0:	9805883a 	mov	r2,r19
1000b6e4:	003ee806 	br	1000b288 <__alt_data_end+0xf800b288>
1000b6e8:	d8c02217 	ldw	r3,136(sp)
1000b6ec:	0029883a 	mov	r20,zero
1000b6f0:	18800104 	addi	r2,r3,4
1000b6f4:	1cc0000b 	ldhu	r19,0(r3)
1000b6f8:	803f9e0e 	bge	r16,zero,1000b574 <__alt_data_end+0xf800b574>
1000b6fc:	003dd706 	br	1000ae5c <__alt_data_end+0xf800ae5c>
1000b700:	d8c02217 	ldw	r3,136(sp)
1000b704:	d9002417 	ldw	r4,144(sp)
1000b708:	18800017 	ldw	r2,0(r3)
1000b70c:	18c00104 	addi	r3,r3,4
1000b710:	d8c02215 	stw	r3,136(sp)
1000b714:	11000015 	stw	r4,0(r2)
1000b718:	003b9a06 	br	1000a584 <__alt_data_end+0xf800a584>
1000b71c:	d8c02217 	ldw	r3,136(sp)
1000b720:	0029883a 	mov	r20,zero
1000b724:	18800104 	addi	r2,r3,4
1000b728:	1cc0000b 	ldhu	r19,0(r3)
1000b72c:	803db20e 	bge	r16,zero,1000adf8 <__alt_data_end+0xf800adf8>
1000b730:	003fb906 	br	1000b618 <__alt_data_end+0xf800b618>
1000b734:	d9002217 	ldw	r4,136(sp)
1000b738:	0029883a 	mov	r20,zero
1000b73c:	24c00017 	ldw	r19,0(r4)
1000b740:	21000104 	addi	r4,r4,4
1000b744:	d9002215 	stw	r4,136(sp)
1000b748:	003d3206 	br	1000ac14 <__alt_data_end+0xf800ac14>
1000b74c:	d8c02217 	ldw	r3,136(sp)
1000b750:	1cc00017 	ldw	r19,0(r3)
1000b754:	18c00104 	addi	r3,r3,4
1000b758:	d8c02215 	stw	r3,136(sp)
1000b75c:	9829d7fa 	srai	r20,r19,31
1000b760:	a005883a 	mov	r2,r20
1000b764:	003d4b06 	br	1000ac94 <__alt_data_end+0xf800ac94>
1000b768:	0009883a 	mov	r4,zero
1000b76c:	01400044 	movi	r5,1
1000b770:	d811883a 	mov	r8,sp
1000b774:	003e4f06 	br	1000b0b4 <__alt_data_end+0xf800b0b4>
1000b778:	d8c02215 	stw	r3,136(sp)
1000b77c:	002b883a 	mov	r21,zero
1000b780:	003db806 	br	1000ae64 <__alt_data_end+0xf800ae64>
1000b784:	d811883a 	mov	r8,sp
1000b788:	003e9606 	br	1000b1e4 <__alt_data_end+0xf800b1e4>
1000b78c:	01040074 	movhi	r4,4097
1000b790:	2107c204 	addi	r4,r4,7944
1000b794:	d9002315 	stw	r4,140(sp)
1000b798:	003e6306 	br	1000b128 <__alt_data_end+0xf800b128>
1000b79c:	b0c00043 	ldbu	r3,1(r22)
1000b7a0:	8c400814 	ori	r17,r17,32
1000b7a4:	b5800044 	addi	r22,r22,1
1000b7a8:	18c03fcc 	andi	r3,r3,255
1000b7ac:	18c0201c 	xori	r3,r3,128
1000b7b0:	18ffe004 	addi	r3,r3,-128
1000b7b4:	003b9c06 	br	1000a628 <__alt_data_end+0xf800a628>
1000b7b8:	b809883a 	mov	r4,r23
1000b7bc:	da002a15 	stw	r8,168(sp)
1000b7c0:	00041000 	call	10004100 <strlen>
1000b7c4:	1029883a 	mov	r20,r2
1000b7c8:	dd401d83 	ldbu	r21,118(sp)
1000b7cc:	df002215 	stw	fp,136(sp)
1000b7d0:	0021883a 	mov	r16,zero
1000b7d4:	da002a17 	ldw	r8,168(sp)
1000b7d8:	003c3906 	br	1000a8c0 <__alt_data_end+0xf800a8c0>
1000b7dc:	d9402017 	ldw	r5,128(sp)
1000b7e0:	d9002117 	ldw	r4,132(sp)
1000b7e4:	d9801a04 	addi	r6,sp,104
1000b7e8:	000a3a00 	call	1000a3a0 <__sprint_r.part.0>
1000b7ec:	103e691e 	bne	r2,zero,1000b194 <__alt_data_end+0xf800b194>
1000b7f0:	d9001b17 	ldw	r4,108(sp)
1000b7f4:	d8801c17 	ldw	r2,112(sp)
1000b7f8:	d811883a 	mov	r8,sp
1000b7fc:	21400044 	addi	r5,r4,1
1000b800:	003e2e06 	br	1000b0bc <__alt_data_end+0xf800b0bc>
1000b804:	01040074 	movhi	r4,4097
1000b808:	2107c604 	addi	r4,r4,7960
1000b80c:	d9002315 	stw	r4,140(sp)
1000b810:	d9001b17 	ldw	r4,108(sp)
1000b814:	21000044 	addi	r4,r4,1
1000b818:	003c5e06 	br	1000a994 <__alt_data_end+0xf800a994>
1000b81c:	002b883a 	mov	r21,zero
1000b820:	00800084 	movi	r2,2
1000b824:	10803fcc 	andi	r2,r2,255
1000b828:	01000044 	movi	r4,1
1000b82c:	11002b26 	beq	r2,r4,1000b8dc <___vfiprintf_internal_r+0x1428>
1000b830:	01000084 	movi	r4,2
1000b834:	11002b1e 	bne	r2,r4,1000b8e4 <___vfiprintf_internal_r+0x1430>
1000b838:	1823883a 	mov	r17,r3
1000b83c:	003ee506 	br	1000b3d4 <__alt_data_end+0xf800b3d4>
1000b840:	8807883a 	mov	r3,r17
1000b844:	00800044 	movi	r2,1
1000b848:	003ff606 	br	1000b824 <__alt_data_end+0xf800b824>
1000b84c:	00800184 	movi	r2,6
1000b850:	1400012e 	bgeu	r2,r16,1000b858 <___vfiprintf_internal_r+0x13a4>
1000b854:	1021883a 	mov	r16,r2
1000b858:	8029883a 	mov	r20,r16
1000b85c:	8027883a 	mov	r19,r16
1000b860:	80002216 	blt	r16,zero,1000b8ec <___vfiprintf_internal_r+0x1438>
1000b864:	05c40074 	movhi	r23,4097
1000b868:	df002215 	stw	fp,136(sp)
1000b86c:	bdc76704 	addi	r23,r23,7580
1000b870:	003cfb06 	br	1000ac60 <__alt_data_end+0xf800ac60>
1000b874:	d9002217 	ldw	r4,136(sp)
1000b878:	d9402417 	ldw	r5,144(sp)
1000b87c:	20800017 	ldw	r2,0(r4)
1000b880:	21000104 	addi	r4,r4,4
1000b884:	d9002215 	stw	r4,136(sp)
1000b888:	11400015 	stw	r5,0(r2)
1000b88c:	003b3d06 	br	1000a584 <__alt_data_end+0xf800a584>
1000b890:	01440074 	movhi	r5,4097
1000b894:	2947c604 	addi	r5,r5,7960
1000b898:	d9402315 	stw	r5,140(sp)
1000b89c:	d9401b17 	ldw	r5,108(sp)
1000b8a0:	29400044 	addi	r5,r5,1
1000b8a4:	003e6d06 	br	1000b25c <__alt_data_end+0xf800b25c>
1000b8a8:	8029883a 	mov	r20,r16
1000b8ac:	dd401d83 	ldbu	r21,118(sp)
1000b8b0:	df002215 	stw	fp,136(sp)
1000b8b4:	0021883a 	mov	r16,zero
1000b8b8:	003c0106 	br	1000a8c0 <__alt_data_end+0xf800a8c0>
1000b8bc:	00c40074 	movhi	r3,4097
1000b8c0:	18c7c204 	addi	r3,r3,7944
1000b8c4:	d8c02315 	stw	r3,140(sp)
1000b8c8:	280d883a 	mov	r6,r5
1000b8cc:	003c6906 	br	1000aa74 <__alt_data_end+0xf800aa74>
1000b8d0:	802d883a 	mov	r22,r16
1000b8d4:	0021883a 	mov	r16,zero
1000b8d8:	003b5406 	br	1000a62c <__alt_data_end+0xf800a62c>
1000b8dc:	1823883a 	mov	r17,r3
1000b8e0:	003cf306 	br	1000acb0 <__alt_data_end+0xf800acb0>
1000b8e4:	1823883a 	mov	r17,r3
1000b8e8:	003cad06 	br	1000aba0 <__alt_data_end+0xf800aba0>
1000b8ec:	0027883a 	mov	r19,zero
1000b8f0:	003fdc06 	br	1000b864 <__alt_data_end+0xf800b864>
1000b8f4:	d9402217 	ldw	r5,136(sp)
1000b8f8:	8005883a 	mov	r2,r16
1000b8fc:	b0c00043 	ldbu	r3,1(r22)
1000b900:	2c000017 	ldw	r16,0(r5)
1000b904:	29000104 	addi	r4,r5,4
1000b908:	d9002215 	stw	r4,136(sp)
1000b90c:	102d883a 	mov	r22,r2
1000b910:	803fa50e 	bge	r16,zero,1000b7a8 <__alt_data_end+0xf800b7a8>
1000b914:	18c03fcc 	andi	r3,r3,255
1000b918:	18c0201c 	xori	r3,r3,128
1000b91c:	043fffc4 	movi	r16,-1
1000b920:	18ffe004 	addi	r3,r3,-128
1000b924:	003b4006 	br	1000a628 <__alt_data_end+0xf800a628>
1000b928:	d9402303 	ldbu	r5,140(sp)
1000b92c:	d9401d85 	stb	r5,118(sp)
1000b930:	003cae06 	br	1000abec <__alt_data_end+0xf800abec>
1000b934:	d8c02303 	ldbu	r3,140(sp)
1000b938:	d8c01d85 	stb	r3,118(sp)
1000b93c:	003d1406 	br	1000ad90 <__alt_data_end+0xf800ad90>
1000b940:	d8c02303 	ldbu	r3,140(sp)
1000b944:	d8c01d85 	stb	r3,118(sp)
1000b948:	003cca06 	br	1000ac74 <__alt_data_end+0xf800ac74>
1000b94c:	8880004c 	andi	r2,r17,1
1000b950:	002b883a 	mov	r21,zero
1000b954:	10000526 	beq	r2,zero,1000b96c <___vfiprintf_internal_r+0x14b8>
1000b958:	00800c04 	movi	r2,48
1000b95c:	d88019c5 	stb	r2,103(sp)
1000b960:	dd002817 	ldw	r20,160(sp)
1000b964:	ddc019c4 	addi	r23,sp,103
1000b968:	003bd506 	br	1000a8c0 <__alt_data_end+0xf800a8c0>
1000b96c:	0029883a 	mov	r20,zero
1000b970:	ddc01a04 	addi	r23,sp,104
1000b974:	003bd206 	br	1000a8c0 <__alt_data_end+0xf800a8c0>
1000b978:	d9002303 	ldbu	r4,140(sp)
1000b97c:	d9001d85 	stb	r4,118(sp)
1000b980:	003da606 	br	1000b01c <__alt_data_end+0xf800b01c>
1000b984:	d8c02303 	ldbu	r3,140(sp)
1000b988:	d8c01d85 	stb	r3,118(sp)
1000b98c:	003c7606 	br	1000ab68 <__alt_data_end+0xf800ab68>
1000b990:	d8c02303 	ldbu	r3,140(sp)
1000b994:	d8c01d85 	stb	r3,118(sp)
1000b998:	003c6506 	br	1000ab30 <__alt_data_end+0xf800ab30>
1000b99c:	d9002303 	ldbu	r4,140(sp)
1000b9a0:	d9001d85 	stb	r4,118(sp)
1000b9a4:	003d3d06 	br	1000ae9c <__alt_data_end+0xf800ae9c>
1000b9a8:	d8c02303 	ldbu	r3,140(sp)
1000b9ac:	d8c01d85 	stb	r3,118(sp)
1000b9b0:	003d1d06 	br	1000ae28 <__alt_data_end+0xf800ae28>
1000b9b4:	d8c02303 	ldbu	r3,140(sp)
1000b9b8:	d8c01d85 	stb	r3,118(sp)
1000b9bc:	003d0306 	br	1000adcc <__alt_data_end+0xf800adcc>

1000b9c0 <__vfiprintf_internal>:
1000b9c0:	00840074 	movhi	r2,4097
1000b9c4:	108ec604 	addi	r2,r2,15128
1000b9c8:	300f883a 	mov	r7,r6
1000b9cc:	280d883a 	mov	r6,r5
1000b9d0:	200b883a 	mov	r5,r4
1000b9d4:	11000017 	ldw	r4,0(r2)
1000b9d8:	000a4b41 	jmpi	1000a4b4 <___vfiprintf_internal_r>

1000b9dc <__sbprintf>:
1000b9dc:	2880030b 	ldhu	r2,12(r5)
1000b9e0:	2ac01917 	ldw	r11,100(r5)
1000b9e4:	2a80038b 	ldhu	r10,14(r5)
1000b9e8:	2a400717 	ldw	r9,28(r5)
1000b9ec:	2a000917 	ldw	r8,36(r5)
1000b9f0:	defee204 	addi	sp,sp,-1144
1000b9f4:	00c10004 	movi	r3,1024
1000b9f8:	dc011a15 	stw	r16,1128(sp)
1000b9fc:	10bfff4c 	andi	r2,r2,65533
1000ba00:	2821883a 	mov	r16,r5
1000ba04:	d8cb883a 	add	r5,sp,r3
1000ba08:	dc811c15 	stw	r18,1136(sp)
1000ba0c:	dc411b15 	stw	r17,1132(sp)
1000ba10:	dfc11d15 	stw	ra,1140(sp)
1000ba14:	2025883a 	mov	r18,r4
1000ba18:	d881030d 	sth	r2,1036(sp)
1000ba1c:	dac11915 	stw	r11,1124(sp)
1000ba20:	da81038d 	sth	r10,1038(sp)
1000ba24:	da410715 	stw	r9,1052(sp)
1000ba28:	da010915 	stw	r8,1060(sp)
1000ba2c:	dec10015 	stw	sp,1024(sp)
1000ba30:	dec10415 	stw	sp,1040(sp)
1000ba34:	d8c10215 	stw	r3,1032(sp)
1000ba38:	d8c10515 	stw	r3,1044(sp)
1000ba3c:	d8010615 	stw	zero,1048(sp)
1000ba40:	000a4b40 	call	1000a4b4 <___vfiprintf_internal_r>
1000ba44:	1023883a 	mov	r17,r2
1000ba48:	10000416 	blt	r2,zero,1000ba5c <__sbprintf+0x80>
1000ba4c:	d9410004 	addi	r5,sp,1024
1000ba50:	9009883a 	mov	r4,r18
1000ba54:	00014d00 	call	100014d0 <_fflush_r>
1000ba58:	10000d1e 	bne	r2,zero,1000ba90 <__sbprintf+0xb4>
1000ba5c:	d881030b 	ldhu	r2,1036(sp)
1000ba60:	1080100c 	andi	r2,r2,64
1000ba64:	10000326 	beq	r2,zero,1000ba74 <__sbprintf+0x98>
1000ba68:	8080030b 	ldhu	r2,12(r16)
1000ba6c:	10801014 	ori	r2,r2,64
1000ba70:	8080030d 	sth	r2,12(r16)
1000ba74:	8805883a 	mov	r2,r17
1000ba78:	dfc11d17 	ldw	ra,1140(sp)
1000ba7c:	dc811c17 	ldw	r18,1136(sp)
1000ba80:	dc411b17 	ldw	r17,1132(sp)
1000ba84:	dc011a17 	ldw	r16,1128(sp)
1000ba88:	dec11e04 	addi	sp,sp,1144
1000ba8c:	f800283a 	ret
1000ba90:	047fffc4 	movi	r17,-1
1000ba94:	003ff106 	br	1000ba5c <__alt_data_end+0xf800ba5c>

1000ba98 <__swbuf_r>:
1000ba98:	defffb04 	addi	sp,sp,-20
1000ba9c:	dcc00315 	stw	r19,12(sp)
1000baa0:	dc800215 	stw	r18,8(sp)
1000baa4:	dc000015 	stw	r16,0(sp)
1000baa8:	dfc00415 	stw	ra,16(sp)
1000baac:	dc400115 	stw	r17,4(sp)
1000bab0:	2025883a 	mov	r18,r4
1000bab4:	2827883a 	mov	r19,r5
1000bab8:	3021883a 	mov	r16,r6
1000babc:	20000226 	beq	r4,zero,1000bac8 <__swbuf_r+0x30>
1000bac0:	20800e17 	ldw	r2,56(r4)
1000bac4:	10004226 	beq	r2,zero,1000bbd0 <__swbuf_r+0x138>
1000bac8:	80800617 	ldw	r2,24(r16)
1000bacc:	8100030b 	ldhu	r4,12(r16)
1000bad0:	80800215 	stw	r2,8(r16)
1000bad4:	2080020c 	andi	r2,r4,8
1000bad8:	10003626 	beq	r2,zero,1000bbb4 <__swbuf_r+0x11c>
1000badc:	80c00417 	ldw	r3,16(r16)
1000bae0:	18003426 	beq	r3,zero,1000bbb4 <__swbuf_r+0x11c>
1000bae4:	2088000c 	andi	r2,r4,8192
1000bae8:	9c403fcc 	andi	r17,r19,255
1000baec:	10001a26 	beq	r2,zero,1000bb58 <__swbuf_r+0xc0>
1000baf0:	80800017 	ldw	r2,0(r16)
1000baf4:	81000517 	ldw	r4,20(r16)
1000baf8:	10c7c83a 	sub	r3,r2,r3
1000bafc:	1900200e 	bge	r3,r4,1000bb80 <__swbuf_r+0xe8>
1000bb00:	18c00044 	addi	r3,r3,1
1000bb04:	81000217 	ldw	r4,8(r16)
1000bb08:	11400044 	addi	r5,r2,1
1000bb0c:	81400015 	stw	r5,0(r16)
1000bb10:	213fffc4 	addi	r4,r4,-1
1000bb14:	81000215 	stw	r4,8(r16)
1000bb18:	14c00005 	stb	r19,0(r2)
1000bb1c:	80800517 	ldw	r2,20(r16)
1000bb20:	10c01e26 	beq	r2,r3,1000bb9c <__swbuf_r+0x104>
1000bb24:	8080030b 	ldhu	r2,12(r16)
1000bb28:	1080004c 	andi	r2,r2,1
1000bb2c:	10000226 	beq	r2,zero,1000bb38 <__swbuf_r+0xa0>
1000bb30:	00800284 	movi	r2,10
1000bb34:	88801926 	beq	r17,r2,1000bb9c <__swbuf_r+0x104>
1000bb38:	8805883a 	mov	r2,r17
1000bb3c:	dfc00417 	ldw	ra,16(sp)
1000bb40:	dcc00317 	ldw	r19,12(sp)
1000bb44:	dc800217 	ldw	r18,8(sp)
1000bb48:	dc400117 	ldw	r17,4(sp)
1000bb4c:	dc000017 	ldw	r16,0(sp)
1000bb50:	dec00504 	addi	sp,sp,20
1000bb54:	f800283a 	ret
1000bb58:	81401917 	ldw	r5,100(r16)
1000bb5c:	00b7ffc4 	movi	r2,-8193
1000bb60:	21080014 	ori	r4,r4,8192
1000bb64:	2884703a 	and	r2,r5,r2
1000bb68:	80801915 	stw	r2,100(r16)
1000bb6c:	80800017 	ldw	r2,0(r16)
1000bb70:	8100030d 	sth	r4,12(r16)
1000bb74:	81000517 	ldw	r4,20(r16)
1000bb78:	10c7c83a 	sub	r3,r2,r3
1000bb7c:	193fe016 	blt	r3,r4,1000bb00 <__alt_data_end+0xf800bb00>
1000bb80:	800b883a 	mov	r5,r16
1000bb84:	9009883a 	mov	r4,r18
1000bb88:	00014d00 	call	100014d0 <_fflush_r>
1000bb8c:	1000071e 	bne	r2,zero,1000bbac <__swbuf_r+0x114>
1000bb90:	80800017 	ldw	r2,0(r16)
1000bb94:	00c00044 	movi	r3,1
1000bb98:	003fda06 	br	1000bb04 <__alt_data_end+0xf800bb04>
1000bb9c:	800b883a 	mov	r5,r16
1000bba0:	9009883a 	mov	r4,r18
1000bba4:	00014d00 	call	100014d0 <_fflush_r>
1000bba8:	103fe326 	beq	r2,zero,1000bb38 <__alt_data_end+0xf800bb38>
1000bbac:	00bfffc4 	movi	r2,-1
1000bbb0:	003fe206 	br	1000bb3c <__alt_data_end+0xf800bb3c>
1000bbb4:	800b883a 	mov	r5,r16
1000bbb8:	9009883a 	mov	r4,r18
1000bbbc:	00068440 	call	10006844 <__swsetup_r>
1000bbc0:	103ffa1e 	bne	r2,zero,1000bbac <__alt_data_end+0xf800bbac>
1000bbc4:	8100030b 	ldhu	r4,12(r16)
1000bbc8:	80c00417 	ldw	r3,16(r16)
1000bbcc:	003fc506 	br	1000bae4 <__alt_data_end+0xf800bae4>
1000bbd0:	00019b40 	call	100019b4 <__sinit>
1000bbd4:	003fbc06 	br	1000bac8 <__alt_data_end+0xf800bac8>

1000bbd8 <__swbuf>:
1000bbd8:	00840074 	movhi	r2,4097
1000bbdc:	108ec604 	addi	r2,r2,15128
1000bbe0:	280d883a 	mov	r6,r5
1000bbe4:	200b883a 	mov	r5,r4
1000bbe8:	11000017 	ldw	r4,0(r2)
1000bbec:	000ba981 	jmpi	1000ba98 <__swbuf_r>

1000bbf0 <_calloc_r>:
1000bbf0:	defffe04 	addi	sp,sp,-8
1000bbf4:	2805883a 	mov	r2,r5
1000bbf8:	dc000015 	stw	r16,0(sp)
1000bbfc:	300b883a 	mov	r5,r6
1000bc00:	2021883a 	mov	r16,r4
1000bc04:	1009883a 	mov	r4,r2
1000bc08:	dfc00115 	stw	ra,4(sp)
1000bc0c:	00010d40 	call	100010d4 <__mulsi3>
1000bc10:	100b883a 	mov	r5,r2
1000bc14:	8009883a 	mov	r4,r16
1000bc18:	0002ba00 	call	10002ba0 <_malloc_r>
1000bc1c:	10002926 	beq	r2,zero,1000bcc4 <_calloc_r+0xd4>
1000bc20:	11bfff17 	ldw	r6,-4(r2)
1000bc24:	1021883a 	mov	r16,r2
1000bc28:	00bfff04 	movi	r2,-4
1000bc2c:	308c703a 	and	r6,r6,r2
1000bc30:	00c00904 	movi	r3,36
1000bc34:	308d883a 	add	r6,r6,r2
1000bc38:	19801636 	bltu	r3,r6,1000bc94 <_calloc_r+0xa4>
1000bc3c:	008004c4 	movi	r2,19
1000bc40:	11800b2e 	bgeu	r2,r6,1000bc70 <_calloc_r+0x80>
1000bc44:	80000015 	stw	zero,0(r16)
1000bc48:	80000115 	stw	zero,4(r16)
1000bc4c:	008006c4 	movi	r2,27
1000bc50:	11801a2e 	bgeu	r2,r6,1000bcbc <_calloc_r+0xcc>
1000bc54:	80000215 	stw	zero,8(r16)
1000bc58:	80000315 	stw	zero,12(r16)
1000bc5c:	30c0151e 	bne	r6,r3,1000bcb4 <_calloc_r+0xc4>
1000bc60:	80000415 	stw	zero,16(r16)
1000bc64:	80800604 	addi	r2,r16,24
1000bc68:	80000515 	stw	zero,20(r16)
1000bc6c:	00000106 	br	1000bc74 <_calloc_r+0x84>
1000bc70:	8005883a 	mov	r2,r16
1000bc74:	10000015 	stw	zero,0(r2)
1000bc78:	10000115 	stw	zero,4(r2)
1000bc7c:	10000215 	stw	zero,8(r2)
1000bc80:	8005883a 	mov	r2,r16
1000bc84:	dfc00117 	ldw	ra,4(sp)
1000bc88:	dc000017 	ldw	r16,0(sp)
1000bc8c:	dec00204 	addi	sp,sp,8
1000bc90:	f800283a 	ret
1000bc94:	000b883a 	mov	r5,zero
1000bc98:	8009883a 	mov	r4,r16
1000bc9c:	00034f40 	call	100034f4 <memset>
1000bca0:	8005883a 	mov	r2,r16
1000bca4:	dfc00117 	ldw	ra,4(sp)
1000bca8:	dc000017 	ldw	r16,0(sp)
1000bcac:	dec00204 	addi	sp,sp,8
1000bcb0:	f800283a 	ret
1000bcb4:	80800404 	addi	r2,r16,16
1000bcb8:	003fee06 	br	1000bc74 <__alt_data_end+0xf800bc74>
1000bcbc:	80800204 	addi	r2,r16,8
1000bcc0:	003fec06 	br	1000bc74 <__alt_data_end+0xf800bc74>
1000bcc4:	0005883a 	mov	r2,zero
1000bcc8:	003fee06 	br	1000bc84 <__alt_data_end+0xf800bc84>

1000bccc <__fputwc>:
1000bccc:	defff804 	addi	sp,sp,-32
1000bcd0:	dcc00415 	stw	r19,16(sp)
1000bcd4:	dc800315 	stw	r18,12(sp)
1000bcd8:	dc000115 	stw	r16,4(sp)
1000bcdc:	dfc00715 	stw	ra,28(sp)
1000bce0:	dd400615 	stw	r21,24(sp)
1000bce4:	dd000515 	stw	r20,20(sp)
1000bce8:	dc400215 	stw	r17,8(sp)
1000bcec:	2027883a 	mov	r19,r4
1000bcf0:	2825883a 	mov	r18,r5
1000bcf4:	3021883a 	mov	r16,r6
1000bcf8:	00089d80 	call	100089d8 <__locale_mb_cur_max>
1000bcfc:	00c00044 	movi	r3,1
1000bd00:	10c03e26 	beq	r2,r3,1000bdfc <__fputwc+0x130>
1000bd04:	81c01704 	addi	r7,r16,92
1000bd08:	900d883a 	mov	r6,r18
1000bd0c:	d80b883a 	mov	r5,sp
1000bd10:	9809883a 	mov	r4,r19
1000bd14:	000bed40 	call	1000bed4 <_wcrtomb_r>
1000bd18:	1029883a 	mov	r20,r2
1000bd1c:	00bfffc4 	movi	r2,-1
1000bd20:	a0802026 	beq	r20,r2,1000bda4 <__fputwc+0xd8>
1000bd24:	d9400003 	ldbu	r5,0(sp)
1000bd28:	a0001c26 	beq	r20,zero,1000bd9c <__fputwc+0xd0>
1000bd2c:	0023883a 	mov	r17,zero
1000bd30:	05400284 	movi	r21,10
1000bd34:	00000906 	br	1000bd5c <__fputwc+0x90>
1000bd38:	80800017 	ldw	r2,0(r16)
1000bd3c:	11400005 	stb	r5,0(r2)
1000bd40:	80c00017 	ldw	r3,0(r16)
1000bd44:	18c00044 	addi	r3,r3,1
1000bd48:	80c00015 	stw	r3,0(r16)
1000bd4c:	8c400044 	addi	r17,r17,1
1000bd50:	dc45883a 	add	r2,sp,r17
1000bd54:	8d00112e 	bgeu	r17,r20,1000bd9c <__fputwc+0xd0>
1000bd58:	11400003 	ldbu	r5,0(r2)
1000bd5c:	80c00217 	ldw	r3,8(r16)
1000bd60:	18ffffc4 	addi	r3,r3,-1
1000bd64:	80c00215 	stw	r3,8(r16)
1000bd68:	183ff30e 	bge	r3,zero,1000bd38 <__alt_data_end+0xf800bd38>
1000bd6c:	80800617 	ldw	r2,24(r16)
1000bd70:	18801916 	blt	r3,r2,1000bdd8 <__fputwc+0x10c>
1000bd74:	80800017 	ldw	r2,0(r16)
1000bd78:	11400005 	stb	r5,0(r2)
1000bd7c:	80800017 	ldw	r2,0(r16)
1000bd80:	10c00003 	ldbu	r3,0(r2)
1000bd84:	10800044 	addi	r2,r2,1
1000bd88:	1d402326 	beq	r3,r21,1000be18 <__fputwc+0x14c>
1000bd8c:	80800015 	stw	r2,0(r16)
1000bd90:	8c400044 	addi	r17,r17,1
1000bd94:	dc45883a 	add	r2,sp,r17
1000bd98:	8d3fef36 	bltu	r17,r20,1000bd58 <__alt_data_end+0xf800bd58>
1000bd9c:	9005883a 	mov	r2,r18
1000bda0:	00000406 	br	1000bdb4 <__fputwc+0xe8>
1000bda4:	80c0030b 	ldhu	r3,12(r16)
1000bda8:	a005883a 	mov	r2,r20
1000bdac:	18c01014 	ori	r3,r3,64
1000bdb0:	80c0030d 	sth	r3,12(r16)
1000bdb4:	dfc00717 	ldw	ra,28(sp)
1000bdb8:	dd400617 	ldw	r21,24(sp)
1000bdbc:	dd000517 	ldw	r20,20(sp)
1000bdc0:	dcc00417 	ldw	r19,16(sp)
1000bdc4:	dc800317 	ldw	r18,12(sp)
1000bdc8:	dc400217 	ldw	r17,8(sp)
1000bdcc:	dc000117 	ldw	r16,4(sp)
1000bdd0:	dec00804 	addi	sp,sp,32
1000bdd4:	f800283a 	ret
1000bdd8:	800d883a 	mov	r6,r16
1000bddc:	29403fcc 	andi	r5,r5,255
1000bde0:	9809883a 	mov	r4,r19
1000bde4:	000ba980 	call	1000ba98 <__swbuf_r>
1000bde8:	10bfffe0 	cmpeqi	r2,r2,-1
1000bdec:	10803fcc 	andi	r2,r2,255
1000bdf0:	103fd626 	beq	r2,zero,1000bd4c <__alt_data_end+0xf800bd4c>
1000bdf4:	00bfffc4 	movi	r2,-1
1000bdf8:	003fee06 	br	1000bdb4 <__alt_data_end+0xf800bdb4>
1000bdfc:	90ffffc4 	addi	r3,r18,-1
1000be00:	01003f84 	movi	r4,254
1000be04:	20ffbf36 	bltu	r4,r3,1000bd04 <__alt_data_end+0xf800bd04>
1000be08:	900b883a 	mov	r5,r18
1000be0c:	dc800005 	stb	r18,0(sp)
1000be10:	1029883a 	mov	r20,r2
1000be14:	003fc506 	br	1000bd2c <__alt_data_end+0xf800bd2c>
1000be18:	800d883a 	mov	r6,r16
1000be1c:	a80b883a 	mov	r5,r21
1000be20:	9809883a 	mov	r4,r19
1000be24:	000ba980 	call	1000ba98 <__swbuf_r>
1000be28:	10bfffe0 	cmpeqi	r2,r2,-1
1000be2c:	003fef06 	br	1000bdec <__alt_data_end+0xf800bdec>

1000be30 <_fputwc_r>:
1000be30:	3080030b 	ldhu	r2,12(r6)
1000be34:	10c8000c 	andi	r3,r2,8192
1000be38:	1800051e 	bne	r3,zero,1000be50 <_fputwc_r+0x20>
1000be3c:	30c01917 	ldw	r3,100(r6)
1000be40:	10880014 	ori	r2,r2,8192
1000be44:	3080030d 	sth	r2,12(r6)
1000be48:	18880014 	ori	r2,r3,8192
1000be4c:	30801915 	stw	r2,100(r6)
1000be50:	000bccc1 	jmpi	1000bccc <__fputwc>

1000be54 <fputwc>:
1000be54:	00840074 	movhi	r2,4097
1000be58:	defffc04 	addi	sp,sp,-16
1000be5c:	108ec604 	addi	r2,r2,15128
1000be60:	dc000115 	stw	r16,4(sp)
1000be64:	14000017 	ldw	r16,0(r2)
1000be68:	dc400215 	stw	r17,8(sp)
1000be6c:	dfc00315 	stw	ra,12(sp)
1000be70:	2023883a 	mov	r17,r4
1000be74:	80000226 	beq	r16,zero,1000be80 <fputwc+0x2c>
1000be78:	80800e17 	ldw	r2,56(r16)
1000be7c:	10001026 	beq	r2,zero,1000bec0 <fputwc+0x6c>
1000be80:	2880030b 	ldhu	r2,12(r5)
1000be84:	10c8000c 	andi	r3,r2,8192
1000be88:	1800051e 	bne	r3,zero,1000bea0 <fputwc+0x4c>
1000be8c:	28c01917 	ldw	r3,100(r5)
1000be90:	10880014 	ori	r2,r2,8192
1000be94:	2880030d 	sth	r2,12(r5)
1000be98:	18880014 	ori	r2,r3,8192
1000be9c:	28801915 	stw	r2,100(r5)
1000bea0:	280d883a 	mov	r6,r5
1000bea4:	8009883a 	mov	r4,r16
1000bea8:	880b883a 	mov	r5,r17
1000beac:	dfc00317 	ldw	ra,12(sp)
1000beb0:	dc400217 	ldw	r17,8(sp)
1000beb4:	dc000117 	ldw	r16,4(sp)
1000beb8:	dec00404 	addi	sp,sp,16
1000bebc:	000bccc1 	jmpi	1000bccc <__fputwc>
1000bec0:	8009883a 	mov	r4,r16
1000bec4:	d9400015 	stw	r5,0(sp)
1000bec8:	00019b40 	call	100019b4 <__sinit>
1000becc:	d9400017 	ldw	r5,0(sp)
1000bed0:	003feb06 	br	1000be80 <__alt_data_end+0xf800be80>

1000bed4 <_wcrtomb_r>:
1000bed4:	defff604 	addi	sp,sp,-40
1000bed8:	00840074 	movhi	r2,4097
1000bedc:	dc800815 	stw	r18,32(sp)
1000bee0:	dc400715 	stw	r17,28(sp)
1000bee4:	dc000615 	stw	r16,24(sp)
1000bee8:	108eca04 	addi	r2,r2,15144
1000beec:	dfc00915 	stw	ra,36(sp)
1000bef0:	2021883a 	mov	r16,r4
1000bef4:	3823883a 	mov	r17,r7
1000bef8:	14800017 	ldw	r18,0(r2)
1000befc:	28001426 	beq	r5,zero,1000bf50 <_wcrtomb_r+0x7c>
1000bf00:	d9400415 	stw	r5,16(sp)
1000bf04:	d9800515 	stw	r6,20(sp)
1000bf08:	00089cc0 	call	100089cc <__locale_charset>
1000bf0c:	d9800517 	ldw	r6,20(sp)
1000bf10:	d9400417 	ldw	r5,16(sp)
1000bf14:	100f883a 	mov	r7,r2
1000bf18:	dc400015 	stw	r17,0(sp)
1000bf1c:	8009883a 	mov	r4,r16
1000bf20:	903ee83a 	callr	r18
1000bf24:	00ffffc4 	movi	r3,-1
1000bf28:	10c0031e 	bne	r2,r3,1000bf38 <_wcrtomb_r+0x64>
1000bf2c:	88000015 	stw	zero,0(r17)
1000bf30:	00c02284 	movi	r3,138
1000bf34:	80c00015 	stw	r3,0(r16)
1000bf38:	dfc00917 	ldw	ra,36(sp)
1000bf3c:	dc800817 	ldw	r18,32(sp)
1000bf40:	dc400717 	ldw	r17,28(sp)
1000bf44:	dc000617 	ldw	r16,24(sp)
1000bf48:	dec00a04 	addi	sp,sp,40
1000bf4c:	f800283a 	ret
1000bf50:	00089cc0 	call	100089cc <__locale_charset>
1000bf54:	100f883a 	mov	r7,r2
1000bf58:	dc400015 	stw	r17,0(sp)
1000bf5c:	000d883a 	mov	r6,zero
1000bf60:	d9400104 	addi	r5,sp,4
1000bf64:	8009883a 	mov	r4,r16
1000bf68:	903ee83a 	callr	r18
1000bf6c:	003fed06 	br	1000bf24 <__alt_data_end+0xf800bf24>

1000bf70 <wcrtomb>:
1000bf70:	defff604 	addi	sp,sp,-40
1000bf74:	00840074 	movhi	r2,4097
1000bf78:	dc800615 	stw	r18,24(sp)
1000bf7c:	dc400515 	stw	r17,20(sp)
1000bf80:	108ec604 	addi	r2,r2,15128
1000bf84:	dfc00915 	stw	ra,36(sp)
1000bf88:	dd000815 	stw	r20,32(sp)
1000bf8c:	dcc00715 	stw	r19,28(sp)
1000bf90:	dc000415 	stw	r16,16(sp)
1000bf94:	3025883a 	mov	r18,r6
1000bf98:	14400017 	ldw	r17,0(r2)
1000bf9c:	20001926 	beq	r4,zero,1000c004 <wcrtomb+0x94>
1000bfa0:	00840074 	movhi	r2,4097
1000bfa4:	108eca04 	addi	r2,r2,15144
1000bfa8:	15000017 	ldw	r20,0(r2)
1000bfac:	2021883a 	mov	r16,r4
1000bfb0:	2827883a 	mov	r19,r5
1000bfb4:	00089cc0 	call	100089cc <__locale_charset>
1000bfb8:	100f883a 	mov	r7,r2
1000bfbc:	dc800015 	stw	r18,0(sp)
1000bfc0:	980d883a 	mov	r6,r19
1000bfc4:	800b883a 	mov	r5,r16
1000bfc8:	8809883a 	mov	r4,r17
1000bfcc:	a03ee83a 	callr	r20
1000bfd0:	00ffffc4 	movi	r3,-1
1000bfd4:	10c0031e 	bne	r2,r3,1000bfe4 <wcrtomb+0x74>
1000bfd8:	90000015 	stw	zero,0(r18)
1000bfdc:	00c02284 	movi	r3,138
1000bfe0:	88c00015 	stw	r3,0(r17)
1000bfe4:	dfc00917 	ldw	ra,36(sp)
1000bfe8:	dd000817 	ldw	r20,32(sp)
1000bfec:	dcc00717 	ldw	r19,28(sp)
1000bff0:	dc800617 	ldw	r18,24(sp)
1000bff4:	dc400517 	ldw	r17,20(sp)
1000bff8:	dc000417 	ldw	r16,16(sp)
1000bffc:	dec00a04 	addi	sp,sp,40
1000c000:	f800283a 	ret
1000c004:	00840074 	movhi	r2,4097
1000c008:	108eca04 	addi	r2,r2,15144
1000c00c:	14000017 	ldw	r16,0(r2)
1000c010:	00089cc0 	call	100089cc <__locale_charset>
1000c014:	100f883a 	mov	r7,r2
1000c018:	dc800015 	stw	r18,0(sp)
1000c01c:	000d883a 	mov	r6,zero
1000c020:	d9400104 	addi	r5,sp,4
1000c024:	8809883a 	mov	r4,r17
1000c028:	803ee83a 	callr	r16
1000c02c:	003fe806 	br	1000bfd0 <__alt_data_end+0xf800bfd0>

1000c030 <__ascii_wctomb>:
1000c030:	28000526 	beq	r5,zero,1000c048 <__ascii_wctomb+0x18>
1000c034:	00803fc4 	movi	r2,255
1000c038:	11800536 	bltu	r2,r6,1000c050 <__ascii_wctomb+0x20>
1000c03c:	29800005 	stb	r6,0(r5)
1000c040:	00800044 	movi	r2,1
1000c044:	f800283a 	ret
1000c048:	0005883a 	mov	r2,zero
1000c04c:	f800283a 	ret
1000c050:	00802284 	movi	r2,138
1000c054:	20800015 	stw	r2,0(r4)
1000c058:	00bfffc4 	movi	r2,-1
1000c05c:	f800283a 	ret

1000c060 <_wctomb_r>:
1000c060:	00840074 	movhi	r2,4097
1000c064:	defff904 	addi	sp,sp,-28
1000c068:	108eca04 	addi	r2,r2,15144
1000c06c:	dfc00615 	stw	ra,24(sp)
1000c070:	dc400515 	stw	r17,20(sp)
1000c074:	dc000415 	stw	r16,16(sp)
1000c078:	3823883a 	mov	r17,r7
1000c07c:	14000017 	ldw	r16,0(r2)
1000c080:	d9000115 	stw	r4,4(sp)
1000c084:	d9400215 	stw	r5,8(sp)
1000c088:	d9800315 	stw	r6,12(sp)
1000c08c:	00089cc0 	call	100089cc <__locale_charset>
1000c090:	d9800317 	ldw	r6,12(sp)
1000c094:	d9400217 	ldw	r5,8(sp)
1000c098:	d9000117 	ldw	r4,4(sp)
1000c09c:	100f883a 	mov	r7,r2
1000c0a0:	dc400015 	stw	r17,0(sp)
1000c0a4:	803ee83a 	callr	r16
1000c0a8:	dfc00617 	ldw	ra,24(sp)
1000c0ac:	dc400517 	ldw	r17,20(sp)
1000c0b0:	dc000417 	ldw	r16,16(sp)
1000c0b4:	dec00704 	addi	sp,sp,28
1000c0b8:	f800283a 	ret

1000c0bc <__udivdi3>:
1000c0bc:	defff404 	addi	sp,sp,-48
1000c0c0:	dcc00515 	stw	r19,20(sp)
1000c0c4:	dc000215 	stw	r16,8(sp)
1000c0c8:	dfc00b15 	stw	ra,44(sp)
1000c0cc:	df000a15 	stw	fp,40(sp)
1000c0d0:	ddc00915 	stw	r23,36(sp)
1000c0d4:	dd800815 	stw	r22,32(sp)
1000c0d8:	dd400715 	stw	r21,28(sp)
1000c0dc:	dd000615 	stw	r20,24(sp)
1000c0e0:	dc800415 	stw	r18,16(sp)
1000c0e4:	dc400315 	stw	r17,12(sp)
1000c0e8:	2027883a 	mov	r19,r4
1000c0ec:	2821883a 	mov	r16,r5
1000c0f0:	3800461e 	bne	r7,zero,1000c20c <__udivdi3+0x150>
1000c0f4:	3023883a 	mov	r17,r6
1000c0f8:	2025883a 	mov	r18,r4
1000c0fc:	2980572e 	bgeu	r5,r6,1000c25c <__udivdi3+0x1a0>
1000c100:	00bfffd4 	movui	r2,65535
1000c104:	282d883a 	mov	r22,r5
1000c108:	1180b236 	bltu	r2,r6,1000c3d4 <__udivdi3+0x318>
1000c10c:	00803fc4 	movi	r2,255
1000c110:	1185803a 	cmpltu	r2,r2,r6
1000c114:	100490fa 	slli	r2,r2,3
1000c118:	3086d83a 	srl	r3,r6,r2
1000c11c:	01040074 	movhi	r4,4097
1000c120:	2107ca04 	addi	r4,r4,7976
1000c124:	20c7883a 	add	r3,r4,r3
1000c128:	18c00003 	ldbu	r3,0(r3)
1000c12c:	1885883a 	add	r2,r3,r2
1000c130:	00c00804 	movi	r3,32
1000c134:	1887c83a 	sub	r3,r3,r2
1000c138:	18000526 	beq	r3,zero,1000c150 <__udivdi3+0x94>
1000c13c:	80e0983a 	sll	r16,r16,r3
1000c140:	9884d83a 	srl	r2,r19,r2
1000c144:	30e2983a 	sll	r17,r6,r3
1000c148:	98e4983a 	sll	r18,r19,r3
1000c14c:	142cb03a 	or	r22,r2,r16
1000c150:	882ad43a 	srli	r21,r17,16
1000c154:	b009883a 	mov	r4,r22
1000c158:	8d3fffcc 	andi	r20,r17,65535
1000c15c:	a80b883a 	mov	r5,r21
1000c160:	000107c0 	call	1000107c <__umodsi3>
1000c164:	b009883a 	mov	r4,r22
1000c168:	a80b883a 	mov	r5,r21
1000c16c:	1027883a 	mov	r19,r2
1000c170:	00010180 	call	10001018 <__udivsi3>
1000c174:	100b883a 	mov	r5,r2
1000c178:	a009883a 	mov	r4,r20
1000c17c:	102d883a 	mov	r22,r2
1000c180:	00010d40 	call	100010d4 <__mulsi3>
1000c184:	9826943a 	slli	r19,r19,16
1000c188:	9006d43a 	srli	r3,r18,16
1000c18c:	1cc6b03a 	or	r3,r3,r19
1000c190:	1880052e 	bgeu	r3,r2,1000c1a8 <__udivdi3+0xec>
1000c194:	1c47883a 	add	r3,r3,r17
1000c198:	b13fffc4 	addi	r4,r22,-1
1000c19c:	1c400136 	bltu	r3,r17,1000c1a4 <__udivdi3+0xe8>
1000c1a0:	18814236 	bltu	r3,r2,1000c6ac <__udivdi3+0x5f0>
1000c1a4:	202d883a 	mov	r22,r4
1000c1a8:	18a1c83a 	sub	r16,r3,r2
1000c1ac:	8009883a 	mov	r4,r16
1000c1b0:	a80b883a 	mov	r5,r21
1000c1b4:	000107c0 	call	1000107c <__umodsi3>
1000c1b8:	1027883a 	mov	r19,r2
1000c1bc:	8009883a 	mov	r4,r16
1000c1c0:	a80b883a 	mov	r5,r21
1000c1c4:	9826943a 	slli	r19,r19,16
1000c1c8:	00010180 	call	10001018 <__udivsi3>
1000c1cc:	100b883a 	mov	r5,r2
1000c1d0:	a009883a 	mov	r4,r20
1000c1d4:	94bfffcc 	andi	r18,r18,65535
1000c1d8:	1021883a 	mov	r16,r2
1000c1dc:	94e4b03a 	or	r18,r18,r19
1000c1e0:	00010d40 	call	100010d4 <__mulsi3>
1000c1e4:	9080052e 	bgeu	r18,r2,1000c1fc <__udivdi3+0x140>
1000c1e8:	8ca5883a 	add	r18,r17,r18
1000c1ec:	80ffffc4 	addi	r3,r16,-1
1000c1f0:	94410c36 	bltu	r18,r17,1000c624 <__udivdi3+0x568>
1000c1f4:	90810b2e 	bgeu	r18,r2,1000c624 <__udivdi3+0x568>
1000c1f8:	843fff84 	addi	r16,r16,-2
1000c1fc:	b004943a 	slli	r2,r22,16
1000c200:	0007883a 	mov	r3,zero
1000c204:	1404b03a 	or	r2,r2,r16
1000c208:	00005e06 	br	1000c384 <__udivdi3+0x2c8>
1000c20c:	29c05b36 	bltu	r5,r7,1000c37c <__udivdi3+0x2c0>
1000c210:	00bfffd4 	movui	r2,65535
1000c214:	11c0672e 	bgeu	r2,r7,1000c3b4 <__udivdi3+0x2f8>
1000c218:	00804034 	movhi	r2,256
1000c21c:	10bfffc4 	addi	r2,r2,-1
1000c220:	11c10a36 	bltu	r2,r7,1000c64c <__udivdi3+0x590>
1000c224:	00800404 	movi	r2,16
1000c228:	3886d83a 	srl	r3,r7,r2
1000c22c:	01040074 	movhi	r4,4097
1000c230:	2107ca04 	addi	r4,r4,7976
1000c234:	20c7883a 	add	r3,r4,r3
1000c238:	18c00003 	ldbu	r3,0(r3)
1000c23c:	05c00804 	movi	r23,32
1000c240:	1885883a 	add	r2,r3,r2
1000c244:	b8afc83a 	sub	r23,r23,r2
1000c248:	b800671e 	bne	r23,zero,1000c3e8 <__udivdi3+0x32c>
1000c24c:	3c010536 	bltu	r7,r16,1000c664 <__udivdi3+0x5a8>
1000c250:	9985403a 	cmpgeu	r2,r19,r6
1000c254:	0007883a 	mov	r3,zero
1000c258:	00004a06 	br	1000c384 <__udivdi3+0x2c8>
1000c25c:	3000041e 	bne	r6,zero,1000c270 <__udivdi3+0x1b4>
1000c260:	000b883a 	mov	r5,zero
1000c264:	01000044 	movi	r4,1
1000c268:	00010180 	call	10001018 <__udivsi3>
1000c26c:	1023883a 	mov	r17,r2
1000c270:	00bfffd4 	movui	r2,65535
1000c274:	1440532e 	bgeu	r2,r17,1000c3c4 <__udivdi3+0x308>
1000c278:	00804034 	movhi	r2,256
1000c27c:	10bfffc4 	addi	r2,r2,-1
1000c280:	1440f436 	bltu	r2,r17,1000c654 <__udivdi3+0x598>
1000c284:	00800404 	movi	r2,16
1000c288:	8886d83a 	srl	r3,r17,r2
1000c28c:	01040074 	movhi	r4,4097
1000c290:	2107ca04 	addi	r4,r4,7976
1000c294:	20c7883a 	add	r3,r4,r3
1000c298:	18c00003 	ldbu	r3,0(r3)
1000c29c:	1885883a 	add	r2,r3,r2
1000c2a0:	00c00804 	movi	r3,32
1000c2a4:	1887c83a 	sub	r3,r3,r2
1000c2a8:	1800a51e 	bne	r3,zero,1000c540 <__udivdi3+0x484>
1000c2ac:	882ad43a 	srli	r21,r17,16
1000c2b0:	8461c83a 	sub	r16,r16,r17
1000c2b4:	8d3fffcc 	andi	r20,r17,65535
1000c2b8:	00c00044 	movi	r3,1
1000c2bc:	a80b883a 	mov	r5,r21
1000c2c0:	8009883a 	mov	r4,r16
1000c2c4:	d8c00115 	stw	r3,4(sp)
1000c2c8:	000107c0 	call	1000107c <__umodsi3>
1000c2cc:	a80b883a 	mov	r5,r21
1000c2d0:	8009883a 	mov	r4,r16
1000c2d4:	1027883a 	mov	r19,r2
1000c2d8:	00010180 	call	10001018 <__udivsi3>
1000c2dc:	a00b883a 	mov	r5,r20
1000c2e0:	1009883a 	mov	r4,r2
1000c2e4:	102d883a 	mov	r22,r2
1000c2e8:	00010d40 	call	100010d4 <__mulsi3>
1000c2ec:	9826943a 	slli	r19,r19,16
1000c2f0:	900ed43a 	srli	r7,r18,16
1000c2f4:	d8c00117 	ldw	r3,4(sp)
1000c2f8:	3cceb03a 	or	r7,r7,r19
1000c2fc:	3880052e 	bgeu	r7,r2,1000c314 <__udivdi3+0x258>
1000c300:	3c4f883a 	add	r7,r7,r17
1000c304:	b13fffc4 	addi	r4,r22,-1
1000c308:	3c400136 	bltu	r7,r17,1000c310 <__udivdi3+0x254>
1000c30c:	3880e436 	bltu	r7,r2,1000c6a0 <__udivdi3+0x5e4>
1000c310:	202d883a 	mov	r22,r4
1000c314:	38a1c83a 	sub	r16,r7,r2
1000c318:	8009883a 	mov	r4,r16
1000c31c:	a80b883a 	mov	r5,r21
1000c320:	d8c00115 	stw	r3,4(sp)
1000c324:	000107c0 	call	1000107c <__umodsi3>
1000c328:	1027883a 	mov	r19,r2
1000c32c:	8009883a 	mov	r4,r16
1000c330:	a80b883a 	mov	r5,r21
1000c334:	9826943a 	slli	r19,r19,16
1000c338:	00010180 	call	10001018 <__udivsi3>
1000c33c:	a00b883a 	mov	r5,r20
1000c340:	1009883a 	mov	r4,r2
1000c344:	94bfffcc 	andi	r18,r18,65535
1000c348:	1021883a 	mov	r16,r2
1000c34c:	94e4b03a 	or	r18,r18,r19
1000c350:	00010d40 	call	100010d4 <__mulsi3>
1000c354:	d8c00117 	ldw	r3,4(sp)
1000c358:	9080052e 	bgeu	r18,r2,1000c370 <__udivdi3+0x2b4>
1000c35c:	8ca5883a 	add	r18,r17,r18
1000c360:	813fffc4 	addi	r4,r16,-1
1000c364:	9440ad36 	bltu	r18,r17,1000c61c <__udivdi3+0x560>
1000c368:	9080ac2e 	bgeu	r18,r2,1000c61c <__udivdi3+0x560>
1000c36c:	843fff84 	addi	r16,r16,-2
1000c370:	b004943a 	slli	r2,r22,16
1000c374:	1404b03a 	or	r2,r2,r16
1000c378:	00000206 	br	1000c384 <__udivdi3+0x2c8>
1000c37c:	0007883a 	mov	r3,zero
1000c380:	0005883a 	mov	r2,zero
1000c384:	dfc00b17 	ldw	ra,44(sp)
1000c388:	df000a17 	ldw	fp,40(sp)
1000c38c:	ddc00917 	ldw	r23,36(sp)
1000c390:	dd800817 	ldw	r22,32(sp)
1000c394:	dd400717 	ldw	r21,28(sp)
1000c398:	dd000617 	ldw	r20,24(sp)
1000c39c:	dcc00517 	ldw	r19,20(sp)
1000c3a0:	dc800417 	ldw	r18,16(sp)
1000c3a4:	dc400317 	ldw	r17,12(sp)
1000c3a8:	dc000217 	ldw	r16,8(sp)
1000c3ac:	dec00c04 	addi	sp,sp,48
1000c3b0:	f800283a 	ret
1000c3b4:	00803fc4 	movi	r2,255
1000c3b8:	11c5803a 	cmpltu	r2,r2,r7
1000c3bc:	100490fa 	slli	r2,r2,3
1000c3c0:	003f9906 	br	1000c228 <__alt_data_end+0xf800c228>
1000c3c4:	00803fc4 	movi	r2,255
1000c3c8:	1445803a 	cmpltu	r2,r2,r17
1000c3cc:	100490fa 	slli	r2,r2,3
1000c3d0:	003fad06 	br	1000c288 <__alt_data_end+0xf800c288>
1000c3d4:	00804034 	movhi	r2,256
1000c3d8:	10bfffc4 	addi	r2,r2,-1
1000c3dc:	11809f36 	bltu	r2,r6,1000c65c <__udivdi3+0x5a0>
1000c3e0:	00800404 	movi	r2,16
1000c3e4:	003f4c06 	br	1000c118 <__alt_data_end+0xf800c118>
1000c3e8:	3dce983a 	sll	r7,r7,r23
1000c3ec:	30b8d83a 	srl	fp,r6,r2
1000c3f0:	80a2d83a 	srl	r17,r16,r2
1000c3f4:	35cc983a 	sll	r6,r6,r23
1000c3f8:	3f38b03a 	or	fp,r7,fp
1000c3fc:	e024d43a 	srli	r18,fp,16
1000c400:	9884d83a 	srl	r2,r19,r2
1000c404:	85e0983a 	sll	r16,r16,r23
1000c408:	8809883a 	mov	r4,r17
1000c40c:	900b883a 	mov	r5,r18
1000c410:	d9800015 	stw	r6,0(sp)
1000c414:	1420b03a 	or	r16,r2,r16
1000c418:	000107c0 	call	1000107c <__umodsi3>
1000c41c:	900b883a 	mov	r5,r18
1000c420:	8809883a 	mov	r4,r17
1000c424:	1029883a 	mov	r20,r2
1000c428:	e5bfffcc 	andi	r22,fp,65535
1000c42c:	00010180 	call	10001018 <__udivsi3>
1000c430:	100b883a 	mov	r5,r2
1000c434:	b009883a 	mov	r4,r22
1000c438:	102b883a 	mov	r21,r2
1000c43c:	00010d40 	call	100010d4 <__mulsi3>
1000c440:	a028943a 	slli	r20,r20,16
1000c444:	8006d43a 	srli	r3,r16,16
1000c448:	1d06b03a 	or	r3,r3,r20
1000c44c:	1880042e 	bgeu	r3,r2,1000c460 <__udivdi3+0x3a4>
1000c450:	1f07883a 	add	r3,r3,fp
1000c454:	a93fffc4 	addi	r4,r21,-1
1000c458:	1f00892e 	bgeu	r3,fp,1000c680 <__udivdi3+0x5c4>
1000c45c:	202b883a 	mov	r21,r4
1000c460:	18a3c83a 	sub	r17,r3,r2
1000c464:	8809883a 	mov	r4,r17
1000c468:	900b883a 	mov	r5,r18
1000c46c:	000107c0 	call	1000107c <__umodsi3>
1000c470:	1029883a 	mov	r20,r2
1000c474:	8809883a 	mov	r4,r17
1000c478:	900b883a 	mov	r5,r18
1000c47c:	a028943a 	slli	r20,r20,16
1000c480:	00010180 	call	10001018 <__udivsi3>
1000c484:	100b883a 	mov	r5,r2
1000c488:	b009883a 	mov	r4,r22
1000c48c:	843fffcc 	andi	r16,r16,65535
1000c490:	1023883a 	mov	r17,r2
1000c494:	8520b03a 	or	r16,r16,r20
1000c498:	00010d40 	call	100010d4 <__mulsi3>
1000c49c:	8080042e 	bgeu	r16,r2,1000c4b0 <__udivdi3+0x3f4>
1000c4a0:	8721883a 	add	r16,r16,fp
1000c4a4:	88ffffc4 	addi	r3,r17,-1
1000c4a8:	8700712e 	bgeu	r16,fp,1000c670 <__udivdi3+0x5b4>
1000c4ac:	1823883a 	mov	r17,r3
1000c4b0:	a80e943a 	slli	r7,r21,16
1000c4b4:	d8c00017 	ldw	r3,0(sp)
1000c4b8:	80a1c83a 	sub	r16,r16,r2
1000c4bc:	3c64b03a 	or	r18,r7,r17
1000c4c0:	1d3fffcc 	andi	r20,r3,65535
1000c4c4:	9022d43a 	srli	r17,r18,16
1000c4c8:	95bfffcc 	andi	r22,r18,65535
1000c4cc:	a00b883a 	mov	r5,r20
1000c4d0:	b009883a 	mov	r4,r22
1000c4d4:	182ad43a 	srli	r21,r3,16
1000c4d8:	00010d40 	call	100010d4 <__mulsi3>
1000c4dc:	a00b883a 	mov	r5,r20
1000c4e0:	8809883a 	mov	r4,r17
1000c4e4:	1039883a 	mov	fp,r2
1000c4e8:	00010d40 	call	100010d4 <__mulsi3>
1000c4ec:	8809883a 	mov	r4,r17
1000c4f0:	a80b883a 	mov	r5,r21
1000c4f4:	1029883a 	mov	r20,r2
1000c4f8:	00010d40 	call	100010d4 <__mulsi3>
1000c4fc:	a80b883a 	mov	r5,r21
1000c500:	b009883a 	mov	r4,r22
1000c504:	1023883a 	mov	r17,r2
1000c508:	00010d40 	call	100010d4 <__mulsi3>
1000c50c:	e006d43a 	srli	r3,fp,16
1000c510:	1505883a 	add	r2,r2,r20
1000c514:	1887883a 	add	r3,r3,r2
1000c518:	1d00022e 	bgeu	r3,r20,1000c524 <__udivdi3+0x468>
1000c51c:	00800074 	movhi	r2,1
1000c520:	88a3883a 	add	r17,r17,r2
1000c524:	1804d43a 	srli	r2,r3,16
1000c528:	1463883a 	add	r17,r2,r17
1000c52c:	84404436 	bltu	r16,r17,1000c640 <__udivdi3+0x584>
1000c530:	84403e26 	beq	r16,r17,1000c62c <__udivdi3+0x570>
1000c534:	9005883a 	mov	r2,r18
1000c538:	0007883a 	mov	r3,zero
1000c53c:	003f9106 	br	1000c384 <__alt_data_end+0xf800c384>
1000c540:	88e2983a 	sll	r17,r17,r3
1000c544:	80aed83a 	srl	r23,r16,r2
1000c548:	80e0983a 	sll	r16,r16,r3
1000c54c:	882ad43a 	srli	r21,r17,16
1000c550:	9884d83a 	srl	r2,r19,r2
1000c554:	b809883a 	mov	r4,r23
1000c558:	a80b883a 	mov	r5,r21
1000c55c:	98e4983a 	sll	r18,r19,r3
1000c560:	142cb03a 	or	r22,r2,r16
1000c564:	000107c0 	call	1000107c <__umodsi3>
1000c568:	b809883a 	mov	r4,r23
1000c56c:	a80b883a 	mov	r5,r21
1000c570:	1027883a 	mov	r19,r2
1000c574:	8d3fffcc 	andi	r20,r17,65535
1000c578:	00010180 	call	10001018 <__udivsi3>
1000c57c:	a009883a 	mov	r4,r20
1000c580:	100b883a 	mov	r5,r2
1000c584:	102f883a 	mov	r23,r2
1000c588:	00010d40 	call	100010d4 <__mulsi3>
1000c58c:	9826943a 	slli	r19,r19,16
1000c590:	b008d43a 	srli	r4,r22,16
1000c594:	24c8b03a 	or	r4,r4,r19
1000c598:	2080062e 	bgeu	r4,r2,1000c5b4 <__udivdi3+0x4f8>
1000c59c:	2449883a 	add	r4,r4,r17
1000c5a0:	b8ffffc4 	addi	r3,r23,-1
1000c5a4:	24403c36 	bltu	r4,r17,1000c698 <__udivdi3+0x5dc>
1000c5a8:	20803b2e 	bgeu	r4,r2,1000c698 <__udivdi3+0x5dc>
1000c5ac:	bdffff84 	addi	r23,r23,-2
1000c5b0:	2449883a 	add	r4,r4,r17
1000c5b4:	20a1c83a 	sub	r16,r4,r2
1000c5b8:	a80b883a 	mov	r5,r21
1000c5bc:	8009883a 	mov	r4,r16
1000c5c0:	000107c0 	call	1000107c <__umodsi3>
1000c5c4:	a80b883a 	mov	r5,r21
1000c5c8:	8009883a 	mov	r4,r16
1000c5cc:	1027883a 	mov	r19,r2
1000c5d0:	00010180 	call	10001018 <__udivsi3>
1000c5d4:	a009883a 	mov	r4,r20
1000c5d8:	100b883a 	mov	r5,r2
1000c5dc:	9826943a 	slli	r19,r19,16
1000c5e0:	1039883a 	mov	fp,r2
1000c5e4:	00010d40 	call	100010d4 <__mulsi3>
1000c5e8:	b13fffcc 	andi	r4,r22,65535
1000c5ec:	24c8b03a 	or	r4,r4,r19
1000c5f0:	2080062e 	bgeu	r4,r2,1000c60c <__udivdi3+0x550>
1000c5f4:	2449883a 	add	r4,r4,r17
1000c5f8:	e0ffffc4 	addi	r3,fp,-1
1000c5fc:	24402436 	bltu	r4,r17,1000c690 <__udivdi3+0x5d4>
1000c600:	2080232e 	bgeu	r4,r2,1000c690 <__udivdi3+0x5d4>
1000c604:	e73fff84 	addi	fp,fp,-2
1000c608:	2449883a 	add	r4,r4,r17
1000c60c:	b82e943a 	slli	r23,r23,16
1000c610:	20a1c83a 	sub	r16,r4,r2
1000c614:	bf06b03a 	or	r3,r23,fp
1000c618:	003f2806 	br	1000c2bc <__alt_data_end+0xf800c2bc>
1000c61c:	2021883a 	mov	r16,r4
1000c620:	003f5306 	br	1000c370 <__alt_data_end+0xf800c370>
1000c624:	1821883a 	mov	r16,r3
1000c628:	003ef406 	br	1000c1fc <__alt_data_end+0xf800c1fc>
1000c62c:	1806943a 	slli	r3,r3,16
1000c630:	9de6983a 	sll	r19,r19,r23
1000c634:	e73fffcc 	andi	fp,fp,65535
1000c638:	1f07883a 	add	r3,r3,fp
1000c63c:	98ffbd2e 	bgeu	r19,r3,1000c534 <__alt_data_end+0xf800c534>
1000c640:	90bfffc4 	addi	r2,r18,-1
1000c644:	0007883a 	mov	r3,zero
1000c648:	003f4e06 	br	1000c384 <__alt_data_end+0xf800c384>
1000c64c:	00800604 	movi	r2,24
1000c650:	003ef506 	br	1000c228 <__alt_data_end+0xf800c228>
1000c654:	00800604 	movi	r2,24
1000c658:	003f0b06 	br	1000c288 <__alt_data_end+0xf800c288>
1000c65c:	00800604 	movi	r2,24
1000c660:	003ead06 	br	1000c118 <__alt_data_end+0xf800c118>
1000c664:	0007883a 	mov	r3,zero
1000c668:	00800044 	movi	r2,1
1000c66c:	003f4506 	br	1000c384 <__alt_data_end+0xf800c384>
1000c670:	80bf8e2e 	bgeu	r16,r2,1000c4ac <__alt_data_end+0xf800c4ac>
1000c674:	8c7fff84 	addi	r17,r17,-2
1000c678:	8721883a 	add	r16,r16,fp
1000c67c:	003f8c06 	br	1000c4b0 <__alt_data_end+0xf800c4b0>
1000c680:	18bf762e 	bgeu	r3,r2,1000c45c <__alt_data_end+0xf800c45c>
1000c684:	ad7fff84 	addi	r21,r21,-2
1000c688:	1f07883a 	add	r3,r3,fp
1000c68c:	003f7406 	br	1000c460 <__alt_data_end+0xf800c460>
1000c690:	1839883a 	mov	fp,r3
1000c694:	003fdd06 	br	1000c60c <__alt_data_end+0xf800c60c>
1000c698:	182f883a 	mov	r23,r3
1000c69c:	003fc506 	br	1000c5b4 <__alt_data_end+0xf800c5b4>
1000c6a0:	b5bfff84 	addi	r22,r22,-2
1000c6a4:	3c4f883a 	add	r7,r7,r17
1000c6a8:	003f1a06 	br	1000c314 <__alt_data_end+0xf800c314>
1000c6ac:	b5bfff84 	addi	r22,r22,-2
1000c6b0:	1c47883a 	add	r3,r3,r17
1000c6b4:	003ebc06 	br	1000c1a8 <__alt_data_end+0xf800c1a8>

1000c6b8 <__umoddi3>:
1000c6b8:	defff304 	addi	sp,sp,-52
1000c6bc:	df000b15 	stw	fp,44(sp)
1000c6c0:	dc400415 	stw	r17,16(sp)
1000c6c4:	dc000315 	stw	r16,12(sp)
1000c6c8:	dfc00c15 	stw	ra,48(sp)
1000c6cc:	ddc00a15 	stw	r23,40(sp)
1000c6d0:	dd800915 	stw	r22,36(sp)
1000c6d4:	dd400815 	stw	r21,32(sp)
1000c6d8:	dd000715 	stw	r20,28(sp)
1000c6dc:	dcc00615 	stw	r19,24(sp)
1000c6e0:	dc800515 	stw	r18,20(sp)
1000c6e4:	2021883a 	mov	r16,r4
1000c6e8:	2823883a 	mov	r17,r5
1000c6ec:	2839883a 	mov	fp,r5
1000c6f0:	3800401e 	bne	r7,zero,1000c7f4 <__umoddi3+0x13c>
1000c6f4:	3027883a 	mov	r19,r6
1000c6f8:	2029883a 	mov	r20,r4
1000c6fc:	2980552e 	bgeu	r5,r6,1000c854 <__umoddi3+0x19c>
1000c700:	00bfffd4 	movui	r2,65535
1000c704:	1180a236 	bltu	r2,r6,1000c990 <__umoddi3+0x2d8>
1000c708:	01003fc4 	movi	r4,255
1000c70c:	2189803a 	cmpltu	r4,r4,r6
1000c710:	200890fa 	slli	r4,r4,3
1000c714:	3104d83a 	srl	r2,r6,r4
1000c718:	00c40074 	movhi	r3,4097
1000c71c:	18c7ca04 	addi	r3,r3,7976
1000c720:	1885883a 	add	r2,r3,r2
1000c724:	10c00003 	ldbu	r3,0(r2)
1000c728:	00800804 	movi	r2,32
1000c72c:	1909883a 	add	r4,r3,r4
1000c730:	1125c83a 	sub	r18,r2,r4
1000c734:	90000526 	beq	r18,zero,1000c74c <__umoddi3+0x94>
1000c738:	8ca2983a 	sll	r17,r17,r18
1000c73c:	8108d83a 	srl	r4,r16,r4
1000c740:	34a6983a 	sll	r19,r6,r18
1000c744:	84a8983a 	sll	r20,r16,r18
1000c748:	2478b03a 	or	fp,r4,r17
1000c74c:	982cd43a 	srli	r22,r19,16
1000c750:	e009883a 	mov	r4,fp
1000c754:	9dffffcc 	andi	r23,r19,65535
1000c758:	b00b883a 	mov	r5,r22
1000c75c:	000107c0 	call	1000107c <__umodsi3>
1000c760:	b00b883a 	mov	r5,r22
1000c764:	e009883a 	mov	r4,fp
1000c768:	102b883a 	mov	r21,r2
1000c76c:	00010180 	call	10001018 <__udivsi3>
1000c770:	100b883a 	mov	r5,r2
1000c774:	b809883a 	mov	r4,r23
1000c778:	00010d40 	call	100010d4 <__mulsi3>
1000c77c:	a82a943a 	slli	r21,r21,16
1000c780:	a006d43a 	srli	r3,r20,16
1000c784:	1d46b03a 	or	r3,r3,r21
1000c788:	1880032e 	bgeu	r3,r2,1000c798 <__umoddi3+0xe0>
1000c78c:	1cc7883a 	add	r3,r3,r19
1000c790:	1cc00136 	bltu	r3,r19,1000c798 <__umoddi3+0xe0>
1000c794:	18813136 	bltu	r3,r2,1000cc5c <__umoddi3+0x5a4>
1000c798:	18a1c83a 	sub	r16,r3,r2
1000c79c:	b00b883a 	mov	r5,r22
1000c7a0:	8009883a 	mov	r4,r16
1000c7a4:	000107c0 	call	1000107c <__umodsi3>
1000c7a8:	b00b883a 	mov	r5,r22
1000c7ac:	8009883a 	mov	r4,r16
1000c7b0:	1023883a 	mov	r17,r2
1000c7b4:	00010180 	call	10001018 <__udivsi3>
1000c7b8:	100b883a 	mov	r5,r2
1000c7bc:	b809883a 	mov	r4,r23
1000c7c0:	8822943a 	slli	r17,r17,16
1000c7c4:	00010d40 	call	100010d4 <__mulsi3>
1000c7c8:	a0ffffcc 	andi	r3,r20,65535
1000c7cc:	1c46b03a 	or	r3,r3,r17
1000c7d0:	1880042e 	bgeu	r3,r2,1000c7e4 <__umoddi3+0x12c>
1000c7d4:	1cc7883a 	add	r3,r3,r19
1000c7d8:	1cc00236 	bltu	r3,r19,1000c7e4 <__umoddi3+0x12c>
1000c7dc:	1880012e 	bgeu	r3,r2,1000c7e4 <__umoddi3+0x12c>
1000c7e0:	1cc7883a 	add	r3,r3,r19
1000c7e4:	1885c83a 	sub	r2,r3,r2
1000c7e8:	1484d83a 	srl	r2,r2,r18
1000c7ec:	0007883a 	mov	r3,zero
1000c7f0:	00005306 	br	1000c940 <__umoddi3+0x288>
1000c7f4:	29c05036 	bltu	r5,r7,1000c938 <__umoddi3+0x280>
1000c7f8:	00bfffd4 	movui	r2,65535
1000c7fc:	11c05c2e 	bgeu	r2,r7,1000c970 <__umoddi3+0x2b8>
1000c800:	00804034 	movhi	r2,256
1000c804:	10bfffc4 	addi	r2,r2,-1
1000c808:	11c10636 	bltu	r2,r7,1000cc24 <__umoddi3+0x56c>
1000c80c:	01000404 	movi	r4,16
1000c810:	3904d83a 	srl	r2,r7,r4
1000c814:	00c40074 	movhi	r3,4097
1000c818:	18c7ca04 	addi	r3,r3,7976
1000c81c:	1885883a 	add	r2,r3,r2
1000c820:	14c00003 	ldbu	r19,0(r2)
1000c824:	00c00804 	movi	r3,32
1000c828:	9927883a 	add	r19,r19,r4
1000c82c:	1ce9c83a 	sub	r20,r3,r19
1000c830:	a0005c1e 	bne	r20,zero,1000c9a4 <__umoddi3+0x2ec>
1000c834:	3c400136 	bltu	r7,r17,1000c83c <__umoddi3+0x184>
1000c838:	81810a36 	bltu	r16,r6,1000cc64 <__umoddi3+0x5ac>
1000c83c:	8185c83a 	sub	r2,r16,r6
1000c840:	89e3c83a 	sub	r17,r17,r7
1000c844:	8089803a 	cmpltu	r4,r16,r2
1000c848:	8939c83a 	sub	fp,r17,r4
1000c84c:	e007883a 	mov	r3,fp
1000c850:	00003b06 	br	1000c940 <__umoddi3+0x288>
1000c854:	3000041e 	bne	r6,zero,1000c868 <__umoddi3+0x1b0>
1000c858:	000b883a 	mov	r5,zero
1000c85c:	01000044 	movi	r4,1
1000c860:	00010180 	call	10001018 <__udivsi3>
1000c864:	1027883a 	mov	r19,r2
1000c868:	00bfffd4 	movui	r2,65535
1000c86c:	14c0442e 	bgeu	r2,r19,1000c980 <__umoddi3+0x2c8>
1000c870:	00804034 	movhi	r2,256
1000c874:	10bfffc4 	addi	r2,r2,-1
1000c878:	14c0ec36 	bltu	r2,r19,1000cc2c <__umoddi3+0x574>
1000c87c:	00800404 	movi	r2,16
1000c880:	9886d83a 	srl	r3,r19,r2
1000c884:	01040074 	movhi	r4,4097
1000c888:	2107ca04 	addi	r4,r4,7976
1000c88c:	20c7883a 	add	r3,r4,r3
1000c890:	18c00003 	ldbu	r3,0(r3)
1000c894:	1887883a 	add	r3,r3,r2
1000c898:	00800804 	movi	r2,32
1000c89c:	10e5c83a 	sub	r18,r2,r3
1000c8a0:	9000ab1e 	bne	r18,zero,1000cb50 <__umoddi3+0x498>
1000c8a4:	982cd43a 	srli	r22,r19,16
1000c8a8:	8ce3c83a 	sub	r17,r17,r19
1000c8ac:	9dffffcc 	andi	r23,r19,65535
1000c8b0:	b00b883a 	mov	r5,r22
1000c8b4:	8809883a 	mov	r4,r17
1000c8b8:	000107c0 	call	1000107c <__umodsi3>
1000c8bc:	b00b883a 	mov	r5,r22
1000c8c0:	8809883a 	mov	r4,r17
1000c8c4:	102b883a 	mov	r21,r2
1000c8c8:	00010180 	call	10001018 <__udivsi3>
1000c8cc:	b80b883a 	mov	r5,r23
1000c8d0:	1009883a 	mov	r4,r2
1000c8d4:	00010d40 	call	100010d4 <__mulsi3>
1000c8d8:	a82a943a 	slli	r21,r21,16
1000c8dc:	a006d43a 	srli	r3,r20,16
1000c8e0:	1d46b03a 	or	r3,r3,r21
1000c8e4:	1880042e 	bgeu	r3,r2,1000c8f8 <__umoddi3+0x240>
1000c8e8:	1cc7883a 	add	r3,r3,r19
1000c8ec:	1cc00236 	bltu	r3,r19,1000c8f8 <__umoddi3+0x240>
1000c8f0:	1880012e 	bgeu	r3,r2,1000c8f8 <__umoddi3+0x240>
1000c8f4:	1cc7883a 	add	r3,r3,r19
1000c8f8:	18a1c83a 	sub	r16,r3,r2
1000c8fc:	b00b883a 	mov	r5,r22
1000c900:	8009883a 	mov	r4,r16
1000c904:	000107c0 	call	1000107c <__umodsi3>
1000c908:	1023883a 	mov	r17,r2
1000c90c:	b00b883a 	mov	r5,r22
1000c910:	8009883a 	mov	r4,r16
1000c914:	00010180 	call	10001018 <__udivsi3>
1000c918:	8822943a 	slli	r17,r17,16
1000c91c:	b80b883a 	mov	r5,r23
1000c920:	1009883a 	mov	r4,r2
1000c924:	00010d40 	call	100010d4 <__mulsi3>
1000c928:	a53fffcc 	andi	r20,r20,65535
1000c92c:	a446b03a 	or	r3,r20,r17
1000c930:	18bfac2e 	bgeu	r3,r2,1000c7e4 <__alt_data_end+0xf800c7e4>
1000c934:	003fa706 	br	1000c7d4 <__alt_data_end+0xf800c7d4>
1000c938:	2005883a 	mov	r2,r4
1000c93c:	2807883a 	mov	r3,r5
1000c940:	dfc00c17 	ldw	ra,48(sp)
1000c944:	df000b17 	ldw	fp,44(sp)
1000c948:	ddc00a17 	ldw	r23,40(sp)
1000c94c:	dd800917 	ldw	r22,36(sp)
1000c950:	dd400817 	ldw	r21,32(sp)
1000c954:	dd000717 	ldw	r20,28(sp)
1000c958:	dcc00617 	ldw	r19,24(sp)
1000c95c:	dc800517 	ldw	r18,20(sp)
1000c960:	dc400417 	ldw	r17,16(sp)
1000c964:	dc000317 	ldw	r16,12(sp)
1000c968:	dec00d04 	addi	sp,sp,52
1000c96c:	f800283a 	ret
1000c970:	04c03fc4 	movi	r19,255
1000c974:	99c9803a 	cmpltu	r4,r19,r7
1000c978:	200890fa 	slli	r4,r4,3
1000c97c:	003fa406 	br	1000c810 <__alt_data_end+0xf800c810>
1000c980:	00803fc4 	movi	r2,255
1000c984:	14c5803a 	cmpltu	r2,r2,r19
1000c988:	100490fa 	slli	r2,r2,3
1000c98c:	003fbc06 	br	1000c880 <__alt_data_end+0xf800c880>
1000c990:	00804034 	movhi	r2,256
1000c994:	10bfffc4 	addi	r2,r2,-1
1000c998:	1180a636 	bltu	r2,r6,1000cc34 <__umoddi3+0x57c>
1000c99c:	01000404 	movi	r4,16
1000c9a0:	003f5c06 	br	1000c714 <__alt_data_end+0xf800c714>
1000c9a4:	3d0e983a 	sll	r7,r7,r20
1000c9a8:	34ead83a 	srl	r21,r6,r19
1000c9ac:	8cc6d83a 	srl	r3,r17,r19
1000c9b0:	8d10983a 	sll	r8,r17,r20
1000c9b4:	3d6ab03a 	or	r21,r7,r21
1000c9b8:	a82cd43a 	srli	r22,r21,16
1000c9bc:	84e2d83a 	srl	r17,r16,r19
1000c9c0:	1809883a 	mov	r4,r3
1000c9c4:	b00b883a 	mov	r5,r22
1000c9c8:	8a22b03a 	or	r17,r17,r8
1000c9cc:	3524983a 	sll	r18,r6,r20
1000c9d0:	dc400015 	stw	r17,0(sp)
1000c9d4:	d8c00115 	stw	r3,4(sp)
1000c9d8:	000107c0 	call	1000107c <__umodsi3>
1000c9dc:	d8c00117 	ldw	r3,4(sp)
1000c9e0:	b00b883a 	mov	r5,r22
1000c9e4:	1039883a 	mov	fp,r2
1000c9e8:	1809883a 	mov	r4,r3
1000c9ec:	00010180 	call	10001018 <__udivsi3>
1000c9f0:	adffffcc 	andi	r23,r21,65535
1000c9f4:	100b883a 	mov	r5,r2
1000c9f8:	b809883a 	mov	r4,r23
1000c9fc:	1023883a 	mov	r17,r2
1000ca00:	00010d40 	call	100010d4 <__mulsi3>
1000ca04:	d9400017 	ldw	r5,0(sp)
1000ca08:	e008943a 	slli	r4,fp,16
1000ca0c:	8520983a 	sll	r16,r16,r20
1000ca10:	2806d43a 	srli	r3,r5,16
1000ca14:	1906b03a 	or	r3,r3,r4
1000ca18:	1880042e 	bgeu	r3,r2,1000ca2c <__umoddi3+0x374>
1000ca1c:	1d47883a 	add	r3,r3,r21
1000ca20:	893fffc4 	addi	r4,r17,-1
1000ca24:	1d40892e 	bgeu	r3,r21,1000cc4c <__umoddi3+0x594>
1000ca28:	2023883a 	mov	r17,r4
1000ca2c:	18b9c83a 	sub	fp,r3,r2
1000ca30:	b00b883a 	mov	r5,r22
1000ca34:	e009883a 	mov	r4,fp
1000ca38:	000107c0 	call	1000107c <__umodsi3>
1000ca3c:	b00b883a 	mov	r5,r22
1000ca40:	e009883a 	mov	r4,fp
1000ca44:	d8800215 	stw	r2,8(sp)
1000ca48:	00010180 	call	10001018 <__udivsi3>
1000ca4c:	100b883a 	mov	r5,r2
1000ca50:	b809883a 	mov	r4,r23
1000ca54:	102d883a 	mov	r22,r2
1000ca58:	00010d40 	call	100010d4 <__mulsi3>
1000ca5c:	d9800217 	ldw	r6,8(sp)
1000ca60:	d8c00017 	ldw	r3,0(sp)
1000ca64:	300c943a 	slli	r6,r6,16
1000ca68:	1a3fffcc 	andi	r8,r3,65535
1000ca6c:	4190b03a 	or	r8,r8,r6
1000ca70:	4080042e 	bgeu	r8,r2,1000ca84 <__umoddi3+0x3cc>
1000ca74:	4551883a 	add	r8,r8,r21
1000ca78:	b0ffffc4 	addi	r3,r22,-1
1000ca7c:	45406f2e 	bgeu	r8,r21,1000cc3c <__umoddi3+0x584>
1000ca80:	182d883a 	mov	r22,r3
1000ca84:	880e943a 	slli	r7,r17,16
1000ca88:	9006d43a 	srli	r3,r18,16
1000ca8c:	91bfffcc 	andi	r6,r18,65535
1000ca90:	3dacb03a 	or	r22,r7,r22
1000ca94:	b02ed43a 	srli	r23,r22,16
1000ca98:	b5bfffcc 	andi	r22,r22,65535
1000ca9c:	300b883a 	mov	r5,r6
1000caa0:	b009883a 	mov	r4,r22
1000caa4:	40a3c83a 	sub	r17,r8,r2
1000caa8:	d8c00115 	stw	r3,4(sp)
1000caac:	d9800215 	stw	r6,8(sp)
1000cab0:	00010d40 	call	100010d4 <__mulsi3>
1000cab4:	d9800217 	ldw	r6,8(sp)
1000cab8:	b809883a 	mov	r4,r23
1000cabc:	1039883a 	mov	fp,r2
1000cac0:	300b883a 	mov	r5,r6
1000cac4:	00010d40 	call	100010d4 <__mulsi3>
1000cac8:	d8c00117 	ldw	r3,4(sp)
1000cacc:	b809883a 	mov	r4,r23
1000cad0:	d8800215 	stw	r2,8(sp)
1000cad4:	180b883a 	mov	r5,r3
1000cad8:	00010d40 	call	100010d4 <__mulsi3>
1000cadc:	d8c00117 	ldw	r3,4(sp)
1000cae0:	b009883a 	mov	r4,r22
1000cae4:	102f883a 	mov	r23,r2
1000cae8:	180b883a 	mov	r5,r3
1000caec:	00010d40 	call	100010d4 <__mulsi3>
1000caf0:	d9800217 	ldw	r6,8(sp)
1000caf4:	e006d43a 	srli	r3,fp,16
1000caf8:	1185883a 	add	r2,r2,r6
1000cafc:	1885883a 	add	r2,r3,r2
1000cb00:	1180022e 	bgeu	r2,r6,1000cb0c <__umoddi3+0x454>
1000cb04:	00c00074 	movhi	r3,1
1000cb08:	b8ef883a 	add	r23,r23,r3
1000cb0c:	1006d43a 	srli	r3,r2,16
1000cb10:	1004943a 	slli	r2,r2,16
1000cb14:	e73fffcc 	andi	fp,fp,65535
1000cb18:	1dc7883a 	add	r3,r3,r23
1000cb1c:	1739883a 	add	fp,r2,fp
1000cb20:	88c03a36 	bltu	r17,r3,1000cc0c <__umoddi3+0x554>
1000cb24:	88c05126 	beq	r17,r3,1000cc6c <__umoddi3+0x5b4>
1000cb28:	88c9c83a 	sub	r4,r17,r3
1000cb2c:	e00f883a 	mov	r7,fp
1000cb30:	81cfc83a 	sub	r7,r16,r7
1000cb34:	81c7803a 	cmpltu	r3,r16,r7
1000cb38:	20c7c83a 	sub	r3,r4,r3
1000cb3c:	1cc4983a 	sll	r2,r3,r19
1000cb40:	3d0ed83a 	srl	r7,r7,r20
1000cb44:	1d06d83a 	srl	r3,r3,r20
1000cb48:	11c4b03a 	or	r2,r2,r7
1000cb4c:	003f7c06 	br	1000c940 <__alt_data_end+0xf800c940>
1000cb50:	9ca6983a 	sll	r19,r19,r18
1000cb54:	88f8d83a 	srl	fp,r17,r3
1000cb58:	80c4d83a 	srl	r2,r16,r3
1000cb5c:	982cd43a 	srli	r22,r19,16
1000cb60:	8ca2983a 	sll	r17,r17,r18
1000cb64:	e009883a 	mov	r4,fp
1000cb68:	b00b883a 	mov	r5,r22
1000cb6c:	146ab03a 	or	r21,r2,r17
1000cb70:	000107c0 	call	1000107c <__umodsi3>
1000cb74:	b00b883a 	mov	r5,r22
1000cb78:	e009883a 	mov	r4,fp
1000cb7c:	1029883a 	mov	r20,r2
1000cb80:	9dffffcc 	andi	r23,r19,65535
1000cb84:	00010180 	call	10001018 <__udivsi3>
1000cb88:	b809883a 	mov	r4,r23
1000cb8c:	100b883a 	mov	r5,r2
1000cb90:	00010d40 	call	100010d4 <__mulsi3>
1000cb94:	a008943a 	slli	r4,r20,16
1000cb98:	a806d43a 	srli	r3,r21,16
1000cb9c:	84a8983a 	sll	r20,r16,r18
1000cba0:	1906b03a 	or	r3,r3,r4
1000cba4:	1880042e 	bgeu	r3,r2,1000cbb8 <__umoddi3+0x500>
1000cba8:	1cc7883a 	add	r3,r3,r19
1000cbac:	1cc00236 	bltu	r3,r19,1000cbb8 <__umoddi3+0x500>
1000cbb0:	1880012e 	bgeu	r3,r2,1000cbb8 <__umoddi3+0x500>
1000cbb4:	1cc7883a 	add	r3,r3,r19
1000cbb8:	18a3c83a 	sub	r17,r3,r2
1000cbbc:	b00b883a 	mov	r5,r22
1000cbc0:	8809883a 	mov	r4,r17
1000cbc4:	000107c0 	call	1000107c <__umodsi3>
1000cbc8:	b00b883a 	mov	r5,r22
1000cbcc:	8809883a 	mov	r4,r17
1000cbd0:	1021883a 	mov	r16,r2
1000cbd4:	00010180 	call	10001018 <__udivsi3>
1000cbd8:	100b883a 	mov	r5,r2
1000cbdc:	b809883a 	mov	r4,r23
1000cbe0:	8020943a 	slli	r16,r16,16
1000cbe4:	00010d40 	call	100010d4 <__mulsi3>
1000cbe8:	a8ffffcc 	andi	r3,r21,65535
1000cbec:	1c06b03a 	or	r3,r3,r16
1000cbf0:	1880042e 	bgeu	r3,r2,1000cc04 <__umoddi3+0x54c>
1000cbf4:	1cc7883a 	add	r3,r3,r19
1000cbf8:	1cc00236 	bltu	r3,r19,1000cc04 <__umoddi3+0x54c>
1000cbfc:	1880012e 	bgeu	r3,r2,1000cc04 <__umoddi3+0x54c>
1000cc00:	1cc7883a 	add	r3,r3,r19
1000cc04:	18a3c83a 	sub	r17,r3,r2
1000cc08:	003f2906 	br	1000c8b0 <__alt_data_end+0xf800c8b0>
1000cc0c:	e48fc83a 	sub	r7,fp,r18
1000cc10:	1d49c83a 	sub	r4,r3,r21
1000cc14:	e1f9803a 	cmpltu	fp,fp,r7
1000cc18:	2739c83a 	sub	fp,r4,fp
1000cc1c:	8f09c83a 	sub	r4,r17,fp
1000cc20:	003fc306 	br	1000cb30 <__alt_data_end+0xf800cb30>
1000cc24:	01000604 	movi	r4,24
1000cc28:	003ef906 	br	1000c810 <__alt_data_end+0xf800c810>
1000cc2c:	00800604 	movi	r2,24
1000cc30:	003f1306 	br	1000c880 <__alt_data_end+0xf800c880>
1000cc34:	01000604 	movi	r4,24
1000cc38:	003eb606 	br	1000c714 <__alt_data_end+0xf800c714>
1000cc3c:	40bf902e 	bgeu	r8,r2,1000ca80 <__alt_data_end+0xf800ca80>
1000cc40:	b5bfff84 	addi	r22,r22,-2
1000cc44:	4551883a 	add	r8,r8,r21
1000cc48:	003f8e06 	br	1000ca84 <__alt_data_end+0xf800ca84>
1000cc4c:	18bf762e 	bgeu	r3,r2,1000ca28 <__alt_data_end+0xf800ca28>
1000cc50:	8c7fff84 	addi	r17,r17,-2
1000cc54:	1d47883a 	add	r3,r3,r21
1000cc58:	003f7406 	br	1000ca2c <__alt_data_end+0xf800ca2c>
1000cc5c:	1cc7883a 	add	r3,r3,r19
1000cc60:	003ecd06 	br	1000c798 <__alt_data_end+0xf800c798>
1000cc64:	8005883a 	mov	r2,r16
1000cc68:	003ef806 	br	1000c84c <__alt_data_end+0xf800c84c>
1000cc6c:	873fe736 	bltu	r16,fp,1000cc0c <__alt_data_end+0xf800cc0c>
1000cc70:	e00f883a 	mov	r7,fp
1000cc74:	0009883a 	mov	r4,zero
1000cc78:	003fad06 	br	1000cb30 <__alt_data_end+0xf800cb30>

1000cc7c <__adddf3>:
1000cc7c:	02c00434 	movhi	r11,16
1000cc80:	5affffc4 	addi	r11,r11,-1
1000cc84:	2806d7fa 	srli	r3,r5,31
1000cc88:	2ad4703a 	and	r10,r5,r11
1000cc8c:	3ad2703a 	and	r9,r7,r11
1000cc90:	3804d53a 	srli	r2,r7,20
1000cc94:	3018d77a 	srli	r12,r6,29
1000cc98:	280ad53a 	srli	r5,r5,20
1000cc9c:	501490fa 	slli	r10,r10,3
1000cca0:	2010d77a 	srli	r8,r4,29
1000cca4:	481290fa 	slli	r9,r9,3
1000cca8:	380ed7fa 	srli	r7,r7,31
1000ccac:	defffb04 	addi	sp,sp,-20
1000ccb0:	dc800215 	stw	r18,8(sp)
1000ccb4:	dc400115 	stw	r17,4(sp)
1000ccb8:	dc000015 	stw	r16,0(sp)
1000ccbc:	dfc00415 	stw	ra,16(sp)
1000ccc0:	dcc00315 	stw	r19,12(sp)
1000ccc4:	1c803fcc 	andi	r18,r3,255
1000ccc8:	2c01ffcc 	andi	r16,r5,2047
1000cccc:	5210b03a 	or	r8,r10,r8
1000ccd0:	202290fa 	slli	r17,r4,3
1000ccd4:	1081ffcc 	andi	r2,r2,2047
1000ccd8:	4b12b03a 	or	r9,r9,r12
1000ccdc:	300c90fa 	slli	r6,r6,3
1000cce0:	91c07526 	beq	r18,r7,1000ceb8 <__adddf3+0x23c>
1000cce4:	8087c83a 	sub	r3,r16,r2
1000cce8:	00c0ab0e 	bge	zero,r3,1000cf98 <__adddf3+0x31c>
1000ccec:	10002a1e 	bne	r2,zero,1000cd98 <__adddf3+0x11c>
1000ccf0:	4984b03a 	or	r2,r9,r6
1000ccf4:	1000961e 	bne	r2,zero,1000cf50 <__adddf3+0x2d4>
1000ccf8:	888001cc 	andi	r2,r17,7
1000ccfc:	10000726 	beq	r2,zero,1000cd1c <__adddf3+0xa0>
1000cd00:	888003cc 	andi	r2,r17,15
1000cd04:	00c00104 	movi	r3,4
1000cd08:	10c00426 	beq	r2,r3,1000cd1c <__adddf3+0xa0>
1000cd0c:	88c7883a 	add	r3,r17,r3
1000cd10:	1c63803a 	cmpltu	r17,r3,r17
1000cd14:	4451883a 	add	r8,r8,r17
1000cd18:	1823883a 	mov	r17,r3
1000cd1c:	4080202c 	andhi	r2,r8,128
1000cd20:	10005926 	beq	r2,zero,1000ce88 <__adddf3+0x20c>
1000cd24:	84000044 	addi	r16,r16,1
1000cd28:	0081ffc4 	movi	r2,2047
1000cd2c:	8080ba26 	beq	r16,r2,1000d018 <__adddf3+0x39c>
1000cd30:	00bfe034 	movhi	r2,65408
1000cd34:	10bfffc4 	addi	r2,r2,-1
1000cd38:	4090703a 	and	r8,r8,r2
1000cd3c:	4004977a 	slli	r2,r8,29
1000cd40:	4010927a 	slli	r8,r8,9
1000cd44:	8822d0fa 	srli	r17,r17,3
1000cd48:	8401ffcc 	andi	r16,r16,2047
1000cd4c:	4010d33a 	srli	r8,r8,12
1000cd50:	9007883a 	mov	r3,r18
1000cd54:	1444b03a 	or	r2,r2,r17
1000cd58:	8401ffcc 	andi	r16,r16,2047
1000cd5c:	8020953a 	slli	r16,r16,20
1000cd60:	18c03fcc 	andi	r3,r3,255
1000cd64:	01000434 	movhi	r4,16
1000cd68:	213fffc4 	addi	r4,r4,-1
1000cd6c:	180697fa 	slli	r3,r3,31
1000cd70:	4110703a 	and	r8,r8,r4
1000cd74:	4410b03a 	or	r8,r8,r16
1000cd78:	40c6b03a 	or	r3,r8,r3
1000cd7c:	dfc00417 	ldw	ra,16(sp)
1000cd80:	dcc00317 	ldw	r19,12(sp)
1000cd84:	dc800217 	ldw	r18,8(sp)
1000cd88:	dc400117 	ldw	r17,4(sp)
1000cd8c:	dc000017 	ldw	r16,0(sp)
1000cd90:	dec00504 	addi	sp,sp,20
1000cd94:	f800283a 	ret
1000cd98:	0081ffc4 	movi	r2,2047
1000cd9c:	80bfd626 	beq	r16,r2,1000ccf8 <__alt_data_end+0xf800ccf8>
1000cda0:	4a402034 	orhi	r9,r9,128
1000cda4:	00800e04 	movi	r2,56
1000cda8:	10c09f16 	blt	r2,r3,1000d028 <__adddf3+0x3ac>
1000cdac:	008007c4 	movi	r2,31
1000cdb0:	10c0c216 	blt	r2,r3,1000d0bc <__adddf3+0x440>
1000cdb4:	00800804 	movi	r2,32
1000cdb8:	10c5c83a 	sub	r2,r2,r3
1000cdbc:	488a983a 	sll	r5,r9,r2
1000cdc0:	30c8d83a 	srl	r4,r6,r3
1000cdc4:	3084983a 	sll	r2,r6,r2
1000cdc8:	48c6d83a 	srl	r3,r9,r3
1000cdcc:	290cb03a 	or	r6,r5,r4
1000cdd0:	1004c03a 	cmpne	r2,r2,zero
1000cdd4:	308cb03a 	or	r6,r6,r2
1000cdd8:	898dc83a 	sub	r6,r17,r6
1000cddc:	89a3803a 	cmpltu	r17,r17,r6
1000cde0:	40d1c83a 	sub	r8,r8,r3
1000cde4:	4451c83a 	sub	r8,r8,r17
1000cde8:	3023883a 	mov	r17,r6
1000cdec:	4080202c 	andhi	r2,r8,128
1000cdf0:	10002326 	beq	r2,zero,1000ce80 <__adddf3+0x204>
1000cdf4:	04c02034 	movhi	r19,128
1000cdf8:	9cffffc4 	addi	r19,r19,-1
1000cdfc:	44e6703a 	and	r19,r8,r19
1000ce00:	98007626 	beq	r19,zero,1000cfdc <__adddf3+0x360>
1000ce04:	9809883a 	mov	r4,r19
1000ce08:	000f4bc0 	call	1000f4bc <__clzsi2>
1000ce0c:	10fffe04 	addi	r3,r2,-8
1000ce10:	010007c4 	movi	r4,31
1000ce14:	20c07716 	blt	r4,r3,1000cff4 <__adddf3+0x378>
1000ce18:	00800804 	movi	r2,32
1000ce1c:	10c5c83a 	sub	r2,r2,r3
1000ce20:	8884d83a 	srl	r2,r17,r2
1000ce24:	98d0983a 	sll	r8,r19,r3
1000ce28:	88e2983a 	sll	r17,r17,r3
1000ce2c:	1204b03a 	or	r2,r2,r8
1000ce30:	1c007416 	blt	r3,r16,1000d004 <__adddf3+0x388>
1000ce34:	1c21c83a 	sub	r16,r3,r16
1000ce38:	82000044 	addi	r8,r16,1
1000ce3c:	00c007c4 	movi	r3,31
1000ce40:	1a009116 	blt	r3,r8,1000d088 <__adddf3+0x40c>
1000ce44:	00c00804 	movi	r3,32
1000ce48:	1a07c83a 	sub	r3,r3,r8
1000ce4c:	8a08d83a 	srl	r4,r17,r8
1000ce50:	88e2983a 	sll	r17,r17,r3
1000ce54:	10c6983a 	sll	r3,r2,r3
1000ce58:	1210d83a 	srl	r8,r2,r8
1000ce5c:	8804c03a 	cmpne	r2,r17,zero
1000ce60:	1906b03a 	or	r3,r3,r4
1000ce64:	18a2b03a 	or	r17,r3,r2
1000ce68:	0021883a 	mov	r16,zero
1000ce6c:	003fa206 	br	1000ccf8 <__alt_data_end+0xf800ccf8>
1000ce70:	1890b03a 	or	r8,r3,r2
1000ce74:	40017d26 	beq	r8,zero,1000d46c <__adddf3+0x7f0>
1000ce78:	1011883a 	mov	r8,r2
1000ce7c:	1823883a 	mov	r17,r3
1000ce80:	888001cc 	andi	r2,r17,7
1000ce84:	103f9e1e 	bne	r2,zero,1000cd00 <__alt_data_end+0xf800cd00>
1000ce88:	4004977a 	slli	r2,r8,29
1000ce8c:	8822d0fa 	srli	r17,r17,3
1000ce90:	4010d0fa 	srli	r8,r8,3
1000ce94:	9007883a 	mov	r3,r18
1000ce98:	1444b03a 	or	r2,r2,r17
1000ce9c:	0101ffc4 	movi	r4,2047
1000cea0:	81002426 	beq	r16,r4,1000cf34 <__adddf3+0x2b8>
1000cea4:	8120703a 	and	r16,r16,r4
1000cea8:	01000434 	movhi	r4,16
1000ceac:	213fffc4 	addi	r4,r4,-1
1000ceb0:	4110703a 	and	r8,r8,r4
1000ceb4:	003fa806 	br	1000cd58 <__alt_data_end+0xf800cd58>
1000ceb8:	8089c83a 	sub	r4,r16,r2
1000cebc:	01005e0e 	bge	zero,r4,1000d038 <__adddf3+0x3bc>
1000cec0:	10002b26 	beq	r2,zero,1000cf70 <__adddf3+0x2f4>
1000cec4:	0081ffc4 	movi	r2,2047
1000cec8:	80bf8b26 	beq	r16,r2,1000ccf8 <__alt_data_end+0xf800ccf8>
1000cecc:	4a402034 	orhi	r9,r9,128
1000ced0:	00800e04 	movi	r2,56
1000ced4:	1100a40e 	bge	r2,r4,1000d168 <__adddf3+0x4ec>
1000ced8:	498cb03a 	or	r6,r9,r6
1000cedc:	300ac03a 	cmpne	r5,r6,zero
1000cee0:	0013883a 	mov	r9,zero
1000cee4:	2c4b883a 	add	r5,r5,r17
1000cee8:	2c63803a 	cmpltu	r17,r5,r17
1000ceec:	4a11883a 	add	r8,r9,r8
1000cef0:	8a11883a 	add	r8,r17,r8
1000cef4:	2823883a 	mov	r17,r5
1000cef8:	4080202c 	andhi	r2,r8,128
1000cefc:	103fe026 	beq	r2,zero,1000ce80 <__alt_data_end+0xf800ce80>
1000cf00:	84000044 	addi	r16,r16,1
1000cf04:	0081ffc4 	movi	r2,2047
1000cf08:	8080d226 	beq	r16,r2,1000d254 <__adddf3+0x5d8>
1000cf0c:	00bfe034 	movhi	r2,65408
1000cf10:	10bfffc4 	addi	r2,r2,-1
1000cf14:	4090703a 	and	r8,r8,r2
1000cf18:	880ad07a 	srli	r5,r17,1
1000cf1c:	400897fa 	slli	r4,r8,31
1000cf20:	88c0004c 	andi	r3,r17,1
1000cf24:	28e2b03a 	or	r17,r5,r3
1000cf28:	4010d07a 	srli	r8,r8,1
1000cf2c:	2462b03a 	or	r17,r4,r17
1000cf30:	003f7106 	br	1000ccf8 <__alt_data_end+0xf800ccf8>
1000cf34:	4088b03a 	or	r4,r8,r2
1000cf38:	20014526 	beq	r4,zero,1000d450 <__adddf3+0x7d4>
1000cf3c:	01000434 	movhi	r4,16
1000cf40:	42000234 	orhi	r8,r8,8
1000cf44:	213fffc4 	addi	r4,r4,-1
1000cf48:	4110703a 	and	r8,r8,r4
1000cf4c:	003f8206 	br	1000cd58 <__alt_data_end+0xf800cd58>
1000cf50:	18ffffc4 	addi	r3,r3,-1
1000cf54:	1800491e 	bne	r3,zero,1000d07c <__adddf3+0x400>
1000cf58:	898bc83a 	sub	r5,r17,r6
1000cf5c:	8963803a 	cmpltu	r17,r17,r5
1000cf60:	4251c83a 	sub	r8,r8,r9
1000cf64:	4451c83a 	sub	r8,r8,r17
1000cf68:	2823883a 	mov	r17,r5
1000cf6c:	003f9f06 	br	1000cdec <__alt_data_end+0xf800cdec>
1000cf70:	4984b03a 	or	r2,r9,r6
1000cf74:	103f6026 	beq	r2,zero,1000ccf8 <__alt_data_end+0xf800ccf8>
1000cf78:	213fffc4 	addi	r4,r4,-1
1000cf7c:	2000931e 	bne	r4,zero,1000d1cc <__adddf3+0x550>
1000cf80:	898d883a 	add	r6,r17,r6
1000cf84:	3463803a 	cmpltu	r17,r6,r17
1000cf88:	4251883a 	add	r8,r8,r9
1000cf8c:	8a11883a 	add	r8,r17,r8
1000cf90:	3023883a 	mov	r17,r6
1000cf94:	003fd806 	br	1000cef8 <__alt_data_end+0xf800cef8>
1000cf98:	1800541e 	bne	r3,zero,1000d0ec <__adddf3+0x470>
1000cf9c:	80800044 	addi	r2,r16,1
1000cfa0:	1081ffcc 	andi	r2,r2,2047
1000cfa4:	00c00044 	movi	r3,1
1000cfa8:	1880a00e 	bge	r3,r2,1000d22c <__adddf3+0x5b0>
1000cfac:	8989c83a 	sub	r4,r17,r6
1000cfb0:	8905803a 	cmpltu	r2,r17,r4
1000cfb4:	4267c83a 	sub	r19,r8,r9
1000cfb8:	98a7c83a 	sub	r19,r19,r2
1000cfbc:	9880202c 	andhi	r2,r19,128
1000cfc0:	10006326 	beq	r2,zero,1000d150 <__adddf3+0x4d4>
1000cfc4:	3463c83a 	sub	r17,r6,r17
1000cfc8:	4a07c83a 	sub	r3,r9,r8
1000cfcc:	344d803a 	cmpltu	r6,r6,r17
1000cfd0:	19a7c83a 	sub	r19,r3,r6
1000cfd4:	3825883a 	mov	r18,r7
1000cfd8:	983f8a1e 	bne	r19,zero,1000ce04 <__alt_data_end+0xf800ce04>
1000cfdc:	8809883a 	mov	r4,r17
1000cfe0:	000f4bc0 	call	1000f4bc <__clzsi2>
1000cfe4:	10800804 	addi	r2,r2,32
1000cfe8:	10fffe04 	addi	r3,r2,-8
1000cfec:	010007c4 	movi	r4,31
1000cff0:	20ff890e 	bge	r4,r3,1000ce18 <__alt_data_end+0xf800ce18>
1000cff4:	10bff604 	addi	r2,r2,-40
1000cff8:	8884983a 	sll	r2,r17,r2
1000cffc:	0023883a 	mov	r17,zero
1000d000:	1c3f8c0e 	bge	r3,r16,1000ce34 <__alt_data_end+0xf800ce34>
1000d004:	023fe034 	movhi	r8,65408
1000d008:	423fffc4 	addi	r8,r8,-1
1000d00c:	80e1c83a 	sub	r16,r16,r3
1000d010:	1210703a 	and	r8,r2,r8
1000d014:	003f3806 	br	1000ccf8 <__alt_data_end+0xf800ccf8>
1000d018:	9007883a 	mov	r3,r18
1000d01c:	0011883a 	mov	r8,zero
1000d020:	0005883a 	mov	r2,zero
1000d024:	003f4c06 	br	1000cd58 <__alt_data_end+0xf800cd58>
1000d028:	498cb03a 	or	r6,r9,r6
1000d02c:	300cc03a 	cmpne	r6,r6,zero
1000d030:	0007883a 	mov	r3,zero
1000d034:	003f6806 	br	1000cdd8 <__alt_data_end+0xf800cdd8>
1000d038:	20009c1e 	bne	r4,zero,1000d2ac <__adddf3+0x630>
1000d03c:	80800044 	addi	r2,r16,1
1000d040:	1141ffcc 	andi	r5,r2,2047
1000d044:	01000044 	movi	r4,1
1000d048:	2140670e 	bge	r4,r5,1000d1e8 <__adddf3+0x56c>
1000d04c:	0101ffc4 	movi	r4,2047
1000d050:	11007f26 	beq	r2,r4,1000d250 <__adddf3+0x5d4>
1000d054:	898d883a 	add	r6,r17,r6
1000d058:	4247883a 	add	r3,r8,r9
1000d05c:	3451803a 	cmpltu	r8,r6,r17
1000d060:	40d1883a 	add	r8,r8,r3
1000d064:	402297fa 	slli	r17,r8,31
1000d068:	300cd07a 	srli	r6,r6,1
1000d06c:	4010d07a 	srli	r8,r8,1
1000d070:	1021883a 	mov	r16,r2
1000d074:	89a2b03a 	or	r17,r17,r6
1000d078:	003f1f06 	br	1000ccf8 <__alt_data_end+0xf800ccf8>
1000d07c:	0081ffc4 	movi	r2,2047
1000d080:	80bf481e 	bne	r16,r2,1000cda4 <__alt_data_end+0xf800cda4>
1000d084:	003f1c06 	br	1000ccf8 <__alt_data_end+0xf800ccf8>
1000d088:	843ff844 	addi	r16,r16,-31
1000d08c:	01000804 	movi	r4,32
1000d090:	1406d83a 	srl	r3,r2,r16
1000d094:	41005026 	beq	r8,r4,1000d1d8 <__adddf3+0x55c>
1000d098:	01001004 	movi	r4,64
1000d09c:	2211c83a 	sub	r8,r4,r8
1000d0a0:	1204983a 	sll	r2,r2,r8
1000d0a4:	88a2b03a 	or	r17,r17,r2
1000d0a8:	8822c03a 	cmpne	r17,r17,zero
1000d0ac:	1c62b03a 	or	r17,r3,r17
1000d0b0:	0011883a 	mov	r8,zero
1000d0b4:	0021883a 	mov	r16,zero
1000d0b8:	003f7106 	br	1000ce80 <__alt_data_end+0xf800ce80>
1000d0bc:	193ff804 	addi	r4,r3,-32
1000d0c0:	00800804 	movi	r2,32
1000d0c4:	4908d83a 	srl	r4,r9,r4
1000d0c8:	18804526 	beq	r3,r2,1000d1e0 <__adddf3+0x564>
1000d0cc:	00801004 	movi	r2,64
1000d0d0:	10c5c83a 	sub	r2,r2,r3
1000d0d4:	4886983a 	sll	r3,r9,r2
1000d0d8:	198cb03a 	or	r6,r3,r6
1000d0dc:	300cc03a 	cmpne	r6,r6,zero
1000d0e0:	218cb03a 	or	r6,r4,r6
1000d0e4:	0007883a 	mov	r3,zero
1000d0e8:	003f3b06 	br	1000cdd8 <__alt_data_end+0xf800cdd8>
1000d0ec:	80002a26 	beq	r16,zero,1000d198 <__adddf3+0x51c>
1000d0f0:	0101ffc4 	movi	r4,2047
1000d0f4:	11006826 	beq	r2,r4,1000d298 <__adddf3+0x61c>
1000d0f8:	00c7c83a 	sub	r3,zero,r3
1000d0fc:	42002034 	orhi	r8,r8,128
1000d100:	01000e04 	movi	r4,56
1000d104:	20c07c16 	blt	r4,r3,1000d2f8 <__adddf3+0x67c>
1000d108:	010007c4 	movi	r4,31
1000d10c:	20c0da16 	blt	r4,r3,1000d478 <__adddf3+0x7fc>
1000d110:	01000804 	movi	r4,32
1000d114:	20c9c83a 	sub	r4,r4,r3
1000d118:	4114983a 	sll	r10,r8,r4
1000d11c:	88cad83a 	srl	r5,r17,r3
1000d120:	8908983a 	sll	r4,r17,r4
1000d124:	40c6d83a 	srl	r3,r8,r3
1000d128:	5162b03a 	or	r17,r10,r5
1000d12c:	2008c03a 	cmpne	r4,r4,zero
1000d130:	8922b03a 	or	r17,r17,r4
1000d134:	3463c83a 	sub	r17,r6,r17
1000d138:	48c7c83a 	sub	r3,r9,r3
1000d13c:	344d803a 	cmpltu	r6,r6,r17
1000d140:	1991c83a 	sub	r8,r3,r6
1000d144:	1021883a 	mov	r16,r2
1000d148:	3825883a 	mov	r18,r7
1000d14c:	003f2706 	br	1000cdec <__alt_data_end+0xf800cdec>
1000d150:	24d0b03a 	or	r8,r4,r19
1000d154:	40001b1e 	bne	r8,zero,1000d1c4 <__adddf3+0x548>
1000d158:	0005883a 	mov	r2,zero
1000d15c:	0007883a 	mov	r3,zero
1000d160:	0021883a 	mov	r16,zero
1000d164:	003f4d06 	br	1000ce9c <__alt_data_end+0xf800ce9c>
1000d168:	008007c4 	movi	r2,31
1000d16c:	11003c16 	blt	r2,r4,1000d260 <__adddf3+0x5e4>
1000d170:	00800804 	movi	r2,32
1000d174:	1105c83a 	sub	r2,r2,r4
1000d178:	488e983a 	sll	r7,r9,r2
1000d17c:	310ad83a 	srl	r5,r6,r4
1000d180:	3084983a 	sll	r2,r6,r2
1000d184:	4912d83a 	srl	r9,r9,r4
1000d188:	394ab03a 	or	r5,r7,r5
1000d18c:	1004c03a 	cmpne	r2,r2,zero
1000d190:	288ab03a 	or	r5,r5,r2
1000d194:	003f5306 	br	1000cee4 <__alt_data_end+0xf800cee4>
1000d198:	4448b03a 	or	r4,r8,r17
1000d19c:	20003e26 	beq	r4,zero,1000d298 <__adddf3+0x61c>
1000d1a0:	00c6303a 	nor	r3,zero,r3
1000d1a4:	18003a1e 	bne	r3,zero,1000d290 <__adddf3+0x614>
1000d1a8:	3463c83a 	sub	r17,r6,r17
1000d1ac:	4a07c83a 	sub	r3,r9,r8
1000d1b0:	344d803a 	cmpltu	r6,r6,r17
1000d1b4:	1991c83a 	sub	r8,r3,r6
1000d1b8:	1021883a 	mov	r16,r2
1000d1bc:	3825883a 	mov	r18,r7
1000d1c0:	003f0a06 	br	1000cdec <__alt_data_end+0xf800cdec>
1000d1c4:	2023883a 	mov	r17,r4
1000d1c8:	003f0d06 	br	1000ce00 <__alt_data_end+0xf800ce00>
1000d1cc:	0081ffc4 	movi	r2,2047
1000d1d0:	80bf3f1e 	bne	r16,r2,1000ced0 <__alt_data_end+0xf800ced0>
1000d1d4:	003ec806 	br	1000ccf8 <__alt_data_end+0xf800ccf8>
1000d1d8:	0005883a 	mov	r2,zero
1000d1dc:	003fb106 	br	1000d0a4 <__alt_data_end+0xf800d0a4>
1000d1e0:	0007883a 	mov	r3,zero
1000d1e4:	003fbc06 	br	1000d0d8 <__alt_data_end+0xf800d0d8>
1000d1e8:	4444b03a 	or	r2,r8,r17
1000d1ec:	8000871e 	bne	r16,zero,1000d40c <__adddf3+0x790>
1000d1f0:	1000ba26 	beq	r2,zero,1000d4dc <__adddf3+0x860>
1000d1f4:	4984b03a 	or	r2,r9,r6
1000d1f8:	103ebf26 	beq	r2,zero,1000ccf8 <__alt_data_end+0xf800ccf8>
1000d1fc:	8985883a 	add	r2,r17,r6
1000d200:	4247883a 	add	r3,r8,r9
1000d204:	1451803a 	cmpltu	r8,r2,r17
1000d208:	40d1883a 	add	r8,r8,r3
1000d20c:	40c0202c 	andhi	r3,r8,128
1000d210:	1023883a 	mov	r17,r2
1000d214:	183f1a26 	beq	r3,zero,1000ce80 <__alt_data_end+0xf800ce80>
1000d218:	00bfe034 	movhi	r2,65408
1000d21c:	10bfffc4 	addi	r2,r2,-1
1000d220:	2021883a 	mov	r16,r4
1000d224:	4090703a 	and	r8,r8,r2
1000d228:	003eb306 	br	1000ccf8 <__alt_data_end+0xf800ccf8>
1000d22c:	4444b03a 	or	r2,r8,r17
1000d230:	8000291e 	bne	r16,zero,1000d2d8 <__adddf3+0x65c>
1000d234:	10004b1e 	bne	r2,zero,1000d364 <__adddf3+0x6e8>
1000d238:	4990b03a 	or	r8,r9,r6
1000d23c:	40008b26 	beq	r8,zero,1000d46c <__adddf3+0x7f0>
1000d240:	4811883a 	mov	r8,r9
1000d244:	3023883a 	mov	r17,r6
1000d248:	3825883a 	mov	r18,r7
1000d24c:	003eaa06 	br	1000ccf8 <__alt_data_end+0xf800ccf8>
1000d250:	1021883a 	mov	r16,r2
1000d254:	0011883a 	mov	r8,zero
1000d258:	0005883a 	mov	r2,zero
1000d25c:	003f0f06 	br	1000ce9c <__alt_data_end+0xf800ce9c>
1000d260:	217ff804 	addi	r5,r4,-32
1000d264:	00800804 	movi	r2,32
1000d268:	494ad83a 	srl	r5,r9,r5
1000d26c:	20807d26 	beq	r4,r2,1000d464 <__adddf3+0x7e8>
1000d270:	00801004 	movi	r2,64
1000d274:	1109c83a 	sub	r4,r2,r4
1000d278:	4912983a 	sll	r9,r9,r4
1000d27c:	498cb03a 	or	r6,r9,r6
1000d280:	300cc03a 	cmpne	r6,r6,zero
1000d284:	298ab03a 	or	r5,r5,r6
1000d288:	0013883a 	mov	r9,zero
1000d28c:	003f1506 	br	1000cee4 <__alt_data_end+0xf800cee4>
1000d290:	0101ffc4 	movi	r4,2047
1000d294:	113f9a1e 	bne	r2,r4,1000d100 <__alt_data_end+0xf800d100>
1000d298:	4811883a 	mov	r8,r9
1000d29c:	3023883a 	mov	r17,r6
1000d2a0:	1021883a 	mov	r16,r2
1000d2a4:	3825883a 	mov	r18,r7
1000d2a8:	003e9306 	br	1000ccf8 <__alt_data_end+0xf800ccf8>
1000d2ac:	8000161e 	bne	r16,zero,1000d308 <__adddf3+0x68c>
1000d2b0:	444ab03a 	or	r5,r8,r17
1000d2b4:	28005126 	beq	r5,zero,1000d3fc <__adddf3+0x780>
1000d2b8:	0108303a 	nor	r4,zero,r4
1000d2bc:	20004d1e 	bne	r4,zero,1000d3f4 <__adddf3+0x778>
1000d2c0:	89a3883a 	add	r17,r17,r6
1000d2c4:	4253883a 	add	r9,r8,r9
1000d2c8:	898d803a 	cmpltu	r6,r17,r6
1000d2cc:	3251883a 	add	r8,r6,r9
1000d2d0:	1021883a 	mov	r16,r2
1000d2d4:	003f0806 	br	1000cef8 <__alt_data_end+0xf800cef8>
1000d2d8:	1000301e 	bne	r2,zero,1000d39c <__adddf3+0x720>
1000d2dc:	4984b03a 	or	r2,r9,r6
1000d2e0:	10007126 	beq	r2,zero,1000d4a8 <__adddf3+0x82c>
1000d2e4:	4811883a 	mov	r8,r9
1000d2e8:	3023883a 	mov	r17,r6
1000d2ec:	3825883a 	mov	r18,r7
1000d2f0:	0401ffc4 	movi	r16,2047
1000d2f4:	003e8006 	br	1000ccf8 <__alt_data_end+0xf800ccf8>
1000d2f8:	4462b03a 	or	r17,r8,r17
1000d2fc:	8822c03a 	cmpne	r17,r17,zero
1000d300:	0007883a 	mov	r3,zero
1000d304:	003f8b06 	br	1000d134 <__alt_data_end+0xf800d134>
1000d308:	0141ffc4 	movi	r5,2047
1000d30c:	11403b26 	beq	r2,r5,1000d3fc <__adddf3+0x780>
1000d310:	0109c83a 	sub	r4,zero,r4
1000d314:	42002034 	orhi	r8,r8,128
1000d318:	01400e04 	movi	r5,56
1000d31c:	29006716 	blt	r5,r4,1000d4bc <__adddf3+0x840>
1000d320:	014007c4 	movi	r5,31
1000d324:	29007016 	blt	r5,r4,1000d4e8 <__adddf3+0x86c>
1000d328:	01400804 	movi	r5,32
1000d32c:	290bc83a 	sub	r5,r5,r4
1000d330:	4154983a 	sll	r10,r8,r5
1000d334:	890ed83a 	srl	r7,r17,r4
1000d338:	894a983a 	sll	r5,r17,r5
1000d33c:	4108d83a 	srl	r4,r8,r4
1000d340:	51e2b03a 	or	r17,r10,r7
1000d344:	280ac03a 	cmpne	r5,r5,zero
1000d348:	8962b03a 	or	r17,r17,r5
1000d34c:	89a3883a 	add	r17,r17,r6
1000d350:	2253883a 	add	r9,r4,r9
1000d354:	898d803a 	cmpltu	r6,r17,r6
1000d358:	3251883a 	add	r8,r6,r9
1000d35c:	1021883a 	mov	r16,r2
1000d360:	003ee506 	br	1000cef8 <__alt_data_end+0xf800cef8>
1000d364:	4984b03a 	or	r2,r9,r6
1000d368:	103e6326 	beq	r2,zero,1000ccf8 <__alt_data_end+0xf800ccf8>
1000d36c:	8987c83a 	sub	r3,r17,r6
1000d370:	88c9803a 	cmpltu	r4,r17,r3
1000d374:	4245c83a 	sub	r2,r8,r9
1000d378:	1105c83a 	sub	r2,r2,r4
1000d37c:	1100202c 	andhi	r4,r2,128
1000d380:	203ebb26 	beq	r4,zero,1000ce70 <__alt_data_end+0xf800ce70>
1000d384:	3463c83a 	sub	r17,r6,r17
1000d388:	4a07c83a 	sub	r3,r9,r8
1000d38c:	344d803a 	cmpltu	r6,r6,r17
1000d390:	1991c83a 	sub	r8,r3,r6
1000d394:	3825883a 	mov	r18,r7
1000d398:	003e5706 	br	1000ccf8 <__alt_data_end+0xf800ccf8>
1000d39c:	4984b03a 	or	r2,r9,r6
1000d3a0:	10002e26 	beq	r2,zero,1000d45c <__adddf3+0x7e0>
1000d3a4:	4004d0fa 	srli	r2,r8,3
1000d3a8:	8822d0fa 	srli	r17,r17,3
1000d3ac:	4010977a 	slli	r8,r8,29
1000d3b0:	10c0022c 	andhi	r3,r2,8
1000d3b4:	4462b03a 	or	r17,r8,r17
1000d3b8:	18000826 	beq	r3,zero,1000d3dc <__adddf3+0x760>
1000d3bc:	4808d0fa 	srli	r4,r9,3
1000d3c0:	20c0022c 	andhi	r3,r4,8
1000d3c4:	1800051e 	bne	r3,zero,1000d3dc <__adddf3+0x760>
1000d3c8:	300cd0fa 	srli	r6,r6,3
1000d3cc:	4806977a 	slli	r3,r9,29
1000d3d0:	2005883a 	mov	r2,r4
1000d3d4:	3825883a 	mov	r18,r7
1000d3d8:	19a2b03a 	or	r17,r3,r6
1000d3dc:	8810d77a 	srli	r8,r17,29
1000d3e0:	100490fa 	slli	r2,r2,3
1000d3e4:	882290fa 	slli	r17,r17,3
1000d3e8:	0401ffc4 	movi	r16,2047
1000d3ec:	4090b03a 	or	r8,r8,r2
1000d3f0:	003e4106 	br	1000ccf8 <__alt_data_end+0xf800ccf8>
1000d3f4:	0141ffc4 	movi	r5,2047
1000d3f8:	117fc71e 	bne	r2,r5,1000d318 <__alt_data_end+0xf800d318>
1000d3fc:	4811883a 	mov	r8,r9
1000d400:	3023883a 	mov	r17,r6
1000d404:	1021883a 	mov	r16,r2
1000d408:	003e3b06 	br	1000ccf8 <__alt_data_end+0xf800ccf8>
1000d40c:	10002f26 	beq	r2,zero,1000d4cc <__adddf3+0x850>
1000d410:	4984b03a 	or	r2,r9,r6
1000d414:	10001126 	beq	r2,zero,1000d45c <__adddf3+0x7e0>
1000d418:	4004d0fa 	srli	r2,r8,3
1000d41c:	8822d0fa 	srli	r17,r17,3
1000d420:	4010977a 	slli	r8,r8,29
1000d424:	10c0022c 	andhi	r3,r2,8
1000d428:	4462b03a 	or	r17,r8,r17
1000d42c:	183feb26 	beq	r3,zero,1000d3dc <__alt_data_end+0xf800d3dc>
1000d430:	4808d0fa 	srli	r4,r9,3
1000d434:	20c0022c 	andhi	r3,r4,8
1000d438:	183fe81e 	bne	r3,zero,1000d3dc <__alt_data_end+0xf800d3dc>
1000d43c:	300cd0fa 	srli	r6,r6,3
1000d440:	4806977a 	slli	r3,r9,29
1000d444:	2005883a 	mov	r2,r4
1000d448:	19a2b03a 	or	r17,r3,r6
1000d44c:	003fe306 	br	1000d3dc <__alt_data_end+0xf800d3dc>
1000d450:	0011883a 	mov	r8,zero
1000d454:	0005883a 	mov	r2,zero
1000d458:	003e3f06 	br	1000cd58 <__alt_data_end+0xf800cd58>
1000d45c:	0401ffc4 	movi	r16,2047
1000d460:	003e2506 	br	1000ccf8 <__alt_data_end+0xf800ccf8>
1000d464:	0013883a 	mov	r9,zero
1000d468:	003f8406 	br	1000d27c <__alt_data_end+0xf800d27c>
1000d46c:	0005883a 	mov	r2,zero
1000d470:	0007883a 	mov	r3,zero
1000d474:	003e8906 	br	1000ce9c <__alt_data_end+0xf800ce9c>
1000d478:	197ff804 	addi	r5,r3,-32
1000d47c:	01000804 	movi	r4,32
1000d480:	414ad83a 	srl	r5,r8,r5
1000d484:	19002426 	beq	r3,r4,1000d518 <__adddf3+0x89c>
1000d488:	01001004 	movi	r4,64
1000d48c:	20c7c83a 	sub	r3,r4,r3
1000d490:	40c6983a 	sll	r3,r8,r3
1000d494:	1c46b03a 	or	r3,r3,r17
1000d498:	1806c03a 	cmpne	r3,r3,zero
1000d49c:	28e2b03a 	or	r17,r5,r3
1000d4a0:	0007883a 	mov	r3,zero
1000d4a4:	003f2306 	br	1000d134 <__alt_data_end+0xf800d134>
1000d4a8:	0007883a 	mov	r3,zero
1000d4ac:	5811883a 	mov	r8,r11
1000d4b0:	00bfffc4 	movi	r2,-1
1000d4b4:	0401ffc4 	movi	r16,2047
1000d4b8:	003e7806 	br	1000ce9c <__alt_data_end+0xf800ce9c>
1000d4bc:	4462b03a 	or	r17,r8,r17
1000d4c0:	8822c03a 	cmpne	r17,r17,zero
1000d4c4:	0009883a 	mov	r4,zero
1000d4c8:	003fa006 	br	1000d34c <__alt_data_end+0xf800d34c>
1000d4cc:	4811883a 	mov	r8,r9
1000d4d0:	3023883a 	mov	r17,r6
1000d4d4:	0401ffc4 	movi	r16,2047
1000d4d8:	003e0706 	br	1000ccf8 <__alt_data_end+0xf800ccf8>
1000d4dc:	4811883a 	mov	r8,r9
1000d4e0:	3023883a 	mov	r17,r6
1000d4e4:	003e0406 	br	1000ccf8 <__alt_data_end+0xf800ccf8>
1000d4e8:	21fff804 	addi	r7,r4,-32
1000d4ec:	01400804 	movi	r5,32
1000d4f0:	41ced83a 	srl	r7,r8,r7
1000d4f4:	21400a26 	beq	r4,r5,1000d520 <__adddf3+0x8a4>
1000d4f8:	01401004 	movi	r5,64
1000d4fc:	2909c83a 	sub	r4,r5,r4
1000d500:	4108983a 	sll	r4,r8,r4
1000d504:	2448b03a 	or	r4,r4,r17
1000d508:	2008c03a 	cmpne	r4,r4,zero
1000d50c:	3922b03a 	or	r17,r7,r4
1000d510:	0009883a 	mov	r4,zero
1000d514:	003f8d06 	br	1000d34c <__alt_data_end+0xf800d34c>
1000d518:	0007883a 	mov	r3,zero
1000d51c:	003fdd06 	br	1000d494 <__alt_data_end+0xf800d494>
1000d520:	0009883a 	mov	r4,zero
1000d524:	003ff706 	br	1000d504 <__alt_data_end+0xf800d504>

1000d528 <__divdf3>:
1000d528:	defff004 	addi	sp,sp,-64
1000d52c:	dc800815 	stw	r18,32(sp)
1000d530:	2824d53a 	srli	r18,r5,20
1000d534:	dd800c15 	stw	r22,48(sp)
1000d538:	282cd7fa 	srli	r22,r5,31
1000d53c:	dc000615 	stw	r16,24(sp)
1000d540:	04000434 	movhi	r16,16
1000d544:	843fffc4 	addi	r16,r16,-1
1000d548:	dfc00f15 	stw	ra,60(sp)
1000d54c:	df000e15 	stw	fp,56(sp)
1000d550:	ddc00d15 	stw	r23,52(sp)
1000d554:	dd400b15 	stw	r21,44(sp)
1000d558:	dd000a15 	stw	r20,40(sp)
1000d55c:	dcc00915 	stw	r19,36(sp)
1000d560:	dc400715 	stw	r17,28(sp)
1000d564:	9481ffcc 	andi	r18,r18,2047
1000d568:	2c20703a 	and	r16,r5,r16
1000d56c:	b2003fcc 	andi	r8,r22,255
1000d570:	90006126 	beq	r18,zero,1000d6f8 <__divdf3+0x1d0>
1000d574:	0081ffc4 	movi	r2,2047
1000d578:	202b883a 	mov	r21,r4
1000d57c:	90803726 	beq	r18,r2,1000d65c <__divdf3+0x134>
1000d580:	80800434 	orhi	r2,r16,16
1000d584:	100490fa 	slli	r2,r2,3
1000d588:	2020d77a 	srli	r16,r4,29
1000d58c:	202a90fa 	slli	r21,r4,3
1000d590:	94bf0044 	addi	r18,r18,-1023
1000d594:	80a0b03a 	or	r16,r16,r2
1000d598:	0013883a 	mov	r9,zero
1000d59c:	000b883a 	mov	r5,zero
1000d5a0:	3806d53a 	srli	r3,r7,20
1000d5a4:	382ed7fa 	srli	r23,r7,31
1000d5a8:	04400434 	movhi	r17,16
1000d5ac:	8c7fffc4 	addi	r17,r17,-1
1000d5b0:	18c1ffcc 	andi	r3,r3,2047
1000d5b4:	3029883a 	mov	r20,r6
1000d5b8:	3c62703a 	and	r17,r7,r17
1000d5bc:	bf003fcc 	andi	fp,r23,255
1000d5c0:	18006e26 	beq	r3,zero,1000d77c <__divdf3+0x254>
1000d5c4:	0081ffc4 	movi	r2,2047
1000d5c8:	18806626 	beq	r3,r2,1000d764 <__divdf3+0x23c>
1000d5cc:	88800434 	orhi	r2,r17,16
1000d5d0:	100490fa 	slli	r2,r2,3
1000d5d4:	3022d77a 	srli	r17,r6,29
1000d5d8:	302890fa 	slli	r20,r6,3
1000d5dc:	18ff0044 	addi	r3,r3,-1023
1000d5e0:	88a2b03a 	or	r17,r17,r2
1000d5e4:	000f883a 	mov	r7,zero
1000d5e8:	b5e6f03a 	xor	r19,r22,r23
1000d5ec:	3a4cb03a 	or	r6,r7,r9
1000d5f0:	008003c4 	movi	r2,15
1000d5f4:	9809883a 	mov	r4,r19
1000d5f8:	90c7c83a 	sub	r3,r18,r3
1000d5fc:	9cc03fcc 	andi	r19,r19,255
1000d600:	11809636 	bltu	r2,r6,1000d85c <__divdf3+0x334>
1000d604:	300c90ba 	slli	r6,r6,2
1000d608:	00840074 	movhi	r2,4097
1000d60c:	10b58704 	addi	r2,r2,-10724
1000d610:	308d883a 	add	r6,r6,r2
1000d614:	30800017 	ldw	r2,0(r6)
1000d618:	1000683a 	jmp	r2
1000d61c:	1000d85c 	xori	zero,r2,865
1000d620:	1000d694 	ori	zero,r2,858
1000d624:	1000d84c 	andi	zero,r2,865
1000d628:	1000d688 	cmpgei	zero,r2,858
1000d62c:	1000d84c 	andi	zero,r2,865
1000d630:	1000d820 	cmpeqi	zero,r2,864
1000d634:	1000d84c 	andi	zero,r2,865
1000d638:	1000d688 	cmpgei	zero,r2,858
1000d63c:	1000d694 	ori	zero,r2,858
1000d640:	1000d694 	ori	zero,r2,858
1000d644:	1000d820 	cmpeqi	zero,r2,864
1000d648:	1000d688 	cmpgei	zero,r2,858
1000d64c:	1000d678 	rdprs	zero,r2,857
1000d650:	1000d678 	rdprs	zero,r2,857
1000d654:	1000d678 	rdprs	zero,r2,857
1000d658:	1000dbe4 	muli	zero,r2,879
1000d65c:	2404b03a 	or	r2,r4,r16
1000d660:	10006c1e 	bne	r2,zero,1000d814 <__divdf3+0x2ec>
1000d664:	02400204 	movi	r9,8
1000d668:	0021883a 	mov	r16,zero
1000d66c:	002b883a 	mov	r21,zero
1000d670:	01400084 	movi	r5,2
1000d674:	003fca06 	br	1000d5a0 <__alt_data_end+0xf800d5a0>
1000d678:	8023883a 	mov	r17,r16
1000d67c:	a829883a 	mov	r20,r21
1000d680:	4039883a 	mov	fp,r8
1000d684:	280f883a 	mov	r7,r5
1000d688:	00800084 	movi	r2,2
1000d68c:	3881601e 	bne	r7,r2,1000dc10 <__divdf3+0x6e8>
1000d690:	e027883a 	mov	r19,fp
1000d694:	9900004c 	andi	r4,r19,1
1000d698:	0081ffc4 	movi	r2,2047
1000d69c:	0021883a 	mov	r16,zero
1000d6a0:	002b883a 	mov	r21,zero
1000d6a4:	1004953a 	slli	r2,r2,20
1000d6a8:	20c03fcc 	andi	r3,r4,255
1000d6ac:	01400434 	movhi	r5,16
1000d6b0:	297fffc4 	addi	r5,r5,-1
1000d6b4:	180697fa 	slli	r3,r3,31
1000d6b8:	8160703a 	and	r16,r16,r5
1000d6bc:	80a0b03a 	or	r16,r16,r2
1000d6c0:	80c6b03a 	or	r3,r16,r3
1000d6c4:	a805883a 	mov	r2,r21
1000d6c8:	dfc00f17 	ldw	ra,60(sp)
1000d6cc:	df000e17 	ldw	fp,56(sp)
1000d6d0:	ddc00d17 	ldw	r23,52(sp)
1000d6d4:	dd800c17 	ldw	r22,48(sp)
1000d6d8:	dd400b17 	ldw	r21,44(sp)
1000d6dc:	dd000a17 	ldw	r20,40(sp)
1000d6e0:	dcc00917 	ldw	r19,36(sp)
1000d6e4:	dc800817 	ldw	r18,32(sp)
1000d6e8:	dc400717 	ldw	r17,28(sp)
1000d6ec:	dc000617 	ldw	r16,24(sp)
1000d6f0:	dec01004 	addi	sp,sp,64
1000d6f4:	f800283a 	ret
1000d6f8:	2404b03a 	or	r2,r4,r16
1000d6fc:	2023883a 	mov	r17,r4
1000d700:	10003f26 	beq	r2,zero,1000d800 <__divdf3+0x2d8>
1000d704:	80015e26 	beq	r16,zero,1000dc80 <__divdf3+0x758>
1000d708:	8009883a 	mov	r4,r16
1000d70c:	d9800215 	stw	r6,8(sp)
1000d710:	d9c00515 	stw	r7,20(sp)
1000d714:	da000415 	stw	r8,16(sp)
1000d718:	000f4bc0 	call	1000f4bc <__clzsi2>
1000d71c:	d9800217 	ldw	r6,8(sp)
1000d720:	d9c00517 	ldw	r7,20(sp)
1000d724:	da000417 	ldw	r8,16(sp)
1000d728:	113ffd44 	addi	r4,r2,-11
1000d72c:	00c00704 	movi	r3,28
1000d730:	19014f16 	blt	r3,r4,1000dc70 <__divdf3+0x748>
1000d734:	00c00744 	movi	r3,29
1000d738:	157ffe04 	addi	r21,r2,-8
1000d73c:	1907c83a 	sub	r3,r3,r4
1000d740:	8560983a 	sll	r16,r16,r21
1000d744:	88c6d83a 	srl	r3,r17,r3
1000d748:	8d6a983a 	sll	r21,r17,r21
1000d74c:	1c20b03a 	or	r16,r3,r16
1000d750:	1080fcc4 	addi	r2,r2,1011
1000d754:	00a5c83a 	sub	r18,zero,r2
1000d758:	0013883a 	mov	r9,zero
1000d75c:	000b883a 	mov	r5,zero
1000d760:	003f8f06 	br	1000d5a0 <__alt_data_end+0xf800d5a0>
1000d764:	3444b03a 	or	r2,r6,r17
1000d768:	1000231e 	bne	r2,zero,1000d7f8 <__divdf3+0x2d0>
1000d76c:	0023883a 	mov	r17,zero
1000d770:	0029883a 	mov	r20,zero
1000d774:	01c00084 	movi	r7,2
1000d778:	003f9b06 	br	1000d5e8 <__alt_data_end+0xf800d5e8>
1000d77c:	3444b03a 	or	r2,r6,r17
1000d780:	10001926 	beq	r2,zero,1000d7e8 <__divdf3+0x2c0>
1000d784:	88014b26 	beq	r17,zero,1000dcb4 <__divdf3+0x78c>
1000d788:	8809883a 	mov	r4,r17
1000d78c:	d9400115 	stw	r5,4(sp)
1000d790:	d9800215 	stw	r6,8(sp)
1000d794:	da000415 	stw	r8,16(sp)
1000d798:	da400315 	stw	r9,12(sp)
1000d79c:	000f4bc0 	call	1000f4bc <__clzsi2>
1000d7a0:	d9400117 	ldw	r5,4(sp)
1000d7a4:	d9800217 	ldw	r6,8(sp)
1000d7a8:	da000417 	ldw	r8,16(sp)
1000d7ac:	da400317 	ldw	r9,12(sp)
1000d7b0:	113ffd44 	addi	r4,r2,-11
1000d7b4:	00c00704 	movi	r3,28
1000d7b8:	19013a16 	blt	r3,r4,1000dca4 <__divdf3+0x77c>
1000d7bc:	00c00744 	movi	r3,29
1000d7c0:	153ffe04 	addi	r20,r2,-8
1000d7c4:	1907c83a 	sub	r3,r3,r4
1000d7c8:	8d22983a 	sll	r17,r17,r20
1000d7cc:	30c6d83a 	srl	r3,r6,r3
1000d7d0:	3528983a 	sll	r20,r6,r20
1000d7d4:	1c62b03a 	or	r17,r3,r17
1000d7d8:	1080fcc4 	addi	r2,r2,1011
1000d7dc:	0087c83a 	sub	r3,zero,r2
1000d7e0:	000f883a 	mov	r7,zero
1000d7e4:	003f8006 	br	1000d5e8 <__alt_data_end+0xf800d5e8>
1000d7e8:	0023883a 	mov	r17,zero
1000d7ec:	0029883a 	mov	r20,zero
1000d7f0:	01c00044 	movi	r7,1
1000d7f4:	003f7c06 	br	1000d5e8 <__alt_data_end+0xf800d5e8>
1000d7f8:	01c000c4 	movi	r7,3
1000d7fc:	003f7a06 	br	1000d5e8 <__alt_data_end+0xf800d5e8>
1000d800:	02400104 	movi	r9,4
1000d804:	0021883a 	mov	r16,zero
1000d808:	002b883a 	mov	r21,zero
1000d80c:	01400044 	movi	r5,1
1000d810:	003f6306 	br	1000d5a0 <__alt_data_end+0xf800d5a0>
1000d814:	02400304 	movi	r9,12
1000d818:	014000c4 	movi	r5,3
1000d81c:	003f6006 	br	1000d5a0 <__alt_data_end+0xf800d5a0>
1000d820:	04000434 	movhi	r16,16
1000d824:	0009883a 	mov	r4,zero
1000d828:	843fffc4 	addi	r16,r16,-1
1000d82c:	057fffc4 	movi	r21,-1
1000d830:	0081ffc4 	movi	r2,2047
1000d834:	003f9b06 	br	1000d6a4 <__alt_data_end+0xf800d6a4>
1000d838:	00c00044 	movi	r3,1
1000d83c:	1887c83a 	sub	r3,r3,r2
1000d840:	01000e04 	movi	r4,56
1000d844:	20c1530e 	bge	r4,r3,1000dd94 <__divdf3+0x86c>
1000d848:	9900004c 	andi	r4,r19,1
1000d84c:	0005883a 	mov	r2,zero
1000d850:	0021883a 	mov	r16,zero
1000d854:	002b883a 	mov	r21,zero
1000d858:	003f9206 	br	1000d6a4 <__alt_data_end+0xf800d6a4>
1000d85c:	8c012e36 	bltu	r17,r16,1000dd18 <__divdf3+0x7f0>
1000d860:	84412c26 	beq	r16,r17,1000dd14 <__divdf3+0x7ec>
1000d864:	a82f883a 	mov	r23,r21
1000d868:	18ffffc4 	addi	r3,r3,-1
1000d86c:	002b883a 	mov	r21,zero
1000d870:	a004d63a 	srli	r2,r20,24
1000d874:	8822923a 	slli	r17,r17,8
1000d878:	a028923a 	slli	r20,r20,8
1000d87c:	8009883a 	mov	r4,r16
1000d880:	88acb03a 	or	r22,r17,r2
1000d884:	dd000015 	stw	r20,0(sp)
1000d888:	b028d43a 	srli	r20,r22,16
1000d88c:	d8c00215 	stw	r3,8(sp)
1000d890:	b4bfffcc 	andi	r18,r22,65535
1000d894:	a00b883a 	mov	r5,r20
1000d898:	00010180 	call	10001018 <__udivsi3>
1000d89c:	100b883a 	mov	r5,r2
1000d8a0:	9009883a 	mov	r4,r18
1000d8a4:	1023883a 	mov	r17,r2
1000d8a8:	00010d40 	call	100010d4 <__mulsi3>
1000d8ac:	8009883a 	mov	r4,r16
1000d8b0:	a00b883a 	mov	r5,r20
1000d8b4:	1039883a 	mov	fp,r2
1000d8b8:	000107c0 	call	1000107c <__umodsi3>
1000d8bc:	1004943a 	slli	r2,r2,16
1000d8c0:	b808d43a 	srli	r4,r23,16
1000d8c4:	d8c00217 	ldw	r3,8(sp)
1000d8c8:	2084b03a 	or	r2,r4,r2
1000d8cc:	1700062e 	bgeu	r2,fp,1000d8e8 <__divdf3+0x3c0>
1000d8d0:	1585883a 	add	r2,r2,r22
1000d8d4:	893fffc4 	addi	r4,r17,-1
1000d8d8:	15811d36 	bltu	r2,r22,1000dd50 <__divdf3+0x828>
1000d8dc:	17011c2e 	bgeu	r2,fp,1000dd50 <__divdf3+0x828>
1000d8e0:	8c7fff84 	addi	r17,r17,-2
1000d8e4:	1585883a 	add	r2,r2,r22
1000d8e8:	1739c83a 	sub	fp,r2,fp
1000d8ec:	a00b883a 	mov	r5,r20
1000d8f0:	e009883a 	mov	r4,fp
1000d8f4:	d8c00215 	stw	r3,8(sp)
1000d8f8:	00010180 	call	10001018 <__udivsi3>
1000d8fc:	100b883a 	mov	r5,r2
1000d900:	9009883a 	mov	r4,r18
1000d904:	1021883a 	mov	r16,r2
1000d908:	00010d40 	call	100010d4 <__mulsi3>
1000d90c:	a00b883a 	mov	r5,r20
1000d910:	e009883a 	mov	r4,fp
1000d914:	d8800415 	stw	r2,16(sp)
1000d918:	000107c0 	call	1000107c <__umodsi3>
1000d91c:	1004943a 	slli	r2,r2,16
1000d920:	da000417 	ldw	r8,16(sp)
1000d924:	bdffffcc 	andi	r23,r23,65535
1000d928:	b884b03a 	or	r2,r23,r2
1000d92c:	d8c00217 	ldw	r3,8(sp)
1000d930:	1200062e 	bgeu	r2,r8,1000d94c <__divdf3+0x424>
1000d934:	1585883a 	add	r2,r2,r22
1000d938:	813fffc4 	addi	r4,r16,-1
1000d93c:	15810236 	bltu	r2,r22,1000dd48 <__divdf3+0x820>
1000d940:	1201012e 	bgeu	r2,r8,1000dd48 <__divdf3+0x820>
1000d944:	843fff84 	addi	r16,r16,-2
1000d948:	1585883a 	add	r2,r2,r22
1000d94c:	8822943a 	slli	r17,r17,16
1000d950:	d9800017 	ldw	r6,0(sp)
1000d954:	1211c83a 	sub	r8,r2,r8
1000d958:	8c22b03a 	or	r17,r17,r16
1000d95c:	373fffcc 	andi	fp,r6,65535
1000d960:	8abfffcc 	andi	r10,r17,65535
1000d964:	8820d43a 	srli	r16,r17,16
1000d968:	5009883a 	mov	r4,r10
1000d96c:	e00b883a 	mov	r5,fp
1000d970:	302ed43a 	srli	r23,r6,16
1000d974:	d8c00215 	stw	r3,8(sp)
1000d978:	da000415 	stw	r8,16(sp)
1000d97c:	da800115 	stw	r10,4(sp)
1000d980:	00010d40 	call	100010d4 <__mulsi3>
1000d984:	800b883a 	mov	r5,r16
1000d988:	e009883a 	mov	r4,fp
1000d98c:	d8800515 	stw	r2,20(sp)
1000d990:	00010d40 	call	100010d4 <__mulsi3>
1000d994:	8009883a 	mov	r4,r16
1000d998:	b80b883a 	mov	r5,r23
1000d99c:	d8800315 	stw	r2,12(sp)
1000d9a0:	00010d40 	call	100010d4 <__mulsi3>
1000d9a4:	da800117 	ldw	r10,4(sp)
1000d9a8:	b80b883a 	mov	r5,r23
1000d9ac:	1021883a 	mov	r16,r2
1000d9b0:	5009883a 	mov	r4,r10
1000d9b4:	00010d40 	call	100010d4 <__mulsi3>
1000d9b8:	d9c00517 	ldw	r7,20(sp)
1000d9bc:	da400317 	ldw	r9,12(sp)
1000d9c0:	d8c00217 	ldw	r3,8(sp)
1000d9c4:	3808d43a 	srli	r4,r7,16
1000d9c8:	1245883a 	add	r2,r2,r9
1000d9cc:	da000417 	ldw	r8,16(sp)
1000d9d0:	2085883a 	add	r2,r4,r2
1000d9d4:	1240022e 	bgeu	r2,r9,1000d9e0 <__divdf3+0x4b8>
1000d9d8:	01000074 	movhi	r4,1
1000d9dc:	8121883a 	add	r16,r16,r4
1000d9e0:	1008d43a 	srli	r4,r2,16
1000d9e4:	1004943a 	slli	r2,r2,16
1000d9e8:	39ffffcc 	andi	r7,r7,65535
1000d9ec:	2409883a 	add	r4,r4,r16
1000d9f0:	11c5883a 	add	r2,r2,r7
1000d9f4:	4100bb36 	bltu	r8,r4,1000dce4 <__divdf3+0x7bc>
1000d9f8:	4100d726 	beq	r8,r4,1000dd58 <__divdf3+0x830>
1000d9fc:	4109c83a 	sub	r4,r8,r4
1000da00:	a8a1c83a 	sub	r16,r21,r2
1000da04:	ac2b803a 	cmpltu	r21,r21,r16
1000da08:	256bc83a 	sub	r21,r4,r21
1000da0c:	b540d926 	beq	r22,r21,1000dd74 <__divdf3+0x84c>
1000da10:	a00b883a 	mov	r5,r20
1000da14:	a809883a 	mov	r4,r21
1000da18:	d8c00215 	stw	r3,8(sp)
1000da1c:	00010180 	call	10001018 <__udivsi3>
1000da20:	100b883a 	mov	r5,r2
1000da24:	9009883a 	mov	r4,r18
1000da28:	d8800515 	stw	r2,20(sp)
1000da2c:	00010d40 	call	100010d4 <__mulsi3>
1000da30:	a809883a 	mov	r4,r21
1000da34:	a00b883a 	mov	r5,r20
1000da38:	d8800415 	stw	r2,16(sp)
1000da3c:	000107c0 	call	1000107c <__umodsi3>
1000da40:	1004943a 	slli	r2,r2,16
1000da44:	8008d43a 	srli	r4,r16,16
1000da48:	da000417 	ldw	r8,16(sp)
1000da4c:	d8c00217 	ldw	r3,8(sp)
1000da50:	2084b03a 	or	r2,r4,r2
1000da54:	d9c00517 	ldw	r7,20(sp)
1000da58:	1200062e 	bgeu	r2,r8,1000da74 <__divdf3+0x54c>
1000da5c:	1585883a 	add	r2,r2,r22
1000da60:	393fffc4 	addi	r4,r7,-1
1000da64:	1580c536 	bltu	r2,r22,1000dd7c <__divdf3+0x854>
1000da68:	1200c42e 	bgeu	r2,r8,1000dd7c <__divdf3+0x854>
1000da6c:	39ffff84 	addi	r7,r7,-2
1000da70:	1585883a 	add	r2,r2,r22
1000da74:	122bc83a 	sub	r21,r2,r8
1000da78:	a00b883a 	mov	r5,r20
1000da7c:	a809883a 	mov	r4,r21
1000da80:	d8c00215 	stw	r3,8(sp)
1000da84:	d9c00515 	stw	r7,20(sp)
1000da88:	00010180 	call	10001018 <__udivsi3>
1000da8c:	9009883a 	mov	r4,r18
1000da90:	100b883a 	mov	r5,r2
1000da94:	d8800415 	stw	r2,16(sp)
1000da98:	00010d40 	call	100010d4 <__mulsi3>
1000da9c:	a809883a 	mov	r4,r21
1000daa0:	a00b883a 	mov	r5,r20
1000daa4:	1025883a 	mov	r18,r2
1000daa8:	000107c0 	call	1000107c <__umodsi3>
1000daac:	1004943a 	slli	r2,r2,16
1000dab0:	813fffcc 	andi	r4,r16,65535
1000dab4:	d8c00217 	ldw	r3,8(sp)
1000dab8:	20a0b03a 	or	r16,r4,r2
1000dabc:	d9c00517 	ldw	r7,20(sp)
1000dac0:	da000417 	ldw	r8,16(sp)
1000dac4:	8480062e 	bgeu	r16,r18,1000dae0 <__divdf3+0x5b8>
1000dac8:	85a1883a 	add	r16,r16,r22
1000dacc:	40bfffc4 	addi	r2,r8,-1
1000dad0:	8580ac36 	bltu	r16,r22,1000dd84 <__divdf3+0x85c>
1000dad4:	8480ab2e 	bgeu	r16,r18,1000dd84 <__divdf3+0x85c>
1000dad8:	423fff84 	addi	r8,r8,-2
1000dadc:	85a1883a 	add	r16,r16,r22
1000dae0:	3804943a 	slli	r2,r7,16
1000dae4:	84a1c83a 	sub	r16,r16,r18
1000dae8:	e009883a 	mov	r4,fp
1000daec:	1228b03a 	or	r20,r2,r8
1000daf0:	a1ffffcc 	andi	r7,r20,65535
1000daf4:	a024d43a 	srli	r18,r20,16
1000daf8:	380b883a 	mov	r5,r7
1000dafc:	d8c00215 	stw	r3,8(sp)
1000db00:	d9c00515 	stw	r7,20(sp)
1000db04:	00010d40 	call	100010d4 <__mulsi3>
1000db08:	900b883a 	mov	r5,r18
1000db0c:	e009883a 	mov	r4,fp
1000db10:	102b883a 	mov	r21,r2
1000db14:	00010d40 	call	100010d4 <__mulsi3>
1000db18:	900b883a 	mov	r5,r18
1000db1c:	b809883a 	mov	r4,r23
1000db20:	1039883a 	mov	fp,r2
1000db24:	00010d40 	call	100010d4 <__mulsi3>
1000db28:	d9c00517 	ldw	r7,20(sp)
1000db2c:	b80b883a 	mov	r5,r23
1000db30:	1025883a 	mov	r18,r2
1000db34:	3809883a 	mov	r4,r7
1000db38:	00010d40 	call	100010d4 <__mulsi3>
1000db3c:	a808d43a 	srli	r4,r21,16
1000db40:	1705883a 	add	r2,r2,fp
1000db44:	d8c00217 	ldw	r3,8(sp)
1000db48:	2085883a 	add	r2,r4,r2
1000db4c:	1700022e 	bgeu	r2,fp,1000db58 <__divdf3+0x630>
1000db50:	01000074 	movhi	r4,1
1000db54:	9125883a 	add	r18,r18,r4
1000db58:	1008d43a 	srli	r4,r2,16
1000db5c:	1004943a 	slli	r2,r2,16
1000db60:	ad7fffcc 	andi	r21,r21,65535
1000db64:	2489883a 	add	r4,r4,r18
1000db68:	1545883a 	add	r2,r2,r21
1000db6c:	81003836 	bltu	r16,r4,1000dc50 <__divdf3+0x728>
1000db70:	81003626 	beq	r16,r4,1000dc4c <__divdf3+0x724>
1000db74:	a5000054 	ori	r20,r20,1
1000db78:	1880ffc4 	addi	r2,r3,1023
1000db7c:	00bf2e0e 	bge	zero,r2,1000d838 <__alt_data_end+0xf800d838>
1000db80:	a10001cc 	andi	r4,r20,7
1000db84:	20000726 	beq	r4,zero,1000dba4 <__divdf3+0x67c>
1000db88:	a10003cc 	andi	r4,r20,15
1000db8c:	01400104 	movi	r5,4
1000db90:	21400426 	beq	r4,r5,1000dba4 <__divdf3+0x67c>
1000db94:	a149883a 	add	r4,r20,r5
1000db98:	2529803a 	cmpltu	r20,r4,r20
1000db9c:	8d23883a 	add	r17,r17,r20
1000dba0:	2029883a 	mov	r20,r4
1000dba4:	8900402c 	andhi	r4,r17,256
1000dba8:	20000426 	beq	r4,zero,1000dbbc <__divdf3+0x694>
1000dbac:	18810004 	addi	r2,r3,1024
1000dbb0:	00ffc034 	movhi	r3,65280
1000dbb4:	18ffffc4 	addi	r3,r3,-1
1000dbb8:	88e2703a 	and	r17,r17,r3
1000dbbc:	00c1ff84 	movi	r3,2046
1000dbc0:	18beb416 	blt	r3,r2,1000d694 <__alt_data_end+0xf800d694>
1000dbc4:	a028d0fa 	srli	r20,r20,3
1000dbc8:	882a977a 	slli	r21,r17,29
1000dbcc:	8820927a 	slli	r16,r17,9
1000dbd0:	1081ffcc 	andi	r2,r2,2047
1000dbd4:	ad2ab03a 	or	r21,r21,r20
1000dbd8:	8020d33a 	srli	r16,r16,12
1000dbdc:	9900004c 	andi	r4,r19,1
1000dbe0:	003eb006 	br	1000d6a4 <__alt_data_end+0xf800d6a4>
1000dbe4:	8080022c 	andhi	r2,r16,8
1000dbe8:	10001226 	beq	r2,zero,1000dc34 <__divdf3+0x70c>
1000dbec:	8880022c 	andhi	r2,r17,8
1000dbf0:	1000101e 	bne	r2,zero,1000dc34 <__divdf3+0x70c>
1000dbf4:	00800434 	movhi	r2,16
1000dbf8:	8c000234 	orhi	r16,r17,8
1000dbfc:	10bfffc4 	addi	r2,r2,-1
1000dc00:	b809883a 	mov	r4,r23
1000dc04:	80a0703a 	and	r16,r16,r2
1000dc08:	a02b883a 	mov	r21,r20
1000dc0c:	003f0806 	br	1000d830 <__alt_data_end+0xf800d830>
1000dc10:	008000c4 	movi	r2,3
1000dc14:	3880b126 	beq	r7,r2,1000dedc <__divdf3+0x9b4>
1000dc18:	00800044 	movi	r2,1
1000dc1c:	38805b1e 	bne	r7,r2,1000dd8c <__divdf3+0x864>
1000dc20:	e009883a 	mov	r4,fp
1000dc24:	0005883a 	mov	r2,zero
1000dc28:	0021883a 	mov	r16,zero
1000dc2c:	002b883a 	mov	r21,zero
1000dc30:	003e9c06 	br	1000d6a4 <__alt_data_end+0xf800d6a4>
1000dc34:	00800434 	movhi	r2,16
1000dc38:	84000234 	orhi	r16,r16,8
1000dc3c:	10bfffc4 	addi	r2,r2,-1
1000dc40:	b009883a 	mov	r4,r22
1000dc44:	80a0703a 	and	r16,r16,r2
1000dc48:	003ef906 	br	1000d830 <__alt_data_end+0xf800d830>
1000dc4c:	103fca26 	beq	r2,zero,1000db78 <__alt_data_end+0xf800db78>
1000dc50:	b421883a 	add	r16,r22,r16
1000dc54:	a17fffc4 	addi	r5,r20,-1
1000dc58:	8580422e 	bgeu	r16,r22,1000dd64 <__divdf3+0x83c>
1000dc5c:	2829883a 	mov	r20,r5
1000dc60:	813fc41e 	bne	r16,r4,1000db74 <__alt_data_end+0xf800db74>
1000dc64:	d9800017 	ldw	r6,0(sp)
1000dc68:	30bfc21e 	bne	r6,r2,1000db74 <__alt_data_end+0xf800db74>
1000dc6c:	003fc206 	br	1000db78 <__alt_data_end+0xf800db78>
1000dc70:	143ff604 	addi	r16,r2,-40
1000dc74:	8c20983a 	sll	r16,r17,r16
1000dc78:	002b883a 	mov	r21,zero
1000dc7c:	003eb406 	br	1000d750 <__alt_data_end+0xf800d750>
1000dc80:	d9800215 	stw	r6,8(sp)
1000dc84:	d9c00515 	stw	r7,20(sp)
1000dc88:	da000415 	stw	r8,16(sp)
1000dc8c:	000f4bc0 	call	1000f4bc <__clzsi2>
1000dc90:	10800804 	addi	r2,r2,32
1000dc94:	da000417 	ldw	r8,16(sp)
1000dc98:	d9c00517 	ldw	r7,20(sp)
1000dc9c:	d9800217 	ldw	r6,8(sp)
1000dca0:	003ea106 	br	1000d728 <__alt_data_end+0xf800d728>
1000dca4:	147ff604 	addi	r17,r2,-40
1000dca8:	3462983a 	sll	r17,r6,r17
1000dcac:	0029883a 	mov	r20,zero
1000dcb0:	003ec906 	br	1000d7d8 <__alt_data_end+0xf800d7d8>
1000dcb4:	3009883a 	mov	r4,r6
1000dcb8:	d9400115 	stw	r5,4(sp)
1000dcbc:	d9800215 	stw	r6,8(sp)
1000dcc0:	da000415 	stw	r8,16(sp)
1000dcc4:	da400315 	stw	r9,12(sp)
1000dcc8:	000f4bc0 	call	1000f4bc <__clzsi2>
1000dccc:	10800804 	addi	r2,r2,32
1000dcd0:	da400317 	ldw	r9,12(sp)
1000dcd4:	da000417 	ldw	r8,16(sp)
1000dcd8:	d9800217 	ldw	r6,8(sp)
1000dcdc:	d9400117 	ldw	r5,4(sp)
1000dce0:	003eb306 	br	1000d7b0 <__alt_data_end+0xf800d7b0>
1000dce4:	d9800017 	ldw	r6,0(sp)
1000dce8:	a9ab883a 	add	r21,r21,r6
1000dcec:	a98b803a 	cmpltu	r5,r21,r6
1000dcf0:	2d8b883a 	add	r5,r5,r22
1000dcf4:	2a11883a 	add	r8,r5,r8
1000dcf8:	897fffc4 	addi	r5,r17,-1
1000dcfc:	b2000c2e 	bgeu	r22,r8,1000dd30 <__divdf3+0x808>
1000dd00:	41003f36 	bltu	r8,r4,1000de00 <__divdf3+0x8d8>
1000dd04:	22006c26 	beq	r4,r8,1000deb8 <__divdf3+0x990>
1000dd08:	4109c83a 	sub	r4,r8,r4
1000dd0c:	2823883a 	mov	r17,r5
1000dd10:	003f3b06 	br	1000da00 <__alt_data_end+0xf800da00>
1000dd14:	ad3ed336 	bltu	r21,r20,1000d864 <__alt_data_end+0xf800d864>
1000dd18:	a804d07a 	srli	r2,r21,1
1000dd1c:	802e97fa 	slli	r23,r16,31
1000dd20:	a82a97fa 	slli	r21,r21,31
1000dd24:	8020d07a 	srli	r16,r16,1
1000dd28:	b8aeb03a 	or	r23,r23,r2
1000dd2c:	003ed006 	br	1000d870 <__alt_data_end+0xf800d870>
1000dd30:	b23ff51e 	bne	r22,r8,1000dd08 <__alt_data_end+0xf800dd08>
1000dd34:	d9800017 	ldw	r6,0(sp)
1000dd38:	a9bff12e 	bgeu	r21,r6,1000dd00 <__alt_data_end+0xf800dd00>
1000dd3c:	b109c83a 	sub	r4,r22,r4
1000dd40:	2823883a 	mov	r17,r5
1000dd44:	003f2e06 	br	1000da00 <__alt_data_end+0xf800da00>
1000dd48:	2021883a 	mov	r16,r4
1000dd4c:	003eff06 	br	1000d94c <__alt_data_end+0xf800d94c>
1000dd50:	2023883a 	mov	r17,r4
1000dd54:	003ee406 	br	1000d8e8 <__alt_data_end+0xf800d8e8>
1000dd58:	a8bfe236 	bltu	r21,r2,1000dce4 <__alt_data_end+0xf800dce4>
1000dd5c:	0009883a 	mov	r4,zero
1000dd60:	003f2706 	br	1000da00 <__alt_data_end+0xf800da00>
1000dd64:	81002d36 	bltu	r16,r4,1000de1c <__divdf3+0x8f4>
1000dd68:	24005626 	beq	r4,r16,1000dec4 <__divdf3+0x99c>
1000dd6c:	2829883a 	mov	r20,r5
1000dd70:	003f8006 	br	1000db74 <__alt_data_end+0xf800db74>
1000dd74:	053fffc4 	movi	r20,-1
1000dd78:	003f7f06 	br	1000db78 <__alt_data_end+0xf800db78>
1000dd7c:	200f883a 	mov	r7,r4
1000dd80:	003f3c06 	br	1000da74 <__alt_data_end+0xf800da74>
1000dd84:	1011883a 	mov	r8,r2
1000dd88:	003f5506 	br	1000dae0 <__alt_data_end+0xf800dae0>
1000dd8c:	e027883a 	mov	r19,fp
1000dd90:	003f7906 	br	1000db78 <__alt_data_end+0xf800db78>
1000dd94:	010007c4 	movi	r4,31
1000dd98:	20c02816 	blt	r4,r3,1000de3c <__divdf3+0x914>
1000dd9c:	00800804 	movi	r2,32
1000dda0:	10c5c83a 	sub	r2,r2,r3
1000dda4:	888a983a 	sll	r5,r17,r2
1000dda8:	a0c8d83a 	srl	r4,r20,r3
1000ddac:	a084983a 	sll	r2,r20,r2
1000ddb0:	88e2d83a 	srl	r17,r17,r3
1000ddb4:	2906b03a 	or	r3,r5,r4
1000ddb8:	1004c03a 	cmpne	r2,r2,zero
1000ddbc:	1886b03a 	or	r3,r3,r2
1000ddc0:	188001cc 	andi	r2,r3,7
1000ddc4:	10000726 	beq	r2,zero,1000dde4 <__divdf3+0x8bc>
1000ddc8:	188003cc 	andi	r2,r3,15
1000ddcc:	01000104 	movi	r4,4
1000ddd0:	11000426 	beq	r2,r4,1000dde4 <__divdf3+0x8bc>
1000ddd4:	1805883a 	mov	r2,r3
1000ddd8:	10c00104 	addi	r3,r2,4
1000dddc:	1885803a 	cmpltu	r2,r3,r2
1000dde0:	88a3883a 	add	r17,r17,r2
1000dde4:	8880202c 	andhi	r2,r17,128
1000dde8:	10002926 	beq	r2,zero,1000de90 <__divdf3+0x968>
1000ddec:	9900004c 	andi	r4,r19,1
1000ddf0:	00800044 	movi	r2,1
1000ddf4:	0021883a 	mov	r16,zero
1000ddf8:	002b883a 	mov	r21,zero
1000ddfc:	003e2906 	br	1000d6a4 <__alt_data_end+0xf800d6a4>
1000de00:	d9800017 	ldw	r6,0(sp)
1000de04:	8c7fff84 	addi	r17,r17,-2
1000de08:	a9ab883a 	add	r21,r21,r6
1000de0c:	a98b803a 	cmpltu	r5,r21,r6
1000de10:	2d8b883a 	add	r5,r5,r22
1000de14:	2a11883a 	add	r8,r5,r8
1000de18:	003ef806 	br	1000d9fc <__alt_data_end+0xf800d9fc>
1000de1c:	d9800017 	ldw	r6,0(sp)
1000de20:	318f883a 	add	r7,r6,r6
1000de24:	398b803a 	cmpltu	r5,r7,r6
1000de28:	2d8d883a 	add	r6,r5,r22
1000de2c:	81a1883a 	add	r16,r16,r6
1000de30:	a17fff84 	addi	r5,r20,-2
1000de34:	d9c00015 	stw	r7,0(sp)
1000de38:	003f8806 	br	1000dc5c <__alt_data_end+0xf800dc5c>
1000de3c:	013ff844 	movi	r4,-31
1000de40:	2085c83a 	sub	r2,r4,r2
1000de44:	8888d83a 	srl	r4,r17,r2
1000de48:	00800804 	movi	r2,32
1000de4c:	18802126 	beq	r3,r2,1000ded4 <__divdf3+0x9ac>
1000de50:	04001004 	movi	r16,64
1000de54:	80c7c83a 	sub	r3,r16,r3
1000de58:	88e0983a 	sll	r16,r17,r3
1000de5c:	8504b03a 	or	r2,r16,r20
1000de60:	1004c03a 	cmpne	r2,r2,zero
1000de64:	2084b03a 	or	r2,r4,r2
1000de68:	144001cc 	andi	r17,r2,7
1000de6c:	88000d1e 	bne	r17,zero,1000dea4 <__divdf3+0x97c>
1000de70:	0021883a 	mov	r16,zero
1000de74:	102ad0fa 	srli	r21,r2,3
1000de78:	9900004c 	andi	r4,r19,1
1000de7c:	0005883a 	mov	r2,zero
1000de80:	ac6ab03a 	or	r21,r21,r17
1000de84:	003e0706 	br	1000d6a4 <__alt_data_end+0xf800d6a4>
1000de88:	1007883a 	mov	r3,r2
1000de8c:	0023883a 	mov	r17,zero
1000de90:	8820927a 	slli	r16,r17,9
1000de94:	1805883a 	mov	r2,r3
1000de98:	8822977a 	slli	r17,r17,29
1000de9c:	8020d33a 	srli	r16,r16,12
1000dea0:	003ff406 	br	1000de74 <__alt_data_end+0xf800de74>
1000dea4:	10c003cc 	andi	r3,r2,15
1000dea8:	01000104 	movi	r4,4
1000deac:	193ff626 	beq	r3,r4,1000de88 <__alt_data_end+0xf800de88>
1000deb0:	0023883a 	mov	r17,zero
1000deb4:	003fc806 	br	1000ddd8 <__alt_data_end+0xf800ddd8>
1000deb8:	a8bfd136 	bltu	r21,r2,1000de00 <__alt_data_end+0xf800de00>
1000debc:	2823883a 	mov	r17,r5
1000dec0:	003fa606 	br	1000dd5c <__alt_data_end+0xf800dd5c>
1000dec4:	d9800017 	ldw	r6,0(sp)
1000dec8:	30bfd436 	bltu	r6,r2,1000de1c <__alt_data_end+0xf800de1c>
1000decc:	2829883a 	mov	r20,r5
1000ded0:	003f6406 	br	1000dc64 <__alt_data_end+0xf800dc64>
1000ded4:	0021883a 	mov	r16,zero
1000ded8:	003fe006 	br	1000de5c <__alt_data_end+0xf800de5c>
1000dedc:	00800434 	movhi	r2,16
1000dee0:	8c000234 	orhi	r16,r17,8
1000dee4:	10bfffc4 	addi	r2,r2,-1
1000dee8:	e009883a 	mov	r4,fp
1000deec:	80a0703a 	and	r16,r16,r2
1000def0:	a02b883a 	mov	r21,r20
1000def4:	003e4e06 	br	1000d830 <__alt_data_end+0xf800d830>

1000def8 <__eqdf2>:
1000def8:	2804d53a 	srli	r2,r5,20
1000defc:	3806d53a 	srli	r3,r7,20
1000df00:	02000434 	movhi	r8,16
1000df04:	423fffc4 	addi	r8,r8,-1
1000df08:	1081ffcc 	andi	r2,r2,2047
1000df0c:	0281ffc4 	movi	r10,2047
1000df10:	2a12703a 	and	r9,r5,r8
1000df14:	18c1ffcc 	andi	r3,r3,2047
1000df18:	3a10703a 	and	r8,r7,r8
1000df1c:	280ad7fa 	srli	r5,r5,31
1000df20:	380ed7fa 	srli	r7,r7,31
1000df24:	12801026 	beq	r2,r10,1000df68 <__eqdf2+0x70>
1000df28:	0281ffc4 	movi	r10,2047
1000df2c:	1a800a26 	beq	r3,r10,1000df58 <__eqdf2+0x60>
1000df30:	10c00226 	beq	r2,r3,1000df3c <__eqdf2+0x44>
1000df34:	00800044 	movi	r2,1
1000df38:	f800283a 	ret
1000df3c:	4a3ffd1e 	bne	r9,r8,1000df34 <__alt_data_end+0xf800df34>
1000df40:	21bffc1e 	bne	r4,r6,1000df34 <__alt_data_end+0xf800df34>
1000df44:	29c00c26 	beq	r5,r7,1000df78 <__eqdf2+0x80>
1000df48:	103ffa1e 	bne	r2,zero,1000df34 <__alt_data_end+0xf800df34>
1000df4c:	2244b03a 	or	r2,r4,r9
1000df50:	1004c03a 	cmpne	r2,r2,zero
1000df54:	f800283a 	ret
1000df58:	3214b03a 	or	r10,r6,r8
1000df5c:	503ff426 	beq	r10,zero,1000df30 <__alt_data_end+0xf800df30>
1000df60:	00800044 	movi	r2,1
1000df64:	f800283a 	ret
1000df68:	2254b03a 	or	r10,r4,r9
1000df6c:	503fee26 	beq	r10,zero,1000df28 <__alt_data_end+0xf800df28>
1000df70:	00800044 	movi	r2,1
1000df74:	f800283a 	ret
1000df78:	0005883a 	mov	r2,zero
1000df7c:	f800283a 	ret

1000df80 <__gedf2>:
1000df80:	2804d53a 	srli	r2,r5,20
1000df84:	3806d53a 	srli	r3,r7,20
1000df88:	02000434 	movhi	r8,16
1000df8c:	423fffc4 	addi	r8,r8,-1
1000df90:	1081ffcc 	andi	r2,r2,2047
1000df94:	0241ffc4 	movi	r9,2047
1000df98:	2a14703a 	and	r10,r5,r8
1000df9c:	18c1ffcc 	andi	r3,r3,2047
1000dfa0:	3a10703a 	and	r8,r7,r8
1000dfa4:	280ad7fa 	srli	r5,r5,31
1000dfa8:	380ed7fa 	srli	r7,r7,31
1000dfac:	12401d26 	beq	r2,r9,1000e024 <__gedf2+0xa4>
1000dfb0:	0241ffc4 	movi	r9,2047
1000dfb4:	1a401226 	beq	r3,r9,1000e000 <__gedf2+0x80>
1000dfb8:	1000081e 	bne	r2,zero,1000dfdc <__gedf2+0x5c>
1000dfbc:	2296b03a 	or	r11,r4,r10
1000dfc0:	5813003a 	cmpeq	r9,r11,zero
1000dfc4:	1800091e 	bne	r3,zero,1000dfec <__gedf2+0x6c>
1000dfc8:	3218b03a 	or	r12,r6,r8
1000dfcc:	6000071e 	bne	r12,zero,1000dfec <__gedf2+0x6c>
1000dfd0:	0005883a 	mov	r2,zero
1000dfd4:	5800101e 	bne	r11,zero,1000e018 <__gedf2+0x98>
1000dfd8:	f800283a 	ret
1000dfdc:	18000c1e 	bne	r3,zero,1000e010 <__gedf2+0x90>
1000dfe0:	3212b03a 	or	r9,r6,r8
1000dfe4:	48000c26 	beq	r9,zero,1000e018 <__gedf2+0x98>
1000dfe8:	0013883a 	mov	r9,zero
1000dfec:	39c03fcc 	andi	r7,r7,255
1000dff0:	48000826 	beq	r9,zero,1000e014 <__gedf2+0x94>
1000dff4:	38000926 	beq	r7,zero,1000e01c <__gedf2+0x9c>
1000dff8:	00800044 	movi	r2,1
1000dffc:	f800283a 	ret
1000e000:	3212b03a 	or	r9,r6,r8
1000e004:	483fec26 	beq	r9,zero,1000dfb8 <__alt_data_end+0xf800dfb8>
1000e008:	00bfff84 	movi	r2,-2
1000e00c:	f800283a 	ret
1000e010:	39c03fcc 	andi	r7,r7,255
1000e014:	29c00626 	beq	r5,r7,1000e030 <__gedf2+0xb0>
1000e018:	283ff726 	beq	r5,zero,1000dff8 <__alt_data_end+0xf800dff8>
1000e01c:	00bfffc4 	movi	r2,-1
1000e020:	f800283a 	ret
1000e024:	2292b03a 	or	r9,r4,r10
1000e028:	483fe126 	beq	r9,zero,1000dfb0 <__alt_data_end+0xf800dfb0>
1000e02c:	003ff606 	br	1000e008 <__alt_data_end+0xf800e008>
1000e030:	18bff916 	blt	r3,r2,1000e018 <__alt_data_end+0xf800e018>
1000e034:	10c00316 	blt	r2,r3,1000e044 <__gedf2+0xc4>
1000e038:	42bff736 	bltu	r8,r10,1000e018 <__alt_data_end+0xf800e018>
1000e03c:	52000326 	beq	r10,r8,1000e04c <__gedf2+0xcc>
1000e040:	5200042e 	bgeu	r10,r8,1000e054 <__gedf2+0xd4>
1000e044:	283fec1e 	bne	r5,zero,1000dff8 <__alt_data_end+0xf800dff8>
1000e048:	003ff406 	br	1000e01c <__alt_data_end+0xf800e01c>
1000e04c:	313ff236 	bltu	r6,r4,1000e018 <__alt_data_end+0xf800e018>
1000e050:	21bffc36 	bltu	r4,r6,1000e044 <__alt_data_end+0xf800e044>
1000e054:	0005883a 	mov	r2,zero
1000e058:	f800283a 	ret

1000e05c <__ledf2>:
1000e05c:	2804d53a 	srli	r2,r5,20
1000e060:	3810d53a 	srli	r8,r7,20
1000e064:	00c00434 	movhi	r3,16
1000e068:	18ffffc4 	addi	r3,r3,-1
1000e06c:	1081ffcc 	andi	r2,r2,2047
1000e070:	0241ffc4 	movi	r9,2047
1000e074:	28d4703a 	and	r10,r5,r3
1000e078:	4201ffcc 	andi	r8,r8,2047
1000e07c:	38c6703a 	and	r3,r7,r3
1000e080:	280ad7fa 	srli	r5,r5,31
1000e084:	380ed7fa 	srli	r7,r7,31
1000e088:	12401f26 	beq	r2,r9,1000e108 <__ledf2+0xac>
1000e08c:	0241ffc4 	movi	r9,2047
1000e090:	42401426 	beq	r8,r9,1000e0e4 <__ledf2+0x88>
1000e094:	1000091e 	bne	r2,zero,1000e0bc <__ledf2+0x60>
1000e098:	2296b03a 	or	r11,r4,r10
1000e09c:	5813003a 	cmpeq	r9,r11,zero
1000e0a0:	29403fcc 	andi	r5,r5,255
1000e0a4:	40000a1e 	bne	r8,zero,1000e0d0 <__ledf2+0x74>
1000e0a8:	30d8b03a 	or	r12,r6,r3
1000e0ac:	6000081e 	bne	r12,zero,1000e0d0 <__ledf2+0x74>
1000e0b0:	0005883a 	mov	r2,zero
1000e0b4:	5800111e 	bne	r11,zero,1000e0fc <__ledf2+0xa0>
1000e0b8:	f800283a 	ret
1000e0bc:	29403fcc 	andi	r5,r5,255
1000e0c0:	40000c1e 	bne	r8,zero,1000e0f4 <__ledf2+0x98>
1000e0c4:	30d2b03a 	or	r9,r6,r3
1000e0c8:	48000c26 	beq	r9,zero,1000e0fc <__ledf2+0xa0>
1000e0cc:	0013883a 	mov	r9,zero
1000e0d0:	39c03fcc 	andi	r7,r7,255
1000e0d4:	48000826 	beq	r9,zero,1000e0f8 <__ledf2+0x9c>
1000e0d8:	38001126 	beq	r7,zero,1000e120 <__ledf2+0xc4>
1000e0dc:	00800044 	movi	r2,1
1000e0e0:	f800283a 	ret
1000e0e4:	30d2b03a 	or	r9,r6,r3
1000e0e8:	483fea26 	beq	r9,zero,1000e094 <__alt_data_end+0xf800e094>
1000e0ec:	00800084 	movi	r2,2
1000e0f0:	f800283a 	ret
1000e0f4:	39c03fcc 	andi	r7,r7,255
1000e0f8:	39400726 	beq	r7,r5,1000e118 <__ledf2+0xbc>
1000e0fc:	2800081e 	bne	r5,zero,1000e120 <__ledf2+0xc4>
1000e100:	00800044 	movi	r2,1
1000e104:	f800283a 	ret
1000e108:	2292b03a 	or	r9,r4,r10
1000e10c:	483fdf26 	beq	r9,zero,1000e08c <__alt_data_end+0xf800e08c>
1000e110:	00800084 	movi	r2,2
1000e114:	f800283a 	ret
1000e118:	4080030e 	bge	r8,r2,1000e128 <__ledf2+0xcc>
1000e11c:	383fef26 	beq	r7,zero,1000e0dc <__alt_data_end+0xf800e0dc>
1000e120:	00bfffc4 	movi	r2,-1
1000e124:	f800283a 	ret
1000e128:	123feb16 	blt	r2,r8,1000e0d8 <__alt_data_end+0xf800e0d8>
1000e12c:	1abff336 	bltu	r3,r10,1000e0fc <__alt_data_end+0xf800e0fc>
1000e130:	50c00326 	beq	r10,r3,1000e140 <__ledf2+0xe4>
1000e134:	50c0042e 	bgeu	r10,r3,1000e148 <__ledf2+0xec>
1000e138:	283fe81e 	bne	r5,zero,1000e0dc <__alt_data_end+0xf800e0dc>
1000e13c:	003ff806 	br	1000e120 <__alt_data_end+0xf800e120>
1000e140:	313fee36 	bltu	r6,r4,1000e0fc <__alt_data_end+0xf800e0fc>
1000e144:	21bffc36 	bltu	r4,r6,1000e138 <__alt_data_end+0xf800e138>
1000e148:	0005883a 	mov	r2,zero
1000e14c:	f800283a 	ret

1000e150 <__muldf3>:
1000e150:	deffee04 	addi	sp,sp,-72
1000e154:	dd000c15 	stw	r20,48(sp)
1000e158:	2828d53a 	srli	r20,r5,20
1000e15c:	ddc00f15 	stw	r23,60(sp)
1000e160:	282ed7fa 	srli	r23,r5,31
1000e164:	dc000815 	stw	r16,32(sp)
1000e168:	04000434 	movhi	r16,16
1000e16c:	dcc00b15 	stw	r19,44(sp)
1000e170:	843fffc4 	addi	r16,r16,-1
1000e174:	dfc01115 	stw	ra,68(sp)
1000e178:	df001015 	stw	fp,64(sp)
1000e17c:	dd800e15 	stw	r22,56(sp)
1000e180:	dd400d15 	stw	r21,52(sp)
1000e184:	dc800a15 	stw	r18,40(sp)
1000e188:	dc400915 	stw	r17,36(sp)
1000e18c:	a501ffcc 	andi	r20,r20,2047
1000e190:	2c20703a 	and	r16,r5,r16
1000e194:	b827883a 	mov	r19,r23
1000e198:	ba403fcc 	andi	r9,r23,255
1000e19c:	a0006026 	beq	r20,zero,1000e320 <__muldf3+0x1d0>
1000e1a0:	0081ffc4 	movi	r2,2047
1000e1a4:	202d883a 	mov	r22,r4
1000e1a8:	a0803626 	beq	r20,r2,1000e284 <__muldf3+0x134>
1000e1ac:	84000434 	orhi	r16,r16,16
1000e1b0:	200ad77a 	srli	r5,r4,29
1000e1b4:	800490fa 	slli	r2,r16,3
1000e1b8:	202c90fa 	slli	r22,r4,3
1000e1bc:	a53f0044 	addi	r20,r20,-1023
1000e1c0:	28a0b03a 	or	r16,r5,r2
1000e1c4:	002b883a 	mov	r21,zero
1000e1c8:	000b883a 	mov	r5,zero
1000e1cc:	3804d53a 	srli	r2,r7,20
1000e1d0:	3838d7fa 	srli	fp,r7,31
1000e1d4:	04400434 	movhi	r17,16
1000e1d8:	8c7fffc4 	addi	r17,r17,-1
1000e1dc:	1081ffcc 	andi	r2,r2,2047
1000e1e0:	3025883a 	mov	r18,r6
1000e1e4:	3c62703a 	and	r17,r7,r17
1000e1e8:	e2803fcc 	andi	r10,fp,255
1000e1ec:	10006d26 	beq	r2,zero,1000e3a4 <__muldf3+0x254>
1000e1f0:	00c1ffc4 	movi	r3,2047
1000e1f4:	10c06526 	beq	r2,r3,1000e38c <__muldf3+0x23c>
1000e1f8:	8c400434 	orhi	r17,r17,16
1000e1fc:	300ed77a 	srli	r7,r6,29
1000e200:	880690fa 	slli	r3,r17,3
1000e204:	302490fa 	slli	r18,r6,3
1000e208:	10bf0044 	addi	r2,r2,-1023
1000e20c:	38e2b03a 	or	r17,r7,r3
1000e210:	000f883a 	mov	r7,zero
1000e214:	a087883a 	add	r3,r20,r2
1000e218:	010003c4 	movi	r4,15
1000e21c:	3d44b03a 	or	r2,r7,r21
1000e220:	e5ccf03a 	xor	r6,fp,r23
1000e224:	1a000044 	addi	r8,r3,1
1000e228:	20809b36 	bltu	r4,r2,1000e498 <__muldf3+0x348>
1000e22c:	100490ba 	slli	r2,r2,2
1000e230:	01040074 	movhi	r4,4097
1000e234:	21389104 	addi	r4,r4,-7612
1000e238:	1105883a 	add	r2,r2,r4
1000e23c:	10800017 	ldw	r2,0(r2)
1000e240:	1000683a 	jmp	r2
1000e244:	1000e498 	cmpnei	zero,r2,914
1000e248:	1000e2a4 	muli	zero,r2,906
1000e24c:	1000e2a4 	muli	zero,r2,906
1000e250:	1000e2a0 	cmpeqi	zero,r2,906
1000e254:	1000e474 	orhi	zero,r2,913
1000e258:	1000e474 	orhi	zero,r2,913
1000e25c:	1000e45c 	xori	zero,r2,913
1000e260:	1000e2a0 	cmpeqi	zero,r2,906
1000e264:	1000e474 	orhi	zero,r2,913
1000e268:	1000e45c 	xori	zero,r2,913
1000e26c:	1000e474 	orhi	zero,r2,913
1000e270:	1000e2a0 	cmpeqi	zero,r2,906
1000e274:	1000e484 	addi	zero,r2,914
1000e278:	1000e484 	addi	zero,r2,914
1000e27c:	1000e484 	addi	zero,r2,914
1000e280:	1000e7e4 	muli	zero,r2,927
1000e284:	2404b03a 	or	r2,r4,r16
1000e288:	1000711e 	bne	r2,zero,1000e450 <__muldf3+0x300>
1000e28c:	05400204 	movi	r21,8
1000e290:	0021883a 	mov	r16,zero
1000e294:	002d883a 	mov	r22,zero
1000e298:	01400084 	movi	r5,2
1000e29c:	003fcb06 	br	1000e1cc <__alt_data_end+0xf800e1cc>
1000e2a0:	500d883a 	mov	r6,r10
1000e2a4:	00800084 	movi	r2,2
1000e2a8:	38805926 	beq	r7,r2,1000e410 <__muldf3+0x2c0>
1000e2ac:	008000c4 	movi	r2,3
1000e2b0:	3881bb26 	beq	r7,r2,1000e9a0 <__muldf3+0x850>
1000e2b4:	00800044 	movi	r2,1
1000e2b8:	3881961e 	bne	r7,r2,1000e914 <__muldf3+0x7c4>
1000e2bc:	3027883a 	mov	r19,r6
1000e2c0:	0005883a 	mov	r2,zero
1000e2c4:	0021883a 	mov	r16,zero
1000e2c8:	002d883a 	mov	r22,zero
1000e2cc:	1004953a 	slli	r2,r2,20
1000e2d0:	98c03fcc 	andi	r3,r19,255
1000e2d4:	04400434 	movhi	r17,16
1000e2d8:	8c7fffc4 	addi	r17,r17,-1
1000e2dc:	180697fa 	slli	r3,r3,31
1000e2e0:	8460703a 	and	r16,r16,r17
1000e2e4:	80a0b03a 	or	r16,r16,r2
1000e2e8:	80c6b03a 	or	r3,r16,r3
1000e2ec:	b005883a 	mov	r2,r22
1000e2f0:	dfc01117 	ldw	ra,68(sp)
1000e2f4:	df001017 	ldw	fp,64(sp)
1000e2f8:	ddc00f17 	ldw	r23,60(sp)
1000e2fc:	dd800e17 	ldw	r22,56(sp)
1000e300:	dd400d17 	ldw	r21,52(sp)
1000e304:	dd000c17 	ldw	r20,48(sp)
1000e308:	dcc00b17 	ldw	r19,44(sp)
1000e30c:	dc800a17 	ldw	r18,40(sp)
1000e310:	dc400917 	ldw	r17,36(sp)
1000e314:	dc000817 	ldw	r16,32(sp)
1000e318:	dec01204 	addi	sp,sp,72
1000e31c:	f800283a 	ret
1000e320:	2404b03a 	or	r2,r4,r16
1000e324:	202b883a 	mov	r21,r4
1000e328:	10004426 	beq	r2,zero,1000e43c <__muldf3+0x2ec>
1000e32c:	80015126 	beq	r16,zero,1000e874 <__muldf3+0x724>
1000e330:	8009883a 	mov	r4,r16
1000e334:	d9800715 	stw	r6,28(sp)
1000e338:	d9c00215 	stw	r7,8(sp)
1000e33c:	da400415 	stw	r9,16(sp)
1000e340:	000f4bc0 	call	1000f4bc <__clzsi2>
1000e344:	d9800717 	ldw	r6,28(sp)
1000e348:	d9c00217 	ldw	r7,8(sp)
1000e34c:	da400417 	ldw	r9,16(sp)
1000e350:	113ffd44 	addi	r4,r2,-11
1000e354:	00c00704 	movi	r3,28
1000e358:	19014216 	blt	r3,r4,1000e864 <__muldf3+0x714>
1000e35c:	00c00744 	movi	r3,29
1000e360:	15bffe04 	addi	r22,r2,-8
1000e364:	1907c83a 	sub	r3,r3,r4
1000e368:	85a0983a 	sll	r16,r16,r22
1000e36c:	a8c6d83a 	srl	r3,r21,r3
1000e370:	adac983a 	sll	r22,r21,r22
1000e374:	1c20b03a 	or	r16,r3,r16
1000e378:	1080fcc4 	addi	r2,r2,1011
1000e37c:	00a9c83a 	sub	r20,zero,r2
1000e380:	002b883a 	mov	r21,zero
1000e384:	000b883a 	mov	r5,zero
1000e388:	003f9006 	br	1000e1cc <__alt_data_end+0xf800e1cc>
1000e38c:	3446b03a 	or	r3,r6,r17
1000e390:	1800281e 	bne	r3,zero,1000e434 <__muldf3+0x2e4>
1000e394:	0023883a 	mov	r17,zero
1000e398:	0025883a 	mov	r18,zero
1000e39c:	01c00084 	movi	r7,2
1000e3a0:	003f9c06 	br	1000e214 <__alt_data_end+0xf800e214>
1000e3a4:	3446b03a 	or	r3,r6,r17
1000e3a8:	18001e26 	beq	r3,zero,1000e424 <__muldf3+0x2d4>
1000e3ac:	88012126 	beq	r17,zero,1000e834 <__muldf3+0x6e4>
1000e3b0:	8809883a 	mov	r4,r17
1000e3b4:	d9400215 	stw	r5,8(sp)
1000e3b8:	d9800715 	stw	r6,28(sp)
1000e3bc:	da400415 	stw	r9,16(sp)
1000e3c0:	da800315 	stw	r10,12(sp)
1000e3c4:	000f4bc0 	call	1000f4bc <__clzsi2>
1000e3c8:	d9400217 	ldw	r5,8(sp)
1000e3cc:	d9800717 	ldw	r6,28(sp)
1000e3d0:	da400417 	ldw	r9,16(sp)
1000e3d4:	da800317 	ldw	r10,12(sp)
1000e3d8:	113ffd44 	addi	r4,r2,-11
1000e3dc:	00c00704 	movi	r3,28
1000e3e0:	19011016 	blt	r3,r4,1000e824 <__muldf3+0x6d4>
1000e3e4:	00c00744 	movi	r3,29
1000e3e8:	14bffe04 	addi	r18,r2,-8
1000e3ec:	1907c83a 	sub	r3,r3,r4
1000e3f0:	8ca2983a 	sll	r17,r17,r18
1000e3f4:	30c6d83a 	srl	r3,r6,r3
1000e3f8:	34a4983a 	sll	r18,r6,r18
1000e3fc:	1c62b03a 	or	r17,r3,r17
1000e400:	1080fcc4 	addi	r2,r2,1011
1000e404:	0085c83a 	sub	r2,zero,r2
1000e408:	000f883a 	mov	r7,zero
1000e40c:	003f8106 	br	1000e214 <__alt_data_end+0xf800e214>
1000e410:	3027883a 	mov	r19,r6
1000e414:	0081ffc4 	movi	r2,2047
1000e418:	0021883a 	mov	r16,zero
1000e41c:	002d883a 	mov	r22,zero
1000e420:	003faa06 	br	1000e2cc <__alt_data_end+0xf800e2cc>
1000e424:	0023883a 	mov	r17,zero
1000e428:	0025883a 	mov	r18,zero
1000e42c:	01c00044 	movi	r7,1
1000e430:	003f7806 	br	1000e214 <__alt_data_end+0xf800e214>
1000e434:	01c000c4 	movi	r7,3
1000e438:	003f7606 	br	1000e214 <__alt_data_end+0xf800e214>
1000e43c:	05400104 	movi	r21,4
1000e440:	0021883a 	mov	r16,zero
1000e444:	002d883a 	mov	r22,zero
1000e448:	01400044 	movi	r5,1
1000e44c:	003f5f06 	br	1000e1cc <__alt_data_end+0xf800e1cc>
1000e450:	05400304 	movi	r21,12
1000e454:	014000c4 	movi	r5,3
1000e458:	003f5c06 	br	1000e1cc <__alt_data_end+0xf800e1cc>
1000e45c:	04000434 	movhi	r16,16
1000e460:	0027883a 	mov	r19,zero
1000e464:	843fffc4 	addi	r16,r16,-1
1000e468:	05bfffc4 	movi	r22,-1
1000e46c:	0081ffc4 	movi	r2,2047
1000e470:	003f9606 	br	1000e2cc <__alt_data_end+0xf800e2cc>
1000e474:	8023883a 	mov	r17,r16
1000e478:	b025883a 	mov	r18,r22
1000e47c:	280f883a 	mov	r7,r5
1000e480:	003f8806 	br	1000e2a4 <__alt_data_end+0xf800e2a4>
1000e484:	8023883a 	mov	r17,r16
1000e488:	b025883a 	mov	r18,r22
1000e48c:	480d883a 	mov	r6,r9
1000e490:	280f883a 	mov	r7,r5
1000e494:	003f8306 	br	1000e2a4 <__alt_data_end+0xf800e2a4>
1000e498:	b026d43a 	srli	r19,r22,16
1000e49c:	902ed43a 	srli	r23,r18,16
1000e4a0:	b5bfffcc 	andi	r22,r22,65535
1000e4a4:	94bfffcc 	andi	r18,r18,65535
1000e4a8:	b00b883a 	mov	r5,r22
1000e4ac:	9009883a 	mov	r4,r18
1000e4b0:	d8c00515 	stw	r3,20(sp)
1000e4b4:	d9800715 	stw	r6,28(sp)
1000e4b8:	da000615 	stw	r8,24(sp)
1000e4bc:	00010d40 	call	100010d4 <__mulsi3>
1000e4c0:	980b883a 	mov	r5,r19
1000e4c4:	9009883a 	mov	r4,r18
1000e4c8:	1029883a 	mov	r20,r2
1000e4cc:	00010d40 	call	100010d4 <__mulsi3>
1000e4d0:	b80b883a 	mov	r5,r23
1000e4d4:	9809883a 	mov	r4,r19
1000e4d8:	102b883a 	mov	r21,r2
1000e4dc:	00010d40 	call	100010d4 <__mulsi3>
1000e4e0:	b809883a 	mov	r4,r23
1000e4e4:	b00b883a 	mov	r5,r22
1000e4e8:	1039883a 	mov	fp,r2
1000e4ec:	00010d40 	call	100010d4 <__mulsi3>
1000e4f0:	a008d43a 	srli	r4,r20,16
1000e4f4:	1545883a 	add	r2,r2,r21
1000e4f8:	d8c00517 	ldw	r3,20(sp)
1000e4fc:	2085883a 	add	r2,r4,r2
1000e500:	d9800717 	ldw	r6,28(sp)
1000e504:	da000617 	ldw	r8,24(sp)
1000e508:	1540022e 	bgeu	r2,r21,1000e514 <__muldf3+0x3c4>
1000e50c:	01000074 	movhi	r4,1
1000e510:	e139883a 	add	fp,fp,r4
1000e514:	100e943a 	slli	r7,r2,16
1000e518:	1004d43a 	srli	r2,r2,16
1000e51c:	882ad43a 	srli	r21,r17,16
1000e520:	a53fffcc 	andi	r20,r20,65535
1000e524:	8c7fffcc 	andi	r17,r17,65535
1000e528:	3d29883a 	add	r20,r7,r20
1000e52c:	b00b883a 	mov	r5,r22
1000e530:	8809883a 	mov	r4,r17
1000e534:	d8c00515 	stw	r3,20(sp)
1000e538:	d9800715 	stw	r6,28(sp)
1000e53c:	da000615 	stw	r8,24(sp)
1000e540:	dd000115 	stw	r20,4(sp)
1000e544:	d8800015 	stw	r2,0(sp)
1000e548:	00010d40 	call	100010d4 <__mulsi3>
1000e54c:	980b883a 	mov	r5,r19
1000e550:	8809883a 	mov	r4,r17
1000e554:	d8800215 	stw	r2,8(sp)
1000e558:	00010d40 	call	100010d4 <__mulsi3>
1000e55c:	9809883a 	mov	r4,r19
1000e560:	a80b883a 	mov	r5,r21
1000e564:	1029883a 	mov	r20,r2
1000e568:	00010d40 	call	100010d4 <__mulsi3>
1000e56c:	b00b883a 	mov	r5,r22
1000e570:	a809883a 	mov	r4,r21
1000e574:	d8800415 	stw	r2,16(sp)
1000e578:	00010d40 	call	100010d4 <__mulsi3>
1000e57c:	d9c00217 	ldw	r7,8(sp)
1000e580:	1505883a 	add	r2,r2,r20
1000e584:	d8c00517 	ldw	r3,20(sp)
1000e588:	3826d43a 	srli	r19,r7,16
1000e58c:	d9800717 	ldw	r6,28(sp)
1000e590:	da000617 	ldw	r8,24(sp)
1000e594:	9885883a 	add	r2,r19,r2
1000e598:	da400417 	ldw	r9,16(sp)
1000e59c:	1500022e 	bgeu	r2,r20,1000e5a8 <__muldf3+0x458>
1000e5a0:	01000074 	movhi	r4,1
1000e5a4:	4913883a 	add	r9,r9,r4
1000e5a8:	1028d43a 	srli	r20,r2,16
1000e5ac:	1004943a 	slli	r2,r2,16
1000e5b0:	802cd43a 	srli	r22,r16,16
1000e5b4:	843fffcc 	andi	r16,r16,65535
1000e5b8:	3cffffcc 	andi	r19,r7,65535
1000e5bc:	9009883a 	mov	r4,r18
1000e5c0:	800b883a 	mov	r5,r16
1000e5c4:	a269883a 	add	r20,r20,r9
1000e5c8:	d8c00515 	stw	r3,20(sp)
1000e5cc:	d9800715 	stw	r6,28(sp)
1000e5d0:	da000615 	stw	r8,24(sp)
1000e5d4:	14e7883a 	add	r19,r2,r19
1000e5d8:	00010d40 	call	100010d4 <__mulsi3>
1000e5dc:	9009883a 	mov	r4,r18
1000e5e0:	b00b883a 	mov	r5,r22
1000e5e4:	d8800315 	stw	r2,12(sp)
1000e5e8:	00010d40 	call	100010d4 <__mulsi3>
1000e5ec:	b809883a 	mov	r4,r23
1000e5f0:	b00b883a 	mov	r5,r22
1000e5f4:	d8800215 	stw	r2,8(sp)
1000e5f8:	00010d40 	call	100010d4 <__mulsi3>
1000e5fc:	b80b883a 	mov	r5,r23
1000e600:	8009883a 	mov	r4,r16
1000e604:	d8800415 	stw	r2,16(sp)
1000e608:	00010d40 	call	100010d4 <__mulsi3>
1000e60c:	da800317 	ldw	r10,12(sp)
1000e610:	d9c00217 	ldw	r7,8(sp)
1000e614:	d9000017 	ldw	r4,0(sp)
1000e618:	502ed43a 	srli	r23,r10,16
1000e61c:	11c5883a 	add	r2,r2,r7
1000e620:	24e5883a 	add	r18,r4,r19
1000e624:	b885883a 	add	r2,r23,r2
1000e628:	d8c00517 	ldw	r3,20(sp)
1000e62c:	d9800717 	ldw	r6,28(sp)
1000e630:	da000617 	ldw	r8,24(sp)
1000e634:	da400417 	ldw	r9,16(sp)
1000e638:	11c0022e 	bgeu	r2,r7,1000e644 <__muldf3+0x4f4>
1000e63c:	01000074 	movhi	r4,1
1000e640:	4913883a 	add	r9,r9,r4
1000e644:	100ed43a 	srli	r7,r2,16
1000e648:	1004943a 	slli	r2,r2,16
1000e64c:	55ffffcc 	andi	r23,r10,65535
1000e650:	3a53883a 	add	r9,r7,r9
1000e654:	8809883a 	mov	r4,r17
1000e658:	800b883a 	mov	r5,r16
1000e65c:	d8c00515 	stw	r3,20(sp)
1000e660:	d9800715 	stw	r6,28(sp)
1000e664:	da000615 	stw	r8,24(sp)
1000e668:	da400415 	stw	r9,16(sp)
1000e66c:	15ef883a 	add	r23,r2,r23
1000e670:	00010d40 	call	100010d4 <__mulsi3>
1000e674:	8809883a 	mov	r4,r17
1000e678:	b00b883a 	mov	r5,r22
1000e67c:	d8800215 	stw	r2,8(sp)
1000e680:	00010d40 	call	100010d4 <__mulsi3>
1000e684:	b00b883a 	mov	r5,r22
1000e688:	a809883a 	mov	r4,r21
1000e68c:	d8800315 	stw	r2,12(sp)
1000e690:	00010d40 	call	100010d4 <__mulsi3>
1000e694:	8009883a 	mov	r4,r16
1000e698:	a80b883a 	mov	r5,r21
1000e69c:	1023883a 	mov	r17,r2
1000e6a0:	00010d40 	call	100010d4 <__mulsi3>
1000e6a4:	d9c00217 	ldw	r7,8(sp)
1000e6a8:	da800317 	ldw	r10,12(sp)
1000e6ac:	d8c00517 	ldw	r3,20(sp)
1000e6b0:	3808d43a 	srli	r4,r7,16
1000e6b4:	1285883a 	add	r2,r2,r10
1000e6b8:	d9800717 	ldw	r6,28(sp)
1000e6bc:	2085883a 	add	r2,r4,r2
1000e6c0:	da000617 	ldw	r8,24(sp)
1000e6c4:	da400417 	ldw	r9,16(sp)
1000e6c8:	1280022e 	bgeu	r2,r10,1000e6d4 <__muldf3+0x584>
1000e6cc:	01000074 	movhi	r4,1
1000e6d0:	8923883a 	add	r17,r17,r4
1000e6d4:	1008943a 	slli	r4,r2,16
1000e6d8:	39ffffcc 	andi	r7,r7,65535
1000e6dc:	e4b9883a 	add	fp,fp,r18
1000e6e0:	21cf883a 	add	r7,r4,r7
1000e6e4:	e4e7803a 	cmpltu	r19,fp,r19
1000e6e8:	3d0f883a 	add	r7,r7,r20
1000e6ec:	bf39883a 	add	fp,r23,fp
1000e6f0:	99c9883a 	add	r4,r19,r7
1000e6f4:	e5ef803a 	cmpltu	r23,fp,r23
1000e6f8:	490b883a 	add	r5,r9,r4
1000e6fc:	1004d43a 	srli	r2,r2,16
1000e700:	b965883a 	add	r18,r23,r5
1000e704:	24c9803a 	cmpltu	r4,r4,r19
1000e708:	3d29803a 	cmpltu	r20,r7,r20
1000e70c:	a128b03a 	or	r20,r20,r4
1000e710:	95ef803a 	cmpltu	r23,r18,r23
1000e714:	2a53803a 	cmpltu	r9,r5,r9
1000e718:	a0a9883a 	add	r20,r20,r2
1000e71c:	4deeb03a 	or	r23,r9,r23
1000e720:	a5ef883a 	add	r23,r20,r23
1000e724:	bc63883a 	add	r17,r23,r17
1000e728:	e004927a 	slli	r2,fp,9
1000e72c:	d9000117 	ldw	r4,4(sp)
1000e730:	882e927a 	slli	r23,r17,9
1000e734:	9022d5fa 	srli	r17,r18,23
1000e738:	e038d5fa 	srli	fp,fp,23
1000e73c:	1104b03a 	or	r2,r2,r4
1000e740:	9024927a 	slli	r18,r18,9
1000e744:	1004c03a 	cmpne	r2,r2,zero
1000e748:	bc62b03a 	or	r17,r23,r17
1000e74c:	1738b03a 	or	fp,r2,fp
1000e750:	8880402c 	andhi	r2,r17,256
1000e754:	e4a4b03a 	or	r18,fp,r18
1000e758:	10000726 	beq	r2,zero,1000e778 <__muldf3+0x628>
1000e75c:	9006d07a 	srli	r3,r18,1
1000e760:	880497fa 	slli	r2,r17,31
1000e764:	9480004c 	andi	r18,r18,1
1000e768:	8822d07a 	srli	r17,r17,1
1000e76c:	1ca4b03a 	or	r18,r3,r18
1000e770:	14a4b03a 	or	r18,r2,r18
1000e774:	4007883a 	mov	r3,r8
1000e778:	1880ffc4 	addi	r2,r3,1023
1000e77c:	0080460e 	bge	zero,r2,1000e898 <__muldf3+0x748>
1000e780:	910001cc 	andi	r4,r18,7
1000e784:	20000726 	beq	r4,zero,1000e7a4 <__muldf3+0x654>
1000e788:	910003cc 	andi	r4,r18,15
1000e78c:	01400104 	movi	r5,4
1000e790:	21400426 	beq	r4,r5,1000e7a4 <__muldf3+0x654>
1000e794:	9149883a 	add	r4,r18,r5
1000e798:	24a5803a 	cmpltu	r18,r4,r18
1000e79c:	8ca3883a 	add	r17,r17,r18
1000e7a0:	2025883a 	mov	r18,r4
1000e7a4:	8900402c 	andhi	r4,r17,256
1000e7a8:	20000426 	beq	r4,zero,1000e7bc <__muldf3+0x66c>
1000e7ac:	18810004 	addi	r2,r3,1024
1000e7b0:	00ffc034 	movhi	r3,65280
1000e7b4:	18ffffc4 	addi	r3,r3,-1
1000e7b8:	88e2703a 	and	r17,r17,r3
1000e7bc:	00c1ff84 	movi	r3,2046
1000e7c0:	18bf1316 	blt	r3,r2,1000e410 <__alt_data_end+0xf800e410>
1000e7c4:	882c977a 	slli	r22,r17,29
1000e7c8:	9024d0fa 	srli	r18,r18,3
1000e7cc:	8822927a 	slli	r17,r17,9
1000e7d0:	1081ffcc 	andi	r2,r2,2047
1000e7d4:	b4acb03a 	or	r22,r22,r18
1000e7d8:	8820d33a 	srli	r16,r17,12
1000e7dc:	3027883a 	mov	r19,r6
1000e7e0:	003eba06 	br	1000e2cc <__alt_data_end+0xf800e2cc>
1000e7e4:	8080022c 	andhi	r2,r16,8
1000e7e8:	10000926 	beq	r2,zero,1000e810 <__muldf3+0x6c0>
1000e7ec:	8880022c 	andhi	r2,r17,8
1000e7f0:	1000071e 	bne	r2,zero,1000e810 <__muldf3+0x6c0>
1000e7f4:	00800434 	movhi	r2,16
1000e7f8:	8c000234 	orhi	r16,r17,8
1000e7fc:	10bfffc4 	addi	r2,r2,-1
1000e800:	e027883a 	mov	r19,fp
1000e804:	80a0703a 	and	r16,r16,r2
1000e808:	902d883a 	mov	r22,r18
1000e80c:	003f1706 	br	1000e46c <__alt_data_end+0xf800e46c>
1000e810:	00800434 	movhi	r2,16
1000e814:	84000234 	orhi	r16,r16,8
1000e818:	10bfffc4 	addi	r2,r2,-1
1000e81c:	80a0703a 	and	r16,r16,r2
1000e820:	003f1206 	br	1000e46c <__alt_data_end+0xf800e46c>
1000e824:	147ff604 	addi	r17,r2,-40
1000e828:	3462983a 	sll	r17,r6,r17
1000e82c:	0025883a 	mov	r18,zero
1000e830:	003ef306 	br	1000e400 <__alt_data_end+0xf800e400>
1000e834:	3009883a 	mov	r4,r6
1000e838:	d9400215 	stw	r5,8(sp)
1000e83c:	d9800715 	stw	r6,28(sp)
1000e840:	da400415 	stw	r9,16(sp)
1000e844:	da800315 	stw	r10,12(sp)
1000e848:	000f4bc0 	call	1000f4bc <__clzsi2>
1000e84c:	10800804 	addi	r2,r2,32
1000e850:	da800317 	ldw	r10,12(sp)
1000e854:	da400417 	ldw	r9,16(sp)
1000e858:	d9800717 	ldw	r6,28(sp)
1000e85c:	d9400217 	ldw	r5,8(sp)
1000e860:	003edd06 	br	1000e3d8 <__alt_data_end+0xf800e3d8>
1000e864:	143ff604 	addi	r16,r2,-40
1000e868:	ac20983a 	sll	r16,r21,r16
1000e86c:	002d883a 	mov	r22,zero
1000e870:	003ec106 	br	1000e378 <__alt_data_end+0xf800e378>
1000e874:	d9800715 	stw	r6,28(sp)
1000e878:	d9c00215 	stw	r7,8(sp)
1000e87c:	da400415 	stw	r9,16(sp)
1000e880:	000f4bc0 	call	1000f4bc <__clzsi2>
1000e884:	10800804 	addi	r2,r2,32
1000e888:	da400417 	ldw	r9,16(sp)
1000e88c:	d9c00217 	ldw	r7,8(sp)
1000e890:	d9800717 	ldw	r6,28(sp)
1000e894:	003eae06 	br	1000e350 <__alt_data_end+0xf800e350>
1000e898:	00c00044 	movi	r3,1
1000e89c:	1887c83a 	sub	r3,r3,r2
1000e8a0:	01000e04 	movi	r4,56
1000e8a4:	20fe8516 	blt	r4,r3,1000e2bc <__alt_data_end+0xf800e2bc>
1000e8a8:	010007c4 	movi	r4,31
1000e8ac:	20c01b16 	blt	r4,r3,1000e91c <__muldf3+0x7cc>
1000e8b0:	00800804 	movi	r2,32
1000e8b4:	10c5c83a 	sub	r2,r2,r3
1000e8b8:	888a983a 	sll	r5,r17,r2
1000e8bc:	90c8d83a 	srl	r4,r18,r3
1000e8c0:	9084983a 	sll	r2,r18,r2
1000e8c4:	88e2d83a 	srl	r17,r17,r3
1000e8c8:	2906b03a 	or	r3,r5,r4
1000e8cc:	1004c03a 	cmpne	r2,r2,zero
1000e8d0:	1886b03a 	or	r3,r3,r2
1000e8d4:	188001cc 	andi	r2,r3,7
1000e8d8:	10000726 	beq	r2,zero,1000e8f8 <__muldf3+0x7a8>
1000e8dc:	188003cc 	andi	r2,r3,15
1000e8e0:	01000104 	movi	r4,4
1000e8e4:	11000426 	beq	r2,r4,1000e8f8 <__muldf3+0x7a8>
1000e8e8:	1805883a 	mov	r2,r3
1000e8ec:	10c00104 	addi	r3,r2,4
1000e8f0:	1885803a 	cmpltu	r2,r3,r2
1000e8f4:	88a3883a 	add	r17,r17,r2
1000e8f8:	8880202c 	andhi	r2,r17,128
1000e8fc:	10001c26 	beq	r2,zero,1000e970 <__muldf3+0x820>
1000e900:	3027883a 	mov	r19,r6
1000e904:	00800044 	movi	r2,1
1000e908:	0021883a 	mov	r16,zero
1000e90c:	002d883a 	mov	r22,zero
1000e910:	003e6e06 	br	1000e2cc <__alt_data_end+0xf800e2cc>
1000e914:	4007883a 	mov	r3,r8
1000e918:	003f9706 	br	1000e778 <__alt_data_end+0xf800e778>
1000e91c:	017ff844 	movi	r5,-31
1000e920:	2885c83a 	sub	r2,r5,r2
1000e924:	888ad83a 	srl	r5,r17,r2
1000e928:	00800804 	movi	r2,32
1000e92c:	18801a26 	beq	r3,r2,1000e998 <__muldf3+0x848>
1000e930:	01001004 	movi	r4,64
1000e934:	20c7c83a 	sub	r3,r4,r3
1000e938:	88e2983a 	sll	r17,r17,r3
1000e93c:	8ca4b03a 	or	r18,r17,r18
1000e940:	9004c03a 	cmpne	r2,r18,zero
1000e944:	2884b03a 	or	r2,r5,r2
1000e948:	144001cc 	andi	r17,r2,7
1000e94c:	88000d1e 	bne	r17,zero,1000e984 <__muldf3+0x834>
1000e950:	0021883a 	mov	r16,zero
1000e954:	102cd0fa 	srli	r22,r2,3
1000e958:	3027883a 	mov	r19,r6
1000e95c:	0005883a 	mov	r2,zero
1000e960:	b46cb03a 	or	r22,r22,r17
1000e964:	003e5906 	br	1000e2cc <__alt_data_end+0xf800e2cc>
1000e968:	1007883a 	mov	r3,r2
1000e96c:	0023883a 	mov	r17,zero
1000e970:	8820927a 	slli	r16,r17,9
1000e974:	1805883a 	mov	r2,r3
1000e978:	8822977a 	slli	r17,r17,29
1000e97c:	8020d33a 	srli	r16,r16,12
1000e980:	003ff406 	br	1000e954 <__alt_data_end+0xf800e954>
1000e984:	10c003cc 	andi	r3,r2,15
1000e988:	01000104 	movi	r4,4
1000e98c:	193ff626 	beq	r3,r4,1000e968 <__alt_data_end+0xf800e968>
1000e990:	0023883a 	mov	r17,zero
1000e994:	003fd506 	br	1000e8ec <__alt_data_end+0xf800e8ec>
1000e998:	0023883a 	mov	r17,zero
1000e99c:	003fe706 	br	1000e93c <__alt_data_end+0xf800e93c>
1000e9a0:	00800434 	movhi	r2,16
1000e9a4:	8c000234 	orhi	r16,r17,8
1000e9a8:	10bfffc4 	addi	r2,r2,-1
1000e9ac:	3027883a 	mov	r19,r6
1000e9b0:	80a0703a 	and	r16,r16,r2
1000e9b4:	902d883a 	mov	r22,r18
1000e9b8:	003eac06 	br	1000e46c <__alt_data_end+0xf800e46c>

1000e9bc <__subdf3>:
1000e9bc:	02000434 	movhi	r8,16
1000e9c0:	423fffc4 	addi	r8,r8,-1
1000e9c4:	defffb04 	addi	sp,sp,-20
1000e9c8:	2a14703a 	and	r10,r5,r8
1000e9cc:	3812d53a 	srli	r9,r7,20
1000e9d0:	3a10703a 	and	r8,r7,r8
1000e9d4:	2006d77a 	srli	r3,r4,29
1000e9d8:	3004d77a 	srli	r2,r6,29
1000e9dc:	dc000015 	stw	r16,0(sp)
1000e9e0:	501490fa 	slli	r10,r10,3
1000e9e4:	2820d53a 	srli	r16,r5,20
1000e9e8:	401090fa 	slli	r8,r8,3
1000e9ec:	dc800215 	stw	r18,8(sp)
1000e9f0:	dc400115 	stw	r17,4(sp)
1000e9f4:	dfc00415 	stw	ra,16(sp)
1000e9f8:	202290fa 	slli	r17,r4,3
1000e9fc:	dcc00315 	stw	r19,12(sp)
1000ea00:	4a41ffcc 	andi	r9,r9,2047
1000ea04:	0101ffc4 	movi	r4,2047
1000ea08:	2824d7fa 	srli	r18,r5,31
1000ea0c:	8401ffcc 	andi	r16,r16,2047
1000ea10:	50c6b03a 	or	r3,r10,r3
1000ea14:	380ed7fa 	srli	r7,r7,31
1000ea18:	408ab03a 	or	r5,r8,r2
1000ea1c:	300c90fa 	slli	r6,r6,3
1000ea20:	49009626 	beq	r9,r4,1000ec7c <__subdf3+0x2c0>
1000ea24:	39c0005c 	xori	r7,r7,1
1000ea28:	8245c83a 	sub	r2,r16,r9
1000ea2c:	3c807426 	beq	r7,r18,1000ec00 <__subdf3+0x244>
1000ea30:	0080af0e 	bge	zero,r2,1000ecf0 <__subdf3+0x334>
1000ea34:	48002a1e 	bne	r9,zero,1000eae0 <__subdf3+0x124>
1000ea38:	2988b03a 	or	r4,r5,r6
1000ea3c:	20009a1e 	bne	r4,zero,1000eca8 <__subdf3+0x2ec>
1000ea40:	888001cc 	andi	r2,r17,7
1000ea44:	10000726 	beq	r2,zero,1000ea64 <__subdf3+0xa8>
1000ea48:	888003cc 	andi	r2,r17,15
1000ea4c:	01000104 	movi	r4,4
1000ea50:	11000426 	beq	r2,r4,1000ea64 <__subdf3+0xa8>
1000ea54:	890b883a 	add	r5,r17,r4
1000ea58:	2c63803a 	cmpltu	r17,r5,r17
1000ea5c:	1c47883a 	add	r3,r3,r17
1000ea60:	2823883a 	mov	r17,r5
1000ea64:	1880202c 	andhi	r2,r3,128
1000ea68:	10005926 	beq	r2,zero,1000ebd0 <__subdf3+0x214>
1000ea6c:	84000044 	addi	r16,r16,1
1000ea70:	0081ffc4 	movi	r2,2047
1000ea74:	8080be26 	beq	r16,r2,1000ed70 <__subdf3+0x3b4>
1000ea78:	017fe034 	movhi	r5,65408
1000ea7c:	297fffc4 	addi	r5,r5,-1
1000ea80:	1946703a 	and	r3,r3,r5
1000ea84:	1804977a 	slli	r2,r3,29
1000ea88:	1806927a 	slli	r3,r3,9
1000ea8c:	8822d0fa 	srli	r17,r17,3
1000ea90:	8401ffcc 	andi	r16,r16,2047
1000ea94:	180ad33a 	srli	r5,r3,12
1000ea98:	9100004c 	andi	r4,r18,1
1000ea9c:	1444b03a 	or	r2,r2,r17
1000eaa0:	80c1ffcc 	andi	r3,r16,2047
1000eaa4:	1820953a 	slli	r16,r3,20
1000eaa8:	20c03fcc 	andi	r3,r4,255
1000eaac:	180897fa 	slli	r4,r3,31
1000eab0:	00c00434 	movhi	r3,16
1000eab4:	18ffffc4 	addi	r3,r3,-1
1000eab8:	28c6703a 	and	r3,r5,r3
1000eabc:	1c06b03a 	or	r3,r3,r16
1000eac0:	1906b03a 	or	r3,r3,r4
1000eac4:	dfc00417 	ldw	ra,16(sp)
1000eac8:	dcc00317 	ldw	r19,12(sp)
1000eacc:	dc800217 	ldw	r18,8(sp)
1000ead0:	dc400117 	ldw	r17,4(sp)
1000ead4:	dc000017 	ldw	r16,0(sp)
1000ead8:	dec00504 	addi	sp,sp,20
1000eadc:	f800283a 	ret
1000eae0:	0101ffc4 	movi	r4,2047
1000eae4:	813fd626 	beq	r16,r4,1000ea40 <__alt_data_end+0xf800ea40>
1000eae8:	29402034 	orhi	r5,r5,128
1000eaec:	01000e04 	movi	r4,56
1000eaf0:	2080a316 	blt	r4,r2,1000ed80 <__subdf3+0x3c4>
1000eaf4:	010007c4 	movi	r4,31
1000eaf8:	2080c616 	blt	r4,r2,1000ee14 <__subdf3+0x458>
1000eafc:	01000804 	movi	r4,32
1000eb00:	2089c83a 	sub	r4,r4,r2
1000eb04:	2910983a 	sll	r8,r5,r4
1000eb08:	308ed83a 	srl	r7,r6,r2
1000eb0c:	3108983a 	sll	r4,r6,r4
1000eb10:	2884d83a 	srl	r2,r5,r2
1000eb14:	41ccb03a 	or	r6,r8,r7
1000eb18:	2008c03a 	cmpne	r4,r4,zero
1000eb1c:	310cb03a 	or	r6,r6,r4
1000eb20:	898dc83a 	sub	r6,r17,r6
1000eb24:	89a3803a 	cmpltu	r17,r17,r6
1000eb28:	1887c83a 	sub	r3,r3,r2
1000eb2c:	1c47c83a 	sub	r3,r3,r17
1000eb30:	3023883a 	mov	r17,r6
1000eb34:	1880202c 	andhi	r2,r3,128
1000eb38:	10002326 	beq	r2,zero,1000ebc8 <__subdf3+0x20c>
1000eb3c:	04c02034 	movhi	r19,128
1000eb40:	9cffffc4 	addi	r19,r19,-1
1000eb44:	1ce6703a 	and	r19,r3,r19
1000eb48:	98007a26 	beq	r19,zero,1000ed34 <__subdf3+0x378>
1000eb4c:	9809883a 	mov	r4,r19
1000eb50:	000f4bc0 	call	1000f4bc <__clzsi2>
1000eb54:	113ffe04 	addi	r4,r2,-8
1000eb58:	00c007c4 	movi	r3,31
1000eb5c:	19007b16 	blt	r3,r4,1000ed4c <__subdf3+0x390>
1000eb60:	00800804 	movi	r2,32
1000eb64:	1105c83a 	sub	r2,r2,r4
1000eb68:	8884d83a 	srl	r2,r17,r2
1000eb6c:	9906983a 	sll	r3,r19,r4
1000eb70:	8922983a 	sll	r17,r17,r4
1000eb74:	10c4b03a 	or	r2,r2,r3
1000eb78:	24007816 	blt	r4,r16,1000ed5c <__subdf3+0x3a0>
1000eb7c:	2421c83a 	sub	r16,r4,r16
1000eb80:	80c00044 	addi	r3,r16,1
1000eb84:	010007c4 	movi	r4,31
1000eb88:	20c09516 	blt	r4,r3,1000ede0 <__subdf3+0x424>
1000eb8c:	01400804 	movi	r5,32
1000eb90:	28cbc83a 	sub	r5,r5,r3
1000eb94:	88c8d83a 	srl	r4,r17,r3
1000eb98:	8962983a 	sll	r17,r17,r5
1000eb9c:	114a983a 	sll	r5,r2,r5
1000eba0:	10c6d83a 	srl	r3,r2,r3
1000eba4:	8804c03a 	cmpne	r2,r17,zero
1000eba8:	290ab03a 	or	r5,r5,r4
1000ebac:	28a2b03a 	or	r17,r5,r2
1000ebb0:	0021883a 	mov	r16,zero
1000ebb4:	003fa206 	br	1000ea40 <__alt_data_end+0xf800ea40>
1000ebb8:	2090b03a 	or	r8,r4,r2
1000ebbc:	40018e26 	beq	r8,zero,1000f1f8 <__subdf3+0x83c>
1000ebc0:	1007883a 	mov	r3,r2
1000ebc4:	2023883a 	mov	r17,r4
1000ebc8:	888001cc 	andi	r2,r17,7
1000ebcc:	103f9e1e 	bne	r2,zero,1000ea48 <__alt_data_end+0xf800ea48>
1000ebd0:	1804977a 	slli	r2,r3,29
1000ebd4:	8822d0fa 	srli	r17,r17,3
1000ebd8:	1810d0fa 	srli	r8,r3,3
1000ebdc:	9100004c 	andi	r4,r18,1
1000ebe0:	1444b03a 	or	r2,r2,r17
1000ebe4:	00c1ffc4 	movi	r3,2047
1000ebe8:	80c02826 	beq	r16,r3,1000ec8c <__subdf3+0x2d0>
1000ebec:	01400434 	movhi	r5,16
1000ebf0:	297fffc4 	addi	r5,r5,-1
1000ebf4:	80e0703a 	and	r16,r16,r3
1000ebf8:	414a703a 	and	r5,r8,r5
1000ebfc:	003fa806 	br	1000eaa0 <__alt_data_end+0xf800eaa0>
1000ec00:	0080630e 	bge	zero,r2,1000ed90 <__subdf3+0x3d4>
1000ec04:	48003026 	beq	r9,zero,1000ecc8 <__subdf3+0x30c>
1000ec08:	0101ffc4 	movi	r4,2047
1000ec0c:	813f8c26 	beq	r16,r4,1000ea40 <__alt_data_end+0xf800ea40>
1000ec10:	29402034 	orhi	r5,r5,128
1000ec14:	01000e04 	movi	r4,56
1000ec18:	2080a90e 	bge	r4,r2,1000eec0 <__subdf3+0x504>
1000ec1c:	298cb03a 	or	r6,r5,r6
1000ec20:	3012c03a 	cmpne	r9,r6,zero
1000ec24:	0005883a 	mov	r2,zero
1000ec28:	4c53883a 	add	r9,r9,r17
1000ec2c:	4c63803a 	cmpltu	r17,r9,r17
1000ec30:	10c7883a 	add	r3,r2,r3
1000ec34:	88c7883a 	add	r3,r17,r3
1000ec38:	4823883a 	mov	r17,r9
1000ec3c:	1880202c 	andhi	r2,r3,128
1000ec40:	1000d026 	beq	r2,zero,1000ef84 <__subdf3+0x5c8>
1000ec44:	84000044 	addi	r16,r16,1
1000ec48:	0081ffc4 	movi	r2,2047
1000ec4c:	8080fe26 	beq	r16,r2,1000f048 <__subdf3+0x68c>
1000ec50:	00bfe034 	movhi	r2,65408
1000ec54:	10bfffc4 	addi	r2,r2,-1
1000ec58:	1886703a 	and	r3,r3,r2
1000ec5c:	880ad07a 	srli	r5,r17,1
1000ec60:	180497fa 	slli	r2,r3,31
1000ec64:	8900004c 	andi	r4,r17,1
1000ec68:	2922b03a 	or	r17,r5,r4
1000ec6c:	1806d07a 	srli	r3,r3,1
1000ec70:	1462b03a 	or	r17,r2,r17
1000ec74:	3825883a 	mov	r18,r7
1000ec78:	003f7106 	br	1000ea40 <__alt_data_end+0xf800ea40>
1000ec7c:	2984b03a 	or	r2,r5,r6
1000ec80:	103f6826 	beq	r2,zero,1000ea24 <__alt_data_end+0xf800ea24>
1000ec84:	39c03fcc 	andi	r7,r7,255
1000ec88:	003f6706 	br	1000ea28 <__alt_data_end+0xf800ea28>
1000ec8c:	4086b03a 	or	r3,r8,r2
1000ec90:	18015226 	beq	r3,zero,1000f1dc <__subdf3+0x820>
1000ec94:	00c00434 	movhi	r3,16
1000ec98:	41400234 	orhi	r5,r8,8
1000ec9c:	18ffffc4 	addi	r3,r3,-1
1000eca0:	28ca703a 	and	r5,r5,r3
1000eca4:	003f7e06 	br	1000eaa0 <__alt_data_end+0xf800eaa0>
1000eca8:	10bfffc4 	addi	r2,r2,-1
1000ecac:	1000491e 	bne	r2,zero,1000edd4 <__subdf3+0x418>
1000ecb0:	898fc83a 	sub	r7,r17,r6
1000ecb4:	89e3803a 	cmpltu	r17,r17,r7
1000ecb8:	1947c83a 	sub	r3,r3,r5
1000ecbc:	1c47c83a 	sub	r3,r3,r17
1000ecc0:	3823883a 	mov	r17,r7
1000ecc4:	003f9b06 	br	1000eb34 <__alt_data_end+0xf800eb34>
1000ecc8:	2988b03a 	or	r4,r5,r6
1000eccc:	203f5c26 	beq	r4,zero,1000ea40 <__alt_data_end+0xf800ea40>
1000ecd0:	10bfffc4 	addi	r2,r2,-1
1000ecd4:	1000931e 	bne	r2,zero,1000ef24 <__subdf3+0x568>
1000ecd8:	898d883a 	add	r6,r17,r6
1000ecdc:	3463803a 	cmpltu	r17,r6,r17
1000ece0:	1947883a 	add	r3,r3,r5
1000ece4:	88c7883a 	add	r3,r17,r3
1000ece8:	3023883a 	mov	r17,r6
1000ecec:	003fd306 	br	1000ec3c <__alt_data_end+0xf800ec3c>
1000ecf0:	1000541e 	bne	r2,zero,1000ee44 <__subdf3+0x488>
1000ecf4:	80800044 	addi	r2,r16,1
1000ecf8:	1081ffcc 	andi	r2,r2,2047
1000ecfc:	01000044 	movi	r4,1
1000ed00:	2080a20e 	bge	r4,r2,1000ef8c <__subdf3+0x5d0>
1000ed04:	8989c83a 	sub	r4,r17,r6
1000ed08:	8905803a 	cmpltu	r2,r17,r4
1000ed0c:	1967c83a 	sub	r19,r3,r5
1000ed10:	98a7c83a 	sub	r19,r19,r2
1000ed14:	9880202c 	andhi	r2,r19,128
1000ed18:	10006326 	beq	r2,zero,1000eea8 <__subdf3+0x4ec>
1000ed1c:	3463c83a 	sub	r17,r6,r17
1000ed20:	28c7c83a 	sub	r3,r5,r3
1000ed24:	344d803a 	cmpltu	r6,r6,r17
1000ed28:	19a7c83a 	sub	r19,r3,r6
1000ed2c:	3825883a 	mov	r18,r7
1000ed30:	983f861e 	bne	r19,zero,1000eb4c <__alt_data_end+0xf800eb4c>
1000ed34:	8809883a 	mov	r4,r17
1000ed38:	000f4bc0 	call	1000f4bc <__clzsi2>
1000ed3c:	10800804 	addi	r2,r2,32
1000ed40:	113ffe04 	addi	r4,r2,-8
1000ed44:	00c007c4 	movi	r3,31
1000ed48:	193f850e 	bge	r3,r4,1000eb60 <__alt_data_end+0xf800eb60>
1000ed4c:	10bff604 	addi	r2,r2,-40
1000ed50:	8884983a 	sll	r2,r17,r2
1000ed54:	0023883a 	mov	r17,zero
1000ed58:	243f880e 	bge	r4,r16,1000eb7c <__alt_data_end+0xf800eb7c>
1000ed5c:	00ffe034 	movhi	r3,65408
1000ed60:	18ffffc4 	addi	r3,r3,-1
1000ed64:	8121c83a 	sub	r16,r16,r4
1000ed68:	10c6703a 	and	r3,r2,r3
1000ed6c:	003f3406 	br	1000ea40 <__alt_data_end+0xf800ea40>
1000ed70:	9100004c 	andi	r4,r18,1
1000ed74:	000b883a 	mov	r5,zero
1000ed78:	0005883a 	mov	r2,zero
1000ed7c:	003f4806 	br	1000eaa0 <__alt_data_end+0xf800eaa0>
1000ed80:	298cb03a 	or	r6,r5,r6
1000ed84:	300cc03a 	cmpne	r6,r6,zero
1000ed88:	0005883a 	mov	r2,zero
1000ed8c:	003f6406 	br	1000eb20 <__alt_data_end+0xf800eb20>
1000ed90:	10009a1e 	bne	r2,zero,1000effc <__subdf3+0x640>
1000ed94:	82400044 	addi	r9,r16,1
1000ed98:	4881ffcc 	andi	r2,r9,2047
1000ed9c:	02800044 	movi	r10,1
1000eda0:	5080670e 	bge	r10,r2,1000ef40 <__subdf3+0x584>
1000eda4:	0081ffc4 	movi	r2,2047
1000eda8:	4880af26 	beq	r9,r2,1000f068 <__subdf3+0x6ac>
1000edac:	898d883a 	add	r6,r17,r6
1000edb0:	1945883a 	add	r2,r3,r5
1000edb4:	3447803a 	cmpltu	r3,r6,r17
1000edb8:	1887883a 	add	r3,r3,r2
1000edbc:	182297fa 	slli	r17,r3,31
1000edc0:	300cd07a 	srli	r6,r6,1
1000edc4:	1806d07a 	srli	r3,r3,1
1000edc8:	4821883a 	mov	r16,r9
1000edcc:	89a2b03a 	or	r17,r17,r6
1000edd0:	003f1b06 	br	1000ea40 <__alt_data_end+0xf800ea40>
1000edd4:	0101ffc4 	movi	r4,2047
1000edd8:	813f441e 	bne	r16,r4,1000eaec <__alt_data_end+0xf800eaec>
1000eddc:	003f1806 	br	1000ea40 <__alt_data_end+0xf800ea40>
1000ede0:	843ff844 	addi	r16,r16,-31
1000ede4:	01400804 	movi	r5,32
1000ede8:	1408d83a 	srl	r4,r2,r16
1000edec:	19405026 	beq	r3,r5,1000ef30 <__subdf3+0x574>
1000edf0:	01401004 	movi	r5,64
1000edf4:	28c7c83a 	sub	r3,r5,r3
1000edf8:	10c4983a 	sll	r2,r2,r3
1000edfc:	88a2b03a 	or	r17,r17,r2
1000ee00:	8822c03a 	cmpne	r17,r17,zero
1000ee04:	2462b03a 	or	r17,r4,r17
1000ee08:	0007883a 	mov	r3,zero
1000ee0c:	0021883a 	mov	r16,zero
1000ee10:	003f6d06 	br	1000ebc8 <__alt_data_end+0xf800ebc8>
1000ee14:	11fff804 	addi	r7,r2,-32
1000ee18:	01000804 	movi	r4,32
1000ee1c:	29ced83a 	srl	r7,r5,r7
1000ee20:	11004526 	beq	r2,r4,1000ef38 <__subdf3+0x57c>
1000ee24:	01001004 	movi	r4,64
1000ee28:	2089c83a 	sub	r4,r4,r2
1000ee2c:	2904983a 	sll	r2,r5,r4
1000ee30:	118cb03a 	or	r6,r2,r6
1000ee34:	300cc03a 	cmpne	r6,r6,zero
1000ee38:	398cb03a 	or	r6,r7,r6
1000ee3c:	0005883a 	mov	r2,zero
1000ee40:	003f3706 	br	1000eb20 <__alt_data_end+0xf800eb20>
1000ee44:	80002a26 	beq	r16,zero,1000eef0 <__subdf3+0x534>
1000ee48:	0101ffc4 	movi	r4,2047
1000ee4c:	49006626 	beq	r9,r4,1000efe8 <__subdf3+0x62c>
1000ee50:	0085c83a 	sub	r2,zero,r2
1000ee54:	18c02034 	orhi	r3,r3,128
1000ee58:	01000e04 	movi	r4,56
1000ee5c:	20807e16 	blt	r4,r2,1000f058 <__subdf3+0x69c>
1000ee60:	010007c4 	movi	r4,31
1000ee64:	2080e716 	blt	r4,r2,1000f204 <__subdf3+0x848>
1000ee68:	01000804 	movi	r4,32
1000ee6c:	2089c83a 	sub	r4,r4,r2
1000ee70:	1914983a 	sll	r10,r3,r4
1000ee74:	8890d83a 	srl	r8,r17,r2
1000ee78:	8908983a 	sll	r4,r17,r4
1000ee7c:	1884d83a 	srl	r2,r3,r2
1000ee80:	5222b03a 	or	r17,r10,r8
1000ee84:	2006c03a 	cmpne	r3,r4,zero
1000ee88:	88e2b03a 	or	r17,r17,r3
1000ee8c:	3463c83a 	sub	r17,r6,r17
1000ee90:	2885c83a 	sub	r2,r5,r2
1000ee94:	344d803a 	cmpltu	r6,r6,r17
1000ee98:	1187c83a 	sub	r3,r2,r6
1000ee9c:	4821883a 	mov	r16,r9
1000eea0:	3825883a 	mov	r18,r7
1000eea4:	003f2306 	br	1000eb34 <__alt_data_end+0xf800eb34>
1000eea8:	24d0b03a 	or	r8,r4,r19
1000eeac:	40001b1e 	bne	r8,zero,1000ef1c <__subdf3+0x560>
1000eeb0:	0005883a 	mov	r2,zero
1000eeb4:	0009883a 	mov	r4,zero
1000eeb8:	0021883a 	mov	r16,zero
1000eebc:	003f4906 	br	1000ebe4 <__alt_data_end+0xf800ebe4>
1000eec0:	010007c4 	movi	r4,31
1000eec4:	20803a16 	blt	r4,r2,1000efb0 <__subdf3+0x5f4>
1000eec8:	01000804 	movi	r4,32
1000eecc:	2089c83a 	sub	r4,r4,r2
1000eed0:	2912983a 	sll	r9,r5,r4
1000eed4:	3090d83a 	srl	r8,r6,r2
1000eed8:	3108983a 	sll	r4,r6,r4
1000eedc:	2884d83a 	srl	r2,r5,r2
1000eee0:	4a12b03a 	or	r9,r9,r8
1000eee4:	2008c03a 	cmpne	r4,r4,zero
1000eee8:	4912b03a 	or	r9,r9,r4
1000eeec:	003f4e06 	br	1000ec28 <__alt_data_end+0xf800ec28>
1000eef0:	1c48b03a 	or	r4,r3,r17
1000eef4:	20003c26 	beq	r4,zero,1000efe8 <__subdf3+0x62c>
1000eef8:	0084303a 	nor	r2,zero,r2
1000eefc:	1000381e 	bne	r2,zero,1000efe0 <__subdf3+0x624>
1000ef00:	3463c83a 	sub	r17,r6,r17
1000ef04:	28c5c83a 	sub	r2,r5,r3
1000ef08:	344d803a 	cmpltu	r6,r6,r17
1000ef0c:	1187c83a 	sub	r3,r2,r6
1000ef10:	4821883a 	mov	r16,r9
1000ef14:	3825883a 	mov	r18,r7
1000ef18:	003f0606 	br	1000eb34 <__alt_data_end+0xf800eb34>
1000ef1c:	2023883a 	mov	r17,r4
1000ef20:	003f0906 	br	1000eb48 <__alt_data_end+0xf800eb48>
1000ef24:	0101ffc4 	movi	r4,2047
1000ef28:	813f3a1e 	bne	r16,r4,1000ec14 <__alt_data_end+0xf800ec14>
1000ef2c:	003ec406 	br	1000ea40 <__alt_data_end+0xf800ea40>
1000ef30:	0005883a 	mov	r2,zero
1000ef34:	003fb106 	br	1000edfc <__alt_data_end+0xf800edfc>
1000ef38:	0005883a 	mov	r2,zero
1000ef3c:	003fbc06 	br	1000ee30 <__alt_data_end+0xf800ee30>
1000ef40:	1c44b03a 	or	r2,r3,r17
1000ef44:	80008e1e 	bne	r16,zero,1000f180 <__subdf3+0x7c4>
1000ef48:	1000c826 	beq	r2,zero,1000f26c <__subdf3+0x8b0>
1000ef4c:	2984b03a 	or	r2,r5,r6
1000ef50:	103ebb26 	beq	r2,zero,1000ea40 <__alt_data_end+0xf800ea40>
1000ef54:	8989883a 	add	r4,r17,r6
1000ef58:	1945883a 	add	r2,r3,r5
1000ef5c:	2447803a 	cmpltu	r3,r4,r17
1000ef60:	1887883a 	add	r3,r3,r2
1000ef64:	1880202c 	andhi	r2,r3,128
1000ef68:	2023883a 	mov	r17,r4
1000ef6c:	103f1626 	beq	r2,zero,1000ebc8 <__alt_data_end+0xf800ebc8>
1000ef70:	00bfe034 	movhi	r2,65408
1000ef74:	10bfffc4 	addi	r2,r2,-1
1000ef78:	5021883a 	mov	r16,r10
1000ef7c:	1886703a 	and	r3,r3,r2
1000ef80:	003eaf06 	br	1000ea40 <__alt_data_end+0xf800ea40>
1000ef84:	3825883a 	mov	r18,r7
1000ef88:	003f0f06 	br	1000ebc8 <__alt_data_end+0xf800ebc8>
1000ef8c:	1c44b03a 	or	r2,r3,r17
1000ef90:	8000251e 	bne	r16,zero,1000f028 <__subdf3+0x66c>
1000ef94:	1000661e 	bne	r2,zero,1000f130 <__subdf3+0x774>
1000ef98:	2990b03a 	or	r8,r5,r6
1000ef9c:	40009626 	beq	r8,zero,1000f1f8 <__subdf3+0x83c>
1000efa0:	2807883a 	mov	r3,r5
1000efa4:	3023883a 	mov	r17,r6
1000efa8:	3825883a 	mov	r18,r7
1000efac:	003ea406 	br	1000ea40 <__alt_data_end+0xf800ea40>
1000efb0:	127ff804 	addi	r9,r2,-32
1000efb4:	01000804 	movi	r4,32
1000efb8:	2a52d83a 	srl	r9,r5,r9
1000efbc:	11008c26 	beq	r2,r4,1000f1f0 <__subdf3+0x834>
1000efc0:	01001004 	movi	r4,64
1000efc4:	2085c83a 	sub	r2,r4,r2
1000efc8:	2884983a 	sll	r2,r5,r2
1000efcc:	118cb03a 	or	r6,r2,r6
1000efd0:	300cc03a 	cmpne	r6,r6,zero
1000efd4:	4992b03a 	or	r9,r9,r6
1000efd8:	0005883a 	mov	r2,zero
1000efdc:	003f1206 	br	1000ec28 <__alt_data_end+0xf800ec28>
1000efe0:	0101ffc4 	movi	r4,2047
1000efe4:	493f9c1e 	bne	r9,r4,1000ee58 <__alt_data_end+0xf800ee58>
1000efe8:	2807883a 	mov	r3,r5
1000efec:	3023883a 	mov	r17,r6
1000eff0:	4821883a 	mov	r16,r9
1000eff4:	3825883a 	mov	r18,r7
1000eff8:	003e9106 	br	1000ea40 <__alt_data_end+0xf800ea40>
1000effc:	80001f1e 	bne	r16,zero,1000f07c <__subdf3+0x6c0>
1000f000:	1c48b03a 	or	r4,r3,r17
1000f004:	20005a26 	beq	r4,zero,1000f170 <__subdf3+0x7b4>
1000f008:	0084303a 	nor	r2,zero,r2
1000f00c:	1000561e 	bne	r2,zero,1000f168 <__subdf3+0x7ac>
1000f010:	89a3883a 	add	r17,r17,r6
1000f014:	1945883a 	add	r2,r3,r5
1000f018:	898d803a 	cmpltu	r6,r17,r6
1000f01c:	3087883a 	add	r3,r6,r2
1000f020:	4821883a 	mov	r16,r9
1000f024:	003f0506 	br	1000ec3c <__alt_data_end+0xf800ec3c>
1000f028:	10002b1e 	bne	r2,zero,1000f0d8 <__subdf3+0x71c>
1000f02c:	2984b03a 	or	r2,r5,r6
1000f030:	10008026 	beq	r2,zero,1000f234 <__subdf3+0x878>
1000f034:	2807883a 	mov	r3,r5
1000f038:	3023883a 	mov	r17,r6
1000f03c:	3825883a 	mov	r18,r7
1000f040:	0401ffc4 	movi	r16,2047
1000f044:	003e7e06 	br	1000ea40 <__alt_data_end+0xf800ea40>
1000f048:	3809883a 	mov	r4,r7
1000f04c:	0011883a 	mov	r8,zero
1000f050:	0005883a 	mov	r2,zero
1000f054:	003ee306 	br	1000ebe4 <__alt_data_end+0xf800ebe4>
1000f058:	1c62b03a 	or	r17,r3,r17
1000f05c:	8822c03a 	cmpne	r17,r17,zero
1000f060:	0005883a 	mov	r2,zero
1000f064:	003f8906 	br	1000ee8c <__alt_data_end+0xf800ee8c>
1000f068:	3809883a 	mov	r4,r7
1000f06c:	4821883a 	mov	r16,r9
1000f070:	0011883a 	mov	r8,zero
1000f074:	0005883a 	mov	r2,zero
1000f078:	003eda06 	br	1000ebe4 <__alt_data_end+0xf800ebe4>
1000f07c:	0101ffc4 	movi	r4,2047
1000f080:	49003b26 	beq	r9,r4,1000f170 <__subdf3+0x7b4>
1000f084:	0085c83a 	sub	r2,zero,r2
1000f088:	18c02034 	orhi	r3,r3,128
1000f08c:	01000e04 	movi	r4,56
1000f090:	20806e16 	blt	r4,r2,1000f24c <__subdf3+0x890>
1000f094:	010007c4 	movi	r4,31
1000f098:	20807716 	blt	r4,r2,1000f278 <__subdf3+0x8bc>
1000f09c:	01000804 	movi	r4,32
1000f0a0:	2089c83a 	sub	r4,r4,r2
1000f0a4:	1914983a 	sll	r10,r3,r4
1000f0a8:	8890d83a 	srl	r8,r17,r2
1000f0ac:	8908983a 	sll	r4,r17,r4
1000f0b0:	1884d83a 	srl	r2,r3,r2
1000f0b4:	5222b03a 	or	r17,r10,r8
1000f0b8:	2006c03a 	cmpne	r3,r4,zero
1000f0bc:	88e2b03a 	or	r17,r17,r3
1000f0c0:	89a3883a 	add	r17,r17,r6
1000f0c4:	1145883a 	add	r2,r2,r5
1000f0c8:	898d803a 	cmpltu	r6,r17,r6
1000f0cc:	3087883a 	add	r3,r6,r2
1000f0d0:	4821883a 	mov	r16,r9
1000f0d4:	003ed906 	br	1000ec3c <__alt_data_end+0xf800ec3c>
1000f0d8:	2984b03a 	or	r2,r5,r6
1000f0dc:	10004226 	beq	r2,zero,1000f1e8 <__subdf3+0x82c>
1000f0e0:	1808d0fa 	srli	r4,r3,3
1000f0e4:	8822d0fa 	srli	r17,r17,3
1000f0e8:	1806977a 	slli	r3,r3,29
1000f0ec:	2080022c 	andhi	r2,r4,8
1000f0f0:	1c62b03a 	or	r17,r3,r17
1000f0f4:	10000826 	beq	r2,zero,1000f118 <__subdf3+0x75c>
1000f0f8:	2812d0fa 	srli	r9,r5,3
1000f0fc:	4880022c 	andhi	r2,r9,8
1000f100:	1000051e 	bne	r2,zero,1000f118 <__subdf3+0x75c>
1000f104:	300cd0fa 	srli	r6,r6,3
1000f108:	2804977a 	slli	r2,r5,29
1000f10c:	4809883a 	mov	r4,r9
1000f110:	3825883a 	mov	r18,r7
1000f114:	11a2b03a 	or	r17,r2,r6
1000f118:	8806d77a 	srli	r3,r17,29
1000f11c:	200890fa 	slli	r4,r4,3
1000f120:	882290fa 	slli	r17,r17,3
1000f124:	0401ffc4 	movi	r16,2047
1000f128:	1906b03a 	or	r3,r3,r4
1000f12c:	003e4406 	br	1000ea40 <__alt_data_end+0xf800ea40>
1000f130:	2984b03a 	or	r2,r5,r6
1000f134:	103e4226 	beq	r2,zero,1000ea40 <__alt_data_end+0xf800ea40>
1000f138:	8989c83a 	sub	r4,r17,r6
1000f13c:	8911803a 	cmpltu	r8,r17,r4
1000f140:	1945c83a 	sub	r2,r3,r5
1000f144:	1205c83a 	sub	r2,r2,r8
1000f148:	1200202c 	andhi	r8,r2,128
1000f14c:	403e9a26 	beq	r8,zero,1000ebb8 <__alt_data_end+0xf800ebb8>
1000f150:	3463c83a 	sub	r17,r6,r17
1000f154:	28c5c83a 	sub	r2,r5,r3
1000f158:	344d803a 	cmpltu	r6,r6,r17
1000f15c:	1187c83a 	sub	r3,r2,r6
1000f160:	3825883a 	mov	r18,r7
1000f164:	003e3606 	br	1000ea40 <__alt_data_end+0xf800ea40>
1000f168:	0101ffc4 	movi	r4,2047
1000f16c:	493fc71e 	bne	r9,r4,1000f08c <__alt_data_end+0xf800f08c>
1000f170:	2807883a 	mov	r3,r5
1000f174:	3023883a 	mov	r17,r6
1000f178:	4821883a 	mov	r16,r9
1000f17c:	003e3006 	br	1000ea40 <__alt_data_end+0xf800ea40>
1000f180:	10003626 	beq	r2,zero,1000f25c <__subdf3+0x8a0>
1000f184:	2984b03a 	or	r2,r5,r6
1000f188:	10001726 	beq	r2,zero,1000f1e8 <__subdf3+0x82c>
1000f18c:	1808d0fa 	srli	r4,r3,3
1000f190:	8822d0fa 	srli	r17,r17,3
1000f194:	1806977a 	slli	r3,r3,29
1000f198:	2080022c 	andhi	r2,r4,8
1000f19c:	1c62b03a 	or	r17,r3,r17
1000f1a0:	10000726 	beq	r2,zero,1000f1c0 <__subdf3+0x804>
1000f1a4:	2812d0fa 	srli	r9,r5,3
1000f1a8:	4880022c 	andhi	r2,r9,8
1000f1ac:	1000041e 	bne	r2,zero,1000f1c0 <__subdf3+0x804>
1000f1b0:	300cd0fa 	srli	r6,r6,3
1000f1b4:	2804977a 	slli	r2,r5,29
1000f1b8:	4809883a 	mov	r4,r9
1000f1bc:	11a2b03a 	or	r17,r2,r6
1000f1c0:	8806d77a 	srli	r3,r17,29
1000f1c4:	200890fa 	slli	r4,r4,3
1000f1c8:	882290fa 	slli	r17,r17,3
1000f1cc:	3825883a 	mov	r18,r7
1000f1d0:	1906b03a 	or	r3,r3,r4
1000f1d4:	0401ffc4 	movi	r16,2047
1000f1d8:	003e1906 	br	1000ea40 <__alt_data_end+0xf800ea40>
1000f1dc:	000b883a 	mov	r5,zero
1000f1e0:	0005883a 	mov	r2,zero
1000f1e4:	003e2e06 	br	1000eaa0 <__alt_data_end+0xf800eaa0>
1000f1e8:	0401ffc4 	movi	r16,2047
1000f1ec:	003e1406 	br	1000ea40 <__alt_data_end+0xf800ea40>
1000f1f0:	0005883a 	mov	r2,zero
1000f1f4:	003f7506 	br	1000efcc <__alt_data_end+0xf800efcc>
1000f1f8:	0005883a 	mov	r2,zero
1000f1fc:	0009883a 	mov	r4,zero
1000f200:	003e7806 	br	1000ebe4 <__alt_data_end+0xf800ebe4>
1000f204:	123ff804 	addi	r8,r2,-32
1000f208:	01000804 	movi	r4,32
1000f20c:	1a10d83a 	srl	r8,r3,r8
1000f210:	11002526 	beq	r2,r4,1000f2a8 <__subdf3+0x8ec>
1000f214:	01001004 	movi	r4,64
1000f218:	2085c83a 	sub	r2,r4,r2
1000f21c:	1884983a 	sll	r2,r3,r2
1000f220:	1444b03a 	or	r2,r2,r17
1000f224:	1004c03a 	cmpne	r2,r2,zero
1000f228:	40a2b03a 	or	r17,r8,r2
1000f22c:	0005883a 	mov	r2,zero
1000f230:	003f1606 	br	1000ee8c <__alt_data_end+0xf800ee8c>
1000f234:	02000434 	movhi	r8,16
1000f238:	0009883a 	mov	r4,zero
1000f23c:	423fffc4 	addi	r8,r8,-1
1000f240:	00bfffc4 	movi	r2,-1
1000f244:	0401ffc4 	movi	r16,2047
1000f248:	003e6606 	br	1000ebe4 <__alt_data_end+0xf800ebe4>
1000f24c:	1c62b03a 	or	r17,r3,r17
1000f250:	8822c03a 	cmpne	r17,r17,zero
1000f254:	0005883a 	mov	r2,zero
1000f258:	003f9906 	br	1000f0c0 <__alt_data_end+0xf800f0c0>
1000f25c:	2807883a 	mov	r3,r5
1000f260:	3023883a 	mov	r17,r6
1000f264:	0401ffc4 	movi	r16,2047
1000f268:	003df506 	br	1000ea40 <__alt_data_end+0xf800ea40>
1000f26c:	2807883a 	mov	r3,r5
1000f270:	3023883a 	mov	r17,r6
1000f274:	003df206 	br	1000ea40 <__alt_data_end+0xf800ea40>
1000f278:	123ff804 	addi	r8,r2,-32
1000f27c:	01000804 	movi	r4,32
1000f280:	1a10d83a 	srl	r8,r3,r8
1000f284:	11000a26 	beq	r2,r4,1000f2b0 <__subdf3+0x8f4>
1000f288:	01001004 	movi	r4,64
1000f28c:	2085c83a 	sub	r2,r4,r2
1000f290:	1884983a 	sll	r2,r3,r2
1000f294:	1444b03a 	or	r2,r2,r17
1000f298:	1004c03a 	cmpne	r2,r2,zero
1000f29c:	40a2b03a 	or	r17,r8,r2
1000f2a0:	0005883a 	mov	r2,zero
1000f2a4:	003f8606 	br	1000f0c0 <__alt_data_end+0xf800f0c0>
1000f2a8:	0005883a 	mov	r2,zero
1000f2ac:	003fdc06 	br	1000f220 <__alt_data_end+0xf800f220>
1000f2b0:	0005883a 	mov	r2,zero
1000f2b4:	003ff706 	br	1000f294 <__alt_data_end+0xf800f294>

1000f2b8 <__fixdfsi>:
1000f2b8:	280cd53a 	srli	r6,r5,20
1000f2bc:	00c00434 	movhi	r3,16
1000f2c0:	18ffffc4 	addi	r3,r3,-1
1000f2c4:	3181ffcc 	andi	r6,r6,2047
1000f2c8:	01c0ff84 	movi	r7,1022
1000f2cc:	28c6703a 	and	r3,r5,r3
1000f2d0:	280ad7fa 	srli	r5,r5,31
1000f2d4:	3980120e 	bge	r7,r6,1000f320 <__fixdfsi+0x68>
1000f2d8:	00810744 	movi	r2,1053
1000f2dc:	11800c16 	blt	r2,r6,1000f310 <__fixdfsi+0x58>
1000f2e0:	00810cc4 	movi	r2,1075
1000f2e4:	1185c83a 	sub	r2,r2,r6
1000f2e8:	01c007c4 	movi	r7,31
1000f2ec:	18c00434 	orhi	r3,r3,16
1000f2f0:	38800d16 	blt	r7,r2,1000f328 <__fixdfsi+0x70>
1000f2f4:	31befb44 	addi	r6,r6,-1043
1000f2f8:	2084d83a 	srl	r2,r4,r2
1000f2fc:	1986983a 	sll	r3,r3,r6
1000f300:	1884b03a 	or	r2,r3,r2
1000f304:	28000726 	beq	r5,zero,1000f324 <__fixdfsi+0x6c>
1000f308:	0085c83a 	sub	r2,zero,r2
1000f30c:	f800283a 	ret
1000f310:	00a00034 	movhi	r2,32768
1000f314:	10bfffc4 	addi	r2,r2,-1
1000f318:	2885883a 	add	r2,r5,r2
1000f31c:	f800283a 	ret
1000f320:	0005883a 	mov	r2,zero
1000f324:	f800283a 	ret
1000f328:	008104c4 	movi	r2,1043
1000f32c:	1185c83a 	sub	r2,r2,r6
1000f330:	1884d83a 	srl	r2,r3,r2
1000f334:	003ff306 	br	1000f304 <__alt_data_end+0xf800f304>

1000f338 <__floatsidf>:
1000f338:	defffd04 	addi	sp,sp,-12
1000f33c:	dfc00215 	stw	ra,8(sp)
1000f340:	dc400115 	stw	r17,4(sp)
1000f344:	dc000015 	stw	r16,0(sp)
1000f348:	20002b26 	beq	r4,zero,1000f3f8 <__floatsidf+0xc0>
1000f34c:	2023883a 	mov	r17,r4
1000f350:	2020d7fa 	srli	r16,r4,31
1000f354:	20002d16 	blt	r4,zero,1000f40c <__floatsidf+0xd4>
1000f358:	8809883a 	mov	r4,r17
1000f35c:	000f4bc0 	call	1000f4bc <__clzsi2>
1000f360:	01410784 	movi	r5,1054
1000f364:	288bc83a 	sub	r5,r5,r2
1000f368:	01010cc4 	movi	r4,1075
1000f36c:	2149c83a 	sub	r4,r4,r5
1000f370:	00c007c4 	movi	r3,31
1000f374:	1900160e 	bge	r3,r4,1000f3d0 <__floatsidf+0x98>
1000f378:	00c104c4 	movi	r3,1043
1000f37c:	1947c83a 	sub	r3,r3,r5
1000f380:	88c6983a 	sll	r3,r17,r3
1000f384:	00800434 	movhi	r2,16
1000f388:	10bfffc4 	addi	r2,r2,-1
1000f38c:	1886703a 	and	r3,r3,r2
1000f390:	2941ffcc 	andi	r5,r5,2047
1000f394:	800d883a 	mov	r6,r16
1000f398:	0005883a 	mov	r2,zero
1000f39c:	280a953a 	slli	r5,r5,20
1000f3a0:	31803fcc 	andi	r6,r6,255
1000f3a4:	01000434 	movhi	r4,16
1000f3a8:	300c97fa 	slli	r6,r6,31
1000f3ac:	213fffc4 	addi	r4,r4,-1
1000f3b0:	1906703a 	and	r3,r3,r4
1000f3b4:	1946b03a 	or	r3,r3,r5
1000f3b8:	1986b03a 	or	r3,r3,r6
1000f3bc:	dfc00217 	ldw	ra,8(sp)
1000f3c0:	dc400117 	ldw	r17,4(sp)
1000f3c4:	dc000017 	ldw	r16,0(sp)
1000f3c8:	dec00304 	addi	sp,sp,12
1000f3cc:	f800283a 	ret
1000f3d0:	00c002c4 	movi	r3,11
1000f3d4:	1887c83a 	sub	r3,r3,r2
1000f3d8:	88c6d83a 	srl	r3,r17,r3
1000f3dc:	8904983a 	sll	r2,r17,r4
1000f3e0:	01000434 	movhi	r4,16
1000f3e4:	213fffc4 	addi	r4,r4,-1
1000f3e8:	2941ffcc 	andi	r5,r5,2047
1000f3ec:	1906703a 	and	r3,r3,r4
1000f3f0:	800d883a 	mov	r6,r16
1000f3f4:	003fe906 	br	1000f39c <__alt_data_end+0xf800f39c>
1000f3f8:	000d883a 	mov	r6,zero
1000f3fc:	000b883a 	mov	r5,zero
1000f400:	0007883a 	mov	r3,zero
1000f404:	0005883a 	mov	r2,zero
1000f408:	003fe406 	br	1000f39c <__alt_data_end+0xf800f39c>
1000f40c:	0123c83a 	sub	r17,zero,r4
1000f410:	003fd106 	br	1000f358 <__alt_data_end+0xf800f358>

1000f414 <__floatunsidf>:
1000f414:	defffe04 	addi	sp,sp,-8
1000f418:	dc000015 	stw	r16,0(sp)
1000f41c:	dfc00115 	stw	ra,4(sp)
1000f420:	2021883a 	mov	r16,r4
1000f424:	20002226 	beq	r4,zero,1000f4b0 <__floatunsidf+0x9c>
1000f428:	000f4bc0 	call	1000f4bc <__clzsi2>
1000f42c:	01010784 	movi	r4,1054
1000f430:	2089c83a 	sub	r4,r4,r2
1000f434:	01810cc4 	movi	r6,1075
1000f438:	310dc83a 	sub	r6,r6,r4
1000f43c:	00c007c4 	movi	r3,31
1000f440:	1980120e 	bge	r3,r6,1000f48c <__floatunsidf+0x78>
1000f444:	00c104c4 	movi	r3,1043
1000f448:	1907c83a 	sub	r3,r3,r4
1000f44c:	80ca983a 	sll	r5,r16,r3
1000f450:	00800434 	movhi	r2,16
1000f454:	10bfffc4 	addi	r2,r2,-1
1000f458:	2101ffcc 	andi	r4,r4,2047
1000f45c:	0021883a 	mov	r16,zero
1000f460:	288a703a 	and	r5,r5,r2
1000f464:	2008953a 	slli	r4,r4,20
1000f468:	00c00434 	movhi	r3,16
1000f46c:	18ffffc4 	addi	r3,r3,-1
1000f470:	28c6703a 	and	r3,r5,r3
1000f474:	8005883a 	mov	r2,r16
1000f478:	1906b03a 	or	r3,r3,r4
1000f47c:	dfc00117 	ldw	ra,4(sp)
1000f480:	dc000017 	ldw	r16,0(sp)
1000f484:	dec00204 	addi	sp,sp,8
1000f488:	f800283a 	ret
1000f48c:	00c002c4 	movi	r3,11
1000f490:	188bc83a 	sub	r5,r3,r2
1000f494:	814ad83a 	srl	r5,r16,r5
1000f498:	00c00434 	movhi	r3,16
1000f49c:	18ffffc4 	addi	r3,r3,-1
1000f4a0:	81a0983a 	sll	r16,r16,r6
1000f4a4:	2101ffcc 	andi	r4,r4,2047
1000f4a8:	28ca703a 	and	r5,r5,r3
1000f4ac:	003fed06 	br	1000f464 <__alt_data_end+0xf800f464>
1000f4b0:	0009883a 	mov	r4,zero
1000f4b4:	000b883a 	mov	r5,zero
1000f4b8:	003fea06 	br	1000f464 <__alt_data_end+0xf800f464>

1000f4bc <__clzsi2>:
1000f4bc:	00bfffd4 	movui	r2,65535
1000f4c0:	11000536 	bltu	r2,r4,1000f4d8 <__clzsi2+0x1c>
1000f4c4:	00803fc4 	movi	r2,255
1000f4c8:	11000f36 	bltu	r2,r4,1000f508 <__clzsi2+0x4c>
1000f4cc:	00800804 	movi	r2,32
1000f4d0:	0007883a 	mov	r3,zero
1000f4d4:	00000506 	br	1000f4ec <__clzsi2+0x30>
1000f4d8:	00804034 	movhi	r2,256
1000f4dc:	10bfffc4 	addi	r2,r2,-1
1000f4e0:	11000c2e 	bgeu	r2,r4,1000f514 <__clzsi2+0x58>
1000f4e4:	00800204 	movi	r2,8
1000f4e8:	00c00604 	movi	r3,24
1000f4ec:	20c8d83a 	srl	r4,r4,r3
1000f4f0:	00c40074 	movhi	r3,4097
1000f4f4:	18c7ca04 	addi	r3,r3,7976
1000f4f8:	1909883a 	add	r4,r3,r4
1000f4fc:	20c00003 	ldbu	r3,0(r4)
1000f500:	10c5c83a 	sub	r2,r2,r3
1000f504:	f800283a 	ret
1000f508:	00800604 	movi	r2,24
1000f50c:	00c00204 	movi	r3,8
1000f510:	003ff606 	br	1000f4ec <__alt_data_end+0xf800f4ec>
1000f514:	00800404 	movi	r2,16
1000f518:	1007883a 	mov	r3,r2
1000f51c:	003ff306 	br	1000f4ec <__alt_data_end+0xf800f4ec>

1000f520 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f520:	defffe04 	addi	sp,sp,-8
1000f524:	dfc00115 	stw	ra,4(sp)
1000f528:	df000015 	stw	fp,0(sp)
1000f52c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f530:	d0a00e17 	ldw	r2,-32712(gp)
1000f534:	10000326 	beq	r2,zero,1000f544 <alt_get_errno+0x24>
1000f538:	d0a00e17 	ldw	r2,-32712(gp)
1000f53c:	103ee83a 	callr	r2
1000f540:	00000106 	br	1000f548 <alt_get_errno+0x28>
1000f544:	d0a6d204 	addi	r2,gp,-25784
}
1000f548:	e037883a 	mov	sp,fp
1000f54c:	dfc00117 	ldw	ra,4(sp)
1000f550:	df000017 	ldw	fp,0(sp)
1000f554:	dec00204 	addi	sp,sp,8
1000f558:	f800283a 	ret

1000f55c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000f55c:	defffb04 	addi	sp,sp,-20
1000f560:	dfc00415 	stw	ra,16(sp)
1000f564:	df000315 	stw	fp,12(sp)
1000f568:	df000304 	addi	fp,sp,12
1000f56c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000f570:	e0bfff17 	ldw	r2,-4(fp)
1000f574:	10000816 	blt	r2,zero,1000f598 <close+0x3c>
1000f578:	01400304 	movi	r5,12
1000f57c:	e13fff17 	ldw	r4,-4(fp)
1000f580:	00010d40 	call	100010d4 <__mulsi3>
1000f584:	1007883a 	mov	r3,r2
1000f588:	00840074 	movhi	r2,4097
1000f58c:	108a4a04 	addi	r2,r2,10536
1000f590:	1885883a 	add	r2,r3,r2
1000f594:	00000106 	br	1000f59c <close+0x40>
1000f598:	0005883a 	mov	r2,zero
1000f59c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000f5a0:	e0bffd17 	ldw	r2,-12(fp)
1000f5a4:	10001926 	beq	r2,zero,1000f60c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000f5a8:	e0bffd17 	ldw	r2,-12(fp)
1000f5ac:	10800017 	ldw	r2,0(r2)
1000f5b0:	10800417 	ldw	r2,16(r2)
1000f5b4:	10000626 	beq	r2,zero,1000f5d0 <close+0x74>
1000f5b8:	e0bffd17 	ldw	r2,-12(fp)
1000f5bc:	10800017 	ldw	r2,0(r2)
1000f5c0:	10800417 	ldw	r2,16(r2)
1000f5c4:	e13ffd17 	ldw	r4,-12(fp)
1000f5c8:	103ee83a 	callr	r2
1000f5cc:	00000106 	br	1000f5d4 <close+0x78>
1000f5d0:	0005883a 	mov	r2,zero
1000f5d4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000f5d8:	e13fff17 	ldw	r4,-4(fp)
1000f5dc:	000fe040 	call	1000fe04 <alt_release_fd>
    if (rval < 0)
1000f5e0:	e0bffe17 	ldw	r2,-8(fp)
1000f5e4:	1000070e 	bge	r2,zero,1000f604 <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000f5e8:	000f5200 	call	1000f520 <alt_get_errno>
1000f5ec:	1007883a 	mov	r3,r2
1000f5f0:	e0bffe17 	ldw	r2,-8(fp)
1000f5f4:	0085c83a 	sub	r2,zero,r2
1000f5f8:	18800015 	stw	r2,0(r3)
      return -1;
1000f5fc:	00bfffc4 	movi	r2,-1
1000f600:	00000706 	br	1000f620 <close+0xc4>
    }
    return 0;
1000f604:	0005883a 	mov	r2,zero
1000f608:	00000506 	br	1000f620 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f60c:	000f5200 	call	1000f520 <alt_get_errno>
1000f610:	1007883a 	mov	r3,r2
1000f614:	00801444 	movi	r2,81
1000f618:	18800015 	stw	r2,0(r3)
    return -1;
1000f61c:	00bfffc4 	movi	r2,-1
  }
}
1000f620:	e037883a 	mov	sp,fp
1000f624:	dfc00117 	ldw	ra,4(sp)
1000f628:	df000017 	ldw	fp,0(sp)
1000f62c:	dec00204 	addi	sp,sp,8
1000f630:	f800283a 	ret

1000f634 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000f634:	defffc04 	addi	sp,sp,-16
1000f638:	df000315 	stw	fp,12(sp)
1000f63c:	df000304 	addi	fp,sp,12
1000f640:	e13ffd15 	stw	r4,-12(fp)
1000f644:	e17ffe15 	stw	r5,-8(fp)
1000f648:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000f64c:	e0bfff17 	ldw	r2,-4(fp)
}
1000f650:	e037883a 	mov	sp,fp
1000f654:	df000017 	ldw	fp,0(sp)
1000f658:	dec00104 	addi	sp,sp,4
1000f65c:	f800283a 	ret

1000f660 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1000f660:	defffd04 	addi	sp,sp,-12
1000f664:	df000215 	stw	fp,8(sp)
1000f668:	df000204 	addi	fp,sp,8
1000f66c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1000f670:	0001883a 	nop
1000f674:	e0bfff17 	ldw	r2,-4(fp)
1000f678:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
1000f67c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1000f680:	10000226 	beq	r2,zero,1000f68c <_exit+0x2c>
    ALT_SIM_FAIL();
1000f684:	002af070 	cmpltui	zero,zero,43969
1000f688:	00000106 	br	1000f690 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
1000f68c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1000f690:	003fff06 	br	1000f690 <__alt_data_end+0xf800f690>

1000f694 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f694:	defffe04 	addi	sp,sp,-8
1000f698:	dfc00115 	stw	ra,4(sp)
1000f69c:	df000015 	stw	fp,0(sp)
1000f6a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f6a4:	d0a00e17 	ldw	r2,-32712(gp)
1000f6a8:	10000326 	beq	r2,zero,1000f6b8 <alt_get_errno+0x24>
1000f6ac:	d0a00e17 	ldw	r2,-32712(gp)
1000f6b0:	103ee83a 	callr	r2
1000f6b4:	00000106 	br	1000f6bc <alt_get_errno+0x28>
1000f6b8:	d0a6d204 	addi	r2,gp,-25784
}
1000f6bc:	e037883a 	mov	sp,fp
1000f6c0:	dfc00117 	ldw	ra,4(sp)
1000f6c4:	df000017 	ldw	fp,0(sp)
1000f6c8:	dec00204 	addi	sp,sp,8
1000f6cc:	f800283a 	ret

1000f6d0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000f6d0:	defffb04 	addi	sp,sp,-20
1000f6d4:	dfc00415 	stw	ra,16(sp)
1000f6d8:	df000315 	stw	fp,12(sp)
1000f6dc:	df000304 	addi	fp,sp,12
1000f6e0:	e13ffe15 	stw	r4,-8(fp)
1000f6e4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f6e8:	e0bffe17 	ldw	r2,-8(fp)
1000f6ec:	10000816 	blt	r2,zero,1000f710 <fstat+0x40>
1000f6f0:	01400304 	movi	r5,12
1000f6f4:	e13ffe17 	ldw	r4,-8(fp)
1000f6f8:	00010d40 	call	100010d4 <__mulsi3>
1000f6fc:	1007883a 	mov	r3,r2
1000f700:	00840074 	movhi	r2,4097
1000f704:	108a4a04 	addi	r2,r2,10536
1000f708:	1885883a 	add	r2,r3,r2
1000f70c:	00000106 	br	1000f714 <fstat+0x44>
1000f710:	0005883a 	mov	r2,zero
1000f714:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000f718:	e0bffd17 	ldw	r2,-12(fp)
1000f71c:	10001026 	beq	r2,zero,1000f760 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000f720:	e0bffd17 	ldw	r2,-12(fp)
1000f724:	10800017 	ldw	r2,0(r2)
1000f728:	10800817 	ldw	r2,32(r2)
1000f72c:	10000726 	beq	r2,zero,1000f74c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000f730:	e0bffd17 	ldw	r2,-12(fp)
1000f734:	10800017 	ldw	r2,0(r2)
1000f738:	10800817 	ldw	r2,32(r2)
1000f73c:	e17fff17 	ldw	r5,-4(fp)
1000f740:	e13ffd17 	ldw	r4,-12(fp)
1000f744:	103ee83a 	callr	r2
1000f748:	00000a06 	br	1000f774 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000f74c:	e0bfff17 	ldw	r2,-4(fp)
1000f750:	00c80004 	movi	r3,8192
1000f754:	10c00115 	stw	r3,4(r2)
      return 0;
1000f758:	0005883a 	mov	r2,zero
1000f75c:	00000506 	br	1000f774 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f760:	000f6940 	call	1000f694 <alt_get_errno>
1000f764:	1007883a 	mov	r3,r2
1000f768:	00801444 	movi	r2,81
1000f76c:	18800015 	stw	r2,0(r3)
    return -1;
1000f770:	00bfffc4 	movi	r2,-1
  }
}
1000f774:	e037883a 	mov	sp,fp
1000f778:	dfc00117 	ldw	ra,4(sp)
1000f77c:	df000017 	ldw	fp,0(sp)
1000f780:	dec00204 	addi	sp,sp,8
1000f784:	f800283a 	ret

1000f788 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
1000f788:	deffff04 	addi	sp,sp,-4
1000f78c:	df000015 	stw	fp,0(sp)
1000f790:	d839883a 	mov	fp,sp
  return 0;
1000f794:	0005883a 	mov	r2,zero
}
1000f798:	e037883a 	mov	sp,fp
1000f79c:	df000017 	ldw	fp,0(sp)
1000f7a0:	dec00104 	addi	sp,sp,4
1000f7a4:	f800283a 	ret

1000f7a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f7a8:	defffe04 	addi	sp,sp,-8
1000f7ac:	dfc00115 	stw	ra,4(sp)
1000f7b0:	df000015 	stw	fp,0(sp)
1000f7b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f7b8:	d0a00e17 	ldw	r2,-32712(gp)
1000f7bc:	10000326 	beq	r2,zero,1000f7cc <alt_get_errno+0x24>
1000f7c0:	d0a00e17 	ldw	r2,-32712(gp)
1000f7c4:	103ee83a 	callr	r2
1000f7c8:	00000106 	br	1000f7d0 <alt_get_errno+0x28>
1000f7cc:	d0a6d204 	addi	r2,gp,-25784
}
1000f7d0:	e037883a 	mov	sp,fp
1000f7d4:	dfc00117 	ldw	ra,4(sp)
1000f7d8:	df000017 	ldw	fp,0(sp)
1000f7dc:	dec00204 	addi	sp,sp,8
1000f7e0:	f800283a 	ret

1000f7e4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000f7e4:	deffed04 	addi	sp,sp,-76
1000f7e8:	dfc01215 	stw	ra,72(sp)
1000f7ec:	df001115 	stw	fp,68(sp)
1000f7f0:	df001104 	addi	fp,sp,68
1000f7f4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f7f8:	e0bfff17 	ldw	r2,-4(fp)
1000f7fc:	10000816 	blt	r2,zero,1000f820 <isatty+0x3c>
1000f800:	01400304 	movi	r5,12
1000f804:	e13fff17 	ldw	r4,-4(fp)
1000f808:	00010d40 	call	100010d4 <__mulsi3>
1000f80c:	1007883a 	mov	r3,r2
1000f810:	00840074 	movhi	r2,4097
1000f814:	108a4a04 	addi	r2,r2,10536
1000f818:	1885883a 	add	r2,r3,r2
1000f81c:	00000106 	br	1000f824 <isatty+0x40>
1000f820:	0005883a 	mov	r2,zero
1000f824:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000f828:	e0bfef17 	ldw	r2,-68(fp)
1000f82c:	10000e26 	beq	r2,zero,1000f868 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000f830:	e0bfef17 	ldw	r2,-68(fp)
1000f834:	10800017 	ldw	r2,0(r2)
1000f838:	10800817 	ldw	r2,32(r2)
1000f83c:	1000021e 	bne	r2,zero,1000f848 <isatty+0x64>
    {
      return 1;
1000f840:	00800044 	movi	r2,1
1000f844:	00000d06 	br	1000f87c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000f848:	e0bff004 	addi	r2,fp,-64
1000f84c:	100b883a 	mov	r5,r2
1000f850:	e13fff17 	ldw	r4,-4(fp)
1000f854:	000f6d00 	call	1000f6d0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000f858:	e0bff117 	ldw	r2,-60(fp)
1000f85c:	10880020 	cmpeqi	r2,r2,8192
1000f860:	10803fcc 	andi	r2,r2,255
1000f864:	00000506 	br	1000f87c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f868:	000f7a80 	call	1000f7a8 <alt_get_errno>
1000f86c:	1007883a 	mov	r3,r2
1000f870:	00801444 	movi	r2,81
1000f874:	18800015 	stw	r2,0(r3)
    return 0;
1000f878:	0005883a 	mov	r2,zero
  }
}
1000f87c:	e037883a 	mov	sp,fp
1000f880:	dfc00117 	ldw	ra,4(sp)
1000f884:	df000017 	ldw	fp,0(sp)
1000f888:	dec00204 	addi	sp,sp,8
1000f88c:	f800283a 	ret

1000f890 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f890:	defffe04 	addi	sp,sp,-8
1000f894:	dfc00115 	stw	ra,4(sp)
1000f898:	df000015 	stw	fp,0(sp)
1000f89c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f8a0:	d0a00e17 	ldw	r2,-32712(gp)
1000f8a4:	10000326 	beq	r2,zero,1000f8b4 <alt_get_errno+0x24>
1000f8a8:	d0a00e17 	ldw	r2,-32712(gp)
1000f8ac:	103ee83a 	callr	r2
1000f8b0:	00000106 	br	1000f8b8 <alt_get_errno+0x28>
1000f8b4:	d0a6d204 	addi	r2,gp,-25784
}
1000f8b8:	e037883a 	mov	sp,fp
1000f8bc:	dfc00117 	ldw	ra,4(sp)
1000f8c0:	df000017 	ldw	fp,0(sp)
1000f8c4:	dec00204 	addi	sp,sp,8
1000f8c8:	f800283a 	ret

1000f8cc <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
1000f8cc:	defffb04 	addi	sp,sp,-20
1000f8d0:	dfc00415 	stw	ra,16(sp)
1000f8d4:	df000315 	stw	fp,12(sp)
1000f8d8:	df000304 	addi	fp,sp,12
1000f8dc:	e13ffe15 	stw	r4,-8(fp)
1000f8e0:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
1000f8e4:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
1000f8e8:	e0bffe17 	ldw	r2,-8(fp)
1000f8ec:	00802f16 	blt	zero,r2,1000f9ac <kill+0xe0>
  {
    switch (sig)
1000f8f0:	e0bfff17 	ldw	r2,-4(fp)
1000f8f4:	10800828 	cmpgeui	r2,r2,32
1000f8f8:	1000291e 	bne	r2,zero,1000f9a0 <kill+0xd4>
1000f8fc:	e0bfff17 	ldw	r2,-4(fp)
1000f900:	100690ba 	slli	r3,r2,2
1000f904:	00840074 	movhi	r2,4097
1000f908:	10be4604 	addi	r2,r2,-1768
1000f90c:	1885883a 	add	r2,r3,r2
1000f910:	10800017 	ldw	r2,0(r2)
1000f914:	1000683a 	jmp	r2
1000f918:	1000f9c0 	call	11000f9c <_gp+0xfe5494>
1000f91c:	1000f9a0 	cmpeqi	zero,r2,998
1000f920:	1000f9a0 	cmpeqi	zero,r2,998
1000f924:	1000f998 	cmpnei	zero,r2,998
1000f928:	1000f998 	cmpnei	zero,r2,998
1000f92c:	1000f998 	cmpnei	zero,r2,998
1000f930:	1000f998 	cmpnei	zero,r2,998
1000f934:	1000f9a0 	cmpeqi	zero,r2,998
1000f938:	1000f998 	cmpnei	zero,r2,998
1000f93c:	1000f998 	cmpnei	zero,r2,998
1000f940:	1000f998 	cmpnei	zero,r2,998
1000f944:	1000f998 	cmpnei	zero,r2,998
1000f948:	1000f998 	cmpnei	zero,r2,998
1000f94c:	1000f998 	cmpnei	zero,r2,998
1000f950:	1000f998 	cmpnei	zero,r2,998
1000f954:	1000f998 	cmpnei	zero,r2,998
1000f958:	1000f9c0 	call	11000f9c <_gp+0xfe5494>
1000f95c:	1000f9a0 	cmpeqi	zero,r2,998
1000f960:	1000f9a0 	cmpeqi	zero,r2,998
1000f964:	1000f9a0 	cmpeqi	zero,r2,998
1000f968:	1000f9c0 	call	11000f9c <_gp+0xfe5494>
1000f96c:	1000f9a0 	cmpeqi	zero,r2,998
1000f970:	1000f9a0 	cmpeqi	zero,r2,998
1000f974:	1000f998 	cmpnei	zero,r2,998
1000f978:	1000f998 	cmpnei	zero,r2,998
1000f97c:	1000f998 	cmpnei	zero,r2,998
1000f980:	1000f998 	cmpnei	zero,r2,998
1000f984:	1000f998 	cmpnei	zero,r2,998
1000f988:	1000f9a0 	cmpeqi	zero,r2,998
1000f98c:	1000f9a0 	cmpeqi	zero,r2,998
1000f990:	1000f998 	cmpnei	zero,r2,998
1000f994:	1000f998 	cmpnei	zero,r2,998
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
1000f998:	0009883a 	mov	r4,zero
1000f99c:	000f6600 	call	1000f660 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
1000f9a0:	00800584 	movi	r2,22
1000f9a4:	e0bffd15 	stw	r2,-12(fp)
1000f9a8:	00000606 	br	1000f9c4 <kill+0xf8>
    }
  }

  else if (pid > 0)
1000f9ac:	e0bffe17 	ldw	r2,-8(fp)
1000f9b0:	0080040e 	bge	zero,r2,1000f9c4 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
1000f9b4:	008000c4 	movi	r2,3
1000f9b8:	e0bffd15 	stw	r2,-12(fp)
1000f9bc:	00000106 	br	1000f9c4 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
1000f9c0:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
1000f9c4:	e0bffd17 	ldw	r2,-12(fp)
1000f9c8:	10000626 	beq	r2,zero,1000f9e4 <kill+0x118>
  {
    ALT_ERRNO = status;
1000f9cc:	000f8900 	call	1000f890 <alt_get_errno>
1000f9d0:	1007883a 	mov	r3,r2
1000f9d4:	e0bffd17 	ldw	r2,-12(fp)
1000f9d8:	18800015 	stw	r2,0(r3)
    return -1;
1000f9dc:	00bfffc4 	movi	r2,-1
1000f9e0:	00000106 	br	1000f9e8 <kill+0x11c>
  }

  return 0;
1000f9e4:	0005883a 	mov	r2,zero
}
1000f9e8:	e037883a 	mov	sp,fp
1000f9ec:	dfc00117 	ldw	ra,4(sp)
1000f9f0:	df000017 	ldw	fp,0(sp)
1000f9f4:	dec00204 	addi	sp,sp,8
1000f9f8:	f800283a 	ret

1000f9fc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000f9fc:	defffc04 	addi	sp,sp,-16
1000fa00:	df000315 	stw	fp,12(sp)
1000fa04:	df000304 	addi	fp,sp,12
1000fa08:	e13ffd15 	stw	r4,-12(fp)
1000fa0c:	e17ffe15 	stw	r5,-8(fp)
1000fa10:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000fa14:	e0fffe17 	ldw	r3,-8(fp)
1000fa18:	e0bffd17 	ldw	r2,-12(fp)
1000fa1c:	18800c26 	beq	r3,r2,1000fa50 <alt_load_section+0x54>
  {
    while( to != end )
1000fa20:	00000806 	br	1000fa44 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000fa24:	e0bffe17 	ldw	r2,-8(fp)
1000fa28:	10c00104 	addi	r3,r2,4
1000fa2c:	e0fffe15 	stw	r3,-8(fp)
1000fa30:	e0fffd17 	ldw	r3,-12(fp)
1000fa34:	19000104 	addi	r4,r3,4
1000fa38:	e13ffd15 	stw	r4,-12(fp)
1000fa3c:	18c00017 	ldw	r3,0(r3)
1000fa40:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000fa44:	e0fffe17 	ldw	r3,-8(fp)
1000fa48:	e0bfff17 	ldw	r2,-4(fp)
1000fa4c:	18bff51e 	bne	r3,r2,1000fa24 <__alt_data_end+0xf800fa24>
    {
      *to++ = *from++;
    }
  }
}
1000fa50:	0001883a 	nop
1000fa54:	e037883a 	mov	sp,fp
1000fa58:	df000017 	ldw	fp,0(sp)
1000fa5c:	dec00104 	addi	sp,sp,4
1000fa60:	f800283a 	ret

1000fa64 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000fa64:	defffe04 	addi	sp,sp,-8
1000fa68:	dfc00115 	stw	ra,4(sp)
1000fa6c:	df000015 	stw	fp,0(sp)
1000fa70:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000fa74:	01840074 	movhi	r6,4097
1000fa78:	318ed504 	addi	r6,r6,15188
1000fa7c:	01440074 	movhi	r5,4097
1000fa80:	29481704 	addi	r5,r5,8284
1000fa84:	01040074 	movhi	r4,4097
1000fa88:	210ed504 	addi	r4,r4,15188
1000fa8c:	000f9fc0 	call	1000f9fc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000fa90:	01840034 	movhi	r6,4096
1000fa94:	31808c04 	addi	r6,r6,560
1000fa98:	01440034 	movhi	r5,4096
1000fa9c:	29400804 	addi	r5,r5,32
1000faa0:	01040034 	movhi	r4,4096
1000faa4:	21000804 	addi	r4,r4,32
1000faa8:	000f9fc0 	call	1000f9fc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000faac:	01840074 	movhi	r6,4097
1000fab0:	31881704 	addi	r6,r6,8284
1000fab4:	01440074 	movhi	r5,4097
1000fab8:	2946e304 	addi	r5,r5,7052
1000fabc:	01040074 	movhi	r4,4097
1000fac0:	2106e304 	addi	r4,r4,7052
1000fac4:	000f9fc0 	call	1000f9fc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000fac8:	0010cc00 	call	10010cc0 <alt_dcache_flush_all>
  alt_icache_flush_all();
1000facc:	0010e800 	call	10010e80 <alt_icache_flush_all>
}
1000fad0:	0001883a 	nop
1000fad4:	e037883a 	mov	sp,fp
1000fad8:	dfc00117 	ldw	ra,4(sp)
1000fadc:	df000017 	ldw	fp,0(sp)
1000fae0:	dec00204 	addi	sp,sp,8
1000fae4:	f800283a 	ret

1000fae8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fae8:	defffe04 	addi	sp,sp,-8
1000faec:	dfc00115 	stw	ra,4(sp)
1000faf0:	df000015 	stw	fp,0(sp)
1000faf4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000faf8:	d0a00e17 	ldw	r2,-32712(gp)
1000fafc:	10000326 	beq	r2,zero,1000fb0c <alt_get_errno+0x24>
1000fb00:	d0a00e17 	ldw	r2,-32712(gp)
1000fb04:	103ee83a 	callr	r2
1000fb08:	00000106 	br	1000fb10 <alt_get_errno+0x28>
1000fb0c:	d0a6d204 	addi	r2,gp,-25784
}
1000fb10:	e037883a 	mov	sp,fp
1000fb14:	dfc00117 	ldw	ra,4(sp)
1000fb18:	df000017 	ldw	fp,0(sp)
1000fb1c:	dec00204 	addi	sp,sp,8
1000fb20:	f800283a 	ret

1000fb24 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000fb24:	defff904 	addi	sp,sp,-28
1000fb28:	dfc00615 	stw	ra,24(sp)
1000fb2c:	df000515 	stw	fp,20(sp)
1000fb30:	df000504 	addi	fp,sp,20
1000fb34:	e13ffd15 	stw	r4,-12(fp)
1000fb38:	e17ffe15 	stw	r5,-8(fp)
1000fb3c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000fb40:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fb44:	e0bffd17 	ldw	r2,-12(fp)
1000fb48:	10000816 	blt	r2,zero,1000fb6c <lseek+0x48>
1000fb4c:	01400304 	movi	r5,12
1000fb50:	e13ffd17 	ldw	r4,-12(fp)
1000fb54:	00010d40 	call	100010d4 <__mulsi3>
1000fb58:	1007883a 	mov	r3,r2
1000fb5c:	00840074 	movhi	r2,4097
1000fb60:	108a4a04 	addi	r2,r2,10536
1000fb64:	1885883a 	add	r2,r3,r2
1000fb68:	00000106 	br	1000fb70 <lseek+0x4c>
1000fb6c:	0005883a 	mov	r2,zero
1000fb70:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000fb74:	e0bffc17 	ldw	r2,-16(fp)
1000fb78:	10001026 	beq	r2,zero,1000fbbc <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000fb7c:	e0bffc17 	ldw	r2,-16(fp)
1000fb80:	10800017 	ldw	r2,0(r2)
1000fb84:	10800717 	ldw	r2,28(r2)
1000fb88:	10000926 	beq	r2,zero,1000fbb0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000fb8c:	e0bffc17 	ldw	r2,-16(fp)
1000fb90:	10800017 	ldw	r2,0(r2)
1000fb94:	10800717 	ldw	r2,28(r2)
1000fb98:	e1bfff17 	ldw	r6,-4(fp)
1000fb9c:	e17ffe17 	ldw	r5,-8(fp)
1000fba0:	e13ffc17 	ldw	r4,-16(fp)
1000fba4:	103ee83a 	callr	r2
1000fba8:	e0bffb15 	stw	r2,-20(fp)
1000fbac:	00000506 	br	1000fbc4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000fbb0:	00bfde84 	movi	r2,-134
1000fbb4:	e0bffb15 	stw	r2,-20(fp)
1000fbb8:	00000206 	br	1000fbc4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000fbbc:	00bfebc4 	movi	r2,-81
1000fbc0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000fbc4:	e0bffb17 	ldw	r2,-20(fp)
1000fbc8:	1000070e 	bge	r2,zero,1000fbe8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1000fbcc:	000fae80 	call	1000fae8 <alt_get_errno>
1000fbd0:	1007883a 	mov	r3,r2
1000fbd4:	e0bffb17 	ldw	r2,-20(fp)
1000fbd8:	0085c83a 	sub	r2,zero,r2
1000fbdc:	18800015 	stw	r2,0(r3)
    rc = -1;
1000fbe0:	00bfffc4 	movi	r2,-1
1000fbe4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000fbe8:	e0bffb17 	ldw	r2,-20(fp)
}
1000fbec:	e037883a 	mov	sp,fp
1000fbf0:	dfc00117 	ldw	ra,4(sp)
1000fbf4:	df000017 	ldw	fp,0(sp)
1000fbf8:	dec00204 	addi	sp,sp,8
1000fbfc:	f800283a 	ret

1000fc00 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000fc00:	defffd04 	addi	sp,sp,-12
1000fc04:	dfc00215 	stw	ra,8(sp)
1000fc08:	df000115 	stw	fp,4(sp)
1000fc0c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000fc10:	0009883a 	mov	r4,zero
1000fc14:	00100a80 	call	100100a8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000fc18:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000fc1c:	00100e00 	call	100100e0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000fc20:	01840074 	movhi	r6,4097
1000fc24:	31880d04 	addi	r6,r6,8244
1000fc28:	01440074 	movhi	r5,4097
1000fc2c:	29480d04 	addi	r5,r5,8244
1000fc30:	01040074 	movhi	r4,4097
1000fc34:	21080d04 	addi	r4,r4,8244
1000fc38:	00112240 	call	10011224 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000fc3c:	0010dc00 	call	10010dc0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000fc40:	01040074 	movhi	r4,4097
1000fc44:	21038804 	addi	r4,r4,3616
1000fc48:	00119e40 	call	100119e4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000fc4c:	d0a6d917 	ldw	r2,-25756(gp)
1000fc50:	d0e6da17 	ldw	r3,-25752(gp)
1000fc54:	d126db17 	ldw	r4,-25748(gp)
1000fc58:	200d883a 	mov	r6,r4
1000fc5c:	180b883a 	mov	r5,r3
1000fc60:	1009883a 	mov	r4,r2
1000fc64:	000092c0 	call	1000092c <main>
1000fc68:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000fc6c:	01000044 	movi	r4,1
1000fc70:	000f55c0 	call	1000f55c <close>
  exit (result);
1000fc74:	e13fff17 	ldw	r4,-4(fp)
1000fc78:	00011780 	call	10001178 <exit>

1000fc7c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000fc7c:	defffe04 	addi	sp,sp,-8
1000fc80:	df000115 	stw	fp,4(sp)
1000fc84:	df000104 	addi	fp,sp,4
1000fc88:	e13fff15 	stw	r4,-4(fp)
}
1000fc8c:	0001883a 	nop
1000fc90:	e037883a 	mov	sp,fp
1000fc94:	df000017 	ldw	fp,0(sp)
1000fc98:	dec00104 	addi	sp,sp,4
1000fc9c:	f800283a 	ret

1000fca0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000fca0:	defffe04 	addi	sp,sp,-8
1000fca4:	df000115 	stw	fp,4(sp)
1000fca8:	df000104 	addi	fp,sp,4
1000fcac:	e13fff15 	stw	r4,-4(fp)
}
1000fcb0:	0001883a 	nop
1000fcb4:	e037883a 	mov	sp,fp
1000fcb8:	df000017 	ldw	fp,0(sp)
1000fcbc:	dec00104 	addi	sp,sp,4
1000fcc0:	f800283a 	ret

1000fcc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fcc4:	defffe04 	addi	sp,sp,-8
1000fcc8:	dfc00115 	stw	ra,4(sp)
1000fccc:	df000015 	stw	fp,0(sp)
1000fcd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fcd4:	d0a00e17 	ldw	r2,-32712(gp)
1000fcd8:	10000326 	beq	r2,zero,1000fce8 <alt_get_errno+0x24>
1000fcdc:	d0a00e17 	ldw	r2,-32712(gp)
1000fce0:	103ee83a 	callr	r2
1000fce4:	00000106 	br	1000fcec <alt_get_errno+0x28>
1000fce8:	d0a6d204 	addi	r2,gp,-25784
}
1000fcec:	e037883a 	mov	sp,fp
1000fcf0:	dfc00117 	ldw	ra,4(sp)
1000fcf4:	df000017 	ldw	fp,0(sp)
1000fcf8:	dec00204 	addi	sp,sp,8
1000fcfc:	f800283a 	ret

1000fd00 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000fd00:	defff904 	addi	sp,sp,-28
1000fd04:	dfc00615 	stw	ra,24(sp)
1000fd08:	df000515 	stw	fp,20(sp)
1000fd0c:	df000504 	addi	fp,sp,20
1000fd10:	e13ffd15 	stw	r4,-12(fp)
1000fd14:	e17ffe15 	stw	r5,-8(fp)
1000fd18:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fd1c:	e0bffd17 	ldw	r2,-12(fp)
1000fd20:	10000816 	blt	r2,zero,1000fd44 <read+0x44>
1000fd24:	01400304 	movi	r5,12
1000fd28:	e13ffd17 	ldw	r4,-12(fp)
1000fd2c:	00010d40 	call	100010d4 <__mulsi3>
1000fd30:	1007883a 	mov	r3,r2
1000fd34:	00840074 	movhi	r2,4097
1000fd38:	108a4a04 	addi	r2,r2,10536
1000fd3c:	1885883a 	add	r2,r3,r2
1000fd40:	00000106 	br	1000fd48 <read+0x48>
1000fd44:	0005883a 	mov	r2,zero
1000fd48:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000fd4c:	e0bffb17 	ldw	r2,-20(fp)
1000fd50:	10002226 	beq	r2,zero,1000fddc <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000fd54:	e0bffb17 	ldw	r2,-20(fp)
1000fd58:	10800217 	ldw	r2,8(r2)
1000fd5c:	108000cc 	andi	r2,r2,3
1000fd60:	10800060 	cmpeqi	r2,r2,1
1000fd64:	1000181e 	bne	r2,zero,1000fdc8 <read+0xc8>
        (fd->dev->read))
1000fd68:	e0bffb17 	ldw	r2,-20(fp)
1000fd6c:	10800017 	ldw	r2,0(r2)
1000fd70:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000fd74:	10001426 	beq	r2,zero,1000fdc8 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000fd78:	e0bffb17 	ldw	r2,-20(fp)
1000fd7c:	10800017 	ldw	r2,0(r2)
1000fd80:	10800517 	ldw	r2,20(r2)
1000fd84:	e0ffff17 	ldw	r3,-4(fp)
1000fd88:	180d883a 	mov	r6,r3
1000fd8c:	e17ffe17 	ldw	r5,-8(fp)
1000fd90:	e13ffb17 	ldw	r4,-20(fp)
1000fd94:	103ee83a 	callr	r2
1000fd98:	e0bffc15 	stw	r2,-16(fp)
1000fd9c:	e0bffc17 	ldw	r2,-16(fp)
1000fda0:	1000070e 	bge	r2,zero,1000fdc0 <read+0xc0>
        {
          ALT_ERRNO = -rval;
1000fda4:	000fcc40 	call	1000fcc4 <alt_get_errno>
1000fda8:	1007883a 	mov	r3,r2
1000fdac:	e0bffc17 	ldw	r2,-16(fp)
1000fdb0:	0085c83a 	sub	r2,zero,r2
1000fdb4:	18800015 	stw	r2,0(r3)
          return -1;
1000fdb8:	00bfffc4 	movi	r2,-1
1000fdbc:	00000c06 	br	1000fdf0 <read+0xf0>
        }
        return rval;
1000fdc0:	e0bffc17 	ldw	r2,-16(fp)
1000fdc4:	00000a06 	br	1000fdf0 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000fdc8:	000fcc40 	call	1000fcc4 <alt_get_errno>
1000fdcc:	1007883a 	mov	r3,r2
1000fdd0:	00800344 	movi	r2,13
1000fdd4:	18800015 	stw	r2,0(r3)
1000fdd8:	00000406 	br	1000fdec <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000fddc:	000fcc40 	call	1000fcc4 <alt_get_errno>
1000fde0:	1007883a 	mov	r3,r2
1000fde4:	00801444 	movi	r2,81
1000fde8:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000fdec:	00bfffc4 	movi	r2,-1
}
1000fdf0:	e037883a 	mov	sp,fp
1000fdf4:	dfc00117 	ldw	ra,4(sp)
1000fdf8:	df000017 	ldw	fp,0(sp)
1000fdfc:	dec00204 	addi	sp,sp,8
1000fe00:	f800283a 	ret

1000fe04 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000fe04:	defffc04 	addi	sp,sp,-16
1000fe08:	dfc00315 	stw	ra,12(sp)
1000fe0c:	df000215 	stw	fp,8(sp)
1000fe10:	dc000115 	stw	r16,4(sp)
1000fe14:	df000204 	addi	fp,sp,8
1000fe18:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000fe1c:	e0bffe17 	ldw	r2,-8(fp)
1000fe20:	108000d0 	cmplti	r2,r2,3
1000fe24:	1000111e 	bne	r2,zero,1000fe6c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000fe28:	04040074 	movhi	r16,4097
1000fe2c:	840a4a04 	addi	r16,r16,10536
1000fe30:	e0bffe17 	ldw	r2,-8(fp)
1000fe34:	01400304 	movi	r5,12
1000fe38:	1009883a 	mov	r4,r2
1000fe3c:	00010d40 	call	100010d4 <__mulsi3>
1000fe40:	8085883a 	add	r2,r16,r2
1000fe44:	10800204 	addi	r2,r2,8
1000fe48:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000fe4c:	04040074 	movhi	r16,4097
1000fe50:	840a4a04 	addi	r16,r16,10536
1000fe54:	e0bffe17 	ldw	r2,-8(fp)
1000fe58:	01400304 	movi	r5,12
1000fe5c:	1009883a 	mov	r4,r2
1000fe60:	00010d40 	call	100010d4 <__mulsi3>
1000fe64:	8085883a 	add	r2,r16,r2
1000fe68:	10000015 	stw	zero,0(r2)
  }
}
1000fe6c:	0001883a 	nop
1000fe70:	e6ffff04 	addi	sp,fp,-4
1000fe74:	dfc00217 	ldw	ra,8(sp)
1000fe78:	df000117 	ldw	fp,4(sp)
1000fe7c:	dc000017 	ldw	r16,0(sp)
1000fe80:	dec00304 	addi	sp,sp,12
1000fe84:	f800283a 	ret

1000fe88 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000fe88:	defff904 	addi	sp,sp,-28
1000fe8c:	df000615 	stw	fp,24(sp)
1000fe90:	df000604 	addi	fp,sp,24
1000fe94:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000fe98:	0005303a 	rdctl	r2,status
1000fe9c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fea0:	e0fffe17 	ldw	r3,-8(fp)
1000fea4:	00bfff84 	movi	r2,-2
1000fea8:	1884703a 	and	r2,r3,r2
1000feac:	1001703a 	wrctl	status,r2
  
  return context;
1000feb0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000feb4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000feb8:	d0a00f17 	ldw	r2,-32708(gp)
1000febc:	10c000c4 	addi	r3,r2,3
1000fec0:	00bfff04 	movi	r2,-4
1000fec4:	1884703a 	and	r2,r3,r2
1000fec8:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000fecc:	d0e00f17 	ldw	r3,-32708(gp)
1000fed0:	e0bfff17 	ldw	r2,-4(fp)
1000fed4:	1887883a 	add	r3,r3,r2
1000fed8:	00860034 	movhi	r2,6144
1000fedc:	10800004 	addi	r2,r2,0
1000fee0:	10c0062e 	bgeu	r2,r3,1000fefc <sbrk+0x74>
1000fee4:	e0bffb17 	ldw	r2,-20(fp)
1000fee8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000feec:	e0bffa17 	ldw	r2,-24(fp)
1000fef0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000fef4:	00bfffc4 	movi	r2,-1
1000fef8:	00000b06 	br	1000ff28 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000fefc:	d0a00f17 	ldw	r2,-32708(gp)
1000ff00:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1000ff04:	d0e00f17 	ldw	r3,-32708(gp)
1000ff08:	e0bfff17 	ldw	r2,-4(fp)
1000ff0c:	1885883a 	add	r2,r3,r2
1000ff10:	d0a00f15 	stw	r2,-32708(gp)
1000ff14:	e0bffb17 	ldw	r2,-20(fp)
1000ff18:	e0bffc15 	stw	r2,-16(fp)
1000ff1c:	e0bffc17 	ldw	r2,-16(fp)
1000ff20:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000ff24:	e0bffd17 	ldw	r2,-12(fp)
} 
1000ff28:	e037883a 	mov	sp,fp
1000ff2c:	df000017 	ldw	fp,0(sp)
1000ff30:	dec00104 	addi	sp,sp,4
1000ff34:	f800283a 	ret

1000ff38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ff38:	defffe04 	addi	sp,sp,-8
1000ff3c:	dfc00115 	stw	ra,4(sp)
1000ff40:	df000015 	stw	fp,0(sp)
1000ff44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ff48:	d0a00e17 	ldw	r2,-32712(gp)
1000ff4c:	10000326 	beq	r2,zero,1000ff5c <alt_get_errno+0x24>
1000ff50:	d0a00e17 	ldw	r2,-32712(gp)
1000ff54:	103ee83a 	callr	r2
1000ff58:	00000106 	br	1000ff60 <alt_get_errno+0x28>
1000ff5c:	d0a6d204 	addi	r2,gp,-25784
}
1000ff60:	e037883a 	mov	sp,fp
1000ff64:	dfc00117 	ldw	ra,4(sp)
1000ff68:	df000017 	ldw	fp,0(sp)
1000ff6c:	dec00204 	addi	sp,sp,8
1000ff70:	f800283a 	ret

1000ff74 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000ff74:	defff904 	addi	sp,sp,-28
1000ff78:	dfc00615 	stw	ra,24(sp)
1000ff7c:	df000515 	stw	fp,20(sp)
1000ff80:	df000504 	addi	fp,sp,20
1000ff84:	e13ffd15 	stw	r4,-12(fp)
1000ff88:	e17ffe15 	stw	r5,-8(fp)
1000ff8c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000ff90:	e0bffd17 	ldw	r2,-12(fp)
1000ff94:	10000816 	blt	r2,zero,1000ffb8 <write+0x44>
1000ff98:	01400304 	movi	r5,12
1000ff9c:	e13ffd17 	ldw	r4,-12(fp)
1000ffa0:	00010d40 	call	100010d4 <__mulsi3>
1000ffa4:	1007883a 	mov	r3,r2
1000ffa8:	00840074 	movhi	r2,4097
1000ffac:	108a4a04 	addi	r2,r2,10536
1000ffb0:	1885883a 	add	r2,r3,r2
1000ffb4:	00000106 	br	1000ffbc <write+0x48>
1000ffb8:	0005883a 	mov	r2,zero
1000ffbc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000ffc0:	e0bffb17 	ldw	r2,-20(fp)
1000ffc4:	10002126 	beq	r2,zero,1001004c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000ffc8:	e0bffb17 	ldw	r2,-20(fp)
1000ffcc:	10800217 	ldw	r2,8(r2)
1000ffd0:	108000cc 	andi	r2,r2,3
1000ffd4:	10001826 	beq	r2,zero,10010038 <write+0xc4>
1000ffd8:	e0bffb17 	ldw	r2,-20(fp)
1000ffdc:	10800017 	ldw	r2,0(r2)
1000ffe0:	10800617 	ldw	r2,24(r2)
1000ffe4:	10001426 	beq	r2,zero,10010038 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000ffe8:	e0bffb17 	ldw	r2,-20(fp)
1000ffec:	10800017 	ldw	r2,0(r2)
1000fff0:	10800617 	ldw	r2,24(r2)
1000fff4:	e0ffff17 	ldw	r3,-4(fp)
1000fff8:	180d883a 	mov	r6,r3
1000fffc:	e17ffe17 	ldw	r5,-8(fp)
10010000:	e13ffb17 	ldw	r4,-20(fp)
10010004:	103ee83a 	callr	r2
10010008:	e0bffc15 	stw	r2,-16(fp)
1001000c:	e0bffc17 	ldw	r2,-16(fp)
10010010:	1000070e 	bge	r2,zero,10010030 <write+0xbc>
      {
        ALT_ERRNO = -rval;
10010014:	000ff380 	call	1000ff38 <alt_get_errno>
10010018:	1007883a 	mov	r3,r2
1001001c:	e0bffc17 	ldw	r2,-16(fp)
10010020:	0085c83a 	sub	r2,zero,r2
10010024:	18800015 	stw	r2,0(r3)
        return -1;
10010028:	00bfffc4 	movi	r2,-1
1001002c:	00000c06 	br	10010060 <write+0xec>
      }
      return rval;
10010030:	e0bffc17 	ldw	r2,-16(fp)
10010034:	00000a06 	br	10010060 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
10010038:	000ff380 	call	1000ff38 <alt_get_errno>
1001003c:	1007883a 	mov	r3,r2
10010040:	00800344 	movi	r2,13
10010044:	18800015 	stw	r2,0(r3)
10010048:	00000406 	br	1001005c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1001004c:	000ff380 	call	1000ff38 <alt_get_errno>
10010050:	1007883a 	mov	r3,r2
10010054:	00801444 	movi	r2,81
10010058:	18800015 	stw	r2,0(r3)
  }
  return -1;
1001005c:	00bfffc4 	movi	r2,-1
}
10010060:	e037883a 	mov	sp,fp
10010064:	dfc00117 	ldw	ra,4(sp)
10010068:	df000017 	ldw	fp,0(sp)
1001006c:	dec00204 	addi	sp,sp,8
10010070:	f800283a 	ret

10010074 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10010074:	defffd04 	addi	sp,sp,-12
10010078:	dfc00215 	stw	ra,8(sp)
1001007c:	df000115 	stw	fp,4(sp)
10010080:	df000104 	addi	fp,sp,4
10010084:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10010088:	d1600b04 	addi	r5,gp,-32724
1001008c:	e13fff17 	ldw	r4,-4(fp)
10010090:	0010d1c0 	call	10010d1c <alt_dev_llist_insert>
}
10010094:	e037883a 	mov	sp,fp
10010098:	dfc00117 	ldw	ra,4(sp)
1001009c:	df000017 	ldw	fp,0(sp)
100100a0:	dec00204 	addi	sp,sp,8
100100a4:	f800283a 	ret

100100a8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
100100a8:	defffd04 	addi	sp,sp,-12
100100ac:	dfc00215 	stw	ra,8(sp)
100100b0:	df000115 	stw	fp,4(sp)
100100b4:	df000104 	addi	fp,sp,4
100100b8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
100100bc:	00116c80 	call	100116c8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
100100c0:	00800044 	movi	r2,1
100100c4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
100100c8:	0001883a 	nop
100100cc:	e037883a 	mov	sp,fp
100100d0:	dfc00117 	ldw	ra,4(sp)
100100d4:	df000017 	ldw	fp,0(sp)
100100d8:	dec00204 	addi	sp,sp,8
100100dc:	f800283a 	ret

100100e0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
100100e0:	defffe04 	addi	sp,sp,-8
100100e4:	dfc00115 	stw	ra,4(sp)
100100e8:	df000015 	stw	fp,0(sp)
100100ec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
100100f0:	000d883a 	mov	r6,zero
100100f4:	000b883a 	mov	r5,zero
100100f8:	01040074 	movhi	r4,4097
100100fc:	210ab404 	addi	r4,r4,10960
10010100:	00102900 	call	10010290 <altera_avalon_jtag_uart_init>
10010104:	01040074 	movhi	r4,4097
10010108:	210aaa04 	addi	r4,r4,10920
1001010c:	00100740 	call	10010074 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10010110:	0001883a 	nop
}
10010114:	0001883a 	nop
10010118:	e037883a 	mov	sp,fp
1001011c:	dfc00117 	ldw	ra,4(sp)
10010120:	df000017 	ldw	fp,0(sp)
10010124:	dec00204 	addi	sp,sp,8
10010128:	f800283a 	ret

1001012c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1001012c:	defffa04 	addi	sp,sp,-24
10010130:	dfc00515 	stw	ra,20(sp)
10010134:	df000415 	stw	fp,16(sp)
10010138:	df000404 	addi	fp,sp,16
1001013c:	e13ffd15 	stw	r4,-12(fp)
10010140:	e17ffe15 	stw	r5,-8(fp)
10010144:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010148:	e0bffd17 	ldw	r2,-12(fp)
1001014c:	10800017 	ldw	r2,0(r2)
10010150:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10010154:	e0bffc17 	ldw	r2,-16(fp)
10010158:	10c00a04 	addi	r3,r2,40
1001015c:	e0bffd17 	ldw	r2,-12(fp)
10010160:	10800217 	ldw	r2,8(r2)
10010164:	100f883a 	mov	r7,r2
10010168:	e1bfff17 	ldw	r6,-4(fp)
1001016c:	e17ffe17 	ldw	r5,-8(fp)
10010170:	1809883a 	mov	r4,r3
10010174:	00107540 	call	10010754 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10010178:	e037883a 	mov	sp,fp
1001017c:	dfc00117 	ldw	ra,4(sp)
10010180:	df000017 	ldw	fp,0(sp)
10010184:	dec00204 	addi	sp,sp,8
10010188:	f800283a 	ret

1001018c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1001018c:	defffa04 	addi	sp,sp,-24
10010190:	dfc00515 	stw	ra,20(sp)
10010194:	df000415 	stw	fp,16(sp)
10010198:	df000404 	addi	fp,sp,16
1001019c:	e13ffd15 	stw	r4,-12(fp)
100101a0:	e17ffe15 	stw	r5,-8(fp)
100101a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100101a8:	e0bffd17 	ldw	r2,-12(fp)
100101ac:	10800017 	ldw	r2,0(r2)
100101b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
100101b4:	e0bffc17 	ldw	r2,-16(fp)
100101b8:	10c00a04 	addi	r3,r2,40
100101bc:	e0bffd17 	ldw	r2,-12(fp)
100101c0:	10800217 	ldw	r2,8(r2)
100101c4:	100f883a 	mov	r7,r2
100101c8:	e1bfff17 	ldw	r6,-4(fp)
100101cc:	e17ffe17 	ldw	r5,-8(fp)
100101d0:	1809883a 	mov	r4,r3
100101d4:	00109700 	call	10010970 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
100101d8:	e037883a 	mov	sp,fp
100101dc:	dfc00117 	ldw	ra,4(sp)
100101e0:	df000017 	ldw	fp,0(sp)
100101e4:	dec00204 	addi	sp,sp,8
100101e8:	f800283a 	ret

100101ec <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
100101ec:	defffc04 	addi	sp,sp,-16
100101f0:	dfc00315 	stw	ra,12(sp)
100101f4:	df000215 	stw	fp,8(sp)
100101f8:	df000204 	addi	fp,sp,8
100101fc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010200:	e0bfff17 	ldw	r2,-4(fp)
10010204:	10800017 	ldw	r2,0(r2)
10010208:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1001020c:	e0bffe17 	ldw	r2,-8(fp)
10010210:	10c00a04 	addi	r3,r2,40
10010214:	e0bfff17 	ldw	r2,-4(fp)
10010218:	10800217 	ldw	r2,8(r2)
1001021c:	100b883a 	mov	r5,r2
10010220:	1809883a 	mov	r4,r3
10010224:	00105fc0 	call	100105fc <altera_avalon_jtag_uart_close>
}
10010228:	e037883a 	mov	sp,fp
1001022c:	dfc00117 	ldw	ra,4(sp)
10010230:	df000017 	ldw	fp,0(sp)
10010234:	dec00204 	addi	sp,sp,8
10010238:	f800283a 	ret

1001023c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1001023c:	defffa04 	addi	sp,sp,-24
10010240:	dfc00515 	stw	ra,20(sp)
10010244:	df000415 	stw	fp,16(sp)
10010248:	df000404 	addi	fp,sp,16
1001024c:	e13ffd15 	stw	r4,-12(fp)
10010250:	e17ffe15 	stw	r5,-8(fp)
10010254:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10010258:	e0bffd17 	ldw	r2,-12(fp)
1001025c:	10800017 	ldw	r2,0(r2)
10010260:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10010264:	e0bffc17 	ldw	r2,-16(fp)
10010268:	10800a04 	addi	r2,r2,40
1001026c:	e1bfff17 	ldw	r6,-4(fp)
10010270:	e17ffe17 	ldw	r5,-8(fp)
10010274:	1009883a 	mov	r4,r2
10010278:	00106640 	call	10010664 <altera_avalon_jtag_uart_ioctl>
}
1001027c:	e037883a 	mov	sp,fp
10010280:	dfc00117 	ldw	ra,4(sp)
10010284:	df000017 	ldw	fp,0(sp)
10010288:	dec00204 	addi	sp,sp,8
1001028c:	f800283a 	ret

10010290 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10010290:	defffa04 	addi	sp,sp,-24
10010294:	dfc00515 	stw	ra,20(sp)
10010298:	df000415 	stw	fp,16(sp)
1001029c:	df000404 	addi	fp,sp,16
100102a0:	e13ffd15 	stw	r4,-12(fp)
100102a4:	e17ffe15 	stw	r5,-8(fp)
100102a8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100102ac:	e0bffd17 	ldw	r2,-12(fp)
100102b0:	00c00044 	movi	r3,1
100102b4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
100102b8:	e0bffd17 	ldw	r2,-12(fp)
100102bc:	10800017 	ldw	r2,0(r2)
100102c0:	10800104 	addi	r2,r2,4
100102c4:	1007883a 	mov	r3,r2
100102c8:	e0bffd17 	ldw	r2,-12(fp)
100102cc:	10800817 	ldw	r2,32(r2)
100102d0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
100102d4:	e0bffe17 	ldw	r2,-8(fp)
100102d8:	e0ffff17 	ldw	r3,-4(fp)
100102dc:	d8000015 	stw	zero,0(sp)
100102e0:	e1fffd17 	ldw	r7,-12(fp)
100102e4:	01840074 	movhi	r6,4097
100102e8:	3180d404 	addi	r6,r6,848
100102ec:	180b883a 	mov	r5,r3
100102f0:	1009883a 	mov	r4,r2
100102f4:	0010ea00 	call	10010ea0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
100102f8:	e0bffd17 	ldw	r2,-12(fp)
100102fc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10010300:	e0bffd17 	ldw	r2,-12(fp)
10010304:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10010308:	d0e6dd17 	ldw	r3,-25740(gp)
1001030c:	e1fffd17 	ldw	r7,-12(fp)
10010310:	01840074 	movhi	r6,4097
10010314:	31815704 	addi	r6,r6,1372
10010318:	180b883a 	mov	r5,r3
1001031c:	1009883a 	mov	r4,r2
10010320:	0010b940 	call	10010b94 <alt_alarm_start>
10010324:	1000040e 	bge	r2,zero,10010338 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10010328:	e0fffd17 	ldw	r3,-12(fp)
1001032c:	00a00034 	movhi	r2,32768
10010330:	10bfffc4 	addi	r2,r2,-1
10010334:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10010338:	0001883a 	nop
1001033c:	e037883a 	mov	sp,fp
10010340:	dfc00117 	ldw	ra,4(sp)
10010344:	df000017 	ldw	fp,0(sp)
10010348:	dec00204 	addi	sp,sp,8
1001034c:	f800283a 	ret

10010350 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10010350:	defff804 	addi	sp,sp,-32
10010354:	df000715 	stw	fp,28(sp)
10010358:	df000704 	addi	fp,sp,28
1001035c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10010360:	e0bfff17 	ldw	r2,-4(fp)
10010364:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10010368:	e0bffb17 	ldw	r2,-20(fp)
1001036c:	10800017 	ldw	r2,0(r2)
10010370:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010374:	e0bffc17 	ldw	r2,-16(fp)
10010378:	10800104 	addi	r2,r2,4
1001037c:	10800037 	ldwio	r2,0(r2)
10010380:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10010384:	e0bffd17 	ldw	r2,-12(fp)
10010388:	1080c00c 	andi	r2,r2,768
1001038c:	10006d26 	beq	r2,zero,10010544 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10010390:	e0bffd17 	ldw	r2,-12(fp)
10010394:	1080400c 	andi	r2,r2,256
10010398:	10003526 	beq	r2,zero,10010470 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1001039c:	00800074 	movhi	r2,1
100103a0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100103a4:	e0bffb17 	ldw	r2,-20(fp)
100103a8:	10800a17 	ldw	r2,40(r2)
100103ac:	10800044 	addi	r2,r2,1
100103b0:	1081ffcc 	andi	r2,r2,2047
100103b4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
100103b8:	e0bffb17 	ldw	r2,-20(fp)
100103bc:	10c00b17 	ldw	r3,44(r2)
100103c0:	e0bffe17 	ldw	r2,-8(fp)
100103c4:	18801526 	beq	r3,r2,1001041c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
100103c8:	e0bffc17 	ldw	r2,-16(fp)
100103cc:	10800037 	ldwio	r2,0(r2)
100103d0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
100103d4:	e0bff917 	ldw	r2,-28(fp)
100103d8:	10a0000c 	andi	r2,r2,32768
100103dc:	10001126 	beq	r2,zero,10010424 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
100103e0:	e0bffb17 	ldw	r2,-20(fp)
100103e4:	10800a17 	ldw	r2,40(r2)
100103e8:	e0fff917 	ldw	r3,-28(fp)
100103ec:	1809883a 	mov	r4,r3
100103f0:	e0fffb17 	ldw	r3,-20(fp)
100103f4:	1885883a 	add	r2,r3,r2
100103f8:	10800e04 	addi	r2,r2,56
100103fc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010400:	e0bffb17 	ldw	r2,-20(fp)
10010404:	10800a17 	ldw	r2,40(r2)
10010408:	10800044 	addi	r2,r2,1
1001040c:	10c1ffcc 	andi	r3,r2,2047
10010410:	e0bffb17 	ldw	r2,-20(fp)
10010414:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10010418:	003fe206 	br	100103a4 <__alt_data_end+0xf80103a4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1001041c:	0001883a 	nop
10010420:	00000106 	br	10010428 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10010424:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10010428:	e0bff917 	ldw	r2,-28(fp)
1001042c:	10bfffec 	andhi	r2,r2,65535
10010430:	10000f26 	beq	r2,zero,10010470 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010434:	e0bffb17 	ldw	r2,-20(fp)
10010438:	10c00817 	ldw	r3,32(r2)
1001043c:	00bfff84 	movi	r2,-2
10010440:	1886703a 	and	r3,r3,r2
10010444:	e0bffb17 	ldw	r2,-20(fp)
10010448:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1001044c:	e0bffc17 	ldw	r2,-16(fp)
10010450:	10800104 	addi	r2,r2,4
10010454:	1007883a 	mov	r3,r2
10010458:	e0bffb17 	ldw	r2,-20(fp)
1001045c:	10800817 	ldw	r2,32(r2)
10010460:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010464:	e0bffc17 	ldw	r2,-16(fp)
10010468:	10800104 	addi	r2,r2,4
1001046c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10010470:	e0bffd17 	ldw	r2,-12(fp)
10010474:	1080800c 	andi	r2,r2,512
10010478:	103fbe26 	beq	r2,zero,10010374 <__alt_data_end+0xf8010374>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1001047c:	e0bffd17 	ldw	r2,-12(fp)
10010480:	1004d43a 	srli	r2,r2,16
10010484:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10010488:	00001406 	br	100104dc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1001048c:	e0bffc17 	ldw	r2,-16(fp)
10010490:	e0fffb17 	ldw	r3,-20(fp)
10010494:	18c00d17 	ldw	r3,52(r3)
10010498:	e13ffb17 	ldw	r4,-20(fp)
1001049c:	20c7883a 	add	r3,r4,r3
100104a0:	18c20e04 	addi	r3,r3,2104
100104a4:	18c00003 	ldbu	r3,0(r3)
100104a8:	18c03fcc 	andi	r3,r3,255
100104ac:	18c0201c 	xori	r3,r3,128
100104b0:	18ffe004 	addi	r3,r3,-128
100104b4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100104b8:	e0bffb17 	ldw	r2,-20(fp)
100104bc:	10800d17 	ldw	r2,52(r2)
100104c0:	10800044 	addi	r2,r2,1
100104c4:	10c1ffcc 	andi	r3,r2,2047
100104c8:	e0bffb17 	ldw	r2,-20(fp)
100104cc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
100104d0:	e0bffa17 	ldw	r2,-24(fp)
100104d4:	10bfffc4 	addi	r2,r2,-1
100104d8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
100104dc:	e0bffa17 	ldw	r2,-24(fp)
100104e0:	10000526 	beq	r2,zero,100104f8 <altera_avalon_jtag_uart_irq+0x1a8>
100104e4:	e0bffb17 	ldw	r2,-20(fp)
100104e8:	10c00d17 	ldw	r3,52(r2)
100104ec:	e0bffb17 	ldw	r2,-20(fp)
100104f0:	10800c17 	ldw	r2,48(r2)
100104f4:	18bfe51e 	bne	r3,r2,1001048c <__alt_data_end+0xf801048c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
100104f8:	e0bffa17 	ldw	r2,-24(fp)
100104fc:	103f9d26 	beq	r2,zero,10010374 <__alt_data_end+0xf8010374>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10010500:	e0bffb17 	ldw	r2,-20(fp)
10010504:	10c00817 	ldw	r3,32(r2)
10010508:	00bfff44 	movi	r2,-3
1001050c:	1886703a 	and	r3,r3,r2
10010510:	e0bffb17 	ldw	r2,-20(fp)
10010514:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010518:	e0bffb17 	ldw	r2,-20(fp)
1001051c:	10800017 	ldw	r2,0(r2)
10010520:	10800104 	addi	r2,r2,4
10010524:	1007883a 	mov	r3,r2
10010528:	e0bffb17 	ldw	r2,-20(fp)
1001052c:	10800817 	ldw	r2,32(r2)
10010530:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010534:	e0bffc17 	ldw	r2,-16(fp)
10010538:	10800104 	addi	r2,r2,4
1001053c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10010540:	003f8c06 	br	10010374 <__alt_data_end+0xf8010374>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10010544:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10010548:	0001883a 	nop
1001054c:	e037883a 	mov	sp,fp
10010550:	df000017 	ldw	fp,0(sp)
10010554:	dec00104 	addi	sp,sp,4
10010558:	f800283a 	ret

1001055c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1001055c:	defff804 	addi	sp,sp,-32
10010560:	df000715 	stw	fp,28(sp)
10010564:	df000704 	addi	fp,sp,28
10010568:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1001056c:	e0bffb17 	ldw	r2,-20(fp)
10010570:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10010574:	e0bff917 	ldw	r2,-28(fp)
10010578:	10800017 	ldw	r2,0(r2)
1001057c:	10800104 	addi	r2,r2,4
10010580:	10800037 	ldwio	r2,0(r2)
10010584:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10010588:	e0bffa17 	ldw	r2,-24(fp)
1001058c:	1081000c 	andi	r2,r2,1024
10010590:	10000b26 	beq	r2,zero,100105c0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10010594:	e0bff917 	ldw	r2,-28(fp)
10010598:	10800017 	ldw	r2,0(r2)
1001059c:	10800104 	addi	r2,r2,4
100105a0:	1007883a 	mov	r3,r2
100105a4:	e0bff917 	ldw	r2,-28(fp)
100105a8:	10800817 	ldw	r2,32(r2)
100105ac:	10810014 	ori	r2,r2,1024
100105b0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
100105b4:	e0bff917 	ldw	r2,-28(fp)
100105b8:	10000915 	stw	zero,36(r2)
100105bc:	00000a06 	br	100105e8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
100105c0:	e0bff917 	ldw	r2,-28(fp)
100105c4:	10c00917 	ldw	r3,36(r2)
100105c8:	00a00034 	movhi	r2,32768
100105cc:	10bfff04 	addi	r2,r2,-4
100105d0:	10c00536 	bltu	r2,r3,100105e8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
100105d4:	e0bff917 	ldw	r2,-28(fp)
100105d8:	10800917 	ldw	r2,36(r2)
100105dc:	10c00044 	addi	r3,r2,1
100105e0:	e0bff917 	ldw	r2,-28(fp)
100105e4:	10c00915 	stw	r3,36(r2)
100105e8:	d0a6dd17 	ldw	r2,-25740(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
100105ec:	e037883a 	mov	sp,fp
100105f0:	df000017 	ldw	fp,0(sp)
100105f4:	dec00104 	addi	sp,sp,4
100105f8:	f800283a 	ret

100105fc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
100105fc:	defffd04 	addi	sp,sp,-12
10010600:	df000215 	stw	fp,8(sp)
10010604:	df000204 	addi	fp,sp,8
10010608:	e13ffe15 	stw	r4,-8(fp)
1001060c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10010610:	00000506 	br	10010628 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10010614:	e0bfff17 	ldw	r2,-4(fp)
10010618:	1090000c 	andi	r2,r2,16384
1001061c:	10000226 	beq	r2,zero,10010628 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10010620:	00bffd44 	movi	r2,-11
10010624:	00000b06 	br	10010654 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10010628:	e0bffe17 	ldw	r2,-8(fp)
1001062c:	10c00d17 	ldw	r3,52(r2)
10010630:	e0bffe17 	ldw	r2,-8(fp)
10010634:	10800c17 	ldw	r2,48(r2)
10010638:	18800526 	beq	r3,r2,10010650 <altera_avalon_jtag_uart_close+0x54>
1001063c:	e0bffe17 	ldw	r2,-8(fp)
10010640:	10c00917 	ldw	r3,36(r2)
10010644:	e0bffe17 	ldw	r2,-8(fp)
10010648:	10800117 	ldw	r2,4(r2)
1001064c:	18bff136 	bltu	r3,r2,10010614 <__alt_data_end+0xf8010614>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10010650:	0005883a 	mov	r2,zero
}
10010654:	e037883a 	mov	sp,fp
10010658:	df000017 	ldw	fp,0(sp)
1001065c:	dec00104 	addi	sp,sp,4
10010660:	f800283a 	ret

10010664 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10010664:	defffa04 	addi	sp,sp,-24
10010668:	df000515 	stw	fp,20(sp)
1001066c:	df000504 	addi	fp,sp,20
10010670:	e13ffd15 	stw	r4,-12(fp)
10010674:	e17ffe15 	stw	r5,-8(fp)
10010678:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1001067c:	00bff9c4 	movi	r2,-25
10010680:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10010684:	e0bffe17 	ldw	r2,-8(fp)
10010688:	10da8060 	cmpeqi	r3,r2,27137
1001068c:	1800031e 	bne	r3,zero,1001069c <altera_avalon_jtag_uart_ioctl+0x38>
10010690:	109a80a0 	cmpeqi	r2,r2,27138
10010694:	1000181e 	bne	r2,zero,100106f8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10010698:	00002906 	br	10010740 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1001069c:	e0bffd17 	ldw	r2,-12(fp)
100106a0:	10c00117 	ldw	r3,4(r2)
100106a4:	00a00034 	movhi	r2,32768
100106a8:	10bfffc4 	addi	r2,r2,-1
100106ac:	18802126 	beq	r3,r2,10010734 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
100106b0:	e0bfff17 	ldw	r2,-4(fp)
100106b4:	10800017 	ldw	r2,0(r2)
100106b8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
100106bc:	e0bffc17 	ldw	r2,-16(fp)
100106c0:	10800090 	cmplti	r2,r2,2
100106c4:	1000061e 	bne	r2,zero,100106e0 <altera_avalon_jtag_uart_ioctl+0x7c>
100106c8:	e0fffc17 	ldw	r3,-16(fp)
100106cc:	00a00034 	movhi	r2,32768
100106d0:	10bfffc4 	addi	r2,r2,-1
100106d4:	18800226 	beq	r3,r2,100106e0 <altera_avalon_jtag_uart_ioctl+0x7c>
100106d8:	e0bffc17 	ldw	r2,-16(fp)
100106dc:	00000206 	br	100106e8 <altera_avalon_jtag_uart_ioctl+0x84>
100106e0:	00a00034 	movhi	r2,32768
100106e4:	10bfff84 	addi	r2,r2,-2
100106e8:	e0fffd17 	ldw	r3,-12(fp)
100106ec:	18800115 	stw	r2,4(r3)
      rc = 0;
100106f0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100106f4:	00000f06 	br	10010734 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
100106f8:	e0bffd17 	ldw	r2,-12(fp)
100106fc:	10c00117 	ldw	r3,4(r2)
10010700:	00a00034 	movhi	r2,32768
10010704:	10bfffc4 	addi	r2,r2,-1
10010708:	18800c26 	beq	r3,r2,1001073c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1001070c:	e0bffd17 	ldw	r2,-12(fp)
10010710:	10c00917 	ldw	r3,36(r2)
10010714:	e0bffd17 	ldw	r2,-12(fp)
10010718:	10800117 	ldw	r2,4(r2)
1001071c:	1885803a 	cmpltu	r2,r3,r2
10010720:	10c03fcc 	andi	r3,r2,255
10010724:	e0bfff17 	ldw	r2,-4(fp)
10010728:	10c00015 	stw	r3,0(r2)
      rc = 0;
1001072c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10010730:	00000206 	br	1001073c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10010734:	0001883a 	nop
10010738:	00000106 	br	10010740 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
1001073c:	0001883a 	nop

  default:
    break;
  }

  return rc;
10010740:	e0bffb17 	ldw	r2,-20(fp)
}
10010744:	e037883a 	mov	sp,fp
10010748:	df000017 	ldw	fp,0(sp)
1001074c:	dec00104 	addi	sp,sp,4
10010750:	f800283a 	ret

10010754 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10010754:	defff304 	addi	sp,sp,-52
10010758:	dfc00c15 	stw	ra,48(sp)
1001075c:	df000b15 	stw	fp,44(sp)
10010760:	df000b04 	addi	fp,sp,44
10010764:	e13ffc15 	stw	r4,-16(fp)
10010768:	e17ffd15 	stw	r5,-12(fp)
1001076c:	e1bffe15 	stw	r6,-8(fp)
10010770:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10010774:	e0bffd17 	ldw	r2,-12(fp)
10010778:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1001077c:	00004706 	br	1001089c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10010780:	e0bffc17 	ldw	r2,-16(fp)
10010784:	10800a17 	ldw	r2,40(r2)
10010788:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1001078c:	e0bffc17 	ldw	r2,-16(fp)
10010790:	10800b17 	ldw	r2,44(r2)
10010794:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10010798:	e0fff717 	ldw	r3,-36(fp)
1001079c:	e0bff817 	ldw	r2,-32(fp)
100107a0:	18800536 	bltu	r3,r2,100107b8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
100107a4:	e0fff717 	ldw	r3,-36(fp)
100107a8:	e0bff817 	ldw	r2,-32(fp)
100107ac:	1885c83a 	sub	r2,r3,r2
100107b0:	e0bff615 	stw	r2,-40(fp)
100107b4:	00000406 	br	100107c8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
100107b8:	00c20004 	movi	r3,2048
100107bc:	e0bff817 	ldw	r2,-32(fp)
100107c0:	1885c83a 	sub	r2,r3,r2
100107c4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100107c8:	e0bff617 	ldw	r2,-40(fp)
100107cc:	10001e26 	beq	r2,zero,10010848 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
100107d0:	e0fffe17 	ldw	r3,-8(fp)
100107d4:	e0bff617 	ldw	r2,-40(fp)
100107d8:	1880022e 	bgeu	r3,r2,100107e4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
100107dc:	e0bffe17 	ldw	r2,-8(fp)
100107e0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
100107e4:	e0bffc17 	ldw	r2,-16(fp)
100107e8:	10c00e04 	addi	r3,r2,56
100107ec:	e0bff817 	ldw	r2,-32(fp)
100107f0:	1885883a 	add	r2,r3,r2
100107f4:	e1bff617 	ldw	r6,-40(fp)
100107f8:	100b883a 	mov	r5,r2
100107fc:	e13ff517 	ldw	r4,-44(fp)
10010800:	00033ac0 	call	100033ac <memcpy>
      ptr   += n;
10010804:	e0fff517 	ldw	r3,-44(fp)
10010808:	e0bff617 	ldw	r2,-40(fp)
1001080c:	1885883a 	add	r2,r3,r2
10010810:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10010814:	e0fffe17 	ldw	r3,-8(fp)
10010818:	e0bff617 	ldw	r2,-40(fp)
1001081c:	1885c83a 	sub	r2,r3,r2
10010820:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010824:	e0fff817 	ldw	r3,-32(fp)
10010828:	e0bff617 	ldw	r2,-40(fp)
1001082c:	1885883a 	add	r2,r3,r2
10010830:	10c1ffcc 	andi	r3,r2,2047
10010834:	e0bffc17 	ldw	r2,-16(fp)
10010838:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1001083c:	e0bffe17 	ldw	r2,-8(fp)
10010840:	00bfcf16 	blt	zero,r2,10010780 <__alt_data_end+0xf8010780>
10010844:	00000106 	br	1001084c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10010848:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
1001084c:	e0fff517 	ldw	r3,-44(fp)
10010850:	e0bffd17 	ldw	r2,-12(fp)
10010854:	1880141e 	bne	r3,r2,100108a8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10010858:	e0bfff17 	ldw	r2,-4(fp)
1001085c:	1090000c 	andi	r2,r2,16384
10010860:	1000131e 	bne	r2,zero,100108b0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10010864:	0001883a 	nop
10010868:	e0bffc17 	ldw	r2,-16(fp)
1001086c:	10c00a17 	ldw	r3,40(r2)
10010870:	e0bff717 	ldw	r2,-36(fp)
10010874:	1880051e 	bne	r3,r2,1001088c <altera_avalon_jtag_uart_read+0x138>
10010878:	e0bffc17 	ldw	r2,-16(fp)
1001087c:	10c00917 	ldw	r3,36(r2)
10010880:	e0bffc17 	ldw	r2,-16(fp)
10010884:	10800117 	ldw	r2,4(r2)
10010888:	18bff736 	bltu	r3,r2,10010868 <__alt_data_end+0xf8010868>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1001088c:	e0bffc17 	ldw	r2,-16(fp)
10010890:	10c00a17 	ldw	r3,40(r2)
10010894:	e0bff717 	ldw	r2,-36(fp)
10010898:	18800726 	beq	r3,r2,100108b8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1001089c:	e0bffe17 	ldw	r2,-8(fp)
100108a0:	00bfb716 	blt	zero,r2,10010780 <__alt_data_end+0xf8010780>
100108a4:	00000506 	br	100108bc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
100108a8:	0001883a 	nop
100108ac:	00000306 	br	100108bc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
100108b0:	0001883a 	nop
100108b4:	00000106 	br	100108bc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
100108b8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
100108bc:	e0fff517 	ldw	r3,-44(fp)
100108c0:	e0bffd17 	ldw	r2,-12(fp)
100108c4:	18801826 	beq	r3,r2,10010928 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100108c8:	0005303a 	rdctl	r2,status
100108cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100108d0:	e0fffb17 	ldw	r3,-20(fp)
100108d4:	00bfff84 	movi	r2,-2
100108d8:	1884703a 	and	r2,r3,r2
100108dc:	1001703a 	wrctl	status,r2
  
  return context;
100108e0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
100108e4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100108e8:	e0bffc17 	ldw	r2,-16(fp)
100108ec:	10800817 	ldw	r2,32(r2)
100108f0:	10c00054 	ori	r3,r2,1
100108f4:	e0bffc17 	ldw	r2,-16(fp)
100108f8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100108fc:	e0bffc17 	ldw	r2,-16(fp)
10010900:	10800017 	ldw	r2,0(r2)
10010904:	10800104 	addi	r2,r2,4
10010908:	1007883a 	mov	r3,r2
1001090c:	e0bffc17 	ldw	r2,-16(fp)
10010910:	10800817 	ldw	r2,32(r2)
10010914:	18800035 	stwio	r2,0(r3)
10010918:	e0bffa17 	ldw	r2,-24(fp)
1001091c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010920:	e0bff917 	ldw	r2,-28(fp)
10010924:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10010928:	e0fff517 	ldw	r3,-44(fp)
1001092c:	e0bffd17 	ldw	r2,-12(fp)
10010930:	18800426 	beq	r3,r2,10010944 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10010934:	e0fff517 	ldw	r3,-44(fp)
10010938:	e0bffd17 	ldw	r2,-12(fp)
1001093c:	1885c83a 	sub	r2,r3,r2
10010940:	00000606 	br	1001095c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10010944:	e0bfff17 	ldw	r2,-4(fp)
10010948:	1090000c 	andi	r2,r2,16384
1001094c:	10000226 	beq	r2,zero,10010958 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10010950:	00bffd44 	movi	r2,-11
10010954:	00000106 	br	1001095c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10010958:	00bffec4 	movi	r2,-5
}
1001095c:	e037883a 	mov	sp,fp
10010960:	dfc00117 	ldw	ra,4(sp)
10010964:	df000017 	ldw	fp,0(sp)
10010968:	dec00204 	addi	sp,sp,8
1001096c:	f800283a 	ret

10010970 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10010970:	defff304 	addi	sp,sp,-52
10010974:	dfc00c15 	stw	ra,48(sp)
10010978:	df000b15 	stw	fp,44(sp)
1001097c:	df000b04 	addi	fp,sp,44
10010980:	e13ffc15 	stw	r4,-16(fp)
10010984:	e17ffd15 	stw	r5,-12(fp)
10010988:	e1bffe15 	stw	r6,-8(fp)
1001098c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10010990:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10010994:	e0bffd17 	ldw	r2,-12(fp)
10010998:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1001099c:	00003706 	br	10010a7c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
100109a0:	e0bffc17 	ldw	r2,-16(fp)
100109a4:	10800c17 	ldw	r2,48(r2)
100109a8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
100109ac:	e0bffc17 	ldw	r2,-16(fp)
100109b0:	10800d17 	ldw	r2,52(r2)
100109b4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
100109b8:	e0fff917 	ldw	r3,-28(fp)
100109bc:	e0bff517 	ldw	r2,-44(fp)
100109c0:	1880062e 	bgeu	r3,r2,100109dc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
100109c4:	e0fff517 	ldw	r3,-44(fp)
100109c8:	e0bff917 	ldw	r2,-28(fp)
100109cc:	1885c83a 	sub	r2,r3,r2
100109d0:	10bfffc4 	addi	r2,r2,-1
100109d4:	e0bff615 	stw	r2,-40(fp)
100109d8:	00000b06 	br	10010a08 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
100109dc:	e0bff517 	ldw	r2,-44(fp)
100109e0:	10000526 	beq	r2,zero,100109f8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
100109e4:	00c20004 	movi	r3,2048
100109e8:	e0bff917 	ldw	r2,-28(fp)
100109ec:	1885c83a 	sub	r2,r3,r2
100109f0:	e0bff615 	stw	r2,-40(fp)
100109f4:	00000406 	br	10010a08 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
100109f8:	00c1ffc4 	movi	r3,2047
100109fc:	e0bff917 	ldw	r2,-28(fp)
10010a00:	1885c83a 	sub	r2,r3,r2
10010a04:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10010a08:	e0bff617 	ldw	r2,-40(fp)
10010a0c:	10001e26 	beq	r2,zero,10010a88 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10010a10:	e0fffe17 	ldw	r3,-8(fp)
10010a14:	e0bff617 	ldw	r2,-40(fp)
10010a18:	1880022e 	bgeu	r3,r2,10010a24 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10010a1c:	e0bffe17 	ldw	r2,-8(fp)
10010a20:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10010a24:	e0bffc17 	ldw	r2,-16(fp)
10010a28:	10c20e04 	addi	r3,r2,2104
10010a2c:	e0bff917 	ldw	r2,-28(fp)
10010a30:	1885883a 	add	r2,r3,r2
10010a34:	e1bff617 	ldw	r6,-40(fp)
10010a38:	e17ffd17 	ldw	r5,-12(fp)
10010a3c:	1009883a 	mov	r4,r2
10010a40:	00033ac0 	call	100033ac <memcpy>
      ptr   += n;
10010a44:	e0fffd17 	ldw	r3,-12(fp)
10010a48:	e0bff617 	ldw	r2,-40(fp)
10010a4c:	1885883a 	add	r2,r3,r2
10010a50:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10010a54:	e0fffe17 	ldw	r3,-8(fp)
10010a58:	e0bff617 	ldw	r2,-40(fp)
10010a5c:	1885c83a 	sub	r2,r3,r2
10010a60:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010a64:	e0fff917 	ldw	r3,-28(fp)
10010a68:	e0bff617 	ldw	r2,-40(fp)
10010a6c:	1885883a 	add	r2,r3,r2
10010a70:	10c1ffcc 	andi	r3,r2,2047
10010a74:	e0bffc17 	ldw	r2,-16(fp)
10010a78:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10010a7c:	e0bffe17 	ldw	r2,-8(fp)
10010a80:	00bfc716 	blt	zero,r2,100109a0 <__alt_data_end+0xf80109a0>
10010a84:	00000106 	br	10010a8c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10010a88:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010a8c:	0005303a 	rdctl	r2,status
10010a90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010a94:	e0fffb17 	ldw	r3,-20(fp)
10010a98:	00bfff84 	movi	r2,-2
10010a9c:	1884703a 	and	r2,r3,r2
10010aa0:	1001703a 	wrctl	status,r2
  
  return context;
10010aa4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10010aa8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10010aac:	e0bffc17 	ldw	r2,-16(fp)
10010ab0:	10800817 	ldw	r2,32(r2)
10010ab4:	10c00094 	ori	r3,r2,2
10010ab8:	e0bffc17 	ldw	r2,-16(fp)
10010abc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010ac0:	e0bffc17 	ldw	r2,-16(fp)
10010ac4:	10800017 	ldw	r2,0(r2)
10010ac8:	10800104 	addi	r2,r2,4
10010acc:	1007883a 	mov	r3,r2
10010ad0:	e0bffc17 	ldw	r2,-16(fp)
10010ad4:	10800817 	ldw	r2,32(r2)
10010ad8:	18800035 	stwio	r2,0(r3)
10010adc:	e0bffa17 	ldw	r2,-24(fp)
10010ae0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010ae4:	e0bff817 	ldw	r2,-32(fp)
10010ae8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10010aec:	e0bffe17 	ldw	r2,-8(fp)
10010af0:	0080100e 	bge	zero,r2,10010b34 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10010af4:	e0bfff17 	ldw	r2,-4(fp)
10010af8:	1090000c 	andi	r2,r2,16384
10010afc:	1000101e 	bne	r2,zero,10010b40 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10010b00:	0001883a 	nop
10010b04:	e0bffc17 	ldw	r2,-16(fp)
10010b08:	10c00d17 	ldw	r3,52(r2)
10010b0c:	e0bff517 	ldw	r2,-44(fp)
10010b10:	1880051e 	bne	r3,r2,10010b28 <altera_avalon_jtag_uart_write+0x1b8>
10010b14:	e0bffc17 	ldw	r2,-16(fp)
10010b18:	10c00917 	ldw	r3,36(r2)
10010b1c:	e0bffc17 	ldw	r2,-16(fp)
10010b20:	10800117 	ldw	r2,4(r2)
10010b24:	18bff736 	bltu	r3,r2,10010b04 <__alt_data_end+0xf8010b04>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10010b28:	e0bffc17 	ldw	r2,-16(fp)
10010b2c:	10800917 	ldw	r2,36(r2)
10010b30:	1000051e 	bne	r2,zero,10010b48 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10010b34:	e0bffe17 	ldw	r2,-8(fp)
10010b38:	00bfd016 	blt	zero,r2,10010a7c <__alt_data_end+0xf8010a7c>
10010b3c:	00000306 	br	10010b4c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10010b40:	0001883a 	nop
10010b44:	00000106 	br	10010b4c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10010b48:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10010b4c:	e0fffd17 	ldw	r3,-12(fp)
10010b50:	e0bff717 	ldw	r2,-36(fp)
10010b54:	18800426 	beq	r3,r2,10010b68 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10010b58:	e0fffd17 	ldw	r3,-12(fp)
10010b5c:	e0bff717 	ldw	r2,-36(fp)
10010b60:	1885c83a 	sub	r2,r3,r2
10010b64:	00000606 	br	10010b80 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10010b68:	e0bfff17 	ldw	r2,-4(fp)
10010b6c:	1090000c 	andi	r2,r2,16384
10010b70:	10000226 	beq	r2,zero,10010b7c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10010b74:	00bffd44 	movi	r2,-11
10010b78:	00000106 	br	10010b80 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10010b7c:	00bffec4 	movi	r2,-5
}
10010b80:	e037883a 	mov	sp,fp
10010b84:	dfc00117 	ldw	ra,4(sp)
10010b88:	df000017 	ldw	fp,0(sp)
10010b8c:	dec00204 	addi	sp,sp,8
10010b90:	f800283a 	ret

10010b94 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10010b94:	defff504 	addi	sp,sp,-44
10010b98:	df000a15 	stw	fp,40(sp)
10010b9c:	df000a04 	addi	fp,sp,40
10010ba0:	e13ffc15 	stw	r4,-16(fp)
10010ba4:	e17ffd15 	stw	r5,-12(fp)
10010ba8:	e1bffe15 	stw	r6,-8(fp)
10010bac:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10010bb0:	e03ff615 	stw	zero,-40(fp)
10010bb4:	d0a6dd17 	ldw	r2,-25740(gp)
  
  if (alt_ticks_per_second ())
10010bb8:	10003c26 	beq	r2,zero,10010cac <alt_alarm_start+0x118>
  {
    if (alarm)
10010bbc:	e0bffc17 	ldw	r2,-16(fp)
10010bc0:	10003826 	beq	r2,zero,10010ca4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
10010bc4:	e0bffc17 	ldw	r2,-16(fp)
10010bc8:	e0fffe17 	ldw	r3,-8(fp)
10010bcc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10010bd0:	e0bffc17 	ldw	r2,-16(fp)
10010bd4:	e0ffff17 	ldw	r3,-4(fp)
10010bd8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010bdc:	0005303a 	rdctl	r2,status
10010be0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010be4:	e0fff917 	ldw	r3,-28(fp)
10010be8:	00bfff84 	movi	r2,-2
10010bec:	1884703a 	and	r2,r3,r2
10010bf0:	1001703a 	wrctl	status,r2
  
  return context;
10010bf4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10010bf8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10010bfc:	d0a6de17 	ldw	r2,-25736(gp)
      
      current_nticks = alt_nticks();
10010c00:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10010c04:	e0fffd17 	ldw	r3,-12(fp)
10010c08:	e0bff617 	ldw	r2,-40(fp)
10010c0c:	1885883a 	add	r2,r3,r2
10010c10:	10c00044 	addi	r3,r2,1
10010c14:	e0bffc17 	ldw	r2,-16(fp)
10010c18:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10010c1c:	e0bffc17 	ldw	r2,-16(fp)
10010c20:	10c00217 	ldw	r3,8(r2)
10010c24:	e0bff617 	ldw	r2,-40(fp)
10010c28:	1880042e 	bgeu	r3,r2,10010c3c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10010c2c:	e0bffc17 	ldw	r2,-16(fp)
10010c30:	00c00044 	movi	r3,1
10010c34:	10c00405 	stb	r3,16(r2)
10010c38:	00000206 	br	10010c44 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10010c3c:	e0bffc17 	ldw	r2,-16(fp)
10010c40:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10010c44:	e0bffc17 	ldw	r2,-16(fp)
10010c48:	d0e01104 	addi	r3,gp,-32700
10010c4c:	e0fffa15 	stw	r3,-24(fp)
10010c50:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10010c54:	e0bffb17 	ldw	r2,-20(fp)
10010c58:	e0fffa17 	ldw	r3,-24(fp)
10010c5c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10010c60:	e0bffa17 	ldw	r2,-24(fp)
10010c64:	10c00017 	ldw	r3,0(r2)
10010c68:	e0bffb17 	ldw	r2,-20(fp)
10010c6c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10010c70:	e0bffa17 	ldw	r2,-24(fp)
10010c74:	10800017 	ldw	r2,0(r2)
10010c78:	e0fffb17 	ldw	r3,-20(fp)
10010c7c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10010c80:	e0bffa17 	ldw	r2,-24(fp)
10010c84:	e0fffb17 	ldw	r3,-20(fp)
10010c88:	10c00015 	stw	r3,0(r2)
10010c8c:	e0bff817 	ldw	r2,-32(fp)
10010c90:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010c94:	e0bff717 	ldw	r2,-36(fp)
10010c98:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10010c9c:	0005883a 	mov	r2,zero
10010ca0:	00000306 	br	10010cb0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10010ca4:	00bffa84 	movi	r2,-22
10010ca8:	00000106 	br	10010cb0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10010cac:	00bfde84 	movi	r2,-134
  }
}
10010cb0:	e037883a 	mov	sp,fp
10010cb4:	df000017 	ldw	fp,0(sp)
10010cb8:	dec00104 	addi	sp,sp,4
10010cbc:	f800283a 	ret

10010cc0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10010cc0:	deffff04 	addi	sp,sp,-4
10010cc4:	df000015 	stw	fp,0(sp)
10010cc8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10010ccc:	0001883a 	nop
10010cd0:	e037883a 	mov	sp,fp
10010cd4:	df000017 	ldw	fp,0(sp)
10010cd8:	dec00104 	addi	sp,sp,4
10010cdc:	f800283a 	ret

10010ce0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010ce0:	defffe04 	addi	sp,sp,-8
10010ce4:	dfc00115 	stw	ra,4(sp)
10010ce8:	df000015 	stw	fp,0(sp)
10010cec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010cf0:	d0a00e17 	ldw	r2,-32712(gp)
10010cf4:	10000326 	beq	r2,zero,10010d04 <alt_get_errno+0x24>
10010cf8:	d0a00e17 	ldw	r2,-32712(gp)
10010cfc:	103ee83a 	callr	r2
10010d00:	00000106 	br	10010d08 <alt_get_errno+0x28>
10010d04:	d0a6d204 	addi	r2,gp,-25784
}
10010d08:	e037883a 	mov	sp,fp
10010d0c:	dfc00117 	ldw	ra,4(sp)
10010d10:	df000017 	ldw	fp,0(sp)
10010d14:	dec00204 	addi	sp,sp,8
10010d18:	f800283a 	ret

10010d1c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10010d1c:	defffa04 	addi	sp,sp,-24
10010d20:	dfc00515 	stw	ra,20(sp)
10010d24:	df000415 	stw	fp,16(sp)
10010d28:	df000404 	addi	fp,sp,16
10010d2c:	e13ffe15 	stw	r4,-8(fp)
10010d30:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10010d34:	e0bffe17 	ldw	r2,-8(fp)
10010d38:	10000326 	beq	r2,zero,10010d48 <alt_dev_llist_insert+0x2c>
10010d3c:	e0bffe17 	ldw	r2,-8(fp)
10010d40:	10800217 	ldw	r2,8(r2)
10010d44:	1000061e 	bne	r2,zero,10010d60 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10010d48:	0010ce00 	call	10010ce0 <alt_get_errno>
10010d4c:	1007883a 	mov	r3,r2
10010d50:	00800584 	movi	r2,22
10010d54:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10010d58:	00bffa84 	movi	r2,-22
10010d5c:	00001306 	br	10010dac <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10010d60:	e0bffe17 	ldw	r2,-8(fp)
10010d64:	e0ffff17 	ldw	r3,-4(fp)
10010d68:	e0fffc15 	stw	r3,-16(fp)
10010d6c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10010d70:	e0bffd17 	ldw	r2,-12(fp)
10010d74:	e0fffc17 	ldw	r3,-16(fp)
10010d78:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10010d7c:	e0bffc17 	ldw	r2,-16(fp)
10010d80:	10c00017 	ldw	r3,0(r2)
10010d84:	e0bffd17 	ldw	r2,-12(fp)
10010d88:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10010d8c:	e0bffc17 	ldw	r2,-16(fp)
10010d90:	10800017 	ldw	r2,0(r2)
10010d94:	e0fffd17 	ldw	r3,-12(fp)
10010d98:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10010d9c:	e0bffc17 	ldw	r2,-16(fp)
10010da0:	e0fffd17 	ldw	r3,-12(fp)
10010da4:	10c00015 	stw	r3,0(r2)

  return 0;  
10010da8:	0005883a 	mov	r2,zero
}
10010dac:	e037883a 	mov	sp,fp
10010db0:	dfc00117 	ldw	ra,4(sp)
10010db4:	df000017 	ldw	fp,0(sp)
10010db8:	dec00204 	addi	sp,sp,8
10010dbc:	f800283a 	ret

10010dc0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10010dc0:	defffd04 	addi	sp,sp,-12
10010dc4:	dfc00215 	stw	ra,8(sp)
10010dc8:	df000115 	stw	fp,4(sp)
10010dcc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10010dd0:	00840074 	movhi	r2,4097
10010dd4:	1086e204 	addi	r2,r2,7048
10010dd8:	e0bfff15 	stw	r2,-4(fp)
10010ddc:	00000606 	br	10010df8 <_do_ctors+0x38>
        (*ctor) (); 
10010de0:	e0bfff17 	ldw	r2,-4(fp)
10010de4:	10800017 	ldw	r2,0(r2)
10010de8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10010dec:	e0bfff17 	ldw	r2,-4(fp)
10010df0:	10bfff04 	addi	r2,r2,-4
10010df4:	e0bfff15 	stw	r2,-4(fp)
10010df8:	e0ffff17 	ldw	r3,-4(fp)
10010dfc:	00840074 	movhi	r2,4097
10010e00:	1086e304 	addi	r2,r2,7052
10010e04:	18bff62e 	bgeu	r3,r2,10010de0 <__alt_data_end+0xf8010de0>
        (*ctor) (); 
}
10010e08:	0001883a 	nop
10010e0c:	e037883a 	mov	sp,fp
10010e10:	dfc00117 	ldw	ra,4(sp)
10010e14:	df000017 	ldw	fp,0(sp)
10010e18:	dec00204 	addi	sp,sp,8
10010e1c:	f800283a 	ret

10010e20 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10010e20:	defffd04 	addi	sp,sp,-12
10010e24:	dfc00215 	stw	ra,8(sp)
10010e28:	df000115 	stw	fp,4(sp)
10010e2c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10010e30:	00840074 	movhi	r2,4097
10010e34:	1086e204 	addi	r2,r2,7048
10010e38:	e0bfff15 	stw	r2,-4(fp)
10010e3c:	00000606 	br	10010e58 <_do_dtors+0x38>
        (*dtor) (); 
10010e40:	e0bfff17 	ldw	r2,-4(fp)
10010e44:	10800017 	ldw	r2,0(r2)
10010e48:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10010e4c:	e0bfff17 	ldw	r2,-4(fp)
10010e50:	10bfff04 	addi	r2,r2,-4
10010e54:	e0bfff15 	stw	r2,-4(fp)
10010e58:	e0ffff17 	ldw	r3,-4(fp)
10010e5c:	00840074 	movhi	r2,4097
10010e60:	1086e304 	addi	r2,r2,7052
10010e64:	18bff62e 	bgeu	r3,r2,10010e40 <__alt_data_end+0xf8010e40>
        (*dtor) (); 
}
10010e68:	0001883a 	nop
10010e6c:	e037883a 	mov	sp,fp
10010e70:	dfc00117 	ldw	ra,4(sp)
10010e74:	df000017 	ldw	fp,0(sp)
10010e78:	dec00204 	addi	sp,sp,8
10010e7c:	f800283a 	ret

10010e80 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10010e80:	deffff04 	addi	sp,sp,-4
10010e84:	df000015 	stw	fp,0(sp)
10010e88:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10010e8c:	0001883a 	nop
10010e90:	e037883a 	mov	sp,fp
10010e94:	df000017 	ldw	fp,0(sp)
10010e98:	dec00104 	addi	sp,sp,4
10010e9c:	f800283a 	ret

10010ea0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10010ea0:	defff904 	addi	sp,sp,-28
10010ea4:	dfc00615 	stw	ra,24(sp)
10010ea8:	df000515 	stw	fp,20(sp)
10010eac:	df000504 	addi	fp,sp,20
10010eb0:	e13ffc15 	stw	r4,-16(fp)
10010eb4:	e17ffd15 	stw	r5,-12(fp)
10010eb8:	e1bffe15 	stw	r6,-8(fp)
10010ebc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10010ec0:	e0800217 	ldw	r2,8(fp)
10010ec4:	d8800015 	stw	r2,0(sp)
10010ec8:	e1ffff17 	ldw	r7,-4(fp)
10010ecc:	e1bffe17 	ldw	r6,-8(fp)
10010ed0:	e17ffd17 	ldw	r5,-12(fp)
10010ed4:	e13ffc17 	ldw	r4,-16(fp)
10010ed8:	00110500 	call	10011050 <alt_iic_isr_register>
}  
10010edc:	e037883a 	mov	sp,fp
10010ee0:	dfc00117 	ldw	ra,4(sp)
10010ee4:	df000017 	ldw	fp,0(sp)
10010ee8:	dec00204 	addi	sp,sp,8
10010eec:	f800283a 	ret

10010ef0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10010ef0:	defff904 	addi	sp,sp,-28
10010ef4:	df000615 	stw	fp,24(sp)
10010ef8:	df000604 	addi	fp,sp,24
10010efc:	e13ffe15 	stw	r4,-8(fp)
10010f00:	e17fff15 	stw	r5,-4(fp)
10010f04:	e0bfff17 	ldw	r2,-4(fp)
10010f08:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010f0c:	0005303a 	rdctl	r2,status
10010f10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010f14:	e0fffb17 	ldw	r3,-20(fp)
10010f18:	00bfff84 	movi	r2,-2
10010f1c:	1884703a 	and	r2,r3,r2
10010f20:	1001703a 	wrctl	status,r2
  
  return context;
10010f24:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10010f28:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10010f2c:	00c00044 	movi	r3,1
10010f30:	e0bffa17 	ldw	r2,-24(fp)
10010f34:	1884983a 	sll	r2,r3,r2
10010f38:	1007883a 	mov	r3,r2
10010f3c:	d0a6dc17 	ldw	r2,-25744(gp)
10010f40:	1884b03a 	or	r2,r3,r2
10010f44:	d0a6dc15 	stw	r2,-25744(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10010f48:	d0a6dc17 	ldw	r2,-25744(gp)
10010f4c:	100170fa 	wrctl	ienable,r2
10010f50:	e0bffc17 	ldw	r2,-16(fp)
10010f54:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010f58:	e0bffd17 	ldw	r2,-12(fp)
10010f5c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10010f60:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10010f64:	0001883a 	nop
}
10010f68:	e037883a 	mov	sp,fp
10010f6c:	df000017 	ldw	fp,0(sp)
10010f70:	dec00104 	addi	sp,sp,4
10010f74:	f800283a 	ret

10010f78 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10010f78:	defff904 	addi	sp,sp,-28
10010f7c:	df000615 	stw	fp,24(sp)
10010f80:	df000604 	addi	fp,sp,24
10010f84:	e13ffe15 	stw	r4,-8(fp)
10010f88:	e17fff15 	stw	r5,-4(fp)
10010f8c:	e0bfff17 	ldw	r2,-4(fp)
10010f90:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010f94:	0005303a 	rdctl	r2,status
10010f98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010f9c:	e0fffb17 	ldw	r3,-20(fp)
10010fa0:	00bfff84 	movi	r2,-2
10010fa4:	1884703a 	and	r2,r3,r2
10010fa8:	1001703a 	wrctl	status,r2
  
  return context;
10010fac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10010fb0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10010fb4:	00c00044 	movi	r3,1
10010fb8:	e0bffa17 	ldw	r2,-24(fp)
10010fbc:	1884983a 	sll	r2,r3,r2
10010fc0:	0084303a 	nor	r2,zero,r2
10010fc4:	1007883a 	mov	r3,r2
10010fc8:	d0a6dc17 	ldw	r2,-25744(gp)
10010fcc:	1884703a 	and	r2,r3,r2
10010fd0:	d0a6dc15 	stw	r2,-25744(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10010fd4:	d0a6dc17 	ldw	r2,-25744(gp)
10010fd8:	100170fa 	wrctl	ienable,r2
10010fdc:	e0bffc17 	ldw	r2,-16(fp)
10010fe0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010fe4:	e0bffd17 	ldw	r2,-12(fp)
10010fe8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10010fec:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10010ff0:	0001883a 	nop
}
10010ff4:	e037883a 	mov	sp,fp
10010ff8:	df000017 	ldw	fp,0(sp)
10010ffc:	dec00104 	addi	sp,sp,4
10011000:	f800283a 	ret

10011004 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10011004:	defffc04 	addi	sp,sp,-16
10011008:	df000315 	stw	fp,12(sp)
1001100c:	df000304 	addi	fp,sp,12
10011010:	e13ffe15 	stw	r4,-8(fp)
10011014:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10011018:	000530fa 	rdctl	r2,ienable
1001101c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10011020:	00c00044 	movi	r3,1
10011024:	e0bfff17 	ldw	r2,-4(fp)
10011028:	1884983a 	sll	r2,r3,r2
1001102c:	1007883a 	mov	r3,r2
10011030:	e0bffd17 	ldw	r2,-12(fp)
10011034:	1884703a 	and	r2,r3,r2
10011038:	1004c03a 	cmpne	r2,r2,zero
1001103c:	10803fcc 	andi	r2,r2,255
}
10011040:	e037883a 	mov	sp,fp
10011044:	df000017 	ldw	fp,0(sp)
10011048:	dec00104 	addi	sp,sp,4
1001104c:	f800283a 	ret

10011050 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10011050:	defff504 	addi	sp,sp,-44
10011054:	dfc00a15 	stw	ra,40(sp)
10011058:	df000915 	stw	fp,36(sp)
1001105c:	df000904 	addi	fp,sp,36
10011060:	e13ffc15 	stw	r4,-16(fp)
10011064:	e17ffd15 	stw	r5,-12(fp)
10011068:	e1bffe15 	stw	r6,-8(fp)
1001106c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10011070:	00bffa84 	movi	r2,-22
10011074:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10011078:	e0bffd17 	ldw	r2,-12(fp)
1001107c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10011080:	e0bff817 	ldw	r2,-32(fp)
10011084:	10800808 	cmpgei	r2,r2,32
10011088:	1000271e 	bne	r2,zero,10011128 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001108c:	0005303a 	rdctl	r2,status
10011090:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011094:	e0fffb17 	ldw	r3,-20(fp)
10011098:	00bfff84 	movi	r2,-2
1001109c:	1884703a 	and	r2,r3,r2
100110a0:	1001703a 	wrctl	status,r2
  
  return context;
100110a4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
100110a8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
100110ac:	00840074 	movhi	r2,4097
100110b0:	1095ac04 	addi	r2,r2,22192
100110b4:	e0fff817 	ldw	r3,-32(fp)
100110b8:	180690fa 	slli	r3,r3,3
100110bc:	10c5883a 	add	r2,r2,r3
100110c0:	e0fffe17 	ldw	r3,-8(fp)
100110c4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
100110c8:	00840074 	movhi	r2,4097
100110cc:	1095ac04 	addi	r2,r2,22192
100110d0:	e0fff817 	ldw	r3,-32(fp)
100110d4:	180690fa 	slli	r3,r3,3
100110d8:	10c5883a 	add	r2,r2,r3
100110dc:	10800104 	addi	r2,r2,4
100110e0:	e0ffff17 	ldw	r3,-4(fp)
100110e4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
100110e8:	e0bffe17 	ldw	r2,-8(fp)
100110ec:	10000526 	beq	r2,zero,10011104 <alt_iic_isr_register+0xb4>
100110f0:	e0bff817 	ldw	r2,-32(fp)
100110f4:	100b883a 	mov	r5,r2
100110f8:	e13ffc17 	ldw	r4,-16(fp)
100110fc:	0010ef00 	call	10010ef0 <alt_ic_irq_enable>
10011100:	00000406 	br	10011114 <alt_iic_isr_register+0xc4>
10011104:	e0bff817 	ldw	r2,-32(fp)
10011108:	100b883a 	mov	r5,r2
1001110c:	e13ffc17 	ldw	r4,-16(fp)
10011110:	0010f780 	call	10010f78 <alt_ic_irq_disable>
10011114:	e0bff715 	stw	r2,-36(fp)
10011118:	e0bffa17 	ldw	r2,-24(fp)
1001111c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011120:	e0bff917 	ldw	r2,-28(fp)
10011124:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10011128:	e0bff717 	ldw	r2,-36(fp)
}
1001112c:	e037883a 	mov	sp,fp
10011130:	dfc00117 	ldw	ra,4(sp)
10011134:	df000017 	ldw	fp,0(sp)
10011138:	dec00204 	addi	sp,sp,8
1001113c:	f800283a 	ret

10011140 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10011140:	defff804 	addi	sp,sp,-32
10011144:	dfc00715 	stw	ra,28(sp)
10011148:	df000615 	stw	fp,24(sp)
1001114c:	dc000515 	stw	r16,20(sp)
10011150:	df000604 	addi	fp,sp,24
10011154:	e13ffb15 	stw	r4,-20(fp)
10011158:	e17ffc15 	stw	r5,-16(fp)
1001115c:	e1bffd15 	stw	r6,-12(fp)
10011160:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10011164:	e1bffe17 	ldw	r6,-8(fp)
10011168:	e17ffd17 	ldw	r5,-12(fp)
1001116c:	e13ffc17 	ldw	r4,-16(fp)
10011170:	00113c80 	call	100113c8 <open>
10011174:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10011178:	e0bffa17 	ldw	r2,-24(fp)
1001117c:	10002216 	blt	r2,zero,10011208 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10011180:	04040074 	movhi	r16,4097
10011184:	840a4a04 	addi	r16,r16,10536
10011188:	e0bffa17 	ldw	r2,-24(fp)
1001118c:	01400304 	movi	r5,12
10011190:	1009883a 	mov	r4,r2
10011194:	00010d40 	call	100010d4 <__mulsi3>
10011198:	8085883a 	add	r2,r16,r2
1001119c:	10c00017 	ldw	r3,0(r2)
100111a0:	e0bffb17 	ldw	r2,-20(fp)
100111a4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
100111a8:	04040074 	movhi	r16,4097
100111ac:	840a4a04 	addi	r16,r16,10536
100111b0:	e0bffa17 	ldw	r2,-24(fp)
100111b4:	01400304 	movi	r5,12
100111b8:	1009883a 	mov	r4,r2
100111bc:	00010d40 	call	100010d4 <__mulsi3>
100111c0:	8085883a 	add	r2,r16,r2
100111c4:	10800104 	addi	r2,r2,4
100111c8:	10c00017 	ldw	r3,0(r2)
100111cc:	e0bffb17 	ldw	r2,-20(fp)
100111d0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
100111d4:	04040074 	movhi	r16,4097
100111d8:	840a4a04 	addi	r16,r16,10536
100111dc:	e0bffa17 	ldw	r2,-24(fp)
100111e0:	01400304 	movi	r5,12
100111e4:	1009883a 	mov	r4,r2
100111e8:	00010d40 	call	100010d4 <__mulsi3>
100111ec:	8085883a 	add	r2,r16,r2
100111f0:	10800204 	addi	r2,r2,8
100111f4:	10c00017 	ldw	r3,0(r2)
100111f8:	e0bffb17 	ldw	r2,-20(fp)
100111fc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10011200:	e13ffa17 	ldw	r4,-24(fp)
10011204:	000fe040 	call	1000fe04 <alt_release_fd>
  }
} 
10011208:	0001883a 	nop
1001120c:	e6ffff04 	addi	sp,fp,-4
10011210:	dfc00217 	ldw	ra,8(sp)
10011214:	df000117 	ldw	fp,4(sp)
10011218:	dc000017 	ldw	r16,0(sp)
1001121c:	dec00304 	addi	sp,sp,12
10011220:	f800283a 	ret

10011224 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10011224:	defffb04 	addi	sp,sp,-20
10011228:	dfc00415 	stw	ra,16(sp)
1001122c:	df000315 	stw	fp,12(sp)
10011230:	df000304 	addi	fp,sp,12
10011234:	e13ffd15 	stw	r4,-12(fp)
10011238:	e17ffe15 	stw	r5,-8(fp)
1001123c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10011240:	01c07fc4 	movi	r7,511
10011244:	01800044 	movi	r6,1
10011248:	e17ffd17 	ldw	r5,-12(fp)
1001124c:	01040074 	movhi	r4,4097
10011250:	210a4d04 	addi	r4,r4,10548
10011254:	00111400 	call	10011140 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10011258:	01c07fc4 	movi	r7,511
1001125c:	000d883a 	mov	r6,zero
10011260:	e17ffe17 	ldw	r5,-8(fp)
10011264:	01040074 	movhi	r4,4097
10011268:	210a4a04 	addi	r4,r4,10536
1001126c:	00111400 	call	10011140 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10011270:	01c07fc4 	movi	r7,511
10011274:	01800044 	movi	r6,1
10011278:	e17fff17 	ldw	r5,-4(fp)
1001127c:	01040074 	movhi	r4,4097
10011280:	210a5004 	addi	r4,r4,10560
10011284:	00111400 	call	10011140 <alt_open_fd>
}  
10011288:	0001883a 	nop
1001128c:	e037883a 	mov	sp,fp
10011290:	dfc00117 	ldw	ra,4(sp)
10011294:	df000017 	ldw	fp,0(sp)
10011298:	dec00204 	addi	sp,sp,8
1001129c:	f800283a 	ret

100112a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100112a0:	defffe04 	addi	sp,sp,-8
100112a4:	dfc00115 	stw	ra,4(sp)
100112a8:	df000015 	stw	fp,0(sp)
100112ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100112b0:	d0a00e17 	ldw	r2,-32712(gp)
100112b4:	10000326 	beq	r2,zero,100112c4 <alt_get_errno+0x24>
100112b8:	d0a00e17 	ldw	r2,-32712(gp)
100112bc:	103ee83a 	callr	r2
100112c0:	00000106 	br	100112c8 <alt_get_errno+0x28>
100112c4:	d0a6d204 	addi	r2,gp,-25784
}
100112c8:	e037883a 	mov	sp,fp
100112cc:	dfc00117 	ldw	ra,4(sp)
100112d0:	df000017 	ldw	fp,0(sp)
100112d4:	dec00204 	addi	sp,sp,8
100112d8:	f800283a 	ret

100112dc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
100112dc:	defffb04 	addi	sp,sp,-20
100112e0:	dfc00415 	stw	ra,16(sp)
100112e4:	df000315 	stw	fp,12(sp)
100112e8:	dc000215 	stw	r16,8(sp)
100112ec:	df000304 	addi	fp,sp,12
100112f0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
100112f4:	e0bffe17 	ldw	r2,-8(fp)
100112f8:	10800217 	ldw	r2,8(r2)
100112fc:	10d00034 	orhi	r3,r2,16384
10011300:	e0bffe17 	ldw	r2,-8(fp)
10011304:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10011308:	e03ffd15 	stw	zero,-12(fp)
1001130c:	00002306 	br	1001139c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10011310:	04040074 	movhi	r16,4097
10011314:	840a4a04 	addi	r16,r16,10536
10011318:	e0bffd17 	ldw	r2,-12(fp)
1001131c:	01400304 	movi	r5,12
10011320:	1009883a 	mov	r4,r2
10011324:	00010d40 	call	100010d4 <__mulsi3>
10011328:	8085883a 	add	r2,r16,r2
1001132c:	10c00017 	ldw	r3,0(r2)
10011330:	e0bffe17 	ldw	r2,-8(fp)
10011334:	10800017 	ldw	r2,0(r2)
10011338:	1880151e 	bne	r3,r2,10011390 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1001133c:	04040074 	movhi	r16,4097
10011340:	840a4a04 	addi	r16,r16,10536
10011344:	e0bffd17 	ldw	r2,-12(fp)
10011348:	01400304 	movi	r5,12
1001134c:	1009883a 	mov	r4,r2
10011350:	00010d40 	call	100010d4 <__mulsi3>
10011354:	8085883a 	add	r2,r16,r2
10011358:	10800204 	addi	r2,r2,8
1001135c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10011360:	10000b0e 	bge	r2,zero,10011390 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10011364:	01400304 	movi	r5,12
10011368:	e13ffd17 	ldw	r4,-12(fp)
1001136c:	00010d40 	call	100010d4 <__mulsi3>
10011370:	1007883a 	mov	r3,r2
10011374:	00840074 	movhi	r2,4097
10011378:	108a4a04 	addi	r2,r2,10536
1001137c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10011380:	e0bffe17 	ldw	r2,-8(fp)
10011384:	18800226 	beq	r3,r2,10011390 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10011388:	00bffcc4 	movi	r2,-13
1001138c:	00000806 	br	100113b0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10011390:	e0bffd17 	ldw	r2,-12(fp)
10011394:	10800044 	addi	r2,r2,1
10011398:	e0bffd15 	stw	r2,-12(fp)
1001139c:	d0a00d17 	ldw	r2,-32716(gp)
100113a0:	1007883a 	mov	r3,r2
100113a4:	e0bffd17 	ldw	r2,-12(fp)
100113a8:	18bfd92e 	bgeu	r3,r2,10011310 <__alt_data_end+0xf8011310>
    }
  }
  
  /* The device is not locked */
 
  return 0;
100113ac:	0005883a 	mov	r2,zero
}
100113b0:	e6ffff04 	addi	sp,fp,-4
100113b4:	dfc00217 	ldw	ra,8(sp)
100113b8:	df000117 	ldw	fp,4(sp)
100113bc:	dc000017 	ldw	r16,0(sp)
100113c0:	dec00304 	addi	sp,sp,12
100113c4:	f800283a 	ret

100113c8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
100113c8:	defff604 	addi	sp,sp,-40
100113cc:	dfc00915 	stw	ra,36(sp)
100113d0:	df000815 	stw	fp,32(sp)
100113d4:	df000804 	addi	fp,sp,32
100113d8:	e13ffd15 	stw	r4,-12(fp)
100113dc:	e17ffe15 	stw	r5,-8(fp)
100113e0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
100113e4:	00bfffc4 	movi	r2,-1
100113e8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
100113ec:	00bffb44 	movi	r2,-19
100113f0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
100113f4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
100113f8:	d1600b04 	addi	r5,gp,-32724
100113fc:	e13ffd17 	ldw	r4,-12(fp)
10011400:	00116ec0 	call	100116ec <alt_find_dev>
10011404:	e0bff815 	stw	r2,-32(fp)
10011408:	e0bff817 	ldw	r2,-32(fp)
1001140c:	1000051e 	bne	r2,zero,10011424 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10011410:	e13ffd17 	ldw	r4,-12(fp)
10011414:	001177c0 	call	1001177c <alt_find_file>
10011418:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1001141c:	00800044 	movi	r2,1
10011420:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10011424:	e0bff817 	ldw	r2,-32(fp)
10011428:	10002b26 	beq	r2,zero,100114d8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
1001142c:	e13ff817 	ldw	r4,-32(fp)
10011430:	00118840 	call	10011884 <alt_get_fd>
10011434:	e0bff915 	stw	r2,-28(fp)
10011438:	e0bff917 	ldw	r2,-28(fp)
1001143c:	1000030e 	bge	r2,zero,1001144c <open+0x84>
    {
      status = index;
10011440:	e0bff917 	ldw	r2,-28(fp)
10011444:	e0bffa15 	stw	r2,-24(fp)
10011448:	00002506 	br	100114e0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
1001144c:	01400304 	movi	r5,12
10011450:	e13ff917 	ldw	r4,-28(fp)
10011454:	00010d40 	call	100010d4 <__mulsi3>
10011458:	1007883a 	mov	r3,r2
1001145c:	00840074 	movhi	r2,4097
10011460:	108a4a04 	addi	r2,r2,10536
10011464:	1885883a 	add	r2,r3,r2
10011468:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1001146c:	e0fffe17 	ldw	r3,-8(fp)
10011470:	00900034 	movhi	r2,16384
10011474:	10bfffc4 	addi	r2,r2,-1
10011478:	1886703a 	and	r3,r3,r2
1001147c:	e0bffc17 	ldw	r2,-16(fp)
10011480:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10011484:	e0bffb17 	ldw	r2,-20(fp)
10011488:	1000051e 	bne	r2,zero,100114a0 <open+0xd8>
1001148c:	e13ffc17 	ldw	r4,-16(fp)
10011490:	00112dc0 	call	100112dc <alt_file_locked>
10011494:	e0bffa15 	stw	r2,-24(fp)
10011498:	e0bffa17 	ldw	r2,-24(fp)
1001149c:	10001016 	blt	r2,zero,100114e0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
100114a0:	e0bff817 	ldw	r2,-32(fp)
100114a4:	10800317 	ldw	r2,12(r2)
100114a8:	10000826 	beq	r2,zero,100114cc <open+0x104>
100114ac:	e0bff817 	ldw	r2,-32(fp)
100114b0:	10800317 	ldw	r2,12(r2)
100114b4:	e1ffff17 	ldw	r7,-4(fp)
100114b8:	e1bffe17 	ldw	r6,-8(fp)
100114bc:	e17ffd17 	ldw	r5,-12(fp)
100114c0:	e13ffc17 	ldw	r4,-16(fp)
100114c4:	103ee83a 	callr	r2
100114c8:	00000106 	br	100114d0 <open+0x108>
100114cc:	0005883a 	mov	r2,zero
100114d0:	e0bffa15 	stw	r2,-24(fp)
100114d4:	00000206 	br	100114e0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
100114d8:	00bffb44 	movi	r2,-19
100114dc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
100114e0:	e0bffa17 	ldw	r2,-24(fp)
100114e4:	1000090e 	bge	r2,zero,1001150c <open+0x144>
  {
    alt_release_fd (index);  
100114e8:	e13ff917 	ldw	r4,-28(fp)
100114ec:	000fe040 	call	1000fe04 <alt_release_fd>
    ALT_ERRNO = -status;
100114f0:	00112a00 	call	100112a0 <alt_get_errno>
100114f4:	1007883a 	mov	r3,r2
100114f8:	e0bffa17 	ldw	r2,-24(fp)
100114fc:	0085c83a 	sub	r2,zero,r2
10011500:	18800015 	stw	r2,0(r3)
    return -1;
10011504:	00bfffc4 	movi	r2,-1
10011508:	00000106 	br	10011510 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
1001150c:	e0bff917 	ldw	r2,-28(fp)
}
10011510:	e037883a 	mov	sp,fp
10011514:	dfc00117 	ldw	ra,4(sp)
10011518:	df000017 	ldw	fp,0(sp)
1001151c:	dec00204 	addi	sp,sp,8
10011520:	f800283a 	ret

10011524 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10011524:	defffa04 	addi	sp,sp,-24
10011528:	df000515 	stw	fp,20(sp)
1001152c:	df000504 	addi	fp,sp,20
10011530:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011534:	0005303a 	rdctl	r2,status
10011538:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001153c:	e0fffc17 	ldw	r3,-16(fp)
10011540:	00bfff84 	movi	r2,-2
10011544:	1884703a 	and	r2,r3,r2
10011548:	1001703a 	wrctl	status,r2
  
  return context;
1001154c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10011550:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10011554:	e0bfff17 	ldw	r2,-4(fp)
10011558:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1001155c:	e0bffd17 	ldw	r2,-12(fp)
10011560:	10800017 	ldw	r2,0(r2)
10011564:	e0fffd17 	ldw	r3,-12(fp)
10011568:	18c00117 	ldw	r3,4(r3)
1001156c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10011570:	e0bffd17 	ldw	r2,-12(fp)
10011574:	10800117 	ldw	r2,4(r2)
10011578:	e0fffd17 	ldw	r3,-12(fp)
1001157c:	18c00017 	ldw	r3,0(r3)
10011580:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10011584:	e0bffd17 	ldw	r2,-12(fp)
10011588:	e0fffd17 	ldw	r3,-12(fp)
1001158c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10011590:	e0bffd17 	ldw	r2,-12(fp)
10011594:	e0fffd17 	ldw	r3,-12(fp)
10011598:	10c00015 	stw	r3,0(r2)
1001159c:	e0bffb17 	ldw	r2,-20(fp)
100115a0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100115a4:	e0bffe17 	ldw	r2,-8(fp)
100115a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
100115ac:	0001883a 	nop
100115b0:	e037883a 	mov	sp,fp
100115b4:	df000017 	ldw	fp,0(sp)
100115b8:	dec00104 	addi	sp,sp,4
100115bc:	f800283a 	ret

100115c0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
100115c0:	defffb04 	addi	sp,sp,-20
100115c4:	dfc00415 	stw	ra,16(sp)
100115c8:	df000315 	stw	fp,12(sp)
100115cc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
100115d0:	d0a01117 	ldw	r2,-32700(gp)
100115d4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
100115d8:	d0a6de17 	ldw	r2,-25736(gp)
100115dc:	10800044 	addi	r2,r2,1
100115e0:	d0a6de15 	stw	r2,-25736(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100115e4:	00002e06 	br	100116a0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
100115e8:	e0bffd17 	ldw	r2,-12(fp)
100115ec:	10800017 	ldw	r2,0(r2)
100115f0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
100115f4:	e0bffd17 	ldw	r2,-12(fp)
100115f8:	10800403 	ldbu	r2,16(r2)
100115fc:	10803fcc 	andi	r2,r2,255
10011600:	10000426 	beq	r2,zero,10011614 <alt_tick+0x54>
10011604:	d0a6de17 	ldw	r2,-25736(gp)
10011608:	1000021e 	bne	r2,zero,10011614 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1001160c:	e0bffd17 	ldw	r2,-12(fp)
10011610:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10011614:	e0bffd17 	ldw	r2,-12(fp)
10011618:	10800217 	ldw	r2,8(r2)
1001161c:	d0e6de17 	ldw	r3,-25736(gp)
10011620:	18801d36 	bltu	r3,r2,10011698 <alt_tick+0xd8>
10011624:	e0bffd17 	ldw	r2,-12(fp)
10011628:	10800403 	ldbu	r2,16(r2)
1001162c:	10803fcc 	andi	r2,r2,255
10011630:	1000191e 	bne	r2,zero,10011698 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10011634:	e0bffd17 	ldw	r2,-12(fp)
10011638:	10800317 	ldw	r2,12(r2)
1001163c:	e0fffd17 	ldw	r3,-12(fp)
10011640:	18c00517 	ldw	r3,20(r3)
10011644:	1809883a 	mov	r4,r3
10011648:	103ee83a 	callr	r2
1001164c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10011650:	e0bfff17 	ldw	r2,-4(fp)
10011654:	1000031e 	bne	r2,zero,10011664 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10011658:	e13ffd17 	ldw	r4,-12(fp)
1001165c:	00115240 	call	10011524 <alt_alarm_stop>
10011660:	00000d06 	br	10011698 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10011664:	e0bffd17 	ldw	r2,-12(fp)
10011668:	10c00217 	ldw	r3,8(r2)
1001166c:	e0bfff17 	ldw	r2,-4(fp)
10011670:	1887883a 	add	r3,r3,r2
10011674:	e0bffd17 	ldw	r2,-12(fp)
10011678:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1001167c:	e0bffd17 	ldw	r2,-12(fp)
10011680:	10c00217 	ldw	r3,8(r2)
10011684:	d0a6de17 	ldw	r2,-25736(gp)
10011688:	1880032e 	bgeu	r3,r2,10011698 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1001168c:	e0bffd17 	ldw	r2,-12(fp)
10011690:	00c00044 	movi	r3,1
10011694:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10011698:	e0bffe17 	ldw	r2,-8(fp)
1001169c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100116a0:	e0fffd17 	ldw	r3,-12(fp)
100116a4:	d0a01104 	addi	r2,gp,-32700
100116a8:	18bfcf1e 	bne	r3,r2,100115e8 <__alt_data_end+0xf80115e8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
100116ac:	0001883a 	nop
}
100116b0:	0001883a 	nop
100116b4:	e037883a 	mov	sp,fp
100116b8:	dfc00117 	ldw	ra,4(sp)
100116bc:	df000017 	ldw	fp,0(sp)
100116c0:	dec00204 	addi	sp,sp,8
100116c4:	f800283a 	ret

100116c8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
100116c8:	deffff04 	addi	sp,sp,-4
100116cc:	df000015 	stw	fp,0(sp)
100116d0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
100116d4:	000170fa 	wrctl	ienable,zero
}
100116d8:	0001883a 	nop
100116dc:	e037883a 	mov	sp,fp
100116e0:	df000017 	ldw	fp,0(sp)
100116e4:	dec00104 	addi	sp,sp,4
100116e8:	f800283a 	ret

100116ec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
100116ec:	defffa04 	addi	sp,sp,-24
100116f0:	dfc00515 	stw	ra,20(sp)
100116f4:	df000415 	stw	fp,16(sp)
100116f8:	df000404 	addi	fp,sp,16
100116fc:	e13ffe15 	stw	r4,-8(fp)
10011700:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10011704:	e0bfff17 	ldw	r2,-4(fp)
10011708:	10800017 	ldw	r2,0(r2)
1001170c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10011710:	e13ffe17 	ldw	r4,-8(fp)
10011714:	00041000 	call	10004100 <strlen>
10011718:	10800044 	addi	r2,r2,1
1001171c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10011720:	00000d06 	br	10011758 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10011724:	e0bffc17 	ldw	r2,-16(fp)
10011728:	10800217 	ldw	r2,8(r2)
1001172c:	e0fffd17 	ldw	r3,-12(fp)
10011730:	180d883a 	mov	r6,r3
10011734:	e17ffe17 	ldw	r5,-8(fp)
10011738:	1009883a 	mov	r4,r2
1001173c:	00119f80 	call	100119f8 <memcmp>
10011740:	1000021e 	bne	r2,zero,1001174c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10011744:	e0bffc17 	ldw	r2,-16(fp)
10011748:	00000706 	br	10011768 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1001174c:	e0bffc17 	ldw	r2,-16(fp)
10011750:	10800017 	ldw	r2,0(r2)
10011754:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10011758:	e0fffc17 	ldw	r3,-16(fp)
1001175c:	e0bfff17 	ldw	r2,-4(fp)
10011760:	18bff01e 	bne	r3,r2,10011724 <__alt_data_end+0xf8011724>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10011764:	0005883a 	mov	r2,zero
}
10011768:	e037883a 	mov	sp,fp
1001176c:	dfc00117 	ldw	ra,4(sp)
10011770:	df000017 	ldw	fp,0(sp)
10011774:	dec00204 	addi	sp,sp,8
10011778:	f800283a 	ret

1001177c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1001177c:	defffb04 	addi	sp,sp,-20
10011780:	dfc00415 	stw	ra,16(sp)
10011784:	df000315 	stw	fp,12(sp)
10011788:	df000304 	addi	fp,sp,12
1001178c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10011790:	d0a00917 	ldw	r2,-32732(gp)
10011794:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10011798:	00003106 	br	10011860 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
1001179c:	e0bffd17 	ldw	r2,-12(fp)
100117a0:	10800217 	ldw	r2,8(r2)
100117a4:	1009883a 	mov	r4,r2
100117a8:	00041000 	call	10004100 <strlen>
100117ac:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
100117b0:	e0bffd17 	ldw	r2,-12(fp)
100117b4:	10c00217 	ldw	r3,8(r2)
100117b8:	e0bffe17 	ldw	r2,-8(fp)
100117bc:	10bfffc4 	addi	r2,r2,-1
100117c0:	1885883a 	add	r2,r3,r2
100117c4:	10800003 	ldbu	r2,0(r2)
100117c8:	10803fcc 	andi	r2,r2,255
100117cc:	1080201c 	xori	r2,r2,128
100117d0:	10bfe004 	addi	r2,r2,-128
100117d4:	10800bd8 	cmpnei	r2,r2,47
100117d8:	1000031e 	bne	r2,zero,100117e8 <alt_find_file+0x6c>
    {
      len -= 1;
100117dc:	e0bffe17 	ldw	r2,-8(fp)
100117e0:	10bfffc4 	addi	r2,r2,-1
100117e4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100117e8:	e0bffe17 	ldw	r2,-8(fp)
100117ec:	e0ffff17 	ldw	r3,-4(fp)
100117f0:	1885883a 	add	r2,r3,r2
100117f4:	10800003 	ldbu	r2,0(r2)
100117f8:	10803fcc 	andi	r2,r2,255
100117fc:	1080201c 	xori	r2,r2,128
10011800:	10bfe004 	addi	r2,r2,-128
10011804:	10800be0 	cmpeqi	r2,r2,47
10011808:	1000081e 	bne	r2,zero,1001182c <alt_find_file+0xb0>
1001180c:	e0bffe17 	ldw	r2,-8(fp)
10011810:	e0ffff17 	ldw	r3,-4(fp)
10011814:	1885883a 	add	r2,r3,r2
10011818:	10800003 	ldbu	r2,0(r2)
1001181c:	10803fcc 	andi	r2,r2,255
10011820:	1080201c 	xori	r2,r2,128
10011824:	10bfe004 	addi	r2,r2,-128
10011828:	10000a1e 	bne	r2,zero,10011854 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
1001182c:	e0bffd17 	ldw	r2,-12(fp)
10011830:	10800217 	ldw	r2,8(r2)
10011834:	e0fffe17 	ldw	r3,-8(fp)
10011838:	180d883a 	mov	r6,r3
1001183c:	e17fff17 	ldw	r5,-4(fp)
10011840:	1009883a 	mov	r4,r2
10011844:	00119f80 	call	100119f8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10011848:	1000021e 	bne	r2,zero,10011854 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1001184c:	e0bffd17 	ldw	r2,-12(fp)
10011850:	00000706 	br	10011870 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10011854:	e0bffd17 	ldw	r2,-12(fp)
10011858:	10800017 	ldw	r2,0(r2)
1001185c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10011860:	e0fffd17 	ldw	r3,-12(fp)
10011864:	d0a00904 	addi	r2,gp,-32732
10011868:	18bfcc1e 	bne	r3,r2,1001179c <__alt_data_end+0xf801179c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1001186c:	0005883a 	mov	r2,zero
}
10011870:	e037883a 	mov	sp,fp
10011874:	dfc00117 	ldw	ra,4(sp)
10011878:	df000017 	ldw	fp,0(sp)
1001187c:	dec00204 	addi	sp,sp,8
10011880:	f800283a 	ret

10011884 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10011884:	defffa04 	addi	sp,sp,-24
10011888:	dfc00515 	stw	ra,20(sp)
1001188c:	df000415 	stw	fp,16(sp)
10011890:	dc000315 	stw	r16,12(sp)
10011894:	df000404 	addi	fp,sp,16
10011898:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
1001189c:	00bffa04 	movi	r2,-24
100118a0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100118a4:	e03ffc15 	stw	zero,-16(fp)
100118a8:	00001d06 	br	10011920 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
100118ac:	04040074 	movhi	r16,4097
100118b0:	840a4a04 	addi	r16,r16,10536
100118b4:	e0bffc17 	ldw	r2,-16(fp)
100118b8:	01400304 	movi	r5,12
100118bc:	1009883a 	mov	r4,r2
100118c0:	00010d40 	call	100010d4 <__mulsi3>
100118c4:	8085883a 	add	r2,r16,r2
100118c8:	10800017 	ldw	r2,0(r2)
100118cc:	1000111e 	bne	r2,zero,10011914 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
100118d0:	04040074 	movhi	r16,4097
100118d4:	840a4a04 	addi	r16,r16,10536
100118d8:	e0bffc17 	ldw	r2,-16(fp)
100118dc:	01400304 	movi	r5,12
100118e0:	1009883a 	mov	r4,r2
100118e4:	00010d40 	call	100010d4 <__mulsi3>
100118e8:	8085883a 	add	r2,r16,r2
100118ec:	e0fffe17 	ldw	r3,-8(fp)
100118f0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
100118f4:	d0e00d17 	ldw	r3,-32716(gp)
100118f8:	e0bffc17 	ldw	r2,-16(fp)
100118fc:	1880020e 	bge	r3,r2,10011908 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
10011900:	e0bffc17 	ldw	r2,-16(fp)
10011904:	d0a00d15 	stw	r2,-32716(gp)
      }
      rc = i;
10011908:	e0bffc17 	ldw	r2,-16(fp)
1001190c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10011910:	00000606 	br	1001192c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10011914:	e0bffc17 	ldw	r2,-16(fp)
10011918:	10800044 	addi	r2,r2,1
1001191c:	e0bffc15 	stw	r2,-16(fp)
10011920:	e0bffc17 	ldw	r2,-16(fp)
10011924:	10800810 	cmplti	r2,r2,32
10011928:	103fe01e 	bne	r2,zero,100118ac <__alt_data_end+0xf80118ac>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
1001192c:	e0bffd17 	ldw	r2,-12(fp)
}
10011930:	e6ffff04 	addi	sp,fp,-4
10011934:	dfc00217 	ldw	ra,8(sp)
10011938:	df000117 	ldw	fp,4(sp)
1001193c:	dc000017 	ldw	r16,0(sp)
10011940:	dec00304 	addi	sp,sp,12
10011944:	f800283a 	ret

10011948 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10011948:	defffe04 	addi	sp,sp,-8
1001194c:	df000115 	stw	fp,4(sp)
10011950:	df000104 	addi	fp,sp,4
10011954:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10011958:	e0bfff17 	ldw	r2,-4(fp)
1001195c:	10bffe84 	addi	r2,r2,-6
10011960:	10c00428 	cmpgeui	r3,r2,16
10011964:	18001a1e 	bne	r3,zero,100119d0 <alt_exception_cause_generated_bad_addr+0x88>
10011968:	100690ba 	slli	r3,r2,2
1001196c:	00840074 	movhi	r2,4097
10011970:	10866004 	addi	r2,r2,6528
10011974:	1885883a 	add	r2,r3,r2
10011978:	10800017 	ldw	r2,0(r2)
1001197c:	1000683a 	jmp	r2
10011980:	100119c0 	call	1100119c <_gp+0xfe5694>
10011984:	100119c0 	call	1100119c <_gp+0xfe5694>
10011988:	100119d0 	cmplti	zero,r2,1127
1001198c:	100119d0 	cmplti	zero,r2,1127
10011990:	100119d0 	cmplti	zero,r2,1127
10011994:	100119c0 	call	1100119c <_gp+0xfe5694>
10011998:	100119c8 	cmpgei	zero,r2,1127
1001199c:	100119d0 	cmplti	zero,r2,1127
100119a0:	100119c0 	call	1100119c <_gp+0xfe5694>
100119a4:	100119c0 	call	1100119c <_gp+0xfe5694>
100119a8:	100119d0 	cmplti	zero,r2,1127
100119ac:	100119c0 	call	1100119c <_gp+0xfe5694>
100119b0:	100119c8 	cmpgei	zero,r2,1127
100119b4:	100119d0 	cmplti	zero,r2,1127
100119b8:	100119d0 	cmplti	zero,r2,1127
100119bc:	100119c0 	call	1100119c <_gp+0xfe5694>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
100119c0:	00800044 	movi	r2,1
100119c4:	00000306 	br	100119d4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
100119c8:	0005883a 	mov	r2,zero
100119cc:	00000106 	br	100119d4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
100119d0:	0005883a 	mov	r2,zero
  }
}
100119d4:	e037883a 	mov	sp,fp
100119d8:	df000017 	ldw	fp,0(sp)
100119dc:	dec00104 	addi	sp,sp,4
100119e0:	f800283a 	ret

100119e4 <atexit>:
100119e4:	200b883a 	mov	r5,r4
100119e8:	000f883a 	mov	r7,zero
100119ec:	000d883a 	mov	r6,zero
100119f0:	0009883a 	mov	r4,zero
100119f4:	0011a741 	jmpi	10011a74 <__register_exitproc>

100119f8 <memcmp>:
100119f8:	01c000c4 	movi	r7,3
100119fc:	3980192e 	bgeu	r7,r6,10011a64 <memcmp+0x6c>
10011a00:	2144b03a 	or	r2,r4,r5
10011a04:	11c4703a 	and	r2,r2,r7
10011a08:	10000f26 	beq	r2,zero,10011a48 <memcmp+0x50>
10011a0c:	20800003 	ldbu	r2,0(r4)
10011a10:	28c00003 	ldbu	r3,0(r5)
10011a14:	10c0151e 	bne	r2,r3,10011a6c <memcmp+0x74>
10011a18:	31bfff84 	addi	r6,r6,-2
10011a1c:	01ffffc4 	movi	r7,-1
10011a20:	00000406 	br	10011a34 <memcmp+0x3c>
10011a24:	20800003 	ldbu	r2,0(r4)
10011a28:	28c00003 	ldbu	r3,0(r5)
10011a2c:	31bfffc4 	addi	r6,r6,-1
10011a30:	10c00e1e 	bne	r2,r3,10011a6c <memcmp+0x74>
10011a34:	21000044 	addi	r4,r4,1
10011a38:	29400044 	addi	r5,r5,1
10011a3c:	31fff91e 	bne	r6,r7,10011a24 <__alt_data_end+0xf8011a24>
10011a40:	0005883a 	mov	r2,zero
10011a44:	f800283a 	ret
10011a48:	20c00017 	ldw	r3,0(r4)
10011a4c:	28800017 	ldw	r2,0(r5)
10011a50:	18bfee1e 	bne	r3,r2,10011a0c <__alt_data_end+0xf8011a0c>
10011a54:	31bfff04 	addi	r6,r6,-4
10011a58:	21000104 	addi	r4,r4,4
10011a5c:	29400104 	addi	r5,r5,4
10011a60:	39bff936 	bltu	r7,r6,10011a48 <__alt_data_end+0xf8011a48>
10011a64:	303fe91e 	bne	r6,zero,10011a0c <__alt_data_end+0xf8011a0c>
10011a68:	003ff506 	br	10011a40 <__alt_data_end+0xf8011a40>
10011a6c:	10c5c83a 	sub	r2,r2,r3
10011a70:	f800283a 	ret

10011a74 <__register_exitproc>:
10011a74:	defffa04 	addi	sp,sp,-24
10011a78:	dc000315 	stw	r16,12(sp)
10011a7c:	04040074 	movhi	r16,4097
10011a80:	840ec504 	addi	r16,r16,15124
10011a84:	80c00017 	ldw	r3,0(r16)
10011a88:	dc400415 	stw	r17,16(sp)
10011a8c:	dfc00515 	stw	ra,20(sp)
10011a90:	18805217 	ldw	r2,328(r3)
10011a94:	2023883a 	mov	r17,r4
10011a98:	10003726 	beq	r2,zero,10011b78 <__register_exitproc+0x104>
10011a9c:	10c00117 	ldw	r3,4(r2)
10011aa0:	010007c4 	movi	r4,31
10011aa4:	20c00e16 	blt	r4,r3,10011ae0 <__register_exitproc+0x6c>
10011aa8:	1a000044 	addi	r8,r3,1
10011aac:	8800221e 	bne	r17,zero,10011b38 <__register_exitproc+0xc4>
10011ab0:	18c00084 	addi	r3,r3,2
10011ab4:	18c7883a 	add	r3,r3,r3
10011ab8:	18c7883a 	add	r3,r3,r3
10011abc:	12000115 	stw	r8,4(r2)
10011ac0:	10c7883a 	add	r3,r2,r3
10011ac4:	19400015 	stw	r5,0(r3)
10011ac8:	0005883a 	mov	r2,zero
10011acc:	dfc00517 	ldw	ra,20(sp)
10011ad0:	dc400417 	ldw	r17,16(sp)
10011ad4:	dc000317 	ldw	r16,12(sp)
10011ad8:	dec00604 	addi	sp,sp,24
10011adc:	f800283a 	ret
10011ae0:	00840034 	movhi	r2,4096
10011ae4:	108ade04 	addi	r2,r2,11128
10011ae8:	10002626 	beq	r2,zero,10011b84 <__register_exitproc+0x110>
10011aec:	01006404 	movi	r4,400
10011af0:	d9400015 	stw	r5,0(sp)
10011af4:	d9800115 	stw	r6,4(sp)
10011af8:	d9c00215 	stw	r7,8(sp)
10011afc:	0002b780 	call	10002b78 <malloc>
10011b00:	d9400017 	ldw	r5,0(sp)
10011b04:	d9800117 	ldw	r6,4(sp)
10011b08:	d9c00217 	ldw	r7,8(sp)
10011b0c:	10001d26 	beq	r2,zero,10011b84 <__register_exitproc+0x110>
10011b10:	81000017 	ldw	r4,0(r16)
10011b14:	10000115 	stw	zero,4(r2)
10011b18:	02000044 	movi	r8,1
10011b1c:	22405217 	ldw	r9,328(r4)
10011b20:	0007883a 	mov	r3,zero
10011b24:	12400015 	stw	r9,0(r2)
10011b28:	20805215 	stw	r2,328(r4)
10011b2c:	10006215 	stw	zero,392(r2)
10011b30:	10006315 	stw	zero,396(r2)
10011b34:	883fde26 	beq	r17,zero,10011ab0 <__alt_data_end+0xf8011ab0>
10011b38:	18c9883a 	add	r4,r3,r3
10011b3c:	2109883a 	add	r4,r4,r4
10011b40:	1109883a 	add	r4,r2,r4
10011b44:	21802215 	stw	r6,136(r4)
10011b48:	01800044 	movi	r6,1
10011b4c:	12406217 	ldw	r9,392(r2)
10011b50:	30cc983a 	sll	r6,r6,r3
10011b54:	4992b03a 	or	r9,r9,r6
10011b58:	12406215 	stw	r9,392(r2)
10011b5c:	21c04215 	stw	r7,264(r4)
10011b60:	01000084 	movi	r4,2
10011b64:	893fd21e 	bne	r17,r4,10011ab0 <__alt_data_end+0xf8011ab0>
10011b68:	11006317 	ldw	r4,396(r2)
10011b6c:	218cb03a 	or	r6,r4,r6
10011b70:	11806315 	stw	r6,396(r2)
10011b74:	003fce06 	br	10011ab0 <__alt_data_end+0xf8011ab0>
10011b78:	18805304 	addi	r2,r3,332
10011b7c:	18805215 	stw	r2,328(r3)
10011b80:	003fc606 	br	10011a9c <__alt_data_end+0xf8011a9c>
10011b84:	00bfffc4 	movi	r2,-1
10011b88:	003fd006 	br	10011acc <__alt_data_end+0xf8011acc>
