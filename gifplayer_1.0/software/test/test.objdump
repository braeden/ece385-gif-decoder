
test.elf:     file format elf32-littlenios2
test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x0001054c memsz 0x0001054c flags r-x
    LOAD off    0x0001156c vaddr 0x1001056c paddr 0x10012064 align 2**12
         filesz 0x00001af8 memsz 0x00001af8 flags rw-
    LOAD off    0x00013b5c vaddr 0x10013b5c paddr 0x10013b5c align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000ff60  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003dc  10010190  10010190  00011190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af8  1001056c  10012064  0001156c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  10013b5c  10013b5c  00013b5c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00013064  2**0
                  CONTENTS
  7 .sdram        00000000  10013cc0  10013cc0  00013064  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00013064  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001018  00000000  00000000  00013088  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00027538  00000000  00000000  000140a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009e86  00000000  00000000  0003b5d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c380  00000000  00000000  0004545e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000023c4  00000000  00000000  000517e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003cef  00000000  00000000  00053ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000181d6  00000000  00000000  00057893  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0006fa6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001a00  00000000  00000000  0006fa80  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000748c2  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000748c5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000748d1  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000748d2  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000748d3  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000748d7  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000748db  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000748df  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000748ea  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000748f5  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000d  00000000  00000000  00074900  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000034  00000000  00000000  0007490d  2**0
                  CONTENTS, READONLY
 30 .jdi          00005803  00000000  00000000  00074941  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00054ea2  00000000  00000000  0007a144  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
10010190 l    d  .rodata	00000000 .rodata
1001056c l    d  .rwdata	00000000 .rwdata
10013b5c l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10013cc0 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
10012018 l     O .rwdata	00000003 VALID_HEADER
1001201c l     O .rwdata	00000005 __func__.3231
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10000ad4 l     F .text	00000008 __fp_unlock
10000ae8 l     F .text	0000019c __sinit.part.1
10000c84 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
1001056c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 vfprintf.c
100102b6 l     O .rodata	00000010 zeroes.4404
1000446c l     F .text	000000bc __sbprintf
100102c6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 dtoa.c
10004748 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
10010db8 l     O .rwdata	00000020 lc_ctype_charset
10010d98 l     O .rwdata	00000020 lc_message_charset
10010dd8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mprec.c
100102f4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10007b40 l     F .text	000000fc __sprint_r.part.0
10010418 l     O .rodata	00000010 zeroes.4349
1000917c l     F .text	000000bc __sbprintf
10010428 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000daac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000dbc0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000dc20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
1000dd34 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
1000de1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000df88 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000e074 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10012054 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1000e384 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000e4c0 l     F .text	00000034 alt_dev_reg
10010fb8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000e79c l     F .text	0000020c altera_avalon_jtag_uart_irq
1000e9a8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1000f12c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1000f58c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
1000f6ec l     F .text	0000003c alt_get_errno
1000f728 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
10013b94 g     O .bss	00000004 alt_instruction_exception_handler
10001fb4 g     F .text	00000018 putchar
10007314 g     F .text	00000074 _mprec_log10
10007400 g     F .text	0000008c __any_on
10009b98 g     F .text	00000054 _isatty_r
10010300 g     O .rodata	00000028 __mprec_tinytens
1000e18c g     F .text	0000007c alt_main
10013bc0 g     O .bss	00000100 alt_irq
100060d4 g     F .text	00000060 _lseek_r
10012064 g       *ABS*	00000000 __flash_rwdata_start
1000c484 g     F .text	00000088 .hidden __eqdf2
10013cc0 g       *ABS*	00000000 __alt_heap_start
1000796c g     F .text	0000005c _kill_r
10001f70 g     F .text	0000003c printf
1000a2ac g     F .text	0000009c _wcrtomb_r
10007734 g     F .text	00000084 _signal_r
100020f8 g     F .text	0000005c __sseek
10000e34 g     F .text	00000010 __sinit
10009238 g     F .text	00000140 __swbuf_r
10005ff8 g     F .text	0000007c _setlocale_r
10000c8c g     F .text	00000078 __sfmoreglue
1000e22c g     F .text	00000024 __malloc_unlock
10009bec g     F .text	0000015c memmove
10000e1c g     F .text	00000018 _cleanup
100063d4 g     F .text	000000a8 _Balloc
1000c50c g     F .text	000000dc .hidden __gtdf2
1000fb14 g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
10009674 g     F .text	0000005c _fstat_r
10013b6c g     O .bss	00000004 errno
10002074 g     F .text	00000008 __seofread
10013b80 g     O .bss	00000004 alt_argv
1001a018 g       *ABS*	00000000 _gp
1000dd14 g     F .text	00000020 getpid
10010e38 g     O .rwdata	00000180 alt_fd_list
10001fac g     F .text	00000008 _putchar_r
1000fb38 g     F .text	00000090 alt_find_dev
10001cd0 g     F .text	00000148 memcpy
10000adc g     F .text	0000000c _cleanup_r
1000d8c4 g     F .text	000000dc .hidden __floatsidf
1000f670 g     F .text	0000007c alt_io_redirect
1000c5e8 g     F .text	000000f4 .hidden __ltdf2
10010190 g       *ABS*	00000000 __DTOR_END__
1000fd94 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10007654 g     F .text	00000074 __fpclassifyd
10007270 g     F .text	000000a4 __ratio
10009160 g     F .text	0000001c __vfiprintf_internal
1000eba0 g     F .text	0000021c altera_avalon_jtag_uart_read
1000149c g     F .text	00000014 malloc
10001f40 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000b14c g     F .text	00000064 .hidden __udivsi3
1000dd70 g     F .text	000000ac isatty
100077b8 g     F .text	000000bc _raise_r
100006ac g     F .text	00000068 __assert_func
10010350 g     O .rodata	000000c8 __mprec_tens
10006074 g     F .text	0000000c __locale_charset
10013b68 g     O .bss	00000004 __malloc_top_pad
100079c8 g     F .text	00000004 _getpid_r
10012034 g     O .rwdata	00000004 __mb_cur_max
100060a4 g     F .text	0000000c _localeconv_r
100096d0 g     F .text	000004c8 __sfvwrite_r
10006808 g     F .text	0000003c __i2b
10007874 g     F .text	000000a8 __sigtramp_r
10001fcc g     F .text	00000054 _sbrk_r
100075f4 g     F .text	00000060 _read_r
1001204c g     O .rwdata	00000004 alt_max_fd
10000728 g     F .text	000000f0 _fclose_r
10000aa4 g     F .text	00000030 fflush
10013b64 g     O .bss	00000004 __malloc_max_sbrked_mem
1000b208 g     F .text	000008ac .hidden __adddf3
10007018 g     F .text	0000010c __b2d
1000aa90 g     F .text	000005c4 .hidden __umoddi3
1000e0b0 g     F .text	000000dc lseek
10012024 g     O .rwdata	00000004 _global_impure_ptr
10009d48 g     F .text	00000564 _realloc_r
10013cc0 g       *ABS*	00000000 __bss_end
1000f49c g     F .text	000000f0 alt_iic_isr_register
1000fa0c g     F .text	00000108 alt_tick
1000a494 g     F .text	000005fc .hidden __udivdi3
100095d0 g     F .text	00000024 _fputwc_r
10010328 g     O .rodata	00000028 __mprec_bigtens
100065ec g     F .text	00000104 __s2b
10004730 g     F .text	00000018 abort
1000d9a0 g     F .text	000000a8 .hidden __floatunsidf
10006d58 g     F .text	00000060 __mcmp
10000e54 g     F .text	00000018 __fp_lock_all
1000f450 g     F .text	0000004c alt_ic_irq_enabled
1000f970 g     F .text	0000009c alt_alarm_stop
10013b88 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d4 alt_irq_handler
10010e10 g     O .rwdata	00000028 alt_dev_null
100002dc g     F .text	00000028 getch
1000f10c g     F .text	00000020 alt_dcache_flush_all
100066f0 g     F .text	00000068 __hi0bits
1000d844 g     F .text	00000080 .hidden __fixdfsi
10012064 g       *ABS*	00000000 __ram_rwdata_end
10012044 g     O .rwdata	00000008 alt_dev_list
1000e3c0 g     F .text	00000100 write
1000748c g     F .text	000000a0 _putc_r
1001056c g       *ABS*	00000000 __ram_rodata_end
1000dc5c g     F .text	000000b8 fstat
1000de58 g     F .text	00000130 kill
1000c5e8 g     F .text	000000f4 .hidden __ledf2
10006ad0 g     F .text	00000140 __pow5mult
10013b78 g     O .bss	00000004 __nlocale_changed
10007c54 g     F .text	0000150c ___vfiprintf_internal_r
1000b1b0 g     F .text	00000058 .hidden __umodsi3
10013cc0 g       *ABS*	00000000 end
10013b5c g     O .bss	00000004 fileptr
1000e6dc g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
10010190 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000da48 g     F .text	00000064 .hidden __clzsi2
1000edbc g     F .text	00000224 altera_avalon_jtag_uart_write
10000e44 g     F .text	00000004 __sfp_lock_acquire
100062f0 g     F .text	000000e4 memchr
10002174 g     F .text	000022dc ___vfprintf_internal_r
10001004 g     F .text	00000310 _free_r
10006080 g     F .text	00000010 __locale_mb_cur_max
10010010 g     F .text	00000180 __call_exitprocs
10013b74 g     O .bss	00000004 __mlocale_changed
1001202c g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
10013b8c g     O .bss	00000004 _alt_tick_rate
10006c10 g     F .text	00000148 __lshift
10013b90 g     O .bss	00000004 _alt_nticks
10007930 g     F .text	00000018 signal
1000026c g     F .text	00000070 read
1000e52c g     F .text	0000004c alt_sys_init
1000fef8 g     F .text	00000118 __register_exitproc
10006844 g     F .text	0000028c __multiply
1000ea48 g     F .text	00000068 altera_avalon_jtag_uart_close
10000684 g     F .text	00000028 .hidden __mulsi3
1001056c g       *ABS*	00000000 __ram_rwdata_start
10010190 g       *ABS*	00000000 __ram_rodata_start
10013b98 g     O .bss	00000028 __malloc_current_mallinfo
10007124 g     F .text	0000014c __d2b
1000e578 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
1000fcd0 g     F .text	000000c4 alt_get_fd
100046dc g     F .text	00000054 _close_r
1000fe7c g     F .text	0000007c memcmp
1000e638 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10013cc0 g       *ABS*	00000000 __alt_stack_base
1000e688 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10004588 g     F .text	00000154 __swsetup_r
1000bab4 g     F .text	000009d0 .hidden __divdf3
10000d04 g     F .text	00000118 __sfp
10007388 g     F .text	00000078 __copybits
10010990 g     O .rwdata	00000408 __malloc_av_
10000e50 g     F .text	00000004 __sinit_lock_release
1000c6dc g     F .text	0000086c .hidden __muldf3
10002020 g     F .text	00000054 __sread
1000fbc8 g     F .text	00000108 alt_find_file
1000f168 g     F .text	000000a4 alt_dev_llist_insert
1000e208 g     F .text	00000024 __malloc_lock
1000e2d4 g     F .text	000000b0 sbrk
10000a48 g     F .text	0000005c _fflush_r
10009390 g     F .text	000000dc _calloc_r
10013b5c g       *ABS*	00000000 __bss_start
10001e18 g     F .text	00000128 memset
10000394 g     F .text	000002f0 main
10013b84 g     O .bss	00000004 alt_envp
10013b60 g     O .bss	00000004 __malloc_max_total_mem
1000e5d8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10009378 g     F .text	00000018 __swbuf
1000033c g     F .text	00000058 skipToTerm
10002154 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
10000818 g     F .text	00000014 fclose
10004970 g     F .text	00001688 _dtoa_r
100014c4 g     F .text	0000080c _malloc_r
1000a408 g     F .text	00000030 __ascii_wctomb
10012050 g     O .rwdata	00000004 alt_errno
10000e84 g     F .text	00000020 _fiprintf_r
10007948 g     F .text	00000010 _init_signal
10000304 g     F .text	00000038 seek
10001314 g     F .text	000000c4 _fwalk
1000752c g     F .text	000000c8 putc
1000b054 g     F .text	00000084 .hidden __divsi3
10000ee0 g     F .text	00000124 _malloc_trim_r
10010190 g       *ABS*	00000000 __CTOR_END__
100079cc g     F .text	000000dc strcmp
10010190 g       *ABS*	00000000 __flash_rodata_start
10010190 g       *ABS*	00000000 __DTOR_LIST__
1000c484 g     F .text	00000088 .hidden __nedf2
1000e4f4 g     F .text	00000038 alt_irq_init
1000e250 g     F .text	00000084 alt_release_fd
10010438 g     O .rodata	00000100 .hidden __clz_tab
10013b70 g     O .bss	00000004 _PathLocale
1000fe30 g     F .text	00000014 atexit
10004528 g     F .text	00000060 _write_r
100060b0 g     F .text	00000018 setlocale
10012028 g     O .rwdata	00000004 _impure_ptr
10013b7c g     O .bss	00000004 alt_argc
1000082c g     F .text	0000021c __sflush_r
1000f26c g     F .text	00000060 _do_dtors
1000609c g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
10006fb4 g     F .text	00000064 __ulp
10000e6c g     F .text	00000018 __fp_unlock_all
1001203c g     O .rwdata	00000008 alt_fs_list
10000020 g       *ABS*	00000000 __ram_exceptions_start
100060c8 g     F .text	0000000c localeconv
1000f2ec g     F .text	00000050 alt_ic_isr_register
10012064 g       *ABS*	00000000 _edata
10013cc0 g       *ABS*	00000000 _end
1000946c g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
1000eab0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
1000f3c4 g     F .text	0000008c alt_ic_irq_disable
1000207c g     F .text	0000007c __swrite
10012030 g     O .rwdata	00000004 __malloc_trim_threshold
10006090 g     F .text	0000000c __locale_msgcharset
1000fe44 g     F .text	00000038 exit
10000ea4 g     F .text	0000003c fiprintf
1000215c g     F .text	00000018 _vfiprintf_r
100013d8 g     F .text	000000c4 _fwalk_reent
10006db8 g     F .text	000001fc __mdiff
1000b0d8 g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10000e48 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
1000dbec g     F .text	00000034 _exit
1000efe0 g     F .text	0000012c alt_alarm_start
10006134 g     F .text	000001bc __smakebuf_r
10007aa8 g     F .text	00000098 strlen
100076c8 g     F .text	0000006c _init_signal_r
1000f814 g     F .text	0000015c open
1000c50c g     F .text	000000dc .hidden __gedf2
10000714 g     F .text	00000014 __assert
10012038 g     O .rwdata	00000004 __wctomb
10007c3c g     F .text	00000018 __sprint_r
1000f2cc g     F .text	00000020 alt_icache_flush_all
10012058 g     O .rwdata	00000004 alt_priority_mask
1000f33c g     F .text	00000088 alt_ic_irq_enable
10004450 g     F .text	0000001c __vfprintf_internal
1000a438 g     F .text	0000005c _wctomb_r
1000cf48 g     F .text	000008fc .hidden __subdf3
10006758 g     F .text	000000b0 __lo0bits
1001205c g     O .rwdata	00000008 alt_alarm_list
1000f20c g     F .text	00000060 _do_ctors
10007958 g     F .text	00000014 __sigtramp
1000a348 g     F .text	000000c0 wcrtomb
1000dae8 g     F .text	000000d8 close
1000dff0 g     F .text	00000084 alt_load
100095f4 g     F .text	00000080 fputwc
1000791c g     F .text	00000014 raise
100014b0 g     F .text	00000014 free
10000e4c g     F .text	00000004 __sinit_lock_acquire
100064a4 g     F .text	00000148 __multadd
1000647c g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	108ef004 	addi	r2,r2,15296
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	108ef004 	addi	r2,r2,15296
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0a6df17 	ldw	r2,-25732(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0a6df17 	ldw	r2,-25732(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
1000023c:	d6a80614 	ori	gp,gp,40984
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000244:	108ed714 	ori	r2,r2,15196

    movhi r3, %hi(__bss_end)
10000248:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
1000024c:	18cf3014 	ori	r3,r3,15552

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	000dff00 	call	1000dff0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	000e18c0 	call	1000e18c <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <read>:
// struct __packed__
//{
//	unsigned char c;
//} s1;

unsigned char* read(unsigned char * dest, int size, int segments, unsigned char * src) {
1000026c:	defffa04 	addi	sp,sp,-24
10000270:	dfc00515 	stw	ra,20(sp)
10000274:	df000415 	stw	fp,16(sp)
10000278:	df000404 	addi	fp,sp,16
1000027c:	e13ffc15 	stw	r4,-16(fp)
10000280:	e17ffd15 	stw	r5,-12(fp)
10000284:	e1bffe15 	stw	r6,-8(fp)
10000288:	e1ffff15 	stw	r7,-4(fp)
	memcpy(dest, src, size*segments);
1000028c:	e17ffe17 	ldw	r5,-8(fp)
10000290:	e13ffd17 	ldw	r4,-12(fp)
10000294:	00006840 	call	10000684 <__mulsi3>
10000298:	100d883a 	mov	r6,r2
1000029c:	e17fff17 	ldw	r5,-4(fp)
100002a0:	e13ffc17 	ldw	r4,-16(fp)
100002a4:	0001cd00 	call	10001cd0 <memcpy>
	src += size*segments;
100002a8:	e17ffe17 	ldw	r5,-8(fp)
100002ac:	e13ffd17 	ldw	r4,-12(fp)
100002b0:	00006840 	call	10000684 <__mulsi3>
100002b4:	1007883a 	mov	r3,r2
100002b8:	e0bfff17 	ldw	r2,-4(fp)
100002bc:	10c5883a 	add	r2,r2,r3
100002c0:	e0bfff15 	stw	r2,-4(fp)
	return src;
100002c4:	e0bfff17 	ldw	r2,-4(fp)
	//This might need to be passed by address
}
100002c8:	e037883a 	mov	sp,fp
100002cc:	dfc00117 	ldw	ra,4(sp)
100002d0:	df000017 	ldw	fp,0(sp)
100002d4:	dec00204 	addi	sp,sp,8
100002d8:	f800283a 	ret

100002dc <getch>:
//
unsigned char getch(unsigned char *ptr) {
100002dc:	defffe04 	addi	sp,sp,-8
100002e0:	df000115 	stw	fp,4(sp)
100002e4:	df000104 	addi	fp,sp,4
100002e8:	e13fff15 	stw	r4,-4(fp)
//	unsigned char temp = *ptr;
//	return temp;
	//Might need to increment pointer in main program
	return *fileptr;
100002ec:	d0a6d117 	ldw	r2,-25788(gp)
100002f0:	10800003 	ldbu	r2,0(r2)
}
100002f4:	e037883a 	mov	sp,fp
100002f8:	df000017 	ldw	fp,0(sp)
100002fc:	dec00104 	addi	sp,sp,4
10000300:	f800283a 	ret

10000304 <seek>:

unsigned char* seek(unsigned char *ptr, int size) {
10000304:	defffd04 	addi	sp,sp,-12
10000308:	df000215 	stw	fp,8(sp)
1000030c:	df000204 	addi	fp,sp,8
10000310:	e13ffe15 	stw	r4,-8(fp)
10000314:	e17fff15 	stw	r5,-4(fp)
	ptr += size;
10000318:	e0bfff17 	ldw	r2,-4(fp)
1000031c:	e0fffe17 	ldw	r3,-8(fp)
10000320:	1885883a 	add	r2,r3,r2
10000324:	e0bffe15 	stw	r2,-8(fp)
	return ptr;
10000328:	e0bffe17 	ldw	r2,-8(fp)
}
1000032c:	e037883a 	mov	sp,fp
10000330:	df000017 	ldw	fp,0(sp)
10000334:	dec00104 	addi	sp,sp,4
10000338:	f800283a 	ret

1000033c <skipToTerm>:

void skipToTerm() {
1000033c:	defffe04 	addi	sp,sp,-8
10000340:	dfc00115 	stw	ra,4(sp)
10000344:	df000015 	stw	fp,0(sp)
10000348:	d839883a 	mov	fp,sp
	while (getch(fileptr) != 0x00)
1000034c:	00000306 	br	1000035c <skipToTerm+0x20>
		fileptr++;
10000350:	d0a6d117 	ldw	r2,-25788(gp)
10000354:	10800044 	addi	r2,r2,1
10000358:	d0a6d115 	stw	r2,-25788(gp)
	ptr += size;
	return ptr;
}

void skipToTerm() {
	while (getch(fileptr) != 0x00)
1000035c:	d0a6d117 	ldw	r2,-25788(gp)
10000360:	1009883a 	mov	r4,r2
10000364:	00002dc0 	call	100002dc <getch>
10000368:	10803fcc 	andi	r2,r2,255
1000036c:	103ff81e 	bne	r2,zero,10000350 <__alt_data_end+0xf8000350>
		fileptr++;
		printf("skipping");
10000370:	01040074 	movhi	r4,4097
10000374:	21006404 	addi	r4,r4,400
10000378:	0001f700 	call	10001f70 <printf>
}
1000037c:	0001883a 	nop
10000380:	e037883a 	mov	sp,fp
10000384:	dfc00117 	ldw	ra,4(sp)
10000388:	df000017 	ldw	fp,0(sp)
1000038c:	dec00204 	addi	sp,sp,8
10000390:	f800283a 	ret

10000394 <main>:

int main() {
10000394:	deffee04 	addi	sp,sp,-72
10000398:	dfc01115 	stw	ra,68(sp)
1000039c:	df001015 	stw	fp,64(sp)
100003a0:	df001004 	addi	fp,sp,64
	fileptr = 0x00400002;
100003a4:	00801034 	movhi	r2,64
100003a8:	10800084 	addi	r2,r2,2
100003ac:	d0a6d115 	stw	r2,-25788(gp)

	HeaderBlock header;
	printf("%02x \n ", *fileptr);
100003b0:	d0a6d117 	ldw	r2,-25788(gp)
100003b4:	10800003 	ldbu	r2,0(r2)
100003b8:	10803fcc 	andi	r2,r2,255
100003bc:	100b883a 	mov	r5,r2
100003c0:	01040074 	movhi	r4,4097
100003c4:	21006704 	addi	r4,r4,412
100003c8:	0001f700 	call	10001f70 <printf>
	LSD descriptor;
	printf("%d \n", sizeof(descriptor));
100003cc:	014001c4 	movi	r5,7
100003d0:	01040074 	movhi	r4,4097
100003d4:	21006904 	addi	r4,r4,420
100003d8:	0001f700 	call	10001f70 <printf>

//	fread(&header, 1, sizeof(header), fileptr);
//	fread(&descriptor, 1, sizeof(descriptor), fileptr);
	fileptr = read(&header, 1, sizeof(header), fileptr);
100003dc:	d0e6d117 	ldw	r3,-25788(gp)
100003e0:	e0bff804 	addi	r2,fp,-32
100003e4:	180f883a 	mov	r7,r3
100003e8:	01800184 	movi	r6,6
100003ec:	01400044 	movi	r5,1
100003f0:	1009883a 	mov	r4,r2
100003f4:	000026c0 	call	1000026c <read>
100003f8:	d0a6d115 	stw	r2,-25788(gp)
	fileptr = read(&descriptor, 1, sizeof(descriptor), fileptr);
100003fc:	d0e6d117 	ldw	r3,-25788(gp)
10000400:	e0bff984 	addi	r2,fp,-26
10000404:	180f883a 	mov	r7,r3
10000408:	018001c4 	movi	r6,7
1000040c:	01400044 	movi	r5,1
10000410:	1009883a 	mov	r4,r2
10000414:	000026c0 	call	1000026c <read>
10000418:	d0a6d115 	stw	r2,-25788(gp)
	for (int i = 0; i < 3; i++) {
1000041c:	e03ff015 	stw	zero,-64(fp)
10000420:	00001706 	br	10000480 <main+0xec>
		assert(header.sig[i] == VALID_HEADER[i]);
10000424:	e0fff804 	addi	r3,fp,-32
10000428:	e0bff017 	ldw	r2,-64(fp)
1000042c:	1885883a 	add	r2,r3,r2
10000430:	10800003 	ldbu	r2,0(r2)
10000434:	10c03fcc 	andi	r3,r2,255
10000438:	e13ff017 	ldw	r4,-64(fp)
1000043c:	d0a00004 	addi	r2,gp,-32768
10000440:	2085883a 	add	r2,r4,r2
10000444:	10800003 	ldbu	r2,0(r2)
10000448:	10803fcc 	andi	r2,r2,255
1000044c:	1080201c 	xori	r2,r2,128
10000450:	10bfe004 	addi	r2,r2,-128
10000454:	18800726 	beq	r3,r2,10000474 <main+0xe0>
10000458:	01c40074 	movhi	r7,4097
1000045c:	39c06b04 	addi	r7,r7,428
10000460:	d1a00104 	addi	r6,gp,-32764
10000464:	01400d44 	movi	r5,53
10000468:	01040074 	movhi	r4,4097
1000046c:	21007404 	addi	r4,r4,464
10000470:	00006ac0 	call	100006ac <__assert_func>

//	fread(&header, 1, sizeof(header), fileptr);
//	fread(&descriptor, 1, sizeof(descriptor), fileptr);
	fileptr = read(&header, 1, sizeof(header), fileptr);
	fileptr = read(&descriptor, 1, sizeof(descriptor), fileptr);
	for (int i = 0; i < 3; i++) {
10000474:	e0bff017 	ldw	r2,-64(fp)
10000478:	10800044 	addi	r2,r2,1
1000047c:	e0bff015 	stw	r2,-64(fp)
10000480:	e0bff017 	ldw	r2,-64(fp)
10000484:	108000d0 	cmplti	r2,r2,3
10000488:	103fe61e 	bne	r2,zero,10000424 <__alt_data_end+0xf8000424>
		assert(header.sig[i] == VALID_HEADER[i]);
	}
	unsigned char testing = *fileptr;
1000048c:	d0a6d117 	ldw	r2,-25788(gp)
10000490:	10800003 	ldbu	r2,0(r2)
10000494:	e0bff405 	stb	r2,-48(fp)
	printf("%02x | test\n", testing);
10000498:	e0bff403 	ldbu	r2,-48(fp)
1000049c:	100b883a 	mov	r5,r2
100004a0:	01040074 	movhi	r4,4097
100004a4:	21007604 	addi	r4,r4,472
100004a8:	0001f700 	call	10001f70 <printf>
//	unsigned char *y = fileptr+1;
	fileptr++;
100004ac:	d0a6d117 	ldw	r2,-25788(gp)
100004b0:	10800044 	addi	r2,r2,1
100004b4:	d0a6d115 	stw	r2,-25788(gp)
	testing = *fileptr;
100004b8:	d0a6d117 	ldw	r2,-25788(gp)
100004bc:	10800003 	ldbu	r2,0(r2)
100004c0:	e0bff405 	stb	r2,-48(fp)
	printf("%02x | test\n", testing);
100004c4:	e0bff403 	ldbu	r2,-48(fp)
100004c8:	100b883a 	mov	r5,r2
100004cc:	01040074 	movhi	r4,4097
100004d0:	21007604 	addi	r4,r4,472
100004d4:	0001f700 	call	10001f70 <printf>
	assert(descriptor.packedField.globalColorFlag);	 //For all intents we're going to need a global table
100004d8:	e0fffa83 	ldbu	r3,-22(fp)
100004dc:	00bfe004 	movi	r2,-128
100004e0:	1884703a 	and	r2,r3,r2
100004e4:	10803fcc 	andi	r2,r2,255
100004e8:	1000071e 	bne	r2,zero,10000508 <main+0x174>
100004ec:	01c40074 	movhi	r7,4097
100004f0:	39c07a04 	addi	r7,r7,488
100004f4:	d1a00104 	addi	r6,gp,-32764
100004f8:	01400f44 	movi	r5,61
100004fc:	01040074 	movhi	r4,4097
10000500:	21007404 	addi	r4,r4,464
10000504:	00006ac0 	call	100006ac <__assert_func>

	int readlGlobalColorSize = 0x2 << descriptor.packedField.globalColorSize;  // 2^(N+1) actual colors
10000508:	e0bffa8b 	ldhu	r2,-22(fp)
1000050c:	108001cc 	andi	r2,r2,7
10000510:	10803fcc 	andi	r2,r2,255
10000514:	00c00084 	movi	r3,2
10000518:	1884983a 	sll	r2,r3,r2
1000051c:	e0bff515 	stw	r2,-44(fp)
	// printf("%d, %d\n", test, packed.actual_color_size);
	colorTableEntry *globalTable = (colorTableEntry *)
		malloc(readlGlobalColorSize * sizeof(colorTableEntry));	 // We can make this 256 for hardware
10000520:	e0fff517 	ldw	r3,-44(fp)
10000524:	1805883a 	mov	r2,r3
10000528:	1085883a 	add	r2,r2,r2
1000052c:	10c5883a 	add	r2,r2,r3
	printf("%02x | test\n", testing);
	assert(descriptor.packedField.globalColorFlag);	 //For all intents we're going to need a global table

	int readlGlobalColorSize = 0x2 << descriptor.packedField.globalColorSize;  // 2^(N+1) actual colors
	// printf("%d, %d\n", test, packed.actual_color_size);
	colorTableEntry *globalTable = (colorTableEntry *)
10000530:	1009883a 	mov	r4,r2
10000534:	000149c0 	call	1000149c <malloc>
10000538:	e0bff615 	stw	r2,-40(fp)
		malloc(readlGlobalColorSize * sizeof(colorTableEntry));	 // We can make this 256 for hardware

	//Read global color table and print it
	fileptr = read(globalTable, 3, readlGlobalColorSize, fileptr);
1000053c:	d0a6d117 	ldw	r2,-25788(gp)
10000540:	100f883a 	mov	r7,r2
10000544:	e1bff517 	ldw	r6,-44(fp)
10000548:	014000c4 	movi	r5,3
1000054c:	e13ff617 	ldw	r4,-40(fp)
10000550:	000026c0 	call	1000026c <read>
10000554:	d0a6d115 	stw	r2,-25788(gp)

	 for (int i = 0; i < readlGlobalColorSize; i++) {
10000558:	e03ff115 	stw	zero,-60(fp)
1000055c:	00001f06 	br	100005dc <main+0x248>
	 	printf("[#");
10000560:	01040074 	movhi	r4,4097
10000564:	21008404 	addi	r4,r4,528
10000568:	0001f700 	call	10001f70 <printf>
	 	for (int j = 0; j < 3; j++) {
1000056c:	e03ff215 	stw	zero,-56(fp)
10000570:	00001106 	br	100005b8 <main+0x224>
	 		printf("%02x", globalTable[i].RGB[j]);
10000574:	e0fff117 	ldw	r3,-60(fp)
10000578:	1805883a 	mov	r2,r3
1000057c:	1085883a 	add	r2,r2,r2
10000580:	10c5883a 	add	r2,r2,r3
10000584:	e0fff617 	ldw	r3,-40(fp)
10000588:	1887883a 	add	r3,r3,r2
1000058c:	e0bff217 	ldw	r2,-56(fp)
10000590:	1885883a 	add	r2,r3,r2
10000594:	10800003 	ldbu	r2,0(r2)
10000598:	10803fcc 	andi	r2,r2,255
1000059c:	100b883a 	mov	r5,r2
100005a0:	01040074 	movhi	r4,4097
100005a4:	21008504 	addi	r4,r4,532
100005a8:	0001f700 	call	10001f70 <printf>
	//Read global color table and print it
	fileptr = read(globalTable, 3, readlGlobalColorSize, fileptr);

	 for (int i = 0; i < readlGlobalColorSize; i++) {
	 	printf("[#");
	 	for (int j = 0; j < 3; j++) {
100005ac:	e0bff217 	ldw	r2,-56(fp)
100005b0:	10800044 	addi	r2,r2,1
100005b4:	e0bff215 	stw	r2,-56(fp)
100005b8:	e0bff217 	ldw	r2,-56(fp)
100005bc:	108000d0 	cmplti	r2,r2,3
100005c0:	103fec1e 	bne	r2,zero,10000574 <__alt_data_end+0xf8000574>
	 		printf("%02x", globalTable[i].RGB[j]);
	 	}
	 	printf("],");
100005c4:	01040074 	movhi	r4,4097
100005c8:	21008704 	addi	r4,r4,540
100005cc:	0001f700 	call	10001f70 <printf>
		malloc(readlGlobalColorSize * sizeof(colorTableEntry));	 // We can make this 256 for hardware

	//Read global color table and print it
	fileptr = read(globalTable, 3, readlGlobalColorSize, fileptr);

	 for (int i = 0; i < readlGlobalColorSize; i++) {
100005d0:	e0bff117 	ldw	r2,-60(fp)
100005d4:	10800044 	addi	r2,r2,1
100005d8:	e0bff115 	stw	r2,-60(fp)
100005dc:	e0fff117 	ldw	r3,-60(fp)
100005e0:	e0bff517 	ldw	r2,-44(fp)
100005e4:	18bfde16 	blt	r3,r2,10000560 <__alt_data_end+0xf8000560>
	 	for (int j = 0; j < 3; j++) {
	 		printf("%02x", globalTable[i].RGB[j]);
	 	}
	 	printf("],");
	 }
	 printf("\n");
100005e8:	01000284 	movi	r4,10
100005ec:	0001fb40 	call	10001fb4 <putchar>
//////////////////////////////////////////////////
int x = 0;
100005f0:	e03ff715 	stw	zero,-36(fp)
	 while (0) {
100005f4:	0001883a 	nop
	 			break;
	 		}
	 		x++;
	 	}

	 	free(globalTable);
100005f8:	e13ff617 	ldw	r4,-40(fp)
100005fc:	00014b00 	call	100014b0 <free>
	 	printf("\n");
10000600:	01000284 	movi	r4,10
10000604:	0001fb40 	call	10001fb4 <putchar>
	 	fclose(fileptr);
10000608:	d0a6d117 	ldw	r2,-25788(gp)
1000060c:	1009883a 	mov	r4,r2
10000610:	00008180 	call	10000818 <fclose>





	for (int i = 0; i<0; i++) {
10000614:	e03ff315 	stw	zero,-52(fp)
10000618:	00000d06 	br	10000650 <main+0x2bc>
		printf("%02x ", *fileptr);
1000061c:	d0a6d117 	ldw	r2,-25788(gp)
10000620:	10800003 	ldbu	r2,0(r2)
10000624:	10803fcc 	andi	r2,r2,255
10000628:	100b883a 	mov	r5,r2
1000062c:	01040074 	movhi	r4,4097
10000630:	21008804 	addi	r4,r4,544
10000634:	0001f700 	call	10001f70 <printf>
		fileptr++;
10000638:	d0a6d117 	ldw	r2,-25788(gp)
1000063c:	10800044 	addi	r2,r2,1
10000640:	d0a6d115 	stw	r2,-25788(gp)





	for (int i = 0; i<0; i++) {
10000644:	e0bff317 	ldw	r2,-52(fp)
10000648:	10800044 	addi	r2,r2,1
1000064c:	e0bff315 	stw	r2,-52(fp)
10000650:	e0bff317 	ldw	r2,-52(fp)
10000654:	103ff116 	blt	r2,zero,1000061c <__alt_data_end+0xf800061c>
		printf("%02x ", *fileptr);
		fileptr++;
	}
	printf("\n");
10000658:	01000284 	movi	r4,10
1000065c:	0001fb40 	call	10001fb4 <putchar>
//	assert(descriptor.packedField.globalColorFlag);

	printf("done");
10000660:	01040074 	movhi	r4,4097
10000664:	21008a04 	addi	r4,r4,552
10000668:	0001f700 	call	10001f70 <printf>
1000066c:	0005883a 	mov	r2,zero
}
10000670:	e037883a 	mov	sp,fp
10000674:	dfc00117 	ldw	ra,4(sp)
10000678:	df000017 	ldw	fp,0(sp)
1000067c:	dec00204 	addi	sp,sp,8
10000680:	f800283a 	ret

10000684 <__mulsi3>:
10000684:	0005883a 	mov	r2,zero
10000688:	20000726 	beq	r4,zero,100006a8 <__mulsi3+0x24>
1000068c:	20c0004c 	andi	r3,r4,1
10000690:	2008d07a 	srli	r4,r4,1
10000694:	18000126 	beq	r3,zero,1000069c <__mulsi3+0x18>
10000698:	1145883a 	add	r2,r2,r5
1000069c:	294b883a 	add	r5,r5,r5
100006a0:	203ffa1e 	bne	r4,zero,1000068c <__alt_data_end+0xf800068c>
100006a4:	f800283a 	ret
100006a8:	f800283a 	ret

100006ac <__assert_func>:
100006ac:	00840074 	movhi	r2,4097
100006b0:	10880a04 	addi	r2,r2,8232
100006b4:	10800017 	ldw	r2,0(r2)
100006b8:	defffc04 	addi	sp,sp,-16
100006bc:	dfc00315 	stw	ra,12(sp)
100006c0:	2015883a 	mov	r10,r4
100006c4:	2811883a 	mov	r8,r5
100006c8:	3813883a 	mov	r9,r7
100006cc:	11000317 	ldw	r4,12(r2)
100006d0:	30000c26 	beq	r6,zero,10000704 <__assert_func+0x58>
100006d4:	00c40074 	movhi	r3,4097
100006d8:	18c08c04 	addi	r3,r3,560
100006dc:	3005883a 	mov	r2,r6
100006e0:	01440074 	movhi	r5,4097
100006e4:	29409004 	addi	r5,r5,576
100006e8:	500f883a 	mov	r7,r10
100006ec:	480d883a 	mov	r6,r9
100006f0:	d8c00115 	stw	r3,4(sp)
100006f4:	da000015 	stw	r8,0(sp)
100006f8:	d8800215 	stw	r2,8(sp)
100006fc:	0000ea40 	call	10000ea4 <fiprintf>
10000700:	00047300 	call	10004730 <abort>
10000704:	00c40074 	movhi	r3,4097
10000708:	18c08f04 	addi	r3,r3,572
1000070c:	1805883a 	mov	r2,r3
10000710:	003ff306 	br	100006e0 <__alt_data_end+0xf80006e0>

10000714 <__assert>:
10000714:	deffff04 	addi	sp,sp,-4
10000718:	300f883a 	mov	r7,r6
1000071c:	000d883a 	mov	r6,zero
10000720:	dfc00015 	stw	ra,0(sp)
10000724:	00006ac0 	call	100006ac <__assert_func>

10000728 <_fclose_r>:
10000728:	28003926 	beq	r5,zero,10000810 <_fclose_r+0xe8>
1000072c:	defffc04 	addi	sp,sp,-16
10000730:	dc400115 	stw	r17,4(sp)
10000734:	dc000015 	stw	r16,0(sp)
10000738:	dfc00315 	stw	ra,12(sp)
1000073c:	dc800215 	stw	r18,8(sp)
10000740:	2023883a 	mov	r17,r4
10000744:	2821883a 	mov	r16,r5
10000748:	20000226 	beq	r4,zero,10000754 <_fclose_r+0x2c>
1000074c:	20800e17 	ldw	r2,56(r4)
10000750:	10002726 	beq	r2,zero,100007f0 <_fclose_r+0xc8>
10000754:	8080030f 	ldh	r2,12(r16)
10000758:	1000071e 	bne	r2,zero,10000778 <_fclose_r+0x50>
1000075c:	0005883a 	mov	r2,zero
10000760:	dfc00317 	ldw	ra,12(sp)
10000764:	dc800217 	ldw	r18,8(sp)
10000768:	dc400117 	ldw	r17,4(sp)
1000076c:	dc000017 	ldw	r16,0(sp)
10000770:	dec00404 	addi	sp,sp,16
10000774:	f800283a 	ret
10000778:	800b883a 	mov	r5,r16
1000077c:	8809883a 	mov	r4,r17
10000780:	000082c0 	call	1000082c <__sflush_r>
10000784:	1025883a 	mov	r18,r2
10000788:	80800b17 	ldw	r2,44(r16)
1000078c:	10000426 	beq	r2,zero,100007a0 <_fclose_r+0x78>
10000790:	81400717 	ldw	r5,28(r16)
10000794:	8809883a 	mov	r4,r17
10000798:	103ee83a 	callr	r2
1000079c:	10001616 	blt	r2,zero,100007f8 <_fclose_r+0xd0>
100007a0:	8080030b 	ldhu	r2,12(r16)
100007a4:	1080200c 	andi	r2,r2,128
100007a8:	1000151e 	bne	r2,zero,10000800 <_fclose_r+0xd8>
100007ac:	81400c17 	ldw	r5,48(r16)
100007b0:	28000526 	beq	r5,zero,100007c8 <_fclose_r+0xa0>
100007b4:	80801004 	addi	r2,r16,64
100007b8:	28800226 	beq	r5,r2,100007c4 <_fclose_r+0x9c>
100007bc:	8809883a 	mov	r4,r17
100007c0:	00010040 	call	10001004 <_free_r>
100007c4:	80000c15 	stw	zero,48(r16)
100007c8:	81401117 	ldw	r5,68(r16)
100007cc:	28000326 	beq	r5,zero,100007dc <_fclose_r+0xb4>
100007d0:	8809883a 	mov	r4,r17
100007d4:	00010040 	call	10001004 <_free_r>
100007d8:	80001115 	stw	zero,68(r16)
100007dc:	0000e440 	call	10000e44 <__sfp_lock_acquire>
100007e0:	8000030d 	sth	zero,12(r16)
100007e4:	0000e480 	call	10000e48 <__sfp_lock_release>
100007e8:	9005883a 	mov	r2,r18
100007ec:	003fdc06 	br	10000760 <__alt_data_end+0xf8000760>
100007f0:	0000e340 	call	10000e34 <__sinit>
100007f4:	003fd706 	br	10000754 <__alt_data_end+0xf8000754>
100007f8:	04bfffc4 	movi	r18,-1
100007fc:	003fe806 	br	100007a0 <__alt_data_end+0xf80007a0>
10000800:	81400417 	ldw	r5,16(r16)
10000804:	8809883a 	mov	r4,r17
10000808:	00010040 	call	10001004 <_free_r>
1000080c:	003fe706 	br	100007ac <__alt_data_end+0xf80007ac>
10000810:	0005883a 	mov	r2,zero
10000814:	f800283a 	ret

10000818 <fclose>:
10000818:	00840074 	movhi	r2,4097
1000081c:	10880a04 	addi	r2,r2,8232
10000820:	200b883a 	mov	r5,r4
10000824:	11000017 	ldw	r4,0(r2)
10000828:	00007281 	jmpi	10000728 <_fclose_r>

1000082c <__sflush_r>:
1000082c:	2880030b 	ldhu	r2,12(r5)
10000830:	defffb04 	addi	sp,sp,-20
10000834:	dcc00315 	stw	r19,12(sp)
10000838:	dc400115 	stw	r17,4(sp)
1000083c:	dfc00415 	stw	ra,16(sp)
10000840:	dc800215 	stw	r18,8(sp)
10000844:	dc000015 	stw	r16,0(sp)
10000848:	10c0020c 	andi	r3,r2,8
1000084c:	2823883a 	mov	r17,r5
10000850:	2027883a 	mov	r19,r4
10000854:	1800311e 	bne	r3,zero,1000091c <__sflush_r+0xf0>
10000858:	28c00117 	ldw	r3,4(r5)
1000085c:	10820014 	ori	r2,r2,2048
10000860:	2880030d 	sth	r2,12(r5)
10000864:	00c04b0e 	bge	zero,r3,10000994 <__sflush_r+0x168>
10000868:	8a000a17 	ldw	r8,40(r17)
1000086c:	40002326 	beq	r8,zero,100008fc <__sflush_r+0xd0>
10000870:	9c000017 	ldw	r16,0(r19)
10000874:	10c4000c 	andi	r3,r2,4096
10000878:	98000015 	stw	zero,0(r19)
1000087c:	18004826 	beq	r3,zero,100009a0 <__sflush_r+0x174>
10000880:	89801417 	ldw	r6,80(r17)
10000884:	10c0010c 	andi	r3,r2,4
10000888:	18000626 	beq	r3,zero,100008a4 <__sflush_r+0x78>
1000088c:	88c00117 	ldw	r3,4(r17)
10000890:	88800c17 	ldw	r2,48(r17)
10000894:	30cdc83a 	sub	r6,r6,r3
10000898:	10000226 	beq	r2,zero,100008a4 <__sflush_r+0x78>
1000089c:	88800f17 	ldw	r2,60(r17)
100008a0:	308dc83a 	sub	r6,r6,r2
100008a4:	89400717 	ldw	r5,28(r17)
100008a8:	000f883a 	mov	r7,zero
100008ac:	9809883a 	mov	r4,r19
100008b0:	403ee83a 	callr	r8
100008b4:	00ffffc4 	movi	r3,-1
100008b8:	10c04426 	beq	r2,r3,100009cc <__sflush_r+0x1a0>
100008bc:	88c0030b 	ldhu	r3,12(r17)
100008c0:	89000417 	ldw	r4,16(r17)
100008c4:	88000115 	stw	zero,4(r17)
100008c8:	197dffcc 	andi	r5,r3,63487
100008cc:	8940030d 	sth	r5,12(r17)
100008d0:	89000015 	stw	r4,0(r17)
100008d4:	18c4000c 	andi	r3,r3,4096
100008d8:	18002c1e 	bne	r3,zero,1000098c <__sflush_r+0x160>
100008dc:	89400c17 	ldw	r5,48(r17)
100008e0:	9c000015 	stw	r16,0(r19)
100008e4:	28000526 	beq	r5,zero,100008fc <__sflush_r+0xd0>
100008e8:	88801004 	addi	r2,r17,64
100008ec:	28800226 	beq	r5,r2,100008f8 <__sflush_r+0xcc>
100008f0:	9809883a 	mov	r4,r19
100008f4:	00010040 	call	10001004 <_free_r>
100008f8:	88000c15 	stw	zero,48(r17)
100008fc:	0005883a 	mov	r2,zero
10000900:	dfc00417 	ldw	ra,16(sp)
10000904:	dcc00317 	ldw	r19,12(sp)
10000908:	dc800217 	ldw	r18,8(sp)
1000090c:	dc400117 	ldw	r17,4(sp)
10000910:	dc000017 	ldw	r16,0(sp)
10000914:	dec00504 	addi	sp,sp,20
10000918:	f800283a 	ret
1000091c:	2c800417 	ldw	r18,16(r5)
10000920:	903ff626 	beq	r18,zero,100008fc <__alt_data_end+0xf80008fc>
10000924:	2c000017 	ldw	r16,0(r5)
10000928:	108000cc 	andi	r2,r2,3
1000092c:	2c800015 	stw	r18,0(r5)
10000930:	84a1c83a 	sub	r16,r16,r18
10000934:	1000131e 	bne	r2,zero,10000984 <__sflush_r+0x158>
10000938:	28800517 	ldw	r2,20(r5)
1000093c:	88800215 	stw	r2,8(r17)
10000940:	04000316 	blt	zero,r16,10000950 <__sflush_r+0x124>
10000944:	003fed06 	br	100008fc <__alt_data_end+0xf80008fc>
10000948:	90a5883a 	add	r18,r18,r2
1000094c:	043feb0e 	bge	zero,r16,100008fc <__alt_data_end+0xf80008fc>
10000950:	88800917 	ldw	r2,36(r17)
10000954:	89400717 	ldw	r5,28(r17)
10000958:	800f883a 	mov	r7,r16
1000095c:	900d883a 	mov	r6,r18
10000960:	9809883a 	mov	r4,r19
10000964:	103ee83a 	callr	r2
10000968:	80a1c83a 	sub	r16,r16,r2
1000096c:	00bff616 	blt	zero,r2,10000948 <__alt_data_end+0xf8000948>
10000970:	88c0030b 	ldhu	r3,12(r17)
10000974:	00bfffc4 	movi	r2,-1
10000978:	18c01014 	ori	r3,r3,64
1000097c:	88c0030d 	sth	r3,12(r17)
10000980:	003fdf06 	br	10000900 <__alt_data_end+0xf8000900>
10000984:	0005883a 	mov	r2,zero
10000988:	003fec06 	br	1000093c <__alt_data_end+0xf800093c>
1000098c:	88801415 	stw	r2,80(r17)
10000990:	003fd206 	br	100008dc <__alt_data_end+0xf80008dc>
10000994:	28c00f17 	ldw	r3,60(r5)
10000998:	00ffb316 	blt	zero,r3,10000868 <__alt_data_end+0xf8000868>
1000099c:	003fd706 	br	100008fc <__alt_data_end+0xf80008fc>
100009a0:	89400717 	ldw	r5,28(r17)
100009a4:	000d883a 	mov	r6,zero
100009a8:	01c00044 	movi	r7,1
100009ac:	9809883a 	mov	r4,r19
100009b0:	403ee83a 	callr	r8
100009b4:	100d883a 	mov	r6,r2
100009b8:	00bfffc4 	movi	r2,-1
100009bc:	30801426 	beq	r6,r2,10000a10 <__sflush_r+0x1e4>
100009c0:	8880030b 	ldhu	r2,12(r17)
100009c4:	8a000a17 	ldw	r8,40(r17)
100009c8:	003fae06 	br	10000884 <__alt_data_end+0xf8000884>
100009cc:	98c00017 	ldw	r3,0(r19)
100009d0:	183fba26 	beq	r3,zero,100008bc <__alt_data_end+0xf80008bc>
100009d4:	01000744 	movi	r4,29
100009d8:	19000626 	beq	r3,r4,100009f4 <__sflush_r+0x1c8>
100009dc:	01000584 	movi	r4,22
100009e0:	19000426 	beq	r3,r4,100009f4 <__sflush_r+0x1c8>
100009e4:	88c0030b 	ldhu	r3,12(r17)
100009e8:	18c01014 	ori	r3,r3,64
100009ec:	88c0030d 	sth	r3,12(r17)
100009f0:	003fc306 	br	10000900 <__alt_data_end+0xf8000900>
100009f4:	8880030b 	ldhu	r2,12(r17)
100009f8:	88c00417 	ldw	r3,16(r17)
100009fc:	88000115 	stw	zero,4(r17)
10000a00:	10bdffcc 	andi	r2,r2,63487
10000a04:	8880030d 	sth	r2,12(r17)
10000a08:	88c00015 	stw	r3,0(r17)
10000a0c:	003fb306 	br	100008dc <__alt_data_end+0xf80008dc>
10000a10:	98800017 	ldw	r2,0(r19)
10000a14:	103fea26 	beq	r2,zero,100009c0 <__alt_data_end+0xf80009c0>
10000a18:	00c00744 	movi	r3,29
10000a1c:	10c00226 	beq	r2,r3,10000a28 <__sflush_r+0x1fc>
10000a20:	00c00584 	movi	r3,22
10000a24:	10c0031e 	bne	r2,r3,10000a34 <__sflush_r+0x208>
10000a28:	9c000015 	stw	r16,0(r19)
10000a2c:	0005883a 	mov	r2,zero
10000a30:	003fb306 	br	10000900 <__alt_data_end+0xf8000900>
10000a34:	88c0030b 	ldhu	r3,12(r17)
10000a38:	3005883a 	mov	r2,r6
10000a3c:	18c01014 	ori	r3,r3,64
10000a40:	88c0030d 	sth	r3,12(r17)
10000a44:	003fae06 	br	10000900 <__alt_data_end+0xf8000900>

10000a48 <_fflush_r>:
10000a48:	defffd04 	addi	sp,sp,-12
10000a4c:	dc000115 	stw	r16,4(sp)
10000a50:	dfc00215 	stw	ra,8(sp)
10000a54:	2021883a 	mov	r16,r4
10000a58:	20000226 	beq	r4,zero,10000a64 <_fflush_r+0x1c>
10000a5c:	20800e17 	ldw	r2,56(r4)
10000a60:	10000c26 	beq	r2,zero,10000a94 <_fflush_r+0x4c>
10000a64:	2880030f 	ldh	r2,12(r5)
10000a68:	1000051e 	bne	r2,zero,10000a80 <_fflush_r+0x38>
10000a6c:	0005883a 	mov	r2,zero
10000a70:	dfc00217 	ldw	ra,8(sp)
10000a74:	dc000117 	ldw	r16,4(sp)
10000a78:	dec00304 	addi	sp,sp,12
10000a7c:	f800283a 	ret
10000a80:	8009883a 	mov	r4,r16
10000a84:	dfc00217 	ldw	ra,8(sp)
10000a88:	dc000117 	ldw	r16,4(sp)
10000a8c:	dec00304 	addi	sp,sp,12
10000a90:	000082c1 	jmpi	1000082c <__sflush_r>
10000a94:	d9400015 	stw	r5,0(sp)
10000a98:	0000e340 	call	10000e34 <__sinit>
10000a9c:	d9400017 	ldw	r5,0(sp)
10000aa0:	003ff006 	br	10000a64 <__alt_data_end+0xf8000a64>

10000aa4 <fflush>:
10000aa4:	20000526 	beq	r4,zero,10000abc <fflush+0x18>
10000aa8:	00840074 	movhi	r2,4097
10000aac:	10880a04 	addi	r2,r2,8232
10000ab0:	200b883a 	mov	r5,r4
10000ab4:	11000017 	ldw	r4,0(r2)
10000ab8:	0000a481 	jmpi	10000a48 <_fflush_r>
10000abc:	00840074 	movhi	r2,4097
10000ac0:	10880904 	addi	r2,r2,8228
10000ac4:	11000017 	ldw	r4,0(r2)
10000ac8:	01440034 	movhi	r5,4096
10000acc:	29429204 	addi	r5,r5,2632
10000ad0:	00013d81 	jmpi	100013d8 <_fwalk_reent>

10000ad4 <__fp_unlock>:
10000ad4:	0005883a 	mov	r2,zero
10000ad8:	f800283a 	ret

10000adc <_cleanup_r>:
10000adc:	01440034 	movhi	r5,4096
10000ae0:	2941ca04 	addi	r5,r5,1832
10000ae4:	00013d81 	jmpi	100013d8 <_fwalk_reent>

10000ae8 <__sinit.part.1>:
10000ae8:	defff704 	addi	sp,sp,-36
10000aec:	00c40034 	movhi	r3,4096
10000af0:	dfc00815 	stw	ra,32(sp)
10000af4:	ddc00715 	stw	r23,28(sp)
10000af8:	dd800615 	stw	r22,24(sp)
10000afc:	dd400515 	stw	r21,20(sp)
10000b00:	dd000415 	stw	r20,16(sp)
10000b04:	dcc00315 	stw	r19,12(sp)
10000b08:	dc800215 	stw	r18,8(sp)
10000b0c:	dc400115 	stw	r17,4(sp)
10000b10:	dc000015 	stw	r16,0(sp)
10000b14:	18c2b704 	addi	r3,r3,2780
10000b18:	24000117 	ldw	r16,4(r4)
10000b1c:	20c00f15 	stw	r3,60(r4)
10000b20:	2080bb04 	addi	r2,r4,748
10000b24:	00c000c4 	movi	r3,3
10000b28:	20c0b915 	stw	r3,740(r4)
10000b2c:	2080ba15 	stw	r2,744(r4)
10000b30:	2000b815 	stw	zero,736(r4)
10000b34:	05c00204 	movi	r23,8
10000b38:	00800104 	movi	r2,4
10000b3c:	2025883a 	mov	r18,r4
10000b40:	b80d883a 	mov	r6,r23
10000b44:	81001704 	addi	r4,r16,92
10000b48:	000b883a 	mov	r5,zero
10000b4c:	80000015 	stw	zero,0(r16)
10000b50:	80000115 	stw	zero,4(r16)
10000b54:	80000215 	stw	zero,8(r16)
10000b58:	8080030d 	sth	r2,12(r16)
10000b5c:	80001915 	stw	zero,100(r16)
10000b60:	8000038d 	sth	zero,14(r16)
10000b64:	80000415 	stw	zero,16(r16)
10000b68:	80000515 	stw	zero,20(r16)
10000b6c:	80000615 	stw	zero,24(r16)
10000b70:	0001e180 	call	10001e18 <memset>
10000b74:	05840034 	movhi	r22,4096
10000b78:	94400217 	ldw	r17,8(r18)
10000b7c:	05440034 	movhi	r21,4096
10000b80:	05040034 	movhi	r20,4096
10000b84:	04c40034 	movhi	r19,4096
10000b88:	b5880804 	addi	r22,r22,8224
10000b8c:	ad481f04 	addi	r21,r21,8316
10000b90:	a5083e04 	addi	r20,r20,8440
10000b94:	9cc85504 	addi	r19,r19,8532
10000b98:	85800815 	stw	r22,32(r16)
10000b9c:	85400915 	stw	r21,36(r16)
10000ba0:	85000a15 	stw	r20,40(r16)
10000ba4:	84c00b15 	stw	r19,44(r16)
10000ba8:	84000715 	stw	r16,28(r16)
10000bac:	00800284 	movi	r2,10
10000bb0:	8880030d 	sth	r2,12(r17)
10000bb4:	00800044 	movi	r2,1
10000bb8:	b80d883a 	mov	r6,r23
10000bbc:	89001704 	addi	r4,r17,92
10000bc0:	000b883a 	mov	r5,zero
10000bc4:	88000015 	stw	zero,0(r17)
10000bc8:	88000115 	stw	zero,4(r17)
10000bcc:	88000215 	stw	zero,8(r17)
10000bd0:	88001915 	stw	zero,100(r17)
10000bd4:	8880038d 	sth	r2,14(r17)
10000bd8:	88000415 	stw	zero,16(r17)
10000bdc:	88000515 	stw	zero,20(r17)
10000be0:	88000615 	stw	zero,24(r17)
10000be4:	0001e180 	call	10001e18 <memset>
10000be8:	94000317 	ldw	r16,12(r18)
10000bec:	00800484 	movi	r2,18
10000bf0:	8c400715 	stw	r17,28(r17)
10000bf4:	8d800815 	stw	r22,32(r17)
10000bf8:	8d400915 	stw	r21,36(r17)
10000bfc:	8d000a15 	stw	r20,40(r17)
10000c00:	8cc00b15 	stw	r19,44(r17)
10000c04:	8080030d 	sth	r2,12(r16)
10000c08:	00800084 	movi	r2,2
10000c0c:	80000015 	stw	zero,0(r16)
10000c10:	80000115 	stw	zero,4(r16)
10000c14:	80000215 	stw	zero,8(r16)
10000c18:	80001915 	stw	zero,100(r16)
10000c1c:	8080038d 	sth	r2,14(r16)
10000c20:	80000415 	stw	zero,16(r16)
10000c24:	80000515 	stw	zero,20(r16)
10000c28:	80000615 	stw	zero,24(r16)
10000c2c:	b80d883a 	mov	r6,r23
10000c30:	000b883a 	mov	r5,zero
10000c34:	81001704 	addi	r4,r16,92
10000c38:	0001e180 	call	10001e18 <memset>
10000c3c:	00800044 	movi	r2,1
10000c40:	84000715 	stw	r16,28(r16)
10000c44:	85800815 	stw	r22,32(r16)
10000c48:	85400915 	stw	r21,36(r16)
10000c4c:	85000a15 	stw	r20,40(r16)
10000c50:	84c00b15 	stw	r19,44(r16)
10000c54:	90800e15 	stw	r2,56(r18)
10000c58:	dfc00817 	ldw	ra,32(sp)
10000c5c:	ddc00717 	ldw	r23,28(sp)
10000c60:	dd800617 	ldw	r22,24(sp)
10000c64:	dd400517 	ldw	r21,20(sp)
10000c68:	dd000417 	ldw	r20,16(sp)
10000c6c:	dcc00317 	ldw	r19,12(sp)
10000c70:	dc800217 	ldw	r18,8(sp)
10000c74:	dc400117 	ldw	r17,4(sp)
10000c78:	dc000017 	ldw	r16,0(sp)
10000c7c:	dec00904 	addi	sp,sp,36
10000c80:	f800283a 	ret

10000c84 <__fp_lock>:
10000c84:	0005883a 	mov	r2,zero
10000c88:	f800283a 	ret

10000c8c <__sfmoreglue>:
10000c8c:	defffc04 	addi	sp,sp,-16
10000c90:	dc800215 	stw	r18,8(sp)
10000c94:	2825883a 	mov	r18,r5
10000c98:	dc000015 	stw	r16,0(sp)
10000c9c:	01401a04 	movi	r5,104
10000ca0:	2021883a 	mov	r16,r4
10000ca4:	913fffc4 	addi	r4,r18,-1
10000ca8:	dfc00315 	stw	ra,12(sp)
10000cac:	dc400115 	stw	r17,4(sp)
10000cb0:	00006840 	call	10000684 <__mulsi3>
10000cb4:	8009883a 	mov	r4,r16
10000cb8:	11401d04 	addi	r5,r2,116
10000cbc:	1023883a 	mov	r17,r2
10000cc0:	00014c40 	call	100014c4 <_malloc_r>
10000cc4:	1021883a 	mov	r16,r2
10000cc8:	10000726 	beq	r2,zero,10000ce8 <__sfmoreglue+0x5c>
10000ccc:	11000304 	addi	r4,r2,12
10000cd0:	10000015 	stw	zero,0(r2)
10000cd4:	14800115 	stw	r18,4(r2)
10000cd8:	11000215 	stw	r4,8(r2)
10000cdc:	89801a04 	addi	r6,r17,104
10000ce0:	000b883a 	mov	r5,zero
10000ce4:	0001e180 	call	10001e18 <memset>
10000ce8:	8005883a 	mov	r2,r16
10000cec:	dfc00317 	ldw	ra,12(sp)
10000cf0:	dc800217 	ldw	r18,8(sp)
10000cf4:	dc400117 	ldw	r17,4(sp)
10000cf8:	dc000017 	ldw	r16,0(sp)
10000cfc:	dec00404 	addi	sp,sp,16
10000d00:	f800283a 	ret

10000d04 <__sfp>:
10000d04:	defffb04 	addi	sp,sp,-20
10000d08:	dc000015 	stw	r16,0(sp)
10000d0c:	04040074 	movhi	r16,4097
10000d10:	84080904 	addi	r16,r16,8228
10000d14:	dcc00315 	stw	r19,12(sp)
10000d18:	2027883a 	mov	r19,r4
10000d1c:	81000017 	ldw	r4,0(r16)
10000d20:	dfc00415 	stw	ra,16(sp)
10000d24:	dc800215 	stw	r18,8(sp)
10000d28:	20800e17 	ldw	r2,56(r4)
10000d2c:	dc400115 	stw	r17,4(sp)
10000d30:	1000021e 	bne	r2,zero,10000d3c <__sfp+0x38>
10000d34:	0000ae80 	call	10000ae8 <__sinit.part.1>
10000d38:	81000017 	ldw	r4,0(r16)
10000d3c:	2480b804 	addi	r18,r4,736
10000d40:	047fffc4 	movi	r17,-1
10000d44:	91000117 	ldw	r4,4(r18)
10000d48:	94000217 	ldw	r16,8(r18)
10000d4c:	213fffc4 	addi	r4,r4,-1
10000d50:	20000a16 	blt	r4,zero,10000d7c <__sfp+0x78>
10000d54:	8080030f 	ldh	r2,12(r16)
10000d58:	10000c26 	beq	r2,zero,10000d8c <__sfp+0x88>
10000d5c:	80c01d04 	addi	r3,r16,116
10000d60:	00000206 	br	10000d6c <__sfp+0x68>
10000d64:	18bfe60f 	ldh	r2,-104(r3)
10000d68:	10000826 	beq	r2,zero,10000d8c <__sfp+0x88>
10000d6c:	213fffc4 	addi	r4,r4,-1
10000d70:	1c3ffd04 	addi	r16,r3,-12
10000d74:	18c01a04 	addi	r3,r3,104
10000d78:	247ffa1e 	bne	r4,r17,10000d64 <__alt_data_end+0xf8000d64>
10000d7c:	90800017 	ldw	r2,0(r18)
10000d80:	10001d26 	beq	r2,zero,10000df8 <__sfp+0xf4>
10000d84:	1025883a 	mov	r18,r2
10000d88:	003fee06 	br	10000d44 <__alt_data_end+0xf8000d44>
10000d8c:	00bfffc4 	movi	r2,-1
10000d90:	8080038d 	sth	r2,14(r16)
10000d94:	00800044 	movi	r2,1
10000d98:	8080030d 	sth	r2,12(r16)
10000d9c:	80001915 	stw	zero,100(r16)
10000da0:	80000015 	stw	zero,0(r16)
10000da4:	80000215 	stw	zero,8(r16)
10000da8:	80000115 	stw	zero,4(r16)
10000dac:	80000415 	stw	zero,16(r16)
10000db0:	80000515 	stw	zero,20(r16)
10000db4:	80000615 	stw	zero,24(r16)
10000db8:	01800204 	movi	r6,8
10000dbc:	000b883a 	mov	r5,zero
10000dc0:	81001704 	addi	r4,r16,92
10000dc4:	0001e180 	call	10001e18 <memset>
10000dc8:	8005883a 	mov	r2,r16
10000dcc:	80000c15 	stw	zero,48(r16)
10000dd0:	80000d15 	stw	zero,52(r16)
10000dd4:	80001115 	stw	zero,68(r16)
10000dd8:	80001215 	stw	zero,72(r16)
10000ddc:	dfc00417 	ldw	ra,16(sp)
10000de0:	dcc00317 	ldw	r19,12(sp)
10000de4:	dc800217 	ldw	r18,8(sp)
10000de8:	dc400117 	ldw	r17,4(sp)
10000dec:	dc000017 	ldw	r16,0(sp)
10000df0:	dec00504 	addi	sp,sp,20
10000df4:	f800283a 	ret
10000df8:	01400104 	movi	r5,4
10000dfc:	9809883a 	mov	r4,r19
10000e00:	0000c8c0 	call	10000c8c <__sfmoreglue>
10000e04:	90800015 	stw	r2,0(r18)
10000e08:	103fde1e 	bne	r2,zero,10000d84 <__alt_data_end+0xf8000d84>
10000e0c:	00800304 	movi	r2,12
10000e10:	98800015 	stw	r2,0(r19)
10000e14:	0005883a 	mov	r2,zero
10000e18:	003ff006 	br	10000ddc <__alt_data_end+0xf8000ddc>

10000e1c <_cleanup>:
10000e1c:	00840074 	movhi	r2,4097
10000e20:	10880904 	addi	r2,r2,8228
10000e24:	11000017 	ldw	r4,0(r2)
10000e28:	01440034 	movhi	r5,4096
10000e2c:	2941ca04 	addi	r5,r5,1832
10000e30:	00013d81 	jmpi	100013d8 <_fwalk_reent>

10000e34 <__sinit>:
10000e34:	20800e17 	ldw	r2,56(r4)
10000e38:	10000126 	beq	r2,zero,10000e40 <__sinit+0xc>
10000e3c:	f800283a 	ret
10000e40:	0000ae81 	jmpi	10000ae8 <__sinit.part.1>

10000e44 <__sfp_lock_acquire>:
10000e44:	f800283a 	ret

10000e48 <__sfp_lock_release>:
10000e48:	f800283a 	ret

10000e4c <__sinit_lock_acquire>:
10000e4c:	f800283a 	ret

10000e50 <__sinit_lock_release>:
10000e50:	f800283a 	ret

10000e54 <__fp_lock_all>:
10000e54:	00840074 	movhi	r2,4097
10000e58:	10880a04 	addi	r2,r2,8232
10000e5c:	11000017 	ldw	r4,0(r2)
10000e60:	01440034 	movhi	r5,4096
10000e64:	29432104 	addi	r5,r5,3204
10000e68:	00013141 	jmpi	10001314 <_fwalk>

10000e6c <__fp_unlock_all>:
10000e6c:	00840074 	movhi	r2,4097
10000e70:	10880a04 	addi	r2,r2,8232
10000e74:	11000017 	ldw	r4,0(r2)
10000e78:	01440034 	movhi	r5,4096
10000e7c:	2942b504 	addi	r5,r5,2772
10000e80:	00013141 	jmpi	10001314 <_fwalk>

10000e84 <_fiprintf_r>:
10000e84:	defffe04 	addi	sp,sp,-8
10000e88:	dfc00015 	stw	ra,0(sp)
10000e8c:	d9c00115 	stw	r7,4(sp)
10000e90:	d9c00104 	addi	r7,sp,4
10000e94:	000215c0 	call	1000215c <_vfiprintf_r>
10000e98:	dfc00017 	ldw	ra,0(sp)
10000e9c:	dec00204 	addi	sp,sp,8
10000ea0:	f800283a 	ret

10000ea4 <fiprintf>:
10000ea4:	defffd04 	addi	sp,sp,-12
10000ea8:	2005883a 	mov	r2,r4
10000eac:	dfc00015 	stw	ra,0(sp)
10000eb0:	d9800115 	stw	r6,4(sp)
10000eb4:	d9c00215 	stw	r7,8(sp)
10000eb8:	00c40074 	movhi	r3,4097
10000ebc:	18c80a04 	addi	r3,r3,8232
10000ec0:	19000017 	ldw	r4,0(r3)
10000ec4:	280d883a 	mov	r6,r5
10000ec8:	d9c00104 	addi	r7,sp,4
10000ecc:	100b883a 	mov	r5,r2
10000ed0:	000215c0 	call	1000215c <_vfiprintf_r>
10000ed4:	dfc00017 	ldw	ra,0(sp)
10000ed8:	dec00304 	addi	sp,sp,12
10000edc:	f800283a 	ret

10000ee0 <_malloc_trim_r>:
10000ee0:	defffb04 	addi	sp,sp,-20
10000ee4:	dcc00315 	stw	r19,12(sp)
10000ee8:	04c40074 	movhi	r19,4097
10000eec:	dc800215 	stw	r18,8(sp)
10000ef0:	dc400115 	stw	r17,4(sp)
10000ef4:	dc000015 	stw	r16,0(sp)
10000ef8:	dfc00415 	stw	ra,16(sp)
10000efc:	2821883a 	mov	r16,r5
10000f00:	9cc26404 	addi	r19,r19,2448
10000f04:	2025883a 	mov	r18,r4
10000f08:	000e2080 	call	1000e208 <__malloc_lock>
10000f0c:	98800217 	ldw	r2,8(r19)
10000f10:	14400117 	ldw	r17,4(r2)
10000f14:	00bfff04 	movi	r2,-4
10000f18:	88a2703a 	and	r17,r17,r2
10000f1c:	8c21c83a 	sub	r16,r17,r16
10000f20:	8403fbc4 	addi	r16,r16,4079
10000f24:	8020d33a 	srli	r16,r16,12
10000f28:	0083ffc4 	movi	r2,4095
10000f2c:	843fffc4 	addi	r16,r16,-1
10000f30:	8020933a 	slli	r16,r16,12
10000f34:	1400060e 	bge	r2,r16,10000f50 <_malloc_trim_r+0x70>
10000f38:	000b883a 	mov	r5,zero
10000f3c:	9009883a 	mov	r4,r18
10000f40:	0001fcc0 	call	10001fcc <_sbrk_r>
10000f44:	98c00217 	ldw	r3,8(r19)
10000f48:	1c47883a 	add	r3,r3,r17
10000f4c:	10c00a26 	beq	r2,r3,10000f78 <_malloc_trim_r+0x98>
10000f50:	9009883a 	mov	r4,r18
10000f54:	000e22c0 	call	1000e22c <__malloc_unlock>
10000f58:	0005883a 	mov	r2,zero
10000f5c:	dfc00417 	ldw	ra,16(sp)
10000f60:	dcc00317 	ldw	r19,12(sp)
10000f64:	dc800217 	ldw	r18,8(sp)
10000f68:	dc400117 	ldw	r17,4(sp)
10000f6c:	dc000017 	ldw	r16,0(sp)
10000f70:	dec00504 	addi	sp,sp,20
10000f74:	f800283a 	ret
10000f78:	040bc83a 	sub	r5,zero,r16
10000f7c:	9009883a 	mov	r4,r18
10000f80:	0001fcc0 	call	10001fcc <_sbrk_r>
10000f84:	00ffffc4 	movi	r3,-1
10000f88:	10c00d26 	beq	r2,r3,10000fc0 <_malloc_trim_r+0xe0>
10000f8c:	00c40074 	movhi	r3,4097
10000f90:	18cee604 	addi	r3,r3,15256
10000f94:	18800017 	ldw	r2,0(r3)
10000f98:	99000217 	ldw	r4,8(r19)
10000f9c:	8c23c83a 	sub	r17,r17,r16
10000fa0:	8c400054 	ori	r17,r17,1
10000fa4:	1421c83a 	sub	r16,r2,r16
10000fa8:	24400115 	stw	r17,4(r4)
10000fac:	9009883a 	mov	r4,r18
10000fb0:	1c000015 	stw	r16,0(r3)
10000fb4:	000e22c0 	call	1000e22c <__malloc_unlock>
10000fb8:	00800044 	movi	r2,1
10000fbc:	003fe706 	br	10000f5c <__alt_data_end+0xf8000f5c>
10000fc0:	000b883a 	mov	r5,zero
10000fc4:	9009883a 	mov	r4,r18
10000fc8:	0001fcc0 	call	10001fcc <_sbrk_r>
10000fcc:	99000217 	ldw	r4,8(r19)
10000fd0:	014003c4 	movi	r5,15
10000fd4:	1107c83a 	sub	r3,r2,r4
10000fd8:	28ffdd0e 	bge	r5,r3,10000f50 <__alt_data_end+0xf8000f50>
10000fdc:	01440074 	movhi	r5,4097
10000fe0:	29480b04 	addi	r5,r5,8236
10000fe4:	29400017 	ldw	r5,0(r5)
10000fe8:	18c00054 	ori	r3,r3,1
10000fec:	20c00115 	stw	r3,4(r4)
10000ff0:	00c40074 	movhi	r3,4097
10000ff4:	1145c83a 	sub	r2,r2,r5
10000ff8:	18cee604 	addi	r3,r3,15256
10000ffc:	18800015 	stw	r2,0(r3)
10001000:	003fd306 	br	10000f50 <__alt_data_end+0xf8000f50>

10001004 <_free_r>:
10001004:	28004126 	beq	r5,zero,1000110c <_free_r+0x108>
10001008:	defffd04 	addi	sp,sp,-12
1000100c:	dc400115 	stw	r17,4(sp)
10001010:	dc000015 	stw	r16,0(sp)
10001014:	2023883a 	mov	r17,r4
10001018:	2821883a 	mov	r16,r5
1000101c:	dfc00215 	stw	ra,8(sp)
10001020:	000e2080 	call	1000e208 <__malloc_lock>
10001024:	81ffff17 	ldw	r7,-4(r16)
10001028:	00bfff84 	movi	r2,-2
1000102c:	01040074 	movhi	r4,4097
10001030:	81bffe04 	addi	r6,r16,-8
10001034:	3884703a 	and	r2,r7,r2
10001038:	21026404 	addi	r4,r4,2448
1000103c:	308b883a 	add	r5,r6,r2
10001040:	2a400117 	ldw	r9,4(r5)
10001044:	22000217 	ldw	r8,8(r4)
10001048:	00ffff04 	movi	r3,-4
1000104c:	48c6703a 	and	r3,r9,r3
10001050:	2a005726 	beq	r5,r8,100011b0 <_free_r+0x1ac>
10001054:	28c00115 	stw	r3,4(r5)
10001058:	39c0004c 	andi	r7,r7,1
1000105c:	3800091e 	bne	r7,zero,10001084 <_free_r+0x80>
10001060:	823ffe17 	ldw	r8,-8(r16)
10001064:	22400204 	addi	r9,r4,8
10001068:	320dc83a 	sub	r6,r6,r8
1000106c:	31c00217 	ldw	r7,8(r6)
10001070:	1205883a 	add	r2,r2,r8
10001074:	3a406526 	beq	r7,r9,1000120c <_free_r+0x208>
10001078:	32000317 	ldw	r8,12(r6)
1000107c:	3a000315 	stw	r8,12(r7)
10001080:	41c00215 	stw	r7,8(r8)
10001084:	28cf883a 	add	r7,r5,r3
10001088:	39c00117 	ldw	r7,4(r7)
1000108c:	39c0004c 	andi	r7,r7,1
10001090:	38003a26 	beq	r7,zero,1000117c <_free_r+0x178>
10001094:	10c00054 	ori	r3,r2,1
10001098:	30c00115 	stw	r3,4(r6)
1000109c:	3087883a 	add	r3,r6,r2
100010a0:	18800015 	stw	r2,0(r3)
100010a4:	00c07fc4 	movi	r3,511
100010a8:	18801936 	bltu	r3,r2,10001110 <_free_r+0x10c>
100010ac:	1004d0fa 	srli	r2,r2,3
100010b0:	01c00044 	movi	r7,1
100010b4:	21400117 	ldw	r5,4(r4)
100010b8:	10c00044 	addi	r3,r2,1
100010bc:	18c7883a 	add	r3,r3,r3
100010c0:	1005d0ba 	srai	r2,r2,2
100010c4:	18c7883a 	add	r3,r3,r3
100010c8:	18c7883a 	add	r3,r3,r3
100010cc:	1907883a 	add	r3,r3,r4
100010d0:	3884983a 	sll	r2,r7,r2
100010d4:	19c00017 	ldw	r7,0(r3)
100010d8:	1a3ffe04 	addi	r8,r3,-8
100010dc:	1144b03a 	or	r2,r2,r5
100010e0:	32000315 	stw	r8,12(r6)
100010e4:	31c00215 	stw	r7,8(r6)
100010e8:	20800115 	stw	r2,4(r4)
100010ec:	19800015 	stw	r6,0(r3)
100010f0:	39800315 	stw	r6,12(r7)
100010f4:	8809883a 	mov	r4,r17
100010f8:	dfc00217 	ldw	ra,8(sp)
100010fc:	dc400117 	ldw	r17,4(sp)
10001100:	dc000017 	ldw	r16,0(sp)
10001104:	dec00304 	addi	sp,sp,12
10001108:	000e22c1 	jmpi	1000e22c <__malloc_unlock>
1000110c:	f800283a 	ret
10001110:	100ad27a 	srli	r5,r2,9
10001114:	00c00104 	movi	r3,4
10001118:	19404a36 	bltu	r3,r5,10001244 <_free_r+0x240>
1000111c:	100ad1ba 	srli	r5,r2,6
10001120:	28c00e44 	addi	r3,r5,57
10001124:	18c7883a 	add	r3,r3,r3
10001128:	29400e04 	addi	r5,r5,56
1000112c:	18c7883a 	add	r3,r3,r3
10001130:	18c7883a 	add	r3,r3,r3
10001134:	1909883a 	add	r4,r3,r4
10001138:	20c00017 	ldw	r3,0(r4)
1000113c:	01c40074 	movhi	r7,4097
10001140:	213ffe04 	addi	r4,r4,-8
10001144:	39c26404 	addi	r7,r7,2448
10001148:	20c04426 	beq	r4,r3,1000125c <_free_r+0x258>
1000114c:	01ffff04 	movi	r7,-4
10001150:	19400117 	ldw	r5,4(r3)
10001154:	29ca703a 	and	r5,r5,r7
10001158:	1140022e 	bgeu	r2,r5,10001164 <_free_r+0x160>
1000115c:	18c00217 	ldw	r3,8(r3)
10001160:	20fffb1e 	bne	r4,r3,10001150 <__alt_data_end+0xf8001150>
10001164:	19000317 	ldw	r4,12(r3)
10001168:	31000315 	stw	r4,12(r6)
1000116c:	30c00215 	stw	r3,8(r6)
10001170:	21800215 	stw	r6,8(r4)
10001174:	19800315 	stw	r6,12(r3)
10001178:	003fde06 	br	100010f4 <__alt_data_end+0xf80010f4>
1000117c:	29c00217 	ldw	r7,8(r5)
10001180:	10c5883a 	add	r2,r2,r3
10001184:	00c40074 	movhi	r3,4097
10001188:	18c26604 	addi	r3,r3,2456
1000118c:	38c03b26 	beq	r7,r3,1000127c <_free_r+0x278>
10001190:	2a000317 	ldw	r8,12(r5)
10001194:	11400054 	ori	r5,r2,1
10001198:	3087883a 	add	r3,r6,r2
1000119c:	3a000315 	stw	r8,12(r7)
100011a0:	41c00215 	stw	r7,8(r8)
100011a4:	31400115 	stw	r5,4(r6)
100011a8:	18800015 	stw	r2,0(r3)
100011ac:	003fbd06 	br	100010a4 <__alt_data_end+0xf80010a4>
100011b0:	39c0004c 	andi	r7,r7,1
100011b4:	10c5883a 	add	r2,r2,r3
100011b8:	3800071e 	bne	r7,zero,100011d8 <_free_r+0x1d4>
100011bc:	81fffe17 	ldw	r7,-8(r16)
100011c0:	31cdc83a 	sub	r6,r6,r7
100011c4:	30c00317 	ldw	r3,12(r6)
100011c8:	31400217 	ldw	r5,8(r6)
100011cc:	11c5883a 	add	r2,r2,r7
100011d0:	28c00315 	stw	r3,12(r5)
100011d4:	19400215 	stw	r5,8(r3)
100011d8:	10c00054 	ori	r3,r2,1
100011dc:	30c00115 	stw	r3,4(r6)
100011e0:	00c40074 	movhi	r3,4097
100011e4:	18c80c04 	addi	r3,r3,8240
100011e8:	18c00017 	ldw	r3,0(r3)
100011ec:	21800215 	stw	r6,8(r4)
100011f0:	10ffc036 	bltu	r2,r3,100010f4 <__alt_data_end+0xf80010f4>
100011f4:	00840074 	movhi	r2,4097
100011f8:	108eda04 	addi	r2,r2,15208
100011fc:	11400017 	ldw	r5,0(r2)
10001200:	8809883a 	mov	r4,r17
10001204:	0000ee00 	call	10000ee0 <_malloc_trim_r>
10001208:	003fba06 	br	100010f4 <__alt_data_end+0xf80010f4>
1000120c:	28c9883a 	add	r4,r5,r3
10001210:	21000117 	ldw	r4,4(r4)
10001214:	2100004c 	andi	r4,r4,1
10001218:	2000391e 	bne	r4,zero,10001300 <_free_r+0x2fc>
1000121c:	29c00217 	ldw	r7,8(r5)
10001220:	29000317 	ldw	r4,12(r5)
10001224:	1885883a 	add	r2,r3,r2
10001228:	10c00054 	ori	r3,r2,1
1000122c:	39000315 	stw	r4,12(r7)
10001230:	21c00215 	stw	r7,8(r4)
10001234:	30c00115 	stw	r3,4(r6)
10001238:	308d883a 	add	r6,r6,r2
1000123c:	30800015 	stw	r2,0(r6)
10001240:	003fac06 	br	100010f4 <__alt_data_end+0xf80010f4>
10001244:	00c00504 	movi	r3,20
10001248:	19401536 	bltu	r3,r5,100012a0 <_free_r+0x29c>
1000124c:	28c01704 	addi	r3,r5,92
10001250:	18c7883a 	add	r3,r3,r3
10001254:	294016c4 	addi	r5,r5,91
10001258:	003fb406 	br	1000112c <__alt_data_end+0xf800112c>
1000125c:	280bd0ba 	srai	r5,r5,2
10001260:	00c00044 	movi	r3,1
10001264:	38800117 	ldw	r2,4(r7)
10001268:	194a983a 	sll	r5,r3,r5
1000126c:	2007883a 	mov	r3,r4
10001270:	2884b03a 	or	r2,r5,r2
10001274:	38800115 	stw	r2,4(r7)
10001278:	003fbb06 	br	10001168 <__alt_data_end+0xf8001168>
1000127c:	21800515 	stw	r6,20(r4)
10001280:	21800415 	stw	r6,16(r4)
10001284:	10c00054 	ori	r3,r2,1
10001288:	31c00315 	stw	r7,12(r6)
1000128c:	31c00215 	stw	r7,8(r6)
10001290:	30c00115 	stw	r3,4(r6)
10001294:	308d883a 	add	r6,r6,r2
10001298:	30800015 	stw	r2,0(r6)
1000129c:	003f9506 	br	100010f4 <__alt_data_end+0xf80010f4>
100012a0:	00c01504 	movi	r3,84
100012a4:	19400536 	bltu	r3,r5,100012bc <_free_r+0x2b8>
100012a8:	100ad33a 	srli	r5,r2,12
100012ac:	28c01bc4 	addi	r3,r5,111
100012b0:	18c7883a 	add	r3,r3,r3
100012b4:	29401b84 	addi	r5,r5,110
100012b8:	003f9c06 	br	1000112c <__alt_data_end+0xf800112c>
100012bc:	00c05504 	movi	r3,340
100012c0:	19400536 	bltu	r3,r5,100012d8 <_free_r+0x2d4>
100012c4:	100ad3fa 	srli	r5,r2,15
100012c8:	28c01e04 	addi	r3,r5,120
100012cc:	18c7883a 	add	r3,r3,r3
100012d0:	29401dc4 	addi	r5,r5,119
100012d4:	003f9506 	br	1000112c <__alt_data_end+0xf800112c>
100012d8:	00c15504 	movi	r3,1364
100012dc:	19400536 	bltu	r3,r5,100012f4 <_free_r+0x2f0>
100012e0:	100ad4ba 	srli	r5,r2,18
100012e4:	28c01f44 	addi	r3,r5,125
100012e8:	18c7883a 	add	r3,r3,r3
100012ec:	29401f04 	addi	r5,r5,124
100012f0:	003f8e06 	br	1000112c <__alt_data_end+0xf800112c>
100012f4:	00c03f84 	movi	r3,254
100012f8:	01401f84 	movi	r5,126
100012fc:	003f8b06 	br	1000112c <__alt_data_end+0xf800112c>
10001300:	10c00054 	ori	r3,r2,1
10001304:	30c00115 	stw	r3,4(r6)
10001308:	308d883a 	add	r6,r6,r2
1000130c:	30800015 	stw	r2,0(r6)
10001310:	003f7806 	br	100010f4 <__alt_data_end+0xf80010f4>

10001314 <_fwalk>:
10001314:	defff704 	addi	sp,sp,-36
10001318:	dd000415 	stw	r20,16(sp)
1000131c:	dfc00815 	stw	ra,32(sp)
10001320:	ddc00715 	stw	r23,28(sp)
10001324:	dd800615 	stw	r22,24(sp)
10001328:	dd400515 	stw	r21,20(sp)
1000132c:	dcc00315 	stw	r19,12(sp)
10001330:	dc800215 	stw	r18,8(sp)
10001334:	dc400115 	stw	r17,4(sp)
10001338:	dc000015 	stw	r16,0(sp)
1000133c:	2500b804 	addi	r20,r4,736
10001340:	a0002326 	beq	r20,zero,100013d0 <_fwalk+0xbc>
10001344:	282b883a 	mov	r21,r5
10001348:	002f883a 	mov	r23,zero
1000134c:	05800044 	movi	r22,1
10001350:	04ffffc4 	movi	r19,-1
10001354:	a4400117 	ldw	r17,4(r20)
10001358:	a4800217 	ldw	r18,8(r20)
1000135c:	8c7fffc4 	addi	r17,r17,-1
10001360:	88000d16 	blt	r17,zero,10001398 <_fwalk+0x84>
10001364:	94000304 	addi	r16,r18,12
10001368:	94800384 	addi	r18,r18,14
1000136c:	8080000b 	ldhu	r2,0(r16)
10001370:	8c7fffc4 	addi	r17,r17,-1
10001374:	813ffd04 	addi	r4,r16,-12
10001378:	b080042e 	bgeu	r22,r2,1000138c <_fwalk+0x78>
1000137c:	9080000f 	ldh	r2,0(r18)
10001380:	14c00226 	beq	r2,r19,1000138c <_fwalk+0x78>
10001384:	a83ee83a 	callr	r21
10001388:	b8aeb03a 	or	r23,r23,r2
1000138c:	84001a04 	addi	r16,r16,104
10001390:	94801a04 	addi	r18,r18,104
10001394:	8cfff51e 	bne	r17,r19,1000136c <__alt_data_end+0xf800136c>
10001398:	a5000017 	ldw	r20,0(r20)
1000139c:	a03fed1e 	bne	r20,zero,10001354 <__alt_data_end+0xf8001354>
100013a0:	b805883a 	mov	r2,r23
100013a4:	dfc00817 	ldw	ra,32(sp)
100013a8:	ddc00717 	ldw	r23,28(sp)
100013ac:	dd800617 	ldw	r22,24(sp)
100013b0:	dd400517 	ldw	r21,20(sp)
100013b4:	dd000417 	ldw	r20,16(sp)
100013b8:	dcc00317 	ldw	r19,12(sp)
100013bc:	dc800217 	ldw	r18,8(sp)
100013c0:	dc400117 	ldw	r17,4(sp)
100013c4:	dc000017 	ldw	r16,0(sp)
100013c8:	dec00904 	addi	sp,sp,36
100013cc:	f800283a 	ret
100013d0:	002f883a 	mov	r23,zero
100013d4:	003ff206 	br	100013a0 <__alt_data_end+0xf80013a0>

100013d8 <_fwalk_reent>:
100013d8:	defff704 	addi	sp,sp,-36
100013dc:	dd000415 	stw	r20,16(sp)
100013e0:	dfc00815 	stw	ra,32(sp)
100013e4:	ddc00715 	stw	r23,28(sp)
100013e8:	dd800615 	stw	r22,24(sp)
100013ec:	dd400515 	stw	r21,20(sp)
100013f0:	dcc00315 	stw	r19,12(sp)
100013f4:	dc800215 	stw	r18,8(sp)
100013f8:	dc400115 	stw	r17,4(sp)
100013fc:	dc000015 	stw	r16,0(sp)
10001400:	2500b804 	addi	r20,r4,736
10001404:	a0002326 	beq	r20,zero,10001494 <_fwalk_reent+0xbc>
10001408:	282b883a 	mov	r21,r5
1000140c:	2027883a 	mov	r19,r4
10001410:	002f883a 	mov	r23,zero
10001414:	05800044 	movi	r22,1
10001418:	04bfffc4 	movi	r18,-1
1000141c:	a4400117 	ldw	r17,4(r20)
10001420:	a4000217 	ldw	r16,8(r20)
10001424:	8c7fffc4 	addi	r17,r17,-1
10001428:	88000c16 	blt	r17,zero,1000145c <_fwalk_reent+0x84>
1000142c:	84000304 	addi	r16,r16,12
10001430:	8080000b 	ldhu	r2,0(r16)
10001434:	8c7fffc4 	addi	r17,r17,-1
10001438:	817ffd04 	addi	r5,r16,-12
1000143c:	b080052e 	bgeu	r22,r2,10001454 <_fwalk_reent+0x7c>
10001440:	8080008f 	ldh	r2,2(r16)
10001444:	9809883a 	mov	r4,r19
10001448:	14800226 	beq	r2,r18,10001454 <_fwalk_reent+0x7c>
1000144c:	a83ee83a 	callr	r21
10001450:	b8aeb03a 	or	r23,r23,r2
10001454:	84001a04 	addi	r16,r16,104
10001458:	8cbff51e 	bne	r17,r18,10001430 <__alt_data_end+0xf8001430>
1000145c:	a5000017 	ldw	r20,0(r20)
10001460:	a03fee1e 	bne	r20,zero,1000141c <__alt_data_end+0xf800141c>
10001464:	b805883a 	mov	r2,r23
10001468:	dfc00817 	ldw	ra,32(sp)
1000146c:	ddc00717 	ldw	r23,28(sp)
10001470:	dd800617 	ldw	r22,24(sp)
10001474:	dd400517 	ldw	r21,20(sp)
10001478:	dd000417 	ldw	r20,16(sp)
1000147c:	dcc00317 	ldw	r19,12(sp)
10001480:	dc800217 	ldw	r18,8(sp)
10001484:	dc400117 	ldw	r17,4(sp)
10001488:	dc000017 	ldw	r16,0(sp)
1000148c:	dec00904 	addi	sp,sp,36
10001490:	f800283a 	ret
10001494:	002f883a 	mov	r23,zero
10001498:	003ff206 	br	10001464 <__alt_data_end+0xf8001464>

1000149c <malloc>:
1000149c:	00840074 	movhi	r2,4097
100014a0:	10880a04 	addi	r2,r2,8232
100014a4:	200b883a 	mov	r5,r4
100014a8:	11000017 	ldw	r4,0(r2)
100014ac:	00014c41 	jmpi	100014c4 <_malloc_r>

100014b0 <free>:
100014b0:	00840074 	movhi	r2,4097
100014b4:	10880a04 	addi	r2,r2,8232
100014b8:	200b883a 	mov	r5,r4
100014bc:	11000017 	ldw	r4,0(r2)
100014c0:	00010041 	jmpi	10001004 <_free_r>

100014c4 <_malloc_r>:
100014c4:	defff504 	addi	sp,sp,-44
100014c8:	dc800315 	stw	r18,12(sp)
100014cc:	dfc00a15 	stw	ra,40(sp)
100014d0:	df000915 	stw	fp,36(sp)
100014d4:	ddc00815 	stw	r23,32(sp)
100014d8:	dd800715 	stw	r22,28(sp)
100014dc:	dd400615 	stw	r21,24(sp)
100014e0:	dd000515 	stw	r20,20(sp)
100014e4:	dcc00415 	stw	r19,16(sp)
100014e8:	dc400215 	stw	r17,8(sp)
100014ec:	dc000115 	stw	r16,4(sp)
100014f0:	288002c4 	addi	r2,r5,11
100014f4:	00c00584 	movi	r3,22
100014f8:	2025883a 	mov	r18,r4
100014fc:	18807f2e 	bgeu	r3,r2,100016fc <_malloc_r+0x238>
10001500:	047ffe04 	movi	r17,-8
10001504:	1462703a 	and	r17,r2,r17
10001508:	8800a316 	blt	r17,zero,10001798 <_malloc_r+0x2d4>
1000150c:	8940a236 	bltu	r17,r5,10001798 <_malloc_r+0x2d4>
10001510:	000e2080 	call	1000e208 <__malloc_lock>
10001514:	00807dc4 	movi	r2,503
10001518:	1441e92e 	bgeu	r2,r17,10001cc0 <_malloc_r+0x7fc>
1000151c:	8804d27a 	srli	r2,r17,9
10001520:	1000a126 	beq	r2,zero,100017a8 <_malloc_r+0x2e4>
10001524:	00c00104 	movi	r3,4
10001528:	18811e36 	bltu	r3,r2,100019a4 <_malloc_r+0x4e0>
1000152c:	8804d1ba 	srli	r2,r17,6
10001530:	12000e44 	addi	r8,r2,57
10001534:	11c00e04 	addi	r7,r2,56
10001538:	4209883a 	add	r4,r8,r8
1000153c:	04c40074 	movhi	r19,4097
10001540:	2109883a 	add	r4,r4,r4
10001544:	9cc26404 	addi	r19,r19,2448
10001548:	2109883a 	add	r4,r4,r4
1000154c:	9909883a 	add	r4,r19,r4
10001550:	24000117 	ldw	r16,4(r4)
10001554:	213ffe04 	addi	r4,r4,-8
10001558:	24009726 	beq	r4,r16,100017b8 <_malloc_r+0x2f4>
1000155c:	80800117 	ldw	r2,4(r16)
10001560:	01bfff04 	movi	r6,-4
10001564:	014003c4 	movi	r5,15
10001568:	1184703a 	and	r2,r2,r6
1000156c:	1447c83a 	sub	r3,r2,r17
10001570:	28c00716 	blt	r5,r3,10001590 <_malloc_r+0xcc>
10001574:	1800920e 	bge	r3,zero,100017c0 <_malloc_r+0x2fc>
10001578:	84000317 	ldw	r16,12(r16)
1000157c:	24008e26 	beq	r4,r16,100017b8 <_malloc_r+0x2f4>
10001580:	80800117 	ldw	r2,4(r16)
10001584:	1184703a 	and	r2,r2,r6
10001588:	1447c83a 	sub	r3,r2,r17
1000158c:	28fff90e 	bge	r5,r3,10001574 <__alt_data_end+0xf8001574>
10001590:	3809883a 	mov	r4,r7
10001594:	01840074 	movhi	r6,4097
10001598:	9c000417 	ldw	r16,16(r19)
1000159c:	31826404 	addi	r6,r6,2448
100015a0:	32000204 	addi	r8,r6,8
100015a4:	82013426 	beq	r16,r8,10001a78 <_malloc_r+0x5b4>
100015a8:	80c00117 	ldw	r3,4(r16)
100015ac:	00bfff04 	movi	r2,-4
100015b0:	188e703a 	and	r7,r3,r2
100015b4:	3c45c83a 	sub	r2,r7,r17
100015b8:	00c003c4 	movi	r3,15
100015bc:	18811f16 	blt	r3,r2,10001a3c <_malloc_r+0x578>
100015c0:	32000515 	stw	r8,20(r6)
100015c4:	32000415 	stw	r8,16(r6)
100015c8:	10007f0e 	bge	r2,zero,100017c8 <_malloc_r+0x304>
100015cc:	00807fc4 	movi	r2,511
100015d0:	11c0fd36 	bltu	r2,r7,100019c8 <_malloc_r+0x504>
100015d4:	3806d0fa 	srli	r3,r7,3
100015d8:	01c00044 	movi	r7,1
100015dc:	30800117 	ldw	r2,4(r6)
100015e0:	19400044 	addi	r5,r3,1
100015e4:	294b883a 	add	r5,r5,r5
100015e8:	1807d0ba 	srai	r3,r3,2
100015ec:	294b883a 	add	r5,r5,r5
100015f0:	294b883a 	add	r5,r5,r5
100015f4:	298b883a 	add	r5,r5,r6
100015f8:	38c6983a 	sll	r3,r7,r3
100015fc:	29c00017 	ldw	r7,0(r5)
10001600:	2a7ffe04 	addi	r9,r5,-8
10001604:	1886b03a 	or	r3,r3,r2
10001608:	82400315 	stw	r9,12(r16)
1000160c:	81c00215 	stw	r7,8(r16)
10001610:	30c00115 	stw	r3,4(r6)
10001614:	2c000015 	stw	r16,0(r5)
10001618:	3c000315 	stw	r16,12(r7)
1000161c:	2005d0ba 	srai	r2,r4,2
10001620:	01400044 	movi	r5,1
10001624:	288a983a 	sll	r5,r5,r2
10001628:	19406f36 	bltu	r3,r5,100017e8 <_malloc_r+0x324>
1000162c:	28c4703a 	and	r2,r5,r3
10001630:	10000a1e 	bne	r2,zero,1000165c <_malloc_r+0x198>
10001634:	00bfff04 	movi	r2,-4
10001638:	294b883a 	add	r5,r5,r5
1000163c:	2088703a 	and	r4,r4,r2
10001640:	28c4703a 	and	r2,r5,r3
10001644:	21000104 	addi	r4,r4,4
10001648:	1000041e 	bne	r2,zero,1000165c <_malloc_r+0x198>
1000164c:	294b883a 	add	r5,r5,r5
10001650:	28c4703a 	and	r2,r5,r3
10001654:	21000104 	addi	r4,r4,4
10001658:	103ffc26 	beq	r2,zero,1000164c <__alt_data_end+0xf800164c>
1000165c:	02bfff04 	movi	r10,-4
10001660:	024003c4 	movi	r9,15
10001664:	21800044 	addi	r6,r4,1
10001668:	318d883a 	add	r6,r6,r6
1000166c:	318d883a 	add	r6,r6,r6
10001670:	318d883a 	add	r6,r6,r6
10001674:	998d883a 	add	r6,r19,r6
10001678:	333ffe04 	addi	r12,r6,-8
1000167c:	2017883a 	mov	r11,r4
10001680:	31800104 	addi	r6,r6,4
10001684:	34000017 	ldw	r16,0(r6)
10001688:	31fffd04 	addi	r7,r6,-12
1000168c:	81c0041e 	bne	r16,r7,100016a0 <_malloc_r+0x1dc>
10001690:	0000fb06 	br	10001a80 <_malloc_r+0x5bc>
10001694:	1801030e 	bge	r3,zero,10001aa4 <_malloc_r+0x5e0>
10001698:	84000317 	ldw	r16,12(r16)
1000169c:	81c0f826 	beq	r16,r7,10001a80 <_malloc_r+0x5bc>
100016a0:	80800117 	ldw	r2,4(r16)
100016a4:	1284703a 	and	r2,r2,r10
100016a8:	1447c83a 	sub	r3,r2,r17
100016ac:	48fff90e 	bge	r9,r3,10001694 <__alt_data_end+0xf8001694>
100016b0:	80800317 	ldw	r2,12(r16)
100016b4:	81000217 	ldw	r4,8(r16)
100016b8:	89400054 	ori	r5,r17,1
100016bc:	81400115 	stw	r5,4(r16)
100016c0:	20800315 	stw	r2,12(r4)
100016c4:	11000215 	stw	r4,8(r2)
100016c8:	8463883a 	add	r17,r16,r17
100016cc:	9c400515 	stw	r17,20(r19)
100016d0:	9c400415 	stw	r17,16(r19)
100016d4:	18800054 	ori	r2,r3,1
100016d8:	88800115 	stw	r2,4(r17)
100016dc:	8a000315 	stw	r8,12(r17)
100016e0:	8a000215 	stw	r8,8(r17)
100016e4:	88e3883a 	add	r17,r17,r3
100016e8:	88c00015 	stw	r3,0(r17)
100016ec:	9009883a 	mov	r4,r18
100016f0:	000e22c0 	call	1000e22c <__malloc_unlock>
100016f4:	80800204 	addi	r2,r16,8
100016f8:	00001b06 	br	10001768 <_malloc_r+0x2a4>
100016fc:	04400404 	movi	r17,16
10001700:	89402536 	bltu	r17,r5,10001798 <_malloc_r+0x2d4>
10001704:	000e2080 	call	1000e208 <__malloc_lock>
10001708:	00800184 	movi	r2,6
1000170c:	01000084 	movi	r4,2
10001710:	04c40074 	movhi	r19,4097
10001714:	1085883a 	add	r2,r2,r2
10001718:	9cc26404 	addi	r19,r19,2448
1000171c:	1085883a 	add	r2,r2,r2
10001720:	9885883a 	add	r2,r19,r2
10001724:	14000117 	ldw	r16,4(r2)
10001728:	10fffe04 	addi	r3,r2,-8
1000172c:	80c0d926 	beq	r16,r3,10001a94 <_malloc_r+0x5d0>
10001730:	80c00117 	ldw	r3,4(r16)
10001734:	81000317 	ldw	r4,12(r16)
10001738:	00bfff04 	movi	r2,-4
1000173c:	1884703a 	and	r2,r3,r2
10001740:	81400217 	ldw	r5,8(r16)
10001744:	8085883a 	add	r2,r16,r2
10001748:	10c00117 	ldw	r3,4(r2)
1000174c:	29000315 	stw	r4,12(r5)
10001750:	21400215 	stw	r5,8(r4)
10001754:	18c00054 	ori	r3,r3,1
10001758:	10c00115 	stw	r3,4(r2)
1000175c:	9009883a 	mov	r4,r18
10001760:	000e22c0 	call	1000e22c <__malloc_unlock>
10001764:	80800204 	addi	r2,r16,8
10001768:	dfc00a17 	ldw	ra,40(sp)
1000176c:	df000917 	ldw	fp,36(sp)
10001770:	ddc00817 	ldw	r23,32(sp)
10001774:	dd800717 	ldw	r22,28(sp)
10001778:	dd400617 	ldw	r21,24(sp)
1000177c:	dd000517 	ldw	r20,20(sp)
10001780:	dcc00417 	ldw	r19,16(sp)
10001784:	dc800317 	ldw	r18,12(sp)
10001788:	dc400217 	ldw	r17,8(sp)
1000178c:	dc000117 	ldw	r16,4(sp)
10001790:	dec00b04 	addi	sp,sp,44
10001794:	f800283a 	ret
10001798:	00800304 	movi	r2,12
1000179c:	90800015 	stw	r2,0(r18)
100017a0:	0005883a 	mov	r2,zero
100017a4:	003ff006 	br	10001768 <__alt_data_end+0xf8001768>
100017a8:	01002004 	movi	r4,128
100017ac:	02001004 	movi	r8,64
100017b0:	01c00fc4 	movi	r7,63
100017b4:	003f6106 	br	1000153c <__alt_data_end+0xf800153c>
100017b8:	4009883a 	mov	r4,r8
100017bc:	003f7506 	br	10001594 <__alt_data_end+0xf8001594>
100017c0:	81000317 	ldw	r4,12(r16)
100017c4:	003fde06 	br	10001740 <__alt_data_end+0xf8001740>
100017c8:	81c5883a 	add	r2,r16,r7
100017cc:	11400117 	ldw	r5,4(r2)
100017d0:	9009883a 	mov	r4,r18
100017d4:	29400054 	ori	r5,r5,1
100017d8:	11400115 	stw	r5,4(r2)
100017dc:	000e22c0 	call	1000e22c <__malloc_unlock>
100017e0:	80800204 	addi	r2,r16,8
100017e4:	003fe006 	br	10001768 <__alt_data_end+0xf8001768>
100017e8:	9c000217 	ldw	r16,8(r19)
100017ec:	00bfff04 	movi	r2,-4
100017f0:	85800117 	ldw	r22,4(r16)
100017f4:	b0ac703a 	and	r22,r22,r2
100017f8:	b4400336 	bltu	r22,r17,10001808 <_malloc_r+0x344>
100017fc:	b445c83a 	sub	r2,r22,r17
10001800:	00c003c4 	movi	r3,15
10001804:	18805d16 	blt	r3,r2,1000197c <_malloc_r+0x4b8>
10001808:	05c40074 	movhi	r23,4097
1000180c:	00840074 	movhi	r2,4097
10001810:	108eda04 	addi	r2,r2,15208
10001814:	bdc80b04 	addi	r23,r23,8236
10001818:	15400017 	ldw	r21,0(r2)
1000181c:	b8c00017 	ldw	r3,0(r23)
10001820:	00bfffc4 	movi	r2,-1
10001824:	858d883a 	add	r6,r16,r22
10001828:	8d6b883a 	add	r21,r17,r21
1000182c:	1880ea26 	beq	r3,r2,10001bd8 <_malloc_r+0x714>
10001830:	ad4403c4 	addi	r21,r21,4111
10001834:	00bc0004 	movi	r2,-4096
10001838:	a8aa703a 	and	r21,r21,r2
1000183c:	a80b883a 	mov	r5,r21
10001840:	9009883a 	mov	r4,r18
10001844:	d9800015 	stw	r6,0(sp)
10001848:	0001fcc0 	call	10001fcc <_sbrk_r>
1000184c:	1029883a 	mov	r20,r2
10001850:	00bfffc4 	movi	r2,-1
10001854:	d9800017 	ldw	r6,0(sp)
10001858:	a080e826 	beq	r20,r2,10001bfc <_malloc_r+0x738>
1000185c:	a180a636 	bltu	r20,r6,10001af8 <_malloc_r+0x634>
10001860:	07040074 	movhi	fp,4097
10001864:	e70ee604 	addi	fp,fp,15256
10001868:	e0800017 	ldw	r2,0(fp)
1000186c:	a887883a 	add	r3,r21,r2
10001870:	e0c00015 	stw	r3,0(fp)
10001874:	3500e626 	beq	r6,r20,10001c10 <_malloc_r+0x74c>
10001878:	b9000017 	ldw	r4,0(r23)
1000187c:	00bfffc4 	movi	r2,-1
10001880:	2080ee26 	beq	r4,r2,10001c3c <_malloc_r+0x778>
10001884:	a185c83a 	sub	r2,r20,r6
10001888:	10c5883a 	add	r2,r2,r3
1000188c:	e0800015 	stw	r2,0(fp)
10001890:	a0c001cc 	andi	r3,r20,7
10001894:	1800bc26 	beq	r3,zero,10001b88 <_malloc_r+0x6c4>
10001898:	a0e9c83a 	sub	r20,r20,r3
1000189c:	00840204 	movi	r2,4104
100018a0:	a5000204 	addi	r20,r20,8
100018a4:	10c7c83a 	sub	r3,r2,r3
100018a8:	a545883a 	add	r2,r20,r21
100018ac:	1083ffcc 	andi	r2,r2,4095
100018b0:	18abc83a 	sub	r21,r3,r2
100018b4:	a80b883a 	mov	r5,r21
100018b8:	9009883a 	mov	r4,r18
100018bc:	0001fcc0 	call	10001fcc <_sbrk_r>
100018c0:	00ffffc4 	movi	r3,-1
100018c4:	10c0e126 	beq	r2,r3,10001c4c <_malloc_r+0x788>
100018c8:	1505c83a 	sub	r2,r2,r20
100018cc:	1545883a 	add	r2,r2,r21
100018d0:	10800054 	ori	r2,r2,1
100018d4:	e0c00017 	ldw	r3,0(fp)
100018d8:	9d000215 	stw	r20,8(r19)
100018dc:	a0800115 	stw	r2,4(r20)
100018e0:	a8c7883a 	add	r3,r21,r3
100018e4:	e0c00015 	stw	r3,0(fp)
100018e8:	84c00e26 	beq	r16,r19,10001924 <_malloc_r+0x460>
100018ec:	018003c4 	movi	r6,15
100018f0:	3580a72e 	bgeu	r6,r22,10001b90 <_malloc_r+0x6cc>
100018f4:	81400117 	ldw	r5,4(r16)
100018f8:	013ffe04 	movi	r4,-8
100018fc:	b0bffd04 	addi	r2,r22,-12
10001900:	1104703a 	and	r2,r2,r4
10001904:	2900004c 	andi	r4,r5,1
10001908:	2088b03a 	or	r4,r4,r2
1000190c:	81000115 	stw	r4,4(r16)
10001910:	01400144 	movi	r5,5
10001914:	8089883a 	add	r4,r16,r2
10001918:	21400115 	stw	r5,4(r4)
1000191c:	21400215 	stw	r5,8(r4)
10001920:	3080cd36 	bltu	r6,r2,10001c58 <_malloc_r+0x794>
10001924:	00840074 	movhi	r2,4097
10001928:	108ed904 	addi	r2,r2,15204
1000192c:	11000017 	ldw	r4,0(r2)
10001930:	20c0012e 	bgeu	r4,r3,10001938 <_malloc_r+0x474>
10001934:	10c00015 	stw	r3,0(r2)
10001938:	00840074 	movhi	r2,4097
1000193c:	108ed804 	addi	r2,r2,15200
10001940:	11000017 	ldw	r4,0(r2)
10001944:	9c000217 	ldw	r16,8(r19)
10001948:	20c0012e 	bgeu	r4,r3,10001950 <_malloc_r+0x48c>
1000194c:	10c00015 	stw	r3,0(r2)
10001950:	80c00117 	ldw	r3,4(r16)
10001954:	00bfff04 	movi	r2,-4
10001958:	1886703a 	and	r3,r3,r2
1000195c:	1c45c83a 	sub	r2,r3,r17
10001960:	1c400236 	bltu	r3,r17,1000196c <_malloc_r+0x4a8>
10001964:	00c003c4 	movi	r3,15
10001968:	18800416 	blt	r3,r2,1000197c <_malloc_r+0x4b8>
1000196c:	9009883a 	mov	r4,r18
10001970:	000e22c0 	call	1000e22c <__malloc_unlock>
10001974:	0005883a 	mov	r2,zero
10001978:	003f7b06 	br	10001768 <__alt_data_end+0xf8001768>
1000197c:	88c00054 	ori	r3,r17,1
10001980:	80c00115 	stw	r3,4(r16)
10001984:	8463883a 	add	r17,r16,r17
10001988:	10800054 	ori	r2,r2,1
1000198c:	9c400215 	stw	r17,8(r19)
10001990:	88800115 	stw	r2,4(r17)
10001994:	9009883a 	mov	r4,r18
10001998:	000e22c0 	call	1000e22c <__malloc_unlock>
1000199c:	80800204 	addi	r2,r16,8
100019a0:	003f7106 	br	10001768 <__alt_data_end+0xf8001768>
100019a4:	00c00504 	movi	r3,20
100019a8:	18804a2e 	bgeu	r3,r2,10001ad4 <_malloc_r+0x610>
100019ac:	00c01504 	movi	r3,84
100019b0:	18806e36 	bltu	r3,r2,10001b6c <_malloc_r+0x6a8>
100019b4:	8804d33a 	srli	r2,r17,12
100019b8:	12001bc4 	addi	r8,r2,111
100019bc:	11c01b84 	addi	r7,r2,110
100019c0:	4209883a 	add	r4,r8,r8
100019c4:	003edd06 	br	1000153c <__alt_data_end+0xf800153c>
100019c8:	3804d27a 	srli	r2,r7,9
100019cc:	00c00104 	movi	r3,4
100019d0:	1880442e 	bgeu	r3,r2,10001ae4 <_malloc_r+0x620>
100019d4:	00c00504 	movi	r3,20
100019d8:	18808136 	bltu	r3,r2,10001be0 <_malloc_r+0x71c>
100019dc:	11401704 	addi	r5,r2,92
100019e0:	10c016c4 	addi	r3,r2,91
100019e4:	294b883a 	add	r5,r5,r5
100019e8:	294b883a 	add	r5,r5,r5
100019ec:	294b883a 	add	r5,r5,r5
100019f0:	994b883a 	add	r5,r19,r5
100019f4:	28800017 	ldw	r2,0(r5)
100019f8:	01840074 	movhi	r6,4097
100019fc:	297ffe04 	addi	r5,r5,-8
10001a00:	31826404 	addi	r6,r6,2448
10001a04:	28806526 	beq	r5,r2,10001b9c <_malloc_r+0x6d8>
10001a08:	01bfff04 	movi	r6,-4
10001a0c:	10c00117 	ldw	r3,4(r2)
10001a10:	1986703a 	and	r3,r3,r6
10001a14:	38c0022e 	bgeu	r7,r3,10001a20 <_malloc_r+0x55c>
10001a18:	10800217 	ldw	r2,8(r2)
10001a1c:	28bffb1e 	bne	r5,r2,10001a0c <__alt_data_end+0xf8001a0c>
10001a20:	11400317 	ldw	r5,12(r2)
10001a24:	98c00117 	ldw	r3,4(r19)
10001a28:	81400315 	stw	r5,12(r16)
10001a2c:	80800215 	stw	r2,8(r16)
10001a30:	2c000215 	stw	r16,8(r5)
10001a34:	14000315 	stw	r16,12(r2)
10001a38:	003ef806 	br	1000161c <__alt_data_end+0xf800161c>
10001a3c:	88c00054 	ori	r3,r17,1
10001a40:	80c00115 	stw	r3,4(r16)
10001a44:	8463883a 	add	r17,r16,r17
10001a48:	34400515 	stw	r17,20(r6)
10001a4c:	34400415 	stw	r17,16(r6)
10001a50:	10c00054 	ori	r3,r2,1
10001a54:	8a000315 	stw	r8,12(r17)
10001a58:	8a000215 	stw	r8,8(r17)
10001a5c:	88c00115 	stw	r3,4(r17)
10001a60:	88a3883a 	add	r17,r17,r2
10001a64:	88800015 	stw	r2,0(r17)
10001a68:	9009883a 	mov	r4,r18
10001a6c:	000e22c0 	call	1000e22c <__malloc_unlock>
10001a70:	80800204 	addi	r2,r16,8
10001a74:	003f3c06 	br	10001768 <__alt_data_end+0xf8001768>
10001a78:	30c00117 	ldw	r3,4(r6)
10001a7c:	003ee706 	br	1000161c <__alt_data_end+0xf800161c>
10001a80:	5ac00044 	addi	r11,r11,1
10001a84:	588000cc 	andi	r2,r11,3
10001a88:	31800204 	addi	r6,r6,8
10001a8c:	103efd1e 	bne	r2,zero,10001684 <__alt_data_end+0xf8001684>
10001a90:	00002406 	br	10001b24 <_malloc_r+0x660>
10001a94:	14000317 	ldw	r16,12(r2)
10001a98:	143f251e 	bne	r2,r16,10001730 <__alt_data_end+0xf8001730>
10001a9c:	21000084 	addi	r4,r4,2
10001aa0:	003ebc06 	br	10001594 <__alt_data_end+0xf8001594>
10001aa4:	8085883a 	add	r2,r16,r2
10001aa8:	10c00117 	ldw	r3,4(r2)
10001aac:	81000317 	ldw	r4,12(r16)
10001ab0:	81400217 	ldw	r5,8(r16)
10001ab4:	18c00054 	ori	r3,r3,1
10001ab8:	10c00115 	stw	r3,4(r2)
10001abc:	29000315 	stw	r4,12(r5)
10001ac0:	21400215 	stw	r5,8(r4)
10001ac4:	9009883a 	mov	r4,r18
10001ac8:	000e22c0 	call	1000e22c <__malloc_unlock>
10001acc:	80800204 	addi	r2,r16,8
10001ad0:	003f2506 	br	10001768 <__alt_data_end+0xf8001768>
10001ad4:	12001704 	addi	r8,r2,92
10001ad8:	11c016c4 	addi	r7,r2,91
10001adc:	4209883a 	add	r4,r8,r8
10001ae0:	003e9606 	br	1000153c <__alt_data_end+0xf800153c>
10001ae4:	3804d1ba 	srli	r2,r7,6
10001ae8:	11400e44 	addi	r5,r2,57
10001aec:	10c00e04 	addi	r3,r2,56
10001af0:	294b883a 	add	r5,r5,r5
10001af4:	003fbc06 	br	100019e8 <__alt_data_end+0xf80019e8>
10001af8:	84ff5926 	beq	r16,r19,10001860 <__alt_data_end+0xf8001860>
10001afc:	00840074 	movhi	r2,4097
10001b00:	10826404 	addi	r2,r2,2448
10001b04:	14000217 	ldw	r16,8(r2)
10001b08:	00bfff04 	movi	r2,-4
10001b0c:	80c00117 	ldw	r3,4(r16)
10001b10:	1886703a 	and	r3,r3,r2
10001b14:	003f9106 	br	1000195c <__alt_data_end+0xf800195c>
10001b18:	60800217 	ldw	r2,8(r12)
10001b1c:	213fffc4 	addi	r4,r4,-1
10001b20:	1300651e 	bne	r2,r12,10001cb8 <_malloc_r+0x7f4>
10001b24:	208000cc 	andi	r2,r4,3
10001b28:	633ffe04 	addi	r12,r12,-8
10001b2c:	103ffa1e 	bne	r2,zero,10001b18 <__alt_data_end+0xf8001b18>
10001b30:	98800117 	ldw	r2,4(r19)
10001b34:	0146303a 	nor	r3,zero,r5
10001b38:	1884703a 	and	r2,r3,r2
10001b3c:	98800115 	stw	r2,4(r19)
10001b40:	294b883a 	add	r5,r5,r5
10001b44:	117f2836 	bltu	r2,r5,100017e8 <__alt_data_end+0xf80017e8>
10001b48:	283f2726 	beq	r5,zero,100017e8 <__alt_data_end+0xf80017e8>
10001b4c:	2886703a 	and	r3,r5,r2
10001b50:	5809883a 	mov	r4,r11
10001b54:	183ec31e 	bne	r3,zero,10001664 <__alt_data_end+0xf8001664>
10001b58:	294b883a 	add	r5,r5,r5
10001b5c:	2886703a 	and	r3,r5,r2
10001b60:	21000104 	addi	r4,r4,4
10001b64:	183ffc26 	beq	r3,zero,10001b58 <__alt_data_end+0xf8001b58>
10001b68:	003ebe06 	br	10001664 <__alt_data_end+0xf8001664>
10001b6c:	00c05504 	movi	r3,340
10001b70:	18801236 	bltu	r3,r2,10001bbc <_malloc_r+0x6f8>
10001b74:	8804d3fa 	srli	r2,r17,15
10001b78:	12001e04 	addi	r8,r2,120
10001b7c:	11c01dc4 	addi	r7,r2,119
10001b80:	4209883a 	add	r4,r8,r8
10001b84:	003e6d06 	br	1000153c <__alt_data_end+0xf800153c>
10001b88:	00c40004 	movi	r3,4096
10001b8c:	003f4606 	br	100018a8 <__alt_data_end+0xf80018a8>
10001b90:	00800044 	movi	r2,1
10001b94:	a0800115 	stw	r2,4(r20)
10001b98:	003f7406 	br	1000196c <__alt_data_end+0xf800196c>
10001b9c:	1805d0ba 	srai	r2,r3,2
10001ba0:	01c00044 	movi	r7,1
10001ba4:	30c00117 	ldw	r3,4(r6)
10001ba8:	388e983a 	sll	r7,r7,r2
10001bac:	2805883a 	mov	r2,r5
10001bb0:	38c6b03a 	or	r3,r7,r3
10001bb4:	30c00115 	stw	r3,4(r6)
10001bb8:	003f9b06 	br	10001a28 <__alt_data_end+0xf8001a28>
10001bbc:	00c15504 	movi	r3,1364
10001bc0:	18801a36 	bltu	r3,r2,10001c2c <_malloc_r+0x768>
10001bc4:	8804d4ba 	srli	r2,r17,18
10001bc8:	12001f44 	addi	r8,r2,125
10001bcc:	11c01f04 	addi	r7,r2,124
10001bd0:	4209883a 	add	r4,r8,r8
10001bd4:	003e5906 	br	1000153c <__alt_data_end+0xf800153c>
10001bd8:	ad400404 	addi	r21,r21,16
10001bdc:	003f1706 	br	1000183c <__alt_data_end+0xf800183c>
10001be0:	00c01504 	movi	r3,84
10001be4:	18802336 	bltu	r3,r2,10001c74 <_malloc_r+0x7b0>
10001be8:	3804d33a 	srli	r2,r7,12
10001bec:	11401bc4 	addi	r5,r2,111
10001bf0:	10c01b84 	addi	r3,r2,110
10001bf4:	294b883a 	add	r5,r5,r5
10001bf8:	003f7b06 	br	100019e8 <__alt_data_end+0xf80019e8>
10001bfc:	9c000217 	ldw	r16,8(r19)
10001c00:	00bfff04 	movi	r2,-4
10001c04:	80c00117 	ldw	r3,4(r16)
10001c08:	1886703a 	and	r3,r3,r2
10001c0c:	003f5306 	br	1000195c <__alt_data_end+0xf800195c>
10001c10:	3083ffcc 	andi	r2,r6,4095
10001c14:	103f181e 	bne	r2,zero,10001878 <__alt_data_end+0xf8001878>
10001c18:	99000217 	ldw	r4,8(r19)
10001c1c:	b545883a 	add	r2,r22,r21
10001c20:	10800054 	ori	r2,r2,1
10001c24:	20800115 	stw	r2,4(r4)
10001c28:	003f3e06 	br	10001924 <__alt_data_end+0xf8001924>
10001c2c:	01003f84 	movi	r4,254
10001c30:	02001fc4 	movi	r8,127
10001c34:	01c01f84 	movi	r7,126
10001c38:	003e4006 	br	1000153c <__alt_data_end+0xf800153c>
10001c3c:	00840074 	movhi	r2,4097
10001c40:	10880b04 	addi	r2,r2,8236
10001c44:	15000015 	stw	r20,0(r2)
10001c48:	003f1106 	br	10001890 <__alt_data_end+0xf8001890>
10001c4c:	00800044 	movi	r2,1
10001c50:	002b883a 	mov	r21,zero
10001c54:	003f1f06 	br	100018d4 <__alt_data_end+0xf80018d4>
10001c58:	81400204 	addi	r5,r16,8
10001c5c:	9009883a 	mov	r4,r18
10001c60:	00010040 	call	10001004 <_free_r>
10001c64:	00840074 	movhi	r2,4097
10001c68:	108ee604 	addi	r2,r2,15256
10001c6c:	10c00017 	ldw	r3,0(r2)
10001c70:	003f2c06 	br	10001924 <__alt_data_end+0xf8001924>
10001c74:	00c05504 	movi	r3,340
10001c78:	18800536 	bltu	r3,r2,10001c90 <_malloc_r+0x7cc>
10001c7c:	3804d3fa 	srli	r2,r7,15
10001c80:	11401e04 	addi	r5,r2,120
10001c84:	10c01dc4 	addi	r3,r2,119
10001c88:	294b883a 	add	r5,r5,r5
10001c8c:	003f5606 	br	100019e8 <__alt_data_end+0xf80019e8>
10001c90:	00c15504 	movi	r3,1364
10001c94:	18800536 	bltu	r3,r2,10001cac <_malloc_r+0x7e8>
10001c98:	3804d4ba 	srli	r2,r7,18
10001c9c:	11401f44 	addi	r5,r2,125
10001ca0:	10c01f04 	addi	r3,r2,124
10001ca4:	294b883a 	add	r5,r5,r5
10001ca8:	003f4f06 	br	100019e8 <__alt_data_end+0xf80019e8>
10001cac:	01403f84 	movi	r5,254
10001cb0:	00c01f84 	movi	r3,126
10001cb4:	003f4c06 	br	100019e8 <__alt_data_end+0xf80019e8>
10001cb8:	98800117 	ldw	r2,4(r19)
10001cbc:	003fa006 	br	10001b40 <__alt_data_end+0xf8001b40>
10001cc0:	8808d0fa 	srli	r4,r17,3
10001cc4:	20800044 	addi	r2,r4,1
10001cc8:	1085883a 	add	r2,r2,r2
10001ccc:	003e9006 	br	10001710 <__alt_data_end+0xf8001710>

10001cd0 <memcpy>:
10001cd0:	defffd04 	addi	sp,sp,-12
10001cd4:	dfc00215 	stw	ra,8(sp)
10001cd8:	dc400115 	stw	r17,4(sp)
10001cdc:	dc000015 	stw	r16,0(sp)
10001ce0:	00c003c4 	movi	r3,15
10001ce4:	2005883a 	mov	r2,r4
10001ce8:	1980452e 	bgeu	r3,r6,10001e00 <memcpy+0x130>
10001cec:	2906b03a 	or	r3,r5,r4
10001cf0:	18c000cc 	andi	r3,r3,3
10001cf4:	1800441e 	bne	r3,zero,10001e08 <memcpy+0x138>
10001cf8:	347ffc04 	addi	r17,r6,-16
10001cfc:	8822d13a 	srli	r17,r17,4
10001d00:	28c00104 	addi	r3,r5,4
10001d04:	23400104 	addi	r13,r4,4
10001d08:	8820913a 	slli	r16,r17,4
10001d0c:	2b000204 	addi	r12,r5,8
10001d10:	22c00204 	addi	r11,r4,8
10001d14:	84000504 	addi	r16,r16,20
10001d18:	2a800304 	addi	r10,r5,12
10001d1c:	22400304 	addi	r9,r4,12
10001d20:	2c21883a 	add	r16,r5,r16
10001d24:	2811883a 	mov	r8,r5
10001d28:	200f883a 	mov	r7,r4
10001d2c:	41000017 	ldw	r4,0(r8)
10001d30:	1fc00017 	ldw	ra,0(r3)
10001d34:	63c00017 	ldw	r15,0(r12)
10001d38:	39000015 	stw	r4,0(r7)
10001d3c:	53800017 	ldw	r14,0(r10)
10001d40:	6fc00015 	stw	ra,0(r13)
10001d44:	5bc00015 	stw	r15,0(r11)
10001d48:	4b800015 	stw	r14,0(r9)
10001d4c:	18c00404 	addi	r3,r3,16
10001d50:	39c00404 	addi	r7,r7,16
10001d54:	42000404 	addi	r8,r8,16
10001d58:	6b400404 	addi	r13,r13,16
10001d5c:	63000404 	addi	r12,r12,16
10001d60:	5ac00404 	addi	r11,r11,16
10001d64:	52800404 	addi	r10,r10,16
10001d68:	4a400404 	addi	r9,r9,16
10001d6c:	1c3fef1e 	bne	r3,r16,10001d2c <__alt_data_end+0xf8001d2c>
10001d70:	89c00044 	addi	r7,r17,1
10001d74:	380e913a 	slli	r7,r7,4
10001d78:	310003cc 	andi	r4,r6,15
10001d7c:	02c000c4 	movi	r11,3
10001d80:	11c7883a 	add	r3,r2,r7
10001d84:	29cb883a 	add	r5,r5,r7
10001d88:	5900212e 	bgeu	r11,r4,10001e10 <memcpy+0x140>
10001d8c:	1813883a 	mov	r9,r3
10001d90:	2811883a 	mov	r8,r5
10001d94:	200f883a 	mov	r7,r4
10001d98:	42800017 	ldw	r10,0(r8)
10001d9c:	4a400104 	addi	r9,r9,4
10001da0:	39ffff04 	addi	r7,r7,-4
10001da4:	4abfff15 	stw	r10,-4(r9)
10001da8:	42000104 	addi	r8,r8,4
10001dac:	59fffa36 	bltu	r11,r7,10001d98 <__alt_data_end+0xf8001d98>
10001db0:	213fff04 	addi	r4,r4,-4
10001db4:	2008d0ba 	srli	r4,r4,2
10001db8:	318000cc 	andi	r6,r6,3
10001dbc:	21000044 	addi	r4,r4,1
10001dc0:	2109883a 	add	r4,r4,r4
10001dc4:	2109883a 	add	r4,r4,r4
10001dc8:	1907883a 	add	r3,r3,r4
10001dcc:	290b883a 	add	r5,r5,r4
10001dd0:	30000626 	beq	r6,zero,10001dec <memcpy+0x11c>
10001dd4:	198d883a 	add	r6,r3,r6
10001dd8:	29c00003 	ldbu	r7,0(r5)
10001ddc:	18c00044 	addi	r3,r3,1
10001de0:	29400044 	addi	r5,r5,1
10001de4:	19ffffc5 	stb	r7,-1(r3)
10001de8:	19bffb1e 	bne	r3,r6,10001dd8 <__alt_data_end+0xf8001dd8>
10001dec:	dfc00217 	ldw	ra,8(sp)
10001df0:	dc400117 	ldw	r17,4(sp)
10001df4:	dc000017 	ldw	r16,0(sp)
10001df8:	dec00304 	addi	sp,sp,12
10001dfc:	f800283a 	ret
10001e00:	2007883a 	mov	r3,r4
10001e04:	003ff206 	br	10001dd0 <__alt_data_end+0xf8001dd0>
10001e08:	2007883a 	mov	r3,r4
10001e0c:	003ff106 	br	10001dd4 <__alt_data_end+0xf8001dd4>
10001e10:	200d883a 	mov	r6,r4
10001e14:	003fee06 	br	10001dd0 <__alt_data_end+0xf8001dd0>

10001e18 <memset>:
10001e18:	20c000cc 	andi	r3,r4,3
10001e1c:	2005883a 	mov	r2,r4
10001e20:	18004426 	beq	r3,zero,10001f34 <memset+0x11c>
10001e24:	31ffffc4 	addi	r7,r6,-1
10001e28:	30004026 	beq	r6,zero,10001f2c <memset+0x114>
10001e2c:	2813883a 	mov	r9,r5
10001e30:	200d883a 	mov	r6,r4
10001e34:	2007883a 	mov	r3,r4
10001e38:	00000406 	br	10001e4c <memset+0x34>
10001e3c:	3a3fffc4 	addi	r8,r7,-1
10001e40:	31800044 	addi	r6,r6,1
10001e44:	38003926 	beq	r7,zero,10001f2c <memset+0x114>
10001e48:	400f883a 	mov	r7,r8
10001e4c:	18c00044 	addi	r3,r3,1
10001e50:	32400005 	stb	r9,0(r6)
10001e54:	1a0000cc 	andi	r8,r3,3
10001e58:	403ff81e 	bne	r8,zero,10001e3c <__alt_data_end+0xf8001e3c>
10001e5c:	010000c4 	movi	r4,3
10001e60:	21c02d2e 	bgeu	r4,r7,10001f18 <memset+0x100>
10001e64:	29003fcc 	andi	r4,r5,255
10001e68:	200c923a 	slli	r6,r4,8
10001e6c:	3108b03a 	or	r4,r6,r4
10001e70:	200c943a 	slli	r6,r4,16
10001e74:	218cb03a 	or	r6,r4,r6
10001e78:	010003c4 	movi	r4,15
10001e7c:	21c0182e 	bgeu	r4,r7,10001ee0 <memset+0xc8>
10001e80:	3b3ffc04 	addi	r12,r7,-16
10001e84:	6018d13a 	srli	r12,r12,4
10001e88:	1a000104 	addi	r8,r3,4
10001e8c:	1ac00204 	addi	r11,r3,8
10001e90:	6008913a 	slli	r4,r12,4
10001e94:	1a800304 	addi	r10,r3,12
10001e98:	1813883a 	mov	r9,r3
10001e9c:	21000504 	addi	r4,r4,20
10001ea0:	1909883a 	add	r4,r3,r4
10001ea4:	49800015 	stw	r6,0(r9)
10001ea8:	41800015 	stw	r6,0(r8)
10001eac:	59800015 	stw	r6,0(r11)
10001eb0:	51800015 	stw	r6,0(r10)
10001eb4:	42000404 	addi	r8,r8,16
10001eb8:	4a400404 	addi	r9,r9,16
10001ebc:	5ac00404 	addi	r11,r11,16
10001ec0:	52800404 	addi	r10,r10,16
10001ec4:	413ff71e 	bne	r8,r4,10001ea4 <__alt_data_end+0xf8001ea4>
10001ec8:	63000044 	addi	r12,r12,1
10001ecc:	6018913a 	slli	r12,r12,4
10001ed0:	39c003cc 	andi	r7,r7,15
10001ed4:	010000c4 	movi	r4,3
10001ed8:	1b07883a 	add	r3,r3,r12
10001edc:	21c00e2e 	bgeu	r4,r7,10001f18 <memset+0x100>
10001ee0:	1813883a 	mov	r9,r3
10001ee4:	3811883a 	mov	r8,r7
10001ee8:	010000c4 	movi	r4,3
10001eec:	49800015 	stw	r6,0(r9)
10001ef0:	423fff04 	addi	r8,r8,-4
10001ef4:	4a400104 	addi	r9,r9,4
10001ef8:	223ffc36 	bltu	r4,r8,10001eec <__alt_data_end+0xf8001eec>
10001efc:	393fff04 	addi	r4,r7,-4
10001f00:	2008d0ba 	srli	r4,r4,2
10001f04:	39c000cc 	andi	r7,r7,3
10001f08:	21000044 	addi	r4,r4,1
10001f0c:	2109883a 	add	r4,r4,r4
10001f10:	2109883a 	add	r4,r4,r4
10001f14:	1907883a 	add	r3,r3,r4
10001f18:	38000526 	beq	r7,zero,10001f30 <memset+0x118>
10001f1c:	19cf883a 	add	r7,r3,r7
10001f20:	19400005 	stb	r5,0(r3)
10001f24:	18c00044 	addi	r3,r3,1
10001f28:	38fffd1e 	bne	r7,r3,10001f20 <__alt_data_end+0xf8001f20>
10001f2c:	f800283a 	ret
10001f30:	f800283a 	ret
10001f34:	2007883a 	mov	r3,r4
10001f38:	300f883a 	mov	r7,r6
10001f3c:	003fc706 	br	10001e5c <__alt_data_end+0xf8001e5c>

10001f40 <_printf_r>:
10001f40:	defffd04 	addi	sp,sp,-12
10001f44:	2805883a 	mov	r2,r5
10001f48:	dfc00015 	stw	ra,0(sp)
10001f4c:	d9800115 	stw	r6,4(sp)
10001f50:	d9c00215 	stw	r7,8(sp)
10001f54:	21400217 	ldw	r5,8(r4)
10001f58:	d9c00104 	addi	r7,sp,4
10001f5c:	100d883a 	mov	r6,r2
10001f60:	00021740 	call	10002174 <___vfprintf_internal_r>
10001f64:	dfc00017 	ldw	ra,0(sp)
10001f68:	dec00304 	addi	sp,sp,12
10001f6c:	f800283a 	ret

10001f70 <printf>:
10001f70:	defffc04 	addi	sp,sp,-16
10001f74:	dfc00015 	stw	ra,0(sp)
10001f78:	d9400115 	stw	r5,4(sp)
10001f7c:	d9800215 	stw	r6,8(sp)
10001f80:	d9c00315 	stw	r7,12(sp)
10001f84:	00840074 	movhi	r2,4097
10001f88:	10880a04 	addi	r2,r2,8232
10001f8c:	10800017 	ldw	r2,0(r2)
10001f90:	200b883a 	mov	r5,r4
10001f94:	d9800104 	addi	r6,sp,4
10001f98:	11000217 	ldw	r4,8(r2)
10001f9c:	00044500 	call	10004450 <__vfprintf_internal>
10001fa0:	dfc00017 	ldw	ra,0(sp)
10001fa4:	dec00404 	addi	sp,sp,16
10001fa8:	f800283a 	ret

10001fac <_putchar_r>:
10001fac:	21800217 	ldw	r6,8(r4)
10001fb0:	000748c1 	jmpi	1000748c <_putc_r>

10001fb4 <putchar>:
10001fb4:	00840074 	movhi	r2,4097
10001fb8:	10880a04 	addi	r2,r2,8232
10001fbc:	200b883a 	mov	r5,r4
10001fc0:	11000017 	ldw	r4,0(r2)
10001fc4:	21800217 	ldw	r6,8(r4)
10001fc8:	000748c1 	jmpi	1000748c <_putc_r>

10001fcc <_sbrk_r>:
10001fcc:	defffd04 	addi	sp,sp,-12
10001fd0:	dc000015 	stw	r16,0(sp)
10001fd4:	04040074 	movhi	r16,4097
10001fd8:	dc400115 	stw	r17,4(sp)
10001fdc:	840edb04 	addi	r16,r16,15212
10001fe0:	2023883a 	mov	r17,r4
10001fe4:	2809883a 	mov	r4,r5
10001fe8:	dfc00215 	stw	ra,8(sp)
10001fec:	80000015 	stw	zero,0(r16)
10001ff0:	000e2d40 	call	1000e2d4 <sbrk>
10001ff4:	00ffffc4 	movi	r3,-1
10001ff8:	10c00526 	beq	r2,r3,10002010 <_sbrk_r+0x44>
10001ffc:	dfc00217 	ldw	ra,8(sp)
10002000:	dc400117 	ldw	r17,4(sp)
10002004:	dc000017 	ldw	r16,0(sp)
10002008:	dec00304 	addi	sp,sp,12
1000200c:	f800283a 	ret
10002010:	80c00017 	ldw	r3,0(r16)
10002014:	183ff926 	beq	r3,zero,10001ffc <__alt_data_end+0xf8001ffc>
10002018:	88c00015 	stw	r3,0(r17)
1000201c:	003ff706 	br	10001ffc <__alt_data_end+0xf8001ffc>

10002020 <__sread>:
10002020:	defffe04 	addi	sp,sp,-8
10002024:	dc000015 	stw	r16,0(sp)
10002028:	2821883a 	mov	r16,r5
1000202c:	2940038f 	ldh	r5,14(r5)
10002030:	dfc00115 	stw	ra,4(sp)
10002034:	00075f40 	call	100075f4 <_read_r>
10002038:	10000716 	blt	r2,zero,10002058 <__sread+0x38>
1000203c:	80c01417 	ldw	r3,80(r16)
10002040:	1887883a 	add	r3,r3,r2
10002044:	80c01415 	stw	r3,80(r16)
10002048:	dfc00117 	ldw	ra,4(sp)
1000204c:	dc000017 	ldw	r16,0(sp)
10002050:	dec00204 	addi	sp,sp,8
10002054:	f800283a 	ret
10002058:	80c0030b 	ldhu	r3,12(r16)
1000205c:	18fbffcc 	andi	r3,r3,61439
10002060:	80c0030d 	sth	r3,12(r16)
10002064:	dfc00117 	ldw	ra,4(sp)
10002068:	dc000017 	ldw	r16,0(sp)
1000206c:	dec00204 	addi	sp,sp,8
10002070:	f800283a 	ret

10002074 <__seofread>:
10002074:	0005883a 	mov	r2,zero
10002078:	f800283a 	ret

1000207c <__swrite>:
1000207c:	2880030b 	ldhu	r2,12(r5)
10002080:	defffb04 	addi	sp,sp,-20
10002084:	dcc00315 	stw	r19,12(sp)
10002088:	dc800215 	stw	r18,8(sp)
1000208c:	dc400115 	stw	r17,4(sp)
10002090:	dc000015 	stw	r16,0(sp)
10002094:	dfc00415 	stw	ra,16(sp)
10002098:	10c0400c 	andi	r3,r2,256
1000209c:	2821883a 	mov	r16,r5
100020a0:	2023883a 	mov	r17,r4
100020a4:	3025883a 	mov	r18,r6
100020a8:	3827883a 	mov	r19,r7
100020ac:	18000526 	beq	r3,zero,100020c4 <__swrite+0x48>
100020b0:	2940038f 	ldh	r5,14(r5)
100020b4:	01c00084 	movi	r7,2
100020b8:	000d883a 	mov	r6,zero
100020bc:	00060d40 	call	100060d4 <_lseek_r>
100020c0:	8080030b 	ldhu	r2,12(r16)
100020c4:	8140038f 	ldh	r5,14(r16)
100020c8:	10bbffcc 	andi	r2,r2,61439
100020cc:	980f883a 	mov	r7,r19
100020d0:	900d883a 	mov	r6,r18
100020d4:	8809883a 	mov	r4,r17
100020d8:	8080030d 	sth	r2,12(r16)
100020dc:	dfc00417 	ldw	ra,16(sp)
100020e0:	dcc00317 	ldw	r19,12(sp)
100020e4:	dc800217 	ldw	r18,8(sp)
100020e8:	dc400117 	ldw	r17,4(sp)
100020ec:	dc000017 	ldw	r16,0(sp)
100020f0:	dec00504 	addi	sp,sp,20
100020f4:	00045281 	jmpi	10004528 <_write_r>

100020f8 <__sseek>:
100020f8:	defffe04 	addi	sp,sp,-8
100020fc:	dc000015 	stw	r16,0(sp)
10002100:	2821883a 	mov	r16,r5
10002104:	2940038f 	ldh	r5,14(r5)
10002108:	dfc00115 	stw	ra,4(sp)
1000210c:	00060d40 	call	100060d4 <_lseek_r>
10002110:	00ffffc4 	movi	r3,-1
10002114:	10c00826 	beq	r2,r3,10002138 <__sseek+0x40>
10002118:	80c0030b 	ldhu	r3,12(r16)
1000211c:	80801415 	stw	r2,80(r16)
10002120:	18c40014 	ori	r3,r3,4096
10002124:	80c0030d 	sth	r3,12(r16)
10002128:	dfc00117 	ldw	ra,4(sp)
1000212c:	dc000017 	ldw	r16,0(sp)
10002130:	dec00204 	addi	sp,sp,8
10002134:	f800283a 	ret
10002138:	80c0030b 	ldhu	r3,12(r16)
1000213c:	18fbffcc 	andi	r3,r3,61439
10002140:	80c0030d 	sth	r3,12(r16)
10002144:	dfc00117 	ldw	ra,4(sp)
10002148:	dc000017 	ldw	r16,0(sp)
1000214c:	dec00204 	addi	sp,sp,8
10002150:	f800283a 	ret

10002154 <__sclose>:
10002154:	2940038f 	ldh	r5,14(r5)
10002158:	00046dc1 	jmpi	100046dc <_close_r>

1000215c <_vfiprintf_r>:
1000215c:	deffff04 	addi	sp,sp,-4
10002160:	dfc00015 	stw	ra,0(sp)
10002164:	0007c540 	call	10007c54 <___vfiprintf_internal_r>
10002168:	dfc00017 	ldw	ra,0(sp)
1000216c:	dec00104 	addi	sp,sp,4
10002170:	f800283a 	ret

10002174 <___vfprintf_internal_r>:
10002174:	deffb804 	addi	sp,sp,-288
10002178:	dfc04715 	stw	ra,284(sp)
1000217c:	ddc04515 	stw	r23,276(sp)
10002180:	dd404315 	stw	r21,268(sp)
10002184:	d9002d15 	stw	r4,180(sp)
10002188:	282f883a 	mov	r23,r5
1000218c:	302b883a 	mov	r21,r6
10002190:	d9c02e15 	stw	r7,184(sp)
10002194:	df004615 	stw	fp,280(sp)
10002198:	dd804415 	stw	r22,272(sp)
1000219c:	dd004215 	stw	r20,264(sp)
100021a0:	dcc04115 	stw	r19,260(sp)
100021a4:	dc804015 	stw	r18,256(sp)
100021a8:	dc403f15 	stw	r17,252(sp)
100021ac:	dc003e15 	stw	r16,248(sp)
100021b0:	00060a40 	call	100060a4 <_localeconv_r>
100021b4:	10800017 	ldw	r2,0(r2)
100021b8:	1009883a 	mov	r4,r2
100021bc:	d8803415 	stw	r2,208(sp)
100021c0:	0007aa80 	call	10007aa8 <strlen>
100021c4:	d8803715 	stw	r2,220(sp)
100021c8:	d8802d17 	ldw	r2,180(sp)
100021cc:	10000226 	beq	r2,zero,100021d8 <___vfprintf_internal_r+0x64>
100021d0:	10800e17 	ldw	r2,56(r2)
100021d4:	1000fb26 	beq	r2,zero,100025c4 <___vfprintf_internal_r+0x450>
100021d8:	b880030b 	ldhu	r2,12(r23)
100021dc:	10c8000c 	andi	r3,r2,8192
100021e0:	1800061e 	bne	r3,zero,100021fc <___vfprintf_internal_r+0x88>
100021e4:	b9001917 	ldw	r4,100(r23)
100021e8:	00f7ffc4 	movi	r3,-8193
100021ec:	10880014 	ori	r2,r2,8192
100021f0:	20c6703a 	and	r3,r4,r3
100021f4:	b880030d 	sth	r2,12(r23)
100021f8:	b8c01915 	stw	r3,100(r23)
100021fc:	10c0020c 	andi	r3,r2,8
10002200:	1800c326 	beq	r3,zero,10002510 <___vfprintf_internal_r+0x39c>
10002204:	b8c00417 	ldw	r3,16(r23)
10002208:	1800c126 	beq	r3,zero,10002510 <___vfprintf_internal_r+0x39c>
1000220c:	1080068c 	andi	r2,r2,26
10002210:	00c00284 	movi	r3,10
10002214:	10c0c626 	beq	r2,r3,10002530 <___vfprintf_internal_r+0x3bc>
10002218:	d8c00404 	addi	r3,sp,16
1000221c:	05040074 	movhi	r20,4097
10002220:	d9001e04 	addi	r4,sp,120
10002224:	a500ad84 	addi	r20,r20,694
10002228:	d8c01e15 	stw	r3,120(sp)
1000222c:	d8002015 	stw	zero,128(sp)
10002230:	d8001f15 	stw	zero,124(sp)
10002234:	d8003315 	stw	zero,204(sp)
10002238:	d8003615 	stw	zero,216(sp)
1000223c:	d8003815 	stw	zero,224(sp)
10002240:	1811883a 	mov	r8,r3
10002244:	d8003915 	stw	zero,228(sp)
10002248:	d8003a15 	stw	zero,232(sp)
1000224c:	d8002f15 	stw	zero,188(sp)
10002250:	d9002815 	stw	r4,160(sp)
10002254:	a8800007 	ldb	r2,0(r21)
10002258:	10028b26 	beq	r2,zero,10002c88 <___vfprintf_internal_r+0xb14>
1000225c:	00c00944 	movi	r3,37
10002260:	a823883a 	mov	r17,r21
10002264:	10c0021e 	bne	r2,r3,10002270 <___vfprintf_internal_r+0xfc>
10002268:	00001406 	br	100022bc <___vfprintf_internal_r+0x148>
1000226c:	10c00326 	beq	r2,r3,1000227c <___vfprintf_internal_r+0x108>
10002270:	8c400044 	addi	r17,r17,1
10002274:	88800007 	ldb	r2,0(r17)
10002278:	103ffc1e 	bne	r2,zero,1000226c <__alt_data_end+0xf800226c>
1000227c:	8d61c83a 	sub	r16,r17,r21
10002280:	80000e26 	beq	r16,zero,100022bc <___vfprintf_internal_r+0x148>
10002284:	d8c02017 	ldw	r3,128(sp)
10002288:	d8801f17 	ldw	r2,124(sp)
1000228c:	45400015 	stw	r21,0(r8)
10002290:	1c07883a 	add	r3,r3,r16
10002294:	10800044 	addi	r2,r2,1
10002298:	d8c02015 	stw	r3,128(sp)
1000229c:	44000115 	stw	r16,4(r8)
100022a0:	d8801f15 	stw	r2,124(sp)
100022a4:	00c001c4 	movi	r3,7
100022a8:	1880a916 	blt	r3,r2,10002550 <___vfprintf_internal_r+0x3dc>
100022ac:	42000204 	addi	r8,r8,8
100022b0:	d9402f17 	ldw	r5,188(sp)
100022b4:	2c0b883a 	add	r5,r5,r16
100022b8:	d9402f15 	stw	r5,188(sp)
100022bc:	88800007 	ldb	r2,0(r17)
100022c0:	1000aa26 	beq	r2,zero,1000256c <___vfprintf_internal_r+0x3f8>
100022c4:	8d400044 	addi	r21,r17,1
100022c8:	8c400047 	ldb	r17,1(r17)
100022cc:	0021883a 	mov	r16,zero
100022d0:	00bfffc4 	movi	r2,-1
100022d4:	0025883a 	mov	r18,zero
100022d8:	dc002905 	stb	r16,164(sp)
100022dc:	d8002785 	stb	zero,158(sp)
100022e0:	d8002b05 	stb	zero,172(sp)
100022e4:	d8802a15 	stw	r2,168(sp)
100022e8:	d8003115 	stw	zero,196(sp)
100022ec:	04c01604 	movi	r19,88
100022f0:	05800244 	movi	r22,9
100022f4:	9021883a 	mov	r16,r18
100022f8:	4039883a 	mov	fp,r8
100022fc:	ad400044 	addi	r21,r21,1
10002300:	88bff804 	addi	r2,r17,-32
10002304:	98833236 	bltu	r19,r2,10002fd0 <___vfprintf_internal_r+0xe5c>
10002308:	100490ba 	slli	r2,r2,2
1000230c:	00c40034 	movhi	r3,4096
10002310:	18c8c804 	addi	r3,r3,8992
10002314:	10c5883a 	add	r2,r2,r3
10002318:	10800017 	ldw	r2,0(r2)
1000231c:	1000683a 	jmp	r2
10002320:	10002ec8 	cmpgei	zero,r2,187
10002324:	10002fd0 	cmplti	zero,r2,191
10002328:	10002fd0 	cmplti	zero,r2,191
1000232c:	10002ee8 	cmpgeui	zero,r2,187
10002330:	10002fd0 	cmplti	zero,r2,191
10002334:	10002fd0 	cmplti	zero,r2,191
10002338:	10002fd0 	cmplti	zero,r2,191
1000233c:	10002fd0 	cmplti	zero,r2,191
10002340:	10002fd0 	cmplti	zero,r2,191
10002344:	10002fd0 	cmplti	zero,r2,191
10002348:	100025d0 	cmplti	zero,r2,151
1000234c:	10002dd8 	cmpnei	zero,r2,183
10002350:	10002fd0 	cmplti	zero,r2,191
10002354:	10002494 	ori	zero,r2,146
10002358:	100025f4 	orhi	zero,r2,151
1000235c:	10002fd0 	cmplti	zero,r2,191
10002360:	10002644 	addi	zero,r2,153
10002364:	10002650 	cmplti	zero,r2,153
10002368:	10002650 	cmplti	zero,r2,153
1000236c:	10002650 	cmplti	zero,r2,153
10002370:	10002650 	cmplti	zero,r2,153
10002374:	10002650 	cmplti	zero,r2,153
10002378:	10002650 	cmplti	zero,r2,153
1000237c:	10002650 	cmplti	zero,r2,153
10002380:	10002650 	cmplti	zero,r2,153
10002384:	10002650 	cmplti	zero,r2,153
10002388:	10002fd0 	cmplti	zero,r2,191
1000238c:	10002fd0 	cmplti	zero,r2,191
10002390:	10002fd0 	cmplti	zero,r2,191
10002394:	10002fd0 	cmplti	zero,r2,191
10002398:	10002fd0 	cmplti	zero,r2,191
1000239c:	10002fd0 	cmplti	zero,r2,191
100023a0:	10002fd0 	cmplti	zero,r2,191
100023a4:	10002fd0 	cmplti	zero,r2,191
100023a8:	10002fd0 	cmplti	zero,r2,191
100023ac:	10002fd0 	cmplti	zero,r2,191
100023b0:	1000268c 	andi	zero,r2,154
100023b4:	10002754 	ori	zero,r2,157
100023b8:	10002fd0 	cmplti	zero,r2,191
100023bc:	10002754 	ori	zero,r2,157
100023c0:	10002fd0 	cmplti	zero,r2,191
100023c4:	10002fd0 	cmplti	zero,r2,191
100023c8:	10002fd0 	cmplti	zero,r2,191
100023cc:	10002fd0 	cmplti	zero,r2,191
100023d0:	10002800 	call	11000280 <_gp+0xfe6268>
100023d4:	10002fd0 	cmplti	zero,r2,191
100023d8:	10002fd0 	cmplti	zero,r2,191
100023dc:	1000280c 	andi	zero,r2,160
100023e0:	10002fd0 	cmplti	zero,r2,191
100023e4:	10002fd0 	cmplti	zero,r2,191
100023e8:	10002fd0 	cmplti	zero,r2,191
100023ec:	10002fd0 	cmplti	zero,r2,191
100023f0:	10002fd0 	cmplti	zero,r2,191
100023f4:	10002c90 	cmplti	zero,r2,178
100023f8:	10002fd0 	cmplti	zero,r2,191
100023fc:	10002fd0 	cmplti	zero,r2,191
10002400:	10002cfc 	xorhi	zero,r2,179
10002404:	10002fd0 	cmplti	zero,r2,191
10002408:	10002fd0 	cmplti	zero,r2,191
1000240c:	10002fd0 	cmplti	zero,r2,191
10002410:	10002fd0 	cmplti	zero,r2,191
10002414:	10002fd0 	cmplti	zero,r2,191
10002418:	10002fd0 	cmplti	zero,r2,191
1000241c:	10002fd0 	cmplti	zero,r2,191
10002420:	10002fd0 	cmplti	zero,r2,191
10002424:	10002fd0 	cmplti	zero,r2,191
10002428:	10002fd0 	cmplti	zero,r2,191
1000242c:	10002f74 	orhi	zero,r2,189
10002430:	10002ef4 	orhi	zero,r2,187
10002434:	10002754 	ori	zero,r2,157
10002438:	10002754 	ori	zero,r2,157
1000243c:	10002754 	ori	zero,r2,157
10002440:	10002f14 	ori	zero,r2,188
10002444:	10002ef4 	orhi	zero,r2,187
10002448:	10002fd0 	cmplti	zero,r2,191
1000244c:	10002fd0 	cmplti	zero,r2,191
10002450:	10002f20 	cmpeqi	zero,r2,188
10002454:	10002fd0 	cmplti	zero,r2,191
10002458:	10002f34 	orhi	zero,r2,188
1000245c:	10002db8 	rdprs	zero,r2,182
10002460:	100024a0 	cmpeqi	zero,r2,146
10002464:	10002df0 	cmpltui	zero,r2,183
10002468:	10002fd0 	cmplti	zero,r2,191
1000246c:	10002dfc 	xorhi	zero,r2,183
10002470:	10002fd0 	cmplti	zero,r2,191
10002474:	10002e60 	cmpeqi	zero,r2,185
10002478:	10002fd0 	cmplti	zero,r2,191
1000247c:	10002fd0 	cmplti	zero,r2,191
10002480:	10002e80 	call	110002e8 <_gp+0xfe62d0>
10002484:	d8c03117 	ldw	r3,196(sp)
10002488:	d8802e15 	stw	r2,184(sp)
1000248c:	00c7c83a 	sub	r3,zero,r3
10002490:	d8c03115 	stw	r3,196(sp)
10002494:	84000114 	ori	r16,r16,4
10002498:	ac400007 	ldb	r17,0(r21)
1000249c:	003f9706 	br	100022fc <__alt_data_end+0xf80022fc>
100024a0:	00800c04 	movi	r2,48
100024a4:	d8802705 	stb	r2,156(sp)
100024a8:	00801e04 	movi	r2,120
100024ac:	d8802745 	stb	r2,157(sp)
100024b0:	d9002a17 	ldw	r4,168(sp)
100024b4:	d8802e17 	ldw	r2,184(sp)
100024b8:	d8002785 	stb	zero,158(sp)
100024bc:	e011883a 	mov	r8,fp
100024c0:	10c00104 	addi	r3,r2,4
100024c4:	14c00017 	ldw	r19,0(r2)
100024c8:	002d883a 	mov	r22,zero
100024cc:	80800094 	ori	r2,r16,2
100024d0:	2002ca16 	blt	r4,zero,10002ffc <___vfprintf_internal_r+0xe88>
100024d4:	00bfdfc4 	movi	r2,-129
100024d8:	80a4703a 	and	r18,r16,r2
100024dc:	d8c02e15 	stw	r3,184(sp)
100024e0:	94800094 	ori	r18,r18,2
100024e4:	9802b41e 	bne	r19,zero,10002fb8 <___vfprintf_internal_r+0xe44>
100024e8:	01440074 	movhi	r5,4097
100024ec:	2940a604 	addi	r5,r5,664
100024f0:	d9403915 	stw	r5,228(sp)
100024f4:	04401e04 	movi	r17,120
100024f8:	d8802a17 	ldw	r2,168(sp)
100024fc:	0039883a 	mov	fp,zero
10002500:	1001fa26 	beq	r2,zero,10002cec <___vfprintf_internal_r+0xb78>
10002504:	0027883a 	mov	r19,zero
10002508:	002d883a 	mov	r22,zero
1000250c:	00021906 	br	10002d74 <___vfprintf_internal_r+0xc00>
10002510:	d9002d17 	ldw	r4,180(sp)
10002514:	b80b883a 	mov	r5,r23
10002518:	00045880 	call	10004588 <__swsetup_r>
1000251c:	1005dc1e 	bne	r2,zero,10003c90 <___vfprintf_internal_r+0x1b1c>
10002520:	b880030b 	ldhu	r2,12(r23)
10002524:	00c00284 	movi	r3,10
10002528:	1080068c 	andi	r2,r2,26
1000252c:	10ff3a1e 	bne	r2,r3,10002218 <__alt_data_end+0xf8002218>
10002530:	b880038f 	ldh	r2,14(r23)
10002534:	103f3816 	blt	r2,zero,10002218 <__alt_data_end+0xf8002218>
10002538:	d9c02e17 	ldw	r7,184(sp)
1000253c:	d9002d17 	ldw	r4,180(sp)
10002540:	a80d883a 	mov	r6,r21
10002544:	b80b883a 	mov	r5,r23
10002548:	000446c0 	call	1000446c <__sbprintf>
1000254c:	00001106 	br	10002594 <___vfprintf_internal_r+0x420>
10002550:	d9002d17 	ldw	r4,180(sp)
10002554:	d9801e04 	addi	r6,sp,120
10002558:	b80b883a 	mov	r5,r23
1000255c:	0007c3c0 	call	10007c3c <__sprint_r>
10002560:	1000081e 	bne	r2,zero,10002584 <___vfprintf_internal_r+0x410>
10002564:	da000404 	addi	r8,sp,16
10002568:	003f5106 	br	100022b0 <__alt_data_end+0xf80022b0>
1000256c:	d8802017 	ldw	r2,128(sp)
10002570:	10000426 	beq	r2,zero,10002584 <___vfprintf_internal_r+0x410>
10002574:	d9002d17 	ldw	r4,180(sp)
10002578:	d9801e04 	addi	r6,sp,120
1000257c:	b80b883a 	mov	r5,r23
10002580:	0007c3c0 	call	10007c3c <__sprint_r>
10002584:	b880030b 	ldhu	r2,12(r23)
10002588:	1080100c 	andi	r2,r2,64
1000258c:	1005c01e 	bne	r2,zero,10003c90 <___vfprintf_internal_r+0x1b1c>
10002590:	d8802f17 	ldw	r2,188(sp)
10002594:	dfc04717 	ldw	ra,284(sp)
10002598:	df004617 	ldw	fp,280(sp)
1000259c:	ddc04517 	ldw	r23,276(sp)
100025a0:	dd804417 	ldw	r22,272(sp)
100025a4:	dd404317 	ldw	r21,268(sp)
100025a8:	dd004217 	ldw	r20,264(sp)
100025ac:	dcc04117 	ldw	r19,260(sp)
100025b0:	dc804017 	ldw	r18,256(sp)
100025b4:	dc403f17 	ldw	r17,252(sp)
100025b8:	dc003e17 	ldw	r16,248(sp)
100025bc:	dec04804 	addi	sp,sp,288
100025c0:	f800283a 	ret
100025c4:	d9002d17 	ldw	r4,180(sp)
100025c8:	0000e340 	call	10000e34 <__sinit>
100025cc:	003f0206 	br	100021d8 <__alt_data_end+0xf80021d8>
100025d0:	d9002e17 	ldw	r4,184(sp)
100025d4:	d9402e17 	ldw	r5,184(sp)
100025d8:	21000017 	ldw	r4,0(r4)
100025dc:	28800104 	addi	r2,r5,4
100025e0:	d9003115 	stw	r4,196(sp)
100025e4:	203fa716 	blt	r4,zero,10002484 <__alt_data_end+0xf8002484>
100025e8:	d8802e15 	stw	r2,184(sp)
100025ec:	ac400007 	ldb	r17,0(r21)
100025f0:	003f4206 	br	100022fc <__alt_data_end+0xf80022fc>
100025f4:	ac400007 	ldb	r17,0(r21)
100025f8:	01000a84 	movi	r4,42
100025fc:	a8c00044 	addi	r3,r21,1
10002600:	89075826 	beq	r17,r4,10004364 <___vfprintf_internal_r+0x21f0>
10002604:	8cbff404 	addi	r18,r17,-48
10002608:	b486ae36 	bltu	r22,r18,100040c4 <___vfprintf_internal_r+0x1f50>
1000260c:	0009883a 	mov	r4,zero
10002610:	1823883a 	mov	r17,r3
10002614:	01400284 	movi	r5,10
10002618:	00006840 	call	10000684 <__mulsi3>
1000261c:	88c00007 	ldb	r3,0(r17)
10002620:	1489883a 	add	r4,r2,r18
10002624:	8d400044 	addi	r21,r17,1
10002628:	1cbff404 	addi	r18,r3,-48
1000262c:	a823883a 	mov	r17,r21
10002630:	b4bff82e 	bgeu	r22,r18,10002614 <__alt_data_end+0xf8002614>
10002634:	1823883a 	mov	r17,r3
10002638:	2005f616 	blt	r4,zero,10003e14 <___vfprintf_internal_r+0x1ca0>
1000263c:	d9002a15 	stw	r4,168(sp)
10002640:	003f2f06 	br	10002300 <__alt_data_end+0xf8002300>
10002644:	84002014 	ori	r16,r16,128
10002648:	ac400007 	ldb	r17,0(r21)
1000264c:	003f2b06 	br	100022fc <__alt_data_end+0xf80022fc>
10002650:	8cbff404 	addi	r18,r17,-48
10002654:	d8003115 	stw	zero,196(sp)
10002658:	0009883a 	mov	r4,zero
1000265c:	a823883a 	mov	r17,r21
10002660:	01400284 	movi	r5,10
10002664:	00006840 	call	10000684 <__mulsi3>
10002668:	88c00007 	ldb	r3,0(r17)
1000266c:	9089883a 	add	r4,r18,r2
10002670:	ad400044 	addi	r21,r21,1
10002674:	1cbff404 	addi	r18,r3,-48
10002678:	a823883a 	mov	r17,r21
1000267c:	b4bff82e 	bgeu	r22,r18,10002660 <__alt_data_end+0xf8002660>
10002680:	1823883a 	mov	r17,r3
10002684:	d9003115 	stw	r4,196(sp)
10002688:	003f1d06 	br	10002300 <__alt_data_end+0xf8002300>
1000268c:	8025883a 	mov	r18,r16
10002690:	dc002903 	ldbu	r16,164(sp)
10002694:	e011883a 	mov	r8,fp
10002698:	84003fcc 	andi	r16,r16,255
1000269c:	8007531e 	bne	r16,zero,100043ec <___vfprintf_internal_r+0x2278>
100026a0:	94800414 	ori	r18,r18,16
100026a4:	9080080c 	andi	r2,r18,32
100026a8:	1003a326 	beq	r2,zero,10003538 <___vfprintf_internal_r+0x13c4>
100026ac:	d9002e17 	ldw	r4,184(sp)
100026b0:	20800117 	ldw	r2,4(r4)
100026b4:	24c00017 	ldw	r19,0(r4)
100026b8:	21000204 	addi	r4,r4,8
100026bc:	d9002e15 	stw	r4,184(sp)
100026c0:	102d883a 	mov	r22,r2
100026c4:	10047316 	blt	r2,zero,10003894 <___vfprintf_internal_r+0x1720>
100026c8:	d9002a17 	ldw	r4,168(sp)
100026cc:	df002783 	ldbu	fp,158(sp)
100026d0:	2003e416 	blt	r4,zero,10003664 <___vfprintf_internal_r+0x14f0>
100026d4:	00ffdfc4 	movi	r3,-129
100026d8:	9d84b03a 	or	r2,r19,r22
100026dc:	90e4703a 	and	r18,r18,r3
100026e0:	10018026 	beq	r2,zero,10002ce4 <___vfprintf_internal_r+0xb70>
100026e4:	b003ab26 	beq	r22,zero,10003594 <___vfprintf_internal_r+0x1420>
100026e8:	dc402915 	stw	r17,164(sp)
100026ec:	dc001e04 	addi	r16,sp,120
100026f0:	b023883a 	mov	r17,r22
100026f4:	402d883a 	mov	r22,r8
100026f8:	9809883a 	mov	r4,r19
100026fc:	880b883a 	mov	r5,r17
10002700:	01800284 	movi	r6,10
10002704:	000f883a 	mov	r7,zero
10002708:	000aa900 	call	1000aa90 <__umoddi3>
1000270c:	10800c04 	addi	r2,r2,48
10002710:	843fffc4 	addi	r16,r16,-1
10002714:	9809883a 	mov	r4,r19
10002718:	880b883a 	mov	r5,r17
1000271c:	80800005 	stb	r2,0(r16)
10002720:	01800284 	movi	r6,10
10002724:	000f883a 	mov	r7,zero
10002728:	000a4940 	call	1000a494 <__udivdi3>
1000272c:	1027883a 	mov	r19,r2
10002730:	10c4b03a 	or	r2,r2,r3
10002734:	1823883a 	mov	r17,r3
10002738:	103fef1e 	bne	r2,zero,100026f8 <__alt_data_end+0xf80026f8>
1000273c:	d8c02817 	ldw	r3,160(sp)
10002740:	dc402917 	ldw	r17,164(sp)
10002744:	b011883a 	mov	r8,r22
10002748:	1c07c83a 	sub	r3,r3,r16
1000274c:	d8c02b15 	stw	r3,172(sp)
10002750:	00005f06 	br	100028d0 <___vfprintf_internal_r+0x75c>
10002754:	8025883a 	mov	r18,r16
10002758:	dc002903 	ldbu	r16,164(sp)
1000275c:	e011883a 	mov	r8,fp
10002760:	84003fcc 	andi	r16,r16,255
10002764:	80071e1e 	bne	r16,zero,100043e0 <___vfprintf_internal_r+0x226c>
10002768:	9080020c 	andi	r2,r18,8
1000276c:	1004af26 	beq	r2,zero,10003a2c <___vfprintf_internal_r+0x18b8>
10002770:	d9002e17 	ldw	r4,184(sp)
10002774:	d9402e17 	ldw	r5,184(sp)
10002778:	d8802e17 	ldw	r2,184(sp)
1000277c:	21000017 	ldw	r4,0(r4)
10002780:	29400117 	ldw	r5,4(r5)
10002784:	10800204 	addi	r2,r2,8
10002788:	d9003615 	stw	r4,216(sp)
1000278c:	d9403815 	stw	r5,224(sp)
10002790:	d8802e15 	stw	r2,184(sp)
10002794:	d9003617 	ldw	r4,216(sp)
10002798:	d9403817 	ldw	r5,224(sp)
1000279c:	da003d15 	stw	r8,244(sp)
100027a0:	04000044 	movi	r16,1
100027a4:	00076540 	call	10007654 <__fpclassifyd>
100027a8:	da003d17 	ldw	r8,244(sp)
100027ac:	1404441e 	bne	r2,r16,100038c0 <___vfprintf_internal_r+0x174c>
100027b0:	d9003617 	ldw	r4,216(sp)
100027b4:	d9403817 	ldw	r5,224(sp)
100027b8:	000d883a 	mov	r6,zero
100027bc:	000f883a 	mov	r7,zero
100027c0:	000c5e80 	call	1000c5e8 <__ledf2>
100027c4:	da003d17 	ldw	r8,244(sp)
100027c8:	1005e316 	blt	r2,zero,10003f58 <___vfprintf_internal_r+0x1de4>
100027cc:	df002783 	ldbu	fp,158(sp)
100027d0:	008011c4 	movi	r2,71
100027d4:	1445580e 	bge	r2,r17,10003d38 <___vfprintf_internal_r+0x1bc4>
100027d8:	04040074 	movhi	r16,4097
100027dc:	84009e04 	addi	r16,r16,632
100027e0:	00c000c4 	movi	r3,3
100027e4:	00bfdfc4 	movi	r2,-129
100027e8:	d8c02915 	stw	r3,164(sp)
100027ec:	90a4703a 	and	r18,r18,r2
100027f0:	d8c02b15 	stw	r3,172(sp)
100027f4:	d8002a15 	stw	zero,168(sp)
100027f8:	d8003215 	stw	zero,200(sp)
100027fc:	00003a06 	br	100028e8 <___vfprintf_internal_r+0x774>
10002800:	84000214 	ori	r16,r16,8
10002804:	ac400007 	ldb	r17,0(r21)
10002808:	003ebc06 	br	100022fc <__alt_data_end+0xf80022fc>
1000280c:	8025883a 	mov	r18,r16
10002810:	dc002903 	ldbu	r16,164(sp)
10002814:	e011883a 	mov	r8,fp
10002818:	84003fcc 	andi	r16,r16,255
1000281c:	8007001e 	bne	r16,zero,10004420 <___vfprintf_internal_r+0x22ac>
10002820:	94800414 	ori	r18,r18,16
10002824:	9080080c 	andi	r2,r18,32
10002828:	1002fa26 	beq	r2,zero,10003414 <___vfprintf_internal_r+0x12a0>
1000282c:	d9002e17 	ldw	r4,184(sp)
10002830:	d9402a17 	ldw	r5,168(sp)
10002834:	d8002785 	stb	zero,158(sp)
10002838:	20800204 	addi	r2,r4,8
1000283c:	24c00017 	ldw	r19,0(r4)
10002840:	25800117 	ldw	r22,4(r4)
10002844:	2804b116 	blt	r5,zero,10003b0c <___vfprintf_internal_r+0x1998>
10002848:	013fdfc4 	movi	r4,-129
1000284c:	9d86b03a 	or	r3,r19,r22
10002850:	d8802e15 	stw	r2,184(sp)
10002854:	9124703a 	and	r18,r18,r4
10002858:	1802fb1e 	bne	r3,zero,10003448 <___vfprintf_internal_r+0x12d4>
1000285c:	d8c02a17 	ldw	r3,168(sp)
10002860:	0039883a 	mov	fp,zero
10002864:	1805e526 	beq	r3,zero,10003ffc <___vfprintf_internal_r+0x1e88>
10002868:	0027883a 	mov	r19,zero
1000286c:	002d883a 	mov	r22,zero
10002870:	dc001e04 	addi	r16,sp,120
10002874:	9806d0fa 	srli	r3,r19,3
10002878:	b008977a 	slli	r4,r22,29
1000287c:	b02cd0fa 	srli	r22,r22,3
10002880:	9cc001cc 	andi	r19,r19,7
10002884:	98800c04 	addi	r2,r19,48
10002888:	843fffc4 	addi	r16,r16,-1
1000288c:	20e6b03a 	or	r19,r4,r3
10002890:	80800005 	stb	r2,0(r16)
10002894:	9d86b03a 	or	r3,r19,r22
10002898:	183ff61e 	bne	r3,zero,10002874 <__alt_data_end+0xf8002874>
1000289c:	90c0004c 	andi	r3,r18,1
100028a0:	18014126 	beq	r3,zero,10002da8 <___vfprintf_internal_r+0xc34>
100028a4:	10803fcc 	andi	r2,r2,255
100028a8:	1080201c 	xori	r2,r2,128
100028ac:	10bfe004 	addi	r2,r2,-128
100028b0:	00c00c04 	movi	r3,48
100028b4:	10c13c26 	beq	r2,r3,10002da8 <___vfprintf_internal_r+0xc34>
100028b8:	80ffffc5 	stb	r3,-1(r16)
100028bc:	d8c02817 	ldw	r3,160(sp)
100028c0:	80bfffc4 	addi	r2,r16,-1
100028c4:	1021883a 	mov	r16,r2
100028c8:	1887c83a 	sub	r3,r3,r2
100028cc:	d8c02b15 	stw	r3,172(sp)
100028d0:	d8802b17 	ldw	r2,172(sp)
100028d4:	d9002a17 	ldw	r4,168(sp)
100028d8:	1100010e 	bge	r2,r4,100028e0 <___vfprintf_internal_r+0x76c>
100028dc:	2005883a 	mov	r2,r4
100028e0:	d8802915 	stw	r2,164(sp)
100028e4:	d8003215 	stw	zero,200(sp)
100028e8:	e7003fcc 	andi	fp,fp,255
100028ec:	e700201c 	xori	fp,fp,128
100028f0:	e73fe004 	addi	fp,fp,-128
100028f4:	e0000326 	beq	fp,zero,10002904 <___vfprintf_internal_r+0x790>
100028f8:	d8c02917 	ldw	r3,164(sp)
100028fc:	18c00044 	addi	r3,r3,1
10002900:	d8c02915 	stw	r3,164(sp)
10002904:	90c0008c 	andi	r3,r18,2
10002908:	d8c02c15 	stw	r3,176(sp)
1000290c:	18000326 	beq	r3,zero,1000291c <___vfprintf_internal_r+0x7a8>
10002910:	d8c02917 	ldw	r3,164(sp)
10002914:	18c00084 	addi	r3,r3,2
10002918:	d8c02915 	stw	r3,164(sp)
1000291c:	90c0210c 	andi	r3,r18,132
10002920:	d8c03015 	stw	r3,192(sp)
10002924:	1801c51e 	bne	r3,zero,1000303c <___vfprintf_internal_r+0xec8>
10002928:	d9003117 	ldw	r4,196(sp)
1000292c:	d8c02917 	ldw	r3,164(sp)
10002930:	20e7c83a 	sub	r19,r4,r3
10002934:	04c1c10e 	bge	zero,r19,1000303c <___vfprintf_internal_r+0xec8>
10002938:	02400404 	movi	r9,16
1000293c:	d8c02017 	ldw	r3,128(sp)
10002940:	d8801f17 	ldw	r2,124(sp)
10002944:	4cc52f0e 	bge	r9,r19,10003e04 <___vfprintf_internal_r+0x1c90>
10002948:	01440074 	movhi	r5,4097
1000294c:	2940b184 	addi	r5,r5,710
10002950:	dc403b15 	stw	r17,236(sp)
10002954:	d9403515 	stw	r5,212(sp)
10002958:	9823883a 	mov	r17,r19
1000295c:	482d883a 	mov	r22,r9
10002960:	9027883a 	mov	r19,r18
10002964:	070001c4 	movi	fp,7
10002968:	8025883a 	mov	r18,r16
1000296c:	dc002d17 	ldw	r16,180(sp)
10002970:	00000306 	br	10002980 <___vfprintf_internal_r+0x80c>
10002974:	8c7ffc04 	addi	r17,r17,-16
10002978:	42000204 	addi	r8,r8,8
1000297c:	b440130e 	bge	r22,r17,100029cc <___vfprintf_internal_r+0x858>
10002980:	01040074 	movhi	r4,4097
10002984:	18c00404 	addi	r3,r3,16
10002988:	10800044 	addi	r2,r2,1
1000298c:	2100b184 	addi	r4,r4,710
10002990:	41000015 	stw	r4,0(r8)
10002994:	45800115 	stw	r22,4(r8)
10002998:	d8c02015 	stw	r3,128(sp)
1000299c:	d8801f15 	stw	r2,124(sp)
100029a0:	e0bff40e 	bge	fp,r2,10002974 <__alt_data_end+0xf8002974>
100029a4:	d9801e04 	addi	r6,sp,120
100029a8:	b80b883a 	mov	r5,r23
100029ac:	8009883a 	mov	r4,r16
100029b0:	0007c3c0 	call	10007c3c <__sprint_r>
100029b4:	103ef31e 	bne	r2,zero,10002584 <__alt_data_end+0xf8002584>
100029b8:	8c7ffc04 	addi	r17,r17,-16
100029bc:	d8c02017 	ldw	r3,128(sp)
100029c0:	d8801f17 	ldw	r2,124(sp)
100029c4:	da000404 	addi	r8,sp,16
100029c8:	b47fed16 	blt	r22,r17,10002980 <__alt_data_end+0xf8002980>
100029cc:	9021883a 	mov	r16,r18
100029d0:	9825883a 	mov	r18,r19
100029d4:	8827883a 	mov	r19,r17
100029d8:	dc403b17 	ldw	r17,236(sp)
100029dc:	d9403517 	ldw	r5,212(sp)
100029e0:	98c7883a 	add	r3,r19,r3
100029e4:	10800044 	addi	r2,r2,1
100029e8:	41400015 	stw	r5,0(r8)
100029ec:	44c00115 	stw	r19,4(r8)
100029f0:	d8c02015 	stw	r3,128(sp)
100029f4:	d8801f15 	stw	r2,124(sp)
100029f8:	010001c4 	movi	r4,7
100029fc:	2082c516 	blt	r4,r2,10003514 <___vfprintf_internal_r+0x13a0>
10002a00:	df002787 	ldb	fp,158(sp)
10002a04:	42000204 	addi	r8,r8,8
10002a08:	e0000c26 	beq	fp,zero,10002a3c <___vfprintf_internal_r+0x8c8>
10002a0c:	d8801f17 	ldw	r2,124(sp)
10002a10:	d9002784 	addi	r4,sp,158
10002a14:	18c00044 	addi	r3,r3,1
10002a18:	10800044 	addi	r2,r2,1
10002a1c:	41000015 	stw	r4,0(r8)
10002a20:	01000044 	movi	r4,1
10002a24:	41000115 	stw	r4,4(r8)
10002a28:	d8c02015 	stw	r3,128(sp)
10002a2c:	d8801f15 	stw	r2,124(sp)
10002a30:	010001c4 	movi	r4,7
10002a34:	20825e16 	blt	r4,r2,100033b0 <___vfprintf_internal_r+0x123c>
10002a38:	42000204 	addi	r8,r8,8
10002a3c:	d8802c17 	ldw	r2,176(sp)
10002a40:	10000c26 	beq	r2,zero,10002a74 <___vfprintf_internal_r+0x900>
10002a44:	d8801f17 	ldw	r2,124(sp)
10002a48:	d9002704 	addi	r4,sp,156
10002a4c:	18c00084 	addi	r3,r3,2
10002a50:	10800044 	addi	r2,r2,1
10002a54:	41000015 	stw	r4,0(r8)
10002a58:	01000084 	movi	r4,2
10002a5c:	41000115 	stw	r4,4(r8)
10002a60:	d8c02015 	stw	r3,128(sp)
10002a64:	d8801f15 	stw	r2,124(sp)
10002a68:	010001c4 	movi	r4,7
10002a6c:	20825816 	blt	r4,r2,100033d0 <___vfprintf_internal_r+0x125c>
10002a70:	42000204 	addi	r8,r8,8
10002a74:	d9003017 	ldw	r4,192(sp)
10002a78:	00802004 	movi	r2,128
10002a7c:	2081bb26 	beq	r4,r2,1000316c <___vfprintf_internal_r+0xff8>
10002a80:	d9402a17 	ldw	r5,168(sp)
10002a84:	d8802b17 	ldw	r2,172(sp)
10002a88:	28adc83a 	sub	r22,r5,r2
10002a8c:	0580310e 	bge	zero,r22,10002b54 <___vfprintf_internal_r+0x9e0>
10002a90:	07000404 	movi	fp,16
10002a94:	d8801f17 	ldw	r2,124(sp)
10002a98:	e584360e 	bge	fp,r22,10003b74 <___vfprintf_internal_r+0x1a00>
10002a9c:	01440074 	movhi	r5,4097
10002aa0:	2940ad84 	addi	r5,r5,694
10002aa4:	dc402a15 	stw	r17,168(sp)
10002aa8:	d9402c15 	stw	r5,176(sp)
10002aac:	b023883a 	mov	r17,r22
10002ab0:	04c001c4 	movi	r19,7
10002ab4:	a82d883a 	mov	r22,r21
10002ab8:	902b883a 	mov	r21,r18
10002abc:	8025883a 	mov	r18,r16
10002ac0:	dc002d17 	ldw	r16,180(sp)
10002ac4:	00000306 	br	10002ad4 <___vfprintf_internal_r+0x960>
10002ac8:	8c7ffc04 	addi	r17,r17,-16
10002acc:	42000204 	addi	r8,r8,8
10002ad0:	e440110e 	bge	fp,r17,10002b18 <___vfprintf_internal_r+0x9a4>
10002ad4:	18c00404 	addi	r3,r3,16
10002ad8:	10800044 	addi	r2,r2,1
10002adc:	45000015 	stw	r20,0(r8)
10002ae0:	47000115 	stw	fp,4(r8)
10002ae4:	d8c02015 	stw	r3,128(sp)
10002ae8:	d8801f15 	stw	r2,124(sp)
10002aec:	98bff60e 	bge	r19,r2,10002ac8 <__alt_data_end+0xf8002ac8>
10002af0:	d9801e04 	addi	r6,sp,120
10002af4:	b80b883a 	mov	r5,r23
10002af8:	8009883a 	mov	r4,r16
10002afc:	0007c3c0 	call	10007c3c <__sprint_r>
10002b00:	103ea01e 	bne	r2,zero,10002584 <__alt_data_end+0xf8002584>
10002b04:	8c7ffc04 	addi	r17,r17,-16
10002b08:	d8c02017 	ldw	r3,128(sp)
10002b0c:	d8801f17 	ldw	r2,124(sp)
10002b10:	da000404 	addi	r8,sp,16
10002b14:	e47fef16 	blt	fp,r17,10002ad4 <__alt_data_end+0xf8002ad4>
10002b18:	9021883a 	mov	r16,r18
10002b1c:	a825883a 	mov	r18,r21
10002b20:	b02b883a 	mov	r21,r22
10002b24:	882d883a 	mov	r22,r17
10002b28:	dc402a17 	ldw	r17,168(sp)
10002b2c:	d9002c17 	ldw	r4,176(sp)
10002b30:	1d87883a 	add	r3,r3,r22
10002b34:	10800044 	addi	r2,r2,1
10002b38:	41000015 	stw	r4,0(r8)
10002b3c:	45800115 	stw	r22,4(r8)
10002b40:	d8c02015 	stw	r3,128(sp)
10002b44:	d8801f15 	stw	r2,124(sp)
10002b48:	010001c4 	movi	r4,7
10002b4c:	20821016 	blt	r4,r2,10003390 <___vfprintf_internal_r+0x121c>
10002b50:	42000204 	addi	r8,r8,8
10002b54:	9080400c 	andi	r2,r18,256
10002b58:	10013a1e 	bne	r2,zero,10003044 <___vfprintf_internal_r+0xed0>
10002b5c:	d9402b17 	ldw	r5,172(sp)
10002b60:	d8801f17 	ldw	r2,124(sp)
10002b64:	44000015 	stw	r16,0(r8)
10002b68:	1947883a 	add	r3,r3,r5
10002b6c:	10800044 	addi	r2,r2,1
10002b70:	41400115 	stw	r5,4(r8)
10002b74:	d8c02015 	stw	r3,128(sp)
10002b78:	d8801f15 	stw	r2,124(sp)
10002b7c:	010001c4 	movi	r4,7
10002b80:	2081f516 	blt	r4,r2,10003358 <___vfprintf_internal_r+0x11e4>
10002b84:	42000204 	addi	r8,r8,8
10002b88:	9480010c 	andi	r18,r18,4
10002b8c:	90003226 	beq	r18,zero,10002c58 <___vfprintf_internal_r+0xae4>
10002b90:	d9403117 	ldw	r5,196(sp)
10002b94:	d8802917 	ldw	r2,164(sp)
10002b98:	28a1c83a 	sub	r16,r5,r2
10002b9c:	04002e0e 	bge	zero,r16,10002c58 <___vfprintf_internal_r+0xae4>
10002ba0:	04400404 	movi	r17,16
10002ba4:	d8801f17 	ldw	r2,124(sp)
10002ba8:	8c04c40e 	bge	r17,r16,10003ebc <___vfprintf_internal_r+0x1d48>
10002bac:	01440074 	movhi	r5,4097
10002bb0:	2940b184 	addi	r5,r5,710
10002bb4:	d9403515 	stw	r5,212(sp)
10002bb8:	048001c4 	movi	r18,7
10002bbc:	dcc02d17 	ldw	r19,180(sp)
10002bc0:	00000306 	br	10002bd0 <___vfprintf_internal_r+0xa5c>
10002bc4:	843ffc04 	addi	r16,r16,-16
10002bc8:	42000204 	addi	r8,r8,8
10002bcc:	8c00130e 	bge	r17,r16,10002c1c <___vfprintf_internal_r+0xaa8>
10002bd0:	01040074 	movhi	r4,4097
10002bd4:	18c00404 	addi	r3,r3,16
10002bd8:	10800044 	addi	r2,r2,1
10002bdc:	2100b184 	addi	r4,r4,710
10002be0:	41000015 	stw	r4,0(r8)
10002be4:	44400115 	stw	r17,4(r8)
10002be8:	d8c02015 	stw	r3,128(sp)
10002bec:	d8801f15 	stw	r2,124(sp)
10002bf0:	90bff40e 	bge	r18,r2,10002bc4 <__alt_data_end+0xf8002bc4>
10002bf4:	d9801e04 	addi	r6,sp,120
10002bf8:	b80b883a 	mov	r5,r23
10002bfc:	9809883a 	mov	r4,r19
10002c00:	0007c3c0 	call	10007c3c <__sprint_r>
10002c04:	103e5f1e 	bne	r2,zero,10002584 <__alt_data_end+0xf8002584>
10002c08:	843ffc04 	addi	r16,r16,-16
10002c0c:	d8c02017 	ldw	r3,128(sp)
10002c10:	d8801f17 	ldw	r2,124(sp)
10002c14:	da000404 	addi	r8,sp,16
10002c18:	8c3fed16 	blt	r17,r16,10002bd0 <__alt_data_end+0xf8002bd0>
10002c1c:	d9403517 	ldw	r5,212(sp)
10002c20:	1c07883a 	add	r3,r3,r16
10002c24:	10800044 	addi	r2,r2,1
10002c28:	41400015 	stw	r5,0(r8)
10002c2c:	44000115 	stw	r16,4(r8)
10002c30:	d8c02015 	stw	r3,128(sp)
10002c34:	d8801f15 	stw	r2,124(sp)
10002c38:	010001c4 	movi	r4,7
10002c3c:	2080060e 	bge	r4,r2,10002c58 <___vfprintf_internal_r+0xae4>
10002c40:	d9002d17 	ldw	r4,180(sp)
10002c44:	d9801e04 	addi	r6,sp,120
10002c48:	b80b883a 	mov	r5,r23
10002c4c:	0007c3c0 	call	10007c3c <__sprint_r>
10002c50:	103e4c1e 	bne	r2,zero,10002584 <__alt_data_end+0xf8002584>
10002c54:	d8c02017 	ldw	r3,128(sp)
10002c58:	d8803117 	ldw	r2,196(sp)
10002c5c:	d9002917 	ldw	r4,164(sp)
10002c60:	1100010e 	bge	r2,r4,10002c68 <___vfprintf_internal_r+0xaf4>
10002c64:	2005883a 	mov	r2,r4
10002c68:	d9402f17 	ldw	r5,188(sp)
10002c6c:	288b883a 	add	r5,r5,r2
10002c70:	d9402f15 	stw	r5,188(sp)
10002c74:	1801c01e 	bne	r3,zero,10003378 <___vfprintf_internal_r+0x1204>
10002c78:	a8800007 	ldb	r2,0(r21)
10002c7c:	d8001f15 	stw	zero,124(sp)
10002c80:	da000404 	addi	r8,sp,16
10002c84:	103d751e 	bne	r2,zero,1000225c <__alt_data_end+0xf800225c>
10002c88:	a823883a 	mov	r17,r21
10002c8c:	003d8b06 	br	100022bc <__alt_data_end+0xf80022bc>
10002c90:	8025883a 	mov	r18,r16
10002c94:	dc002903 	ldbu	r16,164(sp)
10002c98:	e011883a 	mov	r8,fp
10002c9c:	84003fcc 	andi	r16,r16,255
10002ca0:	8005e51e 	bne	r16,zero,10004438 <___vfprintf_internal_r+0x22c4>
10002ca4:	94800414 	ori	r18,r18,16
10002ca8:	9080080c 	andi	r2,r18,32
10002cac:	10022b26 	beq	r2,zero,1000355c <___vfprintf_internal_r+0x13e8>
10002cb0:	d9002e17 	ldw	r4,184(sp)
10002cb4:	d9402a17 	ldw	r5,168(sp)
10002cb8:	d8002785 	stb	zero,158(sp)
10002cbc:	20c00204 	addi	r3,r4,8
10002cc0:	24c00017 	ldw	r19,0(r4)
10002cc4:	25800117 	ldw	r22,4(r4)
10002cc8:	28042e16 	blt	r5,zero,10003d84 <___vfprintf_internal_r+0x1c10>
10002ccc:	013fdfc4 	movi	r4,-129
10002cd0:	9d84b03a 	or	r2,r19,r22
10002cd4:	d8c02e15 	stw	r3,184(sp)
10002cd8:	9124703a 	and	r18,r18,r4
10002cdc:	0039883a 	mov	fp,zero
10002ce0:	103e801e 	bne	r2,zero,100026e4 <__alt_data_end+0xf80026e4>
10002ce4:	d9002a17 	ldw	r4,168(sp)
10002ce8:	2002e01e 	bne	r4,zero,1000386c <___vfprintf_internal_r+0x16f8>
10002cec:	d8002a15 	stw	zero,168(sp)
10002cf0:	d8002b15 	stw	zero,172(sp)
10002cf4:	dc001e04 	addi	r16,sp,120
10002cf8:	003ef506 	br	100028d0 <__alt_data_end+0xf80028d0>
10002cfc:	8025883a 	mov	r18,r16
10002d00:	dc002903 	ldbu	r16,164(sp)
10002d04:	e011883a 	mov	r8,fp
10002d08:	84003fcc 	andi	r16,r16,255
10002d0c:	8005ba1e 	bne	r16,zero,100043f8 <___vfprintf_internal_r+0x2284>
10002d10:	01040074 	movhi	r4,4097
10002d14:	2100a104 	addi	r4,r4,644
10002d18:	d9003915 	stw	r4,228(sp)
10002d1c:	9080080c 	andi	r2,r18,32
10002d20:	10006126 	beq	r2,zero,10002ea8 <___vfprintf_internal_r+0xd34>
10002d24:	d9402e17 	ldw	r5,184(sp)
10002d28:	2cc00017 	ldw	r19,0(r5)
10002d2c:	2d800117 	ldw	r22,4(r5)
10002d30:	29400204 	addi	r5,r5,8
10002d34:	d9402e15 	stw	r5,184(sp)
10002d38:	9080004c 	andi	r2,r18,1
10002d3c:	1001ac26 	beq	r2,zero,100033f0 <___vfprintf_internal_r+0x127c>
10002d40:	9d84b03a 	or	r2,r19,r22
10002d44:	10038526 	beq	r2,zero,10003b5c <___vfprintf_internal_r+0x19e8>
10002d48:	d8c02a17 	ldw	r3,168(sp)
10002d4c:	00800c04 	movi	r2,48
10002d50:	d8802705 	stb	r2,156(sp)
10002d54:	dc402745 	stb	r17,157(sp)
10002d58:	d8002785 	stb	zero,158(sp)
10002d5c:	90800094 	ori	r2,r18,2
10002d60:	18047916 	blt	r3,zero,10003f48 <___vfprintf_internal_r+0x1dd4>
10002d64:	00bfdfc4 	movi	r2,-129
10002d68:	90a4703a 	and	r18,r18,r2
10002d6c:	94800094 	ori	r18,r18,2
10002d70:	0039883a 	mov	fp,zero
10002d74:	d9003917 	ldw	r4,228(sp)
10002d78:	dc001e04 	addi	r16,sp,120
10002d7c:	988003cc 	andi	r2,r19,15
10002d80:	b006973a 	slli	r3,r22,28
10002d84:	2085883a 	add	r2,r4,r2
10002d88:	9826d13a 	srli	r19,r19,4
10002d8c:	10800003 	ldbu	r2,0(r2)
10002d90:	b02cd13a 	srli	r22,r22,4
10002d94:	843fffc4 	addi	r16,r16,-1
10002d98:	1ce6b03a 	or	r19,r3,r19
10002d9c:	80800005 	stb	r2,0(r16)
10002da0:	9d84b03a 	or	r2,r19,r22
10002da4:	103ff51e 	bne	r2,zero,10002d7c <__alt_data_end+0xf8002d7c>
10002da8:	d8c02817 	ldw	r3,160(sp)
10002dac:	1c07c83a 	sub	r3,r3,r16
10002db0:	d8c02b15 	stw	r3,172(sp)
10002db4:	003ec606 	br	100028d0 <__alt_data_end+0xf80028d0>
10002db8:	8025883a 	mov	r18,r16
10002dbc:	dc002903 	ldbu	r16,164(sp)
10002dc0:	e011883a 	mov	r8,fp
10002dc4:	84003fcc 	andi	r16,r16,255
10002dc8:	803e9626 	beq	r16,zero,10002824 <__alt_data_end+0xf8002824>
10002dcc:	d8c02b03 	ldbu	r3,172(sp)
10002dd0:	d8c02785 	stb	r3,158(sp)
10002dd4:	003e9306 	br	10002824 <__alt_data_end+0xf8002824>
10002dd8:	00c00044 	movi	r3,1
10002ddc:	d8c02905 	stb	r3,164(sp)
10002de0:	00c00ac4 	movi	r3,43
10002de4:	d8c02b05 	stb	r3,172(sp)
10002de8:	ac400007 	ldb	r17,0(r21)
10002dec:	003d4306 	br	100022fc <__alt_data_end+0xf80022fc>
10002df0:	84000814 	ori	r16,r16,32
10002df4:	ac400007 	ldb	r17,0(r21)
10002df8:	003d4006 	br	100022fc <__alt_data_end+0xf80022fc>
10002dfc:	d8802e17 	ldw	r2,184(sp)
10002e00:	8025883a 	mov	r18,r16
10002e04:	d8002785 	stb	zero,158(sp)
10002e08:	14000017 	ldw	r16,0(r2)
10002e0c:	e011883a 	mov	r8,fp
10002e10:	14c00104 	addi	r19,r2,4
10002e14:	80042d26 	beq	r16,zero,10003ecc <___vfprintf_internal_r+0x1d58>
10002e18:	d8c02a17 	ldw	r3,168(sp)
10002e1c:	1803e416 	blt	r3,zero,10003db0 <___vfprintf_internal_r+0x1c3c>
10002e20:	180d883a 	mov	r6,r3
10002e24:	000b883a 	mov	r5,zero
10002e28:	8009883a 	mov	r4,r16
10002e2c:	df003d15 	stw	fp,244(sp)
10002e30:	00062f00 	call	100062f0 <memchr>
10002e34:	da003d17 	ldw	r8,244(sp)
10002e38:	10046826 	beq	r2,zero,10003fdc <___vfprintf_internal_r+0x1e68>
10002e3c:	1405c83a 	sub	r2,r2,r16
10002e40:	d8802b15 	stw	r2,172(sp)
10002e44:	1003e016 	blt	r2,zero,10003dc8 <___vfprintf_internal_r+0x1c54>
10002e48:	df002783 	ldbu	fp,158(sp)
10002e4c:	d8802915 	stw	r2,164(sp)
10002e50:	dcc02e15 	stw	r19,184(sp)
10002e54:	d8002a15 	stw	zero,168(sp)
10002e58:	d8003215 	stw	zero,200(sp)
10002e5c:	003ea206 	br	100028e8 <__alt_data_end+0xf80028e8>
10002e60:	8025883a 	mov	r18,r16
10002e64:	dc002903 	ldbu	r16,164(sp)
10002e68:	e011883a 	mov	r8,fp
10002e6c:	84003fcc 	andi	r16,r16,255
10002e70:	803f8d26 	beq	r16,zero,10002ca8 <__alt_data_end+0xf8002ca8>
10002e74:	d8c02b03 	ldbu	r3,172(sp)
10002e78:	d8c02785 	stb	r3,158(sp)
10002e7c:	003f8a06 	br	10002ca8 <__alt_data_end+0xf8002ca8>
10002e80:	8025883a 	mov	r18,r16
10002e84:	dc002903 	ldbu	r16,164(sp)
10002e88:	e011883a 	mov	r8,fp
10002e8c:	84003fcc 	andi	r16,r16,255
10002e90:	8005661e 	bne	r16,zero,1000442c <___vfprintf_internal_r+0x22b8>
10002e94:	01040074 	movhi	r4,4097
10002e98:	2100a604 	addi	r4,r4,664
10002e9c:	d9003915 	stw	r4,228(sp)
10002ea0:	9080080c 	andi	r2,r18,32
10002ea4:	103f9f1e 	bne	r2,zero,10002d24 <__alt_data_end+0xf8002d24>
10002ea8:	9080040c 	andi	r2,r18,16
10002eac:	1002eb26 	beq	r2,zero,10003a5c <___vfprintf_internal_r+0x18e8>
10002eb0:	d8802e17 	ldw	r2,184(sp)
10002eb4:	002d883a 	mov	r22,zero
10002eb8:	14c00017 	ldw	r19,0(r2)
10002ebc:	10800104 	addi	r2,r2,4
10002ec0:	d8802e15 	stw	r2,184(sp)
10002ec4:	003f9c06 	br	10002d38 <__alt_data_end+0xf8002d38>
10002ec8:	d8802b07 	ldb	r2,172(sp)
10002ecc:	1002e11e 	bne	r2,zero,10003a54 <___vfprintf_internal_r+0x18e0>
10002ed0:	00c00044 	movi	r3,1
10002ed4:	d8c02905 	stb	r3,164(sp)
10002ed8:	00c00804 	movi	r3,32
10002edc:	d8c02b05 	stb	r3,172(sp)
10002ee0:	ac400007 	ldb	r17,0(r21)
10002ee4:	003d0506 	br	100022fc <__alt_data_end+0xf80022fc>
10002ee8:	84000054 	ori	r16,r16,1
10002eec:	ac400007 	ldb	r17,0(r21)
10002ef0:	003d0206 	br	100022fc <__alt_data_end+0xf80022fc>
10002ef4:	8025883a 	mov	r18,r16
10002ef8:	dc002903 	ldbu	r16,164(sp)
10002efc:	e011883a 	mov	r8,fp
10002f00:	84003fcc 	andi	r16,r16,255
10002f04:	803de726 	beq	r16,zero,100026a4 <__alt_data_end+0xf80026a4>
10002f08:	d8c02b03 	ldbu	r3,172(sp)
10002f0c:	d8c02785 	stb	r3,158(sp)
10002f10:	003de406 	br	100026a4 <__alt_data_end+0xf80026a4>
10002f14:	84001014 	ori	r16,r16,64
10002f18:	ac400007 	ldb	r17,0(r21)
10002f1c:	003cf706 	br	100022fc <__alt_data_end+0xf80022fc>
10002f20:	ac400007 	ldb	r17,0(r21)
10002f24:	00801b04 	movi	r2,108
10002f28:	88838f26 	beq	r17,r2,10003d68 <___vfprintf_internal_r+0x1bf4>
10002f2c:	84000414 	ori	r16,r16,16
10002f30:	003cf206 	br	100022fc <__alt_data_end+0xf80022fc>
10002f34:	8025883a 	mov	r18,r16
10002f38:	dc002903 	ldbu	r16,164(sp)
10002f3c:	e011883a 	mov	r8,fp
10002f40:	84003fcc 	andi	r16,r16,255
10002f44:	80053f1e 	bne	r16,zero,10004444 <___vfprintf_internal_r+0x22d0>
10002f48:	9080080c 	andi	r2,r18,32
10002f4c:	1002d226 	beq	r2,zero,10003a98 <___vfprintf_internal_r+0x1924>
10002f50:	d9002e17 	ldw	r4,184(sp)
10002f54:	d9402f17 	ldw	r5,188(sp)
10002f58:	20800017 	ldw	r2,0(r4)
10002f5c:	2807d7fa 	srai	r3,r5,31
10002f60:	21000104 	addi	r4,r4,4
10002f64:	d9002e15 	stw	r4,184(sp)
10002f68:	11400015 	stw	r5,0(r2)
10002f6c:	10c00115 	stw	r3,4(r2)
10002f70:	003cb806 	br	10002254 <__alt_data_end+0xf8002254>
10002f74:	d8c02e17 	ldw	r3,184(sp)
10002f78:	d9002e17 	ldw	r4,184(sp)
10002f7c:	8025883a 	mov	r18,r16
10002f80:	18800017 	ldw	r2,0(r3)
10002f84:	21000104 	addi	r4,r4,4
10002f88:	00c00044 	movi	r3,1
10002f8c:	e011883a 	mov	r8,fp
10002f90:	d8c02915 	stw	r3,164(sp)
10002f94:	d8002785 	stb	zero,158(sp)
10002f98:	d8801405 	stb	r2,80(sp)
10002f9c:	d9002e15 	stw	r4,184(sp)
10002fa0:	d8c02b15 	stw	r3,172(sp)
10002fa4:	d8002a15 	stw	zero,168(sp)
10002fa8:	d8003215 	stw	zero,200(sp)
10002fac:	dc001404 	addi	r16,sp,80
10002fb0:	0039883a 	mov	fp,zero
10002fb4:	003e5306 	br	10002904 <__alt_data_end+0xf8002904>
10002fb8:	01040074 	movhi	r4,4097
10002fbc:	2100a604 	addi	r4,r4,664
10002fc0:	0039883a 	mov	fp,zero
10002fc4:	d9003915 	stw	r4,228(sp)
10002fc8:	04401e04 	movi	r17,120
10002fcc:	003f6906 	br	10002d74 <__alt_data_end+0xf8002d74>
10002fd0:	8025883a 	mov	r18,r16
10002fd4:	dc002903 	ldbu	r16,164(sp)
10002fd8:	e011883a 	mov	r8,fp
10002fdc:	84003fcc 	andi	r16,r16,255
10002fe0:	8005081e 	bne	r16,zero,10004404 <___vfprintf_internal_r+0x2290>
10002fe4:	883d6126 	beq	r17,zero,1000256c <__alt_data_end+0xf800256c>
10002fe8:	00c00044 	movi	r3,1
10002fec:	d8c02915 	stw	r3,164(sp)
10002ff0:	dc401405 	stb	r17,80(sp)
10002ff4:	d8002785 	stb	zero,158(sp)
10002ff8:	003fe906 	br	10002fa0 <__alt_data_end+0xf8002fa0>
10002ffc:	01440074 	movhi	r5,4097
10003000:	2940a604 	addi	r5,r5,664
10003004:	d9403915 	stw	r5,228(sp)
10003008:	d8c02e15 	stw	r3,184(sp)
1000300c:	1025883a 	mov	r18,r2
10003010:	04401e04 	movi	r17,120
10003014:	9d84b03a 	or	r2,r19,r22
10003018:	1000fc1e 	bne	r2,zero,1000340c <___vfprintf_internal_r+0x1298>
1000301c:	0039883a 	mov	fp,zero
10003020:	00800084 	movi	r2,2
10003024:	10803fcc 	andi	r2,r2,255
10003028:	00c00044 	movi	r3,1
1000302c:	10c20f26 	beq	r2,r3,1000386c <___vfprintf_internal_r+0x16f8>
10003030:	00c00084 	movi	r3,2
10003034:	10fd3326 	beq	r2,r3,10002504 <__alt_data_end+0xf8002504>
10003038:	003e0b06 	br	10002868 <__alt_data_end+0xf8002868>
1000303c:	d8c02017 	ldw	r3,128(sp)
10003040:	003e7106 	br	10002a08 <__alt_data_end+0xf8002a08>
10003044:	00801944 	movi	r2,101
10003048:	14407e0e 	bge	r2,r17,10003244 <___vfprintf_internal_r+0x10d0>
1000304c:	d9003617 	ldw	r4,216(sp)
10003050:	d9403817 	ldw	r5,224(sp)
10003054:	000d883a 	mov	r6,zero
10003058:	000f883a 	mov	r7,zero
1000305c:	d8c03c15 	stw	r3,240(sp)
10003060:	da003d15 	stw	r8,244(sp)
10003064:	000c4840 	call	1000c484 <__eqdf2>
10003068:	d8c03c17 	ldw	r3,240(sp)
1000306c:	da003d17 	ldw	r8,244(sp)
10003070:	1000f71e 	bne	r2,zero,10003450 <___vfprintf_internal_r+0x12dc>
10003074:	d8801f17 	ldw	r2,124(sp)
10003078:	01040074 	movhi	r4,4097
1000307c:	2100ad04 	addi	r4,r4,692
10003080:	18c00044 	addi	r3,r3,1
10003084:	10800044 	addi	r2,r2,1
10003088:	41000015 	stw	r4,0(r8)
1000308c:	01000044 	movi	r4,1
10003090:	41000115 	stw	r4,4(r8)
10003094:	d8c02015 	stw	r3,128(sp)
10003098:	d8801f15 	stw	r2,124(sp)
1000309c:	010001c4 	movi	r4,7
100030a0:	2082b816 	blt	r4,r2,10003b84 <___vfprintf_internal_r+0x1a10>
100030a4:	42000204 	addi	r8,r8,8
100030a8:	d8802617 	ldw	r2,152(sp)
100030ac:	d9403317 	ldw	r5,204(sp)
100030b0:	11400216 	blt	r2,r5,100030bc <___vfprintf_internal_r+0xf48>
100030b4:	9080004c 	andi	r2,r18,1
100030b8:	103eb326 	beq	r2,zero,10002b88 <__alt_data_end+0xf8002b88>
100030bc:	d8803717 	ldw	r2,220(sp)
100030c0:	d9003417 	ldw	r4,208(sp)
100030c4:	d9403717 	ldw	r5,220(sp)
100030c8:	1887883a 	add	r3,r3,r2
100030cc:	d8801f17 	ldw	r2,124(sp)
100030d0:	41000015 	stw	r4,0(r8)
100030d4:	41400115 	stw	r5,4(r8)
100030d8:	10800044 	addi	r2,r2,1
100030dc:	d8c02015 	stw	r3,128(sp)
100030e0:	d8801f15 	stw	r2,124(sp)
100030e4:	010001c4 	movi	r4,7
100030e8:	20832916 	blt	r4,r2,10003d90 <___vfprintf_internal_r+0x1c1c>
100030ec:	42000204 	addi	r8,r8,8
100030f0:	d8803317 	ldw	r2,204(sp)
100030f4:	143fffc4 	addi	r16,r2,-1
100030f8:	043ea30e 	bge	zero,r16,10002b88 <__alt_data_end+0xf8002b88>
100030fc:	04400404 	movi	r17,16
10003100:	d8801f17 	ldw	r2,124(sp)
10003104:	8c00880e 	bge	r17,r16,10003328 <___vfprintf_internal_r+0x11b4>
10003108:	01440074 	movhi	r5,4097
1000310c:	2940ad84 	addi	r5,r5,694
10003110:	d9402c15 	stw	r5,176(sp)
10003114:	058001c4 	movi	r22,7
10003118:	dcc02d17 	ldw	r19,180(sp)
1000311c:	00000306 	br	1000312c <___vfprintf_internal_r+0xfb8>
10003120:	42000204 	addi	r8,r8,8
10003124:	843ffc04 	addi	r16,r16,-16
10003128:	8c00820e 	bge	r17,r16,10003334 <___vfprintf_internal_r+0x11c0>
1000312c:	18c00404 	addi	r3,r3,16
10003130:	10800044 	addi	r2,r2,1
10003134:	45000015 	stw	r20,0(r8)
10003138:	44400115 	stw	r17,4(r8)
1000313c:	d8c02015 	stw	r3,128(sp)
10003140:	d8801f15 	stw	r2,124(sp)
10003144:	b0bff60e 	bge	r22,r2,10003120 <__alt_data_end+0xf8003120>
10003148:	d9801e04 	addi	r6,sp,120
1000314c:	b80b883a 	mov	r5,r23
10003150:	9809883a 	mov	r4,r19
10003154:	0007c3c0 	call	10007c3c <__sprint_r>
10003158:	103d0a1e 	bne	r2,zero,10002584 <__alt_data_end+0xf8002584>
1000315c:	d8c02017 	ldw	r3,128(sp)
10003160:	d8801f17 	ldw	r2,124(sp)
10003164:	da000404 	addi	r8,sp,16
10003168:	003fee06 	br	10003124 <__alt_data_end+0xf8003124>
1000316c:	d9403117 	ldw	r5,196(sp)
10003170:	d8802917 	ldw	r2,164(sp)
10003174:	28adc83a 	sub	r22,r5,r2
10003178:	05be410e 	bge	zero,r22,10002a80 <__alt_data_end+0xf8002a80>
1000317c:	07000404 	movi	fp,16
10003180:	d8801f17 	ldw	r2,124(sp)
10003184:	e5838f0e 	bge	fp,r22,10003fc4 <___vfprintf_internal_r+0x1e50>
10003188:	01440074 	movhi	r5,4097
1000318c:	2940ad84 	addi	r5,r5,694
10003190:	dc403015 	stw	r17,192(sp)
10003194:	d9402c15 	stw	r5,176(sp)
10003198:	b023883a 	mov	r17,r22
1000319c:	04c001c4 	movi	r19,7
100031a0:	a82d883a 	mov	r22,r21
100031a4:	902b883a 	mov	r21,r18
100031a8:	8025883a 	mov	r18,r16
100031ac:	dc002d17 	ldw	r16,180(sp)
100031b0:	00000306 	br	100031c0 <___vfprintf_internal_r+0x104c>
100031b4:	8c7ffc04 	addi	r17,r17,-16
100031b8:	42000204 	addi	r8,r8,8
100031bc:	e440110e 	bge	fp,r17,10003204 <___vfprintf_internal_r+0x1090>
100031c0:	18c00404 	addi	r3,r3,16
100031c4:	10800044 	addi	r2,r2,1
100031c8:	45000015 	stw	r20,0(r8)
100031cc:	47000115 	stw	fp,4(r8)
100031d0:	d8c02015 	stw	r3,128(sp)
100031d4:	d8801f15 	stw	r2,124(sp)
100031d8:	98bff60e 	bge	r19,r2,100031b4 <__alt_data_end+0xf80031b4>
100031dc:	d9801e04 	addi	r6,sp,120
100031e0:	b80b883a 	mov	r5,r23
100031e4:	8009883a 	mov	r4,r16
100031e8:	0007c3c0 	call	10007c3c <__sprint_r>
100031ec:	103ce51e 	bne	r2,zero,10002584 <__alt_data_end+0xf8002584>
100031f0:	8c7ffc04 	addi	r17,r17,-16
100031f4:	d8c02017 	ldw	r3,128(sp)
100031f8:	d8801f17 	ldw	r2,124(sp)
100031fc:	da000404 	addi	r8,sp,16
10003200:	e47fef16 	blt	fp,r17,100031c0 <__alt_data_end+0xf80031c0>
10003204:	9021883a 	mov	r16,r18
10003208:	a825883a 	mov	r18,r21
1000320c:	b02b883a 	mov	r21,r22
10003210:	882d883a 	mov	r22,r17
10003214:	dc403017 	ldw	r17,192(sp)
10003218:	d9002c17 	ldw	r4,176(sp)
1000321c:	1d87883a 	add	r3,r3,r22
10003220:	10800044 	addi	r2,r2,1
10003224:	41000015 	stw	r4,0(r8)
10003228:	45800115 	stw	r22,4(r8)
1000322c:	d8c02015 	stw	r3,128(sp)
10003230:	d8801f15 	stw	r2,124(sp)
10003234:	010001c4 	movi	r4,7
10003238:	20818e16 	blt	r4,r2,10003874 <___vfprintf_internal_r+0x1700>
1000323c:	42000204 	addi	r8,r8,8
10003240:	003e0f06 	br	10002a80 <__alt_data_end+0xf8002a80>
10003244:	d9403317 	ldw	r5,204(sp)
10003248:	00800044 	movi	r2,1
1000324c:	18c00044 	addi	r3,r3,1
10003250:	1141530e 	bge	r2,r5,100037a0 <___vfprintf_internal_r+0x162c>
10003254:	dc401f17 	ldw	r17,124(sp)
10003258:	00800044 	movi	r2,1
1000325c:	40800115 	stw	r2,4(r8)
10003260:	8c400044 	addi	r17,r17,1
10003264:	44000015 	stw	r16,0(r8)
10003268:	d8c02015 	stw	r3,128(sp)
1000326c:	dc401f15 	stw	r17,124(sp)
10003270:	008001c4 	movi	r2,7
10003274:	14416b16 	blt	r2,r17,10003824 <___vfprintf_internal_r+0x16b0>
10003278:	42000204 	addi	r8,r8,8
1000327c:	d8803717 	ldw	r2,220(sp)
10003280:	d9003417 	ldw	r4,208(sp)
10003284:	8c400044 	addi	r17,r17,1
10003288:	10c7883a 	add	r3,r2,r3
1000328c:	40800115 	stw	r2,4(r8)
10003290:	41000015 	stw	r4,0(r8)
10003294:	d8c02015 	stw	r3,128(sp)
10003298:	dc401f15 	stw	r17,124(sp)
1000329c:	008001c4 	movi	r2,7
100032a0:	14416916 	blt	r2,r17,10003848 <___vfprintf_internal_r+0x16d4>
100032a4:	45800204 	addi	r22,r8,8
100032a8:	d9003617 	ldw	r4,216(sp)
100032ac:	d9403817 	ldw	r5,224(sp)
100032b0:	000d883a 	mov	r6,zero
100032b4:	000f883a 	mov	r7,zero
100032b8:	d8c03c15 	stw	r3,240(sp)
100032bc:	000c4840 	call	1000c484 <__eqdf2>
100032c0:	d8c03c17 	ldw	r3,240(sp)
100032c4:	1000bc26 	beq	r2,zero,100035b8 <___vfprintf_internal_r+0x1444>
100032c8:	d9403317 	ldw	r5,204(sp)
100032cc:	84000044 	addi	r16,r16,1
100032d0:	8c400044 	addi	r17,r17,1
100032d4:	28bfffc4 	addi	r2,r5,-1
100032d8:	1887883a 	add	r3,r3,r2
100032dc:	b0800115 	stw	r2,4(r22)
100032e0:	b4000015 	stw	r16,0(r22)
100032e4:	d8c02015 	stw	r3,128(sp)
100032e8:	dc401f15 	stw	r17,124(sp)
100032ec:	008001c4 	movi	r2,7
100032f0:	14414316 	blt	r2,r17,10003800 <___vfprintf_internal_r+0x168c>
100032f4:	b5800204 	addi	r22,r22,8
100032f8:	d9003a17 	ldw	r4,232(sp)
100032fc:	df0022c4 	addi	fp,sp,139
10003300:	8c400044 	addi	r17,r17,1
10003304:	20c7883a 	add	r3,r4,r3
10003308:	b7000015 	stw	fp,0(r22)
1000330c:	b1000115 	stw	r4,4(r22)
10003310:	d8c02015 	stw	r3,128(sp)
10003314:	dc401f15 	stw	r17,124(sp)
10003318:	008001c4 	movi	r2,7
1000331c:	14400e16 	blt	r2,r17,10003358 <___vfprintf_internal_r+0x11e4>
10003320:	b2000204 	addi	r8,r22,8
10003324:	003e1806 	br	10002b88 <__alt_data_end+0xf8002b88>
10003328:	01040074 	movhi	r4,4097
1000332c:	2100ad84 	addi	r4,r4,694
10003330:	d9002c15 	stw	r4,176(sp)
10003334:	d9002c17 	ldw	r4,176(sp)
10003338:	1c07883a 	add	r3,r3,r16
1000333c:	44000115 	stw	r16,4(r8)
10003340:	41000015 	stw	r4,0(r8)
10003344:	10800044 	addi	r2,r2,1
10003348:	d8c02015 	stw	r3,128(sp)
1000334c:	d8801f15 	stw	r2,124(sp)
10003350:	010001c4 	movi	r4,7
10003354:	20be0b0e 	bge	r4,r2,10002b84 <__alt_data_end+0xf8002b84>
10003358:	d9002d17 	ldw	r4,180(sp)
1000335c:	d9801e04 	addi	r6,sp,120
10003360:	b80b883a 	mov	r5,r23
10003364:	0007c3c0 	call	10007c3c <__sprint_r>
10003368:	103c861e 	bne	r2,zero,10002584 <__alt_data_end+0xf8002584>
1000336c:	d8c02017 	ldw	r3,128(sp)
10003370:	da000404 	addi	r8,sp,16
10003374:	003e0406 	br	10002b88 <__alt_data_end+0xf8002b88>
10003378:	d9002d17 	ldw	r4,180(sp)
1000337c:	d9801e04 	addi	r6,sp,120
10003380:	b80b883a 	mov	r5,r23
10003384:	0007c3c0 	call	10007c3c <__sprint_r>
10003388:	103e3b26 	beq	r2,zero,10002c78 <__alt_data_end+0xf8002c78>
1000338c:	003c7d06 	br	10002584 <__alt_data_end+0xf8002584>
10003390:	d9002d17 	ldw	r4,180(sp)
10003394:	d9801e04 	addi	r6,sp,120
10003398:	b80b883a 	mov	r5,r23
1000339c:	0007c3c0 	call	10007c3c <__sprint_r>
100033a0:	103c781e 	bne	r2,zero,10002584 <__alt_data_end+0xf8002584>
100033a4:	d8c02017 	ldw	r3,128(sp)
100033a8:	da000404 	addi	r8,sp,16
100033ac:	003de906 	br	10002b54 <__alt_data_end+0xf8002b54>
100033b0:	d9002d17 	ldw	r4,180(sp)
100033b4:	d9801e04 	addi	r6,sp,120
100033b8:	b80b883a 	mov	r5,r23
100033bc:	0007c3c0 	call	10007c3c <__sprint_r>
100033c0:	103c701e 	bne	r2,zero,10002584 <__alt_data_end+0xf8002584>
100033c4:	d8c02017 	ldw	r3,128(sp)
100033c8:	da000404 	addi	r8,sp,16
100033cc:	003d9b06 	br	10002a3c <__alt_data_end+0xf8002a3c>
100033d0:	d9002d17 	ldw	r4,180(sp)
100033d4:	d9801e04 	addi	r6,sp,120
100033d8:	b80b883a 	mov	r5,r23
100033dc:	0007c3c0 	call	10007c3c <__sprint_r>
100033e0:	103c681e 	bne	r2,zero,10002584 <__alt_data_end+0xf8002584>
100033e4:	d8c02017 	ldw	r3,128(sp)
100033e8:	da000404 	addi	r8,sp,16
100033ec:	003da106 	br	10002a74 <__alt_data_end+0xf8002a74>
100033f0:	d9402a17 	ldw	r5,168(sp)
100033f4:	d8002785 	stb	zero,158(sp)
100033f8:	283f0616 	blt	r5,zero,10003014 <__alt_data_end+0xf8003014>
100033fc:	00ffdfc4 	movi	r3,-129
10003400:	9d84b03a 	or	r2,r19,r22
10003404:	90e4703a 	and	r18,r18,r3
10003408:	103c3b26 	beq	r2,zero,100024f8 <__alt_data_end+0xf80024f8>
1000340c:	0039883a 	mov	fp,zero
10003410:	003e5806 	br	10002d74 <__alt_data_end+0xf8002d74>
10003414:	9080040c 	andi	r2,r18,16
10003418:	1001b326 	beq	r2,zero,10003ae8 <___vfprintf_internal_r+0x1974>
1000341c:	d8c02e17 	ldw	r3,184(sp)
10003420:	d9002a17 	ldw	r4,168(sp)
10003424:	d8002785 	stb	zero,158(sp)
10003428:	18800104 	addi	r2,r3,4
1000342c:	1cc00017 	ldw	r19,0(r3)
10003430:	002d883a 	mov	r22,zero
10003434:	2001b516 	blt	r4,zero,10003b0c <___vfprintf_internal_r+0x1998>
10003438:	00ffdfc4 	movi	r3,-129
1000343c:	d8802e15 	stw	r2,184(sp)
10003440:	90e4703a 	and	r18,r18,r3
10003444:	983d0526 	beq	r19,zero,1000285c <__alt_data_end+0xf800285c>
10003448:	0039883a 	mov	fp,zero
1000344c:	003d0806 	br	10002870 <__alt_data_end+0xf8002870>
10003450:	dc402617 	ldw	r17,152(sp)
10003454:	0441d30e 	bge	zero,r17,10003ba4 <___vfprintf_internal_r+0x1a30>
10003458:	dc403217 	ldw	r17,200(sp)
1000345c:	d8803317 	ldw	r2,204(sp)
10003460:	1440010e 	bge	r2,r17,10003468 <___vfprintf_internal_r+0x12f4>
10003464:	1023883a 	mov	r17,r2
10003468:	04400a0e 	bge	zero,r17,10003494 <___vfprintf_internal_r+0x1320>
1000346c:	d8801f17 	ldw	r2,124(sp)
10003470:	1c47883a 	add	r3,r3,r17
10003474:	44000015 	stw	r16,0(r8)
10003478:	10800044 	addi	r2,r2,1
1000347c:	44400115 	stw	r17,4(r8)
10003480:	d8c02015 	stw	r3,128(sp)
10003484:	d8801f15 	stw	r2,124(sp)
10003488:	010001c4 	movi	r4,7
1000348c:	20826516 	blt	r4,r2,10003e24 <___vfprintf_internal_r+0x1cb0>
10003490:	42000204 	addi	r8,r8,8
10003494:	88026116 	blt	r17,zero,10003e1c <___vfprintf_internal_r+0x1ca8>
10003498:	d9003217 	ldw	r4,200(sp)
1000349c:	2463c83a 	sub	r17,r4,r17
100034a0:	04407b0e 	bge	zero,r17,10003690 <___vfprintf_internal_r+0x151c>
100034a4:	05800404 	movi	r22,16
100034a8:	d8801f17 	ldw	r2,124(sp)
100034ac:	b4419d0e 	bge	r22,r17,10003b24 <___vfprintf_internal_r+0x19b0>
100034b0:	01040074 	movhi	r4,4097
100034b4:	2100ad84 	addi	r4,r4,694
100034b8:	d9002c15 	stw	r4,176(sp)
100034bc:	070001c4 	movi	fp,7
100034c0:	dcc02d17 	ldw	r19,180(sp)
100034c4:	00000306 	br	100034d4 <___vfprintf_internal_r+0x1360>
100034c8:	42000204 	addi	r8,r8,8
100034cc:	8c7ffc04 	addi	r17,r17,-16
100034d0:	b441970e 	bge	r22,r17,10003b30 <___vfprintf_internal_r+0x19bc>
100034d4:	18c00404 	addi	r3,r3,16
100034d8:	10800044 	addi	r2,r2,1
100034dc:	45000015 	stw	r20,0(r8)
100034e0:	45800115 	stw	r22,4(r8)
100034e4:	d8c02015 	stw	r3,128(sp)
100034e8:	d8801f15 	stw	r2,124(sp)
100034ec:	e0bff60e 	bge	fp,r2,100034c8 <__alt_data_end+0xf80034c8>
100034f0:	d9801e04 	addi	r6,sp,120
100034f4:	b80b883a 	mov	r5,r23
100034f8:	9809883a 	mov	r4,r19
100034fc:	0007c3c0 	call	10007c3c <__sprint_r>
10003500:	103c201e 	bne	r2,zero,10002584 <__alt_data_end+0xf8002584>
10003504:	d8c02017 	ldw	r3,128(sp)
10003508:	d8801f17 	ldw	r2,124(sp)
1000350c:	da000404 	addi	r8,sp,16
10003510:	003fee06 	br	100034cc <__alt_data_end+0xf80034cc>
10003514:	d9002d17 	ldw	r4,180(sp)
10003518:	d9801e04 	addi	r6,sp,120
1000351c:	b80b883a 	mov	r5,r23
10003520:	0007c3c0 	call	10007c3c <__sprint_r>
10003524:	103c171e 	bne	r2,zero,10002584 <__alt_data_end+0xf8002584>
10003528:	d8c02017 	ldw	r3,128(sp)
1000352c:	df002787 	ldb	fp,158(sp)
10003530:	da000404 	addi	r8,sp,16
10003534:	003d3406 	br	10002a08 <__alt_data_end+0xf8002a08>
10003538:	9080040c 	andi	r2,r18,16
1000353c:	10016126 	beq	r2,zero,10003ac4 <___vfprintf_internal_r+0x1950>
10003540:	d9402e17 	ldw	r5,184(sp)
10003544:	2cc00017 	ldw	r19,0(r5)
10003548:	29400104 	addi	r5,r5,4
1000354c:	d9402e15 	stw	r5,184(sp)
10003550:	982dd7fa 	srai	r22,r19,31
10003554:	b005883a 	mov	r2,r22
10003558:	003c5a06 	br	100026c4 <__alt_data_end+0xf80026c4>
1000355c:	9080040c 	andi	r2,r18,16
10003560:	10003526 	beq	r2,zero,10003638 <___vfprintf_internal_r+0x14c4>
10003564:	d8c02e17 	ldw	r3,184(sp)
10003568:	d9002a17 	ldw	r4,168(sp)
1000356c:	d8002785 	stb	zero,158(sp)
10003570:	18800104 	addi	r2,r3,4
10003574:	1cc00017 	ldw	r19,0(r3)
10003578:	002d883a 	mov	r22,zero
1000357c:	20003716 	blt	r4,zero,1000365c <___vfprintf_internal_r+0x14e8>
10003580:	00ffdfc4 	movi	r3,-129
10003584:	d8802e15 	stw	r2,184(sp)
10003588:	90e4703a 	and	r18,r18,r3
1000358c:	0039883a 	mov	fp,zero
10003590:	983dd426 	beq	r19,zero,10002ce4 <__alt_data_end+0xf8002ce4>
10003594:	00800244 	movi	r2,9
10003598:	14fc5336 	bltu	r2,r19,100026e8 <__alt_data_end+0xf80026e8>
1000359c:	d8c02817 	ldw	r3,160(sp)
100035a0:	dc001dc4 	addi	r16,sp,119
100035a4:	9cc00c04 	addi	r19,r19,48
100035a8:	1c07c83a 	sub	r3,r3,r16
100035ac:	dcc01dc5 	stb	r19,119(sp)
100035b0:	d8c02b15 	stw	r3,172(sp)
100035b4:	003cc606 	br	100028d0 <__alt_data_end+0xf80028d0>
100035b8:	d8803317 	ldw	r2,204(sp)
100035bc:	143fffc4 	addi	r16,r2,-1
100035c0:	043f4d0e 	bge	zero,r16,100032f8 <__alt_data_end+0xf80032f8>
100035c4:	07000404 	movi	fp,16
100035c8:	e400810e 	bge	fp,r16,100037d0 <___vfprintf_internal_r+0x165c>
100035cc:	01440074 	movhi	r5,4097
100035d0:	2940ad84 	addi	r5,r5,694
100035d4:	d9402c15 	stw	r5,176(sp)
100035d8:	01c001c4 	movi	r7,7
100035dc:	dcc02d17 	ldw	r19,180(sp)
100035e0:	00000306 	br	100035f0 <___vfprintf_internal_r+0x147c>
100035e4:	b5800204 	addi	r22,r22,8
100035e8:	843ffc04 	addi	r16,r16,-16
100035ec:	e4007b0e 	bge	fp,r16,100037dc <___vfprintf_internal_r+0x1668>
100035f0:	18c00404 	addi	r3,r3,16
100035f4:	8c400044 	addi	r17,r17,1
100035f8:	b5000015 	stw	r20,0(r22)
100035fc:	b7000115 	stw	fp,4(r22)
10003600:	d8c02015 	stw	r3,128(sp)
10003604:	dc401f15 	stw	r17,124(sp)
10003608:	3c7ff60e 	bge	r7,r17,100035e4 <__alt_data_end+0xf80035e4>
1000360c:	d9801e04 	addi	r6,sp,120
10003610:	b80b883a 	mov	r5,r23
10003614:	9809883a 	mov	r4,r19
10003618:	d9c03c15 	stw	r7,240(sp)
1000361c:	0007c3c0 	call	10007c3c <__sprint_r>
10003620:	d9c03c17 	ldw	r7,240(sp)
10003624:	103bd71e 	bne	r2,zero,10002584 <__alt_data_end+0xf8002584>
10003628:	d8c02017 	ldw	r3,128(sp)
1000362c:	dc401f17 	ldw	r17,124(sp)
10003630:	dd800404 	addi	r22,sp,16
10003634:	003fec06 	br	100035e8 <__alt_data_end+0xf80035e8>
10003638:	9080100c 	andi	r2,r18,64
1000363c:	d8002785 	stb	zero,158(sp)
10003640:	10010e26 	beq	r2,zero,10003a7c <___vfprintf_internal_r+0x1908>
10003644:	d9402e17 	ldw	r5,184(sp)
10003648:	d8c02a17 	ldw	r3,168(sp)
1000364c:	002d883a 	mov	r22,zero
10003650:	28800104 	addi	r2,r5,4
10003654:	2cc0000b 	ldhu	r19,0(r5)
10003658:	183fc90e 	bge	r3,zero,10003580 <__alt_data_end+0xf8003580>
1000365c:	d8802e15 	stw	r2,184(sp)
10003660:	0039883a 	mov	fp,zero
10003664:	9d84b03a 	or	r2,r19,r22
10003668:	103c1e1e 	bne	r2,zero,100026e4 <__alt_data_end+0xf80026e4>
1000366c:	00800044 	movi	r2,1
10003670:	003e6c06 	br	10003024 <__alt_data_end+0xf8003024>
10003674:	d9002d17 	ldw	r4,180(sp)
10003678:	d9801e04 	addi	r6,sp,120
1000367c:	b80b883a 	mov	r5,r23
10003680:	0007c3c0 	call	10007c3c <__sprint_r>
10003684:	103bbf1e 	bne	r2,zero,10002584 <__alt_data_end+0xf8002584>
10003688:	d8c02017 	ldw	r3,128(sp)
1000368c:	da000404 	addi	r8,sp,16
10003690:	d9003217 	ldw	r4,200(sp)
10003694:	d8802617 	ldw	r2,152(sp)
10003698:	d9403317 	ldw	r5,204(sp)
1000369c:	8123883a 	add	r17,r16,r4
100036a0:	11400216 	blt	r2,r5,100036ac <___vfprintf_internal_r+0x1538>
100036a4:	9100004c 	andi	r4,r18,1
100036a8:	20000d26 	beq	r4,zero,100036e0 <___vfprintf_internal_r+0x156c>
100036ac:	d9003717 	ldw	r4,220(sp)
100036b0:	d9403417 	ldw	r5,208(sp)
100036b4:	1907883a 	add	r3,r3,r4
100036b8:	d9001f17 	ldw	r4,124(sp)
100036bc:	41400015 	stw	r5,0(r8)
100036c0:	d9403717 	ldw	r5,220(sp)
100036c4:	21000044 	addi	r4,r4,1
100036c8:	d8c02015 	stw	r3,128(sp)
100036cc:	41400115 	stw	r5,4(r8)
100036d0:	d9001f15 	stw	r4,124(sp)
100036d4:	014001c4 	movi	r5,7
100036d8:	2901e816 	blt	r5,r4,10003e7c <___vfprintf_internal_r+0x1d08>
100036dc:	42000204 	addi	r8,r8,8
100036e0:	d9003317 	ldw	r4,204(sp)
100036e4:	8121883a 	add	r16,r16,r4
100036e8:	2085c83a 	sub	r2,r4,r2
100036ec:	8461c83a 	sub	r16,r16,r17
100036f0:	1400010e 	bge	r2,r16,100036f8 <___vfprintf_internal_r+0x1584>
100036f4:	1021883a 	mov	r16,r2
100036f8:	04000a0e 	bge	zero,r16,10003724 <___vfprintf_internal_r+0x15b0>
100036fc:	d9001f17 	ldw	r4,124(sp)
10003700:	1c07883a 	add	r3,r3,r16
10003704:	44400015 	stw	r17,0(r8)
10003708:	21000044 	addi	r4,r4,1
1000370c:	44000115 	stw	r16,4(r8)
10003710:	d8c02015 	stw	r3,128(sp)
10003714:	d9001f15 	stw	r4,124(sp)
10003718:	014001c4 	movi	r5,7
1000371c:	2901fb16 	blt	r5,r4,10003f0c <___vfprintf_internal_r+0x1d98>
10003720:	42000204 	addi	r8,r8,8
10003724:	8001f716 	blt	r16,zero,10003f04 <___vfprintf_internal_r+0x1d90>
10003728:	1421c83a 	sub	r16,r2,r16
1000372c:	043d160e 	bge	zero,r16,10002b88 <__alt_data_end+0xf8002b88>
10003730:	04400404 	movi	r17,16
10003734:	d8801f17 	ldw	r2,124(sp)
10003738:	8c3efb0e 	bge	r17,r16,10003328 <__alt_data_end+0xf8003328>
1000373c:	01440074 	movhi	r5,4097
10003740:	2940ad84 	addi	r5,r5,694
10003744:	d9402c15 	stw	r5,176(sp)
10003748:	058001c4 	movi	r22,7
1000374c:	dcc02d17 	ldw	r19,180(sp)
10003750:	00000306 	br	10003760 <___vfprintf_internal_r+0x15ec>
10003754:	42000204 	addi	r8,r8,8
10003758:	843ffc04 	addi	r16,r16,-16
1000375c:	8c3ef50e 	bge	r17,r16,10003334 <__alt_data_end+0xf8003334>
10003760:	18c00404 	addi	r3,r3,16
10003764:	10800044 	addi	r2,r2,1
10003768:	45000015 	stw	r20,0(r8)
1000376c:	44400115 	stw	r17,4(r8)
10003770:	d8c02015 	stw	r3,128(sp)
10003774:	d8801f15 	stw	r2,124(sp)
10003778:	b0bff60e 	bge	r22,r2,10003754 <__alt_data_end+0xf8003754>
1000377c:	d9801e04 	addi	r6,sp,120
10003780:	b80b883a 	mov	r5,r23
10003784:	9809883a 	mov	r4,r19
10003788:	0007c3c0 	call	10007c3c <__sprint_r>
1000378c:	103b7d1e 	bne	r2,zero,10002584 <__alt_data_end+0xf8002584>
10003790:	d8c02017 	ldw	r3,128(sp)
10003794:	d8801f17 	ldw	r2,124(sp)
10003798:	da000404 	addi	r8,sp,16
1000379c:	003fee06 	br	10003758 <__alt_data_end+0xf8003758>
100037a0:	9088703a 	and	r4,r18,r2
100037a4:	203eab1e 	bne	r4,zero,10003254 <__alt_data_end+0xf8003254>
100037a8:	dc401f17 	ldw	r17,124(sp)
100037ac:	40800115 	stw	r2,4(r8)
100037b0:	44000015 	stw	r16,0(r8)
100037b4:	8c400044 	addi	r17,r17,1
100037b8:	d8c02015 	stw	r3,128(sp)
100037bc:	dc401f15 	stw	r17,124(sp)
100037c0:	008001c4 	movi	r2,7
100037c4:	14400e16 	blt	r2,r17,10003800 <___vfprintf_internal_r+0x168c>
100037c8:	45800204 	addi	r22,r8,8
100037cc:	003eca06 	br	100032f8 <__alt_data_end+0xf80032f8>
100037d0:	01040074 	movhi	r4,4097
100037d4:	2100ad84 	addi	r4,r4,694
100037d8:	d9002c15 	stw	r4,176(sp)
100037dc:	d8802c17 	ldw	r2,176(sp)
100037e0:	1c07883a 	add	r3,r3,r16
100037e4:	8c400044 	addi	r17,r17,1
100037e8:	b0800015 	stw	r2,0(r22)
100037ec:	b4000115 	stw	r16,4(r22)
100037f0:	d8c02015 	stw	r3,128(sp)
100037f4:	dc401f15 	stw	r17,124(sp)
100037f8:	008001c4 	movi	r2,7
100037fc:	147ebd0e 	bge	r2,r17,100032f4 <__alt_data_end+0xf80032f4>
10003800:	d9002d17 	ldw	r4,180(sp)
10003804:	d9801e04 	addi	r6,sp,120
10003808:	b80b883a 	mov	r5,r23
1000380c:	0007c3c0 	call	10007c3c <__sprint_r>
10003810:	103b5c1e 	bne	r2,zero,10002584 <__alt_data_end+0xf8002584>
10003814:	d8c02017 	ldw	r3,128(sp)
10003818:	dc401f17 	ldw	r17,124(sp)
1000381c:	dd800404 	addi	r22,sp,16
10003820:	003eb506 	br	100032f8 <__alt_data_end+0xf80032f8>
10003824:	d9002d17 	ldw	r4,180(sp)
10003828:	d9801e04 	addi	r6,sp,120
1000382c:	b80b883a 	mov	r5,r23
10003830:	0007c3c0 	call	10007c3c <__sprint_r>
10003834:	103b531e 	bne	r2,zero,10002584 <__alt_data_end+0xf8002584>
10003838:	d8c02017 	ldw	r3,128(sp)
1000383c:	dc401f17 	ldw	r17,124(sp)
10003840:	da000404 	addi	r8,sp,16
10003844:	003e8d06 	br	1000327c <__alt_data_end+0xf800327c>
10003848:	d9002d17 	ldw	r4,180(sp)
1000384c:	d9801e04 	addi	r6,sp,120
10003850:	b80b883a 	mov	r5,r23
10003854:	0007c3c0 	call	10007c3c <__sprint_r>
10003858:	103b4a1e 	bne	r2,zero,10002584 <__alt_data_end+0xf8002584>
1000385c:	d8c02017 	ldw	r3,128(sp)
10003860:	dc401f17 	ldw	r17,124(sp)
10003864:	dd800404 	addi	r22,sp,16
10003868:	003e8f06 	br	100032a8 <__alt_data_end+0xf80032a8>
1000386c:	0027883a 	mov	r19,zero
10003870:	003f4a06 	br	1000359c <__alt_data_end+0xf800359c>
10003874:	d9002d17 	ldw	r4,180(sp)
10003878:	d9801e04 	addi	r6,sp,120
1000387c:	b80b883a 	mov	r5,r23
10003880:	0007c3c0 	call	10007c3c <__sprint_r>
10003884:	103b3f1e 	bne	r2,zero,10002584 <__alt_data_end+0xf8002584>
10003888:	d8c02017 	ldw	r3,128(sp)
1000388c:	da000404 	addi	r8,sp,16
10003890:	003c7b06 	br	10002a80 <__alt_data_end+0xf8002a80>
10003894:	d9402a17 	ldw	r5,168(sp)
10003898:	04e7c83a 	sub	r19,zero,r19
1000389c:	07000b44 	movi	fp,45
100038a0:	9804c03a 	cmpne	r2,r19,zero
100038a4:	05adc83a 	sub	r22,zero,r22
100038a8:	df002785 	stb	fp,158(sp)
100038ac:	b0adc83a 	sub	r22,r22,r2
100038b0:	28017b16 	blt	r5,zero,10003ea0 <___vfprintf_internal_r+0x1d2c>
100038b4:	00bfdfc4 	movi	r2,-129
100038b8:	90a4703a 	and	r18,r18,r2
100038bc:	003b8906 	br	100026e4 <__alt_data_end+0xf80026e4>
100038c0:	d9003617 	ldw	r4,216(sp)
100038c4:	d9403817 	ldw	r5,224(sp)
100038c8:	da003d15 	stw	r8,244(sp)
100038cc:	00076540 	call	10007654 <__fpclassifyd>
100038d0:	da003d17 	ldw	r8,244(sp)
100038d4:	1000f026 	beq	r2,zero,10003c98 <___vfprintf_internal_r+0x1b24>
100038d8:	d9002a17 	ldw	r4,168(sp)
100038dc:	05bff7c4 	movi	r22,-33
100038e0:	00bfffc4 	movi	r2,-1
100038e4:	8dac703a 	and	r22,r17,r22
100038e8:	20820026 	beq	r4,r2,100040ec <___vfprintf_internal_r+0x1f78>
100038ec:	008011c4 	movi	r2,71
100038f0:	b081f726 	beq	r22,r2,100040d0 <___vfprintf_internal_r+0x1f5c>
100038f4:	d9003817 	ldw	r4,224(sp)
100038f8:	90c04014 	ori	r3,r18,256
100038fc:	d8c02c15 	stw	r3,176(sp)
10003900:	20021516 	blt	r4,zero,10004158 <___vfprintf_internal_r+0x1fe4>
10003904:	dcc03817 	ldw	r19,224(sp)
10003908:	d8002905 	stb	zero,164(sp)
1000390c:	00801984 	movi	r2,102
10003910:	8881f926 	beq	r17,r2,100040f8 <___vfprintf_internal_r+0x1f84>
10003914:	00801184 	movi	r2,70
10003918:	88821c26 	beq	r17,r2,1000418c <___vfprintf_internal_r+0x2018>
1000391c:	00801144 	movi	r2,69
10003920:	b081ef26 	beq	r22,r2,100040e0 <___vfprintf_internal_r+0x1f6c>
10003924:	d8c02a17 	ldw	r3,168(sp)
10003928:	d8802104 	addi	r2,sp,132
1000392c:	d8800315 	stw	r2,12(sp)
10003930:	d9403617 	ldw	r5,216(sp)
10003934:	d8802504 	addi	r2,sp,148
10003938:	d9002d17 	ldw	r4,180(sp)
1000393c:	d8800215 	stw	r2,8(sp)
10003940:	d8802604 	addi	r2,sp,152
10003944:	d8c00015 	stw	r3,0(sp)
10003948:	d8800115 	stw	r2,4(sp)
1000394c:	01c00084 	movi	r7,2
10003950:	980d883a 	mov	r6,r19
10003954:	d8c03c15 	stw	r3,240(sp)
10003958:	da003d15 	stw	r8,244(sp)
1000395c:	00049700 	call	10004970 <_dtoa_r>
10003960:	1021883a 	mov	r16,r2
10003964:	008019c4 	movi	r2,103
10003968:	d8c03c17 	ldw	r3,240(sp)
1000396c:	da003d17 	ldw	r8,244(sp)
10003970:	88817126 	beq	r17,r2,10003f38 <___vfprintf_internal_r+0x1dc4>
10003974:	008011c4 	movi	r2,71
10003978:	88829126 	beq	r17,r2,100043c0 <___vfprintf_internal_r+0x224c>
1000397c:	80f9883a 	add	fp,r16,r3
10003980:	d9003617 	ldw	r4,216(sp)
10003984:	000d883a 	mov	r6,zero
10003988:	000f883a 	mov	r7,zero
1000398c:	980b883a 	mov	r5,r19
10003990:	da003d15 	stw	r8,244(sp)
10003994:	000c4840 	call	1000c484 <__eqdf2>
10003998:	da003d17 	ldw	r8,244(sp)
1000399c:	10018d26 	beq	r2,zero,10003fd4 <___vfprintf_internal_r+0x1e60>
100039a0:	d8802117 	ldw	r2,132(sp)
100039a4:	1700062e 	bgeu	r2,fp,100039c0 <___vfprintf_internal_r+0x184c>
100039a8:	01000c04 	movi	r4,48
100039ac:	10c00044 	addi	r3,r2,1
100039b0:	d8c02115 	stw	r3,132(sp)
100039b4:	11000005 	stb	r4,0(r2)
100039b8:	d8802117 	ldw	r2,132(sp)
100039bc:	173ffb36 	bltu	r2,fp,100039ac <__alt_data_end+0xf80039ac>
100039c0:	1405c83a 	sub	r2,r2,r16
100039c4:	d8803315 	stw	r2,204(sp)
100039c8:	008011c4 	movi	r2,71
100039cc:	b0817626 	beq	r22,r2,10003fa8 <___vfprintf_internal_r+0x1e34>
100039d0:	00801944 	movi	r2,101
100039d4:	1442800e 	bge	r2,r17,100043d8 <___vfprintf_internal_r+0x2264>
100039d8:	d8c02617 	ldw	r3,152(sp)
100039dc:	00801984 	movi	r2,102
100039e0:	d8c03215 	stw	r3,200(sp)
100039e4:	8881fe26 	beq	r17,r2,100041e0 <___vfprintf_internal_r+0x206c>
100039e8:	d8c03217 	ldw	r3,200(sp)
100039ec:	d9003317 	ldw	r4,204(sp)
100039f0:	1901dd16 	blt	r3,r4,10004168 <___vfprintf_internal_r+0x1ff4>
100039f4:	9480004c 	andi	r18,r18,1
100039f8:	90022b1e 	bne	r18,zero,100042a8 <___vfprintf_internal_r+0x2134>
100039fc:	1805883a 	mov	r2,r3
10003a00:	18028316 	blt	r3,zero,10004410 <___vfprintf_internal_r+0x229c>
10003a04:	d8c03217 	ldw	r3,200(sp)
10003a08:	044019c4 	movi	r17,103
10003a0c:	d8c02b15 	stw	r3,172(sp)
10003a10:	df002907 	ldb	fp,164(sp)
10003a14:	e001531e 	bne	fp,zero,10003f64 <___vfprintf_internal_r+0x1df0>
10003a18:	df002783 	ldbu	fp,158(sp)
10003a1c:	d8802915 	stw	r2,164(sp)
10003a20:	dc802c17 	ldw	r18,176(sp)
10003a24:	d8002a15 	stw	zero,168(sp)
10003a28:	003baf06 	br	100028e8 <__alt_data_end+0xf80028e8>
10003a2c:	d8c02e17 	ldw	r3,184(sp)
10003a30:	d9002e17 	ldw	r4,184(sp)
10003a34:	d9402e17 	ldw	r5,184(sp)
10003a38:	18c00017 	ldw	r3,0(r3)
10003a3c:	21000117 	ldw	r4,4(r4)
10003a40:	29400204 	addi	r5,r5,8
10003a44:	d8c03615 	stw	r3,216(sp)
10003a48:	d9003815 	stw	r4,224(sp)
10003a4c:	d9402e15 	stw	r5,184(sp)
10003a50:	003b5006 	br	10002794 <__alt_data_end+0xf8002794>
10003a54:	ac400007 	ldb	r17,0(r21)
10003a58:	003a2806 	br	100022fc <__alt_data_end+0xf80022fc>
10003a5c:	9080100c 	andi	r2,r18,64
10003a60:	1000a826 	beq	r2,zero,10003d04 <___vfprintf_internal_r+0x1b90>
10003a64:	d8c02e17 	ldw	r3,184(sp)
10003a68:	002d883a 	mov	r22,zero
10003a6c:	1cc0000b 	ldhu	r19,0(r3)
10003a70:	18c00104 	addi	r3,r3,4
10003a74:	d8c02e15 	stw	r3,184(sp)
10003a78:	003caf06 	br	10002d38 <__alt_data_end+0xf8002d38>
10003a7c:	d9002e17 	ldw	r4,184(sp)
10003a80:	d9402a17 	ldw	r5,168(sp)
10003a84:	002d883a 	mov	r22,zero
10003a88:	20800104 	addi	r2,r4,4
10003a8c:	24c00017 	ldw	r19,0(r4)
10003a90:	283ebb0e 	bge	r5,zero,10003580 <__alt_data_end+0xf8003580>
10003a94:	003ef106 	br	1000365c <__alt_data_end+0xf800365c>
10003a98:	9080040c 	andi	r2,r18,16
10003a9c:	1000921e 	bne	r2,zero,10003ce8 <___vfprintf_internal_r+0x1b74>
10003aa0:	9480100c 	andi	r18,r18,64
10003aa4:	90013926 	beq	r18,zero,10003f8c <___vfprintf_internal_r+0x1e18>
10003aa8:	d9402e17 	ldw	r5,184(sp)
10003aac:	d8c02f17 	ldw	r3,188(sp)
10003ab0:	28800017 	ldw	r2,0(r5)
10003ab4:	29400104 	addi	r5,r5,4
10003ab8:	d9402e15 	stw	r5,184(sp)
10003abc:	10c0000d 	sth	r3,0(r2)
10003ac0:	0039e406 	br	10002254 <__alt_data_end+0xf8002254>
10003ac4:	9080100c 	andi	r2,r18,64
10003ac8:	10008026 	beq	r2,zero,10003ccc <___vfprintf_internal_r+0x1b58>
10003acc:	d8802e17 	ldw	r2,184(sp)
10003ad0:	14c0000f 	ldh	r19,0(r2)
10003ad4:	10800104 	addi	r2,r2,4
10003ad8:	d8802e15 	stw	r2,184(sp)
10003adc:	982dd7fa 	srai	r22,r19,31
10003ae0:	b005883a 	mov	r2,r22
10003ae4:	003af706 	br	100026c4 <__alt_data_end+0xf80026c4>
10003ae8:	9080100c 	andi	r2,r18,64
10003aec:	d8002785 	stb	zero,158(sp)
10003af0:	10008a1e 	bne	r2,zero,10003d1c <___vfprintf_internal_r+0x1ba8>
10003af4:	d9002e17 	ldw	r4,184(sp)
10003af8:	d9402a17 	ldw	r5,168(sp)
10003afc:	002d883a 	mov	r22,zero
10003b00:	20800104 	addi	r2,r4,4
10003b04:	24c00017 	ldw	r19,0(r4)
10003b08:	283e4b0e 	bge	r5,zero,10003438 <__alt_data_end+0xf8003438>
10003b0c:	9d86b03a 	or	r3,r19,r22
10003b10:	d8802e15 	stw	r2,184(sp)
10003b14:	183e4c1e 	bne	r3,zero,10003448 <__alt_data_end+0xf8003448>
10003b18:	0039883a 	mov	fp,zero
10003b1c:	0005883a 	mov	r2,zero
10003b20:	003d4006 	br	10003024 <__alt_data_end+0xf8003024>
10003b24:	01440074 	movhi	r5,4097
10003b28:	2940ad84 	addi	r5,r5,694
10003b2c:	d9402c15 	stw	r5,176(sp)
10003b30:	d9402c17 	ldw	r5,176(sp)
10003b34:	1c47883a 	add	r3,r3,r17
10003b38:	10800044 	addi	r2,r2,1
10003b3c:	41400015 	stw	r5,0(r8)
10003b40:	44400115 	stw	r17,4(r8)
10003b44:	d8c02015 	stw	r3,128(sp)
10003b48:	d8801f15 	stw	r2,124(sp)
10003b4c:	010001c4 	movi	r4,7
10003b50:	20bec816 	blt	r4,r2,10003674 <__alt_data_end+0xf8003674>
10003b54:	42000204 	addi	r8,r8,8
10003b58:	003ecd06 	br	10003690 <__alt_data_end+0xf8003690>
10003b5c:	d9002a17 	ldw	r4,168(sp)
10003b60:	d8002785 	stb	zero,158(sp)
10003b64:	203d2d16 	blt	r4,zero,1000301c <__alt_data_end+0xf800301c>
10003b68:	00bfdfc4 	movi	r2,-129
10003b6c:	90a4703a 	and	r18,r18,r2
10003b70:	003a6106 	br	100024f8 <__alt_data_end+0xf80024f8>
10003b74:	01040074 	movhi	r4,4097
10003b78:	2100ad84 	addi	r4,r4,694
10003b7c:	d9002c15 	stw	r4,176(sp)
10003b80:	003bea06 	br	10002b2c <__alt_data_end+0xf8002b2c>
10003b84:	d9002d17 	ldw	r4,180(sp)
10003b88:	d9801e04 	addi	r6,sp,120
10003b8c:	b80b883a 	mov	r5,r23
10003b90:	0007c3c0 	call	10007c3c <__sprint_r>
10003b94:	103a7b1e 	bne	r2,zero,10002584 <__alt_data_end+0xf8002584>
10003b98:	d8c02017 	ldw	r3,128(sp)
10003b9c:	da000404 	addi	r8,sp,16
10003ba0:	003d4106 	br	100030a8 <__alt_data_end+0xf80030a8>
10003ba4:	d8801f17 	ldw	r2,124(sp)
10003ba8:	01440074 	movhi	r5,4097
10003bac:	01000044 	movi	r4,1
10003bb0:	18c00044 	addi	r3,r3,1
10003bb4:	10800044 	addi	r2,r2,1
10003bb8:	2940ad04 	addi	r5,r5,692
10003bbc:	41000115 	stw	r4,4(r8)
10003bc0:	41400015 	stw	r5,0(r8)
10003bc4:	d8c02015 	stw	r3,128(sp)
10003bc8:	d8801f15 	stw	r2,124(sp)
10003bcc:	010001c4 	movi	r4,7
10003bd0:	20805c16 	blt	r4,r2,10003d44 <___vfprintf_internal_r+0x1bd0>
10003bd4:	42000204 	addi	r8,r8,8
10003bd8:	8800041e 	bne	r17,zero,10003bec <___vfprintf_internal_r+0x1a78>
10003bdc:	d8803317 	ldw	r2,204(sp)
10003be0:	1000021e 	bne	r2,zero,10003bec <___vfprintf_internal_r+0x1a78>
10003be4:	9080004c 	andi	r2,r18,1
10003be8:	103be726 	beq	r2,zero,10002b88 <__alt_data_end+0xf8002b88>
10003bec:	d9003717 	ldw	r4,220(sp)
10003bf0:	d8801f17 	ldw	r2,124(sp)
10003bf4:	d9403417 	ldw	r5,208(sp)
10003bf8:	20c7883a 	add	r3,r4,r3
10003bfc:	10800044 	addi	r2,r2,1
10003c00:	41000115 	stw	r4,4(r8)
10003c04:	41400015 	stw	r5,0(r8)
10003c08:	d8c02015 	stw	r3,128(sp)
10003c0c:	d8801f15 	stw	r2,124(sp)
10003c10:	010001c4 	movi	r4,7
10003c14:	20812116 	blt	r4,r2,1000409c <___vfprintf_internal_r+0x1f28>
10003c18:	42000204 	addi	r8,r8,8
10003c1c:	0463c83a 	sub	r17,zero,r17
10003c20:	0440730e 	bge	zero,r17,10003df0 <___vfprintf_internal_r+0x1c7c>
10003c24:	05800404 	movi	r22,16
10003c28:	b440860e 	bge	r22,r17,10003e44 <___vfprintf_internal_r+0x1cd0>
10003c2c:	01440074 	movhi	r5,4097
10003c30:	2940ad84 	addi	r5,r5,694
10003c34:	d9402c15 	stw	r5,176(sp)
10003c38:	070001c4 	movi	fp,7
10003c3c:	dcc02d17 	ldw	r19,180(sp)
10003c40:	00000306 	br	10003c50 <___vfprintf_internal_r+0x1adc>
10003c44:	42000204 	addi	r8,r8,8
10003c48:	8c7ffc04 	addi	r17,r17,-16
10003c4c:	b440800e 	bge	r22,r17,10003e50 <___vfprintf_internal_r+0x1cdc>
10003c50:	18c00404 	addi	r3,r3,16
10003c54:	10800044 	addi	r2,r2,1
10003c58:	45000015 	stw	r20,0(r8)
10003c5c:	45800115 	stw	r22,4(r8)
10003c60:	d8c02015 	stw	r3,128(sp)
10003c64:	d8801f15 	stw	r2,124(sp)
10003c68:	e0bff60e 	bge	fp,r2,10003c44 <__alt_data_end+0xf8003c44>
10003c6c:	d9801e04 	addi	r6,sp,120
10003c70:	b80b883a 	mov	r5,r23
10003c74:	9809883a 	mov	r4,r19
10003c78:	0007c3c0 	call	10007c3c <__sprint_r>
10003c7c:	103a411e 	bne	r2,zero,10002584 <__alt_data_end+0xf8002584>
10003c80:	d8c02017 	ldw	r3,128(sp)
10003c84:	d8801f17 	ldw	r2,124(sp)
10003c88:	da000404 	addi	r8,sp,16
10003c8c:	003fee06 	br	10003c48 <__alt_data_end+0xf8003c48>
10003c90:	00bfffc4 	movi	r2,-1
10003c94:	003a3f06 	br	10002594 <__alt_data_end+0xf8002594>
10003c98:	008011c4 	movi	r2,71
10003c9c:	1440b816 	blt	r2,r17,10003f80 <___vfprintf_internal_r+0x1e0c>
10003ca0:	04040074 	movhi	r16,4097
10003ca4:	84009f04 	addi	r16,r16,636
10003ca8:	00c000c4 	movi	r3,3
10003cac:	00bfdfc4 	movi	r2,-129
10003cb0:	d8c02915 	stw	r3,164(sp)
10003cb4:	90a4703a 	and	r18,r18,r2
10003cb8:	df002783 	ldbu	fp,158(sp)
10003cbc:	d8c02b15 	stw	r3,172(sp)
10003cc0:	d8002a15 	stw	zero,168(sp)
10003cc4:	d8003215 	stw	zero,200(sp)
10003cc8:	003b0706 	br	100028e8 <__alt_data_end+0xf80028e8>
10003ccc:	d8c02e17 	ldw	r3,184(sp)
10003cd0:	1cc00017 	ldw	r19,0(r3)
10003cd4:	18c00104 	addi	r3,r3,4
10003cd8:	d8c02e15 	stw	r3,184(sp)
10003cdc:	982dd7fa 	srai	r22,r19,31
10003ce0:	b005883a 	mov	r2,r22
10003ce4:	003a7706 	br	100026c4 <__alt_data_end+0xf80026c4>
10003ce8:	d8c02e17 	ldw	r3,184(sp)
10003cec:	d9002f17 	ldw	r4,188(sp)
10003cf0:	18800017 	ldw	r2,0(r3)
10003cf4:	18c00104 	addi	r3,r3,4
10003cf8:	d8c02e15 	stw	r3,184(sp)
10003cfc:	11000015 	stw	r4,0(r2)
10003d00:	00395406 	br	10002254 <__alt_data_end+0xf8002254>
10003d04:	d9002e17 	ldw	r4,184(sp)
10003d08:	002d883a 	mov	r22,zero
10003d0c:	24c00017 	ldw	r19,0(r4)
10003d10:	21000104 	addi	r4,r4,4
10003d14:	d9002e15 	stw	r4,184(sp)
10003d18:	003c0706 	br	10002d38 <__alt_data_end+0xf8002d38>
10003d1c:	d9402e17 	ldw	r5,184(sp)
10003d20:	d8c02a17 	ldw	r3,168(sp)
10003d24:	002d883a 	mov	r22,zero
10003d28:	28800104 	addi	r2,r5,4
10003d2c:	2cc0000b 	ldhu	r19,0(r5)
10003d30:	183dc10e 	bge	r3,zero,10003438 <__alt_data_end+0xf8003438>
10003d34:	003f7506 	br	10003b0c <__alt_data_end+0xf8003b0c>
10003d38:	04040074 	movhi	r16,4097
10003d3c:	84009d04 	addi	r16,r16,628
10003d40:	003aa706 	br	100027e0 <__alt_data_end+0xf80027e0>
10003d44:	d9002d17 	ldw	r4,180(sp)
10003d48:	d9801e04 	addi	r6,sp,120
10003d4c:	b80b883a 	mov	r5,r23
10003d50:	0007c3c0 	call	10007c3c <__sprint_r>
10003d54:	103a0b1e 	bne	r2,zero,10002584 <__alt_data_end+0xf8002584>
10003d58:	dc402617 	ldw	r17,152(sp)
10003d5c:	d8c02017 	ldw	r3,128(sp)
10003d60:	da000404 	addi	r8,sp,16
10003d64:	003f9c06 	br	10003bd8 <__alt_data_end+0xf8003bd8>
10003d68:	ac400043 	ldbu	r17,1(r21)
10003d6c:	84000814 	ori	r16,r16,32
10003d70:	ad400044 	addi	r21,r21,1
10003d74:	8c403fcc 	andi	r17,r17,255
10003d78:	8c40201c 	xori	r17,r17,128
10003d7c:	8c7fe004 	addi	r17,r17,-128
10003d80:	00395e06 	br	100022fc <__alt_data_end+0xf80022fc>
10003d84:	d8c02e15 	stw	r3,184(sp)
10003d88:	0039883a 	mov	fp,zero
10003d8c:	003e3506 	br	10003664 <__alt_data_end+0xf8003664>
10003d90:	d9002d17 	ldw	r4,180(sp)
10003d94:	d9801e04 	addi	r6,sp,120
10003d98:	b80b883a 	mov	r5,r23
10003d9c:	0007c3c0 	call	10007c3c <__sprint_r>
10003da0:	1039f81e 	bne	r2,zero,10002584 <__alt_data_end+0xf8002584>
10003da4:	d8c02017 	ldw	r3,128(sp)
10003da8:	da000404 	addi	r8,sp,16
10003dac:	003cd006 	br	100030f0 <__alt_data_end+0xf80030f0>
10003db0:	8009883a 	mov	r4,r16
10003db4:	df003d15 	stw	fp,244(sp)
10003db8:	0007aa80 	call	10007aa8 <strlen>
10003dbc:	d8802b15 	stw	r2,172(sp)
10003dc0:	da003d17 	ldw	r8,244(sp)
10003dc4:	103c200e 	bge	r2,zero,10002e48 <__alt_data_end+0xf8002e48>
10003dc8:	0005883a 	mov	r2,zero
10003dcc:	003c1e06 	br	10002e48 <__alt_data_end+0xf8002e48>
10003dd0:	d9002d17 	ldw	r4,180(sp)
10003dd4:	d9801e04 	addi	r6,sp,120
10003dd8:	b80b883a 	mov	r5,r23
10003ddc:	0007c3c0 	call	10007c3c <__sprint_r>
10003de0:	1039e81e 	bne	r2,zero,10002584 <__alt_data_end+0xf8002584>
10003de4:	d8c02017 	ldw	r3,128(sp)
10003de8:	d8801f17 	ldw	r2,124(sp)
10003dec:	da000404 	addi	r8,sp,16
10003df0:	d9403317 	ldw	r5,204(sp)
10003df4:	10800044 	addi	r2,r2,1
10003df8:	44000015 	stw	r16,0(r8)
10003dfc:	28c7883a 	add	r3,r5,r3
10003e00:	003b5b06 	br	10002b70 <__alt_data_end+0xf8002b70>
10003e04:	01040074 	movhi	r4,4097
10003e08:	2100b184 	addi	r4,r4,710
10003e0c:	d9003515 	stw	r4,212(sp)
10003e10:	003af206 	br	100029dc <__alt_data_end+0xf80029dc>
10003e14:	013fffc4 	movi	r4,-1
10003e18:	003a0806 	br	1000263c <__alt_data_end+0xf800263c>
10003e1c:	0023883a 	mov	r17,zero
10003e20:	003d9d06 	br	10003498 <__alt_data_end+0xf8003498>
10003e24:	d9002d17 	ldw	r4,180(sp)
10003e28:	d9801e04 	addi	r6,sp,120
10003e2c:	b80b883a 	mov	r5,r23
10003e30:	0007c3c0 	call	10007c3c <__sprint_r>
10003e34:	1039d31e 	bne	r2,zero,10002584 <__alt_data_end+0xf8002584>
10003e38:	d8c02017 	ldw	r3,128(sp)
10003e3c:	da000404 	addi	r8,sp,16
10003e40:	003d9406 	br	10003494 <__alt_data_end+0xf8003494>
10003e44:	01040074 	movhi	r4,4097
10003e48:	2100ad84 	addi	r4,r4,694
10003e4c:	d9002c15 	stw	r4,176(sp)
10003e50:	d9002c17 	ldw	r4,176(sp)
10003e54:	1c47883a 	add	r3,r3,r17
10003e58:	10800044 	addi	r2,r2,1
10003e5c:	41000015 	stw	r4,0(r8)
10003e60:	44400115 	stw	r17,4(r8)
10003e64:	d8c02015 	stw	r3,128(sp)
10003e68:	d8801f15 	stw	r2,124(sp)
10003e6c:	010001c4 	movi	r4,7
10003e70:	20bfd716 	blt	r4,r2,10003dd0 <__alt_data_end+0xf8003dd0>
10003e74:	42000204 	addi	r8,r8,8
10003e78:	003fdd06 	br	10003df0 <__alt_data_end+0xf8003df0>
10003e7c:	d9002d17 	ldw	r4,180(sp)
10003e80:	d9801e04 	addi	r6,sp,120
10003e84:	b80b883a 	mov	r5,r23
10003e88:	0007c3c0 	call	10007c3c <__sprint_r>
10003e8c:	1039bd1e 	bne	r2,zero,10002584 <__alt_data_end+0xf8002584>
10003e90:	d8802617 	ldw	r2,152(sp)
10003e94:	d8c02017 	ldw	r3,128(sp)
10003e98:	da000404 	addi	r8,sp,16
10003e9c:	003e1006 	br	100036e0 <__alt_data_end+0xf80036e0>
10003ea0:	00800044 	movi	r2,1
10003ea4:	10803fcc 	andi	r2,r2,255
10003ea8:	00c00044 	movi	r3,1
10003eac:	10fa0d26 	beq	r2,r3,100026e4 <__alt_data_end+0xf80026e4>
10003eb0:	00c00084 	movi	r3,2
10003eb4:	10fbaf26 	beq	r2,r3,10002d74 <__alt_data_end+0xf8002d74>
10003eb8:	003a6d06 	br	10002870 <__alt_data_end+0xf8002870>
10003ebc:	01040074 	movhi	r4,4097
10003ec0:	2100b184 	addi	r4,r4,710
10003ec4:	d9003515 	stw	r4,212(sp)
10003ec8:	003b5406 	br	10002c1c <__alt_data_end+0xf8002c1c>
10003ecc:	d8802a17 	ldw	r2,168(sp)
10003ed0:	00c00184 	movi	r3,6
10003ed4:	1880012e 	bgeu	r3,r2,10003edc <___vfprintf_internal_r+0x1d68>
10003ed8:	1805883a 	mov	r2,r3
10003edc:	d8802b15 	stw	r2,172(sp)
10003ee0:	1000ef16 	blt	r2,zero,100042a0 <___vfprintf_internal_r+0x212c>
10003ee4:	04040074 	movhi	r16,4097
10003ee8:	d8802915 	stw	r2,164(sp)
10003eec:	dcc02e15 	stw	r19,184(sp)
10003ef0:	d8002a15 	stw	zero,168(sp)
10003ef4:	d8003215 	stw	zero,200(sp)
10003ef8:	8400ab04 	addi	r16,r16,684
10003efc:	0039883a 	mov	fp,zero
10003f00:	003a8006 	br	10002904 <__alt_data_end+0xf8002904>
10003f04:	0021883a 	mov	r16,zero
10003f08:	003e0706 	br	10003728 <__alt_data_end+0xf8003728>
10003f0c:	d9002d17 	ldw	r4,180(sp)
10003f10:	d9801e04 	addi	r6,sp,120
10003f14:	b80b883a 	mov	r5,r23
10003f18:	0007c3c0 	call	10007c3c <__sprint_r>
10003f1c:	1039991e 	bne	r2,zero,10002584 <__alt_data_end+0xf8002584>
10003f20:	d8802617 	ldw	r2,152(sp)
10003f24:	d9403317 	ldw	r5,204(sp)
10003f28:	d8c02017 	ldw	r3,128(sp)
10003f2c:	da000404 	addi	r8,sp,16
10003f30:	2885c83a 	sub	r2,r5,r2
10003f34:	003dfb06 	br	10003724 <__alt_data_end+0xf8003724>
10003f38:	9080004c 	andi	r2,r18,1
10003f3c:	103e8f1e 	bne	r2,zero,1000397c <__alt_data_end+0xf800397c>
10003f40:	d8802117 	ldw	r2,132(sp)
10003f44:	003e9e06 	br	100039c0 <__alt_data_end+0xf80039c0>
10003f48:	1025883a 	mov	r18,r2
10003f4c:	0039883a 	mov	fp,zero
10003f50:	00800084 	movi	r2,2
10003f54:	003fd306 	br	10003ea4 <__alt_data_end+0xf8003ea4>
10003f58:	07000b44 	movi	fp,45
10003f5c:	df002785 	stb	fp,158(sp)
10003f60:	003a1b06 	br	100027d0 <__alt_data_end+0xf80027d0>
10003f64:	00c00b44 	movi	r3,45
10003f68:	d8c02785 	stb	r3,158(sp)
10003f6c:	d8802915 	stw	r2,164(sp)
10003f70:	dc802c17 	ldw	r18,176(sp)
10003f74:	d8002a15 	stw	zero,168(sp)
10003f78:	07000b44 	movi	fp,45
10003f7c:	003a5e06 	br	100028f8 <__alt_data_end+0xf80028f8>
10003f80:	04040074 	movhi	r16,4097
10003f84:	8400a004 	addi	r16,r16,640
10003f88:	003f4706 	br	10003ca8 <__alt_data_end+0xf8003ca8>
10003f8c:	d9002e17 	ldw	r4,184(sp)
10003f90:	d9402f17 	ldw	r5,188(sp)
10003f94:	20800017 	ldw	r2,0(r4)
10003f98:	21000104 	addi	r4,r4,4
10003f9c:	d9002e15 	stw	r4,184(sp)
10003fa0:	11400015 	stw	r5,0(r2)
10003fa4:	0038ab06 	br	10002254 <__alt_data_end+0xf8002254>
10003fa8:	dd802617 	ldw	r22,152(sp)
10003fac:	00bfff44 	movi	r2,-3
10003fb0:	b0801c16 	blt	r22,r2,10004024 <___vfprintf_internal_r+0x1eb0>
10003fb4:	d9402a17 	ldw	r5,168(sp)
10003fb8:	2d801a16 	blt	r5,r22,10004024 <___vfprintf_internal_r+0x1eb0>
10003fbc:	dd803215 	stw	r22,200(sp)
10003fc0:	003e8906 	br	100039e8 <__alt_data_end+0xf80039e8>
10003fc4:	01040074 	movhi	r4,4097
10003fc8:	2100ad84 	addi	r4,r4,694
10003fcc:	d9002c15 	stw	r4,176(sp)
10003fd0:	003c9106 	br	10003218 <__alt_data_end+0xf8003218>
10003fd4:	e005883a 	mov	r2,fp
10003fd8:	003e7906 	br	100039c0 <__alt_data_end+0xf80039c0>
10003fdc:	d9002a17 	ldw	r4,168(sp)
10003fe0:	df002783 	ldbu	fp,158(sp)
10003fe4:	dcc02e15 	stw	r19,184(sp)
10003fe8:	d9002915 	stw	r4,164(sp)
10003fec:	d9002b15 	stw	r4,172(sp)
10003ff0:	d8002a15 	stw	zero,168(sp)
10003ff4:	d8003215 	stw	zero,200(sp)
10003ff8:	003a3b06 	br	100028e8 <__alt_data_end+0xf80028e8>
10003ffc:	9080004c 	andi	r2,r18,1
10004000:	0039883a 	mov	fp,zero
10004004:	10000426 	beq	r2,zero,10004018 <___vfprintf_internal_r+0x1ea4>
10004008:	00800c04 	movi	r2,48
1000400c:	dc001dc4 	addi	r16,sp,119
10004010:	d8801dc5 	stb	r2,119(sp)
10004014:	003b6406 	br	10002da8 <__alt_data_end+0xf8002da8>
10004018:	d8002b15 	stw	zero,172(sp)
1000401c:	dc001e04 	addi	r16,sp,120
10004020:	003a2b06 	br	100028d0 <__alt_data_end+0xf80028d0>
10004024:	8c7fff84 	addi	r17,r17,-2
10004028:	b5bfffc4 	addi	r22,r22,-1
1000402c:	dd802615 	stw	r22,152(sp)
10004030:	dc4022c5 	stb	r17,139(sp)
10004034:	b000bf16 	blt	r22,zero,10004334 <___vfprintf_internal_r+0x21c0>
10004038:	00800ac4 	movi	r2,43
1000403c:	d8802305 	stb	r2,140(sp)
10004040:	00800244 	movi	r2,9
10004044:	15807016 	blt	r2,r22,10004208 <___vfprintf_internal_r+0x2094>
10004048:	00800c04 	movi	r2,48
1000404c:	b5800c04 	addi	r22,r22,48
10004050:	d8802345 	stb	r2,141(sp)
10004054:	dd802385 	stb	r22,142(sp)
10004058:	d88023c4 	addi	r2,sp,143
1000405c:	df0022c4 	addi	fp,sp,139
10004060:	d8c03317 	ldw	r3,204(sp)
10004064:	1739c83a 	sub	fp,r2,fp
10004068:	d9003317 	ldw	r4,204(sp)
1000406c:	e0c7883a 	add	r3,fp,r3
10004070:	df003a15 	stw	fp,232(sp)
10004074:	d8c02b15 	stw	r3,172(sp)
10004078:	00800044 	movi	r2,1
1000407c:	1100b30e 	bge	r2,r4,1000434c <___vfprintf_internal_r+0x21d8>
10004080:	d8c02b17 	ldw	r3,172(sp)
10004084:	18c00044 	addi	r3,r3,1
10004088:	d8c02b15 	stw	r3,172(sp)
1000408c:	1805883a 	mov	r2,r3
10004090:	1800ac16 	blt	r3,zero,10004344 <___vfprintf_internal_r+0x21d0>
10004094:	d8003215 	stw	zero,200(sp)
10004098:	003e5d06 	br	10003a10 <__alt_data_end+0xf8003a10>
1000409c:	d9002d17 	ldw	r4,180(sp)
100040a0:	d9801e04 	addi	r6,sp,120
100040a4:	b80b883a 	mov	r5,r23
100040a8:	0007c3c0 	call	10007c3c <__sprint_r>
100040ac:	1039351e 	bne	r2,zero,10002584 <__alt_data_end+0xf8002584>
100040b0:	dc402617 	ldw	r17,152(sp)
100040b4:	d8c02017 	ldw	r3,128(sp)
100040b8:	d8801f17 	ldw	r2,124(sp)
100040bc:	da000404 	addi	r8,sp,16
100040c0:	003ed606 	br	10003c1c <__alt_data_end+0xf8003c1c>
100040c4:	182b883a 	mov	r21,r3
100040c8:	d8002a15 	stw	zero,168(sp)
100040cc:	00388c06 	br	10002300 <__alt_data_end+0xf8002300>
100040d0:	d8802a17 	ldw	r2,168(sp)
100040d4:	103e071e 	bne	r2,zero,100038f4 <__alt_data_end+0xf80038f4>
100040d8:	dc002a15 	stw	r16,168(sp)
100040dc:	003e0506 	br	100038f4 <__alt_data_end+0xf80038f4>
100040e0:	d9002a17 	ldw	r4,168(sp)
100040e4:	20c00044 	addi	r3,r4,1
100040e8:	003e0f06 	br	10003928 <__alt_data_end+0xf8003928>
100040ec:	01400184 	movi	r5,6
100040f0:	d9402a15 	stw	r5,168(sp)
100040f4:	003dff06 	br	100038f4 <__alt_data_end+0xf80038f4>
100040f8:	d8802104 	addi	r2,sp,132
100040fc:	d8800315 	stw	r2,12(sp)
10004100:	d8802504 	addi	r2,sp,148
10004104:	d8800215 	stw	r2,8(sp)
10004108:	d8802604 	addi	r2,sp,152
1000410c:	d8800115 	stw	r2,4(sp)
10004110:	d8802a17 	ldw	r2,168(sp)
10004114:	d9403617 	ldw	r5,216(sp)
10004118:	d9002d17 	ldw	r4,180(sp)
1000411c:	d8800015 	stw	r2,0(sp)
10004120:	01c000c4 	movi	r7,3
10004124:	980d883a 	mov	r6,r19
10004128:	da003d15 	stw	r8,244(sp)
1000412c:	00049700 	call	10004970 <_dtoa_r>
10004130:	d8c02a17 	ldw	r3,168(sp)
10004134:	da003d17 	ldw	r8,244(sp)
10004138:	1021883a 	mov	r16,r2
1000413c:	10f9883a 	add	fp,r2,r3
10004140:	81000007 	ldb	r4,0(r16)
10004144:	00800c04 	movi	r2,48
10004148:	20805e26 	beq	r4,r2,100042c4 <___vfprintf_internal_r+0x2150>
1000414c:	d8c02617 	ldw	r3,152(sp)
10004150:	e0f9883a 	add	fp,fp,r3
10004154:	003e0a06 	br	10003980 <__alt_data_end+0xf8003980>
10004158:	00c00b44 	movi	r3,45
1000415c:	24e0003c 	xorhi	r19,r4,32768
10004160:	d8c02905 	stb	r3,164(sp)
10004164:	003de906 	br	1000390c <__alt_data_end+0xf800390c>
10004168:	d8c03217 	ldw	r3,200(sp)
1000416c:	00c07a0e 	bge	zero,r3,10004358 <___vfprintf_internal_r+0x21e4>
10004170:	00800044 	movi	r2,1
10004174:	d9003317 	ldw	r4,204(sp)
10004178:	1105883a 	add	r2,r2,r4
1000417c:	d8802b15 	stw	r2,172(sp)
10004180:	10004e16 	blt	r2,zero,100042bc <___vfprintf_internal_r+0x2148>
10004184:	044019c4 	movi	r17,103
10004188:	003e2106 	br	10003a10 <__alt_data_end+0xf8003a10>
1000418c:	d9002a17 	ldw	r4,168(sp)
10004190:	d8802104 	addi	r2,sp,132
10004194:	d8800315 	stw	r2,12(sp)
10004198:	d9000015 	stw	r4,0(sp)
1000419c:	d8802504 	addi	r2,sp,148
100041a0:	d9403617 	ldw	r5,216(sp)
100041a4:	d9002d17 	ldw	r4,180(sp)
100041a8:	d8800215 	stw	r2,8(sp)
100041ac:	d8802604 	addi	r2,sp,152
100041b0:	d8800115 	stw	r2,4(sp)
100041b4:	01c000c4 	movi	r7,3
100041b8:	980d883a 	mov	r6,r19
100041bc:	da003d15 	stw	r8,244(sp)
100041c0:	00049700 	call	10004970 <_dtoa_r>
100041c4:	d8c02a17 	ldw	r3,168(sp)
100041c8:	da003d17 	ldw	r8,244(sp)
100041cc:	1021883a 	mov	r16,r2
100041d0:	00801184 	movi	r2,70
100041d4:	80f9883a 	add	fp,r16,r3
100041d8:	88bfd926 	beq	r17,r2,10004140 <__alt_data_end+0xf8004140>
100041dc:	003de806 	br	10003980 <__alt_data_end+0xf8003980>
100041e0:	d9002a17 	ldw	r4,168(sp)
100041e4:	00c04d0e 	bge	zero,r3,1000431c <___vfprintf_internal_r+0x21a8>
100041e8:	2000441e 	bne	r4,zero,100042fc <___vfprintf_internal_r+0x2188>
100041ec:	9480004c 	andi	r18,r18,1
100041f0:	9000421e 	bne	r18,zero,100042fc <___vfprintf_internal_r+0x2188>
100041f4:	1805883a 	mov	r2,r3
100041f8:	18006f16 	blt	r3,zero,100043b8 <___vfprintf_internal_r+0x2244>
100041fc:	d8c03217 	ldw	r3,200(sp)
10004200:	d8c02b15 	stw	r3,172(sp)
10004204:	003e0206 	br	10003a10 <__alt_data_end+0xf8003a10>
10004208:	df0022c4 	addi	fp,sp,139
1000420c:	dc002a15 	stw	r16,168(sp)
10004210:	4027883a 	mov	r19,r8
10004214:	e021883a 	mov	r16,fp
10004218:	b009883a 	mov	r4,r22
1000421c:	01400284 	movi	r5,10
10004220:	000b0d80 	call	1000b0d8 <__modsi3>
10004224:	10800c04 	addi	r2,r2,48
10004228:	843fffc4 	addi	r16,r16,-1
1000422c:	b009883a 	mov	r4,r22
10004230:	01400284 	movi	r5,10
10004234:	80800005 	stb	r2,0(r16)
10004238:	000b0540 	call	1000b054 <__divsi3>
1000423c:	102d883a 	mov	r22,r2
10004240:	00800244 	movi	r2,9
10004244:	15bff416 	blt	r2,r22,10004218 <__alt_data_end+0xf8004218>
10004248:	9811883a 	mov	r8,r19
1000424c:	b0800c04 	addi	r2,r22,48
10004250:	8027883a 	mov	r19,r16
10004254:	997fffc4 	addi	r5,r19,-1
10004258:	98bfffc5 	stb	r2,-1(r19)
1000425c:	dc002a17 	ldw	r16,168(sp)
10004260:	2f006d2e 	bgeu	r5,fp,10004418 <___vfprintf_internal_r+0x22a4>
10004264:	d9c02384 	addi	r7,sp,142
10004268:	3ccfc83a 	sub	r7,r7,r19
1000426c:	d9002344 	addi	r4,sp,141
10004270:	e1cf883a 	add	r7,fp,r7
10004274:	00000106 	br	1000427c <___vfprintf_internal_r+0x2108>
10004278:	28800003 	ldbu	r2,0(r5)
1000427c:	20800005 	stb	r2,0(r4)
10004280:	21000044 	addi	r4,r4,1
10004284:	29400044 	addi	r5,r5,1
10004288:	393ffb1e 	bne	r7,r4,10004278 <__alt_data_end+0xf8004278>
1000428c:	d8802304 	addi	r2,sp,140
10004290:	14c5c83a 	sub	r2,r2,r19
10004294:	d8c02344 	addi	r3,sp,141
10004298:	1885883a 	add	r2,r3,r2
1000429c:	003f7006 	br	10004060 <__alt_data_end+0xf8004060>
100042a0:	0005883a 	mov	r2,zero
100042a4:	003f0f06 	br	10003ee4 <__alt_data_end+0xf8003ee4>
100042a8:	d8c03217 	ldw	r3,200(sp)
100042ac:	18c00044 	addi	r3,r3,1
100042b0:	d8c02b15 	stw	r3,172(sp)
100042b4:	1805883a 	mov	r2,r3
100042b8:	183fb20e 	bge	r3,zero,10004184 <__alt_data_end+0xf8004184>
100042bc:	0005883a 	mov	r2,zero
100042c0:	003fb006 	br	10004184 <__alt_data_end+0xf8004184>
100042c4:	d9003617 	ldw	r4,216(sp)
100042c8:	000d883a 	mov	r6,zero
100042cc:	000f883a 	mov	r7,zero
100042d0:	980b883a 	mov	r5,r19
100042d4:	d8c03c15 	stw	r3,240(sp)
100042d8:	da003d15 	stw	r8,244(sp)
100042dc:	000c4840 	call	1000c484 <__eqdf2>
100042e0:	d8c03c17 	ldw	r3,240(sp)
100042e4:	da003d17 	ldw	r8,244(sp)
100042e8:	103f9826 	beq	r2,zero,1000414c <__alt_data_end+0xf800414c>
100042ec:	00800044 	movi	r2,1
100042f0:	10c7c83a 	sub	r3,r2,r3
100042f4:	d8c02615 	stw	r3,152(sp)
100042f8:	003f9506 	br	10004150 <__alt_data_end+0xf8004150>
100042fc:	d9002a17 	ldw	r4,168(sp)
10004300:	d8c03217 	ldw	r3,200(sp)
10004304:	20800044 	addi	r2,r4,1
10004308:	1885883a 	add	r2,r3,r2
1000430c:	d8802b15 	stw	r2,172(sp)
10004310:	103dbf0e 	bge	r2,zero,10003a10 <__alt_data_end+0xf8003a10>
10004314:	0005883a 	mov	r2,zero
10004318:	003dbd06 	br	10003a10 <__alt_data_end+0xf8003a10>
1000431c:	2000201e 	bne	r4,zero,100043a0 <___vfprintf_internal_r+0x222c>
10004320:	9480004c 	andi	r18,r18,1
10004324:	90001e1e 	bne	r18,zero,100043a0 <___vfprintf_internal_r+0x222c>
10004328:	00800044 	movi	r2,1
1000432c:	d8802b15 	stw	r2,172(sp)
10004330:	003db706 	br	10003a10 <__alt_data_end+0xf8003a10>
10004334:	00800b44 	movi	r2,45
10004338:	05adc83a 	sub	r22,zero,r22
1000433c:	d8802305 	stb	r2,140(sp)
10004340:	003f3f06 	br	10004040 <__alt_data_end+0xf8004040>
10004344:	0005883a 	mov	r2,zero
10004348:	003f5206 	br	10004094 <__alt_data_end+0xf8004094>
1000434c:	90a4703a 	and	r18,r18,r2
10004350:	903f4e26 	beq	r18,zero,1000408c <__alt_data_end+0xf800408c>
10004354:	003f4a06 	br	10004080 <__alt_data_end+0xf8004080>
10004358:	00800084 	movi	r2,2
1000435c:	10c5c83a 	sub	r2,r2,r3
10004360:	003f8406 	br	10004174 <__alt_data_end+0xf8004174>
10004364:	d9402e17 	ldw	r5,184(sp)
10004368:	d9002e17 	ldw	r4,184(sp)
1000436c:	ac400043 	ldbu	r17,1(r21)
10004370:	29400017 	ldw	r5,0(r5)
10004374:	20800104 	addi	r2,r4,4
10004378:	d8802e15 	stw	r2,184(sp)
1000437c:	d9402a15 	stw	r5,168(sp)
10004380:	182b883a 	mov	r21,r3
10004384:	283e7b0e 	bge	r5,zero,10003d74 <__alt_data_end+0xf8003d74>
10004388:	8c403fcc 	andi	r17,r17,255
1000438c:	017fffc4 	movi	r5,-1
10004390:	8c40201c 	xori	r17,r17,128
10004394:	d9402a15 	stw	r5,168(sp)
10004398:	8c7fe004 	addi	r17,r17,-128
1000439c:	0037d706 	br	100022fc <__alt_data_end+0xf80022fc>
100043a0:	d8c02a17 	ldw	r3,168(sp)
100043a4:	18c00084 	addi	r3,r3,2
100043a8:	d8c02b15 	stw	r3,172(sp)
100043ac:	1805883a 	mov	r2,r3
100043b0:	183d970e 	bge	r3,zero,10003a10 <__alt_data_end+0xf8003a10>
100043b4:	003fd706 	br	10004314 <__alt_data_end+0xf8004314>
100043b8:	0005883a 	mov	r2,zero
100043bc:	003f8f06 	br	100041fc <__alt_data_end+0xf80041fc>
100043c0:	9080004c 	andi	r2,r18,1
100043c4:	103f821e 	bne	r2,zero,100041d0 <__alt_data_end+0xf80041d0>
100043c8:	d8802117 	ldw	r2,132(sp)
100043cc:	1405c83a 	sub	r2,r2,r16
100043d0:	d8803315 	stw	r2,204(sp)
100043d4:	b47ef426 	beq	r22,r17,10003fa8 <__alt_data_end+0xf8003fa8>
100043d8:	dd802617 	ldw	r22,152(sp)
100043dc:	003f1206 	br	10004028 <__alt_data_end+0xf8004028>
100043e0:	d8c02b03 	ldbu	r3,172(sp)
100043e4:	d8c02785 	stb	r3,158(sp)
100043e8:	0038df06 	br	10002768 <__alt_data_end+0xf8002768>
100043ec:	d8c02b03 	ldbu	r3,172(sp)
100043f0:	d8c02785 	stb	r3,158(sp)
100043f4:	0038aa06 	br	100026a0 <__alt_data_end+0xf80026a0>
100043f8:	d8c02b03 	ldbu	r3,172(sp)
100043fc:	d8c02785 	stb	r3,158(sp)
10004400:	003a4306 	br	10002d10 <__alt_data_end+0xf8002d10>
10004404:	d8c02b03 	ldbu	r3,172(sp)
10004408:	d8c02785 	stb	r3,158(sp)
1000440c:	003af506 	br	10002fe4 <__alt_data_end+0xf8002fe4>
10004410:	0005883a 	mov	r2,zero
10004414:	003d7b06 	br	10003a04 <__alt_data_end+0xf8003a04>
10004418:	d8802344 	addi	r2,sp,141
1000441c:	003f1006 	br	10004060 <__alt_data_end+0xf8004060>
10004420:	d8c02b03 	ldbu	r3,172(sp)
10004424:	d8c02785 	stb	r3,158(sp)
10004428:	0038fd06 	br	10002820 <__alt_data_end+0xf8002820>
1000442c:	d8c02b03 	ldbu	r3,172(sp)
10004430:	d8c02785 	stb	r3,158(sp)
10004434:	003a9706 	br	10002e94 <__alt_data_end+0xf8002e94>
10004438:	d8c02b03 	ldbu	r3,172(sp)
1000443c:	d8c02785 	stb	r3,158(sp)
10004440:	003a1806 	br	10002ca4 <__alt_data_end+0xf8002ca4>
10004444:	d8c02b03 	ldbu	r3,172(sp)
10004448:	d8c02785 	stb	r3,158(sp)
1000444c:	003abe06 	br	10002f48 <__alt_data_end+0xf8002f48>

10004450 <__vfprintf_internal>:
10004450:	00840074 	movhi	r2,4097
10004454:	10880a04 	addi	r2,r2,8232
10004458:	300f883a 	mov	r7,r6
1000445c:	280d883a 	mov	r6,r5
10004460:	200b883a 	mov	r5,r4
10004464:	11000017 	ldw	r4,0(r2)
10004468:	00021741 	jmpi	10002174 <___vfprintf_internal_r>

1000446c <__sbprintf>:
1000446c:	2880030b 	ldhu	r2,12(r5)
10004470:	2ac01917 	ldw	r11,100(r5)
10004474:	2a80038b 	ldhu	r10,14(r5)
10004478:	2a400717 	ldw	r9,28(r5)
1000447c:	2a000917 	ldw	r8,36(r5)
10004480:	defee204 	addi	sp,sp,-1144
10004484:	00c10004 	movi	r3,1024
10004488:	dc011a15 	stw	r16,1128(sp)
1000448c:	10bfff4c 	andi	r2,r2,65533
10004490:	2821883a 	mov	r16,r5
10004494:	d8cb883a 	add	r5,sp,r3
10004498:	dc811c15 	stw	r18,1136(sp)
1000449c:	dc411b15 	stw	r17,1132(sp)
100044a0:	dfc11d15 	stw	ra,1140(sp)
100044a4:	2025883a 	mov	r18,r4
100044a8:	d881030d 	sth	r2,1036(sp)
100044ac:	dac11915 	stw	r11,1124(sp)
100044b0:	da81038d 	sth	r10,1038(sp)
100044b4:	da410715 	stw	r9,1052(sp)
100044b8:	da010915 	stw	r8,1060(sp)
100044bc:	dec10015 	stw	sp,1024(sp)
100044c0:	dec10415 	stw	sp,1040(sp)
100044c4:	d8c10215 	stw	r3,1032(sp)
100044c8:	d8c10515 	stw	r3,1044(sp)
100044cc:	d8010615 	stw	zero,1048(sp)
100044d0:	00021740 	call	10002174 <___vfprintf_internal_r>
100044d4:	1023883a 	mov	r17,r2
100044d8:	10000416 	blt	r2,zero,100044ec <__sbprintf+0x80>
100044dc:	d9410004 	addi	r5,sp,1024
100044e0:	9009883a 	mov	r4,r18
100044e4:	0000a480 	call	10000a48 <_fflush_r>
100044e8:	10000d1e 	bne	r2,zero,10004520 <__sbprintf+0xb4>
100044ec:	d881030b 	ldhu	r2,1036(sp)
100044f0:	1080100c 	andi	r2,r2,64
100044f4:	10000326 	beq	r2,zero,10004504 <__sbprintf+0x98>
100044f8:	8080030b 	ldhu	r2,12(r16)
100044fc:	10801014 	ori	r2,r2,64
10004500:	8080030d 	sth	r2,12(r16)
10004504:	8805883a 	mov	r2,r17
10004508:	dfc11d17 	ldw	ra,1140(sp)
1000450c:	dc811c17 	ldw	r18,1136(sp)
10004510:	dc411b17 	ldw	r17,1132(sp)
10004514:	dc011a17 	ldw	r16,1128(sp)
10004518:	dec11e04 	addi	sp,sp,1144
1000451c:	f800283a 	ret
10004520:	047fffc4 	movi	r17,-1
10004524:	003ff106 	br	100044ec <__alt_data_end+0xf80044ec>

10004528 <_write_r>:
10004528:	defffd04 	addi	sp,sp,-12
1000452c:	2805883a 	mov	r2,r5
10004530:	dc000015 	stw	r16,0(sp)
10004534:	04040074 	movhi	r16,4097
10004538:	dc400115 	stw	r17,4(sp)
1000453c:	300b883a 	mov	r5,r6
10004540:	840edb04 	addi	r16,r16,15212
10004544:	2023883a 	mov	r17,r4
10004548:	380d883a 	mov	r6,r7
1000454c:	1009883a 	mov	r4,r2
10004550:	dfc00215 	stw	ra,8(sp)
10004554:	80000015 	stw	zero,0(r16)
10004558:	000e3c00 	call	1000e3c0 <write>
1000455c:	00ffffc4 	movi	r3,-1
10004560:	10c00526 	beq	r2,r3,10004578 <_write_r+0x50>
10004564:	dfc00217 	ldw	ra,8(sp)
10004568:	dc400117 	ldw	r17,4(sp)
1000456c:	dc000017 	ldw	r16,0(sp)
10004570:	dec00304 	addi	sp,sp,12
10004574:	f800283a 	ret
10004578:	80c00017 	ldw	r3,0(r16)
1000457c:	183ff926 	beq	r3,zero,10004564 <__alt_data_end+0xf8004564>
10004580:	88c00015 	stw	r3,0(r17)
10004584:	003ff706 	br	10004564 <__alt_data_end+0xf8004564>

10004588 <__swsetup_r>:
10004588:	00840074 	movhi	r2,4097
1000458c:	defffd04 	addi	sp,sp,-12
10004590:	10880a04 	addi	r2,r2,8232
10004594:	dc400115 	stw	r17,4(sp)
10004598:	2023883a 	mov	r17,r4
1000459c:	11000017 	ldw	r4,0(r2)
100045a0:	dc000015 	stw	r16,0(sp)
100045a4:	dfc00215 	stw	ra,8(sp)
100045a8:	2821883a 	mov	r16,r5
100045ac:	20000226 	beq	r4,zero,100045b8 <__swsetup_r+0x30>
100045b0:	20800e17 	ldw	r2,56(r4)
100045b4:	10003126 	beq	r2,zero,1000467c <__swsetup_r+0xf4>
100045b8:	8080030b 	ldhu	r2,12(r16)
100045bc:	10c0020c 	andi	r3,r2,8
100045c0:	1009883a 	mov	r4,r2
100045c4:	18000f26 	beq	r3,zero,10004604 <__swsetup_r+0x7c>
100045c8:	80c00417 	ldw	r3,16(r16)
100045cc:	18001526 	beq	r3,zero,10004624 <__swsetup_r+0x9c>
100045d0:	1100004c 	andi	r4,r2,1
100045d4:	20001c1e 	bne	r4,zero,10004648 <__swsetup_r+0xc0>
100045d8:	1080008c 	andi	r2,r2,2
100045dc:	1000291e 	bne	r2,zero,10004684 <__swsetup_r+0xfc>
100045e0:	80800517 	ldw	r2,20(r16)
100045e4:	80800215 	stw	r2,8(r16)
100045e8:	18001c26 	beq	r3,zero,1000465c <__swsetup_r+0xd4>
100045ec:	0005883a 	mov	r2,zero
100045f0:	dfc00217 	ldw	ra,8(sp)
100045f4:	dc400117 	ldw	r17,4(sp)
100045f8:	dc000017 	ldw	r16,0(sp)
100045fc:	dec00304 	addi	sp,sp,12
10004600:	f800283a 	ret
10004604:	2080040c 	andi	r2,r4,16
10004608:	10002e26 	beq	r2,zero,100046c4 <__swsetup_r+0x13c>
1000460c:	2080010c 	andi	r2,r4,4
10004610:	10001e1e 	bne	r2,zero,1000468c <__swsetup_r+0x104>
10004614:	80c00417 	ldw	r3,16(r16)
10004618:	20800214 	ori	r2,r4,8
1000461c:	8080030d 	sth	r2,12(r16)
10004620:	183feb1e 	bne	r3,zero,100045d0 <__alt_data_end+0xf80045d0>
10004624:	1100a00c 	andi	r4,r2,640
10004628:	01408004 	movi	r5,512
1000462c:	217fe826 	beq	r4,r5,100045d0 <__alt_data_end+0xf80045d0>
10004630:	800b883a 	mov	r5,r16
10004634:	8809883a 	mov	r4,r17
10004638:	00061340 	call	10006134 <__smakebuf_r>
1000463c:	8080030b 	ldhu	r2,12(r16)
10004640:	80c00417 	ldw	r3,16(r16)
10004644:	003fe206 	br	100045d0 <__alt_data_end+0xf80045d0>
10004648:	80800517 	ldw	r2,20(r16)
1000464c:	80000215 	stw	zero,8(r16)
10004650:	0085c83a 	sub	r2,zero,r2
10004654:	80800615 	stw	r2,24(r16)
10004658:	183fe41e 	bne	r3,zero,100045ec <__alt_data_end+0xf80045ec>
1000465c:	80c0030b 	ldhu	r3,12(r16)
10004660:	0005883a 	mov	r2,zero
10004664:	1900200c 	andi	r4,r3,128
10004668:	203fe126 	beq	r4,zero,100045f0 <__alt_data_end+0xf80045f0>
1000466c:	18c01014 	ori	r3,r3,64
10004670:	80c0030d 	sth	r3,12(r16)
10004674:	00bfffc4 	movi	r2,-1
10004678:	003fdd06 	br	100045f0 <__alt_data_end+0xf80045f0>
1000467c:	0000e340 	call	10000e34 <__sinit>
10004680:	003fcd06 	br	100045b8 <__alt_data_end+0xf80045b8>
10004684:	0005883a 	mov	r2,zero
10004688:	003fd606 	br	100045e4 <__alt_data_end+0xf80045e4>
1000468c:	81400c17 	ldw	r5,48(r16)
10004690:	28000626 	beq	r5,zero,100046ac <__swsetup_r+0x124>
10004694:	80801004 	addi	r2,r16,64
10004698:	28800326 	beq	r5,r2,100046a8 <__swsetup_r+0x120>
1000469c:	8809883a 	mov	r4,r17
100046a0:	00010040 	call	10001004 <_free_r>
100046a4:	8100030b 	ldhu	r4,12(r16)
100046a8:	80000c15 	stw	zero,48(r16)
100046ac:	80c00417 	ldw	r3,16(r16)
100046b0:	00bff6c4 	movi	r2,-37
100046b4:	1108703a 	and	r4,r2,r4
100046b8:	80000115 	stw	zero,4(r16)
100046bc:	80c00015 	stw	r3,0(r16)
100046c0:	003fd506 	br	10004618 <__alt_data_end+0xf8004618>
100046c4:	00800244 	movi	r2,9
100046c8:	88800015 	stw	r2,0(r17)
100046cc:	20801014 	ori	r2,r4,64
100046d0:	8080030d 	sth	r2,12(r16)
100046d4:	00bfffc4 	movi	r2,-1
100046d8:	003fc506 	br	100045f0 <__alt_data_end+0xf80045f0>

100046dc <_close_r>:
100046dc:	defffd04 	addi	sp,sp,-12
100046e0:	dc000015 	stw	r16,0(sp)
100046e4:	04040074 	movhi	r16,4097
100046e8:	dc400115 	stw	r17,4(sp)
100046ec:	840edb04 	addi	r16,r16,15212
100046f0:	2023883a 	mov	r17,r4
100046f4:	2809883a 	mov	r4,r5
100046f8:	dfc00215 	stw	ra,8(sp)
100046fc:	80000015 	stw	zero,0(r16)
10004700:	000dae80 	call	1000dae8 <close>
10004704:	00ffffc4 	movi	r3,-1
10004708:	10c00526 	beq	r2,r3,10004720 <_close_r+0x44>
1000470c:	dfc00217 	ldw	ra,8(sp)
10004710:	dc400117 	ldw	r17,4(sp)
10004714:	dc000017 	ldw	r16,0(sp)
10004718:	dec00304 	addi	sp,sp,12
1000471c:	f800283a 	ret
10004720:	80c00017 	ldw	r3,0(r16)
10004724:	183ff926 	beq	r3,zero,1000470c <__alt_data_end+0xf800470c>
10004728:	88c00015 	stw	r3,0(r17)
1000472c:	003ff706 	br	1000470c <__alt_data_end+0xf800470c>

10004730 <abort>:
10004730:	deffff04 	addi	sp,sp,-4
10004734:	01000184 	movi	r4,6
10004738:	dfc00015 	stw	ra,0(sp)
1000473c:	000791c0 	call	1000791c <raise>
10004740:	01000044 	movi	r4,1
10004744:	000dbec0 	call	1000dbec <_exit>

10004748 <quorem>:
10004748:	defff204 	addi	sp,sp,-56
1000474c:	ddc00b15 	stw	r23,44(sp)
10004750:	20800417 	ldw	r2,16(r4)
10004754:	2dc00417 	ldw	r23,16(r5)
10004758:	dfc00d15 	stw	ra,52(sp)
1000475c:	df000c15 	stw	fp,48(sp)
10004760:	dd800a15 	stw	r22,40(sp)
10004764:	dd400915 	stw	r21,36(sp)
10004768:	dd000815 	stw	r20,32(sp)
1000476c:	dcc00715 	stw	r19,28(sp)
10004770:	dc800615 	stw	r18,24(sp)
10004774:	dc400515 	stw	r17,20(sp)
10004778:	dc000415 	stw	r16,16(sp)
1000477c:	15c07a16 	blt	r2,r23,10004968 <quorem+0x220>
10004780:	bdffffc4 	addi	r23,r23,-1
10004784:	bde9883a 	add	r20,r23,r23
10004788:	28c00504 	addi	r3,r5,20
1000478c:	a529883a 	add	r20,r20,r20
10004790:	1d39883a 	add	fp,r3,r20
10004794:	24c00504 	addi	r19,r4,20
10004798:	d9400215 	stw	r5,8(sp)
1000479c:	9d29883a 	add	r20,r19,r20
100047a0:	e1400017 	ldw	r5,0(fp)
100047a4:	d9000015 	stw	r4,0(sp)
100047a8:	a1000017 	ldw	r4,0(r20)
100047ac:	29400044 	addi	r5,r5,1
100047b0:	d8c00115 	stw	r3,4(sp)
100047b4:	dd000315 	stw	r20,12(sp)
100047b8:	000b14c0 	call	1000b14c <__udivsi3>
100047bc:	1025883a 	mov	r18,r2
100047c0:	10003026 	beq	r2,zero,10004884 <quorem+0x13c>
100047c4:	dc400117 	ldw	r17,4(sp)
100047c8:	9829883a 	mov	r20,r19
100047cc:	002d883a 	mov	r22,zero
100047d0:	0021883a 	mov	r16,zero
100047d4:	8d400017 	ldw	r21,0(r17)
100047d8:	900b883a 	mov	r5,r18
100047dc:	8c400104 	addi	r17,r17,4
100047e0:	a93fffcc 	andi	r4,r21,65535
100047e4:	00006840 	call	10000684 <__mulsi3>
100047e8:	a808d43a 	srli	r4,r21,16
100047ec:	900b883a 	mov	r5,r18
100047f0:	15ad883a 	add	r22,r2,r22
100047f4:	00006840 	call	10000684 <__mulsi3>
100047f8:	a1000017 	ldw	r4,0(r20)
100047fc:	b00cd43a 	srli	r6,r22,16
10004800:	b0ffffcc 	andi	r3,r22,65535
10004804:	217fffcc 	andi	r5,r4,65535
10004808:	2c21883a 	add	r16,r5,r16
1000480c:	80c7c83a 	sub	r3,r16,r3
10004810:	2008d43a 	srli	r4,r4,16
10004814:	1185883a 	add	r2,r2,r6
10004818:	1821d43a 	srai	r16,r3,16
1000481c:	117fffcc 	andi	r5,r2,65535
10004820:	2149c83a 	sub	r4,r4,r5
10004824:	2421883a 	add	r16,r4,r16
10004828:	8008943a 	slli	r4,r16,16
1000482c:	18ffffcc 	andi	r3,r3,65535
10004830:	102cd43a 	srli	r22,r2,16
10004834:	20c8b03a 	or	r4,r4,r3
10004838:	a1000015 	stw	r4,0(r20)
1000483c:	8021d43a 	srai	r16,r16,16
10004840:	a5000104 	addi	r20,r20,4
10004844:	e47fe32e 	bgeu	fp,r17,100047d4 <__alt_data_end+0xf80047d4>
10004848:	d8c00317 	ldw	r3,12(sp)
1000484c:	18800017 	ldw	r2,0(r3)
10004850:	10000c1e 	bne	r2,zero,10004884 <quorem+0x13c>
10004854:	18bfff04 	addi	r2,r3,-4
10004858:	9880082e 	bgeu	r19,r2,1000487c <quorem+0x134>
1000485c:	18ffff17 	ldw	r3,-4(r3)
10004860:	18000326 	beq	r3,zero,10004870 <quorem+0x128>
10004864:	00000506 	br	1000487c <quorem+0x134>
10004868:	10c00017 	ldw	r3,0(r2)
1000486c:	1800031e 	bne	r3,zero,1000487c <quorem+0x134>
10004870:	10bfff04 	addi	r2,r2,-4
10004874:	bdffffc4 	addi	r23,r23,-1
10004878:	98bffb36 	bltu	r19,r2,10004868 <__alt_data_end+0xf8004868>
1000487c:	d8c00017 	ldw	r3,0(sp)
10004880:	1dc00415 	stw	r23,16(r3)
10004884:	d9400217 	ldw	r5,8(sp)
10004888:	d9000017 	ldw	r4,0(sp)
1000488c:	0006d580 	call	10006d58 <__mcmp>
10004890:	10002816 	blt	r2,zero,10004934 <quorem+0x1ec>
10004894:	dc400117 	ldw	r17,4(sp)
10004898:	94800044 	addi	r18,r18,1
1000489c:	980d883a 	mov	r6,r19
100048a0:	0007883a 	mov	r3,zero
100048a4:	31000017 	ldw	r4,0(r6)
100048a8:	89400017 	ldw	r5,0(r17)
100048ac:	31800104 	addi	r6,r6,4
100048b0:	20bfffcc 	andi	r2,r4,65535
100048b4:	10c7883a 	add	r3,r2,r3
100048b8:	28bfffcc 	andi	r2,r5,65535
100048bc:	1885c83a 	sub	r2,r3,r2
100048c0:	280ad43a 	srli	r5,r5,16
100048c4:	2008d43a 	srli	r4,r4,16
100048c8:	1007d43a 	srai	r3,r2,16
100048cc:	10bfffcc 	andi	r2,r2,65535
100048d0:	2149c83a 	sub	r4,r4,r5
100048d4:	20c9883a 	add	r4,r4,r3
100048d8:	200a943a 	slli	r5,r4,16
100048dc:	8c400104 	addi	r17,r17,4
100048e0:	2007d43a 	srai	r3,r4,16
100048e4:	2884b03a 	or	r2,r5,r2
100048e8:	30bfff15 	stw	r2,-4(r6)
100048ec:	e47fed2e 	bgeu	fp,r17,100048a4 <__alt_data_end+0xf80048a4>
100048f0:	bdc5883a 	add	r2,r23,r23
100048f4:	1085883a 	add	r2,r2,r2
100048f8:	9887883a 	add	r3,r19,r2
100048fc:	18800017 	ldw	r2,0(r3)
10004900:	10000c1e 	bne	r2,zero,10004934 <quorem+0x1ec>
10004904:	18bfff04 	addi	r2,r3,-4
10004908:	9880082e 	bgeu	r19,r2,1000492c <quorem+0x1e4>
1000490c:	18ffff17 	ldw	r3,-4(r3)
10004910:	18000326 	beq	r3,zero,10004920 <quorem+0x1d8>
10004914:	00000506 	br	1000492c <quorem+0x1e4>
10004918:	10c00017 	ldw	r3,0(r2)
1000491c:	1800031e 	bne	r3,zero,1000492c <quorem+0x1e4>
10004920:	10bfff04 	addi	r2,r2,-4
10004924:	bdffffc4 	addi	r23,r23,-1
10004928:	98bffb36 	bltu	r19,r2,10004918 <__alt_data_end+0xf8004918>
1000492c:	d8c00017 	ldw	r3,0(sp)
10004930:	1dc00415 	stw	r23,16(r3)
10004934:	9005883a 	mov	r2,r18
10004938:	dfc00d17 	ldw	ra,52(sp)
1000493c:	df000c17 	ldw	fp,48(sp)
10004940:	ddc00b17 	ldw	r23,44(sp)
10004944:	dd800a17 	ldw	r22,40(sp)
10004948:	dd400917 	ldw	r21,36(sp)
1000494c:	dd000817 	ldw	r20,32(sp)
10004950:	dcc00717 	ldw	r19,28(sp)
10004954:	dc800617 	ldw	r18,24(sp)
10004958:	dc400517 	ldw	r17,20(sp)
1000495c:	dc000417 	ldw	r16,16(sp)
10004960:	dec00e04 	addi	sp,sp,56
10004964:	f800283a 	ret
10004968:	0005883a 	mov	r2,zero
1000496c:	003ff206 	br	10004938 <__alt_data_end+0xf8004938>

10004970 <_dtoa_r>:
10004970:	20801017 	ldw	r2,64(r4)
10004974:	deffde04 	addi	sp,sp,-136
10004978:	df002015 	stw	fp,128(sp)
1000497c:	dcc01b15 	stw	r19,108(sp)
10004980:	dc801a15 	stw	r18,104(sp)
10004984:	dc401915 	stw	r17,100(sp)
10004988:	dc001815 	stw	r16,96(sp)
1000498c:	dfc02115 	stw	ra,132(sp)
10004990:	ddc01f15 	stw	r23,124(sp)
10004994:	dd801e15 	stw	r22,120(sp)
10004998:	dd401d15 	stw	r21,116(sp)
1000499c:	dd001c15 	stw	r20,112(sp)
100049a0:	d9c00315 	stw	r7,12(sp)
100049a4:	2039883a 	mov	fp,r4
100049a8:	3023883a 	mov	r17,r6
100049ac:	2825883a 	mov	r18,r5
100049b0:	dc002417 	ldw	r16,144(sp)
100049b4:	3027883a 	mov	r19,r6
100049b8:	10000826 	beq	r2,zero,100049dc <_dtoa_r+0x6c>
100049bc:	21801117 	ldw	r6,68(r4)
100049c0:	00c00044 	movi	r3,1
100049c4:	100b883a 	mov	r5,r2
100049c8:	1986983a 	sll	r3,r3,r6
100049cc:	11800115 	stw	r6,4(r2)
100049d0:	10c00215 	stw	r3,8(r2)
100049d4:	000647c0 	call	1000647c <_Bfree>
100049d8:	e0001015 	stw	zero,64(fp)
100049dc:	88002e16 	blt	r17,zero,10004a98 <_dtoa_r+0x128>
100049e0:	80000015 	stw	zero,0(r16)
100049e4:	889ffc2c 	andhi	r2,r17,32752
100049e8:	00dffc34 	movhi	r3,32752
100049ec:	10c01c26 	beq	r2,r3,10004a60 <_dtoa_r+0xf0>
100049f0:	000d883a 	mov	r6,zero
100049f4:	000f883a 	mov	r7,zero
100049f8:	9009883a 	mov	r4,r18
100049fc:	980b883a 	mov	r5,r19
10004a00:	000c4840 	call	1000c484 <__eqdf2>
10004a04:	10002b1e 	bne	r2,zero,10004ab4 <_dtoa_r+0x144>
10004a08:	d9c02317 	ldw	r7,140(sp)
10004a0c:	00800044 	movi	r2,1
10004a10:	38800015 	stw	r2,0(r7)
10004a14:	d8802517 	ldw	r2,148(sp)
10004a18:	10019e26 	beq	r2,zero,10005094 <_dtoa_r+0x724>
10004a1c:	d8c02517 	ldw	r3,148(sp)
10004a20:	00840074 	movhi	r2,4097
10004a24:	1080ad44 	addi	r2,r2,693
10004a28:	18800015 	stw	r2,0(r3)
10004a2c:	10bfffc4 	addi	r2,r2,-1
10004a30:	dfc02117 	ldw	ra,132(sp)
10004a34:	df002017 	ldw	fp,128(sp)
10004a38:	ddc01f17 	ldw	r23,124(sp)
10004a3c:	dd801e17 	ldw	r22,120(sp)
10004a40:	dd401d17 	ldw	r21,116(sp)
10004a44:	dd001c17 	ldw	r20,112(sp)
10004a48:	dcc01b17 	ldw	r19,108(sp)
10004a4c:	dc801a17 	ldw	r18,104(sp)
10004a50:	dc401917 	ldw	r17,100(sp)
10004a54:	dc001817 	ldw	r16,96(sp)
10004a58:	dec02204 	addi	sp,sp,136
10004a5c:	f800283a 	ret
10004a60:	d8c02317 	ldw	r3,140(sp)
10004a64:	0089c3c4 	movi	r2,9999
10004a68:	18800015 	stw	r2,0(r3)
10004a6c:	90017726 	beq	r18,zero,1000504c <_dtoa_r+0x6dc>
10004a70:	00840074 	movhi	r2,4097
10004a74:	1080b904 	addi	r2,r2,740
10004a78:	d9002517 	ldw	r4,148(sp)
10004a7c:	203fec26 	beq	r4,zero,10004a30 <__alt_data_end+0xf8004a30>
10004a80:	10c000c7 	ldb	r3,3(r2)
10004a84:	1801781e 	bne	r3,zero,10005068 <_dtoa_r+0x6f8>
10004a88:	10c000c4 	addi	r3,r2,3
10004a8c:	d9802517 	ldw	r6,148(sp)
10004a90:	30c00015 	stw	r3,0(r6)
10004a94:	003fe606 	br	10004a30 <__alt_data_end+0xf8004a30>
10004a98:	04e00034 	movhi	r19,32768
10004a9c:	9cffffc4 	addi	r19,r19,-1
10004aa0:	00800044 	movi	r2,1
10004aa4:	8ce6703a 	and	r19,r17,r19
10004aa8:	80800015 	stw	r2,0(r16)
10004aac:	9823883a 	mov	r17,r19
10004ab0:	003fcc06 	br	100049e4 <__alt_data_end+0xf80049e4>
10004ab4:	d8800204 	addi	r2,sp,8
10004ab8:	d8800015 	stw	r2,0(sp)
10004abc:	d9c00104 	addi	r7,sp,4
10004ac0:	900b883a 	mov	r5,r18
10004ac4:	980d883a 	mov	r6,r19
10004ac8:	e009883a 	mov	r4,fp
10004acc:	8820d53a 	srli	r16,r17,20
10004ad0:	00071240 	call	10007124 <__d2b>
10004ad4:	d8800915 	stw	r2,36(sp)
10004ad8:	8001651e 	bne	r16,zero,10005070 <_dtoa_r+0x700>
10004adc:	dd800217 	ldw	r22,8(sp)
10004ae0:	dc000117 	ldw	r16,4(sp)
10004ae4:	00800804 	movi	r2,32
10004ae8:	b421883a 	add	r16,r22,r16
10004aec:	80c10c84 	addi	r3,r16,1074
10004af0:	10c2d10e 	bge	r2,r3,10005638 <_dtoa_r+0xcc8>
10004af4:	00801004 	movi	r2,64
10004af8:	81010484 	addi	r4,r16,1042
10004afc:	10c7c83a 	sub	r3,r2,r3
10004b00:	9108d83a 	srl	r4,r18,r4
10004b04:	88e2983a 	sll	r17,r17,r3
10004b08:	2448b03a 	or	r4,r4,r17
10004b0c:	000d9a00 	call	1000d9a0 <__floatunsidf>
10004b10:	017f8434 	movhi	r5,65040
10004b14:	01800044 	movi	r6,1
10004b18:	1009883a 	mov	r4,r2
10004b1c:	194b883a 	add	r5,r3,r5
10004b20:	843fffc4 	addi	r16,r16,-1
10004b24:	d9801115 	stw	r6,68(sp)
10004b28:	000d883a 	mov	r6,zero
10004b2c:	01cffe34 	movhi	r7,16376
10004b30:	000cf480 	call	1000cf48 <__subdf3>
10004b34:	0198dbf4 	movhi	r6,25455
10004b38:	01cff4f4 	movhi	r7,16339
10004b3c:	3190d844 	addi	r6,r6,17249
10004b40:	39e1e9c4 	addi	r7,r7,-30809
10004b44:	1009883a 	mov	r4,r2
10004b48:	180b883a 	mov	r5,r3
10004b4c:	000c6dc0 	call	1000c6dc <__muldf3>
10004b50:	01a2d874 	movhi	r6,35681
10004b54:	01cff1f4 	movhi	r7,16327
10004b58:	31b22cc4 	addi	r6,r6,-14157
10004b5c:	39e28a04 	addi	r7,r7,-30168
10004b60:	180b883a 	mov	r5,r3
10004b64:	1009883a 	mov	r4,r2
10004b68:	000b2080 	call	1000b208 <__adddf3>
10004b6c:	8009883a 	mov	r4,r16
10004b70:	1029883a 	mov	r20,r2
10004b74:	1823883a 	mov	r17,r3
10004b78:	000d8c40 	call	1000d8c4 <__floatsidf>
10004b7c:	019427f4 	movhi	r6,20639
10004b80:	01cff4f4 	movhi	r7,16339
10004b84:	319e7ec4 	addi	r6,r6,31227
10004b88:	39d104c4 	addi	r7,r7,17427
10004b8c:	1009883a 	mov	r4,r2
10004b90:	180b883a 	mov	r5,r3
10004b94:	000c6dc0 	call	1000c6dc <__muldf3>
10004b98:	100d883a 	mov	r6,r2
10004b9c:	180f883a 	mov	r7,r3
10004ba0:	a009883a 	mov	r4,r20
10004ba4:	880b883a 	mov	r5,r17
10004ba8:	000b2080 	call	1000b208 <__adddf3>
10004bac:	1009883a 	mov	r4,r2
10004bb0:	180b883a 	mov	r5,r3
10004bb4:	1029883a 	mov	r20,r2
10004bb8:	1823883a 	mov	r17,r3
10004bbc:	000d8440 	call	1000d844 <__fixdfsi>
10004bc0:	000d883a 	mov	r6,zero
10004bc4:	000f883a 	mov	r7,zero
10004bc8:	a009883a 	mov	r4,r20
10004bcc:	880b883a 	mov	r5,r17
10004bd0:	d8800515 	stw	r2,20(sp)
10004bd4:	000c5e80 	call	1000c5e8 <__ledf2>
10004bd8:	10028716 	blt	r2,zero,100055f8 <_dtoa_r+0xc88>
10004bdc:	d8c00517 	ldw	r3,20(sp)
10004be0:	00800584 	movi	r2,22
10004be4:	10c27536 	bltu	r2,r3,100055bc <_dtoa_r+0xc4c>
10004be8:	180490fa 	slli	r2,r3,3
10004bec:	00c40074 	movhi	r3,4097
10004bf0:	18c0d404 	addi	r3,r3,848
10004bf4:	1885883a 	add	r2,r3,r2
10004bf8:	11000017 	ldw	r4,0(r2)
10004bfc:	11400117 	ldw	r5,4(r2)
10004c00:	900d883a 	mov	r6,r18
10004c04:	980f883a 	mov	r7,r19
10004c08:	000c50c0 	call	1000c50c <__gedf2>
10004c0c:	00828d0e 	bge	zero,r2,10005644 <_dtoa_r+0xcd4>
10004c10:	d9000517 	ldw	r4,20(sp)
10004c14:	d8000e15 	stw	zero,56(sp)
10004c18:	213fffc4 	addi	r4,r4,-1
10004c1c:	d9000515 	stw	r4,20(sp)
10004c20:	b42dc83a 	sub	r22,r22,r16
10004c24:	b5bfffc4 	addi	r22,r22,-1
10004c28:	b0026f16 	blt	r22,zero,100055e8 <_dtoa_r+0xc78>
10004c2c:	d8000815 	stw	zero,32(sp)
10004c30:	d9c00517 	ldw	r7,20(sp)
10004c34:	38026416 	blt	r7,zero,100055c8 <_dtoa_r+0xc58>
10004c38:	b1ed883a 	add	r22,r22,r7
10004c3c:	d9c00d15 	stw	r7,52(sp)
10004c40:	d8000a15 	stw	zero,40(sp)
10004c44:	d9800317 	ldw	r6,12(sp)
10004c48:	00800244 	movi	r2,9
10004c4c:	11811436 	bltu	r2,r6,100050a0 <_dtoa_r+0x730>
10004c50:	00800144 	movi	r2,5
10004c54:	1184e10e 	bge	r2,r6,10005fdc <_dtoa_r+0x166c>
10004c58:	31bfff04 	addi	r6,r6,-4
10004c5c:	d9800315 	stw	r6,12(sp)
10004c60:	0023883a 	mov	r17,zero
10004c64:	d9800317 	ldw	r6,12(sp)
10004c68:	008000c4 	movi	r2,3
10004c6c:	30836726 	beq	r6,r2,10005a0c <_dtoa_r+0x109c>
10004c70:	1183410e 	bge	r2,r6,10005978 <_dtoa_r+0x1008>
10004c74:	d9c00317 	ldw	r7,12(sp)
10004c78:	00800104 	movi	r2,4
10004c7c:	38827c26 	beq	r7,r2,10005670 <_dtoa_r+0xd00>
10004c80:	00800144 	movi	r2,5
10004c84:	3884c41e 	bne	r7,r2,10005f98 <_dtoa_r+0x1628>
10004c88:	00800044 	movi	r2,1
10004c8c:	d8800b15 	stw	r2,44(sp)
10004c90:	d8c00517 	ldw	r3,20(sp)
10004c94:	d9002217 	ldw	r4,136(sp)
10004c98:	1907883a 	add	r3,r3,r4
10004c9c:	19800044 	addi	r6,r3,1
10004ca0:	d8c00c15 	stw	r3,48(sp)
10004ca4:	d9800615 	stw	r6,24(sp)
10004ca8:	0183a40e 	bge	zero,r6,10005b3c <_dtoa_r+0x11cc>
10004cac:	d9800617 	ldw	r6,24(sp)
10004cb0:	3021883a 	mov	r16,r6
10004cb4:	e0001115 	stw	zero,68(fp)
10004cb8:	008005c4 	movi	r2,23
10004cbc:	1184c92e 	bgeu	r2,r6,10005fe4 <_dtoa_r+0x1674>
10004cc0:	00c00044 	movi	r3,1
10004cc4:	00800104 	movi	r2,4
10004cc8:	1085883a 	add	r2,r2,r2
10004ccc:	11000504 	addi	r4,r2,20
10004cd0:	180b883a 	mov	r5,r3
10004cd4:	18c00044 	addi	r3,r3,1
10004cd8:	313ffb2e 	bgeu	r6,r4,10004cc8 <__alt_data_end+0xf8004cc8>
10004cdc:	e1401115 	stw	r5,68(fp)
10004ce0:	e009883a 	mov	r4,fp
10004ce4:	00063d40 	call	100063d4 <_Balloc>
10004ce8:	d8800715 	stw	r2,28(sp)
10004cec:	e0801015 	stw	r2,64(fp)
10004cf0:	00800384 	movi	r2,14
10004cf4:	1400f736 	bltu	r2,r16,100050d4 <_dtoa_r+0x764>
10004cf8:	8800f626 	beq	r17,zero,100050d4 <_dtoa_r+0x764>
10004cfc:	d9c00517 	ldw	r7,20(sp)
10004d00:	01c39a0e 	bge	zero,r7,10005b6c <_dtoa_r+0x11fc>
10004d04:	388003cc 	andi	r2,r7,15
10004d08:	100490fa 	slli	r2,r2,3
10004d0c:	382bd13a 	srai	r21,r7,4
10004d10:	00c40074 	movhi	r3,4097
10004d14:	18c0d404 	addi	r3,r3,848
10004d18:	1885883a 	add	r2,r3,r2
10004d1c:	a8c0040c 	andi	r3,r21,16
10004d20:	12400017 	ldw	r9,0(r2)
10004d24:	12000117 	ldw	r8,4(r2)
10004d28:	18037926 	beq	r3,zero,10005b10 <_dtoa_r+0x11a0>
10004d2c:	00840074 	movhi	r2,4097
10004d30:	1080ca04 	addi	r2,r2,808
10004d34:	11800817 	ldw	r6,32(r2)
10004d38:	11c00917 	ldw	r7,36(r2)
10004d3c:	9009883a 	mov	r4,r18
10004d40:	980b883a 	mov	r5,r19
10004d44:	da001715 	stw	r8,92(sp)
10004d48:	da401615 	stw	r9,88(sp)
10004d4c:	000bab40 	call	1000bab4 <__divdf3>
10004d50:	da001717 	ldw	r8,92(sp)
10004d54:	da401617 	ldw	r9,88(sp)
10004d58:	ad4003cc 	andi	r21,r21,15
10004d5c:	040000c4 	movi	r16,3
10004d60:	1023883a 	mov	r17,r2
10004d64:	1829883a 	mov	r20,r3
10004d68:	a8001126 	beq	r21,zero,10004db0 <_dtoa_r+0x440>
10004d6c:	05c40074 	movhi	r23,4097
10004d70:	bdc0ca04 	addi	r23,r23,808
10004d74:	4805883a 	mov	r2,r9
10004d78:	4007883a 	mov	r3,r8
10004d7c:	a980004c 	andi	r6,r21,1
10004d80:	1009883a 	mov	r4,r2
10004d84:	a82bd07a 	srai	r21,r21,1
10004d88:	180b883a 	mov	r5,r3
10004d8c:	30000426 	beq	r6,zero,10004da0 <_dtoa_r+0x430>
10004d90:	b9800017 	ldw	r6,0(r23)
10004d94:	b9c00117 	ldw	r7,4(r23)
10004d98:	84000044 	addi	r16,r16,1
10004d9c:	000c6dc0 	call	1000c6dc <__muldf3>
10004da0:	bdc00204 	addi	r23,r23,8
10004da4:	a83ff51e 	bne	r21,zero,10004d7c <__alt_data_end+0xf8004d7c>
10004da8:	1013883a 	mov	r9,r2
10004dac:	1811883a 	mov	r8,r3
10004db0:	480d883a 	mov	r6,r9
10004db4:	400f883a 	mov	r7,r8
10004db8:	8809883a 	mov	r4,r17
10004dbc:	a00b883a 	mov	r5,r20
10004dc0:	000bab40 	call	1000bab4 <__divdf3>
10004dc4:	d8800f15 	stw	r2,60(sp)
10004dc8:	d8c01015 	stw	r3,64(sp)
10004dcc:	d8c00e17 	ldw	r3,56(sp)
10004dd0:	18000626 	beq	r3,zero,10004dec <_dtoa_r+0x47c>
10004dd4:	d9000f17 	ldw	r4,60(sp)
10004dd8:	d9401017 	ldw	r5,64(sp)
10004ddc:	000d883a 	mov	r6,zero
10004de0:	01cffc34 	movhi	r7,16368
10004de4:	000c5e80 	call	1000c5e8 <__ledf2>
10004de8:	10040b16 	blt	r2,zero,10005e18 <_dtoa_r+0x14a8>
10004dec:	8009883a 	mov	r4,r16
10004df0:	000d8c40 	call	1000d8c4 <__floatsidf>
10004df4:	d9800f17 	ldw	r6,60(sp)
10004df8:	d9c01017 	ldw	r7,64(sp)
10004dfc:	1009883a 	mov	r4,r2
10004e00:	180b883a 	mov	r5,r3
10004e04:	000c6dc0 	call	1000c6dc <__muldf3>
10004e08:	000d883a 	mov	r6,zero
10004e0c:	01d00734 	movhi	r7,16412
10004e10:	1009883a 	mov	r4,r2
10004e14:	180b883a 	mov	r5,r3
10004e18:	000b2080 	call	1000b208 <__adddf3>
10004e1c:	1021883a 	mov	r16,r2
10004e20:	d8800617 	ldw	r2,24(sp)
10004e24:	047f3034 	movhi	r17,64704
10004e28:	1c63883a 	add	r17,r3,r17
10004e2c:	10031826 	beq	r2,zero,10005a90 <_dtoa_r+0x1120>
10004e30:	d8c00517 	ldw	r3,20(sp)
10004e34:	db000617 	ldw	r12,24(sp)
10004e38:	d8c01315 	stw	r3,76(sp)
10004e3c:	d9000b17 	ldw	r4,44(sp)
10004e40:	20038f26 	beq	r4,zero,10005c80 <_dtoa_r+0x1310>
10004e44:	60bfffc4 	addi	r2,r12,-1
10004e48:	100490fa 	slli	r2,r2,3
10004e4c:	00c40074 	movhi	r3,4097
10004e50:	18c0d404 	addi	r3,r3,848
10004e54:	1885883a 	add	r2,r3,r2
10004e58:	11800017 	ldw	r6,0(r2)
10004e5c:	11c00117 	ldw	r7,4(r2)
10004e60:	d8800717 	ldw	r2,28(sp)
10004e64:	0009883a 	mov	r4,zero
10004e68:	014ff834 	movhi	r5,16352
10004e6c:	db001615 	stw	r12,88(sp)
10004e70:	15c00044 	addi	r23,r2,1
10004e74:	000bab40 	call	1000bab4 <__divdf3>
10004e78:	800d883a 	mov	r6,r16
10004e7c:	880f883a 	mov	r7,r17
10004e80:	1009883a 	mov	r4,r2
10004e84:	180b883a 	mov	r5,r3
10004e88:	000cf480 	call	1000cf48 <__subdf3>
10004e8c:	d9401017 	ldw	r5,64(sp)
10004e90:	d9000f17 	ldw	r4,60(sp)
10004e94:	102b883a 	mov	r21,r2
10004e98:	d8c01215 	stw	r3,72(sp)
10004e9c:	000d8440 	call	1000d844 <__fixdfsi>
10004ea0:	1009883a 	mov	r4,r2
10004ea4:	1029883a 	mov	r20,r2
10004ea8:	000d8c40 	call	1000d8c4 <__floatsidf>
10004eac:	d9000f17 	ldw	r4,60(sp)
10004eb0:	d9401017 	ldw	r5,64(sp)
10004eb4:	100d883a 	mov	r6,r2
10004eb8:	180f883a 	mov	r7,r3
10004ebc:	000cf480 	call	1000cf48 <__subdf3>
10004ec0:	1823883a 	mov	r17,r3
10004ec4:	d8c00717 	ldw	r3,28(sp)
10004ec8:	d9401217 	ldw	r5,72(sp)
10004ecc:	a2000c04 	addi	r8,r20,48
10004ed0:	1021883a 	mov	r16,r2
10004ed4:	1a000005 	stb	r8,0(r3)
10004ed8:	800d883a 	mov	r6,r16
10004edc:	880f883a 	mov	r7,r17
10004ee0:	a809883a 	mov	r4,r21
10004ee4:	4029883a 	mov	r20,r8
10004ee8:	000c50c0 	call	1000c50c <__gedf2>
10004eec:	00841d16 	blt	zero,r2,10005f64 <_dtoa_r+0x15f4>
10004ef0:	800d883a 	mov	r6,r16
10004ef4:	880f883a 	mov	r7,r17
10004ef8:	0009883a 	mov	r4,zero
10004efc:	014ffc34 	movhi	r5,16368
10004f00:	000cf480 	call	1000cf48 <__subdf3>
10004f04:	d9401217 	ldw	r5,72(sp)
10004f08:	100d883a 	mov	r6,r2
10004f0c:	180f883a 	mov	r7,r3
10004f10:	a809883a 	mov	r4,r21
10004f14:	000c50c0 	call	1000c50c <__gedf2>
10004f18:	db001617 	ldw	r12,88(sp)
10004f1c:	00840e16 	blt	zero,r2,10005f58 <_dtoa_r+0x15e8>
10004f20:	00800044 	movi	r2,1
10004f24:	13006b0e 	bge	r2,r12,100050d4 <_dtoa_r+0x764>
10004f28:	d9000717 	ldw	r4,28(sp)
10004f2c:	dd800f15 	stw	r22,60(sp)
10004f30:	dcc01015 	stw	r19,64(sp)
10004f34:	2319883a 	add	r12,r4,r12
10004f38:	dcc01217 	ldw	r19,72(sp)
10004f3c:	602d883a 	mov	r22,r12
10004f40:	dc801215 	stw	r18,72(sp)
10004f44:	b825883a 	mov	r18,r23
10004f48:	00000906 	br	10004f70 <_dtoa_r+0x600>
10004f4c:	000cf480 	call	1000cf48 <__subdf3>
10004f50:	a80d883a 	mov	r6,r21
10004f54:	980f883a 	mov	r7,r19
10004f58:	1009883a 	mov	r4,r2
10004f5c:	180b883a 	mov	r5,r3
10004f60:	000c5e80 	call	1000c5e8 <__ledf2>
10004f64:	1003e816 	blt	r2,zero,10005f08 <_dtoa_r+0x1598>
10004f68:	b825883a 	mov	r18,r23
10004f6c:	bd83e926 	beq	r23,r22,10005f14 <_dtoa_r+0x15a4>
10004f70:	a809883a 	mov	r4,r21
10004f74:	980b883a 	mov	r5,r19
10004f78:	000d883a 	mov	r6,zero
10004f7c:	01d00934 	movhi	r7,16420
10004f80:	000c6dc0 	call	1000c6dc <__muldf3>
10004f84:	000d883a 	mov	r6,zero
10004f88:	01d00934 	movhi	r7,16420
10004f8c:	8009883a 	mov	r4,r16
10004f90:	880b883a 	mov	r5,r17
10004f94:	102b883a 	mov	r21,r2
10004f98:	1827883a 	mov	r19,r3
10004f9c:	000c6dc0 	call	1000c6dc <__muldf3>
10004fa0:	180b883a 	mov	r5,r3
10004fa4:	1009883a 	mov	r4,r2
10004fa8:	1821883a 	mov	r16,r3
10004fac:	1023883a 	mov	r17,r2
10004fb0:	000d8440 	call	1000d844 <__fixdfsi>
10004fb4:	1009883a 	mov	r4,r2
10004fb8:	1029883a 	mov	r20,r2
10004fbc:	000d8c40 	call	1000d8c4 <__floatsidf>
10004fc0:	8809883a 	mov	r4,r17
10004fc4:	800b883a 	mov	r5,r16
10004fc8:	100d883a 	mov	r6,r2
10004fcc:	180f883a 	mov	r7,r3
10004fd0:	000cf480 	call	1000cf48 <__subdf3>
10004fd4:	a5000c04 	addi	r20,r20,48
10004fd8:	a80d883a 	mov	r6,r21
10004fdc:	980f883a 	mov	r7,r19
10004fe0:	1009883a 	mov	r4,r2
10004fe4:	180b883a 	mov	r5,r3
10004fe8:	95000005 	stb	r20,0(r18)
10004fec:	1021883a 	mov	r16,r2
10004ff0:	1823883a 	mov	r17,r3
10004ff4:	000c5e80 	call	1000c5e8 <__ledf2>
10004ff8:	bdc00044 	addi	r23,r23,1
10004ffc:	800d883a 	mov	r6,r16
10005000:	880f883a 	mov	r7,r17
10005004:	0009883a 	mov	r4,zero
10005008:	014ffc34 	movhi	r5,16368
1000500c:	103fcf0e 	bge	r2,zero,10004f4c <__alt_data_end+0xf8004f4c>
10005010:	d8c01317 	ldw	r3,76(sp)
10005014:	d8c00515 	stw	r3,20(sp)
10005018:	d9400917 	ldw	r5,36(sp)
1000501c:	e009883a 	mov	r4,fp
10005020:	000647c0 	call	1000647c <_Bfree>
10005024:	d9000517 	ldw	r4,20(sp)
10005028:	d9802317 	ldw	r6,140(sp)
1000502c:	d9c02517 	ldw	r7,148(sp)
10005030:	b8000005 	stb	zero,0(r23)
10005034:	20800044 	addi	r2,r4,1
10005038:	30800015 	stw	r2,0(r6)
1000503c:	3802aa26 	beq	r7,zero,10005ae8 <_dtoa_r+0x1178>
10005040:	3dc00015 	stw	r23,0(r7)
10005044:	d8800717 	ldw	r2,28(sp)
10005048:	003e7906 	br	10004a30 <__alt_data_end+0xf8004a30>
1000504c:	00800434 	movhi	r2,16
10005050:	10bfffc4 	addi	r2,r2,-1
10005054:	88a2703a 	and	r17,r17,r2
10005058:	883e851e 	bne	r17,zero,10004a70 <__alt_data_end+0xf8004a70>
1000505c:	00840074 	movhi	r2,4097
10005060:	1080b604 	addi	r2,r2,728
10005064:	003e8406 	br	10004a78 <__alt_data_end+0xf8004a78>
10005068:	10c00204 	addi	r3,r2,8
1000506c:	003e8706 	br	10004a8c <__alt_data_end+0xf8004a8c>
10005070:	01400434 	movhi	r5,16
10005074:	297fffc4 	addi	r5,r5,-1
10005078:	994a703a 	and	r5,r19,r5
1000507c:	9009883a 	mov	r4,r18
10005080:	843f0044 	addi	r16,r16,-1023
10005084:	294ffc34 	orhi	r5,r5,16368
10005088:	dd800217 	ldw	r22,8(sp)
1000508c:	d8001115 	stw	zero,68(sp)
10005090:	003ea506 	br	10004b28 <__alt_data_end+0xf8004b28>
10005094:	00840074 	movhi	r2,4097
10005098:	1080ad04 	addi	r2,r2,692
1000509c:	003e6406 	br	10004a30 <__alt_data_end+0xf8004a30>
100050a0:	e0001115 	stw	zero,68(fp)
100050a4:	000b883a 	mov	r5,zero
100050a8:	e009883a 	mov	r4,fp
100050ac:	00063d40 	call	100063d4 <_Balloc>
100050b0:	01bfffc4 	movi	r6,-1
100050b4:	01c00044 	movi	r7,1
100050b8:	d8800715 	stw	r2,28(sp)
100050bc:	d9800c15 	stw	r6,48(sp)
100050c0:	e0801015 	stw	r2,64(fp)
100050c4:	d8000315 	stw	zero,12(sp)
100050c8:	d9c00b15 	stw	r7,44(sp)
100050cc:	d9800615 	stw	r6,24(sp)
100050d0:	d8002215 	stw	zero,136(sp)
100050d4:	d8800117 	ldw	r2,4(sp)
100050d8:	10008916 	blt	r2,zero,10005300 <_dtoa_r+0x990>
100050dc:	d9000517 	ldw	r4,20(sp)
100050e0:	00c00384 	movi	r3,14
100050e4:	19008616 	blt	r3,r4,10005300 <_dtoa_r+0x990>
100050e8:	200490fa 	slli	r2,r4,3
100050ec:	00c40074 	movhi	r3,4097
100050f0:	d9802217 	ldw	r6,136(sp)
100050f4:	18c0d404 	addi	r3,r3,848
100050f8:	1885883a 	add	r2,r3,r2
100050fc:	14000017 	ldw	r16,0(r2)
10005100:	14400117 	ldw	r17,4(r2)
10005104:	30016316 	blt	r6,zero,10005694 <_dtoa_r+0xd24>
10005108:	800d883a 	mov	r6,r16
1000510c:	880f883a 	mov	r7,r17
10005110:	9009883a 	mov	r4,r18
10005114:	980b883a 	mov	r5,r19
10005118:	000bab40 	call	1000bab4 <__divdf3>
1000511c:	180b883a 	mov	r5,r3
10005120:	1009883a 	mov	r4,r2
10005124:	000d8440 	call	1000d844 <__fixdfsi>
10005128:	1009883a 	mov	r4,r2
1000512c:	102b883a 	mov	r21,r2
10005130:	000d8c40 	call	1000d8c4 <__floatsidf>
10005134:	800d883a 	mov	r6,r16
10005138:	880f883a 	mov	r7,r17
1000513c:	1009883a 	mov	r4,r2
10005140:	180b883a 	mov	r5,r3
10005144:	000c6dc0 	call	1000c6dc <__muldf3>
10005148:	100d883a 	mov	r6,r2
1000514c:	180f883a 	mov	r7,r3
10005150:	9009883a 	mov	r4,r18
10005154:	980b883a 	mov	r5,r19
10005158:	000cf480 	call	1000cf48 <__subdf3>
1000515c:	d9c00717 	ldw	r7,28(sp)
10005160:	1009883a 	mov	r4,r2
10005164:	a8800c04 	addi	r2,r21,48
10005168:	38800005 	stb	r2,0(r7)
1000516c:	3dc00044 	addi	r23,r7,1
10005170:	d9c00617 	ldw	r7,24(sp)
10005174:	01800044 	movi	r6,1
10005178:	180b883a 	mov	r5,r3
1000517c:	2005883a 	mov	r2,r4
10005180:	39803826 	beq	r7,r6,10005264 <_dtoa_r+0x8f4>
10005184:	000d883a 	mov	r6,zero
10005188:	01d00934 	movhi	r7,16420
1000518c:	000c6dc0 	call	1000c6dc <__muldf3>
10005190:	000d883a 	mov	r6,zero
10005194:	000f883a 	mov	r7,zero
10005198:	1009883a 	mov	r4,r2
1000519c:	180b883a 	mov	r5,r3
100051a0:	1025883a 	mov	r18,r2
100051a4:	1827883a 	mov	r19,r3
100051a8:	000c4840 	call	1000c484 <__eqdf2>
100051ac:	103f9a26 	beq	r2,zero,10005018 <__alt_data_end+0xf8005018>
100051b0:	d9c00617 	ldw	r7,24(sp)
100051b4:	d8c00717 	ldw	r3,28(sp)
100051b8:	b829883a 	mov	r20,r23
100051bc:	38bfffc4 	addi	r2,r7,-1
100051c0:	18ad883a 	add	r22,r3,r2
100051c4:	00000a06 	br	100051f0 <_dtoa_r+0x880>
100051c8:	000c6dc0 	call	1000c6dc <__muldf3>
100051cc:	000d883a 	mov	r6,zero
100051d0:	000f883a 	mov	r7,zero
100051d4:	1009883a 	mov	r4,r2
100051d8:	180b883a 	mov	r5,r3
100051dc:	1025883a 	mov	r18,r2
100051e0:	1827883a 	mov	r19,r3
100051e4:	b829883a 	mov	r20,r23
100051e8:	000c4840 	call	1000c484 <__eqdf2>
100051ec:	103f8a26 	beq	r2,zero,10005018 <__alt_data_end+0xf8005018>
100051f0:	800d883a 	mov	r6,r16
100051f4:	880f883a 	mov	r7,r17
100051f8:	9009883a 	mov	r4,r18
100051fc:	980b883a 	mov	r5,r19
10005200:	000bab40 	call	1000bab4 <__divdf3>
10005204:	180b883a 	mov	r5,r3
10005208:	1009883a 	mov	r4,r2
1000520c:	000d8440 	call	1000d844 <__fixdfsi>
10005210:	1009883a 	mov	r4,r2
10005214:	102b883a 	mov	r21,r2
10005218:	000d8c40 	call	1000d8c4 <__floatsidf>
1000521c:	800d883a 	mov	r6,r16
10005220:	880f883a 	mov	r7,r17
10005224:	1009883a 	mov	r4,r2
10005228:	180b883a 	mov	r5,r3
1000522c:	000c6dc0 	call	1000c6dc <__muldf3>
10005230:	100d883a 	mov	r6,r2
10005234:	180f883a 	mov	r7,r3
10005238:	9009883a 	mov	r4,r18
1000523c:	980b883a 	mov	r5,r19
10005240:	000cf480 	call	1000cf48 <__subdf3>
10005244:	aa000c04 	addi	r8,r21,48
10005248:	a2000005 	stb	r8,0(r20)
1000524c:	000d883a 	mov	r6,zero
10005250:	01d00934 	movhi	r7,16420
10005254:	1009883a 	mov	r4,r2
10005258:	180b883a 	mov	r5,r3
1000525c:	a5c00044 	addi	r23,r20,1
10005260:	b53fd91e 	bne	r22,r20,100051c8 <__alt_data_end+0xf80051c8>
10005264:	100d883a 	mov	r6,r2
10005268:	180f883a 	mov	r7,r3
1000526c:	1009883a 	mov	r4,r2
10005270:	180b883a 	mov	r5,r3
10005274:	000b2080 	call	1000b208 <__adddf3>
10005278:	100d883a 	mov	r6,r2
1000527c:	180f883a 	mov	r7,r3
10005280:	8009883a 	mov	r4,r16
10005284:	880b883a 	mov	r5,r17
10005288:	1027883a 	mov	r19,r2
1000528c:	1825883a 	mov	r18,r3
10005290:	000c5e80 	call	1000c5e8 <__ledf2>
10005294:	10000816 	blt	r2,zero,100052b8 <_dtoa_r+0x948>
10005298:	980d883a 	mov	r6,r19
1000529c:	900f883a 	mov	r7,r18
100052a0:	8009883a 	mov	r4,r16
100052a4:	880b883a 	mov	r5,r17
100052a8:	000c4840 	call	1000c484 <__eqdf2>
100052ac:	103f5a1e 	bne	r2,zero,10005018 <__alt_data_end+0xf8005018>
100052b0:	ad40004c 	andi	r21,r21,1
100052b4:	a83f5826 	beq	r21,zero,10005018 <__alt_data_end+0xf8005018>
100052b8:	bd3fffc3 	ldbu	r20,-1(r23)
100052bc:	b8bfffc4 	addi	r2,r23,-1
100052c0:	1007883a 	mov	r3,r2
100052c4:	01400e44 	movi	r5,57
100052c8:	d9800717 	ldw	r6,28(sp)
100052cc:	00000506 	br	100052e4 <_dtoa_r+0x974>
100052d0:	18ffffc4 	addi	r3,r3,-1
100052d4:	11824726 	beq	r2,r6,10005bf4 <_dtoa_r+0x1284>
100052d8:	1d000003 	ldbu	r20,0(r3)
100052dc:	102f883a 	mov	r23,r2
100052e0:	10bfffc4 	addi	r2,r2,-1
100052e4:	a1003fcc 	andi	r4,r20,255
100052e8:	2100201c 	xori	r4,r4,128
100052ec:	213fe004 	addi	r4,r4,-128
100052f0:	217ff726 	beq	r4,r5,100052d0 <__alt_data_end+0xf80052d0>
100052f4:	a2000044 	addi	r8,r20,1
100052f8:	12000005 	stb	r8,0(r2)
100052fc:	003f4606 	br	10005018 <__alt_data_end+0xf8005018>
10005300:	d9000b17 	ldw	r4,44(sp)
10005304:	2000c826 	beq	r4,zero,10005628 <_dtoa_r+0xcb8>
10005308:	d9800317 	ldw	r6,12(sp)
1000530c:	00c00044 	movi	r3,1
10005310:	1980f90e 	bge	r3,r6,100056f8 <_dtoa_r+0xd88>
10005314:	d8800617 	ldw	r2,24(sp)
10005318:	d8c00a17 	ldw	r3,40(sp)
1000531c:	157fffc4 	addi	r21,r2,-1
10005320:	1d41f316 	blt	r3,r21,10005af0 <_dtoa_r+0x1180>
10005324:	1d6bc83a 	sub	r21,r3,r21
10005328:	d9c00617 	ldw	r7,24(sp)
1000532c:	3802aa16 	blt	r7,zero,10005dd8 <_dtoa_r+0x1468>
10005330:	dd000817 	ldw	r20,32(sp)
10005334:	d8800617 	ldw	r2,24(sp)
10005338:	d8c00817 	ldw	r3,32(sp)
1000533c:	01400044 	movi	r5,1
10005340:	e009883a 	mov	r4,fp
10005344:	1887883a 	add	r3,r3,r2
10005348:	d8c00815 	stw	r3,32(sp)
1000534c:	b0ad883a 	add	r22,r22,r2
10005350:	00068080 	call	10006808 <__i2b>
10005354:	1023883a 	mov	r17,r2
10005358:	a0000826 	beq	r20,zero,1000537c <_dtoa_r+0xa0c>
1000535c:	0580070e 	bge	zero,r22,1000537c <_dtoa_r+0xa0c>
10005360:	a005883a 	mov	r2,r20
10005364:	b500b916 	blt	r22,r20,1000564c <_dtoa_r+0xcdc>
10005368:	d9000817 	ldw	r4,32(sp)
1000536c:	a0a9c83a 	sub	r20,r20,r2
10005370:	b0adc83a 	sub	r22,r22,r2
10005374:	2089c83a 	sub	r4,r4,r2
10005378:	d9000815 	stw	r4,32(sp)
1000537c:	d9800a17 	ldw	r6,40(sp)
10005380:	0181810e 	bge	zero,r6,10005988 <_dtoa_r+0x1018>
10005384:	d9c00b17 	ldw	r7,44(sp)
10005388:	3800b326 	beq	r7,zero,10005658 <_dtoa_r+0xce8>
1000538c:	a800b226 	beq	r21,zero,10005658 <_dtoa_r+0xce8>
10005390:	880b883a 	mov	r5,r17
10005394:	a80d883a 	mov	r6,r21
10005398:	e009883a 	mov	r4,fp
1000539c:	0006ad00 	call	10006ad0 <__pow5mult>
100053a0:	d9800917 	ldw	r6,36(sp)
100053a4:	100b883a 	mov	r5,r2
100053a8:	e009883a 	mov	r4,fp
100053ac:	1023883a 	mov	r17,r2
100053b0:	00068440 	call	10006844 <__multiply>
100053b4:	1021883a 	mov	r16,r2
100053b8:	d8800a17 	ldw	r2,40(sp)
100053bc:	d9400917 	ldw	r5,36(sp)
100053c0:	e009883a 	mov	r4,fp
100053c4:	1545c83a 	sub	r2,r2,r21
100053c8:	d8800a15 	stw	r2,40(sp)
100053cc:	000647c0 	call	1000647c <_Bfree>
100053d0:	d8c00a17 	ldw	r3,40(sp)
100053d4:	18009f1e 	bne	r3,zero,10005654 <_dtoa_r+0xce4>
100053d8:	05c00044 	movi	r23,1
100053dc:	e009883a 	mov	r4,fp
100053e0:	b80b883a 	mov	r5,r23
100053e4:	00068080 	call	10006808 <__i2b>
100053e8:	d9000d17 	ldw	r4,52(sp)
100053ec:	102b883a 	mov	r21,r2
100053f0:	2000ce26 	beq	r4,zero,1000572c <_dtoa_r+0xdbc>
100053f4:	200d883a 	mov	r6,r4
100053f8:	100b883a 	mov	r5,r2
100053fc:	e009883a 	mov	r4,fp
10005400:	0006ad00 	call	10006ad0 <__pow5mult>
10005404:	d9800317 	ldw	r6,12(sp)
10005408:	102b883a 	mov	r21,r2
1000540c:	b981810e 	bge	r23,r6,10005a14 <_dtoa_r+0x10a4>
10005410:	0027883a 	mov	r19,zero
10005414:	a8800417 	ldw	r2,16(r21)
10005418:	05c00804 	movi	r23,32
1000541c:	10800104 	addi	r2,r2,4
10005420:	1085883a 	add	r2,r2,r2
10005424:	1085883a 	add	r2,r2,r2
10005428:	a885883a 	add	r2,r21,r2
1000542c:	11000017 	ldw	r4,0(r2)
10005430:	00066f00 	call	100066f0 <__hi0bits>
10005434:	b885c83a 	sub	r2,r23,r2
10005438:	1585883a 	add	r2,r2,r22
1000543c:	108007cc 	andi	r2,r2,31
10005440:	1000b326 	beq	r2,zero,10005710 <_dtoa_r+0xda0>
10005444:	00c00804 	movi	r3,32
10005448:	1887c83a 	sub	r3,r3,r2
1000544c:	01000104 	movi	r4,4
10005450:	20c2cd0e 	bge	r4,r3,10005f88 <_dtoa_r+0x1618>
10005454:	00c00704 	movi	r3,28
10005458:	1885c83a 	sub	r2,r3,r2
1000545c:	d8c00817 	ldw	r3,32(sp)
10005460:	a0a9883a 	add	r20,r20,r2
10005464:	b0ad883a 	add	r22,r22,r2
10005468:	1887883a 	add	r3,r3,r2
1000546c:	d8c00815 	stw	r3,32(sp)
10005470:	d9800817 	ldw	r6,32(sp)
10005474:	0180040e 	bge	zero,r6,10005488 <_dtoa_r+0xb18>
10005478:	800b883a 	mov	r5,r16
1000547c:	e009883a 	mov	r4,fp
10005480:	0006c100 	call	10006c10 <__lshift>
10005484:	1021883a 	mov	r16,r2
10005488:	0580050e 	bge	zero,r22,100054a0 <_dtoa_r+0xb30>
1000548c:	a80b883a 	mov	r5,r21
10005490:	b00d883a 	mov	r6,r22
10005494:	e009883a 	mov	r4,fp
10005498:	0006c100 	call	10006c10 <__lshift>
1000549c:	102b883a 	mov	r21,r2
100054a0:	d9c00e17 	ldw	r7,56(sp)
100054a4:	3801211e 	bne	r7,zero,1000592c <_dtoa_r+0xfbc>
100054a8:	d9800617 	ldw	r6,24(sp)
100054ac:	0181380e 	bge	zero,r6,10005990 <_dtoa_r+0x1020>
100054b0:	d8c00b17 	ldw	r3,44(sp)
100054b4:	1800ab1e 	bne	r3,zero,10005764 <_dtoa_r+0xdf4>
100054b8:	dc800717 	ldw	r18,28(sp)
100054bc:	dcc00617 	ldw	r19,24(sp)
100054c0:	9029883a 	mov	r20,r18
100054c4:	00000206 	br	100054d0 <_dtoa_r+0xb60>
100054c8:	00064a40 	call	100064a4 <__multadd>
100054cc:	1021883a 	mov	r16,r2
100054d0:	a80b883a 	mov	r5,r21
100054d4:	8009883a 	mov	r4,r16
100054d8:	00047480 	call	10004748 <quorem>
100054dc:	10800c04 	addi	r2,r2,48
100054e0:	90800005 	stb	r2,0(r18)
100054e4:	94800044 	addi	r18,r18,1
100054e8:	9507c83a 	sub	r3,r18,r20
100054ec:	000f883a 	mov	r7,zero
100054f0:	01800284 	movi	r6,10
100054f4:	800b883a 	mov	r5,r16
100054f8:	e009883a 	mov	r4,fp
100054fc:	1cfff216 	blt	r3,r19,100054c8 <__alt_data_end+0xf80054c8>
10005500:	1011883a 	mov	r8,r2
10005504:	d8800617 	ldw	r2,24(sp)
10005508:	0082370e 	bge	zero,r2,10005de8 <_dtoa_r+0x1478>
1000550c:	d9000717 	ldw	r4,28(sp)
10005510:	0025883a 	mov	r18,zero
10005514:	20af883a 	add	r23,r4,r2
10005518:	01800044 	movi	r6,1
1000551c:	800b883a 	mov	r5,r16
10005520:	e009883a 	mov	r4,fp
10005524:	da001715 	stw	r8,92(sp)
10005528:	0006c100 	call	10006c10 <__lshift>
1000552c:	a80b883a 	mov	r5,r21
10005530:	1009883a 	mov	r4,r2
10005534:	d8800915 	stw	r2,36(sp)
10005538:	0006d580 	call	10006d58 <__mcmp>
1000553c:	da001717 	ldw	r8,92(sp)
10005540:	0081800e 	bge	zero,r2,10005b44 <_dtoa_r+0x11d4>
10005544:	b93fffc3 	ldbu	r4,-1(r23)
10005548:	b8bfffc4 	addi	r2,r23,-1
1000554c:	1007883a 	mov	r3,r2
10005550:	01800e44 	movi	r6,57
10005554:	d9c00717 	ldw	r7,28(sp)
10005558:	00000506 	br	10005570 <_dtoa_r+0xc00>
1000555c:	18ffffc4 	addi	r3,r3,-1
10005560:	11c12326 	beq	r2,r7,100059f0 <_dtoa_r+0x1080>
10005564:	19000003 	ldbu	r4,0(r3)
10005568:	102f883a 	mov	r23,r2
1000556c:	10bfffc4 	addi	r2,r2,-1
10005570:	21403fcc 	andi	r5,r4,255
10005574:	2940201c 	xori	r5,r5,128
10005578:	297fe004 	addi	r5,r5,-128
1000557c:	29bff726 	beq	r5,r6,1000555c <__alt_data_end+0xf800555c>
10005580:	21000044 	addi	r4,r4,1
10005584:	11000005 	stb	r4,0(r2)
10005588:	a80b883a 	mov	r5,r21
1000558c:	e009883a 	mov	r4,fp
10005590:	000647c0 	call	1000647c <_Bfree>
10005594:	883ea026 	beq	r17,zero,10005018 <__alt_data_end+0xf8005018>
10005598:	90000426 	beq	r18,zero,100055ac <_dtoa_r+0xc3c>
1000559c:	94400326 	beq	r18,r17,100055ac <_dtoa_r+0xc3c>
100055a0:	900b883a 	mov	r5,r18
100055a4:	e009883a 	mov	r4,fp
100055a8:	000647c0 	call	1000647c <_Bfree>
100055ac:	880b883a 	mov	r5,r17
100055b0:	e009883a 	mov	r4,fp
100055b4:	000647c0 	call	1000647c <_Bfree>
100055b8:	003e9706 	br	10005018 <__alt_data_end+0xf8005018>
100055bc:	01800044 	movi	r6,1
100055c0:	d9800e15 	stw	r6,56(sp)
100055c4:	003d9606 	br	10004c20 <__alt_data_end+0xf8004c20>
100055c8:	d8800817 	ldw	r2,32(sp)
100055cc:	d8c00517 	ldw	r3,20(sp)
100055d0:	d8000d15 	stw	zero,52(sp)
100055d4:	10c5c83a 	sub	r2,r2,r3
100055d8:	00c9c83a 	sub	r4,zero,r3
100055dc:	d8800815 	stw	r2,32(sp)
100055e0:	d9000a15 	stw	r4,40(sp)
100055e4:	003d9706 	br	10004c44 <__alt_data_end+0xf8004c44>
100055e8:	05adc83a 	sub	r22,zero,r22
100055ec:	dd800815 	stw	r22,32(sp)
100055f0:	002d883a 	mov	r22,zero
100055f4:	003d8e06 	br	10004c30 <__alt_data_end+0xf8004c30>
100055f8:	d9000517 	ldw	r4,20(sp)
100055fc:	000d8c40 	call	1000d8c4 <__floatsidf>
10005600:	100d883a 	mov	r6,r2
10005604:	180f883a 	mov	r7,r3
10005608:	a009883a 	mov	r4,r20
1000560c:	880b883a 	mov	r5,r17
10005610:	000c4840 	call	1000c484 <__eqdf2>
10005614:	103d7126 	beq	r2,zero,10004bdc <__alt_data_end+0xf8004bdc>
10005618:	d9c00517 	ldw	r7,20(sp)
1000561c:	39ffffc4 	addi	r7,r7,-1
10005620:	d9c00515 	stw	r7,20(sp)
10005624:	003d6d06 	br	10004bdc <__alt_data_end+0xf8004bdc>
10005628:	dd400a17 	ldw	r21,40(sp)
1000562c:	dd000817 	ldw	r20,32(sp)
10005630:	0023883a 	mov	r17,zero
10005634:	003f4806 	br	10005358 <__alt_data_end+0xf8005358>
10005638:	10e3c83a 	sub	r17,r2,r3
1000563c:	9448983a 	sll	r4,r18,r17
10005640:	003d3206 	br	10004b0c <__alt_data_end+0xf8004b0c>
10005644:	d8000e15 	stw	zero,56(sp)
10005648:	003d7506 	br	10004c20 <__alt_data_end+0xf8004c20>
1000564c:	b005883a 	mov	r2,r22
10005650:	003f4506 	br	10005368 <__alt_data_end+0xf8005368>
10005654:	dc000915 	stw	r16,36(sp)
10005658:	d9800a17 	ldw	r6,40(sp)
1000565c:	d9400917 	ldw	r5,36(sp)
10005660:	e009883a 	mov	r4,fp
10005664:	0006ad00 	call	10006ad0 <__pow5mult>
10005668:	1021883a 	mov	r16,r2
1000566c:	003f5a06 	br	100053d8 <__alt_data_end+0xf80053d8>
10005670:	01c00044 	movi	r7,1
10005674:	d9c00b15 	stw	r7,44(sp)
10005678:	d8802217 	ldw	r2,136(sp)
1000567c:	0081280e 	bge	zero,r2,10005b20 <_dtoa_r+0x11b0>
10005680:	100d883a 	mov	r6,r2
10005684:	1021883a 	mov	r16,r2
10005688:	d8800c15 	stw	r2,48(sp)
1000568c:	d8800615 	stw	r2,24(sp)
10005690:	003d8806 	br	10004cb4 <__alt_data_end+0xf8004cb4>
10005694:	d8800617 	ldw	r2,24(sp)
10005698:	00be9b16 	blt	zero,r2,10005108 <__alt_data_end+0xf8005108>
1000569c:	10010f1e 	bne	r2,zero,10005adc <_dtoa_r+0x116c>
100056a0:	880b883a 	mov	r5,r17
100056a4:	000d883a 	mov	r6,zero
100056a8:	01d00534 	movhi	r7,16404
100056ac:	8009883a 	mov	r4,r16
100056b0:	000c6dc0 	call	1000c6dc <__muldf3>
100056b4:	900d883a 	mov	r6,r18
100056b8:	980f883a 	mov	r7,r19
100056bc:	1009883a 	mov	r4,r2
100056c0:	180b883a 	mov	r5,r3
100056c4:	000c50c0 	call	1000c50c <__gedf2>
100056c8:	002b883a 	mov	r21,zero
100056cc:	0023883a 	mov	r17,zero
100056d0:	1000bf16 	blt	r2,zero,100059d0 <_dtoa_r+0x1060>
100056d4:	d9802217 	ldw	r6,136(sp)
100056d8:	ddc00717 	ldw	r23,28(sp)
100056dc:	018c303a 	nor	r6,zero,r6
100056e0:	d9800515 	stw	r6,20(sp)
100056e4:	a80b883a 	mov	r5,r21
100056e8:	e009883a 	mov	r4,fp
100056ec:	000647c0 	call	1000647c <_Bfree>
100056f0:	883e4926 	beq	r17,zero,10005018 <__alt_data_end+0xf8005018>
100056f4:	003fad06 	br	100055ac <__alt_data_end+0xf80055ac>
100056f8:	d9c01117 	ldw	r7,68(sp)
100056fc:	3801bc26 	beq	r7,zero,10005df0 <_dtoa_r+0x1480>
10005700:	10810cc4 	addi	r2,r2,1075
10005704:	dd400a17 	ldw	r21,40(sp)
10005708:	dd000817 	ldw	r20,32(sp)
1000570c:	003f0a06 	br	10005338 <__alt_data_end+0xf8005338>
10005710:	00800704 	movi	r2,28
10005714:	d9000817 	ldw	r4,32(sp)
10005718:	a0a9883a 	add	r20,r20,r2
1000571c:	b0ad883a 	add	r22,r22,r2
10005720:	2089883a 	add	r4,r4,r2
10005724:	d9000815 	stw	r4,32(sp)
10005728:	003f5106 	br	10005470 <__alt_data_end+0xf8005470>
1000572c:	d8c00317 	ldw	r3,12(sp)
10005730:	b8c1fc0e 	bge	r23,r3,10005f24 <_dtoa_r+0x15b4>
10005734:	0027883a 	mov	r19,zero
10005738:	b805883a 	mov	r2,r23
1000573c:	003f3e06 	br	10005438 <__alt_data_end+0xf8005438>
10005740:	880b883a 	mov	r5,r17
10005744:	e009883a 	mov	r4,fp
10005748:	000f883a 	mov	r7,zero
1000574c:	01800284 	movi	r6,10
10005750:	00064a40 	call	100064a4 <__multadd>
10005754:	d9000c17 	ldw	r4,48(sp)
10005758:	1023883a 	mov	r17,r2
1000575c:	0102040e 	bge	zero,r4,10005f70 <_dtoa_r+0x1600>
10005760:	d9000615 	stw	r4,24(sp)
10005764:	0500050e 	bge	zero,r20,1000577c <_dtoa_r+0xe0c>
10005768:	880b883a 	mov	r5,r17
1000576c:	a00d883a 	mov	r6,r20
10005770:	e009883a 	mov	r4,fp
10005774:	0006c100 	call	10006c10 <__lshift>
10005778:	1023883a 	mov	r17,r2
1000577c:	9801241e 	bne	r19,zero,10005c10 <_dtoa_r+0x12a0>
10005780:	8829883a 	mov	r20,r17
10005784:	d9000617 	ldw	r4,24(sp)
10005788:	dcc00717 	ldw	r19,28(sp)
1000578c:	9480004c 	andi	r18,r18,1
10005790:	20bfffc4 	addi	r2,r4,-1
10005794:	9885883a 	add	r2,r19,r2
10005798:	d8800415 	stw	r2,16(sp)
1000579c:	dc800615 	stw	r18,24(sp)
100057a0:	a80b883a 	mov	r5,r21
100057a4:	8009883a 	mov	r4,r16
100057a8:	00047480 	call	10004748 <quorem>
100057ac:	880b883a 	mov	r5,r17
100057b0:	8009883a 	mov	r4,r16
100057b4:	102f883a 	mov	r23,r2
100057b8:	0006d580 	call	10006d58 <__mcmp>
100057bc:	a80b883a 	mov	r5,r21
100057c0:	a00d883a 	mov	r6,r20
100057c4:	e009883a 	mov	r4,fp
100057c8:	102d883a 	mov	r22,r2
100057cc:	0006db80 	call	10006db8 <__mdiff>
100057d0:	1007883a 	mov	r3,r2
100057d4:	10800317 	ldw	r2,12(r2)
100057d8:	bc800c04 	addi	r18,r23,48
100057dc:	180b883a 	mov	r5,r3
100057e0:	10004e1e 	bne	r2,zero,1000591c <_dtoa_r+0xfac>
100057e4:	8009883a 	mov	r4,r16
100057e8:	d8c01615 	stw	r3,88(sp)
100057ec:	0006d580 	call	10006d58 <__mcmp>
100057f0:	d8c01617 	ldw	r3,88(sp)
100057f4:	e009883a 	mov	r4,fp
100057f8:	d8801615 	stw	r2,88(sp)
100057fc:	180b883a 	mov	r5,r3
10005800:	000647c0 	call	1000647c <_Bfree>
10005804:	d8801617 	ldw	r2,88(sp)
10005808:	1000041e 	bne	r2,zero,1000581c <_dtoa_r+0xeac>
1000580c:	d9800317 	ldw	r6,12(sp)
10005810:	3000021e 	bne	r6,zero,1000581c <_dtoa_r+0xeac>
10005814:	d8c00617 	ldw	r3,24(sp)
10005818:	18003726 	beq	r3,zero,100058f8 <_dtoa_r+0xf88>
1000581c:	b0002016 	blt	r22,zero,100058a0 <_dtoa_r+0xf30>
10005820:	b000041e 	bne	r22,zero,10005834 <_dtoa_r+0xec4>
10005824:	d9000317 	ldw	r4,12(sp)
10005828:	2000021e 	bne	r4,zero,10005834 <_dtoa_r+0xec4>
1000582c:	d8c00617 	ldw	r3,24(sp)
10005830:	18001b26 	beq	r3,zero,100058a0 <_dtoa_r+0xf30>
10005834:	00810716 	blt	zero,r2,10005c54 <_dtoa_r+0x12e4>
10005838:	d8c00417 	ldw	r3,16(sp)
1000583c:	9d800044 	addi	r22,r19,1
10005840:	9c800005 	stb	r18,0(r19)
10005844:	b02f883a 	mov	r23,r22
10005848:	98c10626 	beq	r19,r3,10005c64 <_dtoa_r+0x12f4>
1000584c:	800b883a 	mov	r5,r16
10005850:	000f883a 	mov	r7,zero
10005854:	01800284 	movi	r6,10
10005858:	e009883a 	mov	r4,fp
1000585c:	00064a40 	call	100064a4 <__multadd>
10005860:	1021883a 	mov	r16,r2
10005864:	000f883a 	mov	r7,zero
10005868:	01800284 	movi	r6,10
1000586c:	880b883a 	mov	r5,r17
10005870:	e009883a 	mov	r4,fp
10005874:	8d002526 	beq	r17,r20,1000590c <_dtoa_r+0xf9c>
10005878:	00064a40 	call	100064a4 <__multadd>
1000587c:	a00b883a 	mov	r5,r20
10005880:	000f883a 	mov	r7,zero
10005884:	01800284 	movi	r6,10
10005888:	e009883a 	mov	r4,fp
1000588c:	1023883a 	mov	r17,r2
10005890:	00064a40 	call	100064a4 <__multadd>
10005894:	1029883a 	mov	r20,r2
10005898:	b027883a 	mov	r19,r22
1000589c:	003fc006 	br	100057a0 <__alt_data_end+0xf80057a0>
100058a0:	9011883a 	mov	r8,r18
100058a4:	00800e0e 	bge	zero,r2,100058e0 <_dtoa_r+0xf70>
100058a8:	800b883a 	mov	r5,r16
100058ac:	01800044 	movi	r6,1
100058b0:	e009883a 	mov	r4,fp
100058b4:	da001715 	stw	r8,92(sp)
100058b8:	0006c100 	call	10006c10 <__lshift>
100058bc:	a80b883a 	mov	r5,r21
100058c0:	1009883a 	mov	r4,r2
100058c4:	1021883a 	mov	r16,r2
100058c8:	0006d580 	call	10006d58 <__mcmp>
100058cc:	da001717 	ldw	r8,92(sp)
100058d0:	0081960e 	bge	zero,r2,10005f2c <_dtoa_r+0x15bc>
100058d4:	00800e44 	movi	r2,57
100058d8:	40817026 	beq	r8,r2,10005e9c <_dtoa_r+0x152c>
100058dc:	ba000c44 	addi	r8,r23,49
100058e0:	8825883a 	mov	r18,r17
100058e4:	9dc00044 	addi	r23,r19,1
100058e8:	9a000005 	stb	r8,0(r19)
100058ec:	a023883a 	mov	r17,r20
100058f0:	dc000915 	stw	r16,36(sp)
100058f4:	003f2406 	br	10005588 <__alt_data_end+0xf8005588>
100058f8:	00800e44 	movi	r2,57
100058fc:	9011883a 	mov	r8,r18
10005900:	90816626 	beq	r18,r2,10005e9c <_dtoa_r+0x152c>
10005904:	05bff516 	blt	zero,r22,100058dc <__alt_data_end+0xf80058dc>
10005908:	003ff506 	br	100058e0 <__alt_data_end+0xf80058e0>
1000590c:	00064a40 	call	100064a4 <__multadd>
10005910:	1023883a 	mov	r17,r2
10005914:	1029883a 	mov	r20,r2
10005918:	003fdf06 	br	10005898 <__alt_data_end+0xf8005898>
1000591c:	e009883a 	mov	r4,fp
10005920:	000647c0 	call	1000647c <_Bfree>
10005924:	00800044 	movi	r2,1
10005928:	003fbc06 	br	1000581c <__alt_data_end+0xf800581c>
1000592c:	a80b883a 	mov	r5,r21
10005930:	8009883a 	mov	r4,r16
10005934:	0006d580 	call	10006d58 <__mcmp>
10005938:	103edb0e 	bge	r2,zero,100054a8 <__alt_data_end+0xf80054a8>
1000593c:	800b883a 	mov	r5,r16
10005940:	000f883a 	mov	r7,zero
10005944:	01800284 	movi	r6,10
10005948:	e009883a 	mov	r4,fp
1000594c:	00064a40 	call	100064a4 <__multadd>
10005950:	1021883a 	mov	r16,r2
10005954:	d8800517 	ldw	r2,20(sp)
10005958:	d8c00b17 	ldw	r3,44(sp)
1000595c:	10bfffc4 	addi	r2,r2,-1
10005960:	d8800515 	stw	r2,20(sp)
10005964:	183f761e 	bne	r3,zero,10005740 <__alt_data_end+0xf8005740>
10005968:	d9000c17 	ldw	r4,48(sp)
1000596c:	0101730e 	bge	zero,r4,10005f3c <_dtoa_r+0x15cc>
10005970:	d9000615 	stw	r4,24(sp)
10005974:	003ed006 	br	100054b8 <__alt_data_end+0xf80054b8>
10005978:	00800084 	movi	r2,2
1000597c:	3081861e 	bne	r6,r2,10005f98 <_dtoa_r+0x1628>
10005980:	d8000b15 	stw	zero,44(sp)
10005984:	003f3c06 	br	10005678 <__alt_data_end+0xf8005678>
10005988:	dc000917 	ldw	r16,36(sp)
1000598c:	003e9206 	br	100053d8 <__alt_data_end+0xf80053d8>
10005990:	d9c00317 	ldw	r7,12(sp)
10005994:	00800084 	movi	r2,2
10005998:	11fec50e 	bge	r2,r7,100054b0 <__alt_data_end+0xf80054b0>
1000599c:	d9000617 	ldw	r4,24(sp)
100059a0:	20013c1e 	bne	r4,zero,10005e94 <_dtoa_r+0x1524>
100059a4:	a80b883a 	mov	r5,r21
100059a8:	000f883a 	mov	r7,zero
100059ac:	01800144 	movi	r6,5
100059b0:	e009883a 	mov	r4,fp
100059b4:	00064a40 	call	100064a4 <__multadd>
100059b8:	100b883a 	mov	r5,r2
100059bc:	8009883a 	mov	r4,r16
100059c0:	102b883a 	mov	r21,r2
100059c4:	0006d580 	call	10006d58 <__mcmp>
100059c8:	dc000915 	stw	r16,36(sp)
100059cc:	00bf410e 	bge	zero,r2,100056d4 <__alt_data_end+0xf80056d4>
100059d0:	d9c00717 	ldw	r7,28(sp)
100059d4:	00800c44 	movi	r2,49
100059d8:	38800005 	stb	r2,0(r7)
100059dc:	d8800517 	ldw	r2,20(sp)
100059e0:	3dc00044 	addi	r23,r7,1
100059e4:	10800044 	addi	r2,r2,1
100059e8:	d8800515 	stw	r2,20(sp)
100059ec:	003f3d06 	br	100056e4 <__alt_data_end+0xf80056e4>
100059f0:	d9800517 	ldw	r6,20(sp)
100059f4:	d9c00717 	ldw	r7,28(sp)
100059f8:	00800c44 	movi	r2,49
100059fc:	31800044 	addi	r6,r6,1
10005a00:	d9800515 	stw	r6,20(sp)
10005a04:	38800005 	stb	r2,0(r7)
10005a08:	003edf06 	br	10005588 <__alt_data_end+0xf8005588>
10005a0c:	d8000b15 	stw	zero,44(sp)
10005a10:	003c9f06 	br	10004c90 <__alt_data_end+0xf8004c90>
10005a14:	903e7e1e 	bne	r18,zero,10005410 <__alt_data_end+0xf8005410>
10005a18:	00800434 	movhi	r2,16
10005a1c:	10bfffc4 	addi	r2,r2,-1
10005a20:	9884703a 	and	r2,r19,r2
10005a24:	1000ea1e 	bne	r2,zero,10005dd0 <_dtoa_r+0x1460>
10005a28:	9cdffc2c 	andhi	r19,r19,32752
10005a2c:	9800e826 	beq	r19,zero,10005dd0 <_dtoa_r+0x1460>
10005a30:	d9c00817 	ldw	r7,32(sp)
10005a34:	b5800044 	addi	r22,r22,1
10005a38:	04c00044 	movi	r19,1
10005a3c:	39c00044 	addi	r7,r7,1
10005a40:	d9c00815 	stw	r7,32(sp)
10005a44:	d8800d17 	ldw	r2,52(sp)
10005a48:	103e721e 	bne	r2,zero,10005414 <__alt_data_end+0xf8005414>
10005a4c:	00800044 	movi	r2,1
10005a50:	003e7906 	br	10005438 <__alt_data_end+0xf8005438>
10005a54:	8009883a 	mov	r4,r16
10005a58:	000d8c40 	call	1000d8c4 <__floatsidf>
10005a5c:	d9800f17 	ldw	r6,60(sp)
10005a60:	d9c01017 	ldw	r7,64(sp)
10005a64:	1009883a 	mov	r4,r2
10005a68:	180b883a 	mov	r5,r3
10005a6c:	000c6dc0 	call	1000c6dc <__muldf3>
10005a70:	000d883a 	mov	r6,zero
10005a74:	01d00734 	movhi	r7,16412
10005a78:	1009883a 	mov	r4,r2
10005a7c:	180b883a 	mov	r5,r3
10005a80:	000b2080 	call	1000b208 <__adddf3>
10005a84:	047f3034 	movhi	r17,64704
10005a88:	1021883a 	mov	r16,r2
10005a8c:	1c63883a 	add	r17,r3,r17
10005a90:	d9000f17 	ldw	r4,60(sp)
10005a94:	d9401017 	ldw	r5,64(sp)
10005a98:	000d883a 	mov	r6,zero
10005a9c:	01d00534 	movhi	r7,16404
10005aa0:	000cf480 	call	1000cf48 <__subdf3>
10005aa4:	800d883a 	mov	r6,r16
10005aa8:	880f883a 	mov	r7,r17
10005aac:	1009883a 	mov	r4,r2
10005ab0:	180b883a 	mov	r5,r3
10005ab4:	102b883a 	mov	r21,r2
10005ab8:	1829883a 	mov	r20,r3
10005abc:	000c50c0 	call	1000c50c <__gedf2>
10005ac0:	00806c16 	blt	zero,r2,10005c74 <_dtoa_r+0x1304>
10005ac4:	89e0003c 	xorhi	r7,r17,32768
10005ac8:	800d883a 	mov	r6,r16
10005acc:	a809883a 	mov	r4,r21
10005ad0:	a00b883a 	mov	r5,r20
10005ad4:	000c5e80 	call	1000c5e8 <__ledf2>
10005ad8:	103d7e0e 	bge	r2,zero,100050d4 <__alt_data_end+0xf80050d4>
10005adc:	002b883a 	mov	r21,zero
10005ae0:	0023883a 	mov	r17,zero
10005ae4:	003efb06 	br	100056d4 <__alt_data_end+0xf80056d4>
10005ae8:	d8800717 	ldw	r2,28(sp)
10005aec:	003bd006 	br	10004a30 <__alt_data_end+0xf8004a30>
10005af0:	d9000a17 	ldw	r4,40(sp)
10005af4:	d9800d17 	ldw	r6,52(sp)
10005af8:	dd400a15 	stw	r21,40(sp)
10005afc:	a905c83a 	sub	r2,r21,r4
10005b00:	308d883a 	add	r6,r6,r2
10005b04:	d9800d15 	stw	r6,52(sp)
10005b08:	002b883a 	mov	r21,zero
10005b0c:	003e0606 	br	10005328 <__alt_data_end+0xf8005328>
10005b10:	9023883a 	mov	r17,r18
10005b14:	9829883a 	mov	r20,r19
10005b18:	04000084 	movi	r16,2
10005b1c:	003c9206 	br	10004d68 <__alt_data_end+0xf8004d68>
10005b20:	04000044 	movi	r16,1
10005b24:	dc000c15 	stw	r16,48(sp)
10005b28:	dc000615 	stw	r16,24(sp)
10005b2c:	dc002215 	stw	r16,136(sp)
10005b30:	e0001115 	stw	zero,68(fp)
10005b34:	000b883a 	mov	r5,zero
10005b38:	003c6906 	br	10004ce0 <__alt_data_end+0xf8004ce0>
10005b3c:	3021883a 	mov	r16,r6
10005b40:	003ffb06 	br	10005b30 <__alt_data_end+0xf8005b30>
10005b44:	1000021e 	bne	r2,zero,10005b50 <_dtoa_r+0x11e0>
10005b48:	4200004c 	andi	r8,r8,1
10005b4c:	403e7d1e 	bne	r8,zero,10005544 <__alt_data_end+0xf8005544>
10005b50:	01000c04 	movi	r4,48
10005b54:	00000106 	br	10005b5c <_dtoa_r+0x11ec>
10005b58:	102f883a 	mov	r23,r2
10005b5c:	b8bfffc4 	addi	r2,r23,-1
10005b60:	10c00007 	ldb	r3,0(r2)
10005b64:	193ffc26 	beq	r3,r4,10005b58 <__alt_data_end+0xf8005b58>
10005b68:	003e8706 	br	10005588 <__alt_data_end+0xf8005588>
10005b6c:	d8800517 	ldw	r2,20(sp)
10005b70:	00a3c83a 	sub	r17,zero,r2
10005b74:	8800a426 	beq	r17,zero,10005e08 <_dtoa_r+0x1498>
10005b78:	888003cc 	andi	r2,r17,15
10005b7c:	100490fa 	slli	r2,r2,3
10005b80:	00c40074 	movhi	r3,4097
10005b84:	18c0d404 	addi	r3,r3,848
10005b88:	1885883a 	add	r2,r3,r2
10005b8c:	11800017 	ldw	r6,0(r2)
10005b90:	11c00117 	ldw	r7,4(r2)
10005b94:	9009883a 	mov	r4,r18
10005b98:	980b883a 	mov	r5,r19
10005b9c:	8823d13a 	srai	r17,r17,4
10005ba0:	000c6dc0 	call	1000c6dc <__muldf3>
10005ba4:	d8800f15 	stw	r2,60(sp)
10005ba8:	d8c01015 	stw	r3,64(sp)
10005bac:	8800e826 	beq	r17,zero,10005f50 <_dtoa_r+0x15e0>
10005bb0:	05040074 	movhi	r20,4097
10005bb4:	a500ca04 	addi	r20,r20,808
10005bb8:	04000084 	movi	r16,2
10005bbc:	8980004c 	andi	r6,r17,1
10005bc0:	1009883a 	mov	r4,r2
10005bc4:	8823d07a 	srai	r17,r17,1
10005bc8:	180b883a 	mov	r5,r3
10005bcc:	30000426 	beq	r6,zero,10005be0 <_dtoa_r+0x1270>
10005bd0:	a1800017 	ldw	r6,0(r20)
10005bd4:	a1c00117 	ldw	r7,4(r20)
10005bd8:	84000044 	addi	r16,r16,1
10005bdc:	000c6dc0 	call	1000c6dc <__muldf3>
10005be0:	a5000204 	addi	r20,r20,8
10005be4:	883ff51e 	bne	r17,zero,10005bbc <__alt_data_end+0xf8005bbc>
10005be8:	d8800f15 	stw	r2,60(sp)
10005bec:	d8c01015 	stw	r3,64(sp)
10005bf0:	003c7606 	br	10004dcc <__alt_data_end+0xf8004dcc>
10005bf4:	00c00c04 	movi	r3,48
10005bf8:	10c00005 	stb	r3,0(r2)
10005bfc:	d8c00517 	ldw	r3,20(sp)
10005c00:	bd3fffc3 	ldbu	r20,-1(r23)
10005c04:	18c00044 	addi	r3,r3,1
10005c08:	d8c00515 	stw	r3,20(sp)
10005c0c:	003db906 	br	100052f4 <__alt_data_end+0xf80052f4>
10005c10:	89400117 	ldw	r5,4(r17)
10005c14:	e009883a 	mov	r4,fp
10005c18:	00063d40 	call	100063d4 <_Balloc>
10005c1c:	89800417 	ldw	r6,16(r17)
10005c20:	89400304 	addi	r5,r17,12
10005c24:	11000304 	addi	r4,r2,12
10005c28:	31800084 	addi	r6,r6,2
10005c2c:	318d883a 	add	r6,r6,r6
10005c30:	318d883a 	add	r6,r6,r6
10005c34:	1027883a 	mov	r19,r2
10005c38:	0001cd00 	call	10001cd0 <memcpy>
10005c3c:	01800044 	movi	r6,1
10005c40:	980b883a 	mov	r5,r19
10005c44:	e009883a 	mov	r4,fp
10005c48:	0006c100 	call	10006c10 <__lshift>
10005c4c:	1029883a 	mov	r20,r2
10005c50:	003ecc06 	br	10005784 <__alt_data_end+0xf8005784>
10005c54:	00800e44 	movi	r2,57
10005c58:	90809026 	beq	r18,r2,10005e9c <_dtoa_r+0x152c>
10005c5c:	92000044 	addi	r8,r18,1
10005c60:	003f1f06 	br	100058e0 <__alt_data_end+0xf80058e0>
10005c64:	9011883a 	mov	r8,r18
10005c68:	8825883a 	mov	r18,r17
10005c6c:	a023883a 	mov	r17,r20
10005c70:	003e2906 	br	10005518 <__alt_data_end+0xf8005518>
10005c74:	002b883a 	mov	r21,zero
10005c78:	0023883a 	mov	r17,zero
10005c7c:	003f5406 	br	100059d0 <__alt_data_end+0xf80059d0>
10005c80:	61bfffc4 	addi	r6,r12,-1
10005c84:	300490fa 	slli	r2,r6,3
10005c88:	00c40074 	movhi	r3,4097
10005c8c:	18c0d404 	addi	r3,r3,848
10005c90:	1885883a 	add	r2,r3,r2
10005c94:	11000017 	ldw	r4,0(r2)
10005c98:	11400117 	ldw	r5,4(r2)
10005c9c:	d8800717 	ldw	r2,28(sp)
10005ca0:	880f883a 	mov	r7,r17
10005ca4:	d9801215 	stw	r6,72(sp)
10005ca8:	800d883a 	mov	r6,r16
10005cac:	db001615 	stw	r12,88(sp)
10005cb0:	15c00044 	addi	r23,r2,1
10005cb4:	000c6dc0 	call	1000c6dc <__muldf3>
10005cb8:	d9401017 	ldw	r5,64(sp)
10005cbc:	d9000f17 	ldw	r4,60(sp)
10005cc0:	d8c01515 	stw	r3,84(sp)
10005cc4:	d8801415 	stw	r2,80(sp)
10005cc8:	000d8440 	call	1000d844 <__fixdfsi>
10005ccc:	1009883a 	mov	r4,r2
10005cd0:	1021883a 	mov	r16,r2
10005cd4:	000d8c40 	call	1000d8c4 <__floatsidf>
10005cd8:	d9000f17 	ldw	r4,60(sp)
10005cdc:	d9401017 	ldw	r5,64(sp)
10005ce0:	100d883a 	mov	r6,r2
10005ce4:	180f883a 	mov	r7,r3
10005ce8:	000cf480 	call	1000cf48 <__subdf3>
10005cec:	1829883a 	mov	r20,r3
10005cf0:	d8c00717 	ldw	r3,28(sp)
10005cf4:	84000c04 	addi	r16,r16,48
10005cf8:	1023883a 	mov	r17,r2
10005cfc:	1c000005 	stb	r16,0(r3)
10005d00:	db001617 	ldw	r12,88(sp)
10005d04:	00800044 	movi	r2,1
10005d08:	60802226 	beq	r12,r2,10005d94 <_dtoa_r+0x1424>
10005d0c:	d9c00717 	ldw	r7,28(sp)
10005d10:	8805883a 	mov	r2,r17
10005d14:	b82b883a 	mov	r21,r23
10005d18:	3b19883a 	add	r12,r7,r12
10005d1c:	6023883a 	mov	r17,r12
10005d20:	a007883a 	mov	r3,r20
10005d24:	dc800f15 	stw	r18,60(sp)
10005d28:	000d883a 	mov	r6,zero
10005d2c:	01d00934 	movhi	r7,16420
10005d30:	1009883a 	mov	r4,r2
10005d34:	180b883a 	mov	r5,r3
10005d38:	000c6dc0 	call	1000c6dc <__muldf3>
10005d3c:	180b883a 	mov	r5,r3
10005d40:	1009883a 	mov	r4,r2
10005d44:	1829883a 	mov	r20,r3
10005d48:	1025883a 	mov	r18,r2
10005d4c:	000d8440 	call	1000d844 <__fixdfsi>
10005d50:	1009883a 	mov	r4,r2
10005d54:	1021883a 	mov	r16,r2
10005d58:	000d8c40 	call	1000d8c4 <__floatsidf>
10005d5c:	100d883a 	mov	r6,r2
10005d60:	180f883a 	mov	r7,r3
10005d64:	9009883a 	mov	r4,r18
10005d68:	a00b883a 	mov	r5,r20
10005d6c:	84000c04 	addi	r16,r16,48
10005d70:	000cf480 	call	1000cf48 <__subdf3>
10005d74:	ad400044 	addi	r21,r21,1
10005d78:	ac3fffc5 	stb	r16,-1(r21)
10005d7c:	ac7fea1e 	bne	r21,r17,10005d28 <__alt_data_end+0xf8005d28>
10005d80:	1023883a 	mov	r17,r2
10005d84:	d8801217 	ldw	r2,72(sp)
10005d88:	dc800f17 	ldw	r18,60(sp)
10005d8c:	1829883a 	mov	r20,r3
10005d90:	b8af883a 	add	r23,r23,r2
10005d94:	d9001417 	ldw	r4,80(sp)
10005d98:	d9401517 	ldw	r5,84(sp)
10005d9c:	000d883a 	mov	r6,zero
10005da0:	01cff834 	movhi	r7,16352
10005da4:	000b2080 	call	1000b208 <__adddf3>
10005da8:	880d883a 	mov	r6,r17
10005dac:	a00f883a 	mov	r7,r20
10005db0:	1009883a 	mov	r4,r2
10005db4:	180b883a 	mov	r5,r3
10005db8:	000c5e80 	call	1000c5e8 <__ledf2>
10005dbc:	10003e0e 	bge	r2,zero,10005eb8 <_dtoa_r+0x1548>
10005dc0:	d9001317 	ldw	r4,76(sp)
10005dc4:	bd3fffc3 	ldbu	r20,-1(r23)
10005dc8:	d9000515 	stw	r4,20(sp)
10005dcc:	003d3b06 	br	100052bc <__alt_data_end+0xf80052bc>
10005dd0:	0027883a 	mov	r19,zero
10005dd4:	003f1b06 	br	10005a44 <__alt_data_end+0xf8005a44>
10005dd8:	d8800817 	ldw	r2,32(sp)
10005ddc:	11e9c83a 	sub	r20,r2,r7
10005de0:	0005883a 	mov	r2,zero
10005de4:	003d5406 	br	10005338 <__alt_data_end+0xf8005338>
10005de8:	00800044 	movi	r2,1
10005dec:	003dc706 	br	1000550c <__alt_data_end+0xf800550c>
10005df0:	d8c00217 	ldw	r3,8(sp)
10005df4:	00800d84 	movi	r2,54
10005df8:	dd400a17 	ldw	r21,40(sp)
10005dfc:	10c5c83a 	sub	r2,r2,r3
10005e00:	dd000817 	ldw	r20,32(sp)
10005e04:	003d4c06 	br	10005338 <__alt_data_end+0xf8005338>
10005e08:	dc800f15 	stw	r18,60(sp)
10005e0c:	dcc01015 	stw	r19,64(sp)
10005e10:	04000084 	movi	r16,2
10005e14:	003bed06 	br	10004dcc <__alt_data_end+0xf8004dcc>
10005e18:	d9000617 	ldw	r4,24(sp)
10005e1c:	203f0d26 	beq	r4,zero,10005a54 <__alt_data_end+0xf8005a54>
10005e20:	d9800c17 	ldw	r6,48(sp)
10005e24:	01bcab0e 	bge	zero,r6,100050d4 <__alt_data_end+0xf80050d4>
10005e28:	d9401017 	ldw	r5,64(sp)
10005e2c:	d9000f17 	ldw	r4,60(sp)
10005e30:	000d883a 	mov	r6,zero
10005e34:	01d00934 	movhi	r7,16420
10005e38:	000c6dc0 	call	1000c6dc <__muldf3>
10005e3c:	81000044 	addi	r4,r16,1
10005e40:	d8800f15 	stw	r2,60(sp)
10005e44:	d8c01015 	stw	r3,64(sp)
10005e48:	000d8c40 	call	1000d8c4 <__floatsidf>
10005e4c:	d9800f17 	ldw	r6,60(sp)
10005e50:	d9c01017 	ldw	r7,64(sp)
10005e54:	1009883a 	mov	r4,r2
10005e58:	180b883a 	mov	r5,r3
10005e5c:	000c6dc0 	call	1000c6dc <__muldf3>
10005e60:	01d00734 	movhi	r7,16412
10005e64:	000d883a 	mov	r6,zero
10005e68:	1009883a 	mov	r4,r2
10005e6c:	180b883a 	mov	r5,r3
10005e70:	000b2080 	call	1000b208 <__adddf3>
10005e74:	d9c00517 	ldw	r7,20(sp)
10005e78:	047f3034 	movhi	r17,64704
10005e7c:	1021883a 	mov	r16,r2
10005e80:	39ffffc4 	addi	r7,r7,-1
10005e84:	d9c01315 	stw	r7,76(sp)
10005e88:	1c63883a 	add	r17,r3,r17
10005e8c:	db000c17 	ldw	r12,48(sp)
10005e90:	003bea06 	br	10004e3c <__alt_data_end+0xf8004e3c>
10005e94:	dc000915 	stw	r16,36(sp)
10005e98:	003e0e06 	br	100056d4 <__alt_data_end+0xf80056d4>
10005e9c:	01000e44 	movi	r4,57
10005ea0:	8825883a 	mov	r18,r17
10005ea4:	9dc00044 	addi	r23,r19,1
10005ea8:	99000005 	stb	r4,0(r19)
10005eac:	a023883a 	mov	r17,r20
10005eb0:	dc000915 	stw	r16,36(sp)
10005eb4:	003da406 	br	10005548 <__alt_data_end+0xf8005548>
10005eb8:	d9801417 	ldw	r6,80(sp)
10005ebc:	d9c01517 	ldw	r7,84(sp)
10005ec0:	0009883a 	mov	r4,zero
10005ec4:	014ff834 	movhi	r5,16352
10005ec8:	000cf480 	call	1000cf48 <__subdf3>
10005ecc:	880d883a 	mov	r6,r17
10005ed0:	a00f883a 	mov	r7,r20
10005ed4:	1009883a 	mov	r4,r2
10005ed8:	180b883a 	mov	r5,r3
10005edc:	000c50c0 	call	1000c50c <__gedf2>
10005ee0:	00bc7c0e 	bge	zero,r2,100050d4 <__alt_data_end+0xf80050d4>
10005ee4:	01000c04 	movi	r4,48
10005ee8:	00000106 	br	10005ef0 <_dtoa_r+0x1580>
10005eec:	102f883a 	mov	r23,r2
10005ef0:	b8bfffc4 	addi	r2,r23,-1
10005ef4:	10c00007 	ldb	r3,0(r2)
10005ef8:	193ffc26 	beq	r3,r4,10005eec <__alt_data_end+0xf8005eec>
10005efc:	d9801317 	ldw	r6,76(sp)
10005f00:	d9800515 	stw	r6,20(sp)
10005f04:	003c4406 	br	10005018 <__alt_data_end+0xf8005018>
10005f08:	d9801317 	ldw	r6,76(sp)
10005f0c:	d9800515 	stw	r6,20(sp)
10005f10:	003cea06 	br	100052bc <__alt_data_end+0xf80052bc>
10005f14:	dd800f17 	ldw	r22,60(sp)
10005f18:	dcc01017 	ldw	r19,64(sp)
10005f1c:	dc801217 	ldw	r18,72(sp)
10005f20:	003c6c06 	br	100050d4 <__alt_data_end+0xf80050d4>
10005f24:	903e031e 	bne	r18,zero,10005734 <__alt_data_end+0xf8005734>
10005f28:	003ebb06 	br	10005a18 <__alt_data_end+0xf8005a18>
10005f2c:	103e6c1e 	bne	r2,zero,100058e0 <__alt_data_end+0xf80058e0>
10005f30:	4080004c 	andi	r2,r8,1
10005f34:	103e6a26 	beq	r2,zero,100058e0 <__alt_data_end+0xf80058e0>
10005f38:	003e6606 	br	100058d4 <__alt_data_end+0xf80058d4>
10005f3c:	d8c00317 	ldw	r3,12(sp)
10005f40:	00800084 	movi	r2,2
10005f44:	10c02916 	blt	r2,r3,10005fec <_dtoa_r+0x167c>
10005f48:	d9000c17 	ldw	r4,48(sp)
10005f4c:	003e8806 	br	10005970 <__alt_data_end+0xf8005970>
10005f50:	04000084 	movi	r16,2
10005f54:	003b9d06 	br	10004dcc <__alt_data_end+0xf8004dcc>
10005f58:	d9001317 	ldw	r4,76(sp)
10005f5c:	d9000515 	stw	r4,20(sp)
10005f60:	003cd606 	br	100052bc <__alt_data_end+0xf80052bc>
10005f64:	d8801317 	ldw	r2,76(sp)
10005f68:	d8800515 	stw	r2,20(sp)
10005f6c:	003c2a06 	br	10005018 <__alt_data_end+0xf8005018>
10005f70:	d9800317 	ldw	r6,12(sp)
10005f74:	00800084 	movi	r2,2
10005f78:	11801516 	blt	r2,r6,10005fd0 <_dtoa_r+0x1660>
10005f7c:	d9c00c17 	ldw	r7,48(sp)
10005f80:	d9c00615 	stw	r7,24(sp)
10005f84:	003df706 	br	10005764 <__alt_data_end+0xf8005764>
10005f88:	193d3926 	beq	r3,r4,10005470 <__alt_data_end+0xf8005470>
10005f8c:	00c00f04 	movi	r3,60
10005f90:	1885c83a 	sub	r2,r3,r2
10005f94:	003ddf06 	br	10005714 <__alt_data_end+0xf8005714>
10005f98:	e009883a 	mov	r4,fp
10005f9c:	e0001115 	stw	zero,68(fp)
10005fa0:	000b883a 	mov	r5,zero
10005fa4:	00063d40 	call	100063d4 <_Balloc>
10005fa8:	d8800715 	stw	r2,28(sp)
10005fac:	d8c00717 	ldw	r3,28(sp)
10005fb0:	00bfffc4 	movi	r2,-1
10005fb4:	01000044 	movi	r4,1
10005fb8:	d8800c15 	stw	r2,48(sp)
10005fbc:	e0c01015 	stw	r3,64(fp)
10005fc0:	d9000b15 	stw	r4,44(sp)
10005fc4:	d8800615 	stw	r2,24(sp)
10005fc8:	d8002215 	stw	zero,136(sp)
10005fcc:	003c4106 	br	100050d4 <__alt_data_end+0xf80050d4>
10005fd0:	d8c00c17 	ldw	r3,48(sp)
10005fd4:	d8c00615 	stw	r3,24(sp)
10005fd8:	003e7006 	br	1000599c <__alt_data_end+0xf800599c>
10005fdc:	04400044 	movi	r17,1
10005fe0:	003b2006 	br	10004c64 <__alt_data_end+0xf8004c64>
10005fe4:	000b883a 	mov	r5,zero
10005fe8:	003b3d06 	br	10004ce0 <__alt_data_end+0xf8004ce0>
10005fec:	d8800c17 	ldw	r2,48(sp)
10005ff0:	d8800615 	stw	r2,24(sp)
10005ff4:	003e6906 	br	1000599c <__alt_data_end+0xf800599c>

10005ff8 <_setlocale_r>:
10005ff8:	30001b26 	beq	r6,zero,10006068 <_setlocale_r+0x70>
10005ffc:	01440074 	movhi	r5,4097
10006000:	defffe04 	addi	sp,sp,-8
10006004:	2940ba04 	addi	r5,r5,744
10006008:	3009883a 	mov	r4,r6
1000600c:	dc000015 	stw	r16,0(sp)
10006010:	dfc00115 	stw	ra,4(sp)
10006014:	3021883a 	mov	r16,r6
10006018:	00079cc0 	call	100079cc <strcmp>
1000601c:	1000061e 	bne	r2,zero,10006038 <_setlocale_r+0x40>
10006020:	00840074 	movhi	r2,4097
10006024:	10809c04 	addi	r2,r2,624
10006028:	dfc00117 	ldw	ra,4(sp)
1000602c:	dc000017 	ldw	r16,0(sp)
10006030:	dec00204 	addi	sp,sp,8
10006034:	f800283a 	ret
10006038:	01440074 	movhi	r5,4097
1000603c:	29409c04 	addi	r5,r5,624
10006040:	8009883a 	mov	r4,r16
10006044:	00079cc0 	call	100079cc <strcmp>
10006048:	103ff526 	beq	r2,zero,10006020 <__alt_data_end+0xf8006020>
1000604c:	01440074 	movhi	r5,4097
10006050:	29408f04 	addi	r5,r5,572
10006054:	8009883a 	mov	r4,r16
10006058:	00079cc0 	call	100079cc <strcmp>
1000605c:	103ff026 	beq	r2,zero,10006020 <__alt_data_end+0xf8006020>
10006060:	0005883a 	mov	r2,zero
10006064:	003ff006 	br	10006028 <__alt_data_end+0xf8006028>
10006068:	00840074 	movhi	r2,4097
1000606c:	10809c04 	addi	r2,r2,624
10006070:	f800283a 	ret

10006074 <__locale_charset>:
10006074:	00840074 	movhi	r2,4097
10006078:	10836e04 	addi	r2,r2,3512
1000607c:	f800283a 	ret

10006080 <__locale_mb_cur_max>:
10006080:	00840074 	movhi	r2,4097
10006084:	10880d04 	addi	r2,r2,8244
10006088:	10800017 	ldw	r2,0(r2)
1000608c:	f800283a 	ret

10006090 <__locale_msgcharset>:
10006090:	00840074 	movhi	r2,4097
10006094:	10836604 	addi	r2,r2,3480
10006098:	f800283a 	ret

1000609c <__locale_cjk_lang>:
1000609c:	0005883a 	mov	r2,zero
100060a0:	f800283a 	ret

100060a4 <_localeconv_r>:
100060a4:	00840074 	movhi	r2,4097
100060a8:	10837604 	addi	r2,r2,3544
100060ac:	f800283a 	ret

100060b0 <setlocale>:
100060b0:	00840074 	movhi	r2,4097
100060b4:	10880a04 	addi	r2,r2,8232
100060b8:	280d883a 	mov	r6,r5
100060bc:	200b883a 	mov	r5,r4
100060c0:	11000017 	ldw	r4,0(r2)
100060c4:	0005ff81 	jmpi	10005ff8 <_setlocale_r>

100060c8 <localeconv>:
100060c8:	00840074 	movhi	r2,4097
100060cc:	10837604 	addi	r2,r2,3544
100060d0:	f800283a 	ret

100060d4 <_lseek_r>:
100060d4:	defffd04 	addi	sp,sp,-12
100060d8:	2805883a 	mov	r2,r5
100060dc:	dc000015 	stw	r16,0(sp)
100060e0:	04040074 	movhi	r16,4097
100060e4:	dc400115 	stw	r17,4(sp)
100060e8:	300b883a 	mov	r5,r6
100060ec:	840edb04 	addi	r16,r16,15212
100060f0:	2023883a 	mov	r17,r4
100060f4:	380d883a 	mov	r6,r7
100060f8:	1009883a 	mov	r4,r2
100060fc:	dfc00215 	stw	ra,8(sp)
10006100:	80000015 	stw	zero,0(r16)
10006104:	000e0b00 	call	1000e0b0 <lseek>
10006108:	00ffffc4 	movi	r3,-1
1000610c:	10c00526 	beq	r2,r3,10006124 <_lseek_r+0x50>
10006110:	dfc00217 	ldw	ra,8(sp)
10006114:	dc400117 	ldw	r17,4(sp)
10006118:	dc000017 	ldw	r16,0(sp)
1000611c:	dec00304 	addi	sp,sp,12
10006120:	f800283a 	ret
10006124:	80c00017 	ldw	r3,0(r16)
10006128:	183ff926 	beq	r3,zero,10006110 <__alt_data_end+0xf8006110>
1000612c:	88c00015 	stw	r3,0(r17)
10006130:	003ff706 	br	10006110 <__alt_data_end+0xf8006110>

10006134 <__smakebuf_r>:
10006134:	2880030b 	ldhu	r2,12(r5)
10006138:	10c0008c 	andi	r3,r2,2
1000613c:	1800411e 	bne	r3,zero,10006244 <__smakebuf_r+0x110>
10006140:	deffec04 	addi	sp,sp,-80
10006144:	dc000f15 	stw	r16,60(sp)
10006148:	2821883a 	mov	r16,r5
1000614c:	2940038f 	ldh	r5,14(r5)
10006150:	dc401015 	stw	r17,64(sp)
10006154:	dfc01315 	stw	ra,76(sp)
10006158:	dcc01215 	stw	r19,72(sp)
1000615c:	dc801115 	stw	r18,68(sp)
10006160:	2023883a 	mov	r17,r4
10006164:	28001c16 	blt	r5,zero,100061d8 <__smakebuf_r+0xa4>
10006168:	d80d883a 	mov	r6,sp
1000616c:	00096740 	call	10009674 <_fstat_r>
10006170:	10001816 	blt	r2,zero,100061d4 <__smakebuf_r+0xa0>
10006174:	d8800117 	ldw	r2,4(sp)
10006178:	00e00014 	movui	r3,32768
1000617c:	10bc000c 	andi	r2,r2,61440
10006180:	14c80020 	cmpeqi	r19,r2,8192
10006184:	10c03726 	beq	r2,r3,10006264 <__smakebuf_r+0x130>
10006188:	80c0030b 	ldhu	r3,12(r16)
1000618c:	18c20014 	ori	r3,r3,2048
10006190:	80c0030d 	sth	r3,12(r16)
10006194:	00c80004 	movi	r3,8192
10006198:	10c0521e 	bne	r2,r3,100062e4 <__smakebuf_r+0x1b0>
1000619c:	8140038f 	ldh	r5,14(r16)
100061a0:	8809883a 	mov	r4,r17
100061a4:	0009b980 	call	10009b98 <_isatty_r>
100061a8:	10004c26 	beq	r2,zero,100062dc <__smakebuf_r+0x1a8>
100061ac:	8080030b 	ldhu	r2,12(r16)
100061b0:	80c010c4 	addi	r3,r16,67
100061b4:	80c00015 	stw	r3,0(r16)
100061b8:	10800054 	ori	r2,r2,1
100061bc:	8080030d 	sth	r2,12(r16)
100061c0:	00800044 	movi	r2,1
100061c4:	80c00415 	stw	r3,16(r16)
100061c8:	80800515 	stw	r2,20(r16)
100061cc:	04810004 	movi	r18,1024
100061d0:	00000706 	br	100061f0 <__smakebuf_r+0xbc>
100061d4:	8080030b 	ldhu	r2,12(r16)
100061d8:	10c0200c 	andi	r3,r2,128
100061dc:	18001f1e 	bne	r3,zero,1000625c <__smakebuf_r+0x128>
100061e0:	04810004 	movi	r18,1024
100061e4:	10820014 	ori	r2,r2,2048
100061e8:	8080030d 	sth	r2,12(r16)
100061ec:	0027883a 	mov	r19,zero
100061f0:	900b883a 	mov	r5,r18
100061f4:	8809883a 	mov	r4,r17
100061f8:	00014c40 	call	100014c4 <_malloc_r>
100061fc:	10002c26 	beq	r2,zero,100062b0 <__smakebuf_r+0x17c>
10006200:	80c0030b 	ldhu	r3,12(r16)
10006204:	01040034 	movhi	r4,4096
10006208:	2102b704 	addi	r4,r4,2780
1000620c:	89000f15 	stw	r4,60(r17)
10006210:	18c02014 	ori	r3,r3,128
10006214:	80c0030d 	sth	r3,12(r16)
10006218:	80800015 	stw	r2,0(r16)
1000621c:	80800415 	stw	r2,16(r16)
10006220:	84800515 	stw	r18,20(r16)
10006224:	98001a1e 	bne	r19,zero,10006290 <__smakebuf_r+0x15c>
10006228:	dfc01317 	ldw	ra,76(sp)
1000622c:	dcc01217 	ldw	r19,72(sp)
10006230:	dc801117 	ldw	r18,68(sp)
10006234:	dc401017 	ldw	r17,64(sp)
10006238:	dc000f17 	ldw	r16,60(sp)
1000623c:	dec01404 	addi	sp,sp,80
10006240:	f800283a 	ret
10006244:	288010c4 	addi	r2,r5,67
10006248:	28800015 	stw	r2,0(r5)
1000624c:	28800415 	stw	r2,16(r5)
10006250:	00800044 	movi	r2,1
10006254:	28800515 	stw	r2,20(r5)
10006258:	f800283a 	ret
1000625c:	04801004 	movi	r18,64
10006260:	003fe006 	br	100061e4 <__alt_data_end+0xf80061e4>
10006264:	81000a17 	ldw	r4,40(r16)
10006268:	00c40034 	movhi	r3,4096
1000626c:	18c83e04 	addi	r3,r3,8440
10006270:	20ffc51e 	bne	r4,r3,10006188 <__alt_data_end+0xf8006188>
10006274:	8080030b 	ldhu	r2,12(r16)
10006278:	04810004 	movi	r18,1024
1000627c:	84801315 	stw	r18,76(r16)
10006280:	1484b03a 	or	r2,r2,r18
10006284:	8080030d 	sth	r2,12(r16)
10006288:	0027883a 	mov	r19,zero
1000628c:	003fd806 	br	100061f0 <__alt_data_end+0xf80061f0>
10006290:	8140038f 	ldh	r5,14(r16)
10006294:	8809883a 	mov	r4,r17
10006298:	0009b980 	call	10009b98 <_isatty_r>
1000629c:	103fe226 	beq	r2,zero,10006228 <__alt_data_end+0xf8006228>
100062a0:	8080030b 	ldhu	r2,12(r16)
100062a4:	10800054 	ori	r2,r2,1
100062a8:	8080030d 	sth	r2,12(r16)
100062ac:	003fde06 	br	10006228 <__alt_data_end+0xf8006228>
100062b0:	8080030b 	ldhu	r2,12(r16)
100062b4:	10c0800c 	andi	r3,r2,512
100062b8:	183fdb1e 	bne	r3,zero,10006228 <__alt_data_end+0xf8006228>
100062bc:	10800094 	ori	r2,r2,2
100062c0:	80c010c4 	addi	r3,r16,67
100062c4:	8080030d 	sth	r2,12(r16)
100062c8:	00800044 	movi	r2,1
100062cc:	80c00015 	stw	r3,0(r16)
100062d0:	80c00415 	stw	r3,16(r16)
100062d4:	80800515 	stw	r2,20(r16)
100062d8:	003fd306 	br	10006228 <__alt_data_end+0xf8006228>
100062dc:	04810004 	movi	r18,1024
100062e0:	003fc306 	br	100061f0 <__alt_data_end+0xf80061f0>
100062e4:	0027883a 	mov	r19,zero
100062e8:	04810004 	movi	r18,1024
100062ec:	003fc006 	br	100061f0 <__alt_data_end+0xf80061f0>

100062f0 <memchr>:
100062f0:	208000cc 	andi	r2,r4,3
100062f4:	280f883a 	mov	r7,r5
100062f8:	10003426 	beq	r2,zero,100063cc <memchr+0xdc>
100062fc:	30bfffc4 	addi	r2,r6,-1
10006300:	30001a26 	beq	r6,zero,1000636c <memchr+0x7c>
10006304:	20c00003 	ldbu	r3,0(r4)
10006308:	29803fcc 	andi	r6,r5,255
1000630c:	30c0051e 	bne	r6,r3,10006324 <memchr+0x34>
10006310:	00001806 	br	10006374 <memchr+0x84>
10006314:	10001526 	beq	r2,zero,1000636c <memchr+0x7c>
10006318:	20c00003 	ldbu	r3,0(r4)
1000631c:	10bfffc4 	addi	r2,r2,-1
10006320:	30c01426 	beq	r6,r3,10006374 <memchr+0x84>
10006324:	21000044 	addi	r4,r4,1
10006328:	20c000cc 	andi	r3,r4,3
1000632c:	183ff91e 	bne	r3,zero,10006314 <__alt_data_end+0xf8006314>
10006330:	020000c4 	movi	r8,3
10006334:	40801136 	bltu	r8,r2,1000637c <memchr+0x8c>
10006338:	10000c26 	beq	r2,zero,1000636c <memchr+0x7c>
1000633c:	20c00003 	ldbu	r3,0(r4)
10006340:	29403fcc 	andi	r5,r5,255
10006344:	28c00b26 	beq	r5,r3,10006374 <memchr+0x84>
10006348:	20c00044 	addi	r3,r4,1
1000634c:	39803fcc 	andi	r6,r7,255
10006350:	2089883a 	add	r4,r4,r2
10006354:	00000306 	br	10006364 <memchr+0x74>
10006358:	18c00044 	addi	r3,r3,1
1000635c:	197fffc3 	ldbu	r5,-1(r3)
10006360:	31400526 	beq	r6,r5,10006378 <memchr+0x88>
10006364:	1805883a 	mov	r2,r3
10006368:	20fffb1e 	bne	r4,r3,10006358 <__alt_data_end+0xf8006358>
1000636c:	0005883a 	mov	r2,zero
10006370:	f800283a 	ret
10006374:	2005883a 	mov	r2,r4
10006378:	f800283a 	ret
1000637c:	28c03fcc 	andi	r3,r5,255
10006380:	1812923a 	slli	r9,r3,8
10006384:	02ffbff4 	movhi	r11,65279
10006388:	02a02074 	movhi	r10,32897
1000638c:	48d2b03a 	or	r9,r9,r3
10006390:	4806943a 	slli	r3,r9,16
10006394:	5affbfc4 	addi	r11,r11,-257
10006398:	52a02004 	addi	r10,r10,-32640
1000639c:	48d2b03a 	or	r9,r9,r3
100063a0:	20c00017 	ldw	r3,0(r4)
100063a4:	48c6f03a 	xor	r3,r9,r3
100063a8:	1acd883a 	add	r6,r3,r11
100063ac:	00c6303a 	nor	r3,zero,r3
100063b0:	30c6703a 	and	r3,r6,r3
100063b4:	1a86703a 	and	r3,r3,r10
100063b8:	183fe01e 	bne	r3,zero,1000633c <__alt_data_end+0xf800633c>
100063bc:	10bfff04 	addi	r2,r2,-4
100063c0:	21000104 	addi	r4,r4,4
100063c4:	40bff636 	bltu	r8,r2,100063a0 <__alt_data_end+0xf80063a0>
100063c8:	003fdb06 	br	10006338 <__alt_data_end+0xf8006338>
100063cc:	3005883a 	mov	r2,r6
100063d0:	003fd706 	br	10006330 <__alt_data_end+0xf8006330>

100063d4 <_Balloc>:
100063d4:	20801317 	ldw	r2,76(r4)
100063d8:	defffc04 	addi	sp,sp,-16
100063dc:	dc400115 	stw	r17,4(sp)
100063e0:	dc000015 	stw	r16,0(sp)
100063e4:	dfc00315 	stw	ra,12(sp)
100063e8:	dc800215 	stw	r18,8(sp)
100063ec:	2023883a 	mov	r17,r4
100063f0:	2821883a 	mov	r16,r5
100063f4:	10000f26 	beq	r2,zero,10006434 <_Balloc+0x60>
100063f8:	8407883a 	add	r3,r16,r16
100063fc:	18c7883a 	add	r3,r3,r3
10006400:	10c7883a 	add	r3,r2,r3
10006404:	18800017 	ldw	r2,0(r3)
10006408:	10001126 	beq	r2,zero,10006450 <_Balloc+0x7c>
1000640c:	11000017 	ldw	r4,0(r2)
10006410:	19000015 	stw	r4,0(r3)
10006414:	10000415 	stw	zero,16(r2)
10006418:	10000315 	stw	zero,12(r2)
1000641c:	dfc00317 	ldw	ra,12(sp)
10006420:	dc800217 	ldw	r18,8(sp)
10006424:	dc400117 	ldw	r17,4(sp)
10006428:	dc000017 	ldw	r16,0(sp)
1000642c:	dec00404 	addi	sp,sp,16
10006430:	f800283a 	ret
10006434:	01800844 	movi	r6,33
10006438:	01400104 	movi	r5,4
1000643c:	00093900 	call	10009390 <_calloc_r>
10006440:	88801315 	stw	r2,76(r17)
10006444:	103fec1e 	bne	r2,zero,100063f8 <__alt_data_end+0xf80063f8>
10006448:	0005883a 	mov	r2,zero
1000644c:	003ff306 	br	1000641c <__alt_data_end+0xf800641c>
10006450:	01400044 	movi	r5,1
10006454:	2c24983a 	sll	r18,r5,r16
10006458:	8809883a 	mov	r4,r17
1000645c:	91800144 	addi	r6,r18,5
10006460:	318d883a 	add	r6,r6,r6
10006464:	318d883a 	add	r6,r6,r6
10006468:	00093900 	call	10009390 <_calloc_r>
1000646c:	103ff626 	beq	r2,zero,10006448 <__alt_data_end+0xf8006448>
10006470:	14000115 	stw	r16,4(r2)
10006474:	14800215 	stw	r18,8(r2)
10006478:	003fe606 	br	10006414 <__alt_data_end+0xf8006414>

1000647c <_Bfree>:
1000647c:	28000826 	beq	r5,zero,100064a0 <_Bfree+0x24>
10006480:	28c00117 	ldw	r3,4(r5)
10006484:	20801317 	ldw	r2,76(r4)
10006488:	18c7883a 	add	r3,r3,r3
1000648c:	18c7883a 	add	r3,r3,r3
10006490:	10c5883a 	add	r2,r2,r3
10006494:	10c00017 	ldw	r3,0(r2)
10006498:	28c00015 	stw	r3,0(r5)
1000649c:	11400015 	stw	r5,0(r2)
100064a0:	f800283a 	ret

100064a4 <__multadd>:
100064a4:	defff704 	addi	sp,sp,-36
100064a8:	dc800215 	stw	r18,8(sp)
100064ac:	2c800417 	ldw	r18,16(r5)
100064b0:	dd800615 	stw	r22,24(sp)
100064b4:	dd400515 	stw	r21,20(sp)
100064b8:	dd000415 	stw	r20,16(sp)
100064bc:	dcc00315 	stw	r19,12(sp)
100064c0:	dc400115 	stw	r17,4(sp)
100064c4:	dc000015 	stw	r16,0(sp)
100064c8:	dfc00815 	stw	ra,32(sp)
100064cc:	ddc00715 	stw	r23,28(sp)
100064d0:	2827883a 	mov	r19,r5
100064d4:	2029883a 	mov	r20,r4
100064d8:	3023883a 	mov	r17,r6
100064dc:	3821883a 	mov	r16,r7
100064e0:	2d400504 	addi	r21,r5,20
100064e4:	002d883a 	mov	r22,zero
100064e8:	adc00017 	ldw	r23,0(r21)
100064ec:	880b883a 	mov	r5,r17
100064f0:	ad400104 	addi	r21,r21,4
100064f4:	b93fffcc 	andi	r4,r23,65535
100064f8:	00006840 	call	10000684 <__mulsi3>
100064fc:	b808d43a 	srli	r4,r23,16
10006500:	880b883a 	mov	r5,r17
10006504:	1421883a 	add	r16,r2,r16
10006508:	00006840 	call	10000684 <__mulsi3>
1000650c:	800ed43a 	srli	r7,r16,16
10006510:	80ffffcc 	andi	r3,r16,65535
10006514:	b5800044 	addi	r22,r22,1
10006518:	11c5883a 	add	r2,r2,r7
1000651c:	100e943a 	slli	r7,r2,16
10006520:	1020d43a 	srli	r16,r2,16
10006524:	38c7883a 	add	r3,r7,r3
10006528:	a8ffff15 	stw	r3,-4(r21)
1000652c:	b4bfee16 	blt	r22,r18,100064e8 <__alt_data_end+0xf80064e8>
10006530:	80000926 	beq	r16,zero,10006558 <__multadd+0xb4>
10006534:	98800217 	ldw	r2,8(r19)
10006538:	9080130e 	bge	r18,r2,10006588 <__multadd+0xe4>
1000653c:	90800144 	addi	r2,r18,5
10006540:	1085883a 	add	r2,r2,r2
10006544:	1085883a 	add	r2,r2,r2
10006548:	9885883a 	add	r2,r19,r2
1000654c:	14000015 	stw	r16,0(r2)
10006550:	94800044 	addi	r18,r18,1
10006554:	9c800415 	stw	r18,16(r19)
10006558:	9805883a 	mov	r2,r19
1000655c:	dfc00817 	ldw	ra,32(sp)
10006560:	ddc00717 	ldw	r23,28(sp)
10006564:	dd800617 	ldw	r22,24(sp)
10006568:	dd400517 	ldw	r21,20(sp)
1000656c:	dd000417 	ldw	r20,16(sp)
10006570:	dcc00317 	ldw	r19,12(sp)
10006574:	dc800217 	ldw	r18,8(sp)
10006578:	dc400117 	ldw	r17,4(sp)
1000657c:	dc000017 	ldw	r16,0(sp)
10006580:	dec00904 	addi	sp,sp,36
10006584:	f800283a 	ret
10006588:	99400117 	ldw	r5,4(r19)
1000658c:	a009883a 	mov	r4,r20
10006590:	29400044 	addi	r5,r5,1
10006594:	00063d40 	call	100063d4 <_Balloc>
10006598:	99800417 	ldw	r6,16(r19)
1000659c:	99400304 	addi	r5,r19,12
100065a0:	11000304 	addi	r4,r2,12
100065a4:	31800084 	addi	r6,r6,2
100065a8:	318d883a 	add	r6,r6,r6
100065ac:	318d883a 	add	r6,r6,r6
100065b0:	1023883a 	mov	r17,r2
100065b4:	0001cd00 	call	10001cd0 <memcpy>
100065b8:	98000a26 	beq	r19,zero,100065e4 <__multadd+0x140>
100065bc:	98c00117 	ldw	r3,4(r19)
100065c0:	a0801317 	ldw	r2,76(r20)
100065c4:	18c7883a 	add	r3,r3,r3
100065c8:	18c7883a 	add	r3,r3,r3
100065cc:	10c5883a 	add	r2,r2,r3
100065d0:	10c00017 	ldw	r3,0(r2)
100065d4:	98c00015 	stw	r3,0(r19)
100065d8:	14c00015 	stw	r19,0(r2)
100065dc:	8827883a 	mov	r19,r17
100065e0:	003fd606 	br	1000653c <__alt_data_end+0xf800653c>
100065e4:	8827883a 	mov	r19,r17
100065e8:	003fd406 	br	1000653c <__alt_data_end+0xf800653c>

100065ec <__s2b>:
100065ec:	defff904 	addi	sp,sp,-28
100065f0:	dc400115 	stw	r17,4(sp)
100065f4:	dc000015 	stw	r16,0(sp)
100065f8:	2023883a 	mov	r17,r4
100065fc:	2821883a 	mov	r16,r5
10006600:	39000204 	addi	r4,r7,8
10006604:	01400244 	movi	r5,9
10006608:	dcc00315 	stw	r19,12(sp)
1000660c:	dc800215 	stw	r18,8(sp)
10006610:	dfc00615 	stw	ra,24(sp)
10006614:	dd400515 	stw	r21,20(sp)
10006618:	dd000415 	stw	r20,16(sp)
1000661c:	3825883a 	mov	r18,r7
10006620:	3027883a 	mov	r19,r6
10006624:	000b0540 	call	1000b054 <__divsi3>
10006628:	00c00044 	movi	r3,1
1000662c:	000b883a 	mov	r5,zero
10006630:	1880030e 	bge	r3,r2,10006640 <__s2b+0x54>
10006634:	18c7883a 	add	r3,r3,r3
10006638:	29400044 	addi	r5,r5,1
1000663c:	18bffd16 	blt	r3,r2,10006634 <__alt_data_end+0xf8006634>
10006640:	8809883a 	mov	r4,r17
10006644:	00063d40 	call	100063d4 <_Balloc>
10006648:	d8c00717 	ldw	r3,28(sp)
1000664c:	10c00515 	stw	r3,20(r2)
10006650:	00c00044 	movi	r3,1
10006654:	10c00415 	stw	r3,16(r2)
10006658:	00c00244 	movi	r3,9
1000665c:	1cc0210e 	bge	r3,r19,100066e4 <__s2b+0xf8>
10006660:	80eb883a 	add	r21,r16,r3
10006664:	a829883a 	mov	r20,r21
10006668:	84e1883a 	add	r16,r16,r19
1000666c:	a1c00007 	ldb	r7,0(r20)
10006670:	01800284 	movi	r6,10
10006674:	a5000044 	addi	r20,r20,1
10006678:	100b883a 	mov	r5,r2
1000667c:	39fff404 	addi	r7,r7,-48
10006680:	8809883a 	mov	r4,r17
10006684:	00064a40 	call	100064a4 <__multadd>
10006688:	a43ff81e 	bne	r20,r16,1000666c <__alt_data_end+0xf800666c>
1000668c:	ace1883a 	add	r16,r21,r19
10006690:	843ffe04 	addi	r16,r16,-8
10006694:	9c800a0e 	bge	r19,r18,100066c0 <__s2b+0xd4>
10006698:	94e5c83a 	sub	r18,r18,r19
1000669c:	84a5883a 	add	r18,r16,r18
100066a0:	81c00007 	ldb	r7,0(r16)
100066a4:	01800284 	movi	r6,10
100066a8:	84000044 	addi	r16,r16,1
100066ac:	100b883a 	mov	r5,r2
100066b0:	39fff404 	addi	r7,r7,-48
100066b4:	8809883a 	mov	r4,r17
100066b8:	00064a40 	call	100064a4 <__multadd>
100066bc:	84bff81e 	bne	r16,r18,100066a0 <__alt_data_end+0xf80066a0>
100066c0:	dfc00617 	ldw	ra,24(sp)
100066c4:	dd400517 	ldw	r21,20(sp)
100066c8:	dd000417 	ldw	r20,16(sp)
100066cc:	dcc00317 	ldw	r19,12(sp)
100066d0:	dc800217 	ldw	r18,8(sp)
100066d4:	dc400117 	ldw	r17,4(sp)
100066d8:	dc000017 	ldw	r16,0(sp)
100066dc:	dec00704 	addi	sp,sp,28
100066e0:	f800283a 	ret
100066e4:	84000284 	addi	r16,r16,10
100066e8:	1827883a 	mov	r19,r3
100066ec:	003fe906 	br	10006694 <__alt_data_end+0xf8006694>

100066f0 <__hi0bits>:
100066f0:	20bfffec 	andhi	r2,r4,65535
100066f4:	1000141e 	bne	r2,zero,10006748 <__hi0bits+0x58>
100066f8:	2008943a 	slli	r4,r4,16
100066fc:	00800404 	movi	r2,16
10006700:	20ffc02c 	andhi	r3,r4,65280
10006704:	1800021e 	bne	r3,zero,10006710 <__hi0bits+0x20>
10006708:	2008923a 	slli	r4,r4,8
1000670c:	10800204 	addi	r2,r2,8
10006710:	20fc002c 	andhi	r3,r4,61440
10006714:	1800021e 	bne	r3,zero,10006720 <__hi0bits+0x30>
10006718:	2008913a 	slli	r4,r4,4
1000671c:	10800104 	addi	r2,r2,4
10006720:	20f0002c 	andhi	r3,r4,49152
10006724:	1800031e 	bne	r3,zero,10006734 <__hi0bits+0x44>
10006728:	2109883a 	add	r4,r4,r4
1000672c:	10800084 	addi	r2,r2,2
10006730:	2109883a 	add	r4,r4,r4
10006734:	20000316 	blt	r4,zero,10006744 <__hi0bits+0x54>
10006738:	2110002c 	andhi	r4,r4,16384
1000673c:	2000041e 	bne	r4,zero,10006750 <__hi0bits+0x60>
10006740:	00800804 	movi	r2,32
10006744:	f800283a 	ret
10006748:	0005883a 	mov	r2,zero
1000674c:	003fec06 	br	10006700 <__alt_data_end+0xf8006700>
10006750:	10800044 	addi	r2,r2,1
10006754:	f800283a 	ret

10006758 <__lo0bits>:
10006758:	20c00017 	ldw	r3,0(r4)
1000675c:	188001cc 	andi	r2,r3,7
10006760:	10000826 	beq	r2,zero,10006784 <__lo0bits+0x2c>
10006764:	1880004c 	andi	r2,r3,1
10006768:	1000211e 	bne	r2,zero,100067f0 <__lo0bits+0x98>
1000676c:	1880008c 	andi	r2,r3,2
10006770:	1000211e 	bne	r2,zero,100067f8 <__lo0bits+0xa0>
10006774:	1806d0ba 	srli	r3,r3,2
10006778:	00800084 	movi	r2,2
1000677c:	20c00015 	stw	r3,0(r4)
10006780:	f800283a 	ret
10006784:	18bfffcc 	andi	r2,r3,65535
10006788:	10001326 	beq	r2,zero,100067d8 <__lo0bits+0x80>
1000678c:	0005883a 	mov	r2,zero
10006790:	19403fcc 	andi	r5,r3,255
10006794:	2800021e 	bne	r5,zero,100067a0 <__lo0bits+0x48>
10006798:	1806d23a 	srli	r3,r3,8
1000679c:	10800204 	addi	r2,r2,8
100067a0:	194003cc 	andi	r5,r3,15
100067a4:	2800021e 	bne	r5,zero,100067b0 <__lo0bits+0x58>
100067a8:	1806d13a 	srli	r3,r3,4
100067ac:	10800104 	addi	r2,r2,4
100067b0:	194000cc 	andi	r5,r3,3
100067b4:	2800021e 	bne	r5,zero,100067c0 <__lo0bits+0x68>
100067b8:	1806d0ba 	srli	r3,r3,2
100067bc:	10800084 	addi	r2,r2,2
100067c0:	1940004c 	andi	r5,r3,1
100067c4:	2800081e 	bne	r5,zero,100067e8 <__lo0bits+0x90>
100067c8:	1806d07a 	srli	r3,r3,1
100067cc:	1800051e 	bne	r3,zero,100067e4 <__lo0bits+0x8c>
100067d0:	00800804 	movi	r2,32
100067d4:	f800283a 	ret
100067d8:	1806d43a 	srli	r3,r3,16
100067dc:	00800404 	movi	r2,16
100067e0:	003feb06 	br	10006790 <__alt_data_end+0xf8006790>
100067e4:	10800044 	addi	r2,r2,1
100067e8:	20c00015 	stw	r3,0(r4)
100067ec:	f800283a 	ret
100067f0:	0005883a 	mov	r2,zero
100067f4:	f800283a 	ret
100067f8:	1806d07a 	srli	r3,r3,1
100067fc:	00800044 	movi	r2,1
10006800:	20c00015 	stw	r3,0(r4)
10006804:	f800283a 	ret

10006808 <__i2b>:
10006808:	defffd04 	addi	sp,sp,-12
1000680c:	dc000015 	stw	r16,0(sp)
10006810:	04000044 	movi	r16,1
10006814:	dc400115 	stw	r17,4(sp)
10006818:	2823883a 	mov	r17,r5
1000681c:	800b883a 	mov	r5,r16
10006820:	dfc00215 	stw	ra,8(sp)
10006824:	00063d40 	call	100063d4 <_Balloc>
10006828:	14400515 	stw	r17,20(r2)
1000682c:	14000415 	stw	r16,16(r2)
10006830:	dfc00217 	ldw	ra,8(sp)
10006834:	dc400117 	ldw	r17,4(sp)
10006838:	dc000017 	ldw	r16,0(sp)
1000683c:	dec00304 	addi	sp,sp,12
10006840:	f800283a 	ret

10006844 <__multiply>:
10006844:	deffef04 	addi	sp,sp,-68
10006848:	dc400815 	stw	r17,32(sp)
1000684c:	dc000715 	stw	r16,28(sp)
10006850:	34400417 	ldw	r17,16(r6)
10006854:	2c000417 	ldw	r16,16(r5)
10006858:	dd800d15 	stw	r22,52(sp)
1000685c:	dc800915 	stw	r18,36(sp)
10006860:	dfc01015 	stw	ra,64(sp)
10006864:	df000f15 	stw	fp,60(sp)
10006868:	ddc00e15 	stw	r23,56(sp)
1000686c:	dd400c15 	stw	r21,48(sp)
10006870:	dd000b15 	stw	r20,44(sp)
10006874:	dcc00a15 	stw	r19,40(sp)
10006878:	2825883a 	mov	r18,r5
1000687c:	302d883a 	mov	r22,r6
10006880:	8440050e 	bge	r16,r17,10006898 <__multiply+0x54>
10006884:	8007883a 	mov	r3,r16
10006888:	3025883a 	mov	r18,r6
1000688c:	8821883a 	mov	r16,r17
10006890:	282d883a 	mov	r22,r5
10006894:	1823883a 	mov	r17,r3
10006898:	90800217 	ldw	r2,8(r18)
1000689c:	8447883a 	add	r3,r16,r17
100068a0:	d8c00215 	stw	r3,8(sp)
100068a4:	91400117 	ldw	r5,4(r18)
100068a8:	10c0010e 	bge	r2,r3,100068b0 <__multiply+0x6c>
100068ac:	29400044 	addi	r5,r5,1
100068b0:	00063d40 	call	100063d4 <_Balloc>
100068b4:	d8c00217 	ldw	r3,8(sp)
100068b8:	d8800615 	stw	r2,24(sp)
100068bc:	18eb883a 	add	r21,r3,r3
100068c0:	ad6b883a 	add	r21,r21,r21
100068c4:	10c00504 	addi	r3,r2,20
100068c8:	1d6b883a 	add	r21,r3,r21
100068cc:	d8c00115 	stw	r3,4(sp)
100068d0:	dd400315 	stw	r21,12(sp)
100068d4:	1805883a 	mov	r2,r3
100068d8:	1d40042e 	bgeu	r3,r21,100068ec <__multiply+0xa8>
100068dc:	d8c00317 	ldw	r3,12(sp)
100068e0:	10000015 	stw	zero,0(r2)
100068e4:	10800104 	addi	r2,r2,4
100068e8:	10fffc36 	bltu	r2,r3,100068dc <__alt_data_end+0xf80068dc>
100068ec:	8c63883a 	add	r17,r17,r17
100068f0:	b5800504 	addi	r22,r22,20
100068f4:	8c63883a 	add	r17,r17,r17
100068f8:	94800504 	addi	r18,r18,20
100068fc:	8421883a 	add	r16,r16,r16
10006900:	b463883a 	add	r17,r22,r17
10006904:	8421883a 	add	r16,r16,r16
10006908:	dd800015 	stw	r22,0(sp)
1000690c:	dc800415 	stw	r18,16(sp)
10006910:	dc400515 	stw	r17,20(sp)
10006914:	9429883a 	add	r20,r18,r16
10006918:	b4404f2e 	bgeu	r22,r17,10006a58 <__multiply+0x214>
1000691c:	d8c00017 	ldw	r3,0(sp)
10006920:	1c800017 	ldw	r18,0(r3)
10006924:	947fffcc 	andi	r17,r18,65535
10006928:	88001e26 	beq	r17,zero,100069a4 <__multiply+0x160>
1000692c:	dd800117 	ldw	r22,4(sp)
10006930:	dd400417 	ldw	r21,16(sp)
10006934:	0027883a 	mov	r19,zero
10006938:	ac800017 	ldw	r18,0(r21)
1000693c:	b4000017 	ldw	r16,0(r22)
10006940:	880b883a 	mov	r5,r17
10006944:	913fffcc 	andi	r4,r18,65535
10006948:	00006840 	call	10000684 <__mulsi3>
1000694c:	9008d43a 	srli	r4,r18,16
10006950:	84bfffcc 	andi	r18,r16,65535
10006954:	1485883a 	add	r2,r2,r18
10006958:	14e5883a 	add	r18,r2,r19
1000695c:	8020d43a 	srli	r16,r16,16
10006960:	9026d43a 	srli	r19,r18,16
10006964:	880b883a 	mov	r5,r17
10006968:	00006840 	call	10000684 <__mulsi3>
1000696c:	1405883a 	add	r2,r2,r16
10006970:	14e1883a 	add	r16,r2,r19
10006974:	90ffffcc 	andi	r3,r18,65535
10006978:	8024943a 	slli	r18,r16,16
1000697c:	ad400104 	addi	r21,r21,4
10006980:	b005883a 	mov	r2,r22
10006984:	90c6b03a 	or	r3,r18,r3
10006988:	b0c00015 	stw	r3,0(r22)
1000698c:	8026d43a 	srli	r19,r16,16
10006990:	b5800104 	addi	r22,r22,4
10006994:	ad3fe836 	bltu	r21,r20,10006938 <__alt_data_end+0xf8006938>
10006998:	d8c00017 	ldw	r3,0(sp)
1000699c:	14c00115 	stw	r19,4(r2)
100069a0:	1c800017 	ldw	r18,0(r3)
100069a4:	9024d43a 	srli	r18,r18,16
100069a8:	90002226 	beq	r18,zero,10006a34 <__multiply+0x1f0>
100069ac:	d8c00117 	ldw	r3,4(sp)
100069b0:	dd800417 	ldw	r22,16(sp)
100069b4:	002f883a 	mov	r23,zero
100069b8:	1f000017 	ldw	fp,0(r3)
100069bc:	1823883a 	mov	r17,r3
100069c0:	182b883a 	mov	r21,r3
100069c4:	e021883a 	mov	r16,fp
100069c8:	00000106 	br	100069d0 <__multiply+0x18c>
100069cc:	982b883a 	mov	r21,r19
100069d0:	b100000b 	ldhu	r4,0(r22)
100069d4:	8020d43a 	srli	r16,r16,16
100069d8:	900b883a 	mov	r5,r18
100069dc:	00006840 	call	10000684 <__mulsi3>
100069e0:	1405883a 	add	r2,r2,r16
100069e4:	15ef883a 	add	r23,r2,r23
100069e8:	b804943a 	slli	r2,r23,16
100069ec:	e0ffffcc 	andi	r3,fp,65535
100069f0:	8c400104 	addi	r17,r17,4
100069f4:	10c6b03a 	or	r3,r2,r3
100069f8:	88ffff15 	stw	r3,-4(r17)
100069fc:	b5800104 	addi	r22,r22,4
10006a00:	b13fff17 	ldw	r4,-4(r22)
10006a04:	acc00104 	addi	r19,r21,4
10006a08:	900b883a 	mov	r5,r18
10006a0c:	2008d43a 	srli	r4,r4,16
10006a10:	9c000017 	ldw	r16,0(r19)
10006a14:	00006840 	call	10000684 <__mulsi3>
10006a18:	b806d43a 	srli	r3,r23,16
10006a1c:	813fffcc 	andi	r4,r16,65535
10006a20:	1105883a 	add	r2,r2,r4
10006a24:	10f9883a 	add	fp,r2,r3
10006a28:	e02ed43a 	srli	r23,fp,16
10006a2c:	b53fe736 	bltu	r22,r20,100069cc <__alt_data_end+0xf80069cc>
10006a30:	af000115 	stw	fp,4(r21)
10006a34:	d8c00017 	ldw	r3,0(sp)
10006a38:	d9000517 	ldw	r4,20(sp)
10006a3c:	18c00104 	addi	r3,r3,4
10006a40:	d8c00015 	stw	r3,0(sp)
10006a44:	d8c00117 	ldw	r3,4(sp)
10006a48:	18c00104 	addi	r3,r3,4
10006a4c:	d8c00115 	stw	r3,4(sp)
10006a50:	d8c00017 	ldw	r3,0(sp)
10006a54:	193fb136 	bltu	r3,r4,1000691c <__alt_data_end+0xf800691c>
10006a58:	d8c00217 	ldw	r3,8(sp)
10006a5c:	00c00c0e 	bge	zero,r3,10006a90 <__multiply+0x24c>
10006a60:	d8c00317 	ldw	r3,12(sp)
10006a64:	18bfff17 	ldw	r2,-4(r3)
10006a68:	1d7fff04 	addi	r21,r3,-4
10006a6c:	10000326 	beq	r2,zero,10006a7c <__multiply+0x238>
10006a70:	00000706 	br	10006a90 <__multiply+0x24c>
10006a74:	a8800017 	ldw	r2,0(r21)
10006a78:	1000051e 	bne	r2,zero,10006a90 <__multiply+0x24c>
10006a7c:	d8c00217 	ldw	r3,8(sp)
10006a80:	ad7fff04 	addi	r21,r21,-4
10006a84:	18ffffc4 	addi	r3,r3,-1
10006a88:	d8c00215 	stw	r3,8(sp)
10006a8c:	183ff91e 	bne	r3,zero,10006a74 <__alt_data_end+0xf8006a74>
10006a90:	d8c00617 	ldw	r3,24(sp)
10006a94:	d9000217 	ldw	r4,8(sp)
10006a98:	1805883a 	mov	r2,r3
10006a9c:	19000415 	stw	r4,16(r3)
10006aa0:	dfc01017 	ldw	ra,64(sp)
10006aa4:	df000f17 	ldw	fp,60(sp)
10006aa8:	ddc00e17 	ldw	r23,56(sp)
10006aac:	dd800d17 	ldw	r22,52(sp)
10006ab0:	dd400c17 	ldw	r21,48(sp)
10006ab4:	dd000b17 	ldw	r20,44(sp)
10006ab8:	dcc00a17 	ldw	r19,40(sp)
10006abc:	dc800917 	ldw	r18,36(sp)
10006ac0:	dc400817 	ldw	r17,32(sp)
10006ac4:	dc000717 	ldw	r16,28(sp)
10006ac8:	dec01104 	addi	sp,sp,68
10006acc:	f800283a 	ret

10006ad0 <__pow5mult>:
10006ad0:	defffa04 	addi	sp,sp,-24
10006ad4:	dcc00315 	stw	r19,12(sp)
10006ad8:	dc000015 	stw	r16,0(sp)
10006adc:	dfc00515 	stw	ra,20(sp)
10006ae0:	dd000415 	stw	r20,16(sp)
10006ae4:	dc800215 	stw	r18,8(sp)
10006ae8:	dc400115 	stw	r17,4(sp)
10006aec:	308000cc 	andi	r2,r6,3
10006af0:	3021883a 	mov	r16,r6
10006af4:	2027883a 	mov	r19,r4
10006af8:	10002f1e 	bne	r2,zero,10006bb8 <__pow5mult+0xe8>
10006afc:	2825883a 	mov	r18,r5
10006b00:	8021d0ba 	srai	r16,r16,2
10006b04:	80001a26 	beq	r16,zero,10006b70 <__pow5mult+0xa0>
10006b08:	9c401217 	ldw	r17,72(r19)
10006b0c:	8800061e 	bne	r17,zero,10006b28 <__pow5mult+0x58>
10006b10:	00003406 	br	10006be4 <__pow5mult+0x114>
10006b14:	8021d07a 	srai	r16,r16,1
10006b18:	80001526 	beq	r16,zero,10006b70 <__pow5mult+0xa0>
10006b1c:	88800017 	ldw	r2,0(r17)
10006b20:	10001c26 	beq	r2,zero,10006b94 <__pow5mult+0xc4>
10006b24:	1023883a 	mov	r17,r2
10006b28:	8080004c 	andi	r2,r16,1
10006b2c:	103ff926 	beq	r2,zero,10006b14 <__alt_data_end+0xf8006b14>
10006b30:	880d883a 	mov	r6,r17
10006b34:	900b883a 	mov	r5,r18
10006b38:	9809883a 	mov	r4,r19
10006b3c:	00068440 	call	10006844 <__multiply>
10006b40:	90001b26 	beq	r18,zero,10006bb0 <__pow5mult+0xe0>
10006b44:	91000117 	ldw	r4,4(r18)
10006b48:	98c01317 	ldw	r3,76(r19)
10006b4c:	8021d07a 	srai	r16,r16,1
10006b50:	2109883a 	add	r4,r4,r4
10006b54:	2109883a 	add	r4,r4,r4
10006b58:	1907883a 	add	r3,r3,r4
10006b5c:	19000017 	ldw	r4,0(r3)
10006b60:	91000015 	stw	r4,0(r18)
10006b64:	1c800015 	stw	r18,0(r3)
10006b68:	1025883a 	mov	r18,r2
10006b6c:	803feb1e 	bne	r16,zero,10006b1c <__alt_data_end+0xf8006b1c>
10006b70:	9005883a 	mov	r2,r18
10006b74:	dfc00517 	ldw	ra,20(sp)
10006b78:	dd000417 	ldw	r20,16(sp)
10006b7c:	dcc00317 	ldw	r19,12(sp)
10006b80:	dc800217 	ldw	r18,8(sp)
10006b84:	dc400117 	ldw	r17,4(sp)
10006b88:	dc000017 	ldw	r16,0(sp)
10006b8c:	dec00604 	addi	sp,sp,24
10006b90:	f800283a 	ret
10006b94:	880d883a 	mov	r6,r17
10006b98:	880b883a 	mov	r5,r17
10006b9c:	9809883a 	mov	r4,r19
10006ba0:	00068440 	call	10006844 <__multiply>
10006ba4:	88800015 	stw	r2,0(r17)
10006ba8:	10000015 	stw	zero,0(r2)
10006bac:	003fdd06 	br	10006b24 <__alt_data_end+0xf8006b24>
10006bb0:	1025883a 	mov	r18,r2
10006bb4:	003fd706 	br	10006b14 <__alt_data_end+0xf8006b14>
10006bb8:	10bfffc4 	addi	r2,r2,-1
10006bbc:	1085883a 	add	r2,r2,r2
10006bc0:	00c40074 	movhi	r3,4097
10006bc4:	18c0bd04 	addi	r3,r3,756
10006bc8:	1085883a 	add	r2,r2,r2
10006bcc:	1885883a 	add	r2,r3,r2
10006bd0:	11800017 	ldw	r6,0(r2)
10006bd4:	000f883a 	mov	r7,zero
10006bd8:	00064a40 	call	100064a4 <__multadd>
10006bdc:	1025883a 	mov	r18,r2
10006be0:	003fc706 	br	10006b00 <__alt_data_end+0xf8006b00>
10006be4:	05000044 	movi	r20,1
10006be8:	a00b883a 	mov	r5,r20
10006bec:	9809883a 	mov	r4,r19
10006bf0:	00063d40 	call	100063d4 <_Balloc>
10006bf4:	1023883a 	mov	r17,r2
10006bf8:	00809c44 	movi	r2,625
10006bfc:	88800515 	stw	r2,20(r17)
10006c00:	8d000415 	stw	r20,16(r17)
10006c04:	9c401215 	stw	r17,72(r19)
10006c08:	88000015 	stw	zero,0(r17)
10006c0c:	003fc606 	br	10006b28 <__alt_data_end+0xf8006b28>

10006c10 <__lshift>:
10006c10:	defff904 	addi	sp,sp,-28
10006c14:	dd400515 	stw	r21,20(sp)
10006c18:	dcc00315 	stw	r19,12(sp)
10006c1c:	302bd17a 	srai	r21,r6,5
10006c20:	2cc00417 	ldw	r19,16(r5)
10006c24:	28800217 	ldw	r2,8(r5)
10006c28:	dd000415 	stw	r20,16(sp)
10006c2c:	ace7883a 	add	r19,r21,r19
10006c30:	dc800215 	stw	r18,8(sp)
10006c34:	dc400115 	stw	r17,4(sp)
10006c38:	dc000015 	stw	r16,0(sp)
10006c3c:	dfc00615 	stw	ra,24(sp)
10006c40:	9c000044 	addi	r16,r19,1
10006c44:	2823883a 	mov	r17,r5
10006c48:	3029883a 	mov	r20,r6
10006c4c:	2025883a 	mov	r18,r4
10006c50:	29400117 	ldw	r5,4(r5)
10006c54:	1400030e 	bge	r2,r16,10006c64 <__lshift+0x54>
10006c58:	1085883a 	add	r2,r2,r2
10006c5c:	29400044 	addi	r5,r5,1
10006c60:	143ffd16 	blt	r2,r16,10006c58 <__alt_data_end+0xf8006c58>
10006c64:	9009883a 	mov	r4,r18
10006c68:	00063d40 	call	100063d4 <_Balloc>
10006c6c:	10c00504 	addi	r3,r2,20
10006c70:	0540070e 	bge	zero,r21,10006c90 <__lshift+0x80>
10006c74:	ad6b883a 	add	r21,r21,r21
10006c78:	ad6b883a 	add	r21,r21,r21
10006c7c:	1809883a 	mov	r4,r3
10006c80:	1d47883a 	add	r3,r3,r21
10006c84:	20000015 	stw	zero,0(r4)
10006c88:	21000104 	addi	r4,r4,4
10006c8c:	193ffd1e 	bne	r3,r4,10006c84 <__alt_data_end+0xf8006c84>
10006c90:	8a000417 	ldw	r8,16(r17)
10006c94:	89000504 	addi	r4,r17,20
10006c98:	a18007cc 	andi	r6,r20,31
10006c9c:	4211883a 	add	r8,r8,r8
10006ca0:	4211883a 	add	r8,r8,r8
10006ca4:	2211883a 	add	r8,r4,r8
10006ca8:	30002326 	beq	r6,zero,10006d38 <__lshift+0x128>
10006cac:	02400804 	movi	r9,32
10006cb0:	4993c83a 	sub	r9,r9,r6
10006cb4:	000b883a 	mov	r5,zero
10006cb8:	21c00017 	ldw	r7,0(r4)
10006cbc:	1815883a 	mov	r10,r3
10006cc0:	18c00104 	addi	r3,r3,4
10006cc4:	398e983a 	sll	r7,r7,r6
10006cc8:	21000104 	addi	r4,r4,4
10006ccc:	394ab03a 	or	r5,r7,r5
10006cd0:	197fff15 	stw	r5,-4(r3)
10006cd4:	217fff17 	ldw	r5,-4(r4)
10006cd8:	2a4ad83a 	srl	r5,r5,r9
10006cdc:	223ff636 	bltu	r4,r8,10006cb8 <__alt_data_end+0xf8006cb8>
10006ce0:	51400115 	stw	r5,4(r10)
10006ce4:	28001a1e 	bne	r5,zero,10006d50 <__lshift+0x140>
10006ce8:	843fffc4 	addi	r16,r16,-1
10006cec:	14000415 	stw	r16,16(r2)
10006cf0:	88000826 	beq	r17,zero,10006d14 <__lshift+0x104>
10006cf4:	89000117 	ldw	r4,4(r17)
10006cf8:	90c01317 	ldw	r3,76(r18)
10006cfc:	2109883a 	add	r4,r4,r4
10006d00:	2109883a 	add	r4,r4,r4
10006d04:	1907883a 	add	r3,r3,r4
10006d08:	19000017 	ldw	r4,0(r3)
10006d0c:	89000015 	stw	r4,0(r17)
10006d10:	1c400015 	stw	r17,0(r3)
10006d14:	dfc00617 	ldw	ra,24(sp)
10006d18:	dd400517 	ldw	r21,20(sp)
10006d1c:	dd000417 	ldw	r20,16(sp)
10006d20:	dcc00317 	ldw	r19,12(sp)
10006d24:	dc800217 	ldw	r18,8(sp)
10006d28:	dc400117 	ldw	r17,4(sp)
10006d2c:	dc000017 	ldw	r16,0(sp)
10006d30:	dec00704 	addi	sp,sp,28
10006d34:	f800283a 	ret
10006d38:	21400017 	ldw	r5,0(r4)
10006d3c:	18c00104 	addi	r3,r3,4
10006d40:	21000104 	addi	r4,r4,4
10006d44:	197fff15 	stw	r5,-4(r3)
10006d48:	223ffb36 	bltu	r4,r8,10006d38 <__alt_data_end+0xf8006d38>
10006d4c:	003fe606 	br	10006ce8 <__alt_data_end+0xf8006ce8>
10006d50:	9c000084 	addi	r16,r19,2
10006d54:	003fe406 	br	10006ce8 <__alt_data_end+0xf8006ce8>

10006d58 <__mcmp>:
10006d58:	20800417 	ldw	r2,16(r4)
10006d5c:	28c00417 	ldw	r3,16(r5)
10006d60:	10c5c83a 	sub	r2,r2,r3
10006d64:	1000111e 	bne	r2,zero,10006dac <__mcmp+0x54>
10006d68:	18c7883a 	add	r3,r3,r3
10006d6c:	18c7883a 	add	r3,r3,r3
10006d70:	21000504 	addi	r4,r4,20
10006d74:	29400504 	addi	r5,r5,20
10006d78:	20c5883a 	add	r2,r4,r3
10006d7c:	28cb883a 	add	r5,r5,r3
10006d80:	00000106 	br	10006d88 <__mcmp+0x30>
10006d84:	20800a2e 	bgeu	r4,r2,10006db0 <__mcmp+0x58>
10006d88:	10bfff04 	addi	r2,r2,-4
10006d8c:	297fff04 	addi	r5,r5,-4
10006d90:	11800017 	ldw	r6,0(r2)
10006d94:	28c00017 	ldw	r3,0(r5)
10006d98:	30fffa26 	beq	r6,r3,10006d84 <__alt_data_end+0xf8006d84>
10006d9c:	30c00236 	bltu	r6,r3,10006da8 <__mcmp+0x50>
10006da0:	00800044 	movi	r2,1
10006da4:	f800283a 	ret
10006da8:	00bfffc4 	movi	r2,-1
10006dac:	f800283a 	ret
10006db0:	0005883a 	mov	r2,zero
10006db4:	f800283a 	ret

10006db8 <__mdiff>:
10006db8:	28c00417 	ldw	r3,16(r5)
10006dbc:	30800417 	ldw	r2,16(r6)
10006dc0:	defffa04 	addi	sp,sp,-24
10006dc4:	dcc00315 	stw	r19,12(sp)
10006dc8:	dc800215 	stw	r18,8(sp)
10006dcc:	dfc00515 	stw	ra,20(sp)
10006dd0:	dd000415 	stw	r20,16(sp)
10006dd4:	dc400115 	stw	r17,4(sp)
10006dd8:	dc000015 	stw	r16,0(sp)
10006ddc:	1887c83a 	sub	r3,r3,r2
10006de0:	2825883a 	mov	r18,r5
10006de4:	3027883a 	mov	r19,r6
10006de8:	1800141e 	bne	r3,zero,10006e3c <__mdiff+0x84>
10006dec:	1085883a 	add	r2,r2,r2
10006df0:	1085883a 	add	r2,r2,r2
10006df4:	2a000504 	addi	r8,r5,20
10006df8:	34000504 	addi	r16,r6,20
10006dfc:	4087883a 	add	r3,r8,r2
10006e00:	8085883a 	add	r2,r16,r2
10006e04:	00000106 	br	10006e0c <__mdiff+0x54>
10006e08:	40c0592e 	bgeu	r8,r3,10006f70 <__mdiff+0x1b8>
10006e0c:	18ffff04 	addi	r3,r3,-4
10006e10:	10bfff04 	addi	r2,r2,-4
10006e14:	19c00017 	ldw	r7,0(r3)
10006e18:	11400017 	ldw	r5,0(r2)
10006e1c:	397ffa26 	beq	r7,r5,10006e08 <__alt_data_end+0xf8006e08>
10006e20:	3940592e 	bgeu	r7,r5,10006f88 <__mdiff+0x1d0>
10006e24:	9005883a 	mov	r2,r18
10006e28:	4023883a 	mov	r17,r8
10006e2c:	9825883a 	mov	r18,r19
10006e30:	05000044 	movi	r20,1
10006e34:	1027883a 	mov	r19,r2
10006e38:	00000406 	br	10006e4c <__mdiff+0x94>
10006e3c:	18005616 	blt	r3,zero,10006f98 <__mdiff+0x1e0>
10006e40:	34400504 	addi	r17,r6,20
10006e44:	2c000504 	addi	r16,r5,20
10006e48:	0029883a 	mov	r20,zero
10006e4c:	91400117 	ldw	r5,4(r18)
10006e50:	00063d40 	call	100063d4 <_Balloc>
10006e54:	92400417 	ldw	r9,16(r18)
10006e58:	9b000417 	ldw	r12,16(r19)
10006e5c:	12c00504 	addi	r11,r2,20
10006e60:	4a51883a 	add	r8,r9,r9
10006e64:	6319883a 	add	r12,r12,r12
10006e68:	4211883a 	add	r8,r8,r8
10006e6c:	6319883a 	add	r12,r12,r12
10006e70:	15000315 	stw	r20,12(r2)
10006e74:	8211883a 	add	r8,r16,r8
10006e78:	8b19883a 	add	r12,r17,r12
10006e7c:	0007883a 	mov	r3,zero
10006e80:	81400017 	ldw	r5,0(r16)
10006e84:	89c00017 	ldw	r7,0(r17)
10006e88:	59800104 	addi	r6,r11,4
10006e8c:	293fffcc 	andi	r4,r5,65535
10006e90:	20c7883a 	add	r3,r4,r3
10006e94:	393fffcc 	andi	r4,r7,65535
10006e98:	1909c83a 	sub	r4,r3,r4
10006e9c:	280ad43a 	srli	r5,r5,16
10006ea0:	380ed43a 	srli	r7,r7,16
10006ea4:	2007d43a 	srai	r3,r4,16
10006ea8:	213fffcc 	andi	r4,r4,65535
10006eac:	29cbc83a 	sub	r5,r5,r7
10006eb0:	28c7883a 	add	r3,r5,r3
10006eb4:	180a943a 	slli	r5,r3,16
10006eb8:	8c400104 	addi	r17,r17,4
10006ebc:	84000104 	addi	r16,r16,4
10006ec0:	2908b03a 	or	r4,r5,r4
10006ec4:	59000015 	stw	r4,0(r11)
10006ec8:	1807d43a 	srai	r3,r3,16
10006ecc:	3015883a 	mov	r10,r6
10006ed0:	3017883a 	mov	r11,r6
10006ed4:	8b3fea36 	bltu	r17,r12,10006e80 <__alt_data_end+0xf8006e80>
10006ed8:	8200162e 	bgeu	r16,r8,10006f34 <__mdiff+0x17c>
10006edc:	8017883a 	mov	r11,r16
10006ee0:	59400017 	ldw	r5,0(r11)
10006ee4:	31800104 	addi	r6,r6,4
10006ee8:	5ac00104 	addi	r11,r11,4
10006eec:	293fffcc 	andi	r4,r5,65535
10006ef0:	20c7883a 	add	r3,r4,r3
10006ef4:	280ed43a 	srli	r7,r5,16
10006ef8:	180bd43a 	srai	r5,r3,16
10006efc:	193fffcc 	andi	r4,r3,65535
10006f00:	3947883a 	add	r3,r7,r5
10006f04:	180a943a 	slli	r5,r3,16
10006f08:	1807d43a 	srai	r3,r3,16
10006f0c:	2908b03a 	or	r4,r5,r4
10006f10:	313fff15 	stw	r4,-4(r6)
10006f14:	5a3ff236 	bltu	r11,r8,10006ee0 <__alt_data_end+0xf8006ee0>
10006f18:	0406303a 	nor	r3,zero,r16
10006f1c:	1a07883a 	add	r3,r3,r8
10006f20:	1806d0ba 	srli	r3,r3,2
10006f24:	18c00044 	addi	r3,r3,1
10006f28:	18c7883a 	add	r3,r3,r3
10006f2c:	18c7883a 	add	r3,r3,r3
10006f30:	50d5883a 	add	r10,r10,r3
10006f34:	50ffff04 	addi	r3,r10,-4
10006f38:	2000041e 	bne	r4,zero,10006f4c <__mdiff+0x194>
10006f3c:	18ffff04 	addi	r3,r3,-4
10006f40:	19000017 	ldw	r4,0(r3)
10006f44:	4a7fffc4 	addi	r9,r9,-1
10006f48:	203ffc26 	beq	r4,zero,10006f3c <__alt_data_end+0xf8006f3c>
10006f4c:	12400415 	stw	r9,16(r2)
10006f50:	dfc00517 	ldw	ra,20(sp)
10006f54:	dd000417 	ldw	r20,16(sp)
10006f58:	dcc00317 	ldw	r19,12(sp)
10006f5c:	dc800217 	ldw	r18,8(sp)
10006f60:	dc400117 	ldw	r17,4(sp)
10006f64:	dc000017 	ldw	r16,0(sp)
10006f68:	dec00604 	addi	sp,sp,24
10006f6c:	f800283a 	ret
10006f70:	000b883a 	mov	r5,zero
10006f74:	00063d40 	call	100063d4 <_Balloc>
10006f78:	00c00044 	movi	r3,1
10006f7c:	10c00415 	stw	r3,16(r2)
10006f80:	10000515 	stw	zero,20(r2)
10006f84:	003ff206 	br	10006f50 <__alt_data_end+0xf8006f50>
10006f88:	8023883a 	mov	r17,r16
10006f8c:	0029883a 	mov	r20,zero
10006f90:	4021883a 	mov	r16,r8
10006f94:	003fad06 	br	10006e4c <__alt_data_end+0xf8006e4c>
10006f98:	9005883a 	mov	r2,r18
10006f9c:	94400504 	addi	r17,r18,20
10006fa0:	9c000504 	addi	r16,r19,20
10006fa4:	9825883a 	mov	r18,r19
10006fa8:	05000044 	movi	r20,1
10006fac:	1027883a 	mov	r19,r2
10006fb0:	003fa606 	br	10006e4c <__alt_data_end+0xf8006e4c>

10006fb4 <__ulp>:
10006fb4:	295ffc2c 	andhi	r5,r5,32752
10006fb8:	00bf3034 	movhi	r2,64704
10006fbc:	2887883a 	add	r3,r5,r2
10006fc0:	00c0020e 	bge	zero,r3,10006fcc <__ulp+0x18>
10006fc4:	0005883a 	mov	r2,zero
10006fc8:	f800283a 	ret
10006fcc:	00c7c83a 	sub	r3,zero,r3
10006fd0:	1807d53a 	srai	r3,r3,20
10006fd4:	008004c4 	movi	r2,19
10006fd8:	10c00b0e 	bge	r2,r3,10007008 <__ulp+0x54>
10006fdc:	18bffb04 	addi	r2,r3,-20
10006fe0:	01000784 	movi	r4,30
10006fe4:	0007883a 	mov	r3,zero
10006fe8:	20800516 	blt	r4,r2,10007000 <__ulp+0x4c>
10006fec:	010007c4 	movi	r4,31
10006ff0:	2089c83a 	sub	r4,r4,r2
10006ff4:	00800044 	movi	r2,1
10006ff8:	1104983a 	sll	r2,r2,r4
10006ffc:	f800283a 	ret
10007000:	00800044 	movi	r2,1
10007004:	f800283a 	ret
10007008:	01400234 	movhi	r5,8
1000700c:	28c7d83a 	sra	r3,r5,r3
10007010:	0005883a 	mov	r2,zero
10007014:	f800283a 	ret

10007018 <__b2d>:
10007018:	defffa04 	addi	sp,sp,-24
1000701c:	dc000015 	stw	r16,0(sp)
10007020:	24000417 	ldw	r16,16(r4)
10007024:	dc400115 	stw	r17,4(sp)
10007028:	24400504 	addi	r17,r4,20
1000702c:	8421883a 	add	r16,r16,r16
10007030:	8421883a 	add	r16,r16,r16
10007034:	8c21883a 	add	r16,r17,r16
10007038:	dc800215 	stw	r18,8(sp)
1000703c:	84bfff17 	ldw	r18,-4(r16)
10007040:	dd000415 	stw	r20,16(sp)
10007044:	dcc00315 	stw	r19,12(sp)
10007048:	9009883a 	mov	r4,r18
1000704c:	2829883a 	mov	r20,r5
10007050:	dfc00515 	stw	ra,20(sp)
10007054:	00066f00 	call	100066f0 <__hi0bits>
10007058:	00c00804 	movi	r3,32
1000705c:	1889c83a 	sub	r4,r3,r2
10007060:	a1000015 	stw	r4,0(r20)
10007064:	01000284 	movi	r4,10
10007068:	84ffff04 	addi	r19,r16,-4
1000706c:	20801216 	blt	r4,r2,100070b8 <__b2d+0xa0>
10007070:	018002c4 	movi	r6,11
10007074:	308dc83a 	sub	r6,r6,r2
10007078:	9186d83a 	srl	r3,r18,r6
1000707c:	18cffc34 	orhi	r3,r3,16368
10007080:	8cc0212e 	bgeu	r17,r19,10007108 <__b2d+0xf0>
10007084:	813ffe17 	ldw	r4,-8(r16)
10007088:	218cd83a 	srl	r6,r4,r6
1000708c:	10800544 	addi	r2,r2,21
10007090:	9084983a 	sll	r2,r18,r2
10007094:	1184b03a 	or	r2,r2,r6
10007098:	dfc00517 	ldw	ra,20(sp)
1000709c:	dd000417 	ldw	r20,16(sp)
100070a0:	dcc00317 	ldw	r19,12(sp)
100070a4:	dc800217 	ldw	r18,8(sp)
100070a8:	dc400117 	ldw	r17,4(sp)
100070ac:	dc000017 	ldw	r16,0(sp)
100070b0:	dec00604 	addi	sp,sp,24
100070b4:	f800283a 	ret
100070b8:	8cc00f2e 	bgeu	r17,r19,100070f8 <__b2d+0xe0>
100070bc:	117ffd44 	addi	r5,r2,-11
100070c0:	80bffe17 	ldw	r2,-8(r16)
100070c4:	28000e26 	beq	r5,zero,10007100 <__b2d+0xe8>
100070c8:	1949c83a 	sub	r4,r3,r5
100070cc:	9164983a 	sll	r18,r18,r5
100070d0:	1106d83a 	srl	r3,r2,r4
100070d4:	81bffe04 	addi	r6,r16,-8
100070d8:	948ffc34 	orhi	r18,r18,16368
100070dc:	90c6b03a 	or	r3,r18,r3
100070e0:	89800e2e 	bgeu	r17,r6,1000711c <__b2d+0x104>
100070e4:	81bffd17 	ldw	r6,-12(r16)
100070e8:	1144983a 	sll	r2,r2,r5
100070ec:	310ad83a 	srl	r5,r6,r4
100070f0:	2884b03a 	or	r2,r5,r2
100070f4:	003fe806 	br	10007098 <__alt_data_end+0xf8007098>
100070f8:	10bffd44 	addi	r2,r2,-11
100070fc:	1000041e 	bne	r2,zero,10007110 <__b2d+0xf8>
10007100:	90cffc34 	orhi	r3,r18,16368
10007104:	003fe406 	br	10007098 <__alt_data_end+0xf8007098>
10007108:	000d883a 	mov	r6,zero
1000710c:	003fdf06 	br	1000708c <__alt_data_end+0xf800708c>
10007110:	90a4983a 	sll	r18,r18,r2
10007114:	0005883a 	mov	r2,zero
10007118:	003ff906 	br	10007100 <__alt_data_end+0xf8007100>
1000711c:	1144983a 	sll	r2,r2,r5
10007120:	003fdd06 	br	10007098 <__alt_data_end+0xf8007098>

10007124 <__d2b>:
10007124:	defff804 	addi	sp,sp,-32
10007128:	dc000215 	stw	r16,8(sp)
1000712c:	3021883a 	mov	r16,r6
10007130:	dc400315 	stw	r17,12(sp)
10007134:	8022907a 	slli	r17,r16,1
10007138:	dd000615 	stw	r20,24(sp)
1000713c:	2829883a 	mov	r20,r5
10007140:	01400044 	movi	r5,1
10007144:	dcc00515 	stw	r19,20(sp)
10007148:	dc800415 	stw	r18,16(sp)
1000714c:	dfc00715 	stw	ra,28(sp)
10007150:	3825883a 	mov	r18,r7
10007154:	8822d57a 	srli	r17,r17,21
10007158:	00063d40 	call	100063d4 <_Balloc>
1000715c:	1027883a 	mov	r19,r2
10007160:	00800434 	movhi	r2,16
10007164:	10bfffc4 	addi	r2,r2,-1
10007168:	808c703a 	and	r6,r16,r2
1000716c:	88000126 	beq	r17,zero,10007174 <__d2b+0x50>
10007170:	31800434 	orhi	r6,r6,16
10007174:	d9800015 	stw	r6,0(sp)
10007178:	a0002426 	beq	r20,zero,1000720c <__d2b+0xe8>
1000717c:	d9000104 	addi	r4,sp,4
10007180:	dd000115 	stw	r20,4(sp)
10007184:	00067580 	call	10006758 <__lo0bits>
10007188:	d8c00017 	ldw	r3,0(sp)
1000718c:	10002f1e 	bne	r2,zero,1000724c <__d2b+0x128>
10007190:	d9000117 	ldw	r4,4(sp)
10007194:	99000515 	stw	r4,20(r19)
10007198:	1821003a 	cmpeq	r16,r3,zero
1000719c:	01000084 	movi	r4,2
100071a0:	2421c83a 	sub	r16,r4,r16
100071a4:	98c00615 	stw	r3,24(r19)
100071a8:	9c000415 	stw	r16,16(r19)
100071ac:	88001f1e 	bne	r17,zero,1000722c <__d2b+0x108>
100071b0:	10bef384 	addi	r2,r2,-1074
100071b4:	90800015 	stw	r2,0(r18)
100071b8:	00900034 	movhi	r2,16384
100071bc:	10bfffc4 	addi	r2,r2,-1
100071c0:	8085883a 	add	r2,r16,r2
100071c4:	1085883a 	add	r2,r2,r2
100071c8:	1085883a 	add	r2,r2,r2
100071cc:	9885883a 	add	r2,r19,r2
100071d0:	11000517 	ldw	r4,20(r2)
100071d4:	8020917a 	slli	r16,r16,5
100071d8:	00066f00 	call	100066f0 <__hi0bits>
100071dc:	d8c00817 	ldw	r3,32(sp)
100071e0:	8085c83a 	sub	r2,r16,r2
100071e4:	18800015 	stw	r2,0(r3)
100071e8:	9805883a 	mov	r2,r19
100071ec:	dfc00717 	ldw	ra,28(sp)
100071f0:	dd000617 	ldw	r20,24(sp)
100071f4:	dcc00517 	ldw	r19,20(sp)
100071f8:	dc800417 	ldw	r18,16(sp)
100071fc:	dc400317 	ldw	r17,12(sp)
10007200:	dc000217 	ldw	r16,8(sp)
10007204:	dec00804 	addi	sp,sp,32
10007208:	f800283a 	ret
1000720c:	d809883a 	mov	r4,sp
10007210:	00067580 	call	10006758 <__lo0bits>
10007214:	d8c00017 	ldw	r3,0(sp)
10007218:	04000044 	movi	r16,1
1000721c:	9c000415 	stw	r16,16(r19)
10007220:	98c00515 	stw	r3,20(r19)
10007224:	10800804 	addi	r2,r2,32
10007228:	883fe126 	beq	r17,zero,100071b0 <__alt_data_end+0xf80071b0>
1000722c:	00c00d44 	movi	r3,53
10007230:	8c7ef344 	addi	r17,r17,-1075
10007234:	88a3883a 	add	r17,r17,r2
10007238:	1885c83a 	sub	r2,r3,r2
1000723c:	d8c00817 	ldw	r3,32(sp)
10007240:	94400015 	stw	r17,0(r18)
10007244:	18800015 	stw	r2,0(r3)
10007248:	003fe706 	br	100071e8 <__alt_data_end+0xf80071e8>
1000724c:	01000804 	movi	r4,32
10007250:	2089c83a 	sub	r4,r4,r2
10007254:	1908983a 	sll	r4,r3,r4
10007258:	d9400117 	ldw	r5,4(sp)
1000725c:	1886d83a 	srl	r3,r3,r2
10007260:	2148b03a 	or	r4,r4,r5
10007264:	99000515 	stw	r4,20(r19)
10007268:	d8c00015 	stw	r3,0(sp)
1000726c:	003fca06 	br	10007198 <__alt_data_end+0xf8007198>

10007270 <__ratio>:
10007270:	defff904 	addi	sp,sp,-28
10007274:	dc400315 	stw	r17,12(sp)
10007278:	2823883a 	mov	r17,r5
1000727c:	d9400104 	addi	r5,sp,4
10007280:	dfc00615 	stw	ra,24(sp)
10007284:	dcc00515 	stw	r19,20(sp)
10007288:	dc800415 	stw	r18,16(sp)
1000728c:	2027883a 	mov	r19,r4
10007290:	dc000215 	stw	r16,8(sp)
10007294:	00070180 	call	10007018 <__b2d>
10007298:	d80b883a 	mov	r5,sp
1000729c:	8809883a 	mov	r4,r17
100072a0:	1025883a 	mov	r18,r2
100072a4:	1821883a 	mov	r16,r3
100072a8:	00070180 	call	10007018 <__b2d>
100072ac:	8a000417 	ldw	r8,16(r17)
100072b0:	99000417 	ldw	r4,16(r19)
100072b4:	d9400117 	ldw	r5,4(sp)
100072b8:	2209c83a 	sub	r4,r4,r8
100072bc:	2010917a 	slli	r8,r4,5
100072c0:	d9000017 	ldw	r4,0(sp)
100072c4:	2909c83a 	sub	r4,r5,r4
100072c8:	4109883a 	add	r4,r8,r4
100072cc:	01000e0e 	bge	zero,r4,10007308 <__ratio+0x98>
100072d0:	2008953a 	slli	r4,r4,20
100072d4:	2421883a 	add	r16,r4,r16
100072d8:	100d883a 	mov	r6,r2
100072dc:	180f883a 	mov	r7,r3
100072e0:	9009883a 	mov	r4,r18
100072e4:	800b883a 	mov	r5,r16
100072e8:	000bab40 	call	1000bab4 <__divdf3>
100072ec:	dfc00617 	ldw	ra,24(sp)
100072f0:	dcc00517 	ldw	r19,20(sp)
100072f4:	dc800417 	ldw	r18,16(sp)
100072f8:	dc400317 	ldw	r17,12(sp)
100072fc:	dc000217 	ldw	r16,8(sp)
10007300:	dec00704 	addi	sp,sp,28
10007304:	f800283a 	ret
10007308:	2008953a 	slli	r4,r4,20
1000730c:	1907c83a 	sub	r3,r3,r4
10007310:	003ff106 	br	100072d8 <__alt_data_end+0xf80072d8>

10007314 <_mprec_log10>:
10007314:	defffe04 	addi	sp,sp,-8
10007318:	dc000015 	stw	r16,0(sp)
1000731c:	dfc00115 	stw	ra,4(sp)
10007320:	008005c4 	movi	r2,23
10007324:	2021883a 	mov	r16,r4
10007328:	11000d0e 	bge	r2,r4,10007360 <_mprec_log10+0x4c>
1000732c:	0005883a 	mov	r2,zero
10007330:	00cffc34 	movhi	r3,16368
10007334:	843fffc4 	addi	r16,r16,-1
10007338:	000d883a 	mov	r6,zero
1000733c:	01d00934 	movhi	r7,16420
10007340:	1009883a 	mov	r4,r2
10007344:	180b883a 	mov	r5,r3
10007348:	000c6dc0 	call	1000c6dc <__muldf3>
1000734c:	803ff91e 	bne	r16,zero,10007334 <__alt_data_end+0xf8007334>
10007350:	dfc00117 	ldw	ra,4(sp)
10007354:	dc000017 	ldw	r16,0(sp)
10007358:	dec00204 	addi	sp,sp,8
1000735c:	f800283a 	ret
10007360:	202090fa 	slli	r16,r4,3
10007364:	00840074 	movhi	r2,4097
10007368:	1080d404 	addi	r2,r2,848
1000736c:	1421883a 	add	r16,r2,r16
10007370:	80800017 	ldw	r2,0(r16)
10007374:	80c00117 	ldw	r3,4(r16)
10007378:	dfc00117 	ldw	ra,4(sp)
1000737c:	dc000017 	ldw	r16,0(sp)
10007380:	dec00204 	addi	sp,sp,8
10007384:	f800283a 	ret

10007388 <__copybits>:
10007388:	297fffc4 	addi	r5,r5,-1
1000738c:	280fd17a 	srai	r7,r5,5
10007390:	30c00417 	ldw	r3,16(r6)
10007394:	30800504 	addi	r2,r6,20
10007398:	39c00044 	addi	r7,r7,1
1000739c:	18c7883a 	add	r3,r3,r3
100073a0:	39cf883a 	add	r7,r7,r7
100073a4:	18c7883a 	add	r3,r3,r3
100073a8:	39cf883a 	add	r7,r7,r7
100073ac:	10c7883a 	add	r3,r2,r3
100073b0:	21cf883a 	add	r7,r4,r7
100073b4:	10c00d2e 	bgeu	r2,r3,100073ec <__copybits+0x64>
100073b8:	200b883a 	mov	r5,r4
100073bc:	12000017 	ldw	r8,0(r2)
100073c0:	29400104 	addi	r5,r5,4
100073c4:	10800104 	addi	r2,r2,4
100073c8:	2a3fff15 	stw	r8,-4(r5)
100073cc:	10fffb36 	bltu	r2,r3,100073bc <__alt_data_end+0xf80073bc>
100073d0:	1985c83a 	sub	r2,r3,r6
100073d4:	10bffac4 	addi	r2,r2,-21
100073d8:	1004d0ba 	srli	r2,r2,2
100073dc:	10800044 	addi	r2,r2,1
100073e0:	1085883a 	add	r2,r2,r2
100073e4:	1085883a 	add	r2,r2,r2
100073e8:	2089883a 	add	r4,r4,r2
100073ec:	21c0032e 	bgeu	r4,r7,100073fc <__copybits+0x74>
100073f0:	20000015 	stw	zero,0(r4)
100073f4:	21000104 	addi	r4,r4,4
100073f8:	21fffd36 	bltu	r4,r7,100073f0 <__alt_data_end+0xf80073f0>
100073fc:	f800283a 	ret

10007400 <__any_on>:
10007400:	20c00417 	ldw	r3,16(r4)
10007404:	2805d17a 	srai	r2,r5,5
10007408:	21000504 	addi	r4,r4,20
1000740c:	18800d0e 	bge	r3,r2,10007444 <__any_on+0x44>
10007410:	18c7883a 	add	r3,r3,r3
10007414:	18c7883a 	add	r3,r3,r3
10007418:	20c7883a 	add	r3,r4,r3
1000741c:	20c0192e 	bgeu	r4,r3,10007484 <__any_on+0x84>
10007420:	18bfff17 	ldw	r2,-4(r3)
10007424:	18ffff04 	addi	r3,r3,-4
10007428:	1000041e 	bne	r2,zero,1000743c <__any_on+0x3c>
1000742c:	20c0142e 	bgeu	r4,r3,10007480 <__any_on+0x80>
10007430:	18ffff04 	addi	r3,r3,-4
10007434:	19400017 	ldw	r5,0(r3)
10007438:	283ffc26 	beq	r5,zero,1000742c <__alt_data_end+0xf800742c>
1000743c:	00800044 	movi	r2,1
10007440:	f800283a 	ret
10007444:	10c00a0e 	bge	r2,r3,10007470 <__any_on+0x70>
10007448:	1085883a 	add	r2,r2,r2
1000744c:	1085883a 	add	r2,r2,r2
10007450:	294007cc 	andi	r5,r5,31
10007454:	2087883a 	add	r3,r4,r2
10007458:	283ff026 	beq	r5,zero,1000741c <__alt_data_end+0xf800741c>
1000745c:	19800017 	ldw	r6,0(r3)
10007460:	3144d83a 	srl	r2,r6,r5
10007464:	114a983a 	sll	r5,r2,r5
10007468:	317ff41e 	bne	r6,r5,1000743c <__alt_data_end+0xf800743c>
1000746c:	003feb06 	br	1000741c <__alt_data_end+0xf800741c>
10007470:	1085883a 	add	r2,r2,r2
10007474:	1085883a 	add	r2,r2,r2
10007478:	2087883a 	add	r3,r4,r2
1000747c:	003fe706 	br	1000741c <__alt_data_end+0xf800741c>
10007480:	f800283a 	ret
10007484:	0005883a 	mov	r2,zero
10007488:	f800283a 	ret

1000748c <_putc_r>:
1000748c:	defffc04 	addi	sp,sp,-16
10007490:	dc000215 	stw	r16,8(sp)
10007494:	dfc00315 	stw	ra,12(sp)
10007498:	2021883a 	mov	r16,r4
1000749c:	20000226 	beq	r4,zero,100074a8 <_putc_r+0x1c>
100074a0:	20800e17 	ldw	r2,56(r4)
100074a4:	10001b26 	beq	r2,zero,10007514 <_putc_r+0x88>
100074a8:	30800217 	ldw	r2,8(r6)
100074ac:	10bfffc4 	addi	r2,r2,-1
100074b0:	30800215 	stw	r2,8(r6)
100074b4:	10000a16 	blt	r2,zero,100074e0 <_putc_r+0x54>
100074b8:	30800017 	ldw	r2,0(r6)
100074bc:	11400005 	stb	r5,0(r2)
100074c0:	30800017 	ldw	r2,0(r6)
100074c4:	10c00044 	addi	r3,r2,1
100074c8:	30c00015 	stw	r3,0(r6)
100074cc:	10800003 	ldbu	r2,0(r2)
100074d0:	dfc00317 	ldw	ra,12(sp)
100074d4:	dc000217 	ldw	r16,8(sp)
100074d8:	dec00404 	addi	sp,sp,16
100074dc:	f800283a 	ret
100074e0:	30c00617 	ldw	r3,24(r6)
100074e4:	10c00616 	blt	r2,r3,10007500 <_putc_r+0x74>
100074e8:	30800017 	ldw	r2,0(r6)
100074ec:	00c00284 	movi	r3,10
100074f0:	11400005 	stb	r5,0(r2)
100074f4:	30800017 	ldw	r2,0(r6)
100074f8:	11400003 	ldbu	r5,0(r2)
100074fc:	28fff11e 	bne	r5,r3,100074c4 <__alt_data_end+0xf80074c4>
10007500:	8009883a 	mov	r4,r16
10007504:	dfc00317 	ldw	ra,12(sp)
10007508:	dc000217 	ldw	r16,8(sp)
1000750c:	dec00404 	addi	sp,sp,16
10007510:	00092381 	jmpi	10009238 <__swbuf_r>
10007514:	d9400015 	stw	r5,0(sp)
10007518:	d9800115 	stw	r6,4(sp)
1000751c:	0000e340 	call	10000e34 <__sinit>
10007520:	d9800117 	ldw	r6,4(sp)
10007524:	d9400017 	ldw	r5,0(sp)
10007528:	003fdf06 	br	100074a8 <__alt_data_end+0xf80074a8>

1000752c <putc>:
1000752c:	00840074 	movhi	r2,4097
10007530:	defffc04 	addi	sp,sp,-16
10007534:	10880a04 	addi	r2,r2,8232
10007538:	dc000115 	stw	r16,4(sp)
1000753c:	14000017 	ldw	r16,0(r2)
10007540:	dc400215 	stw	r17,8(sp)
10007544:	dfc00315 	stw	ra,12(sp)
10007548:	2023883a 	mov	r17,r4
1000754c:	80000226 	beq	r16,zero,10007558 <putc+0x2c>
10007550:	80800e17 	ldw	r2,56(r16)
10007554:	10001a26 	beq	r2,zero,100075c0 <putc+0x94>
10007558:	28800217 	ldw	r2,8(r5)
1000755c:	10bfffc4 	addi	r2,r2,-1
10007560:	28800215 	stw	r2,8(r5)
10007564:	10000b16 	blt	r2,zero,10007594 <putc+0x68>
10007568:	28800017 	ldw	r2,0(r5)
1000756c:	14400005 	stb	r17,0(r2)
10007570:	28800017 	ldw	r2,0(r5)
10007574:	10c00044 	addi	r3,r2,1
10007578:	28c00015 	stw	r3,0(r5)
1000757c:	10800003 	ldbu	r2,0(r2)
10007580:	dfc00317 	ldw	ra,12(sp)
10007584:	dc400217 	ldw	r17,8(sp)
10007588:	dc000117 	ldw	r16,4(sp)
1000758c:	dec00404 	addi	sp,sp,16
10007590:	f800283a 	ret
10007594:	28c00617 	ldw	r3,24(r5)
10007598:	10c00e16 	blt	r2,r3,100075d4 <putc+0xa8>
1000759c:	28800017 	ldw	r2,0(r5)
100075a0:	01000284 	movi	r4,10
100075a4:	14400005 	stb	r17,0(r2)
100075a8:	28800017 	ldw	r2,0(r5)
100075ac:	10c00003 	ldbu	r3,0(r2)
100075b0:	193ff01e 	bne	r3,r4,10007574 <__alt_data_end+0xf8007574>
100075b4:	280d883a 	mov	r6,r5
100075b8:	180b883a 	mov	r5,r3
100075bc:	00000706 	br	100075dc <putc+0xb0>
100075c0:	8009883a 	mov	r4,r16
100075c4:	d9400015 	stw	r5,0(sp)
100075c8:	0000e340 	call	10000e34 <__sinit>
100075cc:	d9400017 	ldw	r5,0(sp)
100075d0:	003fe106 	br	10007558 <__alt_data_end+0xf8007558>
100075d4:	280d883a 	mov	r6,r5
100075d8:	880b883a 	mov	r5,r17
100075dc:	8009883a 	mov	r4,r16
100075e0:	dfc00317 	ldw	ra,12(sp)
100075e4:	dc400217 	ldw	r17,8(sp)
100075e8:	dc000117 	ldw	r16,4(sp)
100075ec:	dec00404 	addi	sp,sp,16
100075f0:	00092381 	jmpi	10009238 <__swbuf_r>

100075f4 <_read_r>:
100075f4:	defffd04 	addi	sp,sp,-12
100075f8:	2805883a 	mov	r2,r5
100075fc:	dc000015 	stw	r16,0(sp)
10007600:	04040074 	movhi	r16,4097
10007604:	dc400115 	stw	r17,4(sp)
10007608:	300b883a 	mov	r5,r6
1000760c:	840edb04 	addi	r16,r16,15212
10007610:	2023883a 	mov	r17,r4
10007614:	380d883a 	mov	r6,r7
10007618:	1009883a 	mov	r4,r2
1000761c:	dfc00215 	stw	ra,8(sp)
10007620:	80000015 	stw	zero,0(r16)
10007624:	000026c0 	call	1000026c <read>
10007628:	00ffffc4 	movi	r3,-1
1000762c:	10c00526 	beq	r2,r3,10007644 <_read_r+0x50>
10007630:	dfc00217 	ldw	ra,8(sp)
10007634:	dc400117 	ldw	r17,4(sp)
10007638:	dc000017 	ldw	r16,0(sp)
1000763c:	dec00304 	addi	sp,sp,12
10007640:	f800283a 	ret
10007644:	80c00017 	ldw	r3,0(r16)
10007648:	183ff926 	beq	r3,zero,10007630 <__alt_data_end+0xf8007630>
1000764c:	88c00015 	stw	r3,0(r17)
10007650:	003ff706 	br	10007630 <__alt_data_end+0xf8007630>

10007654 <__fpclassifyd>:
10007654:	00a00034 	movhi	r2,32768
10007658:	10bfffc4 	addi	r2,r2,-1
1000765c:	2884703a 	and	r2,r5,r2
10007660:	10000726 	beq	r2,zero,10007680 <__fpclassifyd+0x2c>
10007664:	00fffc34 	movhi	r3,65520
10007668:	019ff834 	movhi	r6,32736
1000766c:	28c7883a 	add	r3,r5,r3
10007670:	31bfffc4 	addi	r6,r6,-1
10007674:	30c00536 	bltu	r6,r3,1000768c <__fpclassifyd+0x38>
10007678:	00800104 	movi	r2,4
1000767c:	f800283a 	ret
10007680:	2000021e 	bne	r4,zero,1000768c <__fpclassifyd+0x38>
10007684:	00800084 	movi	r2,2
10007688:	f800283a 	ret
1000768c:	00dffc34 	movhi	r3,32752
10007690:	019ff834 	movhi	r6,32736
10007694:	28cb883a 	add	r5,r5,r3
10007698:	31bfffc4 	addi	r6,r6,-1
1000769c:	317ff62e 	bgeu	r6,r5,10007678 <__alt_data_end+0xf8007678>
100076a0:	01400434 	movhi	r5,16
100076a4:	297fffc4 	addi	r5,r5,-1
100076a8:	28800236 	bltu	r5,r2,100076b4 <__fpclassifyd+0x60>
100076ac:	008000c4 	movi	r2,3
100076b0:	f800283a 	ret
100076b4:	10c00226 	beq	r2,r3,100076c0 <__fpclassifyd+0x6c>
100076b8:	0005883a 	mov	r2,zero
100076bc:	f800283a 	ret
100076c0:	2005003a 	cmpeq	r2,r4,zero
100076c4:	f800283a 	ret

100076c8 <_init_signal_r>:
100076c8:	2080b717 	ldw	r2,732(r4)
100076cc:	10000226 	beq	r2,zero,100076d8 <_init_signal_r+0x10>
100076d0:	0005883a 	mov	r2,zero
100076d4:	f800283a 	ret
100076d8:	defffe04 	addi	sp,sp,-8
100076dc:	01402004 	movi	r5,128
100076e0:	dc000015 	stw	r16,0(sp)
100076e4:	dfc00115 	stw	ra,4(sp)
100076e8:	2021883a 	mov	r16,r4
100076ec:	00014c40 	call	100014c4 <_malloc_r>
100076f0:	8080b715 	stw	r2,732(r16)
100076f4:	10000d26 	beq	r2,zero,1000772c <_init_signal_r+0x64>
100076f8:	0007883a 	mov	r3,zero
100076fc:	01002004 	movi	r4,128
10007700:	00000106 	br	10007708 <_init_signal_r+0x40>
10007704:	8080b717 	ldw	r2,732(r16)
10007708:	10c5883a 	add	r2,r2,r3
1000770c:	10000015 	stw	zero,0(r2)
10007710:	18c00104 	addi	r3,r3,4
10007714:	193ffb1e 	bne	r3,r4,10007704 <__alt_data_end+0xf8007704>
10007718:	0005883a 	mov	r2,zero
1000771c:	dfc00117 	ldw	ra,4(sp)
10007720:	dc000017 	ldw	r16,0(sp)
10007724:	dec00204 	addi	sp,sp,8
10007728:	f800283a 	ret
1000772c:	00bfffc4 	movi	r2,-1
10007730:	003ffa06 	br	1000771c <__alt_data_end+0xf800771c>

10007734 <_signal_r>:
10007734:	00c007c4 	movi	r3,31
10007738:	19401536 	bltu	r3,r5,10007790 <_signal_r+0x5c>
1000773c:	2080b717 	ldw	r2,732(r4)
10007740:	defffc04 	addi	sp,sp,-16
10007744:	dc800215 	stw	r18,8(sp)
10007748:	dc400115 	stw	r17,4(sp)
1000774c:	dc000015 	stw	r16,0(sp)
10007750:	dfc00315 	stw	ra,12(sp)
10007754:	3023883a 	mov	r17,r6
10007758:	2021883a 	mov	r16,r4
1000775c:	2825883a 	mov	r18,r5
10007760:	10000f26 	beq	r2,zero,100077a0 <_signal_r+0x6c>
10007764:	948b883a 	add	r5,r18,r18
10007768:	294b883a 	add	r5,r5,r5
1000776c:	114b883a 	add	r5,r2,r5
10007770:	28800017 	ldw	r2,0(r5)
10007774:	2c400015 	stw	r17,0(r5)
10007778:	dfc00317 	ldw	ra,12(sp)
1000777c:	dc800217 	ldw	r18,8(sp)
10007780:	dc400117 	ldw	r17,4(sp)
10007784:	dc000017 	ldw	r16,0(sp)
10007788:	dec00404 	addi	sp,sp,16
1000778c:	f800283a 	ret
10007790:	00c00584 	movi	r3,22
10007794:	20c00015 	stw	r3,0(r4)
10007798:	00bfffc4 	movi	r2,-1
1000779c:	f800283a 	ret
100077a0:	00076c80 	call	100076c8 <_init_signal_r>
100077a4:	1000021e 	bne	r2,zero,100077b0 <_signal_r+0x7c>
100077a8:	8080b717 	ldw	r2,732(r16)
100077ac:	003fed06 	br	10007764 <__alt_data_end+0xf8007764>
100077b0:	00bfffc4 	movi	r2,-1
100077b4:	003ff006 	br	10007778 <__alt_data_end+0xf8007778>

100077b8 <_raise_r>:
100077b8:	008007c4 	movi	r2,31
100077bc:	11402936 	bltu	r2,r5,10007864 <_raise_r+0xac>
100077c0:	20c0b717 	ldw	r3,732(r4)
100077c4:	defffd04 	addi	sp,sp,-12
100077c8:	dc400115 	stw	r17,4(sp)
100077cc:	dc000015 	stw	r16,0(sp)
100077d0:	dfc00215 	stw	ra,8(sp)
100077d4:	2021883a 	mov	r16,r4
100077d8:	2823883a 	mov	r17,r5
100077dc:	18001726 	beq	r3,zero,1000783c <_raise_r+0x84>
100077e0:	2945883a 	add	r2,r5,r5
100077e4:	1085883a 	add	r2,r2,r2
100077e8:	1887883a 	add	r3,r3,r2
100077ec:	19800017 	ldw	r6,0(r3)
100077f0:	30001226 	beq	r6,zero,1000783c <_raise_r+0x84>
100077f4:	00800044 	movi	r2,1
100077f8:	30800e26 	beq	r6,r2,10007834 <_raise_r+0x7c>
100077fc:	013fffc4 	movi	r4,-1
10007800:	31000926 	beq	r6,r4,10007828 <_raise_r+0x70>
10007804:	18000015 	stw	zero,0(r3)
10007808:	2809883a 	mov	r4,r5
1000780c:	303ee83a 	callr	r6
10007810:	0005883a 	mov	r2,zero
10007814:	dfc00217 	ldw	ra,8(sp)
10007818:	dc400117 	ldw	r17,4(sp)
1000781c:	dc000017 	ldw	r16,0(sp)
10007820:	dec00304 	addi	sp,sp,12
10007824:	f800283a 	ret
10007828:	00c00584 	movi	r3,22
1000782c:	80c00015 	stw	r3,0(r16)
10007830:	003ff806 	br	10007814 <__alt_data_end+0xf8007814>
10007834:	0005883a 	mov	r2,zero
10007838:	003ff606 	br	10007814 <__alt_data_end+0xf8007814>
1000783c:	8009883a 	mov	r4,r16
10007840:	00079c80 	call	100079c8 <_getpid_r>
10007844:	880d883a 	mov	r6,r17
10007848:	100b883a 	mov	r5,r2
1000784c:	8009883a 	mov	r4,r16
10007850:	dfc00217 	ldw	ra,8(sp)
10007854:	dc400117 	ldw	r17,4(sp)
10007858:	dc000017 	ldw	r16,0(sp)
1000785c:	dec00304 	addi	sp,sp,12
10007860:	000796c1 	jmpi	1000796c <_kill_r>
10007864:	00800584 	movi	r2,22
10007868:	20800015 	stw	r2,0(r4)
1000786c:	00bfffc4 	movi	r2,-1
10007870:	f800283a 	ret

10007874 <__sigtramp_r>:
10007874:	008007c4 	movi	r2,31
10007878:	11402436 	bltu	r2,r5,1000790c <__sigtramp_r+0x98>
1000787c:	20c0b717 	ldw	r3,732(r4)
10007880:	defffd04 	addi	sp,sp,-12
10007884:	dc400115 	stw	r17,4(sp)
10007888:	dc000015 	stw	r16,0(sp)
1000788c:	dfc00215 	stw	ra,8(sp)
10007890:	2021883a 	mov	r16,r4
10007894:	2823883a 	mov	r17,r5
10007898:	18001826 	beq	r3,zero,100078fc <__sigtramp_r+0x88>
1000789c:	8c45883a 	add	r2,r17,r17
100078a0:	1085883a 	add	r2,r2,r2
100078a4:	1885883a 	add	r2,r3,r2
100078a8:	10c00017 	ldw	r3,0(r2)
100078ac:	18001126 	beq	r3,zero,100078f4 <__sigtramp_r+0x80>
100078b0:	013fffc4 	movi	r4,-1
100078b4:	19000d26 	beq	r3,r4,100078ec <__sigtramp_r+0x78>
100078b8:	01000044 	movi	r4,1
100078bc:	19000926 	beq	r3,r4,100078e4 <__sigtramp_r+0x70>
100078c0:	10000015 	stw	zero,0(r2)
100078c4:	8809883a 	mov	r4,r17
100078c8:	183ee83a 	callr	r3
100078cc:	0005883a 	mov	r2,zero
100078d0:	dfc00217 	ldw	ra,8(sp)
100078d4:	dc400117 	ldw	r17,4(sp)
100078d8:	dc000017 	ldw	r16,0(sp)
100078dc:	dec00304 	addi	sp,sp,12
100078e0:	f800283a 	ret
100078e4:	008000c4 	movi	r2,3
100078e8:	003ff906 	br	100078d0 <__alt_data_end+0xf80078d0>
100078ec:	00800084 	movi	r2,2
100078f0:	003ff706 	br	100078d0 <__alt_data_end+0xf80078d0>
100078f4:	00800044 	movi	r2,1
100078f8:	003ff506 	br	100078d0 <__alt_data_end+0xf80078d0>
100078fc:	00076c80 	call	100076c8 <_init_signal_r>
10007900:	1000041e 	bne	r2,zero,10007914 <__sigtramp_r+0xa0>
10007904:	80c0b717 	ldw	r3,732(r16)
10007908:	003fe406 	br	1000789c <__alt_data_end+0xf800789c>
1000790c:	00bfffc4 	movi	r2,-1
10007910:	f800283a 	ret
10007914:	00bfffc4 	movi	r2,-1
10007918:	003fed06 	br	100078d0 <__alt_data_end+0xf80078d0>

1000791c <raise>:
1000791c:	00840074 	movhi	r2,4097
10007920:	10880a04 	addi	r2,r2,8232
10007924:	200b883a 	mov	r5,r4
10007928:	11000017 	ldw	r4,0(r2)
1000792c:	00077b81 	jmpi	100077b8 <_raise_r>

10007930 <signal>:
10007930:	00840074 	movhi	r2,4097
10007934:	10880a04 	addi	r2,r2,8232
10007938:	280d883a 	mov	r6,r5
1000793c:	200b883a 	mov	r5,r4
10007940:	11000017 	ldw	r4,0(r2)
10007944:	00077341 	jmpi	10007734 <_signal_r>

10007948 <_init_signal>:
10007948:	00840074 	movhi	r2,4097
1000794c:	10880a04 	addi	r2,r2,8232
10007950:	11000017 	ldw	r4,0(r2)
10007954:	00076c81 	jmpi	100076c8 <_init_signal_r>

10007958 <__sigtramp>:
10007958:	00840074 	movhi	r2,4097
1000795c:	10880a04 	addi	r2,r2,8232
10007960:	200b883a 	mov	r5,r4
10007964:	11000017 	ldw	r4,0(r2)
10007968:	00078741 	jmpi	10007874 <__sigtramp_r>

1000796c <_kill_r>:
1000796c:	defffd04 	addi	sp,sp,-12
10007970:	2805883a 	mov	r2,r5
10007974:	dc000015 	stw	r16,0(sp)
10007978:	04040074 	movhi	r16,4097
1000797c:	dc400115 	stw	r17,4(sp)
10007980:	840edb04 	addi	r16,r16,15212
10007984:	2023883a 	mov	r17,r4
10007988:	300b883a 	mov	r5,r6
1000798c:	1009883a 	mov	r4,r2
10007990:	dfc00215 	stw	ra,8(sp)
10007994:	80000015 	stw	zero,0(r16)
10007998:	000de580 	call	1000de58 <kill>
1000799c:	00ffffc4 	movi	r3,-1
100079a0:	10c00526 	beq	r2,r3,100079b8 <_kill_r+0x4c>
100079a4:	dfc00217 	ldw	ra,8(sp)
100079a8:	dc400117 	ldw	r17,4(sp)
100079ac:	dc000017 	ldw	r16,0(sp)
100079b0:	dec00304 	addi	sp,sp,12
100079b4:	f800283a 	ret
100079b8:	80c00017 	ldw	r3,0(r16)
100079bc:	183ff926 	beq	r3,zero,100079a4 <__alt_data_end+0xf80079a4>
100079c0:	88c00015 	stw	r3,0(r17)
100079c4:	003ff706 	br	100079a4 <__alt_data_end+0xf80079a4>

100079c8 <_getpid_r>:
100079c8:	000dd141 	jmpi	1000dd14 <getpid>

100079cc <strcmp>:
100079cc:	2144b03a 	or	r2,r4,r5
100079d0:	108000cc 	andi	r2,r2,3
100079d4:	1000171e 	bne	r2,zero,10007a34 <strcmp+0x68>
100079d8:	20800017 	ldw	r2,0(r4)
100079dc:	28c00017 	ldw	r3,0(r5)
100079e0:	10c0141e 	bne	r2,r3,10007a34 <strcmp+0x68>
100079e4:	027fbff4 	movhi	r9,65279
100079e8:	4a7fbfc4 	addi	r9,r9,-257
100079ec:	0086303a 	nor	r3,zero,r2
100079f0:	02202074 	movhi	r8,32897
100079f4:	1245883a 	add	r2,r2,r9
100079f8:	42202004 	addi	r8,r8,-32640
100079fc:	10c4703a 	and	r2,r2,r3
10007a00:	1204703a 	and	r2,r2,r8
10007a04:	10000226 	beq	r2,zero,10007a10 <strcmp+0x44>
10007a08:	00002306 	br	10007a98 <strcmp+0xcc>
10007a0c:	1000221e 	bne	r2,zero,10007a98 <strcmp+0xcc>
10007a10:	21000104 	addi	r4,r4,4
10007a14:	20c00017 	ldw	r3,0(r4)
10007a18:	29400104 	addi	r5,r5,4
10007a1c:	29800017 	ldw	r6,0(r5)
10007a20:	1a4f883a 	add	r7,r3,r9
10007a24:	00c4303a 	nor	r2,zero,r3
10007a28:	3884703a 	and	r2,r7,r2
10007a2c:	1204703a 	and	r2,r2,r8
10007a30:	19bff626 	beq	r3,r6,10007a0c <__alt_data_end+0xf8007a0c>
10007a34:	20800003 	ldbu	r2,0(r4)
10007a38:	10c03fcc 	andi	r3,r2,255
10007a3c:	18c0201c 	xori	r3,r3,128
10007a40:	18ffe004 	addi	r3,r3,-128
10007a44:	18000c26 	beq	r3,zero,10007a78 <strcmp+0xac>
10007a48:	29800007 	ldb	r6,0(r5)
10007a4c:	19800326 	beq	r3,r6,10007a5c <strcmp+0x90>
10007a50:	00001306 	br	10007aa0 <strcmp+0xd4>
10007a54:	29800007 	ldb	r6,0(r5)
10007a58:	11800b1e 	bne	r2,r6,10007a88 <strcmp+0xbc>
10007a5c:	21000044 	addi	r4,r4,1
10007a60:	20c00003 	ldbu	r3,0(r4)
10007a64:	29400044 	addi	r5,r5,1
10007a68:	18803fcc 	andi	r2,r3,255
10007a6c:	1080201c 	xori	r2,r2,128
10007a70:	10bfe004 	addi	r2,r2,-128
10007a74:	103ff71e 	bne	r2,zero,10007a54 <__alt_data_end+0xf8007a54>
10007a78:	0007883a 	mov	r3,zero
10007a7c:	28800003 	ldbu	r2,0(r5)
10007a80:	1885c83a 	sub	r2,r3,r2
10007a84:	f800283a 	ret
10007a88:	28800003 	ldbu	r2,0(r5)
10007a8c:	18c03fcc 	andi	r3,r3,255
10007a90:	1885c83a 	sub	r2,r3,r2
10007a94:	f800283a 	ret
10007a98:	0005883a 	mov	r2,zero
10007a9c:	f800283a 	ret
10007aa0:	10c03fcc 	andi	r3,r2,255
10007aa4:	003ff506 	br	10007a7c <__alt_data_end+0xf8007a7c>

10007aa8 <strlen>:
10007aa8:	208000cc 	andi	r2,r4,3
10007aac:	10002026 	beq	r2,zero,10007b30 <strlen+0x88>
10007ab0:	20800007 	ldb	r2,0(r4)
10007ab4:	10002026 	beq	r2,zero,10007b38 <strlen+0x90>
10007ab8:	2005883a 	mov	r2,r4
10007abc:	00000206 	br	10007ac8 <strlen+0x20>
10007ac0:	10c00007 	ldb	r3,0(r2)
10007ac4:	18001826 	beq	r3,zero,10007b28 <strlen+0x80>
10007ac8:	10800044 	addi	r2,r2,1
10007acc:	10c000cc 	andi	r3,r2,3
10007ad0:	183ffb1e 	bne	r3,zero,10007ac0 <__alt_data_end+0xf8007ac0>
10007ad4:	10c00017 	ldw	r3,0(r2)
10007ad8:	01ffbff4 	movhi	r7,65279
10007adc:	39ffbfc4 	addi	r7,r7,-257
10007ae0:	00ca303a 	nor	r5,zero,r3
10007ae4:	01a02074 	movhi	r6,32897
10007ae8:	19c7883a 	add	r3,r3,r7
10007aec:	31a02004 	addi	r6,r6,-32640
10007af0:	1946703a 	and	r3,r3,r5
10007af4:	1986703a 	and	r3,r3,r6
10007af8:	1800091e 	bne	r3,zero,10007b20 <strlen+0x78>
10007afc:	10800104 	addi	r2,r2,4
10007b00:	10c00017 	ldw	r3,0(r2)
10007b04:	19cb883a 	add	r5,r3,r7
10007b08:	00c6303a 	nor	r3,zero,r3
10007b0c:	28c6703a 	and	r3,r5,r3
10007b10:	1986703a 	and	r3,r3,r6
10007b14:	183ff926 	beq	r3,zero,10007afc <__alt_data_end+0xf8007afc>
10007b18:	00000106 	br	10007b20 <strlen+0x78>
10007b1c:	10800044 	addi	r2,r2,1
10007b20:	10c00007 	ldb	r3,0(r2)
10007b24:	183ffd1e 	bne	r3,zero,10007b1c <__alt_data_end+0xf8007b1c>
10007b28:	1105c83a 	sub	r2,r2,r4
10007b2c:	f800283a 	ret
10007b30:	2005883a 	mov	r2,r4
10007b34:	003fe706 	br	10007ad4 <__alt_data_end+0xf8007ad4>
10007b38:	0005883a 	mov	r2,zero
10007b3c:	f800283a 	ret

10007b40 <__sprint_r.part.0>:
10007b40:	28801917 	ldw	r2,100(r5)
10007b44:	defff604 	addi	sp,sp,-40
10007b48:	dd400515 	stw	r21,20(sp)
10007b4c:	dfc00915 	stw	ra,36(sp)
10007b50:	df000815 	stw	fp,32(sp)
10007b54:	ddc00715 	stw	r23,28(sp)
10007b58:	dd800615 	stw	r22,24(sp)
10007b5c:	dd000415 	stw	r20,16(sp)
10007b60:	dcc00315 	stw	r19,12(sp)
10007b64:	dc800215 	stw	r18,8(sp)
10007b68:	dc400115 	stw	r17,4(sp)
10007b6c:	dc000015 	stw	r16,0(sp)
10007b70:	1088000c 	andi	r2,r2,8192
10007b74:	302b883a 	mov	r21,r6
10007b78:	10002e26 	beq	r2,zero,10007c34 <__sprint_r.part.0+0xf4>
10007b7c:	30800217 	ldw	r2,8(r6)
10007b80:	35800017 	ldw	r22,0(r6)
10007b84:	10002926 	beq	r2,zero,10007c2c <__sprint_r.part.0+0xec>
10007b88:	2827883a 	mov	r19,r5
10007b8c:	2029883a 	mov	r20,r4
10007b90:	b5c00104 	addi	r23,r22,4
10007b94:	04bfffc4 	movi	r18,-1
10007b98:	bc400017 	ldw	r17,0(r23)
10007b9c:	b4000017 	ldw	r16,0(r22)
10007ba0:	0039883a 	mov	fp,zero
10007ba4:	8822d0ba 	srli	r17,r17,2
10007ba8:	8800031e 	bne	r17,zero,10007bb8 <__sprint_r.part.0+0x78>
10007bac:	00001806 	br	10007c10 <__sprint_r.part.0+0xd0>
10007bb0:	84000104 	addi	r16,r16,4
10007bb4:	8f001526 	beq	r17,fp,10007c0c <__sprint_r.part.0+0xcc>
10007bb8:	81400017 	ldw	r5,0(r16)
10007bbc:	980d883a 	mov	r6,r19
10007bc0:	a009883a 	mov	r4,r20
10007bc4:	00095d00 	call	100095d0 <_fputwc_r>
10007bc8:	e7000044 	addi	fp,fp,1
10007bcc:	14bff81e 	bne	r2,r18,10007bb0 <__alt_data_end+0xf8007bb0>
10007bd0:	9005883a 	mov	r2,r18
10007bd4:	a8000215 	stw	zero,8(r21)
10007bd8:	a8000115 	stw	zero,4(r21)
10007bdc:	dfc00917 	ldw	ra,36(sp)
10007be0:	df000817 	ldw	fp,32(sp)
10007be4:	ddc00717 	ldw	r23,28(sp)
10007be8:	dd800617 	ldw	r22,24(sp)
10007bec:	dd400517 	ldw	r21,20(sp)
10007bf0:	dd000417 	ldw	r20,16(sp)
10007bf4:	dcc00317 	ldw	r19,12(sp)
10007bf8:	dc800217 	ldw	r18,8(sp)
10007bfc:	dc400117 	ldw	r17,4(sp)
10007c00:	dc000017 	ldw	r16,0(sp)
10007c04:	dec00a04 	addi	sp,sp,40
10007c08:	f800283a 	ret
10007c0c:	a8800217 	ldw	r2,8(r21)
10007c10:	8c63883a 	add	r17,r17,r17
10007c14:	8c63883a 	add	r17,r17,r17
10007c18:	1445c83a 	sub	r2,r2,r17
10007c1c:	a8800215 	stw	r2,8(r21)
10007c20:	b5800204 	addi	r22,r22,8
10007c24:	bdc00204 	addi	r23,r23,8
10007c28:	103fdb1e 	bne	r2,zero,10007b98 <__alt_data_end+0xf8007b98>
10007c2c:	0005883a 	mov	r2,zero
10007c30:	003fe806 	br	10007bd4 <__alt_data_end+0xf8007bd4>
10007c34:	00096d00 	call	100096d0 <__sfvwrite_r>
10007c38:	003fe606 	br	10007bd4 <__alt_data_end+0xf8007bd4>

10007c3c <__sprint_r>:
10007c3c:	30c00217 	ldw	r3,8(r6)
10007c40:	18000126 	beq	r3,zero,10007c48 <__sprint_r+0xc>
10007c44:	0007b401 	jmpi	10007b40 <__sprint_r.part.0>
10007c48:	30000115 	stw	zero,4(r6)
10007c4c:	0005883a 	mov	r2,zero
10007c50:	f800283a 	ret

10007c54 <___vfiprintf_internal_r>:
10007c54:	deffca04 	addi	sp,sp,-216
10007c58:	dd403115 	stw	r21,196(sp)
10007c5c:	dfc03515 	stw	ra,212(sp)
10007c60:	df003415 	stw	fp,208(sp)
10007c64:	ddc03315 	stw	r23,204(sp)
10007c68:	dd803215 	stw	r22,200(sp)
10007c6c:	dd003015 	stw	r20,192(sp)
10007c70:	dcc02f15 	stw	r19,188(sp)
10007c74:	dc802e15 	stw	r18,184(sp)
10007c78:	dc402d15 	stw	r17,180(sp)
10007c7c:	dc002c15 	stw	r16,176(sp)
10007c80:	d9002115 	stw	r4,132(sp)
10007c84:	d9402015 	stw	r5,128(sp)
10007c88:	d9c02215 	stw	r7,136(sp)
10007c8c:	302b883a 	mov	r21,r6
10007c90:	20000226 	beq	r4,zero,10007c9c <___vfiprintf_internal_r+0x48>
10007c94:	20800e17 	ldw	r2,56(r4)
10007c98:	1000cf26 	beq	r2,zero,10007fd8 <___vfiprintf_internal_r+0x384>
10007c9c:	d8c02017 	ldw	r3,128(sp)
10007ca0:	1880030b 	ldhu	r2,12(r3)
10007ca4:	10c8000c 	andi	r3,r2,8192
10007ca8:	1800071e 	bne	r3,zero,10007cc8 <___vfiprintf_internal_r+0x74>
10007cac:	d9402017 	ldw	r5,128(sp)
10007cb0:	00f7ffc4 	movi	r3,-8193
10007cb4:	10880014 	ori	r2,r2,8192
10007cb8:	29001917 	ldw	r4,100(r5)
10007cbc:	2880030d 	sth	r2,12(r5)
10007cc0:	20c6703a 	and	r3,r4,r3
10007cc4:	28c01915 	stw	r3,100(r5)
10007cc8:	10c0020c 	andi	r3,r2,8
10007ccc:	1800a526 	beq	r3,zero,10007f64 <___vfiprintf_internal_r+0x310>
10007cd0:	d9002017 	ldw	r4,128(sp)
10007cd4:	20c00417 	ldw	r3,16(r4)
10007cd8:	1800a226 	beq	r3,zero,10007f64 <___vfiprintf_internal_r+0x310>
10007cdc:	1080068c 	andi	r2,r2,26
10007ce0:	00c00284 	movi	r3,10
10007ce4:	10c0a826 	beq	r2,r3,10007f88 <___vfiprintf_internal_r+0x334>
10007ce8:	d9001a04 	addi	r4,sp,104
10007cec:	d94019c4 	addi	r5,sp,103
10007cf0:	04840074 	movhi	r18,4097
10007cf4:	2145c83a 	sub	r2,r4,r5
10007cf8:	94810604 	addi	r18,r18,1048
10007cfc:	d9001e15 	stw	r4,120(sp)
10007d00:	d9401f15 	stw	r5,124(sp)
10007d04:	dec01a15 	stw	sp,104(sp)
10007d08:	d8001c15 	stw	zero,112(sp)
10007d0c:	d8001b15 	stw	zero,108(sp)
10007d10:	d811883a 	mov	r8,sp
10007d14:	d8002615 	stw	zero,152(sp)
10007d18:	d8002415 	stw	zero,144(sp)
10007d1c:	d8802815 	stw	r2,160(sp)
10007d20:	a82d883a 	mov	r22,r21
10007d24:	b0800007 	ldb	r2,0(r22)
10007d28:	10040d26 	beq	r2,zero,10008d60 <___vfiprintf_internal_r+0x110c>
10007d2c:	00c00944 	movi	r3,37
10007d30:	b029883a 	mov	r20,r22
10007d34:	10c0021e 	bne	r2,r3,10007d40 <___vfiprintf_internal_r+0xec>
10007d38:	00001606 	br	10007d94 <___vfiprintf_internal_r+0x140>
10007d3c:	10c00326 	beq	r2,r3,10007d4c <___vfiprintf_internal_r+0xf8>
10007d40:	a5000044 	addi	r20,r20,1
10007d44:	a0800007 	ldb	r2,0(r20)
10007d48:	103ffc1e 	bne	r2,zero,10007d3c <__alt_data_end+0xf8007d3c>
10007d4c:	a5a1c83a 	sub	r16,r20,r22
10007d50:	80001026 	beq	r16,zero,10007d94 <___vfiprintf_internal_r+0x140>
10007d54:	d8c01c17 	ldw	r3,112(sp)
10007d58:	d8801b17 	ldw	r2,108(sp)
10007d5c:	45800015 	stw	r22,0(r8)
10007d60:	80c7883a 	add	r3,r16,r3
10007d64:	10800044 	addi	r2,r2,1
10007d68:	44000115 	stw	r16,4(r8)
10007d6c:	d8c01c15 	stw	r3,112(sp)
10007d70:	d8801b15 	stw	r2,108(sp)
10007d74:	010001c4 	movi	r4,7
10007d78:	2080750e 	bge	r4,r2,10007f50 <___vfiprintf_internal_r+0x2fc>
10007d7c:	1803951e 	bne	r3,zero,10008bd4 <___vfiprintf_internal_r+0xf80>
10007d80:	d8c02417 	ldw	r3,144(sp)
10007d84:	d8001b15 	stw	zero,108(sp)
10007d88:	d811883a 	mov	r8,sp
10007d8c:	1c07883a 	add	r3,r3,r16
10007d90:	d8c02415 	stw	r3,144(sp)
10007d94:	a0800007 	ldb	r2,0(r20)
10007d98:	1002e026 	beq	r2,zero,1000891c <___vfiprintf_internal_r+0xcc8>
10007d9c:	a5800044 	addi	r22,r20,1
10007da0:	a0c00047 	ldb	r3,1(r20)
10007da4:	d8001d85 	stb	zero,118(sp)
10007da8:	0027883a 	mov	r19,zero
10007dac:	d8002305 	stb	zero,140(sp)
10007db0:	043fffc4 	movi	r16,-1
10007db4:	d8002515 	stw	zero,148(sp)
10007db8:	0023883a 	mov	r17,zero
10007dbc:	05001604 	movi	r20,88
10007dc0:	05400244 	movi	r21,9
10007dc4:	402f883a 	mov	r23,r8
10007dc8:	b5800044 	addi	r22,r22,1
10007dcc:	18bff804 	addi	r2,r3,-32
10007dd0:	a0827736 	bltu	r20,r2,100087b0 <___vfiprintf_internal_r+0xb5c>
10007dd4:	100490ba 	slli	r2,r2,2
10007dd8:	01040034 	movhi	r4,4096
10007ddc:	211f7b04 	addi	r4,r4,32236
10007de0:	1105883a 	add	r2,r2,r4
10007de4:	10800017 	ldw	r2,0(r2)
10007de8:	1000683a 	jmp	r2
10007dec:	100084b0 	cmpltui	zero,r2,530
10007df0:	100087b0 	cmpltui	zero,r2,542
10007df4:	100087b0 	cmpltui	zero,r2,542
10007df8:	100084cc 	andi	zero,r2,531
10007dfc:	100087b0 	cmpltui	zero,r2,542
10007e00:	100087b0 	cmpltui	zero,r2,542
10007e04:	100087b0 	cmpltui	zero,r2,542
10007e08:	100087b0 	cmpltui	zero,r2,542
10007e0c:	100087b0 	cmpltui	zero,r2,542
10007e10:	100087b0 	cmpltui	zero,r2,542
10007e14:	100086d4 	ori	zero,r2,539
10007e18:	100086f8 	rdprs	zero,r2,539
10007e1c:	100087b0 	cmpltui	zero,r2,542
10007e20:	10007ff0 	cmpltui	zero,r2,511
10007e24:	1000870c 	andi	zero,r2,540
10007e28:	100087b0 	cmpltui	zero,r2,542
10007e2c:	100084d8 	cmpnei	zero,r2,531
10007e30:	100084e4 	muli	zero,r2,531
10007e34:	100084e4 	muli	zero,r2,531
10007e38:	100084e4 	muli	zero,r2,531
10007e3c:	100084e4 	muli	zero,r2,531
10007e40:	100084e4 	muli	zero,r2,531
10007e44:	100084e4 	muli	zero,r2,531
10007e48:	100084e4 	muli	zero,r2,531
10007e4c:	100084e4 	muli	zero,r2,531
10007e50:	100084e4 	muli	zero,r2,531
10007e54:	100087b0 	cmpltui	zero,r2,542
10007e58:	100087b0 	cmpltui	zero,r2,542
10007e5c:	100087b0 	cmpltui	zero,r2,542
10007e60:	100087b0 	cmpltui	zero,r2,542
10007e64:	100087b0 	cmpltui	zero,r2,542
10007e68:	100087b0 	cmpltui	zero,r2,542
10007e6c:	100087b0 	cmpltui	zero,r2,542
10007e70:	100087b0 	cmpltui	zero,r2,542
10007e74:	100087b0 	cmpltui	zero,r2,542
10007e78:	100087b0 	cmpltui	zero,r2,542
10007e7c:	10008524 	muli	zero,r2,532
10007e80:	100087b0 	cmpltui	zero,r2,542
10007e84:	100087b0 	cmpltui	zero,r2,542
10007e88:	100087b0 	cmpltui	zero,r2,542
10007e8c:	100087b0 	cmpltui	zero,r2,542
10007e90:	100087b0 	cmpltui	zero,r2,542
10007e94:	100087b0 	cmpltui	zero,r2,542
10007e98:	100087b0 	cmpltui	zero,r2,542
10007e9c:	100087b0 	cmpltui	zero,r2,542
10007ea0:	100087b0 	cmpltui	zero,r2,542
10007ea4:	100087b0 	cmpltui	zero,r2,542
10007ea8:	10008560 	cmpeqi	zero,r2,533
10007eac:	100087b0 	cmpltui	zero,r2,542
10007eb0:	100087b0 	cmpltui	zero,r2,542
10007eb4:	100087b0 	cmpltui	zero,r2,542
10007eb8:	100087b0 	cmpltui	zero,r2,542
10007ebc:	100087b0 	cmpltui	zero,r2,542
10007ec0:	100085bc 	xorhi	zero,r2,534
10007ec4:	100087b0 	cmpltui	zero,r2,542
10007ec8:	100087b0 	cmpltui	zero,r2,542
10007ecc:	10008630 	cmpltui	zero,r2,536
10007ed0:	100087b0 	cmpltui	zero,r2,542
10007ed4:	100087b0 	cmpltui	zero,r2,542
10007ed8:	100087b0 	cmpltui	zero,r2,542
10007edc:	100087b0 	cmpltui	zero,r2,542
10007ee0:	100087b0 	cmpltui	zero,r2,542
10007ee4:	100087b0 	cmpltui	zero,r2,542
10007ee8:	100087b0 	cmpltui	zero,r2,542
10007eec:	100087b0 	cmpltui	zero,r2,542
10007ef0:	100087b0 	cmpltui	zero,r2,542
10007ef4:	100087b0 	cmpltui	zero,r2,542
10007ef8:	100083d8 	cmpnei	zero,r2,527
10007efc:	10008408 	cmpgei	zero,r2,528
10007f00:	100087b0 	cmpltui	zero,r2,542
10007f04:	100087b0 	cmpltui	zero,r2,542
10007f08:	100087b0 	cmpltui	zero,r2,542
10007f0c:	10008758 	cmpnei	zero,r2,541
10007f10:	10008408 	cmpgei	zero,r2,528
10007f14:	100087b0 	cmpltui	zero,r2,542
10007f18:	100087b0 	cmpltui	zero,r2,542
10007f1c:	100082b0 	cmpltui	zero,r2,522
10007f20:	100087b0 	cmpltui	zero,r2,542
10007f24:	100082c4 	addi	zero,r2,523
10007f28:	100082fc 	xorhi	zero,r2,523
10007f2c:	10007ffc 	xorhi	zero,r2,511
10007f30:	100082a4 	muli	zero,r2,522
10007f34:	100087b0 	cmpltui	zero,r2,542
10007f38:	10008670 	cmpltui	zero,r2,537
10007f3c:	100087b0 	cmpltui	zero,r2,542
10007f40:	100086bc 	xorhi	zero,r2,538
10007f44:	100087b0 	cmpltui	zero,r2,542
10007f48:	100087b0 	cmpltui	zero,r2,542
10007f4c:	10008380 	call	11000838 <_gp+0xfe6820>
10007f50:	42000204 	addi	r8,r8,8
10007f54:	d8c02417 	ldw	r3,144(sp)
10007f58:	1c07883a 	add	r3,r3,r16
10007f5c:	d8c02415 	stw	r3,144(sp)
10007f60:	003f8c06 	br	10007d94 <__alt_data_end+0xf8007d94>
10007f64:	d9402017 	ldw	r5,128(sp)
10007f68:	d9002117 	ldw	r4,132(sp)
10007f6c:	00045880 	call	10004588 <__swsetup_r>
10007f70:	1003c11e 	bne	r2,zero,10008e78 <___vfiprintf_internal_r+0x1224>
10007f74:	d9402017 	ldw	r5,128(sp)
10007f78:	00c00284 	movi	r3,10
10007f7c:	2880030b 	ldhu	r2,12(r5)
10007f80:	1080068c 	andi	r2,r2,26
10007f84:	10ff581e 	bne	r2,r3,10007ce8 <__alt_data_end+0xf8007ce8>
10007f88:	d8c02017 	ldw	r3,128(sp)
10007f8c:	1880038f 	ldh	r2,14(r3)
10007f90:	103f5516 	blt	r2,zero,10007ce8 <__alt_data_end+0xf8007ce8>
10007f94:	d9c02217 	ldw	r7,136(sp)
10007f98:	d9002117 	ldw	r4,132(sp)
10007f9c:	a80d883a 	mov	r6,r21
10007fa0:	180b883a 	mov	r5,r3
10007fa4:	000917c0 	call	1000917c <__sbprintf>
10007fa8:	dfc03517 	ldw	ra,212(sp)
10007fac:	df003417 	ldw	fp,208(sp)
10007fb0:	ddc03317 	ldw	r23,204(sp)
10007fb4:	dd803217 	ldw	r22,200(sp)
10007fb8:	dd403117 	ldw	r21,196(sp)
10007fbc:	dd003017 	ldw	r20,192(sp)
10007fc0:	dcc02f17 	ldw	r19,188(sp)
10007fc4:	dc802e17 	ldw	r18,184(sp)
10007fc8:	dc402d17 	ldw	r17,180(sp)
10007fcc:	dc002c17 	ldw	r16,176(sp)
10007fd0:	dec03604 	addi	sp,sp,216
10007fd4:	f800283a 	ret
10007fd8:	0000e340 	call	10000e34 <__sinit>
10007fdc:	003f2f06 	br	10007c9c <__alt_data_end+0xf8007c9c>
10007fe0:	d8c02517 	ldw	r3,148(sp)
10007fe4:	d8802215 	stw	r2,136(sp)
10007fe8:	00c7c83a 	sub	r3,zero,r3
10007fec:	d8c02515 	stw	r3,148(sp)
10007ff0:	8c400114 	ori	r17,r17,4
10007ff4:	b0c00007 	ldb	r3,0(r22)
10007ff8:	003f7306 	br	10007dc8 <__alt_data_end+0xf8007dc8>
10007ffc:	00800c04 	movi	r2,48
10008000:	d9402217 	ldw	r5,136(sp)
10008004:	d8801d05 	stb	r2,116(sp)
10008008:	00801e04 	movi	r2,120
1000800c:	d8801d45 	stb	r2,117(sp)
10008010:	d8001d85 	stb	zero,118(sp)
10008014:	b811883a 	mov	r8,r23
10008018:	28c00104 	addi	r3,r5,4
1000801c:	2cc00017 	ldw	r19,0(r5)
10008020:	0029883a 	mov	r20,zero
10008024:	88800094 	ori	r2,r17,2
10008028:	80032516 	blt	r16,zero,10008cc0 <___vfiprintf_internal_r+0x106c>
1000802c:	00bfdfc4 	movi	r2,-129
10008030:	88a2703a 	and	r17,r17,r2
10008034:	d8c02215 	stw	r3,136(sp)
10008038:	8c400094 	ori	r17,r17,2
1000803c:	98032a1e 	bne	r19,zero,10008ce8 <___vfiprintf_internal_r+0x1094>
10008040:	00840074 	movhi	r2,4097
10008044:	1080a604 	addi	r2,r2,664
10008048:	d8802615 	stw	r2,152(sp)
1000804c:	002b883a 	mov	r21,zero
10008050:	8001741e 	bne	r16,zero,10008624 <___vfiprintf_internal_r+0x9d0>
10008054:	0021883a 	mov	r16,zero
10008058:	0029883a 	mov	r20,zero
1000805c:	ddc01a04 	addi	r23,sp,104
10008060:	8027883a 	mov	r19,r16
10008064:	8500010e 	bge	r16,r20,1000806c <___vfiprintf_internal_r+0x418>
10008068:	a027883a 	mov	r19,r20
1000806c:	ad403fcc 	andi	r21,r21,255
10008070:	ad40201c 	xori	r21,r21,128
10008074:	ad7fe004 	addi	r21,r21,-128
10008078:	a8000126 	beq	r21,zero,10008080 <___vfiprintf_internal_r+0x42c>
1000807c:	9cc00044 	addi	r19,r19,1
10008080:	89c0008c 	andi	r7,r17,2
10008084:	38000126 	beq	r7,zero,1000808c <___vfiprintf_internal_r+0x438>
10008088:	9cc00084 	addi	r19,r19,2
1000808c:	88c0210c 	andi	r3,r17,132
10008090:	1801dd1e 	bne	r3,zero,10008808 <___vfiprintf_internal_r+0xbb4>
10008094:	d9402517 	ldw	r5,148(sp)
10008098:	2cebc83a 	sub	r21,r5,r19
1000809c:	0541da0e 	bge	zero,r21,10008808 <___vfiprintf_internal_r+0xbb4>
100080a0:	07000404 	movi	fp,16
100080a4:	d8801c17 	ldw	r2,112(sp)
100080a8:	e543be0e 	bge	fp,r21,10008fa4 <___vfiprintf_internal_r+0x1350>
100080ac:	01440074 	movhi	r5,4097
100080b0:	29410a04 	addi	r5,r5,1064
100080b4:	dc002715 	stw	r16,156(sp)
100080b8:	d9801b17 	ldw	r6,108(sp)
100080bc:	a821883a 	mov	r16,r21
100080c0:	d9402315 	stw	r5,140(sp)
100080c4:	028001c4 	movi	r10,7
100080c8:	d9c02915 	stw	r7,164(sp)
100080cc:	182b883a 	mov	r21,r3
100080d0:	00000506 	br	100080e8 <___vfiprintf_internal_r+0x494>
100080d4:	31000084 	addi	r4,r6,2
100080d8:	42000204 	addi	r8,r8,8
100080dc:	180d883a 	mov	r6,r3
100080e0:	843ffc04 	addi	r16,r16,-16
100080e4:	e4000f0e 	bge	fp,r16,10008124 <___vfiprintf_internal_r+0x4d0>
100080e8:	01040074 	movhi	r4,4097
100080ec:	10800404 	addi	r2,r2,16
100080f0:	30c00044 	addi	r3,r6,1
100080f4:	21010a04 	addi	r4,r4,1064
100080f8:	41000015 	stw	r4,0(r8)
100080fc:	47000115 	stw	fp,4(r8)
10008100:	d8801c15 	stw	r2,112(sp)
10008104:	d8c01b15 	stw	r3,108(sp)
10008108:	50fff20e 	bge	r10,r3,100080d4 <__alt_data_end+0xf80080d4>
1000810c:	1001b21e 	bne	r2,zero,100087d8 <___vfiprintf_internal_r+0xb84>
10008110:	843ffc04 	addi	r16,r16,-16
10008114:	000d883a 	mov	r6,zero
10008118:	01000044 	movi	r4,1
1000811c:	d811883a 	mov	r8,sp
10008120:	e43ff116 	blt	fp,r16,100080e8 <__alt_data_end+0xf80080e8>
10008124:	a807883a 	mov	r3,r21
10008128:	d9c02917 	ldw	r7,164(sp)
1000812c:	802b883a 	mov	r21,r16
10008130:	dc002717 	ldw	r16,156(sp)
10008134:	d9402317 	ldw	r5,140(sp)
10008138:	a885883a 	add	r2,r21,r2
1000813c:	45400115 	stw	r21,4(r8)
10008140:	41400015 	stw	r5,0(r8)
10008144:	d8801c15 	stw	r2,112(sp)
10008148:	d9001b15 	stw	r4,108(sp)
1000814c:	014001c4 	movi	r5,7
10008150:	29026216 	blt	r5,r4,10008adc <___vfiprintf_internal_r+0xe88>
10008154:	d9801d87 	ldb	r6,118(sp)
10008158:	42000204 	addi	r8,r8,8
1000815c:	21400044 	addi	r5,r4,1
10008160:	3001ae1e 	bne	r6,zero,1000881c <___vfiprintf_internal_r+0xbc8>
10008164:	3801bb26 	beq	r7,zero,10008854 <___vfiprintf_internal_r+0xc00>
10008168:	d9001d04 	addi	r4,sp,116
1000816c:	10800084 	addi	r2,r2,2
10008170:	41000015 	stw	r4,0(r8)
10008174:	01000084 	movi	r4,2
10008178:	41000115 	stw	r4,4(r8)
1000817c:	d8801c15 	stw	r2,112(sp)
10008180:	d9401b15 	stw	r5,108(sp)
10008184:	010001c4 	movi	r4,7
10008188:	2142680e 	bge	r4,r5,10008b2c <___vfiprintf_internal_r+0xed8>
1000818c:	1002b11e 	bne	r2,zero,10008c54 <___vfiprintf_internal_r+0x1000>
10008190:	01802004 	movi	r6,128
10008194:	01400044 	movi	r5,1
10008198:	0009883a 	mov	r4,zero
1000819c:	d811883a 	mov	r8,sp
100081a0:	1981ae1e 	bne	r3,r6,1000885c <___vfiprintf_internal_r+0xc08>
100081a4:	d8c02517 	ldw	r3,148(sp)
100081a8:	1cf9c83a 	sub	fp,r3,r19
100081ac:	0701ab0e 	bge	zero,fp,1000885c <___vfiprintf_internal_r+0xc08>
100081b0:	05400404 	movi	r21,16
100081b4:	af03a90e 	bge	r21,fp,1000905c <___vfiprintf_internal_r+0x1408>
100081b8:	01440074 	movhi	r5,4097
100081bc:	29410604 	addi	r5,r5,1048
100081c0:	d9402315 	stw	r5,140(sp)
100081c4:	01c001c4 	movi	r7,7
100081c8:	00000506 	br	100081e0 <___vfiprintf_internal_r+0x58c>
100081cc:	21800084 	addi	r6,r4,2
100081d0:	42000204 	addi	r8,r8,8
100081d4:	1809883a 	mov	r4,r3
100081d8:	e73ffc04 	addi	fp,fp,-16
100081dc:	af000d0e 	bge	r21,fp,10008214 <___vfiprintf_internal_r+0x5c0>
100081e0:	10800404 	addi	r2,r2,16
100081e4:	20c00044 	addi	r3,r4,1
100081e8:	44800015 	stw	r18,0(r8)
100081ec:	45400115 	stw	r21,4(r8)
100081f0:	d8801c15 	stw	r2,112(sp)
100081f4:	d8c01b15 	stw	r3,108(sp)
100081f8:	38fff40e 	bge	r7,r3,100081cc <__alt_data_end+0xf80081cc>
100081fc:	10022b1e 	bne	r2,zero,10008aac <___vfiprintf_internal_r+0xe58>
10008200:	e73ffc04 	addi	fp,fp,-16
10008204:	01800044 	movi	r6,1
10008208:	0009883a 	mov	r4,zero
1000820c:	d811883a 	mov	r8,sp
10008210:	af3ff316 	blt	r21,fp,100081e0 <__alt_data_end+0xf80081e0>
10008214:	d8c02317 	ldw	r3,140(sp)
10008218:	1705883a 	add	r2,r2,fp
1000821c:	47000115 	stw	fp,4(r8)
10008220:	40c00015 	stw	r3,0(r8)
10008224:	d8801c15 	stw	r2,112(sp)
10008228:	d9801b15 	stw	r6,108(sp)
1000822c:	00c001c4 	movi	r3,7
10008230:	19829416 	blt	r3,r6,10008c84 <___vfiprintf_internal_r+0x1030>
10008234:	8521c83a 	sub	r16,r16,r20
10008238:	42000204 	addi	r8,r8,8
1000823c:	31400044 	addi	r5,r6,1
10008240:	3009883a 	mov	r4,r6
10008244:	04018716 	blt	zero,r16,10008864 <___vfiprintf_internal_r+0xc10>
10008248:	a085883a 	add	r2,r20,r2
1000824c:	45c00015 	stw	r23,0(r8)
10008250:	45000115 	stw	r20,4(r8)
10008254:	d8801c15 	stw	r2,112(sp)
10008258:	d9401b15 	stw	r5,108(sp)
1000825c:	00c001c4 	movi	r3,7
10008260:	1941c20e 	bge	r3,r5,1000896c <___vfiprintf_internal_r+0xd18>
10008264:	1002531e 	bne	r2,zero,10008bb4 <___vfiprintf_internal_r+0xf60>
10008268:	d8001b15 	stw	zero,108(sp)
1000826c:	8c40010c 	andi	r17,r17,4
10008270:	88023226 	beq	r17,zero,10008b3c <___vfiprintf_internal_r+0xee8>
10008274:	d9002517 	ldw	r4,148(sp)
10008278:	24e3c83a 	sub	r17,r4,r19
1000827c:	04432916 	blt	zero,r17,10008f24 <___vfiprintf_internal_r+0x12d0>
10008280:	d8802517 	ldw	r2,148(sp)
10008284:	14c0010e 	bge	r2,r19,1000828c <___vfiprintf_internal_r+0x638>
10008288:	9805883a 	mov	r2,r19
1000828c:	d8c02417 	ldw	r3,144(sp)
10008290:	1887883a 	add	r3,r3,r2
10008294:	d8c02415 	stw	r3,144(sp)
10008298:	d8001b15 	stw	zero,108(sp)
1000829c:	d811883a 	mov	r8,sp
100082a0:	003ea006 	br	10007d24 <__alt_data_end+0xf8007d24>
100082a4:	8c400814 	ori	r17,r17,32
100082a8:	b0c00007 	ldb	r3,0(r22)
100082ac:	003ec606 	br	10007dc8 <__alt_data_end+0xf8007dc8>
100082b0:	b0c00007 	ldb	r3,0(r22)
100082b4:	00801b04 	movi	r2,108
100082b8:	18832026 	beq	r3,r2,10008f3c <___vfiprintf_internal_r+0x12e8>
100082bc:	8c400414 	ori	r17,r17,16
100082c0:	003ec106 	br	10007dc8 <__alt_data_end+0xf8007dc8>
100082c4:	9cc03fcc 	andi	r19,r19,255
100082c8:	b811883a 	mov	r8,r23
100082cc:	9803981e 	bne	r19,zero,10009130 <___vfiprintf_internal_r+0x14dc>
100082d0:	8880080c 	andi	r2,r17,32
100082d4:	1002be26 	beq	r2,zero,10008dd0 <___vfiprintf_internal_r+0x117c>
100082d8:	d9002217 	ldw	r4,136(sp)
100082dc:	d9402417 	ldw	r5,144(sp)
100082e0:	20800017 	ldw	r2,0(r4)
100082e4:	2807d7fa 	srai	r3,r5,31
100082e8:	21000104 	addi	r4,r4,4
100082ec:	d9002215 	stw	r4,136(sp)
100082f0:	11400015 	stw	r5,0(r2)
100082f4:	10c00115 	stw	r3,4(r2)
100082f8:	003e8a06 	br	10007d24 <__alt_data_end+0xf8007d24>
100082fc:	9cc03fcc 	andi	r19,r19,255
10008300:	b811883a 	mov	r8,r23
10008304:	9803871e 	bne	r19,zero,10009124 <___vfiprintf_internal_r+0x14d0>
10008308:	8880080c 	andi	r2,r17,32
1000830c:	10009a26 	beq	r2,zero,10008578 <___vfiprintf_internal_r+0x924>
10008310:	d9002217 	ldw	r4,136(sp)
10008314:	d8001d85 	stb	zero,118(sp)
10008318:	20800204 	addi	r2,r4,8
1000831c:	24c00017 	ldw	r19,0(r4)
10008320:	25000117 	ldw	r20,4(r4)
10008324:	8002a416 	blt	r16,zero,10008db8 <___vfiprintf_internal_r+0x1164>
10008328:	013fdfc4 	movi	r4,-129
1000832c:	9d06b03a 	or	r3,r19,r20
10008330:	d8802215 	stw	r2,136(sp)
10008334:	8922703a 	and	r17,r17,r4
10008338:	18009b26 	beq	r3,zero,100085a8 <___vfiprintf_internal_r+0x954>
1000833c:	002b883a 	mov	r21,zero
10008340:	ddc01a04 	addi	r23,sp,104
10008344:	9806d0fa 	srli	r3,r19,3
10008348:	a008977a 	slli	r4,r20,29
1000834c:	a028d0fa 	srli	r20,r20,3
10008350:	9cc001cc 	andi	r19,r19,7
10008354:	98800c04 	addi	r2,r19,48
10008358:	bdffffc4 	addi	r23,r23,-1
1000835c:	20e6b03a 	or	r19,r4,r3
10008360:	b8800005 	stb	r2,0(r23)
10008364:	9d06b03a 	or	r3,r19,r20
10008368:	183ff61e 	bne	r3,zero,10008344 <__alt_data_end+0xf8008344>
1000836c:	88c0004c 	andi	r3,r17,1
10008370:	18021f1e 	bne	r3,zero,10008bf0 <___vfiprintf_internal_r+0xf9c>
10008374:	d9401e17 	ldw	r5,120(sp)
10008378:	2de9c83a 	sub	r20,r5,r23
1000837c:	003f3806 	br	10008060 <__alt_data_end+0xf8008060>
10008380:	9cc03fcc 	andi	r19,r19,255
10008384:	b811883a 	mov	r8,r23
10008388:	98034f1e 	bne	r19,zero,100090c8 <___vfiprintf_internal_r+0x1474>
1000838c:	00840074 	movhi	r2,4097
10008390:	1080a604 	addi	r2,r2,664
10008394:	d8802615 	stw	r2,152(sp)
10008398:	8880080c 	andi	r2,r17,32
1000839c:	1000ac26 	beq	r2,zero,10008650 <___vfiprintf_internal_r+0x9fc>
100083a0:	d9002217 	ldw	r4,136(sp)
100083a4:	24c00017 	ldw	r19,0(r4)
100083a8:	25000117 	ldw	r20,4(r4)
100083ac:	21000204 	addi	r4,r4,8
100083b0:	d9002215 	stw	r4,136(sp)
100083b4:	8880004c 	andi	r2,r17,1
100083b8:	1001e726 	beq	r2,zero,10008b58 <___vfiprintf_internal_r+0xf04>
100083bc:	9d04b03a 	or	r2,r19,r20
100083c0:	10025c1e 	bne	r2,zero,10008d34 <___vfiprintf_internal_r+0x10e0>
100083c4:	d8001d85 	stb	zero,118(sp)
100083c8:	80024416 	blt	r16,zero,10008cdc <___vfiprintf_internal_r+0x1088>
100083cc:	00bfdfc4 	movi	r2,-129
100083d0:	88a2703a 	and	r17,r17,r2
100083d4:	003f1d06 	br	1000804c <__alt_data_end+0xf800804c>
100083d8:	d8c02217 	ldw	r3,136(sp)
100083dc:	04c00044 	movi	r19,1
100083e0:	b811883a 	mov	r8,r23
100083e4:	18800017 	ldw	r2,0(r3)
100083e8:	18c00104 	addi	r3,r3,4
100083ec:	d8001d85 	stb	zero,118(sp)
100083f0:	d8801005 	stb	r2,64(sp)
100083f4:	d8c02215 	stw	r3,136(sp)
100083f8:	9829883a 	mov	r20,r19
100083fc:	ddc01004 	addi	r23,sp,64
10008400:	0021883a 	mov	r16,zero
10008404:	003f1e06 	br	10008080 <__alt_data_end+0xf8008080>
10008408:	9cc03fcc 	andi	r19,r19,255
1000840c:	b811883a 	mov	r8,r23
10008410:	9803331e 	bne	r19,zero,100090e0 <___vfiprintf_internal_r+0x148c>
10008414:	8880080c 	andi	r2,r17,32
10008418:	10004826 	beq	r2,zero,1000853c <___vfiprintf_internal_r+0x8e8>
1000841c:	d9002217 	ldw	r4,136(sp)
10008420:	20800117 	ldw	r2,4(r4)
10008424:	24c00017 	ldw	r19,0(r4)
10008428:	21000204 	addi	r4,r4,8
1000842c:	d9002215 	stw	r4,136(sp)
10008430:	1029883a 	mov	r20,r2
10008434:	10024c16 	blt	r2,zero,10008d68 <___vfiprintf_internal_r+0x1114>
10008438:	dd401d83 	ldbu	r21,118(sp)
1000843c:	80007116 	blt	r16,zero,10008604 <___vfiprintf_internal_r+0x9b0>
10008440:	00ffdfc4 	movi	r3,-129
10008444:	9d04b03a 	or	r2,r19,r20
10008448:	88e2703a 	and	r17,r17,r3
1000844c:	1000d126 	beq	r2,zero,10008794 <___vfiprintf_internal_r+0xb40>
10008450:	a0023526 	beq	r20,zero,10008d28 <___vfiprintf_internal_r+0x10d4>
10008454:	ddc01a04 	addi	r23,sp,104
10008458:	4039883a 	mov	fp,r8
1000845c:	9809883a 	mov	r4,r19
10008460:	a00b883a 	mov	r5,r20
10008464:	01800284 	movi	r6,10
10008468:	000f883a 	mov	r7,zero
1000846c:	000aa900 	call	1000aa90 <__umoddi3>
10008470:	10800c04 	addi	r2,r2,48
10008474:	bdffffc4 	addi	r23,r23,-1
10008478:	9809883a 	mov	r4,r19
1000847c:	a00b883a 	mov	r5,r20
10008480:	b8800005 	stb	r2,0(r23)
10008484:	01800284 	movi	r6,10
10008488:	000f883a 	mov	r7,zero
1000848c:	000a4940 	call	1000a494 <__udivdi3>
10008490:	1027883a 	mov	r19,r2
10008494:	10c4b03a 	or	r2,r2,r3
10008498:	1829883a 	mov	r20,r3
1000849c:	103fef1e 	bne	r2,zero,1000845c <__alt_data_end+0xf800845c>
100084a0:	d9001e17 	ldw	r4,120(sp)
100084a4:	e011883a 	mov	r8,fp
100084a8:	25e9c83a 	sub	r20,r4,r23
100084ac:	003eec06 	br	10008060 <__alt_data_end+0xf8008060>
100084b0:	d8802307 	ldb	r2,140(sp)
100084b4:	1002361e 	bne	r2,zero,10008d90 <___vfiprintf_internal_r+0x113c>
100084b8:	00c00804 	movi	r3,32
100084bc:	d8c02305 	stb	r3,140(sp)
100084c0:	04c00044 	movi	r19,1
100084c4:	b0c00007 	ldb	r3,0(r22)
100084c8:	003e3f06 	br	10007dc8 <__alt_data_end+0xf8007dc8>
100084cc:	8c400054 	ori	r17,r17,1
100084d0:	b0c00007 	ldb	r3,0(r22)
100084d4:	003e3c06 	br	10007dc8 <__alt_data_end+0xf8007dc8>
100084d8:	8c402014 	ori	r17,r17,128
100084dc:	b0c00007 	ldb	r3,0(r22)
100084e0:	003e3906 	br	10007dc8 <__alt_data_end+0xf8007dc8>
100084e4:	dc002715 	stw	r16,156(sp)
100084e8:	d8002515 	stw	zero,148(sp)
100084ec:	1f3ff404 	addi	fp,r3,-48
100084f0:	0009883a 	mov	r4,zero
100084f4:	b021883a 	mov	r16,r22
100084f8:	01400284 	movi	r5,10
100084fc:	00006840 	call	10000684 <__mulsi3>
10008500:	80c00007 	ldb	r3,0(r16)
10008504:	e089883a 	add	r4,fp,r2
10008508:	b5800044 	addi	r22,r22,1
1000850c:	1f3ff404 	addi	fp,r3,-48
10008510:	b021883a 	mov	r16,r22
10008514:	af3ff82e 	bgeu	r21,fp,100084f8 <__alt_data_end+0xf80084f8>
10008518:	d9002515 	stw	r4,148(sp)
1000851c:	dc002717 	ldw	r16,156(sp)
10008520:	003e2a06 	br	10007dcc <__alt_data_end+0xf8007dcc>
10008524:	9cc03fcc 	andi	r19,r19,255
10008528:	b811883a 	mov	r8,r23
1000852c:	9802e91e 	bne	r19,zero,100090d4 <___vfiprintf_internal_r+0x1480>
10008530:	8c400414 	ori	r17,r17,16
10008534:	8880080c 	andi	r2,r17,32
10008538:	103fb81e 	bne	r2,zero,1000841c <__alt_data_end+0xf800841c>
1000853c:	8880040c 	andi	r2,r17,16
10008540:	10022e26 	beq	r2,zero,10008dfc <___vfiprintf_internal_r+0x11a8>
10008544:	d9402217 	ldw	r5,136(sp)
10008548:	2cc00017 	ldw	r19,0(r5)
1000854c:	29400104 	addi	r5,r5,4
10008550:	d9402215 	stw	r5,136(sp)
10008554:	9829d7fa 	srai	r20,r19,31
10008558:	a005883a 	mov	r2,r20
1000855c:	003fb506 	br	10008434 <__alt_data_end+0xf8008434>
10008560:	9cc03fcc 	andi	r19,r19,255
10008564:	b811883a 	mov	r8,r23
10008568:	9802fa1e 	bne	r19,zero,10009154 <___vfiprintf_internal_r+0x1500>
1000856c:	8c400414 	ori	r17,r17,16
10008570:	8880080c 	andi	r2,r17,32
10008574:	103f661e 	bne	r2,zero,10008310 <__alt_data_end+0xf8008310>
10008578:	8880040c 	andi	r2,r17,16
1000857c:	10020626 	beq	r2,zero,10008d98 <___vfiprintf_internal_r+0x1144>
10008580:	d9402217 	ldw	r5,136(sp)
10008584:	d8001d85 	stb	zero,118(sp)
10008588:	0029883a 	mov	r20,zero
1000858c:	28800104 	addi	r2,r5,4
10008590:	2cc00017 	ldw	r19,0(r5)
10008594:	80020816 	blt	r16,zero,10008db8 <___vfiprintf_internal_r+0x1164>
10008598:	00ffdfc4 	movi	r3,-129
1000859c:	d8802215 	stw	r2,136(sp)
100085a0:	88e2703a 	and	r17,r17,r3
100085a4:	983f651e 	bne	r19,zero,1000833c <__alt_data_end+0xf800833c>
100085a8:	002b883a 	mov	r21,zero
100085ac:	8002cf26 	beq	r16,zero,100090ec <___vfiprintf_internal_r+0x1498>
100085b0:	0027883a 	mov	r19,zero
100085b4:	0029883a 	mov	r20,zero
100085b8:	003f6106 	br	10008340 <__alt_data_end+0xf8008340>
100085bc:	9cc03fcc 	andi	r19,r19,255
100085c0:	b811883a 	mov	r8,r23
100085c4:	9802e01e 	bne	r19,zero,10009148 <___vfiprintf_internal_r+0x14f4>
100085c8:	8c400414 	ori	r17,r17,16
100085cc:	8880080c 	andi	r2,r17,32
100085d0:	1000641e 	bne	r2,zero,10008764 <___vfiprintf_internal_r+0xb10>
100085d4:	8880040c 	andi	r2,r17,16
100085d8:	1001c81e 	bne	r2,zero,10008cfc <___vfiprintf_internal_r+0x10a8>
100085dc:	8880100c 	andi	r2,r17,64
100085e0:	d8001d85 	stb	zero,118(sp)
100085e4:	1002281e 	bne	r2,zero,10008e88 <___vfiprintf_internal_r+0x1234>
100085e8:	d9002217 	ldw	r4,136(sp)
100085ec:	0029883a 	mov	r20,zero
100085f0:	20800104 	addi	r2,r4,4
100085f4:	24c00017 	ldw	r19,0(r4)
100085f8:	8001c60e 	bge	r16,zero,10008d14 <___vfiprintf_internal_r+0x10c0>
100085fc:	d8802215 	stw	r2,136(sp)
10008600:	002b883a 	mov	r21,zero
10008604:	9d04b03a 	or	r2,r19,r20
10008608:	103f911e 	bne	r2,zero,10008450 <__alt_data_end+0xf8008450>
1000860c:	00800044 	movi	r2,1
10008610:	10803fcc 	andi	r2,r2,255
10008614:	00c00044 	movi	r3,1
10008618:	10c05f26 	beq	r2,r3,10008798 <___vfiprintf_internal_r+0xb44>
1000861c:	00c00084 	movi	r3,2
10008620:	10ffe31e 	bne	r2,r3,100085b0 <__alt_data_end+0xf80085b0>
10008624:	0027883a 	mov	r19,zero
10008628:	0029883a 	mov	r20,zero
1000862c:	00015106 	br	10008b74 <___vfiprintf_internal_r+0xf20>
10008630:	9cc03fcc 	andi	r19,r19,255
10008634:	b811883a 	mov	r8,r23
10008638:	9802c01e 	bne	r19,zero,1000913c <___vfiprintf_internal_r+0x14e8>
1000863c:	01440074 	movhi	r5,4097
10008640:	2940a104 	addi	r5,r5,644
10008644:	d9402615 	stw	r5,152(sp)
10008648:	8880080c 	andi	r2,r17,32
1000864c:	103f541e 	bne	r2,zero,100083a0 <__alt_data_end+0xf80083a0>
10008650:	8880040c 	andi	r2,r17,16
10008654:	1001f226 	beq	r2,zero,10008e20 <___vfiprintf_internal_r+0x11cc>
10008658:	d9402217 	ldw	r5,136(sp)
1000865c:	0029883a 	mov	r20,zero
10008660:	2cc00017 	ldw	r19,0(r5)
10008664:	29400104 	addi	r5,r5,4
10008668:	d9402215 	stw	r5,136(sp)
1000866c:	003f5106 	br	100083b4 <__alt_data_end+0xf80083b4>
10008670:	d8c02217 	ldw	r3,136(sp)
10008674:	b811883a 	mov	r8,r23
10008678:	d8001d85 	stb	zero,118(sp)
1000867c:	1dc00017 	ldw	r23,0(r3)
10008680:	1f000104 	addi	fp,r3,4
10008684:	b8025926 	beq	r23,zero,10008fec <___vfiprintf_internal_r+0x1398>
10008688:	80023316 	blt	r16,zero,10008f58 <___vfiprintf_internal_r+0x1304>
1000868c:	800d883a 	mov	r6,r16
10008690:	000b883a 	mov	r5,zero
10008694:	b809883a 	mov	r4,r23
10008698:	da002a15 	stw	r8,168(sp)
1000869c:	00062f00 	call	100062f0 <memchr>
100086a0:	da002a17 	ldw	r8,168(sp)
100086a4:	10026826 	beq	r2,zero,10009048 <___vfiprintf_internal_r+0x13f4>
100086a8:	15e9c83a 	sub	r20,r2,r23
100086ac:	dd401d83 	ldbu	r21,118(sp)
100086b0:	df002215 	stw	fp,136(sp)
100086b4:	0021883a 	mov	r16,zero
100086b8:	003e6906 	br	10008060 <__alt_data_end+0xf8008060>
100086bc:	9cc03fcc 	andi	r19,r19,255
100086c0:	b811883a 	mov	r8,r23
100086c4:	983fc126 	beq	r19,zero,100085cc <__alt_data_end+0xf80085cc>
100086c8:	d8c02303 	ldbu	r3,140(sp)
100086cc:	d8c01d85 	stb	r3,118(sp)
100086d0:	003fbe06 	br	100085cc <__alt_data_end+0xf80085cc>
100086d4:	d9002217 	ldw	r4,136(sp)
100086d8:	d9402217 	ldw	r5,136(sp)
100086dc:	21000017 	ldw	r4,0(r4)
100086e0:	28800104 	addi	r2,r5,4
100086e4:	d9002515 	stw	r4,148(sp)
100086e8:	203e3d16 	blt	r4,zero,10007fe0 <__alt_data_end+0xf8007fe0>
100086ec:	d8802215 	stw	r2,136(sp)
100086f0:	b0c00007 	ldb	r3,0(r22)
100086f4:	003db406 	br	10007dc8 <__alt_data_end+0xf8007dc8>
100086f8:	00c00ac4 	movi	r3,43
100086fc:	d8c02305 	stb	r3,140(sp)
10008700:	04c00044 	movi	r19,1
10008704:	b0c00007 	ldb	r3,0(r22)
10008708:	003daf06 	br	10007dc8 <__alt_data_end+0xf8007dc8>
1000870c:	b0c00007 	ldb	r3,0(r22)
10008710:	01000a84 	movi	r4,42
10008714:	b4000044 	addi	r16,r22,1
10008718:	19025e26 	beq	r3,r4,10009094 <___vfiprintf_internal_r+0x1440>
1000871c:	1f3ff404 	addi	fp,r3,-48
10008720:	0009883a 	mov	r4,zero
10008724:	af025236 	bltu	r21,fp,10009070 <___vfiprintf_internal_r+0x141c>
10008728:	01400284 	movi	r5,10
1000872c:	00006840 	call	10000684 <__mulsi3>
10008730:	80c00007 	ldb	r3,0(r16)
10008734:	1709883a 	add	r4,r2,fp
10008738:	85800044 	addi	r22,r16,1
1000873c:	1f3ff404 	addi	fp,r3,-48
10008740:	b021883a 	mov	r16,r22
10008744:	af3ff82e 	bgeu	r21,fp,10008728 <__alt_data_end+0xf8008728>
10008748:	2021883a 	mov	r16,r4
1000874c:	203d9f0e 	bge	r4,zero,10007dcc <__alt_data_end+0xf8007dcc>
10008750:	043fffc4 	movi	r16,-1
10008754:	003d9d06 	br	10007dcc <__alt_data_end+0xf8007dcc>
10008758:	8c401014 	ori	r17,r17,64
1000875c:	b0c00007 	ldb	r3,0(r22)
10008760:	003d9906 	br	10007dc8 <__alt_data_end+0xf8007dc8>
10008764:	d9002217 	ldw	r4,136(sp)
10008768:	d8001d85 	stb	zero,118(sp)
1000876c:	20c00204 	addi	r3,r4,8
10008770:	24c00017 	ldw	r19,0(r4)
10008774:	25000117 	ldw	r20,4(r4)
10008778:	8001e716 	blt	r16,zero,10008f18 <___vfiprintf_internal_r+0x12c4>
1000877c:	013fdfc4 	movi	r4,-129
10008780:	9d04b03a 	or	r2,r19,r20
10008784:	d8c02215 	stw	r3,136(sp)
10008788:	8922703a 	and	r17,r17,r4
1000878c:	002b883a 	mov	r21,zero
10008790:	103f2f1e 	bne	r2,zero,10008450 <__alt_data_end+0xf8008450>
10008794:	803e2f26 	beq	r16,zero,10008054 <__alt_data_end+0xf8008054>
10008798:	0027883a 	mov	r19,zero
1000879c:	9cc00c04 	addi	r19,r19,48
100087a0:	dcc019c5 	stb	r19,103(sp)
100087a4:	dd002817 	ldw	r20,160(sp)
100087a8:	ddc019c4 	addi	r23,sp,103
100087ac:	003e2c06 	br	10008060 <__alt_data_end+0xf8008060>
100087b0:	9cc03fcc 	andi	r19,r19,255
100087b4:	b811883a 	mov	r8,r23
100087b8:	9802571e 	bne	r19,zero,10009118 <___vfiprintf_internal_r+0x14c4>
100087bc:	18005726 	beq	r3,zero,1000891c <___vfiprintf_internal_r+0xcc8>
100087c0:	04c00044 	movi	r19,1
100087c4:	d8c01005 	stb	r3,64(sp)
100087c8:	d8001d85 	stb	zero,118(sp)
100087cc:	9829883a 	mov	r20,r19
100087d0:	ddc01004 	addi	r23,sp,64
100087d4:	003f0a06 	br	10008400 <__alt_data_end+0xf8008400>
100087d8:	d9402017 	ldw	r5,128(sp)
100087dc:	d9002117 	ldw	r4,132(sp)
100087e0:	d9801a04 	addi	r6,sp,104
100087e4:	da802a15 	stw	r10,168(sp)
100087e8:	0007b400 	call	10007b40 <__sprint_r.part.0>
100087ec:	da802a17 	ldw	r10,168(sp)
100087f0:	1000501e 	bne	r2,zero,10008934 <___vfiprintf_internal_r+0xce0>
100087f4:	d9801b17 	ldw	r6,108(sp)
100087f8:	d8801c17 	ldw	r2,112(sp)
100087fc:	d811883a 	mov	r8,sp
10008800:	31000044 	addi	r4,r6,1
10008804:	003e3606 	br	100080e0 <__alt_data_end+0xf80080e0>
10008808:	d9001b17 	ldw	r4,108(sp)
1000880c:	d8801c17 	ldw	r2,112(sp)
10008810:	21400044 	addi	r5,r4,1
10008814:	d9801d87 	ldb	r6,118(sp)
10008818:	303e5226 	beq	r6,zero,10008164 <__alt_data_end+0xf8008164>
1000881c:	01800044 	movi	r6,1
10008820:	d9001d84 	addi	r4,sp,118
10008824:	1185883a 	add	r2,r2,r6
10008828:	41000015 	stw	r4,0(r8)
1000882c:	41800115 	stw	r6,4(r8)
10008830:	d8801c15 	stw	r2,112(sp)
10008834:	d9401b15 	stw	r5,108(sp)
10008838:	010001c4 	movi	r4,7
1000883c:	2140b00e 	bge	r4,r5,10008b00 <___vfiprintf_internal_r+0xeac>
10008840:	1000f61e 	bne	r2,zero,10008c1c <___vfiprintf_internal_r+0xfc8>
10008844:	3800b31e 	bne	r7,zero,10008b14 <___vfiprintf_internal_r+0xec0>
10008848:	0009883a 	mov	r4,zero
1000884c:	300b883a 	mov	r5,r6
10008850:	d811883a 	mov	r8,sp
10008854:	01802004 	movi	r6,128
10008858:	19be5226 	beq	r3,r6,100081a4 <__alt_data_end+0xf80081a4>
1000885c:	8521c83a 	sub	r16,r16,r20
10008860:	043e790e 	bge	zero,r16,10008248 <__alt_data_end+0xf8008248>
10008864:	05400404 	movi	r21,16
10008868:	ac01b00e 	bge	r21,r16,10008f2c <___vfiprintf_internal_r+0x12d8>
1000886c:	01440074 	movhi	r5,4097
10008870:	29410604 	addi	r5,r5,1048
10008874:	d9402315 	stw	r5,140(sp)
10008878:	070001c4 	movi	fp,7
1000887c:	00000506 	br	10008894 <___vfiprintf_internal_r+0xc40>
10008880:	21400084 	addi	r5,r4,2
10008884:	42000204 	addi	r8,r8,8
10008888:	1809883a 	mov	r4,r3
1000888c:	843ffc04 	addi	r16,r16,-16
10008890:	ac000d0e 	bge	r21,r16,100088c8 <___vfiprintf_internal_r+0xc74>
10008894:	10800404 	addi	r2,r2,16
10008898:	20c00044 	addi	r3,r4,1
1000889c:	44800015 	stw	r18,0(r8)
100088a0:	45400115 	stw	r21,4(r8)
100088a4:	d8801c15 	stw	r2,112(sp)
100088a8:	d8c01b15 	stw	r3,108(sp)
100088ac:	e0fff40e 	bge	fp,r3,10008880 <__alt_data_end+0xf8008880>
100088b0:	1000101e 	bne	r2,zero,100088f4 <___vfiprintf_internal_r+0xca0>
100088b4:	843ffc04 	addi	r16,r16,-16
100088b8:	01400044 	movi	r5,1
100088bc:	0009883a 	mov	r4,zero
100088c0:	d811883a 	mov	r8,sp
100088c4:	ac3ff316 	blt	r21,r16,10008894 <__alt_data_end+0xf8008894>
100088c8:	d8c02317 	ldw	r3,140(sp)
100088cc:	1405883a 	add	r2,r2,r16
100088d0:	44000115 	stw	r16,4(r8)
100088d4:	40c00015 	stw	r3,0(r8)
100088d8:	d8801c15 	stw	r2,112(sp)
100088dc:	d9401b15 	stw	r5,108(sp)
100088e0:	00c001c4 	movi	r3,7
100088e4:	19401916 	blt	r3,r5,1000894c <___vfiprintf_internal_r+0xcf8>
100088e8:	42000204 	addi	r8,r8,8
100088ec:	29400044 	addi	r5,r5,1
100088f0:	003e5506 	br	10008248 <__alt_data_end+0xf8008248>
100088f4:	d9402017 	ldw	r5,128(sp)
100088f8:	d9002117 	ldw	r4,132(sp)
100088fc:	d9801a04 	addi	r6,sp,104
10008900:	0007b400 	call	10007b40 <__sprint_r.part.0>
10008904:	10000b1e 	bne	r2,zero,10008934 <___vfiprintf_internal_r+0xce0>
10008908:	d9001b17 	ldw	r4,108(sp)
1000890c:	d8801c17 	ldw	r2,112(sp)
10008910:	d811883a 	mov	r8,sp
10008914:	21400044 	addi	r5,r4,1
10008918:	003fdc06 	br	1000888c <__alt_data_end+0xf800888c>
1000891c:	d8801c17 	ldw	r2,112(sp)
10008920:	10000426 	beq	r2,zero,10008934 <___vfiprintf_internal_r+0xce0>
10008924:	d9402017 	ldw	r5,128(sp)
10008928:	d9002117 	ldw	r4,132(sp)
1000892c:	d9801a04 	addi	r6,sp,104
10008930:	0007b400 	call	10007b40 <__sprint_r.part.0>
10008934:	d9402017 	ldw	r5,128(sp)
10008938:	2880030b 	ldhu	r2,12(r5)
1000893c:	1080100c 	andi	r2,r2,64
10008940:	10014d1e 	bne	r2,zero,10008e78 <___vfiprintf_internal_r+0x1224>
10008944:	d8802417 	ldw	r2,144(sp)
10008948:	003d9706 	br	10007fa8 <__alt_data_end+0xf8007fa8>
1000894c:	1000d21e 	bne	r2,zero,10008c98 <___vfiprintf_internal_r+0x1044>
10008950:	00c00044 	movi	r3,1
10008954:	a005883a 	mov	r2,r20
10008958:	ddc00015 	stw	r23,0(sp)
1000895c:	dd000115 	stw	r20,4(sp)
10008960:	dd001c15 	stw	r20,112(sp)
10008964:	d8c01b15 	stw	r3,108(sp)
10008968:	d811883a 	mov	r8,sp
1000896c:	42000204 	addi	r8,r8,8
10008970:	8c40010c 	andi	r17,r17,4
10008974:	88004026 	beq	r17,zero,10008a78 <___vfiprintf_internal_r+0xe24>
10008978:	d9002517 	ldw	r4,148(sp)
1000897c:	24e3c83a 	sub	r17,r4,r19
10008980:	04403d0e 	bge	zero,r17,10008a78 <___vfiprintf_internal_r+0xe24>
10008984:	04000404 	movi	r16,16
10008988:	8441a90e 	bge	r16,r17,10009030 <___vfiprintf_internal_r+0x13dc>
1000898c:	00c40074 	movhi	r3,4097
10008990:	18c10a04 	addi	r3,r3,1064
10008994:	d9001b17 	ldw	r4,108(sp)
10008998:	d8c02315 	stw	r3,140(sp)
1000899c:	050001c4 	movi	r20,7
100089a0:	dd402117 	ldw	r21,132(sp)
100089a4:	ddc02017 	ldw	r23,128(sp)
100089a8:	00000506 	br	100089c0 <___vfiprintf_internal_r+0xd6c>
100089ac:	21400084 	addi	r5,r4,2
100089b0:	42000204 	addi	r8,r8,8
100089b4:	1809883a 	mov	r4,r3
100089b8:	8c7ffc04 	addi	r17,r17,-16
100089bc:	84400f0e 	bge	r16,r17,100089fc <___vfiprintf_internal_r+0xda8>
100089c0:	01440074 	movhi	r5,4097
100089c4:	10800404 	addi	r2,r2,16
100089c8:	20c00044 	addi	r3,r4,1
100089cc:	29410a04 	addi	r5,r5,1064
100089d0:	41400015 	stw	r5,0(r8)
100089d4:	44000115 	stw	r16,4(r8)
100089d8:	d8801c15 	stw	r2,112(sp)
100089dc:	d8c01b15 	stw	r3,108(sp)
100089e0:	a0fff20e 	bge	r20,r3,100089ac <__alt_data_end+0xf80089ac>
100089e4:	1000141e 	bne	r2,zero,10008a38 <___vfiprintf_internal_r+0xde4>
100089e8:	8c7ffc04 	addi	r17,r17,-16
100089ec:	01400044 	movi	r5,1
100089f0:	0009883a 	mov	r4,zero
100089f4:	d811883a 	mov	r8,sp
100089f8:	847ff116 	blt	r16,r17,100089c0 <__alt_data_end+0xf80089c0>
100089fc:	d8c02317 	ldw	r3,140(sp)
10008a00:	1445883a 	add	r2,r2,r17
10008a04:	44400115 	stw	r17,4(r8)
10008a08:	40c00015 	stw	r3,0(r8)
10008a0c:	d8801c15 	stw	r2,112(sp)
10008a10:	d9401b15 	stw	r5,108(sp)
10008a14:	00c001c4 	movi	r3,7
10008a18:	1940170e 	bge	r3,r5,10008a78 <___vfiprintf_internal_r+0xe24>
10008a1c:	1000101e 	bne	r2,zero,10008a60 <___vfiprintf_internal_r+0xe0c>
10008a20:	d8802517 	ldw	r2,148(sp)
10008a24:	14c11616 	blt	r2,r19,10008e80 <___vfiprintf_internal_r+0x122c>
10008a28:	d9002417 	ldw	r4,144(sp)
10008a2c:	2089883a 	add	r4,r4,r2
10008a30:	d9002415 	stw	r4,144(sp)
10008a34:	003e1806 	br	10008298 <__alt_data_end+0xf8008298>
10008a38:	d9801a04 	addi	r6,sp,104
10008a3c:	b80b883a 	mov	r5,r23
10008a40:	a809883a 	mov	r4,r21
10008a44:	0007b400 	call	10007b40 <__sprint_r.part.0>
10008a48:	103fba1e 	bne	r2,zero,10008934 <__alt_data_end+0xf8008934>
10008a4c:	d9001b17 	ldw	r4,108(sp)
10008a50:	d8801c17 	ldw	r2,112(sp)
10008a54:	d811883a 	mov	r8,sp
10008a58:	21400044 	addi	r5,r4,1
10008a5c:	003fd606 	br	100089b8 <__alt_data_end+0xf80089b8>
10008a60:	d9402017 	ldw	r5,128(sp)
10008a64:	d9002117 	ldw	r4,132(sp)
10008a68:	d9801a04 	addi	r6,sp,104
10008a6c:	0007b400 	call	10007b40 <__sprint_r.part.0>
10008a70:	103fb01e 	bne	r2,zero,10008934 <__alt_data_end+0xf8008934>
10008a74:	d8801c17 	ldw	r2,112(sp)
10008a78:	d8c02517 	ldw	r3,148(sp)
10008a7c:	1cc0010e 	bge	r3,r19,10008a84 <___vfiprintf_internal_r+0xe30>
10008a80:	9807883a 	mov	r3,r19
10008a84:	d9002417 	ldw	r4,144(sp)
10008a88:	20c9883a 	add	r4,r4,r3
10008a8c:	d9002415 	stw	r4,144(sp)
10008a90:	103e0126 	beq	r2,zero,10008298 <__alt_data_end+0xf8008298>
10008a94:	d9402017 	ldw	r5,128(sp)
10008a98:	d9002117 	ldw	r4,132(sp)
10008a9c:	d9801a04 	addi	r6,sp,104
10008aa0:	0007b400 	call	10007b40 <__sprint_r.part.0>
10008aa4:	103dfc26 	beq	r2,zero,10008298 <__alt_data_end+0xf8008298>
10008aa8:	003fa206 	br	10008934 <__alt_data_end+0xf8008934>
10008aac:	d9402017 	ldw	r5,128(sp)
10008ab0:	d9002117 	ldw	r4,132(sp)
10008ab4:	d9801a04 	addi	r6,sp,104
10008ab8:	d9c02b15 	stw	r7,172(sp)
10008abc:	0007b400 	call	10007b40 <__sprint_r.part.0>
10008ac0:	d9c02b17 	ldw	r7,172(sp)
10008ac4:	103f9b1e 	bne	r2,zero,10008934 <__alt_data_end+0xf8008934>
10008ac8:	d9001b17 	ldw	r4,108(sp)
10008acc:	d8801c17 	ldw	r2,112(sp)
10008ad0:	d811883a 	mov	r8,sp
10008ad4:	21800044 	addi	r6,r4,1
10008ad8:	003dbf06 	br	100081d8 <__alt_data_end+0xf80081d8>
10008adc:	1000d81e 	bne	r2,zero,10008e40 <___vfiprintf_internal_r+0x11ec>
10008ae0:	d9001d87 	ldb	r4,118(sp)
10008ae4:	20000a26 	beq	r4,zero,10008b10 <___vfiprintf_internal_r+0xebc>
10008ae8:	00800044 	movi	r2,1
10008aec:	d9001d84 	addi	r4,sp,118
10008af0:	100b883a 	mov	r5,r2
10008af4:	d9000015 	stw	r4,0(sp)
10008af8:	d8800115 	stw	r2,4(sp)
10008afc:	d811883a 	mov	r8,sp
10008b00:	2809883a 	mov	r4,r5
10008b04:	42000204 	addi	r8,r8,8
10008b08:	29400044 	addi	r5,r5,1
10008b0c:	003d9506 	br	10008164 <__alt_data_end+0xf8008164>
10008b10:	3800fd26 	beq	r7,zero,10008f08 <___vfiprintf_internal_r+0x12b4>
10008b14:	00800084 	movi	r2,2
10008b18:	d9001d04 	addi	r4,sp,116
10008b1c:	d9000015 	stw	r4,0(sp)
10008b20:	d8800115 	stw	r2,4(sp)
10008b24:	01400044 	movi	r5,1
10008b28:	d811883a 	mov	r8,sp
10008b2c:	2809883a 	mov	r4,r5
10008b30:	42000204 	addi	r8,r8,8
10008b34:	29400044 	addi	r5,r5,1
10008b38:	003f4606 	br	10008854 <__alt_data_end+0xf8008854>
10008b3c:	d8802517 	ldw	r2,148(sp)
10008b40:	14c0010e 	bge	r2,r19,10008b48 <___vfiprintf_internal_r+0xef4>
10008b44:	9805883a 	mov	r2,r19
10008b48:	d9402417 	ldw	r5,144(sp)
10008b4c:	288b883a 	add	r5,r5,r2
10008b50:	d9402415 	stw	r5,144(sp)
10008b54:	003dd006 	br	10008298 <__alt_data_end+0xf8008298>
10008b58:	d8001d85 	stb	zero,118(sp)
10008b5c:	80005d16 	blt	r16,zero,10008cd4 <___vfiprintf_internal_r+0x1080>
10008b60:	00ffdfc4 	movi	r3,-129
10008b64:	9d04b03a 	or	r2,r19,r20
10008b68:	88e2703a 	and	r17,r17,r3
10008b6c:	103d3726 	beq	r2,zero,1000804c <__alt_data_end+0xf800804c>
10008b70:	002b883a 	mov	r21,zero
10008b74:	d9002617 	ldw	r4,152(sp)
10008b78:	ddc01a04 	addi	r23,sp,104
10008b7c:	988003cc 	andi	r2,r19,15
10008b80:	a006973a 	slli	r3,r20,28
10008b84:	2085883a 	add	r2,r4,r2
10008b88:	9826d13a 	srli	r19,r19,4
10008b8c:	10800003 	ldbu	r2,0(r2)
10008b90:	a028d13a 	srli	r20,r20,4
10008b94:	bdffffc4 	addi	r23,r23,-1
10008b98:	1ce6b03a 	or	r19,r3,r19
10008b9c:	b8800005 	stb	r2,0(r23)
10008ba0:	9d04b03a 	or	r2,r19,r20
10008ba4:	103ff51e 	bne	r2,zero,10008b7c <__alt_data_end+0xf8008b7c>
10008ba8:	d8801e17 	ldw	r2,120(sp)
10008bac:	15e9c83a 	sub	r20,r2,r23
10008bb0:	003d2b06 	br	10008060 <__alt_data_end+0xf8008060>
10008bb4:	d9402017 	ldw	r5,128(sp)
10008bb8:	d9002117 	ldw	r4,132(sp)
10008bbc:	d9801a04 	addi	r6,sp,104
10008bc0:	0007b400 	call	10007b40 <__sprint_r.part.0>
10008bc4:	103f5b1e 	bne	r2,zero,10008934 <__alt_data_end+0xf8008934>
10008bc8:	d8801c17 	ldw	r2,112(sp)
10008bcc:	d811883a 	mov	r8,sp
10008bd0:	003f6706 	br	10008970 <__alt_data_end+0xf8008970>
10008bd4:	d9402017 	ldw	r5,128(sp)
10008bd8:	d9002117 	ldw	r4,132(sp)
10008bdc:	d9801a04 	addi	r6,sp,104
10008be0:	0007b400 	call	10007b40 <__sprint_r.part.0>
10008be4:	103f531e 	bne	r2,zero,10008934 <__alt_data_end+0xf8008934>
10008be8:	d811883a 	mov	r8,sp
10008bec:	003cd906 	br	10007f54 <__alt_data_end+0xf8007f54>
10008bf0:	10803fcc 	andi	r2,r2,255
10008bf4:	1080201c 	xori	r2,r2,128
10008bf8:	10bfe004 	addi	r2,r2,-128
10008bfc:	00c00c04 	movi	r3,48
10008c00:	10ffe926 	beq	r2,r3,10008ba8 <__alt_data_end+0xf8008ba8>
10008c04:	b8ffffc5 	stb	r3,-1(r23)
10008c08:	d8c01e17 	ldw	r3,120(sp)
10008c0c:	b8bfffc4 	addi	r2,r23,-1
10008c10:	102f883a 	mov	r23,r2
10008c14:	18a9c83a 	sub	r20,r3,r2
10008c18:	003d1106 	br	10008060 <__alt_data_end+0xf8008060>
10008c1c:	d9402017 	ldw	r5,128(sp)
10008c20:	d9002117 	ldw	r4,132(sp)
10008c24:	d9801a04 	addi	r6,sp,104
10008c28:	d8c02a15 	stw	r3,168(sp)
10008c2c:	d9c02b15 	stw	r7,172(sp)
10008c30:	0007b400 	call	10007b40 <__sprint_r.part.0>
10008c34:	d8c02a17 	ldw	r3,168(sp)
10008c38:	d9c02b17 	ldw	r7,172(sp)
10008c3c:	103f3d1e 	bne	r2,zero,10008934 <__alt_data_end+0xf8008934>
10008c40:	d9001b17 	ldw	r4,108(sp)
10008c44:	d8801c17 	ldw	r2,112(sp)
10008c48:	d811883a 	mov	r8,sp
10008c4c:	21400044 	addi	r5,r4,1
10008c50:	003d4406 	br	10008164 <__alt_data_end+0xf8008164>
10008c54:	d9402017 	ldw	r5,128(sp)
10008c58:	d9002117 	ldw	r4,132(sp)
10008c5c:	d9801a04 	addi	r6,sp,104
10008c60:	d8c02a15 	stw	r3,168(sp)
10008c64:	0007b400 	call	10007b40 <__sprint_r.part.0>
10008c68:	d8c02a17 	ldw	r3,168(sp)
10008c6c:	103f311e 	bne	r2,zero,10008934 <__alt_data_end+0xf8008934>
10008c70:	d9001b17 	ldw	r4,108(sp)
10008c74:	d8801c17 	ldw	r2,112(sp)
10008c78:	d811883a 	mov	r8,sp
10008c7c:	21400044 	addi	r5,r4,1
10008c80:	003ef406 	br	10008854 <__alt_data_end+0xf8008854>
10008c84:	1000bd1e 	bne	r2,zero,10008f7c <___vfiprintf_internal_r+0x1328>
10008c88:	01400044 	movi	r5,1
10008c8c:	0009883a 	mov	r4,zero
10008c90:	d811883a 	mov	r8,sp
10008c94:	003ef106 	br	1000885c <__alt_data_end+0xf800885c>
10008c98:	d9402017 	ldw	r5,128(sp)
10008c9c:	d9002117 	ldw	r4,132(sp)
10008ca0:	d9801a04 	addi	r6,sp,104
10008ca4:	0007b400 	call	10007b40 <__sprint_r.part.0>
10008ca8:	103f221e 	bne	r2,zero,10008934 <__alt_data_end+0xf8008934>
10008cac:	d9401b17 	ldw	r5,108(sp)
10008cb0:	d8801c17 	ldw	r2,112(sp)
10008cb4:	d811883a 	mov	r8,sp
10008cb8:	29400044 	addi	r5,r5,1
10008cbc:	003d6206 	br	10008248 <__alt_data_end+0xf8008248>
10008cc0:	01440074 	movhi	r5,4097
10008cc4:	2940a604 	addi	r5,r5,664
10008cc8:	d9402615 	stw	r5,152(sp)
10008ccc:	d8c02215 	stw	r3,136(sp)
10008cd0:	1023883a 	mov	r17,r2
10008cd4:	9d04b03a 	or	r2,r19,r20
10008cd8:	103fa51e 	bne	r2,zero,10008b70 <__alt_data_end+0xf8008b70>
10008cdc:	002b883a 	mov	r21,zero
10008ce0:	00800084 	movi	r2,2
10008ce4:	003e4a06 	br	10008610 <__alt_data_end+0xf8008610>
10008ce8:	01440074 	movhi	r5,4097
10008cec:	2940a604 	addi	r5,r5,664
10008cf0:	002b883a 	mov	r21,zero
10008cf4:	d9402615 	stw	r5,152(sp)
10008cf8:	003f9e06 	br	10008b74 <__alt_data_end+0xf8008b74>
10008cfc:	d9402217 	ldw	r5,136(sp)
10008d00:	d8001d85 	stb	zero,118(sp)
10008d04:	0029883a 	mov	r20,zero
10008d08:	28800104 	addi	r2,r5,4
10008d0c:	2cc00017 	ldw	r19,0(r5)
10008d10:	803e3a16 	blt	r16,zero,100085fc <__alt_data_end+0xf80085fc>
10008d14:	00ffdfc4 	movi	r3,-129
10008d18:	d8802215 	stw	r2,136(sp)
10008d1c:	88e2703a 	and	r17,r17,r3
10008d20:	002b883a 	mov	r21,zero
10008d24:	983e9b26 	beq	r19,zero,10008794 <__alt_data_end+0xf8008794>
10008d28:	00800244 	movi	r2,9
10008d2c:	14fdc936 	bltu	r2,r19,10008454 <__alt_data_end+0xf8008454>
10008d30:	003e9a06 	br	1000879c <__alt_data_end+0xf800879c>
10008d34:	00800c04 	movi	r2,48
10008d38:	d8c01d45 	stb	r3,117(sp)
10008d3c:	d8801d05 	stb	r2,116(sp)
10008d40:	d8001d85 	stb	zero,118(sp)
10008d44:	88c00094 	ori	r3,r17,2
10008d48:	80009c16 	blt	r16,zero,10008fbc <___vfiprintf_internal_r+0x1368>
10008d4c:	00bfdfc4 	movi	r2,-129
10008d50:	88a2703a 	and	r17,r17,r2
10008d54:	8c400094 	ori	r17,r17,2
10008d58:	002b883a 	mov	r21,zero
10008d5c:	003f8506 	br	10008b74 <__alt_data_end+0xf8008b74>
10008d60:	b029883a 	mov	r20,r22
10008d64:	003c0b06 	br	10007d94 <__alt_data_end+0xf8007d94>
10008d68:	04e7c83a 	sub	r19,zero,r19
10008d6c:	05400b44 	movi	r21,45
10008d70:	9804c03a 	cmpne	r2,r19,zero
10008d74:	0529c83a 	sub	r20,zero,r20
10008d78:	dd401d85 	stb	r21,118(sp)
10008d7c:	a0a9c83a 	sub	r20,r20,r2
10008d80:	80009716 	blt	r16,zero,10008fe0 <___vfiprintf_internal_r+0x138c>
10008d84:	00bfdfc4 	movi	r2,-129
10008d88:	88a2703a 	and	r17,r17,r2
10008d8c:	003db006 	br	10008450 <__alt_data_end+0xf8008450>
10008d90:	b0c00007 	ldb	r3,0(r22)
10008d94:	003c0c06 	br	10007dc8 <__alt_data_end+0xf8007dc8>
10008d98:	8880100c 	andi	r2,r17,64
10008d9c:	d8001d85 	stb	zero,118(sp)
10008da0:	1000461e 	bne	r2,zero,10008ebc <___vfiprintf_internal_r+0x1268>
10008da4:	d9002217 	ldw	r4,136(sp)
10008da8:	0029883a 	mov	r20,zero
10008dac:	20800104 	addi	r2,r4,4
10008db0:	24c00017 	ldw	r19,0(r4)
10008db4:	803df80e 	bge	r16,zero,10008598 <__alt_data_end+0xf8008598>
10008db8:	9d06b03a 	or	r3,r19,r20
10008dbc:	d8802215 	stw	r2,136(sp)
10008dc0:	183d5e1e 	bne	r3,zero,1000833c <__alt_data_end+0xf800833c>
10008dc4:	002b883a 	mov	r21,zero
10008dc8:	0005883a 	mov	r2,zero
10008dcc:	003e1006 	br	10008610 <__alt_data_end+0xf8008610>
10008dd0:	8880040c 	andi	r2,r17,16
10008dd4:	1000321e 	bne	r2,zero,10008ea0 <___vfiprintf_internal_r+0x124c>
10008dd8:	8c40100c 	andi	r17,r17,64
10008ddc:	88008d26 	beq	r17,zero,10009014 <___vfiprintf_internal_r+0x13c0>
10008de0:	d9402217 	ldw	r5,136(sp)
10008de4:	d8c02417 	ldw	r3,144(sp)
10008de8:	28800017 	ldw	r2,0(r5)
10008dec:	29400104 	addi	r5,r5,4
10008df0:	d9402215 	stw	r5,136(sp)
10008df4:	10c0000d 	sth	r3,0(r2)
10008df8:	003bca06 	br	10007d24 <__alt_data_end+0xf8007d24>
10008dfc:	8880100c 	andi	r2,r17,64
10008e00:	10003a26 	beq	r2,zero,10008eec <___vfiprintf_internal_r+0x1298>
10008e04:	d8802217 	ldw	r2,136(sp)
10008e08:	14c0000f 	ldh	r19,0(r2)
10008e0c:	10800104 	addi	r2,r2,4
10008e10:	d8802215 	stw	r2,136(sp)
10008e14:	9829d7fa 	srai	r20,r19,31
10008e18:	a005883a 	mov	r2,r20
10008e1c:	003d8506 	br	10008434 <__alt_data_end+0xf8008434>
10008e20:	8880100c 	andi	r2,r17,64
10008e24:	10002b26 	beq	r2,zero,10008ed4 <___vfiprintf_internal_r+0x1280>
10008e28:	d8802217 	ldw	r2,136(sp)
10008e2c:	0029883a 	mov	r20,zero
10008e30:	14c0000b 	ldhu	r19,0(r2)
10008e34:	10800104 	addi	r2,r2,4
10008e38:	d8802215 	stw	r2,136(sp)
10008e3c:	003d5d06 	br	100083b4 <__alt_data_end+0xf80083b4>
10008e40:	d9402017 	ldw	r5,128(sp)
10008e44:	d9002117 	ldw	r4,132(sp)
10008e48:	d9801a04 	addi	r6,sp,104
10008e4c:	d8c02a15 	stw	r3,168(sp)
10008e50:	d9c02b15 	stw	r7,172(sp)
10008e54:	0007b400 	call	10007b40 <__sprint_r.part.0>
10008e58:	d8c02a17 	ldw	r3,168(sp)
10008e5c:	d9c02b17 	ldw	r7,172(sp)
10008e60:	103eb41e 	bne	r2,zero,10008934 <__alt_data_end+0xf8008934>
10008e64:	d9001b17 	ldw	r4,108(sp)
10008e68:	d8801c17 	ldw	r2,112(sp)
10008e6c:	d811883a 	mov	r8,sp
10008e70:	21400044 	addi	r5,r4,1
10008e74:	003e6706 	br	10008814 <__alt_data_end+0xf8008814>
10008e78:	00bfffc4 	movi	r2,-1
10008e7c:	003c4a06 	br	10007fa8 <__alt_data_end+0xf8007fa8>
10008e80:	9805883a 	mov	r2,r19
10008e84:	003ee806 	br	10008a28 <__alt_data_end+0xf8008a28>
10008e88:	d8c02217 	ldw	r3,136(sp)
10008e8c:	0029883a 	mov	r20,zero
10008e90:	18800104 	addi	r2,r3,4
10008e94:	1cc0000b 	ldhu	r19,0(r3)
10008e98:	803f9e0e 	bge	r16,zero,10008d14 <__alt_data_end+0xf8008d14>
10008e9c:	003dd706 	br	100085fc <__alt_data_end+0xf80085fc>
10008ea0:	d8c02217 	ldw	r3,136(sp)
10008ea4:	d9002417 	ldw	r4,144(sp)
10008ea8:	18800017 	ldw	r2,0(r3)
10008eac:	18c00104 	addi	r3,r3,4
10008eb0:	d8c02215 	stw	r3,136(sp)
10008eb4:	11000015 	stw	r4,0(r2)
10008eb8:	003b9a06 	br	10007d24 <__alt_data_end+0xf8007d24>
10008ebc:	d8c02217 	ldw	r3,136(sp)
10008ec0:	0029883a 	mov	r20,zero
10008ec4:	18800104 	addi	r2,r3,4
10008ec8:	1cc0000b 	ldhu	r19,0(r3)
10008ecc:	803db20e 	bge	r16,zero,10008598 <__alt_data_end+0xf8008598>
10008ed0:	003fb906 	br	10008db8 <__alt_data_end+0xf8008db8>
10008ed4:	d9002217 	ldw	r4,136(sp)
10008ed8:	0029883a 	mov	r20,zero
10008edc:	24c00017 	ldw	r19,0(r4)
10008ee0:	21000104 	addi	r4,r4,4
10008ee4:	d9002215 	stw	r4,136(sp)
10008ee8:	003d3206 	br	100083b4 <__alt_data_end+0xf80083b4>
10008eec:	d8c02217 	ldw	r3,136(sp)
10008ef0:	1cc00017 	ldw	r19,0(r3)
10008ef4:	18c00104 	addi	r3,r3,4
10008ef8:	d8c02215 	stw	r3,136(sp)
10008efc:	9829d7fa 	srai	r20,r19,31
10008f00:	a005883a 	mov	r2,r20
10008f04:	003d4b06 	br	10008434 <__alt_data_end+0xf8008434>
10008f08:	0009883a 	mov	r4,zero
10008f0c:	01400044 	movi	r5,1
10008f10:	d811883a 	mov	r8,sp
10008f14:	003e4f06 	br	10008854 <__alt_data_end+0xf8008854>
10008f18:	d8c02215 	stw	r3,136(sp)
10008f1c:	002b883a 	mov	r21,zero
10008f20:	003db806 	br	10008604 <__alt_data_end+0xf8008604>
10008f24:	d811883a 	mov	r8,sp
10008f28:	003e9606 	br	10008984 <__alt_data_end+0xf8008984>
10008f2c:	01040074 	movhi	r4,4097
10008f30:	21010604 	addi	r4,r4,1048
10008f34:	d9002315 	stw	r4,140(sp)
10008f38:	003e6306 	br	100088c8 <__alt_data_end+0xf80088c8>
10008f3c:	b0c00043 	ldbu	r3,1(r22)
10008f40:	8c400814 	ori	r17,r17,32
10008f44:	b5800044 	addi	r22,r22,1
10008f48:	18c03fcc 	andi	r3,r3,255
10008f4c:	18c0201c 	xori	r3,r3,128
10008f50:	18ffe004 	addi	r3,r3,-128
10008f54:	003b9c06 	br	10007dc8 <__alt_data_end+0xf8007dc8>
10008f58:	b809883a 	mov	r4,r23
10008f5c:	da002a15 	stw	r8,168(sp)
10008f60:	0007aa80 	call	10007aa8 <strlen>
10008f64:	1029883a 	mov	r20,r2
10008f68:	dd401d83 	ldbu	r21,118(sp)
10008f6c:	df002215 	stw	fp,136(sp)
10008f70:	0021883a 	mov	r16,zero
10008f74:	da002a17 	ldw	r8,168(sp)
10008f78:	003c3906 	br	10008060 <__alt_data_end+0xf8008060>
10008f7c:	d9402017 	ldw	r5,128(sp)
10008f80:	d9002117 	ldw	r4,132(sp)
10008f84:	d9801a04 	addi	r6,sp,104
10008f88:	0007b400 	call	10007b40 <__sprint_r.part.0>
10008f8c:	103e691e 	bne	r2,zero,10008934 <__alt_data_end+0xf8008934>
10008f90:	d9001b17 	ldw	r4,108(sp)
10008f94:	d8801c17 	ldw	r2,112(sp)
10008f98:	d811883a 	mov	r8,sp
10008f9c:	21400044 	addi	r5,r4,1
10008fa0:	003e2e06 	br	1000885c <__alt_data_end+0xf800885c>
10008fa4:	01040074 	movhi	r4,4097
10008fa8:	21010a04 	addi	r4,r4,1064
10008fac:	d9002315 	stw	r4,140(sp)
10008fb0:	d9001b17 	ldw	r4,108(sp)
10008fb4:	21000044 	addi	r4,r4,1
10008fb8:	003c5e06 	br	10008134 <__alt_data_end+0xf8008134>
10008fbc:	002b883a 	mov	r21,zero
10008fc0:	00800084 	movi	r2,2
10008fc4:	10803fcc 	andi	r2,r2,255
10008fc8:	01000044 	movi	r4,1
10008fcc:	11002b26 	beq	r2,r4,1000907c <___vfiprintf_internal_r+0x1428>
10008fd0:	01000084 	movi	r4,2
10008fd4:	11002b1e 	bne	r2,r4,10009084 <___vfiprintf_internal_r+0x1430>
10008fd8:	1823883a 	mov	r17,r3
10008fdc:	003ee506 	br	10008b74 <__alt_data_end+0xf8008b74>
10008fe0:	8807883a 	mov	r3,r17
10008fe4:	00800044 	movi	r2,1
10008fe8:	003ff606 	br	10008fc4 <__alt_data_end+0xf8008fc4>
10008fec:	00800184 	movi	r2,6
10008ff0:	1400012e 	bgeu	r2,r16,10008ff8 <___vfiprintf_internal_r+0x13a4>
10008ff4:	1021883a 	mov	r16,r2
10008ff8:	8029883a 	mov	r20,r16
10008ffc:	8027883a 	mov	r19,r16
10009000:	80002216 	blt	r16,zero,1000908c <___vfiprintf_internal_r+0x1438>
10009004:	05c40074 	movhi	r23,4097
10009008:	df002215 	stw	fp,136(sp)
1000900c:	bdc0ab04 	addi	r23,r23,684
10009010:	003cfb06 	br	10008400 <__alt_data_end+0xf8008400>
10009014:	d9002217 	ldw	r4,136(sp)
10009018:	d9402417 	ldw	r5,144(sp)
1000901c:	20800017 	ldw	r2,0(r4)
10009020:	21000104 	addi	r4,r4,4
10009024:	d9002215 	stw	r4,136(sp)
10009028:	11400015 	stw	r5,0(r2)
1000902c:	003b3d06 	br	10007d24 <__alt_data_end+0xf8007d24>
10009030:	01440074 	movhi	r5,4097
10009034:	29410a04 	addi	r5,r5,1064
10009038:	d9402315 	stw	r5,140(sp)
1000903c:	d9401b17 	ldw	r5,108(sp)
10009040:	29400044 	addi	r5,r5,1
10009044:	003e6d06 	br	100089fc <__alt_data_end+0xf80089fc>
10009048:	8029883a 	mov	r20,r16
1000904c:	dd401d83 	ldbu	r21,118(sp)
10009050:	df002215 	stw	fp,136(sp)
10009054:	0021883a 	mov	r16,zero
10009058:	003c0106 	br	10008060 <__alt_data_end+0xf8008060>
1000905c:	00c40074 	movhi	r3,4097
10009060:	18c10604 	addi	r3,r3,1048
10009064:	d8c02315 	stw	r3,140(sp)
10009068:	280d883a 	mov	r6,r5
1000906c:	003c6906 	br	10008214 <__alt_data_end+0xf8008214>
10009070:	802d883a 	mov	r22,r16
10009074:	0021883a 	mov	r16,zero
10009078:	003b5406 	br	10007dcc <__alt_data_end+0xf8007dcc>
1000907c:	1823883a 	mov	r17,r3
10009080:	003cf306 	br	10008450 <__alt_data_end+0xf8008450>
10009084:	1823883a 	mov	r17,r3
10009088:	003cad06 	br	10008340 <__alt_data_end+0xf8008340>
1000908c:	0027883a 	mov	r19,zero
10009090:	003fdc06 	br	10009004 <__alt_data_end+0xf8009004>
10009094:	d9402217 	ldw	r5,136(sp)
10009098:	8005883a 	mov	r2,r16
1000909c:	b0c00043 	ldbu	r3,1(r22)
100090a0:	2c000017 	ldw	r16,0(r5)
100090a4:	29000104 	addi	r4,r5,4
100090a8:	d9002215 	stw	r4,136(sp)
100090ac:	102d883a 	mov	r22,r2
100090b0:	803fa50e 	bge	r16,zero,10008f48 <__alt_data_end+0xf8008f48>
100090b4:	18c03fcc 	andi	r3,r3,255
100090b8:	18c0201c 	xori	r3,r3,128
100090bc:	043fffc4 	movi	r16,-1
100090c0:	18ffe004 	addi	r3,r3,-128
100090c4:	003b4006 	br	10007dc8 <__alt_data_end+0xf8007dc8>
100090c8:	d9402303 	ldbu	r5,140(sp)
100090cc:	d9401d85 	stb	r5,118(sp)
100090d0:	003cae06 	br	1000838c <__alt_data_end+0xf800838c>
100090d4:	d8c02303 	ldbu	r3,140(sp)
100090d8:	d8c01d85 	stb	r3,118(sp)
100090dc:	003d1406 	br	10008530 <__alt_data_end+0xf8008530>
100090e0:	d8c02303 	ldbu	r3,140(sp)
100090e4:	d8c01d85 	stb	r3,118(sp)
100090e8:	003cca06 	br	10008414 <__alt_data_end+0xf8008414>
100090ec:	8880004c 	andi	r2,r17,1
100090f0:	002b883a 	mov	r21,zero
100090f4:	10000526 	beq	r2,zero,1000910c <___vfiprintf_internal_r+0x14b8>
100090f8:	00800c04 	movi	r2,48
100090fc:	d88019c5 	stb	r2,103(sp)
10009100:	dd002817 	ldw	r20,160(sp)
10009104:	ddc019c4 	addi	r23,sp,103
10009108:	003bd506 	br	10008060 <__alt_data_end+0xf8008060>
1000910c:	0029883a 	mov	r20,zero
10009110:	ddc01a04 	addi	r23,sp,104
10009114:	003bd206 	br	10008060 <__alt_data_end+0xf8008060>
10009118:	d9002303 	ldbu	r4,140(sp)
1000911c:	d9001d85 	stb	r4,118(sp)
10009120:	003da606 	br	100087bc <__alt_data_end+0xf80087bc>
10009124:	d8c02303 	ldbu	r3,140(sp)
10009128:	d8c01d85 	stb	r3,118(sp)
1000912c:	003c7606 	br	10008308 <__alt_data_end+0xf8008308>
10009130:	d8c02303 	ldbu	r3,140(sp)
10009134:	d8c01d85 	stb	r3,118(sp)
10009138:	003c6506 	br	100082d0 <__alt_data_end+0xf80082d0>
1000913c:	d9002303 	ldbu	r4,140(sp)
10009140:	d9001d85 	stb	r4,118(sp)
10009144:	003d3d06 	br	1000863c <__alt_data_end+0xf800863c>
10009148:	d8c02303 	ldbu	r3,140(sp)
1000914c:	d8c01d85 	stb	r3,118(sp)
10009150:	003d1d06 	br	100085c8 <__alt_data_end+0xf80085c8>
10009154:	d8c02303 	ldbu	r3,140(sp)
10009158:	d8c01d85 	stb	r3,118(sp)
1000915c:	003d0306 	br	1000856c <__alt_data_end+0xf800856c>

10009160 <__vfiprintf_internal>:
10009160:	00840074 	movhi	r2,4097
10009164:	10880a04 	addi	r2,r2,8232
10009168:	300f883a 	mov	r7,r6
1000916c:	280d883a 	mov	r6,r5
10009170:	200b883a 	mov	r5,r4
10009174:	11000017 	ldw	r4,0(r2)
10009178:	0007c541 	jmpi	10007c54 <___vfiprintf_internal_r>

1000917c <__sbprintf>:
1000917c:	2880030b 	ldhu	r2,12(r5)
10009180:	2ac01917 	ldw	r11,100(r5)
10009184:	2a80038b 	ldhu	r10,14(r5)
10009188:	2a400717 	ldw	r9,28(r5)
1000918c:	2a000917 	ldw	r8,36(r5)
10009190:	defee204 	addi	sp,sp,-1144
10009194:	00c10004 	movi	r3,1024
10009198:	dc011a15 	stw	r16,1128(sp)
1000919c:	10bfff4c 	andi	r2,r2,65533
100091a0:	2821883a 	mov	r16,r5
100091a4:	d8cb883a 	add	r5,sp,r3
100091a8:	dc811c15 	stw	r18,1136(sp)
100091ac:	dc411b15 	stw	r17,1132(sp)
100091b0:	dfc11d15 	stw	ra,1140(sp)
100091b4:	2025883a 	mov	r18,r4
100091b8:	d881030d 	sth	r2,1036(sp)
100091bc:	dac11915 	stw	r11,1124(sp)
100091c0:	da81038d 	sth	r10,1038(sp)
100091c4:	da410715 	stw	r9,1052(sp)
100091c8:	da010915 	stw	r8,1060(sp)
100091cc:	dec10015 	stw	sp,1024(sp)
100091d0:	dec10415 	stw	sp,1040(sp)
100091d4:	d8c10215 	stw	r3,1032(sp)
100091d8:	d8c10515 	stw	r3,1044(sp)
100091dc:	d8010615 	stw	zero,1048(sp)
100091e0:	0007c540 	call	10007c54 <___vfiprintf_internal_r>
100091e4:	1023883a 	mov	r17,r2
100091e8:	10000416 	blt	r2,zero,100091fc <__sbprintf+0x80>
100091ec:	d9410004 	addi	r5,sp,1024
100091f0:	9009883a 	mov	r4,r18
100091f4:	0000a480 	call	10000a48 <_fflush_r>
100091f8:	10000d1e 	bne	r2,zero,10009230 <__sbprintf+0xb4>
100091fc:	d881030b 	ldhu	r2,1036(sp)
10009200:	1080100c 	andi	r2,r2,64
10009204:	10000326 	beq	r2,zero,10009214 <__sbprintf+0x98>
10009208:	8080030b 	ldhu	r2,12(r16)
1000920c:	10801014 	ori	r2,r2,64
10009210:	8080030d 	sth	r2,12(r16)
10009214:	8805883a 	mov	r2,r17
10009218:	dfc11d17 	ldw	ra,1140(sp)
1000921c:	dc811c17 	ldw	r18,1136(sp)
10009220:	dc411b17 	ldw	r17,1132(sp)
10009224:	dc011a17 	ldw	r16,1128(sp)
10009228:	dec11e04 	addi	sp,sp,1144
1000922c:	f800283a 	ret
10009230:	047fffc4 	movi	r17,-1
10009234:	003ff106 	br	100091fc <__alt_data_end+0xf80091fc>

10009238 <__swbuf_r>:
10009238:	defffb04 	addi	sp,sp,-20
1000923c:	dcc00315 	stw	r19,12(sp)
10009240:	dc800215 	stw	r18,8(sp)
10009244:	dc000015 	stw	r16,0(sp)
10009248:	dfc00415 	stw	ra,16(sp)
1000924c:	dc400115 	stw	r17,4(sp)
10009250:	2025883a 	mov	r18,r4
10009254:	2827883a 	mov	r19,r5
10009258:	3021883a 	mov	r16,r6
1000925c:	20000226 	beq	r4,zero,10009268 <__swbuf_r+0x30>
10009260:	20800e17 	ldw	r2,56(r4)
10009264:	10004226 	beq	r2,zero,10009370 <__swbuf_r+0x138>
10009268:	80800617 	ldw	r2,24(r16)
1000926c:	8100030b 	ldhu	r4,12(r16)
10009270:	80800215 	stw	r2,8(r16)
10009274:	2080020c 	andi	r2,r4,8
10009278:	10003626 	beq	r2,zero,10009354 <__swbuf_r+0x11c>
1000927c:	80c00417 	ldw	r3,16(r16)
10009280:	18003426 	beq	r3,zero,10009354 <__swbuf_r+0x11c>
10009284:	2088000c 	andi	r2,r4,8192
10009288:	9c403fcc 	andi	r17,r19,255
1000928c:	10001a26 	beq	r2,zero,100092f8 <__swbuf_r+0xc0>
10009290:	80800017 	ldw	r2,0(r16)
10009294:	81000517 	ldw	r4,20(r16)
10009298:	10c7c83a 	sub	r3,r2,r3
1000929c:	1900200e 	bge	r3,r4,10009320 <__swbuf_r+0xe8>
100092a0:	18c00044 	addi	r3,r3,1
100092a4:	81000217 	ldw	r4,8(r16)
100092a8:	11400044 	addi	r5,r2,1
100092ac:	81400015 	stw	r5,0(r16)
100092b0:	213fffc4 	addi	r4,r4,-1
100092b4:	81000215 	stw	r4,8(r16)
100092b8:	14c00005 	stb	r19,0(r2)
100092bc:	80800517 	ldw	r2,20(r16)
100092c0:	10c01e26 	beq	r2,r3,1000933c <__swbuf_r+0x104>
100092c4:	8080030b 	ldhu	r2,12(r16)
100092c8:	1080004c 	andi	r2,r2,1
100092cc:	10000226 	beq	r2,zero,100092d8 <__swbuf_r+0xa0>
100092d0:	00800284 	movi	r2,10
100092d4:	88801926 	beq	r17,r2,1000933c <__swbuf_r+0x104>
100092d8:	8805883a 	mov	r2,r17
100092dc:	dfc00417 	ldw	ra,16(sp)
100092e0:	dcc00317 	ldw	r19,12(sp)
100092e4:	dc800217 	ldw	r18,8(sp)
100092e8:	dc400117 	ldw	r17,4(sp)
100092ec:	dc000017 	ldw	r16,0(sp)
100092f0:	dec00504 	addi	sp,sp,20
100092f4:	f800283a 	ret
100092f8:	81401917 	ldw	r5,100(r16)
100092fc:	00b7ffc4 	movi	r2,-8193
10009300:	21080014 	ori	r4,r4,8192
10009304:	2884703a 	and	r2,r5,r2
10009308:	80801915 	stw	r2,100(r16)
1000930c:	80800017 	ldw	r2,0(r16)
10009310:	8100030d 	sth	r4,12(r16)
10009314:	81000517 	ldw	r4,20(r16)
10009318:	10c7c83a 	sub	r3,r2,r3
1000931c:	193fe016 	blt	r3,r4,100092a0 <__alt_data_end+0xf80092a0>
10009320:	800b883a 	mov	r5,r16
10009324:	9009883a 	mov	r4,r18
10009328:	0000a480 	call	10000a48 <_fflush_r>
1000932c:	1000071e 	bne	r2,zero,1000934c <__swbuf_r+0x114>
10009330:	80800017 	ldw	r2,0(r16)
10009334:	00c00044 	movi	r3,1
10009338:	003fda06 	br	100092a4 <__alt_data_end+0xf80092a4>
1000933c:	800b883a 	mov	r5,r16
10009340:	9009883a 	mov	r4,r18
10009344:	0000a480 	call	10000a48 <_fflush_r>
10009348:	103fe326 	beq	r2,zero,100092d8 <__alt_data_end+0xf80092d8>
1000934c:	00bfffc4 	movi	r2,-1
10009350:	003fe206 	br	100092dc <__alt_data_end+0xf80092dc>
10009354:	800b883a 	mov	r5,r16
10009358:	9009883a 	mov	r4,r18
1000935c:	00045880 	call	10004588 <__swsetup_r>
10009360:	103ffa1e 	bne	r2,zero,1000934c <__alt_data_end+0xf800934c>
10009364:	8100030b 	ldhu	r4,12(r16)
10009368:	80c00417 	ldw	r3,16(r16)
1000936c:	003fc506 	br	10009284 <__alt_data_end+0xf8009284>
10009370:	0000e340 	call	10000e34 <__sinit>
10009374:	003fbc06 	br	10009268 <__alt_data_end+0xf8009268>

10009378 <__swbuf>:
10009378:	00840074 	movhi	r2,4097
1000937c:	10880a04 	addi	r2,r2,8232
10009380:	280d883a 	mov	r6,r5
10009384:	200b883a 	mov	r5,r4
10009388:	11000017 	ldw	r4,0(r2)
1000938c:	00092381 	jmpi	10009238 <__swbuf_r>

10009390 <_calloc_r>:
10009390:	defffe04 	addi	sp,sp,-8
10009394:	2805883a 	mov	r2,r5
10009398:	dc000015 	stw	r16,0(sp)
1000939c:	300b883a 	mov	r5,r6
100093a0:	2021883a 	mov	r16,r4
100093a4:	1009883a 	mov	r4,r2
100093a8:	dfc00115 	stw	ra,4(sp)
100093ac:	00006840 	call	10000684 <__mulsi3>
100093b0:	100b883a 	mov	r5,r2
100093b4:	8009883a 	mov	r4,r16
100093b8:	00014c40 	call	100014c4 <_malloc_r>
100093bc:	10002926 	beq	r2,zero,10009464 <_calloc_r+0xd4>
100093c0:	11bfff17 	ldw	r6,-4(r2)
100093c4:	1021883a 	mov	r16,r2
100093c8:	00bfff04 	movi	r2,-4
100093cc:	308c703a 	and	r6,r6,r2
100093d0:	00c00904 	movi	r3,36
100093d4:	308d883a 	add	r6,r6,r2
100093d8:	19801636 	bltu	r3,r6,10009434 <_calloc_r+0xa4>
100093dc:	008004c4 	movi	r2,19
100093e0:	11800b2e 	bgeu	r2,r6,10009410 <_calloc_r+0x80>
100093e4:	80000015 	stw	zero,0(r16)
100093e8:	80000115 	stw	zero,4(r16)
100093ec:	008006c4 	movi	r2,27
100093f0:	11801a2e 	bgeu	r2,r6,1000945c <_calloc_r+0xcc>
100093f4:	80000215 	stw	zero,8(r16)
100093f8:	80000315 	stw	zero,12(r16)
100093fc:	30c0151e 	bne	r6,r3,10009454 <_calloc_r+0xc4>
10009400:	80000415 	stw	zero,16(r16)
10009404:	80800604 	addi	r2,r16,24
10009408:	80000515 	stw	zero,20(r16)
1000940c:	00000106 	br	10009414 <_calloc_r+0x84>
10009410:	8005883a 	mov	r2,r16
10009414:	10000015 	stw	zero,0(r2)
10009418:	10000115 	stw	zero,4(r2)
1000941c:	10000215 	stw	zero,8(r2)
10009420:	8005883a 	mov	r2,r16
10009424:	dfc00117 	ldw	ra,4(sp)
10009428:	dc000017 	ldw	r16,0(sp)
1000942c:	dec00204 	addi	sp,sp,8
10009430:	f800283a 	ret
10009434:	000b883a 	mov	r5,zero
10009438:	8009883a 	mov	r4,r16
1000943c:	0001e180 	call	10001e18 <memset>
10009440:	8005883a 	mov	r2,r16
10009444:	dfc00117 	ldw	ra,4(sp)
10009448:	dc000017 	ldw	r16,0(sp)
1000944c:	dec00204 	addi	sp,sp,8
10009450:	f800283a 	ret
10009454:	80800404 	addi	r2,r16,16
10009458:	003fee06 	br	10009414 <__alt_data_end+0xf8009414>
1000945c:	80800204 	addi	r2,r16,8
10009460:	003fec06 	br	10009414 <__alt_data_end+0xf8009414>
10009464:	0005883a 	mov	r2,zero
10009468:	003fee06 	br	10009424 <__alt_data_end+0xf8009424>

1000946c <__fputwc>:
1000946c:	defff804 	addi	sp,sp,-32
10009470:	dcc00415 	stw	r19,16(sp)
10009474:	dc800315 	stw	r18,12(sp)
10009478:	dc000115 	stw	r16,4(sp)
1000947c:	dfc00715 	stw	ra,28(sp)
10009480:	dd400615 	stw	r21,24(sp)
10009484:	dd000515 	stw	r20,20(sp)
10009488:	dc400215 	stw	r17,8(sp)
1000948c:	2027883a 	mov	r19,r4
10009490:	2825883a 	mov	r18,r5
10009494:	3021883a 	mov	r16,r6
10009498:	00060800 	call	10006080 <__locale_mb_cur_max>
1000949c:	00c00044 	movi	r3,1
100094a0:	10c03e26 	beq	r2,r3,1000959c <__fputwc+0x130>
100094a4:	81c01704 	addi	r7,r16,92
100094a8:	900d883a 	mov	r6,r18
100094ac:	d80b883a 	mov	r5,sp
100094b0:	9809883a 	mov	r4,r19
100094b4:	000a2ac0 	call	1000a2ac <_wcrtomb_r>
100094b8:	1029883a 	mov	r20,r2
100094bc:	00bfffc4 	movi	r2,-1
100094c0:	a0802026 	beq	r20,r2,10009544 <__fputwc+0xd8>
100094c4:	d9400003 	ldbu	r5,0(sp)
100094c8:	a0001c26 	beq	r20,zero,1000953c <__fputwc+0xd0>
100094cc:	0023883a 	mov	r17,zero
100094d0:	05400284 	movi	r21,10
100094d4:	00000906 	br	100094fc <__fputwc+0x90>
100094d8:	80800017 	ldw	r2,0(r16)
100094dc:	11400005 	stb	r5,0(r2)
100094e0:	80c00017 	ldw	r3,0(r16)
100094e4:	18c00044 	addi	r3,r3,1
100094e8:	80c00015 	stw	r3,0(r16)
100094ec:	8c400044 	addi	r17,r17,1
100094f0:	dc45883a 	add	r2,sp,r17
100094f4:	8d00112e 	bgeu	r17,r20,1000953c <__fputwc+0xd0>
100094f8:	11400003 	ldbu	r5,0(r2)
100094fc:	80c00217 	ldw	r3,8(r16)
10009500:	18ffffc4 	addi	r3,r3,-1
10009504:	80c00215 	stw	r3,8(r16)
10009508:	183ff30e 	bge	r3,zero,100094d8 <__alt_data_end+0xf80094d8>
1000950c:	80800617 	ldw	r2,24(r16)
10009510:	18801916 	blt	r3,r2,10009578 <__fputwc+0x10c>
10009514:	80800017 	ldw	r2,0(r16)
10009518:	11400005 	stb	r5,0(r2)
1000951c:	80800017 	ldw	r2,0(r16)
10009520:	10c00003 	ldbu	r3,0(r2)
10009524:	10800044 	addi	r2,r2,1
10009528:	1d402326 	beq	r3,r21,100095b8 <__fputwc+0x14c>
1000952c:	80800015 	stw	r2,0(r16)
10009530:	8c400044 	addi	r17,r17,1
10009534:	dc45883a 	add	r2,sp,r17
10009538:	8d3fef36 	bltu	r17,r20,100094f8 <__alt_data_end+0xf80094f8>
1000953c:	9005883a 	mov	r2,r18
10009540:	00000406 	br	10009554 <__fputwc+0xe8>
10009544:	80c0030b 	ldhu	r3,12(r16)
10009548:	a005883a 	mov	r2,r20
1000954c:	18c01014 	ori	r3,r3,64
10009550:	80c0030d 	sth	r3,12(r16)
10009554:	dfc00717 	ldw	ra,28(sp)
10009558:	dd400617 	ldw	r21,24(sp)
1000955c:	dd000517 	ldw	r20,20(sp)
10009560:	dcc00417 	ldw	r19,16(sp)
10009564:	dc800317 	ldw	r18,12(sp)
10009568:	dc400217 	ldw	r17,8(sp)
1000956c:	dc000117 	ldw	r16,4(sp)
10009570:	dec00804 	addi	sp,sp,32
10009574:	f800283a 	ret
10009578:	800d883a 	mov	r6,r16
1000957c:	29403fcc 	andi	r5,r5,255
10009580:	9809883a 	mov	r4,r19
10009584:	00092380 	call	10009238 <__swbuf_r>
10009588:	10bfffe0 	cmpeqi	r2,r2,-1
1000958c:	10803fcc 	andi	r2,r2,255
10009590:	103fd626 	beq	r2,zero,100094ec <__alt_data_end+0xf80094ec>
10009594:	00bfffc4 	movi	r2,-1
10009598:	003fee06 	br	10009554 <__alt_data_end+0xf8009554>
1000959c:	90ffffc4 	addi	r3,r18,-1
100095a0:	01003f84 	movi	r4,254
100095a4:	20ffbf36 	bltu	r4,r3,100094a4 <__alt_data_end+0xf80094a4>
100095a8:	900b883a 	mov	r5,r18
100095ac:	dc800005 	stb	r18,0(sp)
100095b0:	1029883a 	mov	r20,r2
100095b4:	003fc506 	br	100094cc <__alt_data_end+0xf80094cc>
100095b8:	800d883a 	mov	r6,r16
100095bc:	a80b883a 	mov	r5,r21
100095c0:	9809883a 	mov	r4,r19
100095c4:	00092380 	call	10009238 <__swbuf_r>
100095c8:	10bfffe0 	cmpeqi	r2,r2,-1
100095cc:	003fef06 	br	1000958c <__alt_data_end+0xf800958c>

100095d0 <_fputwc_r>:
100095d0:	3080030b 	ldhu	r2,12(r6)
100095d4:	10c8000c 	andi	r3,r2,8192
100095d8:	1800051e 	bne	r3,zero,100095f0 <_fputwc_r+0x20>
100095dc:	30c01917 	ldw	r3,100(r6)
100095e0:	10880014 	ori	r2,r2,8192
100095e4:	3080030d 	sth	r2,12(r6)
100095e8:	18880014 	ori	r2,r3,8192
100095ec:	30801915 	stw	r2,100(r6)
100095f0:	000946c1 	jmpi	1000946c <__fputwc>

100095f4 <fputwc>:
100095f4:	00840074 	movhi	r2,4097
100095f8:	defffc04 	addi	sp,sp,-16
100095fc:	10880a04 	addi	r2,r2,8232
10009600:	dc000115 	stw	r16,4(sp)
10009604:	14000017 	ldw	r16,0(r2)
10009608:	dc400215 	stw	r17,8(sp)
1000960c:	dfc00315 	stw	ra,12(sp)
10009610:	2023883a 	mov	r17,r4
10009614:	80000226 	beq	r16,zero,10009620 <fputwc+0x2c>
10009618:	80800e17 	ldw	r2,56(r16)
1000961c:	10001026 	beq	r2,zero,10009660 <fputwc+0x6c>
10009620:	2880030b 	ldhu	r2,12(r5)
10009624:	10c8000c 	andi	r3,r2,8192
10009628:	1800051e 	bne	r3,zero,10009640 <fputwc+0x4c>
1000962c:	28c01917 	ldw	r3,100(r5)
10009630:	10880014 	ori	r2,r2,8192
10009634:	2880030d 	sth	r2,12(r5)
10009638:	18880014 	ori	r2,r3,8192
1000963c:	28801915 	stw	r2,100(r5)
10009640:	280d883a 	mov	r6,r5
10009644:	8009883a 	mov	r4,r16
10009648:	880b883a 	mov	r5,r17
1000964c:	dfc00317 	ldw	ra,12(sp)
10009650:	dc400217 	ldw	r17,8(sp)
10009654:	dc000117 	ldw	r16,4(sp)
10009658:	dec00404 	addi	sp,sp,16
1000965c:	000946c1 	jmpi	1000946c <__fputwc>
10009660:	8009883a 	mov	r4,r16
10009664:	d9400015 	stw	r5,0(sp)
10009668:	0000e340 	call	10000e34 <__sinit>
1000966c:	d9400017 	ldw	r5,0(sp)
10009670:	003feb06 	br	10009620 <__alt_data_end+0xf8009620>

10009674 <_fstat_r>:
10009674:	defffd04 	addi	sp,sp,-12
10009678:	2805883a 	mov	r2,r5
1000967c:	dc000015 	stw	r16,0(sp)
10009680:	04040074 	movhi	r16,4097
10009684:	dc400115 	stw	r17,4(sp)
10009688:	840edb04 	addi	r16,r16,15212
1000968c:	2023883a 	mov	r17,r4
10009690:	300b883a 	mov	r5,r6
10009694:	1009883a 	mov	r4,r2
10009698:	dfc00215 	stw	ra,8(sp)
1000969c:	80000015 	stw	zero,0(r16)
100096a0:	000dc5c0 	call	1000dc5c <fstat>
100096a4:	00ffffc4 	movi	r3,-1
100096a8:	10c00526 	beq	r2,r3,100096c0 <_fstat_r+0x4c>
100096ac:	dfc00217 	ldw	ra,8(sp)
100096b0:	dc400117 	ldw	r17,4(sp)
100096b4:	dc000017 	ldw	r16,0(sp)
100096b8:	dec00304 	addi	sp,sp,12
100096bc:	f800283a 	ret
100096c0:	80c00017 	ldw	r3,0(r16)
100096c4:	183ff926 	beq	r3,zero,100096ac <__alt_data_end+0xf80096ac>
100096c8:	88c00015 	stw	r3,0(r17)
100096cc:	003ff706 	br	100096ac <__alt_data_end+0xf80096ac>

100096d0 <__sfvwrite_r>:
100096d0:	30800217 	ldw	r2,8(r6)
100096d4:	10006726 	beq	r2,zero,10009874 <__sfvwrite_r+0x1a4>
100096d8:	28c0030b 	ldhu	r3,12(r5)
100096dc:	defff404 	addi	sp,sp,-48
100096e0:	dd400715 	stw	r21,28(sp)
100096e4:	dd000615 	stw	r20,24(sp)
100096e8:	dc000215 	stw	r16,8(sp)
100096ec:	dfc00b15 	stw	ra,44(sp)
100096f0:	df000a15 	stw	fp,40(sp)
100096f4:	ddc00915 	stw	r23,36(sp)
100096f8:	dd800815 	stw	r22,32(sp)
100096fc:	dcc00515 	stw	r19,20(sp)
10009700:	dc800415 	stw	r18,16(sp)
10009704:	dc400315 	stw	r17,12(sp)
10009708:	1880020c 	andi	r2,r3,8
1000970c:	2821883a 	mov	r16,r5
10009710:	202b883a 	mov	r21,r4
10009714:	3029883a 	mov	r20,r6
10009718:	10002726 	beq	r2,zero,100097b8 <__sfvwrite_r+0xe8>
1000971c:	28800417 	ldw	r2,16(r5)
10009720:	10002526 	beq	r2,zero,100097b8 <__sfvwrite_r+0xe8>
10009724:	1880008c 	andi	r2,r3,2
10009728:	a4400017 	ldw	r17,0(r20)
1000972c:	10002a26 	beq	r2,zero,100097d8 <__sfvwrite_r+0x108>
10009730:	05a00034 	movhi	r22,32768
10009734:	0027883a 	mov	r19,zero
10009738:	0025883a 	mov	r18,zero
1000973c:	b5bf0004 	addi	r22,r22,-1024
10009740:	980d883a 	mov	r6,r19
10009744:	a809883a 	mov	r4,r21
10009748:	90004626 	beq	r18,zero,10009864 <__sfvwrite_r+0x194>
1000974c:	900f883a 	mov	r7,r18
10009750:	b480022e 	bgeu	r22,r18,1000975c <__sfvwrite_r+0x8c>
10009754:	01e00034 	movhi	r7,32768
10009758:	39ff0004 	addi	r7,r7,-1024
1000975c:	80800917 	ldw	r2,36(r16)
10009760:	81400717 	ldw	r5,28(r16)
10009764:	103ee83a 	callr	r2
10009768:	00805a0e 	bge	zero,r2,100098d4 <__sfvwrite_r+0x204>
1000976c:	a0c00217 	ldw	r3,8(r20)
10009770:	98a7883a 	add	r19,r19,r2
10009774:	90a5c83a 	sub	r18,r18,r2
10009778:	1885c83a 	sub	r2,r3,r2
1000977c:	a0800215 	stw	r2,8(r20)
10009780:	103fef1e 	bne	r2,zero,10009740 <__alt_data_end+0xf8009740>
10009784:	0005883a 	mov	r2,zero
10009788:	dfc00b17 	ldw	ra,44(sp)
1000978c:	df000a17 	ldw	fp,40(sp)
10009790:	ddc00917 	ldw	r23,36(sp)
10009794:	dd800817 	ldw	r22,32(sp)
10009798:	dd400717 	ldw	r21,28(sp)
1000979c:	dd000617 	ldw	r20,24(sp)
100097a0:	dcc00517 	ldw	r19,20(sp)
100097a4:	dc800417 	ldw	r18,16(sp)
100097a8:	dc400317 	ldw	r17,12(sp)
100097ac:	dc000217 	ldw	r16,8(sp)
100097b0:	dec00c04 	addi	sp,sp,48
100097b4:	f800283a 	ret
100097b8:	800b883a 	mov	r5,r16
100097bc:	a809883a 	mov	r4,r21
100097c0:	00045880 	call	10004588 <__swsetup_r>
100097c4:	1000ee1e 	bne	r2,zero,10009b80 <__sfvwrite_r+0x4b0>
100097c8:	80c0030b 	ldhu	r3,12(r16)
100097cc:	a4400017 	ldw	r17,0(r20)
100097d0:	1880008c 	andi	r2,r3,2
100097d4:	103fd61e 	bne	r2,zero,10009730 <__alt_data_end+0xf8009730>
100097d8:	1880004c 	andi	r2,r3,1
100097dc:	1000421e 	bne	r2,zero,100098e8 <__sfvwrite_r+0x218>
100097e0:	0039883a 	mov	fp,zero
100097e4:	0025883a 	mov	r18,zero
100097e8:	90001a26 	beq	r18,zero,10009854 <__sfvwrite_r+0x184>
100097ec:	1880800c 	andi	r2,r3,512
100097f0:	84c00217 	ldw	r19,8(r16)
100097f4:	10002126 	beq	r2,zero,1000987c <__sfvwrite_r+0x1ac>
100097f8:	982f883a 	mov	r23,r19
100097fc:	94c09636 	bltu	r18,r19,10009a58 <__sfvwrite_r+0x388>
10009800:	1881200c 	andi	r2,r3,1152
10009804:	1000a11e 	bne	r2,zero,10009a8c <__sfvwrite_r+0x3bc>
10009808:	81000017 	ldw	r4,0(r16)
1000980c:	b80d883a 	mov	r6,r23
10009810:	e00b883a 	mov	r5,fp
10009814:	0009bec0 	call	10009bec <memmove>
10009818:	80c00217 	ldw	r3,8(r16)
1000981c:	81000017 	ldw	r4,0(r16)
10009820:	9005883a 	mov	r2,r18
10009824:	1ce7c83a 	sub	r19,r3,r19
10009828:	25cf883a 	add	r7,r4,r23
1000982c:	84c00215 	stw	r19,8(r16)
10009830:	81c00015 	stw	r7,0(r16)
10009834:	a0c00217 	ldw	r3,8(r20)
10009838:	e0b9883a 	add	fp,fp,r2
1000983c:	90a5c83a 	sub	r18,r18,r2
10009840:	18a7c83a 	sub	r19,r3,r2
10009844:	a4c00215 	stw	r19,8(r20)
10009848:	983fce26 	beq	r19,zero,10009784 <__alt_data_end+0xf8009784>
1000984c:	80c0030b 	ldhu	r3,12(r16)
10009850:	903fe61e 	bne	r18,zero,100097ec <__alt_data_end+0xf80097ec>
10009854:	8f000017 	ldw	fp,0(r17)
10009858:	8c800117 	ldw	r18,4(r17)
1000985c:	8c400204 	addi	r17,r17,8
10009860:	003fe106 	br	100097e8 <__alt_data_end+0xf80097e8>
10009864:	8cc00017 	ldw	r19,0(r17)
10009868:	8c800117 	ldw	r18,4(r17)
1000986c:	8c400204 	addi	r17,r17,8
10009870:	003fb306 	br	10009740 <__alt_data_end+0xf8009740>
10009874:	0005883a 	mov	r2,zero
10009878:	f800283a 	ret
1000987c:	81000017 	ldw	r4,0(r16)
10009880:	80800417 	ldw	r2,16(r16)
10009884:	11005a36 	bltu	r2,r4,100099f0 <__sfvwrite_r+0x320>
10009888:	85c00517 	ldw	r23,20(r16)
1000988c:	95c05836 	bltu	r18,r23,100099f0 <__sfvwrite_r+0x320>
10009890:	00a00034 	movhi	r2,32768
10009894:	10bfffc4 	addi	r2,r2,-1
10009898:	9009883a 	mov	r4,r18
1000989c:	1480012e 	bgeu	r2,r18,100098a4 <__sfvwrite_r+0x1d4>
100098a0:	1009883a 	mov	r4,r2
100098a4:	b80b883a 	mov	r5,r23
100098a8:	000b0540 	call	1000b054 <__divsi3>
100098ac:	b80b883a 	mov	r5,r23
100098b0:	1009883a 	mov	r4,r2
100098b4:	00006840 	call	10000684 <__mulsi3>
100098b8:	81400717 	ldw	r5,28(r16)
100098bc:	80c00917 	ldw	r3,36(r16)
100098c0:	100f883a 	mov	r7,r2
100098c4:	e00d883a 	mov	r6,fp
100098c8:	a809883a 	mov	r4,r21
100098cc:	183ee83a 	callr	r3
100098d0:	00bfd816 	blt	zero,r2,10009834 <__alt_data_end+0xf8009834>
100098d4:	8080030b 	ldhu	r2,12(r16)
100098d8:	10801014 	ori	r2,r2,64
100098dc:	8080030d 	sth	r2,12(r16)
100098e0:	00bfffc4 	movi	r2,-1
100098e4:	003fa806 	br	10009788 <__alt_data_end+0xf8009788>
100098e8:	0027883a 	mov	r19,zero
100098ec:	0011883a 	mov	r8,zero
100098f0:	0039883a 	mov	fp,zero
100098f4:	0025883a 	mov	r18,zero
100098f8:	90001f26 	beq	r18,zero,10009978 <__sfvwrite_r+0x2a8>
100098fc:	40005a26 	beq	r8,zero,10009a68 <__sfvwrite_r+0x398>
10009900:	982d883a 	mov	r22,r19
10009904:	94c0012e 	bgeu	r18,r19,1000990c <__sfvwrite_r+0x23c>
10009908:	902d883a 	mov	r22,r18
1000990c:	81000017 	ldw	r4,0(r16)
10009910:	80800417 	ldw	r2,16(r16)
10009914:	b02f883a 	mov	r23,r22
10009918:	81c00517 	ldw	r7,20(r16)
1000991c:	1100032e 	bgeu	r2,r4,1000992c <__sfvwrite_r+0x25c>
10009920:	80c00217 	ldw	r3,8(r16)
10009924:	38c7883a 	add	r3,r7,r3
10009928:	1d801816 	blt	r3,r22,1000998c <__sfvwrite_r+0x2bc>
1000992c:	b1c03e16 	blt	r22,r7,10009a28 <__sfvwrite_r+0x358>
10009930:	80800917 	ldw	r2,36(r16)
10009934:	81400717 	ldw	r5,28(r16)
10009938:	e00d883a 	mov	r6,fp
1000993c:	da000115 	stw	r8,4(sp)
10009940:	a809883a 	mov	r4,r21
10009944:	103ee83a 	callr	r2
10009948:	102f883a 	mov	r23,r2
1000994c:	da000117 	ldw	r8,4(sp)
10009950:	00bfe00e 	bge	zero,r2,100098d4 <__alt_data_end+0xf80098d4>
10009954:	9de7c83a 	sub	r19,r19,r23
10009958:	98001f26 	beq	r19,zero,100099d8 <__sfvwrite_r+0x308>
1000995c:	a0800217 	ldw	r2,8(r20)
10009960:	e5f9883a 	add	fp,fp,r23
10009964:	95e5c83a 	sub	r18,r18,r23
10009968:	15efc83a 	sub	r23,r2,r23
1000996c:	a5c00215 	stw	r23,8(r20)
10009970:	b83f8426 	beq	r23,zero,10009784 <__alt_data_end+0xf8009784>
10009974:	903fe11e 	bne	r18,zero,100098fc <__alt_data_end+0xf80098fc>
10009978:	8f000017 	ldw	fp,0(r17)
1000997c:	8c800117 	ldw	r18,4(r17)
10009980:	0011883a 	mov	r8,zero
10009984:	8c400204 	addi	r17,r17,8
10009988:	003fdb06 	br	100098f8 <__alt_data_end+0xf80098f8>
1000998c:	180d883a 	mov	r6,r3
10009990:	e00b883a 	mov	r5,fp
10009994:	da000115 	stw	r8,4(sp)
10009998:	d8c00015 	stw	r3,0(sp)
1000999c:	0009bec0 	call	10009bec <memmove>
100099a0:	d8c00017 	ldw	r3,0(sp)
100099a4:	80800017 	ldw	r2,0(r16)
100099a8:	800b883a 	mov	r5,r16
100099ac:	a809883a 	mov	r4,r21
100099b0:	10c5883a 	add	r2,r2,r3
100099b4:	80800015 	stw	r2,0(r16)
100099b8:	d8c00015 	stw	r3,0(sp)
100099bc:	0000a480 	call	10000a48 <_fflush_r>
100099c0:	d8c00017 	ldw	r3,0(sp)
100099c4:	da000117 	ldw	r8,4(sp)
100099c8:	103fc21e 	bne	r2,zero,100098d4 <__alt_data_end+0xf80098d4>
100099cc:	182f883a 	mov	r23,r3
100099d0:	9de7c83a 	sub	r19,r19,r23
100099d4:	983fe11e 	bne	r19,zero,1000995c <__alt_data_end+0xf800995c>
100099d8:	800b883a 	mov	r5,r16
100099dc:	a809883a 	mov	r4,r21
100099e0:	0000a480 	call	10000a48 <_fflush_r>
100099e4:	103fbb1e 	bne	r2,zero,100098d4 <__alt_data_end+0xf80098d4>
100099e8:	0011883a 	mov	r8,zero
100099ec:	003fdb06 	br	1000995c <__alt_data_end+0xf800995c>
100099f0:	94c0012e 	bgeu	r18,r19,100099f8 <__sfvwrite_r+0x328>
100099f4:	9027883a 	mov	r19,r18
100099f8:	980d883a 	mov	r6,r19
100099fc:	e00b883a 	mov	r5,fp
10009a00:	0009bec0 	call	10009bec <memmove>
10009a04:	80800217 	ldw	r2,8(r16)
10009a08:	80c00017 	ldw	r3,0(r16)
10009a0c:	14c5c83a 	sub	r2,r2,r19
10009a10:	1cc7883a 	add	r3,r3,r19
10009a14:	80800215 	stw	r2,8(r16)
10009a18:	80c00015 	stw	r3,0(r16)
10009a1c:	10004326 	beq	r2,zero,10009b2c <__sfvwrite_r+0x45c>
10009a20:	9805883a 	mov	r2,r19
10009a24:	003f8306 	br	10009834 <__alt_data_end+0xf8009834>
10009a28:	b00d883a 	mov	r6,r22
10009a2c:	e00b883a 	mov	r5,fp
10009a30:	da000115 	stw	r8,4(sp)
10009a34:	0009bec0 	call	10009bec <memmove>
10009a38:	80800217 	ldw	r2,8(r16)
10009a3c:	80c00017 	ldw	r3,0(r16)
10009a40:	da000117 	ldw	r8,4(sp)
10009a44:	1585c83a 	sub	r2,r2,r22
10009a48:	1dad883a 	add	r22,r3,r22
10009a4c:	80800215 	stw	r2,8(r16)
10009a50:	85800015 	stw	r22,0(r16)
10009a54:	003fbf06 	br	10009954 <__alt_data_end+0xf8009954>
10009a58:	81000017 	ldw	r4,0(r16)
10009a5c:	9027883a 	mov	r19,r18
10009a60:	902f883a 	mov	r23,r18
10009a64:	003f6906 	br	1000980c <__alt_data_end+0xf800980c>
10009a68:	900d883a 	mov	r6,r18
10009a6c:	01400284 	movi	r5,10
10009a70:	e009883a 	mov	r4,fp
10009a74:	00062f00 	call	100062f0 <memchr>
10009a78:	10003e26 	beq	r2,zero,10009b74 <__sfvwrite_r+0x4a4>
10009a7c:	10800044 	addi	r2,r2,1
10009a80:	1727c83a 	sub	r19,r2,fp
10009a84:	02000044 	movi	r8,1
10009a88:	003f9d06 	br	10009900 <__alt_data_end+0xf8009900>
10009a8c:	80800517 	ldw	r2,20(r16)
10009a90:	81400417 	ldw	r5,16(r16)
10009a94:	81c00017 	ldw	r7,0(r16)
10009a98:	10a7883a 	add	r19,r2,r2
10009a9c:	9885883a 	add	r2,r19,r2
10009aa0:	1026d7fa 	srli	r19,r2,31
10009aa4:	396dc83a 	sub	r22,r7,r5
10009aa8:	b1000044 	addi	r4,r22,1
10009aac:	9885883a 	add	r2,r19,r2
10009ab0:	1027d07a 	srai	r19,r2,1
10009ab4:	2485883a 	add	r2,r4,r18
10009ab8:	980d883a 	mov	r6,r19
10009abc:	9880022e 	bgeu	r19,r2,10009ac8 <__sfvwrite_r+0x3f8>
10009ac0:	1027883a 	mov	r19,r2
10009ac4:	100d883a 	mov	r6,r2
10009ac8:	18c1000c 	andi	r3,r3,1024
10009acc:	18001c26 	beq	r3,zero,10009b40 <__sfvwrite_r+0x470>
10009ad0:	300b883a 	mov	r5,r6
10009ad4:	a809883a 	mov	r4,r21
10009ad8:	00014c40 	call	100014c4 <_malloc_r>
10009adc:	102f883a 	mov	r23,r2
10009ae0:	10002926 	beq	r2,zero,10009b88 <__sfvwrite_r+0x4b8>
10009ae4:	81400417 	ldw	r5,16(r16)
10009ae8:	b00d883a 	mov	r6,r22
10009aec:	1009883a 	mov	r4,r2
10009af0:	0001cd00 	call	10001cd0 <memcpy>
10009af4:	8080030b 	ldhu	r2,12(r16)
10009af8:	00fedfc4 	movi	r3,-1153
10009afc:	10c4703a 	and	r2,r2,r3
10009b00:	10802014 	ori	r2,r2,128
10009b04:	8080030d 	sth	r2,12(r16)
10009b08:	bd89883a 	add	r4,r23,r22
10009b0c:	9d8fc83a 	sub	r7,r19,r22
10009b10:	85c00415 	stw	r23,16(r16)
10009b14:	84c00515 	stw	r19,20(r16)
10009b18:	81000015 	stw	r4,0(r16)
10009b1c:	9027883a 	mov	r19,r18
10009b20:	81c00215 	stw	r7,8(r16)
10009b24:	902f883a 	mov	r23,r18
10009b28:	003f3806 	br	1000980c <__alt_data_end+0xf800980c>
10009b2c:	800b883a 	mov	r5,r16
10009b30:	a809883a 	mov	r4,r21
10009b34:	0000a480 	call	10000a48 <_fflush_r>
10009b38:	103fb926 	beq	r2,zero,10009a20 <__alt_data_end+0xf8009a20>
10009b3c:	003f6506 	br	100098d4 <__alt_data_end+0xf80098d4>
10009b40:	a809883a 	mov	r4,r21
10009b44:	0009d480 	call	10009d48 <_realloc_r>
10009b48:	102f883a 	mov	r23,r2
10009b4c:	103fee1e 	bne	r2,zero,10009b08 <__alt_data_end+0xf8009b08>
10009b50:	81400417 	ldw	r5,16(r16)
10009b54:	a809883a 	mov	r4,r21
10009b58:	00010040 	call	10001004 <_free_r>
10009b5c:	8080030b 	ldhu	r2,12(r16)
10009b60:	00ffdfc4 	movi	r3,-129
10009b64:	1884703a 	and	r2,r3,r2
10009b68:	00c00304 	movi	r3,12
10009b6c:	a8c00015 	stw	r3,0(r21)
10009b70:	003f5906 	br	100098d8 <__alt_data_end+0xf80098d8>
10009b74:	94c00044 	addi	r19,r18,1
10009b78:	02000044 	movi	r8,1
10009b7c:	003f6006 	br	10009900 <__alt_data_end+0xf8009900>
10009b80:	00bfffc4 	movi	r2,-1
10009b84:	003f0006 	br	10009788 <__alt_data_end+0xf8009788>
10009b88:	00800304 	movi	r2,12
10009b8c:	a8800015 	stw	r2,0(r21)
10009b90:	8080030b 	ldhu	r2,12(r16)
10009b94:	003f5006 	br	100098d8 <__alt_data_end+0xf80098d8>

10009b98 <_isatty_r>:
10009b98:	defffd04 	addi	sp,sp,-12
10009b9c:	dc000015 	stw	r16,0(sp)
10009ba0:	04040074 	movhi	r16,4097
10009ba4:	dc400115 	stw	r17,4(sp)
10009ba8:	840edb04 	addi	r16,r16,15212
10009bac:	2023883a 	mov	r17,r4
10009bb0:	2809883a 	mov	r4,r5
10009bb4:	dfc00215 	stw	ra,8(sp)
10009bb8:	80000015 	stw	zero,0(r16)
10009bbc:	000dd700 	call	1000dd70 <isatty>
10009bc0:	00ffffc4 	movi	r3,-1
10009bc4:	10c00526 	beq	r2,r3,10009bdc <_isatty_r+0x44>
10009bc8:	dfc00217 	ldw	ra,8(sp)
10009bcc:	dc400117 	ldw	r17,4(sp)
10009bd0:	dc000017 	ldw	r16,0(sp)
10009bd4:	dec00304 	addi	sp,sp,12
10009bd8:	f800283a 	ret
10009bdc:	80c00017 	ldw	r3,0(r16)
10009be0:	183ff926 	beq	r3,zero,10009bc8 <__alt_data_end+0xf8009bc8>
10009be4:	88c00015 	stw	r3,0(r17)
10009be8:	003ff706 	br	10009bc8 <__alt_data_end+0xf8009bc8>

10009bec <memmove>:
10009bec:	2005883a 	mov	r2,r4
10009bf0:	29000b2e 	bgeu	r5,r4,10009c20 <memmove+0x34>
10009bf4:	298f883a 	add	r7,r5,r6
10009bf8:	21c0092e 	bgeu	r4,r7,10009c20 <memmove+0x34>
10009bfc:	2187883a 	add	r3,r4,r6
10009c00:	198bc83a 	sub	r5,r3,r6
10009c04:	30004826 	beq	r6,zero,10009d28 <memmove+0x13c>
10009c08:	39ffffc4 	addi	r7,r7,-1
10009c0c:	39000003 	ldbu	r4,0(r7)
10009c10:	18ffffc4 	addi	r3,r3,-1
10009c14:	19000005 	stb	r4,0(r3)
10009c18:	28fffb1e 	bne	r5,r3,10009c08 <__alt_data_end+0xf8009c08>
10009c1c:	f800283a 	ret
10009c20:	00c003c4 	movi	r3,15
10009c24:	1980412e 	bgeu	r3,r6,10009d2c <memmove+0x140>
10009c28:	2886b03a 	or	r3,r5,r2
10009c2c:	18c000cc 	andi	r3,r3,3
10009c30:	1800401e 	bne	r3,zero,10009d34 <memmove+0x148>
10009c34:	33fffc04 	addi	r15,r6,-16
10009c38:	781ed13a 	srli	r15,r15,4
10009c3c:	28c00104 	addi	r3,r5,4
10009c40:	13400104 	addi	r13,r2,4
10009c44:	781c913a 	slli	r14,r15,4
10009c48:	2b000204 	addi	r12,r5,8
10009c4c:	12c00204 	addi	r11,r2,8
10009c50:	73800504 	addi	r14,r14,20
10009c54:	2a800304 	addi	r10,r5,12
10009c58:	12400304 	addi	r9,r2,12
10009c5c:	2b9d883a 	add	r14,r5,r14
10009c60:	2811883a 	mov	r8,r5
10009c64:	100f883a 	mov	r7,r2
10009c68:	41000017 	ldw	r4,0(r8)
10009c6c:	39c00404 	addi	r7,r7,16
10009c70:	18c00404 	addi	r3,r3,16
10009c74:	393ffc15 	stw	r4,-16(r7)
10009c78:	193ffc17 	ldw	r4,-16(r3)
10009c7c:	6b400404 	addi	r13,r13,16
10009c80:	5ac00404 	addi	r11,r11,16
10009c84:	693ffc15 	stw	r4,-16(r13)
10009c88:	61000017 	ldw	r4,0(r12)
10009c8c:	4a400404 	addi	r9,r9,16
10009c90:	42000404 	addi	r8,r8,16
10009c94:	593ffc15 	stw	r4,-16(r11)
10009c98:	51000017 	ldw	r4,0(r10)
10009c9c:	63000404 	addi	r12,r12,16
10009ca0:	52800404 	addi	r10,r10,16
10009ca4:	493ffc15 	stw	r4,-16(r9)
10009ca8:	1bbfef1e 	bne	r3,r14,10009c68 <__alt_data_end+0xf8009c68>
10009cac:	79000044 	addi	r4,r15,1
10009cb0:	2008913a 	slli	r4,r4,4
10009cb4:	328003cc 	andi	r10,r6,15
10009cb8:	02c000c4 	movi	r11,3
10009cbc:	1107883a 	add	r3,r2,r4
10009cc0:	290b883a 	add	r5,r5,r4
10009cc4:	5a801e2e 	bgeu	r11,r10,10009d40 <memmove+0x154>
10009cc8:	1813883a 	mov	r9,r3
10009ccc:	2811883a 	mov	r8,r5
10009cd0:	500f883a 	mov	r7,r10
10009cd4:	41000017 	ldw	r4,0(r8)
10009cd8:	4a400104 	addi	r9,r9,4
10009cdc:	39ffff04 	addi	r7,r7,-4
10009ce0:	493fff15 	stw	r4,-4(r9)
10009ce4:	42000104 	addi	r8,r8,4
10009ce8:	59fffa36 	bltu	r11,r7,10009cd4 <__alt_data_end+0xf8009cd4>
10009cec:	513fff04 	addi	r4,r10,-4
10009cf0:	2008d0ba 	srli	r4,r4,2
10009cf4:	318000cc 	andi	r6,r6,3
10009cf8:	21000044 	addi	r4,r4,1
10009cfc:	2109883a 	add	r4,r4,r4
10009d00:	2109883a 	add	r4,r4,r4
10009d04:	1907883a 	add	r3,r3,r4
10009d08:	290b883a 	add	r5,r5,r4
10009d0c:	30000b26 	beq	r6,zero,10009d3c <memmove+0x150>
10009d10:	198d883a 	add	r6,r3,r6
10009d14:	29c00003 	ldbu	r7,0(r5)
10009d18:	18c00044 	addi	r3,r3,1
10009d1c:	29400044 	addi	r5,r5,1
10009d20:	19ffffc5 	stb	r7,-1(r3)
10009d24:	19bffb1e 	bne	r3,r6,10009d14 <__alt_data_end+0xf8009d14>
10009d28:	f800283a 	ret
10009d2c:	1007883a 	mov	r3,r2
10009d30:	003ff606 	br	10009d0c <__alt_data_end+0xf8009d0c>
10009d34:	1007883a 	mov	r3,r2
10009d38:	003ff506 	br	10009d10 <__alt_data_end+0xf8009d10>
10009d3c:	f800283a 	ret
10009d40:	500d883a 	mov	r6,r10
10009d44:	003ff106 	br	10009d0c <__alt_data_end+0xf8009d0c>

10009d48 <_realloc_r>:
10009d48:	defff604 	addi	sp,sp,-40
10009d4c:	dc800215 	stw	r18,8(sp)
10009d50:	dfc00915 	stw	ra,36(sp)
10009d54:	df000815 	stw	fp,32(sp)
10009d58:	ddc00715 	stw	r23,28(sp)
10009d5c:	dd800615 	stw	r22,24(sp)
10009d60:	dd400515 	stw	r21,20(sp)
10009d64:	dd000415 	stw	r20,16(sp)
10009d68:	dcc00315 	stw	r19,12(sp)
10009d6c:	dc400115 	stw	r17,4(sp)
10009d70:	dc000015 	stw	r16,0(sp)
10009d74:	3025883a 	mov	r18,r6
10009d78:	2800b726 	beq	r5,zero,1000a058 <_realloc_r+0x310>
10009d7c:	282b883a 	mov	r21,r5
10009d80:	2029883a 	mov	r20,r4
10009d84:	000e2080 	call	1000e208 <__malloc_lock>
10009d88:	a8bfff17 	ldw	r2,-4(r21)
10009d8c:	043fff04 	movi	r16,-4
10009d90:	90c002c4 	addi	r3,r18,11
10009d94:	01000584 	movi	r4,22
10009d98:	acfffe04 	addi	r19,r21,-8
10009d9c:	1420703a 	and	r16,r2,r16
10009da0:	20c0332e 	bgeu	r4,r3,10009e70 <_realloc_r+0x128>
10009da4:	047ffe04 	movi	r17,-8
10009da8:	1c62703a 	and	r17,r3,r17
10009dac:	8807883a 	mov	r3,r17
10009db0:	88005816 	blt	r17,zero,10009f14 <_realloc_r+0x1cc>
10009db4:	8c805736 	bltu	r17,r18,10009f14 <_realloc_r+0x1cc>
10009db8:	80c0300e 	bge	r16,r3,10009e7c <_realloc_r+0x134>
10009dbc:	07040074 	movhi	fp,4097
10009dc0:	e7026404 	addi	fp,fp,2448
10009dc4:	e1c00217 	ldw	r7,8(fp)
10009dc8:	9c09883a 	add	r4,r19,r16
10009dcc:	22000117 	ldw	r8,4(r4)
10009dd0:	21c06326 	beq	r4,r7,10009f60 <_realloc_r+0x218>
10009dd4:	017fff84 	movi	r5,-2
10009dd8:	414a703a 	and	r5,r8,r5
10009ddc:	214b883a 	add	r5,r4,r5
10009de0:	29800117 	ldw	r6,4(r5)
10009de4:	3180004c 	andi	r6,r6,1
10009de8:	30003f26 	beq	r6,zero,10009ee8 <_realloc_r+0x1a0>
10009dec:	1080004c 	andi	r2,r2,1
10009df0:	10008326 	beq	r2,zero,1000a000 <_realloc_r+0x2b8>
10009df4:	900b883a 	mov	r5,r18
10009df8:	a009883a 	mov	r4,r20
10009dfc:	00014c40 	call	100014c4 <_malloc_r>
10009e00:	1025883a 	mov	r18,r2
10009e04:	10011e26 	beq	r2,zero,1000a280 <_realloc_r+0x538>
10009e08:	a93fff17 	ldw	r4,-4(r21)
10009e0c:	10fffe04 	addi	r3,r2,-8
10009e10:	00bfff84 	movi	r2,-2
10009e14:	2084703a 	and	r2,r4,r2
10009e18:	9885883a 	add	r2,r19,r2
10009e1c:	1880ee26 	beq	r3,r2,1000a1d8 <_realloc_r+0x490>
10009e20:	81bfff04 	addi	r6,r16,-4
10009e24:	00800904 	movi	r2,36
10009e28:	1180b836 	bltu	r2,r6,1000a10c <_realloc_r+0x3c4>
10009e2c:	00c004c4 	movi	r3,19
10009e30:	19809636 	bltu	r3,r6,1000a08c <_realloc_r+0x344>
10009e34:	9005883a 	mov	r2,r18
10009e38:	a807883a 	mov	r3,r21
10009e3c:	19000017 	ldw	r4,0(r3)
10009e40:	11000015 	stw	r4,0(r2)
10009e44:	19000117 	ldw	r4,4(r3)
10009e48:	11000115 	stw	r4,4(r2)
10009e4c:	18c00217 	ldw	r3,8(r3)
10009e50:	10c00215 	stw	r3,8(r2)
10009e54:	a80b883a 	mov	r5,r21
10009e58:	a009883a 	mov	r4,r20
10009e5c:	00010040 	call	10001004 <_free_r>
10009e60:	a009883a 	mov	r4,r20
10009e64:	000e22c0 	call	1000e22c <__malloc_unlock>
10009e68:	9005883a 	mov	r2,r18
10009e6c:	00001206 	br	10009eb8 <_realloc_r+0x170>
10009e70:	00c00404 	movi	r3,16
10009e74:	1823883a 	mov	r17,r3
10009e78:	003fce06 	br	10009db4 <__alt_data_end+0xf8009db4>
10009e7c:	a825883a 	mov	r18,r21
10009e80:	8445c83a 	sub	r2,r16,r17
10009e84:	00c003c4 	movi	r3,15
10009e88:	18802636 	bltu	r3,r2,10009f24 <_realloc_r+0x1dc>
10009e8c:	99800117 	ldw	r6,4(r19)
10009e90:	9c07883a 	add	r3,r19,r16
10009e94:	3180004c 	andi	r6,r6,1
10009e98:	3420b03a 	or	r16,r6,r16
10009e9c:	9c000115 	stw	r16,4(r19)
10009ea0:	18800117 	ldw	r2,4(r3)
10009ea4:	10800054 	ori	r2,r2,1
10009ea8:	18800115 	stw	r2,4(r3)
10009eac:	a009883a 	mov	r4,r20
10009eb0:	000e22c0 	call	1000e22c <__malloc_unlock>
10009eb4:	9005883a 	mov	r2,r18
10009eb8:	dfc00917 	ldw	ra,36(sp)
10009ebc:	df000817 	ldw	fp,32(sp)
10009ec0:	ddc00717 	ldw	r23,28(sp)
10009ec4:	dd800617 	ldw	r22,24(sp)
10009ec8:	dd400517 	ldw	r21,20(sp)
10009ecc:	dd000417 	ldw	r20,16(sp)
10009ed0:	dcc00317 	ldw	r19,12(sp)
10009ed4:	dc800217 	ldw	r18,8(sp)
10009ed8:	dc400117 	ldw	r17,4(sp)
10009edc:	dc000017 	ldw	r16,0(sp)
10009ee0:	dec00a04 	addi	sp,sp,40
10009ee4:	f800283a 	ret
10009ee8:	017fff04 	movi	r5,-4
10009eec:	414a703a 	and	r5,r8,r5
10009ef0:	814d883a 	add	r6,r16,r5
10009ef4:	30c01f16 	blt	r6,r3,10009f74 <_realloc_r+0x22c>
10009ef8:	20800317 	ldw	r2,12(r4)
10009efc:	20c00217 	ldw	r3,8(r4)
10009f00:	a825883a 	mov	r18,r21
10009f04:	3021883a 	mov	r16,r6
10009f08:	18800315 	stw	r2,12(r3)
10009f0c:	10c00215 	stw	r3,8(r2)
10009f10:	003fdb06 	br	10009e80 <__alt_data_end+0xf8009e80>
10009f14:	00800304 	movi	r2,12
10009f18:	a0800015 	stw	r2,0(r20)
10009f1c:	0005883a 	mov	r2,zero
10009f20:	003fe506 	br	10009eb8 <__alt_data_end+0xf8009eb8>
10009f24:	98c00117 	ldw	r3,4(r19)
10009f28:	9c4b883a 	add	r5,r19,r17
10009f2c:	11000054 	ori	r4,r2,1
10009f30:	18c0004c 	andi	r3,r3,1
10009f34:	1c62b03a 	or	r17,r3,r17
10009f38:	9c400115 	stw	r17,4(r19)
10009f3c:	29000115 	stw	r4,4(r5)
10009f40:	2885883a 	add	r2,r5,r2
10009f44:	10c00117 	ldw	r3,4(r2)
10009f48:	29400204 	addi	r5,r5,8
10009f4c:	a009883a 	mov	r4,r20
10009f50:	18c00054 	ori	r3,r3,1
10009f54:	10c00115 	stw	r3,4(r2)
10009f58:	00010040 	call	10001004 <_free_r>
10009f5c:	003fd306 	br	10009eac <__alt_data_end+0xf8009eac>
10009f60:	017fff04 	movi	r5,-4
10009f64:	414a703a 	and	r5,r8,r5
10009f68:	89800404 	addi	r6,r17,16
10009f6c:	8151883a 	add	r8,r16,r5
10009f70:	4180590e 	bge	r8,r6,1000a0d8 <_realloc_r+0x390>
10009f74:	1080004c 	andi	r2,r2,1
10009f78:	103f9e1e 	bne	r2,zero,10009df4 <__alt_data_end+0xf8009df4>
10009f7c:	adbffe17 	ldw	r22,-8(r21)
10009f80:	00bfff04 	movi	r2,-4
10009f84:	9dadc83a 	sub	r22,r19,r22
10009f88:	b1800117 	ldw	r6,4(r22)
10009f8c:	3084703a 	and	r2,r6,r2
10009f90:	20002026 	beq	r4,zero,1000a014 <_realloc_r+0x2cc>
10009f94:	80af883a 	add	r23,r16,r2
10009f98:	b96f883a 	add	r23,r23,r5
10009f9c:	21c05f26 	beq	r4,r7,1000a11c <_realloc_r+0x3d4>
10009fa0:	b8c01c16 	blt	r23,r3,1000a014 <_realloc_r+0x2cc>
10009fa4:	20800317 	ldw	r2,12(r4)
10009fa8:	20c00217 	ldw	r3,8(r4)
10009fac:	81bfff04 	addi	r6,r16,-4
10009fb0:	01000904 	movi	r4,36
10009fb4:	18800315 	stw	r2,12(r3)
10009fb8:	10c00215 	stw	r3,8(r2)
10009fbc:	b0c00217 	ldw	r3,8(r22)
10009fc0:	b0800317 	ldw	r2,12(r22)
10009fc4:	b4800204 	addi	r18,r22,8
10009fc8:	18800315 	stw	r2,12(r3)
10009fcc:	10c00215 	stw	r3,8(r2)
10009fd0:	21801b36 	bltu	r4,r6,1000a040 <_realloc_r+0x2f8>
10009fd4:	008004c4 	movi	r2,19
10009fd8:	1180352e 	bgeu	r2,r6,1000a0b0 <_realloc_r+0x368>
10009fdc:	a8800017 	ldw	r2,0(r21)
10009fe0:	b0800215 	stw	r2,8(r22)
10009fe4:	a8800117 	ldw	r2,4(r21)
10009fe8:	b0800315 	stw	r2,12(r22)
10009fec:	008006c4 	movi	r2,27
10009ff0:	11807f36 	bltu	r2,r6,1000a1f0 <_realloc_r+0x4a8>
10009ff4:	b0800404 	addi	r2,r22,16
10009ff8:	ad400204 	addi	r21,r21,8
10009ffc:	00002d06 	br	1000a0b4 <_realloc_r+0x36c>
1000a000:	adbffe17 	ldw	r22,-8(r21)
1000a004:	00bfff04 	movi	r2,-4
1000a008:	9dadc83a 	sub	r22,r19,r22
1000a00c:	b1000117 	ldw	r4,4(r22)
1000a010:	2084703a 	and	r2,r4,r2
1000a014:	b03f7726 	beq	r22,zero,10009df4 <__alt_data_end+0xf8009df4>
1000a018:	80af883a 	add	r23,r16,r2
1000a01c:	b8ff7516 	blt	r23,r3,10009df4 <__alt_data_end+0xf8009df4>
1000a020:	b0800317 	ldw	r2,12(r22)
1000a024:	b0c00217 	ldw	r3,8(r22)
1000a028:	81bfff04 	addi	r6,r16,-4
1000a02c:	01000904 	movi	r4,36
1000a030:	18800315 	stw	r2,12(r3)
1000a034:	10c00215 	stw	r3,8(r2)
1000a038:	b4800204 	addi	r18,r22,8
1000a03c:	21bfe52e 	bgeu	r4,r6,10009fd4 <__alt_data_end+0xf8009fd4>
1000a040:	a80b883a 	mov	r5,r21
1000a044:	9009883a 	mov	r4,r18
1000a048:	0009bec0 	call	10009bec <memmove>
1000a04c:	b821883a 	mov	r16,r23
1000a050:	b027883a 	mov	r19,r22
1000a054:	003f8a06 	br	10009e80 <__alt_data_end+0xf8009e80>
1000a058:	300b883a 	mov	r5,r6
1000a05c:	dfc00917 	ldw	ra,36(sp)
1000a060:	df000817 	ldw	fp,32(sp)
1000a064:	ddc00717 	ldw	r23,28(sp)
1000a068:	dd800617 	ldw	r22,24(sp)
1000a06c:	dd400517 	ldw	r21,20(sp)
1000a070:	dd000417 	ldw	r20,16(sp)
1000a074:	dcc00317 	ldw	r19,12(sp)
1000a078:	dc800217 	ldw	r18,8(sp)
1000a07c:	dc400117 	ldw	r17,4(sp)
1000a080:	dc000017 	ldw	r16,0(sp)
1000a084:	dec00a04 	addi	sp,sp,40
1000a088:	00014c41 	jmpi	100014c4 <_malloc_r>
1000a08c:	a8c00017 	ldw	r3,0(r21)
1000a090:	90c00015 	stw	r3,0(r18)
1000a094:	a8c00117 	ldw	r3,4(r21)
1000a098:	90c00115 	stw	r3,4(r18)
1000a09c:	00c006c4 	movi	r3,27
1000a0a0:	19804536 	bltu	r3,r6,1000a1b8 <_realloc_r+0x470>
1000a0a4:	90800204 	addi	r2,r18,8
1000a0a8:	a8c00204 	addi	r3,r21,8
1000a0ac:	003f6306 	br	10009e3c <__alt_data_end+0xf8009e3c>
1000a0b0:	9005883a 	mov	r2,r18
1000a0b4:	a8c00017 	ldw	r3,0(r21)
1000a0b8:	b821883a 	mov	r16,r23
1000a0bc:	b027883a 	mov	r19,r22
1000a0c0:	10c00015 	stw	r3,0(r2)
1000a0c4:	a8c00117 	ldw	r3,4(r21)
1000a0c8:	10c00115 	stw	r3,4(r2)
1000a0cc:	a8c00217 	ldw	r3,8(r21)
1000a0d0:	10c00215 	stw	r3,8(r2)
1000a0d4:	003f6a06 	br	10009e80 <__alt_data_end+0xf8009e80>
1000a0d8:	9c67883a 	add	r19,r19,r17
1000a0dc:	4445c83a 	sub	r2,r8,r17
1000a0e0:	e4c00215 	stw	r19,8(fp)
1000a0e4:	10800054 	ori	r2,r2,1
1000a0e8:	98800115 	stw	r2,4(r19)
1000a0ec:	a8bfff17 	ldw	r2,-4(r21)
1000a0f0:	a009883a 	mov	r4,r20
1000a0f4:	1080004c 	andi	r2,r2,1
1000a0f8:	1462b03a 	or	r17,r2,r17
1000a0fc:	ac7fff15 	stw	r17,-4(r21)
1000a100:	000e22c0 	call	1000e22c <__malloc_unlock>
1000a104:	a805883a 	mov	r2,r21
1000a108:	003f6b06 	br	10009eb8 <__alt_data_end+0xf8009eb8>
1000a10c:	a80b883a 	mov	r5,r21
1000a110:	9009883a 	mov	r4,r18
1000a114:	0009bec0 	call	10009bec <memmove>
1000a118:	003f4e06 	br	10009e54 <__alt_data_end+0xf8009e54>
1000a11c:	89000404 	addi	r4,r17,16
1000a120:	b93fbc16 	blt	r23,r4,1000a014 <__alt_data_end+0xf800a014>
1000a124:	b0800317 	ldw	r2,12(r22)
1000a128:	b0c00217 	ldw	r3,8(r22)
1000a12c:	81bfff04 	addi	r6,r16,-4
1000a130:	01000904 	movi	r4,36
1000a134:	18800315 	stw	r2,12(r3)
1000a138:	10c00215 	stw	r3,8(r2)
1000a13c:	b4800204 	addi	r18,r22,8
1000a140:	21804336 	bltu	r4,r6,1000a250 <_realloc_r+0x508>
1000a144:	008004c4 	movi	r2,19
1000a148:	11803f2e 	bgeu	r2,r6,1000a248 <_realloc_r+0x500>
1000a14c:	a8800017 	ldw	r2,0(r21)
1000a150:	b0800215 	stw	r2,8(r22)
1000a154:	a8800117 	ldw	r2,4(r21)
1000a158:	b0800315 	stw	r2,12(r22)
1000a15c:	008006c4 	movi	r2,27
1000a160:	11803f36 	bltu	r2,r6,1000a260 <_realloc_r+0x518>
1000a164:	b0800404 	addi	r2,r22,16
1000a168:	ad400204 	addi	r21,r21,8
1000a16c:	a8c00017 	ldw	r3,0(r21)
1000a170:	10c00015 	stw	r3,0(r2)
1000a174:	a8c00117 	ldw	r3,4(r21)
1000a178:	10c00115 	stw	r3,4(r2)
1000a17c:	a8c00217 	ldw	r3,8(r21)
1000a180:	10c00215 	stw	r3,8(r2)
1000a184:	b447883a 	add	r3,r22,r17
1000a188:	bc45c83a 	sub	r2,r23,r17
1000a18c:	e0c00215 	stw	r3,8(fp)
1000a190:	10800054 	ori	r2,r2,1
1000a194:	18800115 	stw	r2,4(r3)
1000a198:	b0800117 	ldw	r2,4(r22)
1000a19c:	a009883a 	mov	r4,r20
1000a1a0:	1080004c 	andi	r2,r2,1
1000a1a4:	1462b03a 	or	r17,r2,r17
1000a1a8:	b4400115 	stw	r17,4(r22)
1000a1ac:	000e22c0 	call	1000e22c <__malloc_unlock>
1000a1b0:	9005883a 	mov	r2,r18
1000a1b4:	003f4006 	br	10009eb8 <__alt_data_end+0xf8009eb8>
1000a1b8:	a8c00217 	ldw	r3,8(r21)
1000a1bc:	90c00215 	stw	r3,8(r18)
1000a1c0:	a8c00317 	ldw	r3,12(r21)
1000a1c4:	90c00315 	stw	r3,12(r18)
1000a1c8:	30801126 	beq	r6,r2,1000a210 <_realloc_r+0x4c8>
1000a1cc:	90800404 	addi	r2,r18,16
1000a1d0:	a8c00404 	addi	r3,r21,16
1000a1d4:	003f1906 	br	10009e3c <__alt_data_end+0xf8009e3c>
1000a1d8:	90ffff17 	ldw	r3,-4(r18)
1000a1dc:	00bfff04 	movi	r2,-4
1000a1e0:	a825883a 	mov	r18,r21
1000a1e4:	1884703a 	and	r2,r3,r2
1000a1e8:	80a1883a 	add	r16,r16,r2
1000a1ec:	003f2406 	br	10009e80 <__alt_data_end+0xf8009e80>
1000a1f0:	a8800217 	ldw	r2,8(r21)
1000a1f4:	b0800415 	stw	r2,16(r22)
1000a1f8:	a8800317 	ldw	r2,12(r21)
1000a1fc:	b0800515 	stw	r2,20(r22)
1000a200:	31000a26 	beq	r6,r4,1000a22c <_realloc_r+0x4e4>
1000a204:	b0800604 	addi	r2,r22,24
1000a208:	ad400404 	addi	r21,r21,16
1000a20c:	003fa906 	br	1000a0b4 <__alt_data_end+0xf800a0b4>
1000a210:	a9000417 	ldw	r4,16(r21)
1000a214:	90800604 	addi	r2,r18,24
1000a218:	a8c00604 	addi	r3,r21,24
1000a21c:	91000415 	stw	r4,16(r18)
1000a220:	a9000517 	ldw	r4,20(r21)
1000a224:	91000515 	stw	r4,20(r18)
1000a228:	003f0406 	br	10009e3c <__alt_data_end+0xf8009e3c>
1000a22c:	a8c00417 	ldw	r3,16(r21)
1000a230:	ad400604 	addi	r21,r21,24
1000a234:	b0800804 	addi	r2,r22,32
1000a238:	b0c00615 	stw	r3,24(r22)
1000a23c:	a8ffff17 	ldw	r3,-4(r21)
1000a240:	b0c00715 	stw	r3,28(r22)
1000a244:	003f9b06 	br	1000a0b4 <__alt_data_end+0xf800a0b4>
1000a248:	9005883a 	mov	r2,r18
1000a24c:	003fc706 	br	1000a16c <__alt_data_end+0xf800a16c>
1000a250:	a80b883a 	mov	r5,r21
1000a254:	9009883a 	mov	r4,r18
1000a258:	0009bec0 	call	10009bec <memmove>
1000a25c:	003fc906 	br	1000a184 <__alt_data_end+0xf800a184>
1000a260:	a8800217 	ldw	r2,8(r21)
1000a264:	b0800415 	stw	r2,16(r22)
1000a268:	a8800317 	ldw	r2,12(r21)
1000a26c:	b0800515 	stw	r2,20(r22)
1000a270:	31000726 	beq	r6,r4,1000a290 <_realloc_r+0x548>
1000a274:	b0800604 	addi	r2,r22,24
1000a278:	ad400404 	addi	r21,r21,16
1000a27c:	003fbb06 	br	1000a16c <__alt_data_end+0xf800a16c>
1000a280:	a009883a 	mov	r4,r20
1000a284:	000e22c0 	call	1000e22c <__malloc_unlock>
1000a288:	0005883a 	mov	r2,zero
1000a28c:	003f0a06 	br	10009eb8 <__alt_data_end+0xf8009eb8>
1000a290:	a8c00417 	ldw	r3,16(r21)
1000a294:	ad400604 	addi	r21,r21,24
1000a298:	b0800804 	addi	r2,r22,32
1000a29c:	b0c00615 	stw	r3,24(r22)
1000a2a0:	a8ffff17 	ldw	r3,-4(r21)
1000a2a4:	b0c00715 	stw	r3,28(r22)
1000a2a8:	003fb006 	br	1000a16c <__alt_data_end+0xf800a16c>

1000a2ac <_wcrtomb_r>:
1000a2ac:	defff604 	addi	sp,sp,-40
1000a2b0:	00840074 	movhi	r2,4097
1000a2b4:	dc800815 	stw	r18,32(sp)
1000a2b8:	dc400715 	stw	r17,28(sp)
1000a2bc:	dc000615 	stw	r16,24(sp)
1000a2c0:	10880e04 	addi	r2,r2,8248
1000a2c4:	dfc00915 	stw	ra,36(sp)
1000a2c8:	2021883a 	mov	r16,r4
1000a2cc:	3823883a 	mov	r17,r7
1000a2d0:	14800017 	ldw	r18,0(r2)
1000a2d4:	28001426 	beq	r5,zero,1000a328 <_wcrtomb_r+0x7c>
1000a2d8:	d9400415 	stw	r5,16(sp)
1000a2dc:	d9800515 	stw	r6,20(sp)
1000a2e0:	00060740 	call	10006074 <__locale_charset>
1000a2e4:	d9800517 	ldw	r6,20(sp)
1000a2e8:	d9400417 	ldw	r5,16(sp)
1000a2ec:	100f883a 	mov	r7,r2
1000a2f0:	dc400015 	stw	r17,0(sp)
1000a2f4:	8009883a 	mov	r4,r16
1000a2f8:	903ee83a 	callr	r18
1000a2fc:	00ffffc4 	movi	r3,-1
1000a300:	10c0031e 	bne	r2,r3,1000a310 <_wcrtomb_r+0x64>
1000a304:	88000015 	stw	zero,0(r17)
1000a308:	00c02284 	movi	r3,138
1000a30c:	80c00015 	stw	r3,0(r16)
1000a310:	dfc00917 	ldw	ra,36(sp)
1000a314:	dc800817 	ldw	r18,32(sp)
1000a318:	dc400717 	ldw	r17,28(sp)
1000a31c:	dc000617 	ldw	r16,24(sp)
1000a320:	dec00a04 	addi	sp,sp,40
1000a324:	f800283a 	ret
1000a328:	00060740 	call	10006074 <__locale_charset>
1000a32c:	100f883a 	mov	r7,r2
1000a330:	dc400015 	stw	r17,0(sp)
1000a334:	000d883a 	mov	r6,zero
1000a338:	d9400104 	addi	r5,sp,4
1000a33c:	8009883a 	mov	r4,r16
1000a340:	903ee83a 	callr	r18
1000a344:	003fed06 	br	1000a2fc <__alt_data_end+0xf800a2fc>

1000a348 <wcrtomb>:
1000a348:	defff604 	addi	sp,sp,-40
1000a34c:	00840074 	movhi	r2,4097
1000a350:	dc800615 	stw	r18,24(sp)
1000a354:	dc400515 	stw	r17,20(sp)
1000a358:	10880a04 	addi	r2,r2,8232
1000a35c:	dfc00915 	stw	ra,36(sp)
1000a360:	dd000815 	stw	r20,32(sp)
1000a364:	dcc00715 	stw	r19,28(sp)
1000a368:	dc000415 	stw	r16,16(sp)
1000a36c:	3025883a 	mov	r18,r6
1000a370:	14400017 	ldw	r17,0(r2)
1000a374:	20001926 	beq	r4,zero,1000a3dc <wcrtomb+0x94>
1000a378:	00840074 	movhi	r2,4097
1000a37c:	10880e04 	addi	r2,r2,8248
1000a380:	15000017 	ldw	r20,0(r2)
1000a384:	2021883a 	mov	r16,r4
1000a388:	2827883a 	mov	r19,r5
1000a38c:	00060740 	call	10006074 <__locale_charset>
1000a390:	100f883a 	mov	r7,r2
1000a394:	dc800015 	stw	r18,0(sp)
1000a398:	980d883a 	mov	r6,r19
1000a39c:	800b883a 	mov	r5,r16
1000a3a0:	8809883a 	mov	r4,r17
1000a3a4:	a03ee83a 	callr	r20
1000a3a8:	00ffffc4 	movi	r3,-1
1000a3ac:	10c0031e 	bne	r2,r3,1000a3bc <wcrtomb+0x74>
1000a3b0:	90000015 	stw	zero,0(r18)
1000a3b4:	00c02284 	movi	r3,138
1000a3b8:	88c00015 	stw	r3,0(r17)
1000a3bc:	dfc00917 	ldw	ra,36(sp)
1000a3c0:	dd000817 	ldw	r20,32(sp)
1000a3c4:	dcc00717 	ldw	r19,28(sp)
1000a3c8:	dc800617 	ldw	r18,24(sp)
1000a3cc:	dc400517 	ldw	r17,20(sp)
1000a3d0:	dc000417 	ldw	r16,16(sp)
1000a3d4:	dec00a04 	addi	sp,sp,40
1000a3d8:	f800283a 	ret
1000a3dc:	00840074 	movhi	r2,4097
1000a3e0:	10880e04 	addi	r2,r2,8248
1000a3e4:	14000017 	ldw	r16,0(r2)
1000a3e8:	00060740 	call	10006074 <__locale_charset>
1000a3ec:	100f883a 	mov	r7,r2
1000a3f0:	dc800015 	stw	r18,0(sp)
1000a3f4:	000d883a 	mov	r6,zero
1000a3f8:	d9400104 	addi	r5,sp,4
1000a3fc:	8809883a 	mov	r4,r17
1000a400:	803ee83a 	callr	r16
1000a404:	003fe806 	br	1000a3a8 <__alt_data_end+0xf800a3a8>

1000a408 <__ascii_wctomb>:
1000a408:	28000526 	beq	r5,zero,1000a420 <__ascii_wctomb+0x18>
1000a40c:	00803fc4 	movi	r2,255
1000a410:	11800536 	bltu	r2,r6,1000a428 <__ascii_wctomb+0x20>
1000a414:	29800005 	stb	r6,0(r5)
1000a418:	00800044 	movi	r2,1
1000a41c:	f800283a 	ret
1000a420:	0005883a 	mov	r2,zero
1000a424:	f800283a 	ret
1000a428:	00802284 	movi	r2,138
1000a42c:	20800015 	stw	r2,0(r4)
1000a430:	00bfffc4 	movi	r2,-1
1000a434:	f800283a 	ret

1000a438 <_wctomb_r>:
1000a438:	00840074 	movhi	r2,4097
1000a43c:	defff904 	addi	sp,sp,-28
1000a440:	10880e04 	addi	r2,r2,8248
1000a444:	dfc00615 	stw	ra,24(sp)
1000a448:	dc400515 	stw	r17,20(sp)
1000a44c:	dc000415 	stw	r16,16(sp)
1000a450:	3823883a 	mov	r17,r7
1000a454:	14000017 	ldw	r16,0(r2)
1000a458:	d9000115 	stw	r4,4(sp)
1000a45c:	d9400215 	stw	r5,8(sp)
1000a460:	d9800315 	stw	r6,12(sp)
1000a464:	00060740 	call	10006074 <__locale_charset>
1000a468:	d9800317 	ldw	r6,12(sp)
1000a46c:	d9400217 	ldw	r5,8(sp)
1000a470:	d9000117 	ldw	r4,4(sp)
1000a474:	100f883a 	mov	r7,r2
1000a478:	dc400015 	stw	r17,0(sp)
1000a47c:	803ee83a 	callr	r16
1000a480:	dfc00617 	ldw	ra,24(sp)
1000a484:	dc400517 	ldw	r17,20(sp)
1000a488:	dc000417 	ldw	r16,16(sp)
1000a48c:	dec00704 	addi	sp,sp,28
1000a490:	f800283a 	ret

1000a494 <__udivdi3>:
1000a494:	defff404 	addi	sp,sp,-48
1000a498:	dcc00515 	stw	r19,20(sp)
1000a49c:	dc000215 	stw	r16,8(sp)
1000a4a0:	dfc00b15 	stw	ra,44(sp)
1000a4a4:	df000a15 	stw	fp,40(sp)
1000a4a8:	ddc00915 	stw	r23,36(sp)
1000a4ac:	dd800815 	stw	r22,32(sp)
1000a4b0:	dd400715 	stw	r21,28(sp)
1000a4b4:	dd000615 	stw	r20,24(sp)
1000a4b8:	dc800415 	stw	r18,16(sp)
1000a4bc:	dc400315 	stw	r17,12(sp)
1000a4c0:	2027883a 	mov	r19,r4
1000a4c4:	2821883a 	mov	r16,r5
1000a4c8:	3800461e 	bne	r7,zero,1000a5e4 <__udivdi3+0x150>
1000a4cc:	3023883a 	mov	r17,r6
1000a4d0:	2025883a 	mov	r18,r4
1000a4d4:	2980572e 	bgeu	r5,r6,1000a634 <__udivdi3+0x1a0>
1000a4d8:	00bfffd4 	movui	r2,65535
1000a4dc:	282d883a 	mov	r22,r5
1000a4e0:	1180b236 	bltu	r2,r6,1000a7ac <__udivdi3+0x318>
1000a4e4:	00803fc4 	movi	r2,255
1000a4e8:	1185803a 	cmpltu	r2,r2,r6
1000a4ec:	100490fa 	slli	r2,r2,3
1000a4f0:	3086d83a 	srl	r3,r6,r2
1000a4f4:	01040074 	movhi	r4,4097
1000a4f8:	21010e04 	addi	r4,r4,1080
1000a4fc:	20c7883a 	add	r3,r4,r3
1000a500:	18c00003 	ldbu	r3,0(r3)
1000a504:	1885883a 	add	r2,r3,r2
1000a508:	00c00804 	movi	r3,32
1000a50c:	1887c83a 	sub	r3,r3,r2
1000a510:	18000526 	beq	r3,zero,1000a528 <__udivdi3+0x94>
1000a514:	80e0983a 	sll	r16,r16,r3
1000a518:	9884d83a 	srl	r2,r19,r2
1000a51c:	30e2983a 	sll	r17,r6,r3
1000a520:	98e4983a 	sll	r18,r19,r3
1000a524:	142cb03a 	or	r22,r2,r16
1000a528:	882ad43a 	srli	r21,r17,16
1000a52c:	b009883a 	mov	r4,r22
1000a530:	8d3fffcc 	andi	r20,r17,65535
1000a534:	a80b883a 	mov	r5,r21
1000a538:	000b1b00 	call	1000b1b0 <__umodsi3>
1000a53c:	b009883a 	mov	r4,r22
1000a540:	a80b883a 	mov	r5,r21
1000a544:	1027883a 	mov	r19,r2
1000a548:	000b14c0 	call	1000b14c <__udivsi3>
1000a54c:	100b883a 	mov	r5,r2
1000a550:	a009883a 	mov	r4,r20
1000a554:	102d883a 	mov	r22,r2
1000a558:	00006840 	call	10000684 <__mulsi3>
1000a55c:	9826943a 	slli	r19,r19,16
1000a560:	9006d43a 	srli	r3,r18,16
1000a564:	1cc6b03a 	or	r3,r3,r19
1000a568:	1880052e 	bgeu	r3,r2,1000a580 <__udivdi3+0xec>
1000a56c:	1c47883a 	add	r3,r3,r17
1000a570:	b13fffc4 	addi	r4,r22,-1
1000a574:	1c400136 	bltu	r3,r17,1000a57c <__udivdi3+0xe8>
1000a578:	18814236 	bltu	r3,r2,1000aa84 <__udivdi3+0x5f0>
1000a57c:	202d883a 	mov	r22,r4
1000a580:	18a1c83a 	sub	r16,r3,r2
1000a584:	8009883a 	mov	r4,r16
1000a588:	a80b883a 	mov	r5,r21
1000a58c:	000b1b00 	call	1000b1b0 <__umodsi3>
1000a590:	1027883a 	mov	r19,r2
1000a594:	8009883a 	mov	r4,r16
1000a598:	a80b883a 	mov	r5,r21
1000a59c:	9826943a 	slli	r19,r19,16
1000a5a0:	000b14c0 	call	1000b14c <__udivsi3>
1000a5a4:	100b883a 	mov	r5,r2
1000a5a8:	a009883a 	mov	r4,r20
1000a5ac:	94bfffcc 	andi	r18,r18,65535
1000a5b0:	1021883a 	mov	r16,r2
1000a5b4:	94e4b03a 	or	r18,r18,r19
1000a5b8:	00006840 	call	10000684 <__mulsi3>
1000a5bc:	9080052e 	bgeu	r18,r2,1000a5d4 <__udivdi3+0x140>
1000a5c0:	8ca5883a 	add	r18,r17,r18
1000a5c4:	80ffffc4 	addi	r3,r16,-1
1000a5c8:	94410c36 	bltu	r18,r17,1000a9fc <__udivdi3+0x568>
1000a5cc:	90810b2e 	bgeu	r18,r2,1000a9fc <__udivdi3+0x568>
1000a5d0:	843fff84 	addi	r16,r16,-2
1000a5d4:	b004943a 	slli	r2,r22,16
1000a5d8:	0007883a 	mov	r3,zero
1000a5dc:	1404b03a 	or	r2,r2,r16
1000a5e0:	00005e06 	br	1000a75c <__udivdi3+0x2c8>
1000a5e4:	29c05b36 	bltu	r5,r7,1000a754 <__udivdi3+0x2c0>
1000a5e8:	00bfffd4 	movui	r2,65535
1000a5ec:	11c0672e 	bgeu	r2,r7,1000a78c <__udivdi3+0x2f8>
1000a5f0:	00804034 	movhi	r2,256
1000a5f4:	10bfffc4 	addi	r2,r2,-1
1000a5f8:	11c10a36 	bltu	r2,r7,1000aa24 <__udivdi3+0x590>
1000a5fc:	00800404 	movi	r2,16
1000a600:	3886d83a 	srl	r3,r7,r2
1000a604:	01040074 	movhi	r4,4097
1000a608:	21010e04 	addi	r4,r4,1080
1000a60c:	20c7883a 	add	r3,r4,r3
1000a610:	18c00003 	ldbu	r3,0(r3)
1000a614:	05c00804 	movi	r23,32
1000a618:	1885883a 	add	r2,r3,r2
1000a61c:	b8afc83a 	sub	r23,r23,r2
1000a620:	b800671e 	bne	r23,zero,1000a7c0 <__udivdi3+0x32c>
1000a624:	3c010536 	bltu	r7,r16,1000aa3c <__udivdi3+0x5a8>
1000a628:	9985403a 	cmpgeu	r2,r19,r6
1000a62c:	0007883a 	mov	r3,zero
1000a630:	00004a06 	br	1000a75c <__udivdi3+0x2c8>
1000a634:	3000041e 	bne	r6,zero,1000a648 <__udivdi3+0x1b4>
1000a638:	000b883a 	mov	r5,zero
1000a63c:	01000044 	movi	r4,1
1000a640:	000b14c0 	call	1000b14c <__udivsi3>
1000a644:	1023883a 	mov	r17,r2
1000a648:	00bfffd4 	movui	r2,65535
1000a64c:	1440532e 	bgeu	r2,r17,1000a79c <__udivdi3+0x308>
1000a650:	00804034 	movhi	r2,256
1000a654:	10bfffc4 	addi	r2,r2,-1
1000a658:	1440f436 	bltu	r2,r17,1000aa2c <__udivdi3+0x598>
1000a65c:	00800404 	movi	r2,16
1000a660:	8886d83a 	srl	r3,r17,r2
1000a664:	01040074 	movhi	r4,4097
1000a668:	21010e04 	addi	r4,r4,1080
1000a66c:	20c7883a 	add	r3,r4,r3
1000a670:	18c00003 	ldbu	r3,0(r3)
1000a674:	1885883a 	add	r2,r3,r2
1000a678:	00c00804 	movi	r3,32
1000a67c:	1887c83a 	sub	r3,r3,r2
1000a680:	1800a51e 	bne	r3,zero,1000a918 <__udivdi3+0x484>
1000a684:	882ad43a 	srli	r21,r17,16
1000a688:	8461c83a 	sub	r16,r16,r17
1000a68c:	8d3fffcc 	andi	r20,r17,65535
1000a690:	00c00044 	movi	r3,1
1000a694:	a80b883a 	mov	r5,r21
1000a698:	8009883a 	mov	r4,r16
1000a69c:	d8c00115 	stw	r3,4(sp)
1000a6a0:	000b1b00 	call	1000b1b0 <__umodsi3>
1000a6a4:	a80b883a 	mov	r5,r21
1000a6a8:	8009883a 	mov	r4,r16
1000a6ac:	1027883a 	mov	r19,r2
1000a6b0:	000b14c0 	call	1000b14c <__udivsi3>
1000a6b4:	a00b883a 	mov	r5,r20
1000a6b8:	1009883a 	mov	r4,r2
1000a6bc:	102d883a 	mov	r22,r2
1000a6c0:	00006840 	call	10000684 <__mulsi3>
1000a6c4:	9826943a 	slli	r19,r19,16
1000a6c8:	900ed43a 	srli	r7,r18,16
1000a6cc:	d8c00117 	ldw	r3,4(sp)
1000a6d0:	3cceb03a 	or	r7,r7,r19
1000a6d4:	3880052e 	bgeu	r7,r2,1000a6ec <__udivdi3+0x258>
1000a6d8:	3c4f883a 	add	r7,r7,r17
1000a6dc:	b13fffc4 	addi	r4,r22,-1
1000a6e0:	3c400136 	bltu	r7,r17,1000a6e8 <__udivdi3+0x254>
1000a6e4:	3880e436 	bltu	r7,r2,1000aa78 <__udivdi3+0x5e4>
1000a6e8:	202d883a 	mov	r22,r4
1000a6ec:	38a1c83a 	sub	r16,r7,r2
1000a6f0:	8009883a 	mov	r4,r16
1000a6f4:	a80b883a 	mov	r5,r21
1000a6f8:	d8c00115 	stw	r3,4(sp)
1000a6fc:	000b1b00 	call	1000b1b0 <__umodsi3>
1000a700:	1027883a 	mov	r19,r2
1000a704:	8009883a 	mov	r4,r16
1000a708:	a80b883a 	mov	r5,r21
1000a70c:	9826943a 	slli	r19,r19,16
1000a710:	000b14c0 	call	1000b14c <__udivsi3>
1000a714:	a00b883a 	mov	r5,r20
1000a718:	1009883a 	mov	r4,r2
1000a71c:	94bfffcc 	andi	r18,r18,65535
1000a720:	1021883a 	mov	r16,r2
1000a724:	94e4b03a 	or	r18,r18,r19
1000a728:	00006840 	call	10000684 <__mulsi3>
1000a72c:	d8c00117 	ldw	r3,4(sp)
1000a730:	9080052e 	bgeu	r18,r2,1000a748 <__udivdi3+0x2b4>
1000a734:	8ca5883a 	add	r18,r17,r18
1000a738:	813fffc4 	addi	r4,r16,-1
1000a73c:	9440ad36 	bltu	r18,r17,1000a9f4 <__udivdi3+0x560>
1000a740:	9080ac2e 	bgeu	r18,r2,1000a9f4 <__udivdi3+0x560>
1000a744:	843fff84 	addi	r16,r16,-2
1000a748:	b004943a 	slli	r2,r22,16
1000a74c:	1404b03a 	or	r2,r2,r16
1000a750:	00000206 	br	1000a75c <__udivdi3+0x2c8>
1000a754:	0007883a 	mov	r3,zero
1000a758:	0005883a 	mov	r2,zero
1000a75c:	dfc00b17 	ldw	ra,44(sp)
1000a760:	df000a17 	ldw	fp,40(sp)
1000a764:	ddc00917 	ldw	r23,36(sp)
1000a768:	dd800817 	ldw	r22,32(sp)
1000a76c:	dd400717 	ldw	r21,28(sp)
1000a770:	dd000617 	ldw	r20,24(sp)
1000a774:	dcc00517 	ldw	r19,20(sp)
1000a778:	dc800417 	ldw	r18,16(sp)
1000a77c:	dc400317 	ldw	r17,12(sp)
1000a780:	dc000217 	ldw	r16,8(sp)
1000a784:	dec00c04 	addi	sp,sp,48
1000a788:	f800283a 	ret
1000a78c:	00803fc4 	movi	r2,255
1000a790:	11c5803a 	cmpltu	r2,r2,r7
1000a794:	100490fa 	slli	r2,r2,3
1000a798:	003f9906 	br	1000a600 <__alt_data_end+0xf800a600>
1000a79c:	00803fc4 	movi	r2,255
1000a7a0:	1445803a 	cmpltu	r2,r2,r17
1000a7a4:	100490fa 	slli	r2,r2,3
1000a7a8:	003fad06 	br	1000a660 <__alt_data_end+0xf800a660>
1000a7ac:	00804034 	movhi	r2,256
1000a7b0:	10bfffc4 	addi	r2,r2,-1
1000a7b4:	11809f36 	bltu	r2,r6,1000aa34 <__udivdi3+0x5a0>
1000a7b8:	00800404 	movi	r2,16
1000a7bc:	003f4c06 	br	1000a4f0 <__alt_data_end+0xf800a4f0>
1000a7c0:	3dce983a 	sll	r7,r7,r23
1000a7c4:	30b8d83a 	srl	fp,r6,r2
1000a7c8:	80a2d83a 	srl	r17,r16,r2
1000a7cc:	35cc983a 	sll	r6,r6,r23
1000a7d0:	3f38b03a 	or	fp,r7,fp
1000a7d4:	e024d43a 	srli	r18,fp,16
1000a7d8:	9884d83a 	srl	r2,r19,r2
1000a7dc:	85e0983a 	sll	r16,r16,r23
1000a7e0:	8809883a 	mov	r4,r17
1000a7e4:	900b883a 	mov	r5,r18
1000a7e8:	d9800015 	stw	r6,0(sp)
1000a7ec:	1420b03a 	or	r16,r2,r16
1000a7f0:	000b1b00 	call	1000b1b0 <__umodsi3>
1000a7f4:	900b883a 	mov	r5,r18
1000a7f8:	8809883a 	mov	r4,r17
1000a7fc:	1029883a 	mov	r20,r2
1000a800:	e5bfffcc 	andi	r22,fp,65535
1000a804:	000b14c0 	call	1000b14c <__udivsi3>
1000a808:	100b883a 	mov	r5,r2
1000a80c:	b009883a 	mov	r4,r22
1000a810:	102b883a 	mov	r21,r2
1000a814:	00006840 	call	10000684 <__mulsi3>
1000a818:	a028943a 	slli	r20,r20,16
1000a81c:	8006d43a 	srli	r3,r16,16
1000a820:	1d06b03a 	or	r3,r3,r20
1000a824:	1880042e 	bgeu	r3,r2,1000a838 <__udivdi3+0x3a4>
1000a828:	1f07883a 	add	r3,r3,fp
1000a82c:	a93fffc4 	addi	r4,r21,-1
1000a830:	1f00892e 	bgeu	r3,fp,1000aa58 <__udivdi3+0x5c4>
1000a834:	202b883a 	mov	r21,r4
1000a838:	18a3c83a 	sub	r17,r3,r2
1000a83c:	8809883a 	mov	r4,r17
1000a840:	900b883a 	mov	r5,r18
1000a844:	000b1b00 	call	1000b1b0 <__umodsi3>
1000a848:	1029883a 	mov	r20,r2
1000a84c:	8809883a 	mov	r4,r17
1000a850:	900b883a 	mov	r5,r18
1000a854:	a028943a 	slli	r20,r20,16
1000a858:	000b14c0 	call	1000b14c <__udivsi3>
1000a85c:	100b883a 	mov	r5,r2
1000a860:	b009883a 	mov	r4,r22
1000a864:	843fffcc 	andi	r16,r16,65535
1000a868:	1023883a 	mov	r17,r2
1000a86c:	8520b03a 	or	r16,r16,r20
1000a870:	00006840 	call	10000684 <__mulsi3>
1000a874:	8080042e 	bgeu	r16,r2,1000a888 <__udivdi3+0x3f4>
1000a878:	8721883a 	add	r16,r16,fp
1000a87c:	88ffffc4 	addi	r3,r17,-1
1000a880:	8700712e 	bgeu	r16,fp,1000aa48 <__udivdi3+0x5b4>
1000a884:	1823883a 	mov	r17,r3
1000a888:	a80e943a 	slli	r7,r21,16
1000a88c:	d8c00017 	ldw	r3,0(sp)
1000a890:	80a1c83a 	sub	r16,r16,r2
1000a894:	3c64b03a 	or	r18,r7,r17
1000a898:	1d3fffcc 	andi	r20,r3,65535
1000a89c:	9022d43a 	srli	r17,r18,16
1000a8a0:	95bfffcc 	andi	r22,r18,65535
1000a8a4:	a00b883a 	mov	r5,r20
1000a8a8:	b009883a 	mov	r4,r22
1000a8ac:	182ad43a 	srli	r21,r3,16
1000a8b0:	00006840 	call	10000684 <__mulsi3>
1000a8b4:	a00b883a 	mov	r5,r20
1000a8b8:	8809883a 	mov	r4,r17
1000a8bc:	1039883a 	mov	fp,r2
1000a8c0:	00006840 	call	10000684 <__mulsi3>
1000a8c4:	8809883a 	mov	r4,r17
1000a8c8:	a80b883a 	mov	r5,r21
1000a8cc:	1029883a 	mov	r20,r2
1000a8d0:	00006840 	call	10000684 <__mulsi3>
1000a8d4:	a80b883a 	mov	r5,r21
1000a8d8:	b009883a 	mov	r4,r22
1000a8dc:	1023883a 	mov	r17,r2
1000a8e0:	00006840 	call	10000684 <__mulsi3>
1000a8e4:	e006d43a 	srli	r3,fp,16
1000a8e8:	1505883a 	add	r2,r2,r20
1000a8ec:	1887883a 	add	r3,r3,r2
1000a8f0:	1d00022e 	bgeu	r3,r20,1000a8fc <__udivdi3+0x468>
1000a8f4:	00800074 	movhi	r2,1
1000a8f8:	88a3883a 	add	r17,r17,r2
1000a8fc:	1804d43a 	srli	r2,r3,16
1000a900:	1463883a 	add	r17,r2,r17
1000a904:	84404436 	bltu	r16,r17,1000aa18 <__udivdi3+0x584>
1000a908:	84403e26 	beq	r16,r17,1000aa04 <__udivdi3+0x570>
1000a90c:	9005883a 	mov	r2,r18
1000a910:	0007883a 	mov	r3,zero
1000a914:	003f9106 	br	1000a75c <__alt_data_end+0xf800a75c>
1000a918:	88e2983a 	sll	r17,r17,r3
1000a91c:	80aed83a 	srl	r23,r16,r2
1000a920:	80e0983a 	sll	r16,r16,r3
1000a924:	882ad43a 	srli	r21,r17,16
1000a928:	9884d83a 	srl	r2,r19,r2
1000a92c:	b809883a 	mov	r4,r23
1000a930:	a80b883a 	mov	r5,r21
1000a934:	98e4983a 	sll	r18,r19,r3
1000a938:	142cb03a 	or	r22,r2,r16
1000a93c:	000b1b00 	call	1000b1b0 <__umodsi3>
1000a940:	b809883a 	mov	r4,r23
1000a944:	a80b883a 	mov	r5,r21
1000a948:	1027883a 	mov	r19,r2
1000a94c:	8d3fffcc 	andi	r20,r17,65535
1000a950:	000b14c0 	call	1000b14c <__udivsi3>
1000a954:	a009883a 	mov	r4,r20
1000a958:	100b883a 	mov	r5,r2
1000a95c:	102f883a 	mov	r23,r2
1000a960:	00006840 	call	10000684 <__mulsi3>
1000a964:	9826943a 	slli	r19,r19,16
1000a968:	b008d43a 	srli	r4,r22,16
1000a96c:	24c8b03a 	or	r4,r4,r19
1000a970:	2080062e 	bgeu	r4,r2,1000a98c <__udivdi3+0x4f8>
1000a974:	2449883a 	add	r4,r4,r17
1000a978:	b8ffffc4 	addi	r3,r23,-1
1000a97c:	24403c36 	bltu	r4,r17,1000aa70 <__udivdi3+0x5dc>
1000a980:	20803b2e 	bgeu	r4,r2,1000aa70 <__udivdi3+0x5dc>
1000a984:	bdffff84 	addi	r23,r23,-2
1000a988:	2449883a 	add	r4,r4,r17
1000a98c:	20a1c83a 	sub	r16,r4,r2
1000a990:	a80b883a 	mov	r5,r21
1000a994:	8009883a 	mov	r4,r16
1000a998:	000b1b00 	call	1000b1b0 <__umodsi3>
1000a99c:	a80b883a 	mov	r5,r21
1000a9a0:	8009883a 	mov	r4,r16
1000a9a4:	1027883a 	mov	r19,r2
1000a9a8:	000b14c0 	call	1000b14c <__udivsi3>
1000a9ac:	a009883a 	mov	r4,r20
1000a9b0:	100b883a 	mov	r5,r2
1000a9b4:	9826943a 	slli	r19,r19,16
1000a9b8:	1039883a 	mov	fp,r2
1000a9bc:	00006840 	call	10000684 <__mulsi3>
1000a9c0:	b13fffcc 	andi	r4,r22,65535
1000a9c4:	24c8b03a 	or	r4,r4,r19
1000a9c8:	2080062e 	bgeu	r4,r2,1000a9e4 <__udivdi3+0x550>
1000a9cc:	2449883a 	add	r4,r4,r17
1000a9d0:	e0ffffc4 	addi	r3,fp,-1
1000a9d4:	24402436 	bltu	r4,r17,1000aa68 <__udivdi3+0x5d4>
1000a9d8:	2080232e 	bgeu	r4,r2,1000aa68 <__udivdi3+0x5d4>
1000a9dc:	e73fff84 	addi	fp,fp,-2
1000a9e0:	2449883a 	add	r4,r4,r17
1000a9e4:	b82e943a 	slli	r23,r23,16
1000a9e8:	20a1c83a 	sub	r16,r4,r2
1000a9ec:	bf06b03a 	or	r3,r23,fp
1000a9f0:	003f2806 	br	1000a694 <__alt_data_end+0xf800a694>
1000a9f4:	2021883a 	mov	r16,r4
1000a9f8:	003f5306 	br	1000a748 <__alt_data_end+0xf800a748>
1000a9fc:	1821883a 	mov	r16,r3
1000aa00:	003ef406 	br	1000a5d4 <__alt_data_end+0xf800a5d4>
1000aa04:	1806943a 	slli	r3,r3,16
1000aa08:	9de6983a 	sll	r19,r19,r23
1000aa0c:	e73fffcc 	andi	fp,fp,65535
1000aa10:	1f07883a 	add	r3,r3,fp
1000aa14:	98ffbd2e 	bgeu	r19,r3,1000a90c <__alt_data_end+0xf800a90c>
1000aa18:	90bfffc4 	addi	r2,r18,-1
1000aa1c:	0007883a 	mov	r3,zero
1000aa20:	003f4e06 	br	1000a75c <__alt_data_end+0xf800a75c>
1000aa24:	00800604 	movi	r2,24
1000aa28:	003ef506 	br	1000a600 <__alt_data_end+0xf800a600>
1000aa2c:	00800604 	movi	r2,24
1000aa30:	003f0b06 	br	1000a660 <__alt_data_end+0xf800a660>
1000aa34:	00800604 	movi	r2,24
1000aa38:	003ead06 	br	1000a4f0 <__alt_data_end+0xf800a4f0>
1000aa3c:	0007883a 	mov	r3,zero
1000aa40:	00800044 	movi	r2,1
1000aa44:	003f4506 	br	1000a75c <__alt_data_end+0xf800a75c>
1000aa48:	80bf8e2e 	bgeu	r16,r2,1000a884 <__alt_data_end+0xf800a884>
1000aa4c:	8c7fff84 	addi	r17,r17,-2
1000aa50:	8721883a 	add	r16,r16,fp
1000aa54:	003f8c06 	br	1000a888 <__alt_data_end+0xf800a888>
1000aa58:	18bf762e 	bgeu	r3,r2,1000a834 <__alt_data_end+0xf800a834>
1000aa5c:	ad7fff84 	addi	r21,r21,-2
1000aa60:	1f07883a 	add	r3,r3,fp
1000aa64:	003f7406 	br	1000a838 <__alt_data_end+0xf800a838>
1000aa68:	1839883a 	mov	fp,r3
1000aa6c:	003fdd06 	br	1000a9e4 <__alt_data_end+0xf800a9e4>
1000aa70:	182f883a 	mov	r23,r3
1000aa74:	003fc506 	br	1000a98c <__alt_data_end+0xf800a98c>
1000aa78:	b5bfff84 	addi	r22,r22,-2
1000aa7c:	3c4f883a 	add	r7,r7,r17
1000aa80:	003f1a06 	br	1000a6ec <__alt_data_end+0xf800a6ec>
1000aa84:	b5bfff84 	addi	r22,r22,-2
1000aa88:	1c47883a 	add	r3,r3,r17
1000aa8c:	003ebc06 	br	1000a580 <__alt_data_end+0xf800a580>

1000aa90 <__umoddi3>:
1000aa90:	defff304 	addi	sp,sp,-52
1000aa94:	df000b15 	stw	fp,44(sp)
1000aa98:	dc400415 	stw	r17,16(sp)
1000aa9c:	dc000315 	stw	r16,12(sp)
1000aaa0:	dfc00c15 	stw	ra,48(sp)
1000aaa4:	ddc00a15 	stw	r23,40(sp)
1000aaa8:	dd800915 	stw	r22,36(sp)
1000aaac:	dd400815 	stw	r21,32(sp)
1000aab0:	dd000715 	stw	r20,28(sp)
1000aab4:	dcc00615 	stw	r19,24(sp)
1000aab8:	dc800515 	stw	r18,20(sp)
1000aabc:	2021883a 	mov	r16,r4
1000aac0:	2823883a 	mov	r17,r5
1000aac4:	2839883a 	mov	fp,r5
1000aac8:	3800401e 	bne	r7,zero,1000abcc <__umoddi3+0x13c>
1000aacc:	3027883a 	mov	r19,r6
1000aad0:	2029883a 	mov	r20,r4
1000aad4:	2980552e 	bgeu	r5,r6,1000ac2c <__umoddi3+0x19c>
1000aad8:	00bfffd4 	movui	r2,65535
1000aadc:	1180a236 	bltu	r2,r6,1000ad68 <__umoddi3+0x2d8>
1000aae0:	01003fc4 	movi	r4,255
1000aae4:	2189803a 	cmpltu	r4,r4,r6
1000aae8:	200890fa 	slli	r4,r4,3
1000aaec:	3104d83a 	srl	r2,r6,r4
1000aaf0:	00c40074 	movhi	r3,4097
1000aaf4:	18c10e04 	addi	r3,r3,1080
1000aaf8:	1885883a 	add	r2,r3,r2
1000aafc:	10c00003 	ldbu	r3,0(r2)
1000ab00:	00800804 	movi	r2,32
1000ab04:	1909883a 	add	r4,r3,r4
1000ab08:	1125c83a 	sub	r18,r2,r4
1000ab0c:	90000526 	beq	r18,zero,1000ab24 <__umoddi3+0x94>
1000ab10:	8ca2983a 	sll	r17,r17,r18
1000ab14:	8108d83a 	srl	r4,r16,r4
1000ab18:	34a6983a 	sll	r19,r6,r18
1000ab1c:	84a8983a 	sll	r20,r16,r18
1000ab20:	2478b03a 	or	fp,r4,r17
1000ab24:	982cd43a 	srli	r22,r19,16
1000ab28:	e009883a 	mov	r4,fp
1000ab2c:	9dffffcc 	andi	r23,r19,65535
1000ab30:	b00b883a 	mov	r5,r22
1000ab34:	000b1b00 	call	1000b1b0 <__umodsi3>
1000ab38:	b00b883a 	mov	r5,r22
1000ab3c:	e009883a 	mov	r4,fp
1000ab40:	102b883a 	mov	r21,r2
1000ab44:	000b14c0 	call	1000b14c <__udivsi3>
1000ab48:	100b883a 	mov	r5,r2
1000ab4c:	b809883a 	mov	r4,r23
1000ab50:	00006840 	call	10000684 <__mulsi3>
1000ab54:	a82a943a 	slli	r21,r21,16
1000ab58:	a006d43a 	srli	r3,r20,16
1000ab5c:	1d46b03a 	or	r3,r3,r21
1000ab60:	1880032e 	bgeu	r3,r2,1000ab70 <__umoddi3+0xe0>
1000ab64:	1cc7883a 	add	r3,r3,r19
1000ab68:	1cc00136 	bltu	r3,r19,1000ab70 <__umoddi3+0xe0>
1000ab6c:	18813136 	bltu	r3,r2,1000b034 <__umoddi3+0x5a4>
1000ab70:	18a1c83a 	sub	r16,r3,r2
1000ab74:	b00b883a 	mov	r5,r22
1000ab78:	8009883a 	mov	r4,r16
1000ab7c:	000b1b00 	call	1000b1b0 <__umodsi3>
1000ab80:	b00b883a 	mov	r5,r22
1000ab84:	8009883a 	mov	r4,r16
1000ab88:	1023883a 	mov	r17,r2
1000ab8c:	000b14c0 	call	1000b14c <__udivsi3>
1000ab90:	100b883a 	mov	r5,r2
1000ab94:	b809883a 	mov	r4,r23
1000ab98:	8822943a 	slli	r17,r17,16
1000ab9c:	00006840 	call	10000684 <__mulsi3>
1000aba0:	a0ffffcc 	andi	r3,r20,65535
1000aba4:	1c46b03a 	or	r3,r3,r17
1000aba8:	1880042e 	bgeu	r3,r2,1000abbc <__umoddi3+0x12c>
1000abac:	1cc7883a 	add	r3,r3,r19
1000abb0:	1cc00236 	bltu	r3,r19,1000abbc <__umoddi3+0x12c>
1000abb4:	1880012e 	bgeu	r3,r2,1000abbc <__umoddi3+0x12c>
1000abb8:	1cc7883a 	add	r3,r3,r19
1000abbc:	1885c83a 	sub	r2,r3,r2
1000abc0:	1484d83a 	srl	r2,r2,r18
1000abc4:	0007883a 	mov	r3,zero
1000abc8:	00005306 	br	1000ad18 <__umoddi3+0x288>
1000abcc:	29c05036 	bltu	r5,r7,1000ad10 <__umoddi3+0x280>
1000abd0:	00bfffd4 	movui	r2,65535
1000abd4:	11c05c2e 	bgeu	r2,r7,1000ad48 <__umoddi3+0x2b8>
1000abd8:	00804034 	movhi	r2,256
1000abdc:	10bfffc4 	addi	r2,r2,-1
1000abe0:	11c10636 	bltu	r2,r7,1000affc <__umoddi3+0x56c>
1000abe4:	01000404 	movi	r4,16
1000abe8:	3904d83a 	srl	r2,r7,r4
1000abec:	00c40074 	movhi	r3,4097
1000abf0:	18c10e04 	addi	r3,r3,1080
1000abf4:	1885883a 	add	r2,r3,r2
1000abf8:	14c00003 	ldbu	r19,0(r2)
1000abfc:	00c00804 	movi	r3,32
1000ac00:	9927883a 	add	r19,r19,r4
1000ac04:	1ce9c83a 	sub	r20,r3,r19
1000ac08:	a0005c1e 	bne	r20,zero,1000ad7c <__umoddi3+0x2ec>
1000ac0c:	3c400136 	bltu	r7,r17,1000ac14 <__umoddi3+0x184>
1000ac10:	81810a36 	bltu	r16,r6,1000b03c <__umoddi3+0x5ac>
1000ac14:	8185c83a 	sub	r2,r16,r6
1000ac18:	89e3c83a 	sub	r17,r17,r7
1000ac1c:	8089803a 	cmpltu	r4,r16,r2
1000ac20:	8939c83a 	sub	fp,r17,r4
1000ac24:	e007883a 	mov	r3,fp
1000ac28:	00003b06 	br	1000ad18 <__umoddi3+0x288>
1000ac2c:	3000041e 	bne	r6,zero,1000ac40 <__umoddi3+0x1b0>
1000ac30:	000b883a 	mov	r5,zero
1000ac34:	01000044 	movi	r4,1
1000ac38:	000b14c0 	call	1000b14c <__udivsi3>
1000ac3c:	1027883a 	mov	r19,r2
1000ac40:	00bfffd4 	movui	r2,65535
1000ac44:	14c0442e 	bgeu	r2,r19,1000ad58 <__umoddi3+0x2c8>
1000ac48:	00804034 	movhi	r2,256
1000ac4c:	10bfffc4 	addi	r2,r2,-1
1000ac50:	14c0ec36 	bltu	r2,r19,1000b004 <__umoddi3+0x574>
1000ac54:	00800404 	movi	r2,16
1000ac58:	9886d83a 	srl	r3,r19,r2
1000ac5c:	01040074 	movhi	r4,4097
1000ac60:	21010e04 	addi	r4,r4,1080
1000ac64:	20c7883a 	add	r3,r4,r3
1000ac68:	18c00003 	ldbu	r3,0(r3)
1000ac6c:	1887883a 	add	r3,r3,r2
1000ac70:	00800804 	movi	r2,32
1000ac74:	10e5c83a 	sub	r18,r2,r3
1000ac78:	9000ab1e 	bne	r18,zero,1000af28 <__umoddi3+0x498>
1000ac7c:	982cd43a 	srli	r22,r19,16
1000ac80:	8ce3c83a 	sub	r17,r17,r19
1000ac84:	9dffffcc 	andi	r23,r19,65535
1000ac88:	b00b883a 	mov	r5,r22
1000ac8c:	8809883a 	mov	r4,r17
1000ac90:	000b1b00 	call	1000b1b0 <__umodsi3>
1000ac94:	b00b883a 	mov	r5,r22
1000ac98:	8809883a 	mov	r4,r17
1000ac9c:	102b883a 	mov	r21,r2
1000aca0:	000b14c0 	call	1000b14c <__udivsi3>
1000aca4:	b80b883a 	mov	r5,r23
1000aca8:	1009883a 	mov	r4,r2
1000acac:	00006840 	call	10000684 <__mulsi3>
1000acb0:	a82a943a 	slli	r21,r21,16
1000acb4:	a006d43a 	srli	r3,r20,16
1000acb8:	1d46b03a 	or	r3,r3,r21
1000acbc:	1880042e 	bgeu	r3,r2,1000acd0 <__umoddi3+0x240>
1000acc0:	1cc7883a 	add	r3,r3,r19
1000acc4:	1cc00236 	bltu	r3,r19,1000acd0 <__umoddi3+0x240>
1000acc8:	1880012e 	bgeu	r3,r2,1000acd0 <__umoddi3+0x240>
1000accc:	1cc7883a 	add	r3,r3,r19
1000acd0:	18a1c83a 	sub	r16,r3,r2
1000acd4:	b00b883a 	mov	r5,r22
1000acd8:	8009883a 	mov	r4,r16
1000acdc:	000b1b00 	call	1000b1b0 <__umodsi3>
1000ace0:	1023883a 	mov	r17,r2
1000ace4:	b00b883a 	mov	r5,r22
1000ace8:	8009883a 	mov	r4,r16
1000acec:	000b14c0 	call	1000b14c <__udivsi3>
1000acf0:	8822943a 	slli	r17,r17,16
1000acf4:	b80b883a 	mov	r5,r23
1000acf8:	1009883a 	mov	r4,r2
1000acfc:	00006840 	call	10000684 <__mulsi3>
1000ad00:	a53fffcc 	andi	r20,r20,65535
1000ad04:	a446b03a 	or	r3,r20,r17
1000ad08:	18bfac2e 	bgeu	r3,r2,1000abbc <__alt_data_end+0xf800abbc>
1000ad0c:	003fa706 	br	1000abac <__alt_data_end+0xf800abac>
1000ad10:	2005883a 	mov	r2,r4
1000ad14:	2807883a 	mov	r3,r5
1000ad18:	dfc00c17 	ldw	ra,48(sp)
1000ad1c:	df000b17 	ldw	fp,44(sp)
1000ad20:	ddc00a17 	ldw	r23,40(sp)
1000ad24:	dd800917 	ldw	r22,36(sp)
1000ad28:	dd400817 	ldw	r21,32(sp)
1000ad2c:	dd000717 	ldw	r20,28(sp)
1000ad30:	dcc00617 	ldw	r19,24(sp)
1000ad34:	dc800517 	ldw	r18,20(sp)
1000ad38:	dc400417 	ldw	r17,16(sp)
1000ad3c:	dc000317 	ldw	r16,12(sp)
1000ad40:	dec00d04 	addi	sp,sp,52
1000ad44:	f800283a 	ret
1000ad48:	04c03fc4 	movi	r19,255
1000ad4c:	99c9803a 	cmpltu	r4,r19,r7
1000ad50:	200890fa 	slli	r4,r4,3
1000ad54:	003fa406 	br	1000abe8 <__alt_data_end+0xf800abe8>
1000ad58:	00803fc4 	movi	r2,255
1000ad5c:	14c5803a 	cmpltu	r2,r2,r19
1000ad60:	100490fa 	slli	r2,r2,3
1000ad64:	003fbc06 	br	1000ac58 <__alt_data_end+0xf800ac58>
1000ad68:	00804034 	movhi	r2,256
1000ad6c:	10bfffc4 	addi	r2,r2,-1
1000ad70:	1180a636 	bltu	r2,r6,1000b00c <__umoddi3+0x57c>
1000ad74:	01000404 	movi	r4,16
1000ad78:	003f5c06 	br	1000aaec <__alt_data_end+0xf800aaec>
1000ad7c:	3d0e983a 	sll	r7,r7,r20
1000ad80:	34ead83a 	srl	r21,r6,r19
1000ad84:	8cc6d83a 	srl	r3,r17,r19
1000ad88:	8d10983a 	sll	r8,r17,r20
1000ad8c:	3d6ab03a 	or	r21,r7,r21
1000ad90:	a82cd43a 	srli	r22,r21,16
1000ad94:	84e2d83a 	srl	r17,r16,r19
1000ad98:	1809883a 	mov	r4,r3
1000ad9c:	b00b883a 	mov	r5,r22
1000ada0:	8a22b03a 	or	r17,r17,r8
1000ada4:	3524983a 	sll	r18,r6,r20
1000ada8:	dc400015 	stw	r17,0(sp)
1000adac:	d8c00115 	stw	r3,4(sp)
1000adb0:	000b1b00 	call	1000b1b0 <__umodsi3>
1000adb4:	d8c00117 	ldw	r3,4(sp)
1000adb8:	b00b883a 	mov	r5,r22
1000adbc:	1039883a 	mov	fp,r2
1000adc0:	1809883a 	mov	r4,r3
1000adc4:	000b14c0 	call	1000b14c <__udivsi3>
1000adc8:	adffffcc 	andi	r23,r21,65535
1000adcc:	100b883a 	mov	r5,r2
1000add0:	b809883a 	mov	r4,r23
1000add4:	1023883a 	mov	r17,r2
1000add8:	00006840 	call	10000684 <__mulsi3>
1000addc:	d9400017 	ldw	r5,0(sp)
1000ade0:	e008943a 	slli	r4,fp,16
1000ade4:	8520983a 	sll	r16,r16,r20
1000ade8:	2806d43a 	srli	r3,r5,16
1000adec:	1906b03a 	or	r3,r3,r4
1000adf0:	1880042e 	bgeu	r3,r2,1000ae04 <__umoddi3+0x374>
1000adf4:	1d47883a 	add	r3,r3,r21
1000adf8:	893fffc4 	addi	r4,r17,-1
1000adfc:	1d40892e 	bgeu	r3,r21,1000b024 <__umoddi3+0x594>
1000ae00:	2023883a 	mov	r17,r4
1000ae04:	18b9c83a 	sub	fp,r3,r2
1000ae08:	b00b883a 	mov	r5,r22
1000ae0c:	e009883a 	mov	r4,fp
1000ae10:	000b1b00 	call	1000b1b0 <__umodsi3>
1000ae14:	b00b883a 	mov	r5,r22
1000ae18:	e009883a 	mov	r4,fp
1000ae1c:	d8800215 	stw	r2,8(sp)
1000ae20:	000b14c0 	call	1000b14c <__udivsi3>
1000ae24:	100b883a 	mov	r5,r2
1000ae28:	b809883a 	mov	r4,r23
1000ae2c:	102d883a 	mov	r22,r2
1000ae30:	00006840 	call	10000684 <__mulsi3>
1000ae34:	d9800217 	ldw	r6,8(sp)
1000ae38:	d8c00017 	ldw	r3,0(sp)
1000ae3c:	300c943a 	slli	r6,r6,16
1000ae40:	1a3fffcc 	andi	r8,r3,65535
1000ae44:	4190b03a 	or	r8,r8,r6
1000ae48:	4080042e 	bgeu	r8,r2,1000ae5c <__umoddi3+0x3cc>
1000ae4c:	4551883a 	add	r8,r8,r21
1000ae50:	b0ffffc4 	addi	r3,r22,-1
1000ae54:	45406f2e 	bgeu	r8,r21,1000b014 <__umoddi3+0x584>
1000ae58:	182d883a 	mov	r22,r3
1000ae5c:	880e943a 	slli	r7,r17,16
1000ae60:	9006d43a 	srli	r3,r18,16
1000ae64:	91bfffcc 	andi	r6,r18,65535
1000ae68:	3dacb03a 	or	r22,r7,r22
1000ae6c:	b02ed43a 	srli	r23,r22,16
1000ae70:	b5bfffcc 	andi	r22,r22,65535
1000ae74:	300b883a 	mov	r5,r6
1000ae78:	b009883a 	mov	r4,r22
1000ae7c:	40a3c83a 	sub	r17,r8,r2
1000ae80:	d8c00115 	stw	r3,4(sp)
1000ae84:	d9800215 	stw	r6,8(sp)
1000ae88:	00006840 	call	10000684 <__mulsi3>
1000ae8c:	d9800217 	ldw	r6,8(sp)
1000ae90:	b809883a 	mov	r4,r23
1000ae94:	1039883a 	mov	fp,r2
1000ae98:	300b883a 	mov	r5,r6
1000ae9c:	00006840 	call	10000684 <__mulsi3>
1000aea0:	d8c00117 	ldw	r3,4(sp)
1000aea4:	b809883a 	mov	r4,r23
1000aea8:	d8800215 	stw	r2,8(sp)
1000aeac:	180b883a 	mov	r5,r3
1000aeb0:	00006840 	call	10000684 <__mulsi3>
1000aeb4:	d8c00117 	ldw	r3,4(sp)
1000aeb8:	b009883a 	mov	r4,r22
1000aebc:	102f883a 	mov	r23,r2
1000aec0:	180b883a 	mov	r5,r3
1000aec4:	00006840 	call	10000684 <__mulsi3>
1000aec8:	d9800217 	ldw	r6,8(sp)
1000aecc:	e006d43a 	srli	r3,fp,16
1000aed0:	1185883a 	add	r2,r2,r6
1000aed4:	1885883a 	add	r2,r3,r2
1000aed8:	1180022e 	bgeu	r2,r6,1000aee4 <__umoddi3+0x454>
1000aedc:	00c00074 	movhi	r3,1
1000aee0:	b8ef883a 	add	r23,r23,r3
1000aee4:	1006d43a 	srli	r3,r2,16
1000aee8:	1004943a 	slli	r2,r2,16
1000aeec:	e73fffcc 	andi	fp,fp,65535
1000aef0:	1dc7883a 	add	r3,r3,r23
1000aef4:	1739883a 	add	fp,r2,fp
1000aef8:	88c03a36 	bltu	r17,r3,1000afe4 <__umoddi3+0x554>
1000aefc:	88c05126 	beq	r17,r3,1000b044 <__umoddi3+0x5b4>
1000af00:	88c9c83a 	sub	r4,r17,r3
1000af04:	e00f883a 	mov	r7,fp
1000af08:	81cfc83a 	sub	r7,r16,r7
1000af0c:	81c7803a 	cmpltu	r3,r16,r7
1000af10:	20c7c83a 	sub	r3,r4,r3
1000af14:	1cc4983a 	sll	r2,r3,r19
1000af18:	3d0ed83a 	srl	r7,r7,r20
1000af1c:	1d06d83a 	srl	r3,r3,r20
1000af20:	11c4b03a 	or	r2,r2,r7
1000af24:	003f7c06 	br	1000ad18 <__alt_data_end+0xf800ad18>
1000af28:	9ca6983a 	sll	r19,r19,r18
1000af2c:	88f8d83a 	srl	fp,r17,r3
1000af30:	80c4d83a 	srl	r2,r16,r3
1000af34:	982cd43a 	srli	r22,r19,16
1000af38:	8ca2983a 	sll	r17,r17,r18
1000af3c:	e009883a 	mov	r4,fp
1000af40:	b00b883a 	mov	r5,r22
1000af44:	146ab03a 	or	r21,r2,r17
1000af48:	000b1b00 	call	1000b1b0 <__umodsi3>
1000af4c:	b00b883a 	mov	r5,r22
1000af50:	e009883a 	mov	r4,fp
1000af54:	1029883a 	mov	r20,r2
1000af58:	9dffffcc 	andi	r23,r19,65535
1000af5c:	000b14c0 	call	1000b14c <__udivsi3>
1000af60:	b809883a 	mov	r4,r23
1000af64:	100b883a 	mov	r5,r2
1000af68:	00006840 	call	10000684 <__mulsi3>
1000af6c:	a008943a 	slli	r4,r20,16
1000af70:	a806d43a 	srli	r3,r21,16
1000af74:	84a8983a 	sll	r20,r16,r18
1000af78:	1906b03a 	or	r3,r3,r4
1000af7c:	1880042e 	bgeu	r3,r2,1000af90 <__umoddi3+0x500>
1000af80:	1cc7883a 	add	r3,r3,r19
1000af84:	1cc00236 	bltu	r3,r19,1000af90 <__umoddi3+0x500>
1000af88:	1880012e 	bgeu	r3,r2,1000af90 <__umoddi3+0x500>
1000af8c:	1cc7883a 	add	r3,r3,r19
1000af90:	18a3c83a 	sub	r17,r3,r2
1000af94:	b00b883a 	mov	r5,r22
1000af98:	8809883a 	mov	r4,r17
1000af9c:	000b1b00 	call	1000b1b0 <__umodsi3>
1000afa0:	b00b883a 	mov	r5,r22
1000afa4:	8809883a 	mov	r4,r17
1000afa8:	1021883a 	mov	r16,r2
1000afac:	000b14c0 	call	1000b14c <__udivsi3>
1000afb0:	100b883a 	mov	r5,r2
1000afb4:	b809883a 	mov	r4,r23
1000afb8:	8020943a 	slli	r16,r16,16
1000afbc:	00006840 	call	10000684 <__mulsi3>
1000afc0:	a8ffffcc 	andi	r3,r21,65535
1000afc4:	1c06b03a 	or	r3,r3,r16
1000afc8:	1880042e 	bgeu	r3,r2,1000afdc <__umoddi3+0x54c>
1000afcc:	1cc7883a 	add	r3,r3,r19
1000afd0:	1cc00236 	bltu	r3,r19,1000afdc <__umoddi3+0x54c>
1000afd4:	1880012e 	bgeu	r3,r2,1000afdc <__umoddi3+0x54c>
1000afd8:	1cc7883a 	add	r3,r3,r19
1000afdc:	18a3c83a 	sub	r17,r3,r2
1000afe0:	003f2906 	br	1000ac88 <__alt_data_end+0xf800ac88>
1000afe4:	e48fc83a 	sub	r7,fp,r18
1000afe8:	1d49c83a 	sub	r4,r3,r21
1000afec:	e1f9803a 	cmpltu	fp,fp,r7
1000aff0:	2739c83a 	sub	fp,r4,fp
1000aff4:	8f09c83a 	sub	r4,r17,fp
1000aff8:	003fc306 	br	1000af08 <__alt_data_end+0xf800af08>
1000affc:	01000604 	movi	r4,24
1000b000:	003ef906 	br	1000abe8 <__alt_data_end+0xf800abe8>
1000b004:	00800604 	movi	r2,24
1000b008:	003f1306 	br	1000ac58 <__alt_data_end+0xf800ac58>
1000b00c:	01000604 	movi	r4,24
1000b010:	003eb606 	br	1000aaec <__alt_data_end+0xf800aaec>
1000b014:	40bf902e 	bgeu	r8,r2,1000ae58 <__alt_data_end+0xf800ae58>
1000b018:	b5bfff84 	addi	r22,r22,-2
1000b01c:	4551883a 	add	r8,r8,r21
1000b020:	003f8e06 	br	1000ae5c <__alt_data_end+0xf800ae5c>
1000b024:	18bf762e 	bgeu	r3,r2,1000ae00 <__alt_data_end+0xf800ae00>
1000b028:	8c7fff84 	addi	r17,r17,-2
1000b02c:	1d47883a 	add	r3,r3,r21
1000b030:	003f7406 	br	1000ae04 <__alt_data_end+0xf800ae04>
1000b034:	1cc7883a 	add	r3,r3,r19
1000b038:	003ecd06 	br	1000ab70 <__alt_data_end+0xf800ab70>
1000b03c:	8005883a 	mov	r2,r16
1000b040:	003ef806 	br	1000ac24 <__alt_data_end+0xf800ac24>
1000b044:	873fe736 	bltu	r16,fp,1000afe4 <__alt_data_end+0xf800afe4>
1000b048:	e00f883a 	mov	r7,fp
1000b04c:	0009883a 	mov	r4,zero
1000b050:	003fad06 	br	1000af08 <__alt_data_end+0xf800af08>

1000b054 <__divsi3>:
1000b054:	20001b16 	blt	r4,zero,1000b0c4 <__divsi3+0x70>
1000b058:	000f883a 	mov	r7,zero
1000b05c:	28001616 	blt	r5,zero,1000b0b8 <__divsi3+0x64>
1000b060:	200d883a 	mov	r6,r4
1000b064:	29001a2e 	bgeu	r5,r4,1000b0d0 <__divsi3+0x7c>
1000b068:	00800804 	movi	r2,32
1000b06c:	00c00044 	movi	r3,1
1000b070:	00000106 	br	1000b078 <__divsi3+0x24>
1000b074:	10000d26 	beq	r2,zero,1000b0ac <__divsi3+0x58>
1000b078:	294b883a 	add	r5,r5,r5
1000b07c:	10bfffc4 	addi	r2,r2,-1
1000b080:	18c7883a 	add	r3,r3,r3
1000b084:	293ffb36 	bltu	r5,r4,1000b074 <__alt_data_end+0xf800b074>
1000b088:	0005883a 	mov	r2,zero
1000b08c:	18000726 	beq	r3,zero,1000b0ac <__divsi3+0x58>
1000b090:	0005883a 	mov	r2,zero
1000b094:	31400236 	bltu	r6,r5,1000b0a0 <__divsi3+0x4c>
1000b098:	314dc83a 	sub	r6,r6,r5
1000b09c:	10c4b03a 	or	r2,r2,r3
1000b0a0:	1806d07a 	srli	r3,r3,1
1000b0a4:	280ad07a 	srli	r5,r5,1
1000b0a8:	183ffa1e 	bne	r3,zero,1000b094 <__alt_data_end+0xf800b094>
1000b0ac:	38000126 	beq	r7,zero,1000b0b4 <__divsi3+0x60>
1000b0b0:	0085c83a 	sub	r2,zero,r2
1000b0b4:	f800283a 	ret
1000b0b8:	014bc83a 	sub	r5,zero,r5
1000b0bc:	39c0005c 	xori	r7,r7,1
1000b0c0:	003fe706 	br	1000b060 <__alt_data_end+0xf800b060>
1000b0c4:	0109c83a 	sub	r4,zero,r4
1000b0c8:	01c00044 	movi	r7,1
1000b0cc:	003fe306 	br	1000b05c <__alt_data_end+0xf800b05c>
1000b0d0:	00c00044 	movi	r3,1
1000b0d4:	003fee06 	br	1000b090 <__alt_data_end+0xf800b090>

1000b0d8 <__modsi3>:
1000b0d8:	20001716 	blt	r4,zero,1000b138 <__modsi3+0x60>
1000b0dc:	000f883a 	mov	r7,zero
1000b0e0:	2005883a 	mov	r2,r4
1000b0e4:	28001216 	blt	r5,zero,1000b130 <__modsi3+0x58>
1000b0e8:	2900162e 	bgeu	r5,r4,1000b144 <__modsi3+0x6c>
1000b0ec:	01800804 	movi	r6,32
1000b0f0:	00c00044 	movi	r3,1
1000b0f4:	00000106 	br	1000b0fc <__modsi3+0x24>
1000b0f8:	30000a26 	beq	r6,zero,1000b124 <__modsi3+0x4c>
1000b0fc:	294b883a 	add	r5,r5,r5
1000b100:	31bfffc4 	addi	r6,r6,-1
1000b104:	18c7883a 	add	r3,r3,r3
1000b108:	293ffb36 	bltu	r5,r4,1000b0f8 <__alt_data_end+0xf800b0f8>
1000b10c:	18000526 	beq	r3,zero,1000b124 <__modsi3+0x4c>
1000b110:	1806d07a 	srli	r3,r3,1
1000b114:	11400136 	bltu	r2,r5,1000b11c <__modsi3+0x44>
1000b118:	1145c83a 	sub	r2,r2,r5
1000b11c:	280ad07a 	srli	r5,r5,1
1000b120:	183ffb1e 	bne	r3,zero,1000b110 <__alt_data_end+0xf800b110>
1000b124:	38000126 	beq	r7,zero,1000b12c <__modsi3+0x54>
1000b128:	0085c83a 	sub	r2,zero,r2
1000b12c:	f800283a 	ret
1000b130:	014bc83a 	sub	r5,zero,r5
1000b134:	003fec06 	br	1000b0e8 <__alt_data_end+0xf800b0e8>
1000b138:	0109c83a 	sub	r4,zero,r4
1000b13c:	01c00044 	movi	r7,1
1000b140:	003fe706 	br	1000b0e0 <__alt_data_end+0xf800b0e0>
1000b144:	00c00044 	movi	r3,1
1000b148:	003ff106 	br	1000b110 <__alt_data_end+0xf800b110>

1000b14c <__udivsi3>:
1000b14c:	200d883a 	mov	r6,r4
1000b150:	2900152e 	bgeu	r5,r4,1000b1a8 <__udivsi3+0x5c>
1000b154:	28001416 	blt	r5,zero,1000b1a8 <__udivsi3+0x5c>
1000b158:	00800804 	movi	r2,32
1000b15c:	00c00044 	movi	r3,1
1000b160:	00000206 	br	1000b16c <__udivsi3+0x20>
1000b164:	10000e26 	beq	r2,zero,1000b1a0 <__udivsi3+0x54>
1000b168:	28000516 	blt	r5,zero,1000b180 <__udivsi3+0x34>
1000b16c:	294b883a 	add	r5,r5,r5
1000b170:	10bfffc4 	addi	r2,r2,-1
1000b174:	18c7883a 	add	r3,r3,r3
1000b178:	293ffa36 	bltu	r5,r4,1000b164 <__alt_data_end+0xf800b164>
1000b17c:	18000826 	beq	r3,zero,1000b1a0 <__udivsi3+0x54>
1000b180:	0005883a 	mov	r2,zero
1000b184:	31400236 	bltu	r6,r5,1000b190 <__udivsi3+0x44>
1000b188:	314dc83a 	sub	r6,r6,r5
1000b18c:	10c4b03a 	or	r2,r2,r3
1000b190:	1806d07a 	srli	r3,r3,1
1000b194:	280ad07a 	srli	r5,r5,1
1000b198:	183ffa1e 	bne	r3,zero,1000b184 <__alt_data_end+0xf800b184>
1000b19c:	f800283a 	ret
1000b1a0:	0005883a 	mov	r2,zero
1000b1a4:	f800283a 	ret
1000b1a8:	00c00044 	movi	r3,1
1000b1ac:	003ff406 	br	1000b180 <__alt_data_end+0xf800b180>

1000b1b0 <__umodsi3>:
1000b1b0:	2005883a 	mov	r2,r4
1000b1b4:	2900122e 	bgeu	r5,r4,1000b200 <__umodsi3+0x50>
1000b1b8:	28001116 	blt	r5,zero,1000b200 <__umodsi3+0x50>
1000b1bc:	01800804 	movi	r6,32
1000b1c0:	00c00044 	movi	r3,1
1000b1c4:	00000206 	br	1000b1d0 <__umodsi3+0x20>
1000b1c8:	30000c26 	beq	r6,zero,1000b1fc <__umodsi3+0x4c>
1000b1cc:	28000516 	blt	r5,zero,1000b1e4 <__umodsi3+0x34>
1000b1d0:	294b883a 	add	r5,r5,r5
1000b1d4:	31bfffc4 	addi	r6,r6,-1
1000b1d8:	18c7883a 	add	r3,r3,r3
1000b1dc:	293ffa36 	bltu	r5,r4,1000b1c8 <__alt_data_end+0xf800b1c8>
1000b1e0:	18000626 	beq	r3,zero,1000b1fc <__umodsi3+0x4c>
1000b1e4:	1806d07a 	srli	r3,r3,1
1000b1e8:	11400136 	bltu	r2,r5,1000b1f0 <__umodsi3+0x40>
1000b1ec:	1145c83a 	sub	r2,r2,r5
1000b1f0:	280ad07a 	srli	r5,r5,1
1000b1f4:	183ffb1e 	bne	r3,zero,1000b1e4 <__alt_data_end+0xf800b1e4>
1000b1f8:	f800283a 	ret
1000b1fc:	f800283a 	ret
1000b200:	00c00044 	movi	r3,1
1000b204:	003ff706 	br	1000b1e4 <__alt_data_end+0xf800b1e4>

1000b208 <__adddf3>:
1000b208:	02c00434 	movhi	r11,16
1000b20c:	5affffc4 	addi	r11,r11,-1
1000b210:	2806d7fa 	srli	r3,r5,31
1000b214:	2ad4703a 	and	r10,r5,r11
1000b218:	3ad2703a 	and	r9,r7,r11
1000b21c:	3804d53a 	srli	r2,r7,20
1000b220:	3018d77a 	srli	r12,r6,29
1000b224:	280ad53a 	srli	r5,r5,20
1000b228:	501490fa 	slli	r10,r10,3
1000b22c:	2010d77a 	srli	r8,r4,29
1000b230:	481290fa 	slli	r9,r9,3
1000b234:	380ed7fa 	srli	r7,r7,31
1000b238:	defffb04 	addi	sp,sp,-20
1000b23c:	dc800215 	stw	r18,8(sp)
1000b240:	dc400115 	stw	r17,4(sp)
1000b244:	dc000015 	stw	r16,0(sp)
1000b248:	dfc00415 	stw	ra,16(sp)
1000b24c:	dcc00315 	stw	r19,12(sp)
1000b250:	1c803fcc 	andi	r18,r3,255
1000b254:	2c01ffcc 	andi	r16,r5,2047
1000b258:	5210b03a 	or	r8,r10,r8
1000b25c:	202290fa 	slli	r17,r4,3
1000b260:	1081ffcc 	andi	r2,r2,2047
1000b264:	4b12b03a 	or	r9,r9,r12
1000b268:	300c90fa 	slli	r6,r6,3
1000b26c:	91c07526 	beq	r18,r7,1000b444 <__adddf3+0x23c>
1000b270:	8087c83a 	sub	r3,r16,r2
1000b274:	00c0ab0e 	bge	zero,r3,1000b524 <__adddf3+0x31c>
1000b278:	10002a1e 	bne	r2,zero,1000b324 <__adddf3+0x11c>
1000b27c:	4984b03a 	or	r2,r9,r6
1000b280:	1000961e 	bne	r2,zero,1000b4dc <__adddf3+0x2d4>
1000b284:	888001cc 	andi	r2,r17,7
1000b288:	10000726 	beq	r2,zero,1000b2a8 <__adddf3+0xa0>
1000b28c:	888003cc 	andi	r2,r17,15
1000b290:	00c00104 	movi	r3,4
1000b294:	10c00426 	beq	r2,r3,1000b2a8 <__adddf3+0xa0>
1000b298:	88c7883a 	add	r3,r17,r3
1000b29c:	1c63803a 	cmpltu	r17,r3,r17
1000b2a0:	4451883a 	add	r8,r8,r17
1000b2a4:	1823883a 	mov	r17,r3
1000b2a8:	4080202c 	andhi	r2,r8,128
1000b2ac:	10005926 	beq	r2,zero,1000b414 <__adddf3+0x20c>
1000b2b0:	84000044 	addi	r16,r16,1
1000b2b4:	0081ffc4 	movi	r2,2047
1000b2b8:	8080ba26 	beq	r16,r2,1000b5a4 <__adddf3+0x39c>
1000b2bc:	00bfe034 	movhi	r2,65408
1000b2c0:	10bfffc4 	addi	r2,r2,-1
1000b2c4:	4090703a 	and	r8,r8,r2
1000b2c8:	4004977a 	slli	r2,r8,29
1000b2cc:	4010927a 	slli	r8,r8,9
1000b2d0:	8822d0fa 	srli	r17,r17,3
1000b2d4:	8401ffcc 	andi	r16,r16,2047
1000b2d8:	4010d33a 	srli	r8,r8,12
1000b2dc:	9007883a 	mov	r3,r18
1000b2e0:	1444b03a 	or	r2,r2,r17
1000b2e4:	8401ffcc 	andi	r16,r16,2047
1000b2e8:	8020953a 	slli	r16,r16,20
1000b2ec:	18c03fcc 	andi	r3,r3,255
1000b2f0:	01000434 	movhi	r4,16
1000b2f4:	213fffc4 	addi	r4,r4,-1
1000b2f8:	180697fa 	slli	r3,r3,31
1000b2fc:	4110703a 	and	r8,r8,r4
1000b300:	4410b03a 	or	r8,r8,r16
1000b304:	40c6b03a 	or	r3,r8,r3
1000b308:	dfc00417 	ldw	ra,16(sp)
1000b30c:	dcc00317 	ldw	r19,12(sp)
1000b310:	dc800217 	ldw	r18,8(sp)
1000b314:	dc400117 	ldw	r17,4(sp)
1000b318:	dc000017 	ldw	r16,0(sp)
1000b31c:	dec00504 	addi	sp,sp,20
1000b320:	f800283a 	ret
1000b324:	0081ffc4 	movi	r2,2047
1000b328:	80bfd626 	beq	r16,r2,1000b284 <__alt_data_end+0xf800b284>
1000b32c:	4a402034 	orhi	r9,r9,128
1000b330:	00800e04 	movi	r2,56
1000b334:	10c09f16 	blt	r2,r3,1000b5b4 <__adddf3+0x3ac>
1000b338:	008007c4 	movi	r2,31
1000b33c:	10c0c216 	blt	r2,r3,1000b648 <__adddf3+0x440>
1000b340:	00800804 	movi	r2,32
1000b344:	10c5c83a 	sub	r2,r2,r3
1000b348:	488a983a 	sll	r5,r9,r2
1000b34c:	30c8d83a 	srl	r4,r6,r3
1000b350:	3084983a 	sll	r2,r6,r2
1000b354:	48c6d83a 	srl	r3,r9,r3
1000b358:	290cb03a 	or	r6,r5,r4
1000b35c:	1004c03a 	cmpne	r2,r2,zero
1000b360:	308cb03a 	or	r6,r6,r2
1000b364:	898dc83a 	sub	r6,r17,r6
1000b368:	89a3803a 	cmpltu	r17,r17,r6
1000b36c:	40d1c83a 	sub	r8,r8,r3
1000b370:	4451c83a 	sub	r8,r8,r17
1000b374:	3023883a 	mov	r17,r6
1000b378:	4080202c 	andhi	r2,r8,128
1000b37c:	10002326 	beq	r2,zero,1000b40c <__adddf3+0x204>
1000b380:	04c02034 	movhi	r19,128
1000b384:	9cffffc4 	addi	r19,r19,-1
1000b388:	44e6703a 	and	r19,r8,r19
1000b38c:	98007626 	beq	r19,zero,1000b568 <__adddf3+0x360>
1000b390:	9809883a 	mov	r4,r19
1000b394:	000da480 	call	1000da48 <__clzsi2>
1000b398:	10fffe04 	addi	r3,r2,-8
1000b39c:	010007c4 	movi	r4,31
1000b3a0:	20c07716 	blt	r4,r3,1000b580 <__adddf3+0x378>
1000b3a4:	00800804 	movi	r2,32
1000b3a8:	10c5c83a 	sub	r2,r2,r3
1000b3ac:	8884d83a 	srl	r2,r17,r2
1000b3b0:	98d0983a 	sll	r8,r19,r3
1000b3b4:	88e2983a 	sll	r17,r17,r3
1000b3b8:	1204b03a 	or	r2,r2,r8
1000b3bc:	1c007416 	blt	r3,r16,1000b590 <__adddf3+0x388>
1000b3c0:	1c21c83a 	sub	r16,r3,r16
1000b3c4:	82000044 	addi	r8,r16,1
1000b3c8:	00c007c4 	movi	r3,31
1000b3cc:	1a009116 	blt	r3,r8,1000b614 <__adddf3+0x40c>
1000b3d0:	00c00804 	movi	r3,32
1000b3d4:	1a07c83a 	sub	r3,r3,r8
1000b3d8:	8a08d83a 	srl	r4,r17,r8
1000b3dc:	88e2983a 	sll	r17,r17,r3
1000b3e0:	10c6983a 	sll	r3,r2,r3
1000b3e4:	1210d83a 	srl	r8,r2,r8
1000b3e8:	8804c03a 	cmpne	r2,r17,zero
1000b3ec:	1906b03a 	or	r3,r3,r4
1000b3f0:	18a2b03a 	or	r17,r3,r2
1000b3f4:	0021883a 	mov	r16,zero
1000b3f8:	003fa206 	br	1000b284 <__alt_data_end+0xf800b284>
1000b3fc:	1890b03a 	or	r8,r3,r2
1000b400:	40017d26 	beq	r8,zero,1000b9f8 <__adddf3+0x7f0>
1000b404:	1011883a 	mov	r8,r2
1000b408:	1823883a 	mov	r17,r3
1000b40c:	888001cc 	andi	r2,r17,7
1000b410:	103f9e1e 	bne	r2,zero,1000b28c <__alt_data_end+0xf800b28c>
1000b414:	4004977a 	slli	r2,r8,29
1000b418:	8822d0fa 	srli	r17,r17,3
1000b41c:	4010d0fa 	srli	r8,r8,3
1000b420:	9007883a 	mov	r3,r18
1000b424:	1444b03a 	or	r2,r2,r17
1000b428:	0101ffc4 	movi	r4,2047
1000b42c:	81002426 	beq	r16,r4,1000b4c0 <__adddf3+0x2b8>
1000b430:	8120703a 	and	r16,r16,r4
1000b434:	01000434 	movhi	r4,16
1000b438:	213fffc4 	addi	r4,r4,-1
1000b43c:	4110703a 	and	r8,r8,r4
1000b440:	003fa806 	br	1000b2e4 <__alt_data_end+0xf800b2e4>
1000b444:	8089c83a 	sub	r4,r16,r2
1000b448:	01005e0e 	bge	zero,r4,1000b5c4 <__adddf3+0x3bc>
1000b44c:	10002b26 	beq	r2,zero,1000b4fc <__adddf3+0x2f4>
1000b450:	0081ffc4 	movi	r2,2047
1000b454:	80bf8b26 	beq	r16,r2,1000b284 <__alt_data_end+0xf800b284>
1000b458:	4a402034 	orhi	r9,r9,128
1000b45c:	00800e04 	movi	r2,56
1000b460:	1100a40e 	bge	r2,r4,1000b6f4 <__adddf3+0x4ec>
1000b464:	498cb03a 	or	r6,r9,r6
1000b468:	300ac03a 	cmpne	r5,r6,zero
1000b46c:	0013883a 	mov	r9,zero
1000b470:	2c4b883a 	add	r5,r5,r17
1000b474:	2c63803a 	cmpltu	r17,r5,r17
1000b478:	4a11883a 	add	r8,r9,r8
1000b47c:	8a11883a 	add	r8,r17,r8
1000b480:	2823883a 	mov	r17,r5
1000b484:	4080202c 	andhi	r2,r8,128
1000b488:	103fe026 	beq	r2,zero,1000b40c <__alt_data_end+0xf800b40c>
1000b48c:	84000044 	addi	r16,r16,1
1000b490:	0081ffc4 	movi	r2,2047
1000b494:	8080d226 	beq	r16,r2,1000b7e0 <__adddf3+0x5d8>
1000b498:	00bfe034 	movhi	r2,65408
1000b49c:	10bfffc4 	addi	r2,r2,-1
1000b4a0:	4090703a 	and	r8,r8,r2
1000b4a4:	880ad07a 	srli	r5,r17,1
1000b4a8:	400897fa 	slli	r4,r8,31
1000b4ac:	88c0004c 	andi	r3,r17,1
1000b4b0:	28e2b03a 	or	r17,r5,r3
1000b4b4:	4010d07a 	srli	r8,r8,1
1000b4b8:	2462b03a 	or	r17,r4,r17
1000b4bc:	003f7106 	br	1000b284 <__alt_data_end+0xf800b284>
1000b4c0:	4088b03a 	or	r4,r8,r2
1000b4c4:	20014526 	beq	r4,zero,1000b9dc <__adddf3+0x7d4>
1000b4c8:	01000434 	movhi	r4,16
1000b4cc:	42000234 	orhi	r8,r8,8
1000b4d0:	213fffc4 	addi	r4,r4,-1
1000b4d4:	4110703a 	and	r8,r8,r4
1000b4d8:	003f8206 	br	1000b2e4 <__alt_data_end+0xf800b2e4>
1000b4dc:	18ffffc4 	addi	r3,r3,-1
1000b4e0:	1800491e 	bne	r3,zero,1000b608 <__adddf3+0x400>
1000b4e4:	898bc83a 	sub	r5,r17,r6
1000b4e8:	8963803a 	cmpltu	r17,r17,r5
1000b4ec:	4251c83a 	sub	r8,r8,r9
1000b4f0:	4451c83a 	sub	r8,r8,r17
1000b4f4:	2823883a 	mov	r17,r5
1000b4f8:	003f9f06 	br	1000b378 <__alt_data_end+0xf800b378>
1000b4fc:	4984b03a 	or	r2,r9,r6
1000b500:	103f6026 	beq	r2,zero,1000b284 <__alt_data_end+0xf800b284>
1000b504:	213fffc4 	addi	r4,r4,-1
1000b508:	2000931e 	bne	r4,zero,1000b758 <__adddf3+0x550>
1000b50c:	898d883a 	add	r6,r17,r6
1000b510:	3463803a 	cmpltu	r17,r6,r17
1000b514:	4251883a 	add	r8,r8,r9
1000b518:	8a11883a 	add	r8,r17,r8
1000b51c:	3023883a 	mov	r17,r6
1000b520:	003fd806 	br	1000b484 <__alt_data_end+0xf800b484>
1000b524:	1800541e 	bne	r3,zero,1000b678 <__adddf3+0x470>
1000b528:	80800044 	addi	r2,r16,1
1000b52c:	1081ffcc 	andi	r2,r2,2047
1000b530:	00c00044 	movi	r3,1
1000b534:	1880a00e 	bge	r3,r2,1000b7b8 <__adddf3+0x5b0>
1000b538:	8989c83a 	sub	r4,r17,r6
1000b53c:	8905803a 	cmpltu	r2,r17,r4
1000b540:	4267c83a 	sub	r19,r8,r9
1000b544:	98a7c83a 	sub	r19,r19,r2
1000b548:	9880202c 	andhi	r2,r19,128
1000b54c:	10006326 	beq	r2,zero,1000b6dc <__adddf3+0x4d4>
1000b550:	3463c83a 	sub	r17,r6,r17
1000b554:	4a07c83a 	sub	r3,r9,r8
1000b558:	344d803a 	cmpltu	r6,r6,r17
1000b55c:	19a7c83a 	sub	r19,r3,r6
1000b560:	3825883a 	mov	r18,r7
1000b564:	983f8a1e 	bne	r19,zero,1000b390 <__alt_data_end+0xf800b390>
1000b568:	8809883a 	mov	r4,r17
1000b56c:	000da480 	call	1000da48 <__clzsi2>
1000b570:	10800804 	addi	r2,r2,32
1000b574:	10fffe04 	addi	r3,r2,-8
1000b578:	010007c4 	movi	r4,31
1000b57c:	20ff890e 	bge	r4,r3,1000b3a4 <__alt_data_end+0xf800b3a4>
1000b580:	10bff604 	addi	r2,r2,-40
1000b584:	8884983a 	sll	r2,r17,r2
1000b588:	0023883a 	mov	r17,zero
1000b58c:	1c3f8c0e 	bge	r3,r16,1000b3c0 <__alt_data_end+0xf800b3c0>
1000b590:	023fe034 	movhi	r8,65408
1000b594:	423fffc4 	addi	r8,r8,-1
1000b598:	80e1c83a 	sub	r16,r16,r3
1000b59c:	1210703a 	and	r8,r2,r8
1000b5a0:	003f3806 	br	1000b284 <__alt_data_end+0xf800b284>
1000b5a4:	9007883a 	mov	r3,r18
1000b5a8:	0011883a 	mov	r8,zero
1000b5ac:	0005883a 	mov	r2,zero
1000b5b0:	003f4c06 	br	1000b2e4 <__alt_data_end+0xf800b2e4>
1000b5b4:	498cb03a 	or	r6,r9,r6
1000b5b8:	300cc03a 	cmpne	r6,r6,zero
1000b5bc:	0007883a 	mov	r3,zero
1000b5c0:	003f6806 	br	1000b364 <__alt_data_end+0xf800b364>
1000b5c4:	20009c1e 	bne	r4,zero,1000b838 <__adddf3+0x630>
1000b5c8:	80800044 	addi	r2,r16,1
1000b5cc:	1141ffcc 	andi	r5,r2,2047
1000b5d0:	01000044 	movi	r4,1
1000b5d4:	2140670e 	bge	r4,r5,1000b774 <__adddf3+0x56c>
1000b5d8:	0101ffc4 	movi	r4,2047
1000b5dc:	11007f26 	beq	r2,r4,1000b7dc <__adddf3+0x5d4>
1000b5e0:	898d883a 	add	r6,r17,r6
1000b5e4:	4247883a 	add	r3,r8,r9
1000b5e8:	3451803a 	cmpltu	r8,r6,r17
1000b5ec:	40d1883a 	add	r8,r8,r3
1000b5f0:	402297fa 	slli	r17,r8,31
1000b5f4:	300cd07a 	srli	r6,r6,1
1000b5f8:	4010d07a 	srli	r8,r8,1
1000b5fc:	1021883a 	mov	r16,r2
1000b600:	89a2b03a 	or	r17,r17,r6
1000b604:	003f1f06 	br	1000b284 <__alt_data_end+0xf800b284>
1000b608:	0081ffc4 	movi	r2,2047
1000b60c:	80bf481e 	bne	r16,r2,1000b330 <__alt_data_end+0xf800b330>
1000b610:	003f1c06 	br	1000b284 <__alt_data_end+0xf800b284>
1000b614:	843ff844 	addi	r16,r16,-31
1000b618:	01000804 	movi	r4,32
1000b61c:	1406d83a 	srl	r3,r2,r16
1000b620:	41005026 	beq	r8,r4,1000b764 <__adddf3+0x55c>
1000b624:	01001004 	movi	r4,64
1000b628:	2211c83a 	sub	r8,r4,r8
1000b62c:	1204983a 	sll	r2,r2,r8
1000b630:	88a2b03a 	or	r17,r17,r2
1000b634:	8822c03a 	cmpne	r17,r17,zero
1000b638:	1c62b03a 	or	r17,r3,r17
1000b63c:	0011883a 	mov	r8,zero
1000b640:	0021883a 	mov	r16,zero
1000b644:	003f7106 	br	1000b40c <__alt_data_end+0xf800b40c>
1000b648:	193ff804 	addi	r4,r3,-32
1000b64c:	00800804 	movi	r2,32
1000b650:	4908d83a 	srl	r4,r9,r4
1000b654:	18804526 	beq	r3,r2,1000b76c <__adddf3+0x564>
1000b658:	00801004 	movi	r2,64
1000b65c:	10c5c83a 	sub	r2,r2,r3
1000b660:	4886983a 	sll	r3,r9,r2
1000b664:	198cb03a 	or	r6,r3,r6
1000b668:	300cc03a 	cmpne	r6,r6,zero
1000b66c:	218cb03a 	or	r6,r4,r6
1000b670:	0007883a 	mov	r3,zero
1000b674:	003f3b06 	br	1000b364 <__alt_data_end+0xf800b364>
1000b678:	80002a26 	beq	r16,zero,1000b724 <__adddf3+0x51c>
1000b67c:	0101ffc4 	movi	r4,2047
1000b680:	11006826 	beq	r2,r4,1000b824 <__adddf3+0x61c>
1000b684:	00c7c83a 	sub	r3,zero,r3
1000b688:	42002034 	orhi	r8,r8,128
1000b68c:	01000e04 	movi	r4,56
1000b690:	20c07c16 	blt	r4,r3,1000b884 <__adddf3+0x67c>
1000b694:	010007c4 	movi	r4,31
1000b698:	20c0da16 	blt	r4,r3,1000ba04 <__adddf3+0x7fc>
1000b69c:	01000804 	movi	r4,32
1000b6a0:	20c9c83a 	sub	r4,r4,r3
1000b6a4:	4114983a 	sll	r10,r8,r4
1000b6a8:	88cad83a 	srl	r5,r17,r3
1000b6ac:	8908983a 	sll	r4,r17,r4
1000b6b0:	40c6d83a 	srl	r3,r8,r3
1000b6b4:	5162b03a 	or	r17,r10,r5
1000b6b8:	2008c03a 	cmpne	r4,r4,zero
1000b6bc:	8922b03a 	or	r17,r17,r4
1000b6c0:	3463c83a 	sub	r17,r6,r17
1000b6c4:	48c7c83a 	sub	r3,r9,r3
1000b6c8:	344d803a 	cmpltu	r6,r6,r17
1000b6cc:	1991c83a 	sub	r8,r3,r6
1000b6d0:	1021883a 	mov	r16,r2
1000b6d4:	3825883a 	mov	r18,r7
1000b6d8:	003f2706 	br	1000b378 <__alt_data_end+0xf800b378>
1000b6dc:	24d0b03a 	or	r8,r4,r19
1000b6e0:	40001b1e 	bne	r8,zero,1000b750 <__adddf3+0x548>
1000b6e4:	0005883a 	mov	r2,zero
1000b6e8:	0007883a 	mov	r3,zero
1000b6ec:	0021883a 	mov	r16,zero
1000b6f0:	003f4d06 	br	1000b428 <__alt_data_end+0xf800b428>
1000b6f4:	008007c4 	movi	r2,31
1000b6f8:	11003c16 	blt	r2,r4,1000b7ec <__adddf3+0x5e4>
1000b6fc:	00800804 	movi	r2,32
1000b700:	1105c83a 	sub	r2,r2,r4
1000b704:	488e983a 	sll	r7,r9,r2
1000b708:	310ad83a 	srl	r5,r6,r4
1000b70c:	3084983a 	sll	r2,r6,r2
1000b710:	4912d83a 	srl	r9,r9,r4
1000b714:	394ab03a 	or	r5,r7,r5
1000b718:	1004c03a 	cmpne	r2,r2,zero
1000b71c:	288ab03a 	or	r5,r5,r2
1000b720:	003f5306 	br	1000b470 <__alt_data_end+0xf800b470>
1000b724:	4448b03a 	or	r4,r8,r17
1000b728:	20003e26 	beq	r4,zero,1000b824 <__adddf3+0x61c>
1000b72c:	00c6303a 	nor	r3,zero,r3
1000b730:	18003a1e 	bne	r3,zero,1000b81c <__adddf3+0x614>
1000b734:	3463c83a 	sub	r17,r6,r17
1000b738:	4a07c83a 	sub	r3,r9,r8
1000b73c:	344d803a 	cmpltu	r6,r6,r17
1000b740:	1991c83a 	sub	r8,r3,r6
1000b744:	1021883a 	mov	r16,r2
1000b748:	3825883a 	mov	r18,r7
1000b74c:	003f0a06 	br	1000b378 <__alt_data_end+0xf800b378>
1000b750:	2023883a 	mov	r17,r4
1000b754:	003f0d06 	br	1000b38c <__alt_data_end+0xf800b38c>
1000b758:	0081ffc4 	movi	r2,2047
1000b75c:	80bf3f1e 	bne	r16,r2,1000b45c <__alt_data_end+0xf800b45c>
1000b760:	003ec806 	br	1000b284 <__alt_data_end+0xf800b284>
1000b764:	0005883a 	mov	r2,zero
1000b768:	003fb106 	br	1000b630 <__alt_data_end+0xf800b630>
1000b76c:	0007883a 	mov	r3,zero
1000b770:	003fbc06 	br	1000b664 <__alt_data_end+0xf800b664>
1000b774:	4444b03a 	or	r2,r8,r17
1000b778:	8000871e 	bne	r16,zero,1000b998 <__adddf3+0x790>
1000b77c:	1000ba26 	beq	r2,zero,1000ba68 <__adddf3+0x860>
1000b780:	4984b03a 	or	r2,r9,r6
1000b784:	103ebf26 	beq	r2,zero,1000b284 <__alt_data_end+0xf800b284>
1000b788:	8985883a 	add	r2,r17,r6
1000b78c:	4247883a 	add	r3,r8,r9
1000b790:	1451803a 	cmpltu	r8,r2,r17
1000b794:	40d1883a 	add	r8,r8,r3
1000b798:	40c0202c 	andhi	r3,r8,128
1000b79c:	1023883a 	mov	r17,r2
1000b7a0:	183f1a26 	beq	r3,zero,1000b40c <__alt_data_end+0xf800b40c>
1000b7a4:	00bfe034 	movhi	r2,65408
1000b7a8:	10bfffc4 	addi	r2,r2,-1
1000b7ac:	2021883a 	mov	r16,r4
1000b7b0:	4090703a 	and	r8,r8,r2
1000b7b4:	003eb306 	br	1000b284 <__alt_data_end+0xf800b284>
1000b7b8:	4444b03a 	or	r2,r8,r17
1000b7bc:	8000291e 	bne	r16,zero,1000b864 <__adddf3+0x65c>
1000b7c0:	10004b1e 	bne	r2,zero,1000b8f0 <__adddf3+0x6e8>
1000b7c4:	4990b03a 	or	r8,r9,r6
1000b7c8:	40008b26 	beq	r8,zero,1000b9f8 <__adddf3+0x7f0>
1000b7cc:	4811883a 	mov	r8,r9
1000b7d0:	3023883a 	mov	r17,r6
1000b7d4:	3825883a 	mov	r18,r7
1000b7d8:	003eaa06 	br	1000b284 <__alt_data_end+0xf800b284>
1000b7dc:	1021883a 	mov	r16,r2
1000b7e0:	0011883a 	mov	r8,zero
1000b7e4:	0005883a 	mov	r2,zero
1000b7e8:	003f0f06 	br	1000b428 <__alt_data_end+0xf800b428>
1000b7ec:	217ff804 	addi	r5,r4,-32
1000b7f0:	00800804 	movi	r2,32
1000b7f4:	494ad83a 	srl	r5,r9,r5
1000b7f8:	20807d26 	beq	r4,r2,1000b9f0 <__adddf3+0x7e8>
1000b7fc:	00801004 	movi	r2,64
1000b800:	1109c83a 	sub	r4,r2,r4
1000b804:	4912983a 	sll	r9,r9,r4
1000b808:	498cb03a 	or	r6,r9,r6
1000b80c:	300cc03a 	cmpne	r6,r6,zero
1000b810:	298ab03a 	or	r5,r5,r6
1000b814:	0013883a 	mov	r9,zero
1000b818:	003f1506 	br	1000b470 <__alt_data_end+0xf800b470>
1000b81c:	0101ffc4 	movi	r4,2047
1000b820:	113f9a1e 	bne	r2,r4,1000b68c <__alt_data_end+0xf800b68c>
1000b824:	4811883a 	mov	r8,r9
1000b828:	3023883a 	mov	r17,r6
1000b82c:	1021883a 	mov	r16,r2
1000b830:	3825883a 	mov	r18,r7
1000b834:	003e9306 	br	1000b284 <__alt_data_end+0xf800b284>
1000b838:	8000161e 	bne	r16,zero,1000b894 <__adddf3+0x68c>
1000b83c:	444ab03a 	or	r5,r8,r17
1000b840:	28005126 	beq	r5,zero,1000b988 <__adddf3+0x780>
1000b844:	0108303a 	nor	r4,zero,r4
1000b848:	20004d1e 	bne	r4,zero,1000b980 <__adddf3+0x778>
1000b84c:	89a3883a 	add	r17,r17,r6
1000b850:	4253883a 	add	r9,r8,r9
1000b854:	898d803a 	cmpltu	r6,r17,r6
1000b858:	3251883a 	add	r8,r6,r9
1000b85c:	1021883a 	mov	r16,r2
1000b860:	003f0806 	br	1000b484 <__alt_data_end+0xf800b484>
1000b864:	1000301e 	bne	r2,zero,1000b928 <__adddf3+0x720>
1000b868:	4984b03a 	or	r2,r9,r6
1000b86c:	10007126 	beq	r2,zero,1000ba34 <__adddf3+0x82c>
1000b870:	4811883a 	mov	r8,r9
1000b874:	3023883a 	mov	r17,r6
1000b878:	3825883a 	mov	r18,r7
1000b87c:	0401ffc4 	movi	r16,2047
1000b880:	003e8006 	br	1000b284 <__alt_data_end+0xf800b284>
1000b884:	4462b03a 	or	r17,r8,r17
1000b888:	8822c03a 	cmpne	r17,r17,zero
1000b88c:	0007883a 	mov	r3,zero
1000b890:	003f8b06 	br	1000b6c0 <__alt_data_end+0xf800b6c0>
1000b894:	0141ffc4 	movi	r5,2047
1000b898:	11403b26 	beq	r2,r5,1000b988 <__adddf3+0x780>
1000b89c:	0109c83a 	sub	r4,zero,r4
1000b8a0:	42002034 	orhi	r8,r8,128
1000b8a4:	01400e04 	movi	r5,56
1000b8a8:	29006716 	blt	r5,r4,1000ba48 <__adddf3+0x840>
1000b8ac:	014007c4 	movi	r5,31
1000b8b0:	29007016 	blt	r5,r4,1000ba74 <__adddf3+0x86c>
1000b8b4:	01400804 	movi	r5,32
1000b8b8:	290bc83a 	sub	r5,r5,r4
1000b8bc:	4154983a 	sll	r10,r8,r5
1000b8c0:	890ed83a 	srl	r7,r17,r4
1000b8c4:	894a983a 	sll	r5,r17,r5
1000b8c8:	4108d83a 	srl	r4,r8,r4
1000b8cc:	51e2b03a 	or	r17,r10,r7
1000b8d0:	280ac03a 	cmpne	r5,r5,zero
1000b8d4:	8962b03a 	or	r17,r17,r5
1000b8d8:	89a3883a 	add	r17,r17,r6
1000b8dc:	2253883a 	add	r9,r4,r9
1000b8e0:	898d803a 	cmpltu	r6,r17,r6
1000b8e4:	3251883a 	add	r8,r6,r9
1000b8e8:	1021883a 	mov	r16,r2
1000b8ec:	003ee506 	br	1000b484 <__alt_data_end+0xf800b484>
1000b8f0:	4984b03a 	or	r2,r9,r6
1000b8f4:	103e6326 	beq	r2,zero,1000b284 <__alt_data_end+0xf800b284>
1000b8f8:	8987c83a 	sub	r3,r17,r6
1000b8fc:	88c9803a 	cmpltu	r4,r17,r3
1000b900:	4245c83a 	sub	r2,r8,r9
1000b904:	1105c83a 	sub	r2,r2,r4
1000b908:	1100202c 	andhi	r4,r2,128
1000b90c:	203ebb26 	beq	r4,zero,1000b3fc <__alt_data_end+0xf800b3fc>
1000b910:	3463c83a 	sub	r17,r6,r17
1000b914:	4a07c83a 	sub	r3,r9,r8
1000b918:	344d803a 	cmpltu	r6,r6,r17
1000b91c:	1991c83a 	sub	r8,r3,r6
1000b920:	3825883a 	mov	r18,r7
1000b924:	003e5706 	br	1000b284 <__alt_data_end+0xf800b284>
1000b928:	4984b03a 	or	r2,r9,r6
1000b92c:	10002e26 	beq	r2,zero,1000b9e8 <__adddf3+0x7e0>
1000b930:	4004d0fa 	srli	r2,r8,3
1000b934:	8822d0fa 	srli	r17,r17,3
1000b938:	4010977a 	slli	r8,r8,29
1000b93c:	10c0022c 	andhi	r3,r2,8
1000b940:	4462b03a 	or	r17,r8,r17
1000b944:	18000826 	beq	r3,zero,1000b968 <__adddf3+0x760>
1000b948:	4808d0fa 	srli	r4,r9,3
1000b94c:	20c0022c 	andhi	r3,r4,8
1000b950:	1800051e 	bne	r3,zero,1000b968 <__adddf3+0x760>
1000b954:	300cd0fa 	srli	r6,r6,3
1000b958:	4806977a 	slli	r3,r9,29
1000b95c:	2005883a 	mov	r2,r4
1000b960:	3825883a 	mov	r18,r7
1000b964:	19a2b03a 	or	r17,r3,r6
1000b968:	8810d77a 	srli	r8,r17,29
1000b96c:	100490fa 	slli	r2,r2,3
1000b970:	882290fa 	slli	r17,r17,3
1000b974:	0401ffc4 	movi	r16,2047
1000b978:	4090b03a 	or	r8,r8,r2
1000b97c:	003e4106 	br	1000b284 <__alt_data_end+0xf800b284>
1000b980:	0141ffc4 	movi	r5,2047
1000b984:	117fc71e 	bne	r2,r5,1000b8a4 <__alt_data_end+0xf800b8a4>
1000b988:	4811883a 	mov	r8,r9
1000b98c:	3023883a 	mov	r17,r6
1000b990:	1021883a 	mov	r16,r2
1000b994:	003e3b06 	br	1000b284 <__alt_data_end+0xf800b284>
1000b998:	10002f26 	beq	r2,zero,1000ba58 <__adddf3+0x850>
1000b99c:	4984b03a 	or	r2,r9,r6
1000b9a0:	10001126 	beq	r2,zero,1000b9e8 <__adddf3+0x7e0>
1000b9a4:	4004d0fa 	srli	r2,r8,3
1000b9a8:	8822d0fa 	srli	r17,r17,3
1000b9ac:	4010977a 	slli	r8,r8,29
1000b9b0:	10c0022c 	andhi	r3,r2,8
1000b9b4:	4462b03a 	or	r17,r8,r17
1000b9b8:	183feb26 	beq	r3,zero,1000b968 <__alt_data_end+0xf800b968>
1000b9bc:	4808d0fa 	srli	r4,r9,3
1000b9c0:	20c0022c 	andhi	r3,r4,8
1000b9c4:	183fe81e 	bne	r3,zero,1000b968 <__alt_data_end+0xf800b968>
1000b9c8:	300cd0fa 	srli	r6,r6,3
1000b9cc:	4806977a 	slli	r3,r9,29
1000b9d0:	2005883a 	mov	r2,r4
1000b9d4:	19a2b03a 	or	r17,r3,r6
1000b9d8:	003fe306 	br	1000b968 <__alt_data_end+0xf800b968>
1000b9dc:	0011883a 	mov	r8,zero
1000b9e0:	0005883a 	mov	r2,zero
1000b9e4:	003e3f06 	br	1000b2e4 <__alt_data_end+0xf800b2e4>
1000b9e8:	0401ffc4 	movi	r16,2047
1000b9ec:	003e2506 	br	1000b284 <__alt_data_end+0xf800b284>
1000b9f0:	0013883a 	mov	r9,zero
1000b9f4:	003f8406 	br	1000b808 <__alt_data_end+0xf800b808>
1000b9f8:	0005883a 	mov	r2,zero
1000b9fc:	0007883a 	mov	r3,zero
1000ba00:	003e8906 	br	1000b428 <__alt_data_end+0xf800b428>
1000ba04:	197ff804 	addi	r5,r3,-32
1000ba08:	01000804 	movi	r4,32
1000ba0c:	414ad83a 	srl	r5,r8,r5
1000ba10:	19002426 	beq	r3,r4,1000baa4 <__adddf3+0x89c>
1000ba14:	01001004 	movi	r4,64
1000ba18:	20c7c83a 	sub	r3,r4,r3
1000ba1c:	40c6983a 	sll	r3,r8,r3
1000ba20:	1c46b03a 	or	r3,r3,r17
1000ba24:	1806c03a 	cmpne	r3,r3,zero
1000ba28:	28e2b03a 	or	r17,r5,r3
1000ba2c:	0007883a 	mov	r3,zero
1000ba30:	003f2306 	br	1000b6c0 <__alt_data_end+0xf800b6c0>
1000ba34:	0007883a 	mov	r3,zero
1000ba38:	5811883a 	mov	r8,r11
1000ba3c:	00bfffc4 	movi	r2,-1
1000ba40:	0401ffc4 	movi	r16,2047
1000ba44:	003e7806 	br	1000b428 <__alt_data_end+0xf800b428>
1000ba48:	4462b03a 	or	r17,r8,r17
1000ba4c:	8822c03a 	cmpne	r17,r17,zero
1000ba50:	0009883a 	mov	r4,zero
1000ba54:	003fa006 	br	1000b8d8 <__alt_data_end+0xf800b8d8>
1000ba58:	4811883a 	mov	r8,r9
1000ba5c:	3023883a 	mov	r17,r6
1000ba60:	0401ffc4 	movi	r16,2047
1000ba64:	003e0706 	br	1000b284 <__alt_data_end+0xf800b284>
1000ba68:	4811883a 	mov	r8,r9
1000ba6c:	3023883a 	mov	r17,r6
1000ba70:	003e0406 	br	1000b284 <__alt_data_end+0xf800b284>
1000ba74:	21fff804 	addi	r7,r4,-32
1000ba78:	01400804 	movi	r5,32
1000ba7c:	41ced83a 	srl	r7,r8,r7
1000ba80:	21400a26 	beq	r4,r5,1000baac <__adddf3+0x8a4>
1000ba84:	01401004 	movi	r5,64
1000ba88:	2909c83a 	sub	r4,r5,r4
1000ba8c:	4108983a 	sll	r4,r8,r4
1000ba90:	2448b03a 	or	r4,r4,r17
1000ba94:	2008c03a 	cmpne	r4,r4,zero
1000ba98:	3922b03a 	or	r17,r7,r4
1000ba9c:	0009883a 	mov	r4,zero
1000baa0:	003f8d06 	br	1000b8d8 <__alt_data_end+0xf800b8d8>
1000baa4:	0007883a 	mov	r3,zero
1000baa8:	003fdd06 	br	1000ba20 <__alt_data_end+0xf800ba20>
1000baac:	0009883a 	mov	r4,zero
1000bab0:	003ff706 	br	1000ba90 <__alt_data_end+0xf800ba90>

1000bab4 <__divdf3>:
1000bab4:	defff004 	addi	sp,sp,-64
1000bab8:	dc800815 	stw	r18,32(sp)
1000babc:	2824d53a 	srli	r18,r5,20
1000bac0:	dd800c15 	stw	r22,48(sp)
1000bac4:	282cd7fa 	srli	r22,r5,31
1000bac8:	dc000615 	stw	r16,24(sp)
1000bacc:	04000434 	movhi	r16,16
1000bad0:	843fffc4 	addi	r16,r16,-1
1000bad4:	dfc00f15 	stw	ra,60(sp)
1000bad8:	df000e15 	stw	fp,56(sp)
1000badc:	ddc00d15 	stw	r23,52(sp)
1000bae0:	dd400b15 	stw	r21,44(sp)
1000bae4:	dd000a15 	stw	r20,40(sp)
1000bae8:	dcc00915 	stw	r19,36(sp)
1000baec:	dc400715 	stw	r17,28(sp)
1000baf0:	9481ffcc 	andi	r18,r18,2047
1000baf4:	2c20703a 	and	r16,r5,r16
1000baf8:	b2003fcc 	andi	r8,r22,255
1000bafc:	90006126 	beq	r18,zero,1000bc84 <__divdf3+0x1d0>
1000bb00:	0081ffc4 	movi	r2,2047
1000bb04:	202b883a 	mov	r21,r4
1000bb08:	90803726 	beq	r18,r2,1000bbe8 <__divdf3+0x134>
1000bb0c:	80800434 	orhi	r2,r16,16
1000bb10:	100490fa 	slli	r2,r2,3
1000bb14:	2020d77a 	srli	r16,r4,29
1000bb18:	202a90fa 	slli	r21,r4,3
1000bb1c:	94bf0044 	addi	r18,r18,-1023
1000bb20:	80a0b03a 	or	r16,r16,r2
1000bb24:	0013883a 	mov	r9,zero
1000bb28:	000b883a 	mov	r5,zero
1000bb2c:	3806d53a 	srli	r3,r7,20
1000bb30:	382ed7fa 	srli	r23,r7,31
1000bb34:	04400434 	movhi	r17,16
1000bb38:	8c7fffc4 	addi	r17,r17,-1
1000bb3c:	18c1ffcc 	andi	r3,r3,2047
1000bb40:	3029883a 	mov	r20,r6
1000bb44:	3c62703a 	and	r17,r7,r17
1000bb48:	bf003fcc 	andi	fp,r23,255
1000bb4c:	18006e26 	beq	r3,zero,1000bd08 <__divdf3+0x254>
1000bb50:	0081ffc4 	movi	r2,2047
1000bb54:	18806626 	beq	r3,r2,1000bcf0 <__divdf3+0x23c>
1000bb58:	88800434 	orhi	r2,r17,16
1000bb5c:	100490fa 	slli	r2,r2,3
1000bb60:	3022d77a 	srli	r17,r6,29
1000bb64:	302890fa 	slli	r20,r6,3
1000bb68:	18ff0044 	addi	r3,r3,-1023
1000bb6c:	88a2b03a 	or	r17,r17,r2
1000bb70:	000f883a 	mov	r7,zero
1000bb74:	b5e6f03a 	xor	r19,r22,r23
1000bb78:	3a4cb03a 	or	r6,r7,r9
1000bb7c:	008003c4 	movi	r2,15
1000bb80:	9809883a 	mov	r4,r19
1000bb84:	90c7c83a 	sub	r3,r18,r3
1000bb88:	9cc03fcc 	andi	r19,r19,255
1000bb8c:	11809636 	bltu	r2,r6,1000bde8 <__divdf3+0x334>
1000bb90:	300c90ba 	slli	r6,r6,2
1000bb94:	00840074 	movhi	r2,4097
1000bb98:	10aeea04 	addi	r2,r2,-17496
1000bb9c:	308d883a 	add	r6,r6,r2
1000bba0:	30800017 	ldw	r2,0(r6)
1000bba4:	1000683a 	jmp	r2
1000bba8:	1000bde8 	cmpgeui	zero,r2,759
1000bbac:	1000bc20 	cmpeqi	zero,r2,752
1000bbb0:	1000bdd8 	cmpnei	zero,r2,759
1000bbb4:	1000bc14 	ori	zero,r2,752
1000bbb8:	1000bdd8 	cmpnei	zero,r2,759
1000bbbc:	1000bdac 	andhi	zero,r2,758
1000bbc0:	1000bdd8 	cmpnei	zero,r2,759
1000bbc4:	1000bc14 	ori	zero,r2,752
1000bbc8:	1000bc20 	cmpeqi	zero,r2,752
1000bbcc:	1000bc20 	cmpeqi	zero,r2,752
1000bbd0:	1000bdac 	andhi	zero,r2,758
1000bbd4:	1000bc14 	ori	zero,r2,752
1000bbd8:	1000bc04 	addi	zero,r2,752
1000bbdc:	1000bc04 	addi	zero,r2,752
1000bbe0:	1000bc04 	addi	zero,r2,752
1000bbe4:	1000c170 	cmpltui	zero,r2,773
1000bbe8:	2404b03a 	or	r2,r4,r16
1000bbec:	10006c1e 	bne	r2,zero,1000bda0 <__divdf3+0x2ec>
1000bbf0:	02400204 	movi	r9,8
1000bbf4:	0021883a 	mov	r16,zero
1000bbf8:	002b883a 	mov	r21,zero
1000bbfc:	01400084 	movi	r5,2
1000bc00:	003fca06 	br	1000bb2c <__alt_data_end+0xf800bb2c>
1000bc04:	8023883a 	mov	r17,r16
1000bc08:	a829883a 	mov	r20,r21
1000bc0c:	4039883a 	mov	fp,r8
1000bc10:	280f883a 	mov	r7,r5
1000bc14:	00800084 	movi	r2,2
1000bc18:	3881601e 	bne	r7,r2,1000c19c <__divdf3+0x6e8>
1000bc1c:	e027883a 	mov	r19,fp
1000bc20:	9900004c 	andi	r4,r19,1
1000bc24:	0081ffc4 	movi	r2,2047
1000bc28:	0021883a 	mov	r16,zero
1000bc2c:	002b883a 	mov	r21,zero
1000bc30:	1004953a 	slli	r2,r2,20
1000bc34:	20c03fcc 	andi	r3,r4,255
1000bc38:	01400434 	movhi	r5,16
1000bc3c:	297fffc4 	addi	r5,r5,-1
1000bc40:	180697fa 	slli	r3,r3,31
1000bc44:	8160703a 	and	r16,r16,r5
1000bc48:	80a0b03a 	or	r16,r16,r2
1000bc4c:	80c6b03a 	or	r3,r16,r3
1000bc50:	a805883a 	mov	r2,r21
1000bc54:	dfc00f17 	ldw	ra,60(sp)
1000bc58:	df000e17 	ldw	fp,56(sp)
1000bc5c:	ddc00d17 	ldw	r23,52(sp)
1000bc60:	dd800c17 	ldw	r22,48(sp)
1000bc64:	dd400b17 	ldw	r21,44(sp)
1000bc68:	dd000a17 	ldw	r20,40(sp)
1000bc6c:	dcc00917 	ldw	r19,36(sp)
1000bc70:	dc800817 	ldw	r18,32(sp)
1000bc74:	dc400717 	ldw	r17,28(sp)
1000bc78:	dc000617 	ldw	r16,24(sp)
1000bc7c:	dec01004 	addi	sp,sp,64
1000bc80:	f800283a 	ret
1000bc84:	2404b03a 	or	r2,r4,r16
1000bc88:	2023883a 	mov	r17,r4
1000bc8c:	10003f26 	beq	r2,zero,1000bd8c <__divdf3+0x2d8>
1000bc90:	80015e26 	beq	r16,zero,1000c20c <__divdf3+0x758>
1000bc94:	8009883a 	mov	r4,r16
1000bc98:	d9800215 	stw	r6,8(sp)
1000bc9c:	d9c00515 	stw	r7,20(sp)
1000bca0:	da000415 	stw	r8,16(sp)
1000bca4:	000da480 	call	1000da48 <__clzsi2>
1000bca8:	d9800217 	ldw	r6,8(sp)
1000bcac:	d9c00517 	ldw	r7,20(sp)
1000bcb0:	da000417 	ldw	r8,16(sp)
1000bcb4:	113ffd44 	addi	r4,r2,-11
1000bcb8:	00c00704 	movi	r3,28
1000bcbc:	19014f16 	blt	r3,r4,1000c1fc <__divdf3+0x748>
1000bcc0:	00c00744 	movi	r3,29
1000bcc4:	157ffe04 	addi	r21,r2,-8
1000bcc8:	1907c83a 	sub	r3,r3,r4
1000bccc:	8560983a 	sll	r16,r16,r21
1000bcd0:	88c6d83a 	srl	r3,r17,r3
1000bcd4:	8d6a983a 	sll	r21,r17,r21
1000bcd8:	1c20b03a 	or	r16,r3,r16
1000bcdc:	1080fcc4 	addi	r2,r2,1011
1000bce0:	00a5c83a 	sub	r18,zero,r2
1000bce4:	0013883a 	mov	r9,zero
1000bce8:	000b883a 	mov	r5,zero
1000bcec:	003f8f06 	br	1000bb2c <__alt_data_end+0xf800bb2c>
1000bcf0:	3444b03a 	or	r2,r6,r17
1000bcf4:	1000231e 	bne	r2,zero,1000bd84 <__divdf3+0x2d0>
1000bcf8:	0023883a 	mov	r17,zero
1000bcfc:	0029883a 	mov	r20,zero
1000bd00:	01c00084 	movi	r7,2
1000bd04:	003f9b06 	br	1000bb74 <__alt_data_end+0xf800bb74>
1000bd08:	3444b03a 	or	r2,r6,r17
1000bd0c:	10001926 	beq	r2,zero,1000bd74 <__divdf3+0x2c0>
1000bd10:	88014b26 	beq	r17,zero,1000c240 <__divdf3+0x78c>
1000bd14:	8809883a 	mov	r4,r17
1000bd18:	d9400115 	stw	r5,4(sp)
1000bd1c:	d9800215 	stw	r6,8(sp)
1000bd20:	da000415 	stw	r8,16(sp)
1000bd24:	da400315 	stw	r9,12(sp)
1000bd28:	000da480 	call	1000da48 <__clzsi2>
1000bd2c:	d9400117 	ldw	r5,4(sp)
1000bd30:	d9800217 	ldw	r6,8(sp)
1000bd34:	da000417 	ldw	r8,16(sp)
1000bd38:	da400317 	ldw	r9,12(sp)
1000bd3c:	113ffd44 	addi	r4,r2,-11
1000bd40:	00c00704 	movi	r3,28
1000bd44:	19013a16 	blt	r3,r4,1000c230 <__divdf3+0x77c>
1000bd48:	00c00744 	movi	r3,29
1000bd4c:	153ffe04 	addi	r20,r2,-8
1000bd50:	1907c83a 	sub	r3,r3,r4
1000bd54:	8d22983a 	sll	r17,r17,r20
1000bd58:	30c6d83a 	srl	r3,r6,r3
1000bd5c:	3528983a 	sll	r20,r6,r20
1000bd60:	1c62b03a 	or	r17,r3,r17
1000bd64:	1080fcc4 	addi	r2,r2,1011
1000bd68:	0087c83a 	sub	r3,zero,r2
1000bd6c:	000f883a 	mov	r7,zero
1000bd70:	003f8006 	br	1000bb74 <__alt_data_end+0xf800bb74>
1000bd74:	0023883a 	mov	r17,zero
1000bd78:	0029883a 	mov	r20,zero
1000bd7c:	01c00044 	movi	r7,1
1000bd80:	003f7c06 	br	1000bb74 <__alt_data_end+0xf800bb74>
1000bd84:	01c000c4 	movi	r7,3
1000bd88:	003f7a06 	br	1000bb74 <__alt_data_end+0xf800bb74>
1000bd8c:	02400104 	movi	r9,4
1000bd90:	0021883a 	mov	r16,zero
1000bd94:	002b883a 	mov	r21,zero
1000bd98:	01400044 	movi	r5,1
1000bd9c:	003f6306 	br	1000bb2c <__alt_data_end+0xf800bb2c>
1000bda0:	02400304 	movi	r9,12
1000bda4:	014000c4 	movi	r5,3
1000bda8:	003f6006 	br	1000bb2c <__alt_data_end+0xf800bb2c>
1000bdac:	04000434 	movhi	r16,16
1000bdb0:	0009883a 	mov	r4,zero
1000bdb4:	843fffc4 	addi	r16,r16,-1
1000bdb8:	057fffc4 	movi	r21,-1
1000bdbc:	0081ffc4 	movi	r2,2047
1000bdc0:	003f9b06 	br	1000bc30 <__alt_data_end+0xf800bc30>
1000bdc4:	00c00044 	movi	r3,1
1000bdc8:	1887c83a 	sub	r3,r3,r2
1000bdcc:	01000e04 	movi	r4,56
1000bdd0:	20c1530e 	bge	r4,r3,1000c320 <__divdf3+0x86c>
1000bdd4:	9900004c 	andi	r4,r19,1
1000bdd8:	0005883a 	mov	r2,zero
1000bddc:	0021883a 	mov	r16,zero
1000bde0:	002b883a 	mov	r21,zero
1000bde4:	003f9206 	br	1000bc30 <__alt_data_end+0xf800bc30>
1000bde8:	8c012e36 	bltu	r17,r16,1000c2a4 <__divdf3+0x7f0>
1000bdec:	84412c26 	beq	r16,r17,1000c2a0 <__divdf3+0x7ec>
1000bdf0:	a82f883a 	mov	r23,r21
1000bdf4:	18ffffc4 	addi	r3,r3,-1
1000bdf8:	002b883a 	mov	r21,zero
1000bdfc:	a004d63a 	srli	r2,r20,24
1000be00:	8822923a 	slli	r17,r17,8
1000be04:	a028923a 	slli	r20,r20,8
1000be08:	8009883a 	mov	r4,r16
1000be0c:	88acb03a 	or	r22,r17,r2
1000be10:	dd000015 	stw	r20,0(sp)
1000be14:	b028d43a 	srli	r20,r22,16
1000be18:	d8c00215 	stw	r3,8(sp)
1000be1c:	b4bfffcc 	andi	r18,r22,65535
1000be20:	a00b883a 	mov	r5,r20
1000be24:	000b14c0 	call	1000b14c <__udivsi3>
1000be28:	100b883a 	mov	r5,r2
1000be2c:	9009883a 	mov	r4,r18
1000be30:	1023883a 	mov	r17,r2
1000be34:	00006840 	call	10000684 <__mulsi3>
1000be38:	8009883a 	mov	r4,r16
1000be3c:	a00b883a 	mov	r5,r20
1000be40:	1039883a 	mov	fp,r2
1000be44:	000b1b00 	call	1000b1b0 <__umodsi3>
1000be48:	1004943a 	slli	r2,r2,16
1000be4c:	b808d43a 	srli	r4,r23,16
1000be50:	d8c00217 	ldw	r3,8(sp)
1000be54:	2084b03a 	or	r2,r4,r2
1000be58:	1700062e 	bgeu	r2,fp,1000be74 <__divdf3+0x3c0>
1000be5c:	1585883a 	add	r2,r2,r22
1000be60:	893fffc4 	addi	r4,r17,-1
1000be64:	15811d36 	bltu	r2,r22,1000c2dc <__divdf3+0x828>
1000be68:	17011c2e 	bgeu	r2,fp,1000c2dc <__divdf3+0x828>
1000be6c:	8c7fff84 	addi	r17,r17,-2
1000be70:	1585883a 	add	r2,r2,r22
1000be74:	1739c83a 	sub	fp,r2,fp
1000be78:	a00b883a 	mov	r5,r20
1000be7c:	e009883a 	mov	r4,fp
1000be80:	d8c00215 	stw	r3,8(sp)
1000be84:	000b14c0 	call	1000b14c <__udivsi3>
1000be88:	100b883a 	mov	r5,r2
1000be8c:	9009883a 	mov	r4,r18
1000be90:	1021883a 	mov	r16,r2
1000be94:	00006840 	call	10000684 <__mulsi3>
1000be98:	a00b883a 	mov	r5,r20
1000be9c:	e009883a 	mov	r4,fp
1000bea0:	d8800415 	stw	r2,16(sp)
1000bea4:	000b1b00 	call	1000b1b0 <__umodsi3>
1000bea8:	1004943a 	slli	r2,r2,16
1000beac:	da000417 	ldw	r8,16(sp)
1000beb0:	bdffffcc 	andi	r23,r23,65535
1000beb4:	b884b03a 	or	r2,r23,r2
1000beb8:	d8c00217 	ldw	r3,8(sp)
1000bebc:	1200062e 	bgeu	r2,r8,1000bed8 <__divdf3+0x424>
1000bec0:	1585883a 	add	r2,r2,r22
1000bec4:	813fffc4 	addi	r4,r16,-1
1000bec8:	15810236 	bltu	r2,r22,1000c2d4 <__divdf3+0x820>
1000becc:	1201012e 	bgeu	r2,r8,1000c2d4 <__divdf3+0x820>
1000bed0:	843fff84 	addi	r16,r16,-2
1000bed4:	1585883a 	add	r2,r2,r22
1000bed8:	8822943a 	slli	r17,r17,16
1000bedc:	d9800017 	ldw	r6,0(sp)
1000bee0:	1211c83a 	sub	r8,r2,r8
1000bee4:	8c22b03a 	or	r17,r17,r16
1000bee8:	373fffcc 	andi	fp,r6,65535
1000beec:	8abfffcc 	andi	r10,r17,65535
1000bef0:	8820d43a 	srli	r16,r17,16
1000bef4:	5009883a 	mov	r4,r10
1000bef8:	e00b883a 	mov	r5,fp
1000befc:	302ed43a 	srli	r23,r6,16
1000bf00:	d8c00215 	stw	r3,8(sp)
1000bf04:	da000415 	stw	r8,16(sp)
1000bf08:	da800115 	stw	r10,4(sp)
1000bf0c:	00006840 	call	10000684 <__mulsi3>
1000bf10:	800b883a 	mov	r5,r16
1000bf14:	e009883a 	mov	r4,fp
1000bf18:	d8800515 	stw	r2,20(sp)
1000bf1c:	00006840 	call	10000684 <__mulsi3>
1000bf20:	8009883a 	mov	r4,r16
1000bf24:	b80b883a 	mov	r5,r23
1000bf28:	d8800315 	stw	r2,12(sp)
1000bf2c:	00006840 	call	10000684 <__mulsi3>
1000bf30:	da800117 	ldw	r10,4(sp)
1000bf34:	b80b883a 	mov	r5,r23
1000bf38:	1021883a 	mov	r16,r2
1000bf3c:	5009883a 	mov	r4,r10
1000bf40:	00006840 	call	10000684 <__mulsi3>
1000bf44:	d9c00517 	ldw	r7,20(sp)
1000bf48:	da400317 	ldw	r9,12(sp)
1000bf4c:	d8c00217 	ldw	r3,8(sp)
1000bf50:	3808d43a 	srli	r4,r7,16
1000bf54:	1245883a 	add	r2,r2,r9
1000bf58:	da000417 	ldw	r8,16(sp)
1000bf5c:	2085883a 	add	r2,r4,r2
1000bf60:	1240022e 	bgeu	r2,r9,1000bf6c <__divdf3+0x4b8>
1000bf64:	01000074 	movhi	r4,1
1000bf68:	8121883a 	add	r16,r16,r4
1000bf6c:	1008d43a 	srli	r4,r2,16
1000bf70:	1004943a 	slli	r2,r2,16
1000bf74:	39ffffcc 	andi	r7,r7,65535
1000bf78:	2409883a 	add	r4,r4,r16
1000bf7c:	11c5883a 	add	r2,r2,r7
1000bf80:	4100bb36 	bltu	r8,r4,1000c270 <__divdf3+0x7bc>
1000bf84:	4100d726 	beq	r8,r4,1000c2e4 <__divdf3+0x830>
1000bf88:	4109c83a 	sub	r4,r8,r4
1000bf8c:	a8a1c83a 	sub	r16,r21,r2
1000bf90:	ac2b803a 	cmpltu	r21,r21,r16
1000bf94:	256bc83a 	sub	r21,r4,r21
1000bf98:	b540d926 	beq	r22,r21,1000c300 <__divdf3+0x84c>
1000bf9c:	a00b883a 	mov	r5,r20
1000bfa0:	a809883a 	mov	r4,r21
1000bfa4:	d8c00215 	stw	r3,8(sp)
1000bfa8:	000b14c0 	call	1000b14c <__udivsi3>
1000bfac:	100b883a 	mov	r5,r2
1000bfb0:	9009883a 	mov	r4,r18
1000bfb4:	d8800515 	stw	r2,20(sp)
1000bfb8:	00006840 	call	10000684 <__mulsi3>
1000bfbc:	a809883a 	mov	r4,r21
1000bfc0:	a00b883a 	mov	r5,r20
1000bfc4:	d8800415 	stw	r2,16(sp)
1000bfc8:	000b1b00 	call	1000b1b0 <__umodsi3>
1000bfcc:	1004943a 	slli	r2,r2,16
1000bfd0:	8008d43a 	srli	r4,r16,16
1000bfd4:	da000417 	ldw	r8,16(sp)
1000bfd8:	d8c00217 	ldw	r3,8(sp)
1000bfdc:	2084b03a 	or	r2,r4,r2
1000bfe0:	d9c00517 	ldw	r7,20(sp)
1000bfe4:	1200062e 	bgeu	r2,r8,1000c000 <__divdf3+0x54c>
1000bfe8:	1585883a 	add	r2,r2,r22
1000bfec:	393fffc4 	addi	r4,r7,-1
1000bff0:	1580c536 	bltu	r2,r22,1000c308 <__divdf3+0x854>
1000bff4:	1200c42e 	bgeu	r2,r8,1000c308 <__divdf3+0x854>
1000bff8:	39ffff84 	addi	r7,r7,-2
1000bffc:	1585883a 	add	r2,r2,r22
1000c000:	122bc83a 	sub	r21,r2,r8
1000c004:	a00b883a 	mov	r5,r20
1000c008:	a809883a 	mov	r4,r21
1000c00c:	d8c00215 	stw	r3,8(sp)
1000c010:	d9c00515 	stw	r7,20(sp)
1000c014:	000b14c0 	call	1000b14c <__udivsi3>
1000c018:	9009883a 	mov	r4,r18
1000c01c:	100b883a 	mov	r5,r2
1000c020:	d8800415 	stw	r2,16(sp)
1000c024:	00006840 	call	10000684 <__mulsi3>
1000c028:	a809883a 	mov	r4,r21
1000c02c:	a00b883a 	mov	r5,r20
1000c030:	1025883a 	mov	r18,r2
1000c034:	000b1b00 	call	1000b1b0 <__umodsi3>
1000c038:	1004943a 	slli	r2,r2,16
1000c03c:	813fffcc 	andi	r4,r16,65535
1000c040:	d8c00217 	ldw	r3,8(sp)
1000c044:	20a0b03a 	or	r16,r4,r2
1000c048:	d9c00517 	ldw	r7,20(sp)
1000c04c:	da000417 	ldw	r8,16(sp)
1000c050:	8480062e 	bgeu	r16,r18,1000c06c <__divdf3+0x5b8>
1000c054:	85a1883a 	add	r16,r16,r22
1000c058:	40bfffc4 	addi	r2,r8,-1
1000c05c:	8580ac36 	bltu	r16,r22,1000c310 <__divdf3+0x85c>
1000c060:	8480ab2e 	bgeu	r16,r18,1000c310 <__divdf3+0x85c>
1000c064:	423fff84 	addi	r8,r8,-2
1000c068:	85a1883a 	add	r16,r16,r22
1000c06c:	3804943a 	slli	r2,r7,16
1000c070:	84a1c83a 	sub	r16,r16,r18
1000c074:	e009883a 	mov	r4,fp
1000c078:	1228b03a 	or	r20,r2,r8
1000c07c:	a1ffffcc 	andi	r7,r20,65535
1000c080:	a024d43a 	srli	r18,r20,16
1000c084:	380b883a 	mov	r5,r7
1000c088:	d8c00215 	stw	r3,8(sp)
1000c08c:	d9c00515 	stw	r7,20(sp)
1000c090:	00006840 	call	10000684 <__mulsi3>
1000c094:	900b883a 	mov	r5,r18
1000c098:	e009883a 	mov	r4,fp
1000c09c:	102b883a 	mov	r21,r2
1000c0a0:	00006840 	call	10000684 <__mulsi3>
1000c0a4:	900b883a 	mov	r5,r18
1000c0a8:	b809883a 	mov	r4,r23
1000c0ac:	1039883a 	mov	fp,r2
1000c0b0:	00006840 	call	10000684 <__mulsi3>
1000c0b4:	d9c00517 	ldw	r7,20(sp)
1000c0b8:	b80b883a 	mov	r5,r23
1000c0bc:	1025883a 	mov	r18,r2
1000c0c0:	3809883a 	mov	r4,r7
1000c0c4:	00006840 	call	10000684 <__mulsi3>
1000c0c8:	a808d43a 	srli	r4,r21,16
1000c0cc:	1705883a 	add	r2,r2,fp
1000c0d0:	d8c00217 	ldw	r3,8(sp)
1000c0d4:	2085883a 	add	r2,r4,r2
1000c0d8:	1700022e 	bgeu	r2,fp,1000c0e4 <__divdf3+0x630>
1000c0dc:	01000074 	movhi	r4,1
1000c0e0:	9125883a 	add	r18,r18,r4
1000c0e4:	1008d43a 	srli	r4,r2,16
1000c0e8:	1004943a 	slli	r2,r2,16
1000c0ec:	ad7fffcc 	andi	r21,r21,65535
1000c0f0:	2489883a 	add	r4,r4,r18
1000c0f4:	1545883a 	add	r2,r2,r21
1000c0f8:	81003836 	bltu	r16,r4,1000c1dc <__divdf3+0x728>
1000c0fc:	81003626 	beq	r16,r4,1000c1d8 <__divdf3+0x724>
1000c100:	a5000054 	ori	r20,r20,1
1000c104:	1880ffc4 	addi	r2,r3,1023
1000c108:	00bf2e0e 	bge	zero,r2,1000bdc4 <__alt_data_end+0xf800bdc4>
1000c10c:	a10001cc 	andi	r4,r20,7
1000c110:	20000726 	beq	r4,zero,1000c130 <__divdf3+0x67c>
1000c114:	a10003cc 	andi	r4,r20,15
1000c118:	01400104 	movi	r5,4
1000c11c:	21400426 	beq	r4,r5,1000c130 <__divdf3+0x67c>
1000c120:	a149883a 	add	r4,r20,r5
1000c124:	2529803a 	cmpltu	r20,r4,r20
1000c128:	8d23883a 	add	r17,r17,r20
1000c12c:	2029883a 	mov	r20,r4
1000c130:	8900402c 	andhi	r4,r17,256
1000c134:	20000426 	beq	r4,zero,1000c148 <__divdf3+0x694>
1000c138:	18810004 	addi	r2,r3,1024
1000c13c:	00ffc034 	movhi	r3,65280
1000c140:	18ffffc4 	addi	r3,r3,-1
1000c144:	88e2703a 	and	r17,r17,r3
1000c148:	00c1ff84 	movi	r3,2046
1000c14c:	18beb416 	blt	r3,r2,1000bc20 <__alt_data_end+0xf800bc20>
1000c150:	a028d0fa 	srli	r20,r20,3
1000c154:	882a977a 	slli	r21,r17,29
1000c158:	8820927a 	slli	r16,r17,9
1000c15c:	1081ffcc 	andi	r2,r2,2047
1000c160:	ad2ab03a 	or	r21,r21,r20
1000c164:	8020d33a 	srli	r16,r16,12
1000c168:	9900004c 	andi	r4,r19,1
1000c16c:	003eb006 	br	1000bc30 <__alt_data_end+0xf800bc30>
1000c170:	8080022c 	andhi	r2,r16,8
1000c174:	10001226 	beq	r2,zero,1000c1c0 <__divdf3+0x70c>
1000c178:	8880022c 	andhi	r2,r17,8
1000c17c:	1000101e 	bne	r2,zero,1000c1c0 <__divdf3+0x70c>
1000c180:	00800434 	movhi	r2,16
1000c184:	8c000234 	orhi	r16,r17,8
1000c188:	10bfffc4 	addi	r2,r2,-1
1000c18c:	b809883a 	mov	r4,r23
1000c190:	80a0703a 	and	r16,r16,r2
1000c194:	a02b883a 	mov	r21,r20
1000c198:	003f0806 	br	1000bdbc <__alt_data_end+0xf800bdbc>
1000c19c:	008000c4 	movi	r2,3
1000c1a0:	3880b126 	beq	r7,r2,1000c468 <__divdf3+0x9b4>
1000c1a4:	00800044 	movi	r2,1
1000c1a8:	38805b1e 	bne	r7,r2,1000c318 <__divdf3+0x864>
1000c1ac:	e009883a 	mov	r4,fp
1000c1b0:	0005883a 	mov	r2,zero
1000c1b4:	0021883a 	mov	r16,zero
1000c1b8:	002b883a 	mov	r21,zero
1000c1bc:	003e9c06 	br	1000bc30 <__alt_data_end+0xf800bc30>
1000c1c0:	00800434 	movhi	r2,16
1000c1c4:	84000234 	orhi	r16,r16,8
1000c1c8:	10bfffc4 	addi	r2,r2,-1
1000c1cc:	b009883a 	mov	r4,r22
1000c1d0:	80a0703a 	and	r16,r16,r2
1000c1d4:	003ef906 	br	1000bdbc <__alt_data_end+0xf800bdbc>
1000c1d8:	103fca26 	beq	r2,zero,1000c104 <__alt_data_end+0xf800c104>
1000c1dc:	b421883a 	add	r16,r22,r16
1000c1e0:	a17fffc4 	addi	r5,r20,-1
1000c1e4:	8580422e 	bgeu	r16,r22,1000c2f0 <__divdf3+0x83c>
1000c1e8:	2829883a 	mov	r20,r5
1000c1ec:	813fc41e 	bne	r16,r4,1000c100 <__alt_data_end+0xf800c100>
1000c1f0:	d9800017 	ldw	r6,0(sp)
1000c1f4:	30bfc21e 	bne	r6,r2,1000c100 <__alt_data_end+0xf800c100>
1000c1f8:	003fc206 	br	1000c104 <__alt_data_end+0xf800c104>
1000c1fc:	143ff604 	addi	r16,r2,-40
1000c200:	8c20983a 	sll	r16,r17,r16
1000c204:	002b883a 	mov	r21,zero
1000c208:	003eb406 	br	1000bcdc <__alt_data_end+0xf800bcdc>
1000c20c:	d9800215 	stw	r6,8(sp)
1000c210:	d9c00515 	stw	r7,20(sp)
1000c214:	da000415 	stw	r8,16(sp)
1000c218:	000da480 	call	1000da48 <__clzsi2>
1000c21c:	10800804 	addi	r2,r2,32
1000c220:	da000417 	ldw	r8,16(sp)
1000c224:	d9c00517 	ldw	r7,20(sp)
1000c228:	d9800217 	ldw	r6,8(sp)
1000c22c:	003ea106 	br	1000bcb4 <__alt_data_end+0xf800bcb4>
1000c230:	147ff604 	addi	r17,r2,-40
1000c234:	3462983a 	sll	r17,r6,r17
1000c238:	0029883a 	mov	r20,zero
1000c23c:	003ec906 	br	1000bd64 <__alt_data_end+0xf800bd64>
1000c240:	3009883a 	mov	r4,r6
1000c244:	d9400115 	stw	r5,4(sp)
1000c248:	d9800215 	stw	r6,8(sp)
1000c24c:	da000415 	stw	r8,16(sp)
1000c250:	da400315 	stw	r9,12(sp)
1000c254:	000da480 	call	1000da48 <__clzsi2>
1000c258:	10800804 	addi	r2,r2,32
1000c25c:	da400317 	ldw	r9,12(sp)
1000c260:	da000417 	ldw	r8,16(sp)
1000c264:	d9800217 	ldw	r6,8(sp)
1000c268:	d9400117 	ldw	r5,4(sp)
1000c26c:	003eb306 	br	1000bd3c <__alt_data_end+0xf800bd3c>
1000c270:	d9800017 	ldw	r6,0(sp)
1000c274:	a9ab883a 	add	r21,r21,r6
1000c278:	a98b803a 	cmpltu	r5,r21,r6
1000c27c:	2d8b883a 	add	r5,r5,r22
1000c280:	2a11883a 	add	r8,r5,r8
1000c284:	897fffc4 	addi	r5,r17,-1
1000c288:	b2000c2e 	bgeu	r22,r8,1000c2bc <__divdf3+0x808>
1000c28c:	41003f36 	bltu	r8,r4,1000c38c <__divdf3+0x8d8>
1000c290:	22006c26 	beq	r4,r8,1000c444 <__divdf3+0x990>
1000c294:	4109c83a 	sub	r4,r8,r4
1000c298:	2823883a 	mov	r17,r5
1000c29c:	003f3b06 	br	1000bf8c <__alt_data_end+0xf800bf8c>
1000c2a0:	ad3ed336 	bltu	r21,r20,1000bdf0 <__alt_data_end+0xf800bdf0>
1000c2a4:	a804d07a 	srli	r2,r21,1
1000c2a8:	802e97fa 	slli	r23,r16,31
1000c2ac:	a82a97fa 	slli	r21,r21,31
1000c2b0:	8020d07a 	srli	r16,r16,1
1000c2b4:	b8aeb03a 	or	r23,r23,r2
1000c2b8:	003ed006 	br	1000bdfc <__alt_data_end+0xf800bdfc>
1000c2bc:	b23ff51e 	bne	r22,r8,1000c294 <__alt_data_end+0xf800c294>
1000c2c0:	d9800017 	ldw	r6,0(sp)
1000c2c4:	a9bff12e 	bgeu	r21,r6,1000c28c <__alt_data_end+0xf800c28c>
1000c2c8:	b109c83a 	sub	r4,r22,r4
1000c2cc:	2823883a 	mov	r17,r5
1000c2d0:	003f2e06 	br	1000bf8c <__alt_data_end+0xf800bf8c>
1000c2d4:	2021883a 	mov	r16,r4
1000c2d8:	003eff06 	br	1000bed8 <__alt_data_end+0xf800bed8>
1000c2dc:	2023883a 	mov	r17,r4
1000c2e0:	003ee406 	br	1000be74 <__alt_data_end+0xf800be74>
1000c2e4:	a8bfe236 	bltu	r21,r2,1000c270 <__alt_data_end+0xf800c270>
1000c2e8:	0009883a 	mov	r4,zero
1000c2ec:	003f2706 	br	1000bf8c <__alt_data_end+0xf800bf8c>
1000c2f0:	81002d36 	bltu	r16,r4,1000c3a8 <__divdf3+0x8f4>
1000c2f4:	24005626 	beq	r4,r16,1000c450 <__divdf3+0x99c>
1000c2f8:	2829883a 	mov	r20,r5
1000c2fc:	003f8006 	br	1000c100 <__alt_data_end+0xf800c100>
1000c300:	053fffc4 	movi	r20,-1
1000c304:	003f7f06 	br	1000c104 <__alt_data_end+0xf800c104>
1000c308:	200f883a 	mov	r7,r4
1000c30c:	003f3c06 	br	1000c000 <__alt_data_end+0xf800c000>
1000c310:	1011883a 	mov	r8,r2
1000c314:	003f5506 	br	1000c06c <__alt_data_end+0xf800c06c>
1000c318:	e027883a 	mov	r19,fp
1000c31c:	003f7906 	br	1000c104 <__alt_data_end+0xf800c104>
1000c320:	010007c4 	movi	r4,31
1000c324:	20c02816 	blt	r4,r3,1000c3c8 <__divdf3+0x914>
1000c328:	00800804 	movi	r2,32
1000c32c:	10c5c83a 	sub	r2,r2,r3
1000c330:	888a983a 	sll	r5,r17,r2
1000c334:	a0c8d83a 	srl	r4,r20,r3
1000c338:	a084983a 	sll	r2,r20,r2
1000c33c:	88e2d83a 	srl	r17,r17,r3
1000c340:	2906b03a 	or	r3,r5,r4
1000c344:	1004c03a 	cmpne	r2,r2,zero
1000c348:	1886b03a 	or	r3,r3,r2
1000c34c:	188001cc 	andi	r2,r3,7
1000c350:	10000726 	beq	r2,zero,1000c370 <__divdf3+0x8bc>
1000c354:	188003cc 	andi	r2,r3,15
1000c358:	01000104 	movi	r4,4
1000c35c:	11000426 	beq	r2,r4,1000c370 <__divdf3+0x8bc>
1000c360:	1805883a 	mov	r2,r3
1000c364:	10c00104 	addi	r3,r2,4
1000c368:	1885803a 	cmpltu	r2,r3,r2
1000c36c:	88a3883a 	add	r17,r17,r2
1000c370:	8880202c 	andhi	r2,r17,128
1000c374:	10002926 	beq	r2,zero,1000c41c <__divdf3+0x968>
1000c378:	9900004c 	andi	r4,r19,1
1000c37c:	00800044 	movi	r2,1
1000c380:	0021883a 	mov	r16,zero
1000c384:	002b883a 	mov	r21,zero
1000c388:	003e2906 	br	1000bc30 <__alt_data_end+0xf800bc30>
1000c38c:	d9800017 	ldw	r6,0(sp)
1000c390:	8c7fff84 	addi	r17,r17,-2
1000c394:	a9ab883a 	add	r21,r21,r6
1000c398:	a98b803a 	cmpltu	r5,r21,r6
1000c39c:	2d8b883a 	add	r5,r5,r22
1000c3a0:	2a11883a 	add	r8,r5,r8
1000c3a4:	003ef806 	br	1000bf88 <__alt_data_end+0xf800bf88>
1000c3a8:	d9800017 	ldw	r6,0(sp)
1000c3ac:	318f883a 	add	r7,r6,r6
1000c3b0:	398b803a 	cmpltu	r5,r7,r6
1000c3b4:	2d8d883a 	add	r6,r5,r22
1000c3b8:	81a1883a 	add	r16,r16,r6
1000c3bc:	a17fff84 	addi	r5,r20,-2
1000c3c0:	d9c00015 	stw	r7,0(sp)
1000c3c4:	003f8806 	br	1000c1e8 <__alt_data_end+0xf800c1e8>
1000c3c8:	013ff844 	movi	r4,-31
1000c3cc:	2085c83a 	sub	r2,r4,r2
1000c3d0:	8888d83a 	srl	r4,r17,r2
1000c3d4:	00800804 	movi	r2,32
1000c3d8:	18802126 	beq	r3,r2,1000c460 <__divdf3+0x9ac>
1000c3dc:	04001004 	movi	r16,64
1000c3e0:	80c7c83a 	sub	r3,r16,r3
1000c3e4:	88e0983a 	sll	r16,r17,r3
1000c3e8:	8504b03a 	or	r2,r16,r20
1000c3ec:	1004c03a 	cmpne	r2,r2,zero
1000c3f0:	2084b03a 	or	r2,r4,r2
1000c3f4:	144001cc 	andi	r17,r2,7
1000c3f8:	88000d1e 	bne	r17,zero,1000c430 <__divdf3+0x97c>
1000c3fc:	0021883a 	mov	r16,zero
1000c400:	102ad0fa 	srli	r21,r2,3
1000c404:	9900004c 	andi	r4,r19,1
1000c408:	0005883a 	mov	r2,zero
1000c40c:	ac6ab03a 	or	r21,r21,r17
1000c410:	003e0706 	br	1000bc30 <__alt_data_end+0xf800bc30>
1000c414:	1007883a 	mov	r3,r2
1000c418:	0023883a 	mov	r17,zero
1000c41c:	8820927a 	slli	r16,r17,9
1000c420:	1805883a 	mov	r2,r3
1000c424:	8822977a 	slli	r17,r17,29
1000c428:	8020d33a 	srli	r16,r16,12
1000c42c:	003ff406 	br	1000c400 <__alt_data_end+0xf800c400>
1000c430:	10c003cc 	andi	r3,r2,15
1000c434:	01000104 	movi	r4,4
1000c438:	193ff626 	beq	r3,r4,1000c414 <__alt_data_end+0xf800c414>
1000c43c:	0023883a 	mov	r17,zero
1000c440:	003fc806 	br	1000c364 <__alt_data_end+0xf800c364>
1000c444:	a8bfd136 	bltu	r21,r2,1000c38c <__alt_data_end+0xf800c38c>
1000c448:	2823883a 	mov	r17,r5
1000c44c:	003fa606 	br	1000c2e8 <__alt_data_end+0xf800c2e8>
1000c450:	d9800017 	ldw	r6,0(sp)
1000c454:	30bfd436 	bltu	r6,r2,1000c3a8 <__alt_data_end+0xf800c3a8>
1000c458:	2829883a 	mov	r20,r5
1000c45c:	003f6406 	br	1000c1f0 <__alt_data_end+0xf800c1f0>
1000c460:	0021883a 	mov	r16,zero
1000c464:	003fe006 	br	1000c3e8 <__alt_data_end+0xf800c3e8>
1000c468:	00800434 	movhi	r2,16
1000c46c:	8c000234 	orhi	r16,r17,8
1000c470:	10bfffc4 	addi	r2,r2,-1
1000c474:	e009883a 	mov	r4,fp
1000c478:	80a0703a 	and	r16,r16,r2
1000c47c:	a02b883a 	mov	r21,r20
1000c480:	003e4e06 	br	1000bdbc <__alt_data_end+0xf800bdbc>

1000c484 <__eqdf2>:
1000c484:	2804d53a 	srli	r2,r5,20
1000c488:	3806d53a 	srli	r3,r7,20
1000c48c:	02000434 	movhi	r8,16
1000c490:	423fffc4 	addi	r8,r8,-1
1000c494:	1081ffcc 	andi	r2,r2,2047
1000c498:	0281ffc4 	movi	r10,2047
1000c49c:	2a12703a 	and	r9,r5,r8
1000c4a0:	18c1ffcc 	andi	r3,r3,2047
1000c4a4:	3a10703a 	and	r8,r7,r8
1000c4a8:	280ad7fa 	srli	r5,r5,31
1000c4ac:	380ed7fa 	srli	r7,r7,31
1000c4b0:	12801026 	beq	r2,r10,1000c4f4 <__eqdf2+0x70>
1000c4b4:	0281ffc4 	movi	r10,2047
1000c4b8:	1a800a26 	beq	r3,r10,1000c4e4 <__eqdf2+0x60>
1000c4bc:	10c00226 	beq	r2,r3,1000c4c8 <__eqdf2+0x44>
1000c4c0:	00800044 	movi	r2,1
1000c4c4:	f800283a 	ret
1000c4c8:	4a3ffd1e 	bne	r9,r8,1000c4c0 <__alt_data_end+0xf800c4c0>
1000c4cc:	21bffc1e 	bne	r4,r6,1000c4c0 <__alt_data_end+0xf800c4c0>
1000c4d0:	29c00c26 	beq	r5,r7,1000c504 <__eqdf2+0x80>
1000c4d4:	103ffa1e 	bne	r2,zero,1000c4c0 <__alt_data_end+0xf800c4c0>
1000c4d8:	2244b03a 	or	r2,r4,r9
1000c4dc:	1004c03a 	cmpne	r2,r2,zero
1000c4e0:	f800283a 	ret
1000c4e4:	3214b03a 	or	r10,r6,r8
1000c4e8:	503ff426 	beq	r10,zero,1000c4bc <__alt_data_end+0xf800c4bc>
1000c4ec:	00800044 	movi	r2,1
1000c4f0:	f800283a 	ret
1000c4f4:	2254b03a 	or	r10,r4,r9
1000c4f8:	503fee26 	beq	r10,zero,1000c4b4 <__alt_data_end+0xf800c4b4>
1000c4fc:	00800044 	movi	r2,1
1000c500:	f800283a 	ret
1000c504:	0005883a 	mov	r2,zero
1000c508:	f800283a 	ret

1000c50c <__gedf2>:
1000c50c:	2804d53a 	srli	r2,r5,20
1000c510:	3806d53a 	srli	r3,r7,20
1000c514:	02000434 	movhi	r8,16
1000c518:	423fffc4 	addi	r8,r8,-1
1000c51c:	1081ffcc 	andi	r2,r2,2047
1000c520:	0241ffc4 	movi	r9,2047
1000c524:	2a14703a 	and	r10,r5,r8
1000c528:	18c1ffcc 	andi	r3,r3,2047
1000c52c:	3a10703a 	and	r8,r7,r8
1000c530:	280ad7fa 	srli	r5,r5,31
1000c534:	380ed7fa 	srli	r7,r7,31
1000c538:	12401d26 	beq	r2,r9,1000c5b0 <__gedf2+0xa4>
1000c53c:	0241ffc4 	movi	r9,2047
1000c540:	1a401226 	beq	r3,r9,1000c58c <__gedf2+0x80>
1000c544:	1000081e 	bne	r2,zero,1000c568 <__gedf2+0x5c>
1000c548:	2296b03a 	or	r11,r4,r10
1000c54c:	5813003a 	cmpeq	r9,r11,zero
1000c550:	1800091e 	bne	r3,zero,1000c578 <__gedf2+0x6c>
1000c554:	3218b03a 	or	r12,r6,r8
1000c558:	6000071e 	bne	r12,zero,1000c578 <__gedf2+0x6c>
1000c55c:	0005883a 	mov	r2,zero
1000c560:	5800101e 	bne	r11,zero,1000c5a4 <__gedf2+0x98>
1000c564:	f800283a 	ret
1000c568:	18000c1e 	bne	r3,zero,1000c59c <__gedf2+0x90>
1000c56c:	3212b03a 	or	r9,r6,r8
1000c570:	48000c26 	beq	r9,zero,1000c5a4 <__gedf2+0x98>
1000c574:	0013883a 	mov	r9,zero
1000c578:	39c03fcc 	andi	r7,r7,255
1000c57c:	48000826 	beq	r9,zero,1000c5a0 <__gedf2+0x94>
1000c580:	38000926 	beq	r7,zero,1000c5a8 <__gedf2+0x9c>
1000c584:	00800044 	movi	r2,1
1000c588:	f800283a 	ret
1000c58c:	3212b03a 	or	r9,r6,r8
1000c590:	483fec26 	beq	r9,zero,1000c544 <__alt_data_end+0xf800c544>
1000c594:	00bfff84 	movi	r2,-2
1000c598:	f800283a 	ret
1000c59c:	39c03fcc 	andi	r7,r7,255
1000c5a0:	29c00626 	beq	r5,r7,1000c5bc <__gedf2+0xb0>
1000c5a4:	283ff726 	beq	r5,zero,1000c584 <__alt_data_end+0xf800c584>
1000c5a8:	00bfffc4 	movi	r2,-1
1000c5ac:	f800283a 	ret
1000c5b0:	2292b03a 	or	r9,r4,r10
1000c5b4:	483fe126 	beq	r9,zero,1000c53c <__alt_data_end+0xf800c53c>
1000c5b8:	003ff606 	br	1000c594 <__alt_data_end+0xf800c594>
1000c5bc:	18bff916 	blt	r3,r2,1000c5a4 <__alt_data_end+0xf800c5a4>
1000c5c0:	10c00316 	blt	r2,r3,1000c5d0 <__gedf2+0xc4>
1000c5c4:	42bff736 	bltu	r8,r10,1000c5a4 <__alt_data_end+0xf800c5a4>
1000c5c8:	52000326 	beq	r10,r8,1000c5d8 <__gedf2+0xcc>
1000c5cc:	5200042e 	bgeu	r10,r8,1000c5e0 <__gedf2+0xd4>
1000c5d0:	283fec1e 	bne	r5,zero,1000c584 <__alt_data_end+0xf800c584>
1000c5d4:	003ff406 	br	1000c5a8 <__alt_data_end+0xf800c5a8>
1000c5d8:	313ff236 	bltu	r6,r4,1000c5a4 <__alt_data_end+0xf800c5a4>
1000c5dc:	21bffc36 	bltu	r4,r6,1000c5d0 <__alt_data_end+0xf800c5d0>
1000c5e0:	0005883a 	mov	r2,zero
1000c5e4:	f800283a 	ret

1000c5e8 <__ledf2>:
1000c5e8:	2804d53a 	srli	r2,r5,20
1000c5ec:	3810d53a 	srli	r8,r7,20
1000c5f0:	00c00434 	movhi	r3,16
1000c5f4:	18ffffc4 	addi	r3,r3,-1
1000c5f8:	1081ffcc 	andi	r2,r2,2047
1000c5fc:	0241ffc4 	movi	r9,2047
1000c600:	28d4703a 	and	r10,r5,r3
1000c604:	4201ffcc 	andi	r8,r8,2047
1000c608:	38c6703a 	and	r3,r7,r3
1000c60c:	280ad7fa 	srli	r5,r5,31
1000c610:	380ed7fa 	srli	r7,r7,31
1000c614:	12401f26 	beq	r2,r9,1000c694 <__ledf2+0xac>
1000c618:	0241ffc4 	movi	r9,2047
1000c61c:	42401426 	beq	r8,r9,1000c670 <__ledf2+0x88>
1000c620:	1000091e 	bne	r2,zero,1000c648 <__ledf2+0x60>
1000c624:	2296b03a 	or	r11,r4,r10
1000c628:	5813003a 	cmpeq	r9,r11,zero
1000c62c:	29403fcc 	andi	r5,r5,255
1000c630:	40000a1e 	bne	r8,zero,1000c65c <__ledf2+0x74>
1000c634:	30d8b03a 	or	r12,r6,r3
1000c638:	6000081e 	bne	r12,zero,1000c65c <__ledf2+0x74>
1000c63c:	0005883a 	mov	r2,zero
1000c640:	5800111e 	bne	r11,zero,1000c688 <__ledf2+0xa0>
1000c644:	f800283a 	ret
1000c648:	29403fcc 	andi	r5,r5,255
1000c64c:	40000c1e 	bne	r8,zero,1000c680 <__ledf2+0x98>
1000c650:	30d2b03a 	or	r9,r6,r3
1000c654:	48000c26 	beq	r9,zero,1000c688 <__ledf2+0xa0>
1000c658:	0013883a 	mov	r9,zero
1000c65c:	39c03fcc 	andi	r7,r7,255
1000c660:	48000826 	beq	r9,zero,1000c684 <__ledf2+0x9c>
1000c664:	38001126 	beq	r7,zero,1000c6ac <__ledf2+0xc4>
1000c668:	00800044 	movi	r2,1
1000c66c:	f800283a 	ret
1000c670:	30d2b03a 	or	r9,r6,r3
1000c674:	483fea26 	beq	r9,zero,1000c620 <__alt_data_end+0xf800c620>
1000c678:	00800084 	movi	r2,2
1000c67c:	f800283a 	ret
1000c680:	39c03fcc 	andi	r7,r7,255
1000c684:	39400726 	beq	r7,r5,1000c6a4 <__ledf2+0xbc>
1000c688:	2800081e 	bne	r5,zero,1000c6ac <__ledf2+0xc4>
1000c68c:	00800044 	movi	r2,1
1000c690:	f800283a 	ret
1000c694:	2292b03a 	or	r9,r4,r10
1000c698:	483fdf26 	beq	r9,zero,1000c618 <__alt_data_end+0xf800c618>
1000c69c:	00800084 	movi	r2,2
1000c6a0:	f800283a 	ret
1000c6a4:	4080030e 	bge	r8,r2,1000c6b4 <__ledf2+0xcc>
1000c6a8:	383fef26 	beq	r7,zero,1000c668 <__alt_data_end+0xf800c668>
1000c6ac:	00bfffc4 	movi	r2,-1
1000c6b0:	f800283a 	ret
1000c6b4:	123feb16 	blt	r2,r8,1000c664 <__alt_data_end+0xf800c664>
1000c6b8:	1abff336 	bltu	r3,r10,1000c688 <__alt_data_end+0xf800c688>
1000c6bc:	50c00326 	beq	r10,r3,1000c6cc <__ledf2+0xe4>
1000c6c0:	50c0042e 	bgeu	r10,r3,1000c6d4 <__ledf2+0xec>
1000c6c4:	283fe81e 	bne	r5,zero,1000c668 <__alt_data_end+0xf800c668>
1000c6c8:	003ff806 	br	1000c6ac <__alt_data_end+0xf800c6ac>
1000c6cc:	313fee36 	bltu	r6,r4,1000c688 <__alt_data_end+0xf800c688>
1000c6d0:	21bffc36 	bltu	r4,r6,1000c6c4 <__alt_data_end+0xf800c6c4>
1000c6d4:	0005883a 	mov	r2,zero
1000c6d8:	f800283a 	ret

1000c6dc <__muldf3>:
1000c6dc:	deffee04 	addi	sp,sp,-72
1000c6e0:	dd000c15 	stw	r20,48(sp)
1000c6e4:	2828d53a 	srli	r20,r5,20
1000c6e8:	ddc00f15 	stw	r23,60(sp)
1000c6ec:	282ed7fa 	srli	r23,r5,31
1000c6f0:	dc000815 	stw	r16,32(sp)
1000c6f4:	04000434 	movhi	r16,16
1000c6f8:	dcc00b15 	stw	r19,44(sp)
1000c6fc:	843fffc4 	addi	r16,r16,-1
1000c700:	dfc01115 	stw	ra,68(sp)
1000c704:	df001015 	stw	fp,64(sp)
1000c708:	dd800e15 	stw	r22,56(sp)
1000c70c:	dd400d15 	stw	r21,52(sp)
1000c710:	dc800a15 	stw	r18,40(sp)
1000c714:	dc400915 	stw	r17,36(sp)
1000c718:	a501ffcc 	andi	r20,r20,2047
1000c71c:	2c20703a 	and	r16,r5,r16
1000c720:	b827883a 	mov	r19,r23
1000c724:	ba403fcc 	andi	r9,r23,255
1000c728:	a0006026 	beq	r20,zero,1000c8ac <__muldf3+0x1d0>
1000c72c:	0081ffc4 	movi	r2,2047
1000c730:	202d883a 	mov	r22,r4
1000c734:	a0803626 	beq	r20,r2,1000c810 <__muldf3+0x134>
1000c738:	84000434 	orhi	r16,r16,16
1000c73c:	200ad77a 	srli	r5,r4,29
1000c740:	800490fa 	slli	r2,r16,3
1000c744:	202c90fa 	slli	r22,r4,3
1000c748:	a53f0044 	addi	r20,r20,-1023
1000c74c:	28a0b03a 	or	r16,r5,r2
1000c750:	002b883a 	mov	r21,zero
1000c754:	000b883a 	mov	r5,zero
1000c758:	3804d53a 	srli	r2,r7,20
1000c75c:	3838d7fa 	srli	fp,r7,31
1000c760:	04400434 	movhi	r17,16
1000c764:	8c7fffc4 	addi	r17,r17,-1
1000c768:	1081ffcc 	andi	r2,r2,2047
1000c76c:	3025883a 	mov	r18,r6
1000c770:	3c62703a 	and	r17,r7,r17
1000c774:	e2803fcc 	andi	r10,fp,255
1000c778:	10006d26 	beq	r2,zero,1000c930 <__muldf3+0x254>
1000c77c:	00c1ffc4 	movi	r3,2047
1000c780:	10c06526 	beq	r2,r3,1000c918 <__muldf3+0x23c>
1000c784:	8c400434 	orhi	r17,r17,16
1000c788:	300ed77a 	srli	r7,r6,29
1000c78c:	880690fa 	slli	r3,r17,3
1000c790:	302490fa 	slli	r18,r6,3
1000c794:	10bf0044 	addi	r2,r2,-1023
1000c798:	38e2b03a 	or	r17,r7,r3
1000c79c:	000f883a 	mov	r7,zero
1000c7a0:	a087883a 	add	r3,r20,r2
1000c7a4:	010003c4 	movi	r4,15
1000c7a8:	3d44b03a 	or	r2,r7,r21
1000c7ac:	e5ccf03a 	xor	r6,fp,r23
1000c7b0:	1a000044 	addi	r8,r3,1
1000c7b4:	20809b36 	bltu	r4,r2,1000ca24 <__muldf3+0x348>
1000c7b8:	100490ba 	slli	r2,r2,2
1000c7bc:	01040074 	movhi	r4,4097
1000c7c0:	2131f404 	addi	r4,r4,-14384
1000c7c4:	1105883a 	add	r2,r2,r4
1000c7c8:	10800017 	ldw	r2,0(r2)
1000c7cc:	1000683a 	jmp	r2
1000c7d0:	1000ca24 	muli	zero,r2,808
1000c7d4:	1000c830 	cmpltui	zero,r2,800
1000c7d8:	1000c830 	cmpltui	zero,r2,800
1000c7dc:	1000c82c 	andhi	zero,r2,800
1000c7e0:	1000ca00 	call	11000ca0 <_gp+0xfe6c88>
1000c7e4:	1000ca00 	call	11000ca0 <_gp+0xfe6c88>
1000c7e8:	1000c9e8 	cmpgeui	zero,r2,807
1000c7ec:	1000c82c 	andhi	zero,r2,800
1000c7f0:	1000ca00 	call	11000ca0 <_gp+0xfe6c88>
1000c7f4:	1000c9e8 	cmpgeui	zero,r2,807
1000c7f8:	1000ca00 	call	11000ca0 <_gp+0xfe6c88>
1000c7fc:	1000c82c 	andhi	zero,r2,800
1000c800:	1000ca10 	cmplti	zero,r2,808
1000c804:	1000ca10 	cmplti	zero,r2,808
1000c808:	1000ca10 	cmplti	zero,r2,808
1000c80c:	1000cd70 	cmpltui	zero,r2,821
1000c810:	2404b03a 	or	r2,r4,r16
1000c814:	1000711e 	bne	r2,zero,1000c9dc <__muldf3+0x300>
1000c818:	05400204 	movi	r21,8
1000c81c:	0021883a 	mov	r16,zero
1000c820:	002d883a 	mov	r22,zero
1000c824:	01400084 	movi	r5,2
1000c828:	003fcb06 	br	1000c758 <__alt_data_end+0xf800c758>
1000c82c:	500d883a 	mov	r6,r10
1000c830:	00800084 	movi	r2,2
1000c834:	38805926 	beq	r7,r2,1000c99c <__muldf3+0x2c0>
1000c838:	008000c4 	movi	r2,3
1000c83c:	3881bb26 	beq	r7,r2,1000cf2c <__muldf3+0x850>
1000c840:	00800044 	movi	r2,1
1000c844:	3881961e 	bne	r7,r2,1000cea0 <__muldf3+0x7c4>
1000c848:	3027883a 	mov	r19,r6
1000c84c:	0005883a 	mov	r2,zero
1000c850:	0021883a 	mov	r16,zero
1000c854:	002d883a 	mov	r22,zero
1000c858:	1004953a 	slli	r2,r2,20
1000c85c:	98c03fcc 	andi	r3,r19,255
1000c860:	04400434 	movhi	r17,16
1000c864:	8c7fffc4 	addi	r17,r17,-1
1000c868:	180697fa 	slli	r3,r3,31
1000c86c:	8460703a 	and	r16,r16,r17
1000c870:	80a0b03a 	or	r16,r16,r2
1000c874:	80c6b03a 	or	r3,r16,r3
1000c878:	b005883a 	mov	r2,r22
1000c87c:	dfc01117 	ldw	ra,68(sp)
1000c880:	df001017 	ldw	fp,64(sp)
1000c884:	ddc00f17 	ldw	r23,60(sp)
1000c888:	dd800e17 	ldw	r22,56(sp)
1000c88c:	dd400d17 	ldw	r21,52(sp)
1000c890:	dd000c17 	ldw	r20,48(sp)
1000c894:	dcc00b17 	ldw	r19,44(sp)
1000c898:	dc800a17 	ldw	r18,40(sp)
1000c89c:	dc400917 	ldw	r17,36(sp)
1000c8a0:	dc000817 	ldw	r16,32(sp)
1000c8a4:	dec01204 	addi	sp,sp,72
1000c8a8:	f800283a 	ret
1000c8ac:	2404b03a 	or	r2,r4,r16
1000c8b0:	202b883a 	mov	r21,r4
1000c8b4:	10004426 	beq	r2,zero,1000c9c8 <__muldf3+0x2ec>
1000c8b8:	80015126 	beq	r16,zero,1000ce00 <__muldf3+0x724>
1000c8bc:	8009883a 	mov	r4,r16
1000c8c0:	d9800715 	stw	r6,28(sp)
1000c8c4:	d9c00215 	stw	r7,8(sp)
1000c8c8:	da400415 	stw	r9,16(sp)
1000c8cc:	000da480 	call	1000da48 <__clzsi2>
1000c8d0:	d9800717 	ldw	r6,28(sp)
1000c8d4:	d9c00217 	ldw	r7,8(sp)
1000c8d8:	da400417 	ldw	r9,16(sp)
1000c8dc:	113ffd44 	addi	r4,r2,-11
1000c8e0:	00c00704 	movi	r3,28
1000c8e4:	19014216 	blt	r3,r4,1000cdf0 <__muldf3+0x714>
1000c8e8:	00c00744 	movi	r3,29
1000c8ec:	15bffe04 	addi	r22,r2,-8
1000c8f0:	1907c83a 	sub	r3,r3,r4
1000c8f4:	85a0983a 	sll	r16,r16,r22
1000c8f8:	a8c6d83a 	srl	r3,r21,r3
1000c8fc:	adac983a 	sll	r22,r21,r22
1000c900:	1c20b03a 	or	r16,r3,r16
1000c904:	1080fcc4 	addi	r2,r2,1011
1000c908:	00a9c83a 	sub	r20,zero,r2
1000c90c:	002b883a 	mov	r21,zero
1000c910:	000b883a 	mov	r5,zero
1000c914:	003f9006 	br	1000c758 <__alt_data_end+0xf800c758>
1000c918:	3446b03a 	or	r3,r6,r17
1000c91c:	1800281e 	bne	r3,zero,1000c9c0 <__muldf3+0x2e4>
1000c920:	0023883a 	mov	r17,zero
1000c924:	0025883a 	mov	r18,zero
1000c928:	01c00084 	movi	r7,2
1000c92c:	003f9c06 	br	1000c7a0 <__alt_data_end+0xf800c7a0>
1000c930:	3446b03a 	or	r3,r6,r17
1000c934:	18001e26 	beq	r3,zero,1000c9b0 <__muldf3+0x2d4>
1000c938:	88012126 	beq	r17,zero,1000cdc0 <__muldf3+0x6e4>
1000c93c:	8809883a 	mov	r4,r17
1000c940:	d9400215 	stw	r5,8(sp)
1000c944:	d9800715 	stw	r6,28(sp)
1000c948:	da400415 	stw	r9,16(sp)
1000c94c:	da800315 	stw	r10,12(sp)
1000c950:	000da480 	call	1000da48 <__clzsi2>
1000c954:	d9400217 	ldw	r5,8(sp)
1000c958:	d9800717 	ldw	r6,28(sp)
1000c95c:	da400417 	ldw	r9,16(sp)
1000c960:	da800317 	ldw	r10,12(sp)
1000c964:	113ffd44 	addi	r4,r2,-11
1000c968:	00c00704 	movi	r3,28
1000c96c:	19011016 	blt	r3,r4,1000cdb0 <__muldf3+0x6d4>
1000c970:	00c00744 	movi	r3,29
1000c974:	14bffe04 	addi	r18,r2,-8
1000c978:	1907c83a 	sub	r3,r3,r4
1000c97c:	8ca2983a 	sll	r17,r17,r18
1000c980:	30c6d83a 	srl	r3,r6,r3
1000c984:	34a4983a 	sll	r18,r6,r18
1000c988:	1c62b03a 	or	r17,r3,r17
1000c98c:	1080fcc4 	addi	r2,r2,1011
1000c990:	0085c83a 	sub	r2,zero,r2
1000c994:	000f883a 	mov	r7,zero
1000c998:	003f8106 	br	1000c7a0 <__alt_data_end+0xf800c7a0>
1000c99c:	3027883a 	mov	r19,r6
1000c9a0:	0081ffc4 	movi	r2,2047
1000c9a4:	0021883a 	mov	r16,zero
1000c9a8:	002d883a 	mov	r22,zero
1000c9ac:	003faa06 	br	1000c858 <__alt_data_end+0xf800c858>
1000c9b0:	0023883a 	mov	r17,zero
1000c9b4:	0025883a 	mov	r18,zero
1000c9b8:	01c00044 	movi	r7,1
1000c9bc:	003f7806 	br	1000c7a0 <__alt_data_end+0xf800c7a0>
1000c9c0:	01c000c4 	movi	r7,3
1000c9c4:	003f7606 	br	1000c7a0 <__alt_data_end+0xf800c7a0>
1000c9c8:	05400104 	movi	r21,4
1000c9cc:	0021883a 	mov	r16,zero
1000c9d0:	002d883a 	mov	r22,zero
1000c9d4:	01400044 	movi	r5,1
1000c9d8:	003f5f06 	br	1000c758 <__alt_data_end+0xf800c758>
1000c9dc:	05400304 	movi	r21,12
1000c9e0:	014000c4 	movi	r5,3
1000c9e4:	003f5c06 	br	1000c758 <__alt_data_end+0xf800c758>
1000c9e8:	04000434 	movhi	r16,16
1000c9ec:	0027883a 	mov	r19,zero
1000c9f0:	843fffc4 	addi	r16,r16,-1
1000c9f4:	05bfffc4 	movi	r22,-1
1000c9f8:	0081ffc4 	movi	r2,2047
1000c9fc:	003f9606 	br	1000c858 <__alt_data_end+0xf800c858>
1000ca00:	8023883a 	mov	r17,r16
1000ca04:	b025883a 	mov	r18,r22
1000ca08:	280f883a 	mov	r7,r5
1000ca0c:	003f8806 	br	1000c830 <__alt_data_end+0xf800c830>
1000ca10:	8023883a 	mov	r17,r16
1000ca14:	b025883a 	mov	r18,r22
1000ca18:	480d883a 	mov	r6,r9
1000ca1c:	280f883a 	mov	r7,r5
1000ca20:	003f8306 	br	1000c830 <__alt_data_end+0xf800c830>
1000ca24:	b026d43a 	srli	r19,r22,16
1000ca28:	902ed43a 	srli	r23,r18,16
1000ca2c:	b5bfffcc 	andi	r22,r22,65535
1000ca30:	94bfffcc 	andi	r18,r18,65535
1000ca34:	b00b883a 	mov	r5,r22
1000ca38:	9009883a 	mov	r4,r18
1000ca3c:	d8c00515 	stw	r3,20(sp)
1000ca40:	d9800715 	stw	r6,28(sp)
1000ca44:	da000615 	stw	r8,24(sp)
1000ca48:	00006840 	call	10000684 <__mulsi3>
1000ca4c:	980b883a 	mov	r5,r19
1000ca50:	9009883a 	mov	r4,r18
1000ca54:	1029883a 	mov	r20,r2
1000ca58:	00006840 	call	10000684 <__mulsi3>
1000ca5c:	b80b883a 	mov	r5,r23
1000ca60:	9809883a 	mov	r4,r19
1000ca64:	102b883a 	mov	r21,r2
1000ca68:	00006840 	call	10000684 <__mulsi3>
1000ca6c:	b809883a 	mov	r4,r23
1000ca70:	b00b883a 	mov	r5,r22
1000ca74:	1039883a 	mov	fp,r2
1000ca78:	00006840 	call	10000684 <__mulsi3>
1000ca7c:	a008d43a 	srli	r4,r20,16
1000ca80:	1545883a 	add	r2,r2,r21
1000ca84:	d8c00517 	ldw	r3,20(sp)
1000ca88:	2085883a 	add	r2,r4,r2
1000ca8c:	d9800717 	ldw	r6,28(sp)
1000ca90:	da000617 	ldw	r8,24(sp)
1000ca94:	1540022e 	bgeu	r2,r21,1000caa0 <__muldf3+0x3c4>
1000ca98:	01000074 	movhi	r4,1
1000ca9c:	e139883a 	add	fp,fp,r4
1000caa0:	100e943a 	slli	r7,r2,16
1000caa4:	1004d43a 	srli	r2,r2,16
1000caa8:	882ad43a 	srli	r21,r17,16
1000caac:	a53fffcc 	andi	r20,r20,65535
1000cab0:	8c7fffcc 	andi	r17,r17,65535
1000cab4:	3d29883a 	add	r20,r7,r20
1000cab8:	b00b883a 	mov	r5,r22
1000cabc:	8809883a 	mov	r4,r17
1000cac0:	d8c00515 	stw	r3,20(sp)
1000cac4:	d9800715 	stw	r6,28(sp)
1000cac8:	da000615 	stw	r8,24(sp)
1000cacc:	dd000115 	stw	r20,4(sp)
1000cad0:	d8800015 	stw	r2,0(sp)
1000cad4:	00006840 	call	10000684 <__mulsi3>
1000cad8:	980b883a 	mov	r5,r19
1000cadc:	8809883a 	mov	r4,r17
1000cae0:	d8800215 	stw	r2,8(sp)
1000cae4:	00006840 	call	10000684 <__mulsi3>
1000cae8:	9809883a 	mov	r4,r19
1000caec:	a80b883a 	mov	r5,r21
1000caf0:	1029883a 	mov	r20,r2
1000caf4:	00006840 	call	10000684 <__mulsi3>
1000caf8:	b00b883a 	mov	r5,r22
1000cafc:	a809883a 	mov	r4,r21
1000cb00:	d8800415 	stw	r2,16(sp)
1000cb04:	00006840 	call	10000684 <__mulsi3>
1000cb08:	d9c00217 	ldw	r7,8(sp)
1000cb0c:	1505883a 	add	r2,r2,r20
1000cb10:	d8c00517 	ldw	r3,20(sp)
1000cb14:	3826d43a 	srli	r19,r7,16
1000cb18:	d9800717 	ldw	r6,28(sp)
1000cb1c:	da000617 	ldw	r8,24(sp)
1000cb20:	9885883a 	add	r2,r19,r2
1000cb24:	da400417 	ldw	r9,16(sp)
1000cb28:	1500022e 	bgeu	r2,r20,1000cb34 <__muldf3+0x458>
1000cb2c:	01000074 	movhi	r4,1
1000cb30:	4913883a 	add	r9,r9,r4
1000cb34:	1028d43a 	srli	r20,r2,16
1000cb38:	1004943a 	slli	r2,r2,16
1000cb3c:	802cd43a 	srli	r22,r16,16
1000cb40:	843fffcc 	andi	r16,r16,65535
1000cb44:	3cffffcc 	andi	r19,r7,65535
1000cb48:	9009883a 	mov	r4,r18
1000cb4c:	800b883a 	mov	r5,r16
1000cb50:	a269883a 	add	r20,r20,r9
1000cb54:	d8c00515 	stw	r3,20(sp)
1000cb58:	d9800715 	stw	r6,28(sp)
1000cb5c:	da000615 	stw	r8,24(sp)
1000cb60:	14e7883a 	add	r19,r2,r19
1000cb64:	00006840 	call	10000684 <__mulsi3>
1000cb68:	9009883a 	mov	r4,r18
1000cb6c:	b00b883a 	mov	r5,r22
1000cb70:	d8800315 	stw	r2,12(sp)
1000cb74:	00006840 	call	10000684 <__mulsi3>
1000cb78:	b809883a 	mov	r4,r23
1000cb7c:	b00b883a 	mov	r5,r22
1000cb80:	d8800215 	stw	r2,8(sp)
1000cb84:	00006840 	call	10000684 <__mulsi3>
1000cb88:	b80b883a 	mov	r5,r23
1000cb8c:	8009883a 	mov	r4,r16
1000cb90:	d8800415 	stw	r2,16(sp)
1000cb94:	00006840 	call	10000684 <__mulsi3>
1000cb98:	da800317 	ldw	r10,12(sp)
1000cb9c:	d9c00217 	ldw	r7,8(sp)
1000cba0:	d9000017 	ldw	r4,0(sp)
1000cba4:	502ed43a 	srli	r23,r10,16
1000cba8:	11c5883a 	add	r2,r2,r7
1000cbac:	24e5883a 	add	r18,r4,r19
1000cbb0:	b885883a 	add	r2,r23,r2
1000cbb4:	d8c00517 	ldw	r3,20(sp)
1000cbb8:	d9800717 	ldw	r6,28(sp)
1000cbbc:	da000617 	ldw	r8,24(sp)
1000cbc0:	da400417 	ldw	r9,16(sp)
1000cbc4:	11c0022e 	bgeu	r2,r7,1000cbd0 <__muldf3+0x4f4>
1000cbc8:	01000074 	movhi	r4,1
1000cbcc:	4913883a 	add	r9,r9,r4
1000cbd0:	100ed43a 	srli	r7,r2,16
1000cbd4:	1004943a 	slli	r2,r2,16
1000cbd8:	55ffffcc 	andi	r23,r10,65535
1000cbdc:	3a53883a 	add	r9,r7,r9
1000cbe0:	8809883a 	mov	r4,r17
1000cbe4:	800b883a 	mov	r5,r16
1000cbe8:	d8c00515 	stw	r3,20(sp)
1000cbec:	d9800715 	stw	r6,28(sp)
1000cbf0:	da000615 	stw	r8,24(sp)
1000cbf4:	da400415 	stw	r9,16(sp)
1000cbf8:	15ef883a 	add	r23,r2,r23
1000cbfc:	00006840 	call	10000684 <__mulsi3>
1000cc00:	8809883a 	mov	r4,r17
1000cc04:	b00b883a 	mov	r5,r22
1000cc08:	d8800215 	stw	r2,8(sp)
1000cc0c:	00006840 	call	10000684 <__mulsi3>
1000cc10:	b00b883a 	mov	r5,r22
1000cc14:	a809883a 	mov	r4,r21
1000cc18:	d8800315 	stw	r2,12(sp)
1000cc1c:	00006840 	call	10000684 <__mulsi3>
1000cc20:	8009883a 	mov	r4,r16
1000cc24:	a80b883a 	mov	r5,r21
1000cc28:	1023883a 	mov	r17,r2
1000cc2c:	00006840 	call	10000684 <__mulsi3>
1000cc30:	d9c00217 	ldw	r7,8(sp)
1000cc34:	da800317 	ldw	r10,12(sp)
1000cc38:	d8c00517 	ldw	r3,20(sp)
1000cc3c:	3808d43a 	srli	r4,r7,16
1000cc40:	1285883a 	add	r2,r2,r10
1000cc44:	d9800717 	ldw	r6,28(sp)
1000cc48:	2085883a 	add	r2,r4,r2
1000cc4c:	da000617 	ldw	r8,24(sp)
1000cc50:	da400417 	ldw	r9,16(sp)
1000cc54:	1280022e 	bgeu	r2,r10,1000cc60 <__muldf3+0x584>
1000cc58:	01000074 	movhi	r4,1
1000cc5c:	8923883a 	add	r17,r17,r4
1000cc60:	1008943a 	slli	r4,r2,16
1000cc64:	39ffffcc 	andi	r7,r7,65535
1000cc68:	e4b9883a 	add	fp,fp,r18
1000cc6c:	21cf883a 	add	r7,r4,r7
1000cc70:	e4e7803a 	cmpltu	r19,fp,r19
1000cc74:	3d0f883a 	add	r7,r7,r20
1000cc78:	bf39883a 	add	fp,r23,fp
1000cc7c:	99c9883a 	add	r4,r19,r7
1000cc80:	e5ef803a 	cmpltu	r23,fp,r23
1000cc84:	490b883a 	add	r5,r9,r4
1000cc88:	1004d43a 	srli	r2,r2,16
1000cc8c:	b965883a 	add	r18,r23,r5
1000cc90:	24c9803a 	cmpltu	r4,r4,r19
1000cc94:	3d29803a 	cmpltu	r20,r7,r20
1000cc98:	a128b03a 	or	r20,r20,r4
1000cc9c:	95ef803a 	cmpltu	r23,r18,r23
1000cca0:	2a53803a 	cmpltu	r9,r5,r9
1000cca4:	a0a9883a 	add	r20,r20,r2
1000cca8:	4deeb03a 	or	r23,r9,r23
1000ccac:	a5ef883a 	add	r23,r20,r23
1000ccb0:	bc63883a 	add	r17,r23,r17
1000ccb4:	e004927a 	slli	r2,fp,9
1000ccb8:	d9000117 	ldw	r4,4(sp)
1000ccbc:	882e927a 	slli	r23,r17,9
1000ccc0:	9022d5fa 	srli	r17,r18,23
1000ccc4:	e038d5fa 	srli	fp,fp,23
1000ccc8:	1104b03a 	or	r2,r2,r4
1000cccc:	9024927a 	slli	r18,r18,9
1000ccd0:	1004c03a 	cmpne	r2,r2,zero
1000ccd4:	bc62b03a 	or	r17,r23,r17
1000ccd8:	1738b03a 	or	fp,r2,fp
1000ccdc:	8880402c 	andhi	r2,r17,256
1000cce0:	e4a4b03a 	or	r18,fp,r18
1000cce4:	10000726 	beq	r2,zero,1000cd04 <__muldf3+0x628>
1000cce8:	9006d07a 	srli	r3,r18,1
1000ccec:	880497fa 	slli	r2,r17,31
1000ccf0:	9480004c 	andi	r18,r18,1
1000ccf4:	8822d07a 	srli	r17,r17,1
1000ccf8:	1ca4b03a 	or	r18,r3,r18
1000ccfc:	14a4b03a 	or	r18,r2,r18
1000cd00:	4007883a 	mov	r3,r8
1000cd04:	1880ffc4 	addi	r2,r3,1023
1000cd08:	0080460e 	bge	zero,r2,1000ce24 <__muldf3+0x748>
1000cd0c:	910001cc 	andi	r4,r18,7
1000cd10:	20000726 	beq	r4,zero,1000cd30 <__muldf3+0x654>
1000cd14:	910003cc 	andi	r4,r18,15
1000cd18:	01400104 	movi	r5,4
1000cd1c:	21400426 	beq	r4,r5,1000cd30 <__muldf3+0x654>
1000cd20:	9149883a 	add	r4,r18,r5
1000cd24:	24a5803a 	cmpltu	r18,r4,r18
1000cd28:	8ca3883a 	add	r17,r17,r18
1000cd2c:	2025883a 	mov	r18,r4
1000cd30:	8900402c 	andhi	r4,r17,256
1000cd34:	20000426 	beq	r4,zero,1000cd48 <__muldf3+0x66c>
1000cd38:	18810004 	addi	r2,r3,1024
1000cd3c:	00ffc034 	movhi	r3,65280
1000cd40:	18ffffc4 	addi	r3,r3,-1
1000cd44:	88e2703a 	and	r17,r17,r3
1000cd48:	00c1ff84 	movi	r3,2046
1000cd4c:	18bf1316 	blt	r3,r2,1000c99c <__alt_data_end+0xf800c99c>
1000cd50:	882c977a 	slli	r22,r17,29
1000cd54:	9024d0fa 	srli	r18,r18,3
1000cd58:	8822927a 	slli	r17,r17,9
1000cd5c:	1081ffcc 	andi	r2,r2,2047
1000cd60:	b4acb03a 	or	r22,r22,r18
1000cd64:	8820d33a 	srli	r16,r17,12
1000cd68:	3027883a 	mov	r19,r6
1000cd6c:	003eba06 	br	1000c858 <__alt_data_end+0xf800c858>
1000cd70:	8080022c 	andhi	r2,r16,8
1000cd74:	10000926 	beq	r2,zero,1000cd9c <__muldf3+0x6c0>
1000cd78:	8880022c 	andhi	r2,r17,8
1000cd7c:	1000071e 	bne	r2,zero,1000cd9c <__muldf3+0x6c0>
1000cd80:	00800434 	movhi	r2,16
1000cd84:	8c000234 	orhi	r16,r17,8
1000cd88:	10bfffc4 	addi	r2,r2,-1
1000cd8c:	e027883a 	mov	r19,fp
1000cd90:	80a0703a 	and	r16,r16,r2
1000cd94:	902d883a 	mov	r22,r18
1000cd98:	003f1706 	br	1000c9f8 <__alt_data_end+0xf800c9f8>
1000cd9c:	00800434 	movhi	r2,16
1000cda0:	84000234 	orhi	r16,r16,8
1000cda4:	10bfffc4 	addi	r2,r2,-1
1000cda8:	80a0703a 	and	r16,r16,r2
1000cdac:	003f1206 	br	1000c9f8 <__alt_data_end+0xf800c9f8>
1000cdb0:	147ff604 	addi	r17,r2,-40
1000cdb4:	3462983a 	sll	r17,r6,r17
1000cdb8:	0025883a 	mov	r18,zero
1000cdbc:	003ef306 	br	1000c98c <__alt_data_end+0xf800c98c>
1000cdc0:	3009883a 	mov	r4,r6
1000cdc4:	d9400215 	stw	r5,8(sp)
1000cdc8:	d9800715 	stw	r6,28(sp)
1000cdcc:	da400415 	stw	r9,16(sp)
1000cdd0:	da800315 	stw	r10,12(sp)
1000cdd4:	000da480 	call	1000da48 <__clzsi2>
1000cdd8:	10800804 	addi	r2,r2,32
1000cddc:	da800317 	ldw	r10,12(sp)
1000cde0:	da400417 	ldw	r9,16(sp)
1000cde4:	d9800717 	ldw	r6,28(sp)
1000cde8:	d9400217 	ldw	r5,8(sp)
1000cdec:	003edd06 	br	1000c964 <__alt_data_end+0xf800c964>
1000cdf0:	143ff604 	addi	r16,r2,-40
1000cdf4:	ac20983a 	sll	r16,r21,r16
1000cdf8:	002d883a 	mov	r22,zero
1000cdfc:	003ec106 	br	1000c904 <__alt_data_end+0xf800c904>
1000ce00:	d9800715 	stw	r6,28(sp)
1000ce04:	d9c00215 	stw	r7,8(sp)
1000ce08:	da400415 	stw	r9,16(sp)
1000ce0c:	000da480 	call	1000da48 <__clzsi2>
1000ce10:	10800804 	addi	r2,r2,32
1000ce14:	da400417 	ldw	r9,16(sp)
1000ce18:	d9c00217 	ldw	r7,8(sp)
1000ce1c:	d9800717 	ldw	r6,28(sp)
1000ce20:	003eae06 	br	1000c8dc <__alt_data_end+0xf800c8dc>
1000ce24:	00c00044 	movi	r3,1
1000ce28:	1887c83a 	sub	r3,r3,r2
1000ce2c:	01000e04 	movi	r4,56
1000ce30:	20fe8516 	blt	r4,r3,1000c848 <__alt_data_end+0xf800c848>
1000ce34:	010007c4 	movi	r4,31
1000ce38:	20c01b16 	blt	r4,r3,1000cea8 <__muldf3+0x7cc>
1000ce3c:	00800804 	movi	r2,32
1000ce40:	10c5c83a 	sub	r2,r2,r3
1000ce44:	888a983a 	sll	r5,r17,r2
1000ce48:	90c8d83a 	srl	r4,r18,r3
1000ce4c:	9084983a 	sll	r2,r18,r2
1000ce50:	88e2d83a 	srl	r17,r17,r3
1000ce54:	2906b03a 	or	r3,r5,r4
1000ce58:	1004c03a 	cmpne	r2,r2,zero
1000ce5c:	1886b03a 	or	r3,r3,r2
1000ce60:	188001cc 	andi	r2,r3,7
1000ce64:	10000726 	beq	r2,zero,1000ce84 <__muldf3+0x7a8>
1000ce68:	188003cc 	andi	r2,r3,15
1000ce6c:	01000104 	movi	r4,4
1000ce70:	11000426 	beq	r2,r4,1000ce84 <__muldf3+0x7a8>
1000ce74:	1805883a 	mov	r2,r3
1000ce78:	10c00104 	addi	r3,r2,4
1000ce7c:	1885803a 	cmpltu	r2,r3,r2
1000ce80:	88a3883a 	add	r17,r17,r2
1000ce84:	8880202c 	andhi	r2,r17,128
1000ce88:	10001c26 	beq	r2,zero,1000cefc <__muldf3+0x820>
1000ce8c:	3027883a 	mov	r19,r6
1000ce90:	00800044 	movi	r2,1
1000ce94:	0021883a 	mov	r16,zero
1000ce98:	002d883a 	mov	r22,zero
1000ce9c:	003e6e06 	br	1000c858 <__alt_data_end+0xf800c858>
1000cea0:	4007883a 	mov	r3,r8
1000cea4:	003f9706 	br	1000cd04 <__alt_data_end+0xf800cd04>
1000cea8:	017ff844 	movi	r5,-31
1000ceac:	2885c83a 	sub	r2,r5,r2
1000ceb0:	888ad83a 	srl	r5,r17,r2
1000ceb4:	00800804 	movi	r2,32
1000ceb8:	18801a26 	beq	r3,r2,1000cf24 <__muldf3+0x848>
1000cebc:	01001004 	movi	r4,64
1000cec0:	20c7c83a 	sub	r3,r4,r3
1000cec4:	88e2983a 	sll	r17,r17,r3
1000cec8:	8ca4b03a 	or	r18,r17,r18
1000cecc:	9004c03a 	cmpne	r2,r18,zero
1000ced0:	2884b03a 	or	r2,r5,r2
1000ced4:	144001cc 	andi	r17,r2,7
1000ced8:	88000d1e 	bne	r17,zero,1000cf10 <__muldf3+0x834>
1000cedc:	0021883a 	mov	r16,zero
1000cee0:	102cd0fa 	srli	r22,r2,3
1000cee4:	3027883a 	mov	r19,r6
1000cee8:	0005883a 	mov	r2,zero
1000ceec:	b46cb03a 	or	r22,r22,r17
1000cef0:	003e5906 	br	1000c858 <__alt_data_end+0xf800c858>
1000cef4:	1007883a 	mov	r3,r2
1000cef8:	0023883a 	mov	r17,zero
1000cefc:	8820927a 	slli	r16,r17,9
1000cf00:	1805883a 	mov	r2,r3
1000cf04:	8822977a 	slli	r17,r17,29
1000cf08:	8020d33a 	srli	r16,r16,12
1000cf0c:	003ff406 	br	1000cee0 <__alt_data_end+0xf800cee0>
1000cf10:	10c003cc 	andi	r3,r2,15
1000cf14:	01000104 	movi	r4,4
1000cf18:	193ff626 	beq	r3,r4,1000cef4 <__alt_data_end+0xf800cef4>
1000cf1c:	0023883a 	mov	r17,zero
1000cf20:	003fd506 	br	1000ce78 <__alt_data_end+0xf800ce78>
1000cf24:	0023883a 	mov	r17,zero
1000cf28:	003fe706 	br	1000cec8 <__alt_data_end+0xf800cec8>
1000cf2c:	00800434 	movhi	r2,16
1000cf30:	8c000234 	orhi	r16,r17,8
1000cf34:	10bfffc4 	addi	r2,r2,-1
1000cf38:	3027883a 	mov	r19,r6
1000cf3c:	80a0703a 	and	r16,r16,r2
1000cf40:	902d883a 	mov	r22,r18
1000cf44:	003eac06 	br	1000c9f8 <__alt_data_end+0xf800c9f8>

1000cf48 <__subdf3>:
1000cf48:	02000434 	movhi	r8,16
1000cf4c:	423fffc4 	addi	r8,r8,-1
1000cf50:	defffb04 	addi	sp,sp,-20
1000cf54:	2a14703a 	and	r10,r5,r8
1000cf58:	3812d53a 	srli	r9,r7,20
1000cf5c:	3a10703a 	and	r8,r7,r8
1000cf60:	2006d77a 	srli	r3,r4,29
1000cf64:	3004d77a 	srli	r2,r6,29
1000cf68:	dc000015 	stw	r16,0(sp)
1000cf6c:	501490fa 	slli	r10,r10,3
1000cf70:	2820d53a 	srli	r16,r5,20
1000cf74:	401090fa 	slli	r8,r8,3
1000cf78:	dc800215 	stw	r18,8(sp)
1000cf7c:	dc400115 	stw	r17,4(sp)
1000cf80:	dfc00415 	stw	ra,16(sp)
1000cf84:	202290fa 	slli	r17,r4,3
1000cf88:	dcc00315 	stw	r19,12(sp)
1000cf8c:	4a41ffcc 	andi	r9,r9,2047
1000cf90:	0101ffc4 	movi	r4,2047
1000cf94:	2824d7fa 	srli	r18,r5,31
1000cf98:	8401ffcc 	andi	r16,r16,2047
1000cf9c:	50c6b03a 	or	r3,r10,r3
1000cfa0:	380ed7fa 	srli	r7,r7,31
1000cfa4:	408ab03a 	or	r5,r8,r2
1000cfa8:	300c90fa 	slli	r6,r6,3
1000cfac:	49009626 	beq	r9,r4,1000d208 <__subdf3+0x2c0>
1000cfb0:	39c0005c 	xori	r7,r7,1
1000cfb4:	8245c83a 	sub	r2,r16,r9
1000cfb8:	3c807426 	beq	r7,r18,1000d18c <__subdf3+0x244>
1000cfbc:	0080af0e 	bge	zero,r2,1000d27c <__subdf3+0x334>
1000cfc0:	48002a1e 	bne	r9,zero,1000d06c <__subdf3+0x124>
1000cfc4:	2988b03a 	or	r4,r5,r6
1000cfc8:	20009a1e 	bne	r4,zero,1000d234 <__subdf3+0x2ec>
1000cfcc:	888001cc 	andi	r2,r17,7
1000cfd0:	10000726 	beq	r2,zero,1000cff0 <__subdf3+0xa8>
1000cfd4:	888003cc 	andi	r2,r17,15
1000cfd8:	01000104 	movi	r4,4
1000cfdc:	11000426 	beq	r2,r4,1000cff0 <__subdf3+0xa8>
1000cfe0:	890b883a 	add	r5,r17,r4
1000cfe4:	2c63803a 	cmpltu	r17,r5,r17
1000cfe8:	1c47883a 	add	r3,r3,r17
1000cfec:	2823883a 	mov	r17,r5
1000cff0:	1880202c 	andhi	r2,r3,128
1000cff4:	10005926 	beq	r2,zero,1000d15c <__subdf3+0x214>
1000cff8:	84000044 	addi	r16,r16,1
1000cffc:	0081ffc4 	movi	r2,2047
1000d000:	8080be26 	beq	r16,r2,1000d2fc <__subdf3+0x3b4>
1000d004:	017fe034 	movhi	r5,65408
1000d008:	297fffc4 	addi	r5,r5,-1
1000d00c:	1946703a 	and	r3,r3,r5
1000d010:	1804977a 	slli	r2,r3,29
1000d014:	1806927a 	slli	r3,r3,9
1000d018:	8822d0fa 	srli	r17,r17,3
1000d01c:	8401ffcc 	andi	r16,r16,2047
1000d020:	180ad33a 	srli	r5,r3,12
1000d024:	9100004c 	andi	r4,r18,1
1000d028:	1444b03a 	or	r2,r2,r17
1000d02c:	80c1ffcc 	andi	r3,r16,2047
1000d030:	1820953a 	slli	r16,r3,20
1000d034:	20c03fcc 	andi	r3,r4,255
1000d038:	180897fa 	slli	r4,r3,31
1000d03c:	00c00434 	movhi	r3,16
1000d040:	18ffffc4 	addi	r3,r3,-1
1000d044:	28c6703a 	and	r3,r5,r3
1000d048:	1c06b03a 	or	r3,r3,r16
1000d04c:	1906b03a 	or	r3,r3,r4
1000d050:	dfc00417 	ldw	ra,16(sp)
1000d054:	dcc00317 	ldw	r19,12(sp)
1000d058:	dc800217 	ldw	r18,8(sp)
1000d05c:	dc400117 	ldw	r17,4(sp)
1000d060:	dc000017 	ldw	r16,0(sp)
1000d064:	dec00504 	addi	sp,sp,20
1000d068:	f800283a 	ret
1000d06c:	0101ffc4 	movi	r4,2047
1000d070:	813fd626 	beq	r16,r4,1000cfcc <__alt_data_end+0xf800cfcc>
1000d074:	29402034 	orhi	r5,r5,128
1000d078:	01000e04 	movi	r4,56
1000d07c:	2080a316 	blt	r4,r2,1000d30c <__subdf3+0x3c4>
1000d080:	010007c4 	movi	r4,31
1000d084:	2080c616 	blt	r4,r2,1000d3a0 <__subdf3+0x458>
1000d088:	01000804 	movi	r4,32
1000d08c:	2089c83a 	sub	r4,r4,r2
1000d090:	2910983a 	sll	r8,r5,r4
1000d094:	308ed83a 	srl	r7,r6,r2
1000d098:	3108983a 	sll	r4,r6,r4
1000d09c:	2884d83a 	srl	r2,r5,r2
1000d0a0:	41ccb03a 	or	r6,r8,r7
1000d0a4:	2008c03a 	cmpne	r4,r4,zero
1000d0a8:	310cb03a 	or	r6,r6,r4
1000d0ac:	898dc83a 	sub	r6,r17,r6
1000d0b0:	89a3803a 	cmpltu	r17,r17,r6
1000d0b4:	1887c83a 	sub	r3,r3,r2
1000d0b8:	1c47c83a 	sub	r3,r3,r17
1000d0bc:	3023883a 	mov	r17,r6
1000d0c0:	1880202c 	andhi	r2,r3,128
1000d0c4:	10002326 	beq	r2,zero,1000d154 <__subdf3+0x20c>
1000d0c8:	04c02034 	movhi	r19,128
1000d0cc:	9cffffc4 	addi	r19,r19,-1
1000d0d0:	1ce6703a 	and	r19,r3,r19
1000d0d4:	98007a26 	beq	r19,zero,1000d2c0 <__subdf3+0x378>
1000d0d8:	9809883a 	mov	r4,r19
1000d0dc:	000da480 	call	1000da48 <__clzsi2>
1000d0e0:	113ffe04 	addi	r4,r2,-8
1000d0e4:	00c007c4 	movi	r3,31
1000d0e8:	19007b16 	blt	r3,r4,1000d2d8 <__subdf3+0x390>
1000d0ec:	00800804 	movi	r2,32
1000d0f0:	1105c83a 	sub	r2,r2,r4
1000d0f4:	8884d83a 	srl	r2,r17,r2
1000d0f8:	9906983a 	sll	r3,r19,r4
1000d0fc:	8922983a 	sll	r17,r17,r4
1000d100:	10c4b03a 	or	r2,r2,r3
1000d104:	24007816 	blt	r4,r16,1000d2e8 <__subdf3+0x3a0>
1000d108:	2421c83a 	sub	r16,r4,r16
1000d10c:	80c00044 	addi	r3,r16,1
1000d110:	010007c4 	movi	r4,31
1000d114:	20c09516 	blt	r4,r3,1000d36c <__subdf3+0x424>
1000d118:	01400804 	movi	r5,32
1000d11c:	28cbc83a 	sub	r5,r5,r3
1000d120:	88c8d83a 	srl	r4,r17,r3
1000d124:	8962983a 	sll	r17,r17,r5
1000d128:	114a983a 	sll	r5,r2,r5
1000d12c:	10c6d83a 	srl	r3,r2,r3
1000d130:	8804c03a 	cmpne	r2,r17,zero
1000d134:	290ab03a 	or	r5,r5,r4
1000d138:	28a2b03a 	or	r17,r5,r2
1000d13c:	0021883a 	mov	r16,zero
1000d140:	003fa206 	br	1000cfcc <__alt_data_end+0xf800cfcc>
1000d144:	2090b03a 	or	r8,r4,r2
1000d148:	40018e26 	beq	r8,zero,1000d784 <__subdf3+0x83c>
1000d14c:	1007883a 	mov	r3,r2
1000d150:	2023883a 	mov	r17,r4
1000d154:	888001cc 	andi	r2,r17,7
1000d158:	103f9e1e 	bne	r2,zero,1000cfd4 <__alt_data_end+0xf800cfd4>
1000d15c:	1804977a 	slli	r2,r3,29
1000d160:	8822d0fa 	srli	r17,r17,3
1000d164:	1810d0fa 	srli	r8,r3,3
1000d168:	9100004c 	andi	r4,r18,1
1000d16c:	1444b03a 	or	r2,r2,r17
1000d170:	00c1ffc4 	movi	r3,2047
1000d174:	80c02826 	beq	r16,r3,1000d218 <__subdf3+0x2d0>
1000d178:	01400434 	movhi	r5,16
1000d17c:	297fffc4 	addi	r5,r5,-1
1000d180:	80e0703a 	and	r16,r16,r3
1000d184:	414a703a 	and	r5,r8,r5
1000d188:	003fa806 	br	1000d02c <__alt_data_end+0xf800d02c>
1000d18c:	0080630e 	bge	zero,r2,1000d31c <__subdf3+0x3d4>
1000d190:	48003026 	beq	r9,zero,1000d254 <__subdf3+0x30c>
1000d194:	0101ffc4 	movi	r4,2047
1000d198:	813f8c26 	beq	r16,r4,1000cfcc <__alt_data_end+0xf800cfcc>
1000d19c:	29402034 	orhi	r5,r5,128
1000d1a0:	01000e04 	movi	r4,56
1000d1a4:	2080a90e 	bge	r4,r2,1000d44c <__subdf3+0x504>
1000d1a8:	298cb03a 	or	r6,r5,r6
1000d1ac:	3012c03a 	cmpne	r9,r6,zero
1000d1b0:	0005883a 	mov	r2,zero
1000d1b4:	4c53883a 	add	r9,r9,r17
1000d1b8:	4c63803a 	cmpltu	r17,r9,r17
1000d1bc:	10c7883a 	add	r3,r2,r3
1000d1c0:	88c7883a 	add	r3,r17,r3
1000d1c4:	4823883a 	mov	r17,r9
1000d1c8:	1880202c 	andhi	r2,r3,128
1000d1cc:	1000d026 	beq	r2,zero,1000d510 <__subdf3+0x5c8>
1000d1d0:	84000044 	addi	r16,r16,1
1000d1d4:	0081ffc4 	movi	r2,2047
1000d1d8:	8080fe26 	beq	r16,r2,1000d5d4 <__subdf3+0x68c>
1000d1dc:	00bfe034 	movhi	r2,65408
1000d1e0:	10bfffc4 	addi	r2,r2,-1
1000d1e4:	1886703a 	and	r3,r3,r2
1000d1e8:	880ad07a 	srli	r5,r17,1
1000d1ec:	180497fa 	slli	r2,r3,31
1000d1f0:	8900004c 	andi	r4,r17,1
1000d1f4:	2922b03a 	or	r17,r5,r4
1000d1f8:	1806d07a 	srli	r3,r3,1
1000d1fc:	1462b03a 	or	r17,r2,r17
1000d200:	3825883a 	mov	r18,r7
1000d204:	003f7106 	br	1000cfcc <__alt_data_end+0xf800cfcc>
1000d208:	2984b03a 	or	r2,r5,r6
1000d20c:	103f6826 	beq	r2,zero,1000cfb0 <__alt_data_end+0xf800cfb0>
1000d210:	39c03fcc 	andi	r7,r7,255
1000d214:	003f6706 	br	1000cfb4 <__alt_data_end+0xf800cfb4>
1000d218:	4086b03a 	or	r3,r8,r2
1000d21c:	18015226 	beq	r3,zero,1000d768 <__subdf3+0x820>
1000d220:	00c00434 	movhi	r3,16
1000d224:	41400234 	orhi	r5,r8,8
1000d228:	18ffffc4 	addi	r3,r3,-1
1000d22c:	28ca703a 	and	r5,r5,r3
1000d230:	003f7e06 	br	1000d02c <__alt_data_end+0xf800d02c>
1000d234:	10bfffc4 	addi	r2,r2,-1
1000d238:	1000491e 	bne	r2,zero,1000d360 <__subdf3+0x418>
1000d23c:	898fc83a 	sub	r7,r17,r6
1000d240:	89e3803a 	cmpltu	r17,r17,r7
1000d244:	1947c83a 	sub	r3,r3,r5
1000d248:	1c47c83a 	sub	r3,r3,r17
1000d24c:	3823883a 	mov	r17,r7
1000d250:	003f9b06 	br	1000d0c0 <__alt_data_end+0xf800d0c0>
1000d254:	2988b03a 	or	r4,r5,r6
1000d258:	203f5c26 	beq	r4,zero,1000cfcc <__alt_data_end+0xf800cfcc>
1000d25c:	10bfffc4 	addi	r2,r2,-1
1000d260:	1000931e 	bne	r2,zero,1000d4b0 <__subdf3+0x568>
1000d264:	898d883a 	add	r6,r17,r6
1000d268:	3463803a 	cmpltu	r17,r6,r17
1000d26c:	1947883a 	add	r3,r3,r5
1000d270:	88c7883a 	add	r3,r17,r3
1000d274:	3023883a 	mov	r17,r6
1000d278:	003fd306 	br	1000d1c8 <__alt_data_end+0xf800d1c8>
1000d27c:	1000541e 	bne	r2,zero,1000d3d0 <__subdf3+0x488>
1000d280:	80800044 	addi	r2,r16,1
1000d284:	1081ffcc 	andi	r2,r2,2047
1000d288:	01000044 	movi	r4,1
1000d28c:	2080a20e 	bge	r4,r2,1000d518 <__subdf3+0x5d0>
1000d290:	8989c83a 	sub	r4,r17,r6
1000d294:	8905803a 	cmpltu	r2,r17,r4
1000d298:	1967c83a 	sub	r19,r3,r5
1000d29c:	98a7c83a 	sub	r19,r19,r2
1000d2a0:	9880202c 	andhi	r2,r19,128
1000d2a4:	10006326 	beq	r2,zero,1000d434 <__subdf3+0x4ec>
1000d2a8:	3463c83a 	sub	r17,r6,r17
1000d2ac:	28c7c83a 	sub	r3,r5,r3
1000d2b0:	344d803a 	cmpltu	r6,r6,r17
1000d2b4:	19a7c83a 	sub	r19,r3,r6
1000d2b8:	3825883a 	mov	r18,r7
1000d2bc:	983f861e 	bne	r19,zero,1000d0d8 <__alt_data_end+0xf800d0d8>
1000d2c0:	8809883a 	mov	r4,r17
1000d2c4:	000da480 	call	1000da48 <__clzsi2>
1000d2c8:	10800804 	addi	r2,r2,32
1000d2cc:	113ffe04 	addi	r4,r2,-8
1000d2d0:	00c007c4 	movi	r3,31
1000d2d4:	193f850e 	bge	r3,r4,1000d0ec <__alt_data_end+0xf800d0ec>
1000d2d8:	10bff604 	addi	r2,r2,-40
1000d2dc:	8884983a 	sll	r2,r17,r2
1000d2e0:	0023883a 	mov	r17,zero
1000d2e4:	243f880e 	bge	r4,r16,1000d108 <__alt_data_end+0xf800d108>
1000d2e8:	00ffe034 	movhi	r3,65408
1000d2ec:	18ffffc4 	addi	r3,r3,-1
1000d2f0:	8121c83a 	sub	r16,r16,r4
1000d2f4:	10c6703a 	and	r3,r2,r3
1000d2f8:	003f3406 	br	1000cfcc <__alt_data_end+0xf800cfcc>
1000d2fc:	9100004c 	andi	r4,r18,1
1000d300:	000b883a 	mov	r5,zero
1000d304:	0005883a 	mov	r2,zero
1000d308:	003f4806 	br	1000d02c <__alt_data_end+0xf800d02c>
1000d30c:	298cb03a 	or	r6,r5,r6
1000d310:	300cc03a 	cmpne	r6,r6,zero
1000d314:	0005883a 	mov	r2,zero
1000d318:	003f6406 	br	1000d0ac <__alt_data_end+0xf800d0ac>
1000d31c:	10009a1e 	bne	r2,zero,1000d588 <__subdf3+0x640>
1000d320:	82400044 	addi	r9,r16,1
1000d324:	4881ffcc 	andi	r2,r9,2047
1000d328:	02800044 	movi	r10,1
1000d32c:	5080670e 	bge	r10,r2,1000d4cc <__subdf3+0x584>
1000d330:	0081ffc4 	movi	r2,2047
1000d334:	4880af26 	beq	r9,r2,1000d5f4 <__subdf3+0x6ac>
1000d338:	898d883a 	add	r6,r17,r6
1000d33c:	1945883a 	add	r2,r3,r5
1000d340:	3447803a 	cmpltu	r3,r6,r17
1000d344:	1887883a 	add	r3,r3,r2
1000d348:	182297fa 	slli	r17,r3,31
1000d34c:	300cd07a 	srli	r6,r6,1
1000d350:	1806d07a 	srli	r3,r3,1
1000d354:	4821883a 	mov	r16,r9
1000d358:	89a2b03a 	or	r17,r17,r6
1000d35c:	003f1b06 	br	1000cfcc <__alt_data_end+0xf800cfcc>
1000d360:	0101ffc4 	movi	r4,2047
1000d364:	813f441e 	bne	r16,r4,1000d078 <__alt_data_end+0xf800d078>
1000d368:	003f1806 	br	1000cfcc <__alt_data_end+0xf800cfcc>
1000d36c:	843ff844 	addi	r16,r16,-31
1000d370:	01400804 	movi	r5,32
1000d374:	1408d83a 	srl	r4,r2,r16
1000d378:	19405026 	beq	r3,r5,1000d4bc <__subdf3+0x574>
1000d37c:	01401004 	movi	r5,64
1000d380:	28c7c83a 	sub	r3,r5,r3
1000d384:	10c4983a 	sll	r2,r2,r3
1000d388:	88a2b03a 	or	r17,r17,r2
1000d38c:	8822c03a 	cmpne	r17,r17,zero
1000d390:	2462b03a 	or	r17,r4,r17
1000d394:	0007883a 	mov	r3,zero
1000d398:	0021883a 	mov	r16,zero
1000d39c:	003f6d06 	br	1000d154 <__alt_data_end+0xf800d154>
1000d3a0:	11fff804 	addi	r7,r2,-32
1000d3a4:	01000804 	movi	r4,32
1000d3a8:	29ced83a 	srl	r7,r5,r7
1000d3ac:	11004526 	beq	r2,r4,1000d4c4 <__subdf3+0x57c>
1000d3b0:	01001004 	movi	r4,64
1000d3b4:	2089c83a 	sub	r4,r4,r2
1000d3b8:	2904983a 	sll	r2,r5,r4
1000d3bc:	118cb03a 	or	r6,r2,r6
1000d3c0:	300cc03a 	cmpne	r6,r6,zero
1000d3c4:	398cb03a 	or	r6,r7,r6
1000d3c8:	0005883a 	mov	r2,zero
1000d3cc:	003f3706 	br	1000d0ac <__alt_data_end+0xf800d0ac>
1000d3d0:	80002a26 	beq	r16,zero,1000d47c <__subdf3+0x534>
1000d3d4:	0101ffc4 	movi	r4,2047
1000d3d8:	49006626 	beq	r9,r4,1000d574 <__subdf3+0x62c>
1000d3dc:	0085c83a 	sub	r2,zero,r2
1000d3e0:	18c02034 	orhi	r3,r3,128
1000d3e4:	01000e04 	movi	r4,56
1000d3e8:	20807e16 	blt	r4,r2,1000d5e4 <__subdf3+0x69c>
1000d3ec:	010007c4 	movi	r4,31
1000d3f0:	2080e716 	blt	r4,r2,1000d790 <__subdf3+0x848>
1000d3f4:	01000804 	movi	r4,32
1000d3f8:	2089c83a 	sub	r4,r4,r2
1000d3fc:	1914983a 	sll	r10,r3,r4
1000d400:	8890d83a 	srl	r8,r17,r2
1000d404:	8908983a 	sll	r4,r17,r4
1000d408:	1884d83a 	srl	r2,r3,r2
1000d40c:	5222b03a 	or	r17,r10,r8
1000d410:	2006c03a 	cmpne	r3,r4,zero
1000d414:	88e2b03a 	or	r17,r17,r3
1000d418:	3463c83a 	sub	r17,r6,r17
1000d41c:	2885c83a 	sub	r2,r5,r2
1000d420:	344d803a 	cmpltu	r6,r6,r17
1000d424:	1187c83a 	sub	r3,r2,r6
1000d428:	4821883a 	mov	r16,r9
1000d42c:	3825883a 	mov	r18,r7
1000d430:	003f2306 	br	1000d0c0 <__alt_data_end+0xf800d0c0>
1000d434:	24d0b03a 	or	r8,r4,r19
1000d438:	40001b1e 	bne	r8,zero,1000d4a8 <__subdf3+0x560>
1000d43c:	0005883a 	mov	r2,zero
1000d440:	0009883a 	mov	r4,zero
1000d444:	0021883a 	mov	r16,zero
1000d448:	003f4906 	br	1000d170 <__alt_data_end+0xf800d170>
1000d44c:	010007c4 	movi	r4,31
1000d450:	20803a16 	blt	r4,r2,1000d53c <__subdf3+0x5f4>
1000d454:	01000804 	movi	r4,32
1000d458:	2089c83a 	sub	r4,r4,r2
1000d45c:	2912983a 	sll	r9,r5,r4
1000d460:	3090d83a 	srl	r8,r6,r2
1000d464:	3108983a 	sll	r4,r6,r4
1000d468:	2884d83a 	srl	r2,r5,r2
1000d46c:	4a12b03a 	or	r9,r9,r8
1000d470:	2008c03a 	cmpne	r4,r4,zero
1000d474:	4912b03a 	or	r9,r9,r4
1000d478:	003f4e06 	br	1000d1b4 <__alt_data_end+0xf800d1b4>
1000d47c:	1c48b03a 	or	r4,r3,r17
1000d480:	20003c26 	beq	r4,zero,1000d574 <__subdf3+0x62c>
1000d484:	0084303a 	nor	r2,zero,r2
1000d488:	1000381e 	bne	r2,zero,1000d56c <__subdf3+0x624>
1000d48c:	3463c83a 	sub	r17,r6,r17
1000d490:	28c5c83a 	sub	r2,r5,r3
1000d494:	344d803a 	cmpltu	r6,r6,r17
1000d498:	1187c83a 	sub	r3,r2,r6
1000d49c:	4821883a 	mov	r16,r9
1000d4a0:	3825883a 	mov	r18,r7
1000d4a4:	003f0606 	br	1000d0c0 <__alt_data_end+0xf800d0c0>
1000d4a8:	2023883a 	mov	r17,r4
1000d4ac:	003f0906 	br	1000d0d4 <__alt_data_end+0xf800d0d4>
1000d4b0:	0101ffc4 	movi	r4,2047
1000d4b4:	813f3a1e 	bne	r16,r4,1000d1a0 <__alt_data_end+0xf800d1a0>
1000d4b8:	003ec406 	br	1000cfcc <__alt_data_end+0xf800cfcc>
1000d4bc:	0005883a 	mov	r2,zero
1000d4c0:	003fb106 	br	1000d388 <__alt_data_end+0xf800d388>
1000d4c4:	0005883a 	mov	r2,zero
1000d4c8:	003fbc06 	br	1000d3bc <__alt_data_end+0xf800d3bc>
1000d4cc:	1c44b03a 	or	r2,r3,r17
1000d4d0:	80008e1e 	bne	r16,zero,1000d70c <__subdf3+0x7c4>
1000d4d4:	1000c826 	beq	r2,zero,1000d7f8 <__subdf3+0x8b0>
1000d4d8:	2984b03a 	or	r2,r5,r6
1000d4dc:	103ebb26 	beq	r2,zero,1000cfcc <__alt_data_end+0xf800cfcc>
1000d4e0:	8989883a 	add	r4,r17,r6
1000d4e4:	1945883a 	add	r2,r3,r5
1000d4e8:	2447803a 	cmpltu	r3,r4,r17
1000d4ec:	1887883a 	add	r3,r3,r2
1000d4f0:	1880202c 	andhi	r2,r3,128
1000d4f4:	2023883a 	mov	r17,r4
1000d4f8:	103f1626 	beq	r2,zero,1000d154 <__alt_data_end+0xf800d154>
1000d4fc:	00bfe034 	movhi	r2,65408
1000d500:	10bfffc4 	addi	r2,r2,-1
1000d504:	5021883a 	mov	r16,r10
1000d508:	1886703a 	and	r3,r3,r2
1000d50c:	003eaf06 	br	1000cfcc <__alt_data_end+0xf800cfcc>
1000d510:	3825883a 	mov	r18,r7
1000d514:	003f0f06 	br	1000d154 <__alt_data_end+0xf800d154>
1000d518:	1c44b03a 	or	r2,r3,r17
1000d51c:	8000251e 	bne	r16,zero,1000d5b4 <__subdf3+0x66c>
1000d520:	1000661e 	bne	r2,zero,1000d6bc <__subdf3+0x774>
1000d524:	2990b03a 	or	r8,r5,r6
1000d528:	40009626 	beq	r8,zero,1000d784 <__subdf3+0x83c>
1000d52c:	2807883a 	mov	r3,r5
1000d530:	3023883a 	mov	r17,r6
1000d534:	3825883a 	mov	r18,r7
1000d538:	003ea406 	br	1000cfcc <__alt_data_end+0xf800cfcc>
1000d53c:	127ff804 	addi	r9,r2,-32
1000d540:	01000804 	movi	r4,32
1000d544:	2a52d83a 	srl	r9,r5,r9
1000d548:	11008c26 	beq	r2,r4,1000d77c <__subdf3+0x834>
1000d54c:	01001004 	movi	r4,64
1000d550:	2085c83a 	sub	r2,r4,r2
1000d554:	2884983a 	sll	r2,r5,r2
1000d558:	118cb03a 	or	r6,r2,r6
1000d55c:	300cc03a 	cmpne	r6,r6,zero
1000d560:	4992b03a 	or	r9,r9,r6
1000d564:	0005883a 	mov	r2,zero
1000d568:	003f1206 	br	1000d1b4 <__alt_data_end+0xf800d1b4>
1000d56c:	0101ffc4 	movi	r4,2047
1000d570:	493f9c1e 	bne	r9,r4,1000d3e4 <__alt_data_end+0xf800d3e4>
1000d574:	2807883a 	mov	r3,r5
1000d578:	3023883a 	mov	r17,r6
1000d57c:	4821883a 	mov	r16,r9
1000d580:	3825883a 	mov	r18,r7
1000d584:	003e9106 	br	1000cfcc <__alt_data_end+0xf800cfcc>
1000d588:	80001f1e 	bne	r16,zero,1000d608 <__subdf3+0x6c0>
1000d58c:	1c48b03a 	or	r4,r3,r17
1000d590:	20005a26 	beq	r4,zero,1000d6fc <__subdf3+0x7b4>
1000d594:	0084303a 	nor	r2,zero,r2
1000d598:	1000561e 	bne	r2,zero,1000d6f4 <__subdf3+0x7ac>
1000d59c:	89a3883a 	add	r17,r17,r6
1000d5a0:	1945883a 	add	r2,r3,r5
1000d5a4:	898d803a 	cmpltu	r6,r17,r6
1000d5a8:	3087883a 	add	r3,r6,r2
1000d5ac:	4821883a 	mov	r16,r9
1000d5b0:	003f0506 	br	1000d1c8 <__alt_data_end+0xf800d1c8>
1000d5b4:	10002b1e 	bne	r2,zero,1000d664 <__subdf3+0x71c>
1000d5b8:	2984b03a 	or	r2,r5,r6
1000d5bc:	10008026 	beq	r2,zero,1000d7c0 <__subdf3+0x878>
1000d5c0:	2807883a 	mov	r3,r5
1000d5c4:	3023883a 	mov	r17,r6
1000d5c8:	3825883a 	mov	r18,r7
1000d5cc:	0401ffc4 	movi	r16,2047
1000d5d0:	003e7e06 	br	1000cfcc <__alt_data_end+0xf800cfcc>
1000d5d4:	3809883a 	mov	r4,r7
1000d5d8:	0011883a 	mov	r8,zero
1000d5dc:	0005883a 	mov	r2,zero
1000d5e0:	003ee306 	br	1000d170 <__alt_data_end+0xf800d170>
1000d5e4:	1c62b03a 	or	r17,r3,r17
1000d5e8:	8822c03a 	cmpne	r17,r17,zero
1000d5ec:	0005883a 	mov	r2,zero
1000d5f0:	003f8906 	br	1000d418 <__alt_data_end+0xf800d418>
1000d5f4:	3809883a 	mov	r4,r7
1000d5f8:	4821883a 	mov	r16,r9
1000d5fc:	0011883a 	mov	r8,zero
1000d600:	0005883a 	mov	r2,zero
1000d604:	003eda06 	br	1000d170 <__alt_data_end+0xf800d170>
1000d608:	0101ffc4 	movi	r4,2047
1000d60c:	49003b26 	beq	r9,r4,1000d6fc <__subdf3+0x7b4>
1000d610:	0085c83a 	sub	r2,zero,r2
1000d614:	18c02034 	orhi	r3,r3,128
1000d618:	01000e04 	movi	r4,56
1000d61c:	20806e16 	blt	r4,r2,1000d7d8 <__subdf3+0x890>
1000d620:	010007c4 	movi	r4,31
1000d624:	20807716 	blt	r4,r2,1000d804 <__subdf3+0x8bc>
1000d628:	01000804 	movi	r4,32
1000d62c:	2089c83a 	sub	r4,r4,r2
1000d630:	1914983a 	sll	r10,r3,r4
1000d634:	8890d83a 	srl	r8,r17,r2
1000d638:	8908983a 	sll	r4,r17,r4
1000d63c:	1884d83a 	srl	r2,r3,r2
1000d640:	5222b03a 	or	r17,r10,r8
1000d644:	2006c03a 	cmpne	r3,r4,zero
1000d648:	88e2b03a 	or	r17,r17,r3
1000d64c:	89a3883a 	add	r17,r17,r6
1000d650:	1145883a 	add	r2,r2,r5
1000d654:	898d803a 	cmpltu	r6,r17,r6
1000d658:	3087883a 	add	r3,r6,r2
1000d65c:	4821883a 	mov	r16,r9
1000d660:	003ed906 	br	1000d1c8 <__alt_data_end+0xf800d1c8>
1000d664:	2984b03a 	or	r2,r5,r6
1000d668:	10004226 	beq	r2,zero,1000d774 <__subdf3+0x82c>
1000d66c:	1808d0fa 	srli	r4,r3,3
1000d670:	8822d0fa 	srli	r17,r17,3
1000d674:	1806977a 	slli	r3,r3,29
1000d678:	2080022c 	andhi	r2,r4,8
1000d67c:	1c62b03a 	or	r17,r3,r17
1000d680:	10000826 	beq	r2,zero,1000d6a4 <__subdf3+0x75c>
1000d684:	2812d0fa 	srli	r9,r5,3
1000d688:	4880022c 	andhi	r2,r9,8
1000d68c:	1000051e 	bne	r2,zero,1000d6a4 <__subdf3+0x75c>
1000d690:	300cd0fa 	srli	r6,r6,3
1000d694:	2804977a 	slli	r2,r5,29
1000d698:	4809883a 	mov	r4,r9
1000d69c:	3825883a 	mov	r18,r7
1000d6a0:	11a2b03a 	or	r17,r2,r6
1000d6a4:	8806d77a 	srli	r3,r17,29
1000d6a8:	200890fa 	slli	r4,r4,3
1000d6ac:	882290fa 	slli	r17,r17,3
1000d6b0:	0401ffc4 	movi	r16,2047
1000d6b4:	1906b03a 	or	r3,r3,r4
1000d6b8:	003e4406 	br	1000cfcc <__alt_data_end+0xf800cfcc>
1000d6bc:	2984b03a 	or	r2,r5,r6
1000d6c0:	103e4226 	beq	r2,zero,1000cfcc <__alt_data_end+0xf800cfcc>
1000d6c4:	8989c83a 	sub	r4,r17,r6
1000d6c8:	8911803a 	cmpltu	r8,r17,r4
1000d6cc:	1945c83a 	sub	r2,r3,r5
1000d6d0:	1205c83a 	sub	r2,r2,r8
1000d6d4:	1200202c 	andhi	r8,r2,128
1000d6d8:	403e9a26 	beq	r8,zero,1000d144 <__alt_data_end+0xf800d144>
1000d6dc:	3463c83a 	sub	r17,r6,r17
1000d6e0:	28c5c83a 	sub	r2,r5,r3
1000d6e4:	344d803a 	cmpltu	r6,r6,r17
1000d6e8:	1187c83a 	sub	r3,r2,r6
1000d6ec:	3825883a 	mov	r18,r7
1000d6f0:	003e3606 	br	1000cfcc <__alt_data_end+0xf800cfcc>
1000d6f4:	0101ffc4 	movi	r4,2047
1000d6f8:	493fc71e 	bne	r9,r4,1000d618 <__alt_data_end+0xf800d618>
1000d6fc:	2807883a 	mov	r3,r5
1000d700:	3023883a 	mov	r17,r6
1000d704:	4821883a 	mov	r16,r9
1000d708:	003e3006 	br	1000cfcc <__alt_data_end+0xf800cfcc>
1000d70c:	10003626 	beq	r2,zero,1000d7e8 <__subdf3+0x8a0>
1000d710:	2984b03a 	or	r2,r5,r6
1000d714:	10001726 	beq	r2,zero,1000d774 <__subdf3+0x82c>
1000d718:	1808d0fa 	srli	r4,r3,3
1000d71c:	8822d0fa 	srli	r17,r17,3
1000d720:	1806977a 	slli	r3,r3,29
1000d724:	2080022c 	andhi	r2,r4,8
1000d728:	1c62b03a 	or	r17,r3,r17
1000d72c:	10000726 	beq	r2,zero,1000d74c <__subdf3+0x804>
1000d730:	2812d0fa 	srli	r9,r5,3
1000d734:	4880022c 	andhi	r2,r9,8
1000d738:	1000041e 	bne	r2,zero,1000d74c <__subdf3+0x804>
1000d73c:	300cd0fa 	srli	r6,r6,3
1000d740:	2804977a 	slli	r2,r5,29
1000d744:	4809883a 	mov	r4,r9
1000d748:	11a2b03a 	or	r17,r2,r6
1000d74c:	8806d77a 	srli	r3,r17,29
1000d750:	200890fa 	slli	r4,r4,3
1000d754:	882290fa 	slli	r17,r17,3
1000d758:	3825883a 	mov	r18,r7
1000d75c:	1906b03a 	or	r3,r3,r4
1000d760:	0401ffc4 	movi	r16,2047
1000d764:	003e1906 	br	1000cfcc <__alt_data_end+0xf800cfcc>
1000d768:	000b883a 	mov	r5,zero
1000d76c:	0005883a 	mov	r2,zero
1000d770:	003e2e06 	br	1000d02c <__alt_data_end+0xf800d02c>
1000d774:	0401ffc4 	movi	r16,2047
1000d778:	003e1406 	br	1000cfcc <__alt_data_end+0xf800cfcc>
1000d77c:	0005883a 	mov	r2,zero
1000d780:	003f7506 	br	1000d558 <__alt_data_end+0xf800d558>
1000d784:	0005883a 	mov	r2,zero
1000d788:	0009883a 	mov	r4,zero
1000d78c:	003e7806 	br	1000d170 <__alt_data_end+0xf800d170>
1000d790:	123ff804 	addi	r8,r2,-32
1000d794:	01000804 	movi	r4,32
1000d798:	1a10d83a 	srl	r8,r3,r8
1000d79c:	11002526 	beq	r2,r4,1000d834 <__subdf3+0x8ec>
1000d7a0:	01001004 	movi	r4,64
1000d7a4:	2085c83a 	sub	r2,r4,r2
1000d7a8:	1884983a 	sll	r2,r3,r2
1000d7ac:	1444b03a 	or	r2,r2,r17
1000d7b0:	1004c03a 	cmpne	r2,r2,zero
1000d7b4:	40a2b03a 	or	r17,r8,r2
1000d7b8:	0005883a 	mov	r2,zero
1000d7bc:	003f1606 	br	1000d418 <__alt_data_end+0xf800d418>
1000d7c0:	02000434 	movhi	r8,16
1000d7c4:	0009883a 	mov	r4,zero
1000d7c8:	423fffc4 	addi	r8,r8,-1
1000d7cc:	00bfffc4 	movi	r2,-1
1000d7d0:	0401ffc4 	movi	r16,2047
1000d7d4:	003e6606 	br	1000d170 <__alt_data_end+0xf800d170>
1000d7d8:	1c62b03a 	or	r17,r3,r17
1000d7dc:	8822c03a 	cmpne	r17,r17,zero
1000d7e0:	0005883a 	mov	r2,zero
1000d7e4:	003f9906 	br	1000d64c <__alt_data_end+0xf800d64c>
1000d7e8:	2807883a 	mov	r3,r5
1000d7ec:	3023883a 	mov	r17,r6
1000d7f0:	0401ffc4 	movi	r16,2047
1000d7f4:	003df506 	br	1000cfcc <__alt_data_end+0xf800cfcc>
1000d7f8:	2807883a 	mov	r3,r5
1000d7fc:	3023883a 	mov	r17,r6
1000d800:	003df206 	br	1000cfcc <__alt_data_end+0xf800cfcc>
1000d804:	123ff804 	addi	r8,r2,-32
1000d808:	01000804 	movi	r4,32
1000d80c:	1a10d83a 	srl	r8,r3,r8
1000d810:	11000a26 	beq	r2,r4,1000d83c <__subdf3+0x8f4>
1000d814:	01001004 	movi	r4,64
1000d818:	2085c83a 	sub	r2,r4,r2
1000d81c:	1884983a 	sll	r2,r3,r2
1000d820:	1444b03a 	or	r2,r2,r17
1000d824:	1004c03a 	cmpne	r2,r2,zero
1000d828:	40a2b03a 	or	r17,r8,r2
1000d82c:	0005883a 	mov	r2,zero
1000d830:	003f8606 	br	1000d64c <__alt_data_end+0xf800d64c>
1000d834:	0005883a 	mov	r2,zero
1000d838:	003fdc06 	br	1000d7ac <__alt_data_end+0xf800d7ac>
1000d83c:	0005883a 	mov	r2,zero
1000d840:	003ff706 	br	1000d820 <__alt_data_end+0xf800d820>

1000d844 <__fixdfsi>:
1000d844:	280cd53a 	srli	r6,r5,20
1000d848:	00c00434 	movhi	r3,16
1000d84c:	18ffffc4 	addi	r3,r3,-1
1000d850:	3181ffcc 	andi	r6,r6,2047
1000d854:	01c0ff84 	movi	r7,1022
1000d858:	28c6703a 	and	r3,r5,r3
1000d85c:	280ad7fa 	srli	r5,r5,31
1000d860:	3980120e 	bge	r7,r6,1000d8ac <__fixdfsi+0x68>
1000d864:	00810744 	movi	r2,1053
1000d868:	11800c16 	blt	r2,r6,1000d89c <__fixdfsi+0x58>
1000d86c:	00810cc4 	movi	r2,1075
1000d870:	1185c83a 	sub	r2,r2,r6
1000d874:	01c007c4 	movi	r7,31
1000d878:	18c00434 	orhi	r3,r3,16
1000d87c:	38800d16 	blt	r7,r2,1000d8b4 <__fixdfsi+0x70>
1000d880:	31befb44 	addi	r6,r6,-1043
1000d884:	2084d83a 	srl	r2,r4,r2
1000d888:	1986983a 	sll	r3,r3,r6
1000d88c:	1884b03a 	or	r2,r3,r2
1000d890:	28000726 	beq	r5,zero,1000d8b0 <__fixdfsi+0x6c>
1000d894:	0085c83a 	sub	r2,zero,r2
1000d898:	f800283a 	ret
1000d89c:	00a00034 	movhi	r2,32768
1000d8a0:	10bfffc4 	addi	r2,r2,-1
1000d8a4:	2885883a 	add	r2,r5,r2
1000d8a8:	f800283a 	ret
1000d8ac:	0005883a 	mov	r2,zero
1000d8b0:	f800283a 	ret
1000d8b4:	008104c4 	movi	r2,1043
1000d8b8:	1185c83a 	sub	r2,r2,r6
1000d8bc:	1884d83a 	srl	r2,r3,r2
1000d8c0:	003ff306 	br	1000d890 <__alt_data_end+0xf800d890>

1000d8c4 <__floatsidf>:
1000d8c4:	defffd04 	addi	sp,sp,-12
1000d8c8:	dfc00215 	stw	ra,8(sp)
1000d8cc:	dc400115 	stw	r17,4(sp)
1000d8d0:	dc000015 	stw	r16,0(sp)
1000d8d4:	20002b26 	beq	r4,zero,1000d984 <__floatsidf+0xc0>
1000d8d8:	2023883a 	mov	r17,r4
1000d8dc:	2020d7fa 	srli	r16,r4,31
1000d8e0:	20002d16 	blt	r4,zero,1000d998 <__floatsidf+0xd4>
1000d8e4:	8809883a 	mov	r4,r17
1000d8e8:	000da480 	call	1000da48 <__clzsi2>
1000d8ec:	01410784 	movi	r5,1054
1000d8f0:	288bc83a 	sub	r5,r5,r2
1000d8f4:	01010cc4 	movi	r4,1075
1000d8f8:	2149c83a 	sub	r4,r4,r5
1000d8fc:	00c007c4 	movi	r3,31
1000d900:	1900160e 	bge	r3,r4,1000d95c <__floatsidf+0x98>
1000d904:	00c104c4 	movi	r3,1043
1000d908:	1947c83a 	sub	r3,r3,r5
1000d90c:	88c6983a 	sll	r3,r17,r3
1000d910:	00800434 	movhi	r2,16
1000d914:	10bfffc4 	addi	r2,r2,-1
1000d918:	1886703a 	and	r3,r3,r2
1000d91c:	2941ffcc 	andi	r5,r5,2047
1000d920:	800d883a 	mov	r6,r16
1000d924:	0005883a 	mov	r2,zero
1000d928:	280a953a 	slli	r5,r5,20
1000d92c:	31803fcc 	andi	r6,r6,255
1000d930:	01000434 	movhi	r4,16
1000d934:	300c97fa 	slli	r6,r6,31
1000d938:	213fffc4 	addi	r4,r4,-1
1000d93c:	1906703a 	and	r3,r3,r4
1000d940:	1946b03a 	or	r3,r3,r5
1000d944:	1986b03a 	or	r3,r3,r6
1000d948:	dfc00217 	ldw	ra,8(sp)
1000d94c:	dc400117 	ldw	r17,4(sp)
1000d950:	dc000017 	ldw	r16,0(sp)
1000d954:	dec00304 	addi	sp,sp,12
1000d958:	f800283a 	ret
1000d95c:	00c002c4 	movi	r3,11
1000d960:	1887c83a 	sub	r3,r3,r2
1000d964:	88c6d83a 	srl	r3,r17,r3
1000d968:	8904983a 	sll	r2,r17,r4
1000d96c:	01000434 	movhi	r4,16
1000d970:	213fffc4 	addi	r4,r4,-1
1000d974:	2941ffcc 	andi	r5,r5,2047
1000d978:	1906703a 	and	r3,r3,r4
1000d97c:	800d883a 	mov	r6,r16
1000d980:	003fe906 	br	1000d928 <__alt_data_end+0xf800d928>
1000d984:	000d883a 	mov	r6,zero
1000d988:	000b883a 	mov	r5,zero
1000d98c:	0007883a 	mov	r3,zero
1000d990:	0005883a 	mov	r2,zero
1000d994:	003fe406 	br	1000d928 <__alt_data_end+0xf800d928>
1000d998:	0123c83a 	sub	r17,zero,r4
1000d99c:	003fd106 	br	1000d8e4 <__alt_data_end+0xf800d8e4>

1000d9a0 <__floatunsidf>:
1000d9a0:	defffe04 	addi	sp,sp,-8
1000d9a4:	dc000015 	stw	r16,0(sp)
1000d9a8:	dfc00115 	stw	ra,4(sp)
1000d9ac:	2021883a 	mov	r16,r4
1000d9b0:	20002226 	beq	r4,zero,1000da3c <__floatunsidf+0x9c>
1000d9b4:	000da480 	call	1000da48 <__clzsi2>
1000d9b8:	01010784 	movi	r4,1054
1000d9bc:	2089c83a 	sub	r4,r4,r2
1000d9c0:	01810cc4 	movi	r6,1075
1000d9c4:	310dc83a 	sub	r6,r6,r4
1000d9c8:	00c007c4 	movi	r3,31
1000d9cc:	1980120e 	bge	r3,r6,1000da18 <__floatunsidf+0x78>
1000d9d0:	00c104c4 	movi	r3,1043
1000d9d4:	1907c83a 	sub	r3,r3,r4
1000d9d8:	80ca983a 	sll	r5,r16,r3
1000d9dc:	00800434 	movhi	r2,16
1000d9e0:	10bfffc4 	addi	r2,r2,-1
1000d9e4:	2101ffcc 	andi	r4,r4,2047
1000d9e8:	0021883a 	mov	r16,zero
1000d9ec:	288a703a 	and	r5,r5,r2
1000d9f0:	2008953a 	slli	r4,r4,20
1000d9f4:	00c00434 	movhi	r3,16
1000d9f8:	18ffffc4 	addi	r3,r3,-1
1000d9fc:	28c6703a 	and	r3,r5,r3
1000da00:	8005883a 	mov	r2,r16
1000da04:	1906b03a 	or	r3,r3,r4
1000da08:	dfc00117 	ldw	ra,4(sp)
1000da0c:	dc000017 	ldw	r16,0(sp)
1000da10:	dec00204 	addi	sp,sp,8
1000da14:	f800283a 	ret
1000da18:	00c002c4 	movi	r3,11
1000da1c:	188bc83a 	sub	r5,r3,r2
1000da20:	814ad83a 	srl	r5,r16,r5
1000da24:	00c00434 	movhi	r3,16
1000da28:	18ffffc4 	addi	r3,r3,-1
1000da2c:	81a0983a 	sll	r16,r16,r6
1000da30:	2101ffcc 	andi	r4,r4,2047
1000da34:	28ca703a 	and	r5,r5,r3
1000da38:	003fed06 	br	1000d9f0 <__alt_data_end+0xf800d9f0>
1000da3c:	0009883a 	mov	r4,zero
1000da40:	000b883a 	mov	r5,zero
1000da44:	003fea06 	br	1000d9f0 <__alt_data_end+0xf800d9f0>

1000da48 <__clzsi2>:
1000da48:	00bfffd4 	movui	r2,65535
1000da4c:	11000536 	bltu	r2,r4,1000da64 <__clzsi2+0x1c>
1000da50:	00803fc4 	movi	r2,255
1000da54:	11000f36 	bltu	r2,r4,1000da94 <__clzsi2+0x4c>
1000da58:	00800804 	movi	r2,32
1000da5c:	0007883a 	mov	r3,zero
1000da60:	00000506 	br	1000da78 <__clzsi2+0x30>
1000da64:	00804034 	movhi	r2,256
1000da68:	10bfffc4 	addi	r2,r2,-1
1000da6c:	11000c2e 	bgeu	r2,r4,1000daa0 <__clzsi2+0x58>
1000da70:	00800204 	movi	r2,8
1000da74:	00c00604 	movi	r3,24
1000da78:	20c8d83a 	srl	r4,r4,r3
1000da7c:	00c40074 	movhi	r3,4097
1000da80:	18c10e04 	addi	r3,r3,1080
1000da84:	1909883a 	add	r4,r3,r4
1000da88:	20c00003 	ldbu	r3,0(r4)
1000da8c:	10c5c83a 	sub	r2,r2,r3
1000da90:	f800283a 	ret
1000da94:	00800604 	movi	r2,24
1000da98:	00c00204 	movi	r3,8
1000da9c:	003ff606 	br	1000da78 <__alt_data_end+0xf800da78>
1000daa0:	00800404 	movi	r2,16
1000daa4:	1007883a 	mov	r3,r2
1000daa8:	003ff306 	br	1000da78 <__alt_data_end+0xf800da78>

1000daac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000daac:	defffe04 	addi	sp,sp,-8
1000dab0:	dfc00115 	stw	ra,4(sp)
1000dab4:	df000015 	stw	fp,0(sp)
1000dab8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000dabc:	d0a00e17 	ldw	r2,-32712(gp)
1000dac0:	10000326 	beq	r2,zero,1000dad0 <alt_get_errno+0x24>
1000dac4:	d0a00e17 	ldw	r2,-32712(gp)
1000dac8:	103ee83a 	callr	r2
1000dacc:	00000106 	br	1000dad4 <alt_get_errno+0x28>
1000dad0:	d0a6d504 	addi	r2,gp,-25772
}
1000dad4:	e037883a 	mov	sp,fp
1000dad8:	dfc00117 	ldw	ra,4(sp)
1000dadc:	df000017 	ldw	fp,0(sp)
1000dae0:	dec00204 	addi	sp,sp,8
1000dae4:	f800283a 	ret

1000dae8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000dae8:	defffb04 	addi	sp,sp,-20
1000daec:	dfc00415 	stw	ra,16(sp)
1000daf0:	df000315 	stw	fp,12(sp)
1000daf4:	df000304 	addi	fp,sp,12
1000daf8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000dafc:	e0bfff17 	ldw	r2,-4(fp)
1000db00:	10000816 	blt	r2,zero,1000db24 <close+0x3c>
1000db04:	01400304 	movi	r5,12
1000db08:	e13fff17 	ldw	r4,-4(fp)
1000db0c:	00006840 	call	10000684 <__mulsi3>
1000db10:	1007883a 	mov	r3,r2
1000db14:	00840074 	movhi	r2,4097
1000db18:	10838e04 	addi	r2,r2,3640
1000db1c:	1885883a 	add	r2,r3,r2
1000db20:	00000106 	br	1000db28 <close+0x40>
1000db24:	0005883a 	mov	r2,zero
1000db28:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000db2c:	e0bffd17 	ldw	r2,-12(fp)
1000db30:	10001926 	beq	r2,zero,1000db98 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000db34:	e0bffd17 	ldw	r2,-12(fp)
1000db38:	10800017 	ldw	r2,0(r2)
1000db3c:	10800417 	ldw	r2,16(r2)
1000db40:	10000626 	beq	r2,zero,1000db5c <close+0x74>
1000db44:	e0bffd17 	ldw	r2,-12(fp)
1000db48:	10800017 	ldw	r2,0(r2)
1000db4c:	10800417 	ldw	r2,16(r2)
1000db50:	e13ffd17 	ldw	r4,-12(fp)
1000db54:	103ee83a 	callr	r2
1000db58:	00000106 	br	1000db60 <close+0x78>
1000db5c:	0005883a 	mov	r2,zero
1000db60:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000db64:	e13fff17 	ldw	r4,-4(fp)
1000db68:	000e2500 	call	1000e250 <alt_release_fd>
    if (rval < 0)
1000db6c:	e0bffe17 	ldw	r2,-8(fp)
1000db70:	1000070e 	bge	r2,zero,1000db90 <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000db74:	000daac0 	call	1000daac <alt_get_errno>
1000db78:	1007883a 	mov	r3,r2
1000db7c:	e0bffe17 	ldw	r2,-8(fp)
1000db80:	0085c83a 	sub	r2,zero,r2
1000db84:	18800015 	stw	r2,0(r3)
      return -1;
1000db88:	00bfffc4 	movi	r2,-1
1000db8c:	00000706 	br	1000dbac <close+0xc4>
    }
    return 0;
1000db90:	0005883a 	mov	r2,zero
1000db94:	00000506 	br	1000dbac <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000db98:	000daac0 	call	1000daac <alt_get_errno>
1000db9c:	1007883a 	mov	r3,r2
1000dba0:	00801444 	movi	r2,81
1000dba4:	18800015 	stw	r2,0(r3)
    return -1;
1000dba8:	00bfffc4 	movi	r2,-1
  }
}
1000dbac:	e037883a 	mov	sp,fp
1000dbb0:	dfc00117 	ldw	ra,4(sp)
1000dbb4:	df000017 	ldw	fp,0(sp)
1000dbb8:	dec00204 	addi	sp,sp,8
1000dbbc:	f800283a 	ret

1000dbc0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000dbc0:	defffc04 	addi	sp,sp,-16
1000dbc4:	df000315 	stw	fp,12(sp)
1000dbc8:	df000304 	addi	fp,sp,12
1000dbcc:	e13ffd15 	stw	r4,-12(fp)
1000dbd0:	e17ffe15 	stw	r5,-8(fp)
1000dbd4:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000dbd8:	e0bfff17 	ldw	r2,-4(fp)
}
1000dbdc:	e037883a 	mov	sp,fp
1000dbe0:	df000017 	ldw	fp,0(sp)
1000dbe4:	dec00104 	addi	sp,sp,4
1000dbe8:	f800283a 	ret

1000dbec <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1000dbec:	defffd04 	addi	sp,sp,-12
1000dbf0:	df000215 	stw	fp,8(sp)
1000dbf4:	df000204 	addi	fp,sp,8
1000dbf8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1000dbfc:	0001883a 	nop
1000dc00:	e0bfff17 	ldw	r2,-4(fp)
1000dc04:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
1000dc08:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1000dc0c:	10000226 	beq	r2,zero,1000dc18 <_exit+0x2c>
    ALT_SIM_FAIL();
1000dc10:	002af070 	cmpltui	zero,zero,43969
1000dc14:	00000106 	br	1000dc1c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
1000dc18:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1000dc1c:	003fff06 	br	1000dc1c <__alt_data_end+0xf800dc1c>

1000dc20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000dc20:	defffe04 	addi	sp,sp,-8
1000dc24:	dfc00115 	stw	ra,4(sp)
1000dc28:	df000015 	stw	fp,0(sp)
1000dc2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000dc30:	d0a00e17 	ldw	r2,-32712(gp)
1000dc34:	10000326 	beq	r2,zero,1000dc44 <alt_get_errno+0x24>
1000dc38:	d0a00e17 	ldw	r2,-32712(gp)
1000dc3c:	103ee83a 	callr	r2
1000dc40:	00000106 	br	1000dc48 <alt_get_errno+0x28>
1000dc44:	d0a6d504 	addi	r2,gp,-25772
}
1000dc48:	e037883a 	mov	sp,fp
1000dc4c:	dfc00117 	ldw	ra,4(sp)
1000dc50:	df000017 	ldw	fp,0(sp)
1000dc54:	dec00204 	addi	sp,sp,8
1000dc58:	f800283a 	ret

1000dc5c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000dc5c:	defffb04 	addi	sp,sp,-20
1000dc60:	dfc00415 	stw	ra,16(sp)
1000dc64:	df000315 	stw	fp,12(sp)
1000dc68:	df000304 	addi	fp,sp,12
1000dc6c:	e13ffe15 	stw	r4,-8(fp)
1000dc70:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000dc74:	e0bffe17 	ldw	r2,-8(fp)
1000dc78:	10000816 	blt	r2,zero,1000dc9c <fstat+0x40>
1000dc7c:	01400304 	movi	r5,12
1000dc80:	e13ffe17 	ldw	r4,-8(fp)
1000dc84:	00006840 	call	10000684 <__mulsi3>
1000dc88:	1007883a 	mov	r3,r2
1000dc8c:	00840074 	movhi	r2,4097
1000dc90:	10838e04 	addi	r2,r2,3640
1000dc94:	1885883a 	add	r2,r3,r2
1000dc98:	00000106 	br	1000dca0 <fstat+0x44>
1000dc9c:	0005883a 	mov	r2,zero
1000dca0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000dca4:	e0bffd17 	ldw	r2,-12(fp)
1000dca8:	10001026 	beq	r2,zero,1000dcec <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000dcac:	e0bffd17 	ldw	r2,-12(fp)
1000dcb0:	10800017 	ldw	r2,0(r2)
1000dcb4:	10800817 	ldw	r2,32(r2)
1000dcb8:	10000726 	beq	r2,zero,1000dcd8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000dcbc:	e0bffd17 	ldw	r2,-12(fp)
1000dcc0:	10800017 	ldw	r2,0(r2)
1000dcc4:	10800817 	ldw	r2,32(r2)
1000dcc8:	e17fff17 	ldw	r5,-4(fp)
1000dccc:	e13ffd17 	ldw	r4,-12(fp)
1000dcd0:	103ee83a 	callr	r2
1000dcd4:	00000a06 	br	1000dd00 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000dcd8:	e0bfff17 	ldw	r2,-4(fp)
1000dcdc:	00c80004 	movi	r3,8192
1000dce0:	10c00115 	stw	r3,4(r2)
      return 0;
1000dce4:	0005883a 	mov	r2,zero
1000dce8:	00000506 	br	1000dd00 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000dcec:	000dc200 	call	1000dc20 <alt_get_errno>
1000dcf0:	1007883a 	mov	r3,r2
1000dcf4:	00801444 	movi	r2,81
1000dcf8:	18800015 	stw	r2,0(r3)
    return -1;
1000dcfc:	00bfffc4 	movi	r2,-1
  }
}
1000dd00:	e037883a 	mov	sp,fp
1000dd04:	dfc00117 	ldw	ra,4(sp)
1000dd08:	df000017 	ldw	fp,0(sp)
1000dd0c:	dec00204 	addi	sp,sp,8
1000dd10:	f800283a 	ret

1000dd14 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
1000dd14:	deffff04 	addi	sp,sp,-4
1000dd18:	df000015 	stw	fp,0(sp)
1000dd1c:	d839883a 	mov	fp,sp
  return 0;
1000dd20:	0005883a 	mov	r2,zero
}
1000dd24:	e037883a 	mov	sp,fp
1000dd28:	df000017 	ldw	fp,0(sp)
1000dd2c:	dec00104 	addi	sp,sp,4
1000dd30:	f800283a 	ret

1000dd34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000dd34:	defffe04 	addi	sp,sp,-8
1000dd38:	dfc00115 	stw	ra,4(sp)
1000dd3c:	df000015 	stw	fp,0(sp)
1000dd40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000dd44:	d0a00e17 	ldw	r2,-32712(gp)
1000dd48:	10000326 	beq	r2,zero,1000dd58 <alt_get_errno+0x24>
1000dd4c:	d0a00e17 	ldw	r2,-32712(gp)
1000dd50:	103ee83a 	callr	r2
1000dd54:	00000106 	br	1000dd5c <alt_get_errno+0x28>
1000dd58:	d0a6d504 	addi	r2,gp,-25772
}
1000dd5c:	e037883a 	mov	sp,fp
1000dd60:	dfc00117 	ldw	ra,4(sp)
1000dd64:	df000017 	ldw	fp,0(sp)
1000dd68:	dec00204 	addi	sp,sp,8
1000dd6c:	f800283a 	ret

1000dd70 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000dd70:	deffed04 	addi	sp,sp,-76
1000dd74:	dfc01215 	stw	ra,72(sp)
1000dd78:	df001115 	stw	fp,68(sp)
1000dd7c:	df001104 	addi	fp,sp,68
1000dd80:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000dd84:	e0bfff17 	ldw	r2,-4(fp)
1000dd88:	10000816 	blt	r2,zero,1000ddac <isatty+0x3c>
1000dd8c:	01400304 	movi	r5,12
1000dd90:	e13fff17 	ldw	r4,-4(fp)
1000dd94:	00006840 	call	10000684 <__mulsi3>
1000dd98:	1007883a 	mov	r3,r2
1000dd9c:	00840074 	movhi	r2,4097
1000dda0:	10838e04 	addi	r2,r2,3640
1000dda4:	1885883a 	add	r2,r3,r2
1000dda8:	00000106 	br	1000ddb0 <isatty+0x40>
1000ddac:	0005883a 	mov	r2,zero
1000ddb0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000ddb4:	e0bfef17 	ldw	r2,-68(fp)
1000ddb8:	10000e26 	beq	r2,zero,1000ddf4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000ddbc:	e0bfef17 	ldw	r2,-68(fp)
1000ddc0:	10800017 	ldw	r2,0(r2)
1000ddc4:	10800817 	ldw	r2,32(r2)
1000ddc8:	1000021e 	bne	r2,zero,1000ddd4 <isatty+0x64>
    {
      return 1;
1000ddcc:	00800044 	movi	r2,1
1000ddd0:	00000d06 	br	1000de08 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000ddd4:	e0bff004 	addi	r2,fp,-64
1000ddd8:	100b883a 	mov	r5,r2
1000dddc:	e13fff17 	ldw	r4,-4(fp)
1000dde0:	000dc5c0 	call	1000dc5c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000dde4:	e0bff117 	ldw	r2,-60(fp)
1000dde8:	10880020 	cmpeqi	r2,r2,8192
1000ddec:	10803fcc 	andi	r2,r2,255
1000ddf0:	00000506 	br	1000de08 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000ddf4:	000dd340 	call	1000dd34 <alt_get_errno>
1000ddf8:	1007883a 	mov	r3,r2
1000ddfc:	00801444 	movi	r2,81
1000de00:	18800015 	stw	r2,0(r3)
    return 0;
1000de04:	0005883a 	mov	r2,zero
  }
}
1000de08:	e037883a 	mov	sp,fp
1000de0c:	dfc00117 	ldw	ra,4(sp)
1000de10:	df000017 	ldw	fp,0(sp)
1000de14:	dec00204 	addi	sp,sp,8
1000de18:	f800283a 	ret

1000de1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000de1c:	defffe04 	addi	sp,sp,-8
1000de20:	dfc00115 	stw	ra,4(sp)
1000de24:	df000015 	stw	fp,0(sp)
1000de28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000de2c:	d0a00e17 	ldw	r2,-32712(gp)
1000de30:	10000326 	beq	r2,zero,1000de40 <alt_get_errno+0x24>
1000de34:	d0a00e17 	ldw	r2,-32712(gp)
1000de38:	103ee83a 	callr	r2
1000de3c:	00000106 	br	1000de44 <alt_get_errno+0x28>
1000de40:	d0a6d504 	addi	r2,gp,-25772
}
1000de44:	e037883a 	mov	sp,fp
1000de48:	dfc00117 	ldw	ra,4(sp)
1000de4c:	df000017 	ldw	fp,0(sp)
1000de50:	dec00204 	addi	sp,sp,8
1000de54:	f800283a 	ret

1000de58 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
1000de58:	defffb04 	addi	sp,sp,-20
1000de5c:	dfc00415 	stw	ra,16(sp)
1000de60:	df000315 	stw	fp,12(sp)
1000de64:	df000304 	addi	fp,sp,12
1000de68:	e13ffe15 	stw	r4,-8(fp)
1000de6c:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
1000de70:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
1000de74:	e0bffe17 	ldw	r2,-8(fp)
1000de78:	00802f16 	blt	zero,r2,1000df38 <kill+0xe0>
  {
    switch (sig)
1000de7c:	e0bfff17 	ldw	r2,-4(fp)
1000de80:	10800828 	cmpgeui	r2,r2,32
1000de84:	1000291e 	bne	r2,zero,1000df2c <kill+0xd4>
1000de88:	e0bfff17 	ldw	r2,-4(fp)
1000de8c:	100690ba 	slli	r3,r2,2
1000de90:	00840074 	movhi	r2,4097
1000de94:	10b7a904 	addi	r2,r2,-8540
1000de98:	1885883a 	add	r2,r3,r2
1000de9c:	10800017 	ldw	r2,0(r2)
1000dea0:	1000683a 	jmp	r2
1000dea4:	1000df4c 	andi	zero,r2,893
1000dea8:	1000df2c 	andhi	zero,r2,892
1000deac:	1000df2c 	andhi	zero,r2,892
1000deb0:	1000df24 	muli	zero,r2,892
1000deb4:	1000df24 	muli	zero,r2,892
1000deb8:	1000df24 	muli	zero,r2,892
1000debc:	1000df24 	muli	zero,r2,892
1000dec0:	1000df2c 	andhi	zero,r2,892
1000dec4:	1000df24 	muli	zero,r2,892
1000dec8:	1000df24 	muli	zero,r2,892
1000decc:	1000df24 	muli	zero,r2,892
1000ded0:	1000df24 	muli	zero,r2,892
1000ded4:	1000df24 	muli	zero,r2,892
1000ded8:	1000df24 	muli	zero,r2,892
1000dedc:	1000df24 	muli	zero,r2,892
1000dee0:	1000df24 	muli	zero,r2,892
1000dee4:	1000df4c 	andi	zero,r2,893
1000dee8:	1000df2c 	andhi	zero,r2,892
1000deec:	1000df2c 	andhi	zero,r2,892
1000def0:	1000df2c 	andhi	zero,r2,892
1000def4:	1000df4c 	andi	zero,r2,893
1000def8:	1000df2c 	andhi	zero,r2,892
1000defc:	1000df2c 	andhi	zero,r2,892
1000df00:	1000df24 	muli	zero,r2,892
1000df04:	1000df24 	muli	zero,r2,892
1000df08:	1000df24 	muli	zero,r2,892
1000df0c:	1000df24 	muli	zero,r2,892
1000df10:	1000df24 	muli	zero,r2,892
1000df14:	1000df2c 	andhi	zero,r2,892
1000df18:	1000df2c 	andhi	zero,r2,892
1000df1c:	1000df24 	muli	zero,r2,892
1000df20:	1000df24 	muli	zero,r2,892
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
1000df24:	0009883a 	mov	r4,zero
1000df28:	000dbec0 	call	1000dbec <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
1000df2c:	00800584 	movi	r2,22
1000df30:	e0bffd15 	stw	r2,-12(fp)
1000df34:	00000606 	br	1000df50 <kill+0xf8>
    }
  }

  else if (pid > 0)
1000df38:	e0bffe17 	ldw	r2,-8(fp)
1000df3c:	0080040e 	bge	zero,r2,1000df50 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
1000df40:	008000c4 	movi	r2,3
1000df44:	e0bffd15 	stw	r2,-12(fp)
1000df48:	00000106 	br	1000df50 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
1000df4c:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
1000df50:	e0bffd17 	ldw	r2,-12(fp)
1000df54:	10000626 	beq	r2,zero,1000df70 <kill+0x118>
  {
    ALT_ERRNO = status;
1000df58:	000de1c0 	call	1000de1c <alt_get_errno>
1000df5c:	1007883a 	mov	r3,r2
1000df60:	e0bffd17 	ldw	r2,-12(fp)
1000df64:	18800015 	stw	r2,0(r3)
    return -1;
1000df68:	00bfffc4 	movi	r2,-1
1000df6c:	00000106 	br	1000df74 <kill+0x11c>
  }

  return 0;
1000df70:	0005883a 	mov	r2,zero
}
1000df74:	e037883a 	mov	sp,fp
1000df78:	dfc00117 	ldw	ra,4(sp)
1000df7c:	df000017 	ldw	fp,0(sp)
1000df80:	dec00204 	addi	sp,sp,8
1000df84:	f800283a 	ret

1000df88 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000df88:	defffc04 	addi	sp,sp,-16
1000df8c:	df000315 	stw	fp,12(sp)
1000df90:	df000304 	addi	fp,sp,12
1000df94:	e13ffd15 	stw	r4,-12(fp)
1000df98:	e17ffe15 	stw	r5,-8(fp)
1000df9c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000dfa0:	e0fffe17 	ldw	r3,-8(fp)
1000dfa4:	e0bffd17 	ldw	r2,-12(fp)
1000dfa8:	18800c26 	beq	r3,r2,1000dfdc <alt_load_section+0x54>
  {
    while( to != end )
1000dfac:	00000806 	br	1000dfd0 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000dfb0:	e0bffe17 	ldw	r2,-8(fp)
1000dfb4:	10c00104 	addi	r3,r2,4
1000dfb8:	e0fffe15 	stw	r3,-8(fp)
1000dfbc:	e0fffd17 	ldw	r3,-12(fp)
1000dfc0:	19000104 	addi	r4,r3,4
1000dfc4:	e13ffd15 	stw	r4,-12(fp)
1000dfc8:	18c00017 	ldw	r3,0(r3)
1000dfcc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000dfd0:	e0fffe17 	ldw	r3,-8(fp)
1000dfd4:	e0bfff17 	ldw	r2,-4(fp)
1000dfd8:	18bff51e 	bne	r3,r2,1000dfb0 <__alt_data_end+0xf800dfb0>
    {
      *to++ = *from++;
    }
  }
}
1000dfdc:	0001883a 	nop
1000dfe0:	e037883a 	mov	sp,fp
1000dfe4:	df000017 	ldw	fp,0(sp)
1000dfe8:	dec00104 	addi	sp,sp,4
1000dfec:	f800283a 	ret

1000dff0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000dff0:	defffe04 	addi	sp,sp,-8
1000dff4:	dfc00115 	stw	ra,4(sp)
1000dff8:	df000015 	stw	fp,0(sp)
1000dffc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000e000:	01840074 	movhi	r6,4097
1000e004:	31881904 	addi	r6,r6,8292
1000e008:	01440074 	movhi	r5,4097
1000e00c:	29415b04 	addi	r5,r5,1388
1000e010:	01040074 	movhi	r4,4097
1000e014:	21081904 	addi	r4,r4,8292
1000e018:	000df880 	call	1000df88 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000e01c:	01840034 	movhi	r6,4096
1000e020:	31808c04 	addi	r6,r6,560
1000e024:	01440034 	movhi	r5,4096
1000e028:	29400804 	addi	r5,r5,32
1000e02c:	01040034 	movhi	r4,4096
1000e030:	21000804 	addi	r4,r4,32
1000e034:	000df880 	call	1000df88 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000e038:	01840074 	movhi	r6,4097
1000e03c:	31815b04 	addi	r6,r6,1388
1000e040:	01440074 	movhi	r5,4097
1000e044:	29406404 	addi	r5,r5,400
1000e048:	01040074 	movhi	r4,4097
1000e04c:	21006404 	addi	r4,r4,400
1000e050:	000df880 	call	1000df88 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000e054:	000f10c0 	call	1000f10c <alt_dcache_flush_all>
  alt_icache_flush_all();
1000e058:	000f2cc0 	call	1000f2cc <alt_icache_flush_all>
}
1000e05c:	0001883a 	nop
1000e060:	e037883a 	mov	sp,fp
1000e064:	dfc00117 	ldw	ra,4(sp)
1000e068:	df000017 	ldw	fp,0(sp)
1000e06c:	dec00204 	addi	sp,sp,8
1000e070:	f800283a 	ret

1000e074 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e074:	defffe04 	addi	sp,sp,-8
1000e078:	dfc00115 	stw	ra,4(sp)
1000e07c:	df000015 	stw	fp,0(sp)
1000e080:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e084:	d0a00e17 	ldw	r2,-32712(gp)
1000e088:	10000326 	beq	r2,zero,1000e098 <alt_get_errno+0x24>
1000e08c:	d0a00e17 	ldw	r2,-32712(gp)
1000e090:	103ee83a 	callr	r2
1000e094:	00000106 	br	1000e09c <alt_get_errno+0x28>
1000e098:	d0a6d504 	addi	r2,gp,-25772
}
1000e09c:	e037883a 	mov	sp,fp
1000e0a0:	dfc00117 	ldw	ra,4(sp)
1000e0a4:	df000017 	ldw	fp,0(sp)
1000e0a8:	dec00204 	addi	sp,sp,8
1000e0ac:	f800283a 	ret

1000e0b0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000e0b0:	defff904 	addi	sp,sp,-28
1000e0b4:	dfc00615 	stw	ra,24(sp)
1000e0b8:	df000515 	stw	fp,20(sp)
1000e0bc:	df000504 	addi	fp,sp,20
1000e0c0:	e13ffd15 	stw	r4,-12(fp)
1000e0c4:	e17ffe15 	stw	r5,-8(fp)
1000e0c8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000e0cc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000e0d0:	e0bffd17 	ldw	r2,-12(fp)
1000e0d4:	10000816 	blt	r2,zero,1000e0f8 <lseek+0x48>
1000e0d8:	01400304 	movi	r5,12
1000e0dc:	e13ffd17 	ldw	r4,-12(fp)
1000e0e0:	00006840 	call	10000684 <__mulsi3>
1000e0e4:	1007883a 	mov	r3,r2
1000e0e8:	00840074 	movhi	r2,4097
1000e0ec:	10838e04 	addi	r2,r2,3640
1000e0f0:	1885883a 	add	r2,r3,r2
1000e0f4:	00000106 	br	1000e0fc <lseek+0x4c>
1000e0f8:	0005883a 	mov	r2,zero
1000e0fc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000e100:	e0bffc17 	ldw	r2,-16(fp)
1000e104:	10001026 	beq	r2,zero,1000e148 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000e108:	e0bffc17 	ldw	r2,-16(fp)
1000e10c:	10800017 	ldw	r2,0(r2)
1000e110:	10800717 	ldw	r2,28(r2)
1000e114:	10000926 	beq	r2,zero,1000e13c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000e118:	e0bffc17 	ldw	r2,-16(fp)
1000e11c:	10800017 	ldw	r2,0(r2)
1000e120:	10800717 	ldw	r2,28(r2)
1000e124:	e1bfff17 	ldw	r6,-4(fp)
1000e128:	e17ffe17 	ldw	r5,-8(fp)
1000e12c:	e13ffc17 	ldw	r4,-16(fp)
1000e130:	103ee83a 	callr	r2
1000e134:	e0bffb15 	stw	r2,-20(fp)
1000e138:	00000506 	br	1000e150 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000e13c:	00bfde84 	movi	r2,-134
1000e140:	e0bffb15 	stw	r2,-20(fp)
1000e144:	00000206 	br	1000e150 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000e148:	00bfebc4 	movi	r2,-81
1000e14c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000e150:	e0bffb17 	ldw	r2,-20(fp)
1000e154:	1000070e 	bge	r2,zero,1000e174 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1000e158:	000e0740 	call	1000e074 <alt_get_errno>
1000e15c:	1007883a 	mov	r3,r2
1000e160:	e0bffb17 	ldw	r2,-20(fp)
1000e164:	0085c83a 	sub	r2,zero,r2
1000e168:	18800015 	stw	r2,0(r3)
    rc = -1;
1000e16c:	00bfffc4 	movi	r2,-1
1000e170:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000e174:	e0bffb17 	ldw	r2,-20(fp)
}
1000e178:	e037883a 	mov	sp,fp
1000e17c:	dfc00117 	ldw	ra,4(sp)
1000e180:	df000017 	ldw	fp,0(sp)
1000e184:	dec00204 	addi	sp,sp,8
1000e188:	f800283a 	ret

1000e18c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000e18c:	defffd04 	addi	sp,sp,-12
1000e190:	dfc00215 	stw	ra,8(sp)
1000e194:	df000115 	stw	fp,4(sp)
1000e198:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000e19c:	0009883a 	mov	r4,zero
1000e1a0:	000e4f40 	call	1000e4f4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000e1a4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000e1a8:	000e52c0 	call	1000e52c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000e1ac:	01840074 	movhi	r6,4097
1000e1b0:	31815104 	addi	r6,r6,1348
1000e1b4:	01440074 	movhi	r5,4097
1000e1b8:	29415104 	addi	r5,r5,1348
1000e1bc:	01040074 	movhi	r4,4097
1000e1c0:	21015104 	addi	r4,r4,1348
1000e1c4:	000f6700 	call	1000f670 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000e1c8:	000f20c0 	call	1000f20c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000e1cc:	01040074 	movhi	r4,4097
1000e1d0:	213c9b04 	addi	r4,r4,-3476
1000e1d4:	000fe300 	call	1000fe30 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000e1d8:	d0a6d917 	ldw	r2,-25756(gp)
1000e1dc:	d0e6da17 	ldw	r3,-25752(gp)
1000e1e0:	d126db17 	ldw	r4,-25748(gp)
1000e1e4:	200d883a 	mov	r6,r4
1000e1e8:	180b883a 	mov	r5,r3
1000e1ec:	1009883a 	mov	r4,r2
1000e1f0:	00003940 	call	10000394 <main>
1000e1f4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000e1f8:	01000044 	movi	r4,1
1000e1fc:	000dae80 	call	1000dae8 <close>
  exit (result);
1000e200:	e13fff17 	ldw	r4,-4(fp)
1000e204:	000fe440 	call	1000fe44 <exit>

1000e208 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000e208:	defffe04 	addi	sp,sp,-8
1000e20c:	df000115 	stw	fp,4(sp)
1000e210:	df000104 	addi	fp,sp,4
1000e214:	e13fff15 	stw	r4,-4(fp)
}
1000e218:	0001883a 	nop
1000e21c:	e037883a 	mov	sp,fp
1000e220:	df000017 	ldw	fp,0(sp)
1000e224:	dec00104 	addi	sp,sp,4
1000e228:	f800283a 	ret

1000e22c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000e22c:	defffe04 	addi	sp,sp,-8
1000e230:	df000115 	stw	fp,4(sp)
1000e234:	df000104 	addi	fp,sp,4
1000e238:	e13fff15 	stw	r4,-4(fp)
}
1000e23c:	0001883a 	nop
1000e240:	e037883a 	mov	sp,fp
1000e244:	df000017 	ldw	fp,0(sp)
1000e248:	dec00104 	addi	sp,sp,4
1000e24c:	f800283a 	ret

1000e250 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000e250:	defffc04 	addi	sp,sp,-16
1000e254:	dfc00315 	stw	ra,12(sp)
1000e258:	df000215 	stw	fp,8(sp)
1000e25c:	dc000115 	stw	r16,4(sp)
1000e260:	df000204 	addi	fp,sp,8
1000e264:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000e268:	e0bffe17 	ldw	r2,-8(fp)
1000e26c:	108000d0 	cmplti	r2,r2,3
1000e270:	1000111e 	bne	r2,zero,1000e2b8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000e274:	04040074 	movhi	r16,4097
1000e278:	84038e04 	addi	r16,r16,3640
1000e27c:	e0bffe17 	ldw	r2,-8(fp)
1000e280:	01400304 	movi	r5,12
1000e284:	1009883a 	mov	r4,r2
1000e288:	00006840 	call	10000684 <__mulsi3>
1000e28c:	8085883a 	add	r2,r16,r2
1000e290:	10800204 	addi	r2,r2,8
1000e294:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000e298:	04040074 	movhi	r16,4097
1000e29c:	84038e04 	addi	r16,r16,3640
1000e2a0:	e0bffe17 	ldw	r2,-8(fp)
1000e2a4:	01400304 	movi	r5,12
1000e2a8:	1009883a 	mov	r4,r2
1000e2ac:	00006840 	call	10000684 <__mulsi3>
1000e2b0:	8085883a 	add	r2,r16,r2
1000e2b4:	10000015 	stw	zero,0(r2)
  }
}
1000e2b8:	0001883a 	nop
1000e2bc:	e6ffff04 	addi	sp,fp,-4
1000e2c0:	dfc00217 	ldw	ra,8(sp)
1000e2c4:	df000117 	ldw	fp,4(sp)
1000e2c8:	dc000017 	ldw	r16,0(sp)
1000e2cc:	dec00304 	addi	sp,sp,12
1000e2d0:	f800283a 	ret

1000e2d4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000e2d4:	defff904 	addi	sp,sp,-28
1000e2d8:	df000615 	stw	fp,24(sp)
1000e2dc:	df000604 	addi	fp,sp,24
1000e2e0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000e2e4:	0005303a 	rdctl	r2,status
1000e2e8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000e2ec:	e0fffe17 	ldw	r3,-8(fp)
1000e2f0:	00bfff84 	movi	r2,-2
1000e2f4:	1884703a 	and	r2,r3,r2
1000e2f8:	1001703a 	wrctl	status,r2
  
  return context;
1000e2fc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000e300:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000e304:	d0a00f17 	ldw	r2,-32708(gp)
1000e308:	10c000c4 	addi	r3,r2,3
1000e30c:	00bfff04 	movi	r2,-4
1000e310:	1884703a 	and	r2,r3,r2
1000e314:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000e318:	d0e00f17 	ldw	r3,-32708(gp)
1000e31c:	e0bfff17 	ldw	r2,-4(fp)
1000e320:	1887883a 	add	r3,r3,r2
1000e324:	00860034 	movhi	r2,6144
1000e328:	10800004 	addi	r2,r2,0
1000e32c:	10c0062e 	bgeu	r2,r3,1000e348 <sbrk+0x74>
1000e330:	e0bffb17 	ldw	r2,-20(fp)
1000e334:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000e338:	e0bffa17 	ldw	r2,-24(fp)
1000e33c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000e340:	00bfffc4 	movi	r2,-1
1000e344:	00000b06 	br	1000e374 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000e348:	d0a00f17 	ldw	r2,-32708(gp)
1000e34c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1000e350:	d0e00f17 	ldw	r3,-32708(gp)
1000e354:	e0bfff17 	ldw	r2,-4(fp)
1000e358:	1885883a 	add	r2,r3,r2
1000e35c:	d0a00f15 	stw	r2,-32708(gp)
1000e360:	e0bffb17 	ldw	r2,-20(fp)
1000e364:	e0bffc15 	stw	r2,-16(fp)
1000e368:	e0bffc17 	ldw	r2,-16(fp)
1000e36c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000e370:	e0bffd17 	ldw	r2,-12(fp)
} 
1000e374:	e037883a 	mov	sp,fp
1000e378:	df000017 	ldw	fp,0(sp)
1000e37c:	dec00104 	addi	sp,sp,4
1000e380:	f800283a 	ret

1000e384 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e384:	defffe04 	addi	sp,sp,-8
1000e388:	dfc00115 	stw	ra,4(sp)
1000e38c:	df000015 	stw	fp,0(sp)
1000e390:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e394:	d0a00e17 	ldw	r2,-32712(gp)
1000e398:	10000326 	beq	r2,zero,1000e3a8 <alt_get_errno+0x24>
1000e39c:	d0a00e17 	ldw	r2,-32712(gp)
1000e3a0:	103ee83a 	callr	r2
1000e3a4:	00000106 	br	1000e3ac <alt_get_errno+0x28>
1000e3a8:	d0a6d504 	addi	r2,gp,-25772
}
1000e3ac:	e037883a 	mov	sp,fp
1000e3b0:	dfc00117 	ldw	ra,4(sp)
1000e3b4:	df000017 	ldw	fp,0(sp)
1000e3b8:	dec00204 	addi	sp,sp,8
1000e3bc:	f800283a 	ret

1000e3c0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000e3c0:	defff904 	addi	sp,sp,-28
1000e3c4:	dfc00615 	stw	ra,24(sp)
1000e3c8:	df000515 	stw	fp,20(sp)
1000e3cc:	df000504 	addi	fp,sp,20
1000e3d0:	e13ffd15 	stw	r4,-12(fp)
1000e3d4:	e17ffe15 	stw	r5,-8(fp)
1000e3d8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000e3dc:	e0bffd17 	ldw	r2,-12(fp)
1000e3e0:	10000816 	blt	r2,zero,1000e404 <write+0x44>
1000e3e4:	01400304 	movi	r5,12
1000e3e8:	e13ffd17 	ldw	r4,-12(fp)
1000e3ec:	00006840 	call	10000684 <__mulsi3>
1000e3f0:	1007883a 	mov	r3,r2
1000e3f4:	00840074 	movhi	r2,4097
1000e3f8:	10838e04 	addi	r2,r2,3640
1000e3fc:	1885883a 	add	r2,r3,r2
1000e400:	00000106 	br	1000e408 <write+0x48>
1000e404:	0005883a 	mov	r2,zero
1000e408:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000e40c:	e0bffb17 	ldw	r2,-20(fp)
1000e410:	10002126 	beq	r2,zero,1000e498 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000e414:	e0bffb17 	ldw	r2,-20(fp)
1000e418:	10800217 	ldw	r2,8(r2)
1000e41c:	108000cc 	andi	r2,r2,3
1000e420:	10001826 	beq	r2,zero,1000e484 <write+0xc4>
1000e424:	e0bffb17 	ldw	r2,-20(fp)
1000e428:	10800017 	ldw	r2,0(r2)
1000e42c:	10800617 	ldw	r2,24(r2)
1000e430:	10001426 	beq	r2,zero,1000e484 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000e434:	e0bffb17 	ldw	r2,-20(fp)
1000e438:	10800017 	ldw	r2,0(r2)
1000e43c:	10800617 	ldw	r2,24(r2)
1000e440:	e0ffff17 	ldw	r3,-4(fp)
1000e444:	180d883a 	mov	r6,r3
1000e448:	e17ffe17 	ldw	r5,-8(fp)
1000e44c:	e13ffb17 	ldw	r4,-20(fp)
1000e450:	103ee83a 	callr	r2
1000e454:	e0bffc15 	stw	r2,-16(fp)
1000e458:	e0bffc17 	ldw	r2,-16(fp)
1000e45c:	1000070e 	bge	r2,zero,1000e47c <write+0xbc>
      {
        ALT_ERRNO = -rval;
1000e460:	000e3840 	call	1000e384 <alt_get_errno>
1000e464:	1007883a 	mov	r3,r2
1000e468:	e0bffc17 	ldw	r2,-16(fp)
1000e46c:	0085c83a 	sub	r2,zero,r2
1000e470:	18800015 	stw	r2,0(r3)
        return -1;
1000e474:	00bfffc4 	movi	r2,-1
1000e478:	00000c06 	br	1000e4ac <write+0xec>
      }
      return rval;
1000e47c:	e0bffc17 	ldw	r2,-16(fp)
1000e480:	00000a06 	br	1000e4ac <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000e484:	000e3840 	call	1000e384 <alt_get_errno>
1000e488:	1007883a 	mov	r3,r2
1000e48c:	00800344 	movi	r2,13
1000e490:	18800015 	stw	r2,0(r3)
1000e494:	00000406 	br	1000e4a8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000e498:	000e3840 	call	1000e384 <alt_get_errno>
1000e49c:	1007883a 	mov	r3,r2
1000e4a0:	00801444 	movi	r2,81
1000e4a4:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000e4a8:	00bfffc4 	movi	r2,-1
}
1000e4ac:	e037883a 	mov	sp,fp
1000e4b0:	dfc00117 	ldw	ra,4(sp)
1000e4b4:	df000017 	ldw	fp,0(sp)
1000e4b8:	dec00204 	addi	sp,sp,8
1000e4bc:	f800283a 	ret

1000e4c0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000e4c0:	defffd04 	addi	sp,sp,-12
1000e4c4:	dfc00215 	stw	ra,8(sp)
1000e4c8:	df000115 	stw	fp,4(sp)
1000e4cc:	df000104 	addi	fp,sp,4
1000e4d0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000e4d4:	d1600b04 	addi	r5,gp,-32724
1000e4d8:	e13fff17 	ldw	r4,-4(fp)
1000e4dc:	000f1680 	call	1000f168 <alt_dev_llist_insert>
}
1000e4e0:	e037883a 	mov	sp,fp
1000e4e4:	dfc00117 	ldw	ra,4(sp)
1000e4e8:	df000017 	ldw	fp,0(sp)
1000e4ec:	dec00204 	addi	sp,sp,8
1000e4f0:	f800283a 	ret

1000e4f4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000e4f4:	defffd04 	addi	sp,sp,-12
1000e4f8:	dfc00215 	stw	ra,8(sp)
1000e4fc:	df000115 	stw	fp,4(sp)
1000e500:	df000104 	addi	fp,sp,4
1000e504:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
1000e508:	000fb140 	call	1000fb14 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000e50c:	00800044 	movi	r2,1
1000e510:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000e514:	0001883a 	nop
1000e518:	e037883a 	mov	sp,fp
1000e51c:	dfc00117 	ldw	ra,4(sp)
1000e520:	df000017 	ldw	fp,0(sp)
1000e524:	dec00204 	addi	sp,sp,8
1000e528:	f800283a 	ret

1000e52c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000e52c:	defffe04 	addi	sp,sp,-8
1000e530:	dfc00115 	stw	ra,4(sp)
1000e534:	df000015 	stw	fp,0(sp)
1000e538:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000e53c:	000d883a 	mov	r6,zero
1000e540:	000b883a 	mov	r5,zero
1000e544:	01040074 	movhi	r4,4097
1000e548:	2103f804 	addi	r4,r4,4064
1000e54c:	000e6dc0 	call	1000e6dc <altera_avalon_jtag_uart_init>
1000e550:	01040074 	movhi	r4,4097
1000e554:	2103ee04 	addi	r4,r4,4024
1000e558:	000e4c00 	call	1000e4c0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000e55c:	0001883a 	nop
}
1000e560:	0001883a 	nop
1000e564:	e037883a 	mov	sp,fp
1000e568:	dfc00117 	ldw	ra,4(sp)
1000e56c:	df000017 	ldw	fp,0(sp)
1000e570:	dec00204 	addi	sp,sp,8
1000e574:	f800283a 	ret

1000e578 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000e578:	defffa04 	addi	sp,sp,-24
1000e57c:	dfc00515 	stw	ra,20(sp)
1000e580:	df000415 	stw	fp,16(sp)
1000e584:	df000404 	addi	fp,sp,16
1000e588:	e13ffd15 	stw	r4,-12(fp)
1000e58c:	e17ffe15 	stw	r5,-8(fp)
1000e590:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000e594:	e0bffd17 	ldw	r2,-12(fp)
1000e598:	10800017 	ldw	r2,0(r2)
1000e59c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000e5a0:	e0bffc17 	ldw	r2,-16(fp)
1000e5a4:	10c00a04 	addi	r3,r2,40
1000e5a8:	e0bffd17 	ldw	r2,-12(fp)
1000e5ac:	10800217 	ldw	r2,8(r2)
1000e5b0:	100f883a 	mov	r7,r2
1000e5b4:	e1bfff17 	ldw	r6,-4(fp)
1000e5b8:	e17ffe17 	ldw	r5,-8(fp)
1000e5bc:	1809883a 	mov	r4,r3
1000e5c0:	000eba00 	call	1000eba0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000e5c4:	e037883a 	mov	sp,fp
1000e5c8:	dfc00117 	ldw	ra,4(sp)
1000e5cc:	df000017 	ldw	fp,0(sp)
1000e5d0:	dec00204 	addi	sp,sp,8
1000e5d4:	f800283a 	ret

1000e5d8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000e5d8:	defffa04 	addi	sp,sp,-24
1000e5dc:	dfc00515 	stw	ra,20(sp)
1000e5e0:	df000415 	stw	fp,16(sp)
1000e5e4:	df000404 	addi	fp,sp,16
1000e5e8:	e13ffd15 	stw	r4,-12(fp)
1000e5ec:	e17ffe15 	stw	r5,-8(fp)
1000e5f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000e5f4:	e0bffd17 	ldw	r2,-12(fp)
1000e5f8:	10800017 	ldw	r2,0(r2)
1000e5fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000e600:	e0bffc17 	ldw	r2,-16(fp)
1000e604:	10c00a04 	addi	r3,r2,40
1000e608:	e0bffd17 	ldw	r2,-12(fp)
1000e60c:	10800217 	ldw	r2,8(r2)
1000e610:	100f883a 	mov	r7,r2
1000e614:	e1bfff17 	ldw	r6,-4(fp)
1000e618:	e17ffe17 	ldw	r5,-8(fp)
1000e61c:	1809883a 	mov	r4,r3
1000e620:	000edbc0 	call	1000edbc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000e624:	e037883a 	mov	sp,fp
1000e628:	dfc00117 	ldw	ra,4(sp)
1000e62c:	df000017 	ldw	fp,0(sp)
1000e630:	dec00204 	addi	sp,sp,8
1000e634:	f800283a 	ret

1000e638 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000e638:	defffc04 	addi	sp,sp,-16
1000e63c:	dfc00315 	stw	ra,12(sp)
1000e640:	df000215 	stw	fp,8(sp)
1000e644:	df000204 	addi	fp,sp,8
1000e648:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000e64c:	e0bfff17 	ldw	r2,-4(fp)
1000e650:	10800017 	ldw	r2,0(r2)
1000e654:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000e658:	e0bffe17 	ldw	r2,-8(fp)
1000e65c:	10c00a04 	addi	r3,r2,40
1000e660:	e0bfff17 	ldw	r2,-4(fp)
1000e664:	10800217 	ldw	r2,8(r2)
1000e668:	100b883a 	mov	r5,r2
1000e66c:	1809883a 	mov	r4,r3
1000e670:	000ea480 	call	1000ea48 <altera_avalon_jtag_uart_close>
}
1000e674:	e037883a 	mov	sp,fp
1000e678:	dfc00117 	ldw	ra,4(sp)
1000e67c:	df000017 	ldw	fp,0(sp)
1000e680:	dec00204 	addi	sp,sp,8
1000e684:	f800283a 	ret

1000e688 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000e688:	defffa04 	addi	sp,sp,-24
1000e68c:	dfc00515 	stw	ra,20(sp)
1000e690:	df000415 	stw	fp,16(sp)
1000e694:	df000404 	addi	fp,sp,16
1000e698:	e13ffd15 	stw	r4,-12(fp)
1000e69c:	e17ffe15 	stw	r5,-8(fp)
1000e6a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000e6a4:	e0bffd17 	ldw	r2,-12(fp)
1000e6a8:	10800017 	ldw	r2,0(r2)
1000e6ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000e6b0:	e0bffc17 	ldw	r2,-16(fp)
1000e6b4:	10800a04 	addi	r2,r2,40
1000e6b8:	e1bfff17 	ldw	r6,-4(fp)
1000e6bc:	e17ffe17 	ldw	r5,-8(fp)
1000e6c0:	1009883a 	mov	r4,r2
1000e6c4:	000eab00 	call	1000eab0 <altera_avalon_jtag_uart_ioctl>
}
1000e6c8:	e037883a 	mov	sp,fp
1000e6cc:	dfc00117 	ldw	ra,4(sp)
1000e6d0:	df000017 	ldw	fp,0(sp)
1000e6d4:	dec00204 	addi	sp,sp,8
1000e6d8:	f800283a 	ret

1000e6dc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000e6dc:	defffa04 	addi	sp,sp,-24
1000e6e0:	dfc00515 	stw	ra,20(sp)
1000e6e4:	df000415 	stw	fp,16(sp)
1000e6e8:	df000404 	addi	fp,sp,16
1000e6ec:	e13ffd15 	stw	r4,-12(fp)
1000e6f0:	e17ffe15 	stw	r5,-8(fp)
1000e6f4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000e6f8:	e0bffd17 	ldw	r2,-12(fp)
1000e6fc:	00c00044 	movi	r3,1
1000e700:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000e704:	e0bffd17 	ldw	r2,-12(fp)
1000e708:	10800017 	ldw	r2,0(r2)
1000e70c:	10800104 	addi	r2,r2,4
1000e710:	1007883a 	mov	r3,r2
1000e714:	e0bffd17 	ldw	r2,-12(fp)
1000e718:	10800817 	ldw	r2,32(r2)
1000e71c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000e720:	e0bffe17 	ldw	r2,-8(fp)
1000e724:	e0ffff17 	ldw	r3,-4(fp)
1000e728:	d8000015 	stw	zero,0(sp)
1000e72c:	e1fffd17 	ldw	r7,-12(fp)
1000e730:	01840074 	movhi	r6,4097
1000e734:	31b9e704 	addi	r6,r6,-6244
1000e738:	180b883a 	mov	r5,r3
1000e73c:	1009883a 	mov	r4,r2
1000e740:	000f2ec0 	call	1000f2ec <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000e744:	e0bffd17 	ldw	r2,-12(fp)
1000e748:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000e74c:	e0bffd17 	ldw	r2,-12(fp)
1000e750:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000e754:	d0e6dd17 	ldw	r3,-25740(gp)
1000e758:	e1fffd17 	ldw	r7,-12(fp)
1000e75c:	01840074 	movhi	r6,4097
1000e760:	31ba6a04 	addi	r6,r6,-5720
1000e764:	180b883a 	mov	r5,r3
1000e768:	1009883a 	mov	r4,r2
1000e76c:	000efe00 	call	1000efe0 <alt_alarm_start>
1000e770:	1000040e 	bge	r2,zero,1000e784 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000e774:	e0fffd17 	ldw	r3,-12(fp)
1000e778:	00a00034 	movhi	r2,32768
1000e77c:	10bfffc4 	addi	r2,r2,-1
1000e780:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000e784:	0001883a 	nop
1000e788:	e037883a 	mov	sp,fp
1000e78c:	dfc00117 	ldw	ra,4(sp)
1000e790:	df000017 	ldw	fp,0(sp)
1000e794:	dec00204 	addi	sp,sp,8
1000e798:	f800283a 	ret

1000e79c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000e79c:	defff804 	addi	sp,sp,-32
1000e7a0:	df000715 	stw	fp,28(sp)
1000e7a4:	df000704 	addi	fp,sp,28
1000e7a8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000e7ac:	e0bfff17 	ldw	r2,-4(fp)
1000e7b0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000e7b4:	e0bffb17 	ldw	r2,-20(fp)
1000e7b8:	10800017 	ldw	r2,0(r2)
1000e7bc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000e7c0:	e0bffc17 	ldw	r2,-16(fp)
1000e7c4:	10800104 	addi	r2,r2,4
1000e7c8:	10800037 	ldwio	r2,0(r2)
1000e7cc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000e7d0:	e0bffd17 	ldw	r2,-12(fp)
1000e7d4:	1080c00c 	andi	r2,r2,768
1000e7d8:	10006d26 	beq	r2,zero,1000e990 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000e7dc:	e0bffd17 	ldw	r2,-12(fp)
1000e7e0:	1080400c 	andi	r2,r2,256
1000e7e4:	10003526 	beq	r2,zero,1000e8bc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000e7e8:	00800074 	movhi	r2,1
1000e7ec:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e7f0:	e0bffb17 	ldw	r2,-20(fp)
1000e7f4:	10800a17 	ldw	r2,40(r2)
1000e7f8:	10800044 	addi	r2,r2,1
1000e7fc:	1081ffcc 	andi	r2,r2,2047
1000e800:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000e804:	e0bffb17 	ldw	r2,-20(fp)
1000e808:	10c00b17 	ldw	r3,44(r2)
1000e80c:	e0bffe17 	ldw	r2,-8(fp)
1000e810:	18801526 	beq	r3,r2,1000e868 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000e814:	e0bffc17 	ldw	r2,-16(fp)
1000e818:	10800037 	ldwio	r2,0(r2)
1000e81c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000e820:	e0bff917 	ldw	r2,-28(fp)
1000e824:	10a0000c 	andi	r2,r2,32768
1000e828:	10001126 	beq	r2,zero,1000e870 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000e82c:	e0bffb17 	ldw	r2,-20(fp)
1000e830:	10800a17 	ldw	r2,40(r2)
1000e834:	e0fff917 	ldw	r3,-28(fp)
1000e838:	1809883a 	mov	r4,r3
1000e83c:	e0fffb17 	ldw	r3,-20(fp)
1000e840:	1885883a 	add	r2,r3,r2
1000e844:	10800e04 	addi	r2,r2,56
1000e848:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e84c:	e0bffb17 	ldw	r2,-20(fp)
1000e850:	10800a17 	ldw	r2,40(r2)
1000e854:	10800044 	addi	r2,r2,1
1000e858:	10c1ffcc 	andi	r3,r2,2047
1000e85c:	e0bffb17 	ldw	r2,-20(fp)
1000e860:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000e864:	003fe206 	br	1000e7f0 <__alt_data_end+0xf800e7f0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1000e868:	0001883a 	nop
1000e86c:	00000106 	br	1000e874 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
1000e870:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000e874:	e0bff917 	ldw	r2,-28(fp)
1000e878:	10bfffec 	andhi	r2,r2,65535
1000e87c:	10000f26 	beq	r2,zero,1000e8bc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000e880:	e0bffb17 	ldw	r2,-20(fp)
1000e884:	10c00817 	ldw	r3,32(r2)
1000e888:	00bfff84 	movi	r2,-2
1000e88c:	1886703a 	and	r3,r3,r2
1000e890:	e0bffb17 	ldw	r2,-20(fp)
1000e894:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000e898:	e0bffc17 	ldw	r2,-16(fp)
1000e89c:	10800104 	addi	r2,r2,4
1000e8a0:	1007883a 	mov	r3,r2
1000e8a4:	e0bffb17 	ldw	r2,-20(fp)
1000e8a8:	10800817 	ldw	r2,32(r2)
1000e8ac:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000e8b0:	e0bffc17 	ldw	r2,-16(fp)
1000e8b4:	10800104 	addi	r2,r2,4
1000e8b8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000e8bc:	e0bffd17 	ldw	r2,-12(fp)
1000e8c0:	1080800c 	andi	r2,r2,512
1000e8c4:	103fbe26 	beq	r2,zero,1000e7c0 <__alt_data_end+0xf800e7c0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000e8c8:	e0bffd17 	ldw	r2,-12(fp)
1000e8cc:	1004d43a 	srli	r2,r2,16
1000e8d0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000e8d4:	00001406 	br	1000e928 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000e8d8:	e0bffc17 	ldw	r2,-16(fp)
1000e8dc:	e0fffb17 	ldw	r3,-20(fp)
1000e8e0:	18c00d17 	ldw	r3,52(r3)
1000e8e4:	e13ffb17 	ldw	r4,-20(fp)
1000e8e8:	20c7883a 	add	r3,r4,r3
1000e8ec:	18c20e04 	addi	r3,r3,2104
1000e8f0:	18c00003 	ldbu	r3,0(r3)
1000e8f4:	18c03fcc 	andi	r3,r3,255
1000e8f8:	18c0201c 	xori	r3,r3,128
1000e8fc:	18ffe004 	addi	r3,r3,-128
1000e900:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e904:	e0bffb17 	ldw	r2,-20(fp)
1000e908:	10800d17 	ldw	r2,52(r2)
1000e90c:	10800044 	addi	r2,r2,1
1000e910:	10c1ffcc 	andi	r3,r2,2047
1000e914:	e0bffb17 	ldw	r2,-20(fp)
1000e918:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000e91c:	e0bffa17 	ldw	r2,-24(fp)
1000e920:	10bfffc4 	addi	r2,r2,-1
1000e924:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000e928:	e0bffa17 	ldw	r2,-24(fp)
1000e92c:	10000526 	beq	r2,zero,1000e944 <altera_avalon_jtag_uart_irq+0x1a8>
1000e930:	e0bffb17 	ldw	r2,-20(fp)
1000e934:	10c00d17 	ldw	r3,52(r2)
1000e938:	e0bffb17 	ldw	r2,-20(fp)
1000e93c:	10800c17 	ldw	r2,48(r2)
1000e940:	18bfe51e 	bne	r3,r2,1000e8d8 <__alt_data_end+0xf800e8d8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000e944:	e0bffa17 	ldw	r2,-24(fp)
1000e948:	103f9d26 	beq	r2,zero,1000e7c0 <__alt_data_end+0xf800e7c0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000e94c:	e0bffb17 	ldw	r2,-20(fp)
1000e950:	10c00817 	ldw	r3,32(r2)
1000e954:	00bfff44 	movi	r2,-3
1000e958:	1886703a 	and	r3,r3,r2
1000e95c:	e0bffb17 	ldw	r2,-20(fp)
1000e960:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000e964:	e0bffb17 	ldw	r2,-20(fp)
1000e968:	10800017 	ldw	r2,0(r2)
1000e96c:	10800104 	addi	r2,r2,4
1000e970:	1007883a 	mov	r3,r2
1000e974:	e0bffb17 	ldw	r2,-20(fp)
1000e978:	10800817 	ldw	r2,32(r2)
1000e97c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000e980:	e0bffc17 	ldw	r2,-16(fp)
1000e984:	10800104 	addi	r2,r2,4
1000e988:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1000e98c:	003f8c06 	br	1000e7c0 <__alt_data_end+0xf800e7c0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
1000e990:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
1000e994:	0001883a 	nop
1000e998:	e037883a 	mov	sp,fp
1000e99c:	df000017 	ldw	fp,0(sp)
1000e9a0:	dec00104 	addi	sp,sp,4
1000e9a4:	f800283a 	ret

1000e9a8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000e9a8:	defff804 	addi	sp,sp,-32
1000e9ac:	df000715 	stw	fp,28(sp)
1000e9b0:	df000704 	addi	fp,sp,28
1000e9b4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000e9b8:	e0bffb17 	ldw	r2,-20(fp)
1000e9bc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000e9c0:	e0bff917 	ldw	r2,-28(fp)
1000e9c4:	10800017 	ldw	r2,0(r2)
1000e9c8:	10800104 	addi	r2,r2,4
1000e9cc:	10800037 	ldwio	r2,0(r2)
1000e9d0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1000e9d4:	e0bffa17 	ldw	r2,-24(fp)
1000e9d8:	1081000c 	andi	r2,r2,1024
1000e9dc:	10000b26 	beq	r2,zero,1000ea0c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000e9e0:	e0bff917 	ldw	r2,-28(fp)
1000e9e4:	10800017 	ldw	r2,0(r2)
1000e9e8:	10800104 	addi	r2,r2,4
1000e9ec:	1007883a 	mov	r3,r2
1000e9f0:	e0bff917 	ldw	r2,-28(fp)
1000e9f4:	10800817 	ldw	r2,32(r2)
1000e9f8:	10810014 	ori	r2,r2,1024
1000e9fc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1000ea00:	e0bff917 	ldw	r2,-28(fp)
1000ea04:	10000915 	stw	zero,36(r2)
1000ea08:	00000a06 	br	1000ea34 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1000ea0c:	e0bff917 	ldw	r2,-28(fp)
1000ea10:	10c00917 	ldw	r3,36(r2)
1000ea14:	00a00034 	movhi	r2,32768
1000ea18:	10bfff04 	addi	r2,r2,-4
1000ea1c:	10c00536 	bltu	r2,r3,1000ea34 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1000ea20:	e0bff917 	ldw	r2,-28(fp)
1000ea24:	10800917 	ldw	r2,36(r2)
1000ea28:	10c00044 	addi	r3,r2,1
1000ea2c:	e0bff917 	ldw	r2,-28(fp)
1000ea30:	10c00915 	stw	r3,36(r2)
1000ea34:	d0a6dd17 	ldw	r2,-25740(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000ea38:	e037883a 	mov	sp,fp
1000ea3c:	df000017 	ldw	fp,0(sp)
1000ea40:	dec00104 	addi	sp,sp,4
1000ea44:	f800283a 	ret

1000ea48 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000ea48:	defffd04 	addi	sp,sp,-12
1000ea4c:	df000215 	stw	fp,8(sp)
1000ea50:	df000204 	addi	fp,sp,8
1000ea54:	e13ffe15 	stw	r4,-8(fp)
1000ea58:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000ea5c:	00000506 	br	1000ea74 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1000ea60:	e0bfff17 	ldw	r2,-4(fp)
1000ea64:	1090000c 	andi	r2,r2,16384
1000ea68:	10000226 	beq	r2,zero,1000ea74 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1000ea6c:	00bffd44 	movi	r2,-11
1000ea70:	00000b06 	br	1000eaa0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000ea74:	e0bffe17 	ldw	r2,-8(fp)
1000ea78:	10c00d17 	ldw	r3,52(r2)
1000ea7c:	e0bffe17 	ldw	r2,-8(fp)
1000ea80:	10800c17 	ldw	r2,48(r2)
1000ea84:	18800526 	beq	r3,r2,1000ea9c <altera_avalon_jtag_uart_close+0x54>
1000ea88:	e0bffe17 	ldw	r2,-8(fp)
1000ea8c:	10c00917 	ldw	r3,36(r2)
1000ea90:	e0bffe17 	ldw	r2,-8(fp)
1000ea94:	10800117 	ldw	r2,4(r2)
1000ea98:	18bff136 	bltu	r3,r2,1000ea60 <__alt_data_end+0xf800ea60>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1000ea9c:	0005883a 	mov	r2,zero
}
1000eaa0:	e037883a 	mov	sp,fp
1000eaa4:	df000017 	ldw	fp,0(sp)
1000eaa8:	dec00104 	addi	sp,sp,4
1000eaac:	f800283a 	ret

1000eab0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1000eab0:	defffa04 	addi	sp,sp,-24
1000eab4:	df000515 	stw	fp,20(sp)
1000eab8:	df000504 	addi	fp,sp,20
1000eabc:	e13ffd15 	stw	r4,-12(fp)
1000eac0:	e17ffe15 	stw	r5,-8(fp)
1000eac4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1000eac8:	00bff9c4 	movi	r2,-25
1000eacc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1000ead0:	e0bffe17 	ldw	r2,-8(fp)
1000ead4:	10da8060 	cmpeqi	r3,r2,27137
1000ead8:	1800031e 	bne	r3,zero,1000eae8 <altera_avalon_jtag_uart_ioctl+0x38>
1000eadc:	109a80a0 	cmpeqi	r2,r2,27138
1000eae0:	1000181e 	bne	r2,zero,1000eb44 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
1000eae4:	00002906 	br	1000eb8c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1000eae8:	e0bffd17 	ldw	r2,-12(fp)
1000eaec:	10c00117 	ldw	r3,4(r2)
1000eaf0:	00a00034 	movhi	r2,32768
1000eaf4:	10bfffc4 	addi	r2,r2,-1
1000eaf8:	18802126 	beq	r3,r2,1000eb80 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
1000eafc:	e0bfff17 	ldw	r2,-4(fp)
1000eb00:	10800017 	ldw	r2,0(r2)
1000eb04:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000eb08:	e0bffc17 	ldw	r2,-16(fp)
1000eb0c:	10800090 	cmplti	r2,r2,2
1000eb10:	1000061e 	bne	r2,zero,1000eb2c <altera_avalon_jtag_uart_ioctl+0x7c>
1000eb14:	e0fffc17 	ldw	r3,-16(fp)
1000eb18:	00a00034 	movhi	r2,32768
1000eb1c:	10bfffc4 	addi	r2,r2,-1
1000eb20:	18800226 	beq	r3,r2,1000eb2c <altera_avalon_jtag_uart_ioctl+0x7c>
1000eb24:	e0bffc17 	ldw	r2,-16(fp)
1000eb28:	00000206 	br	1000eb34 <altera_avalon_jtag_uart_ioctl+0x84>
1000eb2c:	00a00034 	movhi	r2,32768
1000eb30:	10bfff84 	addi	r2,r2,-2
1000eb34:	e0fffd17 	ldw	r3,-12(fp)
1000eb38:	18800115 	stw	r2,4(r3)
      rc = 0;
1000eb3c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000eb40:	00000f06 	br	1000eb80 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000eb44:	e0bffd17 	ldw	r2,-12(fp)
1000eb48:	10c00117 	ldw	r3,4(r2)
1000eb4c:	00a00034 	movhi	r2,32768
1000eb50:	10bfffc4 	addi	r2,r2,-1
1000eb54:	18800c26 	beq	r3,r2,1000eb88 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1000eb58:	e0bffd17 	ldw	r2,-12(fp)
1000eb5c:	10c00917 	ldw	r3,36(r2)
1000eb60:	e0bffd17 	ldw	r2,-12(fp)
1000eb64:	10800117 	ldw	r2,4(r2)
1000eb68:	1885803a 	cmpltu	r2,r3,r2
1000eb6c:	10c03fcc 	andi	r3,r2,255
1000eb70:	e0bfff17 	ldw	r2,-4(fp)
1000eb74:	10c00015 	stw	r3,0(r2)
      rc = 0;
1000eb78:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000eb7c:	00000206 	br	1000eb88 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
1000eb80:	0001883a 	nop
1000eb84:	00000106 	br	1000eb8c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
1000eb88:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000eb8c:	e0bffb17 	ldw	r2,-20(fp)
}
1000eb90:	e037883a 	mov	sp,fp
1000eb94:	df000017 	ldw	fp,0(sp)
1000eb98:	dec00104 	addi	sp,sp,4
1000eb9c:	f800283a 	ret

1000eba0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1000eba0:	defff304 	addi	sp,sp,-52
1000eba4:	dfc00c15 	stw	ra,48(sp)
1000eba8:	df000b15 	stw	fp,44(sp)
1000ebac:	df000b04 	addi	fp,sp,44
1000ebb0:	e13ffc15 	stw	r4,-16(fp)
1000ebb4:	e17ffd15 	stw	r5,-12(fp)
1000ebb8:	e1bffe15 	stw	r6,-8(fp)
1000ebbc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1000ebc0:	e0bffd17 	ldw	r2,-12(fp)
1000ebc4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000ebc8:	00004706 	br	1000ece8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1000ebcc:	e0bffc17 	ldw	r2,-16(fp)
1000ebd0:	10800a17 	ldw	r2,40(r2)
1000ebd4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1000ebd8:	e0bffc17 	ldw	r2,-16(fp)
1000ebdc:	10800b17 	ldw	r2,44(r2)
1000ebe0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1000ebe4:	e0fff717 	ldw	r3,-36(fp)
1000ebe8:	e0bff817 	ldw	r2,-32(fp)
1000ebec:	18800536 	bltu	r3,r2,1000ec04 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1000ebf0:	e0fff717 	ldw	r3,-36(fp)
1000ebf4:	e0bff817 	ldw	r2,-32(fp)
1000ebf8:	1885c83a 	sub	r2,r3,r2
1000ebfc:	e0bff615 	stw	r2,-40(fp)
1000ec00:	00000406 	br	1000ec14 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1000ec04:	00c20004 	movi	r3,2048
1000ec08:	e0bff817 	ldw	r2,-32(fp)
1000ec0c:	1885c83a 	sub	r2,r3,r2
1000ec10:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000ec14:	e0bff617 	ldw	r2,-40(fp)
1000ec18:	10001e26 	beq	r2,zero,1000ec94 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
1000ec1c:	e0fffe17 	ldw	r3,-8(fp)
1000ec20:	e0bff617 	ldw	r2,-40(fp)
1000ec24:	1880022e 	bgeu	r3,r2,1000ec30 <altera_avalon_jtag_uart_read+0x90>
        n = space;
1000ec28:	e0bffe17 	ldw	r2,-8(fp)
1000ec2c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1000ec30:	e0bffc17 	ldw	r2,-16(fp)
1000ec34:	10c00e04 	addi	r3,r2,56
1000ec38:	e0bff817 	ldw	r2,-32(fp)
1000ec3c:	1885883a 	add	r2,r3,r2
1000ec40:	e1bff617 	ldw	r6,-40(fp)
1000ec44:	100b883a 	mov	r5,r2
1000ec48:	e13ff517 	ldw	r4,-44(fp)
1000ec4c:	0001cd00 	call	10001cd0 <memcpy>
      ptr   += n;
1000ec50:	e0fff517 	ldw	r3,-44(fp)
1000ec54:	e0bff617 	ldw	r2,-40(fp)
1000ec58:	1885883a 	add	r2,r3,r2
1000ec5c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1000ec60:	e0fffe17 	ldw	r3,-8(fp)
1000ec64:	e0bff617 	ldw	r2,-40(fp)
1000ec68:	1885c83a 	sub	r2,r3,r2
1000ec6c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000ec70:	e0fff817 	ldw	r3,-32(fp)
1000ec74:	e0bff617 	ldw	r2,-40(fp)
1000ec78:	1885883a 	add	r2,r3,r2
1000ec7c:	10c1ffcc 	andi	r3,r2,2047
1000ec80:	e0bffc17 	ldw	r2,-16(fp)
1000ec84:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1000ec88:	e0bffe17 	ldw	r2,-8(fp)
1000ec8c:	00bfcf16 	blt	zero,r2,1000ebcc <__alt_data_end+0xf800ebcc>
1000ec90:	00000106 	br	1000ec98 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
1000ec94:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
1000ec98:	e0fff517 	ldw	r3,-44(fp)
1000ec9c:	e0bffd17 	ldw	r2,-12(fp)
1000eca0:	1880141e 	bne	r3,r2,1000ecf4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1000eca4:	e0bfff17 	ldw	r2,-4(fp)
1000eca8:	1090000c 	andi	r2,r2,16384
1000ecac:	1000131e 	bne	r2,zero,1000ecfc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1000ecb0:	0001883a 	nop
1000ecb4:	e0bffc17 	ldw	r2,-16(fp)
1000ecb8:	10c00a17 	ldw	r3,40(r2)
1000ecbc:	e0bff717 	ldw	r2,-36(fp)
1000ecc0:	1880051e 	bne	r3,r2,1000ecd8 <altera_avalon_jtag_uart_read+0x138>
1000ecc4:	e0bffc17 	ldw	r2,-16(fp)
1000ecc8:	10c00917 	ldw	r3,36(r2)
1000eccc:	e0bffc17 	ldw	r2,-16(fp)
1000ecd0:	10800117 	ldw	r2,4(r2)
1000ecd4:	18bff736 	bltu	r3,r2,1000ecb4 <__alt_data_end+0xf800ecb4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1000ecd8:	e0bffc17 	ldw	r2,-16(fp)
1000ecdc:	10c00a17 	ldw	r3,40(r2)
1000ece0:	e0bff717 	ldw	r2,-36(fp)
1000ece4:	18800726 	beq	r3,r2,1000ed04 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000ece8:	e0bffe17 	ldw	r2,-8(fp)
1000ecec:	00bfb716 	blt	zero,r2,1000ebcc <__alt_data_end+0xf800ebcc>
1000ecf0:	00000506 	br	1000ed08 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
1000ecf4:	0001883a 	nop
1000ecf8:	00000306 	br	1000ed08 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
1000ecfc:	0001883a 	nop
1000ed00:	00000106 	br	1000ed08 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
1000ed04:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1000ed08:	e0fff517 	ldw	r3,-44(fp)
1000ed0c:	e0bffd17 	ldw	r2,-12(fp)
1000ed10:	18801826 	beq	r3,r2,1000ed74 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000ed14:	0005303a 	rdctl	r2,status
1000ed18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000ed1c:	e0fffb17 	ldw	r3,-20(fp)
1000ed20:	00bfff84 	movi	r2,-2
1000ed24:	1884703a 	and	r2,r3,r2
1000ed28:	1001703a 	wrctl	status,r2
  
  return context;
1000ed2c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1000ed30:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000ed34:	e0bffc17 	ldw	r2,-16(fp)
1000ed38:	10800817 	ldw	r2,32(r2)
1000ed3c:	10c00054 	ori	r3,r2,1
1000ed40:	e0bffc17 	ldw	r2,-16(fp)
1000ed44:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000ed48:	e0bffc17 	ldw	r2,-16(fp)
1000ed4c:	10800017 	ldw	r2,0(r2)
1000ed50:	10800104 	addi	r2,r2,4
1000ed54:	1007883a 	mov	r3,r2
1000ed58:	e0bffc17 	ldw	r2,-16(fp)
1000ed5c:	10800817 	ldw	r2,32(r2)
1000ed60:	18800035 	stwio	r2,0(r3)
1000ed64:	e0bffa17 	ldw	r2,-24(fp)
1000ed68:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000ed6c:	e0bff917 	ldw	r2,-28(fp)
1000ed70:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1000ed74:	e0fff517 	ldw	r3,-44(fp)
1000ed78:	e0bffd17 	ldw	r2,-12(fp)
1000ed7c:	18800426 	beq	r3,r2,1000ed90 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
1000ed80:	e0fff517 	ldw	r3,-44(fp)
1000ed84:	e0bffd17 	ldw	r2,-12(fp)
1000ed88:	1885c83a 	sub	r2,r3,r2
1000ed8c:	00000606 	br	1000eda8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
1000ed90:	e0bfff17 	ldw	r2,-4(fp)
1000ed94:	1090000c 	andi	r2,r2,16384
1000ed98:	10000226 	beq	r2,zero,1000eda4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
1000ed9c:	00bffd44 	movi	r2,-11
1000eda0:	00000106 	br	1000eda8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
1000eda4:	00bffec4 	movi	r2,-5
}
1000eda8:	e037883a 	mov	sp,fp
1000edac:	dfc00117 	ldw	ra,4(sp)
1000edb0:	df000017 	ldw	fp,0(sp)
1000edb4:	dec00204 	addi	sp,sp,8
1000edb8:	f800283a 	ret

1000edbc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1000edbc:	defff304 	addi	sp,sp,-52
1000edc0:	dfc00c15 	stw	ra,48(sp)
1000edc4:	df000b15 	stw	fp,44(sp)
1000edc8:	df000b04 	addi	fp,sp,44
1000edcc:	e13ffc15 	stw	r4,-16(fp)
1000edd0:	e17ffd15 	stw	r5,-12(fp)
1000edd4:	e1bffe15 	stw	r6,-8(fp)
1000edd8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1000eddc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1000ede0:	e0bffd17 	ldw	r2,-12(fp)
1000ede4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000ede8:	00003706 	br	1000eec8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1000edec:	e0bffc17 	ldw	r2,-16(fp)
1000edf0:	10800c17 	ldw	r2,48(r2)
1000edf4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
1000edf8:	e0bffc17 	ldw	r2,-16(fp)
1000edfc:	10800d17 	ldw	r2,52(r2)
1000ee00:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1000ee04:	e0fff917 	ldw	r3,-28(fp)
1000ee08:	e0bff517 	ldw	r2,-44(fp)
1000ee0c:	1880062e 	bgeu	r3,r2,1000ee28 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1000ee10:	e0fff517 	ldw	r3,-44(fp)
1000ee14:	e0bff917 	ldw	r2,-28(fp)
1000ee18:	1885c83a 	sub	r2,r3,r2
1000ee1c:	10bfffc4 	addi	r2,r2,-1
1000ee20:	e0bff615 	stw	r2,-40(fp)
1000ee24:	00000b06 	br	1000ee54 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1000ee28:	e0bff517 	ldw	r2,-44(fp)
1000ee2c:	10000526 	beq	r2,zero,1000ee44 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1000ee30:	00c20004 	movi	r3,2048
1000ee34:	e0bff917 	ldw	r2,-28(fp)
1000ee38:	1885c83a 	sub	r2,r3,r2
1000ee3c:	e0bff615 	stw	r2,-40(fp)
1000ee40:	00000406 	br	1000ee54 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1000ee44:	00c1ffc4 	movi	r3,2047
1000ee48:	e0bff917 	ldw	r2,-28(fp)
1000ee4c:	1885c83a 	sub	r2,r3,r2
1000ee50:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000ee54:	e0bff617 	ldw	r2,-40(fp)
1000ee58:	10001e26 	beq	r2,zero,1000eed4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
1000ee5c:	e0fffe17 	ldw	r3,-8(fp)
1000ee60:	e0bff617 	ldw	r2,-40(fp)
1000ee64:	1880022e 	bgeu	r3,r2,1000ee70 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
1000ee68:	e0bffe17 	ldw	r2,-8(fp)
1000ee6c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1000ee70:	e0bffc17 	ldw	r2,-16(fp)
1000ee74:	10c20e04 	addi	r3,r2,2104
1000ee78:	e0bff917 	ldw	r2,-28(fp)
1000ee7c:	1885883a 	add	r2,r3,r2
1000ee80:	e1bff617 	ldw	r6,-40(fp)
1000ee84:	e17ffd17 	ldw	r5,-12(fp)
1000ee88:	1009883a 	mov	r4,r2
1000ee8c:	0001cd00 	call	10001cd0 <memcpy>
      ptr   += n;
1000ee90:	e0fffd17 	ldw	r3,-12(fp)
1000ee94:	e0bff617 	ldw	r2,-40(fp)
1000ee98:	1885883a 	add	r2,r3,r2
1000ee9c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1000eea0:	e0fffe17 	ldw	r3,-8(fp)
1000eea4:	e0bff617 	ldw	r2,-40(fp)
1000eea8:	1885c83a 	sub	r2,r3,r2
1000eeac:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000eeb0:	e0fff917 	ldw	r3,-28(fp)
1000eeb4:	e0bff617 	ldw	r2,-40(fp)
1000eeb8:	1885883a 	add	r2,r3,r2
1000eebc:	10c1ffcc 	andi	r3,r2,2047
1000eec0:	e0bffc17 	ldw	r2,-16(fp)
1000eec4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000eec8:	e0bffe17 	ldw	r2,-8(fp)
1000eecc:	00bfc716 	blt	zero,r2,1000edec <__alt_data_end+0xf800edec>
1000eed0:	00000106 	br	1000eed8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
1000eed4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000eed8:	0005303a 	rdctl	r2,status
1000eedc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000eee0:	e0fffb17 	ldw	r3,-20(fp)
1000eee4:	00bfff84 	movi	r2,-2
1000eee8:	1884703a 	and	r2,r3,r2
1000eeec:	1001703a 	wrctl	status,r2
  
  return context;
1000eef0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1000eef4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000eef8:	e0bffc17 	ldw	r2,-16(fp)
1000eefc:	10800817 	ldw	r2,32(r2)
1000ef00:	10c00094 	ori	r3,r2,2
1000ef04:	e0bffc17 	ldw	r2,-16(fp)
1000ef08:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000ef0c:	e0bffc17 	ldw	r2,-16(fp)
1000ef10:	10800017 	ldw	r2,0(r2)
1000ef14:	10800104 	addi	r2,r2,4
1000ef18:	1007883a 	mov	r3,r2
1000ef1c:	e0bffc17 	ldw	r2,-16(fp)
1000ef20:	10800817 	ldw	r2,32(r2)
1000ef24:	18800035 	stwio	r2,0(r3)
1000ef28:	e0bffa17 	ldw	r2,-24(fp)
1000ef2c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000ef30:	e0bff817 	ldw	r2,-32(fp)
1000ef34:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1000ef38:	e0bffe17 	ldw	r2,-8(fp)
1000ef3c:	0080100e 	bge	zero,r2,1000ef80 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
1000ef40:	e0bfff17 	ldw	r2,-4(fp)
1000ef44:	1090000c 	andi	r2,r2,16384
1000ef48:	1000101e 	bne	r2,zero,1000ef8c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1000ef4c:	0001883a 	nop
1000ef50:	e0bffc17 	ldw	r2,-16(fp)
1000ef54:	10c00d17 	ldw	r3,52(r2)
1000ef58:	e0bff517 	ldw	r2,-44(fp)
1000ef5c:	1880051e 	bne	r3,r2,1000ef74 <altera_avalon_jtag_uart_write+0x1b8>
1000ef60:	e0bffc17 	ldw	r2,-16(fp)
1000ef64:	10c00917 	ldw	r3,36(r2)
1000ef68:	e0bffc17 	ldw	r2,-16(fp)
1000ef6c:	10800117 	ldw	r2,4(r2)
1000ef70:	18bff736 	bltu	r3,r2,1000ef50 <__alt_data_end+0xf800ef50>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1000ef74:	e0bffc17 	ldw	r2,-16(fp)
1000ef78:	10800917 	ldw	r2,36(r2)
1000ef7c:	1000051e 	bne	r2,zero,1000ef94 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
1000ef80:	e0bffe17 	ldw	r2,-8(fp)
1000ef84:	00bfd016 	blt	zero,r2,1000eec8 <__alt_data_end+0xf800eec8>
1000ef88:	00000306 	br	1000ef98 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
1000ef8c:	0001883a 	nop
1000ef90:	00000106 	br	1000ef98 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
1000ef94:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1000ef98:	e0fffd17 	ldw	r3,-12(fp)
1000ef9c:	e0bff717 	ldw	r2,-36(fp)
1000efa0:	18800426 	beq	r3,r2,1000efb4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
1000efa4:	e0fffd17 	ldw	r3,-12(fp)
1000efa8:	e0bff717 	ldw	r2,-36(fp)
1000efac:	1885c83a 	sub	r2,r3,r2
1000efb0:	00000606 	br	1000efcc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
1000efb4:	e0bfff17 	ldw	r2,-4(fp)
1000efb8:	1090000c 	andi	r2,r2,16384
1000efbc:	10000226 	beq	r2,zero,1000efc8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
1000efc0:	00bffd44 	movi	r2,-11
1000efc4:	00000106 	br	1000efcc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1000efc8:	00bffec4 	movi	r2,-5
}
1000efcc:	e037883a 	mov	sp,fp
1000efd0:	dfc00117 	ldw	ra,4(sp)
1000efd4:	df000017 	ldw	fp,0(sp)
1000efd8:	dec00204 	addi	sp,sp,8
1000efdc:	f800283a 	ret

1000efe0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1000efe0:	defff504 	addi	sp,sp,-44
1000efe4:	df000a15 	stw	fp,40(sp)
1000efe8:	df000a04 	addi	fp,sp,40
1000efec:	e13ffc15 	stw	r4,-16(fp)
1000eff0:	e17ffd15 	stw	r5,-12(fp)
1000eff4:	e1bffe15 	stw	r6,-8(fp)
1000eff8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1000effc:	e03ff615 	stw	zero,-40(fp)
1000f000:	d0a6dd17 	ldw	r2,-25740(gp)
  
  if (alt_ticks_per_second ())
1000f004:	10003c26 	beq	r2,zero,1000f0f8 <alt_alarm_start+0x118>
  {
    if (alarm)
1000f008:	e0bffc17 	ldw	r2,-16(fp)
1000f00c:	10003826 	beq	r2,zero,1000f0f0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
1000f010:	e0bffc17 	ldw	r2,-16(fp)
1000f014:	e0fffe17 	ldw	r3,-8(fp)
1000f018:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1000f01c:	e0bffc17 	ldw	r2,-16(fp)
1000f020:	e0ffff17 	ldw	r3,-4(fp)
1000f024:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f028:	0005303a 	rdctl	r2,status
1000f02c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f030:	e0fff917 	ldw	r3,-28(fp)
1000f034:	00bfff84 	movi	r2,-2
1000f038:	1884703a 	and	r2,r3,r2
1000f03c:	1001703a 	wrctl	status,r2
  
  return context;
1000f040:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
1000f044:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1000f048:	d0a6de17 	ldw	r2,-25736(gp)
      
      current_nticks = alt_nticks();
1000f04c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1000f050:	e0fffd17 	ldw	r3,-12(fp)
1000f054:	e0bff617 	ldw	r2,-40(fp)
1000f058:	1885883a 	add	r2,r3,r2
1000f05c:	10c00044 	addi	r3,r2,1
1000f060:	e0bffc17 	ldw	r2,-16(fp)
1000f064:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1000f068:	e0bffc17 	ldw	r2,-16(fp)
1000f06c:	10c00217 	ldw	r3,8(r2)
1000f070:	e0bff617 	ldw	r2,-40(fp)
1000f074:	1880042e 	bgeu	r3,r2,1000f088 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
1000f078:	e0bffc17 	ldw	r2,-16(fp)
1000f07c:	00c00044 	movi	r3,1
1000f080:	10c00405 	stb	r3,16(r2)
1000f084:	00000206 	br	1000f090 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
1000f088:	e0bffc17 	ldw	r2,-16(fp)
1000f08c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1000f090:	e0bffc17 	ldw	r2,-16(fp)
1000f094:	d0e01104 	addi	r3,gp,-32700
1000f098:	e0fffa15 	stw	r3,-24(fp)
1000f09c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000f0a0:	e0bffb17 	ldw	r2,-20(fp)
1000f0a4:	e0fffa17 	ldw	r3,-24(fp)
1000f0a8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000f0ac:	e0bffa17 	ldw	r2,-24(fp)
1000f0b0:	10c00017 	ldw	r3,0(r2)
1000f0b4:	e0bffb17 	ldw	r2,-20(fp)
1000f0b8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000f0bc:	e0bffa17 	ldw	r2,-24(fp)
1000f0c0:	10800017 	ldw	r2,0(r2)
1000f0c4:	e0fffb17 	ldw	r3,-20(fp)
1000f0c8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000f0cc:	e0bffa17 	ldw	r2,-24(fp)
1000f0d0:	e0fffb17 	ldw	r3,-20(fp)
1000f0d4:	10c00015 	stw	r3,0(r2)
1000f0d8:	e0bff817 	ldw	r2,-32(fp)
1000f0dc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f0e0:	e0bff717 	ldw	r2,-36(fp)
1000f0e4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1000f0e8:	0005883a 	mov	r2,zero
1000f0ec:	00000306 	br	1000f0fc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
1000f0f0:	00bffa84 	movi	r2,-22
1000f0f4:	00000106 	br	1000f0fc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
1000f0f8:	00bfde84 	movi	r2,-134
  }
}
1000f0fc:	e037883a 	mov	sp,fp
1000f100:	df000017 	ldw	fp,0(sp)
1000f104:	dec00104 	addi	sp,sp,4
1000f108:	f800283a 	ret

1000f10c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1000f10c:	deffff04 	addi	sp,sp,-4
1000f110:	df000015 	stw	fp,0(sp)
1000f114:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1000f118:	0001883a 	nop
1000f11c:	e037883a 	mov	sp,fp
1000f120:	df000017 	ldw	fp,0(sp)
1000f124:	dec00104 	addi	sp,sp,4
1000f128:	f800283a 	ret

1000f12c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f12c:	defffe04 	addi	sp,sp,-8
1000f130:	dfc00115 	stw	ra,4(sp)
1000f134:	df000015 	stw	fp,0(sp)
1000f138:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f13c:	d0a00e17 	ldw	r2,-32712(gp)
1000f140:	10000326 	beq	r2,zero,1000f150 <alt_get_errno+0x24>
1000f144:	d0a00e17 	ldw	r2,-32712(gp)
1000f148:	103ee83a 	callr	r2
1000f14c:	00000106 	br	1000f154 <alt_get_errno+0x28>
1000f150:	d0a6d504 	addi	r2,gp,-25772
}
1000f154:	e037883a 	mov	sp,fp
1000f158:	dfc00117 	ldw	ra,4(sp)
1000f15c:	df000017 	ldw	fp,0(sp)
1000f160:	dec00204 	addi	sp,sp,8
1000f164:	f800283a 	ret

1000f168 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1000f168:	defffa04 	addi	sp,sp,-24
1000f16c:	dfc00515 	stw	ra,20(sp)
1000f170:	df000415 	stw	fp,16(sp)
1000f174:	df000404 	addi	fp,sp,16
1000f178:	e13ffe15 	stw	r4,-8(fp)
1000f17c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1000f180:	e0bffe17 	ldw	r2,-8(fp)
1000f184:	10000326 	beq	r2,zero,1000f194 <alt_dev_llist_insert+0x2c>
1000f188:	e0bffe17 	ldw	r2,-8(fp)
1000f18c:	10800217 	ldw	r2,8(r2)
1000f190:	1000061e 	bne	r2,zero,1000f1ac <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
1000f194:	000f12c0 	call	1000f12c <alt_get_errno>
1000f198:	1007883a 	mov	r3,r2
1000f19c:	00800584 	movi	r2,22
1000f1a0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
1000f1a4:	00bffa84 	movi	r2,-22
1000f1a8:	00001306 	br	1000f1f8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1000f1ac:	e0bffe17 	ldw	r2,-8(fp)
1000f1b0:	e0ffff17 	ldw	r3,-4(fp)
1000f1b4:	e0fffc15 	stw	r3,-16(fp)
1000f1b8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000f1bc:	e0bffd17 	ldw	r2,-12(fp)
1000f1c0:	e0fffc17 	ldw	r3,-16(fp)
1000f1c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000f1c8:	e0bffc17 	ldw	r2,-16(fp)
1000f1cc:	10c00017 	ldw	r3,0(r2)
1000f1d0:	e0bffd17 	ldw	r2,-12(fp)
1000f1d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000f1d8:	e0bffc17 	ldw	r2,-16(fp)
1000f1dc:	10800017 	ldw	r2,0(r2)
1000f1e0:	e0fffd17 	ldw	r3,-12(fp)
1000f1e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000f1e8:	e0bffc17 	ldw	r2,-16(fp)
1000f1ec:	e0fffd17 	ldw	r3,-12(fp)
1000f1f0:	10c00015 	stw	r3,0(r2)

  return 0;  
1000f1f4:	0005883a 	mov	r2,zero
}
1000f1f8:	e037883a 	mov	sp,fp
1000f1fc:	dfc00117 	ldw	ra,4(sp)
1000f200:	df000017 	ldw	fp,0(sp)
1000f204:	dec00204 	addi	sp,sp,8
1000f208:	f800283a 	ret

1000f20c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1000f20c:	defffd04 	addi	sp,sp,-12
1000f210:	dfc00215 	stw	ra,8(sp)
1000f214:	df000115 	stw	fp,4(sp)
1000f218:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000f21c:	00840074 	movhi	r2,4097
1000f220:	10806304 	addi	r2,r2,396
1000f224:	e0bfff15 	stw	r2,-4(fp)
1000f228:	00000606 	br	1000f244 <_do_ctors+0x38>
        (*ctor) (); 
1000f22c:	e0bfff17 	ldw	r2,-4(fp)
1000f230:	10800017 	ldw	r2,0(r2)
1000f234:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000f238:	e0bfff17 	ldw	r2,-4(fp)
1000f23c:	10bfff04 	addi	r2,r2,-4
1000f240:	e0bfff15 	stw	r2,-4(fp)
1000f244:	e0ffff17 	ldw	r3,-4(fp)
1000f248:	00840074 	movhi	r2,4097
1000f24c:	10806404 	addi	r2,r2,400
1000f250:	18bff62e 	bgeu	r3,r2,1000f22c <__alt_data_end+0xf800f22c>
        (*ctor) (); 
}
1000f254:	0001883a 	nop
1000f258:	e037883a 	mov	sp,fp
1000f25c:	dfc00117 	ldw	ra,4(sp)
1000f260:	df000017 	ldw	fp,0(sp)
1000f264:	dec00204 	addi	sp,sp,8
1000f268:	f800283a 	ret

1000f26c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1000f26c:	defffd04 	addi	sp,sp,-12
1000f270:	dfc00215 	stw	ra,8(sp)
1000f274:	df000115 	stw	fp,4(sp)
1000f278:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000f27c:	00840074 	movhi	r2,4097
1000f280:	10806304 	addi	r2,r2,396
1000f284:	e0bfff15 	stw	r2,-4(fp)
1000f288:	00000606 	br	1000f2a4 <_do_dtors+0x38>
        (*dtor) (); 
1000f28c:	e0bfff17 	ldw	r2,-4(fp)
1000f290:	10800017 	ldw	r2,0(r2)
1000f294:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000f298:	e0bfff17 	ldw	r2,-4(fp)
1000f29c:	10bfff04 	addi	r2,r2,-4
1000f2a0:	e0bfff15 	stw	r2,-4(fp)
1000f2a4:	e0ffff17 	ldw	r3,-4(fp)
1000f2a8:	00840074 	movhi	r2,4097
1000f2ac:	10806404 	addi	r2,r2,400
1000f2b0:	18bff62e 	bgeu	r3,r2,1000f28c <__alt_data_end+0xf800f28c>
        (*dtor) (); 
}
1000f2b4:	0001883a 	nop
1000f2b8:	e037883a 	mov	sp,fp
1000f2bc:	dfc00117 	ldw	ra,4(sp)
1000f2c0:	df000017 	ldw	fp,0(sp)
1000f2c4:	dec00204 	addi	sp,sp,8
1000f2c8:	f800283a 	ret

1000f2cc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1000f2cc:	deffff04 	addi	sp,sp,-4
1000f2d0:	df000015 	stw	fp,0(sp)
1000f2d4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1000f2d8:	0001883a 	nop
1000f2dc:	e037883a 	mov	sp,fp
1000f2e0:	df000017 	ldw	fp,0(sp)
1000f2e4:	dec00104 	addi	sp,sp,4
1000f2e8:	f800283a 	ret

1000f2ec <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000f2ec:	defff904 	addi	sp,sp,-28
1000f2f0:	dfc00615 	stw	ra,24(sp)
1000f2f4:	df000515 	stw	fp,20(sp)
1000f2f8:	df000504 	addi	fp,sp,20
1000f2fc:	e13ffc15 	stw	r4,-16(fp)
1000f300:	e17ffd15 	stw	r5,-12(fp)
1000f304:	e1bffe15 	stw	r6,-8(fp)
1000f308:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1000f30c:	e0800217 	ldw	r2,8(fp)
1000f310:	d8800015 	stw	r2,0(sp)
1000f314:	e1ffff17 	ldw	r7,-4(fp)
1000f318:	e1bffe17 	ldw	r6,-8(fp)
1000f31c:	e17ffd17 	ldw	r5,-12(fp)
1000f320:	e13ffc17 	ldw	r4,-16(fp)
1000f324:	000f49c0 	call	1000f49c <alt_iic_isr_register>
}  
1000f328:	e037883a 	mov	sp,fp
1000f32c:	dfc00117 	ldw	ra,4(sp)
1000f330:	df000017 	ldw	fp,0(sp)
1000f334:	dec00204 	addi	sp,sp,8
1000f338:	f800283a 	ret

1000f33c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1000f33c:	defff904 	addi	sp,sp,-28
1000f340:	df000615 	stw	fp,24(sp)
1000f344:	df000604 	addi	fp,sp,24
1000f348:	e13ffe15 	stw	r4,-8(fp)
1000f34c:	e17fff15 	stw	r5,-4(fp)
1000f350:	e0bfff17 	ldw	r2,-4(fp)
1000f354:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f358:	0005303a 	rdctl	r2,status
1000f35c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f360:	e0fffb17 	ldw	r3,-20(fp)
1000f364:	00bfff84 	movi	r2,-2
1000f368:	1884703a 	and	r2,r3,r2
1000f36c:	1001703a 	wrctl	status,r2
  
  return context;
1000f370:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000f374:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1000f378:	00c00044 	movi	r3,1
1000f37c:	e0bffa17 	ldw	r2,-24(fp)
1000f380:	1884983a 	sll	r2,r3,r2
1000f384:	1007883a 	mov	r3,r2
1000f388:	d0a6dc17 	ldw	r2,-25744(gp)
1000f38c:	1884b03a 	or	r2,r3,r2
1000f390:	d0a6dc15 	stw	r2,-25744(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000f394:	d0a6dc17 	ldw	r2,-25744(gp)
1000f398:	100170fa 	wrctl	ienable,r2
1000f39c:	e0bffc17 	ldw	r2,-16(fp)
1000f3a0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f3a4:	e0bffd17 	ldw	r2,-12(fp)
1000f3a8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000f3ac:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1000f3b0:	0001883a 	nop
}
1000f3b4:	e037883a 	mov	sp,fp
1000f3b8:	df000017 	ldw	fp,0(sp)
1000f3bc:	dec00104 	addi	sp,sp,4
1000f3c0:	f800283a 	ret

1000f3c4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1000f3c4:	defff904 	addi	sp,sp,-28
1000f3c8:	df000615 	stw	fp,24(sp)
1000f3cc:	df000604 	addi	fp,sp,24
1000f3d0:	e13ffe15 	stw	r4,-8(fp)
1000f3d4:	e17fff15 	stw	r5,-4(fp)
1000f3d8:	e0bfff17 	ldw	r2,-4(fp)
1000f3dc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f3e0:	0005303a 	rdctl	r2,status
1000f3e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f3e8:	e0fffb17 	ldw	r3,-20(fp)
1000f3ec:	00bfff84 	movi	r2,-2
1000f3f0:	1884703a 	and	r2,r3,r2
1000f3f4:	1001703a 	wrctl	status,r2
  
  return context;
1000f3f8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000f3fc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1000f400:	00c00044 	movi	r3,1
1000f404:	e0bffa17 	ldw	r2,-24(fp)
1000f408:	1884983a 	sll	r2,r3,r2
1000f40c:	0084303a 	nor	r2,zero,r2
1000f410:	1007883a 	mov	r3,r2
1000f414:	d0a6dc17 	ldw	r2,-25744(gp)
1000f418:	1884703a 	and	r2,r3,r2
1000f41c:	d0a6dc15 	stw	r2,-25744(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000f420:	d0a6dc17 	ldw	r2,-25744(gp)
1000f424:	100170fa 	wrctl	ienable,r2
1000f428:	e0bffc17 	ldw	r2,-16(fp)
1000f42c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f430:	e0bffd17 	ldw	r2,-12(fp)
1000f434:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000f438:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
1000f43c:	0001883a 	nop
}
1000f440:	e037883a 	mov	sp,fp
1000f444:	df000017 	ldw	fp,0(sp)
1000f448:	dec00104 	addi	sp,sp,4
1000f44c:	f800283a 	ret

1000f450 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1000f450:	defffc04 	addi	sp,sp,-16
1000f454:	df000315 	stw	fp,12(sp)
1000f458:	df000304 	addi	fp,sp,12
1000f45c:	e13ffe15 	stw	r4,-8(fp)
1000f460:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1000f464:	000530fa 	rdctl	r2,ienable
1000f468:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1000f46c:	00c00044 	movi	r3,1
1000f470:	e0bfff17 	ldw	r2,-4(fp)
1000f474:	1884983a 	sll	r2,r3,r2
1000f478:	1007883a 	mov	r3,r2
1000f47c:	e0bffd17 	ldw	r2,-12(fp)
1000f480:	1884703a 	and	r2,r3,r2
1000f484:	1004c03a 	cmpne	r2,r2,zero
1000f488:	10803fcc 	andi	r2,r2,255
}
1000f48c:	e037883a 	mov	sp,fp
1000f490:	df000017 	ldw	fp,0(sp)
1000f494:	dec00104 	addi	sp,sp,4
1000f498:	f800283a 	ret

1000f49c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000f49c:	defff504 	addi	sp,sp,-44
1000f4a0:	dfc00a15 	stw	ra,40(sp)
1000f4a4:	df000915 	stw	fp,36(sp)
1000f4a8:	df000904 	addi	fp,sp,36
1000f4ac:	e13ffc15 	stw	r4,-16(fp)
1000f4b0:	e17ffd15 	stw	r5,-12(fp)
1000f4b4:	e1bffe15 	stw	r6,-8(fp)
1000f4b8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1000f4bc:	00bffa84 	movi	r2,-22
1000f4c0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1000f4c4:	e0bffd17 	ldw	r2,-12(fp)
1000f4c8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1000f4cc:	e0bff817 	ldw	r2,-32(fp)
1000f4d0:	10800808 	cmpgei	r2,r2,32
1000f4d4:	1000271e 	bne	r2,zero,1000f574 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f4d8:	0005303a 	rdctl	r2,status
1000f4dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f4e0:	e0fffb17 	ldw	r3,-20(fp)
1000f4e4:	00bfff84 	movi	r2,-2
1000f4e8:	1884703a 	and	r2,r3,r2
1000f4ec:	1001703a 	wrctl	status,r2
  
  return context;
1000f4f0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1000f4f4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
1000f4f8:	00840074 	movhi	r2,4097
1000f4fc:	108ef004 	addi	r2,r2,15296
1000f500:	e0fff817 	ldw	r3,-32(fp)
1000f504:	180690fa 	slli	r3,r3,3
1000f508:	10c5883a 	add	r2,r2,r3
1000f50c:	e0fffe17 	ldw	r3,-8(fp)
1000f510:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1000f514:	00840074 	movhi	r2,4097
1000f518:	108ef004 	addi	r2,r2,15296
1000f51c:	e0fff817 	ldw	r3,-32(fp)
1000f520:	180690fa 	slli	r3,r3,3
1000f524:	10c5883a 	add	r2,r2,r3
1000f528:	10800104 	addi	r2,r2,4
1000f52c:	e0ffff17 	ldw	r3,-4(fp)
1000f530:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1000f534:	e0bffe17 	ldw	r2,-8(fp)
1000f538:	10000526 	beq	r2,zero,1000f550 <alt_iic_isr_register+0xb4>
1000f53c:	e0bff817 	ldw	r2,-32(fp)
1000f540:	100b883a 	mov	r5,r2
1000f544:	e13ffc17 	ldw	r4,-16(fp)
1000f548:	000f33c0 	call	1000f33c <alt_ic_irq_enable>
1000f54c:	00000406 	br	1000f560 <alt_iic_isr_register+0xc4>
1000f550:	e0bff817 	ldw	r2,-32(fp)
1000f554:	100b883a 	mov	r5,r2
1000f558:	e13ffc17 	ldw	r4,-16(fp)
1000f55c:	000f3c40 	call	1000f3c4 <alt_ic_irq_disable>
1000f560:	e0bff715 	stw	r2,-36(fp)
1000f564:	e0bffa17 	ldw	r2,-24(fp)
1000f568:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f56c:	e0bff917 	ldw	r2,-28(fp)
1000f570:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1000f574:	e0bff717 	ldw	r2,-36(fp)
}
1000f578:	e037883a 	mov	sp,fp
1000f57c:	dfc00117 	ldw	ra,4(sp)
1000f580:	df000017 	ldw	fp,0(sp)
1000f584:	dec00204 	addi	sp,sp,8
1000f588:	f800283a 	ret

1000f58c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1000f58c:	defff804 	addi	sp,sp,-32
1000f590:	dfc00715 	stw	ra,28(sp)
1000f594:	df000615 	stw	fp,24(sp)
1000f598:	dc000515 	stw	r16,20(sp)
1000f59c:	df000604 	addi	fp,sp,24
1000f5a0:	e13ffb15 	stw	r4,-20(fp)
1000f5a4:	e17ffc15 	stw	r5,-16(fp)
1000f5a8:	e1bffd15 	stw	r6,-12(fp)
1000f5ac:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
1000f5b0:	e1bffe17 	ldw	r6,-8(fp)
1000f5b4:	e17ffd17 	ldw	r5,-12(fp)
1000f5b8:	e13ffc17 	ldw	r4,-16(fp)
1000f5bc:	000f8140 	call	1000f814 <open>
1000f5c0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
1000f5c4:	e0bffa17 	ldw	r2,-24(fp)
1000f5c8:	10002216 	blt	r2,zero,1000f654 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
1000f5cc:	04040074 	movhi	r16,4097
1000f5d0:	84038e04 	addi	r16,r16,3640
1000f5d4:	e0bffa17 	ldw	r2,-24(fp)
1000f5d8:	01400304 	movi	r5,12
1000f5dc:	1009883a 	mov	r4,r2
1000f5e0:	00006840 	call	10000684 <__mulsi3>
1000f5e4:	8085883a 	add	r2,r16,r2
1000f5e8:	10c00017 	ldw	r3,0(r2)
1000f5ec:	e0bffb17 	ldw	r2,-20(fp)
1000f5f0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1000f5f4:	04040074 	movhi	r16,4097
1000f5f8:	84038e04 	addi	r16,r16,3640
1000f5fc:	e0bffa17 	ldw	r2,-24(fp)
1000f600:	01400304 	movi	r5,12
1000f604:	1009883a 	mov	r4,r2
1000f608:	00006840 	call	10000684 <__mulsi3>
1000f60c:	8085883a 	add	r2,r16,r2
1000f610:	10800104 	addi	r2,r2,4
1000f614:	10c00017 	ldw	r3,0(r2)
1000f618:	e0bffb17 	ldw	r2,-20(fp)
1000f61c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1000f620:	04040074 	movhi	r16,4097
1000f624:	84038e04 	addi	r16,r16,3640
1000f628:	e0bffa17 	ldw	r2,-24(fp)
1000f62c:	01400304 	movi	r5,12
1000f630:	1009883a 	mov	r4,r2
1000f634:	00006840 	call	10000684 <__mulsi3>
1000f638:	8085883a 	add	r2,r16,r2
1000f63c:	10800204 	addi	r2,r2,8
1000f640:	10c00017 	ldw	r3,0(r2)
1000f644:	e0bffb17 	ldw	r2,-20(fp)
1000f648:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1000f64c:	e13ffa17 	ldw	r4,-24(fp)
1000f650:	000e2500 	call	1000e250 <alt_release_fd>
  }
} 
1000f654:	0001883a 	nop
1000f658:	e6ffff04 	addi	sp,fp,-4
1000f65c:	dfc00217 	ldw	ra,8(sp)
1000f660:	df000117 	ldw	fp,4(sp)
1000f664:	dc000017 	ldw	r16,0(sp)
1000f668:	dec00304 	addi	sp,sp,12
1000f66c:	f800283a 	ret

1000f670 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1000f670:	defffb04 	addi	sp,sp,-20
1000f674:	dfc00415 	stw	ra,16(sp)
1000f678:	df000315 	stw	fp,12(sp)
1000f67c:	df000304 	addi	fp,sp,12
1000f680:	e13ffd15 	stw	r4,-12(fp)
1000f684:	e17ffe15 	stw	r5,-8(fp)
1000f688:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1000f68c:	01c07fc4 	movi	r7,511
1000f690:	01800044 	movi	r6,1
1000f694:	e17ffd17 	ldw	r5,-12(fp)
1000f698:	01040074 	movhi	r4,4097
1000f69c:	21039104 	addi	r4,r4,3652
1000f6a0:	000f58c0 	call	1000f58c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1000f6a4:	01c07fc4 	movi	r7,511
1000f6a8:	000d883a 	mov	r6,zero
1000f6ac:	e17ffe17 	ldw	r5,-8(fp)
1000f6b0:	01040074 	movhi	r4,4097
1000f6b4:	21038e04 	addi	r4,r4,3640
1000f6b8:	000f58c0 	call	1000f58c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1000f6bc:	01c07fc4 	movi	r7,511
1000f6c0:	01800044 	movi	r6,1
1000f6c4:	e17fff17 	ldw	r5,-4(fp)
1000f6c8:	01040074 	movhi	r4,4097
1000f6cc:	21039404 	addi	r4,r4,3664
1000f6d0:	000f58c0 	call	1000f58c <alt_open_fd>
}  
1000f6d4:	0001883a 	nop
1000f6d8:	e037883a 	mov	sp,fp
1000f6dc:	dfc00117 	ldw	ra,4(sp)
1000f6e0:	df000017 	ldw	fp,0(sp)
1000f6e4:	dec00204 	addi	sp,sp,8
1000f6e8:	f800283a 	ret

1000f6ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f6ec:	defffe04 	addi	sp,sp,-8
1000f6f0:	dfc00115 	stw	ra,4(sp)
1000f6f4:	df000015 	stw	fp,0(sp)
1000f6f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f6fc:	d0a00e17 	ldw	r2,-32712(gp)
1000f700:	10000326 	beq	r2,zero,1000f710 <alt_get_errno+0x24>
1000f704:	d0a00e17 	ldw	r2,-32712(gp)
1000f708:	103ee83a 	callr	r2
1000f70c:	00000106 	br	1000f714 <alt_get_errno+0x28>
1000f710:	d0a6d504 	addi	r2,gp,-25772
}
1000f714:	e037883a 	mov	sp,fp
1000f718:	dfc00117 	ldw	ra,4(sp)
1000f71c:	df000017 	ldw	fp,0(sp)
1000f720:	dec00204 	addi	sp,sp,8
1000f724:	f800283a 	ret

1000f728 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1000f728:	defffb04 	addi	sp,sp,-20
1000f72c:	dfc00415 	stw	ra,16(sp)
1000f730:	df000315 	stw	fp,12(sp)
1000f734:	dc000215 	stw	r16,8(sp)
1000f738:	df000304 	addi	fp,sp,12
1000f73c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1000f740:	e0bffe17 	ldw	r2,-8(fp)
1000f744:	10800217 	ldw	r2,8(r2)
1000f748:	10d00034 	orhi	r3,r2,16384
1000f74c:	e0bffe17 	ldw	r2,-8(fp)
1000f750:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000f754:	e03ffd15 	stw	zero,-12(fp)
1000f758:	00002306 	br	1000f7e8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000f75c:	04040074 	movhi	r16,4097
1000f760:	84038e04 	addi	r16,r16,3640
1000f764:	e0bffd17 	ldw	r2,-12(fp)
1000f768:	01400304 	movi	r5,12
1000f76c:	1009883a 	mov	r4,r2
1000f770:	00006840 	call	10000684 <__mulsi3>
1000f774:	8085883a 	add	r2,r16,r2
1000f778:	10c00017 	ldw	r3,0(r2)
1000f77c:	e0bffe17 	ldw	r2,-8(fp)
1000f780:	10800017 	ldw	r2,0(r2)
1000f784:	1880151e 	bne	r3,r2,1000f7dc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000f788:	04040074 	movhi	r16,4097
1000f78c:	84038e04 	addi	r16,r16,3640
1000f790:	e0bffd17 	ldw	r2,-12(fp)
1000f794:	01400304 	movi	r5,12
1000f798:	1009883a 	mov	r4,r2
1000f79c:	00006840 	call	10000684 <__mulsi3>
1000f7a0:	8085883a 	add	r2,r16,r2
1000f7a4:	10800204 	addi	r2,r2,8
1000f7a8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000f7ac:	10000b0e 	bge	r2,zero,1000f7dc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1000f7b0:	01400304 	movi	r5,12
1000f7b4:	e13ffd17 	ldw	r4,-12(fp)
1000f7b8:	00006840 	call	10000684 <__mulsi3>
1000f7bc:	1007883a 	mov	r3,r2
1000f7c0:	00840074 	movhi	r2,4097
1000f7c4:	10838e04 	addi	r2,r2,3640
1000f7c8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000f7cc:	e0bffe17 	ldw	r2,-8(fp)
1000f7d0:	18800226 	beq	r3,r2,1000f7dc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1000f7d4:	00bffcc4 	movi	r2,-13
1000f7d8:	00000806 	br	1000f7fc <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000f7dc:	e0bffd17 	ldw	r2,-12(fp)
1000f7e0:	10800044 	addi	r2,r2,1
1000f7e4:	e0bffd15 	stw	r2,-12(fp)
1000f7e8:	d0a00d17 	ldw	r2,-32716(gp)
1000f7ec:	1007883a 	mov	r3,r2
1000f7f0:	e0bffd17 	ldw	r2,-12(fp)
1000f7f4:	18bfd92e 	bgeu	r3,r2,1000f75c <__alt_data_end+0xf800f75c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1000f7f8:	0005883a 	mov	r2,zero
}
1000f7fc:	e6ffff04 	addi	sp,fp,-4
1000f800:	dfc00217 	ldw	ra,8(sp)
1000f804:	df000117 	ldw	fp,4(sp)
1000f808:	dc000017 	ldw	r16,0(sp)
1000f80c:	dec00304 	addi	sp,sp,12
1000f810:	f800283a 	ret

1000f814 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1000f814:	defff604 	addi	sp,sp,-40
1000f818:	dfc00915 	stw	ra,36(sp)
1000f81c:	df000815 	stw	fp,32(sp)
1000f820:	df000804 	addi	fp,sp,32
1000f824:	e13ffd15 	stw	r4,-12(fp)
1000f828:	e17ffe15 	stw	r5,-8(fp)
1000f82c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1000f830:	00bfffc4 	movi	r2,-1
1000f834:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1000f838:	00bffb44 	movi	r2,-19
1000f83c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1000f840:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1000f844:	d1600b04 	addi	r5,gp,-32724
1000f848:	e13ffd17 	ldw	r4,-12(fp)
1000f84c:	000fb380 	call	1000fb38 <alt_find_dev>
1000f850:	e0bff815 	stw	r2,-32(fp)
1000f854:	e0bff817 	ldw	r2,-32(fp)
1000f858:	1000051e 	bne	r2,zero,1000f870 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1000f85c:	e13ffd17 	ldw	r4,-12(fp)
1000f860:	000fbc80 	call	1000fbc8 <alt_find_file>
1000f864:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1000f868:	00800044 	movi	r2,1
1000f86c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1000f870:	e0bff817 	ldw	r2,-32(fp)
1000f874:	10002b26 	beq	r2,zero,1000f924 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
1000f878:	e13ff817 	ldw	r4,-32(fp)
1000f87c:	000fcd00 	call	1000fcd0 <alt_get_fd>
1000f880:	e0bff915 	stw	r2,-28(fp)
1000f884:	e0bff917 	ldw	r2,-28(fp)
1000f888:	1000030e 	bge	r2,zero,1000f898 <open+0x84>
    {
      status = index;
1000f88c:	e0bff917 	ldw	r2,-28(fp)
1000f890:	e0bffa15 	stw	r2,-24(fp)
1000f894:	00002506 	br	1000f92c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
1000f898:	01400304 	movi	r5,12
1000f89c:	e13ff917 	ldw	r4,-28(fp)
1000f8a0:	00006840 	call	10000684 <__mulsi3>
1000f8a4:	1007883a 	mov	r3,r2
1000f8a8:	00840074 	movhi	r2,4097
1000f8ac:	10838e04 	addi	r2,r2,3640
1000f8b0:	1885883a 	add	r2,r3,r2
1000f8b4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1000f8b8:	e0fffe17 	ldw	r3,-8(fp)
1000f8bc:	00900034 	movhi	r2,16384
1000f8c0:	10bfffc4 	addi	r2,r2,-1
1000f8c4:	1886703a 	and	r3,r3,r2
1000f8c8:	e0bffc17 	ldw	r2,-16(fp)
1000f8cc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1000f8d0:	e0bffb17 	ldw	r2,-20(fp)
1000f8d4:	1000051e 	bne	r2,zero,1000f8ec <open+0xd8>
1000f8d8:	e13ffc17 	ldw	r4,-16(fp)
1000f8dc:	000f7280 	call	1000f728 <alt_file_locked>
1000f8e0:	e0bffa15 	stw	r2,-24(fp)
1000f8e4:	e0bffa17 	ldw	r2,-24(fp)
1000f8e8:	10001016 	blt	r2,zero,1000f92c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1000f8ec:	e0bff817 	ldw	r2,-32(fp)
1000f8f0:	10800317 	ldw	r2,12(r2)
1000f8f4:	10000826 	beq	r2,zero,1000f918 <open+0x104>
1000f8f8:	e0bff817 	ldw	r2,-32(fp)
1000f8fc:	10800317 	ldw	r2,12(r2)
1000f900:	e1ffff17 	ldw	r7,-4(fp)
1000f904:	e1bffe17 	ldw	r6,-8(fp)
1000f908:	e17ffd17 	ldw	r5,-12(fp)
1000f90c:	e13ffc17 	ldw	r4,-16(fp)
1000f910:	103ee83a 	callr	r2
1000f914:	00000106 	br	1000f91c <open+0x108>
1000f918:	0005883a 	mov	r2,zero
1000f91c:	e0bffa15 	stw	r2,-24(fp)
1000f920:	00000206 	br	1000f92c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
1000f924:	00bffb44 	movi	r2,-19
1000f928:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1000f92c:	e0bffa17 	ldw	r2,-24(fp)
1000f930:	1000090e 	bge	r2,zero,1000f958 <open+0x144>
  {
    alt_release_fd (index);  
1000f934:	e13ff917 	ldw	r4,-28(fp)
1000f938:	000e2500 	call	1000e250 <alt_release_fd>
    ALT_ERRNO = -status;
1000f93c:	000f6ec0 	call	1000f6ec <alt_get_errno>
1000f940:	1007883a 	mov	r3,r2
1000f944:	e0bffa17 	ldw	r2,-24(fp)
1000f948:	0085c83a 	sub	r2,zero,r2
1000f94c:	18800015 	stw	r2,0(r3)
    return -1;
1000f950:	00bfffc4 	movi	r2,-1
1000f954:	00000106 	br	1000f95c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
1000f958:	e0bff917 	ldw	r2,-28(fp)
}
1000f95c:	e037883a 	mov	sp,fp
1000f960:	dfc00117 	ldw	ra,4(sp)
1000f964:	df000017 	ldw	fp,0(sp)
1000f968:	dec00204 	addi	sp,sp,8
1000f96c:	f800283a 	ret

1000f970 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1000f970:	defffa04 	addi	sp,sp,-24
1000f974:	df000515 	stw	fp,20(sp)
1000f978:	df000504 	addi	fp,sp,20
1000f97c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f980:	0005303a 	rdctl	r2,status
1000f984:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f988:	e0fffc17 	ldw	r3,-16(fp)
1000f98c:	00bfff84 	movi	r2,-2
1000f990:	1884703a 	and	r2,r3,r2
1000f994:	1001703a 	wrctl	status,r2
  
  return context;
1000f998:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1000f99c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1000f9a0:	e0bfff17 	ldw	r2,-4(fp)
1000f9a4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1000f9a8:	e0bffd17 	ldw	r2,-12(fp)
1000f9ac:	10800017 	ldw	r2,0(r2)
1000f9b0:	e0fffd17 	ldw	r3,-12(fp)
1000f9b4:	18c00117 	ldw	r3,4(r3)
1000f9b8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1000f9bc:	e0bffd17 	ldw	r2,-12(fp)
1000f9c0:	10800117 	ldw	r2,4(r2)
1000f9c4:	e0fffd17 	ldw	r3,-12(fp)
1000f9c8:	18c00017 	ldw	r3,0(r3)
1000f9cc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1000f9d0:	e0bffd17 	ldw	r2,-12(fp)
1000f9d4:	e0fffd17 	ldw	r3,-12(fp)
1000f9d8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1000f9dc:	e0bffd17 	ldw	r2,-12(fp)
1000f9e0:	e0fffd17 	ldw	r3,-12(fp)
1000f9e4:	10c00015 	stw	r3,0(r2)
1000f9e8:	e0bffb17 	ldw	r2,-20(fp)
1000f9ec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f9f0:	e0bffe17 	ldw	r2,-8(fp)
1000f9f4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1000f9f8:	0001883a 	nop
1000f9fc:	e037883a 	mov	sp,fp
1000fa00:	df000017 	ldw	fp,0(sp)
1000fa04:	dec00104 	addi	sp,sp,4
1000fa08:	f800283a 	ret

1000fa0c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
1000fa0c:	defffb04 	addi	sp,sp,-20
1000fa10:	dfc00415 	stw	ra,16(sp)
1000fa14:	df000315 	stw	fp,12(sp)
1000fa18:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
1000fa1c:	d0a01117 	ldw	r2,-32700(gp)
1000fa20:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1000fa24:	d0a6de17 	ldw	r2,-25736(gp)
1000fa28:	10800044 	addi	r2,r2,1
1000fa2c:	d0a6de15 	stw	r2,-25736(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000fa30:	00002e06 	br	1000faec <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1000fa34:	e0bffd17 	ldw	r2,-12(fp)
1000fa38:	10800017 	ldw	r2,0(r2)
1000fa3c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1000fa40:	e0bffd17 	ldw	r2,-12(fp)
1000fa44:	10800403 	ldbu	r2,16(r2)
1000fa48:	10803fcc 	andi	r2,r2,255
1000fa4c:	10000426 	beq	r2,zero,1000fa60 <alt_tick+0x54>
1000fa50:	d0a6de17 	ldw	r2,-25736(gp)
1000fa54:	1000021e 	bne	r2,zero,1000fa60 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1000fa58:	e0bffd17 	ldw	r2,-12(fp)
1000fa5c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1000fa60:	e0bffd17 	ldw	r2,-12(fp)
1000fa64:	10800217 	ldw	r2,8(r2)
1000fa68:	d0e6de17 	ldw	r3,-25736(gp)
1000fa6c:	18801d36 	bltu	r3,r2,1000fae4 <alt_tick+0xd8>
1000fa70:	e0bffd17 	ldw	r2,-12(fp)
1000fa74:	10800403 	ldbu	r2,16(r2)
1000fa78:	10803fcc 	andi	r2,r2,255
1000fa7c:	1000191e 	bne	r2,zero,1000fae4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1000fa80:	e0bffd17 	ldw	r2,-12(fp)
1000fa84:	10800317 	ldw	r2,12(r2)
1000fa88:	e0fffd17 	ldw	r3,-12(fp)
1000fa8c:	18c00517 	ldw	r3,20(r3)
1000fa90:	1809883a 	mov	r4,r3
1000fa94:	103ee83a 	callr	r2
1000fa98:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1000fa9c:	e0bfff17 	ldw	r2,-4(fp)
1000faa0:	1000031e 	bne	r2,zero,1000fab0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1000faa4:	e13ffd17 	ldw	r4,-12(fp)
1000faa8:	000f9700 	call	1000f970 <alt_alarm_stop>
1000faac:	00000d06 	br	1000fae4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1000fab0:	e0bffd17 	ldw	r2,-12(fp)
1000fab4:	10c00217 	ldw	r3,8(r2)
1000fab8:	e0bfff17 	ldw	r2,-4(fp)
1000fabc:	1887883a 	add	r3,r3,r2
1000fac0:	e0bffd17 	ldw	r2,-12(fp)
1000fac4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1000fac8:	e0bffd17 	ldw	r2,-12(fp)
1000facc:	10c00217 	ldw	r3,8(r2)
1000fad0:	d0a6de17 	ldw	r2,-25736(gp)
1000fad4:	1880032e 	bgeu	r3,r2,1000fae4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1000fad8:	e0bffd17 	ldw	r2,-12(fp)
1000fadc:	00c00044 	movi	r3,1
1000fae0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1000fae4:	e0bffe17 	ldw	r2,-8(fp)
1000fae8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000faec:	e0fffd17 	ldw	r3,-12(fp)
1000faf0:	d0a01104 	addi	r2,gp,-32700
1000faf4:	18bfcf1e 	bne	r3,r2,1000fa34 <__alt_data_end+0xf800fa34>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1000faf8:	0001883a 	nop
}
1000fafc:	0001883a 	nop
1000fb00:	e037883a 	mov	sp,fp
1000fb04:	dfc00117 	ldw	ra,4(sp)
1000fb08:	df000017 	ldw	fp,0(sp)
1000fb0c:	dec00204 	addi	sp,sp,8
1000fb10:	f800283a 	ret

1000fb14 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
1000fb14:	deffff04 	addi	sp,sp,-4
1000fb18:	df000015 	stw	fp,0(sp)
1000fb1c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1000fb20:	000170fa 	wrctl	ienable,zero
}
1000fb24:	0001883a 	nop
1000fb28:	e037883a 	mov	sp,fp
1000fb2c:	df000017 	ldw	fp,0(sp)
1000fb30:	dec00104 	addi	sp,sp,4
1000fb34:	f800283a 	ret

1000fb38 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1000fb38:	defffa04 	addi	sp,sp,-24
1000fb3c:	dfc00515 	stw	ra,20(sp)
1000fb40:	df000415 	stw	fp,16(sp)
1000fb44:	df000404 	addi	fp,sp,16
1000fb48:	e13ffe15 	stw	r4,-8(fp)
1000fb4c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1000fb50:	e0bfff17 	ldw	r2,-4(fp)
1000fb54:	10800017 	ldw	r2,0(r2)
1000fb58:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1000fb5c:	e13ffe17 	ldw	r4,-8(fp)
1000fb60:	0007aa80 	call	10007aa8 <strlen>
1000fb64:	10800044 	addi	r2,r2,1
1000fb68:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000fb6c:	00000d06 	br	1000fba4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1000fb70:	e0bffc17 	ldw	r2,-16(fp)
1000fb74:	10800217 	ldw	r2,8(r2)
1000fb78:	e0fffd17 	ldw	r3,-12(fp)
1000fb7c:	180d883a 	mov	r6,r3
1000fb80:	e17ffe17 	ldw	r5,-8(fp)
1000fb84:	1009883a 	mov	r4,r2
1000fb88:	000fe7c0 	call	1000fe7c <memcmp>
1000fb8c:	1000021e 	bne	r2,zero,1000fb98 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1000fb90:	e0bffc17 	ldw	r2,-16(fp)
1000fb94:	00000706 	br	1000fbb4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1000fb98:	e0bffc17 	ldw	r2,-16(fp)
1000fb9c:	10800017 	ldw	r2,0(r2)
1000fba0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000fba4:	e0fffc17 	ldw	r3,-16(fp)
1000fba8:	e0bfff17 	ldw	r2,-4(fp)
1000fbac:	18bff01e 	bne	r3,r2,1000fb70 <__alt_data_end+0xf800fb70>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1000fbb0:	0005883a 	mov	r2,zero
}
1000fbb4:	e037883a 	mov	sp,fp
1000fbb8:	dfc00117 	ldw	ra,4(sp)
1000fbbc:	df000017 	ldw	fp,0(sp)
1000fbc0:	dec00204 	addi	sp,sp,8
1000fbc4:	f800283a 	ret

1000fbc8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1000fbc8:	defffb04 	addi	sp,sp,-20
1000fbcc:	dfc00415 	stw	ra,16(sp)
1000fbd0:	df000315 	stw	fp,12(sp)
1000fbd4:	df000304 	addi	fp,sp,12
1000fbd8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1000fbdc:	d0a00917 	ldw	r2,-32732(gp)
1000fbe0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000fbe4:	00003106 	br	1000fcac <alt_find_file+0xe4>
  {
    len = strlen(next->name);
1000fbe8:	e0bffd17 	ldw	r2,-12(fp)
1000fbec:	10800217 	ldw	r2,8(r2)
1000fbf0:	1009883a 	mov	r4,r2
1000fbf4:	0007aa80 	call	10007aa8 <strlen>
1000fbf8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1000fbfc:	e0bffd17 	ldw	r2,-12(fp)
1000fc00:	10c00217 	ldw	r3,8(r2)
1000fc04:	e0bffe17 	ldw	r2,-8(fp)
1000fc08:	10bfffc4 	addi	r2,r2,-1
1000fc0c:	1885883a 	add	r2,r3,r2
1000fc10:	10800003 	ldbu	r2,0(r2)
1000fc14:	10803fcc 	andi	r2,r2,255
1000fc18:	1080201c 	xori	r2,r2,128
1000fc1c:	10bfe004 	addi	r2,r2,-128
1000fc20:	10800bd8 	cmpnei	r2,r2,47
1000fc24:	1000031e 	bne	r2,zero,1000fc34 <alt_find_file+0x6c>
    {
      len -= 1;
1000fc28:	e0bffe17 	ldw	r2,-8(fp)
1000fc2c:	10bfffc4 	addi	r2,r2,-1
1000fc30:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000fc34:	e0bffe17 	ldw	r2,-8(fp)
1000fc38:	e0ffff17 	ldw	r3,-4(fp)
1000fc3c:	1885883a 	add	r2,r3,r2
1000fc40:	10800003 	ldbu	r2,0(r2)
1000fc44:	10803fcc 	andi	r2,r2,255
1000fc48:	1080201c 	xori	r2,r2,128
1000fc4c:	10bfe004 	addi	r2,r2,-128
1000fc50:	10800be0 	cmpeqi	r2,r2,47
1000fc54:	1000081e 	bne	r2,zero,1000fc78 <alt_find_file+0xb0>
1000fc58:	e0bffe17 	ldw	r2,-8(fp)
1000fc5c:	e0ffff17 	ldw	r3,-4(fp)
1000fc60:	1885883a 	add	r2,r3,r2
1000fc64:	10800003 	ldbu	r2,0(r2)
1000fc68:	10803fcc 	andi	r2,r2,255
1000fc6c:	1080201c 	xori	r2,r2,128
1000fc70:	10bfe004 	addi	r2,r2,-128
1000fc74:	10000a1e 	bne	r2,zero,1000fca0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
1000fc78:	e0bffd17 	ldw	r2,-12(fp)
1000fc7c:	10800217 	ldw	r2,8(r2)
1000fc80:	e0fffe17 	ldw	r3,-8(fp)
1000fc84:	180d883a 	mov	r6,r3
1000fc88:	e17fff17 	ldw	r5,-4(fp)
1000fc8c:	1009883a 	mov	r4,r2
1000fc90:	000fe7c0 	call	1000fe7c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000fc94:	1000021e 	bne	r2,zero,1000fca0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1000fc98:	e0bffd17 	ldw	r2,-12(fp)
1000fc9c:	00000706 	br	1000fcbc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
1000fca0:	e0bffd17 	ldw	r2,-12(fp)
1000fca4:	10800017 	ldw	r2,0(r2)
1000fca8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000fcac:	e0fffd17 	ldw	r3,-12(fp)
1000fcb0:	d0a00904 	addi	r2,gp,-32732
1000fcb4:	18bfcc1e 	bne	r3,r2,1000fbe8 <__alt_data_end+0xf800fbe8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1000fcb8:	0005883a 	mov	r2,zero
}
1000fcbc:	e037883a 	mov	sp,fp
1000fcc0:	dfc00117 	ldw	ra,4(sp)
1000fcc4:	df000017 	ldw	fp,0(sp)
1000fcc8:	dec00204 	addi	sp,sp,8
1000fccc:	f800283a 	ret

1000fcd0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
1000fcd0:	defffa04 	addi	sp,sp,-24
1000fcd4:	dfc00515 	stw	ra,20(sp)
1000fcd8:	df000415 	stw	fp,16(sp)
1000fcdc:	dc000315 	stw	r16,12(sp)
1000fce0:	df000404 	addi	fp,sp,16
1000fce4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
1000fce8:	00bffa04 	movi	r2,-24
1000fcec:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000fcf0:	e03ffc15 	stw	zero,-16(fp)
1000fcf4:	00001d06 	br	1000fd6c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
1000fcf8:	04040074 	movhi	r16,4097
1000fcfc:	84038e04 	addi	r16,r16,3640
1000fd00:	e0bffc17 	ldw	r2,-16(fp)
1000fd04:	01400304 	movi	r5,12
1000fd08:	1009883a 	mov	r4,r2
1000fd0c:	00006840 	call	10000684 <__mulsi3>
1000fd10:	8085883a 	add	r2,r16,r2
1000fd14:	10800017 	ldw	r2,0(r2)
1000fd18:	1000111e 	bne	r2,zero,1000fd60 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
1000fd1c:	04040074 	movhi	r16,4097
1000fd20:	84038e04 	addi	r16,r16,3640
1000fd24:	e0bffc17 	ldw	r2,-16(fp)
1000fd28:	01400304 	movi	r5,12
1000fd2c:	1009883a 	mov	r4,r2
1000fd30:	00006840 	call	10000684 <__mulsi3>
1000fd34:	8085883a 	add	r2,r16,r2
1000fd38:	e0fffe17 	ldw	r3,-8(fp)
1000fd3c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1000fd40:	d0e00d17 	ldw	r3,-32716(gp)
1000fd44:	e0bffc17 	ldw	r2,-16(fp)
1000fd48:	1880020e 	bge	r3,r2,1000fd54 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
1000fd4c:	e0bffc17 	ldw	r2,-16(fp)
1000fd50:	d0a00d15 	stw	r2,-32716(gp)
      }
      rc = i;
1000fd54:	e0bffc17 	ldw	r2,-16(fp)
1000fd58:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
1000fd5c:	00000606 	br	1000fd78 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000fd60:	e0bffc17 	ldw	r2,-16(fp)
1000fd64:	10800044 	addi	r2,r2,1
1000fd68:	e0bffc15 	stw	r2,-16(fp)
1000fd6c:	e0bffc17 	ldw	r2,-16(fp)
1000fd70:	10800810 	cmplti	r2,r2,32
1000fd74:	103fe01e 	bne	r2,zero,1000fcf8 <__alt_data_end+0xf800fcf8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
1000fd78:	e0bffd17 	ldw	r2,-12(fp)
}
1000fd7c:	e6ffff04 	addi	sp,fp,-4
1000fd80:	dfc00217 	ldw	ra,8(sp)
1000fd84:	df000117 	ldw	fp,4(sp)
1000fd88:	dc000017 	ldw	r16,0(sp)
1000fd8c:	dec00304 	addi	sp,sp,12
1000fd90:	f800283a 	ret

1000fd94 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
1000fd94:	defffe04 	addi	sp,sp,-8
1000fd98:	df000115 	stw	fp,4(sp)
1000fd9c:	df000104 	addi	fp,sp,4
1000fda0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
1000fda4:	e0bfff17 	ldw	r2,-4(fp)
1000fda8:	10bffe84 	addi	r2,r2,-6
1000fdac:	10c00428 	cmpgeui	r3,r2,16
1000fdb0:	18001a1e 	bne	r3,zero,1000fe1c <alt_exception_cause_generated_bad_addr+0x88>
1000fdb4:	100690ba 	slli	r3,r2,2
1000fdb8:	00840074 	movhi	r2,4097
1000fdbc:	10bf7304 	addi	r2,r2,-564
1000fdc0:	1885883a 	add	r2,r3,r2
1000fdc4:	10800017 	ldw	r2,0(r2)
1000fdc8:	1000683a 	jmp	r2
1000fdcc:	1000fe0c 	andi	zero,r2,1016
1000fdd0:	1000fe0c 	andi	zero,r2,1016
1000fdd4:	1000fe1c 	xori	zero,r2,1016
1000fdd8:	1000fe1c 	xori	zero,r2,1016
1000fddc:	1000fe1c 	xori	zero,r2,1016
1000fde0:	1000fe0c 	andi	zero,r2,1016
1000fde4:	1000fe14 	ori	zero,r2,1016
1000fde8:	1000fe1c 	xori	zero,r2,1016
1000fdec:	1000fe0c 	andi	zero,r2,1016
1000fdf0:	1000fe0c 	andi	zero,r2,1016
1000fdf4:	1000fe1c 	xori	zero,r2,1016
1000fdf8:	1000fe0c 	andi	zero,r2,1016
1000fdfc:	1000fe14 	ori	zero,r2,1016
1000fe00:	1000fe1c 	xori	zero,r2,1016
1000fe04:	1000fe1c 	xori	zero,r2,1016
1000fe08:	1000fe0c 	andi	zero,r2,1016
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
1000fe0c:	00800044 	movi	r2,1
1000fe10:	00000306 	br	1000fe20 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
1000fe14:	0005883a 	mov	r2,zero
1000fe18:	00000106 	br	1000fe20 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
1000fe1c:	0005883a 	mov	r2,zero
  }
}
1000fe20:	e037883a 	mov	sp,fp
1000fe24:	df000017 	ldw	fp,0(sp)
1000fe28:	dec00104 	addi	sp,sp,4
1000fe2c:	f800283a 	ret

1000fe30 <atexit>:
1000fe30:	200b883a 	mov	r5,r4
1000fe34:	000f883a 	mov	r7,zero
1000fe38:	000d883a 	mov	r6,zero
1000fe3c:	0009883a 	mov	r4,zero
1000fe40:	000fef81 	jmpi	1000fef8 <__register_exitproc>

1000fe44 <exit>:
1000fe44:	defffe04 	addi	sp,sp,-8
1000fe48:	000b883a 	mov	r5,zero
1000fe4c:	dc000015 	stw	r16,0(sp)
1000fe50:	dfc00115 	stw	ra,4(sp)
1000fe54:	2021883a 	mov	r16,r4
1000fe58:	00100100 	call	10010010 <__call_exitprocs>
1000fe5c:	00840074 	movhi	r2,4097
1000fe60:	10880904 	addi	r2,r2,8228
1000fe64:	11000017 	ldw	r4,0(r2)
1000fe68:	20800f17 	ldw	r2,60(r4)
1000fe6c:	10000126 	beq	r2,zero,1000fe74 <exit+0x30>
1000fe70:	103ee83a 	callr	r2
1000fe74:	8009883a 	mov	r4,r16
1000fe78:	000dbec0 	call	1000dbec <_exit>

1000fe7c <memcmp>:
1000fe7c:	01c000c4 	movi	r7,3
1000fe80:	3980192e 	bgeu	r7,r6,1000fee8 <memcmp+0x6c>
1000fe84:	2144b03a 	or	r2,r4,r5
1000fe88:	11c4703a 	and	r2,r2,r7
1000fe8c:	10000f26 	beq	r2,zero,1000fecc <memcmp+0x50>
1000fe90:	20800003 	ldbu	r2,0(r4)
1000fe94:	28c00003 	ldbu	r3,0(r5)
1000fe98:	10c0151e 	bne	r2,r3,1000fef0 <memcmp+0x74>
1000fe9c:	31bfff84 	addi	r6,r6,-2
1000fea0:	01ffffc4 	movi	r7,-1
1000fea4:	00000406 	br	1000feb8 <memcmp+0x3c>
1000fea8:	20800003 	ldbu	r2,0(r4)
1000feac:	28c00003 	ldbu	r3,0(r5)
1000feb0:	31bfffc4 	addi	r6,r6,-1
1000feb4:	10c00e1e 	bne	r2,r3,1000fef0 <memcmp+0x74>
1000feb8:	21000044 	addi	r4,r4,1
1000febc:	29400044 	addi	r5,r5,1
1000fec0:	31fff91e 	bne	r6,r7,1000fea8 <__alt_data_end+0xf800fea8>
1000fec4:	0005883a 	mov	r2,zero
1000fec8:	f800283a 	ret
1000fecc:	20c00017 	ldw	r3,0(r4)
1000fed0:	28800017 	ldw	r2,0(r5)
1000fed4:	18bfee1e 	bne	r3,r2,1000fe90 <__alt_data_end+0xf800fe90>
1000fed8:	31bfff04 	addi	r6,r6,-4
1000fedc:	21000104 	addi	r4,r4,4
1000fee0:	29400104 	addi	r5,r5,4
1000fee4:	39bff936 	bltu	r7,r6,1000fecc <__alt_data_end+0xf800fecc>
1000fee8:	303fe91e 	bne	r6,zero,1000fe90 <__alt_data_end+0xf800fe90>
1000feec:	003ff506 	br	1000fec4 <__alt_data_end+0xf800fec4>
1000fef0:	10c5c83a 	sub	r2,r2,r3
1000fef4:	f800283a 	ret

1000fef8 <__register_exitproc>:
1000fef8:	defffa04 	addi	sp,sp,-24
1000fefc:	dc000315 	stw	r16,12(sp)
1000ff00:	04040074 	movhi	r16,4097
1000ff04:	84080904 	addi	r16,r16,8228
1000ff08:	80c00017 	ldw	r3,0(r16)
1000ff0c:	dc400415 	stw	r17,16(sp)
1000ff10:	dfc00515 	stw	ra,20(sp)
1000ff14:	18805217 	ldw	r2,328(r3)
1000ff18:	2023883a 	mov	r17,r4
1000ff1c:	10003726 	beq	r2,zero,1000fffc <__register_exitproc+0x104>
1000ff20:	10c00117 	ldw	r3,4(r2)
1000ff24:	010007c4 	movi	r4,31
1000ff28:	20c00e16 	blt	r4,r3,1000ff64 <__register_exitproc+0x6c>
1000ff2c:	1a000044 	addi	r8,r3,1
1000ff30:	8800221e 	bne	r17,zero,1000ffbc <__register_exitproc+0xc4>
1000ff34:	18c00084 	addi	r3,r3,2
1000ff38:	18c7883a 	add	r3,r3,r3
1000ff3c:	18c7883a 	add	r3,r3,r3
1000ff40:	12000115 	stw	r8,4(r2)
1000ff44:	10c7883a 	add	r3,r2,r3
1000ff48:	19400015 	stw	r5,0(r3)
1000ff4c:	0005883a 	mov	r2,zero
1000ff50:	dfc00517 	ldw	ra,20(sp)
1000ff54:	dc400417 	ldw	r17,16(sp)
1000ff58:	dc000317 	ldw	r16,12(sp)
1000ff5c:	dec00604 	addi	sp,sp,24
1000ff60:	f800283a 	ret
1000ff64:	00840034 	movhi	r2,4096
1000ff68:	10852704 	addi	r2,r2,5276
1000ff6c:	10002626 	beq	r2,zero,10010008 <__register_exitproc+0x110>
1000ff70:	01006404 	movi	r4,400
1000ff74:	d9400015 	stw	r5,0(sp)
1000ff78:	d9800115 	stw	r6,4(sp)
1000ff7c:	d9c00215 	stw	r7,8(sp)
1000ff80:	000149c0 	call	1000149c <malloc>
1000ff84:	d9400017 	ldw	r5,0(sp)
1000ff88:	d9800117 	ldw	r6,4(sp)
1000ff8c:	d9c00217 	ldw	r7,8(sp)
1000ff90:	10001d26 	beq	r2,zero,10010008 <__register_exitproc+0x110>
1000ff94:	81000017 	ldw	r4,0(r16)
1000ff98:	10000115 	stw	zero,4(r2)
1000ff9c:	02000044 	movi	r8,1
1000ffa0:	22405217 	ldw	r9,328(r4)
1000ffa4:	0007883a 	mov	r3,zero
1000ffa8:	12400015 	stw	r9,0(r2)
1000ffac:	20805215 	stw	r2,328(r4)
1000ffb0:	10006215 	stw	zero,392(r2)
1000ffb4:	10006315 	stw	zero,396(r2)
1000ffb8:	883fde26 	beq	r17,zero,1000ff34 <__alt_data_end+0xf800ff34>
1000ffbc:	18c9883a 	add	r4,r3,r3
1000ffc0:	2109883a 	add	r4,r4,r4
1000ffc4:	1109883a 	add	r4,r2,r4
1000ffc8:	21802215 	stw	r6,136(r4)
1000ffcc:	01800044 	movi	r6,1
1000ffd0:	12406217 	ldw	r9,392(r2)
1000ffd4:	30cc983a 	sll	r6,r6,r3
1000ffd8:	4992b03a 	or	r9,r9,r6
1000ffdc:	12406215 	stw	r9,392(r2)
1000ffe0:	21c04215 	stw	r7,264(r4)
1000ffe4:	01000084 	movi	r4,2
1000ffe8:	893fd21e 	bne	r17,r4,1000ff34 <__alt_data_end+0xf800ff34>
1000ffec:	11006317 	ldw	r4,396(r2)
1000fff0:	218cb03a 	or	r6,r4,r6
1000fff4:	11806315 	stw	r6,396(r2)
1000fff8:	003fce06 	br	1000ff34 <__alt_data_end+0xf800ff34>
1000fffc:	18805304 	addi	r2,r3,332
10010000:	18805215 	stw	r2,328(r3)
10010004:	003fc606 	br	1000ff20 <__alt_data_end+0xf800ff20>
10010008:	00bfffc4 	movi	r2,-1
1001000c:	003fd006 	br	1000ff50 <__alt_data_end+0xf800ff50>

10010010 <__call_exitprocs>:
10010010:	defff504 	addi	sp,sp,-44
10010014:	df000915 	stw	fp,36(sp)
10010018:	dd400615 	stw	r21,24(sp)
1001001c:	dc800315 	stw	r18,12(sp)
10010020:	dfc00a15 	stw	ra,40(sp)
10010024:	ddc00815 	stw	r23,32(sp)
10010028:	dd800715 	stw	r22,28(sp)
1001002c:	dd000515 	stw	r20,20(sp)
10010030:	dcc00415 	stw	r19,16(sp)
10010034:	dc400215 	stw	r17,8(sp)
10010038:	dc000115 	stw	r16,4(sp)
1001003c:	d9000015 	stw	r4,0(sp)
10010040:	2839883a 	mov	fp,r5
10010044:	04800044 	movi	r18,1
10010048:	057fffc4 	movi	r21,-1
1001004c:	00840074 	movhi	r2,4097
10010050:	10880904 	addi	r2,r2,8228
10010054:	12000017 	ldw	r8,0(r2)
10010058:	45005217 	ldw	r20,328(r8)
1001005c:	44c05204 	addi	r19,r8,328
10010060:	a0001c26 	beq	r20,zero,100100d4 <__call_exitprocs+0xc4>
10010064:	a0800117 	ldw	r2,4(r20)
10010068:	15ffffc4 	addi	r23,r2,-1
1001006c:	b8000d16 	blt	r23,zero,100100a4 <__call_exitprocs+0x94>
10010070:	14000044 	addi	r16,r2,1
10010074:	8421883a 	add	r16,r16,r16
10010078:	8421883a 	add	r16,r16,r16
1001007c:	84402004 	addi	r17,r16,128
10010080:	a463883a 	add	r17,r20,r17
10010084:	a421883a 	add	r16,r20,r16
10010088:	e0001e26 	beq	fp,zero,10010104 <__call_exitprocs+0xf4>
1001008c:	80804017 	ldw	r2,256(r16)
10010090:	e0801c26 	beq	fp,r2,10010104 <__call_exitprocs+0xf4>
10010094:	bdffffc4 	addi	r23,r23,-1
10010098:	843fff04 	addi	r16,r16,-4
1001009c:	8c7fff04 	addi	r17,r17,-4
100100a0:	bd7ff91e 	bne	r23,r21,10010088 <__alt_data_end+0xf8010088>
100100a4:	00840034 	movhi	r2,4096
100100a8:	10852c04 	addi	r2,r2,5296
100100ac:	10000926 	beq	r2,zero,100100d4 <__call_exitprocs+0xc4>
100100b0:	a0800117 	ldw	r2,4(r20)
100100b4:	1000301e 	bne	r2,zero,10010178 <__call_exitprocs+0x168>
100100b8:	a0800017 	ldw	r2,0(r20)
100100bc:	10003226 	beq	r2,zero,10010188 <__call_exitprocs+0x178>
100100c0:	a009883a 	mov	r4,r20
100100c4:	98800015 	stw	r2,0(r19)
100100c8:	00014b00 	call	100014b0 <free>
100100cc:	9d000017 	ldw	r20,0(r19)
100100d0:	a03fe41e 	bne	r20,zero,10010064 <__alt_data_end+0xf8010064>
100100d4:	dfc00a17 	ldw	ra,40(sp)
100100d8:	df000917 	ldw	fp,36(sp)
100100dc:	ddc00817 	ldw	r23,32(sp)
100100e0:	dd800717 	ldw	r22,28(sp)
100100e4:	dd400617 	ldw	r21,24(sp)
100100e8:	dd000517 	ldw	r20,20(sp)
100100ec:	dcc00417 	ldw	r19,16(sp)
100100f0:	dc800317 	ldw	r18,12(sp)
100100f4:	dc400217 	ldw	r17,8(sp)
100100f8:	dc000117 	ldw	r16,4(sp)
100100fc:	dec00b04 	addi	sp,sp,44
10010100:	f800283a 	ret
10010104:	a0800117 	ldw	r2,4(r20)
10010108:	80c00017 	ldw	r3,0(r16)
1001010c:	10bfffc4 	addi	r2,r2,-1
10010110:	15c01426 	beq	r2,r23,10010164 <__call_exitprocs+0x154>
10010114:	80000015 	stw	zero,0(r16)
10010118:	183fde26 	beq	r3,zero,10010094 <__alt_data_end+0xf8010094>
1001011c:	95c8983a 	sll	r4,r18,r23
10010120:	a0806217 	ldw	r2,392(r20)
10010124:	a5800117 	ldw	r22,4(r20)
10010128:	2084703a 	and	r2,r4,r2
1001012c:	10000b26 	beq	r2,zero,1001015c <__call_exitprocs+0x14c>
10010130:	a0806317 	ldw	r2,396(r20)
10010134:	2088703a 	and	r4,r4,r2
10010138:	20000c1e 	bne	r4,zero,1001016c <__call_exitprocs+0x15c>
1001013c:	89400017 	ldw	r5,0(r17)
10010140:	d9000017 	ldw	r4,0(sp)
10010144:	183ee83a 	callr	r3
10010148:	a0800117 	ldw	r2,4(r20)
1001014c:	15bfbf1e 	bne	r2,r22,1001004c <__alt_data_end+0xf801004c>
10010150:	98800017 	ldw	r2,0(r19)
10010154:	153fcf26 	beq	r2,r20,10010094 <__alt_data_end+0xf8010094>
10010158:	003fbc06 	br	1001004c <__alt_data_end+0xf801004c>
1001015c:	183ee83a 	callr	r3
10010160:	003ff906 	br	10010148 <__alt_data_end+0xf8010148>
10010164:	a5c00115 	stw	r23,4(r20)
10010168:	003feb06 	br	10010118 <__alt_data_end+0xf8010118>
1001016c:	89000017 	ldw	r4,0(r17)
10010170:	183ee83a 	callr	r3
10010174:	003ff406 	br	10010148 <__alt_data_end+0xf8010148>
10010178:	a0800017 	ldw	r2,0(r20)
1001017c:	a027883a 	mov	r19,r20
10010180:	1029883a 	mov	r20,r2
10010184:	003fb606 	br	10010060 <__alt_data_end+0xf8010060>
10010188:	0005883a 	mov	r2,zero
1001018c:	003ffb06 	br	1001017c <__alt_data_end+0xf801017c>
