
test.elf:     file format elf32-littlenios2
test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00012974 memsz 0x00012974 flags r-x
    LOAD off    0x00013994 vaddr 0x10012994 paddr 0x100145b0 align 2**12
         filesz 0x00001c1c memsz 0x00001c1c flags rw-
    LOAD off    0x000161cc vaddr 0x100161cc paddr 0x100161cc align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000121ec  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000578  1001241c  1001241c  0001341c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c1c  10012994  100145b0  00013994  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  100161cc  100161cc  000161cc  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  10016330  10016330  000155b0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000155b0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001248  00000000  00000000  000155d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00031219  00000000  00000000  00016820  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000bfba  00000000  00000000  00047a39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000e5ed  00000000  00000000  000539f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002900  00000000  00000000  00061fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004444  00000000  00000000  000648e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00019550  00000000  00000000  00068d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00082274  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001c10  00000000  00000000  00082288  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00087892  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00087895  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000878a1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000878a2  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000878a3  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000878a7  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000878ab  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000878af  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000878ba  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000878c5  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  000878d0  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000034  00000000  00000000  000878dd  2**0
                  CONTENTS, READONLY
 29 .jdi          00006a92  00000000  00000000  00087911  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00053685  00000000  00000000  0008e3a3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
1001241c l    d  .rodata	00000000 .rodata
10012994 l    d  .rwdata	00000000 .rwdata
100161cc l    d  .bss	00000000 .bss
10016330 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
10014510 l     O .rwdata	00000003 VALID_HEADER
10014514 l     O .rwdata	00000004 frameptr
10014518 l     O .rwdata	00000004 ocmptr
1001451c l     O .rwdata	00000004 ON_NIOS
1001263c l     O .rodata	0000000a __func__.3281
10014520 l     O .rwdata	00000005 __func__.3295
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10001be4 l     F .text	00000008 __fp_unlock
10001bf8 l     F .text	0000019c __sinit.part.1
10001d94 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 ftell.c
00000000 l    df *ABS*	00000000 ftello.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
10012a38 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
10004414 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 vfprintf.c
100126d2 l     O .rodata	00000010 zeroes.4404
10006b3c l     F .text	000000bc __sbprintf
100126e2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 dtoa.c
10006f98 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
10013284 l     O .rwdata	00000020 lc_ctype_charset
10013264 l     O .rwdata	00000020 lc_message_charset
100132a4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
10012710 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000a860 l     F .text	000000fc __sprint_r.part.0
10012834 l     O .rodata	00000010 zeroes.4349
1000be9c l     F .text	000000bc __sbprintf
10012844 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000f9e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000faf4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000fb54 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
1000fc68 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
1000fd50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000febc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000ffa8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
10010184 l     F .text	0000003c alt_get_errno
100101c0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10014558 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1001053c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10010678 l     F .text	00000034 alt_dev_reg
10013484 l     O .rwdata	00001060 jtag_uart_0
100144e4 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10010960 l     F .text	0000020c altera_avalon_jtag_uart_irq
10010b6c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
1001455c l     O .rwdata	00000009 hcinfo.2538
10014568 l     O .rwdata	0000000a hcinfo.2551
10014574 l     O .rwdata	00000009 hcinfo.2560
10014580 l     O .rwdata	0000000a hcinfo.2573
1001458c l     O .rwdata	0000000a hcinfo.2586
10014598 l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10011774 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10011eb0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
10016204 g     O .bss	00000004 alt_instruction_exception_handler
10003dac g     F .text	00000018 putchar
1000a0cc g     F .text	00000074 _mprec_log10
1000a1b8 g     F .text	0000008c __any_on
10008dbc g     F .text	00000054 _isatty_r
1001271c g     O .rodata	00000028 __mprec_tinytens
100100c0 g     F .text	0000007c alt_main
1000026c g     F .text	00000684 uncompress
10003dc4 g     F .text	000000c0 _puts_r
10016230 g     O .bss	00000100 alt_irq
10008eec g     F .text	00000060 _lseek_r
100145b0 g       *ABS*	00000000 __flash_rwdata_start
10008848 g     F .text	000000ac __sflags
1000e3b8 g     F .text	00000088 .hidden __eqdf2
10016330 g       *ABS*	00000000 __alt_heap_start
1000a724 g     F .text	0000005c _kill_r
10003d68 g     F .text	0000003c printf
1000c394 g     F .text	0000009c _wcrtomb_r
1000a4ec g     F .text	00000084 _signal_r
10004730 g     F .text	0000005c __sseek
10001f44 g     F .text	00000010 __sinit
1000bf58 g     F .text	00000140 __swbuf_r
10008e10 g     F .text	0000007c _setlocale_r
10001d9c g     F .text	00000078 __sfmoreglue
10010160 g     F .text	00000024 __malloc_unlock
100111a4 g     F .text	0000011c alt_hostfs_open
10000b18 g     F .text	0000002c getControl
100008f0 g     F .text	00000020 checkPacked
10009030 g     F .text	0000015c memmove
10001f2c g     F .text	00000018 _cleanup
1000918c g     F .text	000000a8 _Balloc
1000e440 g     F .text	000000dc .hidden __gtdf2
100121b4 g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
10002c6c g     F .text	0000005c _fstat_r
100161d0 g     O .bss	00000004 errno
100046ac g     F .text	00000008 __seofread
100161f0 g     O .bss	00000004 alt_argv
1001c50c g       *ABS*	00000000 _gp
1000fc48 g     F .text	00000020 getpid
10013304 g     O .rwdata	00000180 alt_fd_list
100113dc g     F .text	00000068 alt_hostfs_seek
10003da4 g     F .text	00000008 _putchar_r
10011914 g     F .text	00000090 alt_find_dev
10003a68 g     F .text	00000148 memcpy
10001bec g     F .text	0000000c _cleanup_r
1000f7f8 g     F .text	000000dc .hidden __floatsidf
10011aac g     F .text	00000080 alt_fs_reg
10011f94 g     F .text	0000007c alt_io_redirect
1000e51c g     F .text	000000f4 .hidden __ltdf2
1001241c g       *ABS*	00000000 __DTOR_END__
10003e84 g     F .text	00000014 puts
100121d8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
1000a40c g     F .text	00000074 __fpclassifyd
1000a028 g     F .text	000000a4 __ratio
1000be80 g     F .text	0000001c __vfiprintf_internal
10010d64 g     F .text	0000021c altera_avalon_jtag_uart_read
10003234 g     F .text	00000014 malloc
10003d38 g     F .text	00000030 _printf_r
100016a0 g     F .text	00000064 .hidden __udivsi3
1000fca4 g     F .text	000000ac isatty
1000a570 g     F .text	000000bc _raise_r
10001784 g     F .text	00000068 __assert_func
1001276c g     O .rodata	000000c8 __mprec_tens
10008e8c g     F .text	0000000c __locale_charset
100161dc g     O .bss	00000004 __malloc_top_pad
1000a780 g     F .text	00000004 _getpid_r
10014538 g     O .rwdata	00000004 __mb_cur_max
10008ebc g     F .text	0000000c _localeconv_r
100095c0 g     F .text	0000003c __i2b
100088f4 g     F .text	000004c8 __sfvwrite_r
1000a62c g     F .text	000000a8 __sigtramp_r
10004604 g     F .text	00000054 _sbrk_r
10011304 g     F .text	0000006c alt_hostfs_read
1000a3ac g     F .text	00000060 _read_r
10014550 g     O .rwdata	00000004 alt_max_fd
10001838 g     F .text	000000f0 _fclose_r
10001bb4 g     F .text	00000030 fflush
100161d8 g     O .bss	00000004 __malloc_max_sbrked_mem
1000d13c g     F .text	000008ac .hidden __adddf3
10009dd0 g     F .text	0000010c __b2d
1000cb78 g     F .text	000005c4 .hidden __umoddi3
1000ffe4 g     F .text	000000dc lseek
10014528 g     O .rwdata	00000004 _global_impure_ptr
10003eb0 g     F .text	00000564 _realloc_r
10016330 g       *ABS*	00000000 __bss_end
10011dc0 g     F .text	000000f0 alt_iic_isr_register
100120ac g     F .text	00000108 alt_tick
1000c57c g     F .text	000005fc .hidden __udivdi3
1000c2f0 g     F .text	00000024 _fputwc_r
10012744 g     O .rodata	00000028 __mprec_bigtens
100093a4 g     F .text	00000104 __s2b
10006f80 g     F .text	00000018 abort
1000f8d4 g     F .text	000000a8 .hidden __floatunsidf
10009b10 g     F .text	00000060 __mcmp
10001f64 g     F .text	00000018 __fp_lock_all
10011d74 g     F .text	0000004c alt_ic_irq_enabled
10012010 g     F .text	0000009c alt_alarm_stop
100161f8 g     O .bss	00000004 alt_irq_active
1000280c g     F .text	00000444 _fseeko_r
100112c0 g     F .text	00000044 alt_hostfs_close
100000fc g     F .exceptions	000000d4 alt_irq_handler
100132dc g     O .rwdata	00000028 alt_dev_null
10000978 g     F .text	00000028 getch
10011754 g     F .text	00000020 alt_dcache_flush_all
100094a8 g     F .text	00000068 __hi0bits
1000f778 g     F .text	00000080 .hidden __fixdfsi
100145b0 g       *ABS*	00000000 __ram_rwdata_end
10014548 g     O .rwdata	00000008 alt_dev_list
10010578 g     F .text	00000100 write
1000a244 g     F .text	000000a0 _putc_r
10012994 g       *ABS*	00000000 __ram_rodata_end
1000fb90 g     F .text	000000b8 fstat
10002124 g     F .text	00000024 fprintf
1000fd8c g     F .text	00000130 kill
1000e51c g     F .text	000000f4 .hidden __ledf2
10009888 g     F .text	00000140 __pow5mult
100161e8 g     O .bss	00000004 __nlocale_changed
1000a974 g     F .text	0000150c ___vfiprintf_internal_r
10001704 g     F .text	00000058 .hidden __umodsi3
10016330 g       *ABS*	00000000 end
100161cc g     O .bss	00000004 fileptr
10002c50 g     F .text	0000001c fseeko
100027f0 g     F .text	0000001c fseek
100108a0 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
1001241c g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000f97c g     F .text	00000064 .hidden __clzsi2
10010f80 g     F .text	00000224 altera_avalon_jtag_uart_write
10001f54 g     F .text	00000004 __sfp_lock_acquire
10008f4c g     F .text	000000e4 memchr
10004844 g     F .text	000022dc ___vfprintf_internal_r
100024dc g     F .text	00000310 _free_r
10008e98 g     F .text	00000010 __locale_mb_cur_max
10006e00 g     F .text	00000180 __call_exitprocs
100161e4 g     O .bss	00000004 __mlocale_changed
10014530 g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
100161fc g     O .bss	00000004 _alt_tick_rate
10002dcc g     F .text	00000014 ftello
100099c8 g     F .text	00000148 __lshift
10016200 g     O .bss	00000004 _alt_nticks
1000a6e8 g     F .text	00000018 signal
10000910 g     F .text	00000068 read
100106e4 g     F .text	00000058 alt_sys_init
10003cd8 g     F .text	00000060 _open_r
10012304 g     F .text	00000118 __register_exitproc
100095fc g     F .text	0000028c __multiply
10010c0c g     F .text	00000068 altera_avalon_jtag_uart_close
1000175c g     F .text	00000028 .hidden __mulsi3
10012994 g       *ABS*	00000000 __ram_rwdata_start
1001241c g       *ABS*	00000000 __ram_rodata_start
10016208 g     O .bss	00000028 __malloc_current_mallinfo
10009edc g     F .text	0000014c __d2b
10003e98 g     F .text	00000018 realloc
1001073c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10011b2c g     F .text	000000c4 alt_get_fd
10006dac g     F .text	00000054 _close_r
10012288 g     F .text	0000007c memcmp
100107fc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10016330 g       *ABS*	00000000 __alt_stack_base
1001084c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10002f68 g     F .text	000000dc _fwrite_r
10002ce0 g     F .text	000000ec _ftello_r
10006c58 g     F .text	00000154 __swsetup_r
1000d9e8 g     F .text	000009d0 .hidden __divdf3
10001e14 g     F .text	00000118 __sfp
1000a140 g     F .text	00000078 __copybits
10012e5c g     O .rwdata	00000408 __malloc_av_
10001f60 g     F .text	00000004 __sinit_lock_release
1000e610 g     F .text	0000086c .hidden __muldf3
10004658 g     F .text	00000054 __sread
10002384 g     F .text	00000034 fread
10012994 g     O .rwdata	000000a1 _gif
100119a4 g     F .text	00000108 alt_find_file
100117b0 g     F .text	000000a4 alt_dev_llist_insert
1001013c g     F .text	00000024 __malloc_lock
100020fc g     F .text	00000028 _fprintf_r
1001048c g     F .text	000000b0 sbrk
10001b58 g     F .text	0000005c _fflush_r
1000c0b0 g     F .text	000000dc _calloc_r
100020e4 g     F .text	00000018 fopen
100161cc g       *ABS*	00000000 __bss_start
10003bb0 g     F .text	00000128 memset
10000b44 g     F .text	00000a64 main
100161f4 g     O .bss	00000004 alt_envp
100161d4 g     O .bss	00000004 __malloc_max_total_mem
1001079c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10002ccc g     F .text	00000014 ftell
1000c098 g     F .text	00000018 __swbuf
10002148 g     F .text	0000023c _fread_r
100009d8 g     F .text	00000064 skipToTerm
1000478c g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
10001928 g     F .text	00000014 fclose
100071c0 g     F .text	00001688 _dtoa_r
1000325c g     F .text	0000080c _malloc_r
1000c4f0 g     F .text	00000030 __ascii_wctomb
10014554 g     O .rwdata	00000004 alt_errno
10001f94 g     F .text	00000020 _fiprintf_r
1000a700 g     F .text	00000010 _init_signal
100009a0 g     F .text	00000038 seek
10002de0 g     F .text	000000c4 _fwalk
1000a2e4 g     F .text	000000c8 putc
100015a8 g     F .text	00000084 .hidden __divsi3
100023b8 g     F .text	00000124 _malloc_trim_r
1001241c g       *ABS*	00000000 __CTOR_END__
1000a784 g     F .text	000000dc strcmp
1001241c g       *ABS*	00000000 __flash_rodata_start
1001241c g       *ABS*	00000000 __DTOR_LIST__
1000e3b8 g     F .text	00000088 .hidden __nedf2
100106ac g     F .text	00000038 alt_irq_init
10010408 g     F .text	00000084 alt_release_fd
10012854 g     O .rodata	00000100 .hidden __clz_tab
100161e0 g     O .bss	00000004 _PathLocale
10012274 g     F .text	00000014 atexit
10006bf8 g     F .text	00000060 _write_r
10008ec8 g     F .text	00000018 setlocale
1001452c g     O .rwdata	00000004 _impure_ptr
10000a3c g     F .text	000000dc writeSRAM
100161ec g     O .bss	00000004 alt_argc
1000193c g     F .text	0000021c __sflush_r
100118b4 g     F .text	00000060 _do_dtors
10008eb4 g     F .text	00000008 __locale_cjk_lang
100027ec g     F .text	00000004 _fseek_r
10004430 g     F .text	000001d4 __srefill_r
10000020 g       .exceptions	00000000 alt_irq_entry
10009d6c g     F .text	00000064 __ulp
10001f7c g     F .text	00000018 __fp_unlock_all
10014540 g     O .rwdata	00000008 alt_fs_list
10011370 g     F .text	0000006c alt_hostfs_write
10000020 g       *ABS*	00000000 __ram_exceptions_start
10008ee0 g     F .text	0000000c localeconv
1001450c g     O .rwdata	00000004 _gif_len
10011c10 g     F .text	00000050 alt_ic_isr_register
10003044 g     F .text	00000034 fwrite
100145b0 g       *ABS*	00000000 _edata
10016330 g       *ABS*	00000000 _end
1000c18c g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
10010c74 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10011ce8 g     F .text	0000008c alt_ic_irq_disable
100046b4 g     F .text	0000007c __swrite
10014534 g     O .rwdata	00000004 __malloc_trim_threshold
10008ea8 g     F .text	0000000c __locale_msgcharset
10001800 g     F .text	00000038 exit
10001fb4 g     F .text	0000003c fiprintf
1000482c g     F .text	00000018 _vfiprintf_r
10002ea4 g     F .text	000000c4 _fwalk_reent
10009b70 g     F .text	000001fc __mdiff
1000162c g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10001f58 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10001ff0 g     F .text	000000f4 _fopen_r
1000fb20 g     F .text	00000034 _exit
10011628 g     F .text	0000012c alt_alarm_start
10003078 g     F .text	000001bc __smakebuf_r
10004794 g     F .text	00000098 strlen
1000a480 g     F .text	0000006c _init_signal_r
100102ac g     F .text	0000015c open
1000e440 g     F .text	000000dc .hidden __gedf2
100017ec g     F .text	00000014 __assert
1001453c g     O .rwdata	00000004 __wctomb
10002cc8 g     F .text	00000004 _ftell_r
1000a95c g     F .text	00000018 __sprint_r
10011bf0 g     F .text	00000020 alt_icache_flush_all
100145a4 g     O .rwdata	00000004 alt_priority_mask
10011c60 g     F .text	00000088 alt_ic_irq_enable
10006b20 g     F .text	0000001c __vfprintf_internal
1000c520 g     F .text	0000005c _wctomb_r
1000ee7c g     F .text	000008fc .hidden __subdf3
10009510 g     F .text	000000b0 __lo0bits
100145a8 g     O .rwdata	00000008 alt_alarm_list
10011854 g     F .text	00000060 _do_ctors
1000a710 g     F .text	00000014 __sigtramp
1000c430 g     F .text	000000c0 wcrtomb
1000fa1c g     F .text	000000d8 close
1000ff24 g     F .text	00000084 alt_load
1000c314 g     F .text	00000080 fputwc
1000a6d4 g     F .text	00000014 raise
10003248 g     F .text	00000014 free
10001f5c g     F .text	00000004 __sinit_lock_acquire
1000925c g     F .text	00000148 __multadd
10009234 g     F .text	00000028 _Bfree
10011444 g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	10988c04 	addi	r2,r2,25136
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	10988c04 	addi	r2,r2,25136
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0a73e17 	ldw	r2,-25352(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0a73e17 	ldw	r2,-25352(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
1000023c:	d6b14314 	ori	gp,gp,50444
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000244:	10987314 	ori	r2,r2,25036

    movhi r3, %hi(__bss_end)
10000248:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
1000024c:	18d8cc14 	ori	r3,r3,25392

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	000ff240 	call	1000ff24 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	00100c00 	call	100100c0 <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <uncompress>:
} dictionary_entry_t;

void uncompress(int32_t code_length,
				const unsigned char *input,
				int32_t input_length,
				unsigned char *out) {
1000026c:	deffec04 	addi	sp,sp,-80
10000270:	dfc01315 	stw	ra,76(sp)
10000274:	df001215 	stw	fp,72(sp)
10000278:	dc001115 	stw	r16,68(sp)
1000027c:	df001204 	addi	fp,sp,72
10000280:	e13ffb15 	stw	r4,-20(fp)
10000284:	e17ffc15 	stw	r5,-16(fp)
10000288:	e1bffd15 	stw	r6,-12(fp)
1000028c:	e1fffe15 	stw	r7,-8(fp)
	printf("uncompress!\n");
10000290:	01040074 	movhi	r4,4097
10000294:	21090704 	addi	r4,r4,9244
10000298:	0003e840 	call	10003e84 <puts>
	// Source for this function is:
	// https://commandlinefanatic.com/cgi-bin/showarticle.cgi?article=art011
	int32_t i, bit;
	int32_t code, prev = -1;
1000029c:	00bfffc4 	movi	r2,-1
100002a0:	e0bff015 	stw	r2,-64(fp)
	dictionary_entry_t *dictionary;
	int32_t dictionary_ind;
	uint32_t mask = 0x01;
100002a4:	00800044 	movi	r2,1
100002a8:	e0bff315 	stw	r2,-52(fp)
	int32_t reset_code_length;
	int32_t clear_code;	 // This varies depending on code_length
	int32_t stop_code;	 // one more than clear code
	int32_t match_len;

	clear_code = 1 << (code_length);
100002ac:	00c00044 	movi	r3,1
100002b0:	e0bffb17 	ldw	r2,-20(fp)
100002b4:	1884983a 	sll	r2,r3,r2
100002b8:	e0bff615 	stw	r2,-40(fp)
	stop_code = clear_code + 1;
100002bc:	e0bff617 	ldw	r2,-40(fp)
100002c0:	10800044 	addi	r2,r2,1
100002c4:	e0bff715 	stw	r2,-36(fp)
	// To handle clear codes
	reset_code_length = code_length;
100002c8:	e0bffb17 	ldw	r2,-20(fp)
100002cc:	e0bff815 	stw	r2,-32(fp)

	// Create a dictionary large enough to hold "code_length" entries.
	// Once the dictionary overflows, code_length increases
	dictionary = (dictionary_entry_t *)
		malloc(sizeof(dictionary_entry_t) * (1 << (code_length + 1)));
100002d0:	e0bffb17 	ldw	r2,-20(fp)
100002d4:	10800044 	addi	r2,r2,1
100002d8:	00c00304 	movi	r3,12
100002dc:	1884983a 	sll	r2,r3,r2
	// To handle clear codes
	reset_code_length = code_length;

	// Create a dictionary large enough to hold "code_length" entries.
	// Once the dictionary overflows, code_length increases
	dictionary = (dictionary_entry_t *)
100002e0:	1009883a 	mov	r4,r2
100002e4:	00032340 	call	10003234 <malloc>
100002e8:	e0bff115 	stw	r2,-60(fp)

	// Technically, it shouldn't be necessary to initialize the
	// dictionary.  The spec says that the encoder "should output a
	// clear code as the first code in the image data stream".  It doesn't
	// say must, though...
	for (dictionary_ind = 0;
100002ec:	e03ff215 	stw	zero,-56(fp)
100002f0:	00001e06 	br	1000036c <uncompress+0x100>
		 dictionary_ind < (1 << code_length);
		 dictionary_ind++) {
//		printf("setup dictionary start\n");
		dictionary[dictionary_ind].byte = dictionary_ind;
100002f4:	e0bff217 	ldw	r2,-56(fp)
100002f8:	01400304 	movi	r5,12
100002fc:	1009883a 	mov	r4,r2
10000300:	000175c0 	call	1000175c <__mulsi3>
10000304:	1007883a 	mov	r3,r2
10000308:	e0bff117 	ldw	r2,-60(fp)
1000030c:	10c5883a 	add	r2,r2,r3
10000310:	e0fff217 	ldw	r3,-56(fp)
10000314:	10c00005 	stb	r3,0(r2)
		// XXX this only works because prev is a 32-bit int32_t (> 12 bits)
		dictionary[dictionary_ind].prev = -1;
10000318:	e0bff217 	ldw	r2,-56(fp)
1000031c:	01400304 	movi	r5,12
10000320:	1009883a 	mov	r4,r2
10000324:	000175c0 	call	1000175c <__mulsi3>
10000328:	1007883a 	mov	r3,r2
1000032c:	e0bff117 	ldw	r2,-60(fp)
10000330:	10c5883a 	add	r2,r2,r3
10000334:	00ffffc4 	movi	r3,-1
10000338:	10c00115 	stw	r3,4(r2)
		dictionary[dictionary_ind].len = 1;
1000033c:	e0bff217 	ldw	r2,-56(fp)
10000340:	01400304 	movi	r5,12
10000344:	1009883a 	mov	r4,r2
10000348:	000175c0 	call	1000175c <__mulsi3>
1000034c:	1007883a 	mov	r3,r2
10000350:	e0bff117 	ldw	r2,-60(fp)
10000354:	10c5883a 	add	r2,r2,r3
10000358:	00c00044 	movi	r3,1
1000035c:	10c00215 	stw	r3,8(r2)
	// dictionary.  The spec says that the encoder "should output a
	// clear code as the first code in the image data stream".  It doesn't
	// say must, though...
	for (dictionary_ind = 0;
		 dictionary_ind < (1 << code_length);
		 dictionary_ind++) {
10000360:	e0bff217 	ldw	r2,-56(fp)
10000364:	10800044 	addi	r2,r2,1
10000368:	e0bff215 	stw	r2,-56(fp)
	// Technically, it shouldn't be necessary to initialize the
	// dictionary.  The spec says that the encoder "should output a
	// clear code as the first code in the image data stream".  It doesn't
	// say must, though...
	for (dictionary_ind = 0;
		 dictionary_ind < (1 << code_length);
1000036c:	00c00044 	movi	r3,1
10000370:	e0bffb17 	ldw	r2,-20(fp)
10000374:	1884983a 	sll	r2,r3,r2

	// Technically, it shouldn't be necessary to initialize the
	// dictionary.  The spec says that the encoder "should output a
	// clear code as the first code in the image data stream".  It doesn't
	// say must, though...
	for (dictionary_ind = 0;
10000378:	e0fff217 	ldw	r3,-56(fp)
1000037c:	18bfdd16 	blt	r3,r2,100002f4 <__alt_data_end+0xf80002f4>
		dictionary[dictionary_ind].prev = -1;
		dictionary[dictionary_ind].len = 1;
	}

	// 2^code_len + 1 is the special "end" code; don't give it an entry here
	dictionary_ind++;
10000380:	e0bff217 	ldw	r2,-56(fp)
10000384:	10800044 	addi	r2,r2,1
10000388:	e0bff215 	stw	r2,-56(fp)
	dictionary_ind++;
1000038c:	e0bff217 	ldw	r2,-56(fp)
10000390:	10800044 	addi	r2,r2,1
10000394:	e0bff215 	stw	r2,-56(fp)

	// TODO verify that the very last byte is clear_code + 1
	while (input_length) {
10000398:	00014806 	br	100008bc <uncompress+0x650>
//		printf("main loop | code_length: %d\n", code_length);
		code = 0x0;
1000039c:	e03fef15 	stw	zero,-68(fp)
		// Always read one more bit than the code length
		for (i = 0; i < (code_length + 1); i++) {
100003a0:	e03fee15 	stw	zero,-72(fp)
100003a4:	00001f06 	br	10000424 <uncompress+0x1b8>
//			 printf("    mask:        %02x\n", mask);
//			 printf("    bit:         %02x\n", bit);
//			 printf("    input:       %02x\n", *input);
//

			bit = (*input & mask) ? 1 : 0;
100003a8:	e0bffc17 	ldw	r2,-16(fp)
100003ac:	10800003 	ldbu	r2,0(r2)
100003b0:	10c03fcc 	andi	r3,r2,255
100003b4:	e0bff317 	ldw	r2,-52(fp)
100003b8:	1884703a 	and	r2,r3,r2
100003bc:	1004c03a 	cmpne	r2,r2,zero
100003c0:	10803fcc 	andi	r2,r2,255
100003c4:	e0bff915 	stw	r2,-28(fp)
			mask <<= 1;
100003c8:	e0bff317 	ldw	r2,-52(fp)
100003cc:	1085883a 	add	r2,r2,r2
100003d0:	e0bff315 	stw	r2,-52(fp)

			if (mask == 0x100) {
100003d4:	e0bff317 	ldw	r2,-52(fp)
100003d8:	10804018 	cmpnei	r2,r2,256
100003dc:	1000081e 	bne	r2,zero,10000400 <uncompress+0x194>
				mask = 0x01;
100003e0:	00800044 	movi	r2,1
100003e4:	e0bff315 	stw	r2,-52(fp)
				input++;
100003e8:	e0bffc17 	ldw	r2,-16(fp)
100003ec:	10800044 	addi	r2,r2,1
100003f0:	e0bffc15 	stw	r2,-16(fp)
				input_length--;
100003f4:	e0bffd17 	ldw	r2,-12(fp)
100003f8:	10bfffc4 	addi	r2,r2,-1
100003fc:	e0bffd15 	stw	r2,-12(fp)
			}

			code = code | (bit << i);
10000400:	e0fff917 	ldw	r3,-28(fp)
10000404:	e0bfee17 	ldw	r2,-72(fp)
10000408:	1884983a 	sll	r2,r3,r2
1000040c:	e0ffef17 	ldw	r3,-68(fp)
10000410:	1884b03a 	or	r2,r3,r2
10000414:	e0bfef15 	stw	r2,-68(fp)
	// TODO verify that the very last byte is clear_code + 1
	while (input_length) {
//		printf("main loop | code_length: %d\n", code_length);
		code = 0x0;
		// Always read one more bit than the code length
		for (i = 0; i < (code_length + 1); i++) {
10000418:	e0bfee17 	ldw	r2,-72(fp)
1000041c:	10800044 	addi	r2,r2,1
10000420:	e0bfee15 	stw	r2,-72(fp)
10000424:	e0bffb17 	ldw	r2,-20(fp)
10000428:	10800044 	addi	r2,r2,1
1000042c:	e0ffee17 	ldw	r3,-72(fp)
10000430:	18bfdd16 	blt	r3,r2,100003a8 <__alt_data_end+0xf80003a8>
			code = code | (bit << i);
		}
//        printf("new code: %02x\n", code);


		if (code == clear_code) {
10000434:	e0ffef17 	ldw	r3,-68(fp)
10000438:	e0bff617 	ldw	r2,-40(fp)
1000043c:	1880381e 	bne	r3,r2,10000520 <uncompress+0x2b4>
			code_length = reset_code_length;
10000440:	e0bff817 	ldw	r2,-32(fp)
10000444:	e0bffb15 	stw	r2,-20(fp)
			dictionary = (dictionary_entry_t *)realloc(dictionary,
													   sizeof(dictionary_entry_t) * (1 << (code_length + 1)));
10000448:	e0bffb17 	ldw	r2,-20(fp)
1000044c:	10800044 	addi	r2,r2,1
//        printf("new code: %02x\n", code);


		if (code == clear_code) {
			code_length = reset_code_length;
			dictionary = (dictionary_entry_t *)realloc(dictionary,
10000450:	00c00304 	movi	r3,12
10000454:	1884983a 	sll	r2,r3,r2
10000458:	100b883a 	mov	r5,r2
1000045c:	e13ff117 	ldw	r4,-60(fp)
10000460:	0003e980 	call	10003e98 <realloc>
10000464:	e0bff115 	stw	r2,-60(fp)
													   sizeof(dictionary_entry_t) * (1 << (code_length + 1)));

			for (dictionary_ind = 0;
10000468:	e03ff215 	stw	zero,-56(fp)
1000046c:	00001e06 	br	100004e8 <uncompress+0x27c>
				 dictionary_ind < (1 << code_length);
				 dictionary_ind++) {
				dictionary[dictionary_ind].byte = dictionary_ind;
10000470:	e0bff217 	ldw	r2,-56(fp)
10000474:	01400304 	movi	r5,12
10000478:	1009883a 	mov	r4,r2
1000047c:	000175c0 	call	1000175c <__mulsi3>
10000480:	1007883a 	mov	r3,r2
10000484:	e0bff117 	ldw	r2,-60(fp)
10000488:	10c5883a 	add	r2,r2,r3
1000048c:	e0fff217 	ldw	r3,-56(fp)
10000490:	10c00005 	stb	r3,0(r2)
				// XXX this only works because prev is a 32-bit int32_t (> 12 bits)
				dictionary[dictionary_ind].prev = -1;
10000494:	e0bff217 	ldw	r2,-56(fp)
10000498:	01400304 	movi	r5,12
1000049c:	1009883a 	mov	r4,r2
100004a0:	000175c0 	call	1000175c <__mulsi3>
100004a4:	1007883a 	mov	r3,r2
100004a8:	e0bff117 	ldw	r2,-60(fp)
100004ac:	10c5883a 	add	r2,r2,r3
100004b0:	00ffffc4 	movi	r3,-1
100004b4:	10c00115 	stw	r3,4(r2)
				dictionary[dictionary_ind].len = 1;
100004b8:	e0bff217 	ldw	r2,-56(fp)
100004bc:	01400304 	movi	r5,12
100004c0:	1009883a 	mov	r4,r2
100004c4:	000175c0 	call	1000175c <__mulsi3>
100004c8:	1007883a 	mov	r3,r2
100004cc:	e0bff117 	ldw	r2,-60(fp)
100004d0:	10c5883a 	add	r2,r2,r3
100004d4:	00c00044 	movi	r3,1
100004d8:	10c00215 	stw	r3,8(r2)
			dictionary = (dictionary_entry_t *)realloc(dictionary,
													   sizeof(dictionary_entry_t) * (1 << (code_length + 1)));

			for (dictionary_ind = 0;
				 dictionary_ind < (1 << code_length);
				 dictionary_ind++) {
100004dc:	e0bff217 	ldw	r2,-56(fp)
100004e0:	10800044 	addi	r2,r2,1
100004e4:	e0bff215 	stw	r2,-56(fp)
			code_length = reset_code_length;
			dictionary = (dictionary_entry_t *)realloc(dictionary,
													   sizeof(dictionary_entry_t) * (1 << (code_length + 1)));

			for (dictionary_ind = 0;
				 dictionary_ind < (1 << code_length);
100004e8:	00c00044 	movi	r3,1
100004ec:	e0bffb17 	ldw	r2,-20(fp)
100004f0:	1884983a 	sll	r2,r3,r2
		if (code == clear_code) {
			code_length = reset_code_length;
			dictionary = (dictionary_entry_t *)realloc(dictionary,
													   sizeof(dictionary_entry_t) * (1 << (code_length + 1)));

			for (dictionary_ind = 0;
100004f4:	e0fff217 	ldw	r3,-56(fp)
100004f8:	18bfdd16 	blt	r3,r2,10000470 <__alt_data_end+0xf8000470>
				dictionary[dictionary_ind].byte = dictionary_ind;
				// XXX this only works because prev is a 32-bit int32_t (> 12 bits)
				dictionary[dictionary_ind].prev = -1;
				dictionary[dictionary_ind].len = 1;
			}
			dictionary_ind++;
100004fc:	e0bff217 	ldw	r2,-56(fp)
10000500:	10800044 	addi	r2,r2,1
10000504:	e0bff215 	stw	r2,-56(fp)
			dictionary_ind++;
10000508:	e0bff217 	ldw	r2,-56(fp)
1000050c:	10800044 	addi	r2,r2,1
10000510:	e0bff215 	stw	r2,-56(fp)
			prev = -1;
10000514:	00bfffc4 	movi	r2,-1
10000518:	e0bff015 	stw	r2,-64(fp)
			continue;
1000051c:	0000e706 	br	100008bc <uncompress+0x650>
		} else if (code == stop_code) {
10000520:	e0ffef17 	ldw	r3,-68(fp)
10000524:	e0bff717 	ldw	r2,-36(fp)
10000528:	18800d1e 	bne	r3,r2,10000560 <uncompress+0x2f4>
			if (input_length > 1) {
1000052c:	e0bffd17 	ldw	r2,-12(fp)
10000530:	10800090 	cmplti	r2,r2,2
10000534:	1000e41e 	bne	r2,zero,100008c8 <uncompress+0x65c>
				fprintf(stderr, "Malformed GIF (early stop code)\n");
10000538:	d0a00817 	ldw	r2,-32736(gp)
1000053c:	10800317 	ldw	r2,12(r2)
10000540:	100f883a 	mov	r7,r2
10000544:	01800804 	movi	r6,32
10000548:	01400044 	movi	r5,1
1000054c:	01040074 	movhi	r4,4097
10000550:	21090a04 	addi	r4,r4,9256
10000554:	00030440 	call	10003044 <fwrite>
				exit(0);
10000558:	0009883a 	mov	r4,zero
1000055c:	00018000 	call	10001800 <exit>
			break;
		}

		// Update the dictionary with this character plus the _entry_
		// (character or string) that came before it
		if ((prev > -1) && (code_length < 12)) {
10000560:	e0bff017 	ldw	r2,-64(fp)
10000564:	10009116 	blt	r2,zero,100007ac <uncompress+0x540>
10000568:	e0bffb17 	ldw	r2,-20(fp)
1000056c:	10800308 	cmpgei	r2,r2,12
10000570:	10008e1e 	bne	r2,zero,100007ac <uncompress+0x540>

			if (code > dictionary_ind) {
10000574:	e0bfef17 	ldw	r2,-68(fp)
10000578:	e0fff217 	ldw	r3,-56(fp)
1000057c:	18800a0e 	bge	r3,r2,100005a8 <uncompress+0x33c>
				fprintf(stderr, "code = %.02x, but dictionary_ind = %.02x\n",
10000580:	d0a00817 	ldw	r2,-32736(gp)
10000584:	10800317 	ldw	r2,12(r2)
10000588:	e1fff217 	ldw	r7,-56(fp)
1000058c:	e1bfef17 	ldw	r6,-68(fp)
10000590:	01440074 	movhi	r5,4097
10000594:	29491304 	addi	r5,r5,9292
10000598:	1009883a 	mov	r4,r2
1000059c:	00021240 	call	10002124 <fprintf>
						code, dictionary_ind);
				exit(0);
100005a0:	0009883a 	mov	r4,zero
100005a4:	00018000 	call	10001800 <exit>
			}

			// Special handling for KwKwK
			if (code == dictionary_ind) {
100005a8:	e0ffef17 	ldw	r3,-68(fp)
100005ac:	e0bff217 	ldw	r2,-56(fp)
100005b0:	1880271e 	bne	r3,r2,10000650 <uncompress+0x3e4>
				int32_t ptr = prev;
100005b4:	e0bff017 	ldw	r2,-64(fp)
100005b8:	e0bff415 	stw	r2,-48(fp)

				while (dictionary[ptr].prev != -1) {
100005bc:	00000906 	br	100005e4 <uncompress+0x378>
					ptr = dictionary[ptr].prev;
100005c0:	e0bff417 	ldw	r2,-48(fp)
100005c4:	01400304 	movi	r5,12
100005c8:	1009883a 	mov	r4,r2
100005cc:	000175c0 	call	1000175c <__mulsi3>
100005d0:	1007883a 	mov	r3,r2
100005d4:	e0bff117 	ldw	r2,-60(fp)
100005d8:	10c5883a 	add	r2,r2,r3
100005dc:	10800117 	ldw	r2,4(r2)
100005e0:	e0bff415 	stw	r2,-48(fp)

			// Special handling for KwKwK
			if (code == dictionary_ind) {
				int32_t ptr = prev;

				while (dictionary[ptr].prev != -1) {
100005e4:	e0bff417 	ldw	r2,-48(fp)
100005e8:	01400304 	movi	r5,12
100005ec:	1009883a 	mov	r4,r2
100005f0:	000175c0 	call	1000175c <__mulsi3>
100005f4:	1007883a 	mov	r3,r2
100005f8:	e0bff117 	ldw	r2,-60(fp)
100005fc:	10c5883a 	add	r2,r2,r3
10000600:	10800117 	ldw	r2,4(r2)
10000604:	10bfffd8 	cmpnei	r2,r2,-1
10000608:	103fed1e 	bne	r2,zero,100005c0 <__alt_data_end+0xf80005c0>
					ptr = dictionary[ptr].prev;
				}
				dictionary[dictionary_ind].byte = dictionary[ptr].byte;
1000060c:	e0bff217 	ldw	r2,-56(fp)
10000610:	01400304 	movi	r5,12
10000614:	1009883a 	mov	r4,r2
10000618:	000175c0 	call	1000175c <__mulsi3>
1000061c:	1007883a 	mov	r3,r2
10000620:	e0bff117 	ldw	r2,-60(fp)
10000624:	10e1883a 	add	r16,r2,r3
10000628:	e0bff417 	ldw	r2,-48(fp)
1000062c:	01400304 	movi	r5,12
10000630:	1009883a 	mov	r4,r2
10000634:	000175c0 	call	1000175c <__mulsi3>
10000638:	1007883a 	mov	r3,r2
1000063c:	e0bff117 	ldw	r2,-60(fp)
10000640:	10c5883a 	add	r2,r2,r3
10000644:	10800003 	ldbu	r2,0(r2)
10000648:	80800005 	stb	r2,0(r16)
1000064c:	00002606 	br	100006e8 <uncompress+0x47c>
			} else {
				int32_t ptr = code;
10000650:	e0bfef17 	ldw	r2,-68(fp)
10000654:	e0bff515 	stw	r2,-44(fp)
				while (dictionary[ptr].prev != -1) {
10000658:	00000906 	br	10000680 <uncompress+0x414>
					ptr = dictionary[ptr].prev;
1000065c:	e0bff517 	ldw	r2,-44(fp)
10000660:	01400304 	movi	r5,12
10000664:	1009883a 	mov	r4,r2
10000668:	000175c0 	call	1000175c <__mulsi3>
1000066c:	1007883a 	mov	r3,r2
10000670:	e0bff117 	ldw	r2,-60(fp)
10000674:	10c5883a 	add	r2,r2,r3
10000678:	10800117 	ldw	r2,4(r2)
1000067c:	e0bff515 	stw	r2,-44(fp)
					ptr = dictionary[ptr].prev;
				}
				dictionary[dictionary_ind].byte = dictionary[ptr].byte;
			} else {
				int32_t ptr = code;
				while (dictionary[ptr].prev != -1) {
10000680:	e0bff517 	ldw	r2,-44(fp)
10000684:	01400304 	movi	r5,12
10000688:	1009883a 	mov	r4,r2
1000068c:	000175c0 	call	1000175c <__mulsi3>
10000690:	1007883a 	mov	r3,r2
10000694:	e0bff117 	ldw	r2,-60(fp)
10000698:	10c5883a 	add	r2,r2,r3
1000069c:	10800117 	ldw	r2,4(r2)
100006a0:	10bfffd8 	cmpnei	r2,r2,-1
100006a4:	103fed1e 	bne	r2,zero,1000065c <__alt_data_end+0xf800065c>
					ptr = dictionary[ptr].prev;
				}
				dictionary[dictionary_ind].byte = dictionary[ptr].byte;
100006a8:	e0bff217 	ldw	r2,-56(fp)
100006ac:	01400304 	movi	r5,12
100006b0:	1009883a 	mov	r4,r2
100006b4:	000175c0 	call	1000175c <__mulsi3>
100006b8:	1007883a 	mov	r3,r2
100006bc:	e0bff117 	ldw	r2,-60(fp)
100006c0:	10e1883a 	add	r16,r2,r3
100006c4:	e0bff517 	ldw	r2,-44(fp)
100006c8:	01400304 	movi	r5,12
100006cc:	1009883a 	mov	r4,r2
100006d0:	000175c0 	call	1000175c <__mulsi3>
100006d4:	1007883a 	mov	r3,r2
100006d8:	e0bff117 	ldw	r2,-60(fp)
100006dc:	10c5883a 	add	r2,r2,r3
100006e0:	10800003 	ldbu	r2,0(r2)
100006e4:	80800005 	stb	r2,0(r16)
			}

			dictionary[dictionary_ind].prev = prev;
100006e8:	e0bff217 	ldw	r2,-56(fp)
100006ec:	01400304 	movi	r5,12
100006f0:	1009883a 	mov	r4,r2
100006f4:	000175c0 	call	1000175c <__mulsi3>
100006f8:	1007883a 	mov	r3,r2
100006fc:	e0bff117 	ldw	r2,-60(fp)
10000700:	10c5883a 	add	r2,r2,r3
10000704:	e0fff017 	ldw	r3,-64(fp)
10000708:	10c00115 	stw	r3,4(r2)

			dictionary[dictionary_ind].len = dictionary[prev].len + 1;
1000070c:	e0bff217 	ldw	r2,-56(fp)
10000710:	01400304 	movi	r5,12
10000714:	1009883a 	mov	r4,r2
10000718:	000175c0 	call	1000175c <__mulsi3>
1000071c:	1007883a 	mov	r3,r2
10000720:	e0bff117 	ldw	r2,-60(fp)
10000724:	10e1883a 	add	r16,r2,r3
10000728:	e0bff017 	ldw	r2,-64(fp)
1000072c:	01400304 	movi	r5,12
10000730:	1009883a 	mov	r4,r2
10000734:	000175c0 	call	1000175c <__mulsi3>
10000738:	1007883a 	mov	r3,r2
1000073c:	e0bff117 	ldw	r2,-60(fp)
10000740:	10c5883a 	add	r2,r2,r3
10000744:	10800217 	ldw	r2,8(r2)
10000748:	10800044 	addi	r2,r2,1
1000074c:	80800215 	stw	r2,8(r16)

			dictionary_ind++;
10000750:	e0bff217 	ldw	r2,-56(fp)
10000754:	10800044 	addi	r2,r2,1
10000758:	e0bff215 	stw	r2,-56(fp)

			// GIF89a mandates that this stops at 12 bits
			if ((dictionary_ind == (1 << (code_length + 1))) &&
1000075c:	e0bffb17 	ldw	r2,-20(fp)
10000760:	10800044 	addi	r2,r2,1
10000764:	00c00044 	movi	r3,1
10000768:	1886983a 	sll	r3,r3,r2
1000076c:	e0bff217 	ldw	r2,-56(fp)
10000770:	18800e1e 	bne	r3,r2,100007ac <uncompress+0x540>
10000774:	e0bffb17 	ldw	r2,-20(fp)
10000778:	108002c8 	cmpgei	r2,r2,11
1000077c:	10000b1e 	bne	r2,zero,100007ac <uncompress+0x540>
				(code_length < 11)) {
				code_length++;
10000780:	e0bffb17 	ldw	r2,-20(fp)
10000784:	10800044 	addi	r2,r2,1
10000788:	e0bffb15 	stw	r2,-20(fp)

				dictionary = (dictionary_entry_t *)realloc(dictionary,
														   sizeof(dictionary_entry_t) * (1 << (code_length + 1)));
1000078c:	e0bffb17 	ldw	r2,-20(fp)
10000790:	10800044 	addi	r2,r2,1
			// GIF89a mandates that this stops at 12 bits
			if ((dictionary_ind == (1 << (code_length + 1))) &&
				(code_length < 11)) {
				code_length++;

				dictionary = (dictionary_entry_t *)realloc(dictionary,
10000794:	00c00304 	movi	r3,12
10000798:	1884983a 	sll	r2,r3,r2
1000079c:	100b883a 	mov	r5,r2
100007a0:	e13ff117 	ldw	r4,-60(fp)
100007a4:	0003e980 	call	10003e98 <realloc>
100007a8:	e0bff115 	stw	r2,-60(fp)
														   sizeof(dictionary_entry_t) * (1 << (code_length + 1)));
			}
		}

		prev = code;
100007ac:	e0bfef17 	ldw	r2,-68(fp)
100007b0:	e0bff015 	stw	r2,-64(fp)

		// Now copy the dictionary entry backwards int32_to "out"
		match_len = dictionary[code].len;
100007b4:	e0bfef17 	ldw	r2,-68(fp)
100007b8:	01400304 	movi	r5,12
100007bc:	1009883a 	mov	r4,r2
100007c0:	000175c0 	call	1000175c <__mulsi3>
100007c4:	1007883a 	mov	r3,r2
100007c8:	e0bff117 	ldw	r2,-60(fp)
100007cc:	10c5883a 	add	r2,r2,r3
100007d0:	10800217 	ldw	r2,8(r2)
100007d4:	e0bffa15 	stw	r2,-24(fp)
		while (code != -1) {
100007d8:	00003106 	br	100008a0 <uncompress+0x634>
			out[dictionary[code].len - 1] = dictionary[code].byte;
100007dc:	e0bfef17 	ldw	r2,-68(fp)
100007e0:	01400304 	movi	r5,12
100007e4:	1009883a 	mov	r4,r2
100007e8:	000175c0 	call	1000175c <__mulsi3>
100007ec:	1007883a 	mov	r3,r2
100007f0:	e0bff117 	ldw	r2,-60(fp)
100007f4:	10c5883a 	add	r2,r2,r3
100007f8:	10800217 	ldw	r2,8(r2)
100007fc:	10bfffc4 	addi	r2,r2,-1
10000800:	e0fffe17 	ldw	r3,-8(fp)
10000804:	18a1883a 	add	r16,r3,r2
10000808:	e0bfef17 	ldw	r2,-68(fp)
1000080c:	01400304 	movi	r5,12
10000810:	1009883a 	mov	r4,r2
10000814:	000175c0 	call	1000175c <__mulsi3>
10000818:	1007883a 	mov	r3,r2
1000081c:	e0bff117 	ldw	r2,-60(fp)
10000820:	10c5883a 	add	r2,r2,r3
10000824:	10800003 	ldbu	r2,0(r2)
10000828:	80800005 	stb	r2,0(r16)
			if (dictionary[code].prev == code) {
1000082c:	e0bfef17 	ldw	r2,-68(fp)
10000830:	01400304 	movi	r5,12
10000834:	1009883a 	mov	r4,r2
10000838:	000175c0 	call	1000175c <__mulsi3>
1000083c:	1007883a 	mov	r3,r2
10000840:	e0bff117 	ldw	r2,-60(fp)
10000844:	10c5883a 	add	r2,r2,r3
10000848:	10c00117 	ldw	r3,4(r2)
1000084c:	e0bfef17 	ldw	r2,-68(fp)
10000850:	18800a1e 	bne	r3,r2,1000087c <uncompress+0x610>
				fprintf(stderr, "internal error; self-reference.");
10000854:	d0a00817 	ldw	r2,-32736(gp)
10000858:	10800317 	ldw	r2,12(r2)
1000085c:	100f883a 	mov	r7,r2
10000860:	018007c4 	movi	r6,31
10000864:	01400044 	movi	r5,1
10000868:	01040074 	movhi	r4,4097
1000086c:	21091e04 	addi	r4,r4,9336
10000870:	00030440 	call	10003044 <fwrite>
				exit(0);
10000874:	0009883a 	mov	r4,zero
10000878:	00018000 	call	10001800 <exit>
			}
			code = dictionary[code].prev;
1000087c:	e0bfef17 	ldw	r2,-68(fp)
10000880:	01400304 	movi	r5,12
10000884:	1009883a 	mov	r4,r2
10000888:	000175c0 	call	1000175c <__mulsi3>
1000088c:	1007883a 	mov	r3,r2
10000890:	e0bff117 	ldw	r2,-60(fp)
10000894:	10c5883a 	add	r2,r2,r3
10000898:	10800117 	ldw	r2,4(r2)
1000089c:	e0bfef15 	stw	r2,-68(fp)

		prev = code;

		// Now copy the dictionary entry backwards int32_to "out"
		match_len = dictionary[code].len;
		while (code != -1) {
100008a0:	e0bfef17 	ldw	r2,-68(fp)
100008a4:	10bfffd8 	cmpnei	r2,r2,-1
100008a8:	103fcc1e 	bne	r2,zero,100007dc <__alt_data_end+0xf80007dc>
				exit(0);
			}
			code = dictionary[code].prev;
		}

		out += match_len;
100008ac:	e0bffa17 	ldw	r2,-24(fp)
100008b0:	e0fffe17 	ldw	r3,-8(fp)
100008b4:	1885883a 	add	r2,r3,r2
100008b8:	e0bffe15 	stw	r2,-8(fp)
	// 2^code_len + 1 is the special "end" code; don't give it an entry here
	dictionary_ind++;
	dictionary_ind++;

	// TODO verify that the very last byte is clear_code + 1
	while (input_length) {
100008bc:	e0bffd17 	ldw	r2,-12(fp)
100008c0:	103eb61e 	bne	r2,zero,1000039c <__alt_data_end+0xf800039c>
100008c4:	00000106 	br	100008cc <uncompress+0x660>
		} else if (code == stop_code) {
			if (input_length > 1) {
				fprintf(stderr, "Malformed GIF (early stop code)\n");
				exit(0);
			}
			break;
100008c8:	0001883a 	nop
			code = dictionary[code].prev;
		}

		out += match_len;
	}
	free(dictionary);
100008cc:	e13ff117 	ldw	r4,-60(fp)
100008d0:	00032480 	call	10003248 <free>
}
100008d4:	0001883a 	nop
100008d8:	e6ffff04 	addi	sp,fp,-4
100008dc:	dfc00217 	ldw	ra,8(sp)
100008e0:	df000117 	ldw	fp,4(sp)
100008e4:	dc000017 	ldw	r16,0(sp)
100008e8:	dec00304 	addi	sp,sp,12
100008ec:	f800283a 	ret

100008f0 <checkPacked>:
static uint32_t *ocmptr = (uint32_t *)0x00001000;
static int ON_NIOS = 1;

unsigned char *fileptr;

void checkPacked() {
100008f0:	deffff04 	addi	sp,sp,-4
100008f4:	df000015 	stw	fp,0(sp)
100008f8:	d839883a 	mov	fp,sp
	assert(sizeof(HeaderBlock) == 6);
	assert(sizeof(LSD) == 7);
	assert(sizeof(GCE) == 6);
	assert(sizeof(imageDescriptor) == 10);
	assert(sizeof(colorTableEntry) == 3);
}
100008fc:	0001883a 	nop
10000900:	e037883a 	mov	sp,fp
10000904:	df000017 	ldw	fp,0(sp)
10000908:	dec00104 	addi	sp,sp,4
1000090c:	f800283a 	ret

10000910 <read>:

unsigned char *read(void *dest, int size, int segments, unsigned char *src) {
10000910:	defffa04 	addi	sp,sp,-24
10000914:	dfc00515 	stw	ra,20(sp)
10000918:	df000415 	stw	fp,16(sp)
1000091c:	df000404 	addi	fp,sp,16
10000920:	e13ffc15 	stw	r4,-16(fp)
10000924:	e17ffd15 	stw	r5,-12(fp)
10000928:	e1bffe15 	stw	r6,-8(fp)
1000092c:	e1ffff15 	stw	r7,-4(fp)
	memcpy(dest, src, size * segments);
10000930:	e17ffe17 	ldw	r5,-8(fp)
10000934:	e13ffd17 	ldw	r4,-12(fp)
10000938:	000175c0 	call	1000175c <__mulsi3>
1000093c:	100d883a 	mov	r6,r2
10000940:	e17fff17 	ldw	r5,-4(fp)
10000944:	e13ffc17 	ldw	r4,-16(fp)
10000948:	0003a680 	call	10003a68 <memcpy>
	return src + size * segments;
1000094c:	e17ffe17 	ldw	r5,-8(fp)
10000950:	e13ffd17 	ldw	r4,-12(fp)
10000954:	000175c0 	call	1000175c <__mulsi3>
10000958:	1007883a 	mov	r3,r2
1000095c:	e0bfff17 	ldw	r2,-4(fp)
10000960:	10c5883a 	add	r2,r2,r3
}
10000964:	e037883a 	mov	sp,fp
10000968:	dfc00117 	ldw	ra,4(sp)
1000096c:	df000017 	ldw	fp,0(sp)
10000970:	dec00204 	addi	sp,sp,8
10000974:	f800283a 	ret

10000978 <getch>:
//
unsigned char getch(unsigned char *ptr) {
10000978:	defffe04 	addi	sp,sp,-8
1000097c:	df000115 	stw	fp,4(sp)
10000980:	df000104 	addi	fp,sp,4
10000984:	e13fff15 	stw	r4,-4(fp)
	return *fileptr;
10000988:	d0a73017 	ldw	r2,-25408(gp)
1000098c:	10800003 	ldbu	r2,0(r2)
}
10000990:	e037883a 	mov	sp,fp
10000994:	df000017 	ldw	fp,0(sp)
10000998:	dec00104 	addi	sp,sp,4
1000099c:	f800283a 	ret

100009a0 <seek>:

unsigned char *seek(unsigned char *ptr, int size) {
100009a0:	defffd04 	addi	sp,sp,-12
100009a4:	df000215 	stw	fp,8(sp)
100009a8:	df000204 	addi	fp,sp,8
100009ac:	e13ffe15 	stw	r4,-8(fp)
100009b0:	e17fff15 	stw	r5,-4(fp)
	ptr += size;
100009b4:	e0bfff17 	ldw	r2,-4(fp)
100009b8:	e0fffe17 	ldw	r3,-8(fp)
100009bc:	1885883a 	add	r2,r3,r2
100009c0:	e0bffe15 	stw	r2,-8(fp)
	return ptr;
100009c4:	e0bffe17 	ldw	r2,-8(fp)
}
100009c8:	e037883a 	mov	sp,fp
100009cc:	df000017 	ldw	fp,0(sp)
100009d0:	dec00104 	addi	sp,sp,4
100009d4:	f800283a 	ret

100009d8 <skipToTerm>:

void skipToTerm() {
100009d8:	defffe04 	addi	sp,sp,-8
100009dc:	dfc00115 	stw	ra,4(sp)
100009e0:	df000015 	stw	fp,0(sp)
100009e4:	d839883a 	mov	fp,sp
	while (getch(fileptr) != 0x00) {
100009e8:	00000306 	br	100009f8 <skipToTerm+0x20>
		fileptr++;
100009ec:	d0a73017 	ldw	r2,-25408(gp)
100009f0:	10800044 	addi	r2,r2,1
100009f4:	d0a73015 	stw	r2,-25408(gp)
	ptr += size;
	return ptr;
}

void skipToTerm() {
	while (getch(fileptr) != 0x00) {
100009f8:	d0a73017 	ldw	r2,-25408(gp)
100009fc:	1009883a 	mov	r4,r2
10000a00:	00009780 	call	10000978 <getch>
10000a04:	10803fcc 	andi	r2,r2,255
10000a08:	103ff81e 	bne	r2,zero,100009ec <__alt_data_end+0xf80009ec>
		fileptr++;
	}
	printf("Skipping!\n");
10000a0c:	01040074 	movhi	r4,4097
10000a10:	21092604 	addi	r4,r4,9368
10000a14:	0003e840 	call	10003e84 <puts>

	fileptr++;
10000a18:	d0a73017 	ldw	r2,-25408(gp)
10000a1c:	10800044 	addi	r2,r2,1
10000a20:	d0a73015 	stw	r2,-25408(gp)
}
10000a24:	0001883a 	nop
10000a28:	e037883a 	mov	sp,fp
10000a2c:	dfc00117 	ldw	ra,4(sp)
10000a30:	df000017 	ldw	fp,0(sp)
10000a34:	dec00204 	addi	sp,sp,8
10000a38:	f800283a 	ret

10000a3c <writeSRAM>:

void writeSRAM() {
10000a3c:	defffc04 	addi	sp,sp,-16
10000a40:	dfc00315 	stw	ra,12(sp)
10000a44:	df000215 	stw	fp,8(sp)
10000a48:	df000204 	addi	fp,sp,8
	for (int i = 0; i < _gif_len; i++) {
10000a4c:	e03ffe15 	stw	zero,-8(fp)
10000a50:	00000c06 	br	10000a84 <writeSRAM+0x48>
		fileptr[i] = _gif[i];
10000a54:	d0e73017 	ldw	r3,-25408(gp)
10000a58:	e0bffe17 	ldw	r2,-8(fp)
10000a5c:	1887883a 	add	r3,r3,r2
10000a60:	00840074 	movhi	r2,4097
10000a64:	108a6504 	addi	r2,r2,10644
10000a68:	e13ffe17 	ldw	r4,-8(fp)
10000a6c:	1105883a 	add	r2,r2,r4
10000a70:	10800003 	ldbu	r2,0(r2)
10000a74:	18800005 	stb	r2,0(r3)

	fileptr++;
}

void writeSRAM() {
	for (int i = 0; i < _gif_len; i++) {
10000a78:	e0bffe17 	ldw	r2,-8(fp)
10000a7c:	10800044 	addi	r2,r2,1
10000a80:	e0bffe15 	stw	r2,-8(fp)
10000a84:	e0fffe17 	ldw	r3,-8(fp)
10000a88:	d0a00017 	ldw	r2,-32768(gp)
10000a8c:	18bff136 	bltu	r3,r2,10000a54 <__alt_data_end+0xf8000a54>
		fileptr[i] = _gif[i];
	}
	for (int i = 0; i < _gif_len; i++) {
10000a90:	e03fff15 	stw	zero,-4(fp)
10000a94:	00001706 	br	10000af4 <writeSRAM+0xb8>
		assert(fileptr[i] == _gif[i]);
10000a98:	d0e73017 	ldw	r3,-25408(gp)
10000a9c:	e0bfff17 	ldw	r2,-4(fp)
10000aa0:	1885883a 	add	r2,r3,r2
10000aa4:	11000003 	ldbu	r4,0(r2)
10000aa8:	00840074 	movhi	r2,4097
10000aac:	108a6504 	addi	r2,r2,10644
10000ab0:	e0ffff17 	ldw	r3,-4(fp)
10000ab4:	10c5883a 	add	r2,r2,r3
10000ab8:	10800003 	ldbu	r2,0(r2)
10000abc:	20c03fcc 	andi	r3,r4,255
10000ac0:	10803fcc 	andi	r2,r2,255
10000ac4:	18800826 	beq	r3,r2,10000ae8 <writeSRAM+0xac>
10000ac8:	01c40074 	movhi	r7,4097
10000acc:	39c92904 	addi	r7,r7,9380
10000ad0:	01840074 	movhi	r6,4097
10000ad4:	31898f04 	addi	r6,r6,9788
10000ad8:	01400d44 	movi	r5,53
10000adc:	01040074 	movhi	r4,4097
10000ae0:	21092f04 	addi	r4,r4,9404
10000ae4:	00017840 	call	10001784 <__assert_func>

void writeSRAM() {
	for (int i = 0; i < _gif_len; i++) {
		fileptr[i] = _gif[i];
	}
	for (int i = 0; i < _gif_len; i++) {
10000ae8:	e0bfff17 	ldw	r2,-4(fp)
10000aec:	10800044 	addi	r2,r2,1
10000af0:	e0bfff15 	stw	r2,-4(fp)
10000af4:	e0ffff17 	ldw	r3,-4(fp)
10000af8:	d0a00017 	ldw	r2,-32768(gp)
10000afc:	18bfe636 	bltu	r3,r2,10000a98 <__alt_data_end+0xf8000a98>
		assert(fileptr[i] == _gif[i]);
	}
}
10000b00:	0001883a 	nop
10000b04:	e037883a 	mov	sp,fp
10000b08:	dfc00117 	ldw	ra,4(sp)
10000b0c:	df000017 	ldw	fp,0(sp)
10000b10:	dec00204 	addi	sp,sp,8
10000b14:	f800283a 	ret

10000b18 <getControl>:

void getControl() {
10000b18:	deffff04 	addi	sp,sp,-4
10000b1c:	df000015 	stw	fp,0(sp)
10000b20:	d839883a 	mov	fp,sp
	ocmptr[257] = 0;
10000b24:	d0a00317 	ldw	r2,-32756(gp)
10000b28:	10810104 	addi	r2,r2,1028
10000b2c:	10000015 	stw	zero,0(r2)
}
10000b30:	0001883a 	nop
10000b34:	e037883a 	mov	sp,fp
10000b38:	df000017 	ldw	fp,0(sp)
10000b3c:	dec00104 	addi	sp,sp,4
10000b40:	f800283a 	ret

10000b44 <main>:

int main() {
10000b44:	deffde04 	addi	sp,sp,-136
10000b48:	dfc02115 	stw	ra,132(sp)
10000b4c:	df002015 	stw	fp,128(sp)
10000b50:	dc001f15 	stw	r16,124(sp)
10000b54:	df002004 	addi	fp,sp,128
	checkPacked();
10000b58:	00008f00 	call	100008f0 <checkPacked>
	getControl();
10000b5c:	0000b180 	call	10000b18 <getControl>

	unsigned char *fileChunk = NULL;
10000b60:	e03fe015 	stw	zero,-128(fp)

	if (!ON_NIOS) {
10000b64:	d0a00417 	ldw	r2,-32752(gp)
10000b68:	10002a1e 	bne	r2,zero,10000c14 <main+0xd0>
		FILE *f = NULL;
10000b6c:	e03fee15 	stw	zero,-72(fp)
		f = fopen("sampleanim2.gif", "rb");
10000b70:	01440074 	movhi	r5,4097
10000b74:	29493104 	addi	r5,r5,9412
10000b78:	01040074 	movhi	r4,4097
10000b7c:	21093204 	addi	r4,r4,9416
10000b80:	00020e40 	call	100020e4 <fopen>
10000b84:	e0bfee15 	stw	r2,-72(fp)
		if (f == NULL) {
10000b88:	e0bfee17 	ldw	r2,-72(fp)
10000b8c:	1000051e 	bne	r2,zero,10000ba4 <main+0x60>
			printf("File not load !\n");
10000b90:	01040074 	movhi	r4,4097
10000b94:	21093604 	addi	r4,r4,9432
10000b98:	0003e840 	call	10003e84 <puts>
			exit(0);
10000b9c:	0009883a 	mov	r4,zero
10000ba0:	00018000 	call	10001800 <exit>
		}
		fseek(f, 0, SEEK_END);
10000ba4:	01800084 	movi	r6,2
10000ba8:	000b883a 	mov	r5,zero
10000bac:	e13fee17 	ldw	r4,-72(fp)
10000bb0:	00027f00 	call	100027f0 <fseek>
		long fsize = ftell(f);
10000bb4:	e13fee17 	ldw	r4,-72(fp)
10000bb8:	0002ccc0 	call	10002ccc <ftell>
10000bbc:	e0bfef15 	stw	r2,-68(fp)
		fseek(f, 0, SEEK_SET);
10000bc0:	000d883a 	mov	r6,zero
10000bc4:	000b883a 	mov	r5,zero
10000bc8:	e13fee17 	ldw	r4,-72(fp)
10000bcc:	00027f00 	call	100027f0 <fseek>

		fileChunk = malloc(fsize + 1);
10000bd0:	e0bfef17 	ldw	r2,-68(fp)
10000bd4:	10800044 	addi	r2,r2,1
10000bd8:	1009883a 	mov	r4,r2
10000bdc:	00032340 	call	10003234 <malloc>
10000be0:	e0bfe015 	stw	r2,-128(fp)
		fileptr = fileChunk;
10000be4:	e0bfe017 	ldw	r2,-128(fp)
10000be8:	d0a73015 	stw	r2,-25408(gp)
		fread(fileptr, 1, fsize, f);
10000bec:	d0a73017 	ldw	r2,-25408(gp)
10000bf0:	e0ffef17 	ldw	r3,-68(fp)
10000bf4:	e1ffee17 	ldw	r7,-72(fp)
10000bf8:	180d883a 	mov	r6,r3
10000bfc:	01400044 	movi	r5,1
10000c00:	1009883a 	mov	r4,r2
10000c04:	00023840 	call	10002384 <fread>
		fclose(f);
10000c08:	e13fee17 	ldw	r4,-72(fp)
10000c0c:	00019280 	call	10001928 <fclose>
10000c10:	00000306 	br	10000c20 <main+0xdc>
	} else {
		//Set pointer from SRAM
		fileptr = 0x00400050;
10000c14:	00801034 	movhi	r2,64
10000c18:	10801404 	addi	r2,r2,80
10000c1c:	d0a73015 	stw	r2,-25408(gp)
	}
	 //Write SRAM if we want:
	 writeSRAM();
10000c20:	0000a3c0 	call	10000a3c <writeSRAM>
	//	exit(0);

	HeaderBlock header;
	LSD descriptor;

	fileptr = read(&header, 1, sizeof(header), fileptr);
10000c24:	d0e73017 	ldw	r3,-25408(gp)
10000c28:	e0bff704 	addi	r2,fp,-36
10000c2c:	180f883a 	mov	r7,r3
10000c30:	01800184 	movi	r6,6
10000c34:	01400044 	movi	r5,1
10000c38:	1009883a 	mov	r4,r2
10000c3c:	00009100 	call	10000910 <read>
10000c40:	d0a73015 	stw	r2,-25408(gp)
	fileptr = read(&descriptor, 1, sizeof(descriptor), fileptr);
10000c44:	d0e73017 	ldw	r3,-25408(gp)
10000c48:	e0bff884 	addi	r2,fp,-30
10000c4c:	180f883a 	mov	r7,r3
10000c50:	018001c4 	movi	r6,7
10000c54:	01400044 	movi	r5,1
10000c58:	1009883a 	mov	r4,r2
10000c5c:	00009100 	call	10000910 <read>
10000c60:	d0a73015 	stw	r2,-25408(gp)
	for (int i = 0; i < 3; i++) {
10000c64:	e03fe115 	stw	zero,-124(fp)
10000c68:	00001706 	br	10000cc8 <main+0x184>
		assert(header.signature[i] == VALID_HEADER[i]);
10000c6c:	e0fff704 	addi	r3,fp,-36
10000c70:	e0bfe117 	ldw	r2,-124(fp)
10000c74:	1885883a 	add	r2,r3,r2
10000c78:	10800003 	ldbu	r2,0(r2)
10000c7c:	10c03fcc 	andi	r3,r2,255
10000c80:	e13fe117 	ldw	r4,-124(fp)
10000c84:	d0a00104 	addi	r2,gp,-32764
10000c88:	2085883a 	add	r2,r4,r2
10000c8c:	10800003 	ldbu	r2,0(r2)
10000c90:	10803fcc 	andi	r2,r2,255
10000c94:	1080201c 	xori	r2,r2,128
10000c98:	10bfe004 	addi	r2,r2,-128
10000c9c:	18800726 	beq	r3,r2,10000cbc <main+0x178>
10000ca0:	01c40074 	movhi	r7,4097
10000ca4:	39c93a04 	addi	r7,r7,9448
10000ca8:	d1a00504 	addi	r6,gp,-32748
10000cac:	01401a44 	movi	r5,105
10000cb0:	01040074 	movhi	r4,4097
10000cb4:	21092f04 	addi	r4,r4,9404
10000cb8:	00017840 	call	10001784 <__assert_func>
	HeaderBlock header;
	LSD descriptor;

	fileptr = read(&header, 1, sizeof(header), fileptr);
	fileptr = read(&descriptor, 1, sizeof(descriptor), fileptr);
	for (int i = 0; i < 3; i++) {
10000cbc:	e0bfe117 	ldw	r2,-124(fp)
10000cc0:	10800044 	addi	r2,r2,1
10000cc4:	e0bfe115 	stw	r2,-124(fp)
10000cc8:	e0bfe117 	ldw	r2,-124(fp)
10000ccc:	108000d0 	cmplti	r2,r2,3
10000cd0:	103fe61e 	bne	r2,zero,10000c6c <__alt_data_end+0xf8000c6c>
		assert(header.signature[i] == VALID_HEADER[i]);
	}
	assert(descriptor.packedField.globalColorFlag);	 //For all intents we're going to need a global table
10000cd4:	e0fff983 	ldbu	r3,-26(fp)
10000cd8:	00bfe004 	movi	r2,-128
10000cdc:	1884703a 	and	r2,r3,r2
10000ce0:	10803fcc 	andi	r2,r2,255
10000ce4:	1000071e 	bne	r2,zero,10000d04 <main+0x1c0>
10000ce8:	01c40074 	movhi	r7,4097
10000cec:	39c94404 	addi	r7,r7,9488
10000cf0:	d1a00504 	addi	r6,gp,-32748
10000cf4:	01401ac4 	movi	r5,107
10000cf8:	01040074 	movhi	r4,4097
10000cfc:	21092f04 	addi	r4,r4,9404
10000d00:	00017840 	call	10001784 <__assert_func>

	int readlGlobalColorSize = 0x2 << descriptor.packedField.globalColorSize;  // 2^(N+1) actual colors
10000d04:	e0bff98b 	ldhu	r2,-26(fp)
10000d08:	108001cc 	andi	r2,r2,7
10000d0c:	10803fcc 	andi	r2,r2,255
10000d10:	00c00084 	movi	r3,2
10000d14:	1884983a 	sll	r2,r3,r2
10000d18:	e0bff015 	stw	r2,-64(fp)
	// printf("%d, %d\n", test, packed.actual_color_size);
	colorTableEntry *globalTable = (colorTableEntry *)
		malloc(readlGlobalColorSize * sizeof(colorTableEntry));	 // We can make this 256 for hardware
10000d1c:	e0fff017 	ldw	r3,-64(fp)
10000d20:	1805883a 	mov	r2,r3
10000d24:	1085883a 	add	r2,r2,r2
10000d28:	10c5883a 	add	r2,r2,r3
	}
	assert(descriptor.packedField.globalColorFlag);	 //For all intents we're going to need a global table

	int readlGlobalColorSize = 0x2 << descriptor.packedField.globalColorSize;  // 2^(N+1) actual colors
	// printf("%d, %d\n", test, packed.actual_color_size);
	colorTableEntry *globalTable = (colorTableEntry *)
10000d2c:	1009883a 	mov	r4,r2
10000d30:	00032340 	call	10003234 <malloc>
10000d34:	e0bff115 	stw	r2,-60(fp)
		malloc(readlGlobalColorSize * sizeof(colorTableEntry));	 // We can make this 256 for hardware

	printf("Dimensions (Canvas): %dx%d\n", descriptor.canvasWidth, descriptor.canvasHeight);
10000d38:	e0bff88b 	ldhu	r2,-30(fp)
10000d3c:	10bfffcc 	andi	r2,r2,65535
10000d40:	e0fff90b 	ldhu	r3,-28(fp)
10000d44:	18ffffcc 	andi	r3,r3,65535
10000d48:	180d883a 	mov	r6,r3
10000d4c:	100b883a 	mov	r5,r2
10000d50:	01040074 	movhi	r4,4097
10000d54:	21094e04 	addi	r4,r4,9528
10000d58:	0003d680 	call	10003d68 <printf>

	//Read global color table and print it
	fileptr = read(globalTable, 3, readlGlobalColorSize, fileptr);
10000d5c:	d0a73017 	ldw	r2,-25408(gp)
10000d60:	100f883a 	mov	r7,r2
10000d64:	e1bff017 	ldw	r6,-64(fp)
10000d68:	014000c4 	movi	r5,3
10000d6c:	e13ff117 	ldw	r4,-60(fp)
10000d70:	00009100 	call	10000910 <read>
10000d74:	d0a73015 	stw	r2,-25408(gp)

	for (int i = 0; i < readlGlobalColorSize; i++) {
10000d78:	e03fe215 	stw	zero,-120(fp)
10000d7c:	00001f06 	br	10000dfc <main+0x2b8>
		printf("[#");
10000d80:	01040074 	movhi	r4,4097
10000d84:	21095504 	addi	r4,r4,9556
10000d88:	0003d680 	call	10003d68 <printf>
		for (int j = 0; j < 3; j++) {
10000d8c:	e03fe315 	stw	zero,-116(fp)
10000d90:	00001106 	br	10000dd8 <main+0x294>
			printf("%02x", globalTable[i].RGB[j]);
10000d94:	e0ffe217 	ldw	r3,-120(fp)
10000d98:	1805883a 	mov	r2,r3
10000d9c:	1085883a 	add	r2,r2,r2
10000da0:	10c5883a 	add	r2,r2,r3
10000da4:	e0fff117 	ldw	r3,-60(fp)
10000da8:	1887883a 	add	r3,r3,r2
10000dac:	e0bfe317 	ldw	r2,-116(fp)
10000db0:	1885883a 	add	r2,r3,r2
10000db4:	10800003 	ldbu	r2,0(r2)
10000db8:	10803fcc 	andi	r2,r2,255
10000dbc:	100b883a 	mov	r5,r2
10000dc0:	01040074 	movhi	r4,4097
10000dc4:	21095604 	addi	r4,r4,9560
10000dc8:	0003d680 	call	10003d68 <printf>
	//Read global color table and print it
	fileptr = read(globalTable, 3, readlGlobalColorSize, fileptr);

	for (int i = 0; i < readlGlobalColorSize; i++) {
		printf("[#");
		for (int j = 0; j < 3; j++) {
10000dcc:	e0bfe317 	ldw	r2,-116(fp)
10000dd0:	10800044 	addi	r2,r2,1
10000dd4:	e0bfe315 	stw	r2,-116(fp)
10000dd8:	e0bfe317 	ldw	r2,-116(fp)
10000ddc:	108000d0 	cmplti	r2,r2,3
10000de0:	103fec1e 	bne	r2,zero,10000d94 <__alt_data_end+0xf8000d94>
			printf("%02x", globalTable[i].RGB[j]);
		}
		printf("],");
10000de4:	01040074 	movhi	r4,4097
10000de8:	21095804 	addi	r4,r4,9568
10000dec:	0003d680 	call	10003d68 <printf>
	printf("Dimensions (Canvas): %dx%d\n", descriptor.canvasWidth, descriptor.canvasHeight);

	//Read global color table and print it
	fileptr = read(globalTable, 3, readlGlobalColorSize, fileptr);

	for (int i = 0; i < readlGlobalColorSize; i++) {
10000df0:	e0bfe217 	ldw	r2,-120(fp)
10000df4:	10800044 	addi	r2,r2,1
10000df8:	e0bfe215 	stw	r2,-120(fp)
10000dfc:	e0ffe217 	ldw	r3,-120(fp)
10000e00:	e0bff017 	ldw	r2,-64(fp)
10000e04:	18bfde16 	blt	r3,r2,10000d80 <__alt_data_end+0xf8000d80>
		for (int j = 0; j < 3; j++) {
			printf("%02x", globalTable[i].RGB[j]);
		}
		printf("],");
	}
	printf("\n");
10000e08:	01000284 	movi	r4,10
10000e0c:	0003dac0 	call	10003dac <putchar>

	//////////////////////////////////////////////////

	int8_t totalFrameCount = 0;
10000e10:	e03fe405 	stb	zero,-112(fp)
	while (1) {
		GCE gce;
		imageDescriptor imgDesc;
		colorTableEntry *localTable = NULL;
10000e14:	e03fe515 	stw	zero,-108(fp)
		unsigned char c = *fileptr;
10000e18:	d0a73017 	ldw	r2,-25408(gp)
10000e1c:	10800003 	ldbu	r2,0(r2)
10000e20:	e0bfe605 	stb	r2,-104(fp)
		fileptr++;
10000e24:	d0a73017 	ldw	r2,-25408(gp)
10000e28:	10800044 	addi	r2,r2,1
10000e2c:	d0a73015 	stw	r2,-25408(gp)

		while (c == 0x21) {
10000e30:	00007106 	br	10000ff8 <main+0x4b4>
			// We encountered a extension block...
			unsigned char label = getch(fileptr);
10000e34:	d0a73017 	ldw	r2,-25408(gp)
10000e38:	1009883a 	mov	r4,r2
10000e3c:	00009780 	call	10000978 <getch>
10000e40:	e0bff205 	stb	r2,-56(fp)
			fileptr++;
10000e44:	d0a73017 	ldw	r2,-25408(gp)
10000e48:	10800044 	addi	r2,r2,1
10000e4c:	d0a73015 	stw	r2,-25408(gp)
			switch (label) {
10000e50:	e0bff203 	ldbu	r2,-56(fp)
10000e54:	10c03fa0 	cmpeqi	r3,r2,254
10000e58:	18004f1e 	bne	r3,zero,10000f98 <main+0x454>
10000e5c:	10c03fe0 	cmpeqi	r3,r2,255
10000e60:	1800031e 	bne	r3,zero,10000e70 <main+0x32c>
10000e64:	10803e60 	cmpeqi	r2,r2,249
10000e68:	10003f1e 	bne	r2,zero,10000f68 <main+0x424>
10000e6c:	00004c06 	br	10000fa0 <main+0x45c>
			case 0xFF: {
				// Application Extension
				printf("Loaded AEB\n");
10000e70:	01040074 	movhi	r4,4097
10000e74:	21095904 	addi	r4,r4,9572
10000e78:	0003e840 	call	10003e84 <puts>
				assert(getch(fileptr) == 0x0B);
10000e7c:	d0a73017 	ldw	r2,-25408(gp)
10000e80:	1009883a 	mov	r4,r2
10000e84:	00009780 	call	10000978 <getch>
10000e88:	10803fcc 	andi	r2,r2,255
10000e8c:	108002e0 	cmpeqi	r2,r2,11
10000e90:	1000071e 	bne	r2,zero,10000eb0 <main+0x36c>
10000e94:	01c40074 	movhi	r7,4097
10000e98:	39c95c04 	addi	r7,r7,9584
10000e9c:	d1a00504 	addi	r6,gp,-32748
10000ea0:	01402484 	movi	r5,146
10000ea4:	01040074 	movhi	r4,4097
10000ea8:	21092f04 	addi	r4,r4,9404
10000eac:	00017840 	call	10001784 <__assert_func>
				fileptr++;
10000eb0:	d0a73017 	ldw	r2,-25408(gp)
10000eb4:	10800044 	addi	r2,r2,1
10000eb8:	d0a73015 	stw	r2,-25408(gp)
				fileptr = seek(fileptr, 11);
10000ebc:	d0a73017 	ldw	r2,-25408(gp)
10000ec0:	014002c4 	movi	r5,11
10000ec4:	1009883a 	mov	r4,r2
10000ec8:	00009a00 	call	100009a0 <seek>
10000ecc:	d0a73015 	stw	r2,-25408(gp)
				assert(getch(fileptr) == 0x03);
10000ed0:	d0a73017 	ldw	r2,-25408(gp)
10000ed4:	1009883a 	mov	r4,r2
10000ed8:	00009780 	call	10000978 <getch>
10000edc:	10803fcc 	andi	r2,r2,255
10000ee0:	108000e0 	cmpeqi	r2,r2,3
10000ee4:	1000071e 	bne	r2,zero,10000f04 <main+0x3c0>
10000ee8:	01c40074 	movhi	r7,4097
10000eec:	39c96204 	addi	r7,r7,9608
10000ef0:	d1a00504 	addi	r6,gp,-32748
10000ef4:	01402544 	movi	r5,149
10000ef8:	01040074 	movhi	r4,4097
10000efc:	21092f04 	addi	r4,r4,9404
10000f00:	00017840 	call	10001784 <__assert_func>
				fileptr++;
10000f04:	d0a73017 	ldw	r2,-25408(gp)
10000f08:	10800044 	addi	r2,r2,1
10000f0c:	d0a73015 	stw	r2,-25408(gp)
				assert(getch(fileptr) == 0x01);
10000f10:	d0a73017 	ldw	r2,-25408(gp)
10000f14:	1009883a 	mov	r4,r2
10000f18:	00009780 	call	10000978 <getch>
10000f1c:	10803fcc 	andi	r2,r2,255
10000f20:	10800060 	cmpeqi	r2,r2,1
10000f24:	1000071e 	bne	r2,zero,10000f44 <main+0x400>
10000f28:	01c40074 	movhi	r7,4097
10000f2c:	39c96804 	addi	r7,r7,9632
10000f30:	d1a00504 	addi	r6,gp,-32748
10000f34:	014025c4 	movi	r5,151
10000f38:	01040074 	movhi	r4,4097
10000f3c:	21092f04 	addi	r4,r4,9404
10000f40:	00017840 	call	10001784 <__assert_func>
				fileptr++;
10000f44:	d0a73017 	ldw	r2,-25408(gp)
10000f48:	10800044 	addi	r2,r2,1
10000f4c:	d0a73015 	stw	r2,-25408(gp)
				fileptr = seek(fileptr, 3);
10000f50:	d0a73017 	ldw	r2,-25408(gp)
10000f54:	014000c4 	movi	r5,3
10000f58:	1009883a 	mov	r4,r2
10000f5c:	00009a00 	call	100009a0 <seek>
10000f60:	d0a73015 	stw	r2,-25408(gp)
				//Read repeat count if we care
				break;
10000f64:	00001d06 	br	10000fdc <main+0x498>
			}
			case 0xF9: {
				printf("Loaded GCE\n");
10000f68:	01040074 	movhi	r4,4097
10000f6c:	21096e04 	addi	r4,r4,9656
10000f70:	0003e840 	call	10003e84 <puts>
				fileptr = read(&gce, 1, sizeof(gce), fileptr);
10000f74:	d0e73017 	ldw	r3,-25408(gp)
10000f78:	e0bffa44 	addi	r2,fp,-23
10000f7c:	180f883a 	mov	r7,r3
10000f80:	01800184 	movi	r6,6
10000f84:	01400044 	movi	r5,1
10000f88:	1009883a 	mov	r4,r2
10000f8c:	00009100 	call	10000910 <read>
10000f90:	d0a73015 	stw	r2,-25408(gp)
				break;
10000f94:	00001106 	br	10000fdc <main+0x498>
			}
			case 0xFE: {
				//Comment Extension
				skipToTerm();
10000f98:	00009d80 	call	100009d8 <skipToTerm>
				break;
10000f9c:	00000f06 	br	10000fdc <main+0x498>
			}
			default: {
				unsigned char bytesToSkip = getch(fileptr);
10000fa0:	d0a73017 	ldw	r2,-25408(gp)
10000fa4:	1009883a 	mov	r4,r2
10000fa8:	00009780 	call	10000978 <getch>
10000fac:	e0bff245 	stb	r2,-55(fp)
				fileptr++;
10000fb0:	d0a73017 	ldw	r2,-25408(gp)
10000fb4:	10800044 	addi	r2,r2,1
10000fb8:	d0a73015 	stw	r2,-25408(gp)
				fileptr = seek(fileptr, bytesToSkip);
10000fbc:	d0a73017 	ldw	r2,-25408(gp)
10000fc0:	e0fff243 	ldbu	r3,-55(fp)
10000fc4:	180b883a 	mov	r5,r3
10000fc8:	1009883a 	mov	r4,r2
10000fcc:	00009a00 	call	100009a0 <seek>
10000fd0:	d0a73015 	stw	r2,-25408(gp)
				skipToTerm();
10000fd4:	00009d80 	call	100009d8 <skipToTerm>
				break;
10000fd8:	0001883a 	nop
			}
			}
			c = getch(fileptr);
10000fdc:	d0a73017 	ldw	r2,-25408(gp)
10000fe0:	1009883a 	mov	r4,r2
10000fe4:	00009780 	call	10000978 <getch>
10000fe8:	e0bfe605 	stb	r2,-104(fp)
			fileptr++;
10000fec:	d0a73017 	ldw	r2,-25408(gp)
10000ff0:	10800044 	addi	r2,r2,1
10000ff4:	d0a73015 	stw	r2,-25408(gp)
		imageDescriptor imgDesc;
		colorTableEntry *localTable = NULL;
		unsigned char c = *fileptr;
		fileptr++;

		while (c == 0x21) {
10000ff8:	e0bfe603 	ldbu	r2,-104(fp)
10000ffc:	10800860 	cmpeqi	r2,r2,33
10001000:	103f8c1e 	bne	r2,zero,10000e34 <__alt_data_end+0xf8000e34>
			}
			}
			c = getch(fileptr);
			fileptr++;
		}
		fileptr--;
10001004:	d0a73017 	ldw	r2,-25408(gp)
10001008:	10bfffc4 	addi	r2,r2,-1
1000100c:	d0a73015 	stw	r2,-25408(gp)

		fileptr = read(&imgDesc, 1, sizeof(imgDesc), fileptr);
10001010:	d0e73017 	ldw	r3,-25408(gp)
10001014:	e0bffbc4 	addi	r2,fp,-17
10001018:	180f883a 	mov	r7,r3
1000101c:	01800284 	movi	r6,10
10001020:	01400044 	movi	r5,1
10001024:	1009883a 	mov	r4,r2
10001028:	00009100 	call	10000910 <read>
1000102c:	d0a73015 	stw	r2,-25408(gp)
		assert(imgDesc.imgSeperator == 0x2C);
10001030:	e0bffbc3 	ldbu	r2,-17(fp)
10001034:	10803fcc 	andi	r2,r2,255
10001038:	10800b20 	cmpeqi	r2,r2,44
1000103c:	1000071e 	bne	r2,zero,1000105c <main+0x518>
10001040:	01c40074 	movhi	r7,4097
10001044:	39c97104 	addi	r7,r7,9668
10001048:	d1a00504 	addi	r6,gp,-32748
1000104c:	01402d44 	movi	r5,181
10001050:	01040074 	movhi	r4,4097
10001054:	21092f04 	addi	r4,r4,9404
10001058:	00017840 	call	10001784 <__assert_func>
		if (imgDesc.packedField.localColorFlag) {
1000105c:	e0fffe03 	ldbu	r3,-8(fp)
10001060:	00bfe004 	movi	r2,-128
10001064:	1884703a 	and	r2,r3,r2
10001068:	10803fcc 	andi	r2,r2,255
1000106c:	10001726 	beq	r2,zero,100010cc <main+0x588>
			// Load a local color table
			printf("Local color table\n");
10001070:	01040074 	movhi	r4,4097
10001074:	21097904 	addi	r4,r4,9700
10001078:	0003e840 	call	10003e84 <puts>
			int realLocalColorSize = 0x2 << imgDesc.packedField.localColorSize;	 // 2^(N+1) actual colors
1000107c:	e0bffe03 	ldbu	r2,-8(fp)
10001080:	108001cc 	andi	r2,r2,7
10001084:	10803fcc 	andi	r2,r2,255
10001088:	00c00084 	movi	r3,2
1000108c:	1884983a 	sll	r2,r3,r2
10001090:	e0bff315 	stw	r2,-52(fp)
			localTable = (colorTableEntry *)
				malloc(realLocalColorSize * sizeof(colorTableEntry));
10001094:	e0fff317 	ldw	r3,-52(fp)
10001098:	1805883a 	mov	r2,r3
1000109c:	1085883a 	add	r2,r2,r2
100010a0:	10c5883a 	add	r2,r2,r3
		assert(imgDesc.imgSeperator == 0x2C);
		if (imgDesc.packedField.localColorFlag) {
			// Load a local color table
			printf("Local color table\n");
			int realLocalColorSize = 0x2 << imgDesc.packedField.localColorSize;	 // 2^(N+1) actual colors
			localTable = (colorTableEntry *)
100010a4:	1009883a 	mov	r4,r2
100010a8:	00032340 	call	10003234 <malloc>
100010ac:	e0bfe515 	stw	r2,-108(fp)
				malloc(realLocalColorSize * sizeof(colorTableEntry));
			fileptr = read(localTable, 3, realLocalColorSize, fileptr);
100010b0:	d0a73017 	ldw	r2,-25408(gp)
100010b4:	100f883a 	mov	r7,r2
100010b8:	e1bff317 	ldw	r6,-52(fp)
100010bc:	014000c4 	movi	r5,3
100010c0:	e13fe517 	ldw	r4,-108(fp)
100010c4:	00009100 	call	10000910 <read>
100010c8:	d0a73015 	stw	r2,-25408(gp)
		}

		//Let's yeet that image data into something
		unsigned char LZWMinCode = getch(fileptr);
100010cc:	d0a73017 	ldw	r2,-25408(gp)
100010d0:	1009883a 	mov	r4,r2
100010d4:	00009780 	call	10000978 <getch>
100010d8:	e0bff405 	stb	r2,-48(fp)
		fileptr++;
100010dc:	d0a73017 	ldw	r2,-25408(gp)
100010e0:	10800044 	addi	r2,r2,1
100010e4:	d0a73015 	stw	r2,-25408(gp)
		printf("%02x\n", LZWMinCode);
100010e8:	e0bff403 	ldbu	r2,-48(fp)
100010ec:	100b883a 	mov	r5,r2
100010f0:	01040074 	movhi	r4,4097
100010f4:	21097e04 	addi	r4,r4,9720
100010f8:	0003d680 	call	10003d68 <printf>
		unsigned char *data = NULL;
100010fc:	e03fe715 	stw	zero,-100(fp)
		unsigned int dataSize = 0;
10001100:	e03fe815 	stw	zero,-96(fp)
		unsigned char bytesInSubblock = getch(fileptr);
10001104:	d0a73017 	ldw	r2,-25408(gp)
10001108:	1009883a 	mov	r4,r2
1000110c:	00009780 	call	10000978 <getch>
10001110:	e0bfe905 	stb	r2,-92(fp)
		fileptr++;
10001114:	d0a73017 	ldw	r2,-25408(gp)
10001118:	10800044 	addi	r2,r2,1
1000111c:	d0a73015 	stw	r2,-25408(gp)
		while (bytesInSubblock) {
10001120:	00001d06 	br	10001198 <main+0x654>
			data = realloc(data, (sizeof(char) * (dataSize + bytesInSubblock)));
10001124:	e0ffe903 	ldbu	r3,-92(fp)
10001128:	e0bfe817 	ldw	r2,-96(fp)
1000112c:	1885883a 	add	r2,r3,r2
10001130:	100b883a 	mov	r5,r2
10001134:	e13fe717 	ldw	r4,-100(fp)
10001138:	0003e980 	call	10003e98 <realloc>
1000113c:	e0bfe715 	stw	r2,-100(fp)
			fileptr = read(data + dataSize, 1, bytesInSubblock, fileptr);
10001140:	e0ffe717 	ldw	r3,-100(fp)
10001144:	e0bfe817 	ldw	r2,-96(fp)
10001148:	1885883a 	add	r2,r3,r2
1000114c:	e0ffe903 	ldbu	r3,-92(fp)
10001150:	d1273017 	ldw	r4,-25408(gp)
10001154:	200f883a 	mov	r7,r4
10001158:	180d883a 	mov	r6,r3
1000115c:	01400044 	movi	r5,1
10001160:	1009883a 	mov	r4,r2
10001164:	00009100 	call	10000910 <read>
10001168:	d0a73015 	stw	r2,-25408(gp)
			dataSize += bytesInSubblock;
1000116c:	e0bfe903 	ldbu	r2,-92(fp)
10001170:	e0ffe817 	ldw	r3,-96(fp)
10001174:	1885883a 	add	r2,r3,r2
10001178:	e0bfe815 	stw	r2,-96(fp)
			bytesInSubblock = getch(fileptr);
1000117c:	d0a73017 	ldw	r2,-25408(gp)
10001180:	1009883a 	mov	r4,r2
10001184:	00009780 	call	10000978 <getch>
10001188:	e0bfe905 	stb	r2,-92(fp)
			fileptr++;
1000118c:	d0a73017 	ldw	r2,-25408(gp)
10001190:	10800044 	addi	r2,r2,1
10001194:	d0a73015 	stw	r2,-25408(gp)
		printf("%02x\n", LZWMinCode);
		unsigned char *data = NULL;
		unsigned int dataSize = 0;
		unsigned char bytesInSubblock = getch(fileptr);
		fileptr++;
		while (bytesInSubblock) {
10001198:	e0bfe903 	ldbu	r2,-92(fp)
1000119c:	103fe11e 	bne	r2,zero,10001124 <__alt_data_end+0xf8001124>
		// 	if (!(i % 10)) {
		// 		printf("\n");
		// 	}
		// }
		// printf("\n");
		unsigned char *dataOut = malloc(imgDesc.imgHeight * imgDesc.imgWidth);
100011a0:	e0bffd83 	ldbu	r2,-10(fp)
100011a4:	e0fffdc3 	ldbu	r3,-9(fp)
100011a8:	1806923a 	slli	r3,r3,8
100011ac:	1884b03a 	or	r2,r3,r2
100011b0:	113fffcc 	andi	r4,r2,65535
100011b4:	e0bffd03 	ldbu	r2,-12(fp)
100011b8:	e0fffd43 	ldbu	r3,-11(fp)
100011bc:	1806923a 	slli	r3,r3,8
100011c0:	1884b03a 	or	r2,r3,r2
100011c4:	10bfffcc 	andi	r2,r2,65535
100011c8:	100b883a 	mov	r5,r2
100011cc:	000175c0 	call	1000175c <__mulsi3>
100011d0:	1009883a 	mov	r4,r2
100011d4:	00032340 	call	10003234 <malloc>
100011d8:	e0bff515 	stw	r2,-44(fp)
		//
		// // Write developed image frame to some sort of storage
		uncompress(LZWMinCode, data, dataSize, dataOut);
100011dc:	e0bff403 	ldbu	r2,-48(fp)
100011e0:	e0ffe817 	ldw	r3,-96(fp)
100011e4:	e1fff517 	ldw	r7,-44(fp)
100011e8:	180d883a 	mov	r6,r3
100011ec:	e17fe717 	ldw	r5,-100(fp)
100011f0:	1009883a 	mov	r4,r2
100011f4:	000026c0 	call	1000026c <uncompress>
		// 	}
		// 	printf("\033[38;5;%dm", dataOut[i]);
		// 	printf("%02x ", dataOut[i]);
		// 	printf("\033[0m");
		// }
		if (ON_NIOS) {
100011f8:	d0a00417 	ldw	r2,-32752(gp)
100011fc:	10002326 	beq	r2,zero,1000128c <main+0x748>
			memcpy(frameptr + imgDesc.imgHeight*imgDesc.imgWidth * totalFrameCount, dataOut, imgDesc.imgHeight * imgDesc.imgWidth);
10001200:	d4200217 	ldw	r16,-32760(gp)
10001204:	e0bffd83 	ldbu	r2,-10(fp)
10001208:	e0fffdc3 	ldbu	r3,-9(fp)
1000120c:	1806923a 	slli	r3,r3,8
10001210:	1884b03a 	or	r2,r3,r2
10001214:	113fffcc 	andi	r4,r2,65535
10001218:	e0bffd03 	ldbu	r2,-12(fp)
1000121c:	e0fffd43 	ldbu	r3,-11(fp)
10001220:	1806923a 	slli	r3,r3,8
10001224:	1884b03a 	or	r2,r3,r2
10001228:	10bfffcc 	andi	r2,r2,65535
1000122c:	100b883a 	mov	r5,r2
10001230:	000175c0 	call	1000175c <__mulsi3>
10001234:	1007883a 	mov	r3,r2
10001238:	e0bfe407 	ldb	r2,-112(fp)
1000123c:	100b883a 	mov	r5,r2
10001240:	1809883a 	mov	r4,r3
10001244:	000175c0 	call	1000175c <__mulsi3>
10001248:	80a1883a 	add	r16,r16,r2
1000124c:	e0bffd83 	ldbu	r2,-10(fp)
10001250:	e0fffdc3 	ldbu	r3,-9(fp)
10001254:	1806923a 	slli	r3,r3,8
10001258:	1884b03a 	or	r2,r3,r2
1000125c:	113fffcc 	andi	r4,r2,65535
10001260:	e0bffd03 	ldbu	r2,-12(fp)
10001264:	e0fffd43 	ldbu	r3,-11(fp)
10001268:	1806923a 	slli	r3,r3,8
1000126c:	1884b03a 	or	r2,r3,r2
10001270:	10bfffcc 	andi	r2,r2,65535
10001274:	100b883a 	mov	r5,r2
10001278:	000175c0 	call	1000175c <__mulsi3>
1000127c:	100d883a 	mov	r6,r2
10001280:	e17ff517 	ldw	r5,-44(fp)
10001284:	8009883a 	mov	r4,r16
10001288:	0003a680 	call	10003a68 <memcpy>
		}
		unsigned char * x = 0x00419450;
1000128c:	008010b4 	movhi	r2,66
10001290:	10a51404 	addi	r2,r2,-27568
10001294:	e0bff615 	stw	r2,-40(fp)
		x[1] = 0x00;
10001298:	e0bff617 	ldw	r2,-40(fp)
1000129c:	10800044 	addi	r2,r2,1
100012a0:	10000005 	stb	zero,0(r2)
//		frameptr[0] = 0x00; //testing
		 for (int i = 0; i < imgDesc.imgHeight * imgDesc.imgWidth; i++) {
100012a4:	e03fea15 	stw	zero,-88(fp)
100012a8:	00001806 	br	1000130c <main+0x7c8>
		 	if (i % imgDesc.imgWidth == 0) {
100012ac:	e0bffd03 	ldbu	r2,-12(fp)
100012b0:	e0fffd43 	ldbu	r3,-11(fp)
100012b4:	1806923a 	slli	r3,r3,8
100012b8:	1884b03a 	or	r2,r3,r2
100012bc:	10ffffcc 	andi	r3,r2,65535
100012c0:	e0bfea17 	ldw	r2,-88(fp)
100012c4:	180b883a 	mov	r5,r3
100012c8:	1009883a 	mov	r4,r2
100012cc:	000162c0 	call	1000162c <__modsi3>
100012d0:	1000021e 	bne	r2,zero,100012dc <main+0x798>
		 		printf("\n");
100012d4:	01000284 	movi	r4,10
100012d8:	0003dac0 	call	10003dac <putchar>
		 	}
//		 	printf("\033[38;5;%dm", dataOut[i]);
		 	printf("%02x ", frameptr[i]);
100012dc:	d0e00217 	ldw	r3,-32760(gp)
100012e0:	e0bfea17 	ldw	r2,-88(fp)
100012e4:	1885883a 	add	r2,r3,r2
100012e8:	10800003 	ldbu	r2,0(r2)
100012ec:	10803fcc 	andi	r2,r2,255
100012f0:	100b883a 	mov	r5,r2
100012f4:	01040074 	movhi	r4,4097
100012f8:	21098004 	addi	r4,r4,9728
100012fc:	0003d680 	call	10003d68 <printf>
			memcpy(frameptr + imgDesc.imgHeight*imgDesc.imgWidth * totalFrameCount, dataOut, imgDesc.imgHeight * imgDesc.imgWidth);
		}
		unsigned char * x = 0x00419450;
		x[1] = 0x00;
//		frameptr[0] = 0x00; //testing
		 for (int i = 0; i < imgDesc.imgHeight * imgDesc.imgWidth; i++) {
10001300:	e0bfea17 	ldw	r2,-88(fp)
10001304:	10800044 	addi	r2,r2,1
10001308:	e0bfea15 	stw	r2,-88(fp)
1000130c:	e0bffd83 	ldbu	r2,-10(fp)
10001310:	e0fffdc3 	ldbu	r3,-9(fp)
10001314:	1806923a 	slli	r3,r3,8
10001318:	1884b03a 	or	r2,r3,r2
1000131c:	113fffcc 	andi	r4,r2,65535
10001320:	e0bffd03 	ldbu	r2,-12(fp)
10001324:	e0fffd43 	ldbu	r3,-11(fp)
10001328:	1806923a 	slli	r3,r3,8
1000132c:	1884b03a 	or	r2,r3,r2
10001330:	10bfffcc 	andi	r2,r2,65535
10001334:	100b883a 	mov	r5,r2
10001338:	000175c0 	call	1000175c <__mulsi3>
1000133c:	1007883a 	mov	r3,r2
10001340:	e0bfea17 	ldw	r2,-88(fp)
10001344:	10ffd916 	blt	r2,r3,100012ac <__alt_data_end+0xf80012ac>
		// We should write: check if localColorFlag then use that to grab colors from data[i]
		// We also need to save the image dimensions and start cords.

		// Check if we're at end of file:
		// and break loop!
		c = getch(fileptr);
10001348:	d0a73017 	ldw	r2,-25408(gp)
1000134c:	1009883a 	mov	r4,r2
10001350:	00009780 	call	10000978 <getch>
10001354:	e0bfe605 	stb	r2,-104(fp)

		printf("\nFrame done: %d | size: %dx%d\n", totalFrameCount, imgDesc.imgWidth, imgDesc.imgHeight);
10001358:	e13fe407 	ldb	r4,-112(fp)
1000135c:	e0bffd03 	ldbu	r2,-12(fp)
10001360:	e0fffd43 	ldbu	r3,-11(fp)
10001364:	1806923a 	slli	r3,r3,8
10001368:	1884b03a 	or	r2,r3,r2
1000136c:	117fffcc 	andi	r5,r2,65535
10001370:	e0bffd83 	ldbu	r2,-10(fp)
10001374:	e0fffdc3 	ldbu	r3,-9(fp)
10001378:	1806923a 	slli	r3,r3,8
1000137c:	1884b03a 	or	r2,r3,r2
10001380:	10bfffcc 	andi	r2,r2,65535
10001384:	100f883a 	mov	r7,r2
10001388:	280d883a 	mov	r6,r5
1000138c:	200b883a 	mov	r5,r4
10001390:	01040074 	movhi	r4,4097
10001394:	21098204 	addi	r4,r4,9736
10001398:	0003d680 	call	10003d68 <printf>

		free(localTable);
1000139c:	e13fe517 	ldw	r4,-108(fp)
100013a0:	00032480 	call	10003248 <free>
		free(data);
100013a4:	e13fe717 	ldw	r4,-100(fp)
100013a8:	00032480 	call	10003248 <free>
		free(dataOut);
100013ac:	e13ff517 	ldw	r4,-44(fp)
100013b0:	00032480 	call	10003248 <free>
		if (c == 0x3B) {
100013b4:	e0bfe603 	ldbu	r2,-104(fp)
100013b8:	10800ed8 	cmpnei	r2,r2,59
100013bc:	1000061e 	bne	r2,zero,100013d8 <main+0x894>
			printf("\nEOF found\n");
100013c0:	01040074 	movhi	r4,4097
100013c4:	21098a04 	addi	r4,r4,9768
100013c8:	0003e840 	call	10003e84 <puts>
			break;
		}
		totalFrameCount++;
	}

	if (ON_NIOS) {
100013cc:	d0a00417 	ldw	r2,-32752(gp)
100013d0:	1000051e 	bne	r2,zero,100013e8 <main+0x8a4>
100013d4:	00006406 	br	10001568 <main+0xa24>
		free(dataOut);
		if (c == 0x3B) {
			printf("\nEOF found\n");
			break;
		}
		totalFrameCount++;
100013d8:	e0bfe403 	ldbu	r2,-112(fp)
100013dc:	10800044 	addi	r2,r2,1
100013e0:	e0bfe405 	stb	r2,-112(fp)
	}
100013e4:	003e8b06 	br	10000e14 <__alt_data_end+0xf8000e14>

	if (ON_NIOS) {
		for (int i = 0; i < 258; i++) {
100013e8:	e03feb15 	stw	zero,-84(fp)
100013ec:	00000a06 	br	10001418 <main+0x8d4>
//			ocmptr[i] = 0;
			ocmptr[i] = 0x00ff0000; //testing
100013f0:	d0e00317 	ldw	r3,-32756(gp)
100013f4:	e0bfeb17 	ldw	r2,-84(fp)
100013f8:	1085883a 	add	r2,r2,r2
100013fc:	1085883a 	add	r2,r2,r2
10001400:	1885883a 	add	r2,r3,r2
10001404:	00c03ff4 	movhi	r3,255
10001408:	10c00015 	stw	r3,0(r2)
		}
		totalFrameCount++;
	}

	if (ON_NIOS) {
		for (int i = 0; i < 258; i++) {
1000140c:	e0bfeb17 	ldw	r2,-84(fp)
10001410:	10800044 	addi	r2,r2,1
10001414:	e0bfeb15 	stw	r2,-84(fp)
10001418:	e0bfeb17 	ldw	r2,-84(fp)
1000141c:	10804090 	cmplti	r2,r2,258
10001420:	103ff31e 	bne	r2,zero,100013f0 <__alt_data_end+0xf80013f0>
//			ocmptr[i] = 0;
			ocmptr[i] = 0x00ff0000; //testing
		}
		for (int i = 100; i < 258; i++) {
10001424:	00801904 	movi	r2,100
10001428:	e0bfec15 	stw	r2,-80(fp)
1000142c:	00000a06 	br	10001458 <main+0x914>
//			ocmptr[i] = 0;
			ocmptr[i] = 0xffff0000; //testing
10001430:	d0e00317 	ldw	r3,-32756(gp)
10001434:	e0bfec17 	ldw	r2,-80(fp)
10001438:	1085883a 	add	r2,r2,r2
1000143c:	1085883a 	add	r2,r2,r2
10001440:	1885883a 	add	r2,r3,r2
10001444:	00fffff4 	movhi	r3,65535
10001448:	10c00015 	stw	r3,0(r2)
	if (ON_NIOS) {
		for (int i = 0; i < 258; i++) {
//			ocmptr[i] = 0;
			ocmptr[i] = 0x00ff0000; //testing
		}
		for (int i = 100; i < 258; i++) {
1000144c:	e0bfec17 	ldw	r2,-80(fp)
10001450:	10800044 	addi	r2,r2,1
10001454:	e0bfec15 	stw	r2,-80(fp)
10001458:	e0bfec17 	ldw	r2,-80(fp)
1000145c:	10804090 	cmplti	r2,r2,258
10001460:	103ff31e 	bne	r2,zero,10001430 <__alt_data_end+0xf8001430>
//			ocmptr[i] = 0;
			ocmptr[i] = 0xffff0000; //testing
		}
		for (int i = 200; i < 258; i++) {
10001464:	00803204 	movi	r2,200
10001468:	e0bfed15 	stw	r2,-76(fp)
1000146c:	00000b06 	br	1000149c <main+0x958>
//			ocmptr[i] = 0;
			ocmptr[i] = 0x00ffff00; //testing
10001470:	d0e00317 	ldw	r3,-32756(gp)
10001474:	e0bfed17 	ldw	r2,-76(fp)
10001478:	1085883a 	add	r2,r2,r2
1000147c:	1085883a 	add	r2,r2,r2
10001480:	1887883a 	add	r3,r3,r2
10001484:	00804034 	movhi	r2,256
10001488:	10bfc004 	addi	r2,r2,-256
1000148c:	18800015 	stw	r2,0(r3)
		}
		for (int i = 100; i < 258; i++) {
//			ocmptr[i] = 0;
			ocmptr[i] = 0xffff0000; //testing
		}
		for (int i = 200; i < 258; i++) {
10001490:	e0bfed17 	ldw	r2,-76(fp)
10001494:	10800044 	addi	r2,r2,1
10001498:	e0bfed15 	stw	r2,-76(fp)
1000149c:	e0bfed17 	ldw	r2,-76(fp)
100014a0:	10804090 	cmplti	r2,r2,258
100014a4:	103ff21e 	bne	r2,zero,10001470 <__alt_data_end+0xf8001470>
//			ocmptr[i] = 0;
			ocmptr[i] = 0x00ffff00; //testing
		}

		ocmptr[255] = 0xffffff00;
100014a8:	d0a00317 	ldw	r2,-32756(gp)
100014ac:	1080ff04 	addi	r2,r2,1020
100014b0:	00ffc004 	movi	r3,-256
100014b4:	10c00015 	stw	r3,0(r2)
//		for (int i = 0; i < readlGlobalColorSize; i++) {
//			for (int j = 0; j < 3; j++) {
//				ocmptr[i] += globalTable[i].RGB[j] << (24 - j * 8);
//			}
//		}
		ocmptr[256] = 0;
100014b8:	d0a00317 	ldw	r2,-32756(gp)
100014bc:	10810004 	addi	r2,r2,1024
100014c0:	10000015 	stw	zero,0(r2)
		ocmptr[257] = 0;
100014c4:	d0a00317 	ldw	r2,-32756(gp)
100014c8:	10810104 	addi	r2,r2,1028
100014cc:	10000015 	stw	zero,0(r2)
		ocmptr[0] = 0xffffffff; // testing
100014d0:	d0a00317 	ldw	r2,-32756(gp)
100014d4:	00ffffc4 	movi	r3,-1
100014d8:	10c00015 	stw	r3,0(r2)

		ocmptr[256] += descriptor.canvasWidth << 16;
100014dc:	d0a00317 	ldw	r2,-32756(gp)
100014e0:	10810004 	addi	r2,r2,1024
100014e4:	d0e00317 	ldw	r3,-32756(gp)
100014e8:	18c10004 	addi	r3,r3,1024
100014ec:	18c00017 	ldw	r3,0(r3)
100014f0:	e13ff88b 	ldhu	r4,-30(fp)
100014f4:	213fffcc 	andi	r4,r4,65535
100014f8:	2008943a 	slli	r4,r4,16
100014fc:	1907883a 	add	r3,r3,r4
10001500:	10c00015 	stw	r3,0(r2)
		ocmptr[256] += descriptor.canvasHeight;
10001504:	d0a00317 	ldw	r2,-32756(gp)
10001508:	10810004 	addi	r2,r2,1024
1000150c:	d0e00317 	ldw	r3,-32756(gp)
10001510:	18c10004 	addi	r3,r3,1024
10001514:	19000017 	ldw	r4,0(r3)
10001518:	e0fff90b 	ldhu	r3,-28(fp)
1000151c:	18ffffcc 	andi	r3,r3,65535
10001520:	20c7883a 	add	r3,r4,r3
10001524:	10c00015 	stw	r3,0(r2)
		//011f
		//ff34
		ocmptr[257] += totalFrameCount << 24;  //last set of bytes
10001528:	d0a00317 	ldw	r2,-32756(gp)
1000152c:	10810104 	addi	r2,r2,1028
10001530:	d0e00317 	ldw	r3,-32756(gp)
10001534:	18c10104 	addi	r3,r3,1028
10001538:	18c00017 	ldw	r3,0(r3)
1000153c:	e13fe407 	ldb	r4,-112(fp)
10001540:	2008963a 	slli	r4,r4,24
10001544:	1907883a 	add	r3,r3,r4
10001548:	10c00015 	stw	r3,0(r2)
		ocmptr[257] += 1;
1000154c:	d0a00317 	ldw	r2,-32756(gp)
10001550:	10810104 	addi	r2,r2,1028
10001554:	d0e00317 	ldw	r3,-32756(gp)
10001558:	18c10104 	addi	r3,r3,1028
1000155c:	18c00017 	ldw	r3,0(r3)
10001560:	18c00044 	addi	r3,r3,1
10001564:	10c00015 	stw	r3,0(r2)
	}
	free(fileChunk);
10001568:	e13fe017 	ldw	r4,-128(fp)
1000156c:	00032480 	call	10003248 <free>
	free(globalTable);
10001570:	e13ff117 	ldw	r4,-60(fp)
10001574:	00032480 	call	10003248 <free>
	printf("\n");
10001578:	01000284 	movi	r4,10
1000157c:	0003dac0 	call	10003dac <putchar>
	printf("\nDONE\n");
10001580:	01040074 	movhi	r4,4097
10001584:	21098d04 	addi	r4,r4,9780
10001588:	0003e840 	call	10003e84 <puts>
1000158c:	0005883a 	mov	r2,zero
}
10001590:	e6ffff04 	addi	sp,fp,-4
10001594:	dfc00217 	ldw	ra,8(sp)
10001598:	df000117 	ldw	fp,4(sp)
1000159c:	dc000017 	ldw	r16,0(sp)
100015a0:	dec00304 	addi	sp,sp,12
100015a4:	f800283a 	ret

100015a8 <__divsi3>:
100015a8:	20001b16 	blt	r4,zero,10001618 <__divsi3+0x70>
100015ac:	000f883a 	mov	r7,zero
100015b0:	28001616 	blt	r5,zero,1000160c <__divsi3+0x64>
100015b4:	200d883a 	mov	r6,r4
100015b8:	29001a2e 	bgeu	r5,r4,10001624 <__divsi3+0x7c>
100015bc:	00800804 	movi	r2,32
100015c0:	00c00044 	movi	r3,1
100015c4:	00000106 	br	100015cc <__divsi3+0x24>
100015c8:	10000d26 	beq	r2,zero,10001600 <__divsi3+0x58>
100015cc:	294b883a 	add	r5,r5,r5
100015d0:	10bfffc4 	addi	r2,r2,-1
100015d4:	18c7883a 	add	r3,r3,r3
100015d8:	293ffb36 	bltu	r5,r4,100015c8 <__alt_data_end+0xf80015c8>
100015dc:	0005883a 	mov	r2,zero
100015e0:	18000726 	beq	r3,zero,10001600 <__divsi3+0x58>
100015e4:	0005883a 	mov	r2,zero
100015e8:	31400236 	bltu	r6,r5,100015f4 <__divsi3+0x4c>
100015ec:	314dc83a 	sub	r6,r6,r5
100015f0:	10c4b03a 	or	r2,r2,r3
100015f4:	1806d07a 	srli	r3,r3,1
100015f8:	280ad07a 	srli	r5,r5,1
100015fc:	183ffa1e 	bne	r3,zero,100015e8 <__alt_data_end+0xf80015e8>
10001600:	38000126 	beq	r7,zero,10001608 <__divsi3+0x60>
10001604:	0085c83a 	sub	r2,zero,r2
10001608:	f800283a 	ret
1000160c:	014bc83a 	sub	r5,zero,r5
10001610:	39c0005c 	xori	r7,r7,1
10001614:	003fe706 	br	100015b4 <__alt_data_end+0xf80015b4>
10001618:	0109c83a 	sub	r4,zero,r4
1000161c:	01c00044 	movi	r7,1
10001620:	003fe306 	br	100015b0 <__alt_data_end+0xf80015b0>
10001624:	00c00044 	movi	r3,1
10001628:	003fee06 	br	100015e4 <__alt_data_end+0xf80015e4>

1000162c <__modsi3>:
1000162c:	20001716 	blt	r4,zero,1000168c <__modsi3+0x60>
10001630:	000f883a 	mov	r7,zero
10001634:	2005883a 	mov	r2,r4
10001638:	28001216 	blt	r5,zero,10001684 <__modsi3+0x58>
1000163c:	2900162e 	bgeu	r5,r4,10001698 <__modsi3+0x6c>
10001640:	01800804 	movi	r6,32
10001644:	00c00044 	movi	r3,1
10001648:	00000106 	br	10001650 <__modsi3+0x24>
1000164c:	30000a26 	beq	r6,zero,10001678 <__modsi3+0x4c>
10001650:	294b883a 	add	r5,r5,r5
10001654:	31bfffc4 	addi	r6,r6,-1
10001658:	18c7883a 	add	r3,r3,r3
1000165c:	293ffb36 	bltu	r5,r4,1000164c <__alt_data_end+0xf800164c>
10001660:	18000526 	beq	r3,zero,10001678 <__modsi3+0x4c>
10001664:	1806d07a 	srli	r3,r3,1
10001668:	11400136 	bltu	r2,r5,10001670 <__modsi3+0x44>
1000166c:	1145c83a 	sub	r2,r2,r5
10001670:	280ad07a 	srli	r5,r5,1
10001674:	183ffb1e 	bne	r3,zero,10001664 <__alt_data_end+0xf8001664>
10001678:	38000126 	beq	r7,zero,10001680 <__modsi3+0x54>
1000167c:	0085c83a 	sub	r2,zero,r2
10001680:	f800283a 	ret
10001684:	014bc83a 	sub	r5,zero,r5
10001688:	003fec06 	br	1000163c <__alt_data_end+0xf800163c>
1000168c:	0109c83a 	sub	r4,zero,r4
10001690:	01c00044 	movi	r7,1
10001694:	003fe706 	br	10001634 <__alt_data_end+0xf8001634>
10001698:	00c00044 	movi	r3,1
1000169c:	003ff106 	br	10001664 <__alt_data_end+0xf8001664>

100016a0 <__udivsi3>:
100016a0:	200d883a 	mov	r6,r4
100016a4:	2900152e 	bgeu	r5,r4,100016fc <__udivsi3+0x5c>
100016a8:	28001416 	blt	r5,zero,100016fc <__udivsi3+0x5c>
100016ac:	00800804 	movi	r2,32
100016b0:	00c00044 	movi	r3,1
100016b4:	00000206 	br	100016c0 <__udivsi3+0x20>
100016b8:	10000e26 	beq	r2,zero,100016f4 <__udivsi3+0x54>
100016bc:	28000516 	blt	r5,zero,100016d4 <__udivsi3+0x34>
100016c0:	294b883a 	add	r5,r5,r5
100016c4:	10bfffc4 	addi	r2,r2,-1
100016c8:	18c7883a 	add	r3,r3,r3
100016cc:	293ffa36 	bltu	r5,r4,100016b8 <__alt_data_end+0xf80016b8>
100016d0:	18000826 	beq	r3,zero,100016f4 <__udivsi3+0x54>
100016d4:	0005883a 	mov	r2,zero
100016d8:	31400236 	bltu	r6,r5,100016e4 <__udivsi3+0x44>
100016dc:	314dc83a 	sub	r6,r6,r5
100016e0:	10c4b03a 	or	r2,r2,r3
100016e4:	1806d07a 	srli	r3,r3,1
100016e8:	280ad07a 	srli	r5,r5,1
100016ec:	183ffa1e 	bne	r3,zero,100016d8 <__alt_data_end+0xf80016d8>
100016f0:	f800283a 	ret
100016f4:	0005883a 	mov	r2,zero
100016f8:	f800283a 	ret
100016fc:	00c00044 	movi	r3,1
10001700:	003ff406 	br	100016d4 <__alt_data_end+0xf80016d4>

10001704 <__umodsi3>:
10001704:	2005883a 	mov	r2,r4
10001708:	2900122e 	bgeu	r5,r4,10001754 <__umodsi3+0x50>
1000170c:	28001116 	blt	r5,zero,10001754 <__umodsi3+0x50>
10001710:	01800804 	movi	r6,32
10001714:	00c00044 	movi	r3,1
10001718:	00000206 	br	10001724 <__umodsi3+0x20>
1000171c:	30000c26 	beq	r6,zero,10001750 <__umodsi3+0x4c>
10001720:	28000516 	blt	r5,zero,10001738 <__umodsi3+0x34>
10001724:	294b883a 	add	r5,r5,r5
10001728:	31bfffc4 	addi	r6,r6,-1
1000172c:	18c7883a 	add	r3,r3,r3
10001730:	293ffa36 	bltu	r5,r4,1000171c <__alt_data_end+0xf800171c>
10001734:	18000626 	beq	r3,zero,10001750 <__umodsi3+0x4c>
10001738:	1806d07a 	srli	r3,r3,1
1000173c:	11400136 	bltu	r2,r5,10001744 <__umodsi3+0x40>
10001740:	1145c83a 	sub	r2,r2,r5
10001744:	280ad07a 	srli	r5,r5,1
10001748:	183ffb1e 	bne	r3,zero,10001738 <__alt_data_end+0xf8001738>
1000174c:	f800283a 	ret
10001750:	f800283a 	ret
10001754:	00c00044 	movi	r3,1
10001758:	003ff706 	br	10001738 <__alt_data_end+0xf8001738>

1000175c <__mulsi3>:
1000175c:	0005883a 	mov	r2,zero
10001760:	20000726 	beq	r4,zero,10001780 <__mulsi3+0x24>
10001764:	20c0004c 	andi	r3,r4,1
10001768:	2008d07a 	srli	r4,r4,1
1000176c:	18000126 	beq	r3,zero,10001774 <__mulsi3+0x18>
10001770:	1145883a 	add	r2,r2,r5
10001774:	294b883a 	add	r5,r5,r5
10001778:	203ffa1e 	bne	r4,zero,10001764 <__alt_data_end+0xf8001764>
1000177c:	f800283a 	ret
10001780:	f800283a 	ret

10001784 <__assert_func>:
10001784:	00840074 	movhi	r2,4097
10001788:	10914b04 	addi	r2,r2,17708
1000178c:	10800017 	ldw	r2,0(r2)
10001790:	defffc04 	addi	sp,sp,-16
10001794:	dfc00315 	stw	ra,12(sp)
10001798:	2015883a 	mov	r10,r4
1000179c:	2811883a 	mov	r8,r5
100017a0:	3813883a 	mov	r9,r7
100017a4:	11000317 	ldw	r4,12(r2)
100017a8:	30000c26 	beq	r6,zero,100017dc <__assert_func+0x58>
100017ac:	00c40074 	movhi	r3,4097
100017b0:	18c99204 	addi	r3,r3,9800
100017b4:	3005883a 	mov	r2,r6
100017b8:	01440074 	movhi	r5,4097
100017bc:	29499604 	addi	r5,r5,9816
100017c0:	500f883a 	mov	r7,r10
100017c4:	480d883a 	mov	r6,r9
100017c8:	d8c00115 	stw	r3,4(sp)
100017cc:	da000015 	stw	r8,0(sp)
100017d0:	d8800215 	stw	r2,8(sp)
100017d4:	0001fb40 	call	10001fb4 <fiprintf>
100017d8:	0006f800 	call	10006f80 <abort>
100017dc:	00c40074 	movhi	r3,4097
100017e0:	18c99504 	addi	r3,r3,9812
100017e4:	1805883a 	mov	r2,r3
100017e8:	003ff306 	br	100017b8 <__alt_data_end+0xf80017b8>

100017ec <__assert>:
100017ec:	deffff04 	addi	sp,sp,-4
100017f0:	300f883a 	mov	r7,r6
100017f4:	000d883a 	mov	r6,zero
100017f8:	dfc00015 	stw	ra,0(sp)
100017fc:	00017840 	call	10001784 <__assert_func>

10001800 <exit>:
10001800:	defffe04 	addi	sp,sp,-8
10001804:	000b883a 	mov	r5,zero
10001808:	dc000015 	stw	r16,0(sp)
1000180c:	dfc00115 	stw	ra,4(sp)
10001810:	2021883a 	mov	r16,r4
10001814:	0006e000 	call	10006e00 <__call_exitprocs>
10001818:	00840074 	movhi	r2,4097
1000181c:	10914a04 	addi	r2,r2,17704
10001820:	11000017 	ldw	r4,0(r2)
10001824:	20800f17 	ldw	r2,60(r4)
10001828:	10000126 	beq	r2,zero,10001830 <exit+0x30>
1000182c:	103ee83a 	callr	r2
10001830:	8009883a 	mov	r4,r16
10001834:	000fb200 	call	1000fb20 <_exit>

10001838 <_fclose_r>:
10001838:	28003926 	beq	r5,zero,10001920 <_fclose_r+0xe8>
1000183c:	defffc04 	addi	sp,sp,-16
10001840:	dc400115 	stw	r17,4(sp)
10001844:	dc000015 	stw	r16,0(sp)
10001848:	dfc00315 	stw	ra,12(sp)
1000184c:	dc800215 	stw	r18,8(sp)
10001850:	2023883a 	mov	r17,r4
10001854:	2821883a 	mov	r16,r5
10001858:	20000226 	beq	r4,zero,10001864 <_fclose_r+0x2c>
1000185c:	20800e17 	ldw	r2,56(r4)
10001860:	10002726 	beq	r2,zero,10001900 <_fclose_r+0xc8>
10001864:	8080030f 	ldh	r2,12(r16)
10001868:	1000071e 	bne	r2,zero,10001888 <_fclose_r+0x50>
1000186c:	0005883a 	mov	r2,zero
10001870:	dfc00317 	ldw	ra,12(sp)
10001874:	dc800217 	ldw	r18,8(sp)
10001878:	dc400117 	ldw	r17,4(sp)
1000187c:	dc000017 	ldw	r16,0(sp)
10001880:	dec00404 	addi	sp,sp,16
10001884:	f800283a 	ret
10001888:	800b883a 	mov	r5,r16
1000188c:	8809883a 	mov	r4,r17
10001890:	000193c0 	call	1000193c <__sflush_r>
10001894:	1025883a 	mov	r18,r2
10001898:	80800b17 	ldw	r2,44(r16)
1000189c:	10000426 	beq	r2,zero,100018b0 <_fclose_r+0x78>
100018a0:	81400717 	ldw	r5,28(r16)
100018a4:	8809883a 	mov	r4,r17
100018a8:	103ee83a 	callr	r2
100018ac:	10001616 	blt	r2,zero,10001908 <_fclose_r+0xd0>
100018b0:	8080030b 	ldhu	r2,12(r16)
100018b4:	1080200c 	andi	r2,r2,128
100018b8:	1000151e 	bne	r2,zero,10001910 <_fclose_r+0xd8>
100018bc:	81400c17 	ldw	r5,48(r16)
100018c0:	28000526 	beq	r5,zero,100018d8 <_fclose_r+0xa0>
100018c4:	80801004 	addi	r2,r16,64
100018c8:	28800226 	beq	r5,r2,100018d4 <_fclose_r+0x9c>
100018cc:	8809883a 	mov	r4,r17
100018d0:	00024dc0 	call	100024dc <_free_r>
100018d4:	80000c15 	stw	zero,48(r16)
100018d8:	81401117 	ldw	r5,68(r16)
100018dc:	28000326 	beq	r5,zero,100018ec <_fclose_r+0xb4>
100018e0:	8809883a 	mov	r4,r17
100018e4:	00024dc0 	call	100024dc <_free_r>
100018e8:	80001115 	stw	zero,68(r16)
100018ec:	0001f540 	call	10001f54 <__sfp_lock_acquire>
100018f0:	8000030d 	sth	zero,12(r16)
100018f4:	0001f580 	call	10001f58 <__sfp_lock_release>
100018f8:	9005883a 	mov	r2,r18
100018fc:	003fdc06 	br	10001870 <__alt_data_end+0xf8001870>
10001900:	0001f440 	call	10001f44 <__sinit>
10001904:	003fd706 	br	10001864 <__alt_data_end+0xf8001864>
10001908:	04bfffc4 	movi	r18,-1
1000190c:	003fe806 	br	100018b0 <__alt_data_end+0xf80018b0>
10001910:	81400417 	ldw	r5,16(r16)
10001914:	8809883a 	mov	r4,r17
10001918:	00024dc0 	call	100024dc <_free_r>
1000191c:	003fe706 	br	100018bc <__alt_data_end+0xf80018bc>
10001920:	0005883a 	mov	r2,zero
10001924:	f800283a 	ret

10001928 <fclose>:
10001928:	00840074 	movhi	r2,4097
1000192c:	10914b04 	addi	r2,r2,17708
10001930:	200b883a 	mov	r5,r4
10001934:	11000017 	ldw	r4,0(r2)
10001938:	00018381 	jmpi	10001838 <_fclose_r>

1000193c <__sflush_r>:
1000193c:	2880030b 	ldhu	r2,12(r5)
10001940:	defffb04 	addi	sp,sp,-20
10001944:	dcc00315 	stw	r19,12(sp)
10001948:	dc400115 	stw	r17,4(sp)
1000194c:	dfc00415 	stw	ra,16(sp)
10001950:	dc800215 	stw	r18,8(sp)
10001954:	dc000015 	stw	r16,0(sp)
10001958:	10c0020c 	andi	r3,r2,8
1000195c:	2823883a 	mov	r17,r5
10001960:	2027883a 	mov	r19,r4
10001964:	1800311e 	bne	r3,zero,10001a2c <__sflush_r+0xf0>
10001968:	28c00117 	ldw	r3,4(r5)
1000196c:	10820014 	ori	r2,r2,2048
10001970:	2880030d 	sth	r2,12(r5)
10001974:	00c04b0e 	bge	zero,r3,10001aa4 <__sflush_r+0x168>
10001978:	8a000a17 	ldw	r8,40(r17)
1000197c:	40002326 	beq	r8,zero,10001a0c <__sflush_r+0xd0>
10001980:	9c000017 	ldw	r16,0(r19)
10001984:	10c4000c 	andi	r3,r2,4096
10001988:	98000015 	stw	zero,0(r19)
1000198c:	18004826 	beq	r3,zero,10001ab0 <__sflush_r+0x174>
10001990:	89801417 	ldw	r6,80(r17)
10001994:	10c0010c 	andi	r3,r2,4
10001998:	18000626 	beq	r3,zero,100019b4 <__sflush_r+0x78>
1000199c:	88c00117 	ldw	r3,4(r17)
100019a0:	88800c17 	ldw	r2,48(r17)
100019a4:	30cdc83a 	sub	r6,r6,r3
100019a8:	10000226 	beq	r2,zero,100019b4 <__sflush_r+0x78>
100019ac:	88800f17 	ldw	r2,60(r17)
100019b0:	308dc83a 	sub	r6,r6,r2
100019b4:	89400717 	ldw	r5,28(r17)
100019b8:	000f883a 	mov	r7,zero
100019bc:	9809883a 	mov	r4,r19
100019c0:	403ee83a 	callr	r8
100019c4:	00ffffc4 	movi	r3,-1
100019c8:	10c04426 	beq	r2,r3,10001adc <__sflush_r+0x1a0>
100019cc:	88c0030b 	ldhu	r3,12(r17)
100019d0:	89000417 	ldw	r4,16(r17)
100019d4:	88000115 	stw	zero,4(r17)
100019d8:	197dffcc 	andi	r5,r3,63487
100019dc:	8940030d 	sth	r5,12(r17)
100019e0:	89000015 	stw	r4,0(r17)
100019e4:	18c4000c 	andi	r3,r3,4096
100019e8:	18002c1e 	bne	r3,zero,10001a9c <__sflush_r+0x160>
100019ec:	89400c17 	ldw	r5,48(r17)
100019f0:	9c000015 	stw	r16,0(r19)
100019f4:	28000526 	beq	r5,zero,10001a0c <__sflush_r+0xd0>
100019f8:	88801004 	addi	r2,r17,64
100019fc:	28800226 	beq	r5,r2,10001a08 <__sflush_r+0xcc>
10001a00:	9809883a 	mov	r4,r19
10001a04:	00024dc0 	call	100024dc <_free_r>
10001a08:	88000c15 	stw	zero,48(r17)
10001a0c:	0005883a 	mov	r2,zero
10001a10:	dfc00417 	ldw	ra,16(sp)
10001a14:	dcc00317 	ldw	r19,12(sp)
10001a18:	dc800217 	ldw	r18,8(sp)
10001a1c:	dc400117 	ldw	r17,4(sp)
10001a20:	dc000017 	ldw	r16,0(sp)
10001a24:	dec00504 	addi	sp,sp,20
10001a28:	f800283a 	ret
10001a2c:	2c800417 	ldw	r18,16(r5)
10001a30:	903ff626 	beq	r18,zero,10001a0c <__alt_data_end+0xf8001a0c>
10001a34:	2c000017 	ldw	r16,0(r5)
10001a38:	108000cc 	andi	r2,r2,3
10001a3c:	2c800015 	stw	r18,0(r5)
10001a40:	84a1c83a 	sub	r16,r16,r18
10001a44:	1000131e 	bne	r2,zero,10001a94 <__sflush_r+0x158>
10001a48:	28800517 	ldw	r2,20(r5)
10001a4c:	88800215 	stw	r2,8(r17)
10001a50:	04000316 	blt	zero,r16,10001a60 <__sflush_r+0x124>
10001a54:	003fed06 	br	10001a0c <__alt_data_end+0xf8001a0c>
10001a58:	90a5883a 	add	r18,r18,r2
10001a5c:	043feb0e 	bge	zero,r16,10001a0c <__alt_data_end+0xf8001a0c>
10001a60:	88800917 	ldw	r2,36(r17)
10001a64:	89400717 	ldw	r5,28(r17)
10001a68:	800f883a 	mov	r7,r16
10001a6c:	900d883a 	mov	r6,r18
10001a70:	9809883a 	mov	r4,r19
10001a74:	103ee83a 	callr	r2
10001a78:	80a1c83a 	sub	r16,r16,r2
10001a7c:	00bff616 	blt	zero,r2,10001a58 <__alt_data_end+0xf8001a58>
10001a80:	88c0030b 	ldhu	r3,12(r17)
10001a84:	00bfffc4 	movi	r2,-1
10001a88:	18c01014 	ori	r3,r3,64
10001a8c:	88c0030d 	sth	r3,12(r17)
10001a90:	003fdf06 	br	10001a10 <__alt_data_end+0xf8001a10>
10001a94:	0005883a 	mov	r2,zero
10001a98:	003fec06 	br	10001a4c <__alt_data_end+0xf8001a4c>
10001a9c:	88801415 	stw	r2,80(r17)
10001aa0:	003fd206 	br	100019ec <__alt_data_end+0xf80019ec>
10001aa4:	28c00f17 	ldw	r3,60(r5)
10001aa8:	00ffb316 	blt	zero,r3,10001978 <__alt_data_end+0xf8001978>
10001aac:	003fd706 	br	10001a0c <__alt_data_end+0xf8001a0c>
10001ab0:	89400717 	ldw	r5,28(r17)
10001ab4:	000d883a 	mov	r6,zero
10001ab8:	01c00044 	movi	r7,1
10001abc:	9809883a 	mov	r4,r19
10001ac0:	403ee83a 	callr	r8
10001ac4:	100d883a 	mov	r6,r2
10001ac8:	00bfffc4 	movi	r2,-1
10001acc:	30801426 	beq	r6,r2,10001b20 <__sflush_r+0x1e4>
10001ad0:	8880030b 	ldhu	r2,12(r17)
10001ad4:	8a000a17 	ldw	r8,40(r17)
10001ad8:	003fae06 	br	10001994 <__alt_data_end+0xf8001994>
10001adc:	98c00017 	ldw	r3,0(r19)
10001ae0:	183fba26 	beq	r3,zero,100019cc <__alt_data_end+0xf80019cc>
10001ae4:	01000744 	movi	r4,29
10001ae8:	19000626 	beq	r3,r4,10001b04 <__sflush_r+0x1c8>
10001aec:	01000584 	movi	r4,22
10001af0:	19000426 	beq	r3,r4,10001b04 <__sflush_r+0x1c8>
10001af4:	88c0030b 	ldhu	r3,12(r17)
10001af8:	18c01014 	ori	r3,r3,64
10001afc:	88c0030d 	sth	r3,12(r17)
10001b00:	003fc306 	br	10001a10 <__alt_data_end+0xf8001a10>
10001b04:	8880030b 	ldhu	r2,12(r17)
10001b08:	88c00417 	ldw	r3,16(r17)
10001b0c:	88000115 	stw	zero,4(r17)
10001b10:	10bdffcc 	andi	r2,r2,63487
10001b14:	8880030d 	sth	r2,12(r17)
10001b18:	88c00015 	stw	r3,0(r17)
10001b1c:	003fb306 	br	100019ec <__alt_data_end+0xf80019ec>
10001b20:	98800017 	ldw	r2,0(r19)
10001b24:	103fea26 	beq	r2,zero,10001ad0 <__alt_data_end+0xf8001ad0>
10001b28:	00c00744 	movi	r3,29
10001b2c:	10c00226 	beq	r2,r3,10001b38 <__sflush_r+0x1fc>
10001b30:	00c00584 	movi	r3,22
10001b34:	10c0031e 	bne	r2,r3,10001b44 <__sflush_r+0x208>
10001b38:	9c000015 	stw	r16,0(r19)
10001b3c:	0005883a 	mov	r2,zero
10001b40:	003fb306 	br	10001a10 <__alt_data_end+0xf8001a10>
10001b44:	88c0030b 	ldhu	r3,12(r17)
10001b48:	3005883a 	mov	r2,r6
10001b4c:	18c01014 	ori	r3,r3,64
10001b50:	88c0030d 	sth	r3,12(r17)
10001b54:	003fae06 	br	10001a10 <__alt_data_end+0xf8001a10>

10001b58 <_fflush_r>:
10001b58:	defffd04 	addi	sp,sp,-12
10001b5c:	dc000115 	stw	r16,4(sp)
10001b60:	dfc00215 	stw	ra,8(sp)
10001b64:	2021883a 	mov	r16,r4
10001b68:	20000226 	beq	r4,zero,10001b74 <_fflush_r+0x1c>
10001b6c:	20800e17 	ldw	r2,56(r4)
10001b70:	10000c26 	beq	r2,zero,10001ba4 <_fflush_r+0x4c>
10001b74:	2880030f 	ldh	r2,12(r5)
10001b78:	1000051e 	bne	r2,zero,10001b90 <_fflush_r+0x38>
10001b7c:	0005883a 	mov	r2,zero
10001b80:	dfc00217 	ldw	ra,8(sp)
10001b84:	dc000117 	ldw	r16,4(sp)
10001b88:	dec00304 	addi	sp,sp,12
10001b8c:	f800283a 	ret
10001b90:	8009883a 	mov	r4,r16
10001b94:	dfc00217 	ldw	ra,8(sp)
10001b98:	dc000117 	ldw	r16,4(sp)
10001b9c:	dec00304 	addi	sp,sp,12
10001ba0:	000193c1 	jmpi	1000193c <__sflush_r>
10001ba4:	d9400015 	stw	r5,0(sp)
10001ba8:	0001f440 	call	10001f44 <__sinit>
10001bac:	d9400017 	ldw	r5,0(sp)
10001bb0:	003ff006 	br	10001b74 <__alt_data_end+0xf8001b74>

10001bb4 <fflush>:
10001bb4:	20000526 	beq	r4,zero,10001bcc <fflush+0x18>
10001bb8:	00840074 	movhi	r2,4097
10001bbc:	10914b04 	addi	r2,r2,17708
10001bc0:	200b883a 	mov	r5,r4
10001bc4:	11000017 	ldw	r4,0(r2)
10001bc8:	0001b581 	jmpi	10001b58 <_fflush_r>
10001bcc:	00840074 	movhi	r2,4097
10001bd0:	10914a04 	addi	r2,r2,17704
10001bd4:	11000017 	ldw	r4,0(r2)
10001bd8:	01440034 	movhi	r5,4096
10001bdc:	2946d604 	addi	r5,r5,7000
10001be0:	0002ea41 	jmpi	10002ea4 <_fwalk_reent>

10001be4 <__fp_unlock>:
10001be4:	0005883a 	mov	r2,zero
10001be8:	f800283a 	ret

10001bec <_cleanup_r>:
10001bec:	01440034 	movhi	r5,4096
10001bf0:	29460e04 	addi	r5,r5,6200
10001bf4:	0002ea41 	jmpi	10002ea4 <_fwalk_reent>

10001bf8 <__sinit.part.1>:
10001bf8:	defff704 	addi	sp,sp,-36
10001bfc:	00c40034 	movhi	r3,4096
10001c00:	dfc00815 	stw	ra,32(sp)
10001c04:	ddc00715 	stw	r23,28(sp)
10001c08:	dd800615 	stw	r22,24(sp)
10001c0c:	dd400515 	stw	r21,20(sp)
10001c10:	dd000415 	stw	r20,16(sp)
10001c14:	dcc00315 	stw	r19,12(sp)
10001c18:	dc800215 	stw	r18,8(sp)
10001c1c:	dc400115 	stw	r17,4(sp)
10001c20:	dc000015 	stw	r16,0(sp)
10001c24:	18c6fb04 	addi	r3,r3,7148
10001c28:	24000117 	ldw	r16,4(r4)
10001c2c:	20c00f15 	stw	r3,60(r4)
10001c30:	2080bb04 	addi	r2,r4,748
10001c34:	00c000c4 	movi	r3,3
10001c38:	20c0b915 	stw	r3,740(r4)
10001c3c:	2080ba15 	stw	r2,744(r4)
10001c40:	2000b815 	stw	zero,736(r4)
10001c44:	05c00204 	movi	r23,8
10001c48:	00800104 	movi	r2,4
10001c4c:	2025883a 	mov	r18,r4
10001c50:	b80d883a 	mov	r6,r23
10001c54:	81001704 	addi	r4,r16,92
10001c58:	000b883a 	mov	r5,zero
10001c5c:	80000015 	stw	zero,0(r16)
10001c60:	80000115 	stw	zero,4(r16)
10001c64:	80000215 	stw	zero,8(r16)
10001c68:	8080030d 	sth	r2,12(r16)
10001c6c:	80001915 	stw	zero,100(r16)
10001c70:	8000038d 	sth	zero,14(r16)
10001c74:	80000415 	stw	zero,16(r16)
10001c78:	80000515 	stw	zero,20(r16)
10001c7c:	80000615 	stw	zero,24(r16)
10001c80:	0003bb00 	call	10003bb0 <memset>
10001c84:	05840034 	movhi	r22,4096
10001c88:	94400217 	ldw	r17,8(r18)
10001c8c:	05440034 	movhi	r21,4096
10001c90:	05040034 	movhi	r20,4096
10001c94:	04c40034 	movhi	r19,4096
10001c98:	b5919604 	addi	r22,r22,18008
10001c9c:	ad51ad04 	addi	r21,r21,18100
10001ca0:	a511cc04 	addi	r20,r20,18224
10001ca4:	9cd1e304 	addi	r19,r19,18316
10001ca8:	85800815 	stw	r22,32(r16)
10001cac:	85400915 	stw	r21,36(r16)
10001cb0:	85000a15 	stw	r20,40(r16)
10001cb4:	84c00b15 	stw	r19,44(r16)
10001cb8:	84000715 	stw	r16,28(r16)
10001cbc:	00800284 	movi	r2,10
10001cc0:	8880030d 	sth	r2,12(r17)
10001cc4:	00800044 	movi	r2,1
10001cc8:	b80d883a 	mov	r6,r23
10001ccc:	89001704 	addi	r4,r17,92
10001cd0:	000b883a 	mov	r5,zero
10001cd4:	88000015 	stw	zero,0(r17)
10001cd8:	88000115 	stw	zero,4(r17)
10001cdc:	88000215 	stw	zero,8(r17)
10001ce0:	88001915 	stw	zero,100(r17)
10001ce4:	8880038d 	sth	r2,14(r17)
10001ce8:	88000415 	stw	zero,16(r17)
10001cec:	88000515 	stw	zero,20(r17)
10001cf0:	88000615 	stw	zero,24(r17)
10001cf4:	0003bb00 	call	10003bb0 <memset>
10001cf8:	94000317 	ldw	r16,12(r18)
10001cfc:	00800484 	movi	r2,18
10001d00:	8c400715 	stw	r17,28(r17)
10001d04:	8d800815 	stw	r22,32(r17)
10001d08:	8d400915 	stw	r21,36(r17)
10001d0c:	8d000a15 	stw	r20,40(r17)
10001d10:	8cc00b15 	stw	r19,44(r17)
10001d14:	8080030d 	sth	r2,12(r16)
10001d18:	00800084 	movi	r2,2
10001d1c:	80000015 	stw	zero,0(r16)
10001d20:	80000115 	stw	zero,4(r16)
10001d24:	80000215 	stw	zero,8(r16)
10001d28:	80001915 	stw	zero,100(r16)
10001d2c:	8080038d 	sth	r2,14(r16)
10001d30:	80000415 	stw	zero,16(r16)
10001d34:	80000515 	stw	zero,20(r16)
10001d38:	80000615 	stw	zero,24(r16)
10001d3c:	b80d883a 	mov	r6,r23
10001d40:	000b883a 	mov	r5,zero
10001d44:	81001704 	addi	r4,r16,92
10001d48:	0003bb00 	call	10003bb0 <memset>
10001d4c:	00800044 	movi	r2,1
10001d50:	84000715 	stw	r16,28(r16)
10001d54:	85800815 	stw	r22,32(r16)
10001d58:	85400915 	stw	r21,36(r16)
10001d5c:	85000a15 	stw	r20,40(r16)
10001d60:	84c00b15 	stw	r19,44(r16)
10001d64:	90800e15 	stw	r2,56(r18)
10001d68:	dfc00817 	ldw	ra,32(sp)
10001d6c:	ddc00717 	ldw	r23,28(sp)
10001d70:	dd800617 	ldw	r22,24(sp)
10001d74:	dd400517 	ldw	r21,20(sp)
10001d78:	dd000417 	ldw	r20,16(sp)
10001d7c:	dcc00317 	ldw	r19,12(sp)
10001d80:	dc800217 	ldw	r18,8(sp)
10001d84:	dc400117 	ldw	r17,4(sp)
10001d88:	dc000017 	ldw	r16,0(sp)
10001d8c:	dec00904 	addi	sp,sp,36
10001d90:	f800283a 	ret

10001d94 <__fp_lock>:
10001d94:	0005883a 	mov	r2,zero
10001d98:	f800283a 	ret

10001d9c <__sfmoreglue>:
10001d9c:	defffc04 	addi	sp,sp,-16
10001da0:	dc800215 	stw	r18,8(sp)
10001da4:	2825883a 	mov	r18,r5
10001da8:	dc000015 	stw	r16,0(sp)
10001dac:	01401a04 	movi	r5,104
10001db0:	2021883a 	mov	r16,r4
10001db4:	913fffc4 	addi	r4,r18,-1
10001db8:	dfc00315 	stw	ra,12(sp)
10001dbc:	dc400115 	stw	r17,4(sp)
10001dc0:	000175c0 	call	1000175c <__mulsi3>
10001dc4:	8009883a 	mov	r4,r16
10001dc8:	11401d04 	addi	r5,r2,116
10001dcc:	1023883a 	mov	r17,r2
10001dd0:	000325c0 	call	1000325c <_malloc_r>
10001dd4:	1021883a 	mov	r16,r2
10001dd8:	10000726 	beq	r2,zero,10001df8 <__sfmoreglue+0x5c>
10001ddc:	11000304 	addi	r4,r2,12
10001de0:	10000015 	stw	zero,0(r2)
10001de4:	14800115 	stw	r18,4(r2)
10001de8:	11000215 	stw	r4,8(r2)
10001dec:	89801a04 	addi	r6,r17,104
10001df0:	000b883a 	mov	r5,zero
10001df4:	0003bb00 	call	10003bb0 <memset>
10001df8:	8005883a 	mov	r2,r16
10001dfc:	dfc00317 	ldw	ra,12(sp)
10001e00:	dc800217 	ldw	r18,8(sp)
10001e04:	dc400117 	ldw	r17,4(sp)
10001e08:	dc000017 	ldw	r16,0(sp)
10001e0c:	dec00404 	addi	sp,sp,16
10001e10:	f800283a 	ret

10001e14 <__sfp>:
10001e14:	defffb04 	addi	sp,sp,-20
10001e18:	dc000015 	stw	r16,0(sp)
10001e1c:	04040074 	movhi	r16,4097
10001e20:	84114a04 	addi	r16,r16,17704
10001e24:	dcc00315 	stw	r19,12(sp)
10001e28:	2027883a 	mov	r19,r4
10001e2c:	81000017 	ldw	r4,0(r16)
10001e30:	dfc00415 	stw	ra,16(sp)
10001e34:	dc800215 	stw	r18,8(sp)
10001e38:	20800e17 	ldw	r2,56(r4)
10001e3c:	dc400115 	stw	r17,4(sp)
10001e40:	1000021e 	bne	r2,zero,10001e4c <__sfp+0x38>
10001e44:	0001bf80 	call	10001bf8 <__sinit.part.1>
10001e48:	81000017 	ldw	r4,0(r16)
10001e4c:	2480b804 	addi	r18,r4,736
10001e50:	047fffc4 	movi	r17,-1
10001e54:	91000117 	ldw	r4,4(r18)
10001e58:	94000217 	ldw	r16,8(r18)
10001e5c:	213fffc4 	addi	r4,r4,-1
10001e60:	20000a16 	blt	r4,zero,10001e8c <__sfp+0x78>
10001e64:	8080030f 	ldh	r2,12(r16)
10001e68:	10000c26 	beq	r2,zero,10001e9c <__sfp+0x88>
10001e6c:	80c01d04 	addi	r3,r16,116
10001e70:	00000206 	br	10001e7c <__sfp+0x68>
10001e74:	18bfe60f 	ldh	r2,-104(r3)
10001e78:	10000826 	beq	r2,zero,10001e9c <__sfp+0x88>
10001e7c:	213fffc4 	addi	r4,r4,-1
10001e80:	1c3ffd04 	addi	r16,r3,-12
10001e84:	18c01a04 	addi	r3,r3,104
10001e88:	247ffa1e 	bne	r4,r17,10001e74 <__alt_data_end+0xf8001e74>
10001e8c:	90800017 	ldw	r2,0(r18)
10001e90:	10001d26 	beq	r2,zero,10001f08 <__sfp+0xf4>
10001e94:	1025883a 	mov	r18,r2
10001e98:	003fee06 	br	10001e54 <__alt_data_end+0xf8001e54>
10001e9c:	00bfffc4 	movi	r2,-1
10001ea0:	8080038d 	sth	r2,14(r16)
10001ea4:	00800044 	movi	r2,1
10001ea8:	8080030d 	sth	r2,12(r16)
10001eac:	80001915 	stw	zero,100(r16)
10001eb0:	80000015 	stw	zero,0(r16)
10001eb4:	80000215 	stw	zero,8(r16)
10001eb8:	80000115 	stw	zero,4(r16)
10001ebc:	80000415 	stw	zero,16(r16)
10001ec0:	80000515 	stw	zero,20(r16)
10001ec4:	80000615 	stw	zero,24(r16)
10001ec8:	01800204 	movi	r6,8
10001ecc:	000b883a 	mov	r5,zero
10001ed0:	81001704 	addi	r4,r16,92
10001ed4:	0003bb00 	call	10003bb0 <memset>
10001ed8:	8005883a 	mov	r2,r16
10001edc:	80000c15 	stw	zero,48(r16)
10001ee0:	80000d15 	stw	zero,52(r16)
10001ee4:	80001115 	stw	zero,68(r16)
10001ee8:	80001215 	stw	zero,72(r16)
10001eec:	dfc00417 	ldw	ra,16(sp)
10001ef0:	dcc00317 	ldw	r19,12(sp)
10001ef4:	dc800217 	ldw	r18,8(sp)
10001ef8:	dc400117 	ldw	r17,4(sp)
10001efc:	dc000017 	ldw	r16,0(sp)
10001f00:	dec00504 	addi	sp,sp,20
10001f04:	f800283a 	ret
10001f08:	01400104 	movi	r5,4
10001f0c:	9809883a 	mov	r4,r19
10001f10:	0001d9c0 	call	10001d9c <__sfmoreglue>
10001f14:	90800015 	stw	r2,0(r18)
10001f18:	103fde1e 	bne	r2,zero,10001e94 <__alt_data_end+0xf8001e94>
10001f1c:	00800304 	movi	r2,12
10001f20:	98800015 	stw	r2,0(r19)
10001f24:	0005883a 	mov	r2,zero
10001f28:	003ff006 	br	10001eec <__alt_data_end+0xf8001eec>

10001f2c <_cleanup>:
10001f2c:	00840074 	movhi	r2,4097
10001f30:	10914a04 	addi	r2,r2,17704
10001f34:	11000017 	ldw	r4,0(r2)
10001f38:	01440034 	movhi	r5,4096
10001f3c:	29460e04 	addi	r5,r5,6200
10001f40:	0002ea41 	jmpi	10002ea4 <_fwalk_reent>

10001f44 <__sinit>:
10001f44:	20800e17 	ldw	r2,56(r4)
10001f48:	10000126 	beq	r2,zero,10001f50 <__sinit+0xc>
10001f4c:	f800283a 	ret
10001f50:	0001bf81 	jmpi	10001bf8 <__sinit.part.1>

10001f54 <__sfp_lock_acquire>:
10001f54:	f800283a 	ret

10001f58 <__sfp_lock_release>:
10001f58:	f800283a 	ret

10001f5c <__sinit_lock_acquire>:
10001f5c:	f800283a 	ret

10001f60 <__sinit_lock_release>:
10001f60:	f800283a 	ret

10001f64 <__fp_lock_all>:
10001f64:	00840074 	movhi	r2,4097
10001f68:	10914b04 	addi	r2,r2,17708
10001f6c:	11000017 	ldw	r4,0(r2)
10001f70:	01440034 	movhi	r5,4096
10001f74:	29476504 	addi	r5,r5,7572
10001f78:	0002de01 	jmpi	10002de0 <_fwalk>

10001f7c <__fp_unlock_all>:
10001f7c:	00840074 	movhi	r2,4097
10001f80:	10914b04 	addi	r2,r2,17708
10001f84:	11000017 	ldw	r4,0(r2)
10001f88:	01440034 	movhi	r5,4096
10001f8c:	2946f904 	addi	r5,r5,7140
10001f90:	0002de01 	jmpi	10002de0 <_fwalk>

10001f94 <_fiprintf_r>:
10001f94:	defffe04 	addi	sp,sp,-8
10001f98:	dfc00015 	stw	ra,0(sp)
10001f9c:	d9c00115 	stw	r7,4(sp)
10001fa0:	d9c00104 	addi	r7,sp,4
10001fa4:	000482c0 	call	1000482c <_vfiprintf_r>
10001fa8:	dfc00017 	ldw	ra,0(sp)
10001fac:	dec00204 	addi	sp,sp,8
10001fb0:	f800283a 	ret

10001fb4 <fiprintf>:
10001fb4:	defffd04 	addi	sp,sp,-12
10001fb8:	2005883a 	mov	r2,r4
10001fbc:	dfc00015 	stw	ra,0(sp)
10001fc0:	d9800115 	stw	r6,4(sp)
10001fc4:	d9c00215 	stw	r7,8(sp)
10001fc8:	00c40074 	movhi	r3,4097
10001fcc:	18d14b04 	addi	r3,r3,17708
10001fd0:	19000017 	ldw	r4,0(r3)
10001fd4:	280d883a 	mov	r6,r5
10001fd8:	d9c00104 	addi	r7,sp,4
10001fdc:	100b883a 	mov	r5,r2
10001fe0:	000482c0 	call	1000482c <_vfiprintf_r>
10001fe4:	dfc00017 	ldw	ra,0(sp)
10001fe8:	dec00304 	addi	sp,sp,12
10001fec:	f800283a 	ret

10001ff0 <_fopen_r>:
10001ff0:	defffa04 	addi	sp,sp,-24
10001ff4:	3005883a 	mov	r2,r6
10001ff8:	dcc00415 	stw	r19,16(sp)
10001ffc:	d80d883a 	mov	r6,sp
10002000:	2827883a 	mov	r19,r5
10002004:	100b883a 	mov	r5,r2
10002008:	dc800315 	stw	r18,12(sp)
1000200c:	dfc00515 	stw	ra,20(sp)
10002010:	dc400215 	stw	r17,8(sp)
10002014:	dc000115 	stw	r16,4(sp)
10002018:	2025883a 	mov	r18,r4
1000201c:	00088480 	call	10008848 <__sflags>
10002020:	10002726 	beq	r2,zero,100020c0 <_fopen_r+0xd0>
10002024:	9009883a 	mov	r4,r18
10002028:	1023883a 	mov	r17,r2
1000202c:	0001e140 	call	10001e14 <__sfp>
10002030:	1021883a 	mov	r16,r2
10002034:	10002226 	beq	r2,zero,100020c0 <_fopen_r+0xd0>
10002038:	d9800017 	ldw	r6,0(sp)
1000203c:	01c06d84 	movi	r7,438
10002040:	980b883a 	mov	r5,r19
10002044:	9009883a 	mov	r4,r18
10002048:	0003cd80 	call	10003cd8 <_open_r>
1000204c:	10001916 	blt	r2,zero,100020b4 <_fopen_r+0xc4>
10002050:	8080038d 	sth	r2,14(r16)
10002054:	00840034 	movhi	r2,4096
10002058:	10919604 	addi	r2,r2,18008
1000205c:	80800815 	stw	r2,32(r16)
10002060:	00840034 	movhi	r2,4096
10002064:	1091ad04 	addi	r2,r2,18100
10002068:	80800915 	stw	r2,36(r16)
1000206c:	00840034 	movhi	r2,4096
10002070:	1091cc04 	addi	r2,r2,18224
10002074:	80800a15 	stw	r2,40(r16)
10002078:	00840034 	movhi	r2,4096
1000207c:	1091e304 	addi	r2,r2,18316
10002080:	8440030d 	sth	r17,12(r16)
10002084:	84000715 	stw	r16,28(r16)
10002088:	80800b15 	stw	r2,44(r16)
1000208c:	8c40400c 	andi	r17,r17,256
10002090:	88000d1e 	bne	r17,zero,100020c8 <_fopen_r+0xd8>
10002094:	8005883a 	mov	r2,r16
10002098:	dfc00517 	ldw	ra,20(sp)
1000209c:	dcc00417 	ldw	r19,16(sp)
100020a0:	dc800317 	ldw	r18,12(sp)
100020a4:	dc400217 	ldw	r17,8(sp)
100020a8:	dc000117 	ldw	r16,4(sp)
100020ac:	dec00604 	addi	sp,sp,24
100020b0:	f800283a 	ret
100020b4:	0001f540 	call	10001f54 <__sfp_lock_acquire>
100020b8:	8000030d 	sth	zero,12(r16)
100020bc:	0001f580 	call	10001f58 <__sfp_lock_release>
100020c0:	0005883a 	mov	r2,zero
100020c4:	003ff406 	br	10002098 <__alt_data_end+0xf8002098>
100020c8:	01c00084 	movi	r7,2
100020cc:	000d883a 	mov	r6,zero
100020d0:	800b883a 	mov	r5,r16
100020d4:	9009883a 	mov	r4,r18
100020d8:	00027ec0 	call	100027ec <_fseek_r>
100020dc:	8005883a 	mov	r2,r16
100020e0:	003fed06 	br	10002098 <__alt_data_end+0xf8002098>

100020e4 <fopen>:
100020e4:	00840074 	movhi	r2,4097
100020e8:	10914b04 	addi	r2,r2,17708
100020ec:	280d883a 	mov	r6,r5
100020f0:	200b883a 	mov	r5,r4
100020f4:	11000017 	ldw	r4,0(r2)
100020f8:	0001ff01 	jmpi	10001ff0 <_fopen_r>

100020fc <_fprintf_r>:
100020fc:	defffe04 	addi	sp,sp,-8
10002100:	2809883a 	mov	r4,r5
10002104:	300b883a 	mov	r5,r6
10002108:	dfc00015 	stw	ra,0(sp)
1000210c:	d9c00115 	stw	r7,4(sp)
10002110:	d9800104 	addi	r6,sp,4
10002114:	0006b200 	call	10006b20 <__vfprintf_internal>
10002118:	dfc00017 	ldw	ra,0(sp)
1000211c:	dec00204 	addi	sp,sp,8
10002120:	f800283a 	ret

10002124 <fprintf>:
10002124:	defffd04 	addi	sp,sp,-12
10002128:	dfc00015 	stw	ra,0(sp)
1000212c:	d9800115 	stw	r6,4(sp)
10002130:	d9c00215 	stw	r7,8(sp)
10002134:	d9800104 	addi	r6,sp,4
10002138:	0006b200 	call	10006b20 <__vfprintf_internal>
1000213c:	dfc00017 	ldw	ra,0(sp)
10002140:	dec00304 	addi	sp,sp,12
10002144:	f800283a 	ret

10002148 <_fread_r>:
10002148:	defff404 	addi	sp,sp,-48
1000214c:	dd000615 	stw	r20,24(sp)
10002150:	dcc00515 	stw	r19,20(sp)
10002154:	2029883a 	mov	r20,r4
10002158:	2827883a 	mov	r19,r5
1000215c:	3809883a 	mov	r4,r7
10002160:	300b883a 	mov	r5,r6
10002164:	ddc00915 	stw	r23,36(sp)
10002168:	dd400715 	stw	r21,28(sp)
1000216c:	dc000215 	stw	r16,8(sp)
10002170:	dfc00b15 	stw	ra,44(sp)
10002174:	df000a15 	stw	fp,40(sp)
10002178:	dd800815 	stw	r22,32(sp)
1000217c:	dc800415 	stw	r18,16(sp)
10002180:	dc400315 	stw	r17,12(sp)
10002184:	302f883a 	mov	r23,r6
10002188:	382b883a 	mov	r21,r7
1000218c:	000175c0 	call	1000175c <__mulsi3>
10002190:	dc000c17 	ldw	r16,48(sp)
10002194:	10003826 	beq	r2,zero,10002278 <_fread_r+0x130>
10002198:	102d883a 	mov	r22,r2
1000219c:	a0000226 	beq	r20,zero,100021a8 <_fread_r+0x60>
100021a0:	a0800e17 	ldw	r2,56(r20)
100021a4:	10006e26 	beq	r2,zero,10002360 <_fread_r+0x218>
100021a8:	8080030b 	ldhu	r2,12(r16)
100021ac:	10c8000c 	andi	r3,r2,8192
100021b0:	1800061e 	bne	r3,zero,100021cc <_fread_r+0x84>
100021b4:	81001917 	ldw	r4,100(r16)
100021b8:	00f7ffc4 	movi	r3,-8193
100021bc:	10880014 	ori	r2,r2,8192
100021c0:	20c6703a 	and	r3,r4,r3
100021c4:	8080030d 	sth	r2,12(r16)
100021c8:	80c01915 	stw	r3,100(r16)
100021cc:	84400117 	ldw	r17,4(r16)
100021d0:	88005f16 	blt	r17,zero,10002350 <_fread_r+0x208>
100021d4:	8809883a 	mov	r4,r17
100021d8:	1080008c 	andi	r2,r2,2
100021dc:	1000281e 	bne	r2,zero,10002280 <_fread_r+0x138>
100021e0:	b025883a 	mov	r18,r22
100021e4:	00000b06 	br	10002214 <_fread_r+0xcc>
100021e8:	0003a680 	call	10003a68 <memcpy>
100021ec:	80800017 	ldw	r2,0(r16)
100021f0:	9c67883a 	add	r19,r19,r17
100021f4:	9465c83a 	sub	r18,r18,r17
100021f8:	1463883a 	add	r17,r2,r17
100021fc:	800b883a 	mov	r5,r16
10002200:	a009883a 	mov	r4,r20
10002204:	84400015 	stw	r17,0(r16)
10002208:	00044300 	call	10004430 <__srefill_r>
1000220c:	10004c1e 	bne	r2,zero,10002340 <_fread_r+0x1f8>
10002210:	84400117 	ldw	r17,4(r16)
10002214:	880d883a 	mov	r6,r17
10002218:	9809883a 	mov	r4,r19
1000221c:	81400017 	ldw	r5,0(r16)
10002220:	8cbff136 	bltu	r17,r18,100021e8 <__alt_data_end+0xf80021e8>
10002224:	900d883a 	mov	r6,r18
10002228:	0003a680 	call	10003a68 <memcpy>
1000222c:	80c00117 	ldw	r3,4(r16)
10002230:	81000017 	ldw	r4,0(r16)
10002234:	a805883a 	mov	r2,r21
10002238:	1c87c83a 	sub	r3,r3,r18
1000223c:	24a5883a 	add	r18,r4,r18
10002240:	80c00115 	stw	r3,4(r16)
10002244:	84800015 	stw	r18,0(r16)
10002248:	dfc00b17 	ldw	ra,44(sp)
1000224c:	df000a17 	ldw	fp,40(sp)
10002250:	ddc00917 	ldw	r23,36(sp)
10002254:	dd800817 	ldw	r22,32(sp)
10002258:	dd400717 	ldw	r21,28(sp)
1000225c:	dd000617 	ldw	r20,24(sp)
10002260:	dcc00517 	ldw	r19,20(sp)
10002264:	dc800417 	ldw	r18,16(sp)
10002268:	dc400317 	ldw	r17,12(sp)
1000226c:	dc000217 	ldw	r16,8(sp)
10002270:	dec00c04 	addi	sp,sp,48
10002274:	f800283a 	ret
10002278:	0005883a 	mov	r2,zero
1000227c:	003ff206 	br	10002248 <__alt_data_end+0xf8002248>
10002280:	b007883a 	mov	r3,r22
10002284:	2580012e 	bgeu	r4,r22,1000228c <_fread_r+0x144>
10002288:	2007883a 	mov	r3,r4
1000228c:	81400017 	ldw	r5,0(r16)
10002290:	180d883a 	mov	r6,r3
10002294:	9809883a 	mov	r4,r19
10002298:	d8c00115 	stw	r3,4(sp)
1000229c:	0003a680 	call	10003a68 <memcpy>
100022a0:	d8c00117 	ldw	r3,4(sp)
100022a4:	84400017 	ldw	r17,0(r16)
100022a8:	80800117 	ldw	r2,4(r16)
100022ac:	81400c17 	ldw	r5,48(r16)
100022b0:	88e3883a 	add	r17,r17,r3
100022b4:	10c5c83a 	sub	r2,r2,r3
100022b8:	84400015 	stw	r17,0(r16)
100022bc:	80800115 	stw	r2,4(r16)
100022c0:	b0e5c83a 	sub	r18,r22,r3
100022c4:	28002c26 	beq	r5,zero,10002378 <_fread_r+0x230>
100022c8:	90002c26 	beq	r18,zero,1000237c <_fread_r+0x234>
100022cc:	80801004 	addi	r2,r16,64
100022d0:	28800526 	beq	r5,r2,100022e8 <_fread_r+0x1a0>
100022d4:	a009883a 	mov	r4,r20
100022d8:	d8c00115 	stw	r3,4(sp)
100022dc:	00024dc0 	call	100024dc <_free_r>
100022e0:	d8c00117 	ldw	r3,4(sp)
100022e4:	84400017 	ldw	r17,0(r16)
100022e8:	80000c15 	stw	zero,48(r16)
100022ec:	80800517 	ldw	r2,20(r16)
100022f0:	87000417 	ldw	fp,16(r16)
100022f4:	98e7883a 	add	r19,r19,r3
100022f8:	d8800015 	stw	r2,0(sp)
100022fc:	00000106 	br	10002304 <_fread_r+0x1bc>
10002300:	90001e26 	beq	r18,zero,1000237c <_fread_r+0x234>
10002304:	84c00415 	stw	r19,16(r16)
10002308:	84800515 	stw	r18,20(r16)
1000230c:	84c00015 	stw	r19,0(r16)
10002310:	a009883a 	mov	r4,r20
10002314:	800b883a 	mov	r5,r16
10002318:	00044300 	call	10004430 <__srefill_r>
1000231c:	d9000017 	ldw	r4,0(sp)
10002320:	80c00117 	ldw	r3,4(r16)
10002324:	87000415 	stw	fp,16(r16)
10002328:	81000515 	stw	r4,20(r16)
1000232c:	84400015 	stw	r17,0(r16)
10002330:	80000115 	stw	zero,4(r16)
10002334:	90e5c83a 	sub	r18,r18,r3
10002338:	98e7883a 	add	r19,r19,r3
1000233c:	103ff026 	beq	r2,zero,10002300 <__alt_data_end+0xf8002300>
10002340:	b80b883a 	mov	r5,r23
10002344:	b489c83a 	sub	r4,r22,r18
10002348:	00016a00 	call	100016a0 <__udivsi3>
1000234c:	003fbe06 	br	10002248 <__alt_data_end+0xf8002248>
10002350:	80000115 	stw	zero,4(r16)
10002354:	0009883a 	mov	r4,zero
10002358:	0023883a 	mov	r17,zero
1000235c:	003f9e06 	br	100021d8 <__alt_data_end+0xf80021d8>
10002360:	a009883a 	mov	r4,r20
10002364:	0001f440 	call	10001f44 <__sinit>
10002368:	8080030b 	ldhu	r2,12(r16)
1000236c:	10c8000c 	andi	r3,r2,8192
10002370:	183f961e 	bne	r3,zero,100021cc <__alt_data_end+0xf80021cc>
10002374:	003f8f06 	br	100021b4 <__alt_data_end+0xf80021b4>
10002378:	903fdc1e 	bne	r18,zero,100022ec <__alt_data_end+0xf80022ec>
1000237c:	a805883a 	mov	r2,r21
10002380:	003fb106 	br	10002248 <__alt_data_end+0xf8002248>

10002384 <fread>:
10002384:	defffe04 	addi	sp,sp,-8
10002388:	00840074 	movhi	r2,4097
1000238c:	d9c00015 	stw	r7,0(sp)
10002390:	10914b04 	addi	r2,r2,17708
10002394:	300f883a 	mov	r7,r6
10002398:	280d883a 	mov	r6,r5
1000239c:	200b883a 	mov	r5,r4
100023a0:	11000017 	ldw	r4,0(r2)
100023a4:	dfc00115 	stw	ra,4(sp)
100023a8:	00021480 	call	10002148 <_fread_r>
100023ac:	dfc00117 	ldw	ra,4(sp)
100023b0:	dec00204 	addi	sp,sp,8
100023b4:	f800283a 	ret

100023b8 <_malloc_trim_r>:
100023b8:	defffb04 	addi	sp,sp,-20
100023bc:	dcc00315 	stw	r19,12(sp)
100023c0:	04c40074 	movhi	r19,4097
100023c4:	dc800215 	stw	r18,8(sp)
100023c8:	dc400115 	stw	r17,4(sp)
100023cc:	dc000015 	stw	r16,0(sp)
100023d0:	dfc00415 	stw	ra,16(sp)
100023d4:	2821883a 	mov	r16,r5
100023d8:	9ccb9704 	addi	r19,r19,11868
100023dc:	2025883a 	mov	r18,r4
100023e0:	001013c0 	call	1001013c <__malloc_lock>
100023e4:	98800217 	ldw	r2,8(r19)
100023e8:	14400117 	ldw	r17,4(r2)
100023ec:	00bfff04 	movi	r2,-4
100023f0:	88a2703a 	and	r17,r17,r2
100023f4:	8c21c83a 	sub	r16,r17,r16
100023f8:	8403fbc4 	addi	r16,r16,4079
100023fc:	8020d33a 	srli	r16,r16,12
10002400:	0083ffc4 	movi	r2,4095
10002404:	843fffc4 	addi	r16,r16,-1
10002408:	8020933a 	slli	r16,r16,12
1000240c:	1400060e 	bge	r2,r16,10002428 <_malloc_trim_r+0x70>
10002410:	000b883a 	mov	r5,zero
10002414:	9009883a 	mov	r4,r18
10002418:	00046040 	call	10004604 <_sbrk_r>
1000241c:	98c00217 	ldw	r3,8(r19)
10002420:	1c47883a 	add	r3,r3,r17
10002424:	10c00a26 	beq	r2,r3,10002450 <_malloc_trim_r+0x98>
10002428:	9009883a 	mov	r4,r18
1000242c:	00101600 	call	10010160 <__malloc_unlock>
10002430:	0005883a 	mov	r2,zero
10002434:	dfc00417 	ldw	ra,16(sp)
10002438:	dcc00317 	ldw	r19,12(sp)
1000243c:	dc800217 	ldw	r18,8(sp)
10002440:	dc400117 	ldw	r17,4(sp)
10002444:	dc000017 	ldw	r16,0(sp)
10002448:	dec00504 	addi	sp,sp,20
1000244c:	f800283a 	ret
10002450:	040bc83a 	sub	r5,zero,r16
10002454:	9009883a 	mov	r4,r18
10002458:	00046040 	call	10004604 <_sbrk_r>
1000245c:	00ffffc4 	movi	r3,-1
10002460:	10c00d26 	beq	r2,r3,10002498 <_malloc_trim_r+0xe0>
10002464:	00c40074 	movhi	r3,4097
10002468:	18d88204 	addi	r3,r3,25096
1000246c:	18800017 	ldw	r2,0(r3)
10002470:	99000217 	ldw	r4,8(r19)
10002474:	8c23c83a 	sub	r17,r17,r16
10002478:	8c400054 	ori	r17,r17,1
1000247c:	1421c83a 	sub	r16,r2,r16
10002480:	24400115 	stw	r17,4(r4)
10002484:	9009883a 	mov	r4,r18
10002488:	1c000015 	stw	r16,0(r3)
1000248c:	00101600 	call	10010160 <__malloc_unlock>
10002490:	00800044 	movi	r2,1
10002494:	003fe706 	br	10002434 <__alt_data_end+0xf8002434>
10002498:	000b883a 	mov	r5,zero
1000249c:	9009883a 	mov	r4,r18
100024a0:	00046040 	call	10004604 <_sbrk_r>
100024a4:	99000217 	ldw	r4,8(r19)
100024a8:	014003c4 	movi	r5,15
100024ac:	1107c83a 	sub	r3,r2,r4
100024b0:	28ffdd0e 	bge	r5,r3,10002428 <__alt_data_end+0xf8002428>
100024b4:	01440074 	movhi	r5,4097
100024b8:	29514c04 	addi	r5,r5,17712
100024bc:	29400017 	ldw	r5,0(r5)
100024c0:	18c00054 	ori	r3,r3,1
100024c4:	20c00115 	stw	r3,4(r4)
100024c8:	00c40074 	movhi	r3,4097
100024cc:	1145c83a 	sub	r2,r2,r5
100024d0:	18d88204 	addi	r3,r3,25096
100024d4:	18800015 	stw	r2,0(r3)
100024d8:	003fd306 	br	10002428 <__alt_data_end+0xf8002428>

100024dc <_free_r>:
100024dc:	28004126 	beq	r5,zero,100025e4 <_free_r+0x108>
100024e0:	defffd04 	addi	sp,sp,-12
100024e4:	dc400115 	stw	r17,4(sp)
100024e8:	dc000015 	stw	r16,0(sp)
100024ec:	2023883a 	mov	r17,r4
100024f0:	2821883a 	mov	r16,r5
100024f4:	dfc00215 	stw	ra,8(sp)
100024f8:	001013c0 	call	1001013c <__malloc_lock>
100024fc:	81ffff17 	ldw	r7,-4(r16)
10002500:	00bfff84 	movi	r2,-2
10002504:	01040074 	movhi	r4,4097
10002508:	81bffe04 	addi	r6,r16,-8
1000250c:	3884703a 	and	r2,r7,r2
10002510:	210b9704 	addi	r4,r4,11868
10002514:	308b883a 	add	r5,r6,r2
10002518:	2a400117 	ldw	r9,4(r5)
1000251c:	22000217 	ldw	r8,8(r4)
10002520:	00ffff04 	movi	r3,-4
10002524:	48c6703a 	and	r3,r9,r3
10002528:	2a005726 	beq	r5,r8,10002688 <_free_r+0x1ac>
1000252c:	28c00115 	stw	r3,4(r5)
10002530:	39c0004c 	andi	r7,r7,1
10002534:	3800091e 	bne	r7,zero,1000255c <_free_r+0x80>
10002538:	823ffe17 	ldw	r8,-8(r16)
1000253c:	22400204 	addi	r9,r4,8
10002540:	320dc83a 	sub	r6,r6,r8
10002544:	31c00217 	ldw	r7,8(r6)
10002548:	1205883a 	add	r2,r2,r8
1000254c:	3a406526 	beq	r7,r9,100026e4 <_free_r+0x208>
10002550:	32000317 	ldw	r8,12(r6)
10002554:	3a000315 	stw	r8,12(r7)
10002558:	41c00215 	stw	r7,8(r8)
1000255c:	28cf883a 	add	r7,r5,r3
10002560:	39c00117 	ldw	r7,4(r7)
10002564:	39c0004c 	andi	r7,r7,1
10002568:	38003a26 	beq	r7,zero,10002654 <_free_r+0x178>
1000256c:	10c00054 	ori	r3,r2,1
10002570:	30c00115 	stw	r3,4(r6)
10002574:	3087883a 	add	r3,r6,r2
10002578:	18800015 	stw	r2,0(r3)
1000257c:	00c07fc4 	movi	r3,511
10002580:	18801936 	bltu	r3,r2,100025e8 <_free_r+0x10c>
10002584:	1004d0fa 	srli	r2,r2,3
10002588:	01c00044 	movi	r7,1
1000258c:	21400117 	ldw	r5,4(r4)
10002590:	10c00044 	addi	r3,r2,1
10002594:	18c7883a 	add	r3,r3,r3
10002598:	1005d0ba 	srai	r2,r2,2
1000259c:	18c7883a 	add	r3,r3,r3
100025a0:	18c7883a 	add	r3,r3,r3
100025a4:	1907883a 	add	r3,r3,r4
100025a8:	3884983a 	sll	r2,r7,r2
100025ac:	19c00017 	ldw	r7,0(r3)
100025b0:	1a3ffe04 	addi	r8,r3,-8
100025b4:	1144b03a 	or	r2,r2,r5
100025b8:	32000315 	stw	r8,12(r6)
100025bc:	31c00215 	stw	r7,8(r6)
100025c0:	20800115 	stw	r2,4(r4)
100025c4:	19800015 	stw	r6,0(r3)
100025c8:	39800315 	stw	r6,12(r7)
100025cc:	8809883a 	mov	r4,r17
100025d0:	dfc00217 	ldw	ra,8(sp)
100025d4:	dc400117 	ldw	r17,4(sp)
100025d8:	dc000017 	ldw	r16,0(sp)
100025dc:	dec00304 	addi	sp,sp,12
100025e0:	00101601 	jmpi	10010160 <__malloc_unlock>
100025e4:	f800283a 	ret
100025e8:	100ad27a 	srli	r5,r2,9
100025ec:	00c00104 	movi	r3,4
100025f0:	19404a36 	bltu	r3,r5,1000271c <_free_r+0x240>
100025f4:	100ad1ba 	srli	r5,r2,6
100025f8:	28c00e44 	addi	r3,r5,57
100025fc:	18c7883a 	add	r3,r3,r3
10002600:	29400e04 	addi	r5,r5,56
10002604:	18c7883a 	add	r3,r3,r3
10002608:	18c7883a 	add	r3,r3,r3
1000260c:	1909883a 	add	r4,r3,r4
10002610:	20c00017 	ldw	r3,0(r4)
10002614:	01c40074 	movhi	r7,4097
10002618:	213ffe04 	addi	r4,r4,-8
1000261c:	39cb9704 	addi	r7,r7,11868
10002620:	20c04426 	beq	r4,r3,10002734 <_free_r+0x258>
10002624:	01ffff04 	movi	r7,-4
10002628:	19400117 	ldw	r5,4(r3)
1000262c:	29ca703a 	and	r5,r5,r7
10002630:	1140022e 	bgeu	r2,r5,1000263c <_free_r+0x160>
10002634:	18c00217 	ldw	r3,8(r3)
10002638:	20fffb1e 	bne	r4,r3,10002628 <__alt_data_end+0xf8002628>
1000263c:	19000317 	ldw	r4,12(r3)
10002640:	31000315 	stw	r4,12(r6)
10002644:	30c00215 	stw	r3,8(r6)
10002648:	21800215 	stw	r6,8(r4)
1000264c:	19800315 	stw	r6,12(r3)
10002650:	003fde06 	br	100025cc <__alt_data_end+0xf80025cc>
10002654:	29c00217 	ldw	r7,8(r5)
10002658:	10c5883a 	add	r2,r2,r3
1000265c:	00c40074 	movhi	r3,4097
10002660:	18cb9904 	addi	r3,r3,11876
10002664:	38c03b26 	beq	r7,r3,10002754 <_free_r+0x278>
10002668:	2a000317 	ldw	r8,12(r5)
1000266c:	11400054 	ori	r5,r2,1
10002670:	3087883a 	add	r3,r6,r2
10002674:	3a000315 	stw	r8,12(r7)
10002678:	41c00215 	stw	r7,8(r8)
1000267c:	31400115 	stw	r5,4(r6)
10002680:	18800015 	stw	r2,0(r3)
10002684:	003fbd06 	br	1000257c <__alt_data_end+0xf800257c>
10002688:	39c0004c 	andi	r7,r7,1
1000268c:	10c5883a 	add	r2,r2,r3
10002690:	3800071e 	bne	r7,zero,100026b0 <_free_r+0x1d4>
10002694:	81fffe17 	ldw	r7,-8(r16)
10002698:	31cdc83a 	sub	r6,r6,r7
1000269c:	30c00317 	ldw	r3,12(r6)
100026a0:	31400217 	ldw	r5,8(r6)
100026a4:	11c5883a 	add	r2,r2,r7
100026a8:	28c00315 	stw	r3,12(r5)
100026ac:	19400215 	stw	r5,8(r3)
100026b0:	10c00054 	ori	r3,r2,1
100026b4:	30c00115 	stw	r3,4(r6)
100026b8:	00c40074 	movhi	r3,4097
100026bc:	18d14d04 	addi	r3,r3,17716
100026c0:	18c00017 	ldw	r3,0(r3)
100026c4:	21800215 	stw	r6,8(r4)
100026c8:	10ffc036 	bltu	r2,r3,100025cc <__alt_data_end+0xf80025cc>
100026cc:	00840074 	movhi	r2,4097
100026d0:	10987704 	addi	r2,r2,25052
100026d4:	11400017 	ldw	r5,0(r2)
100026d8:	8809883a 	mov	r4,r17
100026dc:	00023b80 	call	100023b8 <_malloc_trim_r>
100026e0:	003fba06 	br	100025cc <__alt_data_end+0xf80025cc>
100026e4:	28c9883a 	add	r4,r5,r3
100026e8:	21000117 	ldw	r4,4(r4)
100026ec:	2100004c 	andi	r4,r4,1
100026f0:	2000391e 	bne	r4,zero,100027d8 <_free_r+0x2fc>
100026f4:	29c00217 	ldw	r7,8(r5)
100026f8:	29000317 	ldw	r4,12(r5)
100026fc:	1885883a 	add	r2,r3,r2
10002700:	10c00054 	ori	r3,r2,1
10002704:	39000315 	stw	r4,12(r7)
10002708:	21c00215 	stw	r7,8(r4)
1000270c:	30c00115 	stw	r3,4(r6)
10002710:	308d883a 	add	r6,r6,r2
10002714:	30800015 	stw	r2,0(r6)
10002718:	003fac06 	br	100025cc <__alt_data_end+0xf80025cc>
1000271c:	00c00504 	movi	r3,20
10002720:	19401536 	bltu	r3,r5,10002778 <_free_r+0x29c>
10002724:	28c01704 	addi	r3,r5,92
10002728:	18c7883a 	add	r3,r3,r3
1000272c:	294016c4 	addi	r5,r5,91
10002730:	003fb406 	br	10002604 <__alt_data_end+0xf8002604>
10002734:	280bd0ba 	srai	r5,r5,2
10002738:	00c00044 	movi	r3,1
1000273c:	38800117 	ldw	r2,4(r7)
10002740:	194a983a 	sll	r5,r3,r5
10002744:	2007883a 	mov	r3,r4
10002748:	2884b03a 	or	r2,r5,r2
1000274c:	38800115 	stw	r2,4(r7)
10002750:	003fbb06 	br	10002640 <__alt_data_end+0xf8002640>
10002754:	21800515 	stw	r6,20(r4)
10002758:	21800415 	stw	r6,16(r4)
1000275c:	10c00054 	ori	r3,r2,1
10002760:	31c00315 	stw	r7,12(r6)
10002764:	31c00215 	stw	r7,8(r6)
10002768:	30c00115 	stw	r3,4(r6)
1000276c:	308d883a 	add	r6,r6,r2
10002770:	30800015 	stw	r2,0(r6)
10002774:	003f9506 	br	100025cc <__alt_data_end+0xf80025cc>
10002778:	00c01504 	movi	r3,84
1000277c:	19400536 	bltu	r3,r5,10002794 <_free_r+0x2b8>
10002780:	100ad33a 	srli	r5,r2,12
10002784:	28c01bc4 	addi	r3,r5,111
10002788:	18c7883a 	add	r3,r3,r3
1000278c:	29401b84 	addi	r5,r5,110
10002790:	003f9c06 	br	10002604 <__alt_data_end+0xf8002604>
10002794:	00c05504 	movi	r3,340
10002798:	19400536 	bltu	r3,r5,100027b0 <_free_r+0x2d4>
1000279c:	100ad3fa 	srli	r5,r2,15
100027a0:	28c01e04 	addi	r3,r5,120
100027a4:	18c7883a 	add	r3,r3,r3
100027a8:	29401dc4 	addi	r5,r5,119
100027ac:	003f9506 	br	10002604 <__alt_data_end+0xf8002604>
100027b0:	00c15504 	movi	r3,1364
100027b4:	19400536 	bltu	r3,r5,100027cc <_free_r+0x2f0>
100027b8:	100ad4ba 	srli	r5,r2,18
100027bc:	28c01f44 	addi	r3,r5,125
100027c0:	18c7883a 	add	r3,r3,r3
100027c4:	29401f04 	addi	r5,r5,124
100027c8:	003f8e06 	br	10002604 <__alt_data_end+0xf8002604>
100027cc:	00c03f84 	movi	r3,254
100027d0:	01401f84 	movi	r5,126
100027d4:	003f8b06 	br	10002604 <__alt_data_end+0xf8002604>
100027d8:	10c00054 	ori	r3,r2,1
100027dc:	30c00115 	stw	r3,4(r6)
100027e0:	308d883a 	add	r6,r6,r2
100027e4:	30800015 	stw	r2,0(r6)
100027e8:	003f7806 	br	100025cc <__alt_data_end+0xf80025cc>

100027ec <_fseek_r>:
100027ec:	000280c1 	jmpi	1000280c <_fseeko_r>

100027f0 <fseek>:
100027f0:	00840074 	movhi	r2,4097
100027f4:	10914b04 	addi	r2,r2,17708
100027f8:	300f883a 	mov	r7,r6
100027fc:	280d883a 	mov	r6,r5
10002800:	200b883a 	mov	r5,r4
10002804:	11000017 	ldw	r4,0(r2)
10002808:	000280c1 	jmpi	1000280c <_fseeko_r>

1000280c <_fseeko_r>:
1000280c:	deffe804 	addi	sp,sp,-96
10002810:	dd401415 	stw	r21,80(sp)
10002814:	dc801115 	stw	r18,68(sp)
10002818:	dc401015 	stw	r17,64(sp)
1000281c:	dc000f15 	stw	r16,60(sp)
10002820:	dfc01715 	stw	ra,92(sp)
10002824:	ddc01615 	stw	r23,88(sp)
10002828:	dd801515 	stw	r22,84(sp)
1000282c:	dd001315 	stw	r20,76(sp)
10002830:	dcc01215 	stw	r19,72(sp)
10002834:	2023883a 	mov	r17,r4
10002838:	2821883a 	mov	r16,r5
1000283c:	302b883a 	mov	r21,r6
10002840:	3825883a 	mov	r18,r7
10002844:	20000226 	beq	r4,zero,10002850 <_fseeko_r+0x44>
10002848:	20800e17 	ldw	r2,56(r4)
1000284c:	10005a26 	beq	r2,zero,100029b8 <_fseeko_r+0x1ac>
10002850:	8080030b 	ldhu	r2,12(r16)
10002854:	00c04204 	movi	r3,264
10002858:	1080420c 	andi	r2,r2,264
1000285c:	10c05b26 	beq	r2,r3,100029cc <_fseeko_r+0x1c0>
10002860:	85000a17 	ldw	r20,40(r16)
10002864:	a000f626 	beq	r20,zero,10002c40 <_fseeko_r+0x434>
10002868:	00800044 	movi	r2,1
1000286c:	90803e26 	beq	r18,r2,10002968 <_fseeko_r+0x15c>
10002870:	00800084 	movi	r2,2
10002874:	90801026 	beq	r18,r2,100028b8 <_fseeko_r+0xac>
10002878:	90000f26 	beq	r18,zero,100028b8 <_fseeko_r+0xac>
1000287c:	00800584 	movi	r2,22
10002880:	88800015 	stw	r2,0(r17)
10002884:	04ffffc4 	movi	r19,-1
10002888:	9805883a 	mov	r2,r19
1000288c:	dfc01717 	ldw	ra,92(sp)
10002890:	ddc01617 	ldw	r23,88(sp)
10002894:	dd801517 	ldw	r22,84(sp)
10002898:	dd401417 	ldw	r21,80(sp)
1000289c:	dd001317 	ldw	r20,76(sp)
100028a0:	dcc01217 	ldw	r19,72(sp)
100028a4:	dc801117 	ldw	r18,68(sp)
100028a8:	dc401017 	ldw	r17,64(sp)
100028ac:	dc000f17 	ldw	r16,60(sp)
100028b0:	dec01804 	addi	sp,sp,96
100028b4:	f800283a 	ret
100028b8:	80800417 	ldw	r2,16(r16)
100028bc:	002f883a 	mov	r23,zero
100028c0:	0027883a 	mov	r19,zero
100028c4:	1000cb26 	beq	r2,zero,10002bf4 <_fseeko_r+0x3e8>
100028c8:	8080030b 	ldhu	r2,12(r16)
100028cc:	10c2068c 	andi	r3,r2,2074
100028d0:	1800071e 	bne	r3,zero,100028f0 <_fseeko_r+0xe4>
100028d4:	10c1000c 	andi	r3,r2,1024
100028d8:	1800451e 	bne	r3,zero,100029f0 <_fseeko_r+0x1e4>
100028dc:	00c40034 	movhi	r3,4096
100028e0:	18d1cc04 	addi	r3,r3,18224
100028e4:	a0c0b726 	beq	r20,r3,10002bc4 <_fseeko_r+0x3b8>
100028e8:	10820014 	ori	r2,r2,2048
100028ec:	8080030d 	sth	r2,12(r16)
100028f0:	800b883a 	mov	r5,r16
100028f4:	8809883a 	mov	r4,r17
100028f8:	0001b580 	call	10001b58 <_fflush_r>
100028fc:	1027883a 	mov	r19,r2
10002900:	103fe01e 	bne	r2,zero,10002884 <__alt_data_end+0xf8002884>
10002904:	81400717 	ldw	r5,28(r16)
10002908:	900f883a 	mov	r7,r18
1000290c:	a80d883a 	mov	r6,r21
10002910:	8809883a 	mov	r4,r17
10002914:	a03ee83a 	callr	r20
10002918:	00ffffc4 	movi	r3,-1
1000291c:	10ffd926 	beq	r2,r3,10002884 <__alt_data_end+0xf8002884>
10002920:	81400c17 	ldw	r5,48(r16)
10002924:	28000526 	beq	r5,zero,1000293c <_fseeko_r+0x130>
10002928:	80801004 	addi	r2,r16,64
1000292c:	28800226 	beq	r5,r2,10002938 <_fseeko_r+0x12c>
10002930:	8809883a 	mov	r4,r17
10002934:	00024dc0 	call	100024dc <_free_r>
10002938:	80000c15 	stw	zero,48(r16)
1000293c:	8080030b 	ldhu	r2,12(r16)
10002940:	80c00417 	ldw	r3,16(r16)
10002944:	80000115 	stw	zero,4(r16)
10002948:	10bdf7cc 	andi	r2,r2,63455
1000294c:	80c00015 	stw	r3,0(r16)
10002950:	8080030d 	sth	r2,12(r16)
10002954:	01800204 	movi	r6,8
10002958:	000b883a 	mov	r5,zero
1000295c:	81001704 	addi	r4,r16,92
10002960:	0003bb00 	call	10003bb0 <memset>
10002964:	003fc806 	br	10002888 <__alt_data_end+0xf8002888>
10002968:	800b883a 	mov	r5,r16
1000296c:	8809883a 	mov	r4,r17
10002970:	0001b580 	call	10001b58 <_fflush_r>
10002974:	8080030b 	ldhu	r2,12(r16)
10002978:	10c4000c 	andi	r3,r2,4096
1000297c:	18008726 	beq	r3,zero,10002b9c <_fseeko_r+0x390>
10002980:	84c01417 	ldw	r19,80(r16)
10002984:	10c0010c 	andi	r3,r2,4
10002988:	1800431e 	bne	r3,zero,10002a98 <_fseeko_r+0x28c>
1000298c:	1080020c 	andi	r2,r2,8
10002990:	10008026 	beq	r2,zero,10002b94 <_fseeko_r+0x388>
10002994:	80c00017 	ldw	r3,0(r16)
10002998:	80800417 	ldw	r2,16(r16)
1000299c:	18000226 	beq	r3,zero,100029a8 <_fseeko_r+0x19c>
100029a0:	1887c83a 	sub	r3,r3,r2
100029a4:	98e7883a 	add	r19,r19,r3
100029a8:	aceb883a 	add	r21,r21,r19
100029ac:	05c00044 	movi	r23,1
100029b0:	0025883a 	mov	r18,zero
100029b4:	003fc306 	br	100028c4 <__alt_data_end+0xf80028c4>
100029b8:	0001f440 	call	10001f44 <__sinit>
100029bc:	8080030b 	ldhu	r2,12(r16)
100029c0:	00c04204 	movi	r3,264
100029c4:	1080420c 	andi	r2,r2,264
100029c8:	10ffa51e 	bne	r2,r3,10002860 <__alt_data_end+0xf8002860>
100029cc:	800b883a 	mov	r5,r16
100029d0:	8809883a 	mov	r4,r17
100029d4:	0001b580 	call	10001b58 <_fflush_r>
100029d8:	003fa106 	br	10002860 <__alt_data_end+0xf8002860>
100029dc:	8080030b 	ldhu	r2,12(r16)
100029e0:	00c10004 	movi	r3,1024
100029e4:	80c01315 	stw	r3,76(r16)
100029e8:	10c4b03a 	or	r2,r2,r3
100029ec:	8080030d 	sth	r2,12(r16)
100029f0:	9000311e 	bne	r18,zero,10002ab8 <_fseeko_r+0x2ac>
100029f4:	a82d883a 	mov	r22,r21
100029f8:	b800371e 	bne	r23,zero,10002ad8 <_fseeko_r+0x2cc>
100029fc:	8080030b 	ldhu	r2,12(r16)
10002a00:	1084000c 	andi	r2,r2,4096
10002a04:	10007f26 	beq	r2,zero,10002c04 <_fseeko_r+0x3f8>
10002a08:	80801417 	ldw	r2,80(r16)
10002a0c:	81800117 	ldw	r6,4(r16)
10002a10:	81400c17 	ldw	r5,48(r16)
10002a14:	11a7c83a 	sub	r19,r2,r6
10002a18:	28008226 	beq	r5,zero,10002c24 <_fseeko_r+0x418>
10002a1c:	81c00f17 	ldw	r7,60(r16)
10002a20:	99e7c83a 	sub	r19,r19,r7
10002a24:	81000e17 	ldw	r4,56(r16)
10002a28:	80800417 	ldw	r2,16(r16)
10002a2c:	99a7883a 	add	r19,r19,r6
10002a30:	2087c83a 	sub	r3,r4,r2
10002a34:	98e7c83a 	sub	r19,r19,r3
10002a38:	38c7883a 	add	r3,r7,r3
10002a3c:	b4c02b16 	blt	r22,r19,10002aec <_fseeko_r+0x2e0>
10002a40:	98c9883a 	add	r4,r19,r3
10002a44:	b100292e 	bgeu	r22,r4,10002aec <_fseeko_r+0x2e0>
10002a48:	b4e7c83a 	sub	r19,r22,r19
10002a4c:	14c5883a 	add	r2,r2,r19
10002a50:	1ce7c83a 	sub	r19,r3,r19
10002a54:	80800015 	stw	r2,0(r16)
10002a58:	84c00115 	stw	r19,4(r16)
10002a5c:	28000526 	beq	r5,zero,10002a74 <_fseeko_r+0x268>
10002a60:	80801004 	addi	r2,r16,64
10002a64:	28800226 	beq	r5,r2,10002a70 <_fseeko_r+0x264>
10002a68:	8809883a 	mov	r4,r17
10002a6c:	00024dc0 	call	100024dc <_free_r>
10002a70:	80000c15 	stw	zero,48(r16)
10002a74:	8080030b 	ldhu	r2,12(r16)
10002a78:	01800204 	movi	r6,8
10002a7c:	000b883a 	mov	r5,zero
10002a80:	10bff7cc 	andi	r2,r2,65503
10002a84:	8080030d 	sth	r2,12(r16)
10002a88:	81001704 	addi	r4,r16,92
10002a8c:	0003bb00 	call	10003bb0 <memset>
10002a90:	0027883a 	mov	r19,zero
10002a94:	003f7c06 	br	10002888 <__alt_data_end+0xf8002888>
10002a98:	80c00117 	ldw	r3,4(r16)
10002a9c:	80800c17 	ldw	r2,48(r16)
10002aa0:	98e7c83a 	sub	r19,r19,r3
10002aa4:	10003b26 	beq	r2,zero,10002b94 <_fseeko_r+0x388>
10002aa8:	80c00f17 	ldw	r3,60(r16)
10002aac:	80800417 	ldw	r2,16(r16)
10002ab0:	98e7c83a 	sub	r19,r19,r3
10002ab4:	003fbc06 	br	100029a8 <__alt_data_end+0xf80029a8>
10002ab8:	8140038f 	ldh	r5,14(r16)
10002abc:	d80d883a 	mov	r6,sp
10002ac0:	8809883a 	mov	r4,r17
10002ac4:	0002c6c0 	call	10002c6c <_fstat_r>
10002ac8:	103f891e 	bne	r2,zero,100028f0 <__alt_data_end+0xf80028f0>
10002acc:	dd800417 	ldw	r22,16(sp)
10002ad0:	adad883a 	add	r22,r21,r22
10002ad4:	b83fc926 	beq	r23,zero,100029fc <__alt_data_end+0xf80029fc>
10002ad8:	81400c17 	ldw	r5,48(r16)
10002adc:	81800117 	ldw	r6,4(r16)
10002ae0:	28005026 	beq	r5,zero,10002c24 <_fseeko_r+0x418>
10002ae4:	81c00f17 	ldw	r7,60(r16)
10002ae8:	003fce06 	br	10002a24 <__alt_data_end+0xf8002a24>
10002aec:	84c01317 	ldw	r19,76(r16)
10002af0:	81400717 	ldw	r5,28(r16)
10002af4:	000f883a 	mov	r7,zero
10002af8:	04e7c83a 	sub	r19,zero,r19
10002afc:	9da6703a 	and	r19,r19,r22
10002b00:	980d883a 	mov	r6,r19
10002b04:	8809883a 	mov	r4,r17
10002b08:	a03ee83a 	callr	r20
10002b0c:	00ffffc4 	movi	r3,-1
10002b10:	10ff7726 	beq	r2,r3,100028f0 <__alt_data_end+0xf80028f0>
10002b14:	80800417 	ldw	r2,16(r16)
10002b18:	81400c17 	ldw	r5,48(r16)
10002b1c:	80000115 	stw	zero,4(r16)
10002b20:	80800015 	stw	r2,0(r16)
10002b24:	28000526 	beq	r5,zero,10002b3c <_fseeko_r+0x330>
10002b28:	80801004 	addi	r2,r16,64
10002b2c:	28800226 	beq	r5,r2,10002b38 <_fseeko_r+0x32c>
10002b30:	8809883a 	mov	r4,r17
10002b34:	00024dc0 	call	100024dc <_free_r>
10002b38:	80000c15 	stw	zero,48(r16)
10002b3c:	8080030b 	ldhu	r2,12(r16)
10002b40:	b4e7c83a 	sub	r19,r22,r19
10002b44:	10bff7cc 	andi	r2,r2,65503
10002b48:	8080030d 	sth	r2,12(r16)
10002b4c:	98000b26 	beq	r19,zero,10002b7c <_fseeko_r+0x370>
10002b50:	800b883a 	mov	r5,r16
10002b54:	8809883a 	mov	r4,r17
10002b58:	00044300 	call	10004430 <__srefill_r>
10002b5c:	103f641e 	bne	r2,zero,100028f0 <__alt_data_end+0xf80028f0>
10002b60:	80800117 	ldw	r2,4(r16)
10002b64:	14ff6236 	bltu	r2,r19,100028f0 <__alt_data_end+0xf80028f0>
10002b68:	80c00017 	ldw	r3,0(r16)
10002b6c:	14c5c83a 	sub	r2,r2,r19
10002b70:	80800115 	stw	r2,4(r16)
10002b74:	1ce7883a 	add	r19,r3,r19
10002b78:	84c00015 	stw	r19,0(r16)
10002b7c:	01800204 	movi	r6,8
10002b80:	000b883a 	mov	r5,zero
10002b84:	81001704 	addi	r4,r16,92
10002b88:	0003bb00 	call	10003bb0 <memset>
10002b8c:	0027883a 	mov	r19,zero
10002b90:	003f3d06 	br	10002888 <__alt_data_end+0xf8002888>
10002b94:	80800417 	ldw	r2,16(r16)
10002b98:	003f8306 	br	100029a8 <__alt_data_end+0xf80029a8>
10002b9c:	81400717 	ldw	r5,28(r16)
10002ba0:	900f883a 	mov	r7,r18
10002ba4:	000d883a 	mov	r6,zero
10002ba8:	8809883a 	mov	r4,r17
10002bac:	a03ee83a 	callr	r20
10002bb0:	1027883a 	mov	r19,r2
10002bb4:	00bfffc4 	movi	r2,-1
10002bb8:	98bf3226 	beq	r19,r2,10002884 <__alt_data_end+0xf8002884>
10002bbc:	8080030b 	ldhu	r2,12(r16)
10002bc0:	003f7006 	br	10002984 <__alt_data_end+0xf8002984>
10002bc4:	8140038f 	ldh	r5,14(r16)
10002bc8:	283f4716 	blt	r5,zero,100028e8 <__alt_data_end+0xf80028e8>
10002bcc:	d80d883a 	mov	r6,sp
10002bd0:	8809883a 	mov	r4,r17
10002bd4:	0002c6c0 	call	10002c6c <_fstat_r>
10002bd8:	1000041e 	bne	r2,zero,10002bec <_fseeko_r+0x3e0>
10002bdc:	d8800117 	ldw	r2,4(sp)
10002be0:	00e00014 	movui	r3,32768
10002be4:	10bc000c 	andi	r2,r2,61440
10002be8:	10ff7c26 	beq	r2,r3,100029dc <__alt_data_end+0xf80029dc>
10002bec:	8080030b 	ldhu	r2,12(r16)
10002bf0:	003f3d06 	br	100028e8 <__alt_data_end+0xf80028e8>
10002bf4:	800b883a 	mov	r5,r16
10002bf8:	8809883a 	mov	r4,r17
10002bfc:	00030780 	call	10003078 <__smakebuf_r>
10002c00:	003f3106 	br	100028c8 <__alt_data_end+0xf80028c8>
10002c04:	81400717 	ldw	r5,28(r16)
10002c08:	01c00044 	movi	r7,1
10002c0c:	000d883a 	mov	r6,zero
10002c10:	8809883a 	mov	r4,r17
10002c14:	a03ee83a 	callr	r20
10002c18:	00ffffc4 	movi	r3,-1
10002c1c:	10ff7b1e 	bne	r2,r3,10002a0c <__alt_data_end+0xf8002a0c>
10002c20:	003f3306 	br	100028f0 <__alt_data_end+0xf80028f0>
10002c24:	80c00017 	ldw	r3,0(r16)
10002c28:	80800417 	ldw	r2,16(r16)
10002c2c:	000b883a 	mov	r5,zero
10002c30:	1887c83a 	sub	r3,r3,r2
10002c34:	98e7c83a 	sub	r19,r19,r3
10002c38:	30c7883a 	add	r3,r6,r3
10002c3c:	003f7f06 	br	10002a3c <__alt_data_end+0xf8002a3c>
10002c40:	00800744 	movi	r2,29
10002c44:	88800015 	stw	r2,0(r17)
10002c48:	04ffffc4 	movi	r19,-1
10002c4c:	003f0e06 	br	10002888 <__alt_data_end+0xf8002888>

10002c50 <fseeko>:
10002c50:	00840074 	movhi	r2,4097
10002c54:	10914b04 	addi	r2,r2,17708
10002c58:	300f883a 	mov	r7,r6
10002c5c:	280d883a 	mov	r6,r5
10002c60:	200b883a 	mov	r5,r4
10002c64:	11000017 	ldw	r4,0(r2)
10002c68:	000280c1 	jmpi	1000280c <_fseeko_r>

10002c6c <_fstat_r>:
10002c6c:	defffd04 	addi	sp,sp,-12
10002c70:	2805883a 	mov	r2,r5
10002c74:	dc000015 	stw	r16,0(sp)
10002c78:	04040074 	movhi	r16,4097
10002c7c:	dc400115 	stw	r17,4(sp)
10002c80:	84187404 	addi	r16,r16,25040
10002c84:	2023883a 	mov	r17,r4
10002c88:	300b883a 	mov	r5,r6
10002c8c:	1009883a 	mov	r4,r2
10002c90:	dfc00215 	stw	ra,8(sp)
10002c94:	80000015 	stw	zero,0(r16)
10002c98:	000fb900 	call	1000fb90 <fstat>
10002c9c:	00ffffc4 	movi	r3,-1
10002ca0:	10c00526 	beq	r2,r3,10002cb8 <_fstat_r+0x4c>
10002ca4:	dfc00217 	ldw	ra,8(sp)
10002ca8:	dc400117 	ldw	r17,4(sp)
10002cac:	dc000017 	ldw	r16,0(sp)
10002cb0:	dec00304 	addi	sp,sp,12
10002cb4:	f800283a 	ret
10002cb8:	80c00017 	ldw	r3,0(r16)
10002cbc:	183ff926 	beq	r3,zero,10002ca4 <__alt_data_end+0xf8002ca4>
10002cc0:	88c00015 	stw	r3,0(r17)
10002cc4:	003ff706 	br	10002ca4 <__alt_data_end+0xf8002ca4>

10002cc8 <_ftell_r>:
10002cc8:	0002ce01 	jmpi	10002ce0 <_ftello_r>

10002ccc <ftell>:
10002ccc:	00840074 	movhi	r2,4097
10002cd0:	10914b04 	addi	r2,r2,17708
10002cd4:	200b883a 	mov	r5,r4
10002cd8:	11000017 	ldw	r4,0(r2)
10002cdc:	0002ce01 	jmpi	10002ce0 <_ftello_r>

10002ce0 <_ftello_r>:
10002ce0:	defffd04 	addi	sp,sp,-12
10002ce4:	dc400115 	stw	r17,4(sp)
10002ce8:	dc000015 	stw	r16,0(sp)
10002cec:	dfc00215 	stw	ra,8(sp)
10002cf0:	2023883a 	mov	r17,r4
10002cf4:	2821883a 	mov	r16,r5
10002cf8:	20000226 	beq	r4,zero,10002d04 <_ftello_r+0x24>
10002cfc:	20800e17 	ldw	r2,56(r4)
10002d00:	10002c26 	beq	r2,zero,10002db4 <_ftello_r+0xd4>
10002d04:	80800a17 	ldw	r2,40(r16)
10002d08:	10002c26 	beq	r2,zero,10002dbc <_ftello_r+0xdc>
10002d0c:	80c0030b 	ldhu	r3,12(r16)
10002d10:	1880020c 	andi	r2,r3,8
10002d14:	1000221e 	bne	r2,zero,10002da0 <_ftello_r+0xc0>
10002d18:	1884000c 	andi	r2,r3,4096
10002d1c:	10001626 	beq	r2,zero,10002d78 <_ftello_r+0x98>
10002d20:	80801417 	ldw	r2,80(r16)
10002d24:	1900010c 	andi	r4,r3,4
10002d28:	20000b26 	beq	r4,zero,10002d58 <_ftello_r+0x78>
10002d2c:	81000117 	ldw	r4,4(r16)
10002d30:	80c00c17 	ldw	r3,48(r16)
10002d34:	1105c83a 	sub	r2,r2,r4
10002d38:	18000226 	beq	r3,zero,10002d44 <_ftello_r+0x64>
10002d3c:	80c00f17 	ldw	r3,60(r16)
10002d40:	10c5c83a 	sub	r2,r2,r3
10002d44:	dfc00217 	ldw	ra,8(sp)
10002d48:	dc400117 	ldw	r17,4(sp)
10002d4c:	dc000017 	ldw	r16,0(sp)
10002d50:	dec00304 	addi	sp,sp,12
10002d54:	f800283a 	ret
10002d58:	18c0020c 	andi	r3,r3,8
10002d5c:	183ff926 	beq	r3,zero,10002d44 <__alt_data_end+0xf8002d44>
10002d60:	80c00017 	ldw	r3,0(r16)
10002d64:	183ff726 	beq	r3,zero,10002d44 <__alt_data_end+0xf8002d44>
10002d68:	81000417 	ldw	r4,16(r16)
10002d6c:	1907c83a 	sub	r3,r3,r4
10002d70:	1885883a 	add	r2,r3,r2
10002d74:	003ff306 	br	10002d44 <__alt_data_end+0xf8002d44>
10002d78:	80800a17 	ldw	r2,40(r16)
10002d7c:	81400717 	ldw	r5,28(r16)
10002d80:	01c00044 	movi	r7,1
10002d84:	000d883a 	mov	r6,zero
10002d88:	8809883a 	mov	r4,r17
10002d8c:	103ee83a 	callr	r2
10002d90:	00ffffc4 	movi	r3,-1
10002d94:	10ffeb26 	beq	r2,r3,10002d44 <__alt_data_end+0xf8002d44>
10002d98:	80c0030b 	ldhu	r3,12(r16)
10002d9c:	003fe106 	br	10002d24 <__alt_data_end+0xf8002d24>
10002da0:	800b883a 	mov	r5,r16
10002da4:	8809883a 	mov	r4,r17
10002da8:	0001b580 	call	10001b58 <_fflush_r>
10002dac:	80c0030b 	ldhu	r3,12(r16)
10002db0:	003fd906 	br	10002d18 <__alt_data_end+0xf8002d18>
10002db4:	0001f440 	call	10001f44 <__sinit>
10002db8:	003fd206 	br	10002d04 <__alt_data_end+0xf8002d04>
10002dbc:	00800744 	movi	r2,29
10002dc0:	88800015 	stw	r2,0(r17)
10002dc4:	00bfffc4 	movi	r2,-1
10002dc8:	003fde06 	br	10002d44 <__alt_data_end+0xf8002d44>

10002dcc <ftello>:
10002dcc:	00840074 	movhi	r2,4097
10002dd0:	10914b04 	addi	r2,r2,17708
10002dd4:	200b883a 	mov	r5,r4
10002dd8:	11000017 	ldw	r4,0(r2)
10002ddc:	0002ce01 	jmpi	10002ce0 <_ftello_r>

10002de0 <_fwalk>:
10002de0:	defff704 	addi	sp,sp,-36
10002de4:	dd000415 	stw	r20,16(sp)
10002de8:	dfc00815 	stw	ra,32(sp)
10002dec:	ddc00715 	stw	r23,28(sp)
10002df0:	dd800615 	stw	r22,24(sp)
10002df4:	dd400515 	stw	r21,20(sp)
10002df8:	dcc00315 	stw	r19,12(sp)
10002dfc:	dc800215 	stw	r18,8(sp)
10002e00:	dc400115 	stw	r17,4(sp)
10002e04:	dc000015 	stw	r16,0(sp)
10002e08:	2500b804 	addi	r20,r4,736
10002e0c:	a0002326 	beq	r20,zero,10002e9c <_fwalk+0xbc>
10002e10:	282b883a 	mov	r21,r5
10002e14:	002f883a 	mov	r23,zero
10002e18:	05800044 	movi	r22,1
10002e1c:	04ffffc4 	movi	r19,-1
10002e20:	a4400117 	ldw	r17,4(r20)
10002e24:	a4800217 	ldw	r18,8(r20)
10002e28:	8c7fffc4 	addi	r17,r17,-1
10002e2c:	88000d16 	blt	r17,zero,10002e64 <_fwalk+0x84>
10002e30:	94000304 	addi	r16,r18,12
10002e34:	94800384 	addi	r18,r18,14
10002e38:	8080000b 	ldhu	r2,0(r16)
10002e3c:	8c7fffc4 	addi	r17,r17,-1
10002e40:	813ffd04 	addi	r4,r16,-12
10002e44:	b080042e 	bgeu	r22,r2,10002e58 <_fwalk+0x78>
10002e48:	9080000f 	ldh	r2,0(r18)
10002e4c:	14c00226 	beq	r2,r19,10002e58 <_fwalk+0x78>
10002e50:	a83ee83a 	callr	r21
10002e54:	b8aeb03a 	or	r23,r23,r2
10002e58:	84001a04 	addi	r16,r16,104
10002e5c:	94801a04 	addi	r18,r18,104
10002e60:	8cfff51e 	bne	r17,r19,10002e38 <__alt_data_end+0xf8002e38>
10002e64:	a5000017 	ldw	r20,0(r20)
10002e68:	a03fed1e 	bne	r20,zero,10002e20 <__alt_data_end+0xf8002e20>
10002e6c:	b805883a 	mov	r2,r23
10002e70:	dfc00817 	ldw	ra,32(sp)
10002e74:	ddc00717 	ldw	r23,28(sp)
10002e78:	dd800617 	ldw	r22,24(sp)
10002e7c:	dd400517 	ldw	r21,20(sp)
10002e80:	dd000417 	ldw	r20,16(sp)
10002e84:	dcc00317 	ldw	r19,12(sp)
10002e88:	dc800217 	ldw	r18,8(sp)
10002e8c:	dc400117 	ldw	r17,4(sp)
10002e90:	dc000017 	ldw	r16,0(sp)
10002e94:	dec00904 	addi	sp,sp,36
10002e98:	f800283a 	ret
10002e9c:	002f883a 	mov	r23,zero
10002ea0:	003ff206 	br	10002e6c <__alt_data_end+0xf8002e6c>

10002ea4 <_fwalk_reent>:
10002ea4:	defff704 	addi	sp,sp,-36
10002ea8:	dd000415 	stw	r20,16(sp)
10002eac:	dfc00815 	stw	ra,32(sp)
10002eb0:	ddc00715 	stw	r23,28(sp)
10002eb4:	dd800615 	stw	r22,24(sp)
10002eb8:	dd400515 	stw	r21,20(sp)
10002ebc:	dcc00315 	stw	r19,12(sp)
10002ec0:	dc800215 	stw	r18,8(sp)
10002ec4:	dc400115 	stw	r17,4(sp)
10002ec8:	dc000015 	stw	r16,0(sp)
10002ecc:	2500b804 	addi	r20,r4,736
10002ed0:	a0002326 	beq	r20,zero,10002f60 <_fwalk_reent+0xbc>
10002ed4:	282b883a 	mov	r21,r5
10002ed8:	2027883a 	mov	r19,r4
10002edc:	002f883a 	mov	r23,zero
10002ee0:	05800044 	movi	r22,1
10002ee4:	04bfffc4 	movi	r18,-1
10002ee8:	a4400117 	ldw	r17,4(r20)
10002eec:	a4000217 	ldw	r16,8(r20)
10002ef0:	8c7fffc4 	addi	r17,r17,-1
10002ef4:	88000c16 	blt	r17,zero,10002f28 <_fwalk_reent+0x84>
10002ef8:	84000304 	addi	r16,r16,12
10002efc:	8080000b 	ldhu	r2,0(r16)
10002f00:	8c7fffc4 	addi	r17,r17,-1
10002f04:	817ffd04 	addi	r5,r16,-12
10002f08:	b080052e 	bgeu	r22,r2,10002f20 <_fwalk_reent+0x7c>
10002f0c:	8080008f 	ldh	r2,2(r16)
10002f10:	9809883a 	mov	r4,r19
10002f14:	14800226 	beq	r2,r18,10002f20 <_fwalk_reent+0x7c>
10002f18:	a83ee83a 	callr	r21
10002f1c:	b8aeb03a 	or	r23,r23,r2
10002f20:	84001a04 	addi	r16,r16,104
10002f24:	8cbff51e 	bne	r17,r18,10002efc <__alt_data_end+0xf8002efc>
10002f28:	a5000017 	ldw	r20,0(r20)
10002f2c:	a03fee1e 	bne	r20,zero,10002ee8 <__alt_data_end+0xf8002ee8>
10002f30:	b805883a 	mov	r2,r23
10002f34:	dfc00817 	ldw	ra,32(sp)
10002f38:	ddc00717 	ldw	r23,28(sp)
10002f3c:	dd800617 	ldw	r22,24(sp)
10002f40:	dd400517 	ldw	r21,20(sp)
10002f44:	dd000417 	ldw	r20,16(sp)
10002f48:	dcc00317 	ldw	r19,12(sp)
10002f4c:	dc800217 	ldw	r18,8(sp)
10002f50:	dc400117 	ldw	r17,4(sp)
10002f54:	dc000017 	ldw	r16,0(sp)
10002f58:	dec00904 	addi	sp,sp,36
10002f5c:	f800283a 	ret
10002f60:	002f883a 	mov	r23,zero
10002f64:	003ff206 	br	10002f30 <__alt_data_end+0xf8002f30>

10002f68 <_fwrite_r>:
10002f68:	defff504 	addi	sp,sp,-44
10002f6c:	dc400715 	stw	r17,28(sp)
10002f70:	d9400315 	stw	r5,12(sp)
10002f74:	2023883a 	mov	r17,r4
10002f78:	300b883a 	mov	r5,r6
10002f7c:	3809883a 	mov	r4,r7
10002f80:	dcc00915 	stw	r19,36(sp)
10002f84:	dc800815 	stw	r18,32(sp)
10002f88:	dc000615 	stw	r16,24(sp)
10002f8c:	dfc00a15 	stw	ra,40(sp)
10002f90:	3027883a 	mov	r19,r6
10002f94:	3821883a 	mov	r16,r7
10002f98:	000175c0 	call	1000175c <__mulsi3>
10002f9c:	1025883a 	mov	r18,r2
10002fa0:	d8800415 	stw	r2,16(sp)
10002fa4:	d8800215 	stw	r2,8(sp)
10002fa8:	d8800304 	addi	r2,sp,12
10002fac:	d8800015 	stw	r2,0(sp)
10002fb0:	00800044 	movi	r2,1
10002fb4:	d8800115 	stw	r2,4(sp)
10002fb8:	d9400b17 	ldw	r5,44(sp)
10002fbc:	88000226 	beq	r17,zero,10002fc8 <_fwrite_r+0x60>
10002fc0:	88800e17 	ldw	r2,56(r17)
10002fc4:	10001a26 	beq	r2,zero,10003030 <_fwrite_r+0xc8>
10002fc8:	2880030b 	ldhu	r2,12(r5)
10002fcc:	10c8000c 	andi	r3,r2,8192
10002fd0:	1800061e 	bne	r3,zero,10002fec <_fwrite_r+0x84>
10002fd4:	29001917 	ldw	r4,100(r5)
10002fd8:	00f7ffc4 	movi	r3,-8193
10002fdc:	10880014 	ori	r2,r2,8192
10002fe0:	20c6703a 	and	r3,r4,r3
10002fe4:	2880030d 	sth	r2,12(r5)
10002fe8:	28c01915 	stw	r3,100(r5)
10002fec:	d80d883a 	mov	r6,sp
10002ff0:	8809883a 	mov	r4,r17
10002ff4:	00088f40 	call	100088f4 <__sfvwrite_r>
10002ff8:	10000b26 	beq	r2,zero,10003028 <_fwrite_r+0xc0>
10002ffc:	d9000217 	ldw	r4,8(sp)
10003000:	980b883a 	mov	r5,r19
10003004:	9109c83a 	sub	r4,r18,r4
10003008:	00016a00 	call	100016a0 <__udivsi3>
1000300c:	dfc00a17 	ldw	ra,40(sp)
10003010:	dcc00917 	ldw	r19,36(sp)
10003014:	dc800817 	ldw	r18,32(sp)
10003018:	dc400717 	ldw	r17,28(sp)
1000301c:	dc000617 	ldw	r16,24(sp)
10003020:	dec00b04 	addi	sp,sp,44
10003024:	f800283a 	ret
10003028:	8005883a 	mov	r2,r16
1000302c:	003ff706 	br	1000300c <__alt_data_end+0xf800300c>
10003030:	8809883a 	mov	r4,r17
10003034:	d9400515 	stw	r5,20(sp)
10003038:	0001f440 	call	10001f44 <__sinit>
1000303c:	d9400517 	ldw	r5,20(sp)
10003040:	003fe106 	br	10002fc8 <__alt_data_end+0xf8002fc8>

10003044 <fwrite>:
10003044:	defffe04 	addi	sp,sp,-8
10003048:	00840074 	movhi	r2,4097
1000304c:	d9c00015 	stw	r7,0(sp)
10003050:	10914b04 	addi	r2,r2,17708
10003054:	300f883a 	mov	r7,r6
10003058:	280d883a 	mov	r6,r5
1000305c:	200b883a 	mov	r5,r4
10003060:	11000017 	ldw	r4,0(r2)
10003064:	dfc00115 	stw	ra,4(sp)
10003068:	0002f680 	call	10002f68 <_fwrite_r>
1000306c:	dfc00117 	ldw	ra,4(sp)
10003070:	dec00204 	addi	sp,sp,8
10003074:	f800283a 	ret

10003078 <__smakebuf_r>:
10003078:	2880030b 	ldhu	r2,12(r5)
1000307c:	10c0008c 	andi	r3,r2,2
10003080:	1800411e 	bne	r3,zero,10003188 <__smakebuf_r+0x110>
10003084:	deffec04 	addi	sp,sp,-80
10003088:	dc000f15 	stw	r16,60(sp)
1000308c:	2821883a 	mov	r16,r5
10003090:	2940038f 	ldh	r5,14(r5)
10003094:	dc401015 	stw	r17,64(sp)
10003098:	dfc01315 	stw	ra,76(sp)
1000309c:	dcc01215 	stw	r19,72(sp)
100030a0:	dc801115 	stw	r18,68(sp)
100030a4:	2023883a 	mov	r17,r4
100030a8:	28001c16 	blt	r5,zero,1000311c <__smakebuf_r+0xa4>
100030ac:	d80d883a 	mov	r6,sp
100030b0:	0002c6c0 	call	10002c6c <_fstat_r>
100030b4:	10001816 	blt	r2,zero,10003118 <__smakebuf_r+0xa0>
100030b8:	d8800117 	ldw	r2,4(sp)
100030bc:	00e00014 	movui	r3,32768
100030c0:	10bc000c 	andi	r2,r2,61440
100030c4:	14c80020 	cmpeqi	r19,r2,8192
100030c8:	10c03726 	beq	r2,r3,100031a8 <__smakebuf_r+0x130>
100030cc:	80c0030b 	ldhu	r3,12(r16)
100030d0:	18c20014 	ori	r3,r3,2048
100030d4:	80c0030d 	sth	r3,12(r16)
100030d8:	00c80004 	movi	r3,8192
100030dc:	10c0521e 	bne	r2,r3,10003228 <__smakebuf_r+0x1b0>
100030e0:	8140038f 	ldh	r5,14(r16)
100030e4:	8809883a 	mov	r4,r17
100030e8:	0008dbc0 	call	10008dbc <_isatty_r>
100030ec:	10004c26 	beq	r2,zero,10003220 <__smakebuf_r+0x1a8>
100030f0:	8080030b 	ldhu	r2,12(r16)
100030f4:	80c010c4 	addi	r3,r16,67
100030f8:	80c00015 	stw	r3,0(r16)
100030fc:	10800054 	ori	r2,r2,1
10003100:	8080030d 	sth	r2,12(r16)
10003104:	00800044 	movi	r2,1
10003108:	80c00415 	stw	r3,16(r16)
1000310c:	80800515 	stw	r2,20(r16)
10003110:	04810004 	movi	r18,1024
10003114:	00000706 	br	10003134 <__smakebuf_r+0xbc>
10003118:	8080030b 	ldhu	r2,12(r16)
1000311c:	10c0200c 	andi	r3,r2,128
10003120:	18001f1e 	bne	r3,zero,100031a0 <__smakebuf_r+0x128>
10003124:	04810004 	movi	r18,1024
10003128:	10820014 	ori	r2,r2,2048
1000312c:	8080030d 	sth	r2,12(r16)
10003130:	0027883a 	mov	r19,zero
10003134:	900b883a 	mov	r5,r18
10003138:	8809883a 	mov	r4,r17
1000313c:	000325c0 	call	1000325c <_malloc_r>
10003140:	10002c26 	beq	r2,zero,100031f4 <__smakebuf_r+0x17c>
10003144:	80c0030b 	ldhu	r3,12(r16)
10003148:	01040034 	movhi	r4,4096
1000314c:	2106fb04 	addi	r4,r4,7148
10003150:	89000f15 	stw	r4,60(r17)
10003154:	18c02014 	ori	r3,r3,128
10003158:	80c0030d 	sth	r3,12(r16)
1000315c:	80800015 	stw	r2,0(r16)
10003160:	80800415 	stw	r2,16(r16)
10003164:	84800515 	stw	r18,20(r16)
10003168:	98001a1e 	bne	r19,zero,100031d4 <__smakebuf_r+0x15c>
1000316c:	dfc01317 	ldw	ra,76(sp)
10003170:	dcc01217 	ldw	r19,72(sp)
10003174:	dc801117 	ldw	r18,68(sp)
10003178:	dc401017 	ldw	r17,64(sp)
1000317c:	dc000f17 	ldw	r16,60(sp)
10003180:	dec01404 	addi	sp,sp,80
10003184:	f800283a 	ret
10003188:	288010c4 	addi	r2,r5,67
1000318c:	28800015 	stw	r2,0(r5)
10003190:	28800415 	stw	r2,16(r5)
10003194:	00800044 	movi	r2,1
10003198:	28800515 	stw	r2,20(r5)
1000319c:	f800283a 	ret
100031a0:	04801004 	movi	r18,64
100031a4:	003fe006 	br	10003128 <__alt_data_end+0xf8003128>
100031a8:	81000a17 	ldw	r4,40(r16)
100031ac:	00c40034 	movhi	r3,4096
100031b0:	18d1cc04 	addi	r3,r3,18224
100031b4:	20ffc51e 	bne	r4,r3,100030cc <__alt_data_end+0xf80030cc>
100031b8:	8080030b 	ldhu	r2,12(r16)
100031bc:	04810004 	movi	r18,1024
100031c0:	84801315 	stw	r18,76(r16)
100031c4:	1484b03a 	or	r2,r2,r18
100031c8:	8080030d 	sth	r2,12(r16)
100031cc:	0027883a 	mov	r19,zero
100031d0:	003fd806 	br	10003134 <__alt_data_end+0xf8003134>
100031d4:	8140038f 	ldh	r5,14(r16)
100031d8:	8809883a 	mov	r4,r17
100031dc:	0008dbc0 	call	10008dbc <_isatty_r>
100031e0:	103fe226 	beq	r2,zero,1000316c <__alt_data_end+0xf800316c>
100031e4:	8080030b 	ldhu	r2,12(r16)
100031e8:	10800054 	ori	r2,r2,1
100031ec:	8080030d 	sth	r2,12(r16)
100031f0:	003fde06 	br	1000316c <__alt_data_end+0xf800316c>
100031f4:	8080030b 	ldhu	r2,12(r16)
100031f8:	10c0800c 	andi	r3,r2,512
100031fc:	183fdb1e 	bne	r3,zero,1000316c <__alt_data_end+0xf800316c>
10003200:	10800094 	ori	r2,r2,2
10003204:	80c010c4 	addi	r3,r16,67
10003208:	8080030d 	sth	r2,12(r16)
1000320c:	00800044 	movi	r2,1
10003210:	80c00015 	stw	r3,0(r16)
10003214:	80c00415 	stw	r3,16(r16)
10003218:	80800515 	stw	r2,20(r16)
1000321c:	003fd306 	br	1000316c <__alt_data_end+0xf800316c>
10003220:	04810004 	movi	r18,1024
10003224:	003fc306 	br	10003134 <__alt_data_end+0xf8003134>
10003228:	0027883a 	mov	r19,zero
1000322c:	04810004 	movi	r18,1024
10003230:	003fc006 	br	10003134 <__alt_data_end+0xf8003134>

10003234 <malloc>:
10003234:	00840074 	movhi	r2,4097
10003238:	10914b04 	addi	r2,r2,17708
1000323c:	200b883a 	mov	r5,r4
10003240:	11000017 	ldw	r4,0(r2)
10003244:	000325c1 	jmpi	1000325c <_malloc_r>

10003248 <free>:
10003248:	00840074 	movhi	r2,4097
1000324c:	10914b04 	addi	r2,r2,17708
10003250:	200b883a 	mov	r5,r4
10003254:	11000017 	ldw	r4,0(r2)
10003258:	00024dc1 	jmpi	100024dc <_free_r>

1000325c <_malloc_r>:
1000325c:	defff504 	addi	sp,sp,-44
10003260:	dc800315 	stw	r18,12(sp)
10003264:	dfc00a15 	stw	ra,40(sp)
10003268:	df000915 	stw	fp,36(sp)
1000326c:	ddc00815 	stw	r23,32(sp)
10003270:	dd800715 	stw	r22,28(sp)
10003274:	dd400615 	stw	r21,24(sp)
10003278:	dd000515 	stw	r20,20(sp)
1000327c:	dcc00415 	stw	r19,16(sp)
10003280:	dc400215 	stw	r17,8(sp)
10003284:	dc000115 	stw	r16,4(sp)
10003288:	288002c4 	addi	r2,r5,11
1000328c:	00c00584 	movi	r3,22
10003290:	2025883a 	mov	r18,r4
10003294:	18807f2e 	bgeu	r3,r2,10003494 <_malloc_r+0x238>
10003298:	047ffe04 	movi	r17,-8
1000329c:	1462703a 	and	r17,r2,r17
100032a0:	8800a316 	blt	r17,zero,10003530 <_malloc_r+0x2d4>
100032a4:	8940a236 	bltu	r17,r5,10003530 <_malloc_r+0x2d4>
100032a8:	001013c0 	call	1001013c <__malloc_lock>
100032ac:	00807dc4 	movi	r2,503
100032b0:	1441e92e 	bgeu	r2,r17,10003a58 <_malloc_r+0x7fc>
100032b4:	8804d27a 	srli	r2,r17,9
100032b8:	1000a126 	beq	r2,zero,10003540 <_malloc_r+0x2e4>
100032bc:	00c00104 	movi	r3,4
100032c0:	18811e36 	bltu	r3,r2,1000373c <_malloc_r+0x4e0>
100032c4:	8804d1ba 	srli	r2,r17,6
100032c8:	12000e44 	addi	r8,r2,57
100032cc:	11c00e04 	addi	r7,r2,56
100032d0:	4209883a 	add	r4,r8,r8
100032d4:	04c40074 	movhi	r19,4097
100032d8:	2109883a 	add	r4,r4,r4
100032dc:	9ccb9704 	addi	r19,r19,11868
100032e0:	2109883a 	add	r4,r4,r4
100032e4:	9909883a 	add	r4,r19,r4
100032e8:	24000117 	ldw	r16,4(r4)
100032ec:	213ffe04 	addi	r4,r4,-8
100032f0:	24009726 	beq	r4,r16,10003550 <_malloc_r+0x2f4>
100032f4:	80800117 	ldw	r2,4(r16)
100032f8:	01bfff04 	movi	r6,-4
100032fc:	014003c4 	movi	r5,15
10003300:	1184703a 	and	r2,r2,r6
10003304:	1447c83a 	sub	r3,r2,r17
10003308:	28c00716 	blt	r5,r3,10003328 <_malloc_r+0xcc>
1000330c:	1800920e 	bge	r3,zero,10003558 <_malloc_r+0x2fc>
10003310:	84000317 	ldw	r16,12(r16)
10003314:	24008e26 	beq	r4,r16,10003550 <_malloc_r+0x2f4>
10003318:	80800117 	ldw	r2,4(r16)
1000331c:	1184703a 	and	r2,r2,r6
10003320:	1447c83a 	sub	r3,r2,r17
10003324:	28fff90e 	bge	r5,r3,1000330c <__alt_data_end+0xf800330c>
10003328:	3809883a 	mov	r4,r7
1000332c:	01840074 	movhi	r6,4097
10003330:	9c000417 	ldw	r16,16(r19)
10003334:	318b9704 	addi	r6,r6,11868
10003338:	32000204 	addi	r8,r6,8
1000333c:	82013426 	beq	r16,r8,10003810 <_malloc_r+0x5b4>
10003340:	80c00117 	ldw	r3,4(r16)
10003344:	00bfff04 	movi	r2,-4
10003348:	188e703a 	and	r7,r3,r2
1000334c:	3c45c83a 	sub	r2,r7,r17
10003350:	00c003c4 	movi	r3,15
10003354:	18811f16 	blt	r3,r2,100037d4 <_malloc_r+0x578>
10003358:	32000515 	stw	r8,20(r6)
1000335c:	32000415 	stw	r8,16(r6)
10003360:	10007f0e 	bge	r2,zero,10003560 <_malloc_r+0x304>
10003364:	00807fc4 	movi	r2,511
10003368:	11c0fd36 	bltu	r2,r7,10003760 <_malloc_r+0x504>
1000336c:	3806d0fa 	srli	r3,r7,3
10003370:	01c00044 	movi	r7,1
10003374:	30800117 	ldw	r2,4(r6)
10003378:	19400044 	addi	r5,r3,1
1000337c:	294b883a 	add	r5,r5,r5
10003380:	1807d0ba 	srai	r3,r3,2
10003384:	294b883a 	add	r5,r5,r5
10003388:	294b883a 	add	r5,r5,r5
1000338c:	298b883a 	add	r5,r5,r6
10003390:	38c6983a 	sll	r3,r7,r3
10003394:	29c00017 	ldw	r7,0(r5)
10003398:	2a7ffe04 	addi	r9,r5,-8
1000339c:	1886b03a 	or	r3,r3,r2
100033a0:	82400315 	stw	r9,12(r16)
100033a4:	81c00215 	stw	r7,8(r16)
100033a8:	30c00115 	stw	r3,4(r6)
100033ac:	2c000015 	stw	r16,0(r5)
100033b0:	3c000315 	stw	r16,12(r7)
100033b4:	2005d0ba 	srai	r2,r4,2
100033b8:	01400044 	movi	r5,1
100033bc:	288a983a 	sll	r5,r5,r2
100033c0:	19406f36 	bltu	r3,r5,10003580 <_malloc_r+0x324>
100033c4:	28c4703a 	and	r2,r5,r3
100033c8:	10000a1e 	bne	r2,zero,100033f4 <_malloc_r+0x198>
100033cc:	00bfff04 	movi	r2,-4
100033d0:	294b883a 	add	r5,r5,r5
100033d4:	2088703a 	and	r4,r4,r2
100033d8:	28c4703a 	and	r2,r5,r3
100033dc:	21000104 	addi	r4,r4,4
100033e0:	1000041e 	bne	r2,zero,100033f4 <_malloc_r+0x198>
100033e4:	294b883a 	add	r5,r5,r5
100033e8:	28c4703a 	and	r2,r5,r3
100033ec:	21000104 	addi	r4,r4,4
100033f0:	103ffc26 	beq	r2,zero,100033e4 <__alt_data_end+0xf80033e4>
100033f4:	02bfff04 	movi	r10,-4
100033f8:	024003c4 	movi	r9,15
100033fc:	21800044 	addi	r6,r4,1
10003400:	318d883a 	add	r6,r6,r6
10003404:	318d883a 	add	r6,r6,r6
10003408:	318d883a 	add	r6,r6,r6
1000340c:	998d883a 	add	r6,r19,r6
10003410:	333ffe04 	addi	r12,r6,-8
10003414:	2017883a 	mov	r11,r4
10003418:	31800104 	addi	r6,r6,4
1000341c:	34000017 	ldw	r16,0(r6)
10003420:	31fffd04 	addi	r7,r6,-12
10003424:	81c0041e 	bne	r16,r7,10003438 <_malloc_r+0x1dc>
10003428:	0000fb06 	br	10003818 <_malloc_r+0x5bc>
1000342c:	1801030e 	bge	r3,zero,1000383c <_malloc_r+0x5e0>
10003430:	84000317 	ldw	r16,12(r16)
10003434:	81c0f826 	beq	r16,r7,10003818 <_malloc_r+0x5bc>
10003438:	80800117 	ldw	r2,4(r16)
1000343c:	1284703a 	and	r2,r2,r10
10003440:	1447c83a 	sub	r3,r2,r17
10003444:	48fff90e 	bge	r9,r3,1000342c <__alt_data_end+0xf800342c>
10003448:	80800317 	ldw	r2,12(r16)
1000344c:	81000217 	ldw	r4,8(r16)
10003450:	89400054 	ori	r5,r17,1
10003454:	81400115 	stw	r5,4(r16)
10003458:	20800315 	stw	r2,12(r4)
1000345c:	11000215 	stw	r4,8(r2)
10003460:	8463883a 	add	r17,r16,r17
10003464:	9c400515 	stw	r17,20(r19)
10003468:	9c400415 	stw	r17,16(r19)
1000346c:	18800054 	ori	r2,r3,1
10003470:	88800115 	stw	r2,4(r17)
10003474:	8a000315 	stw	r8,12(r17)
10003478:	8a000215 	stw	r8,8(r17)
1000347c:	88e3883a 	add	r17,r17,r3
10003480:	88c00015 	stw	r3,0(r17)
10003484:	9009883a 	mov	r4,r18
10003488:	00101600 	call	10010160 <__malloc_unlock>
1000348c:	80800204 	addi	r2,r16,8
10003490:	00001b06 	br	10003500 <_malloc_r+0x2a4>
10003494:	04400404 	movi	r17,16
10003498:	89402536 	bltu	r17,r5,10003530 <_malloc_r+0x2d4>
1000349c:	001013c0 	call	1001013c <__malloc_lock>
100034a0:	00800184 	movi	r2,6
100034a4:	01000084 	movi	r4,2
100034a8:	04c40074 	movhi	r19,4097
100034ac:	1085883a 	add	r2,r2,r2
100034b0:	9ccb9704 	addi	r19,r19,11868
100034b4:	1085883a 	add	r2,r2,r2
100034b8:	9885883a 	add	r2,r19,r2
100034bc:	14000117 	ldw	r16,4(r2)
100034c0:	10fffe04 	addi	r3,r2,-8
100034c4:	80c0d926 	beq	r16,r3,1000382c <_malloc_r+0x5d0>
100034c8:	80c00117 	ldw	r3,4(r16)
100034cc:	81000317 	ldw	r4,12(r16)
100034d0:	00bfff04 	movi	r2,-4
100034d4:	1884703a 	and	r2,r3,r2
100034d8:	81400217 	ldw	r5,8(r16)
100034dc:	8085883a 	add	r2,r16,r2
100034e0:	10c00117 	ldw	r3,4(r2)
100034e4:	29000315 	stw	r4,12(r5)
100034e8:	21400215 	stw	r5,8(r4)
100034ec:	18c00054 	ori	r3,r3,1
100034f0:	10c00115 	stw	r3,4(r2)
100034f4:	9009883a 	mov	r4,r18
100034f8:	00101600 	call	10010160 <__malloc_unlock>
100034fc:	80800204 	addi	r2,r16,8
10003500:	dfc00a17 	ldw	ra,40(sp)
10003504:	df000917 	ldw	fp,36(sp)
10003508:	ddc00817 	ldw	r23,32(sp)
1000350c:	dd800717 	ldw	r22,28(sp)
10003510:	dd400617 	ldw	r21,24(sp)
10003514:	dd000517 	ldw	r20,20(sp)
10003518:	dcc00417 	ldw	r19,16(sp)
1000351c:	dc800317 	ldw	r18,12(sp)
10003520:	dc400217 	ldw	r17,8(sp)
10003524:	dc000117 	ldw	r16,4(sp)
10003528:	dec00b04 	addi	sp,sp,44
1000352c:	f800283a 	ret
10003530:	00800304 	movi	r2,12
10003534:	90800015 	stw	r2,0(r18)
10003538:	0005883a 	mov	r2,zero
1000353c:	003ff006 	br	10003500 <__alt_data_end+0xf8003500>
10003540:	01002004 	movi	r4,128
10003544:	02001004 	movi	r8,64
10003548:	01c00fc4 	movi	r7,63
1000354c:	003f6106 	br	100032d4 <__alt_data_end+0xf80032d4>
10003550:	4009883a 	mov	r4,r8
10003554:	003f7506 	br	1000332c <__alt_data_end+0xf800332c>
10003558:	81000317 	ldw	r4,12(r16)
1000355c:	003fde06 	br	100034d8 <__alt_data_end+0xf80034d8>
10003560:	81c5883a 	add	r2,r16,r7
10003564:	11400117 	ldw	r5,4(r2)
10003568:	9009883a 	mov	r4,r18
1000356c:	29400054 	ori	r5,r5,1
10003570:	11400115 	stw	r5,4(r2)
10003574:	00101600 	call	10010160 <__malloc_unlock>
10003578:	80800204 	addi	r2,r16,8
1000357c:	003fe006 	br	10003500 <__alt_data_end+0xf8003500>
10003580:	9c000217 	ldw	r16,8(r19)
10003584:	00bfff04 	movi	r2,-4
10003588:	85800117 	ldw	r22,4(r16)
1000358c:	b0ac703a 	and	r22,r22,r2
10003590:	b4400336 	bltu	r22,r17,100035a0 <_malloc_r+0x344>
10003594:	b445c83a 	sub	r2,r22,r17
10003598:	00c003c4 	movi	r3,15
1000359c:	18805d16 	blt	r3,r2,10003714 <_malloc_r+0x4b8>
100035a0:	05c40074 	movhi	r23,4097
100035a4:	00840074 	movhi	r2,4097
100035a8:	10987704 	addi	r2,r2,25052
100035ac:	bdd14c04 	addi	r23,r23,17712
100035b0:	15400017 	ldw	r21,0(r2)
100035b4:	b8c00017 	ldw	r3,0(r23)
100035b8:	00bfffc4 	movi	r2,-1
100035bc:	858d883a 	add	r6,r16,r22
100035c0:	8d6b883a 	add	r21,r17,r21
100035c4:	1880ea26 	beq	r3,r2,10003970 <_malloc_r+0x714>
100035c8:	ad4403c4 	addi	r21,r21,4111
100035cc:	00bc0004 	movi	r2,-4096
100035d0:	a8aa703a 	and	r21,r21,r2
100035d4:	a80b883a 	mov	r5,r21
100035d8:	9009883a 	mov	r4,r18
100035dc:	d9800015 	stw	r6,0(sp)
100035e0:	00046040 	call	10004604 <_sbrk_r>
100035e4:	1029883a 	mov	r20,r2
100035e8:	00bfffc4 	movi	r2,-1
100035ec:	d9800017 	ldw	r6,0(sp)
100035f0:	a080e826 	beq	r20,r2,10003994 <_malloc_r+0x738>
100035f4:	a180a636 	bltu	r20,r6,10003890 <_malloc_r+0x634>
100035f8:	07040074 	movhi	fp,4097
100035fc:	e7188204 	addi	fp,fp,25096
10003600:	e0800017 	ldw	r2,0(fp)
10003604:	a887883a 	add	r3,r21,r2
10003608:	e0c00015 	stw	r3,0(fp)
1000360c:	3500e626 	beq	r6,r20,100039a8 <_malloc_r+0x74c>
10003610:	b9000017 	ldw	r4,0(r23)
10003614:	00bfffc4 	movi	r2,-1
10003618:	2080ee26 	beq	r4,r2,100039d4 <_malloc_r+0x778>
1000361c:	a185c83a 	sub	r2,r20,r6
10003620:	10c5883a 	add	r2,r2,r3
10003624:	e0800015 	stw	r2,0(fp)
10003628:	a0c001cc 	andi	r3,r20,7
1000362c:	1800bc26 	beq	r3,zero,10003920 <_malloc_r+0x6c4>
10003630:	a0e9c83a 	sub	r20,r20,r3
10003634:	00840204 	movi	r2,4104
10003638:	a5000204 	addi	r20,r20,8
1000363c:	10c7c83a 	sub	r3,r2,r3
10003640:	a545883a 	add	r2,r20,r21
10003644:	1083ffcc 	andi	r2,r2,4095
10003648:	18abc83a 	sub	r21,r3,r2
1000364c:	a80b883a 	mov	r5,r21
10003650:	9009883a 	mov	r4,r18
10003654:	00046040 	call	10004604 <_sbrk_r>
10003658:	00ffffc4 	movi	r3,-1
1000365c:	10c0e126 	beq	r2,r3,100039e4 <_malloc_r+0x788>
10003660:	1505c83a 	sub	r2,r2,r20
10003664:	1545883a 	add	r2,r2,r21
10003668:	10800054 	ori	r2,r2,1
1000366c:	e0c00017 	ldw	r3,0(fp)
10003670:	9d000215 	stw	r20,8(r19)
10003674:	a0800115 	stw	r2,4(r20)
10003678:	a8c7883a 	add	r3,r21,r3
1000367c:	e0c00015 	stw	r3,0(fp)
10003680:	84c00e26 	beq	r16,r19,100036bc <_malloc_r+0x460>
10003684:	018003c4 	movi	r6,15
10003688:	3580a72e 	bgeu	r6,r22,10003928 <_malloc_r+0x6cc>
1000368c:	81400117 	ldw	r5,4(r16)
10003690:	013ffe04 	movi	r4,-8
10003694:	b0bffd04 	addi	r2,r22,-12
10003698:	1104703a 	and	r2,r2,r4
1000369c:	2900004c 	andi	r4,r5,1
100036a0:	2088b03a 	or	r4,r4,r2
100036a4:	81000115 	stw	r4,4(r16)
100036a8:	01400144 	movi	r5,5
100036ac:	8089883a 	add	r4,r16,r2
100036b0:	21400115 	stw	r5,4(r4)
100036b4:	21400215 	stw	r5,8(r4)
100036b8:	3080cd36 	bltu	r6,r2,100039f0 <_malloc_r+0x794>
100036bc:	00840074 	movhi	r2,4097
100036c0:	10987604 	addi	r2,r2,25048
100036c4:	11000017 	ldw	r4,0(r2)
100036c8:	20c0012e 	bgeu	r4,r3,100036d0 <_malloc_r+0x474>
100036cc:	10c00015 	stw	r3,0(r2)
100036d0:	00840074 	movhi	r2,4097
100036d4:	10987504 	addi	r2,r2,25044
100036d8:	11000017 	ldw	r4,0(r2)
100036dc:	9c000217 	ldw	r16,8(r19)
100036e0:	20c0012e 	bgeu	r4,r3,100036e8 <_malloc_r+0x48c>
100036e4:	10c00015 	stw	r3,0(r2)
100036e8:	80c00117 	ldw	r3,4(r16)
100036ec:	00bfff04 	movi	r2,-4
100036f0:	1886703a 	and	r3,r3,r2
100036f4:	1c45c83a 	sub	r2,r3,r17
100036f8:	1c400236 	bltu	r3,r17,10003704 <_malloc_r+0x4a8>
100036fc:	00c003c4 	movi	r3,15
10003700:	18800416 	blt	r3,r2,10003714 <_malloc_r+0x4b8>
10003704:	9009883a 	mov	r4,r18
10003708:	00101600 	call	10010160 <__malloc_unlock>
1000370c:	0005883a 	mov	r2,zero
10003710:	003f7b06 	br	10003500 <__alt_data_end+0xf8003500>
10003714:	88c00054 	ori	r3,r17,1
10003718:	80c00115 	stw	r3,4(r16)
1000371c:	8463883a 	add	r17,r16,r17
10003720:	10800054 	ori	r2,r2,1
10003724:	9c400215 	stw	r17,8(r19)
10003728:	88800115 	stw	r2,4(r17)
1000372c:	9009883a 	mov	r4,r18
10003730:	00101600 	call	10010160 <__malloc_unlock>
10003734:	80800204 	addi	r2,r16,8
10003738:	003f7106 	br	10003500 <__alt_data_end+0xf8003500>
1000373c:	00c00504 	movi	r3,20
10003740:	18804a2e 	bgeu	r3,r2,1000386c <_malloc_r+0x610>
10003744:	00c01504 	movi	r3,84
10003748:	18806e36 	bltu	r3,r2,10003904 <_malloc_r+0x6a8>
1000374c:	8804d33a 	srli	r2,r17,12
10003750:	12001bc4 	addi	r8,r2,111
10003754:	11c01b84 	addi	r7,r2,110
10003758:	4209883a 	add	r4,r8,r8
1000375c:	003edd06 	br	100032d4 <__alt_data_end+0xf80032d4>
10003760:	3804d27a 	srli	r2,r7,9
10003764:	00c00104 	movi	r3,4
10003768:	1880442e 	bgeu	r3,r2,1000387c <_malloc_r+0x620>
1000376c:	00c00504 	movi	r3,20
10003770:	18808136 	bltu	r3,r2,10003978 <_malloc_r+0x71c>
10003774:	11401704 	addi	r5,r2,92
10003778:	10c016c4 	addi	r3,r2,91
1000377c:	294b883a 	add	r5,r5,r5
10003780:	294b883a 	add	r5,r5,r5
10003784:	294b883a 	add	r5,r5,r5
10003788:	994b883a 	add	r5,r19,r5
1000378c:	28800017 	ldw	r2,0(r5)
10003790:	01840074 	movhi	r6,4097
10003794:	297ffe04 	addi	r5,r5,-8
10003798:	318b9704 	addi	r6,r6,11868
1000379c:	28806526 	beq	r5,r2,10003934 <_malloc_r+0x6d8>
100037a0:	01bfff04 	movi	r6,-4
100037a4:	10c00117 	ldw	r3,4(r2)
100037a8:	1986703a 	and	r3,r3,r6
100037ac:	38c0022e 	bgeu	r7,r3,100037b8 <_malloc_r+0x55c>
100037b0:	10800217 	ldw	r2,8(r2)
100037b4:	28bffb1e 	bne	r5,r2,100037a4 <__alt_data_end+0xf80037a4>
100037b8:	11400317 	ldw	r5,12(r2)
100037bc:	98c00117 	ldw	r3,4(r19)
100037c0:	81400315 	stw	r5,12(r16)
100037c4:	80800215 	stw	r2,8(r16)
100037c8:	2c000215 	stw	r16,8(r5)
100037cc:	14000315 	stw	r16,12(r2)
100037d0:	003ef806 	br	100033b4 <__alt_data_end+0xf80033b4>
100037d4:	88c00054 	ori	r3,r17,1
100037d8:	80c00115 	stw	r3,4(r16)
100037dc:	8463883a 	add	r17,r16,r17
100037e0:	34400515 	stw	r17,20(r6)
100037e4:	34400415 	stw	r17,16(r6)
100037e8:	10c00054 	ori	r3,r2,1
100037ec:	8a000315 	stw	r8,12(r17)
100037f0:	8a000215 	stw	r8,8(r17)
100037f4:	88c00115 	stw	r3,4(r17)
100037f8:	88a3883a 	add	r17,r17,r2
100037fc:	88800015 	stw	r2,0(r17)
10003800:	9009883a 	mov	r4,r18
10003804:	00101600 	call	10010160 <__malloc_unlock>
10003808:	80800204 	addi	r2,r16,8
1000380c:	003f3c06 	br	10003500 <__alt_data_end+0xf8003500>
10003810:	30c00117 	ldw	r3,4(r6)
10003814:	003ee706 	br	100033b4 <__alt_data_end+0xf80033b4>
10003818:	5ac00044 	addi	r11,r11,1
1000381c:	588000cc 	andi	r2,r11,3
10003820:	31800204 	addi	r6,r6,8
10003824:	103efd1e 	bne	r2,zero,1000341c <__alt_data_end+0xf800341c>
10003828:	00002406 	br	100038bc <_malloc_r+0x660>
1000382c:	14000317 	ldw	r16,12(r2)
10003830:	143f251e 	bne	r2,r16,100034c8 <__alt_data_end+0xf80034c8>
10003834:	21000084 	addi	r4,r4,2
10003838:	003ebc06 	br	1000332c <__alt_data_end+0xf800332c>
1000383c:	8085883a 	add	r2,r16,r2
10003840:	10c00117 	ldw	r3,4(r2)
10003844:	81000317 	ldw	r4,12(r16)
10003848:	81400217 	ldw	r5,8(r16)
1000384c:	18c00054 	ori	r3,r3,1
10003850:	10c00115 	stw	r3,4(r2)
10003854:	29000315 	stw	r4,12(r5)
10003858:	21400215 	stw	r5,8(r4)
1000385c:	9009883a 	mov	r4,r18
10003860:	00101600 	call	10010160 <__malloc_unlock>
10003864:	80800204 	addi	r2,r16,8
10003868:	003f2506 	br	10003500 <__alt_data_end+0xf8003500>
1000386c:	12001704 	addi	r8,r2,92
10003870:	11c016c4 	addi	r7,r2,91
10003874:	4209883a 	add	r4,r8,r8
10003878:	003e9606 	br	100032d4 <__alt_data_end+0xf80032d4>
1000387c:	3804d1ba 	srli	r2,r7,6
10003880:	11400e44 	addi	r5,r2,57
10003884:	10c00e04 	addi	r3,r2,56
10003888:	294b883a 	add	r5,r5,r5
1000388c:	003fbc06 	br	10003780 <__alt_data_end+0xf8003780>
10003890:	84ff5926 	beq	r16,r19,100035f8 <__alt_data_end+0xf80035f8>
10003894:	00840074 	movhi	r2,4097
10003898:	108b9704 	addi	r2,r2,11868
1000389c:	14000217 	ldw	r16,8(r2)
100038a0:	00bfff04 	movi	r2,-4
100038a4:	80c00117 	ldw	r3,4(r16)
100038a8:	1886703a 	and	r3,r3,r2
100038ac:	003f9106 	br	100036f4 <__alt_data_end+0xf80036f4>
100038b0:	60800217 	ldw	r2,8(r12)
100038b4:	213fffc4 	addi	r4,r4,-1
100038b8:	1300651e 	bne	r2,r12,10003a50 <_malloc_r+0x7f4>
100038bc:	208000cc 	andi	r2,r4,3
100038c0:	633ffe04 	addi	r12,r12,-8
100038c4:	103ffa1e 	bne	r2,zero,100038b0 <__alt_data_end+0xf80038b0>
100038c8:	98800117 	ldw	r2,4(r19)
100038cc:	0146303a 	nor	r3,zero,r5
100038d0:	1884703a 	and	r2,r3,r2
100038d4:	98800115 	stw	r2,4(r19)
100038d8:	294b883a 	add	r5,r5,r5
100038dc:	117f2836 	bltu	r2,r5,10003580 <__alt_data_end+0xf8003580>
100038e0:	283f2726 	beq	r5,zero,10003580 <__alt_data_end+0xf8003580>
100038e4:	2886703a 	and	r3,r5,r2
100038e8:	5809883a 	mov	r4,r11
100038ec:	183ec31e 	bne	r3,zero,100033fc <__alt_data_end+0xf80033fc>
100038f0:	294b883a 	add	r5,r5,r5
100038f4:	2886703a 	and	r3,r5,r2
100038f8:	21000104 	addi	r4,r4,4
100038fc:	183ffc26 	beq	r3,zero,100038f0 <__alt_data_end+0xf80038f0>
10003900:	003ebe06 	br	100033fc <__alt_data_end+0xf80033fc>
10003904:	00c05504 	movi	r3,340
10003908:	18801236 	bltu	r3,r2,10003954 <_malloc_r+0x6f8>
1000390c:	8804d3fa 	srli	r2,r17,15
10003910:	12001e04 	addi	r8,r2,120
10003914:	11c01dc4 	addi	r7,r2,119
10003918:	4209883a 	add	r4,r8,r8
1000391c:	003e6d06 	br	100032d4 <__alt_data_end+0xf80032d4>
10003920:	00c40004 	movi	r3,4096
10003924:	003f4606 	br	10003640 <__alt_data_end+0xf8003640>
10003928:	00800044 	movi	r2,1
1000392c:	a0800115 	stw	r2,4(r20)
10003930:	003f7406 	br	10003704 <__alt_data_end+0xf8003704>
10003934:	1805d0ba 	srai	r2,r3,2
10003938:	01c00044 	movi	r7,1
1000393c:	30c00117 	ldw	r3,4(r6)
10003940:	388e983a 	sll	r7,r7,r2
10003944:	2805883a 	mov	r2,r5
10003948:	38c6b03a 	or	r3,r7,r3
1000394c:	30c00115 	stw	r3,4(r6)
10003950:	003f9b06 	br	100037c0 <__alt_data_end+0xf80037c0>
10003954:	00c15504 	movi	r3,1364
10003958:	18801a36 	bltu	r3,r2,100039c4 <_malloc_r+0x768>
1000395c:	8804d4ba 	srli	r2,r17,18
10003960:	12001f44 	addi	r8,r2,125
10003964:	11c01f04 	addi	r7,r2,124
10003968:	4209883a 	add	r4,r8,r8
1000396c:	003e5906 	br	100032d4 <__alt_data_end+0xf80032d4>
10003970:	ad400404 	addi	r21,r21,16
10003974:	003f1706 	br	100035d4 <__alt_data_end+0xf80035d4>
10003978:	00c01504 	movi	r3,84
1000397c:	18802336 	bltu	r3,r2,10003a0c <_malloc_r+0x7b0>
10003980:	3804d33a 	srli	r2,r7,12
10003984:	11401bc4 	addi	r5,r2,111
10003988:	10c01b84 	addi	r3,r2,110
1000398c:	294b883a 	add	r5,r5,r5
10003990:	003f7b06 	br	10003780 <__alt_data_end+0xf8003780>
10003994:	9c000217 	ldw	r16,8(r19)
10003998:	00bfff04 	movi	r2,-4
1000399c:	80c00117 	ldw	r3,4(r16)
100039a0:	1886703a 	and	r3,r3,r2
100039a4:	003f5306 	br	100036f4 <__alt_data_end+0xf80036f4>
100039a8:	3083ffcc 	andi	r2,r6,4095
100039ac:	103f181e 	bne	r2,zero,10003610 <__alt_data_end+0xf8003610>
100039b0:	99000217 	ldw	r4,8(r19)
100039b4:	b545883a 	add	r2,r22,r21
100039b8:	10800054 	ori	r2,r2,1
100039bc:	20800115 	stw	r2,4(r4)
100039c0:	003f3e06 	br	100036bc <__alt_data_end+0xf80036bc>
100039c4:	01003f84 	movi	r4,254
100039c8:	02001fc4 	movi	r8,127
100039cc:	01c01f84 	movi	r7,126
100039d0:	003e4006 	br	100032d4 <__alt_data_end+0xf80032d4>
100039d4:	00840074 	movhi	r2,4097
100039d8:	10914c04 	addi	r2,r2,17712
100039dc:	15000015 	stw	r20,0(r2)
100039e0:	003f1106 	br	10003628 <__alt_data_end+0xf8003628>
100039e4:	00800044 	movi	r2,1
100039e8:	002b883a 	mov	r21,zero
100039ec:	003f1f06 	br	1000366c <__alt_data_end+0xf800366c>
100039f0:	81400204 	addi	r5,r16,8
100039f4:	9009883a 	mov	r4,r18
100039f8:	00024dc0 	call	100024dc <_free_r>
100039fc:	00840074 	movhi	r2,4097
10003a00:	10988204 	addi	r2,r2,25096
10003a04:	10c00017 	ldw	r3,0(r2)
10003a08:	003f2c06 	br	100036bc <__alt_data_end+0xf80036bc>
10003a0c:	00c05504 	movi	r3,340
10003a10:	18800536 	bltu	r3,r2,10003a28 <_malloc_r+0x7cc>
10003a14:	3804d3fa 	srli	r2,r7,15
10003a18:	11401e04 	addi	r5,r2,120
10003a1c:	10c01dc4 	addi	r3,r2,119
10003a20:	294b883a 	add	r5,r5,r5
10003a24:	003f5606 	br	10003780 <__alt_data_end+0xf8003780>
10003a28:	00c15504 	movi	r3,1364
10003a2c:	18800536 	bltu	r3,r2,10003a44 <_malloc_r+0x7e8>
10003a30:	3804d4ba 	srli	r2,r7,18
10003a34:	11401f44 	addi	r5,r2,125
10003a38:	10c01f04 	addi	r3,r2,124
10003a3c:	294b883a 	add	r5,r5,r5
10003a40:	003f4f06 	br	10003780 <__alt_data_end+0xf8003780>
10003a44:	01403f84 	movi	r5,254
10003a48:	00c01f84 	movi	r3,126
10003a4c:	003f4c06 	br	10003780 <__alt_data_end+0xf8003780>
10003a50:	98800117 	ldw	r2,4(r19)
10003a54:	003fa006 	br	100038d8 <__alt_data_end+0xf80038d8>
10003a58:	8808d0fa 	srli	r4,r17,3
10003a5c:	20800044 	addi	r2,r4,1
10003a60:	1085883a 	add	r2,r2,r2
10003a64:	003e9006 	br	100034a8 <__alt_data_end+0xf80034a8>

10003a68 <memcpy>:
10003a68:	defffd04 	addi	sp,sp,-12
10003a6c:	dfc00215 	stw	ra,8(sp)
10003a70:	dc400115 	stw	r17,4(sp)
10003a74:	dc000015 	stw	r16,0(sp)
10003a78:	00c003c4 	movi	r3,15
10003a7c:	2005883a 	mov	r2,r4
10003a80:	1980452e 	bgeu	r3,r6,10003b98 <memcpy+0x130>
10003a84:	2906b03a 	or	r3,r5,r4
10003a88:	18c000cc 	andi	r3,r3,3
10003a8c:	1800441e 	bne	r3,zero,10003ba0 <memcpy+0x138>
10003a90:	347ffc04 	addi	r17,r6,-16
10003a94:	8822d13a 	srli	r17,r17,4
10003a98:	28c00104 	addi	r3,r5,4
10003a9c:	23400104 	addi	r13,r4,4
10003aa0:	8820913a 	slli	r16,r17,4
10003aa4:	2b000204 	addi	r12,r5,8
10003aa8:	22c00204 	addi	r11,r4,8
10003aac:	84000504 	addi	r16,r16,20
10003ab0:	2a800304 	addi	r10,r5,12
10003ab4:	22400304 	addi	r9,r4,12
10003ab8:	2c21883a 	add	r16,r5,r16
10003abc:	2811883a 	mov	r8,r5
10003ac0:	200f883a 	mov	r7,r4
10003ac4:	41000017 	ldw	r4,0(r8)
10003ac8:	1fc00017 	ldw	ra,0(r3)
10003acc:	63c00017 	ldw	r15,0(r12)
10003ad0:	39000015 	stw	r4,0(r7)
10003ad4:	53800017 	ldw	r14,0(r10)
10003ad8:	6fc00015 	stw	ra,0(r13)
10003adc:	5bc00015 	stw	r15,0(r11)
10003ae0:	4b800015 	stw	r14,0(r9)
10003ae4:	18c00404 	addi	r3,r3,16
10003ae8:	39c00404 	addi	r7,r7,16
10003aec:	42000404 	addi	r8,r8,16
10003af0:	6b400404 	addi	r13,r13,16
10003af4:	63000404 	addi	r12,r12,16
10003af8:	5ac00404 	addi	r11,r11,16
10003afc:	52800404 	addi	r10,r10,16
10003b00:	4a400404 	addi	r9,r9,16
10003b04:	1c3fef1e 	bne	r3,r16,10003ac4 <__alt_data_end+0xf8003ac4>
10003b08:	89c00044 	addi	r7,r17,1
10003b0c:	380e913a 	slli	r7,r7,4
10003b10:	310003cc 	andi	r4,r6,15
10003b14:	02c000c4 	movi	r11,3
10003b18:	11c7883a 	add	r3,r2,r7
10003b1c:	29cb883a 	add	r5,r5,r7
10003b20:	5900212e 	bgeu	r11,r4,10003ba8 <memcpy+0x140>
10003b24:	1813883a 	mov	r9,r3
10003b28:	2811883a 	mov	r8,r5
10003b2c:	200f883a 	mov	r7,r4
10003b30:	42800017 	ldw	r10,0(r8)
10003b34:	4a400104 	addi	r9,r9,4
10003b38:	39ffff04 	addi	r7,r7,-4
10003b3c:	4abfff15 	stw	r10,-4(r9)
10003b40:	42000104 	addi	r8,r8,4
10003b44:	59fffa36 	bltu	r11,r7,10003b30 <__alt_data_end+0xf8003b30>
10003b48:	213fff04 	addi	r4,r4,-4
10003b4c:	2008d0ba 	srli	r4,r4,2
10003b50:	318000cc 	andi	r6,r6,3
10003b54:	21000044 	addi	r4,r4,1
10003b58:	2109883a 	add	r4,r4,r4
10003b5c:	2109883a 	add	r4,r4,r4
10003b60:	1907883a 	add	r3,r3,r4
10003b64:	290b883a 	add	r5,r5,r4
10003b68:	30000626 	beq	r6,zero,10003b84 <memcpy+0x11c>
10003b6c:	198d883a 	add	r6,r3,r6
10003b70:	29c00003 	ldbu	r7,0(r5)
10003b74:	18c00044 	addi	r3,r3,1
10003b78:	29400044 	addi	r5,r5,1
10003b7c:	19ffffc5 	stb	r7,-1(r3)
10003b80:	19bffb1e 	bne	r3,r6,10003b70 <__alt_data_end+0xf8003b70>
10003b84:	dfc00217 	ldw	ra,8(sp)
10003b88:	dc400117 	ldw	r17,4(sp)
10003b8c:	dc000017 	ldw	r16,0(sp)
10003b90:	dec00304 	addi	sp,sp,12
10003b94:	f800283a 	ret
10003b98:	2007883a 	mov	r3,r4
10003b9c:	003ff206 	br	10003b68 <__alt_data_end+0xf8003b68>
10003ba0:	2007883a 	mov	r3,r4
10003ba4:	003ff106 	br	10003b6c <__alt_data_end+0xf8003b6c>
10003ba8:	200d883a 	mov	r6,r4
10003bac:	003fee06 	br	10003b68 <__alt_data_end+0xf8003b68>

10003bb0 <memset>:
10003bb0:	20c000cc 	andi	r3,r4,3
10003bb4:	2005883a 	mov	r2,r4
10003bb8:	18004426 	beq	r3,zero,10003ccc <memset+0x11c>
10003bbc:	31ffffc4 	addi	r7,r6,-1
10003bc0:	30004026 	beq	r6,zero,10003cc4 <memset+0x114>
10003bc4:	2813883a 	mov	r9,r5
10003bc8:	200d883a 	mov	r6,r4
10003bcc:	2007883a 	mov	r3,r4
10003bd0:	00000406 	br	10003be4 <memset+0x34>
10003bd4:	3a3fffc4 	addi	r8,r7,-1
10003bd8:	31800044 	addi	r6,r6,1
10003bdc:	38003926 	beq	r7,zero,10003cc4 <memset+0x114>
10003be0:	400f883a 	mov	r7,r8
10003be4:	18c00044 	addi	r3,r3,1
10003be8:	32400005 	stb	r9,0(r6)
10003bec:	1a0000cc 	andi	r8,r3,3
10003bf0:	403ff81e 	bne	r8,zero,10003bd4 <__alt_data_end+0xf8003bd4>
10003bf4:	010000c4 	movi	r4,3
10003bf8:	21c02d2e 	bgeu	r4,r7,10003cb0 <memset+0x100>
10003bfc:	29003fcc 	andi	r4,r5,255
10003c00:	200c923a 	slli	r6,r4,8
10003c04:	3108b03a 	or	r4,r6,r4
10003c08:	200c943a 	slli	r6,r4,16
10003c0c:	218cb03a 	or	r6,r4,r6
10003c10:	010003c4 	movi	r4,15
10003c14:	21c0182e 	bgeu	r4,r7,10003c78 <memset+0xc8>
10003c18:	3b3ffc04 	addi	r12,r7,-16
10003c1c:	6018d13a 	srli	r12,r12,4
10003c20:	1a000104 	addi	r8,r3,4
10003c24:	1ac00204 	addi	r11,r3,8
10003c28:	6008913a 	slli	r4,r12,4
10003c2c:	1a800304 	addi	r10,r3,12
10003c30:	1813883a 	mov	r9,r3
10003c34:	21000504 	addi	r4,r4,20
10003c38:	1909883a 	add	r4,r3,r4
10003c3c:	49800015 	stw	r6,0(r9)
10003c40:	41800015 	stw	r6,0(r8)
10003c44:	59800015 	stw	r6,0(r11)
10003c48:	51800015 	stw	r6,0(r10)
10003c4c:	42000404 	addi	r8,r8,16
10003c50:	4a400404 	addi	r9,r9,16
10003c54:	5ac00404 	addi	r11,r11,16
10003c58:	52800404 	addi	r10,r10,16
10003c5c:	413ff71e 	bne	r8,r4,10003c3c <__alt_data_end+0xf8003c3c>
10003c60:	63000044 	addi	r12,r12,1
10003c64:	6018913a 	slli	r12,r12,4
10003c68:	39c003cc 	andi	r7,r7,15
10003c6c:	010000c4 	movi	r4,3
10003c70:	1b07883a 	add	r3,r3,r12
10003c74:	21c00e2e 	bgeu	r4,r7,10003cb0 <memset+0x100>
10003c78:	1813883a 	mov	r9,r3
10003c7c:	3811883a 	mov	r8,r7
10003c80:	010000c4 	movi	r4,3
10003c84:	49800015 	stw	r6,0(r9)
10003c88:	423fff04 	addi	r8,r8,-4
10003c8c:	4a400104 	addi	r9,r9,4
10003c90:	223ffc36 	bltu	r4,r8,10003c84 <__alt_data_end+0xf8003c84>
10003c94:	393fff04 	addi	r4,r7,-4
10003c98:	2008d0ba 	srli	r4,r4,2
10003c9c:	39c000cc 	andi	r7,r7,3
10003ca0:	21000044 	addi	r4,r4,1
10003ca4:	2109883a 	add	r4,r4,r4
10003ca8:	2109883a 	add	r4,r4,r4
10003cac:	1907883a 	add	r3,r3,r4
10003cb0:	38000526 	beq	r7,zero,10003cc8 <memset+0x118>
10003cb4:	19cf883a 	add	r7,r3,r7
10003cb8:	19400005 	stb	r5,0(r3)
10003cbc:	18c00044 	addi	r3,r3,1
10003cc0:	38fffd1e 	bne	r7,r3,10003cb8 <__alt_data_end+0xf8003cb8>
10003cc4:	f800283a 	ret
10003cc8:	f800283a 	ret
10003ccc:	2007883a 	mov	r3,r4
10003cd0:	300f883a 	mov	r7,r6
10003cd4:	003fc706 	br	10003bf4 <__alt_data_end+0xf8003bf4>

10003cd8 <_open_r>:
10003cd8:	defffd04 	addi	sp,sp,-12
10003cdc:	2805883a 	mov	r2,r5
10003ce0:	dc000015 	stw	r16,0(sp)
10003ce4:	04040074 	movhi	r16,4097
10003ce8:	dc400115 	stw	r17,4(sp)
10003cec:	300b883a 	mov	r5,r6
10003cf0:	84187404 	addi	r16,r16,25040
10003cf4:	2023883a 	mov	r17,r4
10003cf8:	380d883a 	mov	r6,r7
10003cfc:	1009883a 	mov	r4,r2
10003d00:	dfc00215 	stw	ra,8(sp)
10003d04:	80000015 	stw	zero,0(r16)
10003d08:	00102ac0 	call	100102ac <open>
10003d0c:	00ffffc4 	movi	r3,-1
10003d10:	10c00526 	beq	r2,r3,10003d28 <_open_r+0x50>
10003d14:	dfc00217 	ldw	ra,8(sp)
10003d18:	dc400117 	ldw	r17,4(sp)
10003d1c:	dc000017 	ldw	r16,0(sp)
10003d20:	dec00304 	addi	sp,sp,12
10003d24:	f800283a 	ret
10003d28:	80c00017 	ldw	r3,0(r16)
10003d2c:	183ff926 	beq	r3,zero,10003d14 <__alt_data_end+0xf8003d14>
10003d30:	88c00015 	stw	r3,0(r17)
10003d34:	003ff706 	br	10003d14 <__alt_data_end+0xf8003d14>

10003d38 <_printf_r>:
10003d38:	defffd04 	addi	sp,sp,-12
10003d3c:	2805883a 	mov	r2,r5
10003d40:	dfc00015 	stw	ra,0(sp)
10003d44:	d9800115 	stw	r6,4(sp)
10003d48:	d9c00215 	stw	r7,8(sp)
10003d4c:	21400217 	ldw	r5,8(r4)
10003d50:	d9c00104 	addi	r7,sp,4
10003d54:	100d883a 	mov	r6,r2
10003d58:	00048440 	call	10004844 <___vfprintf_internal_r>
10003d5c:	dfc00017 	ldw	ra,0(sp)
10003d60:	dec00304 	addi	sp,sp,12
10003d64:	f800283a 	ret

10003d68 <printf>:
10003d68:	defffc04 	addi	sp,sp,-16
10003d6c:	dfc00015 	stw	ra,0(sp)
10003d70:	d9400115 	stw	r5,4(sp)
10003d74:	d9800215 	stw	r6,8(sp)
10003d78:	d9c00315 	stw	r7,12(sp)
10003d7c:	00840074 	movhi	r2,4097
10003d80:	10914b04 	addi	r2,r2,17708
10003d84:	10800017 	ldw	r2,0(r2)
10003d88:	200b883a 	mov	r5,r4
10003d8c:	d9800104 	addi	r6,sp,4
10003d90:	11000217 	ldw	r4,8(r2)
10003d94:	0006b200 	call	10006b20 <__vfprintf_internal>
10003d98:	dfc00017 	ldw	ra,0(sp)
10003d9c:	dec00404 	addi	sp,sp,16
10003da0:	f800283a 	ret

10003da4 <_putchar_r>:
10003da4:	21800217 	ldw	r6,8(r4)
10003da8:	000a2441 	jmpi	1000a244 <_putc_r>

10003dac <putchar>:
10003dac:	00840074 	movhi	r2,4097
10003db0:	10914b04 	addi	r2,r2,17708
10003db4:	200b883a 	mov	r5,r4
10003db8:	11000017 	ldw	r4,0(r2)
10003dbc:	21800217 	ldw	r6,8(r4)
10003dc0:	000a2441 	jmpi	1000a244 <_putc_r>

10003dc4 <_puts_r>:
10003dc4:	defff604 	addi	sp,sp,-40
10003dc8:	dc000715 	stw	r16,28(sp)
10003dcc:	2021883a 	mov	r16,r4
10003dd0:	2809883a 	mov	r4,r5
10003dd4:	dc400815 	stw	r17,32(sp)
10003dd8:	dfc00915 	stw	ra,36(sp)
10003ddc:	2823883a 	mov	r17,r5
10003de0:	00047940 	call	10004794 <strlen>
10003de4:	10c00044 	addi	r3,r2,1
10003de8:	d8800115 	stw	r2,4(sp)
10003dec:	00840074 	movhi	r2,4097
10003df0:	1089a304 	addi	r2,r2,9868
10003df4:	d8800215 	stw	r2,8(sp)
10003df8:	00800044 	movi	r2,1
10003dfc:	d8800315 	stw	r2,12(sp)
10003e00:	00800084 	movi	r2,2
10003e04:	dc400015 	stw	r17,0(sp)
10003e08:	d8c00615 	stw	r3,24(sp)
10003e0c:	dec00415 	stw	sp,16(sp)
10003e10:	d8800515 	stw	r2,20(sp)
10003e14:	80000226 	beq	r16,zero,10003e20 <_puts_r+0x5c>
10003e18:	80800e17 	ldw	r2,56(r16)
10003e1c:	10001426 	beq	r2,zero,10003e70 <_puts_r+0xac>
10003e20:	81400217 	ldw	r5,8(r16)
10003e24:	2880030b 	ldhu	r2,12(r5)
10003e28:	10c8000c 	andi	r3,r2,8192
10003e2c:	1800061e 	bne	r3,zero,10003e48 <_puts_r+0x84>
10003e30:	29001917 	ldw	r4,100(r5)
10003e34:	00f7ffc4 	movi	r3,-8193
10003e38:	10880014 	ori	r2,r2,8192
10003e3c:	20c6703a 	and	r3,r4,r3
10003e40:	2880030d 	sth	r2,12(r5)
10003e44:	28c01915 	stw	r3,100(r5)
10003e48:	d9800404 	addi	r6,sp,16
10003e4c:	8009883a 	mov	r4,r16
10003e50:	00088f40 	call	100088f4 <__sfvwrite_r>
10003e54:	1000091e 	bne	r2,zero,10003e7c <_puts_r+0xb8>
10003e58:	00800284 	movi	r2,10
10003e5c:	dfc00917 	ldw	ra,36(sp)
10003e60:	dc400817 	ldw	r17,32(sp)
10003e64:	dc000717 	ldw	r16,28(sp)
10003e68:	dec00a04 	addi	sp,sp,40
10003e6c:	f800283a 	ret
10003e70:	8009883a 	mov	r4,r16
10003e74:	0001f440 	call	10001f44 <__sinit>
10003e78:	003fe906 	br	10003e20 <__alt_data_end+0xf8003e20>
10003e7c:	00bfffc4 	movi	r2,-1
10003e80:	003ff606 	br	10003e5c <__alt_data_end+0xf8003e5c>

10003e84 <puts>:
10003e84:	00840074 	movhi	r2,4097
10003e88:	10914b04 	addi	r2,r2,17708
10003e8c:	200b883a 	mov	r5,r4
10003e90:	11000017 	ldw	r4,0(r2)
10003e94:	0003dc41 	jmpi	10003dc4 <_puts_r>

10003e98 <realloc>:
10003e98:	00840074 	movhi	r2,4097
10003e9c:	10914b04 	addi	r2,r2,17708
10003ea0:	280d883a 	mov	r6,r5
10003ea4:	200b883a 	mov	r5,r4
10003ea8:	11000017 	ldw	r4,0(r2)
10003eac:	0003eb01 	jmpi	10003eb0 <_realloc_r>

10003eb0 <_realloc_r>:
10003eb0:	defff604 	addi	sp,sp,-40
10003eb4:	dc800215 	stw	r18,8(sp)
10003eb8:	dfc00915 	stw	ra,36(sp)
10003ebc:	df000815 	stw	fp,32(sp)
10003ec0:	ddc00715 	stw	r23,28(sp)
10003ec4:	dd800615 	stw	r22,24(sp)
10003ec8:	dd400515 	stw	r21,20(sp)
10003ecc:	dd000415 	stw	r20,16(sp)
10003ed0:	dcc00315 	stw	r19,12(sp)
10003ed4:	dc400115 	stw	r17,4(sp)
10003ed8:	dc000015 	stw	r16,0(sp)
10003edc:	3025883a 	mov	r18,r6
10003ee0:	2800b726 	beq	r5,zero,100041c0 <_realloc_r+0x310>
10003ee4:	282b883a 	mov	r21,r5
10003ee8:	2029883a 	mov	r20,r4
10003eec:	001013c0 	call	1001013c <__malloc_lock>
10003ef0:	a8bfff17 	ldw	r2,-4(r21)
10003ef4:	043fff04 	movi	r16,-4
10003ef8:	90c002c4 	addi	r3,r18,11
10003efc:	01000584 	movi	r4,22
10003f00:	acfffe04 	addi	r19,r21,-8
10003f04:	1420703a 	and	r16,r2,r16
10003f08:	20c0332e 	bgeu	r4,r3,10003fd8 <_realloc_r+0x128>
10003f0c:	047ffe04 	movi	r17,-8
10003f10:	1c62703a 	and	r17,r3,r17
10003f14:	8807883a 	mov	r3,r17
10003f18:	88005816 	blt	r17,zero,1000407c <_realloc_r+0x1cc>
10003f1c:	8c805736 	bltu	r17,r18,1000407c <_realloc_r+0x1cc>
10003f20:	80c0300e 	bge	r16,r3,10003fe4 <_realloc_r+0x134>
10003f24:	07040074 	movhi	fp,4097
10003f28:	e70b9704 	addi	fp,fp,11868
10003f2c:	e1c00217 	ldw	r7,8(fp)
10003f30:	9c09883a 	add	r4,r19,r16
10003f34:	22000117 	ldw	r8,4(r4)
10003f38:	21c06326 	beq	r4,r7,100040c8 <_realloc_r+0x218>
10003f3c:	017fff84 	movi	r5,-2
10003f40:	414a703a 	and	r5,r8,r5
10003f44:	214b883a 	add	r5,r4,r5
10003f48:	29800117 	ldw	r6,4(r5)
10003f4c:	3180004c 	andi	r6,r6,1
10003f50:	30003f26 	beq	r6,zero,10004050 <_realloc_r+0x1a0>
10003f54:	1080004c 	andi	r2,r2,1
10003f58:	10008326 	beq	r2,zero,10004168 <_realloc_r+0x2b8>
10003f5c:	900b883a 	mov	r5,r18
10003f60:	a009883a 	mov	r4,r20
10003f64:	000325c0 	call	1000325c <_malloc_r>
10003f68:	1025883a 	mov	r18,r2
10003f6c:	10011e26 	beq	r2,zero,100043e8 <_realloc_r+0x538>
10003f70:	a93fff17 	ldw	r4,-4(r21)
10003f74:	10fffe04 	addi	r3,r2,-8
10003f78:	00bfff84 	movi	r2,-2
10003f7c:	2084703a 	and	r2,r4,r2
10003f80:	9885883a 	add	r2,r19,r2
10003f84:	1880ee26 	beq	r3,r2,10004340 <_realloc_r+0x490>
10003f88:	81bfff04 	addi	r6,r16,-4
10003f8c:	00800904 	movi	r2,36
10003f90:	1180b836 	bltu	r2,r6,10004274 <_realloc_r+0x3c4>
10003f94:	00c004c4 	movi	r3,19
10003f98:	19809636 	bltu	r3,r6,100041f4 <_realloc_r+0x344>
10003f9c:	9005883a 	mov	r2,r18
10003fa0:	a807883a 	mov	r3,r21
10003fa4:	19000017 	ldw	r4,0(r3)
10003fa8:	11000015 	stw	r4,0(r2)
10003fac:	19000117 	ldw	r4,4(r3)
10003fb0:	11000115 	stw	r4,4(r2)
10003fb4:	18c00217 	ldw	r3,8(r3)
10003fb8:	10c00215 	stw	r3,8(r2)
10003fbc:	a80b883a 	mov	r5,r21
10003fc0:	a009883a 	mov	r4,r20
10003fc4:	00024dc0 	call	100024dc <_free_r>
10003fc8:	a009883a 	mov	r4,r20
10003fcc:	00101600 	call	10010160 <__malloc_unlock>
10003fd0:	9005883a 	mov	r2,r18
10003fd4:	00001206 	br	10004020 <_realloc_r+0x170>
10003fd8:	00c00404 	movi	r3,16
10003fdc:	1823883a 	mov	r17,r3
10003fe0:	003fce06 	br	10003f1c <__alt_data_end+0xf8003f1c>
10003fe4:	a825883a 	mov	r18,r21
10003fe8:	8445c83a 	sub	r2,r16,r17
10003fec:	00c003c4 	movi	r3,15
10003ff0:	18802636 	bltu	r3,r2,1000408c <_realloc_r+0x1dc>
10003ff4:	99800117 	ldw	r6,4(r19)
10003ff8:	9c07883a 	add	r3,r19,r16
10003ffc:	3180004c 	andi	r6,r6,1
10004000:	3420b03a 	or	r16,r6,r16
10004004:	9c000115 	stw	r16,4(r19)
10004008:	18800117 	ldw	r2,4(r3)
1000400c:	10800054 	ori	r2,r2,1
10004010:	18800115 	stw	r2,4(r3)
10004014:	a009883a 	mov	r4,r20
10004018:	00101600 	call	10010160 <__malloc_unlock>
1000401c:	9005883a 	mov	r2,r18
10004020:	dfc00917 	ldw	ra,36(sp)
10004024:	df000817 	ldw	fp,32(sp)
10004028:	ddc00717 	ldw	r23,28(sp)
1000402c:	dd800617 	ldw	r22,24(sp)
10004030:	dd400517 	ldw	r21,20(sp)
10004034:	dd000417 	ldw	r20,16(sp)
10004038:	dcc00317 	ldw	r19,12(sp)
1000403c:	dc800217 	ldw	r18,8(sp)
10004040:	dc400117 	ldw	r17,4(sp)
10004044:	dc000017 	ldw	r16,0(sp)
10004048:	dec00a04 	addi	sp,sp,40
1000404c:	f800283a 	ret
10004050:	017fff04 	movi	r5,-4
10004054:	414a703a 	and	r5,r8,r5
10004058:	814d883a 	add	r6,r16,r5
1000405c:	30c01f16 	blt	r6,r3,100040dc <_realloc_r+0x22c>
10004060:	20800317 	ldw	r2,12(r4)
10004064:	20c00217 	ldw	r3,8(r4)
10004068:	a825883a 	mov	r18,r21
1000406c:	3021883a 	mov	r16,r6
10004070:	18800315 	stw	r2,12(r3)
10004074:	10c00215 	stw	r3,8(r2)
10004078:	003fdb06 	br	10003fe8 <__alt_data_end+0xf8003fe8>
1000407c:	00800304 	movi	r2,12
10004080:	a0800015 	stw	r2,0(r20)
10004084:	0005883a 	mov	r2,zero
10004088:	003fe506 	br	10004020 <__alt_data_end+0xf8004020>
1000408c:	98c00117 	ldw	r3,4(r19)
10004090:	9c4b883a 	add	r5,r19,r17
10004094:	11000054 	ori	r4,r2,1
10004098:	18c0004c 	andi	r3,r3,1
1000409c:	1c62b03a 	or	r17,r3,r17
100040a0:	9c400115 	stw	r17,4(r19)
100040a4:	29000115 	stw	r4,4(r5)
100040a8:	2885883a 	add	r2,r5,r2
100040ac:	10c00117 	ldw	r3,4(r2)
100040b0:	29400204 	addi	r5,r5,8
100040b4:	a009883a 	mov	r4,r20
100040b8:	18c00054 	ori	r3,r3,1
100040bc:	10c00115 	stw	r3,4(r2)
100040c0:	00024dc0 	call	100024dc <_free_r>
100040c4:	003fd306 	br	10004014 <__alt_data_end+0xf8004014>
100040c8:	017fff04 	movi	r5,-4
100040cc:	414a703a 	and	r5,r8,r5
100040d0:	89800404 	addi	r6,r17,16
100040d4:	8151883a 	add	r8,r16,r5
100040d8:	4180590e 	bge	r8,r6,10004240 <_realloc_r+0x390>
100040dc:	1080004c 	andi	r2,r2,1
100040e0:	103f9e1e 	bne	r2,zero,10003f5c <__alt_data_end+0xf8003f5c>
100040e4:	adbffe17 	ldw	r22,-8(r21)
100040e8:	00bfff04 	movi	r2,-4
100040ec:	9dadc83a 	sub	r22,r19,r22
100040f0:	b1800117 	ldw	r6,4(r22)
100040f4:	3084703a 	and	r2,r6,r2
100040f8:	20002026 	beq	r4,zero,1000417c <_realloc_r+0x2cc>
100040fc:	80af883a 	add	r23,r16,r2
10004100:	b96f883a 	add	r23,r23,r5
10004104:	21c05f26 	beq	r4,r7,10004284 <_realloc_r+0x3d4>
10004108:	b8c01c16 	blt	r23,r3,1000417c <_realloc_r+0x2cc>
1000410c:	20800317 	ldw	r2,12(r4)
10004110:	20c00217 	ldw	r3,8(r4)
10004114:	81bfff04 	addi	r6,r16,-4
10004118:	01000904 	movi	r4,36
1000411c:	18800315 	stw	r2,12(r3)
10004120:	10c00215 	stw	r3,8(r2)
10004124:	b0c00217 	ldw	r3,8(r22)
10004128:	b0800317 	ldw	r2,12(r22)
1000412c:	b4800204 	addi	r18,r22,8
10004130:	18800315 	stw	r2,12(r3)
10004134:	10c00215 	stw	r3,8(r2)
10004138:	21801b36 	bltu	r4,r6,100041a8 <_realloc_r+0x2f8>
1000413c:	008004c4 	movi	r2,19
10004140:	1180352e 	bgeu	r2,r6,10004218 <_realloc_r+0x368>
10004144:	a8800017 	ldw	r2,0(r21)
10004148:	b0800215 	stw	r2,8(r22)
1000414c:	a8800117 	ldw	r2,4(r21)
10004150:	b0800315 	stw	r2,12(r22)
10004154:	008006c4 	movi	r2,27
10004158:	11807f36 	bltu	r2,r6,10004358 <_realloc_r+0x4a8>
1000415c:	b0800404 	addi	r2,r22,16
10004160:	ad400204 	addi	r21,r21,8
10004164:	00002d06 	br	1000421c <_realloc_r+0x36c>
10004168:	adbffe17 	ldw	r22,-8(r21)
1000416c:	00bfff04 	movi	r2,-4
10004170:	9dadc83a 	sub	r22,r19,r22
10004174:	b1000117 	ldw	r4,4(r22)
10004178:	2084703a 	and	r2,r4,r2
1000417c:	b03f7726 	beq	r22,zero,10003f5c <__alt_data_end+0xf8003f5c>
10004180:	80af883a 	add	r23,r16,r2
10004184:	b8ff7516 	blt	r23,r3,10003f5c <__alt_data_end+0xf8003f5c>
10004188:	b0800317 	ldw	r2,12(r22)
1000418c:	b0c00217 	ldw	r3,8(r22)
10004190:	81bfff04 	addi	r6,r16,-4
10004194:	01000904 	movi	r4,36
10004198:	18800315 	stw	r2,12(r3)
1000419c:	10c00215 	stw	r3,8(r2)
100041a0:	b4800204 	addi	r18,r22,8
100041a4:	21bfe52e 	bgeu	r4,r6,1000413c <__alt_data_end+0xf800413c>
100041a8:	a80b883a 	mov	r5,r21
100041ac:	9009883a 	mov	r4,r18
100041b0:	00090300 	call	10009030 <memmove>
100041b4:	b821883a 	mov	r16,r23
100041b8:	b027883a 	mov	r19,r22
100041bc:	003f8a06 	br	10003fe8 <__alt_data_end+0xf8003fe8>
100041c0:	300b883a 	mov	r5,r6
100041c4:	dfc00917 	ldw	ra,36(sp)
100041c8:	df000817 	ldw	fp,32(sp)
100041cc:	ddc00717 	ldw	r23,28(sp)
100041d0:	dd800617 	ldw	r22,24(sp)
100041d4:	dd400517 	ldw	r21,20(sp)
100041d8:	dd000417 	ldw	r20,16(sp)
100041dc:	dcc00317 	ldw	r19,12(sp)
100041e0:	dc800217 	ldw	r18,8(sp)
100041e4:	dc400117 	ldw	r17,4(sp)
100041e8:	dc000017 	ldw	r16,0(sp)
100041ec:	dec00a04 	addi	sp,sp,40
100041f0:	000325c1 	jmpi	1000325c <_malloc_r>
100041f4:	a8c00017 	ldw	r3,0(r21)
100041f8:	90c00015 	stw	r3,0(r18)
100041fc:	a8c00117 	ldw	r3,4(r21)
10004200:	90c00115 	stw	r3,4(r18)
10004204:	00c006c4 	movi	r3,27
10004208:	19804536 	bltu	r3,r6,10004320 <_realloc_r+0x470>
1000420c:	90800204 	addi	r2,r18,8
10004210:	a8c00204 	addi	r3,r21,8
10004214:	003f6306 	br	10003fa4 <__alt_data_end+0xf8003fa4>
10004218:	9005883a 	mov	r2,r18
1000421c:	a8c00017 	ldw	r3,0(r21)
10004220:	b821883a 	mov	r16,r23
10004224:	b027883a 	mov	r19,r22
10004228:	10c00015 	stw	r3,0(r2)
1000422c:	a8c00117 	ldw	r3,4(r21)
10004230:	10c00115 	stw	r3,4(r2)
10004234:	a8c00217 	ldw	r3,8(r21)
10004238:	10c00215 	stw	r3,8(r2)
1000423c:	003f6a06 	br	10003fe8 <__alt_data_end+0xf8003fe8>
10004240:	9c67883a 	add	r19,r19,r17
10004244:	4445c83a 	sub	r2,r8,r17
10004248:	e4c00215 	stw	r19,8(fp)
1000424c:	10800054 	ori	r2,r2,1
10004250:	98800115 	stw	r2,4(r19)
10004254:	a8bfff17 	ldw	r2,-4(r21)
10004258:	a009883a 	mov	r4,r20
1000425c:	1080004c 	andi	r2,r2,1
10004260:	1462b03a 	or	r17,r2,r17
10004264:	ac7fff15 	stw	r17,-4(r21)
10004268:	00101600 	call	10010160 <__malloc_unlock>
1000426c:	a805883a 	mov	r2,r21
10004270:	003f6b06 	br	10004020 <__alt_data_end+0xf8004020>
10004274:	a80b883a 	mov	r5,r21
10004278:	9009883a 	mov	r4,r18
1000427c:	00090300 	call	10009030 <memmove>
10004280:	003f4e06 	br	10003fbc <__alt_data_end+0xf8003fbc>
10004284:	89000404 	addi	r4,r17,16
10004288:	b93fbc16 	blt	r23,r4,1000417c <__alt_data_end+0xf800417c>
1000428c:	b0800317 	ldw	r2,12(r22)
10004290:	b0c00217 	ldw	r3,8(r22)
10004294:	81bfff04 	addi	r6,r16,-4
10004298:	01000904 	movi	r4,36
1000429c:	18800315 	stw	r2,12(r3)
100042a0:	10c00215 	stw	r3,8(r2)
100042a4:	b4800204 	addi	r18,r22,8
100042a8:	21804336 	bltu	r4,r6,100043b8 <_realloc_r+0x508>
100042ac:	008004c4 	movi	r2,19
100042b0:	11803f2e 	bgeu	r2,r6,100043b0 <_realloc_r+0x500>
100042b4:	a8800017 	ldw	r2,0(r21)
100042b8:	b0800215 	stw	r2,8(r22)
100042bc:	a8800117 	ldw	r2,4(r21)
100042c0:	b0800315 	stw	r2,12(r22)
100042c4:	008006c4 	movi	r2,27
100042c8:	11803f36 	bltu	r2,r6,100043c8 <_realloc_r+0x518>
100042cc:	b0800404 	addi	r2,r22,16
100042d0:	ad400204 	addi	r21,r21,8
100042d4:	a8c00017 	ldw	r3,0(r21)
100042d8:	10c00015 	stw	r3,0(r2)
100042dc:	a8c00117 	ldw	r3,4(r21)
100042e0:	10c00115 	stw	r3,4(r2)
100042e4:	a8c00217 	ldw	r3,8(r21)
100042e8:	10c00215 	stw	r3,8(r2)
100042ec:	b447883a 	add	r3,r22,r17
100042f0:	bc45c83a 	sub	r2,r23,r17
100042f4:	e0c00215 	stw	r3,8(fp)
100042f8:	10800054 	ori	r2,r2,1
100042fc:	18800115 	stw	r2,4(r3)
10004300:	b0800117 	ldw	r2,4(r22)
10004304:	a009883a 	mov	r4,r20
10004308:	1080004c 	andi	r2,r2,1
1000430c:	1462b03a 	or	r17,r2,r17
10004310:	b4400115 	stw	r17,4(r22)
10004314:	00101600 	call	10010160 <__malloc_unlock>
10004318:	9005883a 	mov	r2,r18
1000431c:	003f4006 	br	10004020 <__alt_data_end+0xf8004020>
10004320:	a8c00217 	ldw	r3,8(r21)
10004324:	90c00215 	stw	r3,8(r18)
10004328:	a8c00317 	ldw	r3,12(r21)
1000432c:	90c00315 	stw	r3,12(r18)
10004330:	30801126 	beq	r6,r2,10004378 <_realloc_r+0x4c8>
10004334:	90800404 	addi	r2,r18,16
10004338:	a8c00404 	addi	r3,r21,16
1000433c:	003f1906 	br	10003fa4 <__alt_data_end+0xf8003fa4>
10004340:	90ffff17 	ldw	r3,-4(r18)
10004344:	00bfff04 	movi	r2,-4
10004348:	a825883a 	mov	r18,r21
1000434c:	1884703a 	and	r2,r3,r2
10004350:	80a1883a 	add	r16,r16,r2
10004354:	003f2406 	br	10003fe8 <__alt_data_end+0xf8003fe8>
10004358:	a8800217 	ldw	r2,8(r21)
1000435c:	b0800415 	stw	r2,16(r22)
10004360:	a8800317 	ldw	r2,12(r21)
10004364:	b0800515 	stw	r2,20(r22)
10004368:	31000a26 	beq	r6,r4,10004394 <_realloc_r+0x4e4>
1000436c:	b0800604 	addi	r2,r22,24
10004370:	ad400404 	addi	r21,r21,16
10004374:	003fa906 	br	1000421c <__alt_data_end+0xf800421c>
10004378:	a9000417 	ldw	r4,16(r21)
1000437c:	90800604 	addi	r2,r18,24
10004380:	a8c00604 	addi	r3,r21,24
10004384:	91000415 	stw	r4,16(r18)
10004388:	a9000517 	ldw	r4,20(r21)
1000438c:	91000515 	stw	r4,20(r18)
10004390:	003f0406 	br	10003fa4 <__alt_data_end+0xf8003fa4>
10004394:	a8c00417 	ldw	r3,16(r21)
10004398:	ad400604 	addi	r21,r21,24
1000439c:	b0800804 	addi	r2,r22,32
100043a0:	b0c00615 	stw	r3,24(r22)
100043a4:	a8ffff17 	ldw	r3,-4(r21)
100043a8:	b0c00715 	stw	r3,28(r22)
100043ac:	003f9b06 	br	1000421c <__alt_data_end+0xf800421c>
100043b0:	9005883a 	mov	r2,r18
100043b4:	003fc706 	br	100042d4 <__alt_data_end+0xf80042d4>
100043b8:	a80b883a 	mov	r5,r21
100043bc:	9009883a 	mov	r4,r18
100043c0:	00090300 	call	10009030 <memmove>
100043c4:	003fc906 	br	100042ec <__alt_data_end+0xf80042ec>
100043c8:	a8800217 	ldw	r2,8(r21)
100043cc:	b0800415 	stw	r2,16(r22)
100043d0:	a8800317 	ldw	r2,12(r21)
100043d4:	b0800515 	stw	r2,20(r22)
100043d8:	31000726 	beq	r6,r4,100043f8 <_realloc_r+0x548>
100043dc:	b0800604 	addi	r2,r22,24
100043e0:	ad400404 	addi	r21,r21,16
100043e4:	003fbb06 	br	100042d4 <__alt_data_end+0xf80042d4>
100043e8:	a009883a 	mov	r4,r20
100043ec:	00101600 	call	10010160 <__malloc_unlock>
100043f0:	0005883a 	mov	r2,zero
100043f4:	003f0a06 	br	10004020 <__alt_data_end+0xf8004020>
100043f8:	a8c00417 	ldw	r3,16(r21)
100043fc:	ad400604 	addi	r21,r21,24
10004400:	b0800804 	addi	r2,r22,32
10004404:	b0c00615 	stw	r3,24(r22)
10004408:	a8ffff17 	ldw	r3,-4(r21)
1000440c:	b0c00715 	stw	r3,28(r22)
10004410:	003fb006 	br	100042d4 <__alt_data_end+0xf80042d4>

10004414 <lflush>:
10004414:	2080030b 	ldhu	r2,12(r4)
10004418:	00c00244 	movi	r3,9
1000441c:	1080024c 	andi	r2,r2,9
10004420:	10c00226 	beq	r2,r3,1000442c <lflush+0x18>
10004424:	0005883a 	mov	r2,zero
10004428:	f800283a 	ret
1000442c:	0001bb41 	jmpi	10001bb4 <fflush>

10004430 <__srefill_r>:
10004430:	defffc04 	addi	sp,sp,-16
10004434:	dc400115 	stw	r17,4(sp)
10004438:	dc000015 	stw	r16,0(sp)
1000443c:	dfc00315 	stw	ra,12(sp)
10004440:	dc800215 	stw	r18,8(sp)
10004444:	2023883a 	mov	r17,r4
10004448:	2821883a 	mov	r16,r5
1000444c:	20000226 	beq	r4,zero,10004458 <__srefill_r+0x28>
10004450:	20800e17 	ldw	r2,56(r4)
10004454:	10003c26 	beq	r2,zero,10004548 <__srefill_r+0x118>
10004458:	80c0030b 	ldhu	r3,12(r16)
1000445c:	1908000c 	andi	r4,r3,8192
10004460:	1805883a 	mov	r2,r3
10004464:	2000071e 	bne	r4,zero,10004484 <__srefill_r+0x54>
10004468:	81001917 	ldw	r4,100(r16)
1000446c:	18880014 	ori	r2,r3,8192
10004470:	00f7ffc4 	movi	r3,-8193
10004474:	20c8703a 	and	r4,r4,r3
10004478:	8080030d 	sth	r2,12(r16)
1000447c:	1007883a 	mov	r3,r2
10004480:	81001915 	stw	r4,100(r16)
10004484:	80000115 	stw	zero,4(r16)
10004488:	1100080c 	andi	r4,r2,32
1000448c:	2000571e 	bne	r4,zero,100045ec <__srefill_r+0x1bc>
10004490:	1100010c 	andi	r4,r2,4
10004494:	20001f26 	beq	r4,zero,10004514 <__srefill_r+0xe4>
10004498:	81400c17 	ldw	r5,48(r16)
1000449c:	28000826 	beq	r5,zero,100044c0 <__srefill_r+0x90>
100044a0:	80801004 	addi	r2,r16,64
100044a4:	28800226 	beq	r5,r2,100044b0 <__srefill_r+0x80>
100044a8:	8809883a 	mov	r4,r17
100044ac:	00024dc0 	call	100024dc <_free_r>
100044b0:	80800f17 	ldw	r2,60(r16)
100044b4:	80000c15 	stw	zero,48(r16)
100044b8:	80800115 	stw	r2,4(r16)
100044bc:	1000391e 	bne	r2,zero,100045a4 <__srefill_r+0x174>
100044c0:	80800417 	ldw	r2,16(r16)
100044c4:	10004b26 	beq	r2,zero,100045f4 <__srefill_r+0x1c4>
100044c8:	8480030b 	ldhu	r18,12(r16)
100044cc:	908000cc 	andi	r2,r18,3
100044d0:	10001f1e 	bne	r2,zero,10004550 <__srefill_r+0x120>
100044d4:	81800417 	ldw	r6,16(r16)
100044d8:	80800817 	ldw	r2,32(r16)
100044dc:	81c00517 	ldw	r7,20(r16)
100044e0:	81400717 	ldw	r5,28(r16)
100044e4:	81800015 	stw	r6,0(r16)
100044e8:	8809883a 	mov	r4,r17
100044ec:	103ee83a 	callr	r2
100044f0:	80800115 	stw	r2,4(r16)
100044f4:	00800e0e 	bge	zero,r2,10004530 <__srefill_r+0x100>
100044f8:	0005883a 	mov	r2,zero
100044fc:	dfc00317 	ldw	ra,12(sp)
10004500:	dc800217 	ldw	r18,8(sp)
10004504:	dc400117 	ldw	r17,4(sp)
10004508:	dc000017 	ldw	r16,0(sp)
1000450c:	dec00404 	addi	sp,sp,16
10004510:	f800283a 	ret
10004514:	1100040c 	andi	r4,r2,16
10004518:	20003026 	beq	r4,zero,100045dc <__srefill_r+0x1ac>
1000451c:	1080020c 	andi	r2,r2,8
10004520:	1000241e 	bne	r2,zero,100045b4 <__srefill_r+0x184>
10004524:	18c00114 	ori	r3,r3,4
10004528:	80c0030d 	sth	r3,12(r16)
1000452c:	003fe406 	br	100044c0 <__alt_data_end+0xf80044c0>
10004530:	80c0030b 	ldhu	r3,12(r16)
10004534:	1000161e 	bne	r2,zero,10004590 <__srefill_r+0x160>
10004538:	18c00814 	ori	r3,r3,32
1000453c:	00bfffc4 	movi	r2,-1
10004540:	80c0030d 	sth	r3,12(r16)
10004544:	003fed06 	br	100044fc <__alt_data_end+0xf80044fc>
10004548:	0001f440 	call	10001f44 <__sinit>
1000454c:	003fc206 	br	10004458 <__alt_data_end+0xf8004458>
10004550:	00840074 	movhi	r2,4097
10004554:	10914a04 	addi	r2,r2,17704
10004558:	11000017 	ldw	r4,0(r2)
1000455c:	01440034 	movhi	r5,4096
10004560:	00800044 	movi	r2,1
10004564:	29510504 	addi	r5,r5,17428
10004568:	8080030d 	sth	r2,12(r16)
1000456c:	0002de00 	call	10002de0 <_fwalk>
10004570:	00800244 	movi	r2,9
10004574:	8480030d 	sth	r18,12(r16)
10004578:	9480024c 	andi	r18,r18,9
1000457c:	90bfd51e 	bne	r18,r2,100044d4 <__alt_data_end+0xf80044d4>
10004580:	800b883a 	mov	r5,r16
10004584:	8809883a 	mov	r4,r17
10004588:	000193c0 	call	1000193c <__sflush_r>
1000458c:	003fd106 	br	100044d4 <__alt_data_end+0xf80044d4>
10004590:	18c01014 	ori	r3,r3,64
10004594:	80000115 	stw	zero,4(r16)
10004598:	00bfffc4 	movi	r2,-1
1000459c:	80c0030d 	sth	r3,12(r16)
100045a0:	003fd606 	br	100044fc <__alt_data_end+0xf80044fc>
100045a4:	80c00e17 	ldw	r3,56(r16)
100045a8:	0005883a 	mov	r2,zero
100045ac:	80c00015 	stw	r3,0(r16)
100045b0:	003fd206 	br	100044fc <__alt_data_end+0xf80044fc>
100045b4:	800b883a 	mov	r5,r16
100045b8:	8809883a 	mov	r4,r17
100045bc:	0001b580 	call	10001b58 <_fflush_r>
100045c0:	10000a1e 	bne	r2,zero,100045ec <__srefill_r+0x1bc>
100045c4:	8080030b 	ldhu	r2,12(r16)
100045c8:	00fffdc4 	movi	r3,-9
100045cc:	80000215 	stw	zero,8(r16)
100045d0:	1886703a 	and	r3,r3,r2
100045d4:	80000615 	stw	zero,24(r16)
100045d8:	003fd206 	br	10004524 <__alt_data_end+0xf8004524>
100045dc:	00800244 	movi	r2,9
100045e0:	88800015 	stw	r2,0(r17)
100045e4:	18c01014 	ori	r3,r3,64
100045e8:	80c0030d 	sth	r3,12(r16)
100045ec:	00bfffc4 	movi	r2,-1
100045f0:	003fc206 	br	100044fc <__alt_data_end+0xf80044fc>
100045f4:	800b883a 	mov	r5,r16
100045f8:	8809883a 	mov	r4,r17
100045fc:	00030780 	call	10003078 <__smakebuf_r>
10004600:	003fb106 	br	100044c8 <__alt_data_end+0xf80044c8>

10004604 <_sbrk_r>:
10004604:	defffd04 	addi	sp,sp,-12
10004608:	dc000015 	stw	r16,0(sp)
1000460c:	04040074 	movhi	r16,4097
10004610:	dc400115 	stw	r17,4(sp)
10004614:	84187404 	addi	r16,r16,25040
10004618:	2023883a 	mov	r17,r4
1000461c:	2809883a 	mov	r4,r5
10004620:	dfc00215 	stw	ra,8(sp)
10004624:	80000015 	stw	zero,0(r16)
10004628:	001048c0 	call	1001048c <sbrk>
1000462c:	00ffffc4 	movi	r3,-1
10004630:	10c00526 	beq	r2,r3,10004648 <_sbrk_r+0x44>
10004634:	dfc00217 	ldw	ra,8(sp)
10004638:	dc400117 	ldw	r17,4(sp)
1000463c:	dc000017 	ldw	r16,0(sp)
10004640:	dec00304 	addi	sp,sp,12
10004644:	f800283a 	ret
10004648:	80c00017 	ldw	r3,0(r16)
1000464c:	183ff926 	beq	r3,zero,10004634 <__alt_data_end+0xf8004634>
10004650:	88c00015 	stw	r3,0(r17)
10004654:	003ff706 	br	10004634 <__alt_data_end+0xf8004634>

10004658 <__sread>:
10004658:	defffe04 	addi	sp,sp,-8
1000465c:	dc000015 	stw	r16,0(sp)
10004660:	2821883a 	mov	r16,r5
10004664:	2940038f 	ldh	r5,14(r5)
10004668:	dfc00115 	stw	ra,4(sp)
1000466c:	000a3ac0 	call	1000a3ac <_read_r>
10004670:	10000716 	blt	r2,zero,10004690 <__sread+0x38>
10004674:	80c01417 	ldw	r3,80(r16)
10004678:	1887883a 	add	r3,r3,r2
1000467c:	80c01415 	stw	r3,80(r16)
10004680:	dfc00117 	ldw	ra,4(sp)
10004684:	dc000017 	ldw	r16,0(sp)
10004688:	dec00204 	addi	sp,sp,8
1000468c:	f800283a 	ret
10004690:	80c0030b 	ldhu	r3,12(r16)
10004694:	18fbffcc 	andi	r3,r3,61439
10004698:	80c0030d 	sth	r3,12(r16)
1000469c:	dfc00117 	ldw	ra,4(sp)
100046a0:	dc000017 	ldw	r16,0(sp)
100046a4:	dec00204 	addi	sp,sp,8
100046a8:	f800283a 	ret

100046ac <__seofread>:
100046ac:	0005883a 	mov	r2,zero
100046b0:	f800283a 	ret

100046b4 <__swrite>:
100046b4:	2880030b 	ldhu	r2,12(r5)
100046b8:	defffb04 	addi	sp,sp,-20
100046bc:	dcc00315 	stw	r19,12(sp)
100046c0:	dc800215 	stw	r18,8(sp)
100046c4:	dc400115 	stw	r17,4(sp)
100046c8:	dc000015 	stw	r16,0(sp)
100046cc:	dfc00415 	stw	ra,16(sp)
100046d0:	10c0400c 	andi	r3,r2,256
100046d4:	2821883a 	mov	r16,r5
100046d8:	2023883a 	mov	r17,r4
100046dc:	3025883a 	mov	r18,r6
100046e0:	3827883a 	mov	r19,r7
100046e4:	18000526 	beq	r3,zero,100046fc <__swrite+0x48>
100046e8:	2940038f 	ldh	r5,14(r5)
100046ec:	01c00084 	movi	r7,2
100046f0:	000d883a 	mov	r6,zero
100046f4:	0008eec0 	call	10008eec <_lseek_r>
100046f8:	8080030b 	ldhu	r2,12(r16)
100046fc:	8140038f 	ldh	r5,14(r16)
10004700:	10bbffcc 	andi	r2,r2,61439
10004704:	980f883a 	mov	r7,r19
10004708:	900d883a 	mov	r6,r18
1000470c:	8809883a 	mov	r4,r17
10004710:	8080030d 	sth	r2,12(r16)
10004714:	dfc00417 	ldw	ra,16(sp)
10004718:	dcc00317 	ldw	r19,12(sp)
1000471c:	dc800217 	ldw	r18,8(sp)
10004720:	dc400117 	ldw	r17,4(sp)
10004724:	dc000017 	ldw	r16,0(sp)
10004728:	dec00504 	addi	sp,sp,20
1000472c:	0006bf81 	jmpi	10006bf8 <_write_r>

10004730 <__sseek>:
10004730:	defffe04 	addi	sp,sp,-8
10004734:	dc000015 	stw	r16,0(sp)
10004738:	2821883a 	mov	r16,r5
1000473c:	2940038f 	ldh	r5,14(r5)
10004740:	dfc00115 	stw	ra,4(sp)
10004744:	0008eec0 	call	10008eec <_lseek_r>
10004748:	00ffffc4 	movi	r3,-1
1000474c:	10c00826 	beq	r2,r3,10004770 <__sseek+0x40>
10004750:	80c0030b 	ldhu	r3,12(r16)
10004754:	80801415 	stw	r2,80(r16)
10004758:	18c40014 	ori	r3,r3,4096
1000475c:	80c0030d 	sth	r3,12(r16)
10004760:	dfc00117 	ldw	ra,4(sp)
10004764:	dc000017 	ldw	r16,0(sp)
10004768:	dec00204 	addi	sp,sp,8
1000476c:	f800283a 	ret
10004770:	80c0030b 	ldhu	r3,12(r16)
10004774:	18fbffcc 	andi	r3,r3,61439
10004778:	80c0030d 	sth	r3,12(r16)
1000477c:	dfc00117 	ldw	ra,4(sp)
10004780:	dc000017 	ldw	r16,0(sp)
10004784:	dec00204 	addi	sp,sp,8
10004788:	f800283a 	ret

1000478c <__sclose>:
1000478c:	2940038f 	ldh	r5,14(r5)
10004790:	0006dac1 	jmpi	10006dac <_close_r>

10004794 <strlen>:
10004794:	208000cc 	andi	r2,r4,3
10004798:	10002026 	beq	r2,zero,1000481c <strlen+0x88>
1000479c:	20800007 	ldb	r2,0(r4)
100047a0:	10002026 	beq	r2,zero,10004824 <strlen+0x90>
100047a4:	2005883a 	mov	r2,r4
100047a8:	00000206 	br	100047b4 <strlen+0x20>
100047ac:	10c00007 	ldb	r3,0(r2)
100047b0:	18001826 	beq	r3,zero,10004814 <strlen+0x80>
100047b4:	10800044 	addi	r2,r2,1
100047b8:	10c000cc 	andi	r3,r2,3
100047bc:	183ffb1e 	bne	r3,zero,100047ac <__alt_data_end+0xf80047ac>
100047c0:	10c00017 	ldw	r3,0(r2)
100047c4:	01ffbff4 	movhi	r7,65279
100047c8:	39ffbfc4 	addi	r7,r7,-257
100047cc:	00ca303a 	nor	r5,zero,r3
100047d0:	01a02074 	movhi	r6,32897
100047d4:	19c7883a 	add	r3,r3,r7
100047d8:	31a02004 	addi	r6,r6,-32640
100047dc:	1946703a 	and	r3,r3,r5
100047e0:	1986703a 	and	r3,r3,r6
100047e4:	1800091e 	bne	r3,zero,1000480c <strlen+0x78>
100047e8:	10800104 	addi	r2,r2,4
100047ec:	10c00017 	ldw	r3,0(r2)
100047f0:	19cb883a 	add	r5,r3,r7
100047f4:	00c6303a 	nor	r3,zero,r3
100047f8:	28c6703a 	and	r3,r5,r3
100047fc:	1986703a 	and	r3,r3,r6
10004800:	183ff926 	beq	r3,zero,100047e8 <__alt_data_end+0xf80047e8>
10004804:	00000106 	br	1000480c <strlen+0x78>
10004808:	10800044 	addi	r2,r2,1
1000480c:	10c00007 	ldb	r3,0(r2)
10004810:	183ffd1e 	bne	r3,zero,10004808 <__alt_data_end+0xf8004808>
10004814:	1105c83a 	sub	r2,r2,r4
10004818:	f800283a 	ret
1000481c:	2005883a 	mov	r2,r4
10004820:	003fe706 	br	100047c0 <__alt_data_end+0xf80047c0>
10004824:	0005883a 	mov	r2,zero
10004828:	f800283a 	ret

1000482c <_vfiprintf_r>:
1000482c:	deffff04 	addi	sp,sp,-4
10004830:	dfc00015 	stw	ra,0(sp)
10004834:	000a9740 	call	1000a974 <___vfiprintf_internal_r>
10004838:	dfc00017 	ldw	ra,0(sp)
1000483c:	dec00104 	addi	sp,sp,4
10004840:	f800283a 	ret

10004844 <___vfprintf_internal_r>:
10004844:	deffb804 	addi	sp,sp,-288
10004848:	dfc04715 	stw	ra,284(sp)
1000484c:	ddc04515 	stw	r23,276(sp)
10004850:	dd404315 	stw	r21,268(sp)
10004854:	d9002d15 	stw	r4,180(sp)
10004858:	282f883a 	mov	r23,r5
1000485c:	302b883a 	mov	r21,r6
10004860:	d9c02e15 	stw	r7,184(sp)
10004864:	df004615 	stw	fp,280(sp)
10004868:	dd804415 	stw	r22,272(sp)
1000486c:	dd004215 	stw	r20,264(sp)
10004870:	dcc04115 	stw	r19,260(sp)
10004874:	dc804015 	stw	r18,256(sp)
10004878:	dc403f15 	stw	r17,252(sp)
1000487c:	dc003e15 	stw	r16,248(sp)
10004880:	0008ebc0 	call	10008ebc <_localeconv_r>
10004884:	10800017 	ldw	r2,0(r2)
10004888:	1009883a 	mov	r4,r2
1000488c:	d8803415 	stw	r2,208(sp)
10004890:	00047940 	call	10004794 <strlen>
10004894:	d8803715 	stw	r2,220(sp)
10004898:	d8802d17 	ldw	r2,180(sp)
1000489c:	10000226 	beq	r2,zero,100048a8 <___vfprintf_internal_r+0x64>
100048a0:	10800e17 	ldw	r2,56(r2)
100048a4:	1000fb26 	beq	r2,zero,10004c94 <___vfprintf_internal_r+0x450>
100048a8:	b880030b 	ldhu	r2,12(r23)
100048ac:	10c8000c 	andi	r3,r2,8192
100048b0:	1800061e 	bne	r3,zero,100048cc <___vfprintf_internal_r+0x88>
100048b4:	b9001917 	ldw	r4,100(r23)
100048b8:	00f7ffc4 	movi	r3,-8193
100048bc:	10880014 	ori	r2,r2,8192
100048c0:	20c6703a 	and	r3,r4,r3
100048c4:	b880030d 	sth	r2,12(r23)
100048c8:	b8c01915 	stw	r3,100(r23)
100048cc:	10c0020c 	andi	r3,r2,8
100048d0:	1800c326 	beq	r3,zero,10004be0 <___vfprintf_internal_r+0x39c>
100048d4:	b8c00417 	ldw	r3,16(r23)
100048d8:	1800c126 	beq	r3,zero,10004be0 <___vfprintf_internal_r+0x39c>
100048dc:	1080068c 	andi	r2,r2,26
100048e0:	00c00284 	movi	r3,10
100048e4:	10c0c626 	beq	r2,r3,10004c00 <___vfprintf_internal_r+0x3bc>
100048e8:	d8c00404 	addi	r3,sp,16
100048ec:	05040074 	movhi	r20,4097
100048f0:	d9001e04 	addi	r4,sp,120
100048f4:	a509b484 	addi	r20,r20,9938
100048f8:	d8c01e15 	stw	r3,120(sp)
100048fc:	d8002015 	stw	zero,128(sp)
10004900:	d8001f15 	stw	zero,124(sp)
10004904:	d8003315 	stw	zero,204(sp)
10004908:	d8003615 	stw	zero,216(sp)
1000490c:	d8003815 	stw	zero,224(sp)
10004910:	1811883a 	mov	r8,r3
10004914:	d8003915 	stw	zero,228(sp)
10004918:	d8003a15 	stw	zero,232(sp)
1000491c:	d8002f15 	stw	zero,188(sp)
10004920:	d9002815 	stw	r4,160(sp)
10004924:	a8800007 	ldb	r2,0(r21)
10004928:	10028b26 	beq	r2,zero,10005358 <___vfprintf_internal_r+0xb14>
1000492c:	00c00944 	movi	r3,37
10004930:	a823883a 	mov	r17,r21
10004934:	10c0021e 	bne	r2,r3,10004940 <___vfprintf_internal_r+0xfc>
10004938:	00001406 	br	1000498c <___vfprintf_internal_r+0x148>
1000493c:	10c00326 	beq	r2,r3,1000494c <___vfprintf_internal_r+0x108>
10004940:	8c400044 	addi	r17,r17,1
10004944:	88800007 	ldb	r2,0(r17)
10004948:	103ffc1e 	bne	r2,zero,1000493c <__alt_data_end+0xf800493c>
1000494c:	8d61c83a 	sub	r16,r17,r21
10004950:	80000e26 	beq	r16,zero,1000498c <___vfprintf_internal_r+0x148>
10004954:	d8c02017 	ldw	r3,128(sp)
10004958:	d8801f17 	ldw	r2,124(sp)
1000495c:	45400015 	stw	r21,0(r8)
10004960:	1c07883a 	add	r3,r3,r16
10004964:	10800044 	addi	r2,r2,1
10004968:	d8c02015 	stw	r3,128(sp)
1000496c:	44000115 	stw	r16,4(r8)
10004970:	d8801f15 	stw	r2,124(sp)
10004974:	00c001c4 	movi	r3,7
10004978:	1880a916 	blt	r3,r2,10004c20 <___vfprintf_internal_r+0x3dc>
1000497c:	42000204 	addi	r8,r8,8
10004980:	d9402f17 	ldw	r5,188(sp)
10004984:	2c0b883a 	add	r5,r5,r16
10004988:	d9402f15 	stw	r5,188(sp)
1000498c:	88800007 	ldb	r2,0(r17)
10004990:	1000aa26 	beq	r2,zero,10004c3c <___vfprintf_internal_r+0x3f8>
10004994:	8d400044 	addi	r21,r17,1
10004998:	8c400047 	ldb	r17,1(r17)
1000499c:	0021883a 	mov	r16,zero
100049a0:	00bfffc4 	movi	r2,-1
100049a4:	0025883a 	mov	r18,zero
100049a8:	dc002905 	stb	r16,164(sp)
100049ac:	d8002785 	stb	zero,158(sp)
100049b0:	d8002b05 	stb	zero,172(sp)
100049b4:	d8802a15 	stw	r2,168(sp)
100049b8:	d8003115 	stw	zero,196(sp)
100049bc:	04c01604 	movi	r19,88
100049c0:	05800244 	movi	r22,9
100049c4:	9021883a 	mov	r16,r18
100049c8:	4039883a 	mov	fp,r8
100049cc:	ad400044 	addi	r21,r21,1
100049d0:	88bff804 	addi	r2,r17,-32
100049d4:	98833236 	bltu	r19,r2,100056a0 <___vfprintf_internal_r+0xe5c>
100049d8:	100490ba 	slli	r2,r2,2
100049dc:	00c40034 	movhi	r3,4096
100049e0:	18d27c04 	addi	r3,r3,18928
100049e4:	10c5883a 	add	r2,r2,r3
100049e8:	10800017 	ldw	r2,0(r2)
100049ec:	1000683a 	jmp	r2
100049f0:	10005598 	cmpnei	zero,r2,342
100049f4:	100056a0 	cmpeqi	zero,r2,346
100049f8:	100056a0 	cmpeqi	zero,r2,346
100049fc:	100055b8 	rdprs	zero,r2,342
10004a00:	100056a0 	cmpeqi	zero,r2,346
10004a04:	100056a0 	cmpeqi	zero,r2,346
10004a08:	100056a0 	cmpeqi	zero,r2,346
10004a0c:	100056a0 	cmpeqi	zero,r2,346
10004a10:	100056a0 	cmpeqi	zero,r2,346
10004a14:	100056a0 	cmpeqi	zero,r2,346
10004a18:	10004ca0 	cmpeqi	zero,r2,306
10004a1c:	100054a8 	cmpgeui	zero,r2,338
10004a20:	100056a0 	cmpeqi	zero,r2,346
10004a24:	10004b64 	muli	zero,r2,301
10004a28:	10004cc4 	addi	zero,r2,307
10004a2c:	100056a0 	cmpeqi	zero,r2,346
10004a30:	10004d14 	ori	zero,r2,308
10004a34:	10004d20 	cmpeqi	zero,r2,308
10004a38:	10004d20 	cmpeqi	zero,r2,308
10004a3c:	10004d20 	cmpeqi	zero,r2,308
10004a40:	10004d20 	cmpeqi	zero,r2,308
10004a44:	10004d20 	cmpeqi	zero,r2,308
10004a48:	10004d20 	cmpeqi	zero,r2,308
10004a4c:	10004d20 	cmpeqi	zero,r2,308
10004a50:	10004d20 	cmpeqi	zero,r2,308
10004a54:	10004d20 	cmpeqi	zero,r2,308
10004a58:	100056a0 	cmpeqi	zero,r2,346
10004a5c:	100056a0 	cmpeqi	zero,r2,346
10004a60:	100056a0 	cmpeqi	zero,r2,346
10004a64:	100056a0 	cmpeqi	zero,r2,346
10004a68:	100056a0 	cmpeqi	zero,r2,346
10004a6c:	100056a0 	cmpeqi	zero,r2,346
10004a70:	100056a0 	cmpeqi	zero,r2,346
10004a74:	100056a0 	cmpeqi	zero,r2,346
10004a78:	100056a0 	cmpeqi	zero,r2,346
10004a7c:	100056a0 	cmpeqi	zero,r2,346
10004a80:	10004d5c 	xori	zero,r2,309
10004a84:	10004e24 	muli	zero,r2,312
10004a88:	100056a0 	cmpeqi	zero,r2,346
10004a8c:	10004e24 	muli	zero,r2,312
10004a90:	100056a0 	cmpeqi	zero,r2,346
10004a94:	100056a0 	cmpeqi	zero,r2,346
10004a98:	100056a0 	cmpeqi	zero,r2,346
10004a9c:	100056a0 	cmpeqi	zero,r2,346
10004aa0:	10004ed0 	cmplti	zero,r2,315
10004aa4:	100056a0 	cmpeqi	zero,r2,346
10004aa8:	100056a0 	cmpeqi	zero,r2,346
10004aac:	10004edc 	xori	zero,r2,315
10004ab0:	100056a0 	cmpeqi	zero,r2,346
10004ab4:	100056a0 	cmpeqi	zero,r2,346
10004ab8:	100056a0 	cmpeqi	zero,r2,346
10004abc:	100056a0 	cmpeqi	zero,r2,346
10004ac0:	100056a0 	cmpeqi	zero,r2,346
10004ac4:	10005360 	cmpeqi	zero,r2,333
10004ac8:	100056a0 	cmpeqi	zero,r2,346
10004acc:	100056a0 	cmpeqi	zero,r2,346
10004ad0:	100053cc 	andi	zero,r2,335
10004ad4:	100056a0 	cmpeqi	zero,r2,346
10004ad8:	100056a0 	cmpeqi	zero,r2,346
10004adc:	100056a0 	cmpeqi	zero,r2,346
10004ae0:	100056a0 	cmpeqi	zero,r2,346
10004ae4:	100056a0 	cmpeqi	zero,r2,346
10004ae8:	100056a0 	cmpeqi	zero,r2,346
10004aec:	100056a0 	cmpeqi	zero,r2,346
10004af0:	100056a0 	cmpeqi	zero,r2,346
10004af4:	100056a0 	cmpeqi	zero,r2,346
10004af8:	100056a0 	cmpeqi	zero,r2,346
10004afc:	10005644 	addi	zero,r2,345
10004b00:	100055c4 	addi	zero,r2,343
10004b04:	10004e24 	muli	zero,r2,312
10004b08:	10004e24 	muli	zero,r2,312
10004b0c:	10004e24 	muli	zero,r2,312
10004b10:	100055e4 	muli	zero,r2,343
10004b14:	100055c4 	addi	zero,r2,343
10004b18:	100056a0 	cmpeqi	zero,r2,346
10004b1c:	100056a0 	cmpeqi	zero,r2,346
10004b20:	100055f0 	cmpltui	zero,r2,343
10004b24:	100056a0 	cmpeqi	zero,r2,346
10004b28:	10005604 	addi	zero,r2,344
10004b2c:	10005488 	cmpgei	zero,r2,338
10004b30:	10004b70 	cmpltui	zero,r2,301
10004b34:	100054c0 	call	1100054c <_gp+0xfe4040>
10004b38:	100056a0 	cmpeqi	zero,r2,346
10004b3c:	100054cc 	andi	zero,r2,339
10004b40:	100056a0 	cmpeqi	zero,r2,346
10004b44:	10005530 	cmpltui	zero,r2,340
10004b48:	100056a0 	cmpeqi	zero,r2,346
10004b4c:	100056a0 	cmpeqi	zero,r2,346
10004b50:	10005550 	cmplti	zero,r2,341
10004b54:	d8c03117 	ldw	r3,196(sp)
10004b58:	d8802e15 	stw	r2,184(sp)
10004b5c:	00c7c83a 	sub	r3,zero,r3
10004b60:	d8c03115 	stw	r3,196(sp)
10004b64:	84000114 	ori	r16,r16,4
10004b68:	ac400007 	ldb	r17,0(r21)
10004b6c:	003f9706 	br	100049cc <__alt_data_end+0xf80049cc>
10004b70:	00800c04 	movi	r2,48
10004b74:	d8802705 	stb	r2,156(sp)
10004b78:	00801e04 	movi	r2,120
10004b7c:	d8802745 	stb	r2,157(sp)
10004b80:	d9002a17 	ldw	r4,168(sp)
10004b84:	d8802e17 	ldw	r2,184(sp)
10004b88:	d8002785 	stb	zero,158(sp)
10004b8c:	e011883a 	mov	r8,fp
10004b90:	10c00104 	addi	r3,r2,4
10004b94:	14c00017 	ldw	r19,0(r2)
10004b98:	002d883a 	mov	r22,zero
10004b9c:	80800094 	ori	r2,r16,2
10004ba0:	2002ca16 	blt	r4,zero,100056cc <___vfprintf_internal_r+0xe88>
10004ba4:	00bfdfc4 	movi	r2,-129
10004ba8:	80a4703a 	and	r18,r16,r2
10004bac:	d8c02e15 	stw	r3,184(sp)
10004bb0:	94800094 	ori	r18,r18,2
10004bb4:	9802b41e 	bne	r19,zero,10005688 <___vfprintf_internal_r+0xe44>
10004bb8:	01440074 	movhi	r5,4097
10004bbc:	2949ad04 	addi	r5,r5,9908
10004bc0:	d9403915 	stw	r5,228(sp)
10004bc4:	04401e04 	movi	r17,120
10004bc8:	d8802a17 	ldw	r2,168(sp)
10004bcc:	0039883a 	mov	fp,zero
10004bd0:	1001fa26 	beq	r2,zero,100053bc <___vfprintf_internal_r+0xb78>
10004bd4:	0027883a 	mov	r19,zero
10004bd8:	002d883a 	mov	r22,zero
10004bdc:	00021906 	br	10005444 <___vfprintf_internal_r+0xc00>
10004be0:	d9002d17 	ldw	r4,180(sp)
10004be4:	b80b883a 	mov	r5,r23
10004be8:	0006c580 	call	10006c58 <__swsetup_r>
10004bec:	1005dc1e 	bne	r2,zero,10006360 <___vfprintf_internal_r+0x1b1c>
10004bf0:	b880030b 	ldhu	r2,12(r23)
10004bf4:	00c00284 	movi	r3,10
10004bf8:	1080068c 	andi	r2,r2,26
10004bfc:	10ff3a1e 	bne	r2,r3,100048e8 <__alt_data_end+0xf80048e8>
10004c00:	b880038f 	ldh	r2,14(r23)
10004c04:	103f3816 	blt	r2,zero,100048e8 <__alt_data_end+0xf80048e8>
10004c08:	d9c02e17 	ldw	r7,184(sp)
10004c0c:	d9002d17 	ldw	r4,180(sp)
10004c10:	a80d883a 	mov	r6,r21
10004c14:	b80b883a 	mov	r5,r23
10004c18:	0006b3c0 	call	10006b3c <__sbprintf>
10004c1c:	00001106 	br	10004c64 <___vfprintf_internal_r+0x420>
10004c20:	d9002d17 	ldw	r4,180(sp)
10004c24:	d9801e04 	addi	r6,sp,120
10004c28:	b80b883a 	mov	r5,r23
10004c2c:	000a95c0 	call	1000a95c <__sprint_r>
10004c30:	1000081e 	bne	r2,zero,10004c54 <___vfprintf_internal_r+0x410>
10004c34:	da000404 	addi	r8,sp,16
10004c38:	003f5106 	br	10004980 <__alt_data_end+0xf8004980>
10004c3c:	d8802017 	ldw	r2,128(sp)
10004c40:	10000426 	beq	r2,zero,10004c54 <___vfprintf_internal_r+0x410>
10004c44:	d9002d17 	ldw	r4,180(sp)
10004c48:	d9801e04 	addi	r6,sp,120
10004c4c:	b80b883a 	mov	r5,r23
10004c50:	000a95c0 	call	1000a95c <__sprint_r>
10004c54:	b880030b 	ldhu	r2,12(r23)
10004c58:	1080100c 	andi	r2,r2,64
10004c5c:	1005c01e 	bne	r2,zero,10006360 <___vfprintf_internal_r+0x1b1c>
10004c60:	d8802f17 	ldw	r2,188(sp)
10004c64:	dfc04717 	ldw	ra,284(sp)
10004c68:	df004617 	ldw	fp,280(sp)
10004c6c:	ddc04517 	ldw	r23,276(sp)
10004c70:	dd804417 	ldw	r22,272(sp)
10004c74:	dd404317 	ldw	r21,268(sp)
10004c78:	dd004217 	ldw	r20,264(sp)
10004c7c:	dcc04117 	ldw	r19,260(sp)
10004c80:	dc804017 	ldw	r18,256(sp)
10004c84:	dc403f17 	ldw	r17,252(sp)
10004c88:	dc003e17 	ldw	r16,248(sp)
10004c8c:	dec04804 	addi	sp,sp,288
10004c90:	f800283a 	ret
10004c94:	d9002d17 	ldw	r4,180(sp)
10004c98:	0001f440 	call	10001f44 <__sinit>
10004c9c:	003f0206 	br	100048a8 <__alt_data_end+0xf80048a8>
10004ca0:	d9002e17 	ldw	r4,184(sp)
10004ca4:	d9402e17 	ldw	r5,184(sp)
10004ca8:	21000017 	ldw	r4,0(r4)
10004cac:	28800104 	addi	r2,r5,4
10004cb0:	d9003115 	stw	r4,196(sp)
10004cb4:	203fa716 	blt	r4,zero,10004b54 <__alt_data_end+0xf8004b54>
10004cb8:	d8802e15 	stw	r2,184(sp)
10004cbc:	ac400007 	ldb	r17,0(r21)
10004cc0:	003f4206 	br	100049cc <__alt_data_end+0xf80049cc>
10004cc4:	ac400007 	ldb	r17,0(r21)
10004cc8:	01000a84 	movi	r4,42
10004ccc:	a8c00044 	addi	r3,r21,1
10004cd0:	89075826 	beq	r17,r4,10006a34 <___vfprintf_internal_r+0x21f0>
10004cd4:	8cbff404 	addi	r18,r17,-48
10004cd8:	b486ae36 	bltu	r22,r18,10006794 <___vfprintf_internal_r+0x1f50>
10004cdc:	0009883a 	mov	r4,zero
10004ce0:	1823883a 	mov	r17,r3
10004ce4:	01400284 	movi	r5,10
10004ce8:	000175c0 	call	1000175c <__mulsi3>
10004cec:	88c00007 	ldb	r3,0(r17)
10004cf0:	1489883a 	add	r4,r2,r18
10004cf4:	8d400044 	addi	r21,r17,1
10004cf8:	1cbff404 	addi	r18,r3,-48
10004cfc:	a823883a 	mov	r17,r21
10004d00:	b4bff82e 	bgeu	r22,r18,10004ce4 <__alt_data_end+0xf8004ce4>
10004d04:	1823883a 	mov	r17,r3
10004d08:	2005f616 	blt	r4,zero,100064e4 <___vfprintf_internal_r+0x1ca0>
10004d0c:	d9002a15 	stw	r4,168(sp)
10004d10:	003f2f06 	br	100049d0 <__alt_data_end+0xf80049d0>
10004d14:	84002014 	ori	r16,r16,128
10004d18:	ac400007 	ldb	r17,0(r21)
10004d1c:	003f2b06 	br	100049cc <__alt_data_end+0xf80049cc>
10004d20:	8cbff404 	addi	r18,r17,-48
10004d24:	d8003115 	stw	zero,196(sp)
10004d28:	0009883a 	mov	r4,zero
10004d2c:	a823883a 	mov	r17,r21
10004d30:	01400284 	movi	r5,10
10004d34:	000175c0 	call	1000175c <__mulsi3>
10004d38:	88c00007 	ldb	r3,0(r17)
10004d3c:	9089883a 	add	r4,r18,r2
10004d40:	ad400044 	addi	r21,r21,1
10004d44:	1cbff404 	addi	r18,r3,-48
10004d48:	a823883a 	mov	r17,r21
10004d4c:	b4bff82e 	bgeu	r22,r18,10004d30 <__alt_data_end+0xf8004d30>
10004d50:	1823883a 	mov	r17,r3
10004d54:	d9003115 	stw	r4,196(sp)
10004d58:	003f1d06 	br	100049d0 <__alt_data_end+0xf80049d0>
10004d5c:	8025883a 	mov	r18,r16
10004d60:	dc002903 	ldbu	r16,164(sp)
10004d64:	e011883a 	mov	r8,fp
10004d68:	84003fcc 	andi	r16,r16,255
10004d6c:	8007531e 	bne	r16,zero,10006abc <___vfprintf_internal_r+0x2278>
10004d70:	94800414 	ori	r18,r18,16
10004d74:	9080080c 	andi	r2,r18,32
10004d78:	1003a326 	beq	r2,zero,10005c08 <___vfprintf_internal_r+0x13c4>
10004d7c:	d9002e17 	ldw	r4,184(sp)
10004d80:	20800117 	ldw	r2,4(r4)
10004d84:	24c00017 	ldw	r19,0(r4)
10004d88:	21000204 	addi	r4,r4,8
10004d8c:	d9002e15 	stw	r4,184(sp)
10004d90:	102d883a 	mov	r22,r2
10004d94:	10047316 	blt	r2,zero,10005f64 <___vfprintf_internal_r+0x1720>
10004d98:	d9002a17 	ldw	r4,168(sp)
10004d9c:	df002783 	ldbu	fp,158(sp)
10004da0:	2003e416 	blt	r4,zero,10005d34 <___vfprintf_internal_r+0x14f0>
10004da4:	00ffdfc4 	movi	r3,-129
10004da8:	9d84b03a 	or	r2,r19,r22
10004dac:	90e4703a 	and	r18,r18,r3
10004db0:	10018026 	beq	r2,zero,100053b4 <___vfprintf_internal_r+0xb70>
10004db4:	b003ab26 	beq	r22,zero,10005c64 <___vfprintf_internal_r+0x1420>
10004db8:	dc402915 	stw	r17,164(sp)
10004dbc:	dc001e04 	addi	r16,sp,120
10004dc0:	b023883a 	mov	r17,r22
10004dc4:	402d883a 	mov	r22,r8
10004dc8:	9809883a 	mov	r4,r19
10004dcc:	880b883a 	mov	r5,r17
10004dd0:	01800284 	movi	r6,10
10004dd4:	000f883a 	mov	r7,zero
10004dd8:	000cb780 	call	1000cb78 <__umoddi3>
10004ddc:	10800c04 	addi	r2,r2,48
10004de0:	843fffc4 	addi	r16,r16,-1
10004de4:	9809883a 	mov	r4,r19
10004de8:	880b883a 	mov	r5,r17
10004dec:	80800005 	stb	r2,0(r16)
10004df0:	01800284 	movi	r6,10
10004df4:	000f883a 	mov	r7,zero
10004df8:	000c57c0 	call	1000c57c <__udivdi3>
10004dfc:	1027883a 	mov	r19,r2
10004e00:	10c4b03a 	or	r2,r2,r3
10004e04:	1823883a 	mov	r17,r3
10004e08:	103fef1e 	bne	r2,zero,10004dc8 <__alt_data_end+0xf8004dc8>
10004e0c:	d8c02817 	ldw	r3,160(sp)
10004e10:	dc402917 	ldw	r17,164(sp)
10004e14:	b011883a 	mov	r8,r22
10004e18:	1c07c83a 	sub	r3,r3,r16
10004e1c:	d8c02b15 	stw	r3,172(sp)
10004e20:	00005f06 	br	10004fa0 <___vfprintf_internal_r+0x75c>
10004e24:	8025883a 	mov	r18,r16
10004e28:	dc002903 	ldbu	r16,164(sp)
10004e2c:	e011883a 	mov	r8,fp
10004e30:	84003fcc 	andi	r16,r16,255
10004e34:	80071e1e 	bne	r16,zero,10006ab0 <___vfprintf_internal_r+0x226c>
10004e38:	9080020c 	andi	r2,r18,8
10004e3c:	1004af26 	beq	r2,zero,100060fc <___vfprintf_internal_r+0x18b8>
10004e40:	d9002e17 	ldw	r4,184(sp)
10004e44:	d9402e17 	ldw	r5,184(sp)
10004e48:	d8802e17 	ldw	r2,184(sp)
10004e4c:	21000017 	ldw	r4,0(r4)
10004e50:	29400117 	ldw	r5,4(r5)
10004e54:	10800204 	addi	r2,r2,8
10004e58:	d9003615 	stw	r4,216(sp)
10004e5c:	d9403815 	stw	r5,224(sp)
10004e60:	d8802e15 	stw	r2,184(sp)
10004e64:	d9003617 	ldw	r4,216(sp)
10004e68:	d9403817 	ldw	r5,224(sp)
10004e6c:	da003d15 	stw	r8,244(sp)
10004e70:	04000044 	movi	r16,1
10004e74:	000a40c0 	call	1000a40c <__fpclassifyd>
10004e78:	da003d17 	ldw	r8,244(sp)
10004e7c:	1404441e 	bne	r2,r16,10005f90 <___vfprintf_internal_r+0x174c>
10004e80:	d9003617 	ldw	r4,216(sp)
10004e84:	d9403817 	ldw	r5,224(sp)
10004e88:	000d883a 	mov	r6,zero
10004e8c:	000f883a 	mov	r7,zero
10004e90:	000e51c0 	call	1000e51c <__ledf2>
10004e94:	da003d17 	ldw	r8,244(sp)
10004e98:	1005e316 	blt	r2,zero,10006628 <___vfprintf_internal_r+0x1de4>
10004e9c:	df002783 	ldbu	fp,158(sp)
10004ea0:	008011c4 	movi	r2,71
10004ea4:	1445580e 	bge	r2,r17,10006408 <___vfprintf_internal_r+0x1bc4>
10004ea8:	04040074 	movhi	r16,4097
10004eac:	8409a504 	addi	r16,r16,9876
10004eb0:	00c000c4 	movi	r3,3
10004eb4:	00bfdfc4 	movi	r2,-129
10004eb8:	d8c02915 	stw	r3,164(sp)
10004ebc:	90a4703a 	and	r18,r18,r2
10004ec0:	d8c02b15 	stw	r3,172(sp)
10004ec4:	d8002a15 	stw	zero,168(sp)
10004ec8:	d8003215 	stw	zero,200(sp)
10004ecc:	00003a06 	br	10004fb8 <___vfprintf_internal_r+0x774>
10004ed0:	84000214 	ori	r16,r16,8
10004ed4:	ac400007 	ldb	r17,0(r21)
10004ed8:	003ebc06 	br	100049cc <__alt_data_end+0xf80049cc>
10004edc:	8025883a 	mov	r18,r16
10004ee0:	dc002903 	ldbu	r16,164(sp)
10004ee4:	e011883a 	mov	r8,fp
10004ee8:	84003fcc 	andi	r16,r16,255
10004eec:	8007001e 	bne	r16,zero,10006af0 <___vfprintf_internal_r+0x22ac>
10004ef0:	94800414 	ori	r18,r18,16
10004ef4:	9080080c 	andi	r2,r18,32
10004ef8:	1002fa26 	beq	r2,zero,10005ae4 <___vfprintf_internal_r+0x12a0>
10004efc:	d9002e17 	ldw	r4,184(sp)
10004f00:	d9402a17 	ldw	r5,168(sp)
10004f04:	d8002785 	stb	zero,158(sp)
10004f08:	20800204 	addi	r2,r4,8
10004f0c:	24c00017 	ldw	r19,0(r4)
10004f10:	25800117 	ldw	r22,4(r4)
10004f14:	2804b116 	blt	r5,zero,100061dc <___vfprintf_internal_r+0x1998>
10004f18:	013fdfc4 	movi	r4,-129
10004f1c:	9d86b03a 	or	r3,r19,r22
10004f20:	d8802e15 	stw	r2,184(sp)
10004f24:	9124703a 	and	r18,r18,r4
10004f28:	1802fb1e 	bne	r3,zero,10005b18 <___vfprintf_internal_r+0x12d4>
10004f2c:	d8c02a17 	ldw	r3,168(sp)
10004f30:	0039883a 	mov	fp,zero
10004f34:	1805e526 	beq	r3,zero,100066cc <___vfprintf_internal_r+0x1e88>
10004f38:	0027883a 	mov	r19,zero
10004f3c:	002d883a 	mov	r22,zero
10004f40:	dc001e04 	addi	r16,sp,120
10004f44:	9806d0fa 	srli	r3,r19,3
10004f48:	b008977a 	slli	r4,r22,29
10004f4c:	b02cd0fa 	srli	r22,r22,3
10004f50:	9cc001cc 	andi	r19,r19,7
10004f54:	98800c04 	addi	r2,r19,48
10004f58:	843fffc4 	addi	r16,r16,-1
10004f5c:	20e6b03a 	or	r19,r4,r3
10004f60:	80800005 	stb	r2,0(r16)
10004f64:	9d86b03a 	or	r3,r19,r22
10004f68:	183ff61e 	bne	r3,zero,10004f44 <__alt_data_end+0xf8004f44>
10004f6c:	90c0004c 	andi	r3,r18,1
10004f70:	18014126 	beq	r3,zero,10005478 <___vfprintf_internal_r+0xc34>
10004f74:	10803fcc 	andi	r2,r2,255
10004f78:	1080201c 	xori	r2,r2,128
10004f7c:	10bfe004 	addi	r2,r2,-128
10004f80:	00c00c04 	movi	r3,48
10004f84:	10c13c26 	beq	r2,r3,10005478 <___vfprintf_internal_r+0xc34>
10004f88:	80ffffc5 	stb	r3,-1(r16)
10004f8c:	d8c02817 	ldw	r3,160(sp)
10004f90:	80bfffc4 	addi	r2,r16,-1
10004f94:	1021883a 	mov	r16,r2
10004f98:	1887c83a 	sub	r3,r3,r2
10004f9c:	d8c02b15 	stw	r3,172(sp)
10004fa0:	d8802b17 	ldw	r2,172(sp)
10004fa4:	d9002a17 	ldw	r4,168(sp)
10004fa8:	1100010e 	bge	r2,r4,10004fb0 <___vfprintf_internal_r+0x76c>
10004fac:	2005883a 	mov	r2,r4
10004fb0:	d8802915 	stw	r2,164(sp)
10004fb4:	d8003215 	stw	zero,200(sp)
10004fb8:	e7003fcc 	andi	fp,fp,255
10004fbc:	e700201c 	xori	fp,fp,128
10004fc0:	e73fe004 	addi	fp,fp,-128
10004fc4:	e0000326 	beq	fp,zero,10004fd4 <___vfprintf_internal_r+0x790>
10004fc8:	d8c02917 	ldw	r3,164(sp)
10004fcc:	18c00044 	addi	r3,r3,1
10004fd0:	d8c02915 	stw	r3,164(sp)
10004fd4:	90c0008c 	andi	r3,r18,2
10004fd8:	d8c02c15 	stw	r3,176(sp)
10004fdc:	18000326 	beq	r3,zero,10004fec <___vfprintf_internal_r+0x7a8>
10004fe0:	d8c02917 	ldw	r3,164(sp)
10004fe4:	18c00084 	addi	r3,r3,2
10004fe8:	d8c02915 	stw	r3,164(sp)
10004fec:	90c0210c 	andi	r3,r18,132
10004ff0:	d8c03015 	stw	r3,192(sp)
10004ff4:	1801c51e 	bne	r3,zero,1000570c <___vfprintf_internal_r+0xec8>
10004ff8:	d9003117 	ldw	r4,196(sp)
10004ffc:	d8c02917 	ldw	r3,164(sp)
10005000:	20e7c83a 	sub	r19,r4,r3
10005004:	04c1c10e 	bge	zero,r19,1000570c <___vfprintf_internal_r+0xec8>
10005008:	02400404 	movi	r9,16
1000500c:	d8c02017 	ldw	r3,128(sp)
10005010:	d8801f17 	ldw	r2,124(sp)
10005014:	4cc52f0e 	bge	r9,r19,100064d4 <___vfprintf_internal_r+0x1c90>
10005018:	01440074 	movhi	r5,4097
1000501c:	2949b884 	addi	r5,r5,9954
10005020:	dc403b15 	stw	r17,236(sp)
10005024:	d9403515 	stw	r5,212(sp)
10005028:	9823883a 	mov	r17,r19
1000502c:	482d883a 	mov	r22,r9
10005030:	9027883a 	mov	r19,r18
10005034:	070001c4 	movi	fp,7
10005038:	8025883a 	mov	r18,r16
1000503c:	dc002d17 	ldw	r16,180(sp)
10005040:	00000306 	br	10005050 <___vfprintf_internal_r+0x80c>
10005044:	8c7ffc04 	addi	r17,r17,-16
10005048:	42000204 	addi	r8,r8,8
1000504c:	b440130e 	bge	r22,r17,1000509c <___vfprintf_internal_r+0x858>
10005050:	01040074 	movhi	r4,4097
10005054:	18c00404 	addi	r3,r3,16
10005058:	10800044 	addi	r2,r2,1
1000505c:	2109b884 	addi	r4,r4,9954
10005060:	41000015 	stw	r4,0(r8)
10005064:	45800115 	stw	r22,4(r8)
10005068:	d8c02015 	stw	r3,128(sp)
1000506c:	d8801f15 	stw	r2,124(sp)
10005070:	e0bff40e 	bge	fp,r2,10005044 <__alt_data_end+0xf8005044>
10005074:	d9801e04 	addi	r6,sp,120
10005078:	b80b883a 	mov	r5,r23
1000507c:	8009883a 	mov	r4,r16
10005080:	000a95c0 	call	1000a95c <__sprint_r>
10005084:	103ef31e 	bne	r2,zero,10004c54 <__alt_data_end+0xf8004c54>
10005088:	8c7ffc04 	addi	r17,r17,-16
1000508c:	d8c02017 	ldw	r3,128(sp)
10005090:	d8801f17 	ldw	r2,124(sp)
10005094:	da000404 	addi	r8,sp,16
10005098:	b47fed16 	blt	r22,r17,10005050 <__alt_data_end+0xf8005050>
1000509c:	9021883a 	mov	r16,r18
100050a0:	9825883a 	mov	r18,r19
100050a4:	8827883a 	mov	r19,r17
100050a8:	dc403b17 	ldw	r17,236(sp)
100050ac:	d9403517 	ldw	r5,212(sp)
100050b0:	98c7883a 	add	r3,r19,r3
100050b4:	10800044 	addi	r2,r2,1
100050b8:	41400015 	stw	r5,0(r8)
100050bc:	44c00115 	stw	r19,4(r8)
100050c0:	d8c02015 	stw	r3,128(sp)
100050c4:	d8801f15 	stw	r2,124(sp)
100050c8:	010001c4 	movi	r4,7
100050cc:	2082c516 	blt	r4,r2,10005be4 <___vfprintf_internal_r+0x13a0>
100050d0:	df002787 	ldb	fp,158(sp)
100050d4:	42000204 	addi	r8,r8,8
100050d8:	e0000c26 	beq	fp,zero,1000510c <___vfprintf_internal_r+0x8c8>
100050dc:	d8801f17 	ldw	r2,124(sp)
100050e0:	d9002784 	addi	r4,sp,158
100050e4:	18c00044 	addi	r3,r3,1
100050e8:	10800044 	addi	r2,r2,1
100050ec:	41000015 	stw	r4,0(r8)
100050f0:	01000044 	movi	r4,1
100050f4:	41000115 	stw	r4,4(r8)
100050f8:	d8c02015 	stw	r3,128(sp)
100050fc:	d8801f15 	stw	r2,124(sp)
10005100:	010001c4 	movi	r4,7
10005104:	20825e16 	blt	r4,r2,10005a80 <___vfprintf_internal_r+0x123c>
10005108:	42000204 	addi	r8,r8,8
1000510c:	d8802c17 	ldw	r2,176(sp)
10005110:	10000c26 	beq	r2,zero,10005144 <___vfprintf_internal_r+0x900>
10005114:	d8801f17 	ldw	r2,124(sp)
10005118:	d9002704 	addi	r4,sp,156
1000511c:	18c00084 	addi	r3,r3,2
10005120:	10800044 	addi	r2,r2,1
10005124:	41000015 	stw	r4,0(r8)
10005128:	01000084 	movi	r4,2
1000512c:	41000115 	stw	r4,4(r8)
10005130:	d8c02015 	stw	r3,128(sp)
10005134:	d8801f15 	stw	r2,124(sp)
10005138:	010001c4 	movi	r4,7
1000513c:	20825816 	blt	r4,r2,10005aa0 <___vfprintf_internal_r+0x125c>
10005140:	42000204 	addi	r8,r8,8
10005144:	d9003017 	ldw	r4,192(sp)
10005148:	00802004 	movi	r2,128
1000514c:	2081bb26 	beq	r4,r2,1000583c <___vfprintf_internal_r+0xff8>
10005150:	d9402a17 	ldw	r5,168(sp)
10005154:	d8802b17 	ldw	r2,172(sp)
10005158:	28adc83a 	sub	r22,r5,r2
1000515c:	0580310e 	bge	zero,r22,10005224 <___vfprintf_internal_r+0x9e0>
10005160:	07000404 	movi	fp,16
10005164:	d8801f17 	ldw	r2,124(sp)
10005168:	e584360e 	bge	fp,r22,10006244 <___vfprintf_internal_r+0x1a00>
1000516c:	01440074 	movhi	r5,4097
10005170:	2949b484 	addi	r5,r5,9938
10005174:	dc402a15 	stw	r17,168(sp)
10005178:	d9402c15 	stw	r5,176(sp)
1000517c:	b023883a 	mov	r17,r22
10005180:	04c001c4 	movi	r19,7
10005184:	a82d883a 	mov	r22,r21
10005188:	902b883a 	mov	r21,r18
1000518c:	8025883a 	mov	r18,r16
10005190:	dc002d17 	ldw	r16,180(sp)
10005194:	00000306 	br	100051a4 <___vfprintf_internal_r+0x960>
10005198:	8c7ffc04 	addi	r17,r17,-16
1000519c:	42000204 	addi	r8,r8,8
100051a0:	e440110e 	bge	fp,r17,100051e8 <___vfprintf_internal_r+0x9a4>
100051a4:	18c00404 	addi	r3,r3,16
100051a8:	10800044 	addi	r2,r2,1
100051ac:	45000015 	stw	r20,0(r8)
100051b0:	47000115 	stw	fp,4(r8)
100051b4:	d8c02015 	stw	r3,128(sp)
100051b8:	d8801f15 	stw	r2,124(sp)
100051bc:	98bff60e 	bge	r19,r2,10005198 <__alt_data_end+0xf8005198>
100051c0:	d9801e04 	addi	r6,sp,120
100051c4:	b80b883a 	mov	r5,r23
100051c8:	8009883a 	mov	r4,r16
100051cc:	000a95c0 	call	1000a95c <__sprint_r>
100051d0:	103ea01e 	bne	r2,zero,10004c54 <__alt_data_end+0xf8004c54>
100051d4:	8c7ffc04 	addi	r17,r17,-16
100051d8:	d8c02017 	ldw	r3,128(sp)
100051dc:	d8801f17 	ldw	r2,124(sp)
100051e0:	da000404 	addi	r8,sp,16
100051e4:	e47fef16 	blt	fp,r17,100051a4 <__alt_data_end+0xf80051a4>
100051e8:	9021883a 	mov	r16,r18
100051ec:	a825883a 	mov	r18,r21
100051f0:	b02b883a 	mov	r21,r22
100051f4:	882d883a 	mov	r22,r17
100051f8:	dc402a17 	ldw	r17,168(sp)
100051fc:	d9002c17 	ldw	r4,176(sp)
10005200:	1d87883a 	add	r3,r3,r22
10005204:	10800044 	addi	r2,r2,1
10005208:	41000015 	stw	r4,0(r8)
1000520c:	45800115 	stw	r22,4(r8)
10005210:	d8c02015 	stw	r3,128(sp)
10005214:	d8801f15 	stw	r2,124(sp)
10005218:	010001c4 	movi	r4,7
1000521c:	20821016 	blt	r4,r2,10005a60 <___vfprintf_internal_r+0x121c>
10005220:	42000204 	addi	r8,r8,8
10005224:	9080400c 	andi	r2,r18,256
10005228:	10013a1e 	bne	r2,zero,10005714 <___vfprintf_internal_r+0xed0>
1000522c:	d9402b17 	ldw	r5,172(sp)
10005230:	d8801f17 	ldw	r2,124(sp)
10005234:	44000015 	stw	r16,0(r8)
10005238:	1947883a 	add	r3,r3,r5
1000523c:	10800044 	addi	r2,r2,1
10005240:	41400115 	stw	r5,4(r8)
10005244:	d8c02015 	stw	r3,128(sp)
10005248:	d8801f15 	stw	r2,124(sp)
1000524c:	010001c4 	movi	r4,7
10005250:	2081f516 	blt	r4,r2,10005a28 <___vfprintf_internal_r+0x11e4>
10005254:	42000204 	addi	r8,r8,8
10005258:	9480010c 	andi	r18,r18,4
1000525c:	90003226 	beq	r18,zero,10005328 <___vfprintf_internal_r+0xae4>
10005260:	d9403117 	ldw	r5,196(sp)
10005264:	d8802917 	ldw	r2,164(sp)
10005268:	28a1c83a 	sub	r16,r5,r2
1000526c:	04002e0e 	bge	zero,r16,10005328 <___vfprintf_internal_r+0xae4>
10005270:	04400404 	movi	r17,16
10005274:	d8801f17 	ldw	r2,124(sp)
10005278:	8c04c40e 	bge	r17,r16,1000658c <___vfprintf_internal_r+0x1d48>
1000527c:	01440074 	movhi	r5,4097
10005280:	2949b884 	addi	r5,r5,9954
10005284:	d9403515 	stw	r5,212(sp)
10005288:	048001c4 	movi	r18,7
1000528c:	dcc02d17 	ldw	r19,180(sp)
10005290:	00000306 	br	100052a0 <___vfprintf_internal_r+0xa5c>
10005294:	843ffc04 	addi	r16,r16,-16
10005298:	42000204 	addi	r8,r8,8
1000529c:	8c00130e 	bge	r17,r16,100052ec <___vfprintf_internal_r+0xaa8>
100052a0:	01040074 	movhi	r4,4097
100052a4:	18c00404 	addi	r3,r3,16
100052a8:	10800044 	addi	r2,r2,1
100052ac:	2109b884 	addi	r4,r4,9954
100052b0:	41000015 	stw	r4,0(r8)
100052b4:	44400115 	stw	r17,4(r8)
100052b8:	d8c02015 	stw	r3,128(sp)
100052bc:	d8801f15 	stw	r2,124(sp)
100052c0:	90bff40e 	bge	r18,r2,10005294 <__alt_data_end+0xf8005294>
100052c4:	d9801e04 	addi	r6,sp,120
100052c8:	b80b883a 	mov	r5,r23
100052cc:	9809883a 	mov	r4,r19
100052d0:	000a95c0 	call	1000a95c <__sprint_r>
100052d4:	103e5f1e 	bne	r2,zero,10004c54 <__alt_data_end+0xf8004c54>
100052d8:	843ffc04 	addi	r16,r16,-16
100052dc:	d8c02017 	ldw	r3,128(sp)
100052e0:	d8801f17 	ldw	r2,124(sp)
100052e4:	da000404 	addi	r8,sp,16
100052e8:	8c3fed16 	blt	r17,r16,100052a0 <__alt_data_end+0xf80052a0>
100052ec:	d9403517 	ldw	r5,212(sp)
100052f0:	1c07883a 	add	r3,r3,r16
100052f4:	10800044 	addi	r2,r2,1
100052f8:	41400015 	stw	r5,0(r8)
100052fc:	44000115 	stw	r16,4(r8)
10005300:	d8c02015 	stw	r3,128(sp)
10005304:	d8801f15 	stw	r2,124(sp)
10005308:	010001c4 	movi	r4,7
1000530c:	2080060e 	bge	r4,r2,10005328 <___vfprintf_internal_r+0xae4>
10005310:	d9002d17 	ldw	r4,180(sp)
10005314:	d9801e04 	addi	r6,sp,120
10005318:	b80b883a 	mov	r5,r23
1000531c:	000a95c0 	call	1000a95c <__sprint_r>
10005320:	103e4c1e 	bne	r2,zero,10004c54 <__alt_data_end+0xf8004c54>
10005324:	d8c02017 	ldw	r3,128(sp)
10005328:	d8803117 	ldw	r2,196(sp)
1000532c:	d9002917 	ldw	r4,164(sp)
10005330:	1100010e 	bge	r2,r4,10005338 <___vfprintf_internal_r+0xaf4>
10005334:	2005883a 	mov	r2,r4
10005338:	d9402f17 	ldw	r5,188(sp)
1000533c:	288b883a 	add	r5,r5,r2
10005340:	d9402f15 	stw	r5,188(sp)
10005344:	1801c01e 	bne	r3,zero,10005a48 <___vfprintf_internal_r+0x1204>
10005348:	a8800007 	ldb	r2,0(r21)
1000534c:	d8001f15 	stw	zero,124(sp)
10005350:	da000404 	addi	r8,sp,16
10005354:	103d751e 	bne	r2,zero,1000492c <__alt_data_end+0xf800492c>
10005358:	a823883a 	mov	r17,r21
1000535c:	003d8b06 	br	1000498c <__alt_data_end+0xf800498c>
10005360:	8025883a 	mov	r18,r16
10005364:	dc002903 	ldbu	r16,164(sp)
10005368:	e011883a 	mov	r8,fp
1000536c:	84003fcc 	andi	r16,r16,255
10005370:	8005e51e 	bne	r16,zero,10006b08 <___vfprintf_internal_r+0x22c4>
10005374:	94800414 	ori	r18,r18,16
10005378:	9080080c 	andi	r2,r18,32
1000537c:	10022b26 	beq	r2,zero,10005c2c <___vfprintf_internal_r+0x13e8>
10005380:	d9002e17 	ldw	r4,184(sp)
10005384:	d9402a17 	ldw	r5,168(sp)
10005388:	d8002785 	stb	zero,158(sp)
1000538c:	20c00204 	addi	r3,r4,8
10005390:	24c00017 	ldw	r19,0(r4)
10005394:	25800117 	ldw	r22,4(r4)
10005398:	28042e16 	blt	r5,zero,10006454 <___vfprintf_internal_r+0x1c10>
1000539c:	013fdfc4 	movi	r4,-129
100053a0:	9d84b03a 	or	r2,r19,r22
100053a4:	d8c02e15 	stw	r3,184(sp)
100053a8:	9124703a 	and	r18,r18,r4
100053ac:	0039883a 	mov	fp,zero
100053b0:	103e801e 	bne	r2,zero,10004db4 <__alt_data_end+0xf8004db4>
100053b4:	d9002a17 	ldw	r4,168(sp)
100053b8:	2002e01e 	bne	r4,zero,10005f3c <___vfprintf_internal_r+0x16f8>
100053bc:	d8002a15 	stw	zero,168(sp)
100053c0:	d8002b15 	stw	zero,172(sp)
100053c4:	dc001e04 	addi	r16,sp,120
100053c8:	003ef506 	br	10004fa0 <__alt_data_end+0xf8004fa0>
100053cc:	8025883a 	mov	r18,r16
100053d0:	dc002903 	ldbu	r16,164(sp)
100053d4:	e011883a 	mov	r8,fp
100053d8:	84003fcc 	andi	r16,r16,255
100053dc:	8005ba1e 	bne	r16,zero,10006ac8 <___vfprintf_internal_r+0x2284>
100053e0:	01040074 	movhi	r4,4097
100053e4:	2109a804 	addi	r4,r4,9888
100053e8:	d9003915 	stw	r4,228(sp)
100053ec:	9080080c 	andi	r2,r18,32
100053f0:	10006126 	beq	r2,zero,10005578 <___vfprintf_internal_r+0xd34>
100053f4:	d9402e17 	ldw	r5,184(sp)
100053f8:	2cc00017 	ldw	r19,0(r5)
100053fc:	2d800117 	ldw	r22,4(r5)
10005400:	29400204 	addi	r5,r5,8
10005404:	d9402e15 	stw	r5,184(sp)
10005408:	9080004c 	andi	r2,r18,1
1000540c:	1001ac26 	beq	r2,zero,10005ac0 <___vfprintf_internal_r+0x127c>
10005410:	9d84b03a 	or	r2,r19,r22
10005414:	10038526 	beq	r2,zero,1000622c <___vfprintf_internal_r+0x19e8>
10005418:	d8c02a17 	ldw	r3,168(sp)
1000541c:	00800c04 	movi	r2,48
10005420:	d8802705 	stb	r2,156(sp)
10005424:	dc402745 	stb	r17,157(sp)
10005428:	d8002785 	stb	zero,158(sp)
1000542c:	90800094 	ori	r2,r18,2
10005430:	18047916 	blt	r3,zero,10006618 <___vfprintf_internal_r+0x1dd4>
10005434:	00bfdfc4 	movi	r2,-129
10005438:	90a4703a 	and	r18,r18,r2
1000543c:	94800094 	ori	r18,r18,2
10005440:	0039883a 	mov	fp,zero
10005444:	d9003917 	ldw	r4,228(sp)
10005448:	dc001e04 	addi	r16,sp,120
1000544c:	988003cc 	andi	r2,r19,15
10005450:	b006973a 	slli	r3,r22,28
10005454:	2085883a 	add	r2,r4,r2
10005458:	9826d13a 	srli	r19,r19,4
1000545c:	10800003 	ldbu	r2,0(r2)
10005460:	b02cd13a 	srli	r22,r22,4
10005464:	843fffc4 	addi	r16,r16,-1
10005468:	1ce6b03a 	or	r19,r3,r19
1000546c:	80800005 	stb	r2,0(r16)
10005470:	9d84b03a 	or	r2,r19,r22
10005474:	103ff51e 	bne	r2,zero,1000544c <__alt_data_end+0xf800544c>
10005478:	d8c02817 	ldw	r3,160(sp)
1000547c:	1c07c83a 	sub	r3,r3,r16
10005480:	d8c02b15 	stw	r3,172(sp)
10005484:	003ec606 	br	10004fa0 <__alt_data_end+0xf8004fa0>
10005488:	8025883a 	mov	r18,r16
1000548c:	dc002903 	ldbu	r16,164(sp)
10005490:	e011883a 	mov	r8,fp
10005494:	84003fcc 	andi	r16,r16,255
10005498:	803e9626 	beq	r16,zero,10004ef4 <__alt_data_end+0xf8004ef4>
1000549c:	d8c02b03 	ldbu	r3,172(sp)
100054a0:	d8c02785 	stb	r3,158(sp)
100054a4:	003e9306 	br	10004ef4 <__alt_data_end+0xf8004ef4>
100054a8:	00c00044 	movi	r3,1
100054ac:	d8c02905 	stb	r3,164(sp)
100054b0:	00c00ac4 	movi	r3,43
100054b4:	d8c02b05 	stb	r3,172(sp)
100054b8:	ac400007 	ldb	r17,0(r21)
100054bc:	003d4306 	br	100049cc <__alt_data_end+0xf80049cc>
100054c0:	84000814 	ori	r16,r16,32
100054c4:	ac400007 	ldb	r17,0(r21)
100054c8:	003d4006 	br	100049cc <__alt_data_end+0xf80049cc>
100054cc:	d8802e17 	ldw	r2,184(sp)
100054d0:	8025883a 	mov	r18,r16
100054d4:	d8002785 	stb	zero,158(sp)
100054d8:	14000017 	ldw	r16,0(r2)
100054dc:	e011883a 	mov	r8,fp
100054e0:	14c00104 	addi	r19,r2,4
100054e4:	80042d26 	beq	r16,zero,1000659c <___vfprintf_internal_r+0x1d58>
100054e8:	d8c02a17 	ldw	r3,168(sp)
100054ec:	1803e416 	blt	r3,zero,10006480 <___vfprintf_internal_r+0x1c3c>
100054f0:	180d883a 	mov	r6,r3
100054f4:	000b883a 	mov	r5,zero
100054f8:	8009883a 	mov	r4,r16
100054fc:	df003d15 	stw	fp,244(sp)
10005500:	0008f4c0 	call	10008f4c <memchr>
10005504:	da003d17 	ldw	r8,244(sp)
10005508:	10046826 	beq	r2,zero,100066ac <___vfprintf_internal_r+0x1e68>
1000550c:	1405c83a 	sub	r2,r2,r16
10005510:	d8802b15 	stw	r2,172(sp)
10005514:	1003e016 	blt	r2,zero,10006498 <___vfprintf_internal_r+0x1c54>
10005518:	df002783 	ldbu	fp,158(sp)
1000551c:	d8802915 	stw	r2,164(sp)
10005520:	dcc02e15 	stw	r19,184(sp)
10005524:	d8002a15 	stw	zero,168(sp)
10005528:	d8003215 	stw	zero,200(sp)
1000552c:	003ea206 	br	10004fb8 <__alt_data_end+0xf8004fb8>
10005530:	8025883a 	mov	r18,r16
10005534:	dc002903 	ldbu	r16,164(sp)
10005538:	e011883a 	mov	r8,fp
1000553c:	84003fcc 	andi	r16,r16,255
10005540:	803f8d26 	beq	r16,zero,10005378 <__alt_data_end+0xf8005378>
10005544:	d8c02b03 	ldbu	r3,172(sp)
10005548:	d8c02785 	stb	r3,158(sp)
1000554c:	003f8a06 	br	10005378 <__alt_data_end+0xf8005378>
10005550:	8025883a 	mov	r18,r16
10005554:	dc002903 	ldbu	r16,164(sp)
10005558:	e011883a 	mov	r8,fp
1000555c:	84003fcc 	andi	r16,r16,255
10005560:	8005661e 	bne	r16,zero,10006afc <___vfprintf_internal_r+0x22b8>
10005564:	01040074 	movhi	r4,4097
10005568:	2109ad04 	addi	r4,r4,9908
1000556c:	d9003915 	stw	r4,228(sp)
10005570:	9080080c 	andi	r2,r18,32
10005574:	103f9f1e 	bne	r2,zero,100053f4 <__alt_data_end+0xf80053f4>
10005578:	9080040c 	andi	r2,r18,16
1000557c:	1002eb26 	beq	r2,zero,1000612c <___vfprintf_internal_r+0x18e8>
10005580:	d8802e17 	ldw	r2,184(sp)
10005584:	002d883a 	mov	r22,zero
10005588:	14c00017 	ldw	r19,0(r2)
1000558c:	10800104 	addi	r2,r2,4
10005590:	d8802e15 	stw	r2,184(sp)
10005594:	003f9c06 	br	10005408 <__alt_data_end+0xf8005408>
10005598:	d8802b07 	ldb	r2,172(sp)
1000559c:	1002e11e 	bne	r2,zero,10006124 <___vfprintf_internal_r+0x18e0>
100055a0:	00c00044 	movi	r3,1
100055a4:	d8c02905 	stb	r3,164(sp)
100055a8:	00c00804 	movi	r3,32
100055ac:	d8c02b05 	stb	r3,172(sp)
100055b0:	ac400007 	ldb	r17,0(r21)
100055b4:	003d0506 	br	100049cc <__alt_data_end+0xf80049cc>
100055b8:	84000054 	ori	r16,r16,1
100055bc:	ac400007 	ldb	r17,0(r21)
100055c0:	003d0206 	br	100049cc <__alt_data_end+0xf80049cc>
100055c4:	8025883a 	mov	r18,r16
100055c8:	dc002903 	ldbu	r16,164(sp)
100055cc:	e011883a 	mov	r8,fp
100055d0:	84003fcc 	andi	r16,r16,255
100055d4:	803de726 	beq	r16,zero,10004d74 <__alt_data_end+0xf8004d74>
100055d8:	d8c02b03 	ldbu	r3,172(sp)
100055dc:	d8c02785 	stb	r3,158(sp)
100055e0:	003de406 	br	10004d74 <__alt_data_end+0xf8004d74>
100055e4:	84001014 	ori	r16,r16,64
100055e8:	ac400007 	ldb	r17,0(r21)
100055ec:	003cf706 	br	100049cc <__alt_data_end+0xf80049cc>
100055f0:	ac400007 	ldb	r17,0(r21)
100055f4:	00801b04 	movi	r2,108
100055f8:	88838f26 	beq	r17,r2,10006438 <___vfprintf_internal_r+0x1bf4>
100055fc:	84000414 	ori	r16,r16,16
10005600:	003cf206 	br	100049cc <__alt_data_end+0xf80049cc>
10005604:	8025883a 	mov	r18,r16
10005608:	dc002903 	ldbu	r16,164(sp)
1000560c:	e011883a 	mov	r8,fp
10005610:	84003fcc 	andi	r16,r16,255
10005614:	80053f1e 	bne	r16,zero,10006b14 <___vfprintf_internal_r+0x22d0>
10005618:	9080080c 	andi	r2,r18,32
1000561c:	1002d226 	beq	r2,zero,10006168 <___vfprintf_internal_r+0x1924>
10005620:	d9002e17 	ldw	r4,184(sp)
10005624:	d9402f17 	ldw	r5,188(sp)
10005628:	20800017 	ldw	r2,0(r4)
1000562c:	2807d7fa 	srai	r3,r5,31
10005630:	21000104 	addi	r4,r4,4
10005634:	d9002e15 	stw	r4,184(sp)
10005638:	11400015 	stw	r5,0(r2)
1000563c:	10c00115 	stw	r3,4(r2)
10005640:	003cb806 	br	10004924 <__alt_data_end+0xf8004924>
10005644:	d8c02e17 	ldw	r3,184(sp)
10005648:	d9002e17 	ldw	r4,184(sp)
1000564c:	8025883a 	mov	r18,r16
10005650:	18800017 	ldw	r2,0(r3)
10005654:	21000104 	addi	r4,r4,4
10005658:	00c00044 	movi	r3,1
1000565c:	e011883a 	mov	r8,fp
10005660:	d8c02915 	stw	r3,164(sp)
10005664:	d8002785 	stb	zero,158(sp)
10005668:	d8801405 	stb	r2,80(sp)
1000566c:	d9002e15 	stw	r4,184(sp)
10005670:	d8c02b15 	stw	r3,172(sp)
10005674:	d8002a15 	stw	zero,168(sp)
10005678:	d8003215 	stw	zero,200(sp)
1000567c:	dc001404 	addi	r16,sp,80
10005680:	0039883a 	mov	fp,zero
10005684:	003e5306 	br	10004fd4 <__alt_data_end+0xf8004fd4>
10005688:	01040074 	movhi	r4,4097
1000568c:	2109ad04 	addi	r4,r4,9908
10005690:	0039883a 	mov	fp,zero
10005694:	d9003915 	stw	r4,228(sp)
10005698:	04401e04 	movi	r17,120
1000569c:	003f6906 	br	10005444 <__alt_data_end+0xf8005444>
100056a0:	8025883a 	mov	r18,r16
100056a4:	dc002903 	ldbu	r16,164(sp)
100056a8:	e011883a 	mov	r8,fp
100056ac:	84003fcc 	andi	r16,r16,255
100056b0:	8005081e 	bne	r16,zero,10006ad4 <___vfprintf_internal_r+0x2290>
100056b4:	883d6126 	beq	r17,zero,10004c3c <__alt_data_end+0xf8004c3c>
100056b8:	00c00044 	movi	r3,1
100056bc:	d8c02915 	stw	r3,164(sp)
100056c0:	dc401405 	stb	r17,80(sp)
100056c4:	d8002785 	stb	zero,158(sp)
100056c8:	003fe906 	br	10005670 <__alt_data_end+0xf8005670>
100056cc:	01440074 	movhi	r5,4097
100056d0:	2949ad04 	addi	r5,r5,9908
100056d4:	d9403915 	stw	r5,228(sp)
100056d8:	d8c02e15 	stw	r3,184(sp)
100056dc:	1025883a 	mov	r18,r2
100056e0:	04401e04 	movi	r17,120
100056e4:	9d84b03a 	or	r2,r19,r22
100056e8:	1000fc1e 	bne	r2,zero,10005adc <___vfprintf_internal_r+0x1298>
100056ec:	0039883a 	mov	fp,zero
100056f0:	00800084 	movi	r2,2
100056f4:	10803fcc 	andi	r2,r2,255
100056f8:	00c00044 	movi	r3,1
100056fc:	10c20f26 	beq	r2,r3,10005f3c <___vfprintf_internal_r+0x16f8>
10005700:	00c00084 	movi	r3,2
10005704:	10fd3326 	beq	r2,r3,10004bd4 <__alt_data_end+0xf8004bd4>
10005708:	003e0b06 	br	10004f38 <__alt_data_end+0xf8004f38>
1000570c:	d8c02017 	ldw	r3,128(sp)
10005710:	003e7106 	br	100050d8 <__alt_data_end+0xf80050d8>
10005714:	00801944 	movi	r2,101
10005718:	14407e0e 	bge	r2,r17,10005914 <___vfprintf_internal_r+0x10d0>
1000571c:	d9003617 	ldw	r4,216(sp)
10005720:	d9403817 	ldw	r5,224(sp)
10005724:	000d883a 	mov	r6,zero
10005728:	000f883a 	mov	r7,zero
1000572c:	d8c03c15 	stw	r3,240(sp)
10005730:	da003d15 	stw	r8,244(sp)
10005734:	000e3b80 	call	1000e3b8 <__eqdf2>
10005738:	d8c03c17 	ldw	r3,240(sp)
1000573c:	da003d17 	ldw	r8,244(sp)
10005740:	1000f71e 	bne	r2,zero,10005b20 <___vfprintf_internal_r+0x12dc>
10005744:	d8801f17 	ldw	r2,124(sp)
10005748:	01040074 	movhi	r4,4097
1000574c:	2109b404 	addi	r4,r4,9936
10005750:	18c00044 	addi	r3,r3,1
10005754:	10800044 	addi	r2,r2,1
10005758:	41000015 	stw	r4,0(r8)
1000575c:	01000044 	movi	r4,1
10005760:	41000115 	stw	r4,4(r8)
10005764:	d8c02015 	stw	r3,128(sp)
10005768:	d8801f15 	stw	r2,124(sp)
1000576c:	010001c4 	movi	r4,7
10005770:	2082b816 	blt	r4,r2,10006254 <___vfprintf_internal_r+0x1a10>
10005774:	42000204 	addi	r8,r8,8
10005778:	d8802617 	ldw	r2,152(sp)
1000577c:	d9403317 	ldw	r5,204(sp)
10005780:	11400216 	blt	r2,r5,1000578c <___vfprintf_internal_r+0xf48>
10005784:	9080004c 	andi	r2,r18,1
10005788:	103eb326 	beq	r2,zero,10005258 <__alt_data_end+0xf8005258>
1000578c:	d8803717 	ldw	r2,220(sp)
10005790:	d9003417 	ldw	r4,208(sp)
10005794:	d9403717 	ldw	r5,220(sp)
10005798:	1887883a 	add	r3,r3,r2
1000579c:	d8801f17 	ldw	r2,124(sp)
100057a0:	41000015 	stw	r4,0(r8)
100057a4:	41400115 	stw	r5,4(r8)
100057a8:	10800044 	addi	r2,r2,1
100057ac:	d8c02015 	stw	r3,128(sp)
100057b0:	d8801f15 	stw	r2,124(sp)
100057b4:	010001c4 	movi	r4,7
100057b8:	20832916 	blt	r4,r2,10006460 <___vfprintf_internal_r+0x1c1c>
100057bc:	42000204 	addi	r8,r8,8
100057c0:	d8803317 	ldw	r2,204(sp)
100057c4:	143fffc4 	addi	r16,r2,-1
100057c8:	043ea30e 	bge	zero,r16,10005258 <__alt_data_end+0xf8005258>
100057cc:	04400404 	movi	r17,16
100057d0:	d8801f17 	ldw	r2,124(sp)
100057d4:	8c00880e 	bge	r17,r16,100059f8 <___vfprintf_internal_r+0x11b4>
100057d8:	01440074 	movhi	r5,4097
100057dc:	2949b484 	addi	r5,r5,9938
100057e0:	d9402c15 	stw	r5,176(sp)
100057e4:	058001c4 	movi	r22,7
100057e8:	dcc02d17 	ldw	r19,180(sp)
100057ec:	00000306 	br	100057fc <___vfprintf_internal_r+0xfb8>
100057f0:	42000204 	addi	r8,r8,8
100057f4:	843ffc04 	addi	r16,r16,-16
100057f8:	8c00820e 	bge	r17,r16,10005a04 <___vfprintf_internal_r+0x11c0>
100057fc:	18c00404 	addi	r3,r3,16
10005800:	10800044 	addi	r2,r2,1
10005804:	45000015 	stw	r20,0(r8)
10005808:	44400115 	stw	r17,4(r8)
1000580c:	d8c02015 	stw	r3,128(sp)
10005810:	d8801f15 	stw	r2,124(sp)
10005814:	b0bff60e 	bge	r22,r2,100057f0 <__alt_data_end+0xf80057f0>
10005818:	d9801e04 	addi	r6,sp,120
1000581c:	b80b883a 	mov	r5,r23
10005820:	9809883a 	mov	r4,r19
10005824:	000a95c0 	call	1000a95c <__sprint_r>
10005828:	103d0a1e 	bne	r2,zero,10004c54 <__alt_data_end+0xf8004c54>
1000582c:	d8c02017 	ldw	r3,128(sp)
10005830:	d8801f17 	ldw	r2,124(sp)
10005834:	da000404 	addi	r8,sp,16
10005838:	003fee06 	br	100057f4 <__alt_data_end+0xf80057f4>
1000583c:	d9403117 	ldw	r5,196(sp)
10005840:	d8802917 	ldw	r2,164(sp)
10005844:	28adc83a 	sub	r22,r5,r2
10005848:	05be410e 	bge	zero,r22,10005150 <__alt_data_end+0xf8005150>
1000584c:	07000404 	movi	fp,16
10005850:	d8801f17 	ldw	r2,124(sp)
10005854:	e5838f0e 	bge	fp,r22,10006694 <___vfprintf_internal_r+0x1e50>
10005858:	01440074 	movhi	r5,4097
1000585c:	2949b484 	addi	r5,r5,9938
10005860:	dc403015 	stw	r17,192(sp)
10005864:	d9402c15 	stw	r5,176(sp)
10005868:	b023883a 	mov	r17,r22
1000586c:	04c001c4 	movi	r19,7
10005870:	a82d883a 	mov	r22,r21
10005874:	902b883a 	mov	r21,r18
10005878:	8025883a 	mov	r18,r16
1000587c:	dc002d17 	ldw	r16,180(sp)
10005880:	00000306 	br	10005890 <___vfprintf_internal_r+0x104c>
10005884:	8c7ffc04 	addi	r17,r17,-16
10005888:	42000204 	addi	r8,r8,8
1000588c:	e440110e 	bge	fp,r17,100058d4 <___vfprintf_internal_r+0x1090>
10005890:	18c00404 	addi	r3,r3,16
10005894:	10800044 	addi	r2,r2,1
10005898:	45000015 	stw	r20,0(r8)
1000589c:	47000115 	stw	fp,4(r8)
100058a0:	d8c02015 	stw	r3,128(sp)
100058a4:	d8801f15 	stw	r2,124(sp)
100058a8:	98bff60e 	bge	r19,r2,10005884 <__alt_data_end+0xf8005884>
100058ac:	d9801e04 	addi	r6,sp,120
100058b0:	b80b883a 	mov	r5,r23
100058b4:	8009883a 	mov	r4,r16
100058b8:	000a95c0 	call	1000a95c <__sprint_r>
100058bc:	103ce51e 	bne	r2,zero,10004c54 <__alt_data_end+0xf8004c54>
100058c0:	8c7ffc04 	addi	r17,r17,-16
100058c4:	d8c02017 	ldw	r3,128(sp)
100058c8:	d8801f17 	ldw	r2,124(sp)
100058cc:	da000404 	addi	r8,sp,16
100058d0:	e47fef16 	blt	fp,r17,10005890 <__alt_data_end+0xf8005890>
100058d4:	9021883a 	mov	r16,r18
100058d8:	a825883a 	mov	r18,r21
100058dc:	b02b883a 	mov	r21,r22
100058e0:	882d883a 	mov	r22,r17
100058e4:	dc403017 	ldw	r17,192(sp)
100058e8:	d9002c17 	ldw	r4,176(sp)
100058ec:	1d87883a 	add	r3,r3,r22
100058f0:	10800044 	addi	r2,r2,1
100058f4:	41000015 	stw	r4,0(r8)
100058f8:	45800115 	stw	r22,4(r8)
100058fc:	d8c02015 	stw	r3,128(sp)
10005900:	d8801f15 	stw	r2,124(sp)
10005904:	010001c4 	movi	r4,7
10005908:	20818e16 	blt	r4,r2,10005f44 <___vfprintf_internal_r+0x1700>
1000590c:	42000204 	addi	r8,r8,8
10005910:	003e0f06 	br	10005150 <__alt_data_end+0xf8005150>
10005914:	d9403317 	ldw	r5,204(sp)
10005918:	00800044 	movi	r2,1
1000591c:	18c00044 	addi	r3,r3,1
10005920:	1141530e 	bge	r2,r5,10005e70 <___vfprintf_internal_r+0x162c>
10005924:	dc401f17 	ldw	r17,124(sp)
10005928:	00800044 	movi	r2,1
1000592c:	40800115 	stw	r2,4(r8)
10005930:	8c400044 	addi	r17,r17,1
10005934:	44000015 	stw	r16,0(r8)
10005938:	d8c02015 	stw	r3,128(sp)
1000593c:	dc401f15 	stw	r17,124(sp)
10005940:	008001c4 	movi	r2,7
10005944:	14416b16 	blt	r2,r17,10005ef4 <___vfprintf_internal_r+0x16b0>
10005948:	42000204 	addi	r8,r8,8
1000594c:	d8803717 	ldw	r2,220(sp)
10005950:	d9003417 	ldw	r4,208(sp)
10005954:	8c400044 	addi	r17,r17,1
10005958:	10c7883a 	add	r3,r2,r3
1000595c:	40800115 	stw	r2,4(r8)
10005960:	41000015 	stw	r4,0(r8)
10005964:	d8c02015 	stw	r3,128(sp)
10005968:	dc401f15 	stw	r17,124(sp)
1000596c:	008001c4 	movi	r2,7
10005970:	14416916 	blt	r2,r17,10005f18 <___vfprintf_internal_r+0x16d4>
10005974:	45800204 	addi	r22,r8,8
10005978:	d9003617 	ldw	r4,216(sp)
1000597c:	d9403817 	ldw	r5,224(sp)
10005980:	000d883a 	mov	r6,zero
10005984:	000f883a 	mov	r7,zero
10005988:	d8c03c15 	stw	r3,240(sp)
1000598c:	000e3b80 	call	1000e3b8 <__eqdf2>
10005990:	d8c03c17 	ldw	r3,240(sp)
10005994:	1000bc26 	beq	r2,zero,10005c88 <___vfprintf_internal_r+0x1444>
10005998:	d9403317 	ldw	r5,204(sp)
1000599c:	84000044 	addi	r16,r16,1
100059a0:	8c400044 	addi	r17,r17,1
100059a4:	28bfffc4 	addi	r2,r5,-1
100059a8:	1887883a 	add	r3,r3,r2
100059ac:	b0800115 	stw	r2,4(r22)
100059b0:	b4000015 	stw	r16,0(r22)
100059b4:	d8c02015 	stw	r3,128(sp)
100059b8:	dc401f15 	stw	r17,124(sp)
100059bc:	008001c4 	movi	r2,7
100059c0:	14414316 	blt	r2,r17,10005ed0 <___vfprintf_internal_r+0x168c>
100059c4:	b5800204 	addi	r22,r22,8
100059c8:	d9003a17 	ldw	r4,232(sp)
100059cc:	df0022c4 	addi	fp,sp,139
100059d0:	8c400044 	addi	r17,r17,1
100059d4:	20c7883a 	add	r3,r4,r3
100059d8:	b7000015 	stw	fp,0(r22)
100059dc:	b1000115 	stw	r4,4(r22)
100059e0:	d8c02015 	stw	r3,128(sp)
100059e4:	dc401f15 	stw	r17,124(sp)
100059e8:	008001c4 	movi	r2,7
100059ec:	14400e16 	blt	r2,r17,10005a28 <___vfprintf_internal_r+0x11e4>
100059f0:	b2000204 	addi	r8,r22,8
100059f4:	003e1806 	br	10005258 <__alt_data_end+0xf8005258>
100059f8:	01040074 	movhi	r4,4097
100059fc:	2109b484 	addi	r4,r4,9938
10005a00:	d9002c15 	stw	r4,176(sp)
10005a04:	d9002c17 	ldw	r4,176(sp)
10005a08:	1c07883a 	add	r3,r3,r16
10005a0c:	44000115 	stw	r16,4(r8)
10005a10:	41000015 	stw	r4,0(r8)
10005a14:	10800044 	addi	r2,r2,1
10005a18:	d8c02015 	stw	r3,128(sp)
10005a1c:	d8801f15 	stw	r2,124(sp)
10005a20:	010001c4 	movi	r4,7
10005a24:	20be0b0e 	bge	r4,r2,10005254 <__alt_data_end+0xf8005254>
10005a28:	d9002d17 	ldw	r4,180(sp)
10005a2c:	d9801e04 	addi	r6,sp,120
10005a30:	b80b883a 	mov	r5,r23
10005a34:	000a95c0 	call	1000a95c <__sprint_r>
10005a38:	103c861e 	bne	r2,zero,10004c54 <__alt_data_end+0xf8004c54>
10005a3c:	d8c02017 	ldw	r3,128(sp)
10005a40:	da000404 	addi	r8,sp,16
10005a44:	003e0406 	br	10005258 <__alt_data_end+0xf8005258>
10005a48:	d9002d17 	ldw	r4,180(sp)
10005a4c:	d9801e04 	addi	r6,sp,120
10005a50:	b80b883a 	mov	r5,r23
10005a54:	000a95c0 	call	1000a95c <__sprint_r>
10005a58:	103e3b26 	beq	r2,zero,10005348 <__alt_data_end+0xf8005348>
10005a5c:	003c7d06 	br	10004c54 <__alt_data_end+0xf8004c54>
10005a60:	d9002d17 	ldw	r4,180(sp)
10005a64:	d9801e04 	addi	r6,sp,120
10005a68:	b80b883a 	mov	r5,r23
10005a6c:	000a95c0 	call	1000a95c <__sprint_r>
10005a70:	103c781e 	bne	r2,zero,10004c54 <__alt_data_end+0xf8004c54>
10005a74:	d8c02017 	ldw	r3,128(sp)
10005a78:	da000404 	addi	r8,sp,16
10005a7c:	003de906 	br	10005224 <__alt_data_end+0xf8005224>
10005a80:	d9002d17 	ldw	r4,180(sp)
10005a84:	d9801e04 	addi	r6,sp,120
10005a88:	b80b883a 	mov	r5,r23
10005a8c:	000a95c0 	call	1000a95c <__sprint_r>
10005a90:	103c701e 	bne	r2,zero,10004c54 <__alt_data_end+0xf8004c54>
10005a94:	d8c02017 	ldw	r3,128(sp)
10005a98:	da000404 	addi	r8,sp,16
10005a9c:	003d9b06 	br	1000510c <__alt_data_end+0xf800510c>
10005aa0:	d9002d17 	ldw	r4,180(sp)
10005aa4:	d9801e04 	addi	r6,sp,120
10005aa8:	b80b883a 	mov	r5,r23
10005aac:	000a95c0 	call	1000a95c <__sprint_r>
10005ab0:	103c681e 	bne	r2,zero,10004c54 <__alt_data_end+0xf8004c54>
10005ab4:	d8c02017 	ldw	r3,128(sp)
10005ab8:	da000404 	addi	r8,sp,16
10005abc:	003da106 	br	10005144 <__alt_data_end+0xf8005144>
10005ac0:	d9402a17 	ldw	r5,168(sp)
10005ac4:	d8002785 	stb	zero,158(sp)
10005ac8:	283f0616 	blt	r5,zero,100056e4 <__alt_data_end+0xf80056e4>
10005acc:	00ffdfc4 	movi	r3,-129
10005ad0:	9d84b03a 	or	r2,r19,r22
10005ad4:	90e4703a 	and	r18,r18,r3
10005ad8:	103c3b26 	beq	r2,zero,10004bc8 <__alt_data_end+0xf8004bc8>
10005adc:	0039883a 	mov	fp,zero
10005ae0:	003e5806 	br	10005444 <__alt_data_end+0xf8005444>
10005ae4:	9080040c 	andi	r2,r18,16
10005ae8:	1001b326 	beq	r2,zero,100061b8 <___vfprintf_internal_r+0x1974>
10005aec:	d8c02e17 	ldw	r3,184(sp)
10005af0:	d9002a17 	ldw	r4,168(sp)
10005af4:	d8002785 	stb	zero,158(sp)
10005af8:	18800104 	addi	r2,r3,4
10005afc:	1cc00017 	ldw	r19,0(r3)
10005b00:	002d883a 	mov	r22,zero
10005b04:	2001b516 	blt	r4,zero,100061dc <___vfprintf_internal_r+0x1998>
10005b08:	00ffdfc4 	movi	r3,-129
10005b0c:	d8802e15 	stw	r2,184(sp)
10005b10:	90e4703a 	and	r18,r18,r3
10005b14:	983d0526 	beq	r19,zero,10004f2c <__alt_data_end+0xf8004f2c>
10005b18:	0039883a 	mov	fp,zero
10005b1c:	003d0806 	br	10004f40 <__alt_data_end+0xf8004f40>
10005b20:	dc402617 	ldw	r17,152(sp)
10005b24:	0441d30e 	bge	zero,r17,10006274 <___vfprintf_internal_r+0x1a30>
10005b28:	dc403217 	ldw	r17,200(sp)
10005b2c:	d8803317 	ldw	r2,204(sp)
10005b30:	1440010e 	bge	r2,r17,10005b38 <___vfprintf_internal_r+0x12f4>
10005b34:	1023883a 	mov	r17,r2
10005b38:	04400a0e 	bge	zero,r17,10005b64 <___vfprintf_internal_r+0x1320>
10005b3c:	d8801f17 	ldw	r2,124(sp)
10005b40:	1c47883a 	add	r3,r3,r17
10005b44:	44000015 	stw	r16,0(r8)
10005b48:	10800044 	addi	r2,r2,1
10005b4c:	44400115 	stw	r17,4(r8)
10005b50:	d8c02015 	stw	r3,128(sp)
10005b54:	d8801f15 	stw	r2,124(sp)
10005b58:	010001c4 	movi	r4,7
10005b5c:	20826516 	blt	r4,r2,100064f4 <___vfprintf_internal_r+0x1cb0>
10005b60:	42000204 	addi	r8,r8,8
10005b64:	88026116 	blt	r17,zero,100064ec <___vfprintf_internal_r+0x1ca8>
10005b68:	d9003217 	ldw	r4,200(sp)
10005b6c:	2463c83a 	sub	r17,r4,r17
10005b70:	04407b0e 	bge	zero,r17,10005d60 <___vfprintf_internal_r+0x151c>
10005b74:	05800404 	movi	r22,16
10005b78:	d8801f17 	ldw	r2,124(sp)
10005b7c:	b4419d0e 	bge	r22,r17,100061f4 <___vfprintf_internal_r+0x19b0>
10005b80:	01040074 	movhi	r4,4097
10005b84:	2109b484 	addi	r4,r4,9938
10005b88:	d9002c15 	stw	r4,176(sp)
10005b8c:	070001c4 	movi	fp,7
10005b90:	dcc02d17 	ldw	r19,180(sp)
10005b94:	00000306 	br	10005ba4 <___vfprintf_internal_r+0x1360>
10005b98:	42000204 	addi	r8,r8,8
10005b9c:	8c7ffc04 	addi	r17,r17,-16
10005ba0:	b441970e 	bge	r22,r17,10006200 <___vfprintf_internal_r+0x19bc>
10005ba4:	18c00404 	addi	r3,r3,16
10005ba8:	10800044 	addi	r2,r2,1
10005bac:	45000015 	stw	r20,0(r8)
10005bb0:	45800115 	stw	r22,4(r8)
10005bb4:	d8c02015 	stw	r3,128(sp)
10005bb8:	d8801f15 	stw	r2,124(sp)
10005bbc:	e0bff60e 	bge	fp,r2,10005b98 <__alt_data_end+0xf8005b98>
10005bc0:	d9801e04 	addi	r6,sp,120
10005bc4:	b80b883a 	mov	r5,r23
10005bc8:	9809883a 	mov	r4,r19
10005bcc:	000a95c0 	call	1000a95c <__sprint_r>
10005bd0:	103c201e 	bne	r2,zero,10004c54 <__alt_data_end+0xf8004c54>
10005bd4:	d8c02017 	ldw	r3,128(sp)
10005bd8:	d8801f17 	ldw	r2,124(sp)
10005bdc:	da000404 	addi	r8,sp,16
10005be0:	003fee06 	br	10005b9c <__alt_data_end+0xf8005b9c>
10005be4:	d9002d17 	ldw	r4,180(sp)
10005be8:	d9801e04 	addi	r6,sp,120
10005bec:	b80b883a 	mov	r5,r23
10005bf0:	000a95c0 	call	1000a95c <__sprint_r>
10005bf4:	103c171e 	bne	r2,zero,10004c54 <__alt_data_end+0xf8004c54>
10005bf8:	d8c02017 	ldw	r3,128(sp)
10005bfc:	df002787 	ldb	fp,158(sp)
10005c00:	da000404 	addi	r8,sp,16
10005c04:	003d3406 	br	100050d8 <__alt_data_end+0xf80050d8>
10005c08:	9080040c 	andi	r2,r18,16
10005c0c:	10016126 	beq	r2,zero,10006194 <___vfprintf_internal_r+0x1950>
10005c10:	d9402e17 	ldw	r5,184(sp)
10005c14:	2cc00017 	ldw	r19,0(r5)
10005c18:	29400104 	addi	r5,r5,4
10005c1c:	d9402e15 	stw	r5,184(sp)
10005c20:	982dd7fa 	srai	r22,r19,31
10005c24:	b005883a 	mov	r2,r22
10005c28:	003c5a06 	br	10004d94 <__alt_data_end+0xf8004d94>
10005c2c:	9080040c 	andi	r2,r18,16
10005c30:	10003526 	beq	r2,zero,10005d08 <___vfprintf_internal_r+0x14c4>
10005c34:	d8c02e17 	ldw	r3,184(sp)
10005c38:	d9002a17 	ldw	r4,168(sp)
10005c3c:	d8002785 	stb	zero,158(sp)
10005c40:	18800104 	addi	r2,r3,4
10005c44:	1cc00017 	ldw	r19,0(r3)
10005c48:	002d883a 	mov	r22,zero
10005c4c:	20003716 	blt	r4,zero,10005d2c <___vfprintf_internal_r+0x14e8>
10005c50:	00ffdfc4 	movi	r3,-129
10005c54:	d8802e15 	stw	r2,184(sp)
10005c58:	90e4703a 	and	r18,r18,r3
10005c5c:	0039883a 	mov	fp,zero
10005c60:	983dd426 	beq	r19,zero,100053b4 <__alt_data_end+0xf80053b4>
10005c64:	00800244 	movi	r2,9
10005c68:	14fc5336 	bltu	r2,r19,10004db8 <__alt_data_end+0xf8004db8>
10005c6c:	d8c02817 	ldw	r3,160(sp)
10005c70:	dc001dc4 	addi	r16,sp,119
10005c74:	9cc00c04 	addi	r19,r19,48
10005c78:	1c07c83a 	sub	r3,r3,r16
10005c7c:	dcc01dc5 	stb	r19,119(sp)
10005c80:	d8c02b15 	stw	r3,172(sp)
10005c84:	003cc606 	br	10004fa0 <__alt_data_end+0xf8004fa0>
10005c88:	d8803317 	ldw	r2,204(sp)
10005c8c:	143fffc4 	addi	r16,r2,-1
10005c90:	043f4d0e 	bge	zero,r16,100059c8 <__alt_data_end+0xf80059c8>
10005c94:	07000404 	movi	fp,16
10005c98:	e400810e 	bge	fp,r16,10005ea0 <___vfprintf_internal_r+0x165c>
10005c9c:	01440074 	movhi	r5,4097
10005ca0:	2949b484 	addi	r5,r5,9938
10005ca4:	d9402c15 	stw	r5,176(sp)
10005ca8:	01c001c4 	movi	r7,7
10005cac:	dcc02d17 	ldw	r19,180(sp)
10005cb0:	00000306 	br	10005cc0 <___vfprintf_internal_r+0x147c>
10005cb4:	b5800204 	addi	r22,r22,8
10005cb8:	843ffc04 	addi	r16,r16,-16
10005cbc:	e4007b0e 	bge	fp,r16,10005eac <___vfprintf_internal_r+0x1668>
10005cc0:	18c00404 	addi	r3,r3,16
10005cc4:	8c400044 	addi	r17,r17,1
10005cc8:	b5000015 	stw	r20,0(r22)
10005ccc:	b7000115 	stw	fp,4(r22)
10005cd0:	d8c02015 	stw	r3,128(sp)
10005cd4:	dc401f15 	stw	r17,124(sp)
10005cd8:	3c7ff60e 	bge	r7,r17,10005cb4 <__alt_data_end+0xf8005cb4>
10005cdc:	d9801e04 	addi	r6,sp,120
10005ce0:	b80b883a 	mov	r5,r23
10005ce4:	9809883a 	mov	r4,r19
10005ce8:	d9c03c15 	stw	r7,240(sp)
10005cec:	000a95c0 	call	1000a95c <__sprint_r>
10005cf0:	d9c03c17 	ldw	r7,240(sp)
10005cf4:	103bd71e 	bne	r2,zero,10004c54 <__alt_data_end+0xf8004c54>
10005cf8:	d8c02017 	ldw	r3,128(sp)
10005cfc:	dc401f17 	ldw	r17,124(sp)
10005d00:	dd800404 	addi	r22,sp,16
10005d04:	003fec06 	br	10005cb8 <__alt_data_end+0xf8005cb8>
10005d08:	9080100c 	andi	r2,r18,64
10005d0c:	d8002785 	stb	zero,158(sp)
10005d10:	10010e26 	beq	r2,zero,1000614c <___vfprintf_internal_r+0x1908>
10005d14:	d9402e17 	ldw	r5,184(sp)
10005d18:	d8c02a17 	ldw	r3,168(sp)
10005d1c:	002d883a 	mov	r22,zero
10005d20:	28800104 	addi	r2,r5,4
10005d24:	2cc0000b 	ldhu	r19,0(r5)
10005d28:	183fc90e 	bge	r3,zero,10005c50 <__alt_data_end+0xf8005c50>
10005d2c:	d8802e15 	stw	r2,184(sp)
10005d30:	0039883a 	mov	fp,zero
10005d34:	9d84b03a 	or	r2,r19,r22
10005d38:	103c1e1e 	bne	r2,zero,10004db4 <__alt_data_end+0xf8004db4>
10005d3c:	00800044 	movi	r2,1
10005d40:	003e6c06 	br	100056f4 <__alt_data_end+0xf80056f4>
10005d44:	d9002d17 	ldw	r4,180(sp)
10005d48:	d9801e04 	addi	r6,sp,120
10005d4c:	b80b883a 	mov	r5,r23
10005d50:	000a95c0 	call	1000a95c <__sprint_r>
10005d54:	103bbf1e 	bne	r2,zero,10004c54 <__alt_data_end+0xf8004c54>
10005d58:	d8c02017 	ldw	r3,128(sp)
10005d5c:	da000404 	addi	r8,sp,16
10005d60:	d9003217 	ldw	r4,200(sp)
10005d64:	d8802617 	ldw	r2,152(sp)
10005d68:	d9403317 	ldw	r5,204(sp)
10005d6c:	8123883a 	add	r17,r16,r4
10005d70:	11400216 	blt	r2,r5,10005d7c <___vfprintf_internal_r+0x1538>
10005d74:	9100004c 	andi	r4,r18,1
10005d78:	20000d26 	beq	r4,zero,10005db0 <___vfprintf_internal_r+0x156c>
10005d7c:	d9003717 	ldw	r4,220(sp)
10005d80:	d9403417 	ldw	r5,208(sp)
10005d84:	1907883a 	add	r3,r3,r4
10005d88:	d9001f17 	ldw	r4,124(sp)
10005d8c:	41400015 	stw	r5,0(r8)
10005d90:	d9403717 	ldw	r5,220(sp)
10005d94:	21000044 	addi	r4,r4,1
10005d98:	d8c02015 	stw	r3,128(sp)
10005d9c:	41400115 	stw	r5,4(r8)
10005da0:	d9001f15 	stw	r4,124(sp)
10005da4:	014001c4 	movi	r5,7
10005da8:	2901e816 	blt	r5,r4,1000654c <___vfprintf_internal_r+0x1d08>
10005dac:	42000204 	addi	r8,r8,8
10005db0:	d9003317 	ldw	r4,204(sp)
10005db4:	8121883a 	add	r16,r16,r4
10005db8:	2085c83a 	sub	r2,r4,r2
10005dbc:	8461c83a 	sub	r16,r16,r17
10005dc0:	1400010e 	bge	r2,r16,10005dc8 <___vfprintf_internal_r+0x1584>
10005dc4:	1021883a 	mov	r16,r2
10005dc8:	04000a0e 	bge	zero,r16,10005df4 <___vfprintf_internal_r+0x15b0>
10005dcc:	d9001f17 	ldw	r4,124(sp)
10005dd0:	1c07883a 	add	r3,r3,r16
10005dd4:	44400015 	stw	r17,0(r8)
10005dd8:	21000044 	addi	r4,r4,1
10005ddc:	44000115 	stw	r16,4(r8)
10005de0:	d8c02015 	stw	r3,128(sp)
10005de4:	d9001f15 	stw	r4,124(sp)
10005de8:	014001c4 	movi	r5,7
10005dec:	2901fb16 	blt	r5,r4,100065dc <___vfprintf_internal_r+0x1d98>
10005df0:	42000204 	addi	r8,r8,8
10005df4:	8001f716 	blt	r16,zero,100065d4 <___vfprintf_internal_r+0x1d90>
10005df8:	1421c83a 	sub	r16,r2,r16
10005dfc:	043d160e 	bge	zero,r16,10005258 <__alt_data_end+0xf8005258>
10005e00:	04400404 	movi	r17,16
10005e04:	d8801f17 	ldw	r2,124(sp)
10005e08:	8c3efb0e 	bge	r17,r16,100059f8 <__alt_data_end+0xf80059f8>
10005e0c:	01440074 	movhi	r5,4097
10005e10:	2949b484 	addi	r5,r5,9938
10005e14:	d9402c15 	stw	r5,176(sp)
10005e18:	058001c4 	movi	r22,7
10005e1c:	dcc02d17 	ldw	r19,180(sp)
10005e20:	00000306 	br	10005e30 <___vfprintf_internal_r+0x15ec>
10005e24:	42000204 	addi	r8,r8,8
10005e28:	843ffc04 	addi	r16,r16,-16
10005e2c:	8c3ef50e 	bge	r17,r16,10005a04 <__alt_data_end+0xf8005a04>
10005e30:	18c00404 	addi	r3,r3,16
10005e34:	10800044 	addi	r2,r2,1
10005e38:	45000015 	stw	r20,0(r8)
10005e3c:	44400115 	stw	r17,4(r8)
10005e40:	d8c02015 	stw	r3,128(sp)
10005e44:	d8801f15 	stw	r2,124(sp)
10005e48:	b0bff60e 	bge	r22,r2,10005e24 <__alt_data_end+0xf8005e24>
10005e4c:	d9801e04 	addi	r6,sp,120
10005e50:	b80b883a 	mov	r5,r23
10005e54:	9809883a 	mov	r4,r19
10005e58:	000a95c0 	call	1000a95c <__sprint_r>
10005e5c:	103b7d1e 	bne	r2,zero,10004c54 <__alt_data_end+0xf8004c54>
10005e60:	d8c02017 	ldw	r3,128(sp)
10005e64:	d8801f17 	ldw	r2,124(sp)
10005e68:	da000404 	addi	r8,sp,16
10005e6c:	003fee06 	br	10005e28 <__alt_data_end+0xf8005e28>
10005e70:	9088703a 	and	r4,r18,r2
10005e74:	203eab1e 	bne	r4,zero,10005924 <__alt_data_end+0xf8005924>
10005e78:	dc401f17 	ldw	r17,124(sp)
10005e7c:	40800115 	stw	r2,4(r8)
10005e80:	44000015 	stw	r16,0(r8)
10005e84:	8c400044 	addi	r17,r17,1
10005e88:	d8c02015 	stw	r3,128(sp)
10005e8c:	dc401f15 	stw	r17,124(sp)
10005e90:	008001c4 	movi	r2,7
10005e94:	14400e16 	blt	r2,r17,10005ed0 <___vfprintf_internal_r+0x168c>
10005e98:	45800204 	addi	r22,r8,8
10005e9c:	003eca06 	br	100059c8 <__alt_data_end+0xf80059c8>
10005ea0:	01040074 	movhi	r4,4097
10005ea4:	2109b484 	addi	r4,r4,9938
10005ea8:	d9002c15 	stw	r4,176(sp)
10005eac:	d8802c17 	ldw	r2,176(sp)
10005eb0:	1c07883a 	add	r3,r3,r16
10005eb4:	8c400044 	addi	r17,r17,1
10005eb8:	b0800015 	stw	r2,0(r22)
10005ebc:	b4000115 	stw	r16,4(r22)
10005ec0:	d8c02015 	stw	r3,128(sp)
10005ec4:	dc401f15 	stw	r17,124(sp)
10005ec8:	008001c4 	movi	r2,7
10005ecc:	147ebd0e 	bge	r2,r17,100059c4 <__alt_data_end+0xf80059c4>
10005ed0:	d9002d17 	ldw	r4,180(sp)
10005ed4:	d9801e04 	addi	r6,sp,120
10005ed8:	b80b883a 	mov	r5,r23
10005edc:	000a95c0 	call	1000a95c <__sprint_r>
10005ee0:	103b5c1e 	bne	r2,zero,10004c54 <__alt_data_end+0xf8004c54>
10005ee4:	d8c02017 	ldw	r3,128(sp)
10005ee8:	dc401f17 	ldw	r17,124(sp)
10005eec:	dd800404 	addi	r22,sp,16
10005ef0:	003eb506 	br	100059c8 <__alt_data_end+0xf80059c8>
10005ef4:	d9002d17 	ldw	r4,180(sp)
10005ef8:	d9801e04 	addi	r6,sp,120
10005efc:	b80b883a 	mov	r5,r23
10005f00:	000a95c0 	call	1000a95c <__sprint_r>
10005f04:	103b531e 	bne	r2,zero,10004c54 <__alt_data_end+0xf8004c54>
10005f08:	d8c02017 	ldw	r3,128(sp)
10005f0c:	dc401f17 	ldw	r17,124(sp)
10005f10:	da000404 	addi	r8,sp,16
10005f14:	003e8d06 	br	1000594c <__alt_data_end+0xf800594c>
10005f18:	d9002d17 	ldw	r4,180(sp)
10005f1c:	d9801e04 	addi	r6,sp,120
10005f20:	b80b883a 	mov	r5,r23
10005f24:	000a95c0 	call	1000a95c <__sprint_r>
10005f28:	103b4a1e 	bne	r2,zero,10004c54 <__alt_data_end+0xf8004c54>
10005f2c:	d8c02017 	ldw	r3,128(sp)
10005f30:	dc401f17 	ldw	r17,124(sp)
10005f34:	dd800404 	addi	r22,sp,16
10005f38:	003e8f06 	br	10005978 <__alt_data_end+0xf8005978>
10005f3c:	0027883a 	mov	r19,zero
10005f40:	003f4a06 	br	10005c6c <__alt_data_end+0xf8005c6c>
10005f44:	d9002d17 	ldw	r4,180(sp)
10005f48:	d9801e04 	addi	r6,sp,120
10005f4c:	b80b883a 	mov	r5,r23
10005f50:	000a95c0 	call	1000a95c <__sprint_r>
10005f54:	103b3f1e 	bne	r2,zero,10004c54 <__alt_data_end+0xf8004c54>
10005f58:	d8c02017 	ldw	r3,128(sp)
10005f5c:	da000404 	addi	r8,sp,16
10005f60:	003c7b06 	br	10005150 <__alt_data_end+0xf8005150>
10005f64:	d9402a17 	ldw	r5,168(sp)
10005f68:	04e7c83a 	sub	r19,zero,r19
10005f6c:	07000b44 	movi	fp,45
10005f70:	9804c03a 	cmpne	r2,r19,zero
10005f74:	05adc83a 	sub	r22,zero,r22
10005f78:	df002785 	stb	fp,158(sp)
10005f7c:	b0adc83a 	sub	r22,r22,r2
10005f80:	28017b16 	blt	r5,zero,10006570 <___vfprintf_internal_r+0x1d2c>
10005f84:	00bfdfc4 	movi	r2,-129
10005f88:	90a4703a 	and	r18,r18,r2
10005f8c:	003b8906 	br	10004db4 <__alt_data_end+0xf8004db4>
10005f90:	d9003617 	ldw	r4,216(sp)
10005f94:	d9403817 	ldw	r5,224(sp)
10005f98:	da003d15 	stw	r8,244(sp)
10005f9c:	000a40c0 	call	1000a40c <__fpclassifyd>
10005fa0:	da003d17 	ldw	r8,244(sp)
10005fa4:	1000f026 	beq	r2,zero,10006368 <___vfprintf_internal_r+0x1b24>
10005fa8:	d9002a17 	ldw	r4,168(sp)
10005fac:	05bff7c4 	movi	r22,-33
10005fb0:	00bfffc4 	movi	r2,-1
10005fb4:	8dac703a 	and	r22,r17,r22
10005fb8:	20820026 	beq	r4,r2,100067bc <___vfprintf_internal_r+0x1f78>
10005fbc:	008011c4 	movi	r2,71
10005fc0:	b081f726 	beq	r22,r2,100067a0 <___vfprintf_internal_r+0x1f5c>
10005fc4:	d9003817 	ldw	r4,224(sp)
10005fc8:	90c04014 	ori	r3,r18,256
10005fcc:	d8c02c15 	stw	r3,176(sp)
10005fd0:	20021516 	blt	r4,zero,10006828 <___vfprintf_internal_r+0x1fe4>
10005fd4:	dcc03817 	ldw	r19,224(sp)
10005fd8:	d8002905 	stb	zero,164(sp)
10005fdc:	00801984 	movi	r2,102
10005fe0:	8881f926 	beq	r17,r2,100067c8 <___vfprintf_internal_r+0x1f84>
10005fe4:	00801184 	movi	r2,70
10005fe8:	88821c26 	beq	r17,r2,1000685c <___vfprintf_internal_r+0x2018>
10005fec:	00801144 	movi	r2,69
10005ff0:	b081ef26 	beq	r22,r2,100067b0 <___vfprintf_internal_r+0x1f6c>
10005ff4:	d8c02a17 	ldw	r3,168(sp)
10005ff8:	d8802104 	addi	r2,sp,132
10005ffc:	d8800315 	stw	r2,12(sp)
10006000:	d9403617 	ldw	r5,216(sp)
10006004:	d8802504 	addi	r2,sp,148
10006008:	d9002d17 	ldw	r4,180(sp)
1000600c:	d8800215 	stw	r2,8(sp)
10006010:	d8802604 	addi	r2,sp,152
10006014:	d8c00015 	stw	r3,0(sp)
10006018:	d8800115 	stw	r2,4(sp)
1000601c:	01c00084 	movi	r7,2
10006020:	980d883a 	mov	r6,r19
10006024:	d8c03c15 	stw	r3,240(sp)
10006028:	da003d15 	stw	r8,244(sp)
1000602c:	00071c00 	call	100071c0 <_dtoa_r>
10006030:	1021883a 	mov	r16,r2
10006034:	008019c4 	movi	r2,103
10006038:	d8c03c17 	ldw	r3,240(sp)
1000603c:	da003d17 	ldw	r8,244(sp)
10006040:	88817126 	beq	r17,r2,10006608 <___vfprintf_internal_r+0x1dc4>
10006044:	008011c4 	movi	r2,71
10006048:	88829126 	beq	r17,r2,10006a90 <___vfprintf_internal_r+0x224c>
1000604c:	80f9883a 	add	fp,r16,r3
10006050:	d9003617 	ldw	r4,216(sp)
10006054:	000d883a 	mov	r6,zero
10006058:	000f883a 	mov	r7,zero
1000605c:	980b883a 	mov	r5,r19
10006060:	da003d15 	stw	r8,244(sp)
10006064:	000e3b80 	call	1000e3b8 <__eqdf2>
10006068:	da003d17 	ldw	r8,244(sp)
1000606c:	10018d26 	beq	r2,zero,100066a4 <___vfprintf_internal_r+0x1e60>
10006070:	d8802117 	ldw	r2,132(sp)
10006074:	1700062e 	bgeu	r2,fp,10006090 <___vfprintf_internal_r+0x184c>
10006078:	01000c04 	movi	r4,48
1000607c:	10c00044 	addi	r3,r2,1
10006080:	d8c02115 	stw	r3,132(sp)
10006084:	11000005 	stb	r4,0(r2)
10006088:	d8802117 	ldw	r2,132(sp)
1000608c:	173ffb36 	bltu	r2,fp,1000607c <__alt_data_end+0xf800607c>
10006090:	1405c83a 	sub	r2,r2,r16
10006094:	d8803315 	stw	r2,204(sp)
10006098:	008011c4 	movi	r2,71
1000609c:	b0817626 	beq	r22,r2,10006678 <___vfprintf_internal_r+0x1e34>
100060a0:	00801944 	movi	r2,101
100060a4:	1442800e 	bge	r2,r17,10006aa8 <___vfprintf_internal_r+0x2264>
100060a8:	d8c02617 	ldw	r3,152(sp)
100060ac:	00801984 	movi	r2,102
100060b0:	d8c03215 	stw	r3,200(sp)
100060b4:	8881fe26 	beq	r17,r2,100068b0 <___vfprintf_internal_r+0x206c>
100060b8:	d8c03217 	ldw	r3,200(sp)
100060bc:	d9003317 	ldw	r4,204(sp)
100060c0:	1901dd16 	blt	r3,r4,10006838 <___vfprintf_internal_r+0x1ff4>
100060c4:	9480004c 	andi	r18,r18,1
100060c8:	90022b1e 	bne	r18,zero,10006978 <___vfprintf_internal_r+0x2134>
100060cc:	1805883a 	mov	r2,r3
100060d0:	18028316 	blt	r3,zero,10006ae0 <___vfprintf_internal_r+0x229c>
100060d4:	d8c03217 	ldw	r3,200(sp)
100060d8:	044019c4 	movi	r17,103
100060dc:	d8c02b15 	stw	r3,172(sp)
100060e0:	df002907 	ldb	fp,164(sp)
100060e4:	e001531e 	bne	fp,zero,10006634 <___vfprintf_internal_r+0x1df0>
100060e8:	df002783 	ldbu	fp,158(sp)
100060ec:	d8802915 	stw	r2,164(sp)
100060f0:	dc802c17 	ldw	r18,176(sp)
100060f4:	d8002a15 	stw	zero,168(sp)
100060f8:	003baf06 	br	10004fb8 <__alt_data_end+0xf8004fb8>
100060fc:	d8c02e17 	ldw	r3,184(sp)
10006100:	d9002e17 	ldw	r4,184(sp)
10006104:	d9402e17 	ldw	r5,184(sp)
10006108:	18c00017 	ldw	r3,0(r3)
1000610c:	21000117 	ldw	r4,4(r4)
10006110:	29400204 	addi	r5,r5,8
10006114:	d8c03615 	stw	r3,216(sp)
10006118:	d9003815 	stw	r4,224(sp)
1000611c:	d9402e15 	stw	r5,184(sp)
10006120:	003b5006 	br	10004e64 <__alt_data_end+0xf8004e64>
10006124:	ac400007 	ldb	r17,0(r21)
10006128:	003a2806 	br	100049cc <__alt_data_end+0xf80049cc>
1000612c:	9080100c 	andi	r2,r18,64
10006130:	1000a826 	beq	r2,zero,100063d4 <___vfprintf_internal_r+0x1b90>
10006134:	d8c02e17 	ldw	r3,184(sp)
10006138:	002d883a 	mov	r22,zero
1000613c:	1cc0000b 	ldhu	r19,0(r3)
10006140:	18c00104 	addi	r3,r3,4
10006144:	d8c02e15 	stw	r3,184(sp)
10006148:	003caf06 	br	10005408 <__alt_data_end+0xf8005408>
1000614c:	d9002e17 	ldw	r4,184(sp)
10006150:	d9402a17 	ldw	r5,168(sp)
10006154:	002d883a 	mov	r22,zero
10006158:	20800104 	addi	r2,r4,4
1000615c:	24c00017 	ldw	r19,0(r4)
10006160:	283ebb0e 	bge	r5,zero,10005c50 <__alt_data_end+0xf8005c50>
10006164:	003ef106 	br	10005d2c <__alt_data_end+0xf8005d2c>
10006168:	9080040c 	andi	r2,r18,16
1000616c:	1000921e 	bne	r2,zero,100063b8 <___vfprintf_internal_r+0x1b74>
10006170:	9480100c 	andi	r18,r18,64
10006174:	90013926 	beq	r18,zero,1000665c <___vfprintf_internal_r+0x1e18>
10006178:	d9402e17 	ldw	r5,184(sp)
1000617c:	d8c02f17 	ldw	r3,188(sp)
10006180:	28800017 	ldw	r2,0(r5)
10006184:	29400104 	addi	r5,r5,4
10006188:	d9402e15 	stw	r5,184(sp)
1000618c:	10c0000d 	sth	r3,0(r2)
10006190:	0039e406 	br	10004924 <__alt_data_end+0xf8004924>
10006194:	9080100c 	andi	r2,r18,64
10006198:	10008026 	beq	r2,zero,1000639c <___vfprintf_internal_r+0x1b58>
1000619c:	d8802e17 	ldw	r2,184(sp)
100061a0:	14c0000f 	ldh	r19,0(r2)
100061a4:	10800104 	addi	r2,r2,4
100061a8:	d8802e15 	stw	r2,184(sp)
100061ac:	982dd7fa 	srai	r22,r19,31
100061b0:	b005883a 	mov	r2,r22
100061b4:	003af706 	br	10004d94 <__alt_data_end+0xf8004d94>
100061b8:	9080100c 	andi	r2,r18,64
100061bc:	d8002785 	stb	zero,158(sp)
100061c0:	10008a1e 	bne	r2,zero,100063ec <___vfprintf_internal_r+0x1ba8>
100061c4:	d9002e17 	ldw	r4,184(sp)
100061c8:	d9402a17 	ldw	r5,168(sp)
100061cc:	002d883a 	mov	r22,zero
100061d0:	20800104 	addi	r2,r4,4
100061d4:	24c00017 	ldw	r19,0(r4)
100061d8:	283e4b0e 	bge	r5,zero,10005b08 <__alt_data_end+0xf8005b08>
100061dc:	9d86b03a 	or	r3,r19,r22
100061e0:	d8802e15 	stw	r2,184(sp)
100061e4:	183e4c1e 	bne	r3,zero,10005b18 <__alt_data_end+0xf8005b18>
100061e8:	0039883a 	mov	fp,zero
100061ec:	0005883a 	mov	r2,zero
100061f0:	003d4006 	br	100056f4 <__alt_data_end+0xf80056f4>
100061f4:	01440074 	movhi	r5,4097
100061f8:	2949b484 	addi	r5,r5,9938
100061fc:	d9402c15 	stw	r5,176(sp)
10006200:	d9402c17 	ldw	r5,176(sp)
10006204:	1c47883a 	add	r3,r3,r17
10006208:	10800044 	addi	r2,r2,1
1000620c:	41400015 	stw	r5,0(r8)
10006210:	44400115 	stw	r17,4(r8)
10006214:	d8c02015 	stw	r3,128(sp)
10006218:	d8801f15 	stw	r2,124(sp)
1000621c:	010001c4 	movi	r4,7
10006220:	20bec816 	blt	r4,r2,10005d44 <__alt_data_end+0xf8005d44>
10006224:	42000204 	addi	r8,r8,8
10006228:	003ecd06 	br	10005d60 <__alt_data_end+0xf8005d60>
1000622c:	d9002a17 	ldw	r4,168(sp)
10006230:	d8002785 	stb	zero,158(sp)
10006234:	203d2d16 	blt	r4,zero,100056ec <__alt_data_end+0xf80056ec>
10006238:	00bfdfc4 	movi	r2,-129
1000623c:	90a4703a 	and	r18,r18,r2
10006240:	003a6106 	br	10004bc8 <__alt_data_end+0xf8004bc8>
10006244:	01040074 	movhi	r4,4097
10006248:	2109b484 	addi	r4,r4,9938
1000624c:	d9002c15 	stw	r4,176(sp)
10006250:	003bea06 	br	100051fc <__alt_data_end+0xf80051fc>
10006254:	d9002d17 	ldw	r4,180(sp)
10006258:	d9801e04 	addi	r6,sp,120
1000625c:	b80b883a 	mov	r5,r23
10006260:	000a95c0 	call	1000a95c <__sprint_r>
10006264:	103a7b1e 	bne	r2,zero,10004c54 <__alt_data_end+0xf8004c54>
10006268:	d8c02017 	ldw	r3,128(sp)
1000626c:	da000404 	addi	r8,sp,16
10006270:	003d4106 	br	10005778 <__alt_data_end+0xf8005778>
10006274:	d8801f17 	ldw	r2,124(sp)
10006278:	01440074 	movhi	r5,4097
1000627c:	01000044 	movi	r4,1
10006280:	18c00044 	addi	r3,r3,1
10006284:	10800044 	addi	r2,r2,1
10006288:	2949b404 	addi	r5,r5,9936
1000628c:	41000115 	stw	r4,4(r8)
10006290:	41400015 	stw	r5,0(r8)
10006294:	d8c02015 	stw	r3,128(sp)
10006298:	d8801f15 	stw	r2,124(sp)
1000629c:	010001c4 	movi	r4,7
100062a0:	20805c16 	blt	r4,r2,10006414 <___vfprintf_internal_r+0x1bd0>
100062a4:	42000204 	addi	r8,r8,8
100062a8:	8800041e 	bne	r17,zero,100062bc <___vfprintf_internal_r+0x1a78>
100062ac:	d8803317 	ldw	r2,204(sp)
100062b0:	1000021e 	bne	r2,zero,100062bc <___vfprintf_internal_r+0x1a78>
100062b4:	9080004c 	andi	r2,r18,1
100062b8:	103be726 	beq	r2,zero,10005258 <__alt_data_end+0xf8005258>
100062bc:	d9003717 	ldw	r4,220(sp)
100062c0:	d8801f17 	ldw	r2,124(sp)
100062c4:	d9403417 	ldw	r5,208(sp)
100062c8:	20c7883a 	add	r3,r4,r3
100062cc:	10800044 	addi	r2,r2,1
100062d0:	41000115 	stw	r4,4(r8)
100062d4:	41400015 	stw	r5,0(r8)
100062d8:	d8c02015 	stw	r3,128(sp)
100062dc:	d8801f15 	stw	r2,124(sp)
100062e0:	010001c4 	movi	r4,7
100062e4:	20812116 	blt	r4,r2,1000676c <___vfprintf_internal_r+0x1f28>
100062e8:	42000204 	addi	r8,r8,8
100062ec:	0463c83a 	sub	r17,zero,r17
100062f0:	0440730e 	bge	zero,r17,100064c0 <___vfprintf_internal_r+0x1c7c>
100062f4:	05800404 	movi	r22,16
100062f8:	b440860e 	bge	r22,r17,10006514 <___vfprintf_internal_r+0x1cd0>
100062fc:	01440074 	movhi	r5,4097
10006300:	2949b484 	addi	r5,r5,9938
10006304:	d9402c15 	stw	r5,176(sp)
10006308:	070001c4 	movi	fp,7
1000630c:	dcc02d17 	ldw	r19,180(sp)
10006310:	00000306 	br	10006320 <___vfprintf_internal_r+0x1adc>
10006314:	42000204 	addi	r8,r8,8
10006318:	8c7ffc04 	addi	r17,r17,-16
1000631c:	b440800e 	bge	r22,r17,10006520 <___vfprintf_internal_r+0x1cdc>
10006320:	18c00404 	addi	r3,r3,16
10006324:	10800044 	addi	r2,r2,1
10006328:	45000015 	stw	r20,0(r8)
1000632c:	45800115 	stw	r22,4(r8)
10006330:	d8c02015 	stw	r3,128(sp)
10006334:	d8801f15 	stw	r2,124(sp)
10006338:	e0bff60e 	bge	fp,r2,10006314 <__alt_data_end+0xf8006314>
1000633c:	d9801e04 	addi	r6,sp,120
10006340:	b80b883a 	mov	r5,r23
10006344:	9809883a 	mov	r4,r19
10006348:	000a95c0 	call	1000a95c <__sprint_r>
1000634c:	103a411e 	bne	r2,zero,10004c54 <__alt_data_end+0xf8004c54>
10006350:	d8c02017 	ldw	r3,128(sp)
10006354:	d8801f17 	ldw	r2,124(sp)
10006358:	da000404 	addi	r8,sp,16
1000635c:	003fee06 	br	10006318 <__alt_data_end+0xf8006318>
10006360:	00bfffc4 	movi	r2,-1
10006364:	003a3f06 	br	10004c64 <__alt_data_end+0xf8004c64>
10006368:	008011c4 	movi	r2,71
1000636c:	1440b816 	blt	r2,r17,10006650 <___vfprintf_internal_r+0x1e0c>
10006370:	04040074 	movhi	r16,4097
10006374:	8409a604 	addi	r16,r16,9880
10006378:	00c000c4 	movi	r3,3
1000637c:	00bfdfc4 	movi	r2,-129
10006380:	d8c02915 	stw	r3,164(sp)
10006384:	90a4703a 	and	r18,r18,r2
10006388:	df002783 	ldbu	fp,158(sp)
1000638c:	d8c02b15 	stw	r3,172(sp)
10006390:	d8002a15 	stw	zero,168(sp)
10006394:	d8003215 	stw	zero,200(sp)
10006398:	003b0706 	br	10004fb8 <__alt_data_end+0xf8004fb8>
1000639c:	d8c02e17 	ldw	r3,184(sp)
100063a0:	1cc00017 	ldw	r19,0(r3)
100063a4:	18c00104 	addi	r3,r3,4
100063a8:	d8c02e15 	stw	r3,184(sp)
100063ac:	982dd7fa 	srai	r22,r19,31
100063b0:	b005883a 	mov	r2,r22
100063b4:	003a7706 	br	10004d94 <__alt_data_end+0xf8004d94>
100063b8:	d8c02e17 	ldw	r3,184(sp)
100063bc:	d9002f17 	ldw	r4,188(sp)
100063c0:	18800017 	ldw	r2,0(r3)
100063c4:	18c00104 	addi	r3,r3,4
100063c8:	d8c02e15 	stw	r3,184(sp)
100063cc:	11000015 	stw	r4,0(r2)
100063d0:	00395406 	br	10004924 <__alt_data_end+0xf8004924>
100063d4:	d9002e17 	ldw	r4,184(sp)
100063d8:	002d883a 	mov	r22,zero
100063dc:	24c00017 	ldw	r19,0(r4)
100063e0:	21000104 	addi	r4,r4,4
100063e4:	d9002e15 	stw	r4,184(sp)
100063e8:	003c0706 	br	10005408 <__alt_data_end+0xf8005408>
100063ec:	d9402e17 	ldw	r5,184(sp)
100063f0:	d8c02a17 	ldw	r3,168(sp)
100063f4:	002d883a 	mov	r22,zero
100063f8:	28800104 	addi	r2,r5,4
100063fc:	2cc0000b 	ldhu	r19,0(r5)
10006400:	183dc10e 	bge	r3,zero,10005b08 <__alt_data_end+0xf8005b08>
10006404:	003f7506 	br	100061dc <__alt_data_end+0xf80061dc>
10006408:	04040074 	movhi	r16,4097
1000640c:	8409a404 	addi	r16,r16,9872
10006410:	003aa706 	br	10004eb0 <__alt_data_end+0xf8004eb0>
10006414:	d9002d17 	ldw	r4,180(sp)
10006418:	d9801e04 	addi	r6,sp,120
1000641c:	b80b883a 	mov	r5,r23
10006420:	000a95c0 	call	1000a95c <__sprint_r>
10006424:	103a0b1e 	bne	r2,zero,10004c54 <__alt_data_end+0xf8004c54>
10006428:	dc402617 	ldw	r17,152(sp)
1000642c:	d8c02017 	ldw	r3,128(sp)
10006430:	da000404 	addi	r8,sp,16
10006434:	003f9c06 	br	100062a8 <__alt_data_end+0xf80062a8>
10006438:	ac400043 	ldbu	r17,1(r21)
1000643c:	84000814 	ori	r16,r16,32
10006440:	ad400044 	addi	r21,r21,1
10006444:	8c403fcc 	andi	r17,r17,255
10006448:	8c40201c 	xori	r17,r17,128
1000644c:	8c7fe004 	addi	r17,r17,-128
10006450:	00395e06 	br	100049cc <__alt_data_end+0xf80049cc>
10006454:	d8c02e15 	stw	r3,184(sp)
10006458:	0039883a 	mov	fp,zero
1000645c:	003e3506 	br	10005d34 <__alt_data_end+0xf8005d34>
10006460:	d9002d17 	ldw	r4,180(sp)
10006464:	d9801e04 	addi	r6,sp,120
10006468:	b80b883a 	mov	r5,r23
1000646c:	000a95c0 	call	1000a95c <__sprint_r>
10006470:	1039f81e 	bne	r2,zero,10004c54 <__alt_data_end+0xf8004c54>
10006474:	d8c02017 	ldw	r3,128(sp)
10006478:	da000404 	addi	r8,sp,16
1000647c:	003cd006 	br	100057c0 <__alt_data_end+0xf80057c0>
10006480:	8009883a 	mov	r4,r16
10006484:	df003d15 	stw	fp,244(sp)
10006488:	00047940 	call	10004794 <strlen>
1000648c:	d8802b15 	stw	r2,172(sp)
10006490:	da003d17 	ldw	r8,244(sp)
10006494:	103c200e 	bge	r2,zero,10005518 <__alt_data_end+0xf8005518>
10006498:	0005883a 	mov	r2,zero
1000649c:	003c1e06 	br	10005518 <__alt_data_end+0xf8005518>
100064a0:	d9002d17 	ldw	r4,180(sp)
100064a4:	d9801e04 	addi	r6,sp,120
100064a8:	b80b883a 	mov	r5,r23
100064ac:	000a95c0 	call	1000a95c <__sprint_r>
100064b0:	1039e81e 	bne	r2,zero,10004c54 <__alt_data_end+0xf8004c54>
100064b4:	d8c02017 	ldw	r3,128(sp)
100064b8:	d8801f17 	ldw	r2,124(sp)
100064bc:	da000404 	addi	r8,sp,16
100064c0:	d9403317 	ldw	r5,204(sp)
100064c4:	10800044 	addi	r2,r2,1
100064c8:	44000015 	stw	r16,0(r8)
100064cc:	28c7883a 	add	r3,r5,r3
100064d0:	003b5b06 	br	10005240 <__alt_data_end+0xf8005240>
100064d4:	01040074 	movhi	r4,4097
100064d8:	2109b884 	addi	r4,r4,9954
100064dc:	d9003515 	stw	r4,212(sp)
100064e0:	003af206 	br	100050ac <__alt_data_end+0xf80050ac>
100064e4:	013fffc4 	movi	r4,-1
100064e8:	003a0806 	br	10004d0c <__alt_data_end+0xf8004d0c>
100064ec:	0023883a 	mov	r17,zero
100064f0:	003d9d06 	br	10005b68 <__alt_data_end+0xf8005b68>
100064f4:	d9002d17 	ldw	r4,180(sp)
100064f8:	d9801e04 	addi	r6,sp,120
100064fc:	b80b883a 	mov	r5,r23
10006500:	000a95c0 	call	1000a95c <__sprint_r>
10006504:	1039d31e 	bne	r2,zero,10004c54 <__alt_data_end+0xf8004c54>
10006508:	d8c02017 	ldw	r3,128(sp)
1000650c:	da000404 	addi	r8,sp,16
10006510:	003d9406 	br	10005b64 <__alt_data_end+0xf8005b64>
10006514:	01040074 	movhi	r4,4097
10006518:	2109b484 	addi	r4,r4,9938
1000651c:	d9002c15 	stw	r4,176(sp)
10006520:	d9002c17 	ldw	r4,176(sp)
10006524:	1c47883a 	add	r3,r3,r17
10006528:	10800044 	addi	r2,r2,1
1000652c:	41000015 	stw	r4,0(r8)
10006530:	44400115 	stw	r17,4(r8)
10006534:	d8c02015 	stw	r3,128(sp)
10006538:	d8801f15 	stw	r2,124(sp)
1000653c:	010001c4 	movi	r4,7
10006540:	20bfd716 	blt	r4,r2,100064a0 <__alt_data_end+0xf80064a0>
10006544:	42000204 	addi	r8,r8,8
10006548:	003fdd06 	br	100064c0 <__alt_data_end+0xf80064c0>
1000654c:	d9002d17 	ldw	r4,180(sp)
10006550:	d9801e04 	addi	r6,sp,120
10006554:	b80b883a 	mov	r5,r23
10006558:	000a95c0 	call	1000a95c <__sprint_r>
1000655c:	1039bd1e 	bne	r2,zero,10004c54 <__alt_data_end+0xf8004c54>
10006560:	d8802617 	ldw	r2,152(sp)
10006564:	d8c02017 	ldw	r3,128(sp)
10006568:	da000404 	addi	r8,sp,16
1000656c:	003e1006 	br	10005db0 <__alt_data_end+0xf8005db0>
10006570:	00800044 	movi	r2,1
10006574:	10803fcc 	andi	r2,r2,255
10006578:	00c00044 	movi	r3,1
1000657c:	10fa0d26 	beq	r2,r3,10004db4 <__alt_data_end+0xf8004db4>
10006580:	00c00084 	movi	r3,2
10006584:	10fbaf26 	beq	r2,r3,10005444 <__alt_data_end+0xf8005444>
10006588:	003a6d06 	br	10004f40 <__alt_data_end+0xf8004f40>
1000658c:	01040074 	movhi	r4,4097
10006590:	2109b884 	addi	r4,r4,9954
10006594:	d9003515 	stw	r4,212(sp)
10006598:	003b5406 	br	100052ec <__alt_data_end+0xf80052ec>
1000659c:	d8802a17 	ldw	r2,168(sp)
100065a0:	00c00184 	movi	r3,6
100065a4:	1880012e 	bgeu	r3,r2,100065ac <___vfprintf_internal_r+0x1d68>
100065a8:	1805883a 	mov	r2,r3
100065ac:	d8802b15 	stw	r2,172(sp)
100065b0:	1000ef16 	blt	r2,zero,10006970 <___vfprintf_internal_r+0x212c>
100065b4:	04040074 	movhi	r16,4097
100065b8:	d8802915 	stw	r2,164(sp)
100065bc:	dcc02e15 	stw	r19,184(sp)
100065c0:	d8002a15 	stw	zero,168(sp)
100065c4:	d8003215 	stw	zero,200(sp)
100065c8:	8409b204 	addi	r16,r16,9928
100065cc:	0039883a 	mov	fp,zero
100065d0:	003a8006 	br	10004fd4 <__alt_data_end+0xf8004fd4>
100065d4:	0021883a 	mov	r16,zero
100065d8:	003e0706 	br	10005df8 <__alt_data_end+0xf8005df8>
100065dc:	d9002d17 	ldw	r4,180(sp)
100065e0:	d9801e04 	addi	r6,sp,120
100065e4:	b80b883a 	mov	r5,r23
100065e8:	000a95c0 	call	1000a95c <__sprint_r>
100065ec:	1039991e 	bne	r2,zero,10004c54 <__alt_data_end+0xf8004c54>
100065f0:	d8802617 	ldw	r2,152(sp)
100065f4:	d9403317 	ldw	r5,204(sp)
100065f8:	d8c02017 	ldw	r3,128(sp)
100065fc:	da000404 	addi	r8,sp,16
10006600:	2885c83a 	sub	r2,r5,r2
10006604:	003dfb06 	br	10005df4 <__alt_data_end+0xf8005df4>
10006608:	9080004c 	andi	r2,r18,1
1000660c:	103e8f1e 	bne	r2,zero,1000604c <__alt_data_end+0xf800604c>
10006610:	d8802117 	ldw	r2,132(sp)
10006614:	003e9e06 	br	10006090 <__alt_data_end+0xf8006090>
10006618:	1025883a 	mov	r18,r2
1000661c:	0039883a 	mov	fp,zero
10006620:	00800084 	movi	r2,2
10006624:	003fd306 	br	10006574 <__alt_data_end+0xf8006574>
10006628:	07000b44 	movi	fp,45
1000662c:	df002785 	stb	fp,158(sp)
10006630:	003a1b06 	br	10004ea0 <__alt_data_end+0xf8004ea0>
10006634:	00c00b44 	movi	r3,45
10006638:	d8c02785 	stb	r3,158(sp)
1000663c:	d8802915 	stw	r2,164(sp)
10006640:	dc802c17 	ldw	r18,176(sp)
10006644:	d8002a15 	stw	zero,168(sp)
10006648:	07000b44 	movi	fp,45
1000664c:	003a5e06 	br	10004fc8 <__alt_data_end+0xf8004fc8>
10006650:	04040074 	movhi	r16,4097
10006654:	8409a704 	addi	r16,r16,9884
10006658:	003f4706 	br	10006378 <__alt_data_end+0xf8006378>
1000665c:	d9002e17 	ldw	r4,184(sp)
10006660:	d9402f17 	ldw	r5,188(sp)
10006664:	20800017 	ldw	r2,0(r4)
10006668:	21000104 	addi	r4,r4,4
1000666c:	d9002e15 	stw	r4,184(sp)
10006670:	11400015 	stw	r5,0(r2)
10006674:	0038ab06 	br	10004924 <__alt_data_end+0xf8004924>
10006678:	dd802617 	ldw	r22,152(sp)
1000667c:	00bfff44 	movi	r2,-3
10006680:	b0801c16 	blt	r22,r2,100066f4 <___vfprintf_internal_r+0x1eb0>
10006684:	d9402a17 	ldw	r5,168(sp)
10006688:	2d801a16 	blt	r5,r22,100066f4 <___vfprintf_internal_r+0x1eb0>
1000668c:	dd803215 	stw	r22,200(sp)
10006690:	003e8906 	br	100060b8 <__alt_data_end+0xf80060b8>
10006694:	01040074 	movhi	r4,4097
10006698:	2109b484 	addi	r4,r4,9938
1000669c:	d9002c15 	stw	r4,176(sp)
100066a0:	003c9106 	br	100058e8 <__alt_data_end+0xf80058e8>
100066a4:	e005883a 	mov	r2,fp
100066a8:	003e7906 	br	10006090 <__alt_data_end+0xf8006090>
100066ac:	d9002a17 	ldw	r4,168(sp)
100066b0:	df002783 	ldbu	fp,158(sp)
100066b4:	dcc02e15 	stw	r19,184(sp)
100066b8:	d9002915 	stw	r4,164(sp)
100066bc:	d9002b15 	stw	r4,172(sp)
100066c0:	d8002a15 	stw	zero,168(sp)
100066c4:	d8003215 	stw	zero,200(sp)
100066c8:	003a3b06 	br	10004fb8 <__alt_data_end+0xf8004fb8>
100066cc:	9080004c 	andi	r2,r18,1
100066d0:	0039883a 	mov	fp,zero
100066d4:	10000426 	beq	r2,zero,100066e8 <___vfprintf_internal_r+0x1ea4>
100066d8:	00800c04 	movi	r2,48
100066dc:	dc001dc4 	addi	r16,sp,119
100066e0:	d8801dc5 	stb	r2,119(sp)
100066e4:	003b6406 	br	10005478 <__alt_data_end+0xf8005478>
100066e8:	d8002b15 	stw	zero,172(sp)
100066ec:	dc001e04 	addi	r16,sp,120
100066f0:	003a2b06 	br	10004fa0 <__alt_data_end+0xf8004fa0>
100066f4:	8c7fff84 	addi	r17,r17,-2
100066f8:	b5bfffc4 	addi	r22,r22,-1
100066fc:	dd802615 	stw	r22,152(sp)
10006700:	dc4022c5 	stb	r17,139(sp)
10006704:	b000bf16 	blt	r22,zero,10006a04 <___vfprintf_internal_r+0x21c0>
10006708:	00800ac4 	movi	r2,43
1000670c:	d8802305 	stb	r2,140(sp)
10006710:	00800244 	movi	r2,9
10006714:	15807016 	blt	r2,r22,100068d8 <___vfprintf_internal_r+0x2094>
10006718:	00800c04 	movi	r2,48
1000671c:	b5800c04 	addi	r22,r22,48
10006720:	d8802345 	stb	r2,141(sp)
10006724:	dd802385 	stb	r22,142(sp)
10006728:	d88023c4 	addi	r2,sp,143
1000672c:	df0022c4 	addi	fp,sp,139
10006730:	d8c03317 	ldw	r3,204(sp)
10006734:	1739c83a 	sub	fp,r2,fp
10006738:	d9003317 	ldw	r4,204(sp)
1000673c:	e0c7883a 	add	r3,fp,r3
10006740:	df003a15 	stw	fp,232(sp)
10006744:	d8c02b15 	stw	r3,172(sp)
10006748:	00800044 	movi	r2,1
1000674c:	1100b30e 	bge	r2,r4,10006a1c <___vfprintf_internal_r+0x21d8>
10006750:	d8c02b17 	ldw	r3,172(sp)
10006754:	18c00044 	addi	r3,r3,1
10006758:	d8c02b15 	stw	r3,172(sp)
1000675c:	1805883a 	mov	r2,r3
10006760:	1800ac16 	blt	r3,zero,10006a14 <___vfprintf_internal_r+0x21d0>
10006764:	d8003215 	stw	zero,200(sp)
10006768:	003e5d06 	br	100060e0 <__alt_data_end+0xf80060e0>
1000676c:	d9002d17 	ldw	r4,180(sp)
10006770:	d9801e04 	addi	r6,sp,120
10006774:	b80b883a 	mov	r5,r23
10006778:	000a95c0 	call	1000a95c <__sprint_r>
1000677c:	1039351e 	bne	r2,zero,10004c54 <__alt_data_end+0xf8004c54>
10006780:	dc402617 	ldw	r17,152(sp)
10006784:	d8c02017 	ldw	r3,128(sp)
10006788:	d8801f17 	ldw	r2,124(sp)
1000678c:	da000404 	addi	r8,sp,16
10006790:	003ed606 	br	100062ec <__alt_data_end+0xf80062ec>
10006794:	182b883a 	mov	r21,r3
10006798:	d8002a15 	stw	zero,168(sp)
1000679c:	00388c06 	br	100049d0 <__alt_data_end+0xf80049d0>
100067a0:	d8802a17 	ldw	r2,168(sp)
100067a4:	103e071e 	bne	r2,zero,10005fc4 <__alt_data_end+0xf8005fc4>
100067a8:	dc002a15 	stw	r16,168(sp)
100067ac:	003e0506 	br	10005fc4 <__alt_data_end+0xf8005fc4>
100067b0:	d9002a17 	ldw	r4,168(sp)
100067b4:	20c00044 	addi	r3,r4,1
100067b8:	003e0f06 	br	10005ff8 <__alt_data_end+0xf8005ff8>
100067bc:	01400184 	movi	r5,6
100067c0:	d9402a15 	stw	r5,168(sp)
100067c4:	003dff06 	br	10005fc4 <__alt_data_end+0xf8005fc4>
100067c8:	d8802104 	addi	r2,sp,132
100067cc:	d8800315 	stw	r2,12(sp)
100067d0:	d8802504 	addi	r2,sp,148
100067d4:	d8800215 	stw	r2,8(sp)
100067d8:	d8802604 	addi	r2,sp,152
100067dc:	d8800115 	stw	r2,4(sp)
100067e0:	d8802a17 	ldw	r2,168(sp)
100067e4:	d9403617 	ldw	r5,216(sp)
100067e8:	d9002d17 	ldw	r4,180(sp)
100067ec:	d8800015 	stw	r2,0(sp)
100067f0:	01c000c4 	movi	r7,3
100067f4:	980d883a 	mov	r6,r19
100067f8:	da003d15 	stw	r8,244(sp)
100067fc:	00071c00 	call	100071c0 <_dtoa_r>
10006800:	d8c02a17 	ldw	r3,168(sp)
10006804:	da003d17 	ldw	r8,244(sp)
10006808:	1021883a 	mov	r16,r2
1000680c:	10f9883a 	add	fp,r2,r3
10006810:	81000007 	ldb	r4,0(r16)
10006814:	00800c04 	movi	r2,48
10006818:	20805e26 	beq	r4,r2,10006994 <___vfprintf_internal_r+0x2150>
1000681c:	d8c02617 	ldw	r3,152(sp)
10006820:	e0f9883a 	add	fp,fp,r3
10006824:	003e0a06 	br	10006050 <__alt_data_end+0xf8006050>
10006828:	00c00b44 	movi	r3,45
1000682c:	24e0003c 	xorhi	r19,r4,32768
10006830:	d8c02905 	stb	r3,164(sp)
10006834:	003de906 	br	10005fdc <__alt_data_end+0xf8005fdc>
10006838:	d8c03217 	ldw	r3,200(sp)
1000683c:	00c07a0e 	bge	zero,r3,10006a28 <___vfprintf_internal_r+0x21e4>
10006840:	00800044 	movi	r2,1
10006844:	d9003317 	ldw	r4,204(sp)
10006848:	1105883a 	add	r2,r2,r4
1000684c:	d8802b15 	stw	r2,172(sp)
10006850:	10004e16 	blt	r2,zero,1000698c <___vfprintf_internal_r+0x2148>
10006854:	044019c4 	movi	r17,103
10006858:	003e2106 	br	100060e0 <__alt_data_end+0xf80060e0>
1000685c:	d9002a17 	ldw	r4,168(sp)
10006860:	d8802104 	addi	r2,sp,132
10006864:	d8800315 	stw	r2,12(sp)
10006868:	d9000015 	stw	r4,0(sp)
1000686c:	d8802504 	addi	r2,sp,148
10006870:	d9403617 	ldw	r5,216(sp)
10006874:	d9002d17 	ldw	r4,180(sp)
10006878:	d8800215 	stw	r2,8(sp)
1000687c:	d8802604 	addi	r2,sp,152
10006880:	d8800115 	stw	r2,4(sp)
10006884:	01c000c4 	movi	r7,3
10006888:	980d883a 	mov	r6,r19
1000688c:	da003d15 	stw	r8,244(sp)
10006890:	00071c00 	call	100071c0 <_dtoa_r>
10006894:	d8c02a17 	ldw	r3,168(sp)
10006898:	da003d17 	ldw	r8,244(sp)
1000689c:	1021883a 	mov	r16,r2
100068a0:	00801184 	movi	r2,70
100068a4:	80f9883a 	add	fp,r16,r3
100068a8:	88bfd926 	beq	r17,r2,10006810 <__alt_data_end+0xf8006810>
100068ac:	003de806 	br	10006050 <__alt_data_end+0xf8006050>
100068b0:	d9002a17 	ldw	r4,168(sp)
100068b4:	00c04d0e 	bge	zero,r3,100069ec <___vfprintf_internal_r+0x21a8>
100068b8:	2000441e 	bne	r4,zero,100069cc <___vfprintf_internal_r+0x2188>
100068bc:	9480004c 	andi	r18,r18,1
100068c0:	9000421e 	bne	r18,zero,100069cc <___vfprintf_internal_r+0x2188>
100068c4:	1805883a 	mov	r2,r3
100068c8:	18006f16 	blt	r3,zero,10006a88 <___vfprintf_internal_r+0x2244>
100068cc:	d8c03217 	ldw	r3,200(sp)
100068d0:	d8c02b15 	stw	r3,172(sp)
100068d4:	003e0206 	br	100060e0 <__alt_data_end+0xf80060e0>
100068d8:	df0022c4 	addi	fp,sp,139
100068dc:	dc002a15 	stw	r16,168(sp)
100068e0:	4027883a 	mov	r19,r8
100068e4:	e021883a 	mov	r16,fp
100068e8:	b009883a 	mov	r4,r22
100068ec:	01400284 	movi	r5,10
100068f0:	000162c0 	call	1000162c <__modsi3>
100068f4:	10800c04 	addi	r2,r2,48
100068f8:	843fffc4 	addi	r16,r16,-1
100068fc:	b009883a 	mov	r4,r22
10006900:	01400284 	movi	r5,10
10006904:	80800005 	stb	r2,0(r16)
10006908:	00015a80 	call	100015a8 <__divsi3>
1000690c:	102d883a 	mov	r22,r2
10006910:	00800244 	movi	r2,9
10006914:	15bff416 	blt	r2,r22,100068e8 <__alt_data_end+0xf80068e8>
10006918:	9811883a 	mov	r8,r19
1000691c:	b0800c04 	addi	r2,r22,48
10006920:	8027883a 	mov	r19,r16
10006924:	997fffc4 	addi	r5,r19,-1
10006928:	98bfffc5 	stb	r2,-1(r19)
1000692c:	dc002a17 	ldw	r16,168(sp)
10006930:	2f006d2e 	bgeu	r5,fp,10006ae8 <___vfprintf_internal_r+0x22a4>
10006934:	d9c02384 	addi	r7,sp,142
10006938:	3ccfc83a 	sub	r7,r7,r19
1000693c:	d9002344 	addi	r4,sp,141
10006940:	e1cf883a 	add	r7,fp,r7
10006944:	00000106 	br	1000694c <___vfprintf_internal_r+0x2108>
10006948:	28800003 	ldbu	r2,0(r5)
1000694c:	20800005 	stb	r2,0(r4)
10006950:	21000044 	addi	r4,r4,1
10006954:	29400044 	addi	r5,r5,1
10006958:	393ffb1e 	bne	r7,r4,10006948 <__alt_data_end+0xf8006948>
1000695c:	d8802304 	addi	r2,sp,140
10006960:	14c5c83a 	sub	r2,r2,r19
10006964:	d8c02344 	addi	r3,sp,141
10006968:	1885883a 	add	r2,r3,r2
1000696c:	003f7006 	br	10006730 <__alt_data_end+0xf8006730>
10006970:	0005883a 	mov	r2,zero
10006974:	003f0f06 	br	100065b4 <__alt_data_end+0xf80065b4>
10006978:	d8c03217 	ldw	r3,200(sp)
1000697c:	18c00044 	addi	r3,r3,1
10006980:	d8c02b15 	stw	r3,172(sp)
10006984:	1805883a 	mov	r2,r3
10006988:	183fb20e 	bge	r3,zero,10006854 <__alt_data_end+0xf8006854>
1000698c:	0005883a 	mov	r2,zero
10006990:	003fb006 	br	10006854 <__alt_data_end+0xf8006854>
10006994:	d9003617 	ldw	r4,216(sp)
10006998:	000d883a 	mov	r6,zero
1000699c:	000f883a 	mov	r7,zero
100069a0:	980b883a 	mov	r5,r19
100069a4:	d8c03c15 	stw	r3,240(sp)
100069a8:	da003d15 	stw	r8,244(sp)
100069ac:	000e3b80 	call	1000e3b8 <__eqdf2>
100069b0:	d8c03c17 	ldw	r3,240(sp)
100069b4:	da003d17 	ldw	r8,244(sp)
100069b8:	103f9826 	beq	r2,zero,1000681c <__alt_data_end+0xf800681c>
100069bc:	00800044 	movi	r2,1
100069c0:	10c7c83a 	sub	r3,r2,r3
100069c4:	d8c02615 	stw	r3,152(sp)
100069c8:	003f9506 	br	10006820 <__alt_data_end+0xf8006820>
100069cc:	d9002a17 	ldw	r4,168(sp)
100069d0:	d8c03217 	ldw	r3,200(sp)
100069d4:	20800044 	addi	r2,r4,1
100069d8:	1885883a 	add	r2,r3,r2
100069dc:	d8802b15 	stw	r2,172(sp)
100069e0:	103dbf0e 	bge	r2,zero,100060e0 <__alt_data_end+0xf80060e0>
100069e4:	0005883a 	mov	r2,zero
100069e8:	003dbd06 	br	100060e0 <__alt_data_end+0xf80060e0>
100069ec:	2000201e 	bne	r4,zero,10006a70 <___vfprintf_internal_r+0x222c>
100069f0:	9480004c 	andi	r18,r18,1
100069f4:	90001e1e 	bne	r18,zero,10006a70 <___vfprintf_internal_r+0x222c>
100069f8:	00800044 	movi	r2,1
100069fc:	d8802b15 	stw	r2,172(sp)
10006a00:	003db706 	br	100060e0 <__alt_data_end+0xf80060e0>
10006a04:	00800b44 	movi	r2,45
10006a08:	05adc83a 	sub	r22,zero,r22
10006a0c:	d8802305 	stb	r2,140(sp)
10006a10:	003f3f06 	br	10006710 <__alt_data_end+0xf8006710>
10006a14:	0005883a 	mov	r2,zero
10006a18:	003f5206 	br	10006764 <__alt_data_end+0xf8006764>
10006a1c:	90a4703a 	and	r18,r18,r2
10006a20:	903f4e26 	beq	r18,zero,1000675c <__alt_data_end+0xf800675c>
10006a24:	003f4a06 	br	10006750 <__alt_data_end+0xf8006750>
10006a28:	00800084 	movi	r2,2
10006a2c:	10c5c83a 	sub	r2,r2,r3
10006a30:	003f8406 	br	10006844 <__alt_data_end+0xf8006844>
10006a34:	d9402e17 	ldw	r5,184(sp)
10006a38:	d9002e17 	ldw	r4,184(sp)
10006a3c:	ac400043 	ldbu	r17,1(r21)
10006a40:	29400017 	ldw	r5,0(r5)
10006a44:	20800104 	addi	r2,r4,4
10006a48:	d8802e15 	stw	r2,184(sp)
10006a4c:	d9402a15 	stw	r5,168(sp)
10006a50:	182b883a 	mov	r21,r3
10006a54:	283e7b0e 	bge	r5,zero,10006444 <__alt_data_end+0xf8006444>
10006a58:	8c403fcc 	andi	r17,r17,255
10006a5c:	017fffc4 	movi	r5,-1
10006a60:	8c40201c 	xori	r17,r17,128
10006a64:	d9402a15 	stw	r5,168(sp)
10006a68:	8c7fe004 	addi	r17,r17,-128
10006a6c:	0037d706 	br	100049cc <__alt_data_end+0xf80049cc>
10006a70:	d8c02a17 	ldw	r3,168(sp)
10006a74:	18c00084 	addi	r3,r3,2
10006a78:	d8c02b15 	stw	r3,172(sp)
10006a7c:	1805883a 	mov	r2,r3
10006a80:	183d970e 	bge	r3,zero,100060e0 <__alt_data_end+0xf80060e0>
10006a84:	003fd706 	br	100069e4 <__alt_data_end+0xf80069e4>
10006a88:	0005883a 	mov	r2,zero
10006a8c:	003f8f06 	br	100068cc <__alt_data_end+0xf80068cc>
10006a90:	9080004c 	andi	r2,r18,1
10006a94:	103f821e 	bne	r2,zero,100068a0 <__alt_data_end+0xf80068a0>
10006a98:	d8802117 	ldw	r2,132(sp)
10006a9c:	1405c83a 	sub	r2,r2,r16
10006aa0:	d8803315 	stw	r2,204(sp)
10006aa4:	b47ef426 	beq	r22,r17,10006678 <__alt_data_end+0xf8006678>
10006aa8:	dd802617 	ldw	r22,152(sp)
10006aac:	003f1206 	br	100066f8 <__alt_data_end+0xf80066f8>
10006ab0:	d8c02b03 	ldbu	r3,172(sp)
10006ab4:	d8c02785 	stb	r3,158(sp)
10006ab8:	0038df06 	br	10004e38 <__alt_data_end+0xf8004e38>
10006abc:	d8c02b03 	ldbu	r3,172(sp)
10006ac0:	d8c02785 	stb	r3,158(sp)
10006ac4:	0038aa06 	br	10004d70 <__alt_data_end+0xf8004d70>
10006ac8:	d8c02b03 	ldbu	r3,172(sp)
10006acc:	d8c02785 	stb	r3,158(sp)
10006ad0:	003a4306 	br	100053e0 <__alt_data_end+0xf80053e0>
10006ad4:	d8c02b03 	ldbu	r3,172(sp)
10006ad8:	d8c02785 	stb	r3,158(sp)
10006adc:	003af506 	br	100056b4 <__alt_data_end+0xf80056b4>
10006ae0:	0005883a 	mov	r2,zero
10006ae4:	003d7b06 	br	100060d4 <__alt_data_end+0xf80060d4>
10006ae8:	d8802344 	addi	r2,sp,141
10006aec:	003f1006 	br	10006730 <__alt_data_end+0xf8006730>
10006af0:	d8c02b03 	ldbu	r3,172(sp)
10006af4:	d8c02785 	stb	r3,158(sp)
10006af8:	0038fd06 	br	10004ef0 <__alt_data_end+0xf8004ef0>
10006afc:	d8c02b03 	ldbu	r3,172(sp)
10006b00:	d8c02785 	stb	r3,158(sp)
10006b04:	003a9706 	br	10005564 <__alt_data_end+0xf8005564>
10006b08:	d8c02b03 	ldbu	r3,172(sp)
10006b0c:	d8c02785 	stb	r3,158(sp)
10006b10:	003a1806 	br	10005374 <__alt_data_end+0xf8005374>
10006b14:	d8c02b03 	ldbu	r3,172(sp)
10006b18:	d8c02785 	stb	r3,158(sp)
10006b1c:	003abe06 	br	10005618 <__alt_data_end+0xf8005618>

10006b20 <__vfprintf_internal>:
10006b20:	00840074 	movhi	r2,4097
10006b24:	10914b04 	addi	r2,r2,17708
10006b28:	300f883a 	mov	r7,r6
10006b2c:	280d883a 	mov	r6,r5
10006b30:	200b883a 	mov	r5,r4
10006b34:	11000017 	ldw	r4,0(r2)
10006b38:	00048441 	jmpi	10004844 <___vfprintf_internal_r>

10006b3c <__sbprintf>:
10006b3c:	2880030b 	ldhu	r2,12(r5)
10006b40:	2ac01917 	ldw	r11,100(r5)
10006b44:	2a80038b 	ldhu	r10,14(r5)
10006b48:	2a400717 	ldw	r9,28(r5)
10006b4c:	2a000917 	ldw	r8,36(r5)
10006b50:	defee204 	addi	sp,sp,-1144
10006b54:	00c10004 	movi	r3,1024
10006b58:	dc011a15 	stw	r16,1128(sp)
10006b5c:	10bfff4c 	andi	r2,r2,65533
10006b60:	2821883a 	mov	r16,r5
10006b64:	d8cb883a 	add	r5,sp,r3
10006b68:	dc811c15 	stw	r18,1136(sp)
10006b6c:	dc411b15 	stw	r17,1132(sp)
10006b70:	dfc11d15 	stw	ra,1140(sp)
10006b74:	2025883a 	mov	r18,r4
10006b78:	d881030d 	sth	r2,1036(sp)
10006b7c:	dac11915 	stw	r11,1124(sp)
10006b80:	da81038d 	sth	r10,1038(sp)
10006b84:	da410715 	stw	r9,1052(sp)
10006b88:	da010915 	stw	r8,1060(sp)
10006b8c:	dec10015 	stw	sp,1024(sp)
10006b90:	dec10415 	stw	sp,1040(sp)
10006b94:	d8c10215 	stw	r3,1032(sp)
10006b98:	d8c10515 	stw	r3,1044(sp)
10006b9c:	d8010615 	stw	zero,1048(sp)
10006ba0:	00048440 	call	10004844 <___vfprintf_internal_r>
10006ba4:	1023883a 	mov	r17,r2
10006ba8:	10000416 	blt	r2,zero,10006bbc <__sbprintf+0x80>
10006bac:	d9410004 	addi	r5,sp,1024
10006bb0:	9009883a 	mov	r4,r18
10006bb4:	0001b580 	call	10001b58 <_fflush_r>
10006bb8:	10000d1e 	bne	r2,zero,10006bf0 <__sbprintf+0xb4>
10006bbc:	d881030b 	ldhu	r2,1036(sp)
10006bc0:	1080100c 	andi	r2,r2,64
10006bc4:	10000326 	beq	r2,zero,10006bd4 <__sbprintf+0x98>
10006bc8:	8080030b 	ldhu	r2,12(r16)
10006bcc:	10801014 	ori	r2,r2,64
10006bd0:	8080030d 	sth	r2,12(r16)
10006bd4:	8805883a 	mov	r2,r17
10006bd8:	dfc11d17 	ldw	ra,1140(sp)
10006bdc:	dc811c17 	ldw	r18,1136(sp)
10006be0:	dc411b17 	ldw	r17,1132(sp)
10006be4:	dc011a17 	ldw	r16,1128(sp)
10006be8:	dec11e04 	addi	sp,sp,1144
10006bec:	f800283a 	ret
10006bf0:	047fffc4 	movi	r17,-1
10006bf4:	003ff106 	br	10006bbc <__alt_data_end+0xf8006bbc>

10006bf8 <_write_r>:
10006bf8:	defffd04 	addi	sp,sp,-12
10006bfc:	2805883a 	mov	r2,r5
10006c00:	dc000015 	stw	r16,0(sp)
10006c04:	04040074 	movhi	r16,4097
10006c08:	dc400115 	stw	r17,4(sp)
10006c0c:	300b883a 	mov	r5,r6
10006c10:	84187404 	addi	r16,r16,25040
10006c14:	2023883a 	mov	r17,r4
10006c18:	380d883a 	mov	r6,r7
10006c1c:	1009883a 	mov	r4,r2
10006c20:	dfc00215 	stw	ra,8(sp)
10006c24:	80000015 	stw	zero,0(r16)
10006c28:	00105780 	call	10010578 <write>
10006c2c:	00ffffc4 	movi	r3,-1
10006c30:	10c00526 	beq	r2,r3,10006c48 <_write_r+0x50>
10006c34:	dfc00217 	ldw	ra,8(sp)
10006c38:	dc400117 	ldw	r17,4(sp)
10006c3c:	dc000017 	ldw	r16,0(sp)
10006c40:	dec00304 	addi	sp,sp,12
10006c44:	f800283a 	ret
10006c48:	80c00017 	ldw	r3,0(r16)
10006c4c:	183ff926 	beq	r3,zero,10006c34 <__alt_data_end+0xf8006c34>
10006c50:	88c00015 	stw	r3,0(r17)
10006c54:	003ff706 	br	10006c34 <__alt_data_end+0xf8006c34>

10006c58 <__swsetup_r>:
10006c58:	00840074 	movhi	r2,4097
10006c5c:	defffd04 	addi	sp,sp,-12
10006c60:	10914b04 	addi	r2,r2,17708
10006c64:	dc400115 	stw	r17,4(sp)
10006c68:	2023883a 	mov	r17,r4
10006c6c:	11000017 	ldw	r4,0(r2)
10006c70:	dc000015 	stw	r16,0(sp)
10006c74:	dfc00215 	stw	ra,8(sp)
10006c78:	2821883a 	mov	r16,r5
10006c7c:	20000226 	beq	r4,zero,10006c88 <__swsetup_r+0x30>
10006c80:	20800e17 	ldw	r2,56(r4)
10006c84:	10003126 	beq	r2,zero,10006d4c <__swsetup_r+0xf4>
10006c88:	8080030b 	ldhu	r2,12(r16)
10006c8c:	10c0020c 	andi	r3,r2,8
10006c90:	1009883a 	mov	r4,r2
10006c94:	18000f26 	beq	r3,zero,10006cd4 <__swsetup_r+0x7c>
10006c98:	80c00417 	ldw	r3,16(r16)
10006c9c:	18001526 	beq	r3,zero,10006cf4 <__swsetup_r+0x9c>
10006ca0:	1100004c 	andi	r4,r2,1
10006ca4:	20001c1e 	bne	r4,zero,10006d18 <__swsetup_r+0xc0>
10006ca8:	1080008c 	andi	r2,r2,2
10006cac:	1000291e 	bne	r2,zero,10006d54 <__swsetup_r+0xfc>
10006cb0:	80800517 	ldw	r2,20(r16)
10006cb4:	80800215 	stw	r2,8(r16)
10006cb8:	18001c26 	beq	r3,zero,10006d2c <__swsetup_r+0xd4>
10006cbc:	0005883a 	mov	r2,zero
10006cc0:	dfc00217 	ldw	ra,8(sp)
10006cc4:	dc400117 	ldw	r17,4(sp)
10006cc8:	dc000017 	ldw	r16,0(sp)
10006ccc:	dec00304 	addi	sp,sp,12
10006cd0:	f800283a 	ret
10006cd4:	2080040c 	andi	r2,r4,16
10006cd8:	10002e26 	beq	r2,zero,10006d94 <__swsetup_r+0x13c>
10006cdc:	2080010c 	andi	r2,r4,4
10006ce0:	10001e1e 	bne	r2,zero,10006d5c <__swsetup_r+0x104>
10006ce4:	80c00417 	ldw	r3,16(r16)
10006ce8:	20800214 	ori	r2,r4,8
10006cec:	8080030d 	sth	r2,12(r16)
10006cf0:	183feb1e 	bne	r3,zero,10006ca0 <__alt_data_end+0xf8006ca0>
10006cf4:	1100a00c 	andi	r4,r2,640
10006cf8:	01408004 	movi	r5,512
10006cfc:	217fe826 	beq	r4,r5,10006ca0 <__alt_data_end+0xf8006ca0>
10006d00:	800b883a 	mov	r5,r16
10006d04:	8809883a 	mov	r4,r17
10006d08:	00030780 	call	10003078 <__smakebuf_r>
10006d0c:	8080030b 	ldhu	r2,12(r16)
10006d10:	80c00417 	ldw	r3,16(r16)
10006d14:	003fe206 	br	10006ca0 <__alt_data_end+0xf8006ca0>
10006d18:	80800517 	ldw	r2,20(r16)
10006d1c:	80000215 	stw	zero,8(r16)
10006d20:	0085c83a 	sub	r2,zero,r2
10006d24:	80800615 	stw	r2,24(r16)
10006d28:	183fe41e 	bne	r3,zero,10006cbc <__alt_data_end+0xf8006cbc>
10006d2c:	80c0030b 	ldhu	r3,12(r16)
10006d30:	0005883a 	mov	r2,zero
10006d34:	1900200c 	andi	r4,r3,128
10006d38:	203fe126 	beq	r4,zero,10006cc0 <__alt_data_end+0xf8006cc0>
10006d3c:	18c01014 	ori	r3,r3,64
10006d40:	80c0030d 	sth	r3,12(r16)
10006d44:	00bfffc4 	movi	r2,-1
10006d48:	003fdd06 	br	10006cc0 <__alt_data_end+0xf8006cc0>
10006d4c:	0001f440 	call	10001f44 <__sinit>
10006d50:	003fcd06 	br	10006c88 <__alt_data_end+0xf8006c88>
10006d54:	0005883a 	mov	r2,zero
10006d58:	003fd606 	br	10006cb4 <__alt_data_end+0xf8006cb4>
10006d5c:	81400c17 	ldw	r5,48(r16)
10006d60:	28000626 	beq	r5,zero,10006d7c <__swsetup_r+0x124>
10006d64:	80801004 	addi	r2,r16,64
10006d68:	28800326 	beq	r5,r2,10006d78 <__swsetup_r+0x120>
10006d6c:	8809883a 	mov	r4,r17
10006d70:	00024dc0 	call	100024dc <_free_r>
10006d74:	8100030b 	ldhu	r4,12(r16)
10006d78:	80000c15 	stw	zero,48(r16)
10006d7c:	80c00417 	ldw	r3,16(r16)
10006d80:	00bff6c4 	movi	r2,-37
10006d84:	1108703a 	and	r4,r2,r4
10006d88:	80000115 	stw	zero,4(r16)
10006d8c:	80c00015 	stw	r3,0(r16)
10006d90:	003fd506 	br	10006ce8 <__alt_data_end+0xf8006ce8>
10006d94:	00800244 	movi	r2,9
10006d98:	88800015 	stw	r2,0(r17)
10006d9c:	20801014 	ori	r2,r4,64
10006da0:	8080030d 	sth	r2,12(r16)
10006da4:	00bfffc4 	movi	r2,-1
10006da8:	003fc506 	br	10006cc0 <__alt_data_end+0xf8006cc0>

10006dac <_close_r>:
10006dac:	defffd04 	addi	sp,sp,-12
10006db0:	dc000015 	stw	r16,0(sp)
10006db4:	04040074 	movhi	r16,4097
10006db8:	dc400115 	stw	r17,4(sp)
10006dbc:	84187404 	addi	r16,r16,25040
10006dc0:	2023883a 	mov	r17,r4
10006dc4:	2809883a 	mov	r4,r5
10006dc8:	dfc00215 	stw	ra,8(sp)
10006dcc:	80000015 	stw	zero,0(r16)
10006dd0:	000fa1c0 	call	1000fa1c <close>
10006dd4:	00ffffc4 	movi	r3,-1
10006dd8:	10c00526 	beq	r2,r3,10006df0 <_close_r+0x44>
10006ddc:	dfc00217 	ldw	ra,8(sp)
10006de0:	dc400117 	ldw	r17,4(sp)
10006de4:	dc000017 	ldw	r16,0(sp)
10006de8:	dec00304 	addi	sp,sp,12
10006dec:	f800283a 	ret
10006df0:	80c00017 	ldw	r3,0(r16)
10006df4:	183ff926 	beq	r3,zero,10006ddc <__alt_data_end+0xf8006ddc>
10006df8:	88c00015 	stw	r3,0(r17)
10006dfc:	003ff706 	br	10006ddc <__alt_data_end+0xf8006ddc>

10006e00 <__call_exitprocs>:
10006e00:	defff504 	addi	sp,sp,-44
10006e04:	df000915 	stw	fp,36(sp)
10006e08:	dd400615 	stw	r21,24(sp)
10006e0c:	dc800315 	stw	r18,12(sp)
10006e10:	dfc00a15 	stw	ra,40(sp)
10006e14:	ddc00815 	stw	r23,32(sp)
10006e18:	dd800715 	stw	r22,28(sp)
10006e1c:	dd000515 	stw	r20,20(sp)
10006e20:	dcc00415 	stw	r19,16(sp)
10006e24:	dc400215 	stw	r17,8(sp)
10006e28:	dc000115 	stw	r16,4(sp)
10006e2c:	d9000015 	stw	r4,0(sp)
10006e30:	2839883a 	mov	fp,r5
10006e34:	04800044 	movi	r18,1
10006e38:	057fffc4 	movi	r21,-1
10006e3c:	00840074 	movhi	r2,4097
10006e40:	10914a04 	addi	r2,r2,17704
10006e44:	12000017 	ldw	r8,0(r2)
10006e48:	45005217 	ldw	r20,328(r8)
10006e4c:	44c05204 	addi	r19,r8,328
10006e50:	a0001c26 	beq	r20,zero,10006ec4 <__call_exitprocs+0xc4>
10006e54:	a0800117 	ldw	r2,4(r20)
10006e58:	15ffffc4 	addi	r23,r2,-1
10006e5c:	b8000d16 	blt	r23,zero,10006e94 <__call_exitprocs+0x94>
10006e60:	14000044 	addi	r16,r2,1
10006e64:	8421883a 	add	r16,r16,r16
10006e68:	8421883a 	add	r16,r16,r16
10006e6c:	84402004 	addi	r17,r16,128
10006e70:	a463883a 	add	r17,r20,r17
10006e74:	a421883a 	add	r16,r20,r16
10006e78:	e0001e26 	beq	fp,zero,10006ef4 <__call_exitprocs+0xf4>
10006e7c:	80804017 	ldw	r2,256(r16)
10006e80:	e0801c26 	beq	fp,r2,10006ef4 <__call_exitprocs+0xf4>
10006e84:	bdffffc4 	addi	r23,r23,-1
10006e88:	843fff04 	addi	r16,r16,-4
10006e8c:	8c7fff04 	addi	r17,r17,-4
10006e90:	bd7ff91e 	bne	r23,r21,10006e78 <__alt_data_end+0xf8006e78>
10006e94:	00840034 	movhi	r2,4096
10006e98:	108c9204 	addi	r2,r2,12872
10006e9c:	10000926 	beq	r2,zero,10006ec4 <__call_exitprocs+0xc4>
10006ea0:	a0800117 	ldw	r2,4(r20)
10006ea4:	1000301e 	bne	r2,zero,10006f68 <__call_exitprocs+0x168>
10006ea8:	a0800017 	ldw	r2,0(r20)
10006eac:	10003226 	beq	r2,zero,10006f78 <__call_exitprocs+0x178>
10006eb0:	a009883a 	mov	r4,r20
10006eb4:	98800015 	stw	r2,0(r19)
10006eb8:	00032480 	call	10003248 <free>
10006ebc:	9d000017 	ldw	r20,0(r19)
10006ec0:	a03fe41e 	bne	r20,zero,10006e54 <__alt_data_end+0xf8006e54>
10006ec4:	dfc00a17 	ldw	ra,40(sp)
10006ec8:	df000917 	ldw	fp,36(sp)
10006ecc:	ddc00817 	ldw	r23,32(sp)
10006ed0:	dd800717 	ldw	r22,28(sp)
10006ed4:	dd400617 	ldw	r21,24(sp)
10006ed8:	dd000517 	ldw	r20,20(sp)
10006edc:	dcc00417 	ldw	r19,16(sp)
10006ee0:	dc800317 	ldw	r18,12(sp)
10006ee4:	dc400217 	ldw	r17,8(sp)
10006ee8:	dc000117 	ldw	r16,4(sp)
10006eec:	dec00b04 	addi	sp,sp,44
10006ef0:	f800283a 	ret
10006ef4:	a0800117 	ldw	r2,4(r20)
10006ef8:	80c00017 	ldw	r3,0(r16)
10006efc:	10bfffc4 	addi	r2,r2,-1
10006f00:	15c01426 	beq	r2,r23,10006f54 <__call_exitprocs+0x154>
10006f04:	80000015 	stw	zero,0(r16)
10006f08:	183fde26 	beq	r3,zero,10006e84 <__alt_data_end+0xf8006e84>
10006f0c:	95c8983a 	sll	r4,r18,r23
10006f10:	a0806217 	ldw	r2,392(r20)
10006f14:	a5800117 	ldw	r22,4(r20)
10006f18:	2084703a 	and	r2,r4,r2
10006f1c:	10000b26 	beq	r2,zero,10006f4c <__call_exitprocs+0x14c>
10006f20:	a0806317 	ldw	r2,396(r20)
10006f24:	2088703a 	and	r4,r4,r2
10006f28:	20000c1e 	bne	r4,zero,10006f5c <__call_exitprocs+0x15c>
10006f2c:	89400017 	ldw	r5,0(r17)
10006f30:	d9000017 	ldw	r4,0(sp)
10006f34:	183ee83a 	callr	r3
10006f38:	a0800117 	ldw	r2,4(r20)
10006f3c:	15bfbf1e 	bne	r2,r22,10006e3c <__alt_data_end+0xf8006e3c>
10006f40:	98800017 	ldw	r2,0(r19)
10006f44:	153fcf26 	beq	r2,r20,10006e84 <__alt_data_end+0xf8006e84>
10006f48:	003fbc06 	br	10006e3c <__alt_data_end+0xf8006e3c>
10006f4c:	183ee83a 	callr	r3
10006f50:	003ff906 	br	10006f38 <__alt_data_end+0xf8006f38>
10006f54:	a5c00115 	stw	r23,4(r20)
10006f58:	003feb06 	br	10006f08 <__alt_data_end+0xf8006f08>
10006f5c:	89000017 	ldw	r4,0(r17)
10006f60:	183ee83a 	callr	r3
10006f64:	003ff406 	br	10006f38 <__alt_data_end+0xf8006f38>
10006f68:	a0800017 	ldw	r2,0(r20)
10006f6c:	a027883a 	mov	r19,r20
10006f70:	1029883a 	mov	r20,r2
10006f74:	003fb606 	br	10006e50 <__alt_data_end+0xf8006e50>
10006f78:	0005883a 	mov	r2,zero
10006f7c:	003ffb06 	br	10006f6c <__alt_data_end+0xf8006f6c>

10006f80 <abort>:
10006f80:	deffff04 	addi	sp,sp,-4
10006f84:	01000184 	movi	r4,6
10006f88:	dfc00015 	stw	ra,0(sp)
10006f8c:	000a6d40 	call	1000a6d4 <raise>
10006f90:	01000044 	movi	r4,1
10006f94:	000fb200 	call	1000fb20 <_exit>

10006f98 <quorem>:
10006f98:	defff204 	addi	sp,sp,-56
10006f9c:	ddc00b15 	stw	r23,44(sp)
10006fa0:	20800417 	ldw	r2,16(r4)
10006fa4:	2dc00417 	ldw	r23,16(r5)
10006fa8:	dfc00d15 	stw	ra,52(sp)
10006fac:	df000c15 	stw	fp,48(sp)
10006fb0:	dd800a15 	stw	r22,40(sp)
10006fb4:	dd400915 	stw	r21,36(sp)
10006fb8:	dd000815 	stw	r20,32(sp)
10006fbc:	dcc00715 	stw	r19,28(sp)
10006fc0:	dc800615 	stw	r18,24(sp)
10006fc4:	dc400515 	stw	r17,20(sp)
10006fc8:	dc000415 	stw	r16,16(sp)
10006fcc:	15c07a16 	blt	r2,r23,100071b8 <quorem+0x220>
10006fd0:	bdffffc4 	addi	r23,r23,-1
10006fd4:	bde9883a 	add	r20,r23,r23
10006fd8:	28c00504 	addi	r3,r5,20
10006fdc:	a529883a 	add	r20,r20,r20
10006fe0:	1d39883a 	add	fp,r3,r20
10006fe4:	24c00504 	addi	r19,r4,20
10006fe8:	d9400215 	stw	r5,8(sp)
10006fec:	9d29883a 	add	r20,r19,r20
10006ff0:	e1400017 	ldw	r5,0(fp)
10006ff4:	d9000015 	stw	r4,0(sp)
10006ff8:	a1000017 	ldw	r4,0(r20)
10006ffc:	29400044 	addi	r5,r5,1
10007000:	d8c00115 	stw	r3,4(sp)
10007004:	dd000315 	stw	r20,12(sp)
10007008:	00016a00 	call	100016a0 <__udivsi3>
1000700c:	1025883a 	mov	r18,r2
10007010:	10003026 	beq	r2,zero,100070d4 <quorem+0x13c>
10007014:	dc400117 	ldw	r17,4(sp)
10007018:	9829883a 	mov	r20,r19
1000701c:	002d883a 	mov	r22,zero
10007020:	0021883a 	mov	r16,zero
10007024:	8d400017 	ldw	r21,0(r17)
10007028:	900b883a 	mov	r5,r18
1000702c:	8c400104 	addi	r17,r17,4
10007030:	a93fffcc 	andi	r4,r21,65535
10007034:	000175c0 	call	1000175c <__mulsi3>
10007038:	a808d43a 	srli	r4,r21,16
1000703c:	900b883a 	mov	r5,r18
10007040:	15ad883a 	add	r22,r2,r22
10007044:	000175c0 	call	1000175c <__mulsi3>
10007048:	a1000017 	ldw	r4,0(r20)
1000704c:	b00cd43a 	srli	r6,r22,16
10007050:	b0ffffcc 	andi	r3,r22,65535
10007054:	217fffcc 	andi	r5,r4,65535
10007058:	2c21883a 	add	r16,r5,r16
1000705c:	80c7c83a 	sub	r3,r16,r3
10007060:	2008d43a 	srli	r4,r4,16
10007064:	1185883a 	add	r2,r2,r6
10007068:	1821d43a 	srai	r16,r3,16
1000706c:	117fffcc 	andi	r5,r2,65535
10007070:	2149c83a 	sub	r4,r4,r5
10007074:	2421883a 	add	r16,r4,r16
10007078:	8008943a 	slli	r4,r16,16
1000707c:	18ffffcc 	andi	r3,r3,65535
10007080:	102cd43a 	srli	r22,r2,16
10007084:	20c8b03a 	or	r4,r4,r3
10007088:	a1000015 	stw	r4,0(r20)
1000708c:	8021d43a 	srai	r16,r16,16
10007090:	a5000104 	addi	r20,r20,4
10007094:	e47fe32e 	bgeu	fp,r17,10007024 <__alt_data_end+0xf8007024>
10007098:	d8c00317 	ldw	r3,12(sp)
1000709c:	18800017 	ldw	r2,0(r3)
100070a0:	10000c1e 	bne	r2,zero,100070d4 <quorem+0x13c>
100070a4:	18bfff04 	addi	r2,r3,-4
100070a8:	9880082e 	bgeu	r19,r2,100070cc <quorem+0x134>
100070ac:	18ffff17 	ldw	r3,-4(r3)
100070b0:	18000326 	beq	r3,zero,100070c0 <quorem+0x128>
100070b4:	00000506 	br	100070cc <quorem+0x134>
100070b8:	10c00017 	ldw	r3,0(r2)
100070bc:	1800031e 	bne	r3,zero,100070cc <quorem+0x134>
100070c0:	10bfff04 	addi	r2,r2,-4
100070c4:	bdffffc4 	addi	r23,r23,-1
100070c8:	98bffb36 	bltu	r19,r2,100070b8 <__alt_data_end+0xf80070b8>
100070cc:	d8c00017 	ldw	r3,0(sp)
100070d0:	1dc00415 	stw	r23,16(r3)
100070d4:	d9400217 	ldw	r5,8(sp)
100070d8:	d9000017 	ldw	r4,0(sp)
100070dc:	0009b100 	call	10009b10 <__mcmp>
100070e0:	10002816 	blt	r2,zero,10007184 <quorem+0x1ec>
100070e4:	dc400117 	ldw	r17,4(sp)
100070e8:	94800044 	addi	r18,r18,1
100070ec:	980d883a 	mov	r6,r19
100070f0:	0007883a 	mov	r3,zero
100070f4:	31000017 	ldw	r4,0(r6)
100070f8:	89400017 	ldw	r5,0(r17)
100070fc:	31800104 	addi	r6,r6,4
10007100:	20bfffcc 	andi	r2,r4,65535
10007104:	10c7883a 	add	r3,r2,r3
10007108:	28bfffcc 	andi	r2,r5,65535
1000710c:	1885c83a 	sub	r2,r3,r2
10007110:	280ad43a 	srli	r5,r5,16
10007114:	2008d43a 	srli	r4,r4,16
10007118:	1007d43a 	srai	r3,r2,16
1000711c:	10bfffcc 	andi	r2,r2,65535
10007120:	2149c83a 	sub	r4,r4,r5
10007124:	20c9883a 	add	r4,r4,r3
10007128:	200a943a 	slli	r5,r4,16
1000712c:	8c400104 	addi	r17,r17,4
10007130:	2007d43a 	srai	r3,r4,16
10007134:	2884b03a 	or	r2,r5,r2
10007138:	30bfff15 	stw	r2,-4(r6)
1000713c:	e47fed2e 	bgeu	fp,r17,100070f4 <__alt_data_end+0xf80070f4>
10007140:	bdc5883a 	add	r2,r23,r23
10007144:	1085883a 	add	r2,r2,r2
10007148:	9887883a 	add	r3,r19,r2
1000714c:	18800017 	ldw	r2,0(r3)
10007150:	10000c1e 	bne	r2,zero,10007184 <quorem+0x1ec>
10007154:	18bfff04 	addi	r2,r3,-4
10007158:	9880082e 	bgeu	r19,r2,1000717c <quorem+0x1e4>
1000715c:	18ffff17 	ldw	r3,-4(r3)
10007160:	18000326 	beq	r3,zero,10007170 <quorem+0x1d8>
10007164:	00000506 	br	1000717c <quorem+0x1e4>
10007168:	10c00017 	ldw	r3,0(r2)
1000716c:	1800031e 	bne	r3,zero,1000717c <quorem+0x1e4>
10007170:	10bfff04 	addi	r2,r2,-4
10007174:	bdffffc4 	addi	r23,r23,-1
10007178:	98bffb36 	bltu	r19,r2,10007168 <__alt_data_end+0xf8007168>
1000717c:	d8c00017 	ldw	r3,0(sp)
10007180:	1dc00415 	stw	r23,16(r3)
10007184:	9005883a 	mov	r2,r18
10007188:	dfc00d17 	ldw	ra,52(sp)
1000718c:	df000c17 	ldw	fp,48(sp)
10007190:	ddc00b17 	ldw	r23,44(sp)
10007194:	dd800a17 	ldw	r22,40(sp)
10007198:	dd400917 	ldw	r21,36(sp)
1000719c:	dd000817 	ldw	r20,32(sp)
100071a0:	dcc00717 	ldw	r19,28(sp)
100071a4:	dc800617 	ldw	r18,24(sp)
100071a8:	dc400517 	ldw	r17,20(sp)
100071ac:	dc000417 	ldw	r16,16(sp)
100071b0:	dec00e04 	addi	sp,sp,56
100071b4:	f800283a 	ret
100071b8:	0005883a 	mov	r2,zero
100071bc:	003ff206 	br	10007188 <__alt_data_end+0xf8007188>

100071c0 <_dtoa_r>:
100071c0:	20801017 	ldw	r2,64(r4)
100071c4:	deffde04 	addi	sp,sp,-136
100071c8:	df002015 	stw	fp,128(sp)
100071cc:	dcc01b15 	stw	r19,108(sp)
100071d0:	dc801a15 	stw	r18,104(sp)
100071d4:	dc401915 	stw	r17,100(sp)
100071d8:	dc001815 	stw	r16,96(sp)
100071dc:	dfc02115 	stw	ra,132(sp)
100071e0:	ddc01f15 	stw	r23,124(sp)
100071e4:	dd801e15 	stw	r22,120(sp)
100071e8:	dd401d15 	stw	r21,116(sp)
100071ec:	dd001c15 	stw	r20,112(sp)
100071f0:	d9c00315 	stw	r7,12(sp)
100071f4:	2039883a 	mov	fp,r4
100071f8:	3023883a 	mov	r17,r6
100071fc:	2825883a 	mov	r18,r5
10007200:	dc002417 	ldw	r16,144(sp)
10007204:	3027883a 	mov	r19,r6
10007208:	10000826 	beq	r2,zero,1000722c <_dtoa_r+0x6c>
1000720c:	21801117 	ldw	r6,68(r4)
10007210:	00c00044 	movi	r3,1
10007214:	100b883a 	mov	r5,r2
10007218:	1986983a 	sll	r3,r3,r6
1000721c:	11800115 	stw	r6,4(r2)
10007220:	10c00215 	stw	r3,8(r2)
10007224:	00092340 	call	10009234 <_Bfree>
10007228:	e0001015 	stw	zero,64(fp)
1000722c:	88002e16 	blt	r17,zero,100072e8 <_dtoa_r+0x128>
10007230:	80000015 	stw	zero,0(r16)
10007234:	889ffc2c 	andhi	r2,r17,32752
10007238:	00dffc34 	movhi	r3,32752
1000723c:	10c01c26 	beq	r2,r3,100072b0 <_dtoa_r+0xf0>
10007240:	000d883a 	mov	r6,zero
10007244:	000f883a 	mov	r7,zero
10007248:	9009883a 	mov	r4,r18
1000724c:	980b883a 	mov	r5,r19
10007250:	000e3b80 	call	1000e3b8 <__eqdf2>
10007254:	10002b1e 	bne	r2,zero,10007304 <_dtoa_r+0x144>
10007258:	d9c02317 	ldw	r7,140(sp)
1000725c:	00800044 	movi	r2,1
10007260:	38800015 	stw	r2,0(r7)
10007264:	d8802517 	ldw	r2,148(sp)
10007268:	10019e26 	beq	r2,zero,100078e4 <_dtoa_r+0x724>
1000726c:	d8c02517 	ldw	r3,148(sp)
10007270:	00840074 	movhi	r2,4097
10007274:	1089b444 	addi	r2,r2,9937
10007278:	18800015 	stw	r2,0(r3)
1000727c:	10bfffc4 	addi	r2,r2,-1
10007280:	dfc02117 	ldw	ra,132(sp)
10007284:	df002017 	ldw	fp,128(sp)
10007288:	ddc01f17 	ldw	r23,124(sp)
1000728c:	dd801e17 	ldw	r22,120(sp)
10007290:	dd401d17 	ldw	r21,116(sp)
10007294:	dd001c17 	ldw	r20,112(sp)
10007298:	dcc01b17 	ldw	r19,108(sp)
1000729c:	dc801a17 	ldw	r18,104(sp)
100072a0:	dc401917 	ldw	r17,100(sp)
100072a4:	dc001817 	ldw	r16,96(sp)
100072a8:	dec02204 	addi	sp,sp,136
100072ac:	f800283a 	ret
100072b0:	d8c02317 	ldw	r3,140(sp)
100072b4:	0089c3c4 	movi	r2,9999
100072b8:	18800015 	stw	r2,0(r3)
100072bc:	90017726 	beq	r18,zero,1000789c <_dtoa_r+0x6dc>
100072c0:	00840074 	movhi	r2,4097
100072c4:	1089c004 	addi	r2,r2,9984
100072c8:	d9002517 	ldw	r4,148(sp)
100072cc:	203fec26 	beq	r4,zero,10007280 <__alt_data_end+0xf8007280>
100072d0:	10c000c7 	ldb	r3,3(r2)
100072d4:	1801781e 	bne	r3,zero,100078b8 <_dtoa_r+0x6f8>
100072d8:	10c000c4 	addi	r3,r2,3
100072dc:	d9802517 	ldw	r6,148(sp)
100072e0:	30c00015 	stw	r3,0(r6)
100072e4:	003fe606 	br	10007280 <__alt_data_end+0xf8007280>
100072e8:	04e00034 	movhi	r19,32768
100072ec:	9cffffc4 	addi	r19,r19,-1
100072f0:	00800044 	movi	r2,1
100072f4:	8ce6703a 	and	r19,r17,r19
100072f8:	80800015 	stw	r2,0(r16)
100072fc:	9823883a 	mov	r17,r19
10007300:	003fcc06 	br	10007234 <__alt_data_end+0xf8007234>
10007304:	d8800204 	addi	r2,sp,8
10007308:	d8800015 	stw	r2,0(sp)
1000730c:	d9c00104 	addi	r7,sp,4
10007310:	900b883a 	mov	r5,r18
10007314:	980d883a 	mov	r6,r19
10007318:	e009883a 	mov	r4,fp
1000731c:	8820d53a 	srli	r16,r17,20
10007320:	0009edc0 	call	10009edc <__d2b>
10007324:	d8800915 	stw	r2,36(sp)
10007328:	8001651e 	bne	r16,zero,100078c0 <_dtoa_r+0x700>
1000732c:	dd800217 	ldw	r22,8(sp)
10007330:	dc000117 	ldw	r16,4(sp)
10007334:	00800804 	movi	r2,32
10007338:	b421883a 	add	r16,r22,r16
1000733c:	80c10c84 	addi	r3,r16,1074
10007340:	10c2d10e 	bge	r2,r3,10007e88 <_dtoa_r+0xcc8>
10007344:	00801004 	movi	r2,64
10007348:	81010484 	addi	r4,r16,1042
1000734c:	10c7c83a 	sub	r3,r2,r3
10007350:	9108d83a 	srl	r4,r18,r4
10007354:	88e2983a 	sll	r17,r17,r3
10007358:	2448b03a 	or	r4,r4,r17
1000735c:	000f8d40 	call	1000f8d4 <__floatunsidf>
10007360:	017f8434 	movhi	r5,65040
10007364:	01800044 	movi	r6,1
10007368:	1009883a 	mov	r4,r2
1000736c:	194b883a 	add	r5,r3,r5
10007370:	843fffc4 	addi	r16,r16,-1
10007374:	d9801115 	stw	r6,68(sp)
10007378:	000d883a 	mov	r6,zero
1000737c:	01cffe34 	movhi	r7,16376
10007380:	000ee7c0 	call	1000ee7c <__subdf3>
10007384:	0198dbf4 	movhi	r6,25455
10007388:	01cff4f4 	movhi	r7,16339
1000738c:	3190d844 	addi	r6,r6,17249
10007390:	39e1e9c4 	addi	r7,r7,-30809
10007394:	1009883a 	mov	r4,r2
10007398:	180b883a 	mov	r5,r3
1000739c:	000e6100 	call	1000e610 <__muldf3>
100073a0:	01a2d874 	movhi	r6,35681
100073a4:	01cff1f4 	movhi	r7,16327
100073a8:	31b22cc4 	addi	r6,r6,-14157
100073ac:	39e28a04 	addi	r7,r7,-30168
100073b0:	180b883a 	mov	r5,r3
100073b4:	1009883a 	mov	r4,r2
100073b8:	000d13c0 	call	1000d13c <__adddf3>
100073bc:	8009883a 	mov	r4,r16
100073c0:	1029883a 	mov	r20,r2
100073c4:	1823883a 	mov	r17,r3
100073c8:	000f7f80 	call	1000f7f8 <__floatsidf>
100073cc:	019427f4 	movhi	r6,20639
100073d0:	01cff4f4 	movhi	r7,16339
100073d4:	319e7ec4 	addi	r6,r6,31227
100073d8:	39d104c4 	addi	r7,r7,17427
100073dc:	1009883a 	mov	r4,r2
100073e0:	180b883a 	mov	r5,r3
100073e4:	000e6100 	call	1000e610 <__muldf3>
100073e8:	100d883a 	mov	r6,r2
100073ec:	180f883a 	mov	r7,r3
100073f0:	a009883a 	mov	r4,r20
100073f4:	880b883a 	mov	r5,r17
100073f8:	000d13c0 	call	1000d13c <__adddf3>
100073fc:	1009883a 	mov	r4,r2
10007400:	180b883a 	mov	r5,r3
10007404:	1029883a 	mov	r20,r2
10007408:	1823883a 	mov	r17,r3
1000740c:	000f7780 	call	1000f778 <__fixdfsi>
10007410:	000d883a 	mov	r6,zero
10007414:	000f883a 	mov	r7,zero
10007418:	a009883a 	mov	r4,r20
1000741c:	880b883a 	mov	r5,r17
10007420:	d8800515 	stw	r2,20(sp)
10007424:	000e51c0 	call	1000e51c <__ledf2>
10007428:	10028716 	blt	r2,zero,10007e48 <_dtoa_r+0xc88>
1000742c:	d8c00517 	ldw	r3,20(sp)
10007430:	00800584 	movi	r2,22
10007434:	10c27536 	bltu	r2,r3,10007e0c <_dtoa_r+0xc4c>
10007438:	180490fa 	slli	r2,r3,3
1000743c:	00c40074 	movhi	r3,4097
10007440:	18c9db04 	addi	r3,r3,10092
10007444:	1885883a 	add	r2,r3,r2
10007448:	11000017 	ldw	r4,0(r2)
1000744c:	11400117 	ldw	r5,4(r2)
10007450:	900d883a 	mov	r6,r18
10007454:	980f883a 	mov	r7,r19
10007458:	000e4400 	call	1000e440 <__gedf2>
1000745c:	00828d0e 	bge	zero,r2,10007e94 <_dtoa_r+0xcd4>
10007460:	d9000517 	ldw	r4,20(sp)
10007464:	d8000e15 	stw	zero,56(sp)
10007468:	213fffc4 	addi	r4,r4,-1
1000746c:	d9000515 	stw	r4,20(sp)
10007470:	b42dc83a 	sub	r22,r22,r16
10007474:	b5bfffc4 	addi	r22,r22,-1
10007478:	b0026f16 	blt	r22,zero,10007e38 <_dtoa_r+0xc78>
1000747c:	d8000815 	stw	zero,32(sp)
10007480:	d9c00517 	ldw	r7,20(sp)
10007484:	38026416 	blt	r7,zero,10007e18 <_dtoa_r+0xc58>
10007488:	b1ed883a 	add	r22,r22,r7
1000748c:	d9c00d15 	stw	r7,52(sp)
10007490:	d8000a15 	stw	zero,40(sp)
10007494:	d9800317 	ldw	r6,12(sp)
10007498:	00800244 	movi	r2,9
1000749c:	11811436 	bltu	r2,r6,100078f0 <_dtoa_r+0x730>
100074a0:	00800144 	movi	r2,5
100074a4:	1184e10e 	bge	r2,r6,1000882c <_dtoa_r+0x166c>
100074a8:	31bfff04 	addi	r6,r6,-4
100074ac:	d9800315 	stw	r6,12(sp)
100074b0:	0023883a 	mov	r17,zero
100074b4:	d9800317 	ldw	r6,12(sp)
100074b8:	008000c4 	movi	r2,3
100074bc:	30836726 	beq	r6,r2,1000825c <_dtoa_r+0x109c>
100074c0:	1183410e 	bge	r2,r6,100081c8 <_dtoa_r+0x1008>
100074c4:	d9c00317 	ldw	r7,12(sp)
100074c8:	00800104 	movi	r2,4
100074cc:	38827c26 	beq	r7,r2,10007ec0 <_dtoa_r+0xd00>
100074d0:	00800144 	movi	r2,5
100074d4:	3884c41e 	bne	r7,r2,100087e8 <_dtoa_r+0x1628>
100074d8:	00800044 	movi	r2,1
100074dc:	d8800b15 	stw	r2,44(sp)
100074e0:	d8c00517 	ldw	r3,20(sp)
100074e4:	d9002217 	ldw	r4,136(sp)
100074e8:	1907883a 	add	r3,r3,r4
100074ec:	19800044 	addi	r6,r3,1
100074f0:	d8c00c15 	stw	r3,48(sp)
100074f4:	d9800615 	stw	r6,24(sp)
100074f8:	0183a40e 	bge	zero,r6,1000838c <_dtoa_r+0x11cc>
100074fc:	d9800617 	ldw	r6,24(sp)
10007500:	3021883a 	mov	r16,r6
10007504:	e0001115 	stw	zero,68(fp)
10007508:	008005c4 	movi	r2,23
1000750c:	1184c92e 	bgeu	r2,r6,10008834 <_dtoa_r+0x1674>
10007510:	00c00044 	movi	r3,1
10007514:	00800104 	movi	r2,4
10007518:	1085883a 	add	r2,r2,r2
1000751c:	11000504 	addi	r4,r2,20
10007520:	180b883a 	mov	r5,r3
10007524:	18c00044 	addi	r3,r3,1
10007528:	313ffb2e 	bgeu	r6,r4,10007518 <__alt_data_end+0xf8007518>
1000752c:	e1401115 	stw	r5,68(fp)
10007530:	e009883a 	mov	r4,fp
10007534:	000918c0 	call	1000918c <_Balloc>
10007538:	d8800715 	stw	r2,28(sp)
1000753c:	e0801015 	stw	r2,64(fp)
10007540:	00800384 	movi	r2,14
10007544:	1400f736 	bltu	r2,r16,10007924 <_dtoa_r+0x764>
10007548:	8800f626 	beq	r17,zero,10007924 <_dtoa_r+0x764>
1000754c:	d9c00517 	ldw	r7,20(sp)
10007550:	01c39a0e 	bge	zero,r7,100083bc <_dtoa_r+0x11fc>
10007554:	388003cc 	andi	r2,r7,15
10007558:	100490fa 	slli	r2,r2,3
1000755c:	382bd13a 	srai	r21,r7,4
10007560:	00c40074 	movhi	r3,4097
10007564:	18c9db04 	addi	r3,r3,10092
10007568:	1885883a 	add	r2,r3,r2
1000756c:	a8c0040c 	andi	r3,r21,16
10007570:	12400017 	ldw	r9,0(r2)
10007574:	12000117 	ldw	r8,4(r2)
10007578:	18037926 	beq	r3,zero,10008360 <_dtoa_r+0x11a0>
1000757c:	00840074 	movhi	r2,4097
10007580:	1089d104 	addi	r2,r2,10052
10007584:	11800817 	ldw	r6,32(r2)
10007588:	11c00917 	ldw	r7,36(r2)
1000758c:	9009883a 	mov	r4,r18
10007590:	980b883a 	mov	r5,r19
10007594:	da001715 	stw	r8,92(sp)
10007598:	da401615 	stw	r9,88(sp)
1000759c:	000d9e80 	call	1000d9e8 <__divdf3>
100075a0:	da001717 	ldw	r8,92(sp)
100075a4:	da401617 	ldw	r9,88(sp)
100075a8:	ad4003cc 	andi	r21,r21,15
100075ac:	040000c4 	movi	r16,3
100075b0:	1023883a 	mov	r17,r2
100075b4:	1829883a 	mov	r20,r3
100075b8:	a8001126 	beq	r21,zero,10007600 <_dtoa_r+0x440>
100075bc:	05c40074 	movhi	r23,4097
100075c0:	bdc9d104 	addi	r23,r23,10052
100075c4:	4805883a 	mov	r2,r9
100075c8:	4007883a 	mov	r3,r8
100075cc:	a980004c 	andi	r6,r21,1
100075d0:	1009883a 	mov	r4,r2
100075d4:	a82bd07a 	srai	r21,r21,1
100075d8:	180b883a 	mov	r5,r3
100075dc:	30000426 	beq	r6,zero,100075f0 <_dtoa_r+0x430>
100075e0:	b9800017 	ldw	r6,0(r23)
100075e4:	b9c00117 	ldw	r7,4(r23)
100075e8:	84000044 	addi	r16,r16,1
100075ec:	000e6100 	call	1000e610 <__muldf3>
100075f0:	bdc00204 	addi	r23,r23,8
100075f4:	a83ff51e 	bne	r21,zero,100075cc <__alt_data_end+0xf80075cc>
100075f8:	1013883a 	mov	r9,r2
100075fc:	1811883a 	mov	r8,r3
10007600:	480d883a 	mov	r6,r9
10007604:	400f883a 	mov	r7,r8
10007608:	8809883a 	mov	r4,r17
1000760c:	a00b883a 	mov	r5,r20
10007610:	000d9e80 	call	1000d9e8 <__divdf3>
10007614:	d8800f15 	stw	r2,60(sp)
10007618:	d8c01015 	stw	r3,64(sp)
1000761c:	d8c00e17 	ldw	r3,56(sp)
10007620:	18000626 	beq	r3,zero,1000763c <_dtoa_r+0x47c>
10007624:	d9000f17 	ldw	r4,60(sp)
10007628:	d9401017 	ldw	r5,64(sp)
1000762c:	000d883a 	mov	r6,zero
10007630:	01cffc34 	movhi	r7,16368
10007634:	000e51c0 	call	1000e51c <__ledf2>
10007638:	10040b16 	blt	r2,zero,10008668 <_dtoa_r+0x14a8>
1000763c:	8009883a 	mov	r4,r16
10007640:	000f7f80 	call	1000f7f8 <__floatsidf>
10007644:	d9800f17 	ldw	r6,60(sp)
10007648:	d9c01017 	ldw	r7,64(sp)
1000764c:	1009883a 	mov	r4,r2
10007650:	180b883a 	mov	r5,r3
10007654:	000e6100 	call	1000e610 <__muldf3>
10007658:	000d883a 	mov	r6,zero
1000765c:	01d00734 	movhi	r7,16412
10007660:	1009883a 	mov	r4,r2
10007664:	180b883a 	mov	r5,r3
10007668:	000d13c0 	call	1000d13c <__adddf3>
1000766c:	1021883a 	mov	r16,r2
10007670:	d8800617 	ldw	r2,24(sp)
10007674:	047f3034 	movhi	r17,64704
10007678:	1c63883a 	add	r17,r3,r17
1000767c:	10031826 	beq	r2,zero,100082e0 <_dtoa_r+0x1120>
10007680:	d8c00517 	ldw	r3,20(sp)
10007684:	db000617 	ldw	r12,24(sp)
10007688:	d8c01315 	stw	r3,76(sp)
1000768c:	d9000b17 	ldw	r4,44(sp)
10007690:	20038f26 	beq	r4,zero,100084d0 <_dtoa_r+0x1310>
10007694:	60bfffc4 	addi	r2,r12,-1
10007698:	100490fa 	slli	r2,r2,3
1000769c:	00c40074 	movhi	r3,4097
100076a0:	18c9db04 	addi	r3,r3,10092
100076a4:	1885883a 	add	r2,r3,r2
100076a8:	11800017 	ldw	r6,0(r2)
100076ac:	11c00117 	ldw	r7,4(r2)
100076b0:	d8800717 	ldw	r2,28(sp)
100076b4:	0009883a 	mov	r4,zero
100076b8:	014ff834 	movhi	r5,16352
100076bc:	db001615 	stw	r12,88(sp)
100076c0:	15c00044 	addi	r23,r2,1
100076c4:	000d9e80 	call	1000d9e8 <__divdf3>
100076c8:	800d883a 	mov	r6,r16
100076cc:	880f883a 	mov	r7,r17
100076d0:	1009883a 	mov	r4,r2
100076d4:	180b883a 	mov	r5,r3
100076d8:	000ee7c0 	call	1000ee7c <__subdf3>
100076dc:	d9401017 	ldw	r5,64(sp)
100076e0:	d9000f17 	ldw	r4,60(sp)
100076e4:	102b883a 	mov	r21,r2
100076e8:	d8c01215 	stw	r3,72(sp)
100076ec:	000f7780 	call	1000f778 <__fixdfsi>
100076f0:	1009883a 	mov	r4,r2
100076f4:	1029883a 	mov	r20,r2
100076f8:	000f7f80 	call	1000f7f8 <__floatsidf>
100076fc:	d9000f17 	ldw	r4,60(sp)
10007700:	d9401017 	ldw	r5,64(sp)
10007704:	100d883a 	mov	r6,r2
10007708:	180f883a 	mov	r7,r3
1000770c:	000ee7c0 	call	1000ee7c <__subdf3>
10007710:	1823883a 	mov	r17,r3
10007714:	d8c00717 	ldw	r3,28(sp)
10007718:	d9401217 	ldw	r5,72(sp)
1000771c:	a2000c04 	addi	r8,r20,48
10007720:	1021883a 	mov	r16,r2
10007724:	1a000005 	stb	r8,0(r3)
10007728:	800d883a 	mov	r6,r16
1000772c:	880f883a 	mov	r7,r17
10007730:	a809883a 	mov	r4,r21
10007734:	4029883a 	mov	r20,r8
10007738:	000e4400 	call	1000e440 <__gedf2>
1000773c:	00841d16 	blt	zero,r2,100087b4 <_dtoa_r+0x15f4>
10007740:	800d883a 	mov	r6,r16
10007744:	880f883a 	mov	r7,r17
10007748:	0009883a 	mov	r4,zero
1000774c:	014ffc34 	movhi	r5,16368
10007750:	000ee7c0 	call	1000ee7c <__subdf3>
10007754:	d9401217 	ldw	r5,72(sp)
10007758:	100d883a 	mov	r6,r2
1000775c:	180f883a 	mov	r7,r3
10007760:	a809883a 	mov	r4,r21
10007764:	000e4400 	call	1000e440 <__gedf2>
10007768:	db001617 	ldw	r12,88(sp)
1000776c:	00840e16 	blt	zero,r2,100087a8 <_dtoa_r+0x15e8>
10007770:	00800044 	movi	r2,1
10007774:	13006b0e 	bge	r2,r12,10007924 <_dtoa_r+0x764>
10007778:	d9000717 	ldw	r4,28(sp)
1000777c:	dd800f15 	stw	r22,60(sp)
10007780:	dcc01015 	stw	r19,64(sp)
10007784:	2319883a 	add	r12,r4,r12
10007788:	dcc01217 	ldw	r19,72(sp)
1000778c:	602d883a 	mov	r22,r12
10007790:	dc801215 	stw	r18,72(sp)
10007794:	b825883a 	mov	r18,r23
10007798:	00000906 	br	100077c0 <_dtoa_r+0x600>
1000779c:	000ee7c0 	call	1000ee7c <__subdf3>
100077a0:	a80d883a 	mov	r6,r21
100077a4:	980f883a 	mov	r7,r19
100077a8:	1009883a 	mov	r4,r2
100077ac:	180b883a 	mov	r5,r3
100077b0:	000e51c0 	call	1000e51c <__ledf2>
100077b4:	1003e816 	blt	r2,zero,10008758 <_dtoa_r+0x1598>
100077b8:	b825883a 	mov	r18,r23
100077bc:	bd83e926 	beq	r23,r22,10008764 <_dtoa_r+0x15a4>
100077c0:	a809883a 	mov	r4,r21
100077c4:	980b883a 	mov	r5,r19
100077c8:	000d883a 	mov	r6,zero
100077cc:	01d00934 	movhi	r7,16420
100077d0:	000e6100 	call	1000e610 <__muldf3>
100077d4:	000d883a 	mov	r6,zero
100077d8:	01d00934 	movhi	r7,16420
100077dc:	8009883a 	mov	r4,r16
100077e0:	880b883a 	mov	r5,r17
100077e4:	102b883a 	mov	r21,r2
100077e8:	1827883a 	mov	r19,r3
100077ec:	000e6100 	call	1000e610 <__muldf3>
100077f0:	180b883a 	mov	r5,r3
100077f4:	1009883a 	mov	r4,r2
100077f8:	1821883a 	mov	r16,r3
100077fc:	1023883a 	mov	r17,r2
10007800:	000f7780 	call	1000f778 <__fixdfsi>
10007804:	1009883a 	mov	r4,r2
10007808:	1029883a 	mov	r20,r2
1000780c:	000f7f80 	call	1000f7f8 <__floatsidf>
10007810:	8809883a 	mov	r4,r17
10007814:	800b883a 	mov	r5,r16
10007818:	100d883a 	mov	r6,r2
1000781c:	180f883a 	mov	r7,r3
10007820:	000ee7c0 	call	1000ee7c <__subdf3>
10007824:	a5000c04 	addi	r20,r20,48
10007828:	a80d883a 	mov	r6,r21
1000782c:	980f883a 	mov	r7,r19
10007830:	1009883a 	mov	r4,r2
10007834:	180b883a 	mov	r5,r3
10007838:	95000005 	stb	r20,0(r18)
1000783c:	1021883a 	mov	r16,r2
10007840:	1823883a 	mov	r17,r3
10007844:	000e51c0 	call	1000e51c <__ledf2>
10007848:	bdc00044 	addi	r23,r23,1
1000784c:	800d883a 	mov	r6,r16
10007850:	880f883a 	mov	r7,r17
10007854:	0009883a 	mov	r4,zero
10007858:	014ffc34 	movhi	r5,16368
1000785c:	103fcf0e 	bge	r2,zero,1000779c <__alt_data_end+0xf800779c>
10007860:	d8c01317 	ldw	r3,76(sp)
10007864:	d8c00515 	stw	r3,20(sp)
10007868:	d9400917 	ldw	r5,36(sp)
1000786c:	e009883a 	mov	r4,fp
10007870:	00092340 	call	10009234 <_Bfree>
10007874:	d9000517 	ldw	r4,20(sp)
10007878:	d9802317 	ldw	r6,140(sp)
1000787c:	d9c02517 	ldw	r7,148(sp)
10007880:	b8000005 	stb	zero,0(r23)
10007884:	20800044 	addi	r2,r4,1
10007888:	30800015 	stw	r2,0(r6)
1000788c:	3802aa26 	beq	r7,zero,10008338 <_dtoa_r+0x1178>
10007890:	3dc00015 	stw	r23,0(r7)
10007894:	d8800717 	ldw	r2,28(sp)
10007898:	003e7906 	br	10007280 <__alt_data_end+0xf8007280>
1000789c:	00800434 	movhi	r2,16
100078a0:	10bfffc4 	addi	r2,r2,-1
100078a4:	88a2703a 	and	r17,r17,r2
100078a8:	883e851e 	bne	r17,zero,100072c0 <__alt_data_end+0xf80072c0>
100078ac:	00840074 	movhi	r2,4097
100078b0:	1089bd04 	addi	r2,r2,9972
100078b4:	003e8406 	br	100072c8 <__alt_data_end+0xf80072c8>
100078b8:	10c00204 	addi	r3,r2,8
100078bc:	003e8706 	br	100072dc <__alt_data_end+0xf80072dc>
100078c0:	01400434 	movhi	r5,16
100078c4:	297fffc4 	addi	r5,r5,-1
100078c8:	994a703a 	and	r5,r19,r5
100078cc:	9009883a 	mov	r4,r18
100078d0:	843f0044 	addi	r16,r16,-1023
100078d4:	294ffc34 	orhi	r5,r5,16368
100078d8:	dd800217 	ldw	r22,8(sp)
100078dc:	d8001115 	stw	zero,68(sp)
100078e0:	003ea506 	br	10007378 <__alt_data_end+0xf8007378>
100078e4:	00840074 	movhi	r2,4097
100078e8:	1089b404 	addi	r2,r2,9936
100078ec:	003e6406 	br	10007280 <__alt_data_end+0xf8007280>
100078f0:	e0001115 	stw	zero,68(fp)
100078f4:	000b883a 	mov	r5,zero
100078f8:	e009883a 	mov	r4,fp
100078fc:	000918c0 	call	1000918c <_Balloc>
10007900:	01bfffc4 	movi	r6,-1
10007904:	01c00044 	movi	r7,1
10007908:	d8800715 	stw	r2,28(sp)
1000790c:	d9800c15 	stw	r6,48(sp)
10007910:	e0801015 	stw	r2,64(fp)
10007914:	d8000315 	stw	zero,12(sp)
10007918:	d9c00b15 	stw	r7,44(sp)
1000791c:	d9800615 	stw	r6,24(sp)
10007920:	d8002215 	stw	zero,136(sp)
10007924:	d8800117 	ldw	r2,4(sp)
10007928:	10008916 	blt	r2,zero,10007b50 <_dtoa_r+0x990>
1000792c:	d9000517 	ldw	r4,20(sp)
10007930:	00c00384 	movi	r3,14
10007934:	19008616 	blt	r3,r4,10007b50 <_dtoa_r+0x990>
10007938:	200490fa 	slli	r2,r4,3
1000793c:	00c40074 	movhi	r3,4097
10007940:	d9802217 	ldw	r6,136(sp)
10007944:	18c9db04 	addi	r3,r3,10092
10007948:	1885883a 	add	r2,r3,r2
1000794c:	14000017 	ldw	r16,0(r2)
10007950:	14400117 	ldw	r17,4(r2)
10007954:	30016316 	blt	r6,zero,10007ee4 <_dtoa_r+0xd24>
10007958:	800d883a 	mov	r6,r16
1000795c:	880f883a 	mov	r7,r17
10007960:	9009883a 	mov	r4,r18
10007964:	980b883a 	mov	r5,r19
10007968:	000d9e80 	call	1000d9e8 <__divdf3>
1000796c:	180b883a 	mov	r5,r3
10007970:	1009883a 	mov	r4,r2
10007974:	000f7780 	call	1000f778 <__fixdfsi>
10007978:	1009883a 	mov	r4,r2
1000797c:	102b883a 	mov	r21,r2
10007980:	000f7f80 	call	1000f7f8 <__floatsidf>
10007984:	800d883a 	mov	r6,r16
10007988:	880f883a 	mov	r7,r17
1000798c:	1009883a 	mov	r4,r2
10007990:	180b883a 	mov	r5,r3
10007994:	000e6100 	call	1000e610 <__muldf3>
10007998:	100d883a 	mov	r6,r2
1000799c:	180f883a 	mov	r7,r3
100079a0:	9009883a 	mov	r4,r18
100079a4:	980b883a 	mov	r5,r19
100079a8:	000ee7c0 	call	1000ee7c <__subdf3>
100079ac:	d9c00717 	ldw	r7,28(sp)
100079b0:	1009883a 	mov	r4,r2
100079b4:	a8800c04 	addi	r2,r21,48
100079b8:	38800005 	stb	r2,0(r7)
100079bc:	3dc00044 	addi	r23,r7,1
100079c0:	d9c00617 	ldw	r7,24(sp)
100079c4:	01800044 	movi	r6,1
100079c8:	180b883a 	mov	r5,r3
100079cc:	2005883a 	mov	r2,r4
100079d0:	39803826 	beq	r7,r6,10007ab4 <_dtoa_r+0x8f4>
100079d4:	000d883a 	mov	r6,zero
100079d8:	01d00934 	movhi	r7,16420
100079dc:	000e6100 	call	1000e610 <__muldf3>
100079e0:	000d883a 	mov	r6,zero
100079e4:	000f883a 	mov	r7,zero
100079e8:	1009883a 	mov	r4,r2
100079ec:	180b883a 	mov	r5,r3
100079f0:	1025883a 	mov	r18,r2
100079f4:	1827883a 	mov	r19,r3
100079f8:	000e3b80 	call	1000e3b8 <__eqdf2>
100079fc:	103f9a26 	beq	r2,zero,10007868 <__alt_data_end+0xf8007868>
10007a00:	d9c00617 	ldw	r7,24(sp)
10007a04:	d8c00717 	ldw	r3,28(sp)
10007a08:	b829883a 	mov	r20,r23
10007a0c:	38bfffc4 	addi	r2,r7,-1
10007a10:	18ad883a 	add	r22,r3,r2
10007a14:	00000a06 	br	10007a40 <_dtoa_r+0x880>
10007a18:	000e6100 	call	1000e610 <__muldf3>
10007a1c:	000d883a 	mov	r6,zero
10007a20:	000f883a 	mov	r7,zero
10007a24:	1009883a 	mov	r4,r2
10007a28:	180b883a 	mov	r5,r3
10007a2c:	1025883a 	mov	r18,r2
10007a30:	1827883a 	mov	r19,r3
10007a34:	b829883a 	mov	r20,r23
10007a38:	000e3b80 	call	1000e3b8 <__eqdf2>
10007a3c:	103f8a26 	beq	r2,zero,10007868 <__alt_data_end+0xf8007868>
10007a40:	800d883a 	mov	r6,r16
10007a44:	880f883a 	mov	r7,r17
10007a48:	9009883a 	mov	r4,r18
10007a4c:	980b883a 	mov	r5,r19
10007a50:	000d9e80 	call	1000d9e8 <__divdf3>
10007a54:	180b883a 	mov	r5,r3
10007a58:	1009883a 	mov	r4,r2
10007a5c:	000f7780 	call	1000f778 <__fixdfsi>
10007a60:	1009883a 	mov	r4,r2
10007a64:	102b883a 	mov	r21,r2
10007a68:	000f7f80 	call	1000f7f8 <__floatsidf>
10007a6c:	800d883a 	mov	r6,r16
10007a70:	880f883a 	mov	r7,r17
10007a74:	1009883a 	mov	r4,r2
10007a78:	180b883a 	mov	r5,r3
10007a7c:	000e6100 	call	1000e610 <__muldf3>
10007a80:	100d883a 	mov	r6,r2
10007a84:	180f883a 	mov	r7,r3
10007a88:	9009883a 	mov	r4,r18
10007a8c:	980b883a 	mov	r5,r19
10007a90:	000ee7c0 	call	1000ee7c <__subdf3>
10007a94:	aa000c04 	addi	r8,r21,48
10007a98:	a2000005 	stb	r8,0(r20)
10007a9c:	000d883a 	mov	r6,zero
10007aa0:	01d00934 	movhi	r7,16420
10007aa4:	1009883a 	mov	r4,r2
10007aa8:	180b883a 	mov	r5,r3
10007aac:	a5c00044 	addi	r23,r20,1
10007ab0:	b53fd91e 	bne	r22,r20,10007a18 <__alt_data_end+0xf8007a18>
10007ab4:	100d883a 	mov	r6,r2
10007ab8:	180f883a 	mov	r7,r3
10007abc:	1009883a 	mov	r4,r2
10007ac0:	180b883a 	mov	r5,r3
10007ac4:	000d13c0 	call	1000d13c <__adddf3>
10007ac8:	100d883a 	mov	r6,r2
10007acc:	180f883a 	mov	r7,r3
10007ad0:	8009883a 	mov	r4,r16
10007ad4:	880b883a 	mov	r5,r17
10007ad8:	1027883a 	mov	r19,r2
10007adc:	1825883a 	mov	r18,r3
10007ae0:	000e51c0 	call	1000e51c <__ledf2>
10007ae4:	10000816 	blt	r2,zero,10007b08 <_dtoa_r+0x948>
10007ae8:	980d883a 	mov	r6,r19
10007aec:	900f883a 	mov	r7,r18
10007af0:	8009883a 	mov	r4,r16
10007af4:	880b883a 	mov	r5,r17
10007af8:	000e3b80 	call	1000e3b8 <__eqdf2>
10007afc:	103f5a1e 	bne	r2,zero,10007868 <__alt_data_end+0xf8007868>
10007b00:	ad40004c 	andi	r21,r21,1
10007b04:	a83f5826 	beq	r21,zero,10007868 <__alt_data_end+0xf8007868>
10007b08:	bd3fffc3 	ldbu	r20,-1(r23)
10007b0c:	b8bfffc4 	addi	r2,r23,-1
10007b10:	1007883a 	mov	r3,r2
10007b14:	01400e44 	movi	r5,57
10007b18:	d9800717 	ldw	r6,28(sp)
10007b1c:	00000506 	br	10007b34 <_dtoa_r+0x974>
10007b20:	18ffffc4 	addi	r3,r3,-1
10007b24:	11824726 	beq	r2,r6,10008444 <_dtoa_r+0x1284>
10007b28:	1d000003 	ldbu	r20,0(r3)
10007b2c:	102f883a 	mov	r23,r2
10007b30:	10bfffc4 	addi	r2,r2,-1
10007b34:	a1003fcc 	andi	r4,r20,255
10007b38:	2100201c 	xori	r4,r4,128
10007b3c:	213fe004 	addi	r4,r4,-128
10007b40:	217ff726 	beq	r4,r5,10007b20 <__alt_data_end+0xf8007b20>
10007b44:	a2000044 	addi	r8,r20,1
10007b48:	12000005 	stb	r8,0(r2)
10007b4c:	003f4606 	br	10007868 <__alt_data_end+0xf8007868>
10007b50:	d9000b17 	ldw	r4,44(sp)
10007b54:	2000c826 	beq	r4,zero,10007e78 <_dtoa_r+0xcb8>
10007b58:	d9800317 	ldw	r6,12(sp)
10007b5c:	00c00044 	movi	r3,1
10007b60:	1980f90e 	bge	r3,r6,10007f48 <_dtoa_r+0xd88>
10007b64:	d8800617 	ldw	r2,24(sp)
10007b68:	d8c00a17 	ldw	r3,40(sp)
10007b6c:	157fffc4 	addi	r21,r2,-1
10007b70:	1d41f316 	blt	r3,r21,10008340 <_dtoa_r+0x1180>
10007b74:	1d6bc83a 	sub	r21,r3,r21
10007b78:	d9c00617 	ldw	r7,24(sp)
10007b7c:	3802aa16 	blt	r7,zero,10008628 <_dtoa_r+0x1468>
10007b80:	dd000817 	ldw	r20,32(sp)
10007b84:	d8800617 	ldw	r2,24(sp)
10007b88:	d8c00817 	ldw	r3,32(sp)
10007b8c:	01400044 	movi	r5,1
10007b90:	e009883a 	mov	r4,fp
10007b94:	1887883a 	add	r3,r3,r2
10007b98:	d8c00815 	stw	r3,32(sp)
10007b9c:	b0ad883a 	add	r22,r22,r2
10007ba0:	00095c00 	call	100095c0 <__i2b>
10007ba4:	1023883a 	mov	r17,r2
10007ba8:	a0000826 	beq	r20,zero,10007bcc <_dtoa_r+0xa0c>
10007bac:	0580070e 	bge	zero,r22,10007bcc <_dtoa_r+0xa0c>
10007bb0:	a005883a 	mov	r2,r20
10007bb4:	b500b916 	blt	r22,r20,10007e9c <_dtoa_r+0xcdc>
10007bb8:	d9000817 	ldw	r4,32(sp)
10007bbc:	a0a9c83a 	sub	r20,r20,r2
10007bc0:	b0adc83a 	sub	r22,r22,r2
10007bc4:	2089c83a 	sub	r4,r4,r2
10007bc8:	d9000815 	stw	r4,32(sp)
10007bcc:	d9800a17 	ldw	r6,40(sp)
10007bd0:	0181810e 	bge	zero,r6,100081d8 <_dtoa_r+0x1018>
10007bd4:	d9c00b17 	ldw	r7,44(sp)
10007bd8:	3800b326 	beq	r7,zero,10007ea8 <_dtoa_r+0xce8>
10007bdc:	a800b226 	beq	r21,zero,10007ea8 <_dtoa_r+0xce8>
10007be0:	880b883a 	mov	r5,r17
10007be4:	a80d883a 	mov	r6,r21
10007be8:	e009883a 	mov	r4,fp
10007bec:	00098880 	call	10009888 <__pow5mult>
10007bf0:	d9800917 	ldw	r6,36(sp)
10007bf4:	100b883a 	mov	r5,r2
10007bf8:	e009883a 	mov	r4,fp
10007bfc:	1023883a 	mov	r17,r2
10007c00:	00095fc0 	call	100095fc <__multiply>
10007c04:	1021883a 	mov	r16,r2
10007c08:	d8800a17 	ldw	r2,40(sp)
10007c0c:	d9400917 	ldw	r5,36(sp)
10007c10:	e009883a 	mov	r4,fp
10007c14:	1545c83a 	sub	r2,r2,r21
10007c18:	d8800a15 	stw	r2,40(sp)
10007c1c:	00092340 	call	10009234 <_Bfree>
10007c20:	d8c00a17 	ldw	r3,40(sp)
10007c24:	18009f1e 	bne	r3,zero,10007ea4 <_dtoa_r+0xce4>
10007c28:	05c00044 	movi	r23,1
10007c2c:	e009883a 	mov	r4,fp
10007c30:	b80b883a 	mov	r5,r23
10007c34:	00095c00 	call	100095c0 <__i2b>
10007c38:	d9000d17 	ldw	r4,52(sp)
10007c3c:	102b883a 	mov	r21,r2
10007c40:	2000ce26 	beq	r4,zero,10007f7c <_dtoa_r+0xdbc>
10007c44:	200d883a 	mov	r6,r4
10007c48:	100b883a 	mov	r5,r2
10007c4c:	e009883a 	mov	r4,fp
10007c50:	00098880 	call	10009888 <__pow5mult>
10007c54:	d9800317 	ldw	r6,12(sp)
10007c58:	102b883a 	mov	r21,r2
10007c5c:	b981810e 	bge	r23,r6,10008264 <_dtoa_r+0x10a4>
10007c60:	0027883a 	mov	r19,zero
10007c64:	a8800417 	ldw	r2,16(r21)
10007c68:	05c00804 	movi	r23,32
10007c6c:	10800104 	addi	r2,r2,4
10007c70:	1085883a 	add	r2,r2,r2
10007c74:	1085883a 	add	r2,r2,r2
10007c78:	a885883a 	add	r2,r21,r2
10007c7c:	11000017 	ldw	r4,0(r2)
10007c80:	00094a80 	call	100094a8 <__hi0bits>
10007c84:	b885c83a 	sub	r2,r23,r2
10007c88:	1585883a 	add	r2,r2,r22
10007c8c:	108007cc 	andi	r2,r2,31
10007c90:	1000b326 	beq	r2,zero,10007f60 <_dtoa_r+0xda0>
10007c94:	00c00804 	movi	r3,32
10007c98:	1887c83a 	sub	r3,r3,r2
10007c9c:	01000104 	movi	r4,4
10007ca0:	20c2cd0e 	bge	r4,r3,100087d8 <_dtoa_r+0x1618>
10007ca4:	00c00704 	movi	r3,28
10007ca8:	1885c83a 	sub	r2,r3,r2
10007cac:	d8c00817 	ldw	r3,32(sp)
10007cb0:	a0a9883a 	add	r20,r20,r2
10007cb4:	b0ad883a 	add	r22,r22,r2
10007cb8:	1887883a 	add	r3,r3,r2
10007cbc:	d8c00815 	stw	r3,32(sp)
10007cc0:	d9800817 	ldw	r6,32(sp)
10007cc4:	0180040e 	bge	zero,r6,10007cd8 <_dtoa_r+0xb18>
10007cc8:	800b883a 	mov	r5,r16
10007ccc:	e009883a 	mov	r4,fp
10007cd0:	00099c80 	call	100099c8 <__lshift>
10007cd4:	1021883a 	mov	r16,r2
10007cd8:	0580050e 	bge	zero,r22,10007cf0 <_dtoa_r+0xb30>
10007cdc:	a80b883a 	mov	r5,r21
10007ce0:	b00d883a 	mov	r6,r22
10007ce4:	e009883a 	mov	r4,fp
10007ce8:	00099c80 	call	100099c8 <__lshift>
10007cec:	102b883a 	mov	r21,r2
10007cf0:	d9c00e17 	ldw	r7,56(sp)
10007cf4:	3801211e 	bne	r7,zero,1000817c <_dtoa_r+0xfbc>
10007cf8:	d9800617 	ldw	r6,24(sp)
10007cfc:	0181380e 	bge	zero,r6,100081e0 <_dtoa_r+0x1020>
10007d00:	d8c00b17 	ldw	r3,44(sp)
10007d04:	1800ab1e 	bne	r3,zero,10007fb4 <_dtoa_r+0xdf4>
10007d08:	dc800717 	ldw	r18,28(sp)
10007d0c:	dcc00617 	ldw	r19,24(sp)
10007d10:	9029883a 	mov	r20,r18
10007d14:	00000206 	br	10007d20 <_dtoa_r+0xb60>
10007d18:	000925c0 	call	1000925c <__multadd>
10007d1c:	1021883a 	mov	r16,r2
10007d20:	a80b883a 	mov	r5,r21
10007d24:	8009883a 	mov	r4,r16
10007d28:	0006f980 	call	10006f98 <quorem>
10007d2c:	10800c04 	addi	r2,r2,48
10007d30:	90800005 	stb	r2,0(r18)
10007d34:	94800044 	addi	r18,r18,1
10007d38:	9507c83a 	sub	r3,r18,r20
10007d3c:	000f883a 	mov	r7,zero
10007d40:	01800284 	movi	r6,10
10007d44:	800b883a 	mov	r5,r16
10007d48:	e009883a 	mov	r4,fp
10007d4c:	1cfff216 	blt	r3,r19,10007d18 <__alt_data_end+0xf8007d18>
10007d50:	1011883a 	mov	r8,r2
10007d54:	d8800617 	ldw	r2,24(sp)
10007d58:	0082370e 	bge	zero,r2,10008638 <_dtoa_r+0x1478>
10007d5c:	d9000717 	ldw	r4,28(sp)
10007d60:	0025883a 	mov	r18,zero
10007d64:	20af883a 	add	r23,r4,r2
10007d68:	01800044 	movi	r6,1
10007d6c:	800b883a 	mov	r5,r16
10007d70:	e009883a 	mov	r4,fp
10007d74:	da001715 	stw	r8,92(sp)
10007d78:	00099c80 	call	100099c8 <__lshift>
10007d7c:	a80b883a 	mov	r5,r21
10007d80:	1009883a 	mov	r4,r2
10007d84:	d8800915 	stw	r2,36(sp)
10007d88:	0009b100 	call	10009b10 <__mcmp>
10007d8c:	da001717 	ldw	r8,92(sp)
10007d90:	0081800e 	bge	zero,r2,10008394 <_dtoa_r+0x11d4>
10007d94:	b93fffc3 	ldbu	r4,-1(r23)
10007d98:	b8bfffc4 	addi	r2,r23,-1
10007d9c:	1007883a 	mov	r3,r2
10007da0:	01800e44 	movi	r6,57
10007da4:	d9c00717 	ldw	r7,28(sp)
10007da8:	00000506 	br	10007dc0 <_dtoa_r+0xc00>
10007dac:	18ffffc4 	addi	r3,r3,-1
10007db0:	11c12326 	beq	r2,r7,10008240 <_dtoa_r+0x1080>
10007db4:	19000003 	ldbu	r4,0(r3)
10007db8:	102f883a 	mov	r23,r2
10007dbc:	10bfffc4 	addi	r2,r2,-1
10007dc0:	21403fcc 	andi	r5,r4,255
10007dc4:	2940201c 	xori	r5,r5,128
10007dc8:	297fe004 	addi	r5,r5,-128
10007dcc:	29bff726 	beq	r5,r6,10007dac <__alt_data_end+0xf8007dac>
10007dd0:	21000044 	addi	r4,r4,1
10007dd4:	11000005 	stb	r4,0(r2)
10007dd8:	a80b883a 	mov	r5,r21
10007ddc:	e009883a 	mov	r4,fp
10007de0:	00092340 	call	10009234 <_Bfree>
10007de4:	883ea026 	beq	r17,zero,10007868 <__alt_data_end+0xf8007868>
10007de8:	90000426 	beq	r18,zero,10007dfc <_dtoa_r+0xc3c>
10007dec:	94400326 	beq	r18,r17,10007dfc <_dtoa_r+0xc3c>
10007df0:	900b883a 	mov	r5,r18
10007df4:	e009883a 	mov	r4,fp
10007df8:	00092340 	call	10009234 <_Bfree>
10007dfc:	880b883a 	mov	r5,r17
10007e00:	e009883a 	mov	r4,fp
10007e04:	00092340 	call	10009234 <_Bfree>
10007e08:	003e9706 	br	10007868 <__alt_data_end+0xf8007868>
10007e0c:	01800044 	movi	r6,1
10007e10:	d9800e15 	stw	r6,56(sp)
10007e14:	003d9606 	br	10007470 <__alt_data_end+0xf8007470>
10007e18:	d8800817 	ldw	r2,32(sp)
10007e1c:	d8c00517 	ldw	r3,20(sp)
10007e20:	d8000d15 	stw	zero,52(sp)
10007e24:	10c5c83a 	sub	r2,r2,r3
10007e28:	00c9c83a 	sub	r4,zero,r3
10007e2c:	d8800815 	stw	r2,32(sp)
10007e30:	d9000a15 	stw	r4,40(sp)
10007e34:	003d9706 	br	10007494 <__alt_data_end+0xf8007494>
10007e38:	05adc83a 	sub	r22,zero,r22
10007e3c:	dd800815 	stw	r22,32(sp)
10007e40:	002d883a 	mov	r22,zero
10007e44:	003d8e06 	br	10007480 <__alt_data_end+0xf8007480>
10007e48:	d9000517 	ldw	r4,20(sp)
10007e4c:	000f7f80 	call	1000f7f8 <__floatsidf>
10007e50:	100d883a 	mov	r6,r2
10007e54:	180f883a 	mov	r7,r3
10007e58:	a009883a 	mov	r4,r20
10007e5c:	880b883a 	mov	r5,r17
10007e60:	000e3b80 	call	1000e3b8 <__eqdf2>
10007e64:	103d7126 	beq	r2,zero,1000742c <__alt_data_end+0xf800742c>
10007e68:	d9c00517 	ldw	r7,20(sp)
10007e6c:	39ffffc4 	addi	r7,r7,-1
10007e70:	d9c00515 	stw	r7,20(sp)
10007e74:	003d6d06 	br	1000742c <__alt_data_end+0xf800742c>
10007e78:	dd400a17 	ldw	r21,40(sp)
10007e7c:	dd000817 	ldw	r20,32(sp)
10007e80:	0023883a 	mov	r17,zero
10007e84:	003f4806 	br	10007ba8 <__alt_data_end+0xf8007ba8>
10007e88:	10e3c83a 	sub	r17,r2,r3
10007e8c:	9448983a 	sll	r4,r18,r17
10007e90:	003d3206 	br	1000735c <__alt_data_end+0xf800735c>
10007e94:	d8000e15 	stw	zero,56(sp)
10007e98:	003d7506 	br	10007470 <__alt_data_end+0xf8007470>
10007e9c:	b005883a 	mov	r2,r22
10007ea0:	003f4506 	br	10007bb8 <__alt_data_end+0xf8007bb8>
10007ea4:	dc000915 	stw	r16,36(sp)
10007ea8:	d9800a17 	ldw	r6,40(sp)
10007eac:	d9400917 	ldw	r5,36(sp)
10007eb0:	e009883a 	mov	r4,fp
10007eb4:	00098880 	call	10009888 <__pow5mult>
10007eb8:	1021883a 	mov	r16,r2
10007ebc:	003f5a06 	br	10007c28 <__alt_data_end+0xf8007c28>
10007ec0:	01c00044 	movi	r7,1
10007ec4:	d9c00b15 	stw	r7,44(sp)
10007ec8:	d8802217 	ldw	r2,136(sp)
10007ecc:	0081280e 	bge	zero,r2,10008370 <_dtoa_r+0x11b0>
10007ed0:	100d883a 	mov	r6,r2
10007ed4:	1021883a 	mov	r16,r2
10007ed8:	d8800c15 	stw	r2,48(sp)
10007edc:	d8800615 	stw	r2,24(sp)
10007ee0:	003d8806 	br	10007504 <__alt_data_end+0xf8007504>
10007ee4:	d8800617 	ldw	r2,24(sp)
10007ee8:	00be9b16 	blt	zero,r2,10007958 <__alt_data_end+0xf8007958>
10007eec:	10010f1e 	bne	r2,zero,1000832c <_dtoa_r+0x116c>
10007ef0:	880b883a 	mov	r5,r17
10007ef4:	000d883a 	mov	r6,zero
10007ef8:	01d00534 	movhi	r7,16404
10007efc:	8009883a 	mov	r4,r16
10007f00:	000e6100 	call	1000e610 <__muldf3>
10007f04:	900d883a 	mov	r6,r18
10007f08:	980f883a 	mov	r7,r19
10007f0c:	1009883a 	mov	r4,r2
10007f10:	180b883a 	mov	r5,r3
10007f14:	000e4400 	call	1000e440 <__gedf2>
10007f18:	002b883a 	mov	r21,zero
10007f1c:	0023883a 	mov	r17,zero
10007f20:	1000bf16 	blt	r2,zero,10008220 <_dtoa_r+0x1060>
10007f24:	d9802217 	ldw	r6,136(sp)
10007f28:	ddc00717 	ldw	r23,28(sp)
10007f2c:	018c303a 	nor	r6,zero,r6
10007f30:	d9800515 	stw	r6,20(sp)
10007f34:	a80b883a 	mov	r5,r21
10007f38:	e009883a 	mov	r4,fp
10007f3c:	00092340 	call	10009234 <_Bfree>
10007f40:	883e4926 	beq	r17,zero,10007868 <__alt_data_end+0xf8007868>
10007f44:	003fad06 	br	10007dfc <__alt_data_end+0xf8007dfc>
10007f48:	d9c01117 	ldw	r7,68(sp)
10007f4c:	3801bc26 	beq	r7,zero,10008640 <_dtoa_r+0x1480>
10007f50:	10810cc4 	addi	r2,r2,1075
10007f54:	dd400a17 	ldw	r21,40(sp)
10007f58:	dd000817 	ldw	r20,32(sp)
10007f5c:	003f0a06 	br	10007b88 <__alt_data_end+0xf8007b88>
10007f60:	00800704 	movi	r2,28
10007f64:	d9000817 	ldw	r4,32(sp)
10007f68:	a0a9883a 	add	r20,r20,r2
10007f6c:	b0ad883a 	add	r22,r22,r2
10007f70:	2089883a 	add	r4,r4,r2
10007f74:	d9000815 	stw	r4,32(sp)
10007f78:	003f5106 	br	10007cc0 <__alt_data_end+0xf8007cc0>
10007f7c:	d8c00317 	ldw	r3,12(sp)
10007f80:	b8c1fc0e 	bge	r23,r3,10008774 <_dtoa_r+0x15b4>
10007f84:	0027883a 	mov	r19,zero
10007f88:	b805883a 	mov	r2,r23
10007f8c:	003f3e06 	br	10007c88 <__alt_data_end+0xf8007c88>
10007f90:	880b883a 	mov	r5,r17
10007f94:	e009883a 	mov	r4,fp
10007f98:	000f883a 	mov	r7,zero
10007f9c:	01800284 	movi	r6,10
10007fa0:	000925c0 	call	1000925c <__multadd>
10007fa4:	d9000c17 	ldw	r4,48(sp)
10007fa8:	1023883a 	mov	r17,r2
10007fac:	0102040e 	bge	zero,r4,100087c0 <_dtoa_r+0x1600>
10007fb0:	d9000615 	stw	r4,24(sp)
10007fb4:	0500050e 	bge	zero,r20,10007fcc <_dtoa_r+0xe0c>
10007fb8:	880b883a 	mov	r5,r17
10007fbc:	a00d883a 	mov	r6,r20
10007fc0:	e009883a 	mov	r4,fp
10007fc4:	00099c80 	call	100099c8 <__lshift>
10007fc8:	1023883a 	mov	r17,r2
10007fcc:	9801241e 	bne	r19,zero,10008460 <_dtoa_r+0x12a0>
10007fd0:	8829883a 	mov	r20,r17
10007fd4:	d9000617 	ldw	r4,24(sp)
10007fd8:	dcc00717 	ldw	r19,28(sp)
10007fdc:	9480004c 	andi	r18,r18,1
10007fe0:	20bfffc4 	addi	r2,r4,-1
10007fe4:	9885883a 	add	r2,r19,r2
10007fe8:	d8800415 	stw	r2,16(sp)
10007fec:	dc800615 	stw	r18,24(sp)
10007ff0:	a80b883a 	mov	r5,r21
10007ff4:	8009883a 	mov	r4,r16
10007ff8:	0006f980 	call	10006f98 <quorem>
10007ffc:	880b883a 	mov	r5,r17
10008000:	8009883a 	mov	r4,r16
10008004:	102f883a 	mov	r23,r2
10008008:	0009b100 	call	10009b10 <__mcmp>
1000800c:	a80b883a 	mov	r5,r21
10008010:	a00d883a 	mov	r6,r20
10008014:	e009883a 	mov	r4,fp
10008018:	102d883a 	mov	r22,r2
1000801c:	0009b700 	call	10009b70 <__mdiff>
10008020:	1007883a 	mov	r3,r2
10008024:	10800317 	ldw	r2,12(r2)
10008028:	bc800c04 	addi	r18,r23,48
1000802c:	180b883a 	mov	r5,r3
10008030:	10004e1e 	bne	r2,zero,1000816c <_dtoa_r+0xfac>
10008034:	8009883a 	mov	r4,r16
10008038:	d8c01615 	stw	r3,88(sp)
1000803c:	0009b100 	call	10009b10 <__mcmp>
10008040:	d8c01617 	ldw	r3,88(sp)
10008044:	e009883a 	mov	r4,fp
10008048:	d8801615 	stw	r2,88(sp)
1000804c:	180b883a 	mov	r5,r3
10008050:	00092340 	call	10009234 <_Bfree>
10008054:	d8801617 	ldw	r2,88(sp)
10008058:	1000041e 	bne	r2,zero,1000806c <_dtoa_r+0xeac>
1000805c:	d9800317 	ldw	r6,12(sp)
10008060:	3000021e 	bne	r6,zero,1000806c <_dtoa_r+0xeac>
10008064:	d8c00617 	ldw	r3,24(sp)
10008068:	18003726 	beq	r3,zero,10008148 <_dtoa_r+0xf88>
1000806c:	b0002016 	blt	r22,zero,100080f0 <_dtoa_r+0xf30>
10008070:	b000041e 	bne	r22,zero,10008084 <_dtoa_r+0xec4>
10008074:	d9000317 	ldw	r4,12(sp)
10008078:	2000021e 	bne	r4,zero,10008084 <_dtoa_r+0xec4>
1000807c:	d8c00617 	ldw	r3,24(sp)
10008080:	18001b26 	beq	r3,zero,100080f0 <_dtoa_r+0xf30>
10008084:	00810716 	blt	zero,r2,100084a4 <_dtoa_r+0x12e4>
10008088:	d8c00417 	ldw	r3,16(sp)
1000808c:	9d800044 	addi	r22,r19,1
10008090:	9c800005 	stb	r18,0(r19)
10008094:	b02f883a 	mov	r23,r22
10008098:	98c10626 	beq	r19,r3,100084b4 <_dtoa_r+0x12f4>
1000809c:	800b883a 	mov	r5,r16
100080a0:	000f883a 	mov	r7,zero
100080a4:	01800284 	movi	r6,10
100080a8:	e009883a 	mov	r4,fp
100080ac:	000925c0 	call	1000925c <__multadd>
100080b0:	1021883a 	mov	r16,r2
100080b4:	000f883a 	mov	r7,zero
100080b8:	01800284 	movi	r6,10
100080bc:	880b883a 	mov	r5,r17
100080c0:	e009883a 	mov	r4,fp
100080c4:	8d002526 	beq	r17,r20,1000815c <_dtoa_r+0xf9c>
100080c8:	000925c0 	call	1000925c <__multadd>
100080cc:	a00b883a 	mov	r5,r20
100080d0:	000f883a 	mov	r7,zero
100080d4:	01800284 	movi	r6,10
100080d8:	e009883a 	mov	r4,fp
100080dc:	1023883a 	mov	r17,r2
100080e0:	000925c0 	call	1000925c <__multadd>
100080e4:	1029883a 	mov	r20,r2
100080e8:	b027883a 	mov	r19,r22
100080ec:	003fc006 	br	10007ff0 <__alt_data_end+0xf8007ff0>
100080f0:	9011883a 	mov	r8,r18
100080f4:	00800e0e 	bge	zero,r2,10008130 <_dtoa_r+0xf70>
100080f8:	800b883a 	mov	r5,r16
100080fc:	01800044 	movi	r6,1
10008100:	e009883a 	mov	r4,fp
10008104:	da001715 	stw	r8,92(sp)
10008108:	00099c80 	call	100099c8 <__lshift>
1000810c:	a80b883a 	mov	r5,r21
10008110:	1009883a 	mov	r4,r2
10008114:	1021883a 	mov	r16,r2
10008118:	0009b100 	call	10009b10 <__mcmp>
1000811c:	da001717 	ldw	r8,92(sp)
10008120:	0081960e 	bge	zero,r2,1000877c <_dtoa_r+0x15bc>
10008124:	00800e44 	movi	r2,57
10008128:	40817026 	beq	r8,r2,100086ec <_dtoa_r+0x152c>
1000812c:	ba000c44 	addi	r8,r23,49
10008130:	8825883a 	mov	r18,r17
10008134:	9dc00044 	addi	r23,r19,1
10008138:	9a000005 	stb	r8,0(r19)
1000813c:	a023883a 	mov	r17,r20
10008140:	dc000915 	stw	r16,36(sp)
10008144:	003f2406 	br	10007dd8 <__alt_data_end+0xf8007dd8>
10008148:	00800e44 	movi	r2,57
1000814c:	9011883a 	mov	r8,r18
10008150:	90816626 	beq	r18,r2,100086ec <_dtoa_r+0x152c>
10008154:	05bff516 	blt	zero,r22,1000812c <__alt_data_end+0xf800812c>
10008158:	003ff506 	br	10008130 <__alt_data_end+0xf8008130>
1000815c:	000925c0 	call	1000925c <__multadd>
10008160:	1023883a 	mov	r17,r2
10008164:	1029883a 	mov	r20,r2
10008168:	003fdf06 	br	100080e8 <__alt_data_end+0xf80080e8>
1000816c:	e009883a 	mov	r4,fp
10008170:	00092340 	call	10009234 <_Bfree>
10008174:	00800044 	movi	r2,1
10008178:	003fbc06 	br	1000806c <__alt_data_end+0xf800806c>
1000817c:	a80b883a 	mov	r5,r21
10008180:	8009883a 	mov	r4,r16
10008184:	0009b100 	call	10009b10 <__mcmp>
10008188:	103edb0e 	bge	r2,zero,10007cf8 <__alt_data_end+0xf8007cf8>
1000818c:	800b883a 	mov	r5,r16
10008190:	000f883a 	mov	r7,zero
10008194:	01800284 	movi	r6,10
10008198:	e009883a 	mov	r4,fp
1000819c:	000925c0 	call	1000925c <__multadd>
100081a0:	1021883a 	mov	r16,r2
100081a4:	d8800517 	ldw	r2,20(sp)
100081a8:	d8c00b17 	ldw	r3,44(sp)
100081ac:	10bfffc4 	addi	r2,r2,-1
100081b0:	d8800515 	stw	r2,20(sp)
100081b4:	183f761e 	bne	r3,zero,10007f90 <__alt_data_end+0xf8007f90>
100081b8:	d9000c17 	ldw	r4,48(sp)
100081bc:	0101730e 	bge	zero,r4,1000878c <_dtoa_r+0x15cc>
100081c0:	d9000615 	stw	r4,24(sp)
100081c4:	003ed006 	br	10007d08 <__alt_data_end+0xf8007d08>
100081c8:	00800084 	movi	r2,2
100081cc:	3081861e 	bne	r6,r2,100087e8 <_dtoa_r+0x1628>
100081d0:	d8000b15 	stw	zero,44(sp)
100081d4:	003f3c06 	br	10007ec8 <__alt_data_end+0xf8007ec8>
100081d8:	dc000917 	ldw	r16,36(sp)
100081dc:	003e9206 	br	10007c28 <__alt_data_end+0xf8007c28>
100081e0:	d9c00317 	ldw	r7,12(sp)
100081e4:	00800084 	movi	r2,2
100081e8:	11fec50e 	bge	r2,r7,10007d00 <__alt_data_end+0xf8007d00>
100081ec:	d9000617 	ldw	r4,24(sp)
100081f0:	20013c1e 	bne	r4,zero,100086e4 <_dtoa_r+0x1524>
100081f4:	a80b883a 	mov	r5,r21
100081f8:	000f883a 	mov	r7,zero
100081fc:	01800144 	movi	r6,5
10008200:	e009883a 	mov	r4,fp
10008204:	000925c0 	call	1000925c <__multadd>
10008208:	100b883a 	mov	r5,r2
1000820c:	8009883a 	mov	r4,r16
10008210:	102b883a 	mov	r21,r2
10008214:	0009b100 	call	10009b10 <__mcmp>
10008218:	dc000915 	stw	r16,36(sp)
1000821c:	00bf410e 	bge	zero,r2,10007f24 <__alt_data_end+0xf8007f24>
10008220:	d9c00717 	ldw	r7,28(sp)
10008224:	00800c44 	movi	r2,49
10008228:	38800005 	stb	r2,0(r7)
1000822c:	d8800517 	ldw	r2,20(sp)
10008230:	3dc00044 	addi	r23,r7,1
10008234:	10800044 	addi	r2,r2,1
10008238:	d8800515 	stw	r2,20(sp)
1000823c:	003f3d06 	br	10007f34 <__alt_data_end+0xf8007f34>
10008240:	d9800517 	ldw	r6,20(sp)
10008244:	d9c00717 	ldw	r7,28(sp)
10008248:	00800c44 	movi	r2,49
1000824c:	31800044 	addi	r6,r6,1
10008250:	d9800515 	stw	r6,20(sp)
10008254:	38800005 	stb	r2,0(r7)
10008258:	003edf06 	br	10007dd8 <__alt_data_end+0xf8007dd8>
1000825c:	d8000b15 	stw	zero,44(sp)
10008260:	003c9f06 	br	100074e0 <__alt_data_end+0xf80074e0>
10008264:	903e7e1e 	bne	r18,zero,10007c60 <__alt_data_end+0xf8007c60>
10008268:	00800434 	movhi	r2,16
1000826c:	10bfffc4 	addi	r2,r2,-1
10008270:	9884703a 	and	r2,r19,r2
10008274:	1000ea1e 	bne	r2,zero,10008620 <_dtoa_r+0x1460>
10008278:	9cdffc2c 	andhi	r19,r19,32752
1000827c:	9800e826 	beq	r19,zero,10008620 <_dtoa_r+0x1460>
10008280:	d9c00817 	ldw	r7,32(sp)
10008284:	b5800044 	addi	r22,r22,1
10008288:	04c00044 	movi	r19,1
1000828c:	39c00044 	addi	r7,r7,1
10008290:	d9c00815 	stw	r7,32(sp)
10008294:	d8800d17 	ldw	r2,52(sp)
10008298:	103e721e 	bne	r2,zero,10007c64 <__alt_data_end+0xf8007c64>
1000829c:	00800044 	movi	r2,1
100082a0:	003e7906 	br	10007c88 <__alt_data_end+0xf8007c88>
100082a4:	8009883a 	mov	r4,r16
100082a8:	000f7f80 	call	1000f7f8 <__floatsidf>
100082ac:	d9800f17 	ldw	r6,60(sp)
100082b0:	d9c01017 	ldw	r7,64(sp)
100082b4:	1009883a 	mov	r4,r2
100082b8:	180b883a 	mov	r5,r3
100082bc:	000e6100 	call	1000e610 <__muldf3>
100082c0:	000d883a 	mov	r6,zero
100082c4:	01d00734 	movhi	r7,16412
100082c8:	1009883a 	mov	r4,r2
100082cc:	180b883a 	mov	r5,r3
100082d0:	000d13c0 	call	1000d13c <__adddf3>
100082d4:	047f3034 	movhi	r17,64704
100082d8:	1021883a 	mov	r16,r2
100082dc:	1c63883a 	add	r17,r3,r17
100082e0:	d9000f17 	ldw	r4,60(sp)
100082e4:	d9401017 	ldw	r5,64(sp)
100082e8:	000d883a 	mov	r6,zero
100082ec:	01d00534 	movhi	r7,16404
100082f0:	000ee7c0 	call	1000ee7c <__subdf3>
100082f4:	800d883a 	mov	r6,r16
100082f8:	880f883a 	mov	r7,r17
100082fc:	1009883a 	mov	r4,r2
10008300:	180b883a 	mov	r5,r3
10008304:	102b883a 	mov	r21,r2
10008308:	1829883a 	mov	r20,r3
1000830c:	000e4400 	call	1000e440 <__gedf2>
10008310:	00806c16 	blt	zero,r2,100084c4 <_dtoa_r+0x1304>
10008314:	89e0003c 	xorhi	r7,r17,32768
10008318:	800d883a 	mov	r6,r16
1000831c:	a809883a 	mov	r4,r21
10008320:	a00b883a 	mov	r5,r20
10008324:	000e51c0 	call	1000e51c <__ledf2>
10008328:	103d7e0e 	bge	r2,zero,10007924 <__alt_data_end+0xf8007924>
1000832c:	002b883a 	mov	r21,zero
10008330:	0023883a 	mov	r17,zero
10008334:	003efb06 	br	10007f24 <__alt_data_end+0xf8007f24>
10008338:	d8800717 	ldw	r2,28(sp)
1000833c:	003bd006 	br	10007280 <__alt_data_end+0xf8007280>
10008340:	d9000a17 	ldw	r4,40(sp)
10008344:	d9800d17 	ldw	r6,52(sp)
10008348:	dd400a15 	stw	r21,40(sp)
1000834c:	a905c83a 	sub	r2,r21,r4
10008350:	308d883a 	add	r6,r6,r2
10008354:	d9800d15 	stw	r6,52(sp)
10008358:	002b883a 	mov	r21,zero
1000835c:	003e0606 	br	10007b78 <__alt_data_end+0xf8007b78>
10008360:	9023883a 	mov	r17,r18
10008364:	9829883a 	mov	r20,r19
10008368:	04000084 	movi	r16,2
1000836c:	003c9206 	br	100075b8 <__alt_data_end+0xf80075b8>
10008370:	04000044 	movi	r16,1
10008374:	dc000c15 	stw	r16,48(sp)
10008378:	dc000615 	stw	r16,24(sp)
1000837c:	dc002215 	stw	r16,136(sp)
10008380:	e0001115 	stw	zero,68(fp)
10008384:	000b883a 	mov	r5,zero
10008388:	003c6906 	br	10007530 <__alt_data_end+0xf8007530>
1000838c:	3021883a 	mov	r16,r6
10008390:	003ffb06 	br	10008380 <__alt_data_end+0xf8008380>
10008394:	1000021e 	bne	r2,zero,100083a0 <_dtoa_r+0x11e0>
10008398:	4200004c 	andi	r8,r8,1
1000839c:	403e7d1e 	bne	r8,zero,10007d94 <__alt_data_end+0xf8007d94>
100083a0:	01000c04 	movi	r4,48
100083a4:	00000106 	br	100083ac <_dtoa_r+0x11ec>
100083a8:	102f883a 	mov	r23,r2
100083ac:	b8bfffc4 	addi	r2,r23,-1
100083b0:	10c00007 	ldb	r3,0(r2)
100083b4:	193ffc26 	beq	r3,r4,100083a8 <__alt_data_end+0xf80083a8>
100083b8:	003e8706 	br	10007dd8 <__alt_data_end+0xf8007dd8>
100083bc:	d8800517 	ldw	r2,20(sp)
100083c0:	00a3c83a 	sub	r17,zero,r2
100083c4:	8800a426 	beq	r17,zero,10008658 <_dtoa_r+0x1498>
100083c8:	888003cc 	andi	r2,r17,15
100083cc:	100490fa 	slli	r2,r2,3
100083d0:	00c40074 	movhi	r3,4097
100083d4:	18c9db04 	addi	r3,r3,10092
100083d8:	1885883a 	add	r2,r3,r2
100083dc:	11800017 	ldw	r6,0(r2)
100083e0:	11c00117 	ldw	r7,4(r2)
100083e4:	9009883a 	mov	r4,r18
100083e8:	980b883a 	mov	r5,r19
100083ec:	8823d13a 	srai	r17,r17,4
100083f0:	000e6100 	call	1000e610 <__muldf3>
100083f4:	d8800f15 	stw	r2,60(sp)
100083f8:	d8c01015 	stw	r3,64(sp)
100083fc:	8800e826 	beq	r17,zero,100087a0 <_dtoa_r+0x15e0>
10008400:	05040074 	movhi	r20,4097
10008404:	a509d104 	addi	r20,r20,10052
10008408:	04000084 	movi	r16,2
1000840c:	8980004c 	andi	r6,r17,1
10008410:	1009883a 	mov	r4,r2
10008414:	8823d07a 	srai	r17,r17,1
10008418:	180b883a 	mov	r5,r3
1000841c:	30000426 	beq	r6,zero,10008430 <_dtoa_r+0x1270>
10008420:	a1800017 	ldw	r6,0(r20)
10008424:	a1c00117 	ldw	r7,4(r20)
10008428:	84000044 	addi	r16,r16,1
1000842c:	000e6100 	call	1000e610 <__muldf3>
10008430:	a5000204 	addi	r20,r20,8
10008434:	883ff51e 	bne	r17,zero,1000840c <__alt_data_end+0xf800840c>
10008438:	d8800f15 	stw	r2,60(sp)
1000843c:	d8c01015 	stw	r3,64(sp)
10008440:	003c7606 	br	1000761c <__alt_data_end+0xf800761c>
10008444:	00c00c04 	movi	r3,48
10008448:	10c00005 	stb	r3,0(r2)
1000844c:	d8c00517 	ldw	r3,20(sp)
10008450:	bd3fffc3 	ldbu	r20,-1(r23)
10008454:	18c00044 	addi	r3,r3,1
10008458:	d8c00515 	stw	r3,20(sp)
1000845c:	003db906 	br	10007b44 <__alt_data_end+0xf8007b44>
10008460:	89400117 	ldw	r5,4(r17)
10008464:	e009883a 	mov	r4,fp
10008468:	000918c0 	call	1000918c <_Balloc>
1000846c:	89800417 	ldw	r6,16(r17)
10008470:	89400304 	addi	r5,r17,12
10008474:	11000304 	addi	r4,r2,12
10008478:	31800084 	addi	r6,r6,2
1000847c:	318d883a 	add	r6,r6,r6
10008480:	318d883a 	add	r6,r6,r6
10008484:	1027883a 	mov	r19,r2
10008488:	0003a680 	call	10003a68 <memcpy>
1000848c:	01800044 	movi	r6,1
10008490:	980b883a 	mov	r5,r19
10008494:	e009883a 	mov	r4,fp
10008498:	00099c80 	call	100099c8 <__lshift>
1000849c:	1029883a 	mov	r20,r2
100084a0:	003ecc06 	br	10007fd4 <__alt_data_end+0xf8007fd4>
100084a4:	00800e44 	movi	r2,57
100084a8:	90809026 	beq	r18,r2,100086ec <_dtoa_r+0x152c>
100084ac:	92000044 	addi	r8,r18,1
100084b0:	003f1f06 	br	10008130 <__alt_data_end+0xf8008130>
100084b4:	9011883a 	mov	r8,r18
100084b8:	8825883a 	mov	r18,r17
100084bc:	a023883a 	mov	r17,r20
100084c0:	003e2906 	br	10007d68 <__alt_data_end+0xf8007d68>
100084c4:	002b883a 	mov	r21,zero
100084c8:	0023883a 	mov	r17,zero
100084cc:	003f5406 	br	10008220 <__alt_data_end+0xf8008220>
100084d0:	61bfffc4 	addi	r6,r12,-1
100084d4:	300490fa 	slli	r2,r6,3
100084d8:	00c40074 	movhi	r3,4097
100084dc:	18c9db04 	addi	r3,r3,10092
100084e0:	1885883a 	add	r2,r3,r2
100084e4:	11000017 	ldw	r4,0(r2)
100084e8:	11400117 	ldw	r5,4(r2)
100084ec:	d8800717 	ldw	r2,28(sp)
100084f0:	880f883a 	mov	r7,r17
100084f4:	d9801215 	stw	r6,72(sp)
100084f8:	800d883a 	mov	r6,r16
100084fc:	db001615 	stw	r12,88(sp)
10008500:	15c00044 	addi	r23,r2,1
10008504:	000e6100 	call	1000e610 <__muldf3>
10008508:	d9401017 	ldw	r5,64(sp)
1000850c:	d9000f17 	ldw	r4,60(sp)
10008510:	d8c01515 	stw	r3,84(sp)
10008514:	d8801415 	stw	r2,80(sp)
10008518:	000f7780 	call	1000f778 <__fixdfsi>
1000851c:	1009883a 	mov	r4,r2
10008520:	1021883a 	mov	r16,r2
10008524:	000f7f80 	call	1000f7f8 <__floatsidf>
10008528:	d9000f17 	ldw	r4,60(sp)
1000852c:	d9401017 	ldw	r5,64(sp)
10008530:	100d883a 	mov	r6,r2
10008534:	180f883a 	mov	r7,r3
10008538:	000ee7c0 	call	1000ee7c <__subdf3>
1000853c:	1829883a 	mov	r20,r3
10008540:	d8c00717 	ldw	r3,28(sp)
10008544:	84000c04 	addi	r16,r16,48
10008548:	1023883a 	mov	r17,r2
1000854c:	1c000005 	stb	r16,0(r3)
10008550:	db001617 	ldw	r12,88(sp)
10008554:	00800044 	movi	r2,1
10008558:	60802226 	beq	r12,r2,100085e4 <_dtoa_r+0x1424>
1000855c:	d9c00717 	ldw	r7,28(sp)
10008560:	8805883a 	mov	r2,r17
10008564:	b82b883a 	mov	r21,r23
10008568:	3b19883a 	add	r12,r7,r12
1000856c:	6023883a 	mov	r17,r12
10008570:	a007883a 	mov	r3,r20
10008574:	dc800f15 	stw	r18,60(sp)
10008578:	000d883a 	mov	r6,zero
1000857c:	01d00934 	movhi	r7,16420
10008580:	1009883a 	mov	r4,r2
10008584:	180b883a 	mov	r5,r3
10008588:	000e6100 	call	1000e610 <__muldf3>
1000858c:	180b883a 	mov	r5,r3
10008590:	1009883a 	mov	r4,r2
10008594:	1829883a 	mov	r20,r3
10008598:	1025883a 	mov	r18,r2
1000859c:	000f7780 	call	1000f778 <__fixdfsi>
100085a0:	1009883a 	mov	r4,r2
100085a4:	1021883a 	mov	r16,r2
100085a8:	000f7f80 	call	1000f7f8 <__floatsidf>
100085ac:	100d883a 	mov	r6,r2
100085b0:	180f883a 	mov	r7,r3
100085b4:	9009883a 	mov	r4,r18
100085b8:	a00b883a 	mov	r5,r20
100085bc:	84000c04 	addi	r16,r16,48
100085c0:	000ee7c0 	call	1000ee7c <__subdf3>
100085c4:	ad400044 	addi	r21,r21,1
100085c8:	ac3fffc5 	stb	r16,-1(r21)
100085cc:	ac7fea1e 	bne	r21,r17,10008578 <__alt_data_end+0xf8008578>
100085d0:	1023883a 	mov	r17,r2
100085d4:	d8801217 	ldw	r2,72(sp)
100085d8:	dc800f17 	ldw	r18,60(sp)
100085dc:	1829883a 	mov	r20,r3
100085e0:	b8af883a 	add	r23,r23,r2
100085e4:	d9001417 	ldw	r4,80(sp)
100085e8:	d9401517 	ldw	r5,84(sp)
100085ec:	000d883a 	mov	r6,zero
100085f0:	01cff834 	movhi	r7,16352
100085f4:	000d13c0 	call	1000d13c <__adddf3>
100085f8:	880d883a 	mov	r6,r17
100085fc:	a00f883a 	mov	r7,r20
10008600:	1009883a 	mov	r4,r2
10008604:	180b883a 	mov	r5,r3
10008608:	000e51c0 	call	1000e51c <__ledf2>
1000860c:	10003e0e 	bge	r2,zero,10008708 <_dtoa_r+0x1548>
10008610:	d9001317 	ldw	r4,76(sp)
10008614:	bd3fffc3 	ldbu	r20,-1(r23)
10008618:	d9000515 	stw	r4,20(sp)
1000861c:	003d3b06 	br	10007b0c <__alt_data_end+0xf8007b0c>
10008620:	0027883a 	mov	r19,zero
10008624:	003f1b06 	br	10008294 <__alt_data_end+0xf8008294>
10008628:	d8800817 	ldw	r2,32(sp)
1000862c:	11e9c83a 	sub	r20,r2,r7
10008630:	0005883a 	mov	r2,zero
10008634:	003d5406 	br	10007b88 <__alt_data_end+0xf8007b88>
10008638:	00800044 	movi	r2,1
1000863c:	003dc706 	br	10007d5c <__alt_data_end+0xf8007d5c>
10008640:	d8c00217 	ldw	r3,8(sp)
10008644:	00800d84 	movi	r2,54
10008648:	dd400a17 	ldw	r21,40(sp)
1000864c:	10c5c83a 	sub	r2,r2,r3
10008650:	dd000817 	ldw	r20,32(sp)
10008654:	003d4c06 	br	10007b88 <__alt_data_end+0xf8007b88>
10008658:	dc800f15 	stw	r18,60(sp)
1000865c:	dcc01015 	stw	r19,64(sp)
10008660:	04000084 	movi	r16,2
10008664:	003bed06 	br	1000761c <__alt_data_end+0xf800761c>
10008668:	d9000617 	ldw	r4,24(sp)
1000866c:	203f0d26 	beq	r4,zero,100082a4 <__alt_data_end+0xf80082a4>
10008670:	d9800c17 	ldw	r6,48(sp)
10008674:	01bcab0e 	bge	zero,r6,10007924 <__alt_data_end+0xf8007924>
10008678:	d9401017 	ldw	r5,64(sp)
1000867c:	d9000f17 	ldw	r4,60(sp)
10008680:	000d883a 	mov	r6,zero
10008684:	01d00934 	movhi	r7,16420
10008688:	000e6100 	call	1000e610 <__muldf3>
1000868c:	81000044 	addi	r4,r16,1
10008690:	d8800f15 	stw	r2,60(sp)
10008694:	d8c01015 	stw	r3,64(sp)
10008698:	000f7f80 	call	1000f7f8 <__floatsidf>
1000869c:	d9800f17 	ldw	r6,60(sp)
100086a0:	d9c01017 	ldw	r7,64(sp)
100086a4:	1009883a 	mov	r4,r2
100086a8:	180b883a 	mov	r5,r3
100086ac:	000e6100 	call	1000e610 <__muldf3>
100086b0:	01d00734 	movhi	r7,16412
100086b4:	000d883a 	mov	r6,zero
100086b8:	1009883a 	mov	r4,r2
100086bc:	180b883a 	mov	r5,r3
100086c0:	000d13c0 	call	1000d13c <__adddf3>
100086c4:	d9c00517 	ldw	r7,20(sp)
100086c8:	047f3034 	movhi	r17,64704
100086cc:	1021883a 	mov	r16,r2
100086d0:	39ffffc4 	addi	r7,r7,-1
100086d4:	d9c01315 	stw	r7,76(sp)
100086d8:	1c63883a 	add	r17,r3,r17
100086dc:	db000c17 	ldw	r12,48(sp)
100086e0:	003bea06 	br	1000768c <__alt_data_end+0xf800768c>
100086e4:	dc000915 	stw	r16,36(sp)
100086e8:	003e0e06 	br	10007f24 <__alt_data_end+0xf8007f24>
100086ec:	01000e44 	movi	r4,57
100086f0:	8825883a 	mov	r18,r17
100086f4:	9dc00044 	addi	r23,r19,1
100086f8:	99000005 	stb	r4,0(r19)
100086fc:	a023883a 	mov	r17,r20
10008700:	dc000915 	stw	r16,36(sp)
10008704:	003da406 	br	10007d98 <__alt_data_end+0xf8007d98>
10008708:	d9801417 	ldw	r6,80(sp)
1000870c:	d9c01517 	ldw	r7,84(sp)
10008710:	0009883a 	mov	r4,zero
10008714:	014ff834 	movhi	r5,16352
10008718:	000ee7c0 	call	1000ee7c <__subdf3>
1000871c:	880d883a 	mov	r6,r17
10008720:	a00f883a 	mov	r7,r20
10008724:	1009883a 	mov	r4,r2
10008728:	180b883a 	mov	r5,r3
1000872c:	000e4400 	call	1000e440 <__gedf2>
10008730:	00bc7c0e 	bge	zero,r2,10007924 <__alt_data_end+0xf8007924>
10008734:	01000c04 	movi	r4,48
10008738:	00000106 	br	10008740 <_dtoa_r+0x1580>
1000873c:	102f883a 	mov	r23,r2
10008740:	b8bfffc4 	addi	r2,r23,-1
10008744:	10c00007 	ldb	r3,0(r2)
10008748:	193ffc26 	beq	r3,r4,1000873c <__alt_data_end+0xf800873c>
1000874c:	d9801317 	ldw	r6,76(sp)
10008750:	d9800515 	stw	r6,20(sp)
10008754:	003c4406 	br	10007868 <__alt_data_end+0xf8007868>
10008758:	d9801317 	ldw	r6,76(sp)
1000875c:	d9800515 	stw	r6,20(sp)
10008760:	003cea06 	br	10007b0c <__alt_data_end+0xf8007b0c>
10008764:	dd800f17 	ldw	r22,60(sp)
10008768:	dcc01017 	ldw	r19,64(sp)
1000876c:	dc801217 	ldw	r18,72(sp)
10008770:	003c6c06 	br	10007924 <__alt_data_end+0xf8007924>
10008774:	903e031e 	bne	r18,zero,10007f84 <__alt_data_end+0xf8007f84>
10008778:	003ebb06 	br	10008268 <__alt_data_end+0xf8008268>
1000877c:	103e6c1e 	bne	r2,zero,10008130 <__alt_data_end+0xf8008130>
10008780:	4080004c 	andi	r2,r8,1
10008784:	103e6a26 	beq	r2,zero,10008130 <__alt_data_end+0xf8008130>
10008788:	003e6606 	br	10008124 <__alt_data_end+0xf8008124>
1000878c:	d8c00317 	ldw	r3,12(sp)
10008790:	00800084 	movi	r2,2
10008794:	10c02916 	blt	r2,r3,1000883c <_dtoa_r+0x167c>
10008798:	d9000c17 	ldw	r4,48(sp)
1000879c:	003e8806 	br	100081c0 <__alt_data_end+0xf80081c0>
100087a0:	04000084 	movi	r16,2
100087a4:	003b9d06 	br	1000761c <__alt_data_end+0xf800761c>
100087a8:	d9001317 	ldw	r4,76(sp)
100087ac:	d9000515 	stw	r4,20(sp)
100087b0:	003cd606 	br	10007b0c <__alt_data_end+0xf8007b0c>
100087b4:	d8801317 	ldw	r2,76(sp)
100087b8:	d8800515 	stw	r2,20(sp)
100087bc:	003c2a06 	br	10007868 <__alt_data_end+0xf8007868>
100087c0:	d9800317 	ldw	r6,12(sp)
100087c4:	00800084 	movi	r2,2
100087c8:	11801516 	blt	r2,r6,10008820 <_dtoa_r+0x1660>
100087cc:	d9c00c17 	ldw	r7,48(sp)
100087d0:	d9c00615 	stw	r7,24(sp)
100087d4:	003df706 	br	10007fb4 <__alt_data_end+0xf8007fb4>
100087d8:	193d3926 	beq	r3,r4,10007cc0 <__alt_data_end+0xf8007cc0>
100087dc:	00c00f04 	movi	r3,60
100087e0:	1885c83a 	sub	r2,r3,r2
100087e4:	003ddf06 	br	10007f64 <__alt_data_end+0xf8007f64>
100087e8:	e009883a 	mov	r4,fp
100087ec:	e0001115 	stw	zero,68(fp)
100087f0:	000b883a 	mov	r5,zero
100087f4:	000918c0 	call	1000918c <_Balloc>
100087f8:	d8800715 	stw	r2,28(sp)
100087fc:	d8c00717 	ldw	r3,28(sp)
10008800:	00bfffc4 	movi	r2,-1
10008804:	01000044 	movi	r4,1
10008808:	d8800c15 	stw	r2,48(sp)
1000880c:	e0c01015 	stw	r3,64(fp)
10008810:	d9000b15 	stw	r4,44(sp)
10008814:	d8800615 	stw	r2,24(sp)
10008818:	d8002215 	stw	zero,136(sp)
1000881c:	003c4106 	br	10007924 <__alt_data_end+0xf8007924>
10008820:	d8c00c17 	ldw	r3,48(sp)
10008824:	d8c00615 	stw	r3,24(sp)
10008828:	003e7006 	br	100081ec <__alt_data_end+0xf80081ec>
1000882c:	04400044 	movi	r17,1
10008830:	003b2006 	br	100074b4 <__alt_data_end+0xf80074b4>
10008834:	000b883a 	mov	r5,zero
10008838:	003b3d06 	br	10007530 <__alt_data_end+0xf8007530>
1000883c:	d8800c17 	ldw	r2,48(sp)
10008840:	d8800615 	stw	r2,24(sp)
10008844:	003e6906 	br	100081ec <__alt_data_end+0xf80081ec>

10008848 <__sflags>:
10008848:	28800007 	ldb	r2,0(r5)
1000884c:	00c01c84 	movi	r3,114
10008850:	10c02426 	beq	r2,r3,100088e4 <__sflags+0x9c>
10008854:	00c01dc4 	movi	r3,119
10008858:	10c01e26 	beq	r2,r3,100088d4 <__sflags+0x8c>
1000885c:	00c01844 	movi	r3,97
10008860:	10c00426 	beq	r2,r3,10008874 <__sflags+0x2c>
10008864:	00800584 	movi	r2,22
10008868:	20800015 	stw	r2,0(r4)
1000886c:	0005883a 	mov	r2,zero
10008870:	f800283a 	ret
10008874:	02c08204 	movi	r11,520
10008878:	01000044 	movi	r4,1
1000887c:	00804204 	movi	r2,264
10008880:	01c00ac4 	movi	r7,43
10008884:	02bff8c4 	movi	r10,-29
10008888:	027fff04 	movi	r9,-4
1000888c:	02001e04 	movi	r8,120
10008890:	29400044 	addi	r5,r5,1
10008894:	28c00007 	ldb	r3,0(r5)
10008898:	18000626 	beq	r3,zero,100088b4 <__sflags+0x6c>
1000889c:	19c00826 	beq	r3,r7,100088c0 <__sflags+0x78>
100088a0:	1a3ffb1e 	bne	r3,r8,10008890 <__alt_data_end+0xf8008890>
100088a4:	29400044 	addi	r5,r5,1
100088a8:	28c00007 	ldb	r3,0(r5)
100088ac:	21020014 	ori	r4,r4,2048
100088b0:	183ffa1e 	bne	r3,zero,1000889c <__alt_data_end+0xf800889c>
100088b4:	22c8b03a 	or	r4,r4,r11
100088b8:	31000015 	stw	r4,0(r6)
100088bc:	f800283a 	ret
100088c0:	1284703a 	and	r2,r2,r10
100088c4:	2248703a 	and	r4,r4,r9
100088c8:	10800414 	ori	r2,r2,16
100088cc:	21000094 	ori	r4,r4,2
100088d0:	003fef06 	br	10008890 <__alt_data_end+0xf8008890>
100088d4:	02c18004 	movi	r11,1536
100088d8:	01000044 	movi	r4,1
100088dc:	00800204 	movi	r2,8
100088e0:	003fe706 	br	10008880 <__alt_data_end+0xf8008880>
100088e4:	0017883a 	mov	r11,zero
100088e8:	0009883a 	mov	r4,zero
100088ec:	00800104 	movi	r2,4
100088f0:	003fe306 	br	10008880 <__alt_data_end+0xf8008880>

100088f4 <__sfvwrite_r>:
100088f4:	30800217 	ldw	r2,8(r6)
100088f8:	10006726 	beq	r2,zero,10008a98 <__sfvwrite_r+0x1a4>
100088fc:	28c0030b 	ldhu	r3,12(r5)
10008900:	defff404 	addi	sp,sp,-48
10008904:	dd400715 	stw	r21,28(sp)
10008908:	dd000615 	stw	r20,24(sp)
1000890c:	dc000215 	stw	r16,8(sp)
10008910:	dfc00b15 	stw	ra,44(sp)
10008914:	df000a15 	stw	fp,40(sp)
10008918:	ddc00915 	stw	r23,36(sp)
1000891c:	dd800815 	stw	r22,32(sp)
10008920:	dcc00515 	stw	r19,20(sp)
10008924:	dc800415 	stw	r18,16(sp)
10008928:	dc400315 	stw	r17,12(sp)
1000892c:	1880020c 	andi	r2,r3,8
10008930:	2821883a 	mov	r16,r5
10008934:	202b883a 	mov	r21,r4
10008938:	3029883a 	mov	r20,r6
1000893c:	10002726 	beq	r2,zero,100089dc <__sfvwrite_r+0xe8>
10008940:	28800417 	ldw	r2,16(r5)
10008944:	10002526 	beq	r2,zero,100089dc <__sfvwrite_r+0xe8>
10008948:	1880008c 	andi	r2,r3,2
1000894c:	a4400017 	ldw	r17,0(r20)
10008950:	10002a26 	beq	r2,zero,100089fc <__sfvwrite_r+0x108>
10008954:	05a00034 	movhi	r22,32768
10008958:	0027883a 	mov	r19,zero
1000895c:	0025883a 	mov	r18,zero
10008960:	b5bf0004 	addi	r22,r22,-1024
10008964:	980d883a 	mov	r6,r19
10008968:	a809883a 	mov	r4,r21
1000896c:	90004626 	beq	r18,zero,10008a88 <__sfvwrite_r+0x194>
10008970:	900f883a 	mov	r7,r18
10008974:	b480022e 	bgeu	r22,r18,10008980 <__sfvwrite_r+0x8c>
10008978:	01e00034 	movhi	r7,32768
1000897c:	39ff0004 	addi	r7,r7,-1024
10008980:	80800917 	ldw	r2,36(r16)
10008984:	81400717 	ldw	r5,28(r16)
10008988:	103ee83a 	callr	r2
1000898c:	00805a0e 	bge	zero,r2,10008af8 <__sfvwrite_r+0x204>
10008990:	a0c00217 	ldw	r3,8(r20)
10008994:	98a7883a 	add	r19,r19,r2
10008998:	90a5c83a 	sub	r18,r18,r2
1000899c:	1885c83a 	sub	r2,r3,r2
100089a0:	a0800215 	stw	r2,8(r20)
100089a4:	103fef1e 	bne	r2,zero,10008964 <__alt_data_end+0xf8008964>
100089a8:	0005883a 	mov	r2,zero
100089ac:	dfc00b17 	ldw	ra,44(sp)
100089b0:	df000a17 	ldw	fp,40(sp)
100089b4:	ddc00917 	ldw	r23,36(sp)
100089b8:	dd800817 	ldw	r22,32(sp)
100089bc:	dd400717 	ldw	r21,28(sp)
100089c0:	dd000617 	ldw	r20,24(sp)
100089c4:	dcc00517 	ldw	r19,20(sp)
100089c8:	dc800417 	ldw	r18,16(sp)
100089cc:	dc400317 	ldw	r17,12(sp)
100089d0:	dc000217 	ldw	r16,8(sp)
100089d4:	dec00c04 	addi	sp,sp,48
100089d8:	f800283a 	ret
100089dc:	800b883a 	mov	r5,r16
100089e0:	a809883a 	mov	r4,r21
100089e4:	0006c580 	call	10006c58 <__swsetup_r>
100089e8:	1000ee1e 	bne	r2,zero,10008da4 <__sfvwrite_r+0x4b0>
100089ec:	80c0030b 	ldhu	r3,12(r16)
100089f0:	a4400017 	ldw	r17,0(r20)
100089f4:	1880008c 	andi	r2,r3,2
100089f8:	103fd61e 	bne	r2,zero,10008954 <__alt_data_end+0xf8008954>
100089fc:	1880004c 	andi	r2,r3,1
10008a00:	1000421e 	bne	r2,zero,10008b0c <__sfvwrite_r+0x218>
10008a04:	0039883a 	mov	fp,zero
10008a08:	0025883a 	mov	r18,zero
10008a0c:	90001a26 	beq	r18,zero,10008a78 <__sfvwrite_r+0x184>
10008a10:	1880800c 	andi	r2,r3,512
10008a14:	84c00217 	ldw	r19,8(r16)
10008a18:	10002126 	beq	r2,zero,10008aa0 <__sfvwrite_r+0x1ac>
10008a1c:	982f883a 	mov	r23,r19
10008a20:	94c09636 	bltu	r18,r19,10008c7c <__sfvwrite_r+0x388>
10008a24:	1881200c 	andi	r2,r3,1152
10008a28:	1000a11e 	bne	r2,zero,10008cb0 <__sfvwrite_r+0x3bc>
10008a2c:	81000017 	ldw	r4,0(r16)
10008a30:	b80d883a 	mov	r6,r23
10008a34:	e00b883a 	mov	r5,fp
10008a38:	00090300 	call	10009030 <memmove>
10008a3c:	80c00217 	ldw	r3,8(r16)
10008a40:	81000017 	ldw	r4,0(r16)
10008a44:	9005883a 	mov	r2,r18
10008a48:	1ce7c83a 	sub	r19,r3,r19
10008a4c:	25cf883a 	add	r7,r4,r23
10008a50:	84c00215 	stw	r19,8(r16)
10008a54:	81c00015 	stw	r7,0(r16)
10008a58:	a0c00217 	ldw	r3,8(r20)
10008a5c:	e0b9883a 	add	fp,fp,r2
10008a60:	90a5c83a 	sub	r18,r18,r2
10008a64:	18a7c83a 	sub	r19,r3,r2
10008a68:	a4c00215 	stw	r19,8(r20)
10008a6c:	983fce26 	beq	r19,zero,100089a8 <__alt_data_end+0xf80089a8>
10008a70:	80c0030b 	ldhu	r3,12(r16)
10008a74:	903fe61e 	bne	r18,zero,10008a10 <__alt_data_end+0xf8008a10>
10008a78:	8f000017 	ldw	fp,0(r17)
10008a7c:	8c800117 	ldw	r18,4(r17)
10008a80:	8c400204 	addi	r17,r17,8
10008a84:	003fe106 	br	10008a0c <__alt_data_end+0xf8008a0c>
10008a88:	8cc00017 	ldw	r19,0(r17)
10008a8c:	8c800117 	ldw	r18,4(r17)
10008a90:	8c400204 	addi	r17,r17,8
10008a94:	003fb306 	br	10008964 <__alt_data_end+0xf8008964>
10008a98:	0005883a 	mov	r2,zero
10008a9c:	f800283a 	ret
10008aa0:	81000017 	ldw	r4,0(r16)
10008aa4:	80800417 	ldw	r2,16(r16)
10008aa8:	11005a36 	bltu	r2,r4,10008c14 <__sfvwrite_r+0x320>
10008aac:	85c00517 	ldw	r23,20(r16)
10008ab0:	95c05836 	bltu	r18,r23,10008c14 <__sfvwrite_r+0x320>
10008ab4:	00a00034 	movhi	r2,32768
10008ab8:	10bfffc4 	addi	r2,r2,-1
10008abc:	9009883a 	mov	r4,r18
10008ac0:	1480012e 	bgeu	r2,r18,10008ac8 <__sfvwrite_r+0x1d4>
10008ac4:	1009883a 	mov	r4,r2
10008ac8:	b80b883a 	mov	r5,r23
10008acc:	00015a80 	call	100015a8 <__divsi3>
10008ad0:	b80b883a 	mov	r5,r23
10008ad4:	1009883a 	mov	r4,r2
10008ad8:	000175c0 	call	1000175c <__mulsi3>
10008adc:	81400717 	ldw	r5,28(r16)
10008ae0:	80c00917 	ldw	r3,36(r16)
10008ae4:	100f883a 	mov	r7,r2
10008ae8:	e00d883a 	mov	r6,fp
10008aec:	a809883a 	mov	r4,r21
10008af0:	183ee83a 	callr	r3
10008af4:	00bfd816 	blt	zero,r2,10008a58 <__alt_data_end+0xf8008a58>
10008af8:	8080030b 	ldhu	r2,12(r16)
10008afc:	10801014 	ori	r2,r2,64
10008b00:	8080030d 	sth	r2,12(r16)
10008b04:	00bfffc4 	movi	r2,-1
10008b08:	003fa806 	br	100089ac <__alt_data_end+0xf80089ac>
10008b0c:	0027883a 	mov	r19,zero
10008b10:	0011883a 	mov	r8,zero
10008b14:	0039883a 	mov	fp,zero
10008b18:	0025883a 	mov	r18,zero
10008b1c:	90001f26 	beq	r18,zero,10008b9c <__sfvwrite_r+0x2a8>
10008b20:	40005a26 	beq	r8,zero,10008c8c <__sfvwrite_r+0x398>
10008b24:	982d883a 	mov	r22,r19
10008b28:	94c0012e 	bgeu	r18,r19,10008b30 <__sfvwrite_r+0x23c>
10008b2c:	902d883a 	mov	r22,r18
10008b30:	81000017 	ldw	r4,0(r16)
10008b34:	80800417 	ldw	r2,16(r16)
10008b38:	b02f883a 	mov	r23,r22
10008b3c:	81c00517 	ldw	r7,20(r16)
10008b40:	1100032e 	bgeu	r2,r4,10008b50 <__sfvwrite_r+0x25c>
10008b44:	80c00217 	ldw	r3,8(r16)
10008b48:	38c7883a 	add	r3,r7,r3
10008b4c:	1d801816 	blt	r3,r22,10008bb0 <__sfvwrite_r+0x2bc>
10008b50:	b1c03e16 	blt	r22,r7,10008c4c <__sfvwrite_r+0x358>
10008b54:	80800917 	ldw	r2,36(r16)
10008b58:	81400717 	ldw	r5,28(r16)
10008b5c:	e00d883a 	mov	r6,fp
10008b60:	da000115 	stw	r8,4(sp)
10008b64:	a809883a 	mov	r4,r21
10008b68:	103ee83a 	callr	r2
10008b6c:	102f883a 	mov	r23,r2
10008b70:	da000117 	ldw	r8,4(sp)
10008b74:	00bfe00e 	bge	zero,r2,10008af8 <__alt_data_end+0xf8008af8>
10008b78:	9de7c83a 	sub	r19,r19,r23
10008b7c:	98001f26 	beq	r19,zero,10008bfc <__sfvwrite_r+0x308>
10008b80:	a0800217 	ldw	r2,8(r20)
10008b84:	e5f9883a 	add	fp,fp,r23
10008b88:	95e5c83a 	sub	r18,r18,r23
10008b8c:	15efc83a 	sub	r23,r2,r23
10008b90:	a5c00215 	stw	r23,8(r20)
10008b94:	b83f8426 	beq	r23,zero,100089a8 <__alt_data_end+0xf80089a8>
10008b98:	903fe11e 	bne	r18,zero,10008b20 <__alt_data_end+0xf8008b20>
10008b9c:	8f000017 	ldw	fp,0(r17)
10008ba0:	8c800117 	ldw	r18,4(r17)
10008ba4:	0011883a 	mov	r8,zero
10008ba8:	8c400204 	addi	r17,r17,8
10008bac:	003fdb06 	br	10008b1c <__alt_data_end+0xf8008b1c>
10008bb0:	180d883a 	mov	r6,r3
10008bb4:	e00b883a 	mov	r5,fp
10008bb8:	da000115 	stw	r8,4(sp)
10008bbc:	d8c00015 	stw	r3,0(sp)
10008bc0:	00090300 	call	10009030 <memmove>
10008bc4:	d8c00017 	ldw	r3,0(sp)
10008bc8:	80800017 	ldw	r2,0(r16)
10008bcc:	800b883a 	mov	r5,r16
10008bd0:	a809883a 	mov	r4,r21
10008bd4:	10c5883a 	add	r2,r2,r3
10008bd8:	80800015 	stw	r2,0(r16)
10008bdc:	d8c00015 	stw	r3,0(sp)
10008be0:	0001b580 	call	10001b58 <_fflush_r>
10008be4:	d8c00017 	ldw	r3,0(sp)
10008be8:	da000117 	ldw	r8,4(sp)
10008bec:	103fc21e 	bne	r2,zero,10008af8 <__alt_data_end+0xf8008af8>
10008bf0:	182f883a 	mov	r23,r3
10008bf4:	9de7c83a 	sub	r19,r19,r23
10008bf8:	983fe11e 	bne	r19,zero,10008b80 <__alt_data_end+0xf8008b80>
10008bfc:	800b883a 	mov	r5,r16
10008c00:	a809883a 	mov	r4,r21
10008c04:	0001b580 	call	10001b58 <_fflush_r>
10008c08:	103fbb1e 	bne	r2,zero,10008af8 <__alt_data_end+0xf8008af8>
10008c0c:	0011883a 	mov	r8,zero
10008c10:	003fdb06 	br	10008b80 <__alt_data_end+0xf8008b80>
10008c14:	94c0012e 	bgeu	r18,r19,10008c1c <__sfvwrite_r+0x328>
10008c18:	9027883a 	mov	r19,r18
10008c1c:	980d883a 	mov	r6,r19
10008c20:	e00b883a 	mov	r5,fp
10008c24:	00090300 	call	10009030 <memmove>
10008c28:	80800217 	ldw	r2,8(r16)
10008c2c:	80c00017 	ldw	r3,0(r16)
10008c30:	14c5c83a 	sub	r2,r2,r19
10008c34:	1cc7883a 	add	r3,r3,r19
10008c38:	80800215 	stw	r2,8(r16)
10008c3c:	80c00015 	stw	r3,0(r16)
10008c40:	10004326 	beq	r2,zero,10008d50 <__sfvwrite_r+0x45c>
10008c44:	9805883a 	mov	r2,r19
10008c48:	003f8306 	br	10008a58 <__alt_data_end+0xf8008a58>
10008c4c:	b00d883a 	mov	r6,r22
10008c50:	e00b883a 	mov	r5,fp
10008c54:	da000115 	stw	r8,4(sp)
10008c58:	00090300 	call	10009030 <memmove>
10008c5c:	80800217 	ldw	r2,8(r16)
10008c60:	80c00017 	ldw	r3,0(r16)
10008c64:	da000117 	ldw	r8,4(sp)
10008c68:	1585c83a 	sub	r2,r2,r22
10008c6c:	1dad883a 	add	r22,r3,r22
10008c70:	80800215 	stw	r2,8(r16)
10008c74:	85800015 	stw	r22,0(r16)
10008c78:	003fbf06 	br	10008b78 <__alt_data_end+0xf8008b78>
10008c7c:	81000017 	ldw	r4,0(r16)
10008c80:	9027883a 	mov	r19,r18
10008c84:	902f883a 	mov	r23,r18
10008c88:	003f6906 	br	10008a30 <__alt_data_end+0xf8008a30>
10008c8c:	900d883a 	mov	r6,r18
10008c90:	01400284 	movi	r5,10
10008c94:	e009883a 	mov	r4,fp
10008c98:	0008f4c0 	call	10008f4c <memchr>
10008c9c:	10003e26 	beq	r2,zero,10008d98 <__sfvwrite_r+0x4a4>
10008ca0:	10800044 	addi	r2,r2,1
10008ca4:	1727c83a 	sub	r19,r2,fp
10008ca8:	02000044 	movi	r8,1
10008cac:	003f9d06 	br	10008b24 <__alt_data_end+0xf8008b24>
10008cb0:	80800517 	ldw	r2,20(r16)
10008cb4:	81400417 	ldw	r5,16(r16)
10008cb8:	81c00017 	ldw	r7,0(r16)
10008cbc:	10a7883a 	add	r19,r2,r2
10008cc0:	9885883a 	add	r2,r19,r2
10008cc4:	1026d7fa 	srli	r19,r2,31
10008cc8:	396dc83a 	sub	r22,r7,r5
10008ccc:	b1000044 	addi	r4,r22,1
10008cd0:	9885883a 	add	r2,r19,r2
10008cd4:	1027d07a 	srai	r19,r2,1
10008cd8:	2485883a 	add	r2,r4,r18
10008cdc:	980d883a 	mov	r6,r19
10008ce0:	9880022e 	bgeu	r19,r2,10008cec <__sfvwrite_r+0x3f8>
10008ce4:	1027883a 	mov	r19,r2
10008ce8:	100d883a 	mov	r6,r2
10008cec:	18c1000c 	andi	r3,r3,1024
10008cf0:	18001c26 	beq	r3,zero,10008d64 <__sfvwrite_r+0x470>
10008cf4:	300b883a 	mov	r5,r6
10008cf8:	a809883a 	mov	r4,r21
10008cfc:	000325c0 	call	1000325c <_malloc_r>
10008d00:	102f883a 	mov	r23,r2
10008d04:	10002926 	beq	r2,zero,10008dac <__sfvwrite_r+0x4b8>
10008d08:	81400417 	ldw	r5,16(r16)
10008d0c:	b00d883a 	mov	r6,r22
10008d10:	1009883a 	mov	r4,r2
10008d14:	0003a680 	call	10003a68 <memcpy>
10008d18:	8080030b 	ldhu	r2,12(r16)
10008d1c:	00fedfc4 	movi	r3,-1153
10008d20:	10c4703a 	and	r2,r2,r3
10008d24:	10802014 	ori	r2,r2,128
10008d28:	8080030d 	sth	r2,12(r16)
10008d2c:	bd89883a 	add	r4,r23,r22
10008d30:	9d8fc83a 	sub	r7,r19,r22
10008d34:	85c00415 	stw	r23,16(r16)
10008d38:	84c00515 	stw	r19,20(r16)
10008d3c:	81000015 	stw	r4,0(r16)
10008d40:	9027883a 	mov	r19,r18
10008d44:	81c00215 	stw	r7,8(r16)
10008d48:	902f883a 	mov	r23,r18
10008d4c:	003f3806 	br	10008a30 <__alt_data_end+0xf8008a30>
10008d50:	800b883a 	mov	r5,r16
10008d54:	a809883a 	mov	r4,r21
10008d58:	0001b580 	call	10001b58 <_fflush_r>
10008d5c:	103fb926 	beq	r2,zero,10008c44 <__alt_data_end+0xf8008c44>
10008d60:	003f6506 	br	10008af8 <__alt_data_end+0xf8008af8>
10008d64:	a809883a 	mov	r4,r21
10008d68:	0003eb00 	call	10003eb0 <_realloc_r>
10008d6c:	102f883a 	mov	r23,r2
10008d70:	103fee1e 	bne	r2,zero,10008d2c <__alt_data_end+0xf8008d2c>
10008d74:	81400417 	ldw	r5,16(r16)
10008d78:	a809883a 	mov	r4,r21
10008d7c:	00024dc0 	call	100024dc <_free_r>
10008d80:	8080030b 	ldhu	r2,12(r16)
10008d84:	00ffdfc4 	movi	r3,-129
10008d88:	1884703a 	and	r2,r3,r2
10008d8c:	00c00304 	movi	r3,12
10008d90:	a8c00015 	stw	r3,0(r21)
10008d94:	003f5906 	br	10008afc <__alt_data_end+0xf8008afc>
10008d98:	94c00044 	addi	r19,r18,1
10008d9c:	02000044 	movi	r8,1
10008da0:	003f6006 	br	10008b24 <__alt_data_end+0xf8008b24>
10008da4:	00bfffc4 	movi	r2,-1
10008da8:	003f0006 	br	100089ac <__alt_data_end+0xf80089ac>
10008dac:	00800304 	movi	r2,12
10008db0:	a8800015 	stw	r2,0(r21)
10008db4:	8080030b 	ldhu	r2,12(r16)
10008db8:	003f5006 	br	10008afc <__alt_data_end+0xf8008afc>

10008dbc <_isatty_r>:
10008dbc:	defffd04 	addi	sp,sp,-12
10008dc0:	dc000015 	stw	r16,0(sp)
10008dc4:	04040074 	movhi	r16,4097
10008dc8:	dc400115 	stw	r17,4(sp)
10008dcc:	84187404 	addi	r16,r16,25040
10008dd0:	2023883a 	mov	r17,r4
10008dd4:	2809883a 	mov	r4,r5
10008dd8:	dfc00215 	stw	ra,8(sp)
10008ddc:	80000015 	stw	zero,0(r16)
10008de0:	000fca40 	call	1000fca4 <isatty>
10008de4:	00ffffc4 	movi	r3,-1
10008de8:	10c00526 	beq	r2,r3,10008e00 <_isatty_r+0x44>
10008dec:	dfc00217 	ldw	ra,8(sp)
10008df0:	dc400117 	ldw	r17,4(sp)
10008df4:	dc000017 	ldw	r16,0(sp)
10008df8:	dec00304 	addi	sp,sp,12
10008dfc:	f800283a 	ret
10008e00:	80c00017 	ldw	r3,0(r16)
10008e04:	183ff926 	beq	r3,zero,10008dec <__alt_data_end+0xf8008dec>
10008e08:	88c00015 	stw	r3,0(r17)
10008e0c:	003ff706 	br	10008dec <__alt_data_end+0xf8008dec>

10008e10 <_setlocale_r>:
10008e10:	30001b26 	beq	r6,zero,10008e80 <_setlocale_r+0x70>
10008e14:	01440074 	movhi	r5,4097
10008e18:	defffe04 	addi	sp,sp,-8
10008e1c:	2949c104 	addi	r5,r5,9988
10008e20:	3009883a 	mov	r4,r6
10008e24:	dc000015 	stw	r16,0(sp)
10008e28:	dfc00115 	stw	ra,4(sp)
10008e2c:	3021883a 	mov	r16,r6
10008e30:	000a7840 	call	1000a784 <strcmp>
10008e34:	1000061e 	bne	r2,zero,10008e50 <_setlocale_r+0x40>
10008e38:	00840074 	movhi	r2,4097
10008e3c:	1089a204 	addi	r2,r2,9864
10008e40:	dfc00117 	ldw	ra,4(sp)
10008e44:	dc000017 	ldw	r16,0(sp)
10008e48:	dec00204 	addi	sp,sp,8
10008e4c:	f800283a 	ret
10008e50:	01440074 	movhi	r5,4097
10008e54:	2949a204 	addi	r5,r5,9864
10008e58:	8009883a 	mov	r4,r16
10008e5c:	000a7840 	call	1000a784 <strcmp>
10008e60:	103ff526 	beq	r2,zero,10008e38 <__alt_data_end+0xf8008e38>
10008e64:	01440074 	movhi	r5,4097
10008e68:	29499504 	addi	r5,r5,9812
10008e6c:	8009883a 	mov	r4,r16
10008e70:	000a7840 	call	1000a784 <strcmp>
10008e74:	103ff026 	beq	r2,zero,10008e38 <__alt_data_end+0xf8008e38>
10008e78:	0005883a 	mov	r2,zero
10008e7c:	003ff006 	br	10008e40 <__alt_data_end+0xf8008e40>
10008e80:	00840074 	movhi	r2,4097
10008e84:	1089a204 	addi	r2,r2,9864
10008e88:	f800283a 	ret

10008e8c <__locale_charset>:
10008e8c:	00840074 	movhi	r2,4097
10008e90:	108ca104 	addi	r2,r2,12932
10008e94:	f800283a 	ret

10008e98 <__locale_mb_cur_max>:
10008e98:	00840074 	movhi	r2,4097
10008e9c:	10914e04 	addi	r2,r2,17720
10008ea0:	10800017 	ldw	r2,0(r2)
10008ea4:	f800283a 	ret

10008ea8 <__locale_msgcharset>:
10008ea8:	00840074 	movhi	r2,4097
10008eac:	108c9904 	addi	r2,r2,12900
10008eb0:	f800283a 	ret

10008eb4 <__locale_cjk_lang>:
10008eb4:	0005883a 	mov	r2,zero
10008eb8:	f800283a 	ret

10008ebc <_localeconv_r>:
10008ebc:	00840074 	movhi	r2,4097
10008ec0:	108ca904 	addi	r2,r2,12964
10008ec4:	f800283a 	ret

10008ec8 <setlocale>:
10008ec8:	00840074 	movhi	r2,4097
10008ecc:	10914b04 	addi	r2,r2,17708
10008ed0:	280d883a 	mov	r6,r5
10008ed4:	200b883a 	mov	r5,r4
10008ed8:	11000017 	ldw	r4,0(r2)
10008edc:	0008e101 	jmpi	10008e10 <_setlocale_r>

10008ee0 <localeconv>:
10008ee0:	00840074 	movhi	r2,4097
10008ee4:	108ca904 	addi	r2,r2,12964
10008ee8:	f800283a 	ret

10008eec <_lseek_r>:
10008eec:	defffd04 	addi	sp,sp,-12
10008ef0:	2805883a 	mov	r2,r5
10008ef4:	dc000015 	stw	r16,0(sp)
10008ef8:	04040074 	movhi	r16,4097
10008efc:	dc400115 	stw	r17,4(sp)
10008f00:	300b883a 	mov	r5,r6
10008f04:	84187404 	addi	r16,r16,25040
10008f08:	2023883a 	mov	r17,r4
10008f0c:	380d883a 	mov	r6,r7
10008f10:	1009883a 	mov	r4,r2
10008f14:	dfc00215 	stw	ra,8(sp)
10008f18:	80000015 	stw	zero,0(r16)
10008f1c:	000ffe40 	call	1000ffe4 <lseek>
10008f20:	00ffffc4 	movi	r3,-1
10008f24:	10c00526 	beq	r2,r3,10008f3c <_lseek_r+0x50>
10008f28:	dfc00217 	ldw	ra,8(sp)
10008f2c:	dc400117 	ldw	r17,4(sp)
10008f30:	dc000017 	ldw	r16,0(sp)
10008f34:	dec00304 	addi	sp,sp,12
10008f38:	f800283a 	ret
10008f3c:	80c00017 	ldw	r3,0(r16)
10008f40:	183ff926 	beq	r3,zero,10008f28 <__alt_data_end+0xf8008f28>
10008f44:	88c00015 	stw	r3,0(r17)
10008f48:	003ff706 	br	10008f28 <__alt_data_end+0xf8008f28>

10008f4c <memchr>:
10008f4c:	208000cc 	andi	r2,r4,3
10008f50:	280f883a 	mov	r7,r5
10008f54:	10003426 	beq	r2,zero,10009028 <memchr+0xdc>
10008f58:	30bfffc4 	addi	r2,r6,-1
10008f5c:	30001a26 	beq	r6,zero,10008fc8 <memchr+0x7c>
10008f60:	20c00003 	ldbu	r3,0(r4)
10008f64:	29803fcc 	andi	r6,r5,255
10008f68:	30c0051e 	bne	r6,r3,10008f80 <memchr+0x34>
10008f6c:	00001806 	br	10008fd0 <memchr+0x84>
10008f70:	10001526 	beq	r2,zero,10008fc8 <memchr+0x7c>
10008f74:	20c00003 	ldbu	r3,0(r4)
10008f78:	10bfffc4 	addi	r2,r2,-1
10008f7c:	30c01426 	beq	r6,r3,10008fd0 <memchr+0x84>
10008f80:	21000044 	addi	r4,r4,1
10008f84:	20c000cc 	andi	r3,r4,3
10008f88:	183ff91e 	bne	r3,zero,10008f70 <__alt_data_end+0xf8008f70>
10008f8c:	020000c4 	movi	r8,3
10008f90:	40801136 	bltu	r8,r2,10008fd8 <memchr+0x8c>
10008f94:	10000c26 	beq	r2,zero,10008fc8 <memchr+0x7c>
10008f98:	20c00003 	ldbu	r3,0(r4)
10008f9c:	29403fcc 	andi	r5,r5,255
10008fa0:	28c00b26 	beq	r5,r3,10008fd0 <memchr+0x84>
10008fa4:	20c00044 	addi	r3,r4,1
10008fa8:	39803fcc 	andi	r6,r7,255
10008fac:	2089883a 	add	r4,r4,r2
10008fb0:	00000306 	br	10008fc0 <memchr+0x74>
10008fb4:	18c00044 	addi	r3,r3,1
10008fb8:	197fffc3 	ldbu	r5,-1(r3)
10008fbc:	31400526 	beq	r6,r5,10008fd4 <memchr+0x88>
10008fc0:	1805883a 	mov	r2,r3
10008fc4:	20fffb1e 	bne	r4,r3,10008fb4 <__alt_data_end+0xf8008fb4>
10008fc8:	0005883a 	mov	r2,zero
10008fcc:	f800283a 	ret
10008fd0:	2005883a 	mov	r2,r4
10008fd4:	f800283a 	ret
10008fd8:	28c03fcc 	andi	r3,r5,255
10008fdc:	1812923a 	slli	r9,r3,8
10008fe0:	02ffbff4 	movhi	r11,65279
10008fe4:	02a02074 	movhi	r10,32897
10008fe8:	48d2b03a 	or	r9,r9,r3
10008fec:	4806943a 	slli	r3,r9,16
10008ff0:	5affbfc4 	addi	r11,r11,-257
10008ff4:	52a02004 	addi	r10,r10,-32640
10008ff8:	48d2b03a 	or	r9,r9,r3
10008ffc:	20c00017 	ldw	r3,0(r4)
10009000:	48c6f03a 	xor	r3,r9,r3
10009004:	1acd883a 	add	r6,r3,r11
10009008:	00c6303a 	nor	r3,zero,r3
1000900c:	30c6703a 	and	r3,r6,r3
10009010:	1a86703a 	and	r3,r3,r10
10009014:	183fe01e 	bne	r3,zero,10008f98 <__alt_data_end+0xf8008f98>
10009018:	10bfff04 	addi	r2,r2,-4
1000901c:	21000104 	addi	r4,r4,4
10009020:	40bff636 	bltu	r8,r2,10008ffc <__alt_data_end+0xf8008ffc>
10009024:	003fdb06 	br	10008f94 <__alt_data_end+0xf8008f94>
10009028:	3005883a 	mov	r2,r6
1000902c:	003fd706 	br	10008f8c <__alt_data_end+0xf8008f8c>

10009030 <memmove>:
10009030:	2005883a 	mov	r2,r4
10009034:	29000b2e 	bgeu	r5,r4,10009064 <memmove+0x34>
10009038:	298f883a 	add	r7,r5,r6
1000903c:	21c0092e 	bgeu	r4,r7,10009064 <memmove+0x34>
10009040:	2187883a 	add	r3,r4,r6
10009044:	198bc83a 	sub	r5,r3,r6
10009048:	30004826 	beq	r6,zero,1000916c <memmove+0x13c>
1000904c:	39ffffc4 	addi	r7,r7,-1
10009050:	39000003 	ldbu	r4,0(r7)
10009054:	18ffffc4 	addi	r3,r3,-1
10009058:	19000005 	stb	r4,0(r3)
1000905c:	28fffb1e 	bne	r5,r3,1000904c <__alt_data_end+0xf800904c>
10009060:	f800283a 	ret
10009064:	00c003c4 	movi	r3,15
10009068:	1980412e 	bgeu	r3,r6,10009170 <memmove+0x140>
1000906c:	2886b03a 	or	r3,r5,r2
10009070:	18c000cc 	andi	r3,r3,3
10009074:	1800401e 	bne	r3,zero,10009178 <memmove+0x148>
10009078:	33fffc04 	addi	r15,r6,-16
1000907c:	781ed13a 	srli	r15,r15,4
10009080:	28c00104 	addi	r3,r5,4
10009084:	13400104 	addi	r13,r2,4
10009088:	781c913a 	slli	r14,r15,4
1000908c:	2b000204 	addi	r12,r5,8
10009090:	12c00204 	addi	r11,r2,8
10009094:	73800504 	addi	r14,r14,20
10009098:	2a800304 	addi	r10,r5,12
1000909c:	12400304 	addi	r9,r2,12
100090a0:	2b9d883a 	add	r14,r5,r14
100090a4:	2811883a 	mov	r8,r5
100090a8:	100f883a 	mov	r7,r2
100090ac:	41000017 	ldw	r4,0(r8)
100090b0:	39c00404 	addi	r7,r7,16
100090b4:	18c00404 	addi	r3,r3,16
100090b8:	393ffc15 	stw	r4,-16(r7)
100090bc:	193ffc17 	ldw	r4,-16(r3)
100090c0:	6b400404 	addi	r13,r13,16
100090c4:	5ac00404 	addi	r11,r11,16
100090c8:	693ffc15 	stw	r4,-16(r13)
100090cc:	61000017 	ldw	r4,0(r12)
100090d0:	4a400404 	addi	r9,r9,16
100090d4:	42000404 	addi	r8,r8,16
100090d8:	593ffc15 	stw	r4,-16(r11)
100090dc:	51000017 	ldw	r4,0(r10)
100090e0:	63000404 	addi	r12,r12,16
100090e4:	52800404 	addi	r10,r10,16
100090e8:	493ffc15 	stw	r4,-16(r9)
100090ec:	1bbfef1e 	bne	r3,r14,100090ac <__alt_data_end+0xf80090ac>
100090f0:	79000044 	addi	r4,r15,1
100090f4:	2008913a 	slli	r4,r4,4
100090f8:	328003cc 	andi	r10,r6,15
100090fc:	02c000c4 	movi	r11,3
10009100:	1107883a 	add	r3,r2,r4
10009104:	290b883a 	add	r5,r5,r4
10009108:	5a801e2e 	bgeu	r11,r10,10009184 <memmove+0x154>
1000910c:	1813883a 	mov	r9,r3
10009110:	2811883a 	mov	r8,r5
10009114:	500f883a 	mov	r7,r10
10009118:	41000017 	ldw	r4,0(r8)
1000911c:	4a400104 	addi	r9,r9,4
10009120:	39ffff04 	addi	r7,r7,-4
10009124:	493fff15 	stw	r4,-4(r9)
10009128:	42000104 	addi	r8,r8,4
1000912c:	59fffa36 	bltu	r11,r7,10009118 <__alt_data_end+0xf8009118>
10009130:	513fff04 	addi	r4,r10,-4
10009134:	2008d0ba 	srli	r4,r4,2
10009138:	318000cc 	andi	r6,r6,3
1000913c:	21000044 	addi	r4,r4,1
10009140:	2109883a 	add	r4,r4,r4
10009144:	2109883a 	add	r4,r4,r4
10009148:	1907883a 	add	r3,r3,r4
1000914c:	290b883a 	add	r5,r5,r4
10009150:	30000b26 	beq	r6,zero,10009180 <memmove+0x150>
10009154:	198d883a 	add	r6,r3,r6
10009158:	29c00003 	ldbu	r7,0(r5)
1000915c:	18c00044 	addi	r3,r3,1
10009160:	29400044 	addi	r5,r5,1
10009164:	19ffffc5 	stb	r7,-1(r3)
10009168:	19bffb1e 	bne	r3,r6,10009158 <__alt_data_end+0xf8009158>
1000916c:	f800283a 	ret
10009170:	1007883a 	mov	r3,r2
10009174:	003ff606 	br	10009150 <__alt_data_end+0xf8009150>
10009178:	1007883a 	mov	r3,r2
1000917c:	003ff506 	br	10009154 <__alt_data_end+0xf8009154>
10009180:	f800283a 	ret
10009184:	500d883a 	mov	r6,r10
10009188:	003ff106 	br	10009150 <__alt_data_end+0xf8009150>

1000918c <_Balloc>:
1000918c:	20801317 	ldw	r2,76(r4)
10009190:	defffc04 	addi	sp,sp,-16
10009194:	dc400115 	stw	r17,4(sp)
10009198:	dc000015 	stw	r16,0(sp)
1000919c:	dfc00315 	stw	ra,12(sp)
100091a0:	dc800215 	stw	r18,8(sp)
100091a4:	2023883a 	mov	r17,r4
100091a8:	2821883a 	mov	r16,r5
100091ac:	10000f26 	beq	r2,zero,100091ec <_Balloc+0x60>
100091b0:	8407883a 	add	r3,r16,r16
100091b4:	18c7883a 	add	r3,r3,r3
100091b8:	10c7883a 	add	r3,r2,r3
100091bc:	18800017 	ldw	r2,0(r3)
100091c0:	10001126 	beq	r2,zero,10009208 <_Balloc+0x7c>
100091c4:	11000017 	ldw	r4,0(r2)
100091c8:	19000015 	stw	r4,0(r3)
100091cc:	10000415 	stw	zero,16(r2)
100091d0:	10000315 	stw	zero,12(r2)
100091d4:	dfc00317 	ldw	ra,12(sp)
100091d8:	dc800217 	ldw	r18,8(sp)
100091dc:	dc400117 	ldw	r17,4(sp)
100091e0:	dc000017 	ldw	r16,0(sp)
100091e4:	dec00404 	addi	sp,sp,16
100091e8:	f800283a 	ret
100091ec:	01800844 	movi	r6,33
100091f0:	01400104 	movi	r5,4
100091f4:	000c0b00 	call	1000c0b0 <_calloc_r>
100091f8:	88801315 	stw	r2,76(r17)
100091fc:	103fec1e 	bne	r2,zero,100091b0 <__alt_data_end+0xf80091b0>
10009200:	0005883a 	mov	r2,zero
10009204:	003ff306 	br	100091d4 <__alt_data_end+0xf80091d4>
10009208:	01400044 	movi	r5,1
1000920c:	2c24983a 	sll	r18,r5,r16
10009210:	8809883a 	mov	r4,r17
10009214:	91800144 	addi	r6,r18,5
10009218:	318d883a 	add	r6,r6,r6
1000921c:	318d883a 	add	r6,r6,r6
10009220:	000c0b00 	call	1000c0b0 <_calloc_r>
10009224:	103ff626 	beq	r2,zero,10009200 <__alt_data_end+0xf8009200>
10009228:	14000115 	stw	r16,4(r2)
1000922c:	14800215 	stw	r18,8(r2)
10009230:	003fe606 	br	100091cc <__alt_data_end+0xf80091cc>

10009234 <_Bfree>:
10009234:	28000826 	beq	r5,zero,10009258 <_Bfree+0x24>
10009238:	28c00117 	ldw	r3,4(r5)
1000923c:	20801317 	ldw	r2,76(r4)
10009240:	18c7883a 	add	r3,r3,r3
10009244:	18c7883a 	add	r3,r3,r3
10009248:	10c5883a 	add	r2,r2,r3
1000924c:	10c00017 	ldw	r3,0(r2)
10009250:	28c00015 	stw	r3,0(r5)
10009254:	11400015 	stw	r5,0(r2)
10009258:	f800283a 	ret

1000925c <__multadd>:
1000925c:	defff704 	addi	sp,sp,-36
10009260:	dc800215 	stw	r18,8(sp)
10009264:	2c800417 	ldw	r18,16(r5)
10009268:	dd800615 	stw	r22,24(sp)
1000926c:	dd400515 	stw	r21,20(sp)
10009270:	dd000415 	stw	r20,16(sp)
10009274:	dcc00315 	stw	r19,12(sp)
10009278:	dc400115 	stw	r17,4(sp)
1000927c:	dc000015 	stw	r16,0(sp)
10009280:	dfc00815 	stw	ra,32(sp)
10009284:	ddc00715 	stw	r23,28(sp)
10009288:	2827883a 	mov	r19,r5
1000928c:	2029883a 	mov	r20,r4
10009290:	3023883a 	mov	r17,r6
10009294:	3821883a 	mov	r16,r7
10009298:	2d400504 	addi	r21,r5,20
1000929c:	002d883a 	mov	r22,zero
100092a0:	adc00017 	ldw	r23,0(r21)
100092a4:	880b883a 	mov	r5,r17
100092a8:	ad400104 	addi	r21,r21,4
100092ac:	b93fffcc 	andi	r4,r23,65535
100092b0:	000175c0 	call	1000175c <__mulsi3>
100092b4:	b808d43a 	srli	r4,r23,16
100092b8:	880b883a 	mov	r5,r17
100092bc:	1421883a 	add	r16,r2,r16
100092c0:	000175c0 	call	1000175c <__mulsi3>
100092c4:	800ed43a 	srli	r7,r16,16
100092c8:	80ffffcc 	andi	r3,r16,65535
100092cc:	b5800044 	addi	r22,r22,1
100092d0:	11c5883a 	add	r2,r2,r7
100092d4:	100e943a 	slli	r7,r2,16
100092d8:	1020d43a 	srli	r16,r2,16
100092dc:	38c7883a 	add	r3,r7,r3
100092e0:	a8ffff15 	stw	r3,-4(r21)
100092e4:	b4bfee16 	blt	r22,r18,100092a0 <__alt_data_end+0xf80092a0>
100092e8:	80000926 	beq	r16,zero,10009310 <__multadd+0xb4>
100092ec:	98800217 	ldw	r2,8(r19)
100092f0:	9080130e 	bge	r18,r2,10009340 <__multadd+0xe4>
100092f4:	90800144 	addi	r2,r18,5
100092f8:	1085883a 	add	r2,r2,r2
100092fc:	1085883a 	add	r2,r2,r2
10009300:	9885883a 	add	r2,r19,r2
10009304:	14000015 	stw	r16,0(r2)
10009308:	94800044 	addi	r18,r18,1
1000930c:	9c800415 	stw	r18,16(r19)
10009310:	9805883a 	mov	r2,r19
10009314:	dfc00817 	ldw	ra,32(sp)
10009318:	ddc00717 	ldw	r23,28(sp)
1000931c:	dd800617 	ldw	r22,24(sp)
10009320:	dd400517 	ldw	r21,20(sp)
10009324:	dd000417 	ldw	r20,16(sp)
10009328:	dcc00317 	ldw	r19,12(sp)
1000932c:	dc800217 	ldw	r18,8(sp)
10009330:	dc400117 	ldw	r17,4(sp)
10009334:	dc000017 	ldw	r16,0(sp)
10009338:	dec00904 	addi	sp,sp,36
1000933c:	f800283a 	ret
10009340:	99400117 	ldw	r5,4(r19)
10009344:	a009883a 	mov	r4,r20
10009348:	29400044 	addi	r5,r5,1
1000934c:	000918c0 	call	1000918c <_Balloc>
10009350:	99800417 	ldw	r6,16(r19)
10009354:	99400304 	addi	r5,r19,12
10009358:	11000304 	addi	r4,r2,12
1000935c:	31800084 	addi	r6,r6,2
10009360:	318d883a 	add	r6,r6,r6
10009364:	318d883a 	add	r6,r6,r6
10009368:	1023883a 	mov	r17,r2
1000936c:	0003a680 	call	10003a68 <memcpy>
10009370:	98000a26 	beq	r19,zero,1000939c <__multadd+0x140>
10009374:	98c00117 	ldw	r3,4(r19)
10009378:	a0801317 	ldw	r2,76(r20)
1000937c:	18c7883a 	add	r3,r3,r3
10009380:	18c7883a 	add	r3,r3,r3
10009384:	10c5883a 	add	r2,r2,r3
10009388:	10c00017 	ldw	r3,0(r2)
1000938c:	98c00015 	stw	r3,0(r19)
10009390:	14c00015 	stw	r19,0(r2)
10009394:	8827883a 	mov	r19,r17
10009398:	003fd606 	br	100092f4 <__alt_data_end+0xf80092f4>
1000939c:	8827883a 	mov	r19,r17
100093a0:	003fd406 	br	100092f4 <__alt_data_end+0xf80092f4>

100093a4 <__s2b>:
100093a4:	defff904 	addi	sp,sp,-28
100093a8:	dc400115 	stw	r17,4(sp)
100093ac:	dc000015 	stw	r16,0(sp)
100093b0:	2023883a 	mov	r17,r4
100093b4:	2821883a 	mov	r16,r5
100093b8:	39000204 	addi	r4,r7,8
100093bc:	01400244 	movi	r5,9
100093c0:	dcc00315 	stw	r19,12(sp)
100093c4:	dc800215 	stw	r18,8(sp)
100093c8:	dfc00615 	stw	ra,24(sp)
100093cc:	dd400515 	stw	r21,20(sp)
100093d0:	dd000415 	stw	r20,16(sp)
100093d4:	3825883a 	mov	r18,r7
100093d8:	3027883a 	mov	r19,r6
100093dc:	00015a80 	call	100015a8 <__divsi3>
100093e0:	00c00044 	movi	r3,1
100093e4:	000b883a 	mov	r5,zero
100093e8:	1880030e 	bge	r3,r2,100093f8 <__s2b+0x54>
100093ec:	18c7883a 	add	r3,r3,r3
100093f0:	29400044 	addi	r5,r5,1
100093f4:	18bffd16 	blt	r3,r2,100093ec <__alt_data_end+0xf80093ec>
100093f8:	8809883a 	mov	r4,r17
100093fc:	000918c0 	call	1000918c <_Balloc>
10009400:	d8c00717 	ldw	r3,28(sp)
10009404:	10c00515 	stw	r3,20(r2)
10009408:	00c00044 	movi	r3,1
1000940c:	10c00415 	stw	r3,16(r2)
10009410:	00c00244 	movi	r3,9
10009414:	1cc0210e 	bge	r3,r19,1000949c <__s2b+0xf8>
10009418:	80eb883a 	add	r21,r16,r3
1000941c:	a829883a 	mov	r20,r21
10009420:	84e1883a 	add	r16,r16,r19
10009424:	a1c00007 	ldb	r7,0(r20)
10009428:	01800284 	movi	r6,10
1000942c:	a5000044 	addi	r20,r20,1
10009430:	100b883a 	mov	r5,r2
10009434:	39fff404 	addi	r7,r7,-48
10009438:	8809883a 	mov	r4,r17
1000943c:	000925c0 	call	1000925c <__multadd>
10009440:	a43ff81e 	bne	r20,r16,10009424 <__alt_data_end+0xf8009424>
10009444:	ace1883a 	add	r16,r21,r19
10009448:	843ffe04 	addi	r16,r16,-8
1000944c:	9c800a0e 	bge	r19,r18,10009478 <__s2b+0xd4>
10009450:	94e5c83a 	sub	r18,r18,r19
10009454:	84a5883a 	add	r18,r16,r18
10009458:	81c00007 	ldb	r7,0(r16)
1000945c:	01800284 	movi	r6,10
10009460:	84000044 	addi	r16,r16,1
10009464:	100b883a 	mov	r5,r2
10009468:	39fff404 	addi	r7,r7,-48
1000946c:	8809883a 	mov	r4,r17
10009470:	000925c0 	call	1000925c <__multadd>
10009474:	84bff81e 	bne	r16,r18,10009458 <__alt_data_end+0xf8009458>
10009478:	dfc00617 	ldw	ra,24(sp)
1000947c:	dd400517 	ldw	r21,20(sp)
10009480:	dd000417 	ldw	r20,16(sp)
10009484:	dcc00317 	ldw	r19,12(sp)
10009488:	dc800217 	ldw	r18,8(sp)
1000948c:	dc400117 	ldw	r17,4(sp)
10009490:	dc000017 	ldw	r16,0(sp)
10009494:	dec00704 	addi	sp,sp,28
10009498:	f800283a 	ret
1000949c:	84000284 	addi	r16,r16,10
100094a0:	1827883a 	mov	r19,r3
100094a4:	003fe906 	br	1000944c <__alt_data_end+0xf800944c>

100094a8 <__hi0bits>:
100094a8:	20bfffec 	andhi	r2,r4,65535
100094ac:	1000141e 	bne	r2,zero,10009500 <__hi0bits+0x58>
100094b0:	2008943a 	slli	r4,r4,16
100094b4:	00800404 	movi	r2,16
100094b8:	20ffc02c 	andhi	r3,r4,65280
100094bc:	1800021e 	bne	r3,zero,100094c8 <__hi0bits+0x20>
100094c0:	2008923a 	slli	r4,r4,8
100094c4:	10800204 	addi	r2,r2,8
100094c8:	20fc002c 	andhi	r3,r4,61440
100094cc:	1800021e 	bne	r3,zero,100094d8 <__hi0bits+0x30>
100094d0:	2008913a 	slli	r4,r4,4
100094d4:	10800104 	addi	r2,r2,4
100094d8:	20f0002c 	andhi	r3,r4,49152
100094dc:	1800031e 	bne	r3,zero,100094ec <__hi0bits+0x44>
100094e0:	2109883a 	add	r4,r4,r4
100094e4:	10800084 	addi	r2,r2,2
100094e8:	2109883a 	add	r4,r4,r4
100094ec:	20000316 	blt	r4,zero,100094fc <__hi0bits+0x54>
100094f0:	2110002c 	andhi	r4,r4,16384
100094f4:	2000041e 	bne	r4,zero,10009508 <__hi0bits+0x60>
100094f8:	00800804 	movi	r2,32
100094fc:	f800283a 	ret
10009500:	0005883a 	mov	r2,zero
10009504:	003fec06 	br	100094b8 <__alt_data_end+0xf80094b8>
10009508:	10800044 	addi	r2,r2,1
1000950c:	f800283a 	ret

10009510 <__lo0bits>:
10009510:	20c00017 	ldw	r3,0(r4)
10009514:	188001cc 	andi	r2,r3,7
10009518:	10000826 	beq	r2,zero,1000953c <__lo0bits+0x2c>
1000951c:	1880004c 	andi	r2,r3,1
10009520:	1000211e 	bne	r2,zero,100095a8 <__lo0bits+0x98>
10009524:	1880008c 	andi	r2,r3,2
10009528:	1000211e 	bne	r2,zero,100095b0 <__lo0bits+0xa0>
1000952c:	1806d0ba 	srli	r3,r3,2
10009530:	00800084 	movi	r2,2
10009534:	20c00015 	stw	r3,0(r4)
10009538:	f800283a 	ret
1000953c:	18bfffcc 	andi	r2,r3,65535
10009540:	10001326 	beq	r2,zero,10009590 <__lo0bits+0x80>
10009544:	0005883a 	mov	r2,zero
10009548:	19403fcc 	andi	r5,r3,255
1000954c:	2800021e 	bne	r5,zero,10009558 <__lo0bits+0x48>
10009550:	1806d23a 	srli	r3,r3,8
10009554:	10800204 	addi	r2,r2,8
10009558:	194003cc 	andi	r5,r3,15
1000955c:	2800021e 	bne	r5,zero,10009568 <__lo0bits+0x58>
10009560:	1806d13a 	srli	r3,r3,4
10009564:	10800104 	addi	r2,r2,4
10009568:	194000cc 	andi	r5,r3,3
1000956c:	2800021e 	bne	r5,zero,10009578 <__lo0bits+0x68>
10009570:	1806d0ba 	srli	r3,r3,2
10009574:	10800084 	addi	r2,r2,2
10009578:	1940004c 	andi	r5,r3,1
1000957c:	2800081e 	bne	r5,zero,100095a0 <__lo0bits+0x90>
10009580:	1806d07a 	srli	r3,r3,1
10009584:	1800051e 	bne	r3,zero,1000959c <__lo0bits+0x8c>
10009588:	00800804 	movi	r2,32
1000958c:	f800283a 	ret
10009590:	1806d43a 	srli	r3,r3,16
10009594:	00800404 	movi	r2,16
10009598:	003feb06 	br	10009548 <__alt_data_end+0xf8009548>
1000959c:	10800044 	addi	r2,r2,1
100095a0:	20c00015 	stw	r3,0(r4)
100095a4:	f800283a 	ret
100095a8:	0005883a 	mov	r2,zero
100095ac:	f800283a 	ret
100095b0:	1806d07a 	srli	r3,r3,1
100095b4:	00800044 	movi	r2,1
100095b8:	20c00015 	stw	r3,0(r4)
100095bc:	f800283a 	ret

100095c0 <__i2b>:
100095c0:	defffd04 	addi	sp,sp,-12
100095c4:	dc000015 	stw	r16,0(sp)
100095c8:	04000044 	movi	r16,1
100095cc:	dc400115 	stw	r17,4(sp)
100095d0:	2823883a 	mov	r17,r5
100095d4:	800b883a 	mov	r5,r16
100095d8:	dfc00215 	stw	ra,8(sp)
100095dc:	000918c0 	call	1000918c <_Balloc>
100095e0:	14400515 	stw	r17,20(r2)
100095e4:	14000415 	stw	r16,16(r2)
100095e8:	dfc00217 	ldw	ra,8(sp)
100095ec:	dc400117 	ldw	r17,4(sp)
100095f0:	dc000017 	ldw	r16,0(sp)
100095f4:	dec00304 	addi	sp,sp,12
100095f8:	f800283a 	ret

100095fc <__multiply>:
100095fc:	deffef04 	addi	sp,sp,-68
10009600:	dc400815 	stw	r17,32(sp)
10009604:	dc000715 	stw	r16,28(sp)
10009608:	34400417 	ldw	r17,16(r6)
1000960c:	2c000417 	ldw	r16,16(r5)
10009610:	dd800d15 	stw	r22,52(sp)
10009614:	dc800915 	stw	r18,36(sp)
10009618:	dfc01015 	stw	ra,64(sp)
1000961c:	df000f15 	stw	fp,60(sp)
10009620:	ddc00e15 	stw	r23,56(sp)
10009624:	dd400c15 	stw	r21,48(sp)
10009628:	dd000b15 	stw	r20,44(sp)
1000962c:	dcc00a15 	stw	r19,40(sp)
10009630:	2825883a 	mov	r18,r5
10009634:	302d883a 	mov	r22,r6
10009638:	8440050e 	bge	r16,r17,10009650 <__multiply+0x54>
1000963c:	8007883a 	mov	r3,r16
10009640:	3025883a 	mov	r18,r6
10009644:	8821883a 	mov	r16,r17
10009648:	282d883a 	mov	r22,r5
1000964c:	1823883a 	mov	r17,r3
10009650:	90800217 	ldw	r2,8(r18)
10009654:	8447883a 	add	r3,r16,r17
10009658:	d8c00215 	stw	r3,8(sp)
1000965c:	91400117 	ldw	r5,4(r18)
10009660:	10c0010e 	bge	r2,r3,10009668 <__multiply+0x6c>
10009664:	29400044 	addi	r5,r5,1
10009668:	000918c0 	call	1000918c <_Balloc>
1000966c:	d8c00217 	ldw	r3,8(sp)
10009670:	d8800615 	stw	r2,24(sp)
10009674:	18eb883a 	add	r21,r3,r3
10009678:	ad6b883a 	add	r21,r21,r21
1000967c:	10c00504 	addi	r3,r2,20
10009680:	1d6b883a 	add	r21,r3,r21
10009684:	d8c00115 	stw	r3,4(sp)
10009688:	dd400315 	stw	r21,12(sp)
1000968c:	1805883a 	mov	r2,r3
10009690:	1d40042e 	bgeu	r3,r21,100096a4 <__multiply+0xa8>
10009694:	d8c00317 	ldw	r3,12(sp)
10009698:	10000015 	stw	zero,0(r2)
1000969c:	10800104 	addi	r2,r2,4
100096a0:	10fffc36 	bltu	r2,r3,10009694 <__alt_data_end+0xf8009694>
100096a4:	8c63883a 	add	r17,r17,r17
100096a8:	b5800504 	addi	r22,r22,20
100096ac:	8c63883a 	add	r17,r17,r17
100096b0:	94800504 	addi	r18,r18,20
100096b4:	8421883a 	add	r16,r16,r16
100096b8:	b463883a 	add	r17,r22,r17
100096bc:	8421883a 	add	r16,r16,r16
100096c0:	dd800015 	stw	r22,0(sp)
100096c4:	dc800415 	stw	r18,16(sp)
100096c8:	dc400515 	stw	r17,20(sp)
100096cc:	9429883a 	add	r20,r18,r16
100096d0:	b4404f2e 	bgeu	r22,r17,10009810 <__multiply+0x214>
100096d4:	d8c00017 	ldw	r3,0(sp)
100096d8:	1c800017 	ldw	r18,0(r3)
100096dc:	947fffcc 	andi	r17,r18,65535
100096e0:	88001e26 	beq	r17,zero,1000975c <__multiply+0x160>
100096e4:	dd800117 	ldw	r22,4(sp)
100096e8:	dd400417 	ldw	r21,16(sp)
100096ec:	0027883a 	mov	r19,zero
100096f0:	ac800017 	ldw	r18,0(r21)
100096f4:	b4000017 	ldw	r16,0(r22)
100096f8:	880b883a 	mov	r5,r17
100096fc:	913fffcc 	andi	r4,r18,65535
10009700:	000175c0 	call	1000175c <__mulsi3>
10009704:	9008d43a 	srli	r4,r18,16
10009708:	84bfffcc 	andi	r18,r16,65535
1000970c:	1485883a 	add	r2,r2,r18
10009710:	14e5883a 	add	r18,r2,r19
10009714:	8020d43a 	srli	r16,r16,16
10009718:	9026d43a 	srli	r19,r18,16
1000971c:	880b883a 	mov	r5,r17
10009720:	000175c0 	call	1000175c <__mulsi3>
10009724:	1405883a 	add	r2,r2,r16
10009728:	14e1883a 	add	r16,r2,r19
1000972c:	90ffffcc 	andi	r3,r18,65535
10009730:	8024943a 	slli	r18,r16,16
10009734:	ad400104 	addi	r21,r21,4
10009738:	b005883a 	mov	r2,r22
1000973c:	90c6b03a 	or	r3,r18,r3
10009740:	b0c00015 	stw	r3,0(r22)
10009744:	8026d43a 	srli	r19,r16,16
10009748:	b5800104 	addi	r22,r22,4
1000974c:	ad3fe836 	bltu	r21,r20,100096f0 <__alt_data_end+0xf80096f0>
10009750:	d8c00017 	ldw	r3,0(sp)
10009754:	14c00115 	stw	r19,4(r2)
10009758:	1c800017 	ldw	r18,0(r3)
1000975c:	9024d43a 	srli	r18,r18,16
10009760:	90002226 	beq	r18,zero,100097ec <__multiply+0x1f0>
10009764:	d8c00117 	ldw	r3,4(sp)
10009768:	dd800417 	ldw	r22,16(sp)
1000976c:	002f883a 	mov	r23,zero
10009770:	1f000017 	ldw	fp,0(r3)
10009774:	1823883a 	mov	r17,r3
10009778:	182b883a 	mov	r21,r3
1000977c:	e021883a 	mov	r16,fp
10009780:	00000106 	br	10009788 <__multiply+0x18c>
10009784:	982b883a 	mov	r21,r19
10009788:	b100000b 	ldhu	r4,0(r22)
1000978c:	8020d43a 	srli	r16,r16,16
10009790:	900b883a 	mov	r5,r18
10009794:	000175c0 	call	1000175c <__mulsi3>
10009798:	1405883a 	add	r2,r2,r16
1000979c:	15ef883a 	add	r23,r2,r23
100097a0:	b804943a 	slli	r2,r23,16
100097a4:	e0ffffcc 	andi	r3,fp,65535
100097a8:	8c400104 	addi	r17,r17,4
100097ac:	10c6b03a 	or	r3,r2,r3
100097b0:	88ffff15 	stw	r3,-4(r17)
100097b4:	b5800104 	addi	r22,r22,4
100097b8:	b13fff17 	ldw	r4,-4(r22)
100097bc:	acc00104 	addi	r19,r21,4
100097c0:	900b883a 	mov	r5,r18
100097c4:	2008d43a 	srli	r4,r4,16
100097c8:	9c000017 	ldw	r16,0(r19)
100097cc:	000175c0 	call	1000175c <__mulsi3>
100097d0:	b806d43a 	srli	r3,r23,16
100097d4:	813fffcc 	andi	r4,r16,65535
100097d8:	1105883a 	add	r2,r2,r4
100097dc:	10f9883a 	add	fp,r2,r3
100097e0:	e02ed43a 	srli	r23,fp,16
100097e4:	b53fe736 	bltu	r22,r20,10009784 <__alt_data_end+0xf8009784>
100097e8:	af000115 	stw	fp,4(r21)
100097ec:	d8c00017 	ldw	r3,0(sp)
100097f0:	d9000517 	ldw	r4,20(sp)
100097f4:	18c00104 	addi	r3,r3,4
100097f8:	d8c00015 	stw	r3,0(sp)
100097fc:	d8c00117 	ldw	r3,4(sp)
10009800:	18c00104 	addi	r3,r3,4
10009804:	d8c00115 	stw	r3,4(sp)
10009808:	d8c00017 	ldw	r3,0(sp)
1000980c:	193fb136 	bltu	r3,r4,100096d4 <__alt_data_end+0xf80096d4>
10009810:	d8c00217 	ldw	r3,8(sp)
10009814:	00c00c0e 	bge	zero,r3,10009848 <__multiply+0x24c>
10009818:	d8c00317 	ldw	r3,12(sp)
1000981c:	18bfff17 	ldw	r2,-4(r3)
10009820:	1d7fff04 	addi	r21,r3,-4
10009824:	10000326 	beq	r2,zero,10009834 <__multiply+0x238>
10009828:	00000706 	br	10009848 <__multiply+0x24c>
1000982c:	a8800017 	ldw	r2,0(r21)
10009830:	1000051e 	bne	r2,zero,10009848 <__multiply+0x24c>
10009834:	d8c00217 	ldw	r3,8(sp)
10009838:	ad7fff04 	addi	r21,r21,-4
1000983c:	18ffffc4 	addi	r3,r3,-1
10009840:	d8c00215 	stw	r3,8(sp)
10009844:	183ff91e 	bne	r3,zero,1000982c <__alt_data_end+0xf800982c>
10009848:	d8c00617 	ldw	r3,24(sp)
1000984c:	d9000217 	ldw	r4,8(sp)
10009850:	1805883a 	mov	r2,r3
10009854:	19000415 	stw	r4,16(r3)
10009858:	dfc01017 	ldw	ra,64(sp)
1000985c:	df000f17 	ldw	fp,60(sp)
10009860:	ddc00e17 	ldw	r23,56(sp)
10009864:	dd800d17 	ldw	r22,52(sp)
10009868:	dd400c17 	ldw	r21,48(sp)
1000986c:	dd000b17 	ldw	r20,44(sp)
10009870:	dcc00a17 	ldw	r19,40(sp)
10009874:	dc800917 	ldw	r18,36(sp)
10009878:	dc400817 	ldw	r17,32(sp)
1000987c:	dc000717 	ldw	r16,28(sp)
10009880:	dec01104 	addi	sp,sp,68
10009884:	f800283a 	ret

10009888 <__pow5mult>:
10009888:	defffa04 	addi	sp,sp,-24
1000988c:	dcc00315 	stw	r19,12(sp)
10009890:	dc000015 	stw	r16,0(sp)
10009894:	dfc00515 	stw	ra,20(sp)
10009898:	dd000415 	stw	r20,16(sp)
1000989c:	dc800215 	stw	r18,8(sp)
100098a0:	dc400115 	stw	r17,4(sp)
100098a4:	308000cc 	andi	r2,r6,3
100098a8:	3021883a 	mov	r16,r6
100098ac:	2027883a 	mov	r19,r4
100098b0:	10002f1e 	bne	r2,zero,10009970 <__pow5mult+0xe8>
100098b4:	2825883a 	mov	r18,r5
100098b8:	8021d0ba 	srai	r16,r16,2
100098bc:	80001a26 	beq	r16,zero,10009928 <__pow5mult+0xa0>
100098c0:	9c401217 	ldw	r17,72(r19)
100098c4:	8800061e 	bne	r17,zero,100098e0 <__pow5mult+0x58>
100098c8:	00003406 	br	1000999c <__pow5mult+0x114>
100098cc:	8021d07a 	srai	r16,r16,1
100098d0:	80001526 	beq	r16,zero,10009928 <__pow5mult+0xa0>
100098d4:	88800017 	ldw	r2,0(r17)
100098d8:	10001c26 	beq	r2,zero,1000994c <__pow5mult+0xc4>
100098dc:	1023883a 	mov	r17,r2
100098e0:	8080004c 	andi	r2,r16,1
100098e4:	103ff926 	beq	r2,zero,100098cc <__alt_data_end+0xf80098cc>
100098e8:	880d883a 	mov	r6,r17
100098ec:	900b883a 	mov	r5,r18
100098f0:	9809883a 	mov	r4,r19
100098f4:	00095fc0 	call	100095fc <__multiply>
100098f8:	90001b26 	beq	r18,zero,10009968 <__pow5mult+0xe0>
100098fc:	91000117 	ldw	r4,4(r18)
10009900:	98c01317 	ldw	r3,76(r19)
10009904:	8021d07a 	srai	r16,r16,1
10009908:	2109883a 	add	r4,r4,r4
1000990c:	2109883a 	add	r4,r4,r4
10009910:	1907883a 	add	r3,r3,r4
10009914:	19000017 	ldw	r4,0(r3)
10009918:	91000015 	stw	r4,0(r18)
1000991c:	1c800015 	stw	r18,0(r3)
10009920:	1025883a 	mov	r18,r2
10009924:	803feb1e 	bne	r16,zero,100098d4 <__alt_data_end+0xf80098d4>
10009928:	9005883a 	mov	r2,r18
1000992c:	dfc00517 	ldw	ra,20(sp)
10009930:	dd000417 	ldw	r20,16(sp)
10009934:	dcc00317 	ldw	r19,12(sp)
10009938:	dc800217 	ldw	r18,8(sp)
1000993c:	dc400117 	ldw	r17,4(sp)
10009940:	dc000017 	ldw	r16,0(sp)
10009944:	dec00604 	addi	sp,sp,24
10009948:	f800283a 	ret
1000994c:	880d883a 	mov	r6,r17
10009950:	880b883a 	mov	r5,r17
10009954:	9809883a 	mov	r4,r19
10009958:	00095fc0 	call	100095fc <__multiply>
1000995c:	88800015 	stw	r2,0(r17)
10009960:	10000015 	stw	zero,0(r2)
10009964:	003fdd06 	br	100098dc <__alt_data_end+0xf80098dc>
10009968:	1025883a 	mov	r18,r2
1000996c:	003fd706 	br	100098cc <__alt_data_end+0xf80098cc>
10009970:	10bfffc4 	addi	r2,r2,-1
10009974:	1085883a 	add	r2,r2,r2
10009978:	00c40074 	movhi	r3,4097
1000997c:	18c9c404 	addi	r3,r3,10000
10009980:	1085883a 	add	r2,r2,r2
10009984:	1885883a 	add	r2,r3,r2
10009988:	11800017 	ldw	r6,0(r2)
1000998c:	000f883a 	mov	r7,zero
10009990:	000925c0 	call	1000925c <__multadd>
10009994:	1025883a 	mov	r18,r2
10009998:	003fc706 	br	100098b8 <__alt_data_end+0xf80098b8>
1000999c:	05000044 	movi	r20,1
100099a0:	a00b883a 	mov	r5,r20
100099a4:	9809883a 	mov	r4,r19
100099a8:	000918c0 	call	1000918c <_Balloc>
100099ac:	1023883a 	mov	r17,r2
100099b0:	00809c44 	movi	r2,625
100099b4:	88800515 	stw	r2,20(r17)
100099b8:	8d000415 	stw	r20,16(r17)
100099bc:	9c401215 	stw	r17,72(r19)
100099c0:	88000015 	stw	zero,0(r17)
100099c4:	003fc606 	br	100098e0 <__alt_data_end+0xf80098e0>

100099c8 <__lshift>:
100099c8:	defff904 	addi	sp,sp,-28
100099cc:	dd400515 	stw	r21,20(sp)
100099d0:	dcc00315 	stw	r19,12(sp)
100099d4:	302bd17a 	srai	r21,r6,5
100099d8:	2cc00417 	ldw	r19,16(r5)
100099dc:	28800217 	ldw	r2,8(r5)
100099e0:	dd000415 	stw	r20,16(sp)
100099e4:	ace7883a 	add	r19,r21,r19
100099e8:	dc800215 	stw	r18,8(sp)
100099ec:	dc400115 	stw	r17,4(sp)
100099f0:	dc000015 	stw	r16,0(sp)
100099f4:	dfc00615 	stw	ra,24(sp)
100099f8:	9c000044 	addi	r16,r19,1
100099fc:	2823883a 	mov	r17,r5
10009a00:	3029883a 	mov	r20,r6
10009a04:	2025883a 	mov	r18,r4
10009a08:	29400117 	ldw	r5,4(r5)
10009a0c:	1400030e 	bge	r2,r16,10009a1c <__lshift+0x54>
10009a10:	1085883a 	add	r2,r2,r2
10009a14:	29400044 	addi	r5,r5,1
10009a18:	143ffd16 	blt	r2,r16,10009a10 <__alt_data_end+0xf8009a10>
10009a1c:	9009883a 	mov	r4,r18
10009a20:	000918c0 	call	1000918c <_Balloc>
10009a24:	10c00504 	addi	r3,r2,20
10009a28:	0540070e 	bge	zero,r21,10009a48 <__lshift+0x80>
10009a2c:	ad6b883a 	add	r21,r21,r21
10009a30:	ad6b883a 	add	r21,r21,r21
10009a34:	1809883a 	mov	r4,r3
10009a38:	1d47883a 	add	r3,r3,r21
10009a3c:	20000015 	stw	zero,0(r4)
10009a40:	21000104 	addi	r4,r4,4
10009a44:	193ffd1e 	bne	r3,r4,10009a3c <__alt_data_end+0xf8009a3c>
10009a48:	8a000417 	ldw	r8,16(r17)
10009a4c:	89000504 	addi	r4,r17,20
10009a50:	a18007cc 	andi	r6,r20,31
10009a54:	4211883a 	add	r8,r8,r8
10009a58:	4211883a 	add	r8,r8,r8
10009a5c:	2211883a 	add	r8,r4,r8
10009a60:	30002326 	beq	r6,zero,10009af0 <__lshift+0x128>
10009a64:	02400804 	movi	r9,32
10009a68:	4993c83a 	sub	r9,r9,r6
10009a6c:	000b883a 	mov	r5,zero
10009a70:	21c00017 	ldw	r7,0(r4)
10009a74:	1815883a 	mov	r10,r3
10009a78:	18c00104 	addi	r3,r3,4
10009a7c:	398e983a 	sll	r7,r7,r6
10009a80:	21000104 	addi	r4,r4,4
10009a84:	394ab03a 	or	r5,r7,r5
10009a88:	197fff15 	stw	r5,-4(r3)
10009a8c:	217fff17 	ldw	r5,-4(r4)
10009a90:	2a4ad83a 	srl	r5,r5,r9
10009a94:	223ff636 	bltu	r4,r8,10009a70 <__alt_data_end+0xf8009a70>
10009a98:	51400115 	stw	r5,4(r10)
10009a9c:	28001a1e 	bne	r5,zero,10009b08 <__lshift+0x140>
10009aa0:	843fffc4 	addi	r16,r16,-1
10009aa4:	14000415 	stw	r16,16(r2)
10009aa8:	88000826 	beq	r17,zero,10009acc <__lshift+0x104>
10009aac:	89000117 	ldw	r4,4(r17)
10009ab0:	90c01317 	ldw	r3,76(r18)
10009ab4:	2109883a 	add	r4,r4,r4
10009ab8:	2109883a 	add	r4,r4,r4
10009abc:	1907883a 	add	r3,r3,r4
10009ac0:	19000017 	ldw	r4,0(r3)
10009ac4:	89000015 	stw	r4,0(r17)
10009ac8:	1c400015 	stw	r17,0(r3)
10009acc:	dfc00617 	ldw	ra,24(sp)
10009ad0:	dd400517 	ldw	r21,20(sp)
10009ad4:	dd000417 	ldw	r20,16(sp)
10009ad8:	dcc00317 	ldw	r19,12(sp)
10009adc:	dc800217 	ldw	r18,8(sp)
10009ae0:	dc400117 	ldw	r17,4(sp)
10009ae4:	dc000017 	ldw	r16,0(sp)
10009ae8:	dec00704 	addi	sp,sp,28
10009aec:	f800283a 	ret
10009af0:	21400017 	ldw	r5,0(r4)
10009af4:	18c00104 	addi	r3,r3,4
10009af8:	21000104 	addi	r4,r4,4
10009afc:	197fff15 	stw	r5,-4(r3)
10009b00:	223ffb36 	bltu	r4,r8,10009af0 <__alt_data_end+0xf8009af0>
10009b04:	003fe606 	br	10009aa0 <__alt_data_end+0xf8009aa0>
10009b08:	9c000084 	addi	r16,r19,2
10009b0c:	003fe406 	br	10009aa0 <__alt_data_end+0xf8009aa0>

10009b10 <__mcmp>:
10009b10:	20800417 	ldw	r2,16(r4)
10009b14:	28c00417 	ldw	r3,16(r5)
10009b18:	10c5c83a 	sub	r2,r2,r3
10009b1c:	1000111e 	bne	r2,zero,10009b64 <__mcmp+0x54>
10009b20:	18c7883a 	add	r3,r3,r3
10009b24:	18c7883a 	add	r3,r3,r3
10009b28:	21000504 	addi	r4,r4,20
10009b2c:	29400504 	addi	r5,r5,20
10009b30:	20c5883a 	add	r2,r4,r3
10009b34:	28cb883a 	add	r5,r5,r3
10009b38:	00000106 	br	10009b40 <__mcmp+0x30>
10009b3c:	20800a2e 	bgeu	r4,r2,10009b68 <__mcmp+0x58>
10009b40:	10bfff04 	addi	r2,r2,-4
10009b44:	297fff04 	addi	r5,r5,-4
10009b48:	11800017 	ldw	r6,0(r2)
10009b4c:	28c00017 	ldw	r3,0(r5)
10009b50:	30fffa26 	beq	r6,r3,10009b3c <__alt_data_end+0xf8009b3c>
10009b54:	30c00236 	bltu	r6,r3,10009b60 <__mcmp+0x50>
10009b58:	00800044 	movi	r2,1
10009b5c:	f800283a 	ret
10009b60:	00bfffc4 	movi	r2,-1
10009b64:	f800283a 	ret
10009b68:	0005883a 	mov	r2,zero
10009b6c:	f800283a 	ret

10009b70 <__mdiff>:
10009b70:	28c00417 	ldw	r3,16(r5)
10009b74:	30800417 	ldw	r2,16(r6)
10009b78:	defffa04 	addi	sp,sp,-24
10009b7c:	dcc00315 	stw	r19,12(sp)
10009b80:	dc800215 	stw	r18,8(sp)
10009b84:	dfc00515 	stw	ra,20(sp)
10009b88:	dd000415 	stw	r20,16(sp)
10009b8c:	dc400115 	stw	r17,4(sp)
10009b90:	dc000015 	stw	r16,0(sp)
10009b94:	1887c83a 	sub	r3,r3,r2
10009b98:	2825883a 	mov	r18,r5
10009b9c:	3027883a 	mov	r19,r6
10009ba0:	1800141e 	bne	r3,zero,10009bf4 <__mdiff+0x84>
10009ba4:	1085883a 	add	r2,r2,r2
10009ba8:	1085883a 	add	r2,r2,r2
10009bac:	2a000504 	addi	r8,r5,20
10009bb0:	34000504 	addi	r16,r6,20
10009bb4:	4087883a 	add	r3,r8,r2
10009bb8:	8085883a 	add	r2,r16,r2
10009bbc:	00000106 	br	10009bc4 <__mdiff+0x54>
10009bc0:	40c0592e 	bgeu	r8,r3,10009d28 <__mdiff+0x1b8>
10009bc4:	18ffff04 	addi	r3,r3,-4
10009bc8:	10bfff04 	addi	r2,r2,-4
10009bcc:	19c00017 	ldw	r7,0(r3)
10009bd0:	11400017 	ldw	r5,0(r2)
10009bd4:	397ffa26 	beq	r7,r5,10009bc0 <__alt_data_end+0xf8009bc0>
10009bd8:	3940592e 	bgeu	r7,r5,10009d40 <__mdiff+0x1d0>
10009bdc:	9005883a 	mov	r2,r18
10009be0:	4023883a 	mov	r17,r8
10009be4:	9825883a 	mov	r18,r19
10009be8:	05000044 	movi	r20,1
10009bec:	1027883a 	mov	r19,r2
10009bf0:	00000406 	br	10009c04 <__mdiff+0x94>
10009bf4:	18005616 	blt	r3,zero,10009d50 <__mdiff+0x1e0>
10009bf8:	34400504 	addi	r17,r6,20
10009bfc:	2c000504 	addi	r16,r5,20
10009c00:	0029883a 	mov	r20,zero
10009c04:	91400117 	ldw	r5,4(r18)
10009c08:	000918c0 	call	1000918c <_Balloc>
10009c0c:	92400417 	ldw	r9,16(r18)
10009c10:	9b000417 	ldw	r12,16(r19)
10009c14:	12c00504 	addi	r11,r2,20
10009c18:	4a51883a 	add	r8,r9,r9
10009c1c:	6319883a 	add	r12,r12,r12
10009c20:	4211883a 	add	r8,r8,r8
10009c24:	6319883a 	add	r12,r12,r12
10009c28:	15000315 	stw	r20,12(r2)
10009c2c:	8211883a 	add	r8,r16,r8
10009c30:	8b19883a 	add	r12,r17,r12
10009c34:	0007883a 	mov	r3,zero
10009c38:	81400017 	ldw	r5,0(r16)
10009c3c:	89c00017 	ldw	r7,0(r17)
10009c40:	59800104 	addi	r6,r11,4
10009c44:	293fffcc 	andi	r4,r5,65535
10009c48:	20c7883a 	add	r3,r4,r3
10009c4c:	393fffcc 	andi	r4,r7,65535
10009c50:	1909c83a 	sub	r4,r3,r4
10009c54:	280ad43a 	srli	r5,r5,16
10009c58:	380ed43a 	srli	r7,r7,16
10009c5c:	2007d43a 	srai	r3,r4,16
10009c60:	213fffcc 	andi	r4,r4,65535
10009c64:	29cbc83a 	sub	r5,r5,r7
10009c68:	28c7883a 	add	r3,r5,r3
10009c6c:	180a943a 	slli	r5,r3,16
10009c70:	8c400104 	addi	r17,r17,4
10009c74:	84000104 	addi	r16,r16,4
10009c78:	2908b03a 	or	r4,r5,r4
10009c7c:	59000015 	stw	r4,0(r11)
10009c80:	1807d43a 	srai	r3,r3,16
10009c84:	3015883a 	mov	r10,r6
10009c88:	3017883a 	mov	r11,r6
10009c8c:	8b3fea36 	bltu	r17,r12,10009c38 <__alt_data_end+0xf8009c38>
10009c90:	8200162e 	bgeu	r16,r8,10009cec <__mdiff+0x17c>
10009c94:	8017883a 	mov	r11,r16
10009c98:	59400017 	ldw	r5,0(r11)
10009c9c:	31800104 	addi	r6,r6,4
10009ca0:	5ac00104 	addi	r11,r11,4
10009ca4:	293fffcc 	andi	r4,r5,65535
10009ca8:	20c7883a 	add	r3,r4,r3
10009cac:	280ed43a 	srli	r7,r5,16
10009cb0:	180bd43a 	srai	r5,r3,16
10009cb4:	193fffcc 	andi	r4,r3,65535
10009cb8:	3947883a 	add	r3,r7,r5
10009cbc:	180a943a 	slli	r5,r3,16
10009cc0:	1807d43a 	srai	r3,r3,16
10009cc4:	2908b03a 	or	r4,r5,r4
10009cc8:	313fff15 	stw	r4,-4(r6)
10009ccc:	5a3ff236 	bltu	r11,r8,10009c98 <__alt_data_end+0xf8009c98>
10009cd0:	0406303a 	nor	r3,zero,r16
10009cd4:	1a07883a 	add	r3,r3,r8
10009cd8:	1806d0ba 	srli	r3,r3,2
10009cdc:	18c00044 	addi	r3,r3,1
10009ce0:	18c7883a 	add	r3,r3,r3
10009ce4:	18c7883a 	add	r3,r3,r3
10009ce8:	50d5883a 	add	r10,r10,r3
10009cec:	50ffff04 	addi	r3,r10,-4
10009cf0:	2000041e 	bne	r4,zero,10009d04 <__mdiff+0x194>
10009cf4:	18ffff04 	addi	r3,r3,-4
10009cf8:	19000017 	ldw	r4,0(r3)
10009cfc:	4a7fffc4 	addi	r9,r9,-1
10009d00:	203ffc26 	beq	r4,zero,10009cf4 <__alt_data_end+0xf8009cf4>
10009d04:	12400415 	stw	r9,16(r2)
10009d08:	dfc00517 	ldw	ra,20(sp)
10009d0c:	dd000417 	ldw	r20,16(sp)
10009d10:	dcc00317 	ldw	r19,12(sp)
10009d14:	dc800217 	ldw	r18,8(sp)
10009d18:	dc400117 	ldw	r17,4(sp)
10009d1c:	dc000017 	ldw	r16,0(sp)
10009d20:	dec00604 	addi	sp,sp,24
10009d24:	f800283a 	ret
10009d28:	000b883a 	mov	r5,zero
10009d2c:	000918c0 	call	1000918c <_Balloc>
10009d30:	00c00044 	movi	r3,1
10009d34:	10c00415 	stw	r3,16(r2)
10009d38:	10000515 	stw	zero,20(r2)
10009d3c:	003ff206 	br	10009d08 <__alt_data_end+0xf8009d08>
10009d40:	8023883a 	mov	r17,r16
10009d44:	0029883a 	mov	r20,zero
10009d48:	4021883a 	mov	r16,r8
10009d4c:	003fad06 	br	10009c04 <__alt_data_end+0xf8009c04>
10009d50:	9005883a 	mov	r2,r18
10009d54:	94400504 	addi	r17,r18,20
10009d58:	9c000504 	addi	r16,r19,20
10009d5c:	9825883a 	mov	r18,r19
10009d60:	05000044 	movi	r20,1
10009d64:	1027883a 	mov	r19,r2
10009d68:	003fa606 	br	10009c04 <__alt_data_end+0xf8009c04>

10009d6c <__ulp>:
10009d6c:	295ffc2c 	andhi	r5,r5,32752
10009d70:	00bf3034 	movhi	r2,64704
10009d74:	2887883a 	add	r3,r5,r2
10009d78:	00c0020e 	bge	zero,r3,10009d84 <__ulp+0x18>
10009d7c:	0005883a 	mov	r2,zero
10009d80:	f800283a 	ret
10009d84:	00c7c83a 	sub	r3,zero,r3
10009d88:	1807d53a 	srai	r3,r3,20
10009d8c:	008004c4 	movi	r2,19
10009d90:	10c00b0e 	bge	r2,r3,10009dc0 <__ulp+0x54>
10009d94:	18bffb04 	addi	r2,r3,-20
10009d98:	01000784 	movi	r4,30
10009d9c:	0007883a 	mov	r3,zero
10009da0:	20800516 	blt	r4,r2,10009db8 <__ulp+0x4c>
10009da4:	010007c4 	movi	r4,31
10009da8:	2089c83a 	sub	r4,r4,r2
10009dac:	00800044 	movi	r2,1
10009db0:	1104983a 	sll	r2,r2,r4
10009db4:	f800283a 	ret
10009db8:	00800044 	movi	r2,1
10009dbc:	f800283a 	ret
10009dc0:	01400234 	movhi	r5,8
10009dc4:	28c7d83a 	sra	r3,r5,r3
10009dc8:	0005883a 	mov	r2,zero
10009dcc:	f800283a 	ret

10009dd0 <__b2d>:
10009dd0:	defffa04 	addi	sp,sp,-24
10009dd4:	dc000015 	stw	r16,0(sp)
10009dd8:	24000417 	ldw	r16,16(r4)
10009ddc:	dc400115 	stw	r17,4(sp)
10009de0:	24400504 	addi	r17,r4,20
10009de4:	8421883a 	add	r16,r16,r16
10009de8:	8421883a 	add	r16,r16,r16
10009dec:	8c21883a 	add	r16,r17,r16
10009df0:	dc800215 	stw	r18,8(sp)
10009df4:	84bfff17 	ldw	r18,-4(r16)
10009df8:	dd000415 	stw	r20,16(sp)
10009dfc:	dcc00315 	stw	r19,12(sp)
10009e00:	9009883a 	mov	r4,r18
10009e04:	2829883a 	mov	r20,r5
10009e08:	dfc00515 	stw	ra,20(sp)
10009e0c:	00094a80 	call	100094a8 <__hi0bits>
10009e10:	00c00804 	movi	r3,32
10009e14:	1889c83a 	sub	r4,r3,r2
10009e18:	a1000015 	stw	r4,0(r20)
10009e1c:	01000284 	movi	r4,10
10009e20:	84ffff04 	addi	r19,r16,-4
10009e24:	20801216 	blt	r4,r2,10009e70 <__b2d+0xa0>
10009e28:	018002c4 	movi	r6,11
10009e2c:	308dc83a 	sub	r6,r6,r2
10009e30:	9186d83a 	srl	r3,r18,r6
10009e34:	18cffc34 	orhi	r3,r3,16368
10009e38:	8cc0212e 	bgeu	r17,r19,10009ec0 <__b2d+0xf0>
10009e3c:	813ffe17 	ldw	r4,-8(r16)
10009e40:	218cd83a 	srl	r6,r4,r6
10009e44:	10800544 	addi	r2,r2,21
10009e48:	9084983a 	sll	r2,r18,r2
10009e4c:	1184b03a 	or	r2,r2,r6
10009e50:	dfc00517 	ldw	ra,20(sp)
10009e54:	dd000417 	ldw	r20,16(sp)
10009e58:	dcc00317 	ldw	r19,12(sp)
10009e5c:	dc800217 	ldw	r18,8(sp)
10009e60:	dc400117 	ldw	r17,4(sp)
10009e64:	dc000017 	ldw	r16,0(sp)
10009e68:	dec00604 	addi	sp,sp,24
10009e6c:	f800283a 	ret
10009e70:	8cc00f2e 	bgeu	r17,r19,10009eb0 <__b2d+0xe0>
10009e74:	117ffd44 	addi	r5,r2,-11
10009e78:	80bffe17 	ldw	r2,-8(r16)
10009e7c:	28000e26 	beq	r5,zero,10009eb8 <__b2d+0xe8>
10009e80:	1949c83a 	sub	r4,r3,r5
10009e84:	9164983a 	sll	r18,r18,r5
10009e88:	1106d83a 	srl	r3,r2,r4
10009e8c:	81bffe04 	addi	r6,r16,-8
10009e90:	948ffc34 	orhi	r18,r18,16368
10009e94:	90c6b03a 	or	r3,r18,r3
10009e98:	89800e2e 	bgeu	r17,r6,10009ed4 <__b2d+0x104>
10009e9c:	81bffd17 	ldw	r6,-12(r16)
10009ea0:	1144983a 	sll	r2,r2,r5
10009ea4:	310ad83a 	srl	r5,r6,r4
10009ea8:	2884b03a 	or	r2,r5,r2
10009eac:	003fe806 	br	10009e50 <__alt_data_end+0xf8009e50>
10009eb0:	10bffd44 	addi	r2,r2,-11
10009eb4:	1000041e 	bne	r2,zero,10009ec8 <__b2d+0xf8>
10009eb8:	90cffc34 	orhi	r3,r18,16368
10009ebc:	003fe406 	br	10009e50 <__alt_data_end+0xf8009e50>
10009ec0:	000d883a 	mov	r6,zero
10009ec4:	003fdf06 	br	10009e44 <__alt_data_end+0xf8009e44>
10009ec8:	90a4983a 	sll	r18,r18,r2
10009ecc:	0005883a 	mov	r2,zero
10009ed0:	003ff906 	br	10009eb8 <__alt_data_end+0xf8009eb8>
10009ed4:	1144983a 	sll	r2,r2,r5
10009ed8:	003fdd06 	br	10009e50 <__alt_data_end+0xf8009e50>

10009edc <__d2b>:
10009edc:	defff804 	addi	sp,sp,-32
10009ee0:	dc000215 	stw	r16,8(sp)
10009ee4:	3021883a 	mov	r16,r6
10009ee8:	dc400315 	stw	r17,12(sp)
10009eec:	8022907a 	slli	r17,r16,1
10009ef0:	dd000615 	stw	r20,24(sp)
10009ef4:	2829883a 	mov	r20,r5
10009ef8:	01400044 	movi	r5,1
10009efc:	dcc00515 	stw	r19,20(sp)
10009f00:	dc800415 	stw	r18,16(sp)
10009f04:	dfc00715 	stw	ra,28(sp)
10009f08:	3825883a 	mov	r18,r7
10009f0c:	8822d57a 	srli	r17,r17,21
10009f10:	000918c0 	call	1000918c <_Balloc>
10009f14:	1027883a 	mov	r19,r2
10009f18:	00800434 	movhi	r2,16
10009f1c:	10bfffc4 	addi	r2,r2,-1
10009f20:	808c703a 	and	r6,r16,r2
10009f24:	88000126 	beq	r17,zero,10009f2c <__d2b+0x50>
10009f28:	31800434 	orhi	r6,r6,16
10009f2c:	d9800015 	stw	r6,0(sp)
10009f30:	a0002426 	beq	r20,zero,10009fc4 <__d2b+0xe8>
10009f34:	d9000104 	addi	r4,sp,4
10009f38:	dd000115 	stw	r20,4(sp)
10009f3c:	00095100 	call	10009510 <__lo0bits>
10009f40:	d8c00017 	ldw	r3,0(sp)
10009f44:	10002f1e 	bne	r2,zero,1000a004 <__d2b+0x128>
10009f48:	d9000117 	ldw	r4,4(sp)
10009f4c:	99000515 	stw	r4,20(r19)
10009f50:	1821003a 	cmpeq	r16,r3,zero
10009f54:	01000084 	movi	r4,2
10009f58:	2421c83a 	sub	r16,r4,r16
10009f5c:	98c00615 	stw	r3,24(r19)
10009f60:	9c000415 	stw	r16,16(r19)
10009f64:	88001f1e 	bne	r17,zero,10009fe4 <__d2b+0x108>
10009f68:	10bef384 	addi	r2,r2,-1074
10009f6c:	90800015 	stw	r2,0(r18)
10009f70:	00900034 	movhi	r2,16384
10009f74:	10bfffc4 	addi	r2,r2,-1
10009f78:	8085883a 	add	r2,r16,r2
10009f7c:	1085883a 	add	r2,r2,r2
10009f80:	1085883a 	add	r2,r2,r2
10009f84:	9885883a 	add	r2,r19,r2
10009f88:	11000517 	ldw	r4,20(r2)
10009f8c:	8020917a 	slli	r16,r16,5
10009f90:	00094a80 	call	100094a8 <__hi0bits>
10009f94:	d8c00817 	ldw	r3,32(sp)
10009f98:	8085c83a 	sub	r2,r16,r2
10009f9c:	18800015 	stw	r2,0(r3)
10009fa0:	9805883a 	mov	r2,r19
10009fa4:	dfc00717 	ldw	ra,28(sp)
10009fa8:	dd000617 	ldw	r20,24(sp)
10009fac:	dcc00517 	ldw	r19,20(sp)
10009fb0:	dc800417 	ldw	r18,16(sp)
10009fb4:	dc400317 	ldw	r17,12(sp)
10009fb8:	dc000217 	ldw	r16,8(sp)
10009fbc:	dec00804 	addi	sp,sp,32
10009fc0:	f800283a 	ret
10009fc4:	d809883a 	mov	r4,sp
10009fc8:	00095100 	call	10009510 <__lo0bits>
10009fcc:	d8c00017 	ldw	r3,0(sp)
10009fd0:	04000044 	movi	r16,1
10009fd4:	9c000415 	stw	r16,16(r19)
10009fd8:	98c00515 	stw	r3,20(r19)
10009fdc:	10800804 	addi	r2,r2,32
10009fe0:	883fe126 	beq	r17,zero,10009f68 <__alt_data_end+0xf8009f68>
10009fe4:	00c00d44 	movi	r3,53
10009fe8:	8c7ef344 	addi	r17,r17,-1075
10009fec:	88a3883a 	add	r17,r17,r2
10009ff0:	1885c83a 	sub	r2,r3,r2
10009ff4:	d8c00817 	ldw	r3,32(sp)
10009ff8:	94400015 	stw	r17,0(r18)
10009ffc:	18800015 	stw	r2,0(r3)
1000a000:	003fe706 	br	10009fa0 <__alt_data_end+0xf8009fa0>
1000a004:	01000804 	movi	r4,32
1000a008:	2089c83a 	sub	r4,r4,r2
1000a00c:	1908983a 	sll	r4,r3,r4
1000a010:	d9400117 	ldw	r5,4(sp)
1000a014:	1886d83a 	srl	r3,r3,r2
1000a018:	2148b03a 	or	r4,r4,r5
1000a01c:	99000515 	stw	r4,20(r19)
1000a020:	d8c00015 	stw	r3,0(sp)
1000a024:	003fca06 	br	10009f50 <__alt_data_end+0xf8009f50>

1000a028 <__ratio>:
1000a028:	defff904 	addi	sp,sp,-28
1000a02c:	dc400315 	stw	r17,12(sp)
1000a030:	2823883a 	mov	r17,r5
1000a034:	d9400104 	addi	r5,sp,4
1000a038:	dfc00615 	stw	ra,24(sp)
1000a03c:	dcc00515 	stw	r19,20(sp)
1000a040:	dc800415 	stw	r18,16(sp)
1000a044:	2027883a 	mov	r19,r4
1000a048:	dc000215 	stw	r16,8(sp)
1000a04c:	0009dd00 	call	10009dd0 <__b2d>
1000a050:	d80b883a 	mov	r5,sp
1000a054:	8809883a 	mov	r4,r17
1000a058:	1025883a 	mov	r18,r2
1000a05c:	1821883a 	mov	r16,r3
1000a060:	0009dd00 	call	10009dd0 <__b2d>
1000a064:	8a000417 	ldw	r8,16(r17)
1000a068:	99000417 	ldw	r4,16(r19)
1000a06c:	d9400117 	ldw	r5,4(sp)
1000a070:	2209c83a 	sub	r4,r4,r8
1000a074:	2010917a 	slli	r8,r4,5
1000a078:	d9000017 	ldw	r4,0(sp)
1000a07c:	2909c83a 	sub	r4,r5,r4
1000a080:	4109883a 	add	r4,r8,r4
1000a084:	01000e0e 	bge	zero,r4,1000a0c0 <__ratio+0x98>
1000a088:	2008953a 	slli	r4,r4,20
1000a08c:	2421883a 	add	r16,r4,r16
1000a090:	100d883a 	mov	r6,r2
1000a094:	180f883a 	mov	r7,r3
1000a098:	9009883a 	mov	r4,r18
1000a09c:	800b883a 	mov	r5,r16
1000a0a0:	000d9e80 	call	1000d9e8 <__divdf3>
1000a0a4:	dfc00617 	ldw	ra,24(sp)
1000a0a8:	dcc00517 	ldw	r19,20(sp)
1000a0ac:	dc800417 	ldw	r18,16(sp)
1000a0b0:	dc400317 	ldw	r17,12(sp)
1000a0b4:	dc000217 	ldw	r16,8(sp)
1000a0b8:	dec00704 	addi	sp,sp,28
1000a0bc:	f800283a 	ret
1000a0c0:	2008953a 	slli	r4,r4,20
1000a0c4:	1907c83a 	sub	r3,r3,r4
1000a0c8:	003ff106 	br	1000a090 <__alt_data_end+0xf800a090>

1000a0cc <_mprec_log10>:
1000a0cc:	defffe04 	addi	sp,sp,-8
1000a0d0:	dc000015 	stw	r16,0(sp)
1000a0d4:	dfc00115 	stw	ra,4(sp)
1000a0d8:	008005c4 	movi	r2,23
1000a0dc:	2021883a 	mov	r16,r4
1000a0e0:	11000d0e 	bge	r2,r4,1000a118 <_mprec_log10+0x4c>
1000a0e4:	0005883a 	mov	r2,zero
1000a0e8:	00cffc34 	movhi	r3,16368
1000a0ec:	843fffc4 	addi	r16,r16,-1
1000a0f0:	000d883a 	mov	r6,zero
1000a0f4:	01d00934 	movhi	r7,16420
1000a0f8:	1009883a 	mov	r4,r2
1000a0fc:	180b883a 	mov	r5,r3
1000a100:	000e6100 	call	1000e610 <__muldf3>
1000a104:	803ff91e 	bne	r16,zero,1000a0ec <__alt_data_end+0xf800a0ec>
1000a108:	dfc00117 	ldw	ra,4(sp)
1000a10c:	dc000017 	ldw	r16,0(sp)
1000a110:	dec00204 	addi	sp,sp,8
1000a114:	f800283a 	ret
1000a118:	202090fa 	slli	r16,r4,3
1000a11c:	00840074 	movhi	r2,4097
1000a120:	1089db04 	addi	r2,r2,10092
1000a124:	1421883a 	add	r16,r2,r16
1000a128:	80800017 	ldw	r2,0(r16)
1000a12c:	80c00117 	ldw	r3,4(r16)
1000a130:	dfc00117 	ldw	ra,4(sp)
1000a134:	dc000017 	ldw	r16,0(sp)
1000a138:	dec00204 	addi	sp,sp,8
1000a13c:	f800283a 	ret

1000a140 <__copybits>:
1000a140:	297fffc4 	addi	r5,r5,-1
1000a144:	280fd17a 	srai	r7,r5,5
1000a148:	30c00417 	ldw	r3,16(r6)
1000a14c:	30800504 	addi	r2,r6,20
1000a150:	39c00044 	addi	r7,r7,1
1000a154:	18c7883a 	add	r3,r3,r3
1000a158:	39cf883a 	add	r7,r7,r7
1000a15c:	18c7883a 	add	r3,r3,r3
1000a160:	39cf883a 	add	r7,r7,r7
1000a164:	10c7883a 	add	r3,r2,r3
1000a168:	21cf883a 	add	r7,r4,r7
1000a16c:	10c00d2e 	bgeu	r2,r3,1000a1a4 <__copybits+0x64>
1000a170:	200b883a 	mov	r5,r4
1000a174:	12000017 	ldw	r8,0(r2)
1000a178:	29400104 	addi	r5,r5,4
1000a17c:	10800104 	addi	r2,r2,4
1000a180:	2a3fff15 	stw	r8,-4(r5)
1000a184:	10fffb36 	bltu	r2,r3,1000a174 <__alt_data_end+0xf800a174>
1000a188:	1985c83a 	sub	r2,r3,r6
1000a18c:	10bffac4 	addi	r2,r2,-21
1000a190:	1004d0ba 	srli	r2,r2,2
1000a194:	10800044 	addi	r2,r2,1
1000a198:	1085883a 	add	r2,r2,r2
1000a19c:	1085883a 	add	r2,r2,r2
1000a1a0:	2089883a 	add	r4,r4,r2
1000a1a4:	21c0032e 	bgeu	r4,r7,1000a1b4 <__copybits+0x74>
1000a1a8:	20000015 	stw	zero,0(r4)
1000a1ac:	21000104 	addi	r4,r4,4
1000a1b0:	21fffd36 	bltu	r4,r7,1000a1a8 <__alt_data_end+0xf800a1a8>
1000a1b4:	f800283a 	ret

1000a1b8 <__any_on>:
1000a1b8:	20c00417 	ldw	r3,16(r4)
1000a1bc:	2805d17a 	srai	r2,r5,5
1000a1c0:	21000504 	addi	r4,r4,20
1000a1c4:	18800d0e 	bge	r3,r2,1000a1fc <__any_on+0x44>
1000a1c8:	18c7883a 	add	r3,r3,r3
1000a1cc:	18c7883a 	add	r3,r3,r3
1000a1d0:	20c7883a 	add	r3,r4,r3
1000a1d4:	20c0192e 	bgeu	r4,r3,1000a23c <__any_on+0x84>
1000a1d8:	18bfff17 	ldw	r2,-4(r3)
1000a1dc:	18ffff04 	addi	r3,r3,-4
1000a1e0:	1000041e 	bne	r2,zero,1000a1f4 <__any_on+0x3c>
1000a1e4:	20c0142e 	bgeu	r4,r3,1000a238 <__any_on+0x80>
1000a1e8:	18ffff04 	addi	r3,r3,-4
1000a1ec:	19400017 	ldw	r5,0(r3)
1000a1f0:	283ffc26 	beq	r5,zero,1000a1e4 <__alt_data_end+0xf800a1e4>
1000a1f4:	00800044 	movi	r2,1
1000a1f8:	f800283a 	ret
1000a1fc:	10c00a0e 	bge	r2,r3,1000a228 <__any_on+0x70>
1000a200:	1085883a 	add	r2,r2,r2
1000a204:	1085883a 	add	r2,r2,r2
1000a208:	294007cc 	andi	r5,r5,31
1000a20c:	2087883a 	add	r3,r4,r2
1000a210:	283ff026 	beq	r5,zero,1000a1d4 <__alt_data_end+0xf800a1d4>
1000a214:	19800017 	ldw	r6,0(r3)
1000a218:	3144d83a 	srl	r2,r6,r5
1000a21c:	114a983a 	sll	r5,r2,r5
1000a220:	317ff41e 	bne	r6,r5,1000a1f4 <__alt_data_end+0xf800a1f4>
1000a224:	003feb06 	br	1000a1d4 <__alt_data_end+0xf800a1d4>
1000a228:	1085883a 	add	r2,r2,r2
1000a22c:	1085883a 	add	r2,r2,r2
1000a230:	2087883a 	add	r3,r4,r2
1000a234:	003fe706 	br	1000a1d4 <__alt_data_end+0xf800a1d4>
1000a238:	f800283a 	ret
1000a23c:	0005883a 	mov	r2,zero
1000a240:	f800283a 	ret

1000a244 <_putc_r>:
1000a244:	defffc04 	addi	sp,sp,-16
1000a248:	dc000215 	stw	r16,8(sp)
1000a24c:	dfc00315 	stw	ra,12(sp)
1000a250:	2021883a 	mov	r16,r4
1000a254:	20000226 	beq	r4,zero,1000a260 <_putc_r+0x1c>
1000a258:	20800e17 	ldw	r2,56(r4)
1000a25c:	10001b26 	beq	r2,zero,1000a2cc <_putc_r+0x88>
1000a260:	30800217 	ldw	r2,8(r6)
1000a264:	10bfffc4 	addi	r2,r2,-1
1000a268:	30800215 	stw	r2,8(r6)
1000a26c:	10000a16 	blt	r2,zero,1000a298 <_putc_r+0x54>
1000a270:	30800017 	ldw	r2,0(r6)
1000a274:	11400005 	stb	r5,0(r2)
1000a278:	30800017 	ldw	r2,0(r6)
1000a27c:	10c00044 	addi	r3,r2,1
1000a280:	30c00015 	stw	r3,0(r6)
1000a284:	10800003 	ldbu	r2,0(r2)
1000a288:	dfc00317 	ldw	ra,12(sp)
1000a28c:	dc000217 	ldw	r16,8(sp)
1000a290:	dec00404 	addi	sp,sp,16
1000a294:	f800283a 	ret
1000a298:	30c00617 	ldw	r3,24(r6)
1000a29c:	10c00616 	blt	r2,r3,1000a2b8 <_putc_r+0x74>
1000a2a0:	30800017 	ldw	r2,0(r6)
1000a2a4:	00c00284 	movi	r3,10
1000a2a8:	11400005 	stb	r5,0(r2)
1000a2ac:	30800017 	ldw	r2,0(r6)
1000a2b0:	11400003 	ldbu	r5,0(r2)
1000a2b4:	28fff11e 	bne	r5,r3,1000a27c <__alt_data_end+0xf800a27c>
1000a2b8:	8009883a 	mov	r4,r16
1000a2bc:	dfc00317 	ldw	ra,12(sp)
1000a2c0:	dc000217 	ldw	r16,8(sp)
1000a2c4:	dec00404 	addi	sp,sp,16
1000a2c8:	000bf581 	jmpi	1000bf58 <__swbuf_r>
1000a2cc:	d9400015 	stw	r5,0(sp)
1000a2d0:	d9800115 	stw	r6,4(sp)
1000a2d4:	0001f440 	call	10001f44 <__sinit>
1000a2d8:	d9800117 	ldw	r6,4(sp)
1000a2dc:	d9400017 	ldw	r5,0(sp)
1000a2e0:	003fdf06 	br	1000a260 <__alt_data_end+0xf800a260>

1000a2e4 <putc>:
1000a2e4:	00840074 	movhi	r2,4097
1000a2e8:	defffc04 	addi	sp,sp,-16
1000a2ec:	10914b04 	addi	r2,r2,17708
1000a2f0:	dc000115 	stw	r16,4(sp)
1000a2f4:	14000017 	ldw	r16,0(r2)
1000a2f8:	dc400215 	stw	r17,8(sp)
1000a2fc:	dfc00315 	stw	ra,12(sp)
1000a300:	2023883a 	mov	r17,r4
1000a304:	80000226 	beq	r16,zero,1000a310 <putc+0x2c>
1000a308:	80800e17 	ldw	r2,56(r16)
1000a30c:	10001a26 	beq	r2,zero,1000a378 <putc+0x94>
1000a310:	28800217 	ldw	r2,8(r5)
1000a314:	10bfffc4 	addi	r2,r2,-1
1000a318:	28800215 	stw	r2,8(r5)
1000a31c:	10000b16 	blt	r2,zero,1000a34c <putc+0x68>
1000a320:	28800017 	ldw	r2,0(r5)
1000a324:	14400005 	stb	r17,0(r2)
1000a328:	28800017 	ldw	r2,0(r5)
1000a32c:	10c00044 	addi	r3,r2,1
1000a330:	28c00015 	stw	r3,0(r5)
1000a334:	10800003 	ldbu	r2,0(r2)
1000a338:	dfc00317 	ldw	ra,12(sp)
1000a33c:	dc400217 	ldw	r17,8(sp)
1000a340:	dc000117 	ldw	r16,4(sp)
1000a344:	dec00404 	addi	sp,sp,16
1000a348:	f800283a 	ret
1000a34c:	28c00617 	ldw	r3,24(r5)
1000a350:	10c00e16 	blt	r2,r3,1000a38c <putc+0xa8>
1000a354:	28800017 	ldw	r2,0(r5)
1000a358:	01000284 	movi	r4,10
1000a35c:	14400005 	stb	r17,0(r2)
1000a360:	28800017 	ldw	r2,0(r5)
1000a364:	10c00003 	ldbu	r3,0(r2)
1000a368:	193ff01e 	bne	r3,r4,1000a32c <__alt_data_end+0xf800a32c>
1000a36c:	280d883a 	mov	r6,r5
1000a370:	180b883a 	mov	r5,r3
1000a374:	00000706 	br	1000a394 <putc+0xb0>
1000a378:	8009883a 	mov	r4,r16
1000a37c:	d9400015 	stw	r5,0(sp)
1000a380:	0001f440 	call	10001f44 <__sinit>
1000a384:	d9400017 	ldw	r5,0(sp)
1000a388:	003fe106 	br	1000a310 <__alt_data_end+0xf800a310>
1000a38c:	280d883a 	mov	r6,r5
1000a390:	880b883a 	mov	r5,r17
1000a394:	8009883a 	mov	r4,r16
1000a398:	dfc00317 	ldw	ra,12(sp)
1000a39c:	dc400217 	ldw	r17,8(sp)
1000a3a0:	dc000117 	ldw	r16,4(sp)
1000a3a4:	dec00404 	addi	sp,sp,16
1000a3a8:	000bf581 	jmpi	1000bf58 <__swbuf_r>

1000a3ac <_read_r>:
1000a3ac:	defffd04 	addi	sp,sp,-12
1000a3b0:	2805883a 	mov	r2,r5
1000a3b4:	dc000015 	stw	r16,0(sp)
1000a3b8:	04040074 	movhi	r16,4097
1000a3bc:	dc400115 	stw	r17,4(sp)
1000a3c0:	300b883a 	mov	r5,r6
1000a3c4:	84187404 	addi	r16,r16,25040
1000a3c8:	2023883a 	mov	r17,r4
1000a3cc:	380d883a 	mov	r6,r7
1000a3d0:	1009883a 	mov	r4,r2
1000a3d4:	dfc00215 	stw	ra,8(sp)
1000a3d8:	80000015 	stw	zero,0(r16)
1000a3dc:	00009100 	call	10000910 <read>
1000a3e0:	00ffffc4 	movi	r3,-1
1000a3e4:	10c00526 	beq	r2,r3,1000a3fc <_read_r+0x50>
1000a3e8:	dfc00217 	ldw	ra,8(sp)
1000a3ec:	dc400117 	ldw	r17,4(sp)
1000a3f0:	dc000017 	ldw	r16,0(sp)
1000a3f4:	dec00304 	addi	sp,sp,12
1000a3f8:	f800283a 	ret
1000a3fc:	80c00017 	ldw	r3,0(r16)
1000a400:	183ff926 	beq	r3,zero,1000a3e8 <__alt_data_end+0xf800a3e8>
1000a404:	88c00015 	stw	r3,0(r17)
1000a408:	003ff706 	br	1000a3e8 <__alt_data_end+0xf800a3e8>

1000a40c <__fpclassifyd>:
1000a40c:	00a00034 	movhi	r2,32768
1000a410:	10bfffc4 	addi	r2,r2,-1
1000a414:	2884703a 	and	r2,r5,r2
1000a418:	10000726 	beq	r2,zero,1000a438 <__fpclassifyd+0x2c>
1000a41c:	00fffc34 	movhi	r3,65520
1000a420:	019ff834 	movhi	r6,32736
1000a424:	28c7883a 	add	r3,r5,r3
1000a428:	31bfffc4 	addi	r6,r6,-1
1000a42c:	30c00536 	bltu	r6,r3,1000a444 <__fpclassifyd+0x38>
1000a430:	00800104 	movi	r2,4
1000a434:	f800283a 	ret
1000a438:	2000021e 	bne	r4,zero,1000a444 <__fpclassifyd+0x38>
1000a43c:	00800084 	movi	r2,2
1000a440:	f800283a 	ret
1000a444:	00dffc34 	movhi	r3,32752
1000a448:	019ff834 	movhi	r6,32736
1000a44c:	28cb883a 	add	r5,r5,r3
1000a450:	31bfffc4 	addi	r6,r6,-1
1000a454:	317ff62e 	bgeu	r6,r5,1000a430 <__alt_data_end+0xf800a430>
1000a458:	01400434 	movhi	r5,16
1000a45c:	297fffc4 	addi	r5,r5,-1
1000a460:	28800236 	bltu	r5,r2,1000a46c <__fpclassifyd+0x60>
1000a464:	008000c4 	movi	r2,3
1000a468:	f800283a 	ret
1000a46c:	10c00226 	beq	r2,r3,1000a478 <__fpclassifyd+0x6c>
1000a470:	0005883a 	mov	r2,zero
1000a474:	f800283a 	ret
1000a478:	2005003a 	cmpeq	r2,r4,zero
1000a47c:	f800283a 	ret

1000a480 <_init_signal_r>:
1000a480:	2080b717 	ldw	r2,732(r4)
1000a484:	10000226 	beq	r2,zero,1000a490 <_init_signal_r+0x10>
1000a488:	0005883a 	mov	r2,zero
1000a48c:	f800283a 	ret
1000a490:	defffe04 	addi	sp,sp,-8
1000a494:	01402004 	movi	r5,128
1000a498:	dc000015 	stw	r16,0(sp)
1000a49c:	dfc00115 	stw	ra,4(sp)
1000a4a0:	2021883a 	mov	r16,r4
1000a4a4:	000325c0 	call	1000325c <_malloc_r>
1000a4a8:	8080b715 	stw	r2,732(r16)
1000a4ac:	10000d26 	beq	r2,zero,1000a4e4 <_init_signal_r+0x64>
1000a4b0:	0007883a 	mov	r3,zero
1000a4b4:	01002004 	movi	r4,128
1000a4b8:	00000106 	br	1000a4c0 <_init_signal_r+0x40>
1000a4bc:	8080b717 	ldw	r2,732(r16)
1000a4c0:	10c5883a 	add	r2,r2,r3
1000a4c4:	10000015 	stw	zero,0(r2)
1000a4c8:	18c00104 	addi	r3,r3,4
1000a4cc:	193ffb1e 	bne	r3,r4,1000a4bc <__alt_data_end+0xf800a4bc>
1000a4d0:	0005883a 	mov	r2,zero
1000a4d4:	dfc00117 	ldw	ra,4(sp)
1000a4d8:	dc000017 	ldw	r16,0(sp)
1000a4dc:	dec00204 	addi	sp,sp,8
1000a4e0:	f800283a 	ret
1000a4e4:	00bfffc4 	movi	r2,-1
1000a4e8:	003ffa06 	br	1000a4d4 <__alt_data_end+0xf800a4d4>

1000a4ec <_signal_r>:
1000a4ec:	00c007c4 	movi	r3,31
1000a4f0:	19401536 	bltu	r3,r5,1000a548 <_signal_r+0x5c>
1000a4f4:	2080b717 	ldw	r2,732(r4)
1000a4f8:	defffc04 	addi	sp,sp,-16
1000a4fc:	dc800215 	stw	r18,8(sp)
1000a500:	dc400115 	stw	r17,4(sp)
1000a504:	dc000015 	stw	r16,0(sp)
1000a508:	dfc00315 	stw	ra,12(sp)
1000a50c:	3023883a 	mov	r17,r6
1000a510:	2021883a 	mov	r16,r4
1000a514:	2825883a 	mov	r18,r5
1000a518:	10000f26 	beq	r2,zero,1000a558 <_signal_r+0x6c>
1000a51c:	948b883a 	add	r5,r18,r18
1000a520:	294b883a 	add	r5,r5,r5
1000a524:	114b883a 	add	r5,r2,r5
1000a528:	28800017 	ldw	r2,0(r5)
1000a52c:	2c400015 	stw	r17,0(r5)
1000a530:	dfc00317 	ldw	ra,12(sp)
1000a534:	dc800217 	ldw	r18,8(sp)
1000a538:	dc400117 	ldw	r17,4(sp)
1000a53c:	dc000017 	ldw	r16,0(sp)
1000a540:	dec00404 	addi	sp,sp,16
1000a544:	f800283a 	ret
1000a548:	00c00584 	movi	r3,22
1000a54c:	20c00015 	stw	r3,0(r4)
1000a550:	00bfffc4 	movi	r2,-1
1000a554:	f800283a 	ret
1000a558:	000a4800 	call	1000a480 <_init_signal_r>
1000a55c:	1000021e 	bne	r2,zero,1000a568 <_signal_r+0x7c>
1000a560:	8080b717 	ldw	r2,732(r16)
1000a564:	003fed06 	br	1000a51c <__alt_data_end+0xf800a51c>
1000a568:	00bfffc4 	movi	r2,-1
1000a56c:	003ff006 	br	1000a530 <__alt_data_end+0xf800a530>

1000a570 <_raise_r>:
1000a570:	008007c4 	movi	r2,31
1000a574:	11402936 	bltu	r2,r5,1000a61c <_raise_r+0xac>
1000a578:	20c0b717 	ldw	r3,732(r4)
1000a57c:	defffd04 	addi	sp,sp,-12
1000a580:	dc400115 	stw	r17,4(sp)
1000a584:	dc000015 	stw	r16,0(sp)
1000a588:	dfc00215 	stw	ra,8(sp)
1000a58c:	2021883a 	mov	r16,r4
1000a590:	2823883a 	mov	r17,r5
1000a594:	18001726 	beq	r3,zero,1000a5f4 <_raise_r+0x84>
1000a598:	2945883a 	add	r2,r5,r5
1000a59c:	1085883a 	add	r2,r2,r2
1000a5a0:	1887883a 	add	r3,r3,r2
1000a5a4:	19800017 	ldw	r6,0(r3)
1000a5a8:	30001226 	beq	r6,zero,1000a5f4 <_raise_r+0x84>
1000a5ac:	00800044 	movi	r2,1
1000a5b0:	30800e26 	beq	r6,r2,1000a5ec <_raise_r+0x7c>
1000a5b4:	013fffc4 	movi	r4,-1
1000a5b8:	31000926 	beq	r6,r4,1000a5e0 <_raise_r+0x70>
1000a5bc:	18000015 	stw	zero,0(r3)
1000a5c0:	2809883a 	mov	r4,r5
1000a5c4:	303ee83a 	callr	r6
1000a5c8:	0005883a 	mov	r2,zero
1000a5cc:	dfc00217 	ldw	ra,8(sp)
1000a5d0:	dc400117 	ldw	r17,4(sp)
1000a5d4:	dc000017 	ldw	r16,0(sp)
1000a5d8:	dec00304 	addi	sp,sp,12
1000a5dc:	f800283a 	ret
1000a5e0:	00c00584 	movi	r3,22
1000a5e4:	80c00015 	stw	r3,0(r16)
1000a5e8:	003ff806 	br	1000a5cc <__alt_data_end+0xf800a5cc>
1000a5ec:	0005883a 	mov	r2,zero
1000a5f0:	003ff606 	br	1000a5cc <__alt_data_end+0xf800a5cc>
1000a5f4:	8009883a 	mov	r4,r16
1000a5f8:	000a7800 	call	1000a780 <_getpid_r>
1000a5fc:	880d883a 	mov	r6,r17
1000a600:	100b883a 	mov	r5,r2
1000a604:	8009883a 	mov	r4,r16
1000a608:	dfc00217 	ldw	ra,8(sp)
1000a60c:	dc400117 	ldw	r17,4(sp)
1000a610:	dc000017 	ldw	r16,0(sp)
1000a614:	dec00304 	addi	sp,sp,12
1000a618:	000a7241 	jmpi	1000a724 <_kill_r>
1000a61c:	00800584 	movi	r2,22
1000a620:	20800015 	stw	r2,0(r4)
1000a624:	00bfffc4 	movi	r2,-1
1000a628:	f800283a 	ret

1000a62c <__sigtramp_r>:
1000a62c:	008007c4 	movi	r2,31
1000a630:	11402436 	bltu	r2,r5,1000a6c4 <__sigtramp_r+0x98>
1000a634:	20c0b717 	ldw	r3,732(r4)
1000a638:	defffd04 	addi	sp,sp,-12
1000a63c:	dc400115 	stw	r17,4(sp)
1000a640:	dc000015 	stw	r16,0(sp)
1000a644:	dfc00215 	stw	ra,8(sp)
1000a648:	2021883a 	mov	r16,r4
1000a64c:	2823883a 	mov	r17,r5
1000a650:	18001826 	beq	r3,zero,1000a6b4 <__sigtramp_r+0x88>
1000a654:	8c45883a 	add	r2,r17,r17
1000a658:	1085883a 	add	r2,r2,r2
1000a65c:	1885883a 	add	r2,r3,r2
1000a660:	10c00017 	ldw	r3,0(r2)
1000a664:	18001126 	beq	r3,zero,1000a6ac <__sigtramp_r+0x80>
1000a668:	013fffc4 	movi	r4,-1
1000a66c:	19000d26 	beq	r3,r4,1000a6a4 <__sigtramp_r+0x78>
1000a670:	01000044 	movi	r4,1
1000a674:	19000926 	beq	r3,r4,1000a69c <__sigtramp_r+0x70>
1000a678:	10000015 	stw	zero,0(r2)
1000a67c:	8809883a 	mov	r4,r17
1000a680:	183ee83a 	callr	r3
1000a684:	0005883a 	mov	r2,zero
1000a688:	dfc00217 	ldw	ra,8(sp)
1000a68c:	dc400117 	ldw	r17,4(sp)
1000a690:	dc000017 	ldw	r16,0(sp)
1000a694:	dec00304 	addi	sp,sp,12
1000a698:	f800283a 	ret
1000a69c:	008000c4 	movi	r2,3
1000a6a0:	003ff906 	br	1000a688 <__alt_data_end+0xf800a688>
1000a6a4:	00800084 	movi	r2,2
1000a6a8:	003ff706 	br	1000a688 <__alt_data_end+0xf800a688>
1000a6ac:	00800044 	movi	r2,1
1000a6b0:	003ff506 	br	1000a688 <__alt_data_end+0xf800a688>
1000a6b4:	000a4800 	call	1000a480 <_init_signal_r>
1000a6b8:	1000041e 	bne	r2,zero,1000a6cc <__sigtramp_r+0xa0>
1000a6bc:	80c0b717 	ldw	r3,732(r16)
1000a6c0:	003fe406 	br	1000a654 <__alt_data_end+0xf800a654>
1000a6c4:	00bfffc4 	movi	r2,-1
1000a6c8:	f800283a 	ret
1000a6cc:	00bfffc4 	movi	r2,-1
1000a6d0:	003fed06 	br	1000a688 <__alt_data_end+0xf800a688>

1000a6d4 <raise>:
1000a6d4:	00840074 	movhi	r2,4097
1000a6d8:	10914b04 	addi	r2,r2,17708
1000a6dc:	200b883a 	mov	r5,r4
1000a6e0:	11000017 	ldw	r4,0(r2)
1000a6e4:	000a5701 	jmpi	1000a570 <_raise_r>

1000a6e8 <signal>:
1000a6e8:	00840074 	movhi	r2,4097
1000a6ec:	10914b04 	addi	r2,r2,17708
1000a6f0:	280d883a 	mov	r6,r5
1000a6f4:	200b883a 	mov	r5,r4
1000a6f8:	11000017 	ldw	r4,0(r2)
1000a6fc:	000a4ec1 	jmpi	1000a4ec <_signal_r>

1000a700 <_init_signal>:
1000a700:	00840074 	movhi	r2,4097
1000a704:	10914b04 	addi	r2,r2,17708
1000a708:	11000017 	ldw	r4,0(r2)
1000a70c:	000a4801 	jmpi	1000a480 <_init_signal_r>

1000a710 <__sigtramp>:
1000a710:	00840074 	movhi	r2,4097
1000a714:	10914b04 	addi	r2,r2,17708
1000a718:	200b883a 	mov	r5,r4
1000a71c:	11000017 	ldw	r4,0(r2)
1000a720:	000a62c1 	jmpi	1000a62c <__sigtramp_r>

1000a724 <_kill_r>:
1000a724:	defffd04 	addi	sp,sp,-12
1000a728:	2805883a 	mov	r2,r5
1000a72c:	dc000015 	stw	r16,0(sp)
1000a730:	04040074 	movhi	r16,4097
1000a734:	dc400115 	stw	r17,4(sp)
1000a738:	84187404 	addi	r16,r16,25040
1000a73c:	2023883a 	mov	r17,r4
1000a740:	300b883a 	mov	r5,r6
1000a744:	1009883a 	mov	r4,r2
1000a748:	dfc00215 	stw	ra,8(sp)
1000a74c:	80000015 	stw	zero,0(r16)
1000a750:	000fd8c0 	call	1000fd8c <kill>
1000a754:	00ffffc4 	movi	r3,-1
1000a758:	10c00526 	beq	r2,r3,1000a770 <_kill_r+0x4c>
1000a75c:	dfc00217 	ldw	ra,8(sp)
1000a760:	dc400117 	ldw	r17,4(sp)
1000a764:	dc000017 	ldw	r16,0(sp)
1000a768:	dec00304 	addi	sp,sp,12
1000a76c:	f800283a 	ret
1000a770:	80c00017 	ldw	r3,0(r16)
1000a774:	183ff926 	beq	r3,zero,1000a75c <__alt_data_end+0xf800a75c>
1000a778:	88c00015 	stw	r3,0(r17)
1000a77c:	003ff706 	br	1000a75c <__alt_data_end+0xf800a75c>

1000a780 <_getpid_r>:
1000a780:	000fc481 	jmpi	1000fc48 <getpid>

1000a784 <strcmp>:
1000a784:	2144b03a 	or	r2,r4,r5
1000a788:	108000cc 	andi	r2,r2,3
1000a78c:	1000171e 	bne	r2,zero,1000a7ec <strcmp+0x68>
1000a790:	20800017 	ldw	r2,0(r4)
1000a794:	28c00017 	ldw	r3,0(r5)
1000a798:	10c0141e 	bne	r2,r3,1000a7ec <strcmp+0x68>
1000a79c:	027fbff4 	movhi	r9,65279
1000a7a0:	4a7fbfc4 	addi	r9,r9,-257
1000a7a4:	0086303a 	nor	r3,zero,r2
1000a7a8:	02202074 	movhi	r8,32897
1000a7ac:	1245883a 	add	r2,r2,r9
1000a7b0:	42202004 	addi	r8,r8,-32640
1000a7b4:	10c4703a 	and	r2,r2,r3
1000a7b8:	1204703a 	and	r2,r2,r8
1000a7bc:	10000226 	beq	r2,zero,1000a7c8 <strcmp+0x44>
1000a7c0:	00002306 	br	1000a850 <strcmp+0xcc>
1000a7c4:	1000221e 	bne	r2,zero,1000a850 <strcmp+0xcc>
1000a7c8:	21000104 	addi	r4,r4,4
1000a7cc:	20c00017 	ldw	r3,0(r4)
1000a7d0:	29400104 	addi	r5,r5,4
1000a7d4:	29800017 	ldw	r6,0(r5)
1000a7d8:	1a4f883a 	add	r7,r3,r9
1000a7dc:	00c4303a 	nor	r2,zero,r3
1000a7e0:	3884703a 	and	r2,r7,r2
1000a7e4:	1204703a 	and	r2,r2,r8
1000a7e8:	19bff626 	beq	r3,r6,1000a7c4 <__alt_data_end+0xf800a7c4>
1000a7ec:	20800003 	ldbu	r2,0(r4)
1000a7f0:	10c03fcc 	andi	r3,r2,255
1000a7f4:	18c0201c 	xori	r3,r3,128
1000a7f8:	18ffe004 	addi	r3,r3,-128
1000a7fc:	18000c26 	beq	r3,zero,1000a830 <strcmp+0xac>
1000a800:	29800007 	ldb	r6,0(r5)
1000a804:	19800326 	beq	r3,r6,1000a814 <strcmp+0x90>
1000a808:	00001306 	br	1000a858 <strcmp+0xd4>
1000a80c:	29800007 	ldb	r6,0(r5)
1000a810:	11800b1e 	bne	r2,r6,1000a840 <strcmp+0xbc>
1000a814:	21000044 	addi	r4,r4,1
1000a818:	20c00003 	ldbu	r3,0(r4)
1000a81c:	29400044 	addi	r5,r5,1
1000a820:	18803fcc 	andi	r2,r3,255
1000a824:	1080201c 	xori	r2,r2,128
1000a828:	10bfe004 	addi	r2,r2,-128
1000a82c:	103ff71e 	bne	r2,zero,1000a80c <__alt_data_end+0xf800a80c>
1000a830:	0007883a 	mov	r3,zero
1000a834:	28800003 	ldbu	r2,0(r5)
1000a838:	1885c83a 	sub	r2,r3,r2
1000a83c:	f800283a 	ret
1000a840:	28800003 	ldbu	r2,0(r5)
1000a844:	18c03fcc 	andi	r3,r3,255
1000a848:	1885c83a 	sub	r2,r3,r2
1000a84c:	f800283a 	ret
1000a850:	0005883a 	mov	r2,zero
1000a854:	f800283a 	ret
1000a858:	10c03fcc 	andi	r3,r2,255
1000a85c:	003ff506 	br	1000a834 <__alt_data_end+0xf800a834>

1000a860 <__sprint_r.part.0>:
1000a860:	28801917 	ldw	r2,100(r5)
1000a864:	defff604 	addi	sp,sp,-40
1000a868:	dd400515 	stw	r21,20(sp)
1000a86c:	dfc00915 	stw	ra,36(sp)
1000a870:	df000815 	stw	fp,32(sp)
1000a874:	ddc00715 	stw	r23,28(sp)
1000a878:	dd800615 	stw	r22,24(sp)
1000a87c:	dd000415 	stw	r20,16(sp)
1000a880:	dcc00315 	stw	r19,12(sp)
1000a884:	dc800215 	stw	r18,8(sp)
1000a888:	dc400115 	stw	r17,4(sp)
1000a88c:	dc000015 	stw	r16,0(sp)
1000a890:	1088000c 	andi	r2,r2,8192
1000a894:	302b883a 	mov	r21,r6
1000a898:	10002e26 	beq	r2,zero,1000a954 <__sprint_r.part.0+0xf4>
1000a89c:	30800217 	ldw	r2,8(r6)
1000a8a0:	35800017 	ldw	r22,0(r6)
1000a8a4:	10002926 	beq	r2,zero,1000a94c <__sprint_r.part.0+0xec>
1000a8a8:	2827883a 	mov	r19,r5
1000a8ac:	2029883a 	mov	r20,r4
1000a8b0:	b5c00104 	addi	r23,r22,4
1000a8b4:	04bfffc4 	movi	r18,-1
1000a8b8:	bc400017 	ldw	r17,0(r23)
1000a8bc:	b4000017 	ldw	r16,0(r22)
1000a8c0:	0039883a 	mov	fp,zero
1000a8c4:	8822d0ba 	srli	r17,r17,2
1000a8c8:	8800031e 	bne	r17,zero,1000a8d8 <__sprint_r.part.0+0x78>
1000a8cc:	00001806 	br	1000a930 <__sprint_r.part.0+0xd0>
1000a8d0:	84000104 	addi	r16,r16,4
1000a8d4:	8f001526 	beq	r17,fp,1000a92c <__sprint_r.part.0+0xcc>
1000a8d8:	81400017 	ldw	r5,0(r16)
1000a8dc:	980d883a 	mov	r6,r19
1000a8e0:	a009883a 	mov	r4,r20
1000a8e4:	000c2f00 	call	1000c2f0 <_fputwc_r>
1000a8e8:	e7000044 	addi	fp,fp,1
1000a8ec:	14bff81e 	bne	r2,r18,1000a8d0 <__alt_data_end+0xf800a8d0>
1000a8f0:	9005883a 	mov	r2,r18
1000a8f4:	a8000215 	stw	zero,8(r21)
1000a8f8:	a8000115 	stw	zero,4(r21)
1000a8fc:	dfc00917 	ldw	ra,36(sp)
1000a900:	df000817 	ldw	fp,32(sp)
1000a904:	ddc00717 	ldw	r23,28(sp)
1000a908:	dd800617 	ldw	r22,24(sp)
1000a90c:	dd400517 	ldw	r21,20(sp)
1000a910:	dd000417 	ldw	r20,16(sp)
1000a914:	dcc00317 	ldw	r19,12(sp)
1000a918:	dc800217 	ldw	r18,8(sp)
1000a91c:	dc400117 	ldw	r17,4(sp)
1000a920:	dc000017 	ldw	r16,0(sp)
1000a924:	dec00a04 	addi	sp,sp,40
1000a928:	f800283a 	ret
1000a92c:	a8800217 	ldw	r2,8(r21)
1000a930:	8c63883a 	add	r17,r17,r17
1000a934:	8c63883a 	add	r17,r17,r17
1000a938:	1445c83a 	sub	r2,r2,r17
1000a93c:	a8800215 	stw	r2,8(r21)
1000a940:	b5800204 	addi	r22,r22,8
1000a944:	bdc00204 	addi	r23,r23,8
1000a948:	103fdb1e 	bne	r2,zero,1000a8b8 <__alt_data_end+0xf800a8b8>
1000a94c:	0005883a 	mov	r2,zero
1000a950:	003fe806 	br	1000a8f4 <__alt_data_end+0xf800a8f4>
1000a954:	00088f40 	call	100088f4 <__sfvwrite_r>
1000a958:	003fe606 	br	1000a8f4 <__alt_data_end+0xf800a8f4>

1000a95c <__sprint_r>:
1000a95c:	30c00217 	ldw	r3,8(r6)
1000a960:	18000126 	beq	r3,zero,1000a968 <__sprint_r+0xc>
1000a964:	000a8601 	jmpi	1000a860 <__sprint_r.part.0>
1000a968:	30000115 	stw	zero,4(r6)
1000a96c:	0005883a 	mov	r2,zero
1000a970:	f800283a 	ret

1000a974 <___vfiprintf_internal_r>:
1000a974:	deffca04 	addi	sp,sp,-216
1000a978:	dd403115 	stw	r21,196(sp)
1000a97c:	dfc03515 	stw	ra,212(sp)
1000a980:	df003415 	stw	fp,208(sp)
1000a984:	ddc03315 	stw	r23,204(sp)
1000a988:	dd803215 	stw	r22,200(sp)
1000a98c:	dd003015 	stw	r20,192(sp)
1000a990:	dcc02f15 	stw	r19,188(sp)
1000a994:	dc802e15 	stw	r18,184(sp)
1000a998:	dc402d15 	stw	r17,180(sp)
1000a99c:	dc002c15 	stw	r16,176(sp)
1000a9a0:	d9002115 	stw	r4,132(sp)
1000a9a4:	d9402015 	stw	r5,128(sp)
1000a9a8:	d9c02215 	stw	r7,136(sp)
1000a9ac:	302b883a 	mov	r21,r6
1000a9b0:	20000226 	beq	r4,zero,1000a9bc <___vfiprintf_internal_r+0x48>
1000a9b4:	20800e17 	ldw	r2,56(r4)
1000a9b8:	1000cf26 	beq	r2,zero,1000acf8 <___vfiprintf_internal_r+0x384>
1000a9bc:	d8c02017 	ldw	r3,128(sp)
1000a9c0:	1880030b 	ldhu	r2,12(r3)
1000a9c4:	10c8000c 	andi	r3,r2,8192
1000a9c8:	1800071e 	bne	r3,zero,1000a9e8 <___vfiprintf_internal_r+0x74>
1000a9cc:	d9402017 	ldw	r5,128(sp)
1000a9d0:	00f7ffc4 	movi	r3,-8193
1000a9d4:	10880014 	ori	r2,r2,8192
1000a9d8:	29001917 	ldw	r4,100(r5)
1000a9dc:	2880030d 	sth	r2,12(r5)
1000a9e0:	20c6703a 	and	r3,r4,r3
1000a9e4:	28c01915 	stw	r3,100(r5)
1000a9e8:	10c0020c 	andi	r3,r2,8
1000a9ec:	1800a526 	beq	r3,zero,1000ac84 <___vfiprintf_internal_r+0x310>
1000a9f0:	d9002017 	ldw	r4,128(sp)
1000a9f4:	20c00417 	ldw	r3,16(r4)
1000a9f8:	1800a226 	beq	r3,zero,1000ac84 <___vfiprintf_internal_r+0x310>
1000a9fc:	1080068c 	andi	r2,r2,26
1000aa00:	00c00284 	movi	r3,10
1000aa04:	10c0a826 	beq	r2,r3,1000aca8 <___vfiprintf_internal_r+0x334>
1000aa08:	d9001a04 	addi	r4,sp,104
1000aa0c:	d94019c4 	addi	r5,sp,103
1000aa10:	04840074 	movhi	r18,4097
1000aa14:	2145c83a 	sub	r2,r4,r5
1000aa18:	948a0d04 	addi	r18,r18,10292
1000aa1c:	d9001e15 	stw	r4,120(sp)
1000aa20:	d9401f15 	stw	r5,124(sp)
1000aa24:	dec01a15 	stw	sp,104(sp)
1000aa28:	d8001c15 	stw	zero,112(sp)
1000aa2c:	d8001b15 	stw	zero,108(sp)
1000aa30:	d811883a 	mov	r8,sp
1000aa34:	d8002615 	stw	zero,152(sp)
1000aa38:	d8002415 	stw	zero,144(sp)
1000aa3c:	d8802815 	stw	r2,160(sp)
1000aa40:	a82d883a 	mov	r22,r21
1000aa44:	b0800007 	ldb	r2,0(r22)
1000aa48:	10040d26 	beq	r2,zero,1000ba80 <___vfiprintf_internal_r+0x110c>
1000aa4c:	00c00944 	movi	r3,37
1000aa50:	b029883a 	mov	r20,r22
1000aa54:	10c0021e 	bne	r2,r3,1000aa60 <___vfiprintf_internal_r+0xec>
1000aa58:	00001606 	br	1000aab4 <___vfiprintf_internal_r+0x140>
1000aa5c:	10c00326 	beq	r2,r3,1000aa6c <___vfiprintf_internal_r+0xf8>
1000aa60:	a5000044 	addi	r20,r20,1
1000aa64:	a0800007 	ldb	r2,0(r20)
1000aa68:	103ffc1e 	bne	r2,zero,1000aa5c <__alt_data_end+0xf800aa5c>
1000aa6c:	a5a1c83a 	sub	r16,r20,r22
1000aa70:	80001026 	beq	r16,zero,1000aab4 <___vfiprintf_internal_r+0x140>
1000aa74:	d8c01c17 	ldw	r3,112(sp)
1000aa78:	d8801b17 	ldw	r2,108(sp)
1000aa7c:	45800015 	stw	r22,0(r8)
1000aa80:	80c7883a 	add	r3,r16,r3
1000aa84:	10800044 	addi	r2,r2,1
1000aa88:	44000115 	stw	r16,4(r8)
1000aa8c:	d8c01c15 	stw	r3,112(sp)
1000aa90:	d8801b15 	stw	r2,108(sp)
1000aa94:	010001c4 	movi	r4,7
1000aa98:	2080750e 	bge	r4,r2,1000ac70 <___vfiprintf_internal_r+0x2fc>
1000aa9c:	1803951e 	bne	r3,zero,1000b8f4 <___vfiprintf_internal_r+0xf80>
1000aaa0:	d8c02417 	ldw	r3,144(sp)
1000aaa4:	d8001b15 	stw	zero,108(sp)
1000aaa8:	d811883a 	mov	r8,sp
1000aaac:	1c07883a 	add	r3,r3,r16
1000aab0:	d8c02415 	stw	r3,144(sp)
1000aab4:	a0800007 	ldb	r2,0(r20)
1000aab8:	1002e026 	beq	r2,zero,1000b63c <___vfiprintf_internal_r+0xcc8>
1000aabc:	a5800044 	addi	r22,r20,1
1000aac0:	a0c00047 	ldb	r3,1(r20)
1000aac4:	d8001d85 	stb	zero,118(sp)
1000aac8:	0027883a 	mov	r19,zero
1000aacc:	d8002305 	stb	zero,140(sp)
1000aad0:	043fffc4 	movi	r16,-1
1000aad4:	d8002515 	stw	zero,148(sp)
1000aad8:	0023883a 	mov	r17,zero
1000aadc:	05001604 	movi	r20,88
1000aae0:	05400244 	movi	r21,9
1000aae4:	402f883a 	mov	r23,r8
1000aae8:	b5800044 	addi	r22,r22,1
1000aaec:	18bff804 	addi	r2,r3,-32
1000aaf0:	a0827736 	bltu	r20,r2,1000b4d0 <___vfiprintf_internal_r+0xb5c>
1000aaf4:	100490ba 	slli	r2,r2,2
1000aaf8:	01040074 	movhi	r4,4097
1000aafc:	212ac304 	addi	r4,r4,-21748
1000ab00:	1105883a 	add	r2,r2,r4
1000ab04:	10800017 	ldw	r2,0(r2)
1000ab08:	1000683a 	jmp	r2
1000ab0c:	1000b1d0 	cmplti	zero,r2,711
1000ab10:	1000b4d0 	cmplti	zero,r2,723
1000ab14:	1000b4d0 	cmplti	zero,r2,723
1000ab18:	1000b1ec 	andhi	zero,r2,711
1000ab1c:	1000b4d0 	cmplti	zero,r2,723
1000ab20:	1000b4d0 	cmplti	zero,r2,723
1000ab24:	1000b4d0 	cmplti	zero,r2,723
1000ab28:	1000b4d0 	cmplti	zero,r2,723
1000ab2c:	1000b4d0 	cmplti	zero,r2,723
1000ab30:	1000b4d0 	cmplti	zero,r2,723
1000ab34:	1000b3f4 	orhi	zero,r2,719
1000ab38:	1000b418 	cmpnei	zero,r2,720
1000ab3c:	1000b4d0 	cmplti	zero,r2,723
1000ab40:	1000ad10 	cmplti	zero,r2,692
1000ab44:	1000b42c 	andhi	zero,r2,720
1000ab48:	1000b4d0 	cmplti	zero,r2,723
1000ab4c:	1000b1f8 	rdprs	zero,r2,711
1000ab50:	1000b204 	addi	zero,r2,712
1000ab54:	1000b204 	addi	zero,r2,712
1000ab58:	1000b204 	addi	zero,r2,712
1000ab5c:	1000b204 	addi	zero,r2,712
1000ab60:	1000b204 	addi	zero,r2,712
1000ab64:	1000b204 	addi	zero,r2,712
1000ab68:	1000b204 	addi	zero,r2,712
1000ab6c:	1000b204 	addi	zero,r2,712
1000ab70:	1000b204 	addi	zero,r2,712
1000ab74:	1000b4d0 	cmplti	zero,r2,723
1000ab78:	1000b4d0 	cmplti	zero,r2,723
1000ab7c:	1000b4d0 	cmplti	zero,r2,723
1000ab80:	1000b4d0 	cmplti	zero,r2,723
1000ab84:	1000b4d0 	cmplti	zero,r2,723
1000ab88:	1000b4d0 	cmplti	zero,r2,723
1000ab8c:	1000b4d0 	cmplti	zero,r2,723
1000ab90:	1000b4d0 	cmplti	zero,r2,723
1000ab94:	1000b4d0 	cmplti	zero,r2,723
1000ab98:	1000b4d0 	cmplti	zero,r2,723
1000ab9c:	1000b244 	addi	zero,r2,713
1000aba0:	1000b4d0 	cmplti	zero,r2,723
1000aba4:	1000b4d0 	cmplti	zero,r2,723
1000aba8:	1000b4d0 	cmplti	zero,r2,723
1000abac:	1000b4d0 	cmplti	zero,r2,723
1000abb0:	1000b4d0 	cmplti	zero,r2,723
1000abb4:	1000b4d0 	cmplti	zero,r2,723
1000abb8:	1000b4d0 	cmplti	zero,r2,723
1000abbc:	1000b4d0 	cmplti	zero,r2,723
1000abc0:	1000b4d0 	cmplti	zero,r2,723
1000abc4:	1000b4d0 	cmplti	zero,r2,723
1000abc8:	1000b280 	call	11000b28 <_gp+0xfe461c>
1000abcc:	1000b4d0 	cmplti	zero,r2,723
1000abd0:	1000b4d0 	cmplti	zero,r2,723
1000abd4:	1000b4d0 	cmplti	zero,r2,723
1000abd8:	1000b4d0 	cmplti	zero,r2,723
1000abdc:	1000b4d0 	cmplti	zero,r2,723
1000abe0:	1000b2dc 	xori	zero,r2,715
1000abe4:	1000b4d0 	cmplti	zero,r2,723
1000abe8:	1000b4d0 	cmplti	zero,r2,723
1000abec:	1000b350 	cmplti	zero,r2,717
1000abf0:	1000b4d0 	cmplti	zero,r2,723
1000abf4:	1000b4d0 	cmplti	zero,r2,723
1000abf8:	1000b4d0 	cmplti	zero,r2,723
1000abfc:	1000b4d0 	cmplti	zero,r2,723
1000ac00:	1000b4d0 	cmplti	zero,r2,723
1000ac04:	1000b4d0 	cmplti	zero,r2,723
1000ac08:	1000b4d0 	cmplti	zero,r2,723
1000ac0c:	1000b4d0 	cmplti	zero,r2,723
1000ac10:	1000b4d0 	cmplti	zero,r2,723
1000ac14:	1000b4d0 	cmplti	zero,r2,723
1000ac18:	1000b0f8 	rdprs	zero,r2,707
1000ac1c:	1000b128 	cmpgeui	zero,r2,708
1000ac20:	1000b4d0 	cmplti	zero,r2,723
1000ac24:	1000b4d0 	cmplti	zero,r2,723
1000ac28:	1000b4d0 	cmplti	zero,r2,723
1000ac2c:	1000b478 	rdprs	zero,r2,721
1000ac30:	1000b128 	cmpgeui	zero,r2,708
1000ac34:	1000b4d0 	cmplti	zero,r2,723
1000ac38:	1000b4d0 	cmplti	zero,r2,723
1000ac3c:	1000afd0 	cmplti	zero,r2,703
1000ac40:	1000b4d0 	cmplti	zero,r2,723
1000ac44:	1000afe4 	muli	zero,r2,703
1000ac48:	1000b01c 	xori	zero,r2,704
1000ac4c:	1000ad1c 	xori	zero,r2,692
1000ac50:	1000afc4 	addi	zero,r2,703
1000ac54:	1000b4d0 	cmplti	zero,r2,723
1000ac58:	1000b390 	cmplti	zero,r2,718
1000ac5c:	1000b4d0 	cmplti	zero,r2,723
1000ac60:	1000b3dc 	xori	zero,r2,719
1000ac64:	1000b4d0 	cmplti	zero,r2,723
1000ac68:	1000b4d0 	cmplti	zero,r2,723
1000ac6c:	1000b0a0 	cmpeqi	zero,r2,706
1000ac70:	42000204 	addi	r8,r8,8
1000ac74:	d8c02417 	ldw	r3,144(sp)
1000ac78:	1c07883a 	add	r3,r3,r16
1000ac7c:	d8c02415 	stw	r3,144(sp)
1000ac80:	003f8c06 	br	1000aab4 <__alt_data_end+0xf800aab4>
1000ac84:	d9402017 	ldw	r5,128(sp)
1000ac88:	d9002117 	ldw	r4,132(sp)
1000ac8c:	0006c580 	call	10006c58 <__swsetup_r>
1000ac90:	1003c11e 	bne	r2,zero,1000bb98 <___vfiprintf_internal_r+0x1224>
1000ac94:	d9402017 	ldw	r5,128(sp)
1000ac98:	00c00284 	movi	r3,10
1000ac9c:	2880030b 	ldhu	r2,12(r5)
1000aca0:	1080068c 	andi	r2,r2,26
1000aca4:	10ff581e 	bne	r2,r3,1000aa08 <__alt_data_end+0xf800aa08>
1000aca8:	d8c02017 	ldw	r3,128(sp)
1000acac:	1880038f 	ldh	r2,14(r3)
1000acb0:	103f5516 	blt	r2,zero,1000aa08 <__alt_data_end+0xf800aa08>
1000acb4:	d9c02217 	ldw	r7,136(sp)
1000acb8:	d9002117 	ldw	r4,132(sp)
1000acbc:	a80d883a 	mov	r6,r21
1000acc0:	180b883a 	mov	r5,r3
1000acc4:	000be9c0 	call	1000be9c <__sbprintf>
1000acc8:	dfc03517 	ldw	ra,212(sp)
1000accc:	df003417 	ldw	fp,208(sp)
1000acd0:	ddc03317 	ldw	r23,204(sp)
1000acd4:	dd803217 	ldw	r22,200(sp)
1000acd8:	dd403117 	ldw	r21,196(sp)
1000acdc:	dd003017 	ldw	r20,192(sp)
1000ace0:	dcc02f17 	ldw	r19,188(sp)
1000ace4:	dc802e17 	ldw	r18,184(sp)
1000ace8:	dc402d17 	ldw	r17,180(sp)
1000acec:	dc002c17 	ldw	r16,176(sp)
1000acf0:	dec03604 	addi	sp,sp,216
1000acf4:	f800283a 	ret
1000acf8:	0001f440 	call	10001f44 <__sinit>
1000acfc:	003f2f06 	br	1000a9bc <__alt_data_end+0xf800a9bc>
1000ad00:	d8c02517 	ldw	r3,148(sp)
1000ad04:	d8802215 	stw	r2,136(sp)
1000ad08:	00c7c83a 	sub	r3,zero,r3
1000ad0c:	d8c02515 	stw	r3,148(sp)
1000ad10:	8c400114 	ori	r17,r17,4
1000ad14:	b0c00007 	ldb	r3,0(r22)
1000ad18:	003f7306 	br	1000aae8 <__alt_data_end+0xf800aae8>
1000ad1c:	00800c04 	movi	r2,48
1000ad20:	d9402217 	ldw	r5,136(sp)
1000ad24:	d8801d05 	stb	r2,116(sp)
1000ad28:	00801e04 	movi	r2,120
1000ad2c:	d8801d45 	stb	r2,117(sp)
1000ad30:	d8001d85 	stb	zero,118(sp)
1000ad34:	b811883a 	mov	r8,r23
1000ad38:	28c00104 	addi	r3,r5,4
1000ad3c:	2cc00017 	ldw	r19,0(r5)
1000ad40:	0029883a 	mov	r20,zero
1000ad44:	88800094 	ori	r2,r17,2
1000ad48:	80032516 	blt	r16,zero,1000b9e0 <___vfiprintf_internal_r+0x106c>
1000ad4c:	00bfdfc4 	movi	r2,-129
1000ad50:	88a2703a 	and	r17,r17,r2
1000ad54:	d8c02215 	stw	r3,136(sp)
1000ad58:	8c400094 	ori	r17,r17,2
1000ad5c:	98032a1e 	bne	r19,zero,1000ba08 <___vfiprintf_internal_r+0x1094>
1000ad60:	00840074 	movhi	r2,4097
1000ad64:	1089ad04 	addi	r2,r2,9908
1000ad68:	d8802615 	stw	r2,152(sp)
1000ad6c:	002b883a 	mov	r21,zero
1000ad70:	8001741e 	bne	r16,zero,1000b344 <___vfiprintf_internal_r+0x9d0>
1000ad74:	0021883a 	mov	r16,zero
1000ad78:	0029883a 	mov	r20,zero
1000ad7c:	ddc01a04 	addi	r23,sp,104
1000ad80:	8027883a 	mov	r19,r16
1000ad84:	8500010e 	bge	r16,r20,1000ad8c <___vfiprintf_internal_r+0x418>
1000ad88:	a027883a 	mov	r19,r20
1000ad8c:	ad403fcc 	andi	r21,r21,255
1000ad90:	ad40201c 	xori	r21,r21,128
1000ad94:	ad7fe004 	addi	r21,r21,-128
1000ad98:	a8000126 	beq	r21,zero,1000ada0 <___vfiprintf_internal_r+0x42c>
1000ad9c:	9cc00044 	addi	r19,r19,1
1000ada0:	89c0008c 	andi	r7,r17,2
1000ada4:	38000126 	beq	r7,zero,1000adac <___vfiprintf_internal_r+0x438>
1000ada8:	9cc00084 	addi	r19,r19,2
1000adac:	88c0210c 	andi	r3,r17,132
1000adb0:	1801dd1e 	bne	r3,zero,1000b528 <___vfiprintf_internal_r+0xbb4>
1000adb4:	d9402517 	ldw	r5,148(sp)
1000adb8:	2cebc83a 	sub	r21,r5,r19
1000adbc:	0541da0e 	bge	zero,r21,1000b528 <___vfiprintf_internal_r+0xbb4>
1000adc0:	07000404 	movi	fp,16
1000adc4:	d8801c17 	ldw	r2,112(sp)
1000adc8:	e543be0e 	bge	fp,r21,1000bcc4 <___vfiprintf_internal_r+0x1350>
1000adcc:	01440074 	movhi	r5,4097
1000add0:	294a1104 	addi	r5,r5,10308
1000add4:	dc002715 	stw	r16,156(sp)
1000add8:	d9801b17 	ldw	r6,108(sp)
1000addc:	a821883a 	mov	r16,r21
1000ade0:	d9402315 	stw	r5,140(sp)
1000ade4:	028001c4 	movi	r10,7
1000ade8:	d9c02915 	stw	r7,164(sp)
1000adec:	182b883a 	mov	r21,r3
1000adf0:	00000506 	br	1000ae08 <___vfiprintf_internal_r+0x494>
1000adf4:	31000084 	addi	r4,r6,2
1000adf8:	42000204 	addi	r8,r8,8
1000adfc:	180d883a 	mov	r6,r3
1000ae00:	843ffc04 	addi	r16,r16,-16
1000ae04:	e4000f0e 	bge	fp,r16,1000ae44 <___vfiprintf_internal_r+0x4d0>
1000ae08:	01040074 	movhi	r4,4097
1000ae0c:	10800404 	addi	r2,r2,16
1000ae10:	30c00044 	addi	r3,r6,1
1000ae14:	210a1104 	addi	r4,r4,10308
1000ae18:	41000015 	stw	r4,0(r8)
1000ae1c:	47000115 	stw	fp,4(r8)
1000ae20:	d8801c15 	stw	r2,112(sp)
1000ae24:	d8c01b15 	stw	r3,108(sp)
1000ae28:	50fff20e 	bge	r10,r3,1000adf4 <__alt_data_end+0xf800adf4>
1000ae2c:	1001b21e 	bne	r2,zero,1000b4f8 <___vfiprintf_internal_r+0xb84>
1000ae30:	843ffc04 	addi	r16,r16,-16
1000ae34:	000d883a 	mov	r6,zero
1000ae38:	01000044 	movi	r4,1
1000ae3c:	d811883a 	mov	r8,sp
1000ae40:	e43ff116 	blt	fp,r16,1000ae08 <__alt_data_end+0xf800ae08>
1000ae44:	a807883a 	mov	r3,r21
1000ae48:	d9c02917 	ldw	r7,164(sp)
1000ae4c:	802b883a 	mov	r21,r16
1000ae50:	dc002717 	ldw	r16,156(sp)
1000ae54:	d9402317 	ldw	r5,140(sp)
1000ae58:	a885883a 	add	r2,r21,r2
1000ae5c:	45400115 	stw	r21,4(r8)
1000ae60:	41400015 	stw	r5,0(r8)
1000ae64:	d8801c15 	stw	r2,112(sp)
1000ae68:	d9001b15 	stw	r4,108(sp)
1000ae6c:	014001c4 	movi	r5,7
1000ae70:	29026216 	blt	r5,r4,1000b7fc <___vfiprintf_internal_r+0xe88>
1000ae74:	d9801d87 	ldb	r6,118(sp)
1000ae78:	42000204 	addi	r8,r8,8
1000ae7c:	21400044 	addi	r5,r4,1
1000ae80:	3001ae1e 	bne	r6,zero,1000b53c <___vfiprintf_internal_r+0xbc8>
1000ae84:	3801bb26 	beq	r7,zero,1000b574 <___vfiprintf_internal_r+0xc00>
1000ae88:	d9001d04 	addi	r4,sp,116
1000ae8c:	10800084 	addi	r2,r2,2
1000ae90:	41000015 	stw	r4,0(r8)
1000ae94:	01000084 	movi	r4,2
1000ae98:	41000115 	stw	r4,4(r8)
1000ae9c:	d8801c15 	stw	r2,112(sp)
1000aea0:	d9401b15 	stw	r5,108(sp)
1000aea4:	010001c4 	movi	r4,7
1000aea8:	2142680e 	bge	r4,r5,1000b84c <___vfiprintf_internal_r+0xed8>
1000aeac:	1002b11e 	bne	r2,zero,1000b974 <___vfiprintf_internal_r+0x1000>
1000aeb0:	01802004 	movi	r6,128
1000aeb4:	01400044 	movi	r5,1
1000aeb8:	0009883a 	mov	r4,zero
1000aebc:	d811883a 	mov	r8,sp
1000aec0:	1981ae1e 	bne	r3,r6,1000b57c <___vfiprintf_internal_r+0xc08>
1000aec4:	d8c02517 	ldw	r3,148(sp)
1000aec8:	1cf9c83a 	sub	fp,r3,r19
1000aecc:	0701ab0e 	bge	zero,fp,1000b57c <___vfiprintf_internal_r+0xc08>
1000aed0:	05400404 	movi	r21,16
1000aed4:	af03a90e 	bge	r21,fp,1000bd7c <___vfiprintf_internal_r+0x1408>
1000aed8:	01440074 	movhi	r5,4097
1000aedc:	294a0d04 	addi	r5,r5,10292
1000aee0:	d9402315 	stw	r5,140(sp)
1000aee4:	01c001c4 	movi	r7,7
1000aee8:	00000506 	br	1000af00 <___vfiprintf_internal_r+0x58c>
1000aeec:	21800084 	addi	r6,r4,2
1000aef0:	42000204 	addi	r8,r8,8
1000aef4:	1809883a 	mov	r4,r3
1000aef8:	e73ffc04 	addi	fp,fp,-16
1000aefc:	af000d0e 	bge	r21,fp,1000af34 <___vfiprintf_internal_r+0x5c0>
1000af00:	10800404 	addi	r2,r2,16
1000af04:	20c00044 	addi	r3,r4,1
1000af08:	44800015 	stw	r18,0(r8)
1000af0c:	45400115 	stw	r21,4(r8)
1000af10:	d8801c15 	stw	r2,112(sp)
1000af14:	d8c01b15 	stw	r3,108(sp)
1000af18:	38fff40e 	bge	r7,r3,1000aeec <__alt_data_end+0xf800aeec>
1000af1c:	10022b1e 	bne	r2,zero,1000b7cc <___vfiprintf_internal_r+0xe58>
1000af20:	e73ffc04 	addi	fp,fp,-16
1000af24:	01800044 	movi	r6,1
1000af28:	0009883a 	mov	r4,zero
1000af2c:	d811883a 	mov	r8,sp
1000af30:	af3ff316 	blt	r21,fp,1000af00 <__alt_data_end+0xf800af00>
1000af34:	d8c02317 	ldw	r3,140(sp)
1000af38:	1705883a 	add	r2,r2,fp
1000af3c:	47000115 	stw	fp,4(r8)
1000af40:	40c00015 	stw	r3,0(r8)
1000af44:	d8801c15 	stw	r2,112(sp)
1000af48:	d9801b15 	stw	r6,108(sp)
1000af4c:	00c001c4 	movi	r3,7
1000af50:	19829416 	blt	r3,r6,1000b9a4 <___vfiprintf_internal_r+0x1030>
1000af54:	8521c83a 	sub	r16,r16,r20
1000af58:	42000204 	addi	r8,r8,8
1000af5c:	31400044 	addi	r5,r6,1
1000af60:	3009883a 	mov	r4,r6
1000af64:	04018716 	blt	zero,r16,1000b584 <___vfiprintf_internal_r+0xc10>
1000af68:	a085883a 	add	r2,r20,r2
1000af6c:	45c00015 	stw	r23,0(r8)
1000af70:	45000115 	stw	r20,4(r8)
1000af74:	d8801c15 	stw	r2,112(sp)
1000af78:	d9401b15 	stw	r5,108(sp)
1000af7c:	00c001c4 	movi	r3,7
1000af80:	1941c20e 	bge	r3,r5,1000b68c <___vfiprintf_internal_r+0xd18>
1000af84:	1002531e 	bne	r2,zero,1000b8d4 <___vfiprintf_internal_r+0xf60>
1000af88:	d8001b15 	stw	zero,108(sp)
1000af8c:	8c40010c 	andi	r17,r17,4
1000af90:	88023226 	beq	r17,zero,1000b85c <___vfiprintf_internal_r+0xee8>
1000af94:	d9002517 	ldw	r4,148(sp)
1000af98:	24e3c83a 	sub	r17,r4,r19
1000af9c:	04432916 	blt	zero,r17,1000bc44 <___vfiprintf_internal_r+0x12d0>
1000afa0:	d8802517 	ldw	r2,148(sp)
1000afa4:	14c0010e 	bge	r2,r19,1000afac <___vfiprintf_internal_r+0x638>
1000afa8:	9805883a 	mov	r2,r19
1000afac:	d8c02417 	ldw	r3,144(sp)
1000afb0:	1887883a 	add	r3,r3,r2
1000afb4:	d8c02415 	stw	r3,144(sp)
1000afb8:	d8001b15 	stw	zero,108(sp)
1000afbc:	d811883a 	mov	r8,sp
1000afc0:	003ea006 	br	1000aa44 <__alt_data_end+0xf800aa44>
1000afc4:	8c400814 	ori	r17,r17,32
1000afc8:	b0c00007 	ldb	r3,0(r22)
1000afcc:	003ec606 	br	1000aae8 <__alt_data_end+0xf800aae8>
1000afd0:	b0c00007 	ldb	r3,0(r22)
1000afd4:	00801b04 	movi	r2,108
1000afd8:	18832026 	beq	r3,r2,1000bc5c <___vfiprintf_internal_r+0x12e8>
1000afdc:	8c400414 	ori	r17,r17,16
1000afe0:	003ec106 	br	1000aae8 <__alt_data_end+0xf800aae8>
1000afe4:	9cc03fcc 	andi	r19,r19,255
1000afe8:	b811883a 	mov	r8,r23
1000afec:	9803981e 	bne	r19,zero,1000be50 <___vfiprintf_internal_r+0x14dc>
1000aff0:	8880080c 	andi	r2,r17,32
1000aff4:	1002be26 	beq	r2,zero,1000baf0 <___vfiprintf_internal_r+0x117c>
1000aff8:	d9002217 	ldw	r4,136(sp)
1000affc:	d9402417 	ldw	r5,144(sp)
1000b000:	20800017 	ldw	r2,0(r4)
1000b004:	2807d7fa 	srai	r3,r5,31
1000b008:	21000104 	addi	r4,r4,4
1000b00c:	d9002215 	stw	r4,136(sp)
1000b010:	11400015 	stw	r5,0(r2)
1000b014:	10c00115 	stw	r3,4(r2)
1000b018:	003e8a06 	br	1000aa44 <__alt_data_end+0xf800aa44>
1000b01c:	9cc03fcc 	andi	r19,r19,255
1000b020:	b811883a 	mov	r8,r23
1000b024:	9803871e 	bne	r19,zero,1000be44 <___vfiprintf_internal_r+0x14d0>
1000b028:	8880080c 	andi	r2,r17,32
1000b02c:	10009a26 	beq	r2,zero,1000b298 <___vfiprintf_internal_r+0x924>
1000b030:	d9002217 	ldw	r4,136(sp)
1000b034:	d8001d85 	stb	zero,118(sp)
1000b038:	20800204 	addi	r2,r4,8
1000b03c:	24c00017 	ldw	r19,0(r4)
1000b040:	25000117 	ldw	r20,4(r4)
1000b044:	8002a416 	blt	r16,zero,1000bad8 <___vfiprintf_internal_r+0x1164>
1000b048:	013fdfc4 	movi	r4,-129
1000b04c:	9d06b03a 	or	r3,r19,r20
1000b050:	d8802215 	stw	r2,136(sp)
1000b054:	8922703a 	and	r17,r17,r4
1000b058:	18009b26 	beq	r3,zero,1000b2c8 <___vfiprintf_internal_r+0x954>
1000b05c:	002b883a 	mov	r21,zero
1000b060:	ddc01a04 	addi	r23,sp,104
1000b064:	9806d0fa 	srli	r3,r19,3
1000b068:	a008977a 	slli	r4,r20,29
1000b06c:	a028d0fa 	srli	r20,r20,3
1000b070:	9cc001cc 	andi	r19,r19,7
1000b074:	98800c04 	addi	r2,r19,48
1000b078:	bdffffc4 	addi	r23,r23,-1
1000b07c:	20e6b03a 	or	r19,r4,r3
1000b080:	b8800005 	stb	r2,0(r23)
1000b084:	9d06b03a 	or	r3,r19,r20
1000b088:	183ff61e 	bne	r3,zero,1000b064 <__alt_data_end+0xf800b064>
1000b08c:	88c0004c 	andi	r3,r17,1
1000b090:	18021f1e 	bne	r3,zero,1000b910 <___vfiprintf_internal_r+0xf9c>
1000b094:	d9401e17 	ldw	r5,120(sp)
1000b098:	2de9c83a 	sub	r20,r5,r23
1000b09c:	003f3806 	br	1000ad80 <__alt_data_end+0xf800ad80>
1000b0a0:	9cc03fcc 	andi	r19,r19,255
1000b0a4:	b811883a 	mov	r8,r23
1000b0a8:	98034f1e 	bne	r19,zero,1000bde8 <___vfiprintf_internal_r+0x1474>
1000b0ac:	00840074 	movhi	r2,4097
1000b0b0:	1089ad04 	addi	r2,r2,9908
1000b0b4:	d8802615 	stw	r2,152(sp)
1000b0b8:	8880080c 	andi	r2,r17,32
1000b0bc:	1000ac26 	beq	r2,zero,1000b370 <___vfiprintf_internal_r+0x9fc>
1000b0c0:	d9002217 	ldw	r4,136(sp)
1000b0c4:	24c00017 	ldw	r19,0(r4)
1000b0c8:	25000117 	ldw	r20,4(r4)
1000b0cc:	21000204 	addi	r4,r4,8
1000b0d0:	d9002215 	stw	r4,136(sp)
1000b0d4:	8880004c 	andi	r2,r17,1
1000b0d8:	1001e726 	beq	r2,zero,1000b878 <___vfiprintf_internal_r+0xf04>
1000b0dc:	9d04b03a 	or	r2,r19,r20
1000b0e0:	10025c1e 	bne	r2,zero,1000ba54 <___vfiprintf_internal_r+0x10e0>
1000b0e4:	d8001d85 	stb	zero,118(sp)
1000b0e8:	80024416 	blt	r16,zero,1000b9fc <___vfiprintf_internal_r+0x1088>
1000b0ec:	00bfdfc4 	movi	r2,-129
1000b0f0:	88a2703a 	and	r17,r17,r2
1000b0f4:	003f1d06 	br	1000ad6c <__alt_data_end+0xf800ad6c>
1000b0f8:	d8c02217 	ldw	r3,136(sp)
1000b0fc:	04c00044 	movi	r19,1
1000b100:	b811883a 	mov	r8,r23
1000b104:	18800017 	ldw	r2,0(r3)
1000b108:	18c00104 	addi	r3,r3,4
1000b10c:	d8001d85 	stb	zero,118(sp)
1000b110:	d8801005 	stb	r2,64(sp)
1000b114:	d8c02215 	stw	r3,136(sp)
1000b118:	9829883a 	mov	r20,r19
1000b11c:	ddc01004 	addi	r23,sp,64
1000b120:	0021883a 	mov	r16,zero
1000b124:	003f1e06 	br	1000ada0 <__alt_data_end+0xf800ada0>
1000b128:	9cc03fcc 	andi	r19,r19,255
1000b12c:	b811883a 	mov	r8,r23
1000b130:	9803331e 	bne	r19,zero,1000be00 <___vfiprintf_internal_r+0x148c>
1000b134:	8880080c 	andi	r2,r17,32
1000b138:	10004826 	beq	r2,zero,1000b25c <___vfiprintf_internal_r+0x8e8>
1000b13c:	d9002217 	ldw	r4,136(sp)
1000b140:	20800117 	ldw	r2,4(r4)
1000b144:	24c00017 	ldw	r19,0(r4)
1000b148:	21000204 	addi	r4,r4,8
1000b14c:	d9002215 	stw	r4,136(sp)
1000b150:	1029883a 	mov	r20,r2
1000b154:	10024c16 	blt	r2,zero,1000ba88 <___vfiprintf_internal_r+0x1114>
1000b158:	dd401d83 	ldbu	r21,118(sp)
1000b15c:	80007116 	blt	r16,zero,1000b324 <___vfiprintf_internal_r+0x9b0>
1000b160:	00ffdfc4 	movi	r3,-129
1000b164:	9d04b03a 	or	r2,r19,r20
1000b168:	88e2703a 	and	r17,r17,r3
1000b16c:	1000d126 	beq	r2,zero,1000b4b4 <___vfiprintf_internal_r+0xb40>
1000b170:	a0023526 	beq	r20,zero,1000ba48 <___vfiprintf_internal_r+0x10d4>
1000b174:	ddc01a04 	addi	r23,sp,104
1000b178:	4039883a 	mov	fp,r8
1000b17c:	9809883a 	mov	r4,r19
1000b180:	a00b883a 	mov	r5,r20
1000b184:	01800284 	movi	r6,10
1000b188:	000f883a 	mov	r7,zero
1000b18c:	000cb780 	call	1000cb78 <__umoddi3>
1000b190:	10800c04 	addi	r2,r2,48
1000b194:	bdffffc4 	addi	r23,r23,-1
1000b198:	9809883a 	mov	r4,r19
1000b19c:	a00b883a 	mov	r5,r20
1000b1a0:	b8800005 	stb	r2,0(r23)
1000b1a4:	01800284 	movi	r6,10
1000b1a8:	000f883a 	mov	r7,zero
1000b1ac:	000c57c0 	call	1000c57c <__udivdi3>
1000b1b0:	1027883a 	mov	r19,r2
1000b1b4:	10c4b03a 	or	r2,r2,r3
1000b1b8:	1829883a 	mov	r20,r3
1000b1bc:	103fef1e 	bne	r2,zero,1000b17c <__alt_data_end+0xf800b17c>
1000b1c0:	d9001e17 	ldw	r4,120(sp)
1000b1c4:	e011883a 	mov	r8,fp
1000b1c8:	25e9c83a 	sub	r20,r4,r23
1000b1cc:	003eec06 	br	1000ad80 <__alt_data_end+0xf800ad80>
1000b1d0:	d8802307 	ldb	r2,140(sp)
1000b1d4:	1002361e 	bne	r2,zero,1000bab0 <___vfiprintf_internal_r+0x113c>
1000b1d8:	00c00804 	movi	r3,32
1000b1dc:	d8c02305 	stb	r3,140(sp)
1000b1e0:	04c00044 	movi	r19,1
1000b1e4:	b0c00007 	ldb	r3,0(r22)
1000b1e8:	003e3f06 	br	1000aae8 <__alt_data_end+0xf800aae8>
1000b1ec:	8c400054 	ori	r17,r17,1
1000b1f0:	b0c00007 	ldb	r3,0(r22)
1000b1f4:	003e3c06 	br	1000aae8 <__alt_data_end+0xf800aae8>
1000b1f8:	8c402014 	ori	r17,r17,128
1000b1fc:	b0c00007 	ldb	r3,0(r22)
1000b200:	003e3906 	br	1000aae8 <__alt_data_end+0xf800aae8>
1000b204:	dc002715 	stw	r16,156(sp)
1000b208:	d8002515 	stw	zero,148(sp)
1000b20c:	1f3ff404 	addi	fp,r3,-48
1000b210:	0009883a 	mov	r4,zero
1000b214:	b021883a 	mov	r16,r22
1000b218:	01400284 	movi	r5,10
1000b21c:	000175c0 	call	1000175c <__mulsi3>
1000b220:	80c00007 	ldb	r3,0(r16)
1000b224:	e089883a 	add	r4,fp,r2
1000b228:	b5800044 	addi	r22,r22,1
1000b22c:	1f3ff404 	addi	fp,r3,-48
1000b230:	b021883a 	mov	r16,r22
1000b234:	af3ff82e 	bgeu	r21,fp,1000b218 <__alt_data_end+0xf800b218>
1000b238:	d9002515 	stw	r4,148(sp)
1000b23c:	dc002717 	ldw	r16,156(sp)
1000b240:	003e2a06 	br	1000aaec <__alt_data_end+0xf800aaec>
1000b244:	9cc03fcc 	andi	r19,r19,255
1000b248:	b811883a 	mov	r8,r23
1000b24c:	9802e91e 	bne	r19,zero,1000bdf4 <___vfiprintf_internal_r+0x1480>
1000b250:	8c400414 	ori	r17,r17,16
1000b254:	8880080c 	andi	r2,r17,32
1000b258:	103fb81e 	bne	r2,zero,1000b13c <__alt_data_end+0xf800b13c>
1000b25c:	8880040c 	andi	r2,r17,16
1000b260:	10022e26 	beq	r2,zero,1000bb1c <___vfiprintf_internal_r+0x11a8>
1000b264:	d9402217 	ldw	r5,136(sp)
1000b268:	2cc00017 	ldw	r19,0(r5)
1000b26c:	29400104 	addi	r5,r5,4
1000b270:	d9402215 	stw	r5,136(sp)
1000b274:	9829d7fa 	srai	r20,r19,31
1000b278:	a005883a 	mov	r2,r20
1000b27c:	003fb506 	br	1000b154 <__alt_data_end+0xf800b154>
1000b280:	9cc03fcc 	andi	r19,r19,255
1000b284:	b811883a 	mov	r8,r23
1000b288:	9802fa1e 	bne	r19,zero,1000be74 <___vfiprintf_internal_r+0x1500>
1000b28c:	8c400414 	ori	r17,r17,16
1000b290:	8880080c 	andi	r2,r17,32
1000b294:	103f661e 	bne	r2,zero,1000b030 <__alt_data_end+0xf800b030>
1000b298:	8880040c 	andi	r2,r17,16
1000b29c:	10020626 	beq	r2,zero,1000bab8 <___vfiprintf_internal_r+0x1144>
1000b2a0:	d9402217 	ldw	r5,136(sp)
1000b2a4:	d8001d85 	stb	zero,118(sp)
1000b2a8:	0029883a 	mov	r20,zero
1000b2ac:	28800104 	addi	r2,r5,4
1000b2b0:	2cc00017 	ldw	r19,0(r5)
1000b2b4:	80020816 	blt	r16,zero,1000bad8 <___vfiprintf_internal_r+0x1164>
1000b2b8:	00ffdfc4 	movi	r3,-129
1000b2bc:	d8802215 	stw	r2,136(sp)
1000b2c0:	88e2703a 	and	r17,r17,r3
1000b2c4:	983f651e 	bne	r19,zero,1000b05c <__alt_data_end+0xf800b05c>
1000b2c8:	002b883a 	mov	r21,zero
1000b2cc:	8002cf26 	beq	r16,zero,1000be0c <___vfiprintf_internal_r+0x1498>
1000b2d0:	0027883a 	mov	r19,zero
1000b2d4:	0029883a 	mov	r20,zero
1000b2d8:	003f6106 	br	1000b060 <__alt_data_end+0xf800b060>
1000b2dc:	9cc03fcc 	andi	r19,r19,255
1000b2e0:	b811883a 	mov	r8,r23
1000b2e4:	9802e01e 	bne	r19,zero,1000be68 <___vfiprintf_internal_r+0x14f4>
1000b2e8:	8c400414 	ori	r17,r17,16
1000b2ec:	8880080c 	andi	r2,r17,32
1000b2f0:	1000641e 	bne	r2,zero,1000b484 <___vfiprintf_internal_r+0xb10>
1000b2f4:	8880040c 	andi	r2,r17,16
1000b2f8:	1001c81e 	bne	r2,zero,1000ba1c <___vfiprintf_internal_r+0x10a8>
1000b2fc:	8880100c 	andi	r2,r17,64
1000b300:	d8001d85 	stb	zero,118(sp)
1000b304:	1002281e 	bne	r2,zero,1000bba8 <___vfiprintf_internal_r+0x1234>
1000b308:	d9002217 	ldw	r4,136(sp)
1000b30c:	0029883a 	mov	r20,zero
1000b310:	20800104 	addi	r2,r4,4
1000b314:	24c00017 	ldw	r19,0(r4)
1000b318:	8001c60e 	bge	r16,zero,1000ba34 <___vfiprintf_internal_r+0x10c0>
1000b31c:	d8802215 	stw	r2,136(sp)
1000b320:	002b883a 	mov	r21,zero
1000b324:	9d04b03a 	or	r2,r19,r20
1000b328:	103f911e 	bne	r2,zero,1000b170 <__alt_data_end+0xf800b170>
1000b32c:	00800044 	movi	r2,1
1000b330:	10803fcc 	andi	r2,r2,255
1000b334:	00c00044 	movi	r3,1
1000b338:	10c05f26 	beq	r2,r3,1000b4b8 <___vfiprintf_internal_r+0xb44>
1000b33c:	00c00084 	movi	r3,2
1000b340:	10ffe31e 	bne	r2,r3,1000b2d0 <__alt_data_end+0xf800b2d0>
1000b344:	0027883a 	mov	r19,zero
1000b348:	0029883a 	mov	r20,zero
1000b34c:	00015106 	br	1000b894 <___vfiprintf_internal_r+0xf20>
1000b350:	9cc03fcc 	andi	r19,r19,255
1000b354:	b811883a 	mov	r8,r23
1000b358:	9802c01e 	bne	r19,zero,1000be5c <___vfiprintf_internal_r+0x14e8>
1000b35c:	01440074 	movhi	r5,4097
1000b360:	2949a804 	addi	r5,r5,9888
1000b364:	d9402615 	stw	r5,152(sp)
1000b368:	8880080c 	andi	r2,r17,32
1000b36c:	103f541e 	bne	r2,zero,1000b0c0 <__alt_data_end+0xf800b0c0>
1000b370:	8880040c 	andi	r2,r17,16
1000b374:	1001f226 	beq	r2,zero,1000bb40 <___vfiprintf_internal_r+0x11cc>
1000b378:	d9402217 	ldw	r5,136(sp)
1000b37c:	0029883a 	mov	r20,zero
1000b380:	2cc00017 	ldw	r19,0(r5)
1000b384:	29400104 	addi	r5,r5,4
1000b388:	d9402215 	stw	r5,136(sp)
1000b38c:	003f5106 	br	1000b0d4 <__alt_data_end+0xf800b0d4>
1000b390:	d8c02217 	ldw	r3,136(sp)
1000b394:	b811883a 	mov	r8,r23
1000b398:	d8001d85 	stb	zero,118(sp)
1000b39c:	1dc00017 	ldw	r23,0(r3)
1000b3a0:	1f000104 	addi	fp,r3,4
1000b3a4:	b8025926 	beq	r23,zero,1000bd0c <___vfiprintf_internal_r+0x1398>
1000b3a8:	80023316 	blt	r16,zero,1000bc78 <___vfiprintf_internal_r+0x1304>
1000b3ac:	800d883a 	mov	r6,r16
1000b3b0:	000b883a 	mov	r5,zero
1000b3b4:	b809883a 	mov	r4,r23
1000b3b8:	da002a15 	stw	r8,168(sp)
1000b3bc:	0008f4c0 	call	10008f4c <memchr>
1000b3c0:	da002a17 	ldw	r8,168(sp)
1000b3c4:	10026826 	beq	r2,zero,1000bd68 <___vfiprintf_internal_r+0x13f4>
1000b3c8:	15e9c83a 	sub	r20,r2,r23
1000b3cc:	dd401d83 	ldbu	r21,118(sp)
1000b3d0:	df002215 	stw	fp,136(sp)
1000b3d4:	0021883a 	mov	r16,zero
1000b3d8:	003e6906 	br	1000ad80 <__alt_data_end+0xf800ad80>
1000b3dc:	9cc03fcc 	andi	r19,r19,255
1000b3e0:	b811883a 	mov	r8,r23
1000b3e4:	983fc126 	beq	r19,zero,1000b2ec <__alt_data_end+0xf800b2ec>
1000b3e8:	d8c02303 	ldbu	r3,140(sp)
1000b3ec:	d8c01d85 	stb	r3,118(sp)
1000b3f0:	003fbe06 	br	1000b2ec <__alt_data_end+0xf800b2ec>
1000b3f4:	d9002217 	ldw	r4,136(sp)
1000b3f8:	d9402217 	ldw	r5,136(sp)
1000b3fc:	21000017 	ldw	r4,0(r4)
1000b400:	28800104 	addi	r2,r5,4
1000b404:	d9002515 	stw	r4,148(sp)
1000b408:	203e3d16 	blt	r4,zero,1000ad00 <__alt_data_end+0xf800ad00>
1000b40c:	d8802215 	stw	r2,136(sp)
1000b410:	b0c00007 	ldb	r3,0(r22)
1000b414:	003db406 	br	1000aae8 <__alt_data_end+0xf800aae8>
1000b418:	00c00ac4 	movi	r3,43
1000b41c:	d8c02305 	stb	r3,140(sp)
1000b420:	04c00044 	movi	r19,1
1000b424:	b0c00007 	ldb	r3,0(r22)
1000b428:	003daf06 	br	1000aae8 <__alt_data_end+0xf800aae8>
1000b42c:	b0c00007 	ldb	r3,0(r22)
1000b430:	01000a84 	movi	r4,42
1000b434:	b4000044 	addi	r16,r22,1
1000b438:	19025e26 	beq	r3,r4,1000bdb4 <___vfiprintf_internal_r+0x1440>
1000b43c:	1f3ff404 	addi	fp,r3,-48
1000b440:	0009883a 	mov	r4,zero
1000b444:	af025236 	bltu	r21,fp,1000bd90 <___vfiprintf_internal_r+0x141c>
1000b448:	01400284 	movi	r5,10
1000b44c:	000175c0 	call	1000175c <__mulsi3>
1000b450:	80c00007 	ldb	r3,0(r16)
1000b454:	1709883a 	add	r4,r2,fp
1000b458:	85800044 	addi	r22,r16,1
1000b45c:	1f3ff404 	addi	fp,r3,-48
1000b460:	b021883a 	mov	r16,r22
1000b464:	af3ff82e 	bgeu	r21,fp,1000b448 <__alt_data_end+0xf800b448>
1000b468:	2021883a 	mov	r16,r4
1000b46c:	203d9f0e 	bge	r4,zero,1000aaec <__alt_data_end+0xf800aaec>
1000b470:	043fffc4 	movi	r16,-1
1000b474:	003d9d06 	br	1000aaec <__alt_data_end+0xf800aaec>
1000b478:	8c401014 	ori	r17,r17,64
1000b47c:	b0c00007 	ldb	r3,0(r22)
1000b480:	003d9906 	br	1000aae8 <__alt_data_end+0xf800aae8>
1000b484:	d9002217 	ldw	r4,136(sp)
1000b488:	d8001d85 	stb	zero,118(sp)
1000b48c:	20c00204 	addi	r3,r4,8
1000b490:	24c00017 	ldw	r19,0(r4)
1000b494:	25000117 	ldw	r20,4(r4)
1000b498:	8001e716 	blt	r16,zero,1000bc38 <___vfiprintf_internal_r+0x12c4>
1000b49c:	013fdfc4 	movi	r4,-129
1000b4a0:	9d04b03a 	or	r2,r19,r20
1000b4a4:	d8c02215 	stw	r3,136(sp)
1000b4a8:	8922703a 	and	r17,r17,r4
1000b4ac:	002b883a 	mov	r21,zero
1000b4b0:	103f2f1e 	bne	r2,zero,1000b170 <__alt_data_end+0xf800b170>
1000b4b4:	803e2f26 	beq	r16,zero,1000ad74 <__alt_data_end+0xf800ad74>
1000b4b8:	0027883a 	mov	r19,zero
1000b4bc:	9cc00c04 	addi	r19,r19,48
1000b4c0:	dcc019c5 	stb	r19,103(sp)
1000b4c4:	dd002817 	ldw	r20,160(sp)
1000b4c8:	ddc019c4 	addi	r23,sp,103
1000b4cc:	003e2c06 	br	1000ad80 <__alt_data_end+0xf800ad80>
1000b4d0:	9cc03fcc 	andi	r19,r19,255
1000b4d4:	b811883a 	mov	r8,r23
1000b4d8:	9802571e 	bne	r19,zero,1000be38 <___vfiprintf_internal_r+0x14c4>
1000b4dc:	18005726 	beq	r3,zero,1000b63c <___vfiprintf_internal_r+0xcc8>
1000b4e0:	04c00044 	movi	r19,1
1000b4e4:	d8c01005 	stb	r3,64(sp)
1000b4e8:	d8001d85 	stb	zero,118(sp)
1000b4ec:	9829883a 	mov	r20,r19
1000b4f0:	ddc01004 	addi	r23,sp,64
1000b4f4:	003f0a06 	br	1000b120 <__alt_data_end+0xf800b120>
1000b4f8:	d9402017 	ldw	r5,128(sp)
1000b4fc:	d9002117 	ldw	r4,132(sp)
1000b500:	d9801a04 	addi	r6,sp,104
1000b504:	da802a15 	stw	r10,168(sp)
1000b508:	000a8600 	call	1000a860 <__sprint_r.part.0>
1000b50c:	da802a17 	ldw	r10,168(sp)
1000b510:	1000501e 	bne	r2,zero,1000b654 <___vfiprintf_internal_r+0xce0>
1000b514:	d9801b17 	ldw	r6,108(sp)
1000b518:	d8801c17 	ldw	r2,112(sp)
1000b51c:	d811883a 	mov	r8,sp
1000b520:	31000044 	addi	r4,r6,1
1000b524:	003e3606 	br	1000ae00 <__alt_data_end+0xf800ae00>
1000b528:	d9001b17 	ldw	r4,108(sp)
1000b52c:	d8801c17 	ldw	r2,112(sp)
1000b530:	21400044 	addi	r5,r4,1
1000b534:	d9801d87 	ldb	r6,118(sp)
1000b538:	303e5226 	beq	r6,zero,1000ae84 <__alt_data_end+0xf800ae84>
1000b53c:	01800044 	movi	r6,1
1000b540:	d9001d84 	addi	r4,sp,118
1000b544:	1185883a 	add	r2,r2,r6
1000b548:	41000015 	stw	r4,0(r8)
1000b54c:	41800115 	stw	r6,4(r8)
1000b550:	d8801c15 	stw	r2,112(sp)
1000b554:	d9401b15 	stw	r5,108(sp)
1000b558:	010001c4 	movi	r4,7
1000b55c:	2140b00e 	bge	r4,r5,1000b820 <___vfiprintf_internal_r+0xeac>
1000b560:	1000f61e 	bne	r2,zero,1000b93c <___vfiprintf_internal_r+0xfc8>
1000b564:	3800b31e 	bne	r7,zero,1000b834 <___vfiprintf_internal_r+0xec0>
1000b568:	0009883a 	mov	r4,zero
1000b56c:	300b883a 	mov	r5,r6
1000b570:	d811883a 	mov	r8,sp
1000b574:	01802004 	movi	r6,128
1000b578:	19be5226 	beq	r3,r6,1000aec4 <__alt_data_end+0xf800aec4>
1000b57c:	8521c83a 	sub	r16,r16,r20
1000b580:	043e790e 	bge	zero,r16,1000af68 <__alt_data_end+0xf800af68>
1000b584:	05400404 	movi	r21,16
1000b588:	ac01b00e 	bge	r21,r16,1000bc4c <___vfiprintf_internal_r+0x12d8>
1000b58c:	01440074 	movhi	r5,4097
1000b590:	294a0d04 	addi	r5,r5,10292
1000b594:	d9402315 	stw	r5,140(sp)
1000b598:	070001c4 	movi	fp,7
1000b59c:	00000506 	br	1000b5b4 <___vfiprintf_internal_r+0xc40>
1000b5a0:	21400084 	addi	r5,r4,2
1000b5a4:	42000204 	addi	r8,r8,8
1000b5a8:	1809883a 	mov	r4,r3
1000b5ac:	843ffc04 	addi	r16,r16,-16
1000b5b0:	ac000d0e 	bge	r21,r16,1000b5e8 <___vfiprintf_internal_r+0xc74>
1000b5b4:	10800404 	addi	r2,r2,16
1000b5b8:	20c00044 	addi	r3,r4,1
1000b5bc:	44800015 	stw	r18,0(r8)
1000b5c0:	45400115 	stw	r21,4(r8)
1000b5c4:	d8801c15 	stw	r2,112(sp)
1000b5c8:	d8c01b15 	stw	r3,108(sp)
1000b5cc:	e0fff40e 	bge	fp,r3,1000b5a0 <__alt_data_end+0xf800b5a0>
1000b5d0:	1000101e 	bne	r2,zero,1000b614 <___vfiprintf_internal_r+0xca0>
1000b5d4:	843ffc04 	addi	r16,r16,-16
1000b5d8:	01400044 	movi	r5,1
1000b5dc:	0009883a 	mov	r4,zero
1000b5e0:	d811883a 	mov	r8,sp
1000b5e4:	ac3ff316 	blt	r21,r16,1000b5b4 <__alt_data_end+0xf800b5b4>
1000b5e8:	d8c02317 	ldw	r3,140(sp)
1000b5ec:	1405883a 	add	r2,r2,r16
1000b5f0:	44000115 	stw	r16,4(r8)
1000b5f4:	40c00015 	stw	r3,0(r8)
1000b5f8:	d8801c15 	stw	r2,112(sp)
1000b5fc:	d9401b15 	stw	r5,108(sp)
1000b600:	00c001c4 	movi	r3,7
1000b604:	19401916 	blt	r3,r5,1000b66c <___vfiprintf_internal_r+0xcf8>
1000b608:	42000204 	addi	r8,r8,8
1000b60c:	29400044 	addi	r5,r5,1
1000b610:	003e5506 	br	1000af68 <__alt_data_end+0xf800af68>
1000b614:	d9402017 	ldw	r5,128(sp)
1000b618:	d9002117 	ldw	r4,132(sp)
1000b61c:	d9801a04 	addi	r6,sp,104
1000b620:	000a8600 	call	1000a860 <__sprint_r.part.0>
1000b624:	10000b1e 	bne	r2,zero,1000b654 <___vfiprintf_internal_r+0xce0>
1000b628:	d9001b17 	ldw	r4,108(sp)
1000b62c:	d8801c17 	ldw	r2,112(sp)
1000b630:	d811883a 	mov	r8,sp
1000b634:	21400044 	addi	r5,r4,1
1000b638:	003fdc06 	br	1000b5ac <__alt_data_end+0xf800b5ac>
1000b63c:	d8801c17 	ldw	r2,112(sp)
1000b640:	10000426 	beq	r2,zero,1000b654 <___vfiprintf_internal_r+0xce0>
1000b644:	d9402017 	ldw	r5,128(sp)
1000b648:	d9002117 	ldw	r4,132(sp)
1000b64c:	d9801a04 	addi	r6,sp,104
1000b650:	000a8600 	call	1000a860 <__sprint_r.part.0>
1000b654:	d9402017 	ldw	r5,128(sp)
1000b658:	2880030b 	ldhu	r2,12(r5)
1000b65c:	1080100c 	andi	r2,r2,64
1000b660:	10014d1e 	bne	r2,zero,1000bb98 <___vfiprintf_internal_r+0x1224>
1000b664:	d8802417 	ldw	r2,144(sp)
1000b668:	003d9706 	br	1000acc8 <__alt_data_end+0xf800acc8>
1000b66c:	1000d21e 	bne	r2,zero,1000b9b8 <___vfiprintf_internal_r+0x1044>
1000b670:	00c00044 	movi	r3,1
1000b674:	a005883a 	mov	r2,r20
1000b678:	ddc00015 	stw	r23,0(sp)
1000b67c:	dd000115 	stw	r20,4(sp)
1000b680:	dd001c15 	stw	r20,112(sp)
1000b684:	d8c01b15 	stw	r3,108(sp)
1000b688:	d811883a 	mov	r8,sp
1000b68c:	42000204 	addi	r8,r8,8
1000b690:	8c40010c 	andi	r17,r17,4
1000b694:	88004026 	beq	r17,zero,1000b798 <___vfiprintf_internal_r+0xe24>
1000b698:	d9002517 	ldw	r4,148(sp)
1000b69c:	24e3c83a 	sub	r17,r4,r19
1000b6a0:	04403d0e 	bge	zero,r17,1000b798 <___vfiprintf_internal_r+0xe24>
1000b6a4:	04000404 	movi	r16,16
1000b6a8:	8441a90e 	bge	r16,r17,1000bd50 <___vfiprintf_internal_r+0x13dc>
1000b6ac:	00c40074 	movhi	r3,4097
1000b6b0:	18ca1104 	addi	r3,r3,10308
1000b6b4:	d9001b17 	ldw	r4,108(sp)
1000b6b8:	d8c02315 	stw	r3,140(sp)
1000b6bc:	050001c4 	movi	r20,7
1000b6c0:	dd402117 	ldw	r21,132(sp)
1000b6c4:	ddc02017 	ldw	r23,128(sp)
1000b6c8:	00000506 	br	1000b6e0 <___vfiprintf_internal_r+0xd6c>
1000b6cc:	21400084 	addi	r5,r4,2
1000b6d0:	42000204 	addi	r8,r8,8
1000b6d4:	1809883a 	mov	r4,r3
1000b6d8:	8c7ffc04 	addi	r17,r17,-16
1000b6dc:	84400f0e 	bge	r16,r17,1000b71c <___vfiprintf_internal_r+0xda8>
1000b6e0:	01440074 	movhi	r5,4097
1000b6e4:	10800404 	addi	r2,r2,16
1000b6e8:	20c00044 	addi	r3,r4,1
1000b6ec:	294a1104 	addi	r5,r5,10308
1000b6f0:	41400015 	stw	r5,0(r8)
1000b6f4:	44000115 	stw	r16,4(r8)
1000b6f8:	d8801c15 	stw	r2,112(sp)
1000b6fc:	d8c01b15 	stw	r3,108(sp)
1000b700:	a0fff20e 	bge	r20,r3,1000b6cc <__alt_data_end+0xf800b6cc>
1000b704:	1000141e 	bne	r2,zero,1000b758 <___vfiprintf_internal_r+0xde4>
1000b708:	8c7ffc04 	addi	r17,r17,-16
1000b70c:	01400044 	movi	r5,1
1000b710:	0009883a 	mov	r4,zero
1000b714:	d811883a 	mov	r8,sp
1000b718:	847ff116 	blt	r16,r17,1000b6e0 <__alt_data_end+0xf800b6e0>
1000b71c:	d8c02317 	ldw	r3,140(sp)
1000b720:	1445883a 	add	r2,r2,r17
1000b724:	44400115 	stw	r17,4(r8)
1000b728:	40c00015 	stw	r3,0(r8)
1000b72c:	d8801c15 	stw	r2,112(sp)
1000b730:	d9401b15 	stw	r5,108(sp)
1000b734:	00c001c4 	movi	r3,7
1000b738:	1940170e 	bge	r3,r5,1000b798 <___vfiprintf_internal_r+0xe24>
1000b73c:	1000101e 	bne	r2,zero,1000b780 <___vfiprintf_internal_r+0xe0c>
1000b740:	d8802517 	ldw	r2,148(sp)
1000b744:	14c11616 	blt	r2,r19,1000bba0 <___vfiprintf_internal_r+0x122c>
1000b748:	d9002417 	ldw	r4,144(sp)
1000b74c:	2089883a 	add	r4,r4,r2
1000b750:	d9002415 	stw	r4,144(sp)
1000b754:	003e1806 	br	1000afb8 <__alt_data_end+0xf800afb8>
1000b758:	d9801a04 	addi	r6,sp,104
1000b75c:	b80b883a 	mov	r5,r23
1000b760:	a809883a 	mov	r4,r21
1000b764:	000a8600 	call	1000a860 <__sprint_r.part.0>
1000b768:	103fba1e 	bne	r2,zero,1000b654 <__alt_data_end+0xf800b654>
1000b76c:	d9001b17 	ldw	r4,108(sp)
1000b770:	d8801c17 	ldw	r2,112(sp)
1000b774:	d811883a 	mov	r8,sp
1000b778:	21400044 	addi	r5,r4,1
1000b77c:	003fd606 	br	1000b6d8 <__alt_data_end+0xf800b6d8>
1000b780:	d9402017 	ldw	r5,128(sp)
1000b784:	d9002117 	ldw	r4,132(sp)
1000b788:	d9801a04 	addi	r6,sp,104
1000b78c:	000a8600 	call	1000a860 <__sprint_r.part.0>
1000b790:	103fb01e 	bne	r2,zero,1000b654 <__alt_data_end+0xf800b654>
1000b794:	d8801c17 	ldw	r2,112(sp)
1000b798:	d8c02517 	ldw	r3,148(sp)
1000b79c:	1cc0010e 	bge	r3,r19,1000b7a4 <___vfiprintf_internal_r+0xe30>
1000b7a0:	9807883a 	mov	r3,r19
1000b7a4:	d9002417 	ldw	r4,144(sp)
1000b7a8:	20c9883a 	add	r4,r4,r3
1000b7ac:	d9002415 	stw	r4,144(sp)
1000b7b0:	103e0126 	beq	r2,zero,1000afb8 <__alt_data_end+0xf800afb8>
1000b7b4:	d9402017 	ldw	r5,128(sp)
1000b7b8:	d9002117 	ldw	r4,132(sp)
1000b7bc:	d9801a04 	addi	r6,sp,104
1000b7c0:	000a8600 	call	1000a860 <__sprint_r.part.0>
1000b7c4:	103dfc26 	beq	r2,zero,1000afb8 <__alt_data_end+0xf800afb8>
1000b7c8:	003fa206 	br	1000b654 <__alt_data_end+0xf800b654>
1000b7cc:	d9402017 	ldw	r5,128(sp)
1000b7d0:	d9002117 	ldw	r4,132(sp)
1000b7d4:	d9801a04 	addi	r6,sp,104
1000b7d8:	d9c02b15 	stw	r7,172(sp)
1000b7dc:	000a8600 	call	1000a860 <__sprint_r.part.0>
1000b7e0:	d9c02b17 	ldw	r7,172(sp)
1000b7e4:	103f9b1e 	bne	r2,zero,1000b654 <__alt_data_end+0xf800b654>
1000b7e8:	d9001b17 	ldw	r4,108(sp)
1000b7ec:	d8801c17 	ldw	r2,112(sp)
1000b7f0:	d811883a 	mov	r8,sp
1000b7f4:	21800044 	addi	r6,r4,1
1000b7f8:	003dbf06 	br	1000aef8 <__alt_data_end+0xf800aef8>
1000b7fc:	1000d81e 	bne	r2,zero,1000bb60 <___vfiprintf_internal_r+0x11ec>
1000b800:	d9001d87 	ldb	r4,118(sp)
1000b804:	20000a26 	beq	r4,zero,1000b830 <___vfiprintf_internal_r+0xebc>
1000b808:	00800044 	movi	r2,1
1000b80c:	d9001d84 	addi	r4,sp,118
1000b810:	100b883a 	mov	r5,r2
1000b814:	d9000015 	stw	r4,0(sp)
1000b818:	d8800115 	stw	r2,4(sp)
1000b81c:	d811883a 	mov	r8,sp
1000b820:	2809883a 	mov	r4,r5
1000b824:	42000204 	addi	r8,r8,8
1000b828:	29400044 	addi	r5,r5,1
1000b82c:	003d9506 	br	1000ae84 <__alt_data_end+0xf800ae84>
1000b830:	3800fd26 	beq	r7,zero,1000bc28 <___vfiprintf_internal_r+0x12b4>
1000b834:	00800084 	movi	r2,2
1000b838:	d9001d04 	addi	r4,sp,116
1000b83c:	d9000015 	stw	r4,0(sp)
1000b840:	d8800115 	stw	r2,4(sp)
1000b844:	01400044 	movi	r5,1
1000b848:	d811883a 	mov	r8,sp
1000b84c:	2809883a 	mov	r4,r5
1000b850:	42000204 	addi	r8,r8,8
1000b854:	29400044 	addi	r5,r5,1
1000b858:	003f4606 	br	1000b574 <__alt_data_end+0xf800b574>
1000b85c:	d8802517 	ldw	r2,148(sp)
1000b860:	14c0010e 	bge	r2,r19,1000b868 <___vfiprintf_internal_r+0xef4>
1000b864:	9805883a 	mov	r2,r19
1000b868:	d9402417 	ldw	r5,144(sp)
1000b86c:	288b883a 	add	r5,r5,r2
1000b870:	d9402415 	stw	r5,144(sp)
1000b874:	003dd006 	br	1000afb8 <__alt_data_end+0xf800afb8>
1000b878:	d8001d85 	stb	zero,118(sp)
1000b87c:	80005d16 	blt	r16,zero,1000b9f4 <___vfiprintf_internal_r+0x1080>
1000b880:	00ffdfc4 	movi	r3,-129
1000b884:	9d04b03a 	or	r2,r19,r20
1000b888:	88e2703a 	and	r17,r17,r3
1000b88c:	103d3726 	beq	r2,zero,1000ad6c <__alt_data_end+0xf800ad6c>
1000b890:	002b883a 	mov	r21,zero
1000b894:	d9002617 	ldw	r4,152(sp)
1000b898:	ddc01a04 	addi	r23,sp,104
1000b89c:	988003cc 	andi	r2,r19,15
1000b8a0:	a006973a 	slli	r3,r20,28
1000b8a4:	2085883a 	add	r2,r4,r2
1000b8a8:	9826d13a 	srli	r19,r19,4
1000b8ac:	10800003 	ldbu	r2,0(r2)
1000b8b0:	a028d13a 	srli	r20,r20,4
1000b8b4:	bdffffc4 	addi	r23,r23,-1
1000b8b8:	1ce6b03a 	or	r19,r3,r19
1000b8bc:	b8800005 	stb	r2,0(r23)
1000b8c0:	9d04b03a 	or	r2,r19,r20
1000b8c4:	103ff51e 	bne	r2,zero,1000b89c <__alt_data_end+0xf800b89c>
1000b8c8:	d8801e17 	ldw	r2,120(sp)
1000b8cc:	15e9c83a 	sub	r20,r2,r23
1000b8d0:	003d2b06 	br	1000ad80 <__alt_data_end+0xf800ad80>
1000b8d4:	d9402017 	ldw	r5,128(sp)
1000b8d8:	d9002117 	ldw	r4,132(sp)
1000b8dc:	d9801a04 	addi	r6,sp,104
1000b8e0:	000a8600 	call	1000a860 <__sprint_r.part.0>
1000b8e4:	103f5b1e 	bne	r2,zero,1000b654 <__alt_data_end+0xf800b654>
1000b8e8:	d8801c17 	ldw	r2,112(sp)
1000b8ec:	d811883a 	mov	r8,sp
1000b8f0:	003f6706 	br	1000b690 <__alt_data_end+0xf800b690>
1000b8f4:	d9402017 	ldw	r5,128(sp)
1000b8f8:	d9002117 	ldw	r4,132(sp)
1000b8fc:	d9801a04 	addi	r6,sp,104
1000b900:	000a8600 	call	1000a860 <__sprint_r.part.0>
1000b904:	103f531e 	bne	r2,zero,1000b654 <__alt_data_end+0xf800b654>
1000b908:	d811883a 	mov	r8,sp
1000b90c:	003cd906 	br	1000ac74 <__alt_data_end+0xf800ac74>
1000b910:	10803fcc 	andi	r2,r2,255
1000b914:	1080201c 	xori	r2,r2,128
1000b918:	10bfe004 	addi	r2,r2,-128
1000b91c:	00c00c04 	movi	r3,48
1000b920:	10ffe926 	beq	r2,r3,1000b8c8 <__alt_data_end+0xf800b8c8>
1000b924:	b8ffffc5 	stb	r3,-1(r23)
1000b928:	d8c01e17 	ldw	r3,120(sp)
1000b92c:	b8bfffc4 	addi	r2,r23,-1
1000b930:	102f883a 	mov	r23,r2
1000b934:	18a9c83a 	sub	r20,r3,r2
1000b938:	003d1106 	br	1000ad80 <__alt_data_end+0xf800ad80>
1000b93c:	d9402017 	ldw	r5,128(sp)
1000b940:	d9002117 	ldw	r4,132(sp)
1000b944:	d9801a04 	addi	r6,sp,104
1000b948:	d8c02a15 	stw	r3,168(sp)
1000b94c:	d9c02b15 	stw	r7,172(sp)
1000b950:	000a8600 	call	1000a860 <__sprint_r.part.0>
1000b954:	d8c02a17 	ldw	r3,168(sp)
1000b958:	d9c02b17 	ldw	r7,172(sp)
1000b95c:	103f3d1e 	bne	r2,zero,1000b654 <__alt_data_end+0xf800b654>
1000b960:	d9001b17 	ldw	r4,108(sp)
1000b964:	d8801c17 	ldw	r2,112(sp)
1000b968:	d811883a 	mov	r8,sp
1000b96c:	21400044 	addi	r5,r4,1
1000b970:	003d4406 	br	1000ae84 <__alt_data_end+0xf800ae84>
1000b974:	d9402017 	ldw	r5,128(sp)
1000b978:	d9002117 	ldw	r4,132(sp)
1000b97c:	d9801a04 	addi	r6,sp,104
1000b980:	d8c02a15 	stw	r3,168(sp)
1000b984:	000a8600 	call	1000a860 <__sprint_r.part.0>
1000b988:	d8c02a17 	ldw	r3,168(sp)
1000b98c:	103f311e 	bne	r2,zero,1000b654 <__alt_data_end+0xf800b654>
1000b990:	d9001b17 	ldw	r4,108(sp)
1000b994:	d8801c17 	ldw	r2,112(sp)
1000b998:	d811883a 	mov	r8,sp
1000b99c:	21400044 	addi	r5,r4,1
1000b9a0:	003ef406 	br	1000b574 <__alt_data_end+0xf800b574>
1000b9a4:	1000bd1e 	bne	r2,zero,1000bc9c <___vfiprintf_internal_r+0x1328>
1000b9a8:	01400044 	movi	r5,1
1000b9ac:	0009883a 	mov	r4,zero
1000b9b0:	d811883a 	mov	r8,sp
1000b9b4:	003ef106 	br	1000b57c <__alt_data_end+0xf800b57c>
1000b9b8:	d9402017 	ldw	r5,128(sp)
1000b9bc:	d9002117 	ldw	r4,132(sp)
1000b9c0:	d9801a04 	addi	r6,sp,104
1000b9c4:	000a8600 	call	1000a860 <__sprint_r.part.0>
1000b9c8:	103f221e 	bne	r2,zero,1000b654 <__alt_data_end+0xf800b654>
1000b9cc:	d9401b17 	ldw	r5,108(sp)
1000b9d0:	d8801c17 	ldw	r2,112(sp)
1000b9d4:	d811883a 	mov	r8,sp
1000b9d8:	29400044 	addi	r5,r5,1
1000b9dc:	003d6206 	br	1000af68 <__alt_data_end+0xf800af68>
1000b9e0:	01440074 	movhi	r5,4097
1000b9e4:	2949ad04 	addi	r5,r5,9908
1000b9e8:	d9402615 	stw	r5,152(sp)
1000b9ec:	d8c02215 	stw	r3,136(sp)
1000b9f0:	1023883a 	mov	r17,r2
1000b9f4:	9d04b03a 	or	r2,r19,r20
1000b9f8:	103fa51e 	bne	r2,zero,1000b890 <__alt_data_end+0xf800b890>
1000b9fc:	002b883a 	mov	r21,zero
1000ba00:	00800084 	movi	r2,2
1000ba04:	003e4a06 	br	1000b330 <__alt_data_end+0xf800b330>
1000ba08:	01440074 	movhi	r5,4097
1000ba0c:	2949ad04 	addi	r5,r5,9908
1000ba10:	002b883a 	mov	r21,zero
1000ba14:	d9402615 	stw	r5,152(sp)
1000ba18:	003f9e06 	br	1000b894 <__alt_data_end+0xf800b894>
1000ba1c:	d9402217 	ldw	r5,136(sp)
1000ba20:	d8001d85 	stb	zero,118(sp)
1000ba24:	0029883a 	mov	r20,zero
1000ba28:	28800104 	addi	r2,r5,4
1000ba2c:	2cc00017 	ldw	r19,0(r5)
1000ba30:	803e3a16 	blt	r16,zero,1000b31c <__alt_data_end+0xf800b31c>
1000ba34:	00ffdfc4 	movi	r3,-129
1000ba38:	d8802215 	stw	r2,136(sp)
1000ba3c:	88e2703a 	and	r17,r17,r3
1000ba40:	002b883a 	mov	r21,zero
1000ba44:	983e9b26 	beq	r19,zero,1000b4b4 <__alt_data_end+0xf800b4b4>
1000ba48:	00800244 	movi	r2,9
1000ba4c:	14fdc936 	bltu	r2,r19,1000b174 <__alt_data_end+0xf800b174>
1000ba50:	003e9a06 	br	1000b4bc <__alt_data_end+0xf800b4bc>
1000ba54:	00800c04 	movi	r2,48
1000ba58:	d8c01d45 	stb	r3,117(sp)
1000ba5c:	d8801d05 	stb	r2,116(sp)
1000ba60:	d8001d85 	stb	zero,118(sp)
1000ba64:	88c00094 	ori	r3,r17,2
1000ba68:	80009c16 	blt	r16,zero,1000bcdc <___vfiprintf_internal_r+0x1368>
1000ba6c:	00bfdfc4 	movi	r2,-129
1000ba70:	88a2703a 	and	r17,r17,r2
1000ba74:	8c400094 	ori	r17,r17,2
1000ba78:	002b883a 	mov	r21,zero
1000ba7c:	003f8506 	br	1000b894 <__alt_data_end+0xf800b894>
1000ba80:	b029883a 	mov	r20,r22
1000ba84:	003c0b06 	br	1000aab4 <__alt_data_end+0xf800aab4>
1000ba88:	04e7c83a 	sub	r19,zero,r19
1000ba8c:	05400b44 	movi	r21,45
1000ba90:	9804c03a 	cmpne	r2,r19,zero
1000ba94:	0529c83a 	sub	r20,zero,r20
1000ba98:	dd401d85 	stb	r21,118(sp)
1000ba9c:	a0a9c83a 	sub	r20,r20,r2
1000baa0:	80009716 	blt	r16,zero,1000bd00 <___vfiprintf_internal_r+0x138c>
1000baa4:	00bfdfc4 	movi	r2,-129
1000baa8:	88a2703a 	and	r17,r17,r2
1000baac:	003db006 	br	1000b170 <__alt_data_end+0xf800b170>
1000bab0:	b0c00007 	ldb	r3,0(r22)
1000bab4:	003c0c06 	br	1000aae8 <__alt_data_end+0xf800aae8>
1000bab8:	8880100c 	andi	r2,r17,64
1000babc:	d8001d85 	stb	zero,118(sp)
1000bac0:	1000461e 	bne	r2,zero,1000bbdc <___vfiprintf_internal_r+0x1268>
1000bac4:	d9002217 	ldw	r4,136(sp)
1000bac8:	0029883a 	mov	r20,zero
1000bacc:	20800104 	addi	r2,r4,4
1000bad0:	24c00017 	ldw	r19,0(r4)
1000bad4:	803df80e 	bge	r16,zero,1000b2b8 <__alt_data_end+0xf800b2b8>
1000bad8:	9d06b03a 	or	r3,r19,r20
1000badc:	d8802215 	stw	r2,136(sp)
1000bae0:	183d5e1e 	bne	r3,zero,1000b05c <__alt_data_end+0xf800b05c>
1000bae4:	002b883a 	mov	r21,zero
1000bae8:	0005883a 	mov	r2,zero
1000baec:	003e1006 	br	1000b330 <__alt_data_end+0xf800b330>
1000baf0:	8880040c 	andi	r2,r17,16
1000baf4:	1000321e 	bne	r2,zero,1000bbc0 <___vfiprintf_internal_r+0x124c>
1000baf8:	8c40100c 	andi	r17,r17,64
1000bafc:	88008d26 	beq	r17,zero,1000bd34 <___vfiprintf_internal_r+0x13c0>
1000bb00:	d9402217 	ldw	r5,136(sp)
1000bb04:	d8c02417 	ldw	r3,144(sp)
1000bb08:	28800017 	ldw	r2,0(r5)
1000bb0c:	29400104 	addi	r5,r5,4
1000bb10:	d9402215 	stw	r5,136(sp)
1000bb14:	10c0000d 	sth	r3,0(r2)
1000bb18:	003bca06 	br	1000aa44 <__alt_data_end+0xf800aa44>
1000bb1c:	8880100c 	andi	r2,r17,64
1000bb20:	10003a26 	beq	r2,zero,1000bc0c <___vfiprintf_internal_r+0x1298>
1000bb24:	d8802217 	ldw	r2,136(sp)
1000bb28:	14c0000f 	ldh	r19,0(r2)
1000bb2c:	10800104 	addi	r2,r2,4
1000bb30:	d8802215 	stw	r2,136(sp)
1000bb34:	9829d7fa 	srai	r20,r19,31
1000bb38:	a005883a 	mov	r2,r20
1000bb3c:	003d8506 	br	1000b154 <__alt_data_end+0xf800b154>
1000bb40:	8880100c 	andi	r2,r17,64
1000bb44:	10002b26 	beq	r2,zero,1000bbf4 <___vfiprintf_internal_r+0x1280>
1000bb48:	d8802217 	ldw	r2,136(sp)
1000bb4c:	0029883a 	mov	r20,zero
1000bb50:	14c0000b 	ldhu	r19,0(r2)
1000bb54:	10800104 	addi	r2,r2,4
1000bb58:	d8802215 	stw	r2,136(sp)
1000bb5c:	003d5d06 	br	1000b0d4 <__alt_data_end+0xf800b0d4>
1000bb60:	d9402017 	ldw	r5,128(sp)
1000bb64:	d9002117 	ldw	r4,132(sp)
1000bb68:	d9801a04 	addi	r6,sp,104
1000bb6c:	d8c02a15 	stw	r3,168(sp)
1000bb70:	d9c02b15 	stw	r7,172(sp)
1000bb74:	000a8600 	call	1000a860 <__sprint_r.part.0>
1000bb78:	d8c02a17 	ldw	r3,168(sp)
1000bb7c:	d9c02b17 	ldw	r7,172(sp)
1000bb80:	103eb41e 	bne	r2,zero,1000b654 <__alt_data_end+0xf800b654>
1000bb84:	d9001b17 	ldw	r4,108(sp)
1000bb88:	d8801c17 	ldw	r2,112(sp)
1000bb8c:	d811883a 	mov	r8,sp
1000bb90:	21400044 	addi	r5,r4,1
1000bb94:	003e6706 	br	1000b534 <__alt_data_end+0xf800b534>
1000bb98:	00bfffc4 	movi	r2,-1
1000bb9c:	003c4a06 	br	1000acc8 <__alt_data_end+0xf800acc8>
1000bba0:	9805883a 	mov	r2,r19
1000bba4:	003ee806 	br	1000b748 <__alt_data_end+0xf800b748>
1000bba8:	d8c02217 	ldw	r3,136(sp)
1000bbac:	0029883a 	mov	r20,zero
1000bbb0:	18800104 	addi	r2,r3,4
1000bbb4:	1cc0000b 	ldhu	r19,0(r3)
1000bbb8:	803f9e0e 	bge	r16,zero,1000ba34 <__alt_data_end+0xf800ba34>
1000bbbc:	003dd706 	br	1000b31c <__alt_data_end+0xf800b31c>
1000bbc0:	d8c02217 	ldw	r3,136(sp)
1000bbc4:	d9002417 	ldw	r4,144(sp)
1000bbc8:	18800017 	ldw	r2,0(r3)
1000bbcc:	18c00104 	addi	r3,r3,4
1000bbd0:	d8c02215 	stw	r3,136(sp)
1000bbd4:	11000015 	stw	r4,0(r2)
1000bbd8:	003b9a06 	br	1000aa44 <__alt_data_end+0xf800aa44>
1000bbdc:	d8c02217 	ldw	r3,136(sp)
1000bbe0:	0029883a 	mov	r20,zero
1000bbe4:	18800104 	addi	r2,r3,4
1000bbe8:	1cc0000b 	ldhu	r19,0(r3)
1000bbec:	803db20e 	bge	r16,zero,1000b2b8 <__alt_data_end+0xf800b2b8>
1000bbf0:	003fb906 	br	1000bad8 <__alt_data_end+0xf800bad8>
1000bbf4:	d9002217 	ldw	r4,136(sp)
1000bbf8:	0029883a 	mov	r20,zero
1000bbfc:	24c00017 	ldw	r19,0(r4)
1000bc00:	21000104 	addi	r4,r4,4
1000bc04:	d9002215 	stw	r4,136(sp)
1000bc08:	003d3206 	br	1000b0d4 <__alt_data_end+0xf800b0d4>
1000bc0c:	d8c02217 	ldw	r3,136(sp)
1000bc10:	1cc00017 	ldw	r19,0(r3)
1000bc14:	18c00104 	addi	r3,r3,4
1000bc18:	d8c02215 	stw	r3,136(sp)
1000bc1c:	9829d7fa 	srai	r20,r19,31
1000bc20:	a005883a 	mov	r2,r20
1000bc24:	003d4b06 	br	1000b154 <__alt_data_end+0xf800b154>
1000bc28:	0009883a 	mov	r4,zero
1000bc2c:	01400044 	movi	r5,1
1000bc30:	d811883a 	mov	r8,sp
1000bc34:	003e4f06 	br	1000b574 <__alt_data_end+0xf800b574>
1000bc38:	d8c02215 	stw	r3,136(sp)
1000bc3c:	002b883a 	mov	r21,zero
1000bc40:	003db806 	br	1000b324 <__alt_data_end+0xf800b324>
1000bc44:	d811883a 	mov	r8,sp
1000bc48:	003e9606 	br	1000b6a4 <__alt_data_end+0xf800b6a4>
1000bc4c:	01040074 	movhi	r4,4097
1000bc50:	210a0d04 	addi	r4,r4,10292
1000bc54:	d9002315 	stw	r4,140(sp)
1000bc58:	003e6306 	br	1000b5e8 <__alt_data_end+0xf800b5e8>
1000bc5c:	b0c00043 	ldbu	r3,1(r22)
1000bc60:	8c400814 	ori	r17,r17,32
1000bc64:	b5800044 	addi	r22,r22,1
1000bc68:	18c03fcc 	andi	r3,r3,255
1000bc6c:	18c0201c 	xori	r3,r3,128
1000bc70:	18ffe004 	addi	r3,r3,-128
1000bc74:	003b9c06 	br	1000aae8 <__alt_data_end+0xf800aae8>
1000bc78:	b809883a 	mov	r4,r23
1000bc7c:	da002a15 	stw	r8,168(sp)
1000bc80:	00047940 	call	10004794 <strlen>
1000bc84:	1029883a 	mov	r20,r2
1000bc88:	dd401d83 	ldbu	r21,118(sp)
1000bc8c:	df002215 	stw	fp,136(sp)
1000bc90:	0021883a 	mov	r16,zero
1000bc94:	da002a17 	ldw	r8,168(sp)
1000bc98:	003c3906 	br	1000ad80 <__alt_data_end+0xf800ad80>
1000bc9c:	d9402017 	ldw	r5,128(sp)
1000bca0:	d9002117 	ldw	r4,132(sp)
1000bca4:	d9801a04 	addi	r6,sp,104
1000bca8:	000a8600 	call	1000a860 <__sprint_r.part.0>
1000bcac:	103e691e 	bne	r2,zero,1000b654 <__alt_data_end+0xf800b654>
1000bcb0:	d9001b17 	ldw	r4,108(sp)
1000bcb4:	d8801c17 	ldw	r2,112(sp)
1000bcb8:	d811883a 	mov	r8,sp
1000bcbc:	21400044 	addi	r5,r4,1
1000bcc0:	003e2e06 	br	1000b57c <__alt_data_end+0xf800b57c>
1000bcc4:	01040074 	movhi	r4,4097
1000bcc8:	210a1104 	addi	r4,r4,10308
1000bccc:	d9002315 	stw	r4,140(sp)
1000bcd0:	d9001b17 	ldw	r4,108(sp)
1000bcd4:	21000044 	addi	r4,r4,1
1000bcd8:	003c5e06 	br	1000ae54 <__alt_data_end+0xf800ae54>
1000bcdc:	002b883a 	mov	r21,zero
1000bce0:	00800084 	movi	r2,2
1000bce4:	10803fcc 	andi	r2,r2,255
1000bce8:	01000044 	movi	r4,1
1000bcec:	11002b26 	beq	r2,r4,1000bd9c <___vfiprintf_internal_r+0x1428>
1000bcf0:	01000084 	movi	r4,2
1000bcf4:	11002b1e 	bne	r2,r4,1000bda4 <___vfiprintf_internal_r+0x1430>
1000bcf8:	1823883a 	mov	r17,r3
1000bcfc:	003ee506 	br	1000b894 <__alt_data_end+0xf800b894>
1000bd00:	8807883a 	mov	r3,r17
1000bd04:	00800044 	movi	r2,1
1000bd08:	003ff606 	br	1000bce4 <__alt_data_end+0xf800bce4>
1000bd0c:	00800184 	movi	r2,6
1000bd10:	1400012e 	bgeu	r2,r16,1000bd18 <___vfiprintf_internal_r+0x13a4>
1000bd14:	1021883a 	mov	r16,r2
1000bd18:	8029883a 	mov	r20,r16
1000bd1c:	8027883a 	mov	r19,r16
1000bd20:	80002216 	blt	r16,zero,1000bdac <___vfiprintf_internal_r+0x1438>
1000bd24:	05c40074 	movhi	r23,4097
1000bd28:	df002215 	stw	fp,136(sp)
1000bd2c:	bdc9b204 	addi	r23,r23,9928
1000bd30:	003cfb06 	br	1000b120 <__alt_data_end+0xf800b120>
1000bd34:	d9002217 	ldw	r4,136(sp)
1000bd38:	d9402417 	ldw	r5,144(sp)
1000bd3c:	20800017 	ldw	r2,0(r4)
1000bd40:	21000104 	addi	r4,r4,4
1000bd44:	d9002215 	stw	r4,136(sp)
1000bd48:	11400015 	stw	r5,0(r2)
1000bd4c:	003b3d06 	br	1000aa44 <__alt_data_end+0xf800aa44>
1000bd50:	01440074 	movhi	r5,4097
1000bd54:	294a1104 	addi	r5,r5,10308
1000bd58:	d9402315 	stw	r5,140(sp)
1000bd5c:	d9401b17 	ldw	r5,108(sp)
1000bd60:	29400044 	addi	r5,r5,1
1000bd64:	003e6d06 	br	1000b71c <__alt_data_end+0xf800b71c>
1000bd68:	8029883a 	mov	r20,r16
1000bd6c:	dd401d83 	ldbu	r21,118(sp)
1000bd70:	df002215 	stw	fp,136(sp)
1000bd74:	0021883a 	mov	r16,zero
1000bd78:	003c0106 	br	1000ad80 <__alt_data_end+0xf800ad80>
1000bd7c:	00c40074 	movhi	r3,4097
1000bd80:	18ca0d04 	addi	r3,r3,10292
1000bd84:	d8c02315 	stw	r3,140(sp)
1000bd88:	280d883a 	mov	r6,r5
1000bd8c:	003c6906 	br	1000af34 <__alt_data_end+0xf800af34>
1000bd90:	802d883a 	mov	r22,r16
1000bd94:	0021883a 	mov	r16,zero
1000bd98:	003b5406 	br	1000aaec <__alt_data_end+0xf800aaec>
1000bd9c:	1823883a 	mov	r17,r3
1000bda0:	003cf306 	br	1000b170 <__alt_data_end+0xf800b170>
1000bda4:	1823883a 	mov	r17,r3
1000bda8:	003cad06 	br	1000b060 <__alt_data_end+0xf800b060>
1000bdac:	0027883a 	mov	r19,zero
1000bdb0:	003fdc06 	br	1000bd24 <__alt_data_end+0xf800bd24>
1000bdb4:	d9402217 	ldw	r5,136(sp)
1000bdb8:	8005883a 	mov	r2,r16
1000bdbc:	b0c00043 	ldbu	r3,1(r22)
1000bdc0:	2c000017 	ldw	r16,0(r5)
1000bdc4:	29000104 	addi	r4,r5,4
1000bdc8:	d9002215 	stw	r4,136(sp)
1000bdcc:	102d883a 	mov	r22,r2
1000bdd0:	803fa50e 	bge	r16,zero,1000bc68 <__alt_data_end+0xf800bc68>
1000bdd4:	18c03fcc 	andi	r3,r3,255
1000bdd8:	18c0201c 	xori	r3,r3,128
1000bddc:	043fffc4 	movi	r16,-1
1000bde0:	18ffe004 	addi	r3,r3,-128
1000bde4:	003b4006 	br	1000aae8 <__alt_data_end+0xf800aae8>
1000bde8:	d9402303 	ldbu	r5,140(sp)
1000bdec:	d9401d85 	stb	r5,118(sp)
1000bdf0:	003cae06 	br	1000b0ac <__alt_data_end+0xf800b0ac>
1000bdf4:	d8c02303 	ldbu	r3,140(sp)
1000bdf8:	d8c01d85 	stb	r3,118(sp)
1000bdfc:	003d1406 	br	1000b250 <__alt_data_end+0xf800b250>
1000be00:	d8c02303 	ldbu	r3,140(sp)
1000be04:	d8c01d85 	stb	r3,118(sp)
1000be08:	003cca06 	br	1000b134 <__alt_data_end+0xf800b134>
1000be0c:	8880004c 	andi	r2,r17,1
1000be10:	002b883a 	mov	r21,zero
1000be14:	10000526 	beq	r2,zero,1000be2c <___vfiprintf_internal_r+0x14b8>
1000be18:	00800c04 	movi	r2,48
1000be1c:	d88019c5 	stb	r2,103(sp)
1000be20:	dd002817 	ldw	r20,160(sp)
1000be24:	ddc019c4 	addi	r23,sp,103
1000be28:	003bd506 	br	1000ad80 <__alt_data_end+0xf800ad80>
1000be2c:	0029883a 	mov	r20,zero
1000be30:	ddc01a04 	addi	r23,sp,104
1000be34:	003bd206 	br	1000ad80 <__alt_data_end+0xf800ad80>
1000be38:	d9002303 	ldbu	r4,140(sp)
1000be3c:	d9001d85 	stb	r4,118(sp)
1000be40:	003da606 	br	1000b4dc <__alt_data_end+0xf800b4dc>
1000be44:	d8c02303 	ldbu	r3,140(sp)
1000be48:	d8c01d85 	stb	r3,118(sp)
1000be4c:	003c7606 	br	1000b028 <__alt_data_end+0xf800b028>
1000be50:	d8c02303 	ldbu	r3,140(sp)
1000be54:	d8c01d85 	stb	r3,118(sp)
1000be58:	003c6506 	br	1000aff0 <__alt_data_end+0xf800aff0>
1000be5c:	d9002303 	ldbu	r4,140(sp)
1000be60:	d9001d85 	stb	r4,118(sp)
1000be64:	003d3d06 	br	1000b35c <__alt_data_end+0xf800b35c>
1000be68:	d8c02303 	ldbu	r3,140(sp)
1000be6c:	d8c01d85 	stb	r3,118(sp)
1000be70:	003d1d06 	br	1000b2e8 <__alt_data_end+0xf800b2e8>
1000be74:	d8c02303 	ldbu	r3,140(sp)
1000be78:	d8c01d85 	stb	r3,118(sp)
1000be7c:	003d0306 	br	1000b28c <__alt_data_end+0xf800b28c>

1000be80 <__vfiprintf_internal>:
1000be80:	00840074 	movhi	r2,4097
1000be84:	10914b04 	addi	r2,r2,17708
1000be88:	300f883a 	mov	r7,r6
1000be8c:	280d883a 	mov	r6,r5
1000be90:	200b883a 	mov	r5,r4
1000be94:	11000017 	ldw	r4,0(r2)
1000be98:	000a9741 	jmpi	1000a974 <___vfiprintf_internal_r>

1000be9c <__sbprintf>:
1000be9c:	2880030b 	ldhu	r2,12(r5)
1000bea0:	2ac01917 	ldw	r11,100(r5)
1000bea4:	2a80038b 	ldhu	r10,14(r5)
1000bea8:	2a400717 	ldw	r9,28(r5)
1000beac:	2a000917 	ldw	r8,36(r5)
1000beb0:	defee204 	addi	sp,sp,-1144
1000beb4:	00c10004 	movi	r3,1024
1000beb8:	dc011a15 	stw	r16,1128(sp)
1000bebc:	10bfff4c 	andi	r2,r2,65533
1000bec0:	2821883a 	mov	r16,r5
1000bec4:	d8cb883a 	add	r5,sp,r3
1000bec8:	dc811c15 	stw	r18,1136(sp)
1000becc:	dc411b15 	stw	r17,1132(sp)
1000bed0:	dfc11d15 	stw	ra,1140(sp)
1000bed4:	2025883a 	mov	r18,r4
1000bed8:	d881030d 	sth	r2,1036(sp)
1000bedc:	dac11915 	stw	r11,1124(sp)
1000bee0:	da81038d 	sth	r10,1038(sp)
1000bee4:	da410715 	stw	r9,1052(sp)
1000bee8:	da010915 	stw	r8,1060(sp)
1000beec:	dec10015 	stw	sp,1024(sp)
1000bef0:	dec10415 	stw	sp,1040(sp)
1000bef4:	d8c10215 	stw	r3,1032(sp)
1000bef8:	d8c10515 	stw	r3,1044(sp)
1000befc:	d8010615 	stw	zero,1048(sp)
1000bf00:	000a9740 	call	1000a974 <___vfiprintf_internal_r>
1000bf04:	1023883a 	mov	r17,r2
1000bf08:	10000416 	blt	r2,zero,1000bf1c <__sbprintf+0x80>
1000bf0c:	d9410004 	addi	r5,sp,1024
1000bf10:	9009883a 	mov	r4,r18
1000bf14:	0001b580 	call	10001b58 <_fflush_r>
1000bf18:	10000d1e 	bne	r2,zero,1000bf50 <__sbprintf+0xb4>
1000bf1c:	d881030b 	ldhu	r2,1036(sp)
1000bf20:	1080100c 	andi	r2,r2,64
1000bf24:	10000326 	beq	r2,zero,1000bf34 <__sbprintf+0x98>
1000bf28:	8080030b 	ldhu	r2,12(r16)
1000bf2c:	10801014 	ori	r2,r2,64
1000bf30:	8080030d 	sth	r2,12(r16)
1000bf34:	8805883a 	mov	r2,r17
1000bf38:	dfc11d17 	ldw	ra,1140(sp)
1000bf3c:	dc811c17 	ldw	r18,1136(sp)
1000bf40:	dc411b17 	ldw	r17,1132(sp)
1000bf44:	dc011a17 	ldw	r16,1128(sp)
1000bf48:	dec11e04 	addi	sp,sp,1144
1000bf4c:	f800283a 	ret
1000bf50:	047fffc4 	movi	r17,-1
1000bf54:	003ff106 	br	1000bf1c <__alt_data_end+0xf800bf1c>

1000bf58 <__swbuf_r>:
1000bf58:	defffb04 	addi	sp,sp,-20
1000bf5c:	dcc00315 	stw	r19,12(sp)
1000bf60:	dc800215 	stw	r18,8(sp)
1000bf64:	dc000015 	stw	r16,0(sp)
1000bf68:	dfc00415 	stw	ra,16(sp)
1000bf6c:	dc400115 	stw	r17,4(sp)
1000bf70:	2025883a 	mov	r18,r4
1000bf74:	2827883a 	mov	r19,r5
1000bf78:	3021883a 	mov	r16,r6
1000bf7c:	20000226 	beq	r4,zero,1000bf88 <__swbuf_r+0x30>
1000bf80:	20800e17 	ldw	r2,56(r4)
1000bf84:	10004226 	beq	r2,zero,1000c090 <__swbuf_r+0x138>
1000bf88:	80800617 	ldw	r2,24(r16)
1000bf8c:	8100030b 	ldhu	r4,12(r16)
1000bf90:	80800215 	stw	r2,8(r16)
1000bf94:	2080020c 	andi	r2,r4,8
1000bf98:	10003626 	beq	r2,zero,1000c074 <__swbuf_r+0x11c>
1000bf9c:	80c00417 	ldw	r3,16(r16)
1000bfa0:	18003426 	beq	r3,zero,1000c074 <__swbuf_r+0x11c>
1000bfa4:	2088000c 	andi	r2,r4,8192
1000bfa8:	9c403fcc 	andi	r17,r19,255
1000bfac:	10001a26 	beq	r2,zero,1000c018 <__swbuf_r+0xc0>
1000bfb0:	80800017 	ldw	r2,0(r16)
1000bfb4:	81000517 	ldw	r4,20(r16)
1000bfb8:	10c7c83a 	sub	r3,r2,r3
1000bfbc:	1900200e 	bge	r3,r4,1000c040 <__swbuf_r+0xe8>
1000bfc0:	18c00044 	addi	r3,r3,1
1000bfc4:	81000217 	ldw	r4,8(r16)
1000bfc8:	11400044 	addi	r5,r2,1
1000bfcc:	81400015 	stw	r5,0(r16)
1000bfd0:	213fffc4 	addi	r4,r4,-1
1000bfd4:	81000215 	stw	r4,8(r16)
1000bfd8:	14c00005 	stb	r19,0(r2)
1000bfdc:	80800517 	ldw	r2,20(r16)
1000bfe0:	10c01e26 	beq	r2,r3,1000c05c <__swbuf_r+0x104>
1000bfe4:	8080030b 	ldhu	r2,12(r16)
1000bfe8:	1080004c 	andi	r2,r2,1
1000bfec:	10000226 	beq	r2,zero,1000bff8 <__swbuf_r+0xa0>
1000bff0:	00800284 	movi	r2,10
1000bff4:	88801926 	beq	r17,r2,1000c05c <__swbuf_r+0x104>
1000bff8:	8805883a 	mov	r2,r17
1000bffc:	dfc00417 	ldw	ra,16(sp)
1000c000:	dcc00317 	ldw	r19,12(sp)
1000c004:	dc800217 	ldw	r18,8(sp)
1000c008:	dc400117 	ldw	r17,4(sp)
1000c00c:	dc000017 	ldw	r16,0(sp)
1000c010:	dec00504 	addi	sp,sp,20
1000c014:	f800283a 	ret
1000c018:	81401917 	ldw	r5,100(r16)
1000c01c:	00b7ffc4 	movi	r2,-8193
1000c020:	21080014 	ori	r4,r4,8192
1000c024:	2884703a 	and	r2,r5,r2
1000c028:	80801915 	stw	r2,100(r16)
1000c02c:	80800017 	ldw	r2,0(r16)
1000c030:	8100030d 	sth	r4,12(r16)
1000c034:	81000517 	ldw	r4,20(r16)
1000c038:	10c7c83a 	sub	r3,r2,r3
1000c03c:	193fe016 	blt	r3,r4,1000bfc0 <__alt_data_end+0xf800bfc0>
1000c040:	800b883a 	mov	r5,r16
1000c044:	9009883a 	mov	r4,r18
1000c048:	0001b580 	call	10001b58 <_fflush_r>
1000c04c:	1000071e 	bne	r2,zero,1000c06c <__swbuf_r+0x114>
1000c050:	80800017 	ldw	r2,0(r16)
1000c054:	00c00044 	movi	r3,1
1000c058:	003fda06 	br	1000bfc4 <__alt_data_end+0xf800bfc4>
1000c05c:	800b883a 	mov	r5,r16
1000c060:	9009883a 	mov	r4,r18
1000c064:	0001b580 	call	10001b58 <_fflush_r>
1000c068:	103fe326 	beq	r2,zero,1000bff8 <__alt_data_end+0xf800bff8>
1000c06c:	00bfffc4 	movi	r2,-1
1000c070:	003fe206 	br	1000bffc <__alt_data_end+0xf800bffc>
1000c074:	800b883a 	mov	r5,r16
1000c078:	9009883a 	mov	r4,r18
1000c07c:	0006c580 	call	10006c58 <__swsetup_r>
1000c080:	103ffa1e 	bne	r2,zero,1000c06c <__alt_data_end+0xf800c06c>
1000c084:	8100030b 	ldhu	r4,12(r16)
1000c088:	80c00417 	ldw	r3,16(r16)
1000c08c:	003fc506 	br	1000bfa4 <__alt_data_end+0xf800bfa4>
1000c090:	0001f440 	call	10001f44 <__sinit>
1000c094:	003fbc06 	br	1000bf88 <__alt_data_end+0xf800bf88>

1000c098 <__swbuf>:
1000c098:	00840074 	movhi	r2,4097
1000c09c:	10914b04 	addi	r2,r2,17708
1000c0a0:	280d883a 	mov	r6,r5
1000c0a4:	200b883a 	mov	r5,r4
1000c0a8:	11000017 	ldw	r4,0(r2)
1000c0ac:	000bf581 	jmpi	1000bf58 <__swbuf_r>

1000c0b0 <_calloc_r>:
1000c0b0:	defffe04 	addi	sp,sp,-8
1000c0b4:	2805883a 	mov	r2,r5
1000c0b8:	dc000015 	stw	r16,0(sp)
1000c0bc:	300b883a 	mov	r5,r6
1000c0c0:	2021883a 	mov	r16,r4
1000c0c4:	1009883a 	mov	r4,r2
1000c0c8:	dfc00115 	stw	ra,4(sp)
1000c0cc:	000175c0 	call	1000175c <__mulsi3>
1000c0d0:	100b883a 	mov	r5,r2
1000c0d4:	8009883a 	mov	r4,r16
1000c0d8:	000325c0 	call	1000325c <_malloc_r>
1000c0dc:	10002926 	beq	r2,zero,1000c184 <_calloc_r+0xd4>
1000c0e0:	11bfff17 	ldw	r6,-4(r2)
1000c0e4:	1021883a 	mov	r16,r2
1000c0e8:	00bfff04 	movi	r2,-4
1000c0ec:	308c703a 	and	r6,r6,r2
1000c0f0:	00c00904 	movi	r3,36
1000c0f4:	308d883a 	add	r6,r6,r2
1000c0f8:	19801636 	bltu	r3,r6,1000c154 <_calloc_r+0xa4>
1000c0fc:	008004c4 	movi	r2,19
1000c100:	11800b2e 	bgeu	r2,r6,1000c130 <_calloc_r+0x80>
1000c104:	80000015 	stw	zero,0(r16)
1000c108:	80000115 	stw	zero,4(r16)
1000c10c:	008006c4 	movi	r2,27
1000c110:	11801a2e 	bgeu	r2,r6,1000c17c <_calloc_r+0xcc>
1000c114:	80000215 	stw	zero,8(r16)
1000c118:	80000315 	stw	zero,12(r16)
1000c11c:	30c0151e 	bne	r6,r3,1000c174 <_calloc_r+0xc4>
1000c120:	80000415 	stw	zero,16(r16)
1000c124:	80800604 	addi	r2,r16,24
1000c128:	80000515 	stw	zero,20(r16)
1000c12c:	00000106 	br	1000c134 <_calloc_r+0x84>
1000c130:	8005883a 	mov	r2,r16
1000c134:	10000015 	stw	zero,0(r2)
1000c138:	10000115 	stw	zero,4(r2)
1000c13c:	10000215 	stw	zero,8(r2)
1000c140:	8005883a 	mov	r2,r16
1000c144:	dfc00117 	ldw	ra,4(sp)
1000c148:	dc000017 	ldw	r16,0(sp)
1000c14c:	dec00204 	addi	sp,sp,8
1000c150:	f800283a 	ret
1000c154:	000b883a 	mov	r5,zero
1000c158:	8009883a 	mov	r4,r16
1000c15c:	0003bb00 	call	10003bb0 <memset>
1000c160:	8005883a 	mov	r2,r16
1000c164:	dfc00117 	ldw	ra,4(sp)
1000c168:	dc000017 	ldw	r16,0(sp)
1000c16c:	dec00204 	addi	sp,sp,8
1000c170:	f800283a 	ret
1000c174:	80800404 	addi	r2,r16,16
1000c178:	003fee06 	br	1000c134 <__alt_data_end+0xf800c134>
1000c17c:	80800204 	addi	r2,r16,8
1000c180:	003fec06 	br	1000c134 <__alt_data_end+0xf800c134>
1000c184:	0005883a 	mov	r2,zero
1000c188:	003fee06 	br	1000c144 <__alt_data_end+0xf800c144>

1000c18c <__fputwc>:
1000c18c:	defff804 	addi	sp,sp,-32
1000c190:	dcc00415 	stw	r19,16(sp)
1000c194:	dc800315 	stw	r18,12(sp)
1000c198:	dc000115 	stw	r16,4(sp)
1000c19c:	dfc00715 	stw	ra,28(sp)
1000c1a0:	dd400615 	stw	r21,24(sp)
1000c1a4:	dd000515 	stw	r20,20(sp)
1000c1a8:	dc400215 	stw	r17,8(sp)
1000c1ac:	2027883a 	mov	r19,r4
1000c1b0:	2825883a 	mov	r18,r5
1000c1b4:	3021883a 	mov	r16,r6
1000c1b8:	0008e980 	call	10008e98 <__locale_mb_cur_max>
1000c1bc:	00c00044 	movi	r3,1
1000c1c0:	10c03e26 	beq	r2,r3,1000c2bc <__fputwc+0x130>
1000c1c4:	81c01704 	addi	r7,r16,92
1000c1c8:	900d883a 	mov	r6,r18
1000c1cc:	d80b883a 	mov	r5,sp
1000c1d0:	9809883a 	mov	r4,r19
1000c1d4:	000c3940 	call	1000c394 <_wcrtomb_r>
1000c1d8:	1029883a 	mov	r20,r2
1000c1dc:	00bfffc4 	movi	r2,-1
1000c1e0:	a0802026 	beq	r20,r2,1000c264 <__fputwc+0xd8>
1000c1e4:	d9400003 	ldbu	r5,0(sp)
1000c1e8:	a0001c26 	beq	r20,zero,1000c25c <__fputwc+0xd0>
1000c1ec:	0023883a 	mov	r17,zero
1000c1f0:	05400284 	movi	r21,10
1000c1f4:	00000906 	br	1000c21c <__fputwc+0x90>
1000c1f8:	80800017 	ldw	r2,0(r16)
1000c1fc:	11400005 	stb	r5,0(r2)
1000c200:	80c00017 	ldw	r3,0(r16)
1000c204:	18c00044 	addi	r3,r3,1
1000c208:	80c00015 	stw	r3,0(r16)
1000c20c:	8c400044 	addi	r17,r17,1
1000c210:	dc45883a 	add	r2,sp,r17
1000c214:	8d00112e 	bgeu	r17,r20,1000c25c <__fputwc+0xd0>
1000c218:	11400003 	ldbu	r5,0(r2)
1000c21c:	80c00217 	ldw	r3,8(r16)
1000c220:	18ffffc4 	addi	r3,r3,-1
1000c224:	80c00215 	stw	r3,8(r16)
1000c228:	183ff30e 	bge	r3,zero,1000c1f8 <__alt_data_end+0xf800c1f8>
1000c22c:	80800617 	ldw	r2,24(r16)
1000c230:	18801916 	blt	r3,r2,1000c298 <__fputwc+0x10c>
1000c234:	80800017 	ldw	r2,0(r16)
1000c238:	11400005 	stb	r5,0(r2)
1000c23c:	80800017 	ldw	r2,0(r16)
1000c240:	10c00003 	ldbu	r3,0(r2)
1000c244:	10800044 	addi	r2,r2,1
1000c248:	1d402326 	beq	r3,r21,1000c2d8 <__fputwc+0x14c>
1000c24c:	80800015 	stw	r2,0(r16)
1000c250:	8c400044 	addi	r17,r17,1
1000c254:	dc45883a 	add	r2,sp,r17
1000c258:	8d3fef36 	bltu	r17,r20,1000c218 <__alt_data_end+0xf800c218>
1000c25c:	9005883a 	mov	r2,r18
1000c260:	00000406 	br	1000c274 <__fputwc+0xe8>
1000c264:	80c0030b 	ldhu	r3,12(r16)
1000c268:	a005883a 	mov	r2,r20
1000c26c:	18c01014 	ori	r3,r3,64
1000c270:	80c0030d 	sth	r3,12(r16)
1000c274:	dfc00717 	ldw	ra,28(sp)
1000c278:	dd400617 	ldw	r21,24(sp)
1000c27c:	dd000517 	ldw	r20,20(sp)
1000c280:	dcc00417 	ldw	r19,16(sp)
1000c284:	dc800317 	ldw	r18,12(sp)
1000c288:	dc400217 	ldw	r17,8(sp)
1000c28c:	dc000117 	ldw	r16,4(sp)
1000c290:	dec00804 	addi	sp,sp,32
1000c294:	f800283a 	ret
1000c298:	800d883a 	mov	r6,r16
1000c29c:	29403fcc 	andi	r5,r5,255
1000c2a0:	9809883a 	mov	r4,r19
1000c2a4:	000bf580 	call	1000bf58 <__swbuf_r>
1000c2a8:	10bfffe0 	cmpeqi	r2,r2,-1
1000c2ac:	10803fcc 	andi	r2,r2,255
1000c2b0:	103fd626 	beq	r2,zero,1000c20c <__alt_data_end+0xf800c20c>
1000c2b4:	00bfffc4 	movi	r2,-1
1000c2b8:	003fee06 	br	1000c274 <__alt_data_end+0xf800c274>
1000c2bc:	90ffffc4 	addi	r3,r18,-1
1000c2c0:	01003f84 	movi	r4,254
1000c2c4:	20ffbf36 	bltu	r4,r3,1000c1c4 <__alt_data_end+0xf800c1c4>
1000c2c8:	900b883a 	mov	r5,r18
1000c2cc:	dc800005 	stb	r18,0(sp)
1000c2d0:	1029883a 	mov	r20,r2
1000c2d4:	003fc506 	br	1000c1ec <__alt_data_end+0xf800c1ec>
1000c2d8:	800d883a 	mov	r6,r16
1000c2dc:	a80b883a 	mov	r5,r21
1000c2e0:	9809883a 	mov	r4,r19
1000c2e4:	000bf580 	call	1000bf58 <__swbuf_r>
1000c2e8:	10bfffe0 	cmpeqi	r2,r2,-1
1000c2ec:	003fef06 	br	1000c2ac <__alt_data_end+0xf800c2ac>

1000c2f0 <_fputwc_r>:
1000c2f0:	3080030b 	ldhu	r2,12(r6)
1000c2f4:	10c8000c 	andi	r3,r2,8192
1000c2f8:	1800051e 	bne	r3,zero,1000c310 <_fputwc_r+0x20>
1000c2fc:	30c01917 	ldw	r3,100(r6)
1000c300:	10880014 	ori	r2,r2,8192
1000c304:	3080030d 	sth	r2,12(r6)
1000c308:	18880014 	ori	r2,r3,8192
1000c30c:	30801915 	stw	r2,100(r6)
1000c310:	000c18c1 	jmpi	1000c18c <__fputwc>

1000c314 <fputwc>:
1000c314:	00840074 	movhi	r2,4097
1000c318:	defffc04 	addi	sp,sp,-16
1000c31c:	10914b04 	addi	r2,r2,17708
1000c320:	dc000115 	stw	r16,4(sp)
1000c324:	14000017 	ldw	r16,0(r2)
1000c328:	dc400215 	stw	r17,8(sp)
1000c32c:	dfc00315 	stw	ra,12(sp)
1000c330:	2023883a 	mov	r17,r4
1000c334:	80000226 	beq	r16,zero,1000c340 <fputwc+0x2c>
1000c338:	80800e17 	ldw	r2,56(r16)
1000c33c:	10001026 	beq	r2,zero,1000c380 <fputwc+0x6c>
1000c340:	2880030b 	ldhu	r2,12(r5)
1000c344:	10c8000c 	andi	r3,r2,8192
1000c348:	1800051e 	bne	r3,zero,1000c360 <fputwc+0x4c>
1000c34c:	28c01917 	ldw	r3,100(r5)
1000c350:	10880014 	ori	r2,r2,8192
1000c354:	2880030d 	sth	r2,12(r5)
1000c358:	18880014 	ori	r2,r3,8192
1000c35c:	28801915 	stw	r2,100(r5)
1000c360:	280d883a 	mov	r6,r5
1000c364:	8009883a 	mov	r4,r16
1000c368:	880b883a 	mov	r5,r17
1000c36c:	dfc00317 	ldw	ra,12(sp)
1000c370:	dc400217 	ldw	r17,8(sp)
1000c374:	dc000117 	ldw	r16,4(sp)
1000c378:	dec00404 	addi	sp,sp,16
1000c37c:	000c18c1 	jmpi	1000c18c <__fputwc>
1000c380:	8009883a 	mov	r4,r16
1000c384:	d9400015 	stw	r5,0(sp)
1000c388:	0001f440 	call	10001f44 <__sinit>
1000c38c:	d9400017 	ldw	r5,0(sp)
1000c390:	003feb06 	br	1000c340 <__alt_data_end+0xf800c340>

1000c394 <_wcrtomb_r>:
1000c394:	defff604 	addi	sp,sp,-40
1000c398:	00840074 	movhi	r2,4097
1000c39c:	dc800815 	stw	r18,32(sp)
1000c3a0:	dc400715 	stw	r17,28(sp)
1000c3a4:	dc000615 	stw	r16,24(sp)
1000c3a8:	10914f04 	addi	r2,r2,17724
1000c3ac:	dfc00915 	stw	ra,36(sp)
1000c3b0:	2021883a 	mov	r16,r4
1000c3b4:	3823883a 	mov	r17,r7
1000c3b8:	14800017 	ldw	r18,0(r2)
1000c3bc:	28001426 	beq	r5,zero,1000c410 <_wcrtomb_r+0x7c>
1000c3c0:	d9400415 	stw	r5,16(sp)
1000c3c4:	d9800515 	stw	r6,20(sp)
1000c3c8:	0008e8c0 	call	10008e8c <__locale_charset>
1000c3cc:	d9800517 	ldw	r6,20(sp)
1000c3d0:	d9400417 	ldw	r5,16(sp)
1000c3d4:	100f883a 	mov	r7,r2
1000c3d8:	dc400015 	stw	r17,0(sp)
1000c3dc:	8009883a 	mov	r4,r16
1000c3e0:	903ee83a 	callr	r18
1000c3e4:	00ffffc4 	movi	r3,-1
1000c3e8:	10c0031e 	bne	r2,r3,1000c3f8 <_wcrtomb_r+0x64>
1000c3ec:	88000015 	stw	zero,0(r17)
1000c3f0:	00c02284 	movi	r3,138
1000c3f4:	80c00015 	stw	r3,0(r16)
1000c3f8:	dfc00917 	ldw	ra,36(sp)
1000c3fc:	dc800817 	ldw	r18,32(sp)
1000c400:	dc400717 	ldw	r17,28(sp)
1000c404:	dc000617 	ldw	r16,24(sp)
1000c408:	dec00a04 	addi	sp,sp,40
1000c40c:	f800283a 	ret
1000c410:	0008e8c0 	call	10008e8c <__locale_charset>
1000c414:	100f883a 	mov	r7,r2
1000c418:	dc400015 	stw	r17,0(sp)
1000c41c:	000d883a 	mov	r6,zero
1000c420:	d9400104 	addi	r5,sp,4
1000c424:	8009883a 	mov	r4,r16
1000c428:	903ee83a 	callr	r18
1000c42c:	003fed06 	br	1000c3e4 <__alt_data_end+0xf800c3e4>

1000c430 <wcrtomb>:
1000c430:	defff604 	addi	sp,sp,-40
1000c434:	00840074 	movhi	r2,4097
1000c438:	dc800615 	stw	r18,24(sp)
1000c43c:	dc400515 	stw	r17,20(sp)
1000c440:	10914b04 	addi	r2,r2,17708
1000c444:	dfc00915 	stw	ra,36(sp)
1000c448:	dd000815 	stw	r20,32(sp)
1000c44c:	dcc00715 	stw	r19,28(sp)
1000c450:	dc000415 	stw	r16,16(sp)
1000c454:	3025883a 	mov	r18,r6
1000c458:	14400017 	ldw	r17,0(r2)
1000c45c:	20001926 	beq	r4,zero,1000c4c4 <wcrtomb+0x94>
1000c460:	00840074 	movhi	r2,4097
1000c464:	10914f04 	addi	r2,r2,17724
1000c468:	15000017 	ldw	r20,0(r2)
1000c46c:	2021883a 	mov	r16,r4
1000c470:	2827883a 	mov	r19,r5
1000c474:	0008e8c0 	call	10008e8c <__locale_charset>
1000c478:	100f883a 	mov	r7,r2
1000c47c:	dc800015 	stw	r18,0(sp)
1000c480:	980d883a 	mov	r6,r19
1000c484:	800b883a 	mov	r5,r16
1000c488:	8809883a 	mov	r4,r17
1000c48c:	a03ee83a 	callr	r20
1000c490:	00ffffc4 	movi	r3,-1
1000c494:	10c0031e 	bne	r2,r3,1000c4a4 <wcrtomb+0x74>
1000c498:	90000015 	stw	zero,0(r18)
1000c49c:	00c02284 	movi	r3,138
1000c4a0:	88c00015 	stw	r3,0(r17)
1000c4a4:	dfc00917 	ldw	ra,36(sp)
1000c4a8:	dd000817 	ldw	r20,32(sp)
1000c4ac:	dcc00717 	ldw	r19,28(sp)
1000c4b0:	dc800617 	ldw	r18,24(sp)
1000c4b4:	dc400517 	ldw	r17,20(sp)
1000c4b8:	dc000417 	ldw	r16,16(sp)
1000c4bc:	dec00a04 	addi	sp,sp,40
1000c4c0:	f800283a 	ret
1000c4c4:	00840074 	movhi	r2,4097
1000c4c8:	10914f04 	addi	r2,r2,17724
1000c4cc:	14000017 	ldw	r16,0(r2)
1000c4d0:	0008e8c0 	call	10008e8c <__locale_charset>
1000c4d4:	100f883a 	mov	r7,r2
1000c4d8:	dc800015 	stw	r18,0(sp)
1000c4dc:	000d883a 	mov	r6,zero
1000c4e0:	d9400104 	addi	r5,sp,4
1000c4e4:	8809883a 	mov	r4,r17
1000c4e8:	803ee83a 	callr	r16
1000c4ec:	003fe806 	br	1000c490 <__alt_data_end+0xf800c490>

1000c4f0 <__ascii_wctomb>:
1000c4f0:	28000526 	beq	r5,zero,1000c508 <__ascii_wctomb+0x18>
1000c4f4:	00803fc4 	movi	r2,255
1000c4f8:	11800536 	bltu	r2,r6,1000c510 <__ascii_wctomb+0x20>
1000c4fc:	29800005 	stb	r6,0(r5)
1000c500:	00800044 	movi	r2,1
1000c504:	f800283a 	ret
1000c508:	0005883a 	mov	r2,zero
1000c50c:	f800283a 	ret
1000c510:	00802284 	movi	r2,138
1000c514:	20800015 	stw	r2,0(r4)
1000c518:	00bfffc4 	movi	r2,-1
1000c51c:	f800283a 	ret

1000c520 <_wctomb_r>:
1000c520:	00840074 	movhi	r2,4097
1000c524:	defff904 	addi	sp,sp,-28
1000c528:	10914f04 	addi	r2,r2,17724
1000c52c:	dfc00615 	stw	ra,24(sp)
1000c530:	dc400515 	stw	r17,20(sp)
1000c534:	dc000415 	stw	r16,16(sp)
1000c538:	3823883a 	mov	r17,r7
1000c53c:	14000017 	ldw	r16,0(r2)
1000c540:	d9000115 	stw	r4,4(sp)
1000c544:	d9400215 	stw	r5,8(sp)
1000c548:	d9800315 	stw	r6,12(sp)
1000c54c:	0008e8c0 	call	10008e8c <__locale_charset>
1000c550:	d9800317 	ldw	r6,12(sp)
1000c554:	d9400217 	ldw	r5,8(sp)
1000c558:	d9000117 	ldw	r4,4(sp)
1000c55c:	100f883a 	mov	r7,r2
1000c560:	dc400015 	stw	r17,0(sp)
1000c564:	803ee83a 	callr	r16
1000c568:	dfc00617 	ldw	ra,24(sp)
1000c56c:	dc400517 	ldw	r17,20(sp)
1000c570:	dc000417 	ldw	r16,16(sp)
1000c574:	dec00704 	addi	sp,sp,28
1000c578:	f800283a 	ret

1000c57c <__udivdi3>:
1000c57c:	defff404 	addi	sp,sp,-48
1000c580:	dcc00515 	stw	r19,20(sp)
1000c584:	dc000215 	stw	r16,8(sp)
1000c588:	dfc00b15 	stw	ra,44(sp)
1000c58c:	df000a15 	stw	fp,40(sp)
1000c590:	ddc00915 	stw	r23,36(sp)
1000c594:	dd800815 	stw	r22,32(sp)
1000c598:	dd400715 	stw	r21,28(sp)
1000c59c:	dd000615 	stw	r20,24(sp)
1000c5a0:	dc800415 	stw	r18,16(sp)
1000c5a4:	dc400315 	stw	r17,12(sp)
1000c5a8:	2027883a 	mov	r19,r4
1000c5ac:	2821883a 	mov	r16,r5
1000c5b0:	3800461e 	bne	r7,zero,1000c6cc <__udivdi3+0x150>
1000c5b4:	3023883a 	mov	r17,r6
1000c5b8:	2025883a 	mov	r18,r4
1000c5bc:	2980572e 	bgeu	r5,r6,1000c71c <__udivdi3+0x1a0>
1000c5c0:	00bfffd4 	movui	r2,65535
1000c5c4:	282d883a 	mov	r22,r5
1000c5c8:	1180b236 	bltu	r2,r6,1000c894 <__udivdi3+0x318>
1000c5cc:	00803fc4 	movi	r2,255
1000c5d0:	1185803a 	cmpltu	r2,r2,r6
1000c5d4:	100490fa 	slli	r2,r2,3
1000c5d8:	3086d83a 	srl	r3,r6,r2
1000c5dc:	01040074 	movhi	r4,4097
1000c5e0:	210a1504 	addi	r4,r4,10324
1000c5e4:	20c7883a 	add	r3,r4,r3
1000c5e8:	18c00003 	ldbu	r3,0(r3)
1000c5ec:	1885883a 	add	r2,r3,r2
1000c5f0:	00c00804 	movi	r3,32
1000c5f4:	1887c83a 	sub	r3,r3,r2
1000c5f8:	18000526 	beq	r3,zero,1000c610 <__udivdi3+0x94>
1000c5fc:	80e0983a 	sll	r16,r16,r3
1000c600:	9884d83a 	srl	r2,r19,r2
1000c604:	30e2983a 	sll	r17,r6,r3
1000c608:	98e4983a 	sll	r18,r19,r3
1000c60c:	142cb03a 	or	r22,r2,r16
1000c610:	882ad43a 	srli	r21,r17,16
1000c614:	b009883a 	mov	r4,r22
1000c618:	8d3fffcc 	andi	r20,r17,65535
1000c61c:	a80b883a 	mov	r5,r21
1000c620:	00017040 	call	10001704 <__umodsi3>
1000c624:	b009883a 	mov	r4,r22
1000c628:	a80b883a 	mov	r5,r21
1000c62c:	1027883a 	mov	r19,r2
1000c630:	00016a00 	call	100016a0 <__udivsi3>
1000c634:	100b883a 	mov	r5,r2
1000c638:	a009883a 	mov	r4,r20
1000c63c:	102d883a 	mov	r22,r2
1000c640:	000175c0 	call	1000175c <__mulsi3>
1000c644:	9826943a 	slli	r19,r19,16
1000c648:	9006d43a 	srli	r3,r18,16
1000c64c:	1cc6b03a 	or	r3,r3,r19
1000c650:	1880052e 	bgeu	r3,r2,1000c668 <__udivdi3+0xec>
1000c654:	1c47883a 	add	r3,r3,r17
1000c658:	b13fffc4 	addi	r4,r22,-1
1000c65c:	1c400136 	bltu	r3,r17,1000c664 <__udivdi3+0xe8>
1000c660:	18814236 	bltu	r3,r2,1000cb6c <__udivdi3+0x5f0>
1000c664:	202d883a 	mov	r22,r4
1000c668:	18a1c83a 	sub	r16,r3,r2
1000c66c:	8009883a 	mov	r4,r16
1000c670:	a80b883a 	mov	r5,r21
1000c674:	00017040 	call	10001704 <__umodsi3>
1000c678:	1027883a 	mov	r19,r2
1000c67c:	8009883a 	mov	r4,r16
1000c680:	a80b883a 	mov	r5,r21
1000c684:	9826943a 	slli	r19,r19,16
1000c688:	00016a00 	call	100016a0 <__udivsi3>
1000c68c:	100b883a 	mov	r5,r2
1000c690:	a009883a 	mov	r4,r20
1000c694:	94bfffcc 	andi	r18,r18,65535
1000c698:	1021883a 	mov	r16,r2
1000c69c:	94e4b03a 	or	r18,r18,r19
1000c6a0:	000175c0 	call	1000175c <__mulsi3>
1000c6a4:	9080052e 	bgeu	r18,r2,1000c6bc <__udivdi3+0x140>
1000c6a8:	8ca5883a 	add	r18,r17,r18
1000c6ac:	80ffffc4 	addi	r3,r16,-1
1000c6b0:	94410c36 	bltu	r18,r17,1000cae4 <__udivdi3+0x568>
1000c6b4:	90810b2e 	bgeu	r18,r2,1000cae4 <__udivdi3+0x568>
1000c6b8:	843fff84 	addi	r16,r16,-2
1000c6bc:	b004943a 	slli	r2,r22,16
1000c6c0:	0007883a 	mov	r3,zero
1000c6c4:	1404b03a 	or	r2,r2,r16
1000c6c8:	00005e06 	br	1000c844 <__udivdi3+0x2c8>
1000c6cc:	29c05b36 	bltu	r5,r7,1000c83c <__udivdi3+0x2c0>
1000c6d0:	00bfffd4 	movui	r2,65535
1000c6d4:	11c0672e 	bgeu	r2,r7,1000c874 <__udivdi3+0x2f8>
1000c6d8:	00804034 	movhi	r2,256
1000c6dc:	10bfffc4 	addi	r2,r2,-1
1000c6e0:	11c10a36 	bltu	r2,r7,1000cb0c <__udivdi3+0x590>
1000c6e4:	00800404 	movi	r2,16
1000c6e8:	3886d83a 	srl	r3,r7,r2
1000c6ec:	01040074 	movhi	r4,4097
1000c6f0:	210a1504 	addi	r4,r4,10324
1000c6f4:	20c7883a 	add	r3,r4,r3
1000c6f8:	18c00003 	ldbu	r3,0(r3)
1000c6fc:	05c00804 	movi	r23,32
1000c700:	1885883a 	add	r2,r3,r2
1000c704:	b8afc83a 	sub	r23,r23,r2
1000c708:	b800671e 	bne	r23,zero,1000c8a8 <__udivdi3+0x32c>
1000c70c:	3c010536 	bltu	r7,r16,1000cb24 <__udivdi3+0x5a8>
1000c710:	9985403a 	cmpgeu	r2,r19,r6
1000c714:	0007883a 	mov	r3,zero
1000c718:	00004a06 	br	1000c844 <__udivdi3+0x2c8>
1000c71c:	3000041e 	bne	r6,zero,1000c730 <__udivdi3+0x1b4>
1000c720:	000b883a 	mov	r5,zero
1000c724:	01000044 	movi	r4,1
1000c728:	00016a00 	call	100016a0 <__udivsi3>
1000c72c:	1023883a 	mov	r17,r2
1000c730:	00bfffd4 	movui	r2,65535
1000c734:	1440532e 	bgeu	r2,r17,1000c884 <__udivdi3+0x308>
1000c738:	00804034 	movhi	r2,256
1000c73c:	10bfffc4 	addi	r2,r2,-1
1000c740:	1440f436 	bltu	r2,r17,1000cb14 <__udivdi3+0x598>
1000c744:	00800404 	movi	r2,16
1000c748:	8886d83a 	srl	r3,r17,r2
1000c74c:	01040074 	movhi	r4,4097
1000c750:	210a1504 	addi	r4,r4,10324
1000c754:	20c7883a 	add	r3,r4,r3
1000c758:	18c00003 	ldbu	r3,0(r3)
1000c75c:	1885883a 	add	r2,r3,r2
1000c760:	00c00804 	movi	r3,32
1000c764:	1887c83a 	sub	r3,r3,r2
1000c768:	1800a51e 	bne	r3,zero,1000ca00 <__udivdi3+0x484>
1000c76c:	882ad43a 	srli	r21,r17,16
1000c770:	8461c83a 	sub	r16,r16,r17
1000c774:	8d3fffcc 	andi	r20,r17,65535
1000c778:	00c00044 	movi	r3,1
1000c77c:	a80b883a 	mov	r5,r21
1000c780:	8009883a 	mov	r4,r16
1000c784:	d8c00115 	stw	r3,4(sp)
1000c788:	00017040 	call	10001704 <__umodsi3>
1000c78c:	a80b883a 	mov	r5,r21
1000c790:	8009883a 	mov	r4,r16
1000c794:	1027883a 	mov	r19,r2
1000c798:	00016a00 	call	100016a0 <__udivsi3>
1000c79c:	a00b883a 	mov	r5,r20
1000c7a0:	1009883a 	mov	r4,r2
1000c7a4:	102d883a 	mov	r22,r2
1000c7a8:	000175c0 	call	1000175c <__mulsi3>
1000c7ac:	9826943a 	slli	r19,r19,16
1000c7b0:	900ed43a 	srli	r7,r18,16
1000c7b4:	d8c00117 	ldw	r3,4(sp)
1000c7b8:	3cceb03a 	or	r7,r7,r19
1000c7bc:	3880052e 	bgeu	r7,r2,1000c7d4 <__udivdi3+0x258>
1000c7c0:	3c4f883a 	add	r7,r7,r17
1000c7c4:	b13fffc4 	addi	r4,r22,-1
1000c7c8:	3c400136 	bltu	r7,r17,1000c7d0 <__udivdi3+0x254>
1000c7cc:	3880e436 	bltu	r7,r2,1000cb60 <__udivdi3+0x5e4>
1000c7d0:	202d883a 	mov	r22,r4
1000c7d4:	38a1c83a 	sub	r16,r7,r2
1000c7d8:	8009883a 	mov	r4,r16
1000c7dc:	a80b883a 	mov	r5,r21
1000c7e0:	d8c00115 	stw	r3,4(sp)
1000c7e4:	00017040 	call	10001704 <__umodsi3>
1000c7e8:	1027883a 	mov	r19,r2
1000c7ec:	8009883a 	mov	r4,r16
1000c7f0:	a80b883a 	mov	r5,r21
1000c7f4:	9826943a 	slli	r19,r19,16
1000c7f8:	00016a00 	call	100016a0 <__udivsi3>
1000c7fc:	a00b883a 	mov	r5,r20
1000c800:	1009883a 	mov	r4,r2
1000c804:	94bfffcc 	andi	r18,r18,65535
1000c808:	1021883a 	mov	r16,r2
1000c80c:	94e4b03a 	or	r18,r18,r19
1000c810:	000175c0 	call	1000175c <__mulsi3>
1000c814:	d8c00117 	ldw	r3,4(sp)
1000c818:	9080052e 	bgeu	r18,r2,1000c830 <__udivdi3+0x2b4>
1000c81c:	8ca5883a 	add	r18,r17,r18
1000c820:	813fffc4 	addi	r4,r16,-1
1000c824:	9440ad36 	bltu	r18,r17,1000cadc <__udivdi3+0x560>
1000c828:	9080ac2e 	bgeu	r18,r2,1000cadc <__udivdi3+0x560>
1000c82c:	843fff84 	addi	r16,r16,-2
1000c830:	b004943a 	slli	r2,r22,16
1000c834:	1404b03a 	or	r2,r2,r16
1000c838:	00000206 	br	1000c844 <__udivdi3+0x2c8>
1000c83c:	0007883a 	mov	r3,zero
1000c840:	0005883a 	mov	r2,zero
1000c844:	dfc00b17 	ldw	ra,44(sp)
1000c848:	df000a17 	ldw	fp,40(sp)
1000c84c:	ddc00917 	ldw	r23,36(sp)
1000c850:	dd800817 	ldw	r22,32(sp)
1000c854:	dd400717 	ldw	r21,28(sp)
1000c858:	dd000617 	ldw	r20,24(sp)
1000c85c:	dcc00517 	ldw	r19,20(sp)
1000c860:	dc800417 	ldw	r18,16(sp)
1000c864:	dc400317 	ldw	r17,12(sp)
1000c868:	dc000217 	ldw	r16,8(sp)
1000c86c:	dec00c04 	addi	sp,sp,48
1000c870:	f800283a 	ret
1000c874:	00803fc4 	movi	r2,255
1000c878:	11c5803a 	cmpltu	r2,r2,r7
1000c87c:	100490fa 	slli	r2,r2,3
1000c880:	003f9906 	br	1000c6e8 <__alt_data_end+0xf800c6e8>
1000c884:	00803fc4 	movi	r2,255
1000c888:	1445803a 	cmpltu	r2,r2,r17
1000c88c:	100490fa 	slli	r2,r2,3
1000c890:	003fad06 	br	1000c748 <__alt_data_end+0xf800c748>
1000c894:	00804034 	movhi	r2,256
1000c898:	10bfffc4 	addi	r2,r2,-1
1000c89c:	11809f36 	bltu	r2,r6,1000cb1c <__udivdi3+0x5a0>
1000c8a0:	00800404 	movi	r2,16
1000c8a4:	003f4c06 	br	1000c5d8 <__alt_data_end+0xf800c5d8>
1000c8a8:	3dce983a 	sll	r7,r7,r23
1000c8ac:	30b8d83a 	srl	fp,r6,r2
1000c8b0:	80a2d83a 	srl	r17,r16,r2
1000c8b4:	35cc983a 	sll	r6,r6,r23
1000c8b8:	3f38b03a 	or	fp,r7,fp
1000c8bc:	e024d43a 	srli	r18,fp,16
1000c8c0:	9884d83a 	srl	r2,r19,r2
1000c8c4:	85e0983a 	sll	r16,r16,r23
1000c8c8:	8809883a 	mov	r4,r17
1000c8cc:	900b883a 	mov	r5,r18
1000c8d0:	d9800015 	stw	r6,0(sp)
1000c8d4:	1420b03a 	or	r16,r2,r16
1000c8d8:	00017040 	call	10001704 <__umodsi3>
1000c8dc:	900b883a 	mov	r5,r18
1000c8e0:	8809883a 	mov	r4,r17
1000c8e4:	1029883a 	mov	r20,r2
1000c8e8:	e5bfffcc 	andi	r22,fp,65535
1000c8ec:	00016a00 	call	100016a0 <__udivsi3>
1000c8f0:	100b883a 	mov	r5,r2
1000c8f4:	b009883a 	mov	r4,r22
1000c8f8:	102b883a 	mov	r21,r2
1000c8fc:	000175c0 	call	1000175c <__mulsi3>
1000c900:	a028943a 	slli	r20,r20,16
1000c904:	8006d43a 	srli	r3,r16,16
1000c908:	1d06b03a 	or	r3,r3,r20
1000c90c:	1880042e 	bgeu	r3,r2,1000c920 <__udivdi3+0x3a4>
1000c910:	1f07883a 	add	r3,r3,fp
1000c914:	a93fffc4 	addi	r4,r21,-1
1000c918:	1f00892e 	bgeu	r3,fp,1000cb40 <__udivdi3+0x5c4>
1000c91c:	202b883a 	mov	r21,r4
1000c920:	18a3c83a 	sub	r17,r3,r2
1000c924:	8809883a 	mov	r4,r17
1000c928:	900b883a 	mov	r5,r18
1000c92c:	00017040 	call	10001704 <__umodsi3>
1000c930:	1029883a 	mov	r20,r2
1000c934:	8809883a 	mov	r4,r17
1000c938:	900b883a 	mov	r5,r18
1000c93c:	a028943a 	slli	r20,r20,16
1000c940:	00016a00 	call	100016a0 <__udivsi3>
1000c944:	100b883a 	mov	r5,r2
1000c948:	b009883a 	mov	r4,r22
1000c94c:	843fffcc 	andi	r16,r16,65535
1000c950:	1023883a 	mov	r17,r2
1000c954:	8520b03a 	or	r16,r16,r20
1000c958:	000175c0 	call	1000175c <__mulsi3>
1000c95c:	8080042e 	bgeu	r16,r2,1000c970 <__udivdi3+0x3f4>
1000c960:	8721883a 	add	r16,r16,fp
1000c964:	88ffffc4 	addi	r3,r17,-1
1000c968:	8700712e 	bgeu	r16,fp,1000cb30 <__udivdi3+0x5b4>
1000c96c:	1823883a 	mov	r17,r3
1000c970:	a80e943a 	slli	r7,r21,16
1000c974:	d8c00017 	ldw	r3,0(sp)
1000c978:	80a1c83a 	sub	r16,r16,r2
1000c97c:	3c64b03a 	or	r18,r7,r17
1000c980:	1d3fffcc 	andi	r20,r3,65535
1000c984:	9022d43a 	srli	r17,r18,16
1000c988:	95bfffcc 	andi	r22,r18,65535
1000c98c:	a00b883a 	mov	r5,r20
1000c990:	b009883a 	mov	r4,r22
1000c994:	182ad43a 	srli	r21,r3,16
1000c998:	000175c0 	call	1000175c <__mulsi3>
1000c99c:	a00b883a 	mov	r5,r20
1000c9a0:	8809883a 	mov	r4,r17
1000c9a4:	1039883a 	mov	fp,r2
1000c9a8:	000175c0 	call	1000175c <__mulsi3>
1000c9ac:	8809883a 	mov	r4,r17
1000c9b0:	a80b883a 	mov	r5,r21
1000c9b4:	1029883a 	mov	r20,r2
1000c9b8:	000175c0 	call	1000175c <__mulsi3>
1000c9bc:	a80b883a 	mov	r5,r21
1000c9c0:	b009883a 	mov	r4,r22
1000c9c4:	1023883a 	mov	r17,r2
1000c9c8:	000175c0 	call	1000175c <__mulsi3>
1000c9cc:	e006d43a 	srli	r3,fp,16
1000c9d0:	1505883a 	add	r2,r2,r20
1000c9d4:	1887883a 	add	r3,r3,r2
1000c9d8:	1d00022e 	bgeu	r3,r20,1000c9e4 <__udivdi3+0x468>
1000c9dc:	00800074 	movhi	r2,1
1000c9e0:	88a3883a 	add	r17,r17,r2
1000c9e4:	1804d43a 	srli	r2,r3,16
1000c9e8:	1463883a 	add	r17,r2,r17
1000c9ec:	84404436 	bltu	r16,r17,1000cb00 <__udivdi3+0x584>
1000c9f0:	84403e26 	beq	r16,r17,1000caec <__udivdi3+0x570>
1000c9f4:	9005883a 	mov	r2,r18
1000c9f8:	0007883a 	mov	r3,zero
1000c9fc:	003f9106 	br	1000c844 <__alt_data_end+0xf800c844>
1000ca00:	88e2983a 	sll	r17,r17,r3
1000ca04:	80aed83a 	srl	r23,r16,r2
1000ca08:	80e0983a 	sll	r16,r16,r3
1000ca0c:	882ad43a 	srli	r21,r17,16
1000ca10:	9884d83a 	srl	r2,r19,r2
1000ca14:	b809883a 	mov	r4,r23
1000ca18:	a80b883a 	mov	r5,r21
1000ca1c:	98e4983a 	sll	r18,r19,r3
1000ca20:	142cb03a 	or	r22,r2,r16
1000ca24:	00017040 	call	10001704 <__umodsi3>
1000ca28:	b809883a 	mov	r4,r23
1000ca2c:	a80b883a 	mov	r5,r21
1000ca30:	1027883a 	mov	r19,r2
1000ca34:	8d3fffcc 	andi	r20,r17,65535
1000ca38:	00016a00 	call	100016a0 <__udivsi3>
1000ca3c:	a009883a 	mov	r4,r20
1000ca40:	100b883a 	mov	r5,r2
1000ca44:	102f883a 	mov	r23,r2
1000ca48:	000175c0 	call	1000175c <__mulsi3>
1000ca4c:	9826943a 	slli	r19,r19,16
1000ca50:	b008d43a 	srli	r4,r22,16
1000ca54:	24c8b03a 	or	r4,r4,r19
1000ca58:	2080062e 	bgeu	r4,r2,1000ca74 <__udivdi3+0x4f8>
1000ca5c:	2449883a 	add	r4,r4,r17
1000ca60:	b8ffffc4 	addi	r3,r23,-1
1000ca64:	24403c36 	bltu	r4,r17,1000cb58 <__udivdi3+0x5dc>
1000ca68:	20803b2e 	bgeu	r4,r2,1000cb58 <__udivdi3+0x5dc>
1000ca6c:	bdffff84 	addi	r23,r23,-2
1000ca70:	2449883a 	add	r4,r4,r17
1000ca74:	20a1c83a 	sub	r16,r4,r2
1000ca78:	a80b883a 	mov	r5,r21
1000ca7c:	8009883a 	mov	r4,r16
1000ca80:	00017040 	call	10001704 <__umodsi3>
1000ca84:	a80b883a 	mov	r5,r21
1000ca88:	8009883a 	mov	r4,r16
1000ca8c:	1027883a 	mov	r19,r2
1000ca90:	00016a00 	call	100016a0 <__udivsi3>
1000ca94:	a009883a 	mov	r4,r20
1000ca98:	100b883a 	mov	r5,r2
1000ca9c:	9826943a 	slli	r19,r19,16
1000caa0:	1039883a 	mov	fp,r2
1000caa4:	000175c0 	call	1000175c <__mulsi3>
1000caa8:	b13fffcc 	andi	r4,r22,65535
1000caac:	24c8b03a 	or	r4,r4,r19
1000cab0:	2080062e 	bgeu	r4,r2,1000cacc <__udivdi3+0x550>
1000cab4:	2449883a 	add	r4,r4,r17
1000cab8:	e0ffffc4 	addi	r3,fp,-1
1000cabc:	24402436 	bltu	r4,r17,1000cb50 <__udivdi3+0x5d4>
1000cac0:	2080232e 	bgeu	r4,r2,1000cb50 <__udivdi3+0x5d4>
1000cac4:	e73fff84 	addi	fp,fp,-2
1000cac8:	2449883a 	add	r4,r4,r17
1000cacc:	b82e943a 	slli	r23,r23,16
1000cad0:	20a1c83a 	sub	r16,r4,r2
1000cad4:	bf06b03a 	or	r3,r23,fp
1000cad8:	003f2806 	br	1000c77c <__alt_data_end+0xf800c77c>
1000cadc:	2021883a 	mov	r16,r4
1000cae0:	003f5306 	br	1000c830 <__alt_data_end+0xf800c830>
1000cae4:	1821883a 	mov	r16,r3
1000cae8:	003ef406 	br	1000c6bc <__alt_data_end+0xf800c6bc>
1000caec:	1806943a 	slli	r3,r3,16
1000caf0:	9de6983a 	sll	r19,r19,r23
1000caf4:	e73fffcc 	andi	fp,fp,65535
1000caf8:	1f07883a 	add	r3,r3,fp
1000cafc:	98ffbd2e 	bgeu	r19,r3,1000c9f4 <__alt_data_end+0xf800c9f4>
1000cb00:	90bfffc4 	addi	r2,r18,-1
1000cb04:	0007883a 	mov	r3,zero
1000cb08:	003f4e06 	br	1000c844 <__alt_data_end+0xf800c844>
1000cb0c:	00800604 	movi	r2,24
1000cb10:	003ef506 	br	1000c6e8 <__alt_data_end+0xf800c6e8>
1000cb14:	00800604 	movi	r2,24
1000cb18:	003f0b06 	br	1000c748 <__alt_data_end+0xf800c748>
1000cb1c:	00800604 	movi	r2,24
1000cb20:	003ead06 	br	1000c5d8 <__alt_data_end+0xf800c5d8>
1000cb24:	0007883a 	mov	r3,zero
1000cb28:	00800044 	movi	r2,1
1000cb2c:	003f4506 	br	1000c844 <__alt_data_end+0xf800c844>
1000cb30:	80bf8e2e 	bgeu	r16,r2,1000c96c <__alt_data_end+0xf800c96c>
1000cb34:	8c7fff84 	addi	r17,r17,-2
1000cb38:	8721883a 	add	r16,r16,fp
1000cb3c:	003f8c06 	br	1000c970 <__alt_data_end+0xf800c970>
1000cb40:	18bf762e 	bgeu	r3,r2,1000c91c <__alt_data_end+0xf800c91c>
1000cb44:	ad7fff84 	addi	r21,r21,-2
1000cb48:	1f07883a 	add	r3,r3,fp
1000cb4c:	003f7406 	br	1000c920 <__alt_data_end+0xf800c920>
1000cb50:	1839883a 	mov	fp,r3
1000cb54:	003fdd06 	br	1000cacc <__alt_data_end+0xf800cacc>
1000cb58:	182f883a 	mov	r23,r3
1000cb5c:	003fc506 	br	1000ca74 <__alt_data_end+0xf800ca74>
1000cb60:	b5bfff84 	addi	r22,r22,-2
1000cb64:	3c4f883a 	add	r7,r7,r17
1000cb68:	003f1a06 	br	1000c7d4 <__alt_data_end+0xf800c7d4>
1000cb6c:	b5bfff84 	addi	r22,r22,-2
1000cb70:	1c47883a 	add	r3,r3,r17
1000cb74:	003ebc06 	br	1000c668 <__alt_data_end+0xf800c668>

1000cb78 <__umoddi3>:
1000cb78:	defff304 	addi	sp,sp,-52
1000cb7c:	df000b15 	stw	fp,44(sp)
1000cb80:	dc400415 	stw	r17,16(sp)
1000cb84:	dc000315 	stw	r16,12(sp)
1000cb88:	dfc00c15 	stw	ra,48(sp)
1000cb8c:	ddc00a15 	stw	r23,40(sp)
1000cb90:	dd800915 	stw	r22,36(sp)
1000cb94:	dd400815 	stw	r21,32(sp)
1000cb98:	dd000715 	stw	r20,28(sp)
1000cb9c:	dcc00615 	stw	r19,24(sp)
1000cba0:	dc800515 	stw	r18,20(sp)
1000cba4:	2021883a 	mov	r16,r4
1000cba8:	2823883a 	mov	r17,r5
1000cbac:	2839883a 	mov	fp,r5
1000cbb0:	3800401e 	bne	r7,zero,1000ccb4 <__umoddi3+0x13c>
1000cbb4:	3027883a 	mov	r19,r6
1000cbb8:	2029883a 	mov	r20,r4
1000cbbc:	2980552e 	bgeu	r5,r6,1000cd14 <__umoddi3+0x19c>
1000cbc0:	00bfffd4 	movui	r2,65535
1000cbc4:	1180a236 	bltu	r2,r6,1000ce50 <__umoddi3+0x2d8>
1000cbc8:	01003fc4 	movi	r4,255
1000cbcc:	2189803a 	cmpltu	r4,r4,r6
1000cbd0:	200890fa 	slli	r4,r4,3
1000cbd4:	3104d83a 	srl	r2,r6,r4
1000cbd8:	00c40074 	movhi	r3,4097
1000cbdc:	18ca1504 	addi	r3,r3,10324
1000cbe0:	1885883a 	add	r2,r3,r2
1000cbe4:	10c00003 	ldbu	r3,0(r2)
1000cbe8:	00800804 	movi	r2,32
1000cbec:	1909883a 	add	r4,r3,r4
1000cbf0:	1125c83a 	sub	r18,r2,r4
1000cbf4:	90000526 	beq	r18,zero,1000cc0c <__umoddi3+0x94>
1000cbf8:	8ca2983a 	sll	r17,r17,r18
1000cbfc:	8108d83a 	srl	r4,r16,r4
1000cc00:	34a6983a 	sll	r19,r6,r18
1000cc04:	84a8983a 	sll	r20,r16,r18
1000cc08:	2478b03a 	or	fp,r4,r17
1000cc0c:	982cd43a 	srli	r22,r19,16
1000cc10:	e009883a 	mov	r4,fp
1000cc14:	9dffffcc 	andi	r23,r19,65535
1000cc18:	b00b883a 	mov	r5,r22
1000cc1c:	00017040 	call	10001704 <__umodsi3>
1000cc20:	b00b883a 	mov	r5,r22
1000cc24:	e009883a 	mov	r4,fp
1000cc28:	102b883a 	mov	r21,r2
1000cc2c:	00016a00 	call	100016a0 <__udivsi3>
1000cc30:	100b883a 	mov	r5,r2
1000cc34:	b809883a 	mov	r4,r23
1000cc38:	000175c0 	call	1000175c <__mulsi3>
1000cc3c:	a82a943a 	slli	r21,r21,16
1000cc40:	a006d43a 	srli	r3,r20,16
1000cc44:	1d46b03a 	or	r3,r3,r21
1000cc48:	1880032e 	bgeu	r3,r2,1000cc58 <__umoddi3+0xe0>
1000cc4c:	1cc7883a 	add	r3,r3,r19
1000cc50:	1cc00136 	bltu	r3,r19,1000cc58 <__umoddi3+0xe0>
1000cc54:	18813136 	bltu	r3,r2,1000d11c <__umoddi3+0x5a4>
1000cc58:	18a1c83a 	sub	r16,r3,r2
1000cc5c:	b00b883a 	mov	r5,r22
1000cc60:	8009883a 	mov	r4,r16
1000cc64:	00017040 	call	10001704 <__umodsi3>
1000cc68:	b00b883a 	mov	r5,r22
1000cc6c:	8009883a 	mov	r4,r16
1000cc70:	1023883a 	mov	r17,r2
1000cc74:	00016a00 	call	100016a0 <__udivsi3>
1000cc78:	100b883a 	mov	r5,r2
1000cc7c:	b809883a 	mov	r4,r23
1000cc80:	8822943a 	slli	r17,r17,16
1000cc84:	000175c0 	call	1000175c <__mulsi3>
1000cc88:	a0ffffcc 	andi	r3,r20,65535
1000cc8c:	1c46b03a 	or	r3,r3,r17
1000cc90:	1880042e 	bgeu	r3,r2,1000cca4 <__umoddi3+0x12c>
1000cc94:	1cc7883a 	add	r3,r3,r19
1000cc98:	1cc00236 	bltu	r3,r19,1000cca4 <__umoddi3+0x12c>
1000cc9c:	1880012e 	bgeu	r3,r2,1000cca4 <__umoddi3+0x12c>
1000cca0:	1cc7883a 	add	r3,r3,r19
1000cca4:	1885c83a 	sub	r2,r3,r2
1000cca8:	1484d83a 	srl	r2,r2,r18
1000ccac:	0007883a 	mov	r3,zero
1000ccb0:	00005306 	br	1000ce00 <__umoddi3+0x288>
1000ccb4:	29c05036 	bltu	r5,r7,1000cdf8 <__umoddi3+0x280>
1000ccb8:	00bfffd4 	movui	r2,65535
1000ccbc:	11c05c2e 	bgeu	r2,r7,1000ce30 <__umoddi3+0x2b8>
1000ccc0:	00804034 	movhi	r2,256
1000ccc4:	10bfffc4 	addi	r2,r2,-1
1000ccc8:	11c10636 	bltu	r2,r7,1000d0e4 <__umoddi3+0x56c>
1000cccc:	01000404 	movi	r4,16
1000ccd0:	3904d83a 	srl	r2,r7,r4
1000ccd4:	00c40074 	movhi	r3,4097
1000ccd8:	18ca1504 	addi	r3,r3,10324
1000ccdc:	1885883a 	add	r2,r3,r2
1000cce0:	14c00003 	ldbu	r19,0(r2)
1000cce4:	00c00804 	movi	r3,32
1000cce8:	9927883a 	add	r19,r19,r4
1000ccec:	1ce9c83a 	sub	r20,r3,r19
1000ccf0:	a0005c1e 	bne	r20,zero,1000ce64 <__umoddi3+0x2ec>
1000ccf4:	3c400136 	bltu	r7,r17,1000ccfc <__umoddi3+0x184>
1000ccf8:	81810a36 	bltu	r16,r6,1000d124 <__umoddi3+0x5ac>
1000ccfc:	8185c83a 	sub	r2,r16,r6
1000cd00:	89e3c83a 	sub	r17,r17,r7
1000cd04:	8089803a 	cmpltu	r4,r16,r2
1000cd08:	8939c83a 	sub	fp,r17,r4
1000cd0c:	e007883a 	mov	r3,fp
1000cd10:	00003b06 	br	1000ce00 <__umoddi3+0x288>
1000cd14:	3000041e 	bne	r6,zero,1000cd28 <__umoddi3+0x1b0>
1000cd18:	000b883a 	mov	r5,zero
1000cd1c:	01000044 	movi	r4,1
1000cd20:	00016a00 	call	100016a0 <__udivsi3>
1000cd24:	1027883a 	mov	r19,r2
1000cd28:	00bfffd4 	movui	r2,65535
1000cd2c:	14c0442e 	bgeu	r2,r19,1000ce40 <__umoddi3+0x2c8>
1000cd30:	00804034 	movhi	r2,256
1000cd34:	10bfffc4 	addi	r2,r2,-1
1000cd38:	14c0ec36 	bltu	r2,r19,1000d0ec <__umoddi3+0x574>
1000cd3c:	00800404 	movi	r2,16
1000cd40:	9886d83a 	srl	r3,r19,r2
1000cd44:	01040074 	movhi	r4,4097
1000cd48:	210a1504 	addi	r4,r4,10324
1000cd4c:	20c7883a 	add	r3,r4,r3
1000cd50:	18c00003 	ldbu	r3,0(r3)
1000cd54:	1887883a 	add	r3,r3,r2
1000cd58:	00800804 	movi	r2,32
1000cd5c:	10e5c83a 	sub	r18,r2,r3
1000cd60:	9000ab1e 	bne	r18,zero,1000d010 <__umoddi3+0x498>
1000cd64:	982cd43a 	srli	r22,r19,16
1000cd68:	8ce3c83a 	sub	r17,r17,r19
1000cd6c:	9dffffcc 	andi	r23,r19,65535
1000cd70:	b00b883a 	mov	r5,r22
1000cd74:	8809883a 	mov	r4,r17
1000cd78:	00017040 	call	10001704 <__umodsi3>
1000cd7c:	b00b883a 	mov	r5,r22
1000cd80:	8809883a 	mov	r4,r17
1000cd84:	102b883a 	mov	r21,r2
1000cd88:	00016a00 	call	100016a0 <__udivsi3>
1000cd8c:	b80b883a 	mov	r5,r23
1000cd90:	1009883a 	mov	r4,r2
1000cd94:	000175c0 	call	1000175c <__mulsi3>
1000cd98:	a82a943a 	slli	r21,r21,16
1000cd9c:	a006d43a 	srli	r3,r20,16
1000cda0:	1d46b03a 	or	r3,r3,r21
1000cda4:	1880042e 	bgeu	r3,r2,1000cdb8 <__umoddi3+0x240>
1000cda8:	1cc7883a 	add	r3,r3,r19
1000cdac:	1cc00236 	bltu	r3,r19,1000cdb8 <__umoddi3+0x240>
1000cdb0:	1880012e 	bgeu	r3,r2,1000cdb8 <__umoddi3+0x240>
1000cdb4:	1cc7883a 	add	r3,r3,r19
1000cdb8:	18a1c83a 	sub	r16,r3,r2
1000cdbc:	b00b883a 	mov	r5,r22
1000cdc0:	8009883a 	mov	r4,r16
1000cdc4:	00017040 	call	10001704 <__umodsi3>
1000cdc8:	1023883a 	mov	r17,r2
1000cdcc:	b00b883a 	mov	r5,r22
1000cdd0:	8009883a 	mov	r4,r16
1000cdd4:	00016a00 	call	100016a0 <__udivsi3>
1000cdd8:	8822943a 	slli	r17,r17,16
1000cddc:	b80b883a 	mov	r5,r23
1000cde0:	1009883a 	mov	r4,r2
1000cde4:	000175c0 	call	1000175c <__mulsi3>
1000cde8:	a53fffcc 	andi	r20,r20,65535
1000cdec:	a446b03a 	or	r3,r20,r17
1000cdf0:	18bfac2e 	bgeu	r3,r2,1000cca4 <__alt_data_end+0xf800cca4>
1000cdf4:	003fa706 	br	1000cc94 <__alt_data_end+0xf800cc94>
1000cdf8:	2005883a 	mov	r2,r4
1000cdfc:	2807883a 	mov	r3,r5
1000ce00:	dfc00c17 	ldw	ra,48(sp)
1000ce04:	df000b17 	ldw	fp,44(sp)
1000ce08:	ddc00a17 	ldw	r23,40(sp)
1000ce0c:	dd800917 	ldw	r22,36(sp)
1000ce10:	dd400817 	ldw	r21,32(sp)
1000ce14:	dd000717 	ldw	r20,28(sp)
1000ce18:	dcc00617 	ldw	r19,24(sp)
1000ce1c:	dc800517 	ldw	r18,20(sp)
1000ce20:	dc400417 	ldw	r17,16(sp)
1000ce24:	dc000317 	ldw	r16,12(sp)
1000ce28:	dec00d04 	addi	sp,sp,52
1000ce2c:	f800283a 	ret
1000ce30:	04c03fc4 	movi	r19,255
1000ce34:	99c9803a 	cmpltu	r4,r19,r7
1000ce38:	200890fa 	slli	r4,r4,3
1000ce3c:	003fa406 	br	1000ccd0 <__alt_data_end+0xf800ccd0>
1000ce40:	00803fc4 	movi	r2,255
1000ce44:	14c5803a 	cmpltu	r2,r2,r19
1000ce48:	100490fa 	slli	r2,r2,3
1000ce4c:	003fbc06 	br	1000cd40 <__alt_data_end+0xf800cd40>
1000ce50:	00804034 	movhi	r2,256
1000ce54:	10bfffc4 	addi	r2,r2,-1
1000ce58:	1180a636 	bltu	r2,r6,1000d0f4 <__umoddi3+0x57c>
1000ce5c:	01000404 	movi	r4,16
1000ce60:	003f5c06 	br	1000cbd4 <__alt_data_end+0xf800cbd4>
1000ce64:	3d0e983a 	sll	r7,r7,r20
1000ce68:	34ead83a 	srl	r21,r6,r19
1000ce6c:	8cc6d83a 	srl	r3,r17,r19
1000ce70:	8d10983a 	sll	r8,r17,r20
1000ce74:	3d6ab03a 	or	r21,r7,r21
1000ce78:	a82cd43a 	srli	r22,r21,16
1000ce7c:	84e2d83a 	srl	r17,r16,r19
1000ce80:	1809883a 	mov	r4,r3
1000ce84:	b00b883a 	mov	r5,r22
1000ce88:	8a22b03a 	or	r17,r17,r8
1000ce8c:	3524983a 	sll	r18,r6,r20
1000ce90:	dc400015 	stw	r17,0(sp)
1000ce94:	d8c00115 	stw	r3,4(sp)
1000ce98:	00017040 	call	10001704 <__umodsi3>
1000ce9c:	d8c00117 	ldw	r3,4(sp)
1000cea0:	b00b883a 	mov	r5,r22
1000cea4:	1039883a 	mov	fp,r2
1000cea8:	1809883a 	mov	r4,r3
1000ceac:	00016a00 	call	100016a0 <__udivsi3>
1000ceb0:	adffffcc 	andi	r23,r21,65535
1000ceb4:	100b883a 	mov	r5,r2
1000ceb8:	b809883a 	mov	r4,r23
1000cebc:	1023883a 	mov	r17,r2
1000cec0:	000175c0 	call	1000175c <__mulsi3>
1000cec4:	d9400017 	ldw	r5,0(sp)
1000cec8:	e008943a 	slli	r4,fp,16
1000cecc:	8520983a 	sll	r16,r16,r20
1000ced0:	2806d43a 	srli	r3,r5,16
1000ced4:	1906b03a 	or	r3,r3,r4
1000ced8:	1880042e 	bgeu	r3,r2,1000ceec <__umoddi3+0x374>
1000cedc:	1d47883a 	add	r3,r3,r21
1000cee0:	893fffc4 	addi	r4,r17,-1
1000cee4:	1d40892e 	bgeu	r3,r21,1000d10c <__umoddi3+0x594>
1000cee8:	2023883a 	mov	r17,r4
1000ceec:	18b9c83a 	sub	fp,r3,r2
1000cef0:	b00b883a 	mov	r5,r22
1000cef4:	e009883a 	mov	r4,fp
1000cef8:	00017040 	call	10001704 <__umodsi3>
1000cefc:	b00b883a 	mov	r5,r22
1000cf00:	e009883a 	mov	r4,fp
1000cf04:	d8800215 	stw	r2,8(sp)
1000cf08:	00016a00 	call	100016a0 <__udivsi3>
1000cf0c:	100b883a 	mov	r5,r2
1000cf10:	b809883a 	mov	r4,r23
1000cf14:	102d883a 	mov	r22,r2
1000cf18:	000175c0 	call	1000175c <__mulsi3>
1000cf1c:	d9800217 	ldw	r6,8(sp)
1000cf20:	d8c00017 	ldw	r3,0(sp)
1000cf24:	300c943a 	slli	r6,r6,16
1000cf28:	1a3fffcc 	andi	r8,r3,65535
1000cf2c:	4190b03a 	or	r8,r8,r6
1000cf30:	4080042e 	bgeu	r8,r2,1000cf44 <__umoddi3+0x3cc>
1000cf34:	4551883a 	add	r8,r8,r21
1000cf38:	b0ffffc4 	addi	r3,r22,-1
1000cf3c:	45406f2e 	bgeu	r8,r21,1000d0fc <__umoddi3+0x584>
1000cf40:	182d883a 	mov	r22,r3
1000cf44:	880e943a 	slli	r7,r17,16
1000cf48:	9006d43a 	srli	r3,r18,16
1000cf4c:	91bfffcc 	andi	r6,r18,65535
1000cf50:	3dacb03a 	or	r22,r7,r22
1000cf54:	b02ed43a 	srli	r23,r22,16
1000cf58:	b5bfffcc 	andi	r22,r22,65535
1000cf5c:	300b883a 	mov	r5,r6
1000cf60:	b009883a 	mov	r4,r22
1000cf64:	40a3c83a 	sub	r17,r8,r2
1000cf68:	d8c00115 	stw	r3,4(sp)
1000cf6c:	d9800215 	stw	r6,8(sp)
1000cf70:	000175c0 	call	1000175c <__mulsi3>
1000cf74:	d9800217 	ldw	r6,8(sp)
1000cf78:	b809883a 	mov	r4,r23
1000cf7c:	1039883a 	mov	fp,r2
1000cf80:	300b883a 	mov	r5,r6
1000cf84:	000175c0 	call	1000175c <__mulsi3>
1000cf88:	d8c00117 	ldw	r3,4(sp)
1000cf8c:	b809883a 	mov	r4,r23
1000cf90:	d8800215 	stw	r2,8(sp)
1000cf94:	180b883a 	mov	r5,r3
1000cf98:	000175c0 	call	1000175c <__mulsi3>
1000cf9c:	d8c00117 	ldw	r3,4(sp)
1000cfa0:	b009883a 	mov	r4,r22
1000cfa4:	102f883a 	mov	r23,r2
1000cfa8:	180b883a 	mov	r5,r3
1000cfac:	000175c0 	call	1000175c <__mulsi3>
1000cfb0:	d9800217 	ldw	r6,8(sp)
1000cfb4:	e006d43a 	srli	r3,fp,16
1000cfb8:	1185883a 	add	r2,r2,r6
1000cfbc:	1885883a 	add	r2,r3,r2
1000cfc0:	1180022e 	bgeu	r2,r6,1000cfcc <__umoddi3+0x454>
1000cfc4:	00c00074 	movhi	r3,1
1000cfc8:	b8ef883a 	add	r23,r23,r3
1000cfcc:	1006d43a 	srli	r3,r2,16
1000cfd0:	1004943a 	slli	r2,r2,16
1000cfd4:	e73fffcc 	andi	fp,fp,65535
1000cfd8:	1dc7883a 	add	r3,r3,r23
1000cfdc:	1739883a 	add	fp,r2,fp
1000cfe0:	88c03a36 	bltu	r17,r3,1000d0cc <__umoddi3+0x554>
1000cfe4:	88c05126 	beq	r17,r3,1000d12c <__umoddi3+0x5b4>
1000cfe8:	88c9c83a 	sub	r4,r17,r3
1000cfec:	e00f883a 	mov	r7,fp
1000cff0:	81cfc83a 	sub	r7,r16,r7
1000cff4:	81c7803a 	cmpltu	r3,r16,r7
1000cff8:	20c7c83a 	sub	r3,r4,r3
1000cffc:	1cc4983a 	sll	r2,r3,r19
1000d000:	3d0ed83a 	srl	r7,r7,r20
1000d004:	1d06d83a 	srl	r3,r3,r20
1000d008:	11c4b03a 	or	r2,r2,r7
1000d00c:	003f7c06 	br	1000ce00 <__alt_data_end+0xf800ce00>
1000d010:	9ca6983a 	sll	r19,r19,r18
1000d014:	88f8d83a 	srl	fp,r17,r3
1000d018:	80c4d83a 	srl	r2,r16,r3
1000d01c:	982cd43a 	srli	r22,r19,16
1000d020:	8ca2983a 	sll	r17,r17,r18
1000d024:	e009883a 	mov	r4,fp
1000d028:	b00b883a 	mov	r5,r22
1000d02c:	146ab03a 	or	r21,r2,r17
1000d030:	00017040 	call	10001704 <__umodsi3>
1000d034:	b00b883a 	mov	r5,r22
1000d038:	e009883a 	mov	r4,fp
1000d03c:	1029883a 	mov	r20,r2
1000d040:	9dffffcc 	andi	r23,r19,65535
1000d044:	00016a00 	call	100016a0 <__udivsi3>
1000d048:	b809883a 	mov	r4,r23
1000d04c:	100b883a 	mov	r5,r2
1000d050:	000175c0 	call	1000175c <__mulsi3>
1000d054:	a008943a 	slli	r4,r20,16
1000d058:	a806d43a 	srli	r3,r21,16
1000d05c:	84a8983a 	sll	r20,r16,r18
1000d060:	1906b03a 	or	r3,r3,r4
1000d064:	1880042e 	bgeu	r3,r2,1000d078 <__umoddi3+0x500>
1000d068:	1cc7883a 	add	r3,r3,r19
1000d06c:	1cc00236 	bltu	r3,r19,1000d078 <__umoddi3+0x500>
1000d070:	1880012e 	bgeu	r3,r2,1000d078 <__umoddi3+0x500>
1000d074:	1cc7883a 	add	r3,r3,r19
1000d078:	18a3c83a 	sub	r17,r3,r2
1000d07c:	b00b883a 	mov	r5,r22
1000d080:	8809883a 	mov	r4,r17
1000d084:	00017040 	call	10001704 <__umodsi3>
1000d088:	b00b883a 	mov	r5,r22
1000d08c:	8809883a 	mov	r4,r17
1000d090:	1021883a 	mov	r16,r2
1000d094:	00016a00 	call	100016a0 <__udivsi3>
1000d098:	100b883a 	mov	r5,r2
1000d09c:	b809883a 	mov	r4,r23
1000d0a0:	8020943a 	slli	r16,r16,16
1000d0a4:	000175c0 	call	1000175c <__mulsi3>
1000d0a8:	a8ffffcc 	andi	r3,r21,65535
1000d0ac:	1c06b03a 	or	r3,r3,r16
1000d0b0:	1880042e 	bgeu	r3,r2,1000d0c4 <__umoddi3+0x54c>
1000d0b4:	1cc7883a 	add	r3,r3,r19
1000d0b8:	1cc00236 	bltu	r3,r19,1000d0c4 <__umoddi3+0x54c>
1000d0bc:	1880012e 	bgeu	r3,r2,1000d0c4 <__umoddi3+0x54c>
1000d0c0:	1cc7883a 	add	r3,r3,r19
1000d0c4:	18a3c83a 	sub	r17,r3,r2
1000d0c8:	003f2906 	br	1000cd70 <__alt_data_end+0xf800cd70>
1000d0cc:	e48fc83a 	sub	r7,fp,r18
1000d0d0:	1d49c83a 	sub	r4,r3,r21
1000d0d4:	e1f9803a 	cmpltu	fp,fp,r7
1000d0d8:	2739c83a 	sub	fp,r4,fp
1000d0dc:	8f09c83a 	sub	r4,r17,fp
1000d0e0:	003fc306 	br	1000cff0 <__alt_data_end+0xf800cff0>
1000d0e4:	01000604 	movi	r4,24
1000d0e8:	003ef906 	br	1000ccd0 <__alt_data_end+0xf800ccd0>
1000d0ec:	00800604 	movi	r2,24
1000d0f0:	003f1306 	br	1000cd40 <__alt_data_end+0xf800cd40>
1000d0f4:	01000604 	movi	r4,24
1000d0f8:	003eb606 	br	1000cbd4 <__alt_data_end+0xf800cbd4>
1000d0fc:	40bf902e 	bgeu	r8,r2,1000cf40 <__alt_data_end+0xf800cf40>
1000d100:	b5bfff84 	addi	r22,r22,-2
1000d104:	4551883a 	add	r8,r8,r21
1000d108:	003f8e06 	br	1000cf44 <__alt_data_end+0xf800cf44>
1000d10c:	18bf762e 	bgeu	r3,r2,1000cee8 <__alt_data_end+0xf800cee8>
1000d110:	8c7fff84 	addi	r17,r17,-2
1000d114:	1d47883a 	add	r3,r3,r21
1000d118:	003f7406 	br	1000ceec <__alt_data_end+0xf800ceec>
1000d11c:	1cc7883a 	add	r3,r3,r19
1000d120:	003ecd06 	br	1000cc58 <__alt_data_end+0xf800cc58>
1000d124:	8005883a 	mov	r2,r16
1000d128:	003ef806 	br	1000cd0c <__alt_data_end+0xf800cd0c>
1000d12c:	873fe736 	bltu	r16,fp,1000d0cc <__alt_data_end+0xf800d0cc>
1000d130:	e00f883a 	mov	r7,fp
1000d134:	0009883a 	mov	r4,zero
1000d138:	003fad06 	br	1000cff0 <__alt_data_end+0xf800cff0>

1000d13c <__adddf3>:
1000d13c:	02c00434 	movhi	r11,16
1000d140:	5affffc4 	addi	r11,r11,-1
1000d144:	2806d7fa 	srli	r3,r5,31
1000d148:	2ad4703a 	and	r10,r5,r11
1000d14c:	3ad2703a 	and	r9,r7,r11
1000d150:	3804d53a 	srli	r2,r7,20
1000d154:	3018d77a 	srli	r12,r6,29
1000d158:	280ad53a 	srli	r5,r5,20
1000d15c:	501490fa 	slli	r10,r10,3
1000d160:	2010d77a 	srli	r8,r4,29
1000d164:	481290fa 	slli	r9,r9,3
1000d168:	380ed7fa 	srli	r7,r7,31
1000d16c:	defffb04 	addi	sp,sp,-20
1000d170:	dc800215 	stw	r18,8(sp)
1000d174:	dc400115 	stw	r17,4(sp)
1000d178:	dc000015 	stw	r16,0(sp)
1000d17c:	dfc00415 	stw	ra,16(sp)
1000d180:	dcc00315 	stw	r19,12(sp)
1000d184:	1c803fcc 	andi	r18,r3,255
1000d188:	2c01ffcc 	andi	r16,r5,2047
1000d18c:	5210b03a 	or	r8,r10,r8
1000d190:	202290fa 	slli	r17,r4,3
1000d194:	1081ffcc 	andi	r2,r2,2047
1000d198:	4b12b03a 	or	r9,r9,r12
1000d19c:	300c90fa 	slli	r6,r6,3
1000d1a0:	91c07526 	beq	r18,r7,1000d378 <__adddf3+0x23c>
1000d1a4:	8087c83a 	sub	r3,r16,r2
1000d1a8:	00c0ab0e 	bge	zero,r3,1000d458 <__adddf3+0x31c>
1000d1ac:	10002a1e 	bne	r2,zero,1000d258 <__adddf3+0x11c>
1000d1b0:	4984b03a 	or	r2,r9,r6
1000d1b4:	1000961e 	bne	r2,zero,1000d410 <__adddf3+0x2d4>
1000d1b8:	888001cc 	andi	r2,r17,7
1000d1bc:	10000726 	beq	r2,zero,1000d1dc <__adddf3+0xa0>
1000d1c0:	888003cc 	andi	r2,r17,15
1000d1c4:	00c00104 	movi	r3,4
1000d1c8:	10c00426 	beq	r2,r3,1000d1dc <__adddf3+0xa0>
1000d1cc:	88c7883a 	add	r3,r17,r3
1000d1d0:	1c63803a 	cmpltu	r17,r3,r17
1000d1d4:	4451883a 	add	r8,r8,r17
1000d1d8:	1823883a 	mov	r17,r3
1000d1dc:	4080202c 	andhi	r2,r8,128
1000d1e0:	10005926 	beq	r2,zero,1000d348 <__adddf3+0x20c>
1000d1e4:	84000044 	addi	r16,r16,1
1000d1e8:	0081ffc4 	movi	r2,2047
1000d1ec:	8080ba26 	beq	r16,r2,1000d4d8 <__adddf3+0x39c>
1000d1f0:	00bfe034 	movhi	r2,65408
1000d1f4:	10bfffc4 	addi	r2,r2,-1
1000d1f8:	4090703a 	and	r8,r8,r2
1000d1fc:	4004977a 	slli	r2,r8,29
1000d200:	4010927a 	slli	r8,r8,9
1000d204:	8822d0fa 	srli	r17,r17,3
1000d208:	8401ffcc 	andi	r16,r16,2047
1000d20c:	4010d33a 	srli	r8,r8,12
1000d210:	9007883a 	mov	r3,r18
1000d214:	1444b03a 	or	r2,r2,r17
1000d218:	8401ffcc 	andi	r16,r16,2047
1000d21c:	8020953a 	slli	r16,r16,20
1000d220:	18c03fcc 	andi	r3,r3,255
1000d224:	01000434 	movhi	r4,16
1000d228:	213fffc4 	addi	r4,r4,-1
1000d22c:	180697fa 	slli	r3,r3,31
1000d230:	4110703a 	and	r8,r8,r4
1000d234:	4410b03a 	or	r8,r8,r16
1000d238:	40c6b03a 	or	r3,r8,r3
1000d23c:	dfc00417 	ldw	ra,16(sp)
1000d240:	dcc00317 	ldw	r19,12(sp)
1000d244:	dc800217 	ldw	r18,8(sp)
1000d248:	dc400117 	ldw	r17,4(sp)
1000d24c:	dc000017 	ldw	r16,0(sp)
1000d250:	dec00504 	addi	sp,sp,20
1000d254:	f800283a 	ret
1000d258:	0081ffc4 	movi	r2,2047
1000d25c:	80bfd626 	beq	r16,r2,1000d1b8 <__alt_data_end+0xf800d1b8>
1000d260:	4a402034 	orhi	r9,r9,128
1000d264:	00800e04 	movi	r2,56
1000d268:	10c09f16 	blt	r2,r3,1000d4e8 <__adddf3+0x3ac>
1000d26c:	008007c4 	movi	r2,31
1000d270:	10c0c216 	blt	r2,r3,1000d57c <__adddf3+0x440>
1000d274:	00800804 	movi	r2,32
1000d278:	10c5c83a 	sub	r2,r2,r3
1000d27c:	488a983a 	sll	r5,r9,r2
1000d280:	30c8d83a 	srl	r4,r6,r3
1000d284:	3084983a 	sll	r2,r6,r2
1000d288:	48c6d83a 	srl	r3,r9,r3
1000d28c:	290cb03a 	or	r6,r5,r4
1000d290:	1004c03a 	cmpne	r2,r2,zero
1000d294:	308cb03a 	or	r6,r6,r2
1000d298:	898dc83a 	sub	r6,r17,r6
1000d29c:	89a3803a 	cmpltu	r17,r17,r6
1000d2a0:	40d1c83a 	sub	r8,r8,r3
1000d2a4:	4451c83a 	sub	r8,r8,r17
1000d2a8:	3023883a 	mov	r17,r6
1000d2ac:	4080202c 	andhi	r2,r8,128
1000d2b0:	10002326 	beq	r2,zero,1000d340 <__adddf3+0x204>
1000d2b4:	04c02034 	movhi	r19,128
1000d2b8:	9cffffc4 	addi	r19,r19,-1
1000d2bc:	44e6703a 	and	r19,r8,r19
1000d2c0:	98007626 	beq	r19,zero,1000d49c <__adddf3+0x360>
1000d2c4:	9809883a 	mov	r4,r19
1000d2c8:	000f97c0 	call	1000f97c <__clzsi2>
1000d2cc:	10fffe04 	addi	r3,r2,-8
1000d2d0:	010007c4 	movi	r4,31
1000d2d4:	20c07716 	blt	r4,r3,1000d4b4 <__adddf3+0x378>
1000d2d8:	00800804 	movi	r2,32
1000d2dc:	10c5c83a 	sub	r2,r2,r3
1000d2e0:	8884d83a 	srl	r2,r17,r2
1000d2e4:	98d0983a 	sll	r8,r19,r3
1000d2e8:	88e2983a 	sll	r17,r17,r3
1000d2ec:	1204b03a 	or	r2,r2,r8
1000d2f0:	1c007416 	blt	r3,r16,1000d4c4 <__adddf3+0x388>
1000d2f4:	1c21c83a 	sub	r16,r3,r16
1000d2f8:	82000044 	addi	r8,r16,1
1000d2fc:	00c007c4 	movi	r3,31
1000d300:	1a009116 	blt	r3,r8,1000d548 <__adddf3+0x40c>
1000d304:	00c00804 	movi	r3,32
1000d308:	1a07c83a 	sub	r3,r3,r8
1000d30c:	8a08d83a 	srl	r4,r17,r8
1000d310:	88e2983a 	sll	r17,r17,r3
1000d314:	10c6983a 	sll	r3,r2,r3
1000d318:	1210d83a 	srl	r8,r2,r8
1000d31c:	8804c03a 	cmpne	r2,r17,zero
1000d320:	1906b03a 	or	r3,r3,r4
1000d324:	18a2b03a 	or	r17,r3,r2
1000d328:	0021883a 	mov	r16,zero
1000d32c:	003fa206 	br	1000d1b8 <__alt_data_end+0xf800d1b8>
1000d330:	1890b03a 	or	r8,r3,r2
1000d334:	40017d26 	beq	r8,zero,1000d92c <__adddf3+0x7f0>
1000d338:	1011883a 	mov	r8,r2
1000d33c:	1823883a 	mov	r17,r3
1000d340:	888001cc 	andi	r2,r17,7
1000d344:	103f9e1e 	bne	r2,zero,1000d1c0 <__alt_data_end+0xf800d1c0>
1000d348:	4004977a 	slli	r2,r8,29
1000d34c:	8822d0fa 	srli	r17,r17,3
1000d350:	4010d0fa 	srli	r8,r8,3
1000d354:	9007883a 	mov	r3,r18
1000d358:	1444b03a 	or	r2,r2,r17
1000d35c:	0101ffc4 	movi	r4,2047
1000d360:	81002426 	beq	r16,r4,1000d3f4 <__adddf3+0x2b8>
1000d364:	8120703a 	and	r16,r16,r4
1000d368:	01000434 	movhi	r4,16
1000d36c:	213fffc4 	addi	r4,r4,-1
1000d370:	4110703a 	and	r8,r8,r4
1000d374:	003fa806 	br	1000d218 <__alt_data_end+0xf800d218>
1000d378:	8089c83a 	sub	r4,r16,r2
1000d37c:	01005e0e 	bge	zero,r4,1000d4f8 <__adddf3+0x3bc>
1000d380:	10002b26 	beq	r2,zero,1000d430 <__adddf3+0x2f4>
1000d384:	0081ffc4 	movi	r2,2047
1000d388:	80bf8b26 	beq	r16,r2,1000d1b8 <__alt_data_end+0xf800d1b8>
1000d38c:	4a402034 	orhi	r9,r9,128
1000d390:	00800e04 	movi	r2,56
1000d394:	1100a40e 	bge	r2,r4,1000d628 <__adddf3+0x4ec>
1000d398:	498cb03a 	or	r6,r9,r6
1000d39c:	300ac03a 	cmpne	r5,r6,zero
1000d3a0:	0013883a 	mov	r9,zero
1000d3a4:	2c4b883a 	add	r5,r5,r17
1000d3a8:	2c63803a 	cmpltu	r17,r5,r17
1000d3ac:	4a11883a 	add	r8,r9,r8
1000d3b0:	8a11883a 	add	r8,r17,r8
1000d3b4:	2823883a 	mov	r17,r5
1000d3b8:	4080202c 	andhi	r2,r8,128
1000d3bc:	103fe026 	beq	r2,zero,1000d340 <__alt_data_end+0xf800d340>
1000d3c0:	84000044 	addi	r16,r16,1
1000d3c4:	0081ffc4 	movi	r2,2047
1000d3c8:	8080d226 	beq	r16,r2,1000d714 <__adddf3+0x5d8>
1000d3cc:	00bfe034 	movhi	r2,65408
1000d3d0:	10bfffc4 	addi	r2,r2,-1
1000d3d4:	4090703a 	and	r8,r8,r2
1000d3d8:	880ad07a 	srli	r5,r17,1
1000d3dc:	400897fa 	slli	r4,r8,31
1000d3e0:	88c0004c 	andi	r3,r17,1
1000d3e4:	28e2b03a 	or	r17,r5,r3
1000d3e8:	4010d07a 	srli	r8,r8,1
1000d3ec:	2462b03a 	or	r17,r4,r17
1000d3f0:	003f7106 	br	1000d1b8 <__alt_data_end+0xf800d1b8>
1000d3f4:	4088b03a 	or	r4,r8,r2
1000d3f8:	20014526 	beq	r4,zero,1000d910 <__adddf3+0x7d4>
1000d3fc:	01000434 	movhi	r4,16
1000d400:	42000234 	orhi	r8,r8,8
1000d404:	213fffc4 	addi	r4,r4,-1
1000d408:	4110703a 	and	r8,r8,r4
1000d40c:	003f8206 	br	1000d218 <__alt_data_end+0xf800d218>
1000d410:	18ffffc4 	addi	r3,r3,-1
1000d414:	1800491e 	bne	r3,zero,1000d53c <__adddf3+0x400>
1000d418:	898bc83a 	sub	r5,r17,r6
1000d41c:	8963803a 	cmpltu	r17,r17,r5
1000d420:	4251c83a 	sub	r8,r8,r9
1000d424:	4451c83a 	sub	r8,r8,r17
1000d428:	2823883a 	mov	r17,r5
1000d42c:	003f9f06 	br	1000d2ac <__alt_data_end+0xf800d2ac>
1000d430:	4984b03a 	or	r2,r9,r6
1000d434:	103f6026 	beq	r2,zero,1000d1b8 <__alt_data_end+0xf800d1b8>
1000d438:	213fffc4 	addi	r4,r4,-1
1000d43c:	2000931e 	bne	r4,zero,1000d68c <__adddf3+0x550>
1000d440:	898d883a 	add	r6,r17,r6
1000d444:	3463803a 	cmpltu	r17,r6,r17
1000d448:	4251883a 	add	r8,r8,r9
1000d44c:	8a11883a 	add	r8,r17,r8
1000d450:	3023883a 	mov	r17,r6
1000d454:	003fd806 	br	1000d3b8 <__alt_data_end+0xf800d3b8>
1000d458:	1800541e 	bne	r3,zero,1000d5ac <__adddf3+0x470>
1000d45c:	80800044 	addi	r2,r16,1
1000d460:	1081ffcc 	andi	r2,r2,2047
1000d464:	00c00044 	movi	r3,1
1000d468:	1880a00e 	bge	r3,r2,1000d6ec <__adddf3+0x5b0>
1000d46c:	8989c83a 	sub	r4,r17,r6
1000d470:	8905803a 	cmpltu	r2,r17,r4
1000d474:	4267c83a 	sub	r19,r8,r9
1000d478:	98a7c83a 	sub	r19,r19,r2
1000d47c:	9880202c 	andhi	r2,r19,128
1000d480:	10006326 	beq	r2,zero,1000d610 <__adddf3+0x4d4>
1000d484:	3463c83a 	sub	r17,r6,r17
1000d488:	4a07c83a 	sub	r3,r9,r8
1000d48c:	344d803a 	cmpltu	r6,r6,r17
1000d490:	19a7c83a 	sub	r19,r3,r6
1000d494:	3825883a 	mov	r18,r7
1000d498:	983f8a1e 	bne	r19,zero,1000d2c4 <__alt_data_end+0xf800d2c4>
1000d49c:	8809883a 	mov	r4,r17
1000d4a0:	000f97c0 	call	1000f97c <__clzsi2>
1000d4a4:	10800804 	addi	r2,r2,32
1000d4a8:	10fffe04 	addi	r3,r2,-8
1000d4ac:	010007c4 	movi	r4,31
1000d4b0:	20ff890e 	bge	r4,r3,1000d2d8 <__alt_data_end+0xf800d2d8>
1000d4b4:	10bff604 	addi	r2,r2,-40
1000d4b8:	8884983a 	sll	r2,r17,r2
1000d4bc:	0023883a 	mov	r17,zero
1000d4c0:	1c3f8c0e 	bge	r3,r16,1000d2f4 <__alt_data_end+0xf800d2f4>
1000d4c4:	023fe034 	movhi	r8,65408
1000d4c8:	423fffc4 	addi	r8,r8,-1
1000d4cc:	80e1c83a 	sub	r16,r16,r3
1000d4d0:	1210703a 	and	r8,r2,r8
1000d4d4:	003f3806 	br	1000d1b8 <__alt_data_end+0xf800d1b8>
1000d4d8:	9007883a 	mov	r3,r18
1000d4dc:	0011883a 	mov	r8,zero
1000d4e0:	0005883a 	mov	r2,zero
1000d4e4:	003f4c06 	br	1000d218 <__alt_data_end+0xf800d218>
1000d4e8:	498cb03a 	or	r6,r9,r6
1000d4ec:	300cc03a 	cmpne	r6,r6,zero
1000d4f0:	0007883a 	mov	r3,zero
1000d4f4:	003f6806 	br	1000d298 <__alt_data_end+0xf800d298>
1000d4f8:	20009c1e 	bne	r4,zero,1000d76c <__adddf3+0x630>
1000d4fc:	80800044 	addi	r2,r16,1
1000d500:	1141ffcc 	andi	r5,r2,2047
1000d504:	01000044 	movi	r4,1
1000d508:	2140670e 	bge	r4,r5,1000d6a8 <__adddf3+0x56c>
1000d50c:	0101ffc4 	movi	r4,2047
1000d510:	11007f26 	beq	r2,r4,1000d710 <__adddf3+0x5d4>
1000d514:	898d883a 	add	r6,r17,r6
1000d518:	4247883a 	add	r3,r8,r9
1000d51c:	3451803a 	cmpltu	r8,r6,r17
1000d520:	40d1883a 	add	r8,r8,r3
1000d524:	402297fa 	slli	r17,r8,31
1000d528:	300cd07a 	srli	r6,r6,1
1000d52c:	4010d07a 	srli	r8,r8,1
1000d530:	1021883a 	mov	r16,r2
1000d534:	89a2b03a 	or	r17,r17,r6
1000d538:	003f1f06 	br	1000d1b8 <__alt_data_end+0xf800d1b8>
1000d53c:	0081ffc4 	movi	r2,2047
1000d540:	80bf481e 	bne	r16,r2,1000d264 <__alt_data_end+0xf800d264>
1000d544:	003f1c06 	br	1000d1b8 <__alt_data_end+0xf800d1b8>
1000d548:	843ff844 	addi	r16,r16,-31
1000d54c:	01000804 	movi	r4,32
1000d550:	1406d83a 	srl	r3,r2,r16
1000d554:	41005026 	beq	r8,r4,1000d698 <__adddf3+0x55c>
1000d558:	01001004 	movi	r4,64
1000d55c:	2211c83a 	sub	r8,r4,r8
1000d560:	1204983a 	sll	r2,r2,r8
1000d564:	88a2b03a 	or	r17,r17,r2
1000d568:	8822c03a 	cmpne	r17,r17,zero
1000d56c:	1c62b03a 	or	r17,r3,r17
1000d570:	0011883a 	mov	r8,zero
1000d574:	0021883a 	mov	r16,zero
1000d578:	003f7106 	br	1000d340 <__alt_data_end+0xf800d340>
1000d57c:	193ff804 	addi	r4,r3,-32
1000d580:	00800804 	movi	r2,32
1000d584:	4908d83a 	srl	r4,r9,r4
1000d588:	18804526 	beq	r3,r2,1000d6a0 <__adddf3+0x564>
1000d58c:	00801004 	movi	r2,64
1000d590:	10c5c83a 	sub	r2,r2,r3
1000d594:	4886983a 	sll	r3,r9,r2
1000d598:	198cb03a 	or	r6,r3,r6
1000d59c:	300cc03a 	cmpne	r6,r6,zero
1000d5a0:	218cb03a 	or	r6,r4,r6
1000d5a4:	0007883a 	mov	r3,zero
1000d5a8:	003f3b06 	br	1000d298 <__alt_data_end+0xf800d298>
1000d5ac:	80002a26 	beq	r16,zero,1000d658 <__adddf3+0x51c>
1000d5b0:	0101ffc4 	movi	r4,2047
1000d5b4:	11006826 	beq	r2,r4,1000d758 <__adddf3+0x61c>
1000d5b8:	00c7c83a 	sub	r3,zero,r3
1000d5bc:	42002034 	orhi	r8,r8,128
1000d5c0:	01000e04 	movi	r4,56
1000d5c4:	20c07c16 	blt	r4,r3,1000d7b8 <__adddf3+0x67c>
1000d5c8:	010007c4 	movi	r4,31
1000d5cc:	20c0da16 	blt	r4,r3,1000d938 <__adddf3+0x7fc>
1000d5d0:	01000804 	movi	r4,32
1000d5d4:	20c9c83a 	sub	r4,r4,r3
1000d5d8:	4114983a 	sll	r10,r8,r4
1000d5dc:	88cad83a 	srl	r5,r17,r3
1000d5e0:	8908983a 	sll	r4,r17,r4
1000d5e4:	40c6d83a 	srl	r3,r8,r3
1000d5e8:	5162b03a 	or	r17,r10,r5
1000d5ec:	2008c03a 	cmpne	r4,r4,zero
1000d5f0:	8922b03a 	or	r17,r17,r4
1000d5f4:	3463c83a 	sub	r17,r6,r17
1000d5f8:	48c7c83a 	sub	r3,r9,r3
1000d5fc:	344d803a 	cmpltu	r6,r6,r17
1000d600:	1991c83a 	sub	r8,r3,r6
1000d604:	1021883a 	mov	r16,r2
1000d608:	3825883a 	mov	r18,r7
1000d60c:	003f2706 	br	1000d2ac <__alt_data_end+0xf800d2ac>
1000d610:	24d0b03a 	or	r8,r4,r19
1000d614:	40001b1e 	bne	r8,zero,1000d684 <__adddf3+0x548>
1000d618:	0005883a 	mov	r2,zero
1000d61c:	0007883a 	mov	r3,zero
1000d620:	0021883a 	mov	r16,zero
1000d624:	003f4d06 	br	1000d35c <__alt_data_end+0xf800d35c>
1000d628:	008007c4 	movi	r2,31
1000d62c:	11003c16 	blt	r2,r4,1000d720 <__adddf3+0x5e4>
1000d630:	00800804 	movi	r2,32
1000d634:	1105c83a 	sub	r2,r2,r4
1000d638:	488e983a 	sll	r7,r9,r2
1000d63c:	310ad83a 	srl	r5,r6,r4
1000d640:	3084983a 	sll	r2,r6,r2
1000d644:	4912d83a 	srl	r9,r9,r4
1000d648:	394ab03a 	or	r5,r7,r5
1000d64c:	1004c03a 	cmpne	r2,r2,zero
1000d650:	288ab03a 	or	r5,r5,r2
1000d654:	003f5306 	br	1000d3a4 <__alt_data_end+0xf800d3a4>
1000d658:	4448b03a 	or	r4,r8,r17
1000d65c:	20003e26 	beq	r4,zero,1000d758 <__adddf3+0x61c>
1000d660:	00c6303a 	nor	r3,zero,r3
1000d664:	18003a1e 	bne	r3,zero,1000d750 <__adddf3+0x614>
1000d668:	3463c83a 	sub	r17,r6,r17
1000d66c:	4a07c83a 	sub	r3,r9,r8
1000d670:	344d803a 	cmpltu	r6,r6,r17
1000d674:	1991c83a 	sub	r8,r3,r6
1000d678:	1021883a 	mov	r16,r2
1000d67c:	3825883a 	mov	r18,r7
1000d680:	003f0a06 	br	1000d2ac <__alt_data_end+0xf800d2ac>
1000d684:	2023883a 	mov	r17,r4
1000d688:	003f0d06 	br	1000d2c0 <__alt_data_end+0xf800d2c0>
1000d68c:	0081ffc4 	movi	r2,2047
1000d690:	80bf3f1e 	bne	r16,r2,1000d390 <__alt_data_end+0xf800d390>
1000d694:	003ec806 	br	1000d1b8 <__alt_data_end+0xf800d1b8>
1000d698:	0005883a 	mov	r2,zero
1000d69c:	003fb106 	br	1000d564 <__alt_data_end+0xf800d564>
1000d6a0:	0007883a 	mov	r3,zero
1000d6a4:	003fbc06 	br	1000d598 <__alt_data_end+0xf800d598>
1000d6a8:	4444b03a 	or	r2,r8,r17
1000d6ac:	8000871e 	bne	r16,zero,1000d8cc <__adddf3+0x790>
1000d6b0:	1000ba26 	beq	r2,zero,1000d99c <__adddf3+0x860>
1000d6b4:	4984b03a 	or	r2,r9,r6
1000d6b8:	103ebf26 	beq	r2,zero,1000d1b8 <__alt_data_end+0xf800d1b8>
1000d6bc:	8985883a 	add	r2,r17,r6
1000d6c0:	4247883a 	add	r3,r8,r9
1000d6c4:	1451803a 	cmpltu	r8,r2,r17
1000d6c8:	40d1883a 	add	r8,r8,r3
1000d6cc:	40c0202c 	andhi	r3,r8,128
1000d6d0:	1023883a 	mov	r17,r2
1000d6d4:	183f1a26 	beq	r3,zero,1000d340 <__alt_data_end+0xf800d340>
1000d6d8:	00bfe034 	movhi	r2,65408
1000d6dc:	10bfffc4 	addi	r2,r2,-1
1000d6e0:	2021883a 	mov	r16,r4
1000d6e4:	4090703a 	and	r8,r8,r2
1000d6e8:	003eb306 	br	1000d1b8 <__alt_data_end+0xf800d1b8>
1000d6ec:	4444b03a 	or	r2,r8,r17
1000d6f0:	8000291e 	bne	r16,zero,1000d798 <__adddf3+0x65c>
1000d6f4:	10004b1e 	bne	r2,zero,1000d824 <__adddf3+0x6e8>
1000d6f8:	4990b03a 	or	r8,r9,r6
1000d6fc:	40008b26 	beq	r8,zero,1000d92c <__adddf3+0x7f0>
1000d700:	4811883a 	mov	r8,r9
1000d704:	3023883a 	mov	r17,r6
1000d708:	3825883a 	mov	r18,r7
1000d70c:	003eaa06 	br	1000d1b8 <__alt_data_end+0xf800d1b8>
1000d710:	1021883a 	mov	r16,r2
1000d714:	0011883a 	mov	r8,zero
1000d718:	0005883a 	mov	r2,zero
1000d71c:	003f0f06 	br	1000d35c <__alt_data_end+0xf800d35c>
1000d720:	217ff804 	addi	r5,r4,-32
1000d724:	00800804 	movi	r2,32
1000d728:	494ad83a 	srl	r5,r9,r5
1000d72c:	20807d26 	beq	r4,r2,1000d924 <__adddf3+0x7e8>
1000d730:	00801004 	movi	r2,64
1000d734:	1109c83a 	sub	r4,r2,r4
1000d738:	4912983a 	sll	r9,r9,r4
1000d73c:	498cb03a 	or	r6,r9,r6
1000d740:	300cc03a 	cmpne	r6,r6,zero
1000d744:	298ab03a 	or	r5,r5,r6
1000d748:	0013883a 	mov	r9,zero
1000d74c:	003f1506 	br	1000d3a4 <__alt_data_end+0xf800d3a4>
1000d750:	0101ffc4 	movi	r4,2047
1000d754:	113f9a1e 	bne	r2,r4,1000d5c0 <__alt_data_end+0xf800d5c0>
1000d758:	4811883a 	mov	r8,r9
1000d75c:	3023883a 	mov	r17,r6
1000d760:	1021883a 	mov	r16,r2
1000d764:	3825883a 	mov	r18,r7
1000d768:	003e9306 	br	1000d1b8 <__alt_data_end+0xf800d1b8>
1000d76c:	8000161e 	bne	r16,zero,1000d7c8 <__adddf3+0x68c>
1000d770:	444ab03a 	or	r5,r8,r17
1000d774:	28005126 	beq	r5,zero,1000d8bc <__adddf3+0x780>
1000d778:	0108303a 	nor	r4,zero,r4
1000d77c:	20004d1e 	bne	r4,zero,1000d8b4 <__adddf3+0x778>
1000d780:	89a3883a 	add	r17,r17,r6
1000d784:	4253883a 	add	r9,r8,r9
1000d788:	898d803a 	cmpltu	r6,r17,r6
1000d78c:	3251883a 	add	r8,r6,r9
1000d790:	1021883a 	mov	r16,r2
1000d794:	003f0806 	br	1000d3b8 <__alt_data_end+0xf800d3b8>
1000d798:	1000301e 	bne	r2,zero,1000d85c <__adddf3+0x720>
1000d79c:	4984b03a 	or	r2,r9,r6
1000d7a0:	10007126 	beq	r2,zero,1000d968 <__adddf3+0x82c>
1000d7a4:	4811883a 	mov	r8,r9
1000d7a8:	3023883a 	mov	r17,r6
1000d7ac:	3825883a 	mov	r18,r7
1000d7b0:	0401ffc4 	movi	r16,2047
1000d7b4:	003e8006 	br	1000d1b8 <__alt_data_end+0xf800d1b8>
1000d7b8:	4462b03a 	or	r17,r8,r17
1000d7bc:	8822c03a 	cmpne	r17,r17,zero
1000d7c0:	0007883a 	mov	r3,zero
1000d7c4:	003f8b06 	br	1000d5f4 <__alt_data_end+0xf800d5f4>
1000d7c8:	0141ffc4 	movi	r5,2047
1000d7cc:	11403b26 	beq	r2,r5,1000d8bc <__adddf3+0x780>
1000d7d0:	0109c83a 	sub	r4,zero,r4
1000d7d4:	42002034 	orhi	r8,r8,128
1000d7d8:	01400e04 	movi	r5,56
1000d7dc:	29006716 	blt	r5,r4,1000d97c <__adddf3+0x840>
1000d7e0:	014007c4 	movi	r5,31
1000d7e4:	29007016 	blt	r5,r4,1000d9a8 <__adddf3+0x86c>
1000d7e8:	01400804 	movi	r5,32
1000d7ec:	290bc83a 	sub	r5,r5,r4
1000d7f0:	4154983a 	sll	r10,r8,r5
1000d7f4:	890ed83a 	srl	r7,r17,r4
1000d7f8:	894a983a 	sll	r5,r17,r5
1000d7fc:	4108d83a 	srl	r4,r8,r4
1000d800:	51e2b03a 	or	r17,r10,r7
1000d804:	280ac03a 	cmpne	r5,r5,zero
1000d808:	8962b03a 	or	r17,r17,r5
1000d80c:	89a3883a 	add	r17,r17,r6
1000d810:	2253883a 	add	r9,r4,r9
1000d814:	898d803a 	cmpltu	r6,r17,r6
1000d818:	3251883a 	add	r8,r6,r9
1000d81c:	1021883a 	mov	r16,r2
1000d820:	003ee506 	br	1000d3b8 <__alt_data_end+0xf800d3b8>
1000d824:	4984b03a 	or	r2,r9,r6
1000d828:	103e6326 	beq	r2,zero,1000d1b8 <__alt_data_end+0xf800d1b8>
1000d82c:	8987c83a 	sub	r3,r17,r6
1000d830:	88c9803a 	cmpltu	r4,r17,r3
1000d834:	4245c83a 	sub	r2,r8,r9
1000d838:	1105c83a 	sub	r2,r2,r4
1000d83c:	1100202c 	andhi	r4,r2,128
1000d840:	203ebb26 	beq	r4,zero,1000d330 <__alt_data_end+0xf800d330>
1000d844:	3463c83a 	sub	r17,r6,r17
1000d848:	4a07c83a 	sub	r3,r9,r8
1000d84c:	344d803a 	cmpltu	r6,r6,r17
1000d850:	1991c83a 	sub	r8,r3,r6
1000d854:	3825883a 	mov	r18,r7
1000d858:	003e5706 	br	1000d1b8 <__alt_data_end+0xf800d1b8>
1000d85c:	4984b03a 	or	r2,r9,r6
1000d860:	10002e26 	beq	r2,zero,1000d91c <__adddf3+0x7e0>
1000d864:	4004d0fa 	srli	r2,r8,3
1000d868:	8822d0fa 	srli	r17,r17,3
1000d86c:	4010977a 	slli	r8,r8,29
1000d870:	10c0022c 	andhi	r3,r2,8
1000d874:	4462b03a 	or	r17,r8,r17
1000d878:	18000826 	beq	r3,zero,1000d89c <__adddf3+0x760>
1000d87c:	4808d0fa 	srli	r4,r9,3
1000d880:	20c0022c 	andhi	r3,r4,8
1000d884:	1800051e 	bne	r3,zero,1000d89c <__adddf3+0x760>
1000d888:	300cd0fa 	srli	r6,r6,3
1000d88c:	4806977a 	slli	r3,r9,29
1000d890:	2005883a 	mov	r2,r4
1000d894:	3825883a 	mov	r18,r7
1000d898:	19a2b03a 	or	r17,r3,r6
1000d89c:	8810d77a 	srli	r8,r17,29
1000d8a0:	100490fa 	slli	r2,r2,3
1000d8a4:	882290fa 	slli	r17,r17,3
1000d8a8:	0401ffc4 	movi	r16,2047
1000d8ac:	4090b03a 	or	r8,r8,r2
1000d8b0:	003e4106 	br	1000d1b8 <__alt_data_end+0xf800d1b8>
1000d8b4:	0141ffc4 	movi	r5,2047
1000d8b8:	117fc71e 	bne	r2,r5,1000d7d8 <__alt_data_end+0xf800d7d8>
1000d8bc:	4811883a 	mov	r8,r9
1000d8c0:	3023883a 	mov	r17,r6
1000d8c4:	1021883a 	mov	r16,r2
1000d8c8:	003e3b06 	br	1000d1b8 <__alt_data_end+0xf800d1b8>
1000d8cc:	10002f26 	beq	r2,zero,1000d98c <__adddf3+0x850>
1000d8d0:	4984b03a 	or	r2,r9,r6
1000d8d4:	10001126 	beq	r2,zero,1000d91c <__adddf3+0x7e0>
1000d8d8:	4004d0fa 	srli	r2,r8,3
1000d8dc:	8822d0fa 	srli	r17,r17,3
1000d8e0:	4010977a 	slli	r8,r8,29
1000d8e4:	10c0022c 	andhi	r3,r2,8
1000d8e8:	4462b03a 	or	r17,r8,r17
1000d8ec:	183feb26 	beq	r3,zero,1000d89c <__alt_data_end+0xf800d89c>
1000d8f0:	4808d0fa 	srli	r4,r9,3
1000d8f4:	20c0022c 	andhi	r3,r4,8
1000d8f8:	183fe81e 	bne	r3,zero,1000d89c <__alt_data_end+0xf800d89c>
1000d8fc:	300cd0fa 	srli	r6,r6,3
1000d900:	4806977a 	slli	r3,r9,29
1000d904:	2005883a 	mov	r2,r4
1000d908:	19a2b03a 	or	r17,r3,r6
1000d90c:	003fe306 	br	1000d89c <__alt_data_end+0xf800d89c>
1000d910:	0011883a 	mov	r8,zero
1000d914:	0005883a 	mov	r2,zero
1000d918:	003e3f06 	br	1000d218 <__alt_data_end+0xf800d218>
1000d91c:	0401ffc4 	movi	r16,2047
1000d920:	003e2506 	br	1000d1b8 <__alt_data_end+0xf800d1b8>
1000d924:	0013883a 	mov	r9,zero
1000d928:	003f8406 	br	1000d73c <__alt_data_end+0xf800d73c>
1000d92c:	0005883a 	mov	r2,zero
1000d930:	0007883a 	mov	r3,zero
1000d934:	003e8906 	br	1000d35c <__alt_data_end+0xf800d35c>
1000d938:	197ff804 	addi	r5,r3,-32
1000d93c:	01000804 	movi	r4,32
1000d940:	414ad83a 	srl	r5,r8,r5
1000d944:	19002426 	beq	r3,r4,1000d9d8 <__adddf3+0x89c>
1000d948:	01001004 	movi	r4,64
1000d94c:	20c7c83a 	sub	r3,r4,r3
1000d950:	40c6983a 	sll	r3,r8,r3
1000d954:	1c46b03a 	or	r3,r3,r17
1000d958:	1806c03a 	cmpne	r3,r3,zero
1000d95c:	28e2b03a 	or	r17,r5,r3
1000d960:	0007883a 	mov	r3,zero
1000d964:	003f2306 	br	1000d5f4 <__alt_data_end+0xf800d5f4>
1000d968:	0007883a 	mov	r3,zero
1000d96c:	5811883a 	mov	r8,r11
1000d970:	00bfffc4 	movi	r2,-1
1000d974:	0401ffc4 	movi	r16,2047
1000d978:	003e7806 	br	1000d35c <__alt_data_end+0xf800d35c>
1000d97c:	4462b03a 	or	r17,r8,r17
1000d980:	8822c03a 	cmpne	r17,r17,zero
1000d984:	0009883a 	mov	r4,zero
1000d988:	003fa006 	br	1000d80c <__alt_data_end+0xf800d80c>
1000d98c:	4811883a 	mov	r8,r9
1000d990:	3023883a 	mov	r17,r6
1000d994:	0401ffc4 	movi	r16,2047
1000d998:	003e0706 	br	1000d1b8 <__alt_data_end+0xf800d1b8>
1000d99c:	4811883a 	mov	r8,r9
1000d9a0:	3023883a 	mov	r17,r6
1000d9a4:	003e0406 	br	1000d1b8 <__alt_data_end+0xf800d1b8>
1000d9a8:	21fff804 	addi	r7,r4,-32
1000d9ac:	01400804 	movi	r5,32
1000d9b0:	41ced83a 	srl	r7,r8,r7
1000d9b4:	21400a26 	beq	r4,r5,1000d9e0 <__adddf3+0x8a4>
1000d9b8:	01401004 	movi	r5,64
1000d9bc:	2909c83a 	sub	r4,r5,r4
1000d9c0:	4108983a 	sll	r4,r8,r4
1000d9c4:	2448b03a 	or	r4,r4,r17
1000d9c8:	2008c03a 	cmpne	r4,r4,zero
1000d9cc:	3922b03a 	or	r17,r7,r4
1000d9d0:	0009883a 	mov	r4,zero
1000d9d4:	003f8d06 	br	1000d80c <__alt_data_end+0xf800d80c>
1000d9d8:	0007883a 	mov	r3,zero
1000d9dc:	003fdd06 	br	1000d954 <__alt_data_end+0xf800d954>
1000d9e0:	0009883a 	mov	r4,zero
1000d9e4:	003ff706 	br	1000d9c4 <__alt_data_end+0xf800d9c4>

1000d9e8 <__divdf3>:
1000d9e8:	defff004 	addi	sp,sp,-64
1000d9ec:	dc800815 	stw	r18,32(sp)
1000d9f0:	2824d53a 	srli	r18,r5,20
1000d9f4:	dd800c15 	stw	r22,48(sp)
1000d9f8:	282cd7fa 	srli	r22,r5,31
1000d9fc:	dc000615 	stw	r16,24(sp)
1000da00:	04000434 	movhi	r16,16
1000da04:	843fffc4 	addi	r16,r16,-1
1000da08:	dfc00f15 	stw	ra,60(sp)
1000da0c:	df000e15 	stw	fp,56(sp)
1000da10:	ddc00d15 	stw	r23,52(sp)
1000da14:	dd400b15 	stw	r21,44(sp)
1000da18:	dd000a15 	stw	r20,40(sp)
1000da1c:	dcc00915 	stw	r19,36(sp)
1000da20:	dc400715 	stw	r17,28(sp)
1000da24:	9481ffcc 	andi	r18,r18,2047
1000da28:	2c20703a 	and	r16,r5,r16
1000da2c:	b2003fcc 	andi	r8,r22,255
1000da30:	90006126 	beq	r18,zero,1000dbb8 <__divdf3+0x1d0>
1000da34:	0081ffc4 	movi	r2,2047
1000da38:	202b883a 	mov	r21,r4
1000da3c:	90803726 	beq	r18,r2,1000db1c <__divdf3+0x134>
1000da40:	80800434 	orhi	r2,r16,16
1000da44:	100490fa 	slli	r2,r2,3
1000da48:	2020d77a 	srli	r16,r4,29
1000da4c:	202a90fa 	slli	r21,r4,3
1000da50:	94bf0044 	addi	r18,r18,-1023
1000da54:	80a0b03a 	or	r16,r16,r2
1000da58:	0013883a 	mov	r9,zero
1000da5c:	000b883a 	mov	r5,zero
1000da60:	3806d53a 	srli	r3,r7,20
1000da64:	382ed7fa 	srli	r23,r7,31
1000da68:	04400434 	movhi	r17,16
1000da6c:	8c7fffc4 	addi	r17,r17,-1
1000da70:	18c1ffcc 	andi	r3,r3,2047
1000da74:	3029883a 	mov	r20,r6
1000da78:	3c62703a 	and	r17,r7,r17
1000da7c:	bf003fcc 	andi	fp,r23,255
1000da80:	18006e26 	beq	r3,zero,1000dc3c <__divdf3+0x254>
1000da84:	0081ffc4 	movi	r2,2047
1000da88:	18806626 	beq	r3,r2,1000dc24 <__divdf3+0x23c>
1000da8c:	88800434 	orhi	r2,r17,16
1000da90:	100490fa 	slli	r2,r2,3
1000da94:	3022d77a 	srli	r17,r6,29
1000da98:	302890fa 	slli	r20,r6,3
1000da9c:	18ff0044 	addi	r3,r3,-1023
1000daa0:	88a2b03a 	or	r17,r17,r2
1000daa4:	000f883a 	mov	r7,zero
1000daa8:	b5e6f03a 	xor	r19,r22,r23
1000daac:	3a4cb03a 	or	r6,r7,r9
1000dab0:	008003c4 	movi	r2,15
1000dab4:	9809883a 	mov	r4,r19
1000dab8:	90c7c83a 	sub	r3,r18,r3
1000dabc:	9cc03fcc 	andi	r19,r19,255
1000dac0:	11809636 	bltu	r2,r6,1000dd1c <__divdf3+0x334>
1000dac4:	300c90ba 	slli	r6,r6,2
1000dac8:	00840074 	movhi	r2,4097
1000dacc:	10b6b704 	addi	r2,r2,-9508
1000dad0:	308d883a 	add	r6,r6,r2
1000dad4:	30800017 	ldw	r2,0(r6)
1000dad8:	1000683a 	jmp	r2
1000dadc:	1000dd1c 	xori	zero,r2,884
1000dae0:	1000db54 	ori	zero,r2,877
1000dae4:	1000dd0c 	andi	zero,r2,884
1000dae8:	1000db48 	cmpgei	zero,r2,877
1000daec:	1000dd0c 	andi	zero,r2,884
1000daf0:	1000dce0 	cmpeqi	zero,r2,883
1000daf4:	1000dd0c 	andi	zero,r2,884
1000daf8:	1000db48 	cmpgei	zero,r2,877
1000dafc:	1000db54 	ori	zero,r2,877
1000db00:	1000db54 	ori	zero,r2,877
1000db04:	1000dce0 	cmpeqi	zero,r2,883
1000db08:	1000db48 	cmpgei	zero,r2,877
1000db0c:	1000db38 	rdprs	zero,r2,876
1000db10:	1000db38 	rdprs	zero,r2,876
1000db14:	1000db38 	rdprs	zero,r2,876
1000db18:	1000e0a4 	muli	zero,r2,898
1000db1c:	2404b03a 	or	r2,r4,r16
1000db20:	10006c1e 	bne	r2,zero,1000dcd4 <__divdf3+0x2ec>
1000db24:	02400204 	movi	r9,8
1000db28:	0021883a 	mov	r16,zero
1000db2c:	002b883a 	mov	r21,zero
1000db30:	01400084 	movi	r5,2
1000db34:	003fca06 	br	1000da60 <__alt_data_end+0xf800da60>
1000db38:	8023883a 	mov	r17,r16
1000db3c:	a829883a 	mov	r20,r21
1000db40:	4039883a 	mov	fp,r8
1000db44:	280f883a 	mov	r7,r5
1000db48:	00800084 	movi	r2,2
1000db4c:	3881601e 	bne	r7,r2,1000e0d0 <__divdf3+0x6e8>
1000db50:	e027883a 	mov	r19,fp
1000db54:	9900004c 	andi	r4,r19,1
1000db58:	0081ffc4 	movi	r2,2047
1000db5c:	0021883a 	mov	r16,zero
1000db60:	002b883a 	mov	r21,zero
1000db64:	1004953a 	slli	r2,r2,20
1000db68:	20c03fcc 	andi	r3,r4,255
1000db6c:	01400434 	movhi	r5,16
1000db70:	297fffc4 	addi	r5,r5,-1
1000db74:	180697fa 	slli	r3,r3,31
1000db78:	8160703a 	and	r16,r16,r5
1000db7c:	80a0b03a 	or	r16,r16,r2
1000db80:	80c6b03a 	or	r3,r16,r3
1000db84:	a805883a 	mov	r2,r21
1000db88:	dfc00f17 	ldw	ra,60(sp)
1000db8c:	df000e17 	ldw	fp,56(sp)
1000db90:	ddc00d17 	ldw	r23,52(sp)
1000db94:	dd800c17 	ldw	r22,48(sp)
1000db98:	dd400b17 	ldw	r21,44(sp)
1000db9c:	dd000a17 	ldw	r20,40(sp)
1000dba0:	dcc00917 	ldw	r19,36(sp)
1000dba4:	dc800817 	ldw	r18,32(sp)
1000dba8:	dc400717 	ldw	r17,28(sp)
1000dbac:	dc000617 	ldw	r16,24(sp)
1000dbb0:	dec01004 	addi	sp,sp,64
1000dbb4:	f800283a 	ret
1000dbb8:	2404b03a 	or	r2,r4,r16
1000dbbc:	2023883a 	mov	r17,r4
1000dbc0:	10003f26 	beq	r2,zero,1000dcc0 <__divdf3+0x2d8>
1000dbc4:	80015e26 	beq	r16,zero,1000e140 <__divdf3+0x758>
1000dbc8:	8009883a 	mov	r4,r16
1000dbcc:	d9800215 	stw	r6,8(sp)
1000dbd0:	d9c00515 	stw	r7,20(sp)
1000dbd4:	da000415 	stw	r8,16(sp)
1000dbd8:	000f97c0 	call	1000f97c <__clzsi2>
1000dbdc:	d9800217 	ldw	r6,8(sp)
1000dbe0:	d9c00517 	ldw	r7,20(sp)
1000dbe4:	da000417 	ldw	r8,16(sp)
1000dbe8:	113ffd44 	addi	r4,r2,-11
1000dbec:	00c00704 	movi	r3,28
1000dbf0:	19014f16 	blt	r3,r4,1000e130 <__divdf3+0x748>
1000dbf4:	00c00744 	movi	r3,29
1000dbf8:	157ffe04 	addi	r21,r2,-8
1000dbfc:	1907c83a 	sub	r3,r3,r4
1000dc00:	8560983a 	sll	r16,r16,r21
1000dc04:	88c6d83a 	srl	r3,r17,r3
1000dc08:	8d6a983a 	sll	r21,r17,r21
1000dc0c:	1c20b03a 	or	r16,r3,r16
1000dc10:	1080fcc4 	addi	r2,r2,1011
1000dc14:	00a5c83a 	sub	r18,zero,r2
1000dc18:	0013883a 	mov	r9,zero
1000dc1c:	000b883a 	mov	r5,zero
1000dc20:	003f8f06 	br	1000da60 <__alt_data_end+0xf800da60>
1000dc24:	3444b03a 	or	r2,r6,r17
1000dc28:	1000231e 	bne	r2,zero,1000dcb8 <__divdf3+0x2d0>
1000dc2c:	0023883a 	mov	r17,zero
1000dc30:	0029883a 	mov	r20,zero
1000dc34:	01c00084 	movi	r7,2
1000dc38:	003f9b06 	br	1000daa8 <__alt_data_end+0xf800daa8>
1000dc3c:	3444b03a 	or	r2,r6,r17
1000dc40:	10001926 	beq	r2,zero,1000dca8 <__divdf3+0x2c0>
1000dc44:	88014b26 	beq	r17,zero,1000e174 <__divdf3+0x78c>
1000dc48:	8809883a 	mov	r4,r17
1000dc4c:	d9400115 	stw	r5,4(sp)
1000dc50:	d9800215 	stw	r6,8(sp)
1000dc54:	da000415 	stw	r8,16(sp)
1000dc58:	da400315 	stw	r9,12(sp)
1000dc5c:	000f97c0 	call	1000f97c <__clzsi2>
1000dc60:	d9400117 	ldw	r5,4(sp)
1000dc64:	d9800217 	ldw	r6,8(sp)
1000dc68:	da000417 	ldw	r8,16(sp)
1000dc6c:	da400317 	ldw	r9,12(sp)
1000dc70:	113ffd44 	addi	r4,r2,-11
1000dc74:	00c00704 	movi	r3,28
1000dc78:	19013a16 	blt	r3,r4,1000e164 <__divdf3+0x77c>
1000dc7c:	00c00744 	movi	r3,29
1000dc80:	153ffe04 	addi	r20,r2,-8
1000dc84:	1907c83a 	sub	r3,r3,r4
1000dc88:	8d22983a 	sll	r17,r17,r20
1000dc8c:	30c6d83a 	srl	r3,r6,r3
1000dc90:	3528983a 	sll	r20,r6,r20
1000dc94:	1c62b03a 	or	r17,r3,r17
1000dc98:	1080fcc4 	addi	r2,r2,1011
1000dc9c:	0087c83a 	sub	r3,zero,r2
1000dca0:	000f883a 	mov	r7,zero
1000dca4:	003f8006 	br	1000daa8 <__alt_data_end+0xf800daa8>
1000dca8:	0023883a 	mov	r17,zero
1000dcac:	0029883a 	mov	r20,zero
1000dcb0:	01c00044 	movi	r7,1
1000dcb4:	003f7c06 	br	1000daa8 <__alt_data_end+0xf800daa8>
1000dcb8:	01c000c4 	movi	r7,3
1000dcbc:	003f7a06 	br	1000daa8 <__alt_data_end+0xf800daa8>
1000dcc0:	02400104 	movi	r9,4
1000dcc4:	0021883a 	mov	r16,zero
1000dcc8:	002b883a 	mov	r21,zero
1000dccc:	01400044 	movi	r5,1
1000dcd0:	003f6306 	br	1000da60 <__alt_data_end+0xf800da60>
1000dcd4:	02400304 	movi	r9,12
1000dcd8:	014000c4 	movi	r5,3
1000dcdc:	003f6006 	br	1000da60 <__alt_data_end+0xf800da60>
1000dce0:	04000434 	movhi	r16,16
1000dce4:	0009883a 	mov	r4,zero
1000dce8:	843fffc4 	addi	r16,r16,-1
1000dcec:	057fffc4 	movi	r21,-1
1000dcf0:	0081ffc4 	movi	r2,2047
1000dcf4:	003f9b06 	br	1000db64 <__alt_data_end+0xf800db64>
1000dcf8:	00c00044 	movi	r3,1
1000dcfc:	1887c83a 	sub	r3,r3,r2
1000dd00:	01000e04 	movi	r4,56
1000dd04:	20c1530e 	bge	r4,r3,1000e254 <__divdf3+0x86c>
1000dd08:	9900004c 	andi	r4,r19,1
1000dd0c:	0005883a 	mov	r2,zero
1000dd10:	0021883a 	mov	r16,zero
1000dd14:	002b883a 	mov	r21,zero
1000dd18:	003f9206 	br	1000db64 <__alt_data_end+0xf800db64>
1000dd1c:	8c012e36 	bltu	r17,r16,1000e1d8 <__divdf3+0x7f0>
1000dd20:	84412c26 	beq	r16,r17,1000e1d4 <__divdf3+0x7ec>
1000dd24:	a82f883a 	mov	r23,r21
1000dd28:	18ffffc4 	addi	r3,r3,-1
1000dd2c:	002b883a 	mov	r21,zero
1000dd30:	a004d63a 	srli	r2,r20,24
1000dd34:	8822923a 	slli	r17,r17,8
1000dd38:	a028923a 	slli	r20,r20,8
1000dd3c:	8009883a 	mov	r4,r16
1000dd40:	88acb03a 	or	r22,r17,r2
1000dd44:	dd000015 	stw	r20,0(sp)
1000dd48:	b028d43a 	srli	r20,r22,16
1000dd4c:	d8c00215 	stw	r3,8(sp)
1000dd50:	b4bfffcc 	andi	r18,r22,65535
1000dd54:	a00b883a 	mov	r5,r20
1000dd58:	00016a00 	call	100016a0 <__udivsi3>
1000dd5c:	100b883a 	mov	r5,r2
1000dd60:	9009883a 	mov	r4,r18
1000dd64:	1023883a 	mov	r17,r2
1000dd68:	000175c0 	call	1000175c <__mulsi3>
1000dd6c:	8009883a 	mov	r4,r16
1000dd70:	a00b883a 	mov	r5,r20
1000dd74:	1039883a 	mov	fp,r2
1000dd78:	00017040 	call	10001704 <__umodsi3>
1000dd7c:	1004943a 	slli	r2,r2,16
1000dd80:	b808d43a 	srli	r4,r23,16
1000dd84:	d8c00217 	ldw	r3,8(sp)
1000dd88:	2084b03a 	or	r2,r4,r2
1000dd8c:	1700062e 	bgeu	r2,fp,1000dda8 <__divdf3+0x3c0>
1000dd90:	1585883a 	add	r2,r2,r22
1000dd94:	893fffc4 	addi	r4,r17,-1
1000dd98:	15811d36 	bltu	r2,r22,1000e210 <__divdf3+0x828>
1000dd9c:	17011c2e 	bgeu	r2,fp,1000e210 <__divdf3+0x828>
1000dda0:	8c7fff84 	addi	r17,r17,-2
1000dda4:	1585883a 	add	r2,r2,r22
1000dda8:	1739c83a 	sub	fp,r2,fp
1000ddac:	a00b883a 	mov	r5,r20
1000ddb0:	e009883a 	mov	r4,fp
1000ddb4:	d8c00215 	stw	r3,8(sp)
1000ddb8:	00016a00 	call	100016a0 <__udivsi3>
1000ddbc:	100b883a 	mov	r5,r2
1000ddc0:	9009883a 	mov	r4,r18
1000ddc4:	1021883a 	mov	r16,r2
1000ddc8:	000175c0 	call	1000175c <__mulsi3>
1000ddcc:	a00b883a 	mov	r5,r20
1000ddd0:	e009883a 	mov	r4,fp
1000ddd4:	d8800415 	stw	r2,16(sp)
1000ddd8:	00017040 	call	10001704 <__umodsi3>
1000dddc:	1004943a 	slli	r2,r2,16
1000dde0:	da000417 	ldw	r8,16(sp)
1000dde4:	bdffffcc 	andi	r23,r23,65535
1000dde8:	b884b03a 	or	r2,r23,r2
1000ddec:	d8c00217 	ldw	r3,8(sp)
1000ddf0:	1200062e 	bgeu	r2,r8,1000de0c <__divdf3+0x424>
1000ddf4:	1585883a 	add	r2,r2,r22
1000ddf8:	813fffc4 	addi	r4,r16,-1
1000ddfc:	15810236 	bltu	r2,r22,1000e208 <__divdf3+0x820>
1000de00:	1201012e 	bgeu	r2,r8,1000e208 <__divdf3+0x820>
1000de04:	843fff84 	addi	r16,r16,-2
1000de08:	1585883a 	add	r2,r2,r22
1000de0c:	8822943a 	slli	r17,r17,16
1000de10:	d9800017 	ldw	r6,0(sp)
1000de14:	1211c83a 	sub	r8,r2,r8
1000de18:	8c22b03a 	or	r17,r17,r16
1000de1c:	373fffcc 	andi	fp,r6,65535
1000de20:	8abfffcc 	andi	r10,r17,65535
1000de24:	8820d43a 	srli	r16,r17,16
1000de28:	5009883a 	mov	r4,r10
1000de2c:	e00b883a 	mov	r5,fp
1000de30:	302ed43a 	srli	r23,r6,16
1000de34:	d8c00215 	stw	r3,8(sp)
1000de38:	da000415 	stw	r8,16(sp)
1000de3c:	da800115 	stw	r10,4(sp)
1000de40:	000175c0 	call	1000175c <__mulsi3>
1000de44:	800b883a 	mov	r5,r16
1000de48:	e009883a 	mov	r4,fp
1000de4c:	d8800515 	stw	r2,20(sp)
1000de50:	000175c0 	call	1000175c <__mulsi3>
1000de54:	8009883a 	mov	r4,r16
1000de58:	b80b883a 	mov	r5,r23
1000de5c:	d8800315 	stw	r2,12(sp)
1000de60:	000175c0 	call	1000175c <__mulsi3>
1000de64:	da800117 	ldw	r10,4(sp)
1000de68:	b80b883a 	mov	r5,r23
1000de6c:	1021883a 	mov	r16,r2
1000de70:	5009883a 	mov	r4,r10
1000de74:	000175c0 	call	1000175c <__mulsi3>
1000de78:	d9c00517 	ldw	r7,20(sp)
1000de7c:	da400317 	ldw	r9,12(sp)
1000de80:	d8c00217 	ldw	r3,8(sp)
1000de84:	3808d43a 	srli	r4,r7,16
1000de88:	1245883a 	add	r2,r2,r9
1000de8c:	da000417 	ldw	r8,16(sp)
1000de90:	2085883a 	add	r2,r4,r2
1000de94:	1240022e 	bgeu	r2,r9,1000dea0 <__divdf3+0x4b8>
1000de98:	01000074 	movhi	r4,1
1000de9c:	8121883a 	add	r16,r16,r4
1000dea0:	1008d43a 	srli	r4,r2,16
1000dea4:	1004943a 	slli	r2,r2,16
1000dea8:	39ffffcc 	andi	r7,r7,65535
1000deac:	2409883a 	add	r4,r4,r16
1000deb0:	11c5883a 	add	r2,r2,r7
1000deb4:	4100bb36 	bltu	r8,r4,1000e1a4 <__divdf3+0x7bc>
1000deb8:	4100d726 	beq	r8,r4,1000e218 <__divdf3+0x830>
1000debc:	4109c83a 	sub	r4,r8,r4
1000dec0:	a8a1c83a 	sub	r16,r21,r2
1000dec4:	ac2b803a 	cmpltu	r21,r21,r16
1000dec8:	256bc83a 	sub	r21,r4,r21
1000decc:	b540d926 	beq	r22,r21,1000e234 <__divdf3+0x84c>
1000ded0:	a00b883a 	mov	r5,r20
1000ded4:	a809883a 	mov	r4,r21
1000ded8:	d8c00215 	stw	r3,8(sp)
1000dedc:	00016a00 	call	100016a0 <__udivsi3>
1000dee0:	100b883a 	mov	r5,r2
1000dee4:	9009883a 	mov	r4,r18
1000dee8:	d8800515 	stw	r2,20(sp)
1000deec:	000175c0 	call	1000175c <__mulsi3>
1000def0:	a809883a 	mov	r4,r21
1000def4:	a00b883a 	mov	r5,r20
1000def8:	d8800415 	stw	r2,16(sp)
1000defc:	00017040 	call	10001704 <__umodsi3>
1000df00:	1004943a 	slli	r2,r2,16
1000df04:	8008d43a 	srli	r4,r16,16
1000df08:	da000417 	ldw	r8,16(sp)
1000df0c:	d8c00217 	ldw	r3,8(sp)
1000df10:	2084b03a 	or	r2,r4,r2
1000df14:	d9c00517 	ldw	r7,20(sp)
1000df18:	1200062e 	bgeu	r2,r8,1000df34 <__divdf3+0x54c>
1000df1c:	1585883a 	add	r2,r2,r22
1000df20:	393fffc4 	addi	r4,r7,-1
1000df24:	1580c536 	bltu	r2,r22,1000e23c <__divdf3+0x854>
1000df28:	1200c42e 	bgeu	r2,r8,1000e23c <__divdf3+0x854>
1000df2c:	39ffff84 	addi	r7,r7,-2
1000df30:	1585883a 	add	r2,r2,r22
1000df34:	122bc83a 	sub	r21,r2,r8
1000df38:	a00b883a 	mov	r5,r20
1000df3c:	a809883a 	mov	r4,r21
1000df40:	d8c00215 	stw	r3,8(sp)
1000df44:	d9c00515 	stw	r7,20(sp)
1000df48:	00016a00 	call	100016a0 <__udivsi3>
1000df4c:	9009883a 	mov	r4,r18
1000df50:	100b883a 	mov	r5,r2
1000df54:	d8800415 	stw	r2,16(sp)
1000df58:	000175c0 	call	1000175c <__mulsi3>
1000df5c:	a809883a 	mov	r4,r21
1000df60:	a00b883a 	mov	r5,r20
1000df64:	1025883a 	mov	r18,r2
1000df68:	00017040 	call	10001704 <__umodsi3>
1000df6c:	1004943a 	slli	r2,r2,16
1000df70:	813fffcc 	andi	r4,r16,65535
1000df74:	d8c00217 	ldw	r3,8(sp)
1000df78:	20a0b03a 	or	r16,r4,r2
1000df7c:	d9c00517 	ldw	r7,20(sp)
1000df80:	da000417 	ldw	r8,16(sp)
1000df84:	8480062e 	bgeu	r16,r18,1000dfa0 <__divdf3+0x5b8>
1000df88:	85a1883a 	add	r16,r16,r22
1000df8c:	40bfffc4 	addi	r2,r8,-1
1000df90:	8580ac36 	bltu	r16,r22,1000e244 <__divdf3+0x85c>
1000df94:	8480ab2e 	bgeu	r16,r18,1000e244 <__divdf3+0x85c>
1000df98:	423fff84 	addi	r8,r8,-2
1000df9c:	85a1883a 	add	r16,r16,r22
1000dfa0:	3804943a 	slli	r2,r7,16
1000dfa4:	84a1c83a 	sub	r16,r16,r18
1000dfa8:	e009883a 	mov	r4,fp
1000dfac:	1228b03a 	or	r20,r2,r8
1000dfb0:	a1ffffcc 	andi	r7,r20,65535
1000dfb4:	a024d43a 	srli	r18,r20,16
1000dfb8:	380b883a 	mov	r5,r7
1000dfbc:	d8c00215 	stw	r3,8(sp)
1000dfc0:	d9c00515 	stw	r7,20(sp)
1000dfc4:	000175c0 	call	1000175c <__mulsi3>
1000dfc8:	900b883a 	mov	r5,r18
1000dfcc:	e009883a 	mov	r4,fp
1000dfd0:	102b883a 	mov	r21,r2
1000dfd4:	000175c0 	call	1000175c <__mulsi3>
1000dfd8:	900b883a 	mov	r5,r18
1000dfdc:	b809883a 	mov	r4,r23
1000dfe0:	1039883a 	mov	fp,r2
1000dfe4:	000175c0 	call	1000175c <__mulsi3>
1000dfe8:	d9c00517 	ldw	r7,20(sp)
1000dfec:	b80b883a 	mov	r5,r23
1000dff0:	1025883a 	mov	r18,r2
1000dff4:	3809883a 	mov	r4,r7
1000dff8:	000175c0 	call	1000175c <__mulsi3>
1000dffc:	a808d43a 	srli	r4,r21,16
1000e000:	1705883a 	add	r2,r2,fp
1000e004:	d8c00217 	ldw	r3,8(sp)
1000e008:	2085883a 	add	r2,r4,r2
1000e00c:	1700022e 	bgeu	r2,fp,1000e018 <__divdf3+0x630>
1000e010:	01000074 	movhi	r4,1
1000e014:	9125883a 	add	r18,r18,r4
1000e018:	1008d43a 	srli	r4,r2,16
1000e01c:	1004943a 	slli	r2,r2,16
1000e020:	ad7fffcc 	andi	r21,r21,65535
1000e024:	2489883a 	add	r4,r4,r18
1000e028:	1545883a 	add	r2,r2,r21
1000e02c:	81003836 	bltu	r16,r4,1000e110 <__divdf3+0x728>
1000e030:	81003626 	beq	r16,r4,1000e10c <__divdf3+0x724>
1000e034:	a5000054 	ori	r20,r20,1
1000e038:	1880ffc4 	addi	r2,r3,1023
1000e03c:	00bf2e0e 	bge	zero,r2,1000dcf8 <__alt_data_end+0xf800dcf8>
1000e040:	a10001cc 	andi	r4,r20,7
1000e044:	20000726 	beq	r4,zero,1000e064 <__divdf3+0x67c>
1000e048:	a10003cc 	andi	r4,r20,15
1000e04c:	01400104 	movi	r5,4
1000e050:	21400426 	beq	r4,r5,1000e064 <__divdf3+0x67c>
1000e054:	a149883a 	add	r4,r20,r5
1000e058:	2529803a 	cmpltu	r20,r4,r20
1000e05c:	8d23883a 	add	r17,r17,r20
1000e060:	2029883a 	mov	r20,r4
1000e064:	8900402c 	andhi	r4,r17,256
1000e068:	20000426 	beq	r4,zero,1000e07c <__divdf3+0x694>
1000e06c:	18810004 	addi	r2,r3,1024
1000e070:	00ffc034 	movhi	r3,65280
1000e074:	18ffffc4 	addi	r3,r3,-1
1000e078:	88e2703a 	and	r17,r17,r3
1000e07c:	00c1ff84 	movi	r3,2046
1000e080:	18beb416 	blt	r3,r2,1000db54 <__alt_data_end+0xf800db54>
1000e084:	a028d0fa 	srli	r20,r20,3
1000e088:	882a977a 	slli	r21,r17,29
1000e08c:	8820927a 	slli	r16,r17,9
1000e090:	1081ffcc 	andi	r2,r2,2047
1000e094:	ad2ab03a 	or	r21,r21,r20
1000e098:	8020d33a 	srli	r16,r16,12
1000e09c:	9900004c 	andi	r4,r19,1
1000e0a0:	003eb006 	br	1000db64 <__alt_data_end+0xf800db64>
1000e0a4:	8080022c 	andhi	r2,r16,8
1000e0a8:	10001226 	beq	r2,zero,1000e0f4 <__divdf3+0x70c>
1000e0ac:	8880022c 	andhi	r2,r17,8
1000e0b0:	1000101e 	bne	r2,zero,1000e0f4 <__divdf3+0x70c>
1000e0b4:	00800434 	movhi	r2,16
1000e0b8:	8c000234 	orhi	r16,r17,8
1000e0bc:	10bfffc4 	addi	r2,r2,-1
1000e0c0:	b809883a 	mov	r4,r23
1000e0c4:	80a0703a 	and	r16,r16,r2
1000e0c8:	a02b883a 	mov	r21,r20
1000e0cc:	003f0806 	br	1000dcf0 <__alt_data_end+0xf800dcf0>
1000e0d0:	008000c4 	movi	r2,3
1000e0d4:	3880b126 	beq	r7,r2,1000e39c <__divdf3+0x9b4>
1000e0d8:	00800044 	movi	r2,1
1000e0dc:	38805b1e 	bne	r7,r2,1000e24c <__divdf3+0x864>
1000e0e0:	e009883a 	mov	r4,fp
1000e0e4:	0005883a 	mov	r2,zero
1000e0e8:	0021883a 	mov	r16,zero
1000e0ec:	002b883a 	mov	r21,zero
1000e0f0:	003e9c06 	br	1000db64 <__alt_data_end+0xf800db64>
1000e0f4:	00800434 	movhi	r2,16
1000e0f8:	84000234 	orhi	r16,r16,8
1000e0fc:	10bfffc4 	addi	r2,r2,-1
1000e100:	b009883a 	mov	r4,r22
1000e104:	80a0703a 	and	r16,r16,r2
1000e108:	003ef906 	br	1000dcf0 <__alt_data_end+0xf800dcf0>
1000e10c:	103fca26 	beq	r2,zero,1000e038 <__alt_data_end+0xf800e038>
1000e110:	b421883a 	add	r16,r22,r16
1000e114:	a17fffc4 	addi	r5,r20,-1
1000e118:	8580422e 	bgeu	r16,r22,1000e224 <__divdf3+0x83c>
1000e11c:	2829883a 	mov	r20,r5
1000e120:	813fc41e 	bne	r16,r4,1000e034 <__alt_data_end+0xf800e034>
1000e124:	d9800017 	ldw	r6,0(sp)
1000e128:	30bfc21e 	bne	r6,r2,1000e034 <__alt_data_end+0xf800e034>
1000e12c:	003fc206 	br	1000e038 <__alt_data_end+0xf800e038>
1000e130:	143ff604 	addi	r16,r2,-40
1000e134:	8c20983a 	sll	r16,r17,r16
1000e138:	002b883a 	mov	r21,zero
1000e13c:	003eb406 	br	1000dc10 <__alt_data_end+0xf800dc10>
1000e140:	d9800215 	stw	r6,8(sp)
1000e144:	d9c00515 	stw	r7,20(sp)
1000e148:	da000415 	stw	r8,16(sp)
1000e14c:	000f97c0 	call	1000f97c <__clzsi2>
1000e150:	10800804 	addi	r2,r2,32
1000e154:	da000417 	ldw	r8,16(sp)
1000e158:	d9c00517 	ldw	r7,20(sp)
1000e15c:	d9800217 	ldw	r6,8(sp)
1000e160:	003ea106 	br	1000dbe8 <__alt_data_end+0xf800dbe8>
1000e164:	147ff604 	addi	r17,r2,-40
1000e168:	3462983a 	sll	r17,r6,r17
1000e16c:	0029883a 	mov	r20,zero
1000e170:	003ec906 	br	1000dc98 <__alt_data_end+0xf800dc98>
1000e174:	3009883a 	mov	r4,r6
1000e178:	d9400115 	stw	r5,4(sp)
1000e17c:	d9800215 	stw	r6,8(sp)
1000e180:	da000415 	stw	r8,16(sp)
1000e184:	da400315 	stw	r9,12(sp)
1000e188:	000f97c0 	call	1000f97c <__clzsi2>
1000e18c:	10800804 	addi	r2,r2,32
1000e190:	da400317 	ldw	r9,12(sp)
1000e194:	da000417 	ldw	r8,16(sp)
1000e198:	d9800217 	ldw	r6,8(sp)
1000e19c:	d9400117 	ldw	r5,4(sp)
1000e1a0:	003eb306 	br	1000dc70 <__alt_data_end+0xf800dc70>
1000e1a4:	d9800017 	ldw	r6,0(sp)
1000e1a8:	a9ab883a 	add	r21,r21,r6
1000e1ac:	a98b803a 	cmpltu	r5,r21,r6
1000e1b0:	2d8b883a 	add	r5,r5,r22
1000e1b4:	2a11883a 	add	r8,r5,r8
1000e1b8:	897fffc4 	addi	r5,r17,-1
1000e1bc:	b2000c2e 	bgeu	r22,r8,1000e1f0 <__divdf3+0x808>
1000e1c0:	41003f36 	bltu	r8,r4,1000e2c0 <__divdf3+0x8d8>
1000e1c4:	22006c26 	beq	r4,r8,1000e378 <__divdf3+0x990>
1000e1c8:	4109c83a 	sub	r4,r8,r4
1000e1cc:	2823883a 	mov	r17,r5
1000e1d0:	003f3b06 	br	1000dec0 <__alt_data_end+0xf800dec0>
1000e1d4:	ad3ed336 	bltu	r21,r20,1000dd24 <__alt_data_end+0xf800dd24>
1000e1d8:	a804d07a 	srli	r2,r21,1
1000e1dc:	802e97fa 	slli	r23,r16,31
1000e1e0:	a82a97fa 	slli	r21,r21,31
1000e1e4:	8020d07a 	srli	r16,r16,1
1000e1e8:	b8aeb03a 	or	r23,r23,r2
1000e1ec:	003ed006 	br	1000dd30 <__alt_data_end+0xf800dd30>
1000e1f0:	b23ff51e 	bne	r22,r8,1000e1c8 <__alt_data_end+0xf800e1c8>
1000e1f4:	d9800017 	ldw	r6,0(sp)
1000e1f8:	a9bff12e 	bgeu	r21,r6,1000e1c0 <__alt_data_end+0xf800e1c0>
1000e1fc:	b109c83a 	sub	r4,r22,r4
1000e200:	2823883a 	mov	r17,r5
1000e204:	003f2e06 	br	1000dec0 <__alt_data_end+0xf800dec0>
1000e208:	2021883a 	mov	r16,r4
1000e20c:	003eff06 	br	1000de0c <__alt_data_end+0xf800de0c>
1000e210:	2023883a 	mov	r17,r4
1000e214:	003ee406 	br	1000dda8 <__alt_data_end+0xf800dda8>
1000e218:	a8bfe236 	bltu	r21,r2,1000e1a4 <__alt_data_end+0xf800e1a4>
1000e21c:	0009883a 	mov	r4,zero
1000e220:	003f2706 	br	1000dec0 <__alt_data_end+0xf800dec0>
1000e224:	81002d36 	bltu	r16,r4,1000e2dc <__divdf3+0x8f4>
1000e228:	24005626 	beq	r4,r16,1000e384 <__divdf3+0x99c>
1000e22c:	2829883a 	mov	r20,r5
1000e230:	003f8006 	br	1000e034 <__alt_data_end+0xf800e034>
1000e234:	053fffc4 	movi	r20,-1
1000e238:	003f7f06 	br	1000e038 <__alt_data_end+0xf800e038>
1000e23c:	200f883a 	mov	r7,r4
1000e240:	003f3c06 	br	1000df34 <__alt_data_end+0xf800df34>
1000e244:	1011883a 	mov	r8,r2
1000e248:	003f5506 	br	1000dfa0 <__alt_data_end+0xf800dfa0>
1000e24c:	e027883a 	mov	r19,fp
1000e250:	003f7906 	br	1000e038 <__alt_data_end+0xf800e038>
1000e254:	010007c4 	movi	r4,31
1000e258:	20c02816 	blt	r4,r3,1000e2fc <__divdf3+0x914>
1000e25c:	00800804 	movi	r2,32
1000e260:	10c5c83a 	sub	r2,r2,r3
1000e264:	888a983a 	sll	r5,r17,r2
1000e268:	a0c8d83a 	srl	r4,r20,r3
1000e26c:	a084983a 	sll	r2,r20,r2
1000e270:	88e2d83a 	srl	r17,r17,r3
1000e274:	2906b03a 	or	r3,r5,r4
1000e278:	1004c03a 	cmpne	r2,r2,zero
1000e27c:	1886b03a 	or	r3,r3,r2
1000e280:	188001cc 	andi	r2,r3,7
1000e284:	10000726 	beq	r2,zero,1000e2a4 <__divdf3+0x8bc>
1000e288:	188003cc 	andi	r2,r3,15
1000e28c:	01000104 	movi	r4,4
1000e290:	11000426 	beq	r2,r4,1000e2a4 <__divdf3+0x8bc>
1000e294:	1805883a 	mov	r2,r3
1000e298:	10c00104 	addi	r3,r2,4
1000e29c:	1885803a 	cmpltu	r2,r3,r2
1000e2a0:	88a3883a 	add	r17,r17,r2
1000e2a4:	8880202c 	andhi	r2,r17,128
1000e2a8:	10002926 	beq	r2,zero,1000e350 <__divdf3+0x968>
1000e2ac:	9900004c 	andi	r4,r19,1
1000e2b0:	00800044 	movi	r2,1
1000e2b4:	0021883a 	mov	r16,zero
1000e2b8:	002b883a 	mov	r21,zero
1000e2bc:	003e2906 	br	1000db64 <__alt_data_end+0xf800db64>
1000e2c0:	d9800017 	ldw	r6,0(sp)
1000e2c4:	8c7fff84 	addi	r17,r17,-2
1000e2c8:	a9ab883a 	add	r21,r21,r6
1000e2cc:	a98b803a 	cmpltu	r5,r21,r6
1000e2d0:	2d8b883a 	add	r5,r5,r22
1000e2d4:	2a11883a 	add	r8,r5,r8
1000e2d8:	003ef806 	br	1000debc <__alt_data_end+0xf800debc>
1000e2dc:	d9800017 	ldw	r6,0(sp)
1000e2e0:	318f883a 	add	r7,r6,r6
1000e2e4:	398b803a 	cmpltu	r5,r7,r6
1000e2e8:	2d8d883a 	add	r6,r5,r22
1000e2ec:	81a1883a 	add	r16,r16,r6
1000e2f0:	a17fff84 	addi	r5,r20,-2
1000e2f4:	d9c00015 	stw	r7,0(sp)
1000e2f8:	003f8806 	br	1000e11c <__alt_data_end+0xf800e11c>
1000e2fc:	013ff844 	movi	r4,-31
1000e300:	2085c83a 	sub	r2,r4,r2
1000e304:	8888d83a 	srl	r4,r17,r2
1000e308:	00800804 	movi	r2,32
1000e30c:	18802126 	beq	r3,r2,1000e394 <__divdf3+0x9ac>
1000e310:	04001004 	movi	r16,64
1000e314:	80c7c83a 	sub	r3,r16,r3
1000e318:	88e0983a 	sll	r16,r17,r3
1000e31c:	8504b03a 	or	r2,r16,r20
1000e320:	1004c03a 	cmpne	r2,r2,zero
1000e324:	2084b03a 	or	r2,r4,r2
1000e328:	144001cc 	andi	r17,r2,7
1000e32c:	88000d1e 	bne	r17,zero,1000e364 <__divdf3+0x97c>
1000e330:	0021883a 	mov	r16,zero
1000e334:	102ad0fa 	srli	r21,r2,3
1000e338:	9900004c 	andi	r4,r19,1
1000e33c:	0005883a 	mov	r2,zero
1000e340:	ac6ab03a 	or	r21,r21,r17
1000e344:	003e0706 	br	1000db64 <__alt_data_end+0xf800db64>
1000e348:	1007883a 	mov	r3,r2
1000e34c:	0023883a 	mov	r17,zero
1000e350:	8820927a 	slli	r16,r17,9
1000e354:	1805883a 	mov	r2,r3
1000e358:	8822977a 	slli	r17,r17,29
1000e35c:	8020d33a 	srli	r16,r16,12
1000e360:	003ff406 	br	1000e334 <__alt_data_end+0xf800e334>
1000e364:	10c003cc 	andi	r3,r2,15
1000e368:	01000104 	movi	r4,4
1000e36c:	193ff626 	beq	r3,r4,1000e348 <__alt_data_end+0xf800e348>
1000e370:	0023883a 	mov	r17,zero
1000e374:	003fc806 	br	1000e298 <__alt_data_end+0xf800e298>
1000e378:	a8bfd136 	bltu	r21,r2,1000e2c0 <__alt_data_end+0xf800e2c0>
1000e37c:	2823883a 	mov	r17,r5
1000e380:	003fa606 	br	1000e21c <__alt_data_end+0xf800e21c>
1000e384:	d9800017 	ldw	r6,0(sp)
1000e388:	30bfd436 	bltu	r6,r2,1000e2dc <__alt_data_end+0xf800e2dc>
1000e38c:	2829883a 	mov	r20,r5
1000e390:	003f6406 	br	1000e124 <__alt_data_end+0xf800e124>
1000e394:	0021883a 	mov	r16,zero
1000e398:	003fe006 	br	1000e31c <__alt_data_end+0xf800e31c>
1000e39c:	00800434 	movhi	r2,16
1000e3a0:	8c000234 	orhi	r16,r17,8
1000e3a4:	10bfffc4 	addi	r2,r2,-1
1000e3a8:	e009883a 	mov	r4,fp
1000e3ac:	80a0703a 	and	r16,r16,r2
1000e3b0:	a02b883a 	mov	r21,r20
1000e3b4:	003e4e06 	br	1000dcf0 <__alt_data_end+0xf800dcf0>

1000e3b8 <__eqdf2>:
1000e3b8:	2804d53a 	srli	r2,r5,20
1000e3bc:	3806d53a 	srli	r3,r7,20
1000e3c0:	02000434 	movhi	r8,16
1000e3c4:	423fffc4 	addi	r8,r8,-1
1000e3c8:	1081ffcc 	andi	r2,r2,2047
1000e3cc:	0281ffc4 	movi	r10,2047
1000e3d0:	2a12703a 	and	r9,r5,r8
1000e3d4:	18c1ffcc 	andi	r3,r3,2047
1000e3d8:	3a10703a 	and	r8,r7,r8
1000e3dc:	280ad7fa 	srli	r5,r5,31
1000e3e0:	380ed7fa 	srli	r7,r7,31
1000e3e4:	12801026 	beq	r2,r10,1000e428 <__eqdf2+0x70>
1000e3e8:	0281ffc4 	movi	r10,2047
1000e3ec:	1a800a26 	beq	r3,r10,1000e418 <__eqdf2+0x60>
1000e3f0:	10c00226 	beq	r2,r3,1000e3fc <__eqdf2+0x44>
1000e3f4:	00800044 	movi	r2,1
1000e3f8:	f800283a 	ret
1000e3fc:	4a3ffd1e 	bne	r9,r8,1000e3f4 <__alt_data_end+0xf800e3f4>
1000e400:	21bffc1e 	bne	r4,r6,1000e3f4 <__alt_data_end+0xf800e3f4>
1000e404:	29c00c26 	beq	r5,r7,1000e438 <__eqdf2+0x80>
1000e408:	103ffa1e 	bne	r2,zero,1000e3f4 <__alt_data_end+0xf800e3f4>
1000e40c:	2244b03a 	or	r2,r4,r9
1000e410:	1004c03a 	cmpne	r2,r2,zero
1000e414:	f800283a 	ret
1000e418:	3214b03a 	or	r10,r6,r8
1000e41c:	503ff426 	beq	r10,zero,1000e3f0 <__alt_data_end+0xf800e3f0>
1000e420:	00800044 	movi	r2,1
1000e424:	f800283a 	ret
1000e428:	2254b03a 	or	r10,r4,r9
1000e42c:	503fee26 	beq	r10,zero,1000e3e8 <__alt_data_end+0xf800e3e8>
1000e430:	00800044 	movi	r2,1
1000e434:	f800283a 	ret
1000e438:	0005883a 	mov	r2,zero
1000e43c:	f800283a 	ret

1000e440 <__gedf2>:
1000e440:	2804d53a 	srli	r2,r5,20
1000e444:	3806d53a 	srli	r3,r7,20
1000e448:	02000434 	movhi	r8,16
1000e44c:	423fffc4 	addi	r8,r8,-1
1000e450:	1081ffcc 	andi	r2,r2,2047
1000e454:	0241ffc4 	movi	r9,2047
1000e458:	2a14703a 	and	r10,r5,r8
1000e45c:	18c1ffcc 	andi	r3,r3,2047
1000e460:	3a10703a 	and	r8,r7,r8
1000e464:	280ad7fa 	srli	r5,r5,31
1000e468:	380ed7fa 	srli	r7,r7,31
1000e46c:	12401d26 	beq	r2,r9,1000e4e4 <__gedf2+0xa4>
1000e470:	0241ffc4 	movi	r9,2047
1000e474:	1a401226 	beq	r3,r9,1000e4c0 <__gedf2+0x80>
1000e478:	1000081e 	bne	r2,zero,1000e49c <__gedf2+0x5c>
1000e47c:	2296b03a 	or	r11,r4,r10
1000e480:	5813003a 	cmpeq	r9,r11,zero
1000e484:	1800091e 	bne	r3,zero,1000e4ac <__gedf2+0x6c>
1000e488:	3218b03a 	or	r12,r6,r8
1000e48c:	6000071e 	bne	r12,zero,1000e4ac <__gedf2+0x6c>
1000e490:	0005883a 	mov	r2,zero
1000e494:	5800101e 	bne	r11,zero,1000e4d8 <__gedf2+0x98>
1000e498:	f800283a 	ret
1000e49c:	18000c1e 	bne	r3,zero,1000e4d0 <__gedf2+0x90>
1000e4a0:	3212b03a 	or	r9,r6,r8
1000e4a4:	48000c26 	beq	r9,zero,1000e4d8 <__gedf2+0x98>
1000e4a8:	0013883a 	mov	r9,zero
1000e4ac:	39c03fcc 	andi	r7,r7,255
1000e4b0:	48000826 	beq	r9,zero,1000e4d4 <__gedf2+0x94>
1000e4b4:	38000926 	beq	r7,zero,1000e4dc <__gedf2+0x9c>
1000e4b8:	00800044 	movi	r2,1
1000e4bc:	f800283a 	ret
1000e4c0:	3212b03a 	or	r9,r6,r8
1000e4c4:	483fec26 	beq	r9,zero,1000e478 <__alt_data_end+0xf800e478>
1000e4c8:	00bfff84 	movi	r2,-2
1000e4cc:	f800283a 	ret
1000e4d0:	39c03fcc 	andi	r7,r7,255
1000e4d4:	29c00626 	beq	r5,r7,1000e4f0 <__gedf2+0xb0>
1000e4d8:	283ff726 	beq	r5,zero,1000e4b8 <__alt_data_end+0xf800e4b8>
1000e4dc:	00bfffc4 	movi	r2,-1
1000e4e0:	f800283a 	ret
1000e4e4:	2292b03a 	or	r9,r4,r10
1000e4e8:	483fe126 	beq	r9,zero,1000e470 <__alt_data_end+0xf800e470>
1000e4ec:	003ff606 	br	1000e4c8 <__alt_data_end+0xf800e4c8>
1000e4f0:	18bff916 	blt	r3,r2,1000e4d8 <__alt_data_end+0xf800e4d8>
1000e4f4:	10c00316 	blt	r2,r3,1000e504 <__gedf2+0xc4>
1000e4f8:	42bff736 	bltu	r8,r10,1000e4d8 <__alt_data_end+0xf800e4d8>
1000e4fc:	52000326 	beq	r10,r8,1000e50c <__gedf2+0xcc>
1000e500:	5200042e 	bgeu	r10,r8,1000e514 <__gedf2+0xd4>
1000e504:	283fec1e 	bne	r5,zero,1000e4b8 <__alt_data_end+0xf800e4b8>
1000e508:	003ff406 	br	1000e4dc <__alt_data_end+0xf800e4dc>
1000e50c:	313ff236 	bltu	r6,r4,1000e4d8 <__alt_data_end+0xf800e4d8>
1000e510:	21bffc36 	bltu	r4,r6,1000e504 <__alt_data_end+0xf800e504>
1000e514:	0005883a 	mov	r2,zero
1000e518:	f800283a 	ret

1000e51c <__ledf2>:
1000e51c:	2804d53a 	srli	r2,r5,20
1000e520:	3810d53a 	srli	r8,r7,20
1000e524:	00c00434 	movhi	r3,16
1000e528:	18ffffc4 	addi	r3,r3,-1
1000e52c:	1081ffcc 	andi	r2,r2,2047
1000e530:	0241ffc4 	movi	r9,2047
1000e534:	28d4703a 	and	r10,r5,r3
1000e538:	4201ffcc 	andi	r8,r8,2047
1000e53c:	38c6703a 	and	r3,r7,r3
1000e540:	280ad7fa 	srli	r5,r5,31
1000e544:	380ed7fa 	srli	r7,r7,31
1000e548:	12401f26 	beq	r2,r9,1000e5c8 <__ledf2+0xac>
1000e54c:	0241ffc4 	movi	r9,2047
1000e550:	42401426 	beq	r8,r9,1000e5a4 <__ledf2+0x88>
1000e554:	1000091e 	bne	r2,zero,1000e57c <__ledf2+0x60>
1000e558:	2296b03a 	or	r11,r4,r10
1000e55c:	5813003a 	cmpeq	r9,r11,zero
1000e560:	29403fcc 	andi	r5,r5,255
1000e564:	40000a1e 	bne	r8,zero,1000e590 <__ledf2+0x74>
1000e568:	30d8b03a 	or	r12,r6,r3
1000e56c:	6000081e 	bne	r12,zero,1000e590 <__ledf2+0x74>
1000e570:	0005883a 	mov	r2,zero
1000e574:	5800111e 	bne	r11,zero,1000e5bc <__ledf2+0xa0>
1000e578:	f800283a 	ret
1000e57c:	29403fcc 	andi	r5,r5,255
1000e580:	40000c1e 	bne	r8,zero,1000e5b4 <__ledf2+0x98>
1000e584:	30d2b03a 	or	r9,r6,r3
1000e588:	48000c26 	beq	r9,zero,1000e5bc <__ledf2+0xa0>
1000e58c:	0013883a 	mov	r9,zero
1000e590:	39c03fcc 	andi	r7,r7,255
1000e594:	48000826 	beq	r9,zero,1000e5b8 <__ledf2+0x9c>
1000e598:	38001126 	beq	r7,zero,1000e5e0 <__ledf2+0xc4>
1000e59c:	00800044 	movi	r2,1
1000e5a0:	f800283a 	ret
1000e5a4:	30d2b03a 	or	r9,r6,r3
1000e5a8:	483fea26 	beq	r9,zero,1000e554 <__alt_data_end+0xf800e554>
1000e5ac:	00800084 	movi	r2,2
1000e5b0:	f800283a 	ret
1000e5b4:	39c03fcc 	andi	r7,r7,255
1000e5b8:	39400726 	beq	r7,r5,1000e5d8 <__ledf2+0xbc>
1000e5bc:	2800081e 	bne	r5,zero,1000e5e0 <__ledf2+0xc4>
1000e5c0:	00800044 	movi	r2,1
1000e5c4:	f800283a 	ret
1000e5c8:	2292b03a 	or	r9,r4,r10
1000e5cc:	483fdf26 	beq	r9,zero,1000e54c <__alt_data_end+0xf800e54c>
1000e5d0:	00800084 	movi	r2,2
1000e5d4:	f800283a 	ret
1000e5d8:	4080030e 	bge	r8,r2,1000e5e8 <__ledf2+0xcc>
1000e5dc:	383fef26 	beq	r7,zero,1000e59c <__alt_data_end+0xf800e59c>
1000e5e0:	00bfffc4 	movi	r2,-1
1000e5e4:	f800283a 	ret
1000e5e8:	123feb16 	blt	r2,r8,1000e598 <__alt_data_end+0xf800e598>
1000e5ec:	1abff336 	bltu	r3,r10,1000e5bc <__alt_data_end+0xf800e5bc>
1000e5f0:	50c00326 	beq	r10,r3,1000e600 <__ledf2+0xe4>
1000e5f4:	50c0042e 	bgeu	r10,r3,1000e608 <__ledf2+0xec>
1000e5f8:	283fe81e 	bne	r5,zero,1000e59c <__alt_data_end+0xf800e59c>
1000e5fc:	003ff806 	br	1000e5e0 <__alt_data_end+0xf800e5e0>
1000e600:	313fee36 	bltu	r6,r4,1000e5bc <__alt_data_end+0xf800e5bc>
1000e604:	21bffc36 	bltu	r4,r6,1000e5f8 <__alt_data_end+0xf800e5f8>
1000e608:	0005883a 	mov	r2,zero
1000e60c:	f800283a 	ret

1000e610 <__muldf3>:
1000e610:	deffee04 	addi	sp,sp,-72
1000e614:	dd000c15 	stw	r20,48(sp)
1000e618:	2828d53a 	srli	r20,r5,20
1000e61c:	ddc00f15 	stw	r23,60(sp)
1000e620:	282ed7fa 	srli	r23,r5,31
1000e624:	dc000815 	stw	r16,32(sp)
1000e628:	04000434 	movhi	r16,16
1000e62c:	dcc00b15 	stw	r19,44(sp)
1000e630:	843fffc4 	addi	r16,r16,-1
1000e634:	dfc01115 	stw	ra,68(sp)
1000e638:	df001015 	stw	fp,64(sp)
1000e63c:	dd800e15 	stw	r22,56(sp)
1000e640:	dd400d15 	stw	r21,52(sp)
1000e644:	dc800a15 	stw	r18,40(sp)
1000e648:	dc400915 	stw	r17,36(sp)
1000e64c:	a501ffcc 	andi	r20,r20,2047
1000e650:	2c20703a 	and	r16,r5,r16
1000e654:	b827883a 	mov	r19,r23
1000e658:	ba403fcc 	andi	r9,r23,255
1000e65c:	a0006026 	beq	r20,zero,1000e7e0 <__muldf3+0x1d0>
1000e660:	0081ffc4 	movi	r2,2047
1000e664:	202d883a 	mov	r22,r4
1000e668:	a0803626 	beq	r20,r2,1000e744 <__muldf3+0x134>
1000e66c:	84000434 	orhi	r16,r16,16
1000e670:	200ad77a 	srli	r5,r4,29
1000e674:	800490fa 	slli	r2,r16,3
1000e678:	202c90fa 	slli	r22,r4,3
1000e67c:	a53f0044 	addi	r20,r20,-1023
1000e680:	28a0b03a 	or	r16,r5,r2
1000e684:	002b883a 	mov	r21,zero
1000e688:	000b883a 	mov	r5,zero
1000e68c:	3804d53a 	srli	r2,r7,20
1000e690:	3838d7fa 	srli	fp,r7,31
1000e694:	04400434 	movhi	r17,16
1000e698:	8c7fffc4 	addi	r17,r17,-1
1000e69c:	1081ffcc 	andi	r2,r2,2047
1000e6a0:	3025883a 	mov	r18,r6
1000e6a4:	3c62703a 	and	r17,r7,r17
1000e6a8:	e2803fcc 	andi	r10,fp,255
1000e6ac:	10006d26 	beq	r2,zero,1000e864 <__muldf3+0x254>
1000e6b0:	00c1ffc4 	movi	r3,2047
1000e6b4:	10c06526 	beq	r2,r3,1000e84c <__muldf3+0x23c>
1000e6b8:	8c400434 	orhi	r17,r17,16
1000e6bc:	300ed77a 	srli	r7,r6,29
1000e6c0:	880690fa 	slli	r3,r17,3
1000e6c4:	302490fa 	slli	r18,r6,3
1000e6c8:	10bf0044 	addi	r2,r2,-1023
1000e6cc:	38e2b03a 	or	r17,r7,r3
1000e6d0:	000f883a 	mov	r7,zero
1000e6d4:	a087883a 	add	r3,r20,r2
1000e6d8:	010003c4 	movi	r4,15
1000e6dc:	3d44b03a 	or	r2,r7,r21
1000e6e0:	e5ccf03a 	xor	r6,fp,r23
1000e6e4:	1a000044 	addi	r8,r3,1
1000e6e8:	20809b36 	bltu	r4,r2,1000e958 <__muldf3+0x348>
1000e6ec:	100490ba 	slli	r2,r2,2
1000e6f0:	01040074 	movhi	r4,4097
1000e6f4:	2139c104 	addi	r4,r4,-6396
1000e6f8:	1105883a 	add	r2,r2,r4
1000e6fc:	10800017 	ldw	r2,0(r2)
1000e700:	1000683a 	jmp	r2
1000e704:	1000e958 	cmpnei	zero,r2,933
1000e708:	1000e764 	muli	zero,r2,925
1000e70c:	1000e764 	muli	zero,r2,925
1000e710:	1000e760 	cmpeqi	zero,r2,925
1000e714:	1000e934 	orhi	zero,r2,932
1000e718:	1000e934 	orhi	zero,r2,932
1000e71c:	1000e91c 	xori	zero,r2,932
1000e720:	1000e760 	cmpeqi	zero,r2,925
1000e724:	1000e934 	orhi	zero,r2,932
1000e728:	1000e91c 	xori	zero,r2,932
1000e72c:	1000e934 	orhi	zero,r2,932
1000e730:	1000e760 	cmpeqi	zero,r2,925
1000e734:	1000e944 	addi	zero,r2,933
1000e738:	1000e944 	addi	zero,r2,933
1000e73c:	1000e944 	addi	zero,r2,933
1000e740:	1000eca4 	muli	zero,r2,946
1000e744:	2404b03a 	or	r2,r4,r16
1000e748:	1000711e 	bne	r2,zero,1000e910 <__muldf3+0x300>
1000e74c:	05400204 	movi	r21,8
1000e750:	0021883a 	mov	r16,zero
1000e754:	002d883a 	mov	r22,zero
1000e758:	01400084 	movi	r5,2
1000e75c:	003fcb06 	br	1000e68c <__alt_data_end+0xf800e68c>
1000e760:	500d883a 	mov	r6,r10
1000e764:	00800084 	movi	r2,2
1000e768:	38805926 	beq	r7,r2,1000e8d0 <__muldf3+0x2c0>
1000e76c:	008000c4 	movi	r2,3
1000e770:	3881bb26 	beq	r7,r2,1000ee60 <__muldf3+0x850>
1000e774:	00800044 	movi	r2,1
1000e778:	3881961e 	bne	r7,r2,1000edd4 <__muldf3+0x7c4>
1000e77c:	3027883a 	mov	r19,r6
1000e780:	0005883a 	mov	r2,zero
1000e784:	0021883a 	mov	r16,zero
1000e788:	002d883a 	mov	r22,zero
1000e78c:	1004953a 	slli	r2,r2,20
1000e790:	98c03fcc 	andi	r3,r19,255
1000e794:	04400434 	movhi	r17,16
1000e798:	8c7fffc4 	addi	r17,r17,-1
1000e79c:	180697fa 	slli	r3,r3,31
1000e7a0:	8460703a 	and	r16,r16,r17
1000e7a4:	80a0b03a 	or	r16,r16,r2
1000e7a8:	80c6b03a 	or	r3,r16,r3
1000e7ac:	b005883a 	mov	r2,r22
1000e7b0:	dfc01117 	ldw	ra,68(sp)
1000e7b4:	df001017 	ldw	fp,64(sp)
1000e7b8:	ddc00f17 	ldw	r23,60(sp)
1000e7bc:	dd800e17 	ldw	r22,56(sp)
1000e7c0:	dd400d17 	ldw	r21,52(sp)
1000e7c4:	dd000c17 	ldw	r20,48(sp)
1000e7c8:	dcc00b17 	ldw	r19,44(sp)
1000e7cc:	dc800a17 	ldw	r18,40(sp)
1000e7d0:	dc400917 	ldw	r17,36(sp)
1000e7d4:	dc000817 	ldw	r16,32(sp)
1000e7d8:	dec01204 	addi	sp,sp,72
1000e7dc:	f800283a 	ret
1000e7e0:	2404b03a 	or	r2,r4,r16
1000e7e4:	202b883a 	mov	r21,r4
1000e7e8:	10004426 	beq	r2,zero,1000e8fc <__muldf3+0x2ec>
1000e7ec:	80015126 	beq	r16,zero,1000ed34 <__muldf3+0x724>
1000e7f0:	8009883a 	mov	r4,r16
1000e7f4:	d9800715 	stw	r6,28(sp)
1000e7f8:	d9c00215 	stw	r7,8(sp)
1000e7fc:	da400415 	stw	r9,16(sp)
1000e800:	000f97c0 	call	1000f97c <__clzsi2>
1000e804:	d9800717 	ldw	r6,28(sp)
1000e808:	d9c00217 	ldw	r7,8(sp)
1000e80c:	da400417 	ldw	r9,16(sp)
1000e810:	113ffd44 	addi	r4,r2,-11
1000e814:	00c00704 	movi	r3,28
1000e818:	19014216 	blt	r3,r4,1000ed24 <__muldf3+0x714>
1000e81c:	00c00744 	movi	r3,29
1000e820:	15bffe04 	addi	r22,r2,-8
1000e824:	1907c83a 	sub	r3,r3,r4
1000e828:	85a0983a 	sll	r16,r16,r22
1000e82c:	a8c6d83a 	srl	r3,r21,r3
1000e830:	adac983a 	sll	r22,r21,r22
1000e834:	1c20b03a 	or	r16,r3,r16
1000e838:	1080fcc4 	addi	r2,r2,1011
1000e83c:	00a9c83a 	sub	r20,zero,r2
1000e840:	002b883a 	mov	r21,zero
1000e844:	000b883a 	mov	r5,zero
1000e848:	003f9006 	br	1000e68c <__alt_data_end+0xf800e68c>
1000e84c:	3446b03a 	or	r3,r6,r17
1000e850:	1800281e 	bne	r3,zero,1000e8f4 <__muldf3+0x2e4>
1000e854:	0023883a 	mov	r17,zero
1000e858:	0025883a 	mov	r18,zero
1000e85c:	01c00084 	movi	r7,2
1000e860:	003f9c06 	br	1000e6d4 <__alt_data_end+0xf800e6d4>
1000e864:	3446b03a 	or	r3,r6,r17
1000e868:	18001e26 	beq	r3,zero,1000e8e4 <__muldf3+0x2d4>
1000e86c:	88012126 	beq	r17,zero,1000ecf4 <__muldf3+0x6e4>
1000e870:	8809883a 	mov	r4,r17
1000e874:	d9400215 	stw	r5,8(sp)
1000e878:	d9800715 	stw	r6,28(sp)
1000e87c:	da400415 	stw	r9,16(sp)
1000e880:	da800315 	stw	r10,12(sp)
1000e884:	000f97c0 	call	1000f97c <__clzsi2>
1000e888:	d9400217 	ldw	r5,8(sp)
1000e88c:	d9800717 	ldw	r6,28(sp)
1000e890:	da400417 	ldw	r9,16(sp)
1000e894:	da800317 	ldw	r10,12(sp)
1000e898:	113ffd44 	addi	r4,r2,-11
1000e89c:	00c00704 	movi	r3,28
1000e8a0:	19011016 	blt	r3,r4,1000ece4 <__muldf3+0x6d4>
1000e8a4:	00c00744 	movi	r3,29
1000e8a8:	14bffe04 	addi	r18,r2,-8
1000e8ac:	1907c83a 	sub	r3,r3,r4
1000e8b0:	8ca2983a 	sll	r17,r17,r18
1000e8b4:	30c6d83a 	srl	r3,r6,r3
1000e8b8:	34a4983a 	sll	r18,r6,r18
1000e8bc:	1c62b03a 	or	r17,r3,r17
1000e8c0:	1080fcc4 	addi	r2,r2,1011
1000e8c4:	0085c83a 	sub	r2,zero,r2
1000e8c8:	000f883a 	mov	r7,zero
1000e8cc:	003f8106 	br	1000e6d4 <__alt_data_end+0xf800e6d4>
1000e8d0:	3027883a 	mov	r19,r6
1000e8d4:	0081ffc4 	movi	r2,2047
1000e8d8:	0021883a 	mov	r16,zero
1000e8dc:	002d883a 	mov	r22,zero
1000e8e0:	003faa06 	br	1000e78c <__alt_data_end+0xf800e78c>
1000e8e4:	0023883a 	mov	r17,zero
1000e8e8:	0025883a 	mov	r18,zero
1000e8ec:	01c00044 	movi	r7,1
1000e8f0:	003f7806 	br	1000e6d4 <__alt_data_end+0xf800e6d4>
1000e8f4:	01c000c4 	movi	r7,3
1000e8f8:	003f7606 	br	1000e6d4 <__alt_data_end+0xf800e6d4>
1000e8fc:	05400104 	movi	r21,4
1000e900:	0021883a 	mov	r16,zero
1000e904:	002d883a 	mov	r22,zero
1000e908:	01400044 	movi	r5,1
1000e90c:	003f5f06 	br	1000e68c <__alt_data_end+0xf800e68c>
1000e910:	05400304 	movi	r21,12
1000e914:	014000c4 	movi	r5,3
1000e918:	003f5c06 	br	1000e68c <__alt_data_end+0xf800e68c>
1000e91c:	04000434 	movhi	r16,16
1000e920:	0027883a 	mov	r19,zero
1000e924:	843fffc4 	addi	r16,r16,-1
1000e928:	05bfffc4 	movi	r22,-1
1000e92c:	0081ffc4 	movi	r2,2047
1000e930:	003f9606 	br	1000e78c <__alt_data_end+0xf800e78c>
1000e934:	8023883a 	mov	r17,r16
1000e938:	b025883a 	mov	r18,r22
1000e93c:	280f883a 	mov	r7,r5
1000e940:	003f8806 	br	1000e764 <__alt_data_end+0xf800e764>
1000e944:	8023883a 	mov	r17,r16
1000e948:	b025883a 	mov	r18,r22
1000e94c:	480d883a 	mov	r6,r9
1000e950:	280f883a 	mov	r7,r5
1000e954:	003f8306 	br	1000e764 <__alt_data_end+0xf800e764>
1000e958:	b026d43a 	srli	r19,r22,16
1000e95c:	902ed43a 	srli	r23,r18,16
1000e960:	b5bfffcc 	andi	r22,r22,65535
1000e964:	94bfffcc 	andi	r18,r18,65535
1000e968:	b00b883a 	mov	r5,r22
1000e96c:	9009883a 	mov	r4,r18
1000e970:	d8c00515 	stw	r3,20(sp)
1000e974:	d9800715 	stw	r6,28(sp)
1000e978:	da000615 	stw	r8,24(sp)
1000e97c:	000175c0 	call	1000175c <__mulsi3>
1000e980:	980b883a 	mov	r5,r19
1000e984:	9009883a 	mov	r4,r18
1000e988:	1029883a 	mov	r20,r2
1000e98c:	000175c0 	call	1000175c <__mulsi3>
1000e990:	b80b883a 	mov	r5,r23
1000e994:	9809883a 	mov	r4,r19
1000e998:	102b883a 	mov	r21,r2
1000e99c:	000175c0 	call	1000175c <__mulsi3>
1000e9a0:	b809883a 	mov	r4,r23
1000e9a4:	b00b883a 	mov	r5,r22
1000e9a8:	1039883a 	mov	fp,r2
1000e9ac:	000175c0 	call	1000175c <__mulsi3>
1000e9b0:	a008d43a 	srli	r4,r20,16
1000e9b4:	1545883a 	add	r2,r2,r21
1000e9b8:	d8c00517 	ldw	r3,20(sp)
1000e9bc:	2085883a 	add	r2,r4,r2
1000e9c0:	d9800717 	ldw	r6,28(sp)
1000e9c4:	da000617 	ldw	r8,24(sp)
1000e9c8:	1540022e 	bgeu	r2,r21,1000e9d4 <__muldf3+0x3c4>
1000e9cc:	01000074 	movhi	r4,1
1000e9d0:	e139883a 	add	fp,fp,r4
1000e9d4:	100e943a 	slli	r7,r2,16
1000e9d8:	1004d43a 	srli	r2,r2,16
1000e9dc:	882ad43a 	srli	r21,r17,16
1000e9e0:	a53fffcc 	andi	r20,r20,65535
1000e9e4:	8c7fffcc 	andi	r17,r17,65535
1000e9e8:	3d29883a 	add	r20,r7,r20
1000e9ec:	b00b883a 	mov	r5,r22
1000e9f0:	8809883a 	mov	r4,r17
1000e9f4:	d8c00515 	stw	r3,20(sp)
1000e9f8:	d9800715 	stw	r6,28(sp)
1000e9fc:	da000615 	stw	r8,24(sp)
1000ea00:	dd000115 	stw	r20,4(sp)
1000ea04:	d8800015 	stw	r2,0(sp)
1000ea08:	000175c0 	call	1000175c <__mulsi3>
1000ea0c:	980b883a 	mov	r5,r19
1000ea10:	8809883a 	mov	r4,r17
1000ea14:	d8800215 	stw	r2,8(sp)
1000ea18:	000175c0 	call	1000175c <__mulsi3>
1000ea1c:	9809883a 	mov	r4,r19
1000ea20:	a80b883a 	mov	r5,r21
1000ea24:	1029883a 	mov	r20,r2
1000ea28:	000175c0 	call	1000175c <__mulsi3>
1000ea2c:	b00b883a 	mov	r5,r22
1000ea30:	a809883a 	mov	r4,r21
1000ea34:	d8800415 	stw	r2,16(sp)
1000ea38:	000175c0 	call	1000175c <__mulsi3>
1000ea3c:	d9c00217 	ldw	r7,8(sp)
1000ea40:	1505883a 	add	r2,r2,r20
1000ea44:	d8c00517 	ldw	r3,20(sp)
1000ea48:	3826d43a 	srli	r19,r7,16
1000ea4c:	d9800717 	ldw	r6,28(sp)
1000ea50:	da000617 	ldw	r8,24(sp)
1000ea54:	9885883a 	add	r2,r19,r2
1000ea58:	da400417 	ldw	r9,16(sp)
1000ea5c:	1500022e 	bgeu	r2,r20,1000ea68 <__muldf3+0x458>
1000ea60:	01000074 	movhi	r4,1
1000ea64:	4913883a 	add	r9,r9,r4
1000ea68:	1028d43a 	srli	r20,r2,16
1000ea6c:	1004943a 	slli	r2,r2,16
1000ea70:	802cd43a 	srli	r22,r16,16
1000ea74:	843fffcc 	andi	r16,r16,65535
1000ea78:	3cffffcc 	andi	r19,r7,65535
1000ea7c:	9009883a 	mov	r4,r18
1000ea80:	800b883a 	mov	r5,r16
1000ea84:	a269883a 	add	r20,r20,r9
1000ea88:	d8c00515 	stw	r3,20(sp)
1000ea8c:	d9800715 	stw	r6,28(sp)
1000ea90:	da000615 	stw	r8,24(sp)
1000ea94:	14e7883a 	add	r19,r2,r19
1000ea98:	000175c0 	call	1000175c <__mulsi3>
1000ea9c:	9009883a 	mov	r4,r18
1000eaa0:	b00b883a 	mov	r5,r22
1000eaa4:	d8800315 	stw	r2,12(sp)
1000eaa8:	000175c0 	call	1000175c <__mulsi3>
1000eaac:	b809883a 	mov	r4,r23
1000eab0:	b00b883a 	mov	r5,r22
1000eab4:	d8800215 	stw	r2,8(sp)
1000eab8:	000175c0 	call	1000175c <__mulsi3>
1000eabc:	b80b883a 	mov	r5,r23
1000eac0:	8009883a 	mov	r4,r16
1000eac4:	d8800415 	stw	r2,16(sp)
1000eac8:	000175c0 	call	1000175c <__mulsi3>
1000eacc:	da800317 	ldw	r10,12(sp)
1000ead0:	d9c00217 	ldw	r7,8(sp)
1000ead4:	d9000017 	ldw	r4,0(sp)
1000ead8:	502ed43a 	srli	r23,r10,16
1000eadc:	11c5883a 	add	r2,r2,r7
1000eae0:	24e5883a 	add	r18,r4,r19
1000eae4:	b885883a 	add	r2,r23,r2
1000eae8:	d8c00517 	ldw	r3,20(sp)
1000eaec:	d9800717 	ldw	r6,28(sp)
1000eaf0:	da000617 	ldw	r8,24(sp)
1000eaf4:	da400417 	ldw	r9,16(sp)
1000eaf8:	11c0022e 	bgeu	r2,r7,1000eb04 <__muldf3+0x4f4>
1000eafc:	01000074 	movhi	r4,1
1000eb00:	4913883a 	add	r9,r9,r4
1000eb04:	100ed43a 	srli	r7,r2,16
1000eb08:	1004943a 	slli	r2,r2,16
1000eb0c:	55ffffcc 	andi	r23,r10,65535
1000eb10:	3a53883a 	add	r9,r7,r9
1000eb14:	8809883a 	mov	r4,r17
1000eb18:	800b883a 	mov	r5,r16
1000eb1c:	d8c00515 	stw	r3,20(sp)
1000eb20:	d9800715 	stw	r6,28(sp)
1000eb24:	da000615 	stw	r8,24(sp)
1000eb28:	da400415 	stw	r9,16(sp)
1000eb2c:	15ef883a 	add	r23,r2,r23
1000eb30:	000175c0 	call	1000175c <__mulsi3>
1000eb34:	8809883a 	mov	r4,r17
1000eb38:	b00b883a 	mov	r5,r22
1000eb3c:	d8800215 	stw	r2,8(sp)
1000eb40:	000175c0 	call	1000175c <__mulsi3>
1000eb44:	b00b883a 	mov	r5,r22
1000eb48:	a809883a 	mov	r4,r21
1000eb4c:	d8800315 	stw	r2,12(sp)
1000eb50:	000175c0 	call	1000175c <__mulsi3>
1000eb54:	8009883a 	mov	r4,r16
1000eb58:	a80b883a 	mov	r5,r21
1000eb5c:	1023883a 	mov	r17,r2
1000eb60:	000175c0 	call	1000175c <__mulsi3>
1000eb64:	d9c00217 	ldw	r7,8(sp)
1000eb68:	da800317 	ldw	r10,12(sp)
1000eb6c:	d8c00517 	ldw	r3,20(sp)
1000eb70:	3808d43a 	srli	r4,r7,16
1000eb74:	1285883a 	add	r2,r2,r10
1000eb78:	d9800717 	ldw	r6,28(sp)
1000eb7c:	2085883a 	add	r2,r4,r2
1000eb80:	da000617 	ldw	r8,24(sp)
1000eb84:	da400417 	ldw	r9,16(sp)
1000eb88:	1280022e 	bgeu	r2,r10,1000eb94 <__muldf3+0x584>
1000eb8c:	01000074 	movhi	r4,1
1000eb90:	8923883a 	add	r17,r17,r4
1000eb94:	1008943a 	slli	r4,r2,16
1000eb98:	39ffffcc 	andi	r7,r7,65535
1000eb9c:	e4b9883a 	add	fp,fp,r18
1000eba0:	21cf883a 	add	r7,r4,r7
1000eba4:	e4e7803a 	cmpltu	r19,fp,r19
1000eba8:	3d0f883a 	add	r7,r7,r20
1000ebac:	bf39883a 	add	fp,r23,fp
1000ebb0:	99c9883a 	add	r4,r19,r7
1000ebb4:	e5ef803a 	cmpltu	r23,fp,r23
1000ebb8:	490b883a 	add	r5,r9,r4
1000ebbc:	1004d43a 	srli	r2,r2,16
1000ebc0:	b965883a 	add	r18,r23,r5
1000ebc4:	24c9803a 	cmpltu	r4,r4,r19
1000ebc8:	3d29803a 	cmpltu	r20,r7,r20
1000ebcc:	a128b03a 	or	r20,r20,r4
1000ebd0:	95ef803a 	cmpltu	r23,r18,r23
1000ebd4:	2a53803a 	cmpltu	r9,r5,r9
1000ebd8:	a0a9883a 	add	r20,r20,r2
1000ebdc:	4deeb03a 	or	r23,r9,r23
1000ebe0:	a5ef883a 	add	r23,r20,r23
1000ebe4:	bc63883a 	add	r17,r23,r17
1000ebe8:	e004927a 	slli	r2,fp,9
1000ebec:	d9000117 	ldw	r4,4(sp)
1000ebf0:	882e927a 	slli	r23,r17,9
1000ebf4:	9022d5fa 	srli	r17,r18,23
1000ebf8:	e038d5fa 	srli	fp,fp,23
1000ebfc:	1104b03a 	or	r2,r2,r4
1000ec00:	9024927a 	slli	r18,r18,9
1000ec04:	1004c03a 	cmpne	r2,r2,zero
1000ec08:	bc62b03a 	or	r17,r23,r17
1000ec0c:	1738b03a 	or	fp,r2,fp
1000ec10:	8880402c 	andhi	r2,r17,256
1000ec14:	e4a4b03a 	or	r18,fp,r18
1000ec18:	10000726 	beq	r2,zero,1000ec38 <__muldf3+0x628>
1000ec1c:	9006d07a 	srli	r3,r18,1
1000ec20:	880497fa 	slli	r2,r17,31
1000ec24:	9480004c 	andi	r18,r18,1
1000ec28:	8822d07a 	srli	r17,r17,1
1000ec2c:	1ca4b03a 	or	r18,r3,r18
1000ec30:	14a4b03a 	or	r18,r2,r18
1000ec34:	4007883a 	mov	r3,r8
1000ec38:	1880ffc4 	addi	r2,r3,1023
1000ec3c:	0080460e 	bge	zero,r2,1000ed58 <__muldf3+0x748>
1000ec40:	910001cc 	andi	r4,r18,7
1000ec44:	20000726 	beq	r4,zero,1000ec64 <__muldf3+0x654>
1000ec48:	910003cc 	andi	r4,r18,15
1000ec4c:	01400104 	movi	r5,4
1000ec50:	21400426 	beq	r4,r5,1000ec64 <__muldf3+0x654>
1000ec54:	9149883a 	add	r4,r18,r5
1000ec58:	24a5803a 	cmpltu	r18,r4,r18
1000ec5c:	8ca3883a 	add	r17,r17,r18
1000ec60:	2025883a 	mov	r18,r4
1000ec64:	8900402c 	andhi	r4,r17,256
1000ec68:	20000426 	beq	r4,zero,1000ec7c <__muldf3+0x66c>
1000ec6c:	18810004 	addi	r2,r3,1024
1000ec70:	00ffc034 	movhi	r3,65280
1000ec74:	18ffffc4 	addi	r3,r3,-1
1000ec78:	88e2703a 	and	r17,r17,r3
1000ec7c:	00c1ff84 	movi	r3,2046
1000ec80:	18bf1316 	blt	r3,r2,1000e8d0 <__alt_data_end+0xf800e8d0>
1000ec84:	882c977a 	slli	r22,r17,29
1000ec88:	9024d0fa 	srli	r18,r18,3
1000ec8c:	8822927a 	slli	r17,r17,9
1000ec90:	1081ffcc 	andi	r2,r2,2047
1000ec94:	b4acb03a 	or	r22,r22,r18
1000ec98:	8820d33a 	srli	r16,r17,12
1000ec9c:	3027883a 	mov	r19,r6
1000eca0:	003eba06 	br	1000e78c <__alt_data_end+0xf800e78c>
1000eca4:	8080022c 	andhi	r2,r16,8
1000eca8:	10000926 	beq	r2,zero,1000ecd0 <__muldf3+0x6c0>
1000ecac:	8880022c 	andhi	r2,r17,8
1000ecb0:	1000071e 	bne	r2,zero,1000ecd0 <__muldf3+0x6c0>
1000ecb4:	00800434 	movhi	r2,16
1000ecb8:	8c000234 	orhi	r16,r17,8
1000ecbc:	10bfffc4 	addi	r2,r2,-1
1000ecc0:	e027883a 	mov	r19,fp
1000ecc4:	80a0703a 	and	r16,r16,r2
1000ecc8:	902d883a 	mov	r22,r18
1000eccc:	003f1706 	br	1000e92c <__alt_data_end+0xf800e92c>
1000ecd0:	00800434 	movhi	r2,16
1000ecd4:	84000234 	orhi	r16,r16,8
1000ecd8:	10bfffc4 	addi	r2,r2,-1
1000ecdc:	80a0703a 	and	r16,r16,r2
1000ece0:	003f1206 	br	1000e92c <__alt_data_end+0xf800e92c>
1000ece4:	147ff604 	addi	r17,r2,-40
1000ece8:	3462983a 	sll	r17,r6,r17
1000ecec:	0025883a 	mov	r18,zero
1000ecf0:	003ef306 	br	1000e8c0 <__alt_data_end+0xf800e8c0>
1000ecf4:	3009883a 	mov	r4,r6
1000ecf8:	d9400215 	stw	r5,8(sp)
1000ecfc:	d9800715 	stw	r6,28(sp)
1000ed00:	da400415 	stw	r9,16(sp)
1000ed04:	da800315 	stw	r10,12(sp)
1000ed08:	000f97c0 	call	1000f97c <__clzsi2>
1000ed0c:	10800804 	addi	r2,r2,32
1000ed10:	da800317 	ldw	r10,12(sp)
1000ed14:	da400417 	ldw	r9,16(sp)
1000ed18:	d9800717 	ldw	r6,28(sp)
1000ed1c:	d9400217 	ldw	r5,8(sp)
1000ed20:	003edd06 	br	1000e898 <__alt_data_end+0xf800e898>
1000ed24:	143ff604 	addi	r16,r2,-40
1000ed28:	ac20983a 	sll	r16,r21,r16
1000ed2c:	002d883a 	mov	r22,zero
1000ed30:	003ec106 	br	1000e838 <__alt_data_end+0xf800e838>
1000ed34:	d9800715 	stw	r6,28(sp)
1000ed38:	d9c00215 	stw	r7,8(sp)
1000ed3c:	da400415 	stw	r9,16(sp)
1000ed40:	000f97c0 	call	1000f97c <__clzsi2>
1000ed44:	10800804 	addi	r2,r2,32
1000ed48:	da400417 	ldw	r9,16(sp)
1000ed4c:	d9c00217 	ldw	r7,8(sp)
1000ed50:	d9800717 	ldw	r6,28(sp)
1000ed54:	003eae06 	br	1000e810 <__alt_data_end+0xf800e810>
1000ed58:	00c00044 	movi	r3,1
1000ed5c:	1887c83a 	sub	r3,r3,r2
1000ed60:	01000e04 	movi	r4,56
1000ed64:	20fe8516 	blt	r4,r3,1000e77c <__alt_data_end+0xf800e77c>
1000ed68:	010007c4 	movi	r4,31
1000ed6c:	20c01b16 	blt	r4,r3,1000eddc <__muldf3+0x7cc>
1000ed70:	00800804 	movi	r2,32
1000ed74:	10c5c83a 	sub	r2,r2,r3
1000ed78:	888a983a 	sll	r5,r17,r2
1000ed7c:	90c8d83a 	srl	r4,r18,r3
1000ed80:	9084983a 	sll	r2,r18,r2
1000ed84:	88e2d83a 	srl	r17,r17,r3
1000ed88:	2906b03a 	or	r3,r5,r4
1000ed8c:	1004c03a 	cmpne	r2,r2,zero
1000ed90:	1886b03a 	or	r3,r3,r2
1000ed94:	188001cc 	andi	r2,r3,7
1000ed98:	10000726 	beq	r2,zero,1000edb8 <__muldf3+0x7a8>
1000ed9c:	188003cc 	andi	r2,r3,15
1000eda0:	01000104 	movi	r4,4
1000eda4:	11000426 	beq	r2,r4,1000edb8 <__muldf3+0x7a8>
1000eda8:	1805883a 	mov	r2,r3
1000edac:	10c00104 	addi	r3,r2,4
1000edb0:	1885803a 	cmpltu	r2,r3,r2
1000edb4:	88a3883a 	add	r17,r17,r2
1000edb8:	8880202c 	andhi	r2,r17,128
1000edbc:	10001c26 	beq	r2,zero,1000ee30 <__muldf3+0x820>
1000edc0:	3027883a 	mov	r19,r6
1000edc4:	00800044 	movi	r2,1
1000edc8:	0021883a 	mov	r16,zero
1000edcc:	002d883a 	mov	r22,zero
1000edd0:	003e6e06 	br	1000e78c <__alt_data_end+0xf800e78c>
1000edd4:	4007883a 	mov	r3,r8
1000edd8:	003f9706 	br	1000ec38 <__alt_data_end+0xf800ec38>
1000eddc:	017ff844 	movi	r5,-31
1000ede0:	2885c83a 	sub	r2,r5,r2
1000ede4:	888ad83a 	srl	r5,r17,r2
1000ede8:	00800804 	movi	r2,32
1000edec:	18801a26 	beq	r3,r2,1000ee58 <__muldf3+0x848>
1000edf0:	01001004 	movi	r4,64
1000edf4:	20c7c83a 	sub	r3,r4,r3
1000edf8:	88e2983a 	sll	r17,r17,r3
1000edfc:	8ca4b03a 	or	r18,r17,r18
1000ee00:	9004c03a 	cmpne	r2,r18,zero
1000ee04:	2884b03a 	or	r2,r5,r2
1000ee08:	144001cc 	andi	r17,r2,7
1000ee0c:	88000d1e 	bne	r17,zero,1000ee44 <__muldf3+0x834>
1000ee10:	0021883a 	mov	r16,zero
1000ee14:	102cd0fa 	srli	r22,r2,3
1000ee18:	3027883a 	mov	r19,r6
1000ee1c:	0005883a 	mov	r2,zero
1000ee20:	b46cb03a 	or	r22,r22,r17
1000ee24:	003e5906 	br	1000e78c <__alt_data_end+0xf800e78c>
1000ee28:	1007883a 	mov	r3,r2
1000ee2c:	0023883a 	mov	r17,zero
1000ee30:	8820927a 	slli	r16,r17,9
1000ee34:	1805883a 	mov	r2,r3
1000ee38:	8822977a 	slli	r17,r17,29
1000ee3c:	8020d33a 	srli	r16,r16,12
1000ee40:	003ff406 	br	1000ee14 <__alt_data_end+0xf800ee14>
1000ee44:	10c003cc 	andi	r3,r2,15
1000ee48:	01000104 	movi	r4,4
1000ee4c:	193ff626 	beq	r3,r4,1000ee28 <__alt_data_end+0xf800ee28>
1000ee50:	0023883a 	mov	r17,zero
1000ee54:	003fd506 	br	1000edac <__alt_data_end+0xf800edac>
1000ee58:	0023883a 	mov	r17,zero
1000ee5c:	003fe706 	br	1000edfc <__alt_data_end+0xf800edfc>
1000ee60:	00800434 	movhi	r2,16
1000ee64:	8c000234 	orhi	r16,r17,8
1000ee68:	10bfffc4 	addi	r2,r2,-1
1000ee6c:	3027883a 	mov	r19,r6
1000ee70:	80a0703a 	and	r16,r16,r2
1000ee74:	902d883a 	mov	r22,r18
1000ee78:	003eac06 	br	1000e92c <__alt_data_end+0xf800e92c>

1000ee7c <__subdf3>:
1000ee7c:	02000434 	movhi	r8,16
1000ee80:	423fffc4 	addi	r8,r8,-1
1000ee84:	defffb04 	addi	sp,sp,-20
1000ee88:	2a14703a 	and	r10,r5,r8
1000ee8c:	3812d53a 	srli	r9,r7,20
1000ee90:	3a10703a 	and	r8,r7,r8
1000ee94:	2006d77a 	srli	r3,r4,29
1000ee98:	3004d77a 	srli	r2,r6,29
1000ee9c:	dc000015 	stw	r16,0(sp)
1000eea0:	501490fa 	slli	r10,r10,3
1000eea4:	2820d53a 	srli	r16,r5,20
1000eea8:	401090fa 	slli	r8,r8,3
1000eeac:	dc800215 	stw	r18,8(sp)
1000eeb0:	dc400115 	stw	r17,4(sp)
1000eeb4:	dfc00415 	stw	ra,16(sp)
1000eeb8:	202290fa 	slli	r17,r4,3
1000eebc:	dcc00315 	stw	r19,12(sp)
1000eec0:	4a41ffcc 	andi	r9,r9,2047
1000eec4:	0101ffc4 	movi	r4,2047
1000eec8:	2824d7fa 	srli	r18,r5,31
1000eecc:	8401ffcc 	andi	r16,r16,2047
1000eed0:	50c6b03a 	or	r3,r10,r3
1000eed4:	380ed7fa 	srli	r7,r7,31
1000eed8:	408ab03a 	or	r5,r8,r2
1000eedc:	300c90fa 	slli	r6,r6,3
1000eee0:	49009626 	beq	r9,r4,1000f13c <__subdf3+0x2c0>
1000eee4:	39c0005c 	xori	r7,r7,1
1000eee8:	8245c83a 	sub	r2,r16,r9
1000eeec:	3c807426 	beq	r7,r18,1000f0c0 <__subdf3+0x244>
1000eef0:	0080af0e 	bge	zero,r2,1000f1b0 <__subdf3+0x334>
1000eef4:	48002a1e 	bne	r9,zero,1000efa0 <__subdf3+0x124>
1000eef8:	2988b03a 	or	r4,r5,r6
1000eefc:	20009a1e 	bne	r4,zero,1000f168 <__subdf3+0x2ec>
1000ef00:	888001cc 	andi	r2,r17,7
1000ef04:	10000726 	beq	r2,zero,1000ef24 <__subdf3+0xa8>
1000ef08:	888003cc 	andi	r2,r17,15
1000ef0c:	01000104 	movi	r4,4
1000ef10:	11000426 	beq	r2,r4,1000ef24 <__subdf3+0xa8>
1000ef14:	890b883a 	add	r5,r17,r4
1000ef18:	2c63803a 	cmpltu	r17,r5,r17
1000ef1c:	1c47883a 	add	r3,r3,r17
1000ef20:	2823883a 	mov	r17,r5
1000ef24:	1880202c 	andhi	r2,r3,128
1000ef28:	10005926 	beq	r2,zero,1000f090 <__subdf3+0x214>
1000ef2c:	84000044 	addi	r16,r16,1
1000ef30:	0081ffc4 	movi	r2,2047
1000ef34:	8080be26 	beq	r16,r2,1000f230 <__subdf3+0x3b4>
1000ef38:	017fe034 	movhi	r5,65408
1000ef3c:	297fffc4 	addi	r5,r5,-1
1000ef40:	1946703a 	and	r3,r3,r5
1000ef44:	1804977a 	slli	r2,r3,29
1000ef48:	1806927a 	slli	r3,r3,9
1000ef4c:	8822d0fa 	srli	r17,r17,3
1000ef50:	8401ffcc 	andi	r16,r16,2047
1000ef54:	180ad33a 	srli	r5,r3,12
1000ef58:	9100004c 	andi	r4,r18,1
1000ef5c:	1444b03a 	or	r2,r2,r17
1000ef60:	80c1ffcc 	andi	r3,r16,2047
1000ef64:	1820953a 	slli	r16,r3,20
1000ef68:	20c03fcc 	andi	r3,r4,255
1000ef6c:	180897fa 	slli	r4,r3,31
1000ef70:	00c00434 	movhi	r3,16
1000ef74:	18ffffc4 	addi	r3,r3,-1
1000ef78:	28c6703a 	and	r3,r5,r3
1000ef7c:	1c06b03a 	or	r3,r3,r16
1000ef80:	1906b03a 	or	r3,r3,r4
1000ef84:	dfc00417 	ldw	ra,16(sp)
1000ef88:	dcc00317 	ldw	r19,12(sp)
1000ef8c:	dc800217 	ldw	r18,8(sp)
1000ef90:	dc400117 	ldw	r17,4(sp)
1000ef94:	dc000017 	ldw	r16,0(sp)
1000ef98:	dec00504 	addi	sp,sp,20
1000ef9c:	f800283a 	ret
1000efa0:	0101ffc4 	movi	r4,2047
1000efa4:	813fd626 	beq	r16,r4,1000ef00 <__alt_data_end+0xf800ef00>
1000efa8:	29402034 	orhi	r5,r5,128
1000efac:	01000e04 	movi	r4,56
1000efb0:	2080a316 	blt	r4,r2,1000f240 <__subdf3+0x3c4>
1000efb4:	010007c4 	movi	r4,31
1000efb8:	2080c616 	blt	r4,r2,1000f2d4 <__subdf3+0x458>
1000efbc:	01000804 	movi	r4,32
1000efc0:	2089c83a 	sub	r4,r4,r2
1000efc4:	2910983a 	sll	r8,r5,r4
1000efc8:	308ed83a 	srl	r7,r6,r2
1000efcc:	3108983a 	sll	r4,r6,r4
1000efd0:	2884d83a 	srl	r2,r5,r2
1000efd4:	41ccb03a 	or	r6,r8,r7
1000efd8:	2008c03a 	cmpne	r4,r4,zero
1000efdc:	310cb03a 	or	r6,r6,r4
1000efe0:	898dc83a 	sub	r6,r17,r6
1000efe4:	89a3803a 	cmpltu	r17,r17,r6
1000efe8:	1887c83a 	sub	r3,r3,r2
1000efec:	1c47c83a 	sub	r3,r3,r17
1000eff0:	3023883a 	mov	r17,r6
1000eff4:	1880202c 	andhi	r2,r3,128
1000eff8:	10002326 	beq	r2,zero,1000f088 <__subdf3+0x20c>
1000effc:	04c02034 	movhi	r19,128
1000f000:	9cffffc4 	addi	r19,r19,-1
1000f004:	1ce6703a 	and	r19,r3,r19
1000f008:	98007a26 	beq	r19,zero,1000f1f4 <__subdf3+0x378>
1000f00c:	9809883a 	mov	r4,r19
1000f010:	000f97c0 	call	1000f97c <__clzsi2>
1000f014:	113ffe04 	addi	r4,r2,-8
1000f018:	00c007c4 	movi	r3,31
1000f01c:	19007b16 	blt	r3,r4,1000f20c <__subdf3+0x390>
1000f020:	00800804 	movi	r2,32
1000f024:	1105c83a 	sub	r2,r2,r4
1000f028:	8884d83a 	srl	r2,r17,r2
1000f02c:	9906983a 	sll	r3,r19,r4
1000f030:	8922983a 	sll	r17,r17,r4
1000f034:	10c4b03a 	or	r2,r2,r3
1000f038:	24007816 	blt	r4,r16,1000f21c <__subdf3+0x3a0>
1000f03c:	2421c83a 	sub	r16,r4,r16
1000f040:	80c00044 	addi	r3,r16,1
1000f044:	010007c4 	movi	r4,31
1000f048:	20c09516 	blt	r4,r3,1000f2a0 <__subdf3+0x424>
1000f04c:	01400804 	movi	r5,32
1000f050:	28cbc83a 	sub	r5,r5,r3
1000f054:	88c8d83a 	srl	r4,r17,r3
1000f058:	8962983a 	sll	r17,r17,r5
1000f05c:	114a983a 	sll	r5,r2,r5
1000f060:	10c6d83a 	srl	r3,r2,r3
1000f064:	8804c03a 	cmpne	r2,r17,zero
1000f068:	290ab03a 	or	r5,r5,r4
1000f06c:	28a2b03a 	or	r17,r5,r2
1000f070:	0021883a 	mov	r16,zero
1000f074:	003fa206 	br	1000ef00 <__alt_data_end+0xf800ef00>
1000f078:	2090b03a 	or	r8,r4,r2
1000f07c:	40018e26 	beq	r8,zero,1000f6b8 <__subdf3+0x83c>
1000f080:	1007883a 	mov	r3,r2
1000f084:	2023883a 	mov	r17,r4
1000f088:	888001cc 	andi	r2,r17,7
1000f08c:	103f9e1e 	bne	r2,zero,1000ef08 <__alt_data_end+0xf800ef08>
1000f090:	1804977a 	slli	r2,r3,29
1000f094:	8822d0fa 	srli	r17,r17,3
1000f098:	1810d0fa 	srli	r8,r3,3
1000f09c:	9100004c 	andi	r4,r18,1
1000f0a0:	1444b03a 	or	r2,r2,r17
1000f0a4:	00c1ffc4 	movi	r3,2047
1000f0a8:	80c02826 	beq	r16,r3,1000f14c <__subdf3+0x2d0>
1000f0ac:	01400434 	movhi	r5,16
1000f0b0:	297fffc4 	addi	r5,r5,-1
1000f0b4:	80e0703a 	and	r16,r16,r3
1000f0b8:	414a703a 	and	r5,r8,r5
1000f0bc:	003fa806 	br	1000ef60 <__alt_data_end+0xf800ef60>
1000f0c0:	0080630e 	bge	zero,r2,1000f250 <__subdf3+0x3d4>
1000f0c4:	48003026 	beq	r9,zero,1000f188 <__subdf3+0x30c>
1000f0c8:	0101ffc4 	movi	r4,2047
1000f0cc:	813f8c26 	beq	r16,r4,1000ef00 <__alt_data_end+0xf800ef00>
1000f0d0:	29402034 	orhi	r5,r5,128
1000f0d4:	01000e04 	movi	r4,56
1000f0d8:	2080a90e 	bge	r4,r2,1000f380 <__subdf3+0x504>
1000f0dc:	298cb03a 	or	r6,r5,r6
1000f0e0:	3012c03a 	cmpne	r9,r6,zero
1000f0e4:	0005883a 	mov	r2,zero
1000f0e8:	4c53883a 	add	r9,r9,r17
1000f0ec:	4c63803a 	cmpltu	r17,r9,r17
1000f0f0:	10c7883a 	add	r3,r2,r3
1000f0f4:	88c7883a 	add	r3,r17,r3
1000f0f8:	4823883a 	mov	r17,r9
1000f0fc:	1880202c 	andhi	r2,r3,128
1000f100:	1000d026 	beq	r2,zero,1000f444 <__subdf3+0x5c8>
1000f104:	84000044 	addi	r16,r16,1
1000f108:	0081ffc4 	movi	r2,2047
1000f10c:	8080fe26 	beq	r16,r2,1000f508 <__subdf3+0x68c>
1000f110:	00bfe034 	movhi	r2,65408
1000f114:	10bfffc4 	addi	r2,r2,-1
1000f118:	1886703a 	and	r3,r3,r2
1000f11c:	880ad07a 	srli	r5,r17,1
1000f120:	180497fa 	slli	r2,r3,31
1000f124:	8900004c 	andi	r4,r17,1
1000f128:	2922b03a 	or	r17,r5,r4
1000f12c:	1806d07a 	srli	r3,r3,1
1000f130:	1462b03a 	or	r17,r2,r17
1000f134:	3825883a 	mov	r18,r7
1000f138:	003f7106 	br	1000ef00 <__alt_data_end+0xf800ef00>
1000f13c:	2984b03a 	or	r2,r5,r6
1000f140:	103f6826 	beq	r2,zero,1000eee4 <__alt_data_end+0xf800eee4>
1000f144:	39c03fcc 	andi	r7,r7,255
1000f148:	003f6706 	br	1000eee8 <__alt_data_end+0xf800eee8>
1000f14c:	4086b03a 	or	r3,r8,r2
1000f150:	18015226 	beq	r3,zero,1000f69c <__subdf3+0x820>
1000f154:	00c00434 	movhi	r3,16
1000f158:	41400234 	orhi	r5,r8,8
1000f15c:	18ffffc4 	addi	r3,r3,-1
1000f160:	28ca703a 	and	r5,r5,r3
1000f164:	003f7e06 	br	1000ef60 <__alt_data_end+0xf800ef60>
1000f168:	10bfffc4 	addi	r2,r2,-1
1000f16c:	1000491e 	bne	r2,zero,1000f294 <__subdf3+0x418>
1000f170:	898fc83a 	sub	r7,r17,r6
1000f174:	89e3803a 	cmpltu	r17,r17,r7
1000f178:	1947c83a 	sub	r3,r3,r5
1000f17c:	1c47c83a 	sub	r3,r3,r17
1000f180:	3823883a 	mov	r17,r7
1000f184:	003f9b06 	br	1000eff4 <__alt_data_end+0xf800eff4>
1000f188:	2988b03a 	or	r4,r5,r6
1000f18c:	203f5c26 	beq	r4,zero,1000ef00 <__alt_data_end+0xf800ef00>
1000f190:	10bfffc4 	addi	r2,r2,-1
1000f194:	1000931e 	bne	r2,zero,1000f3e4 <__subdf3+0x568>
1000f198:	898d883a 	add	r6,r17,r6
1000f19c:	3463803a 	cmpltu	r17,r6,r17
1000f1a0:	1947883a 	add	r3,r3,r5
1000f1a4:	88c7883a 	add	r3,r17,r3
1000f1a8:	3023883a 	mov	r17,r6
1000f1ac:	003fd306 	br	1000f0fc <__alt_data_end+0xf800f0fc>
1000f1b0:	1000541e 	bne	r2,zero,1000f304 <__subdf3+0x488>
1000f1b4:	80800044 	addi	r2,r16,1
1000f1b8:	1081ffcc 	andi	r2,r2,2047
1000f1bc:	01000044 	movi	r4,1
1000f1c0:	2080a20e 	bge	r4,r2,1000f44c <__subdf3+0x5d0>
1000f1c4:	8989c83a 	sub	r4,r17,r6
1000f1c8:	8905803a 	cmpltu	r2,r17,r4
1000f1cc:	1967c83a 	sub	r19,r3,r5
1000f1d0:	98a7c83a 	sub	r19,r19,r2
1000f1d4:	9880202c 	andhi	r2,r19,128
1000f1d8:	10006326 	beq	r2,zero,1000f368 <__subdf3+0x4ec>
1000f1dc:	3463c83a 	sub	r17,r6,r17
1000f1e0:	28c7c83a 	sub	r3,r5,r3
1000f1e4:	344d803a 	cmpltu	r6,r6,r17
1000f1e8:	19a7c83a 	sub	r19,r3,r6
1000f1ec:	3825883a 	mov	r18,r7
1000f1f0:	983f861e 	bne	r19,zero,1000f00c <__alt_data_end+0xf800f00c>
1000f1f4:	8809883a 	mov	r4,r17
1000f1f8:	000f97c0 	call	1000f97c <__clzsi2>
1000f1fc:	10800804 	addi	r2,r2,32
1000f200:	113ffe04 	addi	r4,r2,-8
1000f204:	00c007c4 	movi	r3,31
1000f208:	193f850e 	bge	r3,r4,1000f020 <__alt_data_end+0xf800f020>
1000f20c:	10bff604 	addi	r2,r2,-40
1000f210:	8884983a 	sll	r2,r17,r2
1000f214:	0023883a 	mov	r17,zero
1000f218:	243f880e 	bge	r4,r16,1000f03c <__alt_data_end+0xf800f03c>
1000f21c:	00ffe034 	movhi	r3,65408
1000f220:	18ffffc4 	addi	r3,r3,-1
1000f224:	8121c83a 	sub	r16,r16,r4
1000f228:	10c6703a 	and	r3,r2,r3
1000f22c:	003f3406 	br	1000ef00 <__alt_data_end+0xf800ef00>
1000f230:	9100004c 	andi	r4,r18,1
1000f234:	000b883a 	mov	r5,zero
1000f238:	0005883a 	mov	r2,zero
1000f23c:	003f4806 	br	1000ef60 <__alt_data_end+0xf800ef60>
1000f240:	298cb03a 	or	r6,r5,r6
1000f244:	300cc03a 	cmpne	r6,r6,zero
1000f248:	0005883a 	mov	r2,zero
1000f24c:	003f6406 	br	1000efe0 <__alt_data_end+0xf800efe0>
1000f250:	10009a1e 	bne	r2,zero,1000f4bc <__subdf3+0x640>
1000f254:	82400044 	addi	r9,r16,1
1000f258:	4881ffcc 	andi	r2,r9,2047
1000f25c:	02800044 	movi	r10,1
1000f260:	5080670e 	bge	r10,r2,1000f400 <__subdf3+0x584>
1000f264:	0081ffc4 	movi	r2,2047
1000f268:	4880af26 	beq	r9,r2,1000f528 <__subdf3+0x6ac>
1000f26c:	898d883a 	add	r6,r17,r6
1000f270:	1945883a 	add	r2,r3,r5
1000f274:	3447803a 	cmpltu	r3,r6,r17
1000f278:	1887883a 	add	r3,r3,r2
1000f27c:	182297fa 	slli	r17,r3,31
1000f280:	300cd07a 	srli	r6,r6,1
1000f284:	1806d07a 	srli	r3,r3,1
1000f288:	4821883a 	mov	r16,r9
1000f28c:	89a2b03a 	or	r17,r17,r6
1000f290:	003f1b06 	br	1000ef00 <__alt_data_end+0xf800ef00>
1000f294:	0101ffc4 	movi	r4,2047
1000f298:	813f441e 	bne	r16,r4,1000efac <__alt_data_end+0xf800efac>
1000f29c:	003f1806 	br	1000ef00 <__alt_data_end+0xf800ef00>
1000f2a0:	843ff844 	addi	r16,r16,-31
1000f2a4:	01400804 	movi	r5,32
1000f2a8:	1408d83a 	srl	r4,r2,r16
1000f2ac:	19405026 	beq	r3,r5,1000f3f0 <__subdf3+0x574>
1000f2b0:	01401004 	movi	r5,64
1000f2b4:	28c7c83a 	sub	r3,r5,r3
1000f2b8:	10c4983a 	sll	r2,r2,r3
1000f2bc:	88a2b03a 	or	r17,r17,r2
1000f2c0:	8822c03a 	cmpne	r17,r17,zero
1000f2c4:	2462b03a 	or	r17,r4,r17
1000f2c8:	0007883a 	mov	r3,zero
1000f2cc:	0021883a 	mov	r16,zero
1000f2d0:	003f6d06 	br	1000f088 <__alt_data_end+0xf800f088>
1000f2d4:	11fff804 	addi	r7,r2,-32
1000f2d8:	01000804 	movi	r4,32
1000f2dc:	29ced83a 	srl	r7,r5,r7
1000f2e0:	11004526 	beq	r2,r4,1000f3f8 <__subdf3+0x57c>
1000f2e4:	01001004 	movi	r4,64
1000f2e8:	2089c83a 	sub	r4,r4,r2
1000f2ec:	2904983a 	sll	r2,r5,r4
1000f2f0:	118cb03a 	or	r6,r2,r6
1000f2f4:	300cc03a 	cmpne	r6,r6,zero
1000f2f8:	398cb03a 	or	r6,r7,r6
1000f2fc:	0005883a 	mov	r2,zero
1000f300:	003f3706 	br	1000efe0 <__alt_data_end+0xf800efe0>
1000f304:	80002a26 	beq	r16,zero,1000f3b0 <__subdf3+0x534>
1000f308:	0101ffc4 	movi	r4,2047
1000f30c:	49006626 	beq	r9,r4,1000f4a8 <__subdf3+0x62c>
1000f310:	0085c83a 	sub	r2,zero,r2
1000f314:	18c02034 	orhi	r3,r3,128
1000f318:	01000e04 	movi	r4,56
1000f31c:	20807e16 	blt	r4,r2,1000f518 <__subdf3+0x69c>
1000f320:	010007c4 	movi	r4,31
1000f324:	2080e716 	blt	r4,r2,1000f6c4 <__subdf3+0x848>
1000f328:	01000804 	movi	r4,32
1000f32c:	2089c83a 	sub	r4,r4,r2
1000f330:	1914983a 	sll	r10,r3,r4
1000f334:	8890d83a 	srl	r8,r17,r2
1000f338:	8908983a 	sll	r4,r17,r4
1000f33c:	1884d83a 	srl	r2,r3,r2
1000f340:	5222b03a 	or	r17,r10,r8
1000f344:	2006c03a 	cmpne	r3,r4,zero
1000f348:	88e2b03a 	or	r17,r17,r3
1000f34c:	3463c83a 	sub	r17,r6,r17
1000f350:	2885c83a 	sub	r2,r5,r2
1000f354:	344d803a 	cmpltu	r6,r6,r17
1000f358:	1187c83a 	sub	r3,r2,r6
1000f35c:	4821883a 	mov	r16,r9
1000f360:	3825883a 	mov	r18,r7
1000f364:	003f2306 	br	1000eff4 <__alt_data_end+0xf800eff4>
1000f368:	24d0b03a 	or	r8,r4,r19
1000f36c:	40001b1e 	bne	r8,zero,1000f3dc <__subdf3+0x560>
1000f370:	0005883a 	mov	r2,zero
1000f374:	0009883a 	mov	r4,zero
1000f378:	0021883a 	mov	r16,zero
1000f37c:	003f4906 	br	1000f0a4 <__alt_data_end+0xf800f0a4>
1000f380:	010007c4 	movi	r4,31
1000f384:	20803a16 	blt	r4,r2,1000f470 <__subdf3+0x5f4>
1000f388:	01000804 	movi	r4,32
1000f38c:	2089c83a 	sub	r4,r4,r2
1000f390:	2912983a 	sll	r9,r5,r4
1000f394:	3090d83a 	srl	r8,r6,r2
1000f398:	3108983a 	sll	r4,r6,r4
1000f39c:	2884d83a 	srl	r2,r5,r2
1000f3a0:	4a12b03a 	or	r9,r9,r8
1000f3a4:	2008c03a 	cmpne	r4,r4,zero
1000f3a8:	4912b03a 	or	r9,r9,r4
1000f3ac:	003f4e06 	br	1000f0e8 <__alt_data_end+0xf800f0e8>
1000f3b0:	1c48b03a 	or	r4,r3,r17
1000f3b4:	20003c26 	beq	r4,zero,1000f4a8 <__subdf3+0x62c>
1000f3b8:	0084303a 	nor	r2,zero,r2
1000f3bc:	1000381e 	bne	r2,zero,1000f4a0 <__subdf3+0x624>
1000f3c0:	3463c83a 	sub	r17,r6,r17
1000f3c4:	28c5c83a 	sub	r2,r5,r3
1000f3c8:	344d803a 	cmpltu	r6,r6,r17
1000f3cc:	1187c83a 	sub	r3,r2,r6
1000f3d0:	4821883a 	mov	r16,r9
1000f3d4:	3825883a 	mov	r18,r7
1000f3d8:	003f0606 	br	1000eff4 <__alt_data_end+0xf800eff4>
1000f3dc:	2023883a 	mov	r17,r4
1000f3e0:	003f0906 	br	1000f008 <__alt_data_end+0xf800f008>
1000f3e4:	0101ffc4 	movi	r4,2047
1000f3e8:	813f3a1e 	bne	r16,r4,1000f0d4 <__alt_data_end+0xf800f0d4>
1000f3ec:	003ec406 	br	1000ef00 <__alt_data_end+0xf800ef00>
1000f3f0:	0005883a 	mov	r2,zero
1000f3f4:	003fb106 	br	1000f2bc <__alt_data_end+0xf800f2bc>
1000f3f8:	0005883a 	mov	r2,zero
1000f3fc:	003fbc06 	br	1000f2f0 <__alt_data_end+0xf800f2f0>
1000f400:	1c44b03a 	or	r2,r3,r17
1000f404:	80008e1e 	bne	r16,zero,1000f640 <__subdf3+0x7c4>
1000f408:	1000c826 	beq	r2,zero,1000f72c <__subdf3+0x8b0>
1000f40c:	2984b03a 	or	r2,r5,r6
1000f410:	103ebb26 	beq	r2,zero,1000ef00 <__alt_data_end+0xf800ef00>
1000f414:	8989883a 	add	r4,r17,r6
1000f418:	1945883a 	add	r2,r3,r5
1000f41c:	2447803a 	cmpltu	r3,r4,r17
1000f420:	1887883a 	add	r3,r3,r2
1000f424:	1880202c 	andhi	r2,r3,128
1000f428:	2023883a 	mov	r17,r4
1000f42c:	103f1626 	beq	r2,zero,1000f088 <__alt_data_end+0xf800f088>
1000f430:	00bfe034 	movhi	r2,65408
1000f434:	10bfffc4 	addi	r2,r2,-1
1000f438:	5021883a 	mov	r16,r10
1000f43c:	1886703a 	and	r3,r3,r2
1000f440:	003eaf06 	br	1000ef00 <__alt_data_end+0xf800ef00>
1000f444:	3825883a 	mov	r18,r7
1000f448:	003f0f06 	br	1000f088 <__alt_data_end+0xf800f088>
1000f44c:	1c44b03a 	or	r2,r3,r17
1000f450:	8000251e 	bne	r16,zero,1000f4e8 <__subdf3+0x66c>
1000f454:	1000661e 	bne	r2,zero,1000f5f0 <__subdf3+0x774>
1000f458:	2990b03a 	or	r8,r5,r6
1000f45c:	40009626 	beq	r8,zero,1000f6b8 <__subdf3+0x83c>
1000f460:	2807883a 	mov	r3,r5
1000f464:	3023883a 	mov	r17,r6
1000f468:	3825883a 	mov	r18,r7
1000f46c:	003ea406 	br	1000ef00 <__alt_data_end+0xf800ef00>
1000f470:	127ff804 	addi	r9,r2,-32
1000f474:	01000804 	movi	r4,32
1000f478:	2a52d83a 	srl	r9,r5,r9
1000f47c:	11008c26 	beq	r2,r4,1000f6b0 <__subdf3+0x834>
1000f480:	01001004 	movi	r4,64
1000f484:	2085c83a 	sub	r2,r4,r2
1000f488:	2884983a 	sll	r2,r5,r2
1000f48c:	118cb03a 	or	r6,r2,r6
1000f490:	300cc03a 	cmpne	r6,r6,zero
1000f494:	4992b03a 	or	r9,r9,r6
1000f498:	0005883a 	mov	r2,zero
1000f49c:	003f1206 	br	1000f0e8 <__alt_data_end+0xf800f0e8>
1000f4a0:	0101ffc4 	movi	r4,2047
1000f4a4:	493f9c1e 	bne	r9,r4,1000f318 <__alt_data_end+0xf800f318>
1000f4a8:	2807883a 	mov	r3,r5
1000f4ac:	3023883a 	mov	r17,r6
1000f4b0:	4821883a 	mov	r16,r9
1000f4b4:	3825883a 	mov	r18,r7
1000f4b8:	003e9106 	br	1000ef00 <__alt_data_end+0xf800ef00>
1000f4bc:	80001f1e 	bne	r16,zero,1000f53c <__subdf3+0x6c0>
1000f4c0:	1c48b03a 	or	r4,r3,r17
1000f4c4:	20005a26 	beq	r4,zero,1000f630 <__subdf3+0x7b4>
1000f4c8:	0084303a 	nor	r2,zero,r2
1000f4cc:	1000561e 	bne	r2,zero,1000f628 <__subdf3+0x7ac>
1000f4d0:	89a3883a 	add	r17,r17,r6
1000f4d4:	1945883a 	add	r2,r3,r5
1000f4d8:	898d803a 	cmpltu	r6,r17,r6
1000f4dc:	3087883a 	add	r3,r6,r2
1000f4e0:	4821883a 	mov	r16,r9
1000f4e4:	003f0506 	br	1000f0fc <__alt_data_end+0xf800f0fc>
1000f4e8:	10002b1e 	bne	r2,zero,1000f598 <__subdf3+0x71c>
1000f4ec:	2984b03a 	or	r2,r5,r6
1000f4f0:	10008026 	beq	r2,zero,1000f6f4 <__subdf3+0x878>
1000f4f4:	2807883a 	mov	r3,r5
1000f4f8:	3023883a 	mov	r17,r6
1000f4fc:	3825883a 	mov	r18,r7
1000f500:	0401ffc4 	movi	r16,2047
1000f504:	003e7e06 	br	1000ef00 <__alt_data_end+0xf800ef00>
1000f508:	3809883a 	mov	r4,r7
1000f50c:	0011883a 	mov	r8,zero
1000f510:	0005883a 	mov	r2,zero
1000f514:	003ee306 	br	1000f0a4 <__alt_data_end+0xf800f0a4>
1000f518:	1c62b03a 	or	r17,r3,r17
1000f51c:	8822c03a 	cmpne	r17,r17,zero
1000f520:	0005883a 	mov	r2,zero
1000f524:	003f8906 	br	1000f34c <__alt_data_end+0xf800f34c>
1000f528:	3809883a 	mov	r4,r7
1000f52c:	4821883a 	mov	r16,r9
1000f530:	0011883a 	mov	r8,zero
1000f534:	0005883a 	mov	r2,zero
1000f538:	003eda06 	br	1000f0a4 <__alt_data_end+0xf800f0a4>
1000f53c:	0101ffc4 	movi	r4,2047
1000f540:	49003b26 	beq	r9,r4,1000f630 <__subdf3+0x7b4>
1000f544:	0085c83a 	sub	r2,zero,r2
1000f548:	18c02034 	orhi	r3,r3,128
1000f54c:	01000e04 	movi	r4,56
1000f550:	20806e16 	blt	r4,r2,1000f70c <__subdf3+0x890>
1000f554:	010007c4 	movi	r4,31
1000f558:	20807716 	blt	r4,r2,1000f738 <__subdf3+0x8bc>
1000f55c:	01000804 	movi	r4,32
1000f560:	2089c83a 	sub	r4,r4,r2
1000f564:	1914983a 	sll	r10,r3,r4
1000f568:	8890d83a 	srl	r8,r17,r2
1000f56c:	8908983a 	sll	r4,r17,r4
1000f570:	1884d83a 	srl	r2,r3,r2
1000f574:	5222b03a 	or	r17,r10,r8
1000f578:	2006c03a 	cmpne	r3,r4,zero
1000f57c:	88e2b03a 	or	r17,r17,r3
1000f580:	89a3883a 	add	r17,r17,r6
1000f584:	1145883a 	add	r2,r2,r5
1000f588:	898d803a 	cmpltu	r6,r17,r6
1000f58c:	3087883a 	add	r3,r6,r2
1000f590:	4821883a 	mov	r16,r9
1000f594:	003ed906 	br	1000f0fc <__alt_data_end+0xf800f0fc>
1000f598:	2984b03a 	or	r2,r5,r6
1000f59c:	10004226 	beq	r2,zero,1000f6a8 <__subdf3+0x82c>
1000f5a0:	1808d0fa 	srli	r4,r3,3
1000f5a4:	8822d0fa 	srli	r17,r17,3
1000f5a8:	1806977a 	slli	r3,r3,29
1000f5ac:	2080022c 	andhi	r2,r4,8
1000f5b0:	1c62b03a 	or	r17,r3,r17
1000f5b4:	10000826 	beq	r2,zero,1000f5d8 <__subdf3+0x75c>
1000f5b8:	2812d0fa 	srli	r9,r5,3
1000f5bc:	4880022c 	andhi	r2,r9,8
1000f5c0:	1000051e 	bne	r2,zero,1000f5d8 <__subdf3+0x75c>
1000f5c4:	300cd0fa 	srli	r6,r6,3
1000f5c8:	2804977a 	slli	r2,r5,29
1000f5cc:	4809883a 	mov	r4,r9
1000f5d0:	3825883a 	mov	r18,r7
1000f5d4:	11a2b03a 	or	r17,r2,r6
1000f5d8:	8806d77a 	srli	r3,r17,29
1000f5dc:	200890fa 	slli	r4,r4,3
1000f5e0:	882290fa 	slli	r17,r17,3
1000f5e4:	0401ffc4 	movi	r16,2047
1000f5e8:	1906b03a 	or	r3,r3,r4
1000f5ec:	003e4406 	br	1000ef00 <__alt_data_end+0xf800ef00>
1000f5f0:	2984b03a 	or	r2,r5,r6
1000f5f4:	103e4226 	beq	r2,zero,1000ef00 <__alt_data_end+0xf800ef00>
1000f5f8:	8989c83a 	sub	r4,r17,r6
1000f5fc:	8911803a 	cmpltu	r8,r17,r4
1000f600:	1945c83a 	sub	r2,r3,r5
1000f604:	1205c83a 	sub	r2,r2,r8
1000f608:	1200202c 	andhi	r8,r2,128
1000f60c:	403e9a26 	beq	r8,zero,1000f078 <__alt_data_end+0xf800f078>
1000f610:	3463c83a 	sub	r17,r6,r17
1000f614:	28c5c83a 	sub	r2,r5,r3
1000f618:	344d803a 	cmpltu	r6,r6,r17
1000f61c:	1187c83a 	sub	r3,r2,r6
1000f620:	3825883a 	mov	r18,r7
1000f624:	003e3606 	br	1000ef00 <__alt_data_end+0xf800ef00>
1000f628:	0101ffc4 	movi	r4,2047
1000f62c:	493fc71e 	bne	r9,r4,1000f54c <__alt_data_end+0xf800f54c>
1000f630:	2807883a 	mov	r3,r5
1000f634:	3023883a 	mov	r17,r6
1000f638:	4821883a 	mov	r16,r9
1000f63c:	003e3006 	br	1000ef00 <__alt_data_end+0xf800ef00>
1000f640:	10003626 	beq	r2,zero,1000f71c <__subdf3+0x8a0>
1000f644:	2984b03a 	or	r2,r5,r6
1000f648:	10001726 	beq	r2,zero,1000f6a8 <__subdf3+0x82c>
1000f64c:	1808d0fa 	srli	r4,r3,3
1000f650:	8822d0fa 	srli	r17,r17,3
1000f654:	1806977a 	slli	r3,r3,29
1000f658:	2080022c 	andhi	r2,r4,8
1000f65c:	1c62b03a 	or	r17,r3,r17
1000f660:	10000726 	beq	r2,zero,1000f680 <__subdf3+0x804>
1000f664:	2812d0fa 	srli	r9,r5,3
1000f668:	4880022c 	andhi	r2,r9,8
1000f66c:	1000041e 	bne	r2,zero,1000f680 <__subdf3+0x804>
1000f670:	300cd0fa 	srli	r6,r6,3
1000f674:	2804977a 	slli	r2,r5,29
1000f678:	4809883a 	mov	r4,r9
1000f67c:	11a2b03a 	or	r17,r2,r6
1000f680:	8806d77a 	srli	r3,r17,29
1000f684:	200890fa 	slli	r4,r4,3
1000f688:	882290fa 	slli	r17,r17,3
1000f68c:	3825883a 	mov	r18,r7
1000f690:	1906b03a 	or	r3,r3,r4
1000f694:	0401ffc4 	movi	r16,2047
1000f698:	003e1906 	br	1000ef00 <__alt_data_end+0xf800ef00>
1000f69c:	000b883a 	mov	r5,zero
1000f6a0:	0005883a 	mov	r2,zero
1000f6a4:	003e2e06 	br	1000ef60 <__alt_data_end+0xf800ef60>
1000f6a8:	0401ffc4 	movi	r16,2047
1000f6ac:	003e1406 	br	1000ef00 <__alt_data_end+0xf800ef00>
1000f6b0:	0005883a 	mov	r2,zero
1000f6b4:	003f7506 	br	1000f48c <__alt_data_end+0xf800f48c>
1000f6b8:	0005883a 	mov	r2,zero
1000f6bc:	0009883a 	mov	r4,zero
1000f6c0:	003e7806 	br	1000f0a4 <__alt_data_end+0xf800f0a4>
1000f6c4:	123ff804 	addi	r8,r2,-32
1000f6c8:	01000804 	movi	r4,32
1000f6cc:	1a10d83a 	srl	r8,r3,r8
1000f6d0:	11002526 	beq	r2,r4,1000f768 <__subdf3+0x8ec>
1000f6d4:	01001004 	movi	r4,64
1000f6d8:	2085c83a 	sub	r2,r4,r2
1000f6dc:	1884983a 	sll	r2,r3,r2
1000f6e0:	1444b03a 	or	r2,r2,r17
1000f6e4:	1004c03a 	cmpne	r2,r2,zero
1000f6e8:	40a2b03a 	or	r17,r8,r2
1000f6ec:	0005883a 	mov	r2,zero
1000f6f0:	003f1606 	br	1000f34c <__alt_data_end+0xf800f34c>
1000f6f4:	02000434 	movhi	r8,16
1000f6f8:	0009883a 	mov	r4,zero
1000f6fc:	423fffc4 	addi	r8,r8,-1
1000f700:	00bfffc4 	movi	r2,-1
1000f704:	0401ffc4 	movi	r16,2047
1000f708:	003e6606 	br	1000f0a4 <__alt_data_end+0xf800f0a4>
1000f70c:	1c62b03a 	or	r17,r3,r17
1000f710:	8822c03a 	cmpne	r17,r17,zero
1000f714:	0005883a 	mov	r2,zero
1000f718:	003f9906 	br	1000f580 <__alt_data_end+0xf800f580>
1000f71c:	2807883a 	mov	r3,r5
1000f720:	3023883a 	mov	r17,r6
1000f724:	0401ffc4 	movi	r16,2047
1000f728:	003df506 	br	1000ef00 <__alt_data_end+0xf800ef00>
1000f72c:	2807883a 	mov	r3,r5
1000f730:	3023883a 	mov	r17,r6
1000f734:	003df206 	br	1000ef00 <__alt_data_end+0xf800ef00>
1000f738:	123ff804 	addi	r8,r2,-32
1000f73c:	01000804 	movi	r4,32
1000f740:	1a10d83a 	srl	r8,r3,r8
1000f744:	11000a26 	beq	r2,r4,1000f770 <__subdf3+0x8f4>
1000f748:	01001004 	movi	r4,64
1000f74c:	2085c83a 	sub	r2,r4,r2
1000f750:	1884983a 	sll	r2,r3,r2
1000f754:	1444b03a 	or	r2,r2,r17
1000f758:	1004c03a 	cmpne	r2,r2,zero
1000f75c:	40a2b03a 	or	r17,r8,r2
1000f760:	0005883a 	mov	r2,zero
1000f764:	003f8606 	br	1000f580 <__alt_data_end+0xf800f580>
1000f768:	0005883a 	mov	r2,zero
1000f76c:	003fdc06 	br	1000f6e0 <__alt_data_end+0xf800f6e0>
1000f770:	0005883a 	mov	r2,zero
1000f774:	003ff706 	br	1000f754 <__alt_data_end+0xf800f754>

1000f778 <__fixdfsi>:
1000f778:	280cd53a 	srli	r6,r5,20
1000f77c:	00c00434 	movhi	r3,16
1000f780:	18ffffc4 	addi	r3,r3,-1
1000f784:	3181ffcc 	andi	r6,r6,2047
1000f788:	01c0ff84 	movi	r7,1022
1000f78c:	28c6703a 	and	r3,r5,r3
1000f790:	280ad7fa 	srli	r5,r5,31
1000f794:	3980120e 	bge	r7,r6,1000f7e0 <__fixdfsi+0x68>
1000f798:	00810744 	movi	r2,1053
1000f79c:	11800c16 	blt	r2,r6,1000f7d0 <__fixdfsi+0x58>
1000f7a0:	00810cc4 	movi	r2,1075
1000f7a4:	1185c83a 	sub	r2,r2,r6
1000f7a8:	01c007c4 	movi	r7,31
1000f7ac:	18c00434 	orhi	r3,r3,16
1000f7b0:	38800d16 	blt	r7,r2,1000f7e8 <__fixdfsi+0x70>
1000f7b4:	31befb44 	addi	r6,r6,-1043
1000f7b8:	2084d83a 	srl	r2,r4,r2
1000f7bc:	1986983a 	sll	r3,r3,r6
1000f7c0:	1884b03a 	or	r2,r3,r2
1000f7c4:	28000726 	beq	r5,zero,1000f7e4 <__fixdfsi+0x6c>
1000f7c8:	0085c83a 	sub	r2,zero,r2
1000f7cc:	f800283a 	ret
1000f7d0:	00a00034 	movhi	r2,32768
1000f7d4:	10bfffc4 	addi	r2,r2,-1
1000f7d8:	2885883a 	add	r2,r5,r2
1000f7dc:	f800283a 	ret
1000f7e0:	0005883a 	mov	r2,zero
1000f7e4:	f800283a 	ret
1000f7e8:	008104c4 	movi	r2,1043
1000f7ec:	1185c83a 	sub	r2,r2,r6
1000f7f0:	1884d83a 	srl	r2,r3,r2
1000f7f4:	003ff306 	br	1000f7c4 <__alt_data_end+0xf800f7c4>

1000f7f8 <__floatsidf>:
1000f7f8:	defffd04 	addi	sp,sp,-12
1000f7fc:	dfc00215 	stw	ra,8(sp)
1000f800:	dc400115 	stw	r17,4(sp)
1000f804:	dc000015 	stw	r16,0(sp)
1000f808:	20002b26 	beq	r4,zero,1000f8b8 <__floatsidf+0xc0>
1000f80c:	2023883a 	mov	r17,r4
1000f810:	2020d7fa 	srli	r16,r4,31
1000f814:	20002d16 	blt	r4,zero,1000f8cc <__floatsidf+0xd4>
1000f818:	8809883a 	mov	r4,r17
1000f81c:	000f97c0 	call	1000f97c <__clzsi2>
1000f820:	01410784 	movi	r5,1054
1000f824:	288bc83a 	sub	r5,r5,r2
1000f828:	01010cc4 	movi	r4,1075
1000f82c:	2149c83a 	sub	r4,r4,r5
1000f830:	00c007c4 	movi	r3,31
1000f834:	1900160e 	bge	r3,r4,1000f890 <__floatsidf+0x98>
1000f838:	00c104c4 	movi	r3,1043
1000f83c:	1947c83a 	sub	r3,r3,r5
1000f840:	88c6983a 	sll	r3,r17,r3
1000f844:	00800434 	movhi	r2,16
1000f848:	10bfffc4 	addi	r2,r2,-1
1000f84c:	1886703a 	and	r3,r3,r2
1000f850:	2941ffcc 	andi	r5,r5,2047
1000f854:	800d883a 	mov	r6,r16
1000f858:	0005883a 	mov	r2,zero
1000f85c:	280a953a 	slli	r5,r5,20
1000f860:	31803fcc 	andi	r6,r6,255
1000f864:	01000434 	movhi	r4,16
1000f868:	300c97fa 	slli	r6,r6,31
1000f86c:	213fffc4 	addi	r4,r4,-1
1000f870:	1906703a 	and	r3,r3,r4
1000f874:	1946b03a 	or	r3,r3,r5
1000f878:	1986b03a 	or	r3,r3,r6
1000f87c:	dfc00217 	ldw	ra,8(sp)
1000f880:	dc400117 	ldw	r17,4(sp)
1000f884:	dc000017 	ldw	r16,0(sp)
1000f888:	dec00304 	addi	sp,sp,12
1000f88c:	f800283a 	ret
1000f890:	00c002c4 	movi	r3,11
1000f894:	1887c83a 	sub	r3,r3,r2
1000f898:	88c6d83a 	srl	r3,r17,r3
1000f89c:	8904983a 	sll	r2,r17,r4
1000f8a0:	01000434 	movhi	r4,16
1000f8a4:	213fffc4 	addi	r4,r4,-1
1000f8a8:	2941ffcc 	andi	r5,r5,2047
1000f8ac:	1906703a 	and	r3,r3,r4
1000f8b0:	800d883a 	mov	r6,r16
1000f8b4:	003fe906 	br	1000f85c <__alt_data_end+0xf800f85c>
1000f8b8:	000d883a 	mov	r6,zero
1000f8bc:	000b883a 	mov	r5,zero
1000f8c0:	0007883a 	mov	r3,zero
1000f8c4:	0005883a 	mov	r2,zero
1000f8c8:	003fe406 	br	1000f85c <__alt_data_end+0xf800f85c>
1000f8cc:	0123c83a 	sub	r17,zero,r4
1000f8d0:	003fd106 	br	1000f818 <__alt_data_end+0xf800f818>

1000f8d4 <__floatunsidf>:
1000f8d4:	defffe04 	addi	sp,sp,-8
1000f8d8:	dc000015 	stw	r16,0(sp)
1000f8dc:	dfc00115 	stw	ra,4(sp)
1000f8e0:	2021883a 	mov	r16,r4
1000f8e4:	20002226 	beq	r4,zero,1000f970 <__floatunsidf+0x9c>
1000f8e8:	000f97c0 	call	1000f97c <__clzsi2>
1000f8ec:	01010784 	movi	r4,1054
1000f8f0:	2089c83a 	sub	r4,r4,r2
1000f8f4:	01810cc4 	movi	r6,1075
1000f8f8:	310dc83a 	sub	r6,r6,r4
1000f8fc:	00c007c4 	movi	r3,31
1000f900:	1980120e 	bge	r3,r6,1000f94c <__floatunsidf+0x78>
1000f904:	00c104c4 	movi	r3,1043
1000f908:	1907c83a 	sub	r3,r3,r4
1000f90c:	80ca983a 	sll	r5,r16,r3
1000f910:	00800434 	movhi	r2,16
1000f914:	10bfffc4 	addi	r2,r2,-1
1000f918:	2101ffcc 	andi	r4,r4,2047
1000f91c:	0021883a 	mov	r16,zero
1000f920:	288a703a 	and	r5,r5,r2
1000f924:	2008953a 	slli	r4,r4,20
1000f928:	00c00434 	movhi	r3,16
1000f92c:	18ffffc4 	addi	r3,r3,-1
1000f930:	28c6703a 	and	r3,r5,r3
1000f934:	8005883a 	mov	r2,r16
1000f938:	1906b03a 	or	r3,r3,r4
1000f93c:	dfc00117 	ldw	ra,4(sp)
1000f940:	dc000017 	ldw	r16,0(sp)
1000f944:	dec00204 	addi	sp,sp,8
1000f948:	f800283a 	ret
1000f94c:	00c002c4 	movi	r3,11
1000f950:	188bc83a 	sub	r5,r3,r2
1000f954:	814ad83a 	srl	r5,r16,r5
1000f958:	00c00434 	movhi	r3,16
1000f95c:	18ffffc4 	addi	r3,r3,-1
1000f960:	81a0983a 	sll	r16,r16,r6
1000f964:	2101ffcc 	andi	r4,r4,2047
1000f968:	28ca703a 	and	r5,r5,r3
1000f96c:	003fed06 	br	1000f924 <__alt_data_end+0xf800f924>
1000f970:	0009883a 	mov	r4,zero
1000f974:	000b883a 	mov	r5,zero
1000f978:	003fea06 	br	1000f924 <__alt_data_end+0xf800f924>

1000f97c <__clzsi2>:
1000f97c:	00bfffd4 	movui	r2,65535
1000f980:	11000536 	bltu	r2,r4,1000f998 <__clzsi2+0x1c>
1000f984:	00803fc4 	movi	r2,255
1000f988:	11000f36 	bltu	r2,r4,1000f9c8 <__clzsi2+0x4c>
1000f98c:	00800804 	movi	r2,32
1000f990:	0007883a 	mov	r3,zero
1000f994:	00000506 	br	1000f9ac <__clzsi2+0x30>
1000f998:	00804034 	movhi	r2,256
1000f99c:	10bfffc4 	addi	r2,r2,-1
1000f9a0:	11000c2e 	bgeu	r2,r4,1000f9d4 <__clzsi2+0x58>
1000f9a4:	00800204 	movi	r2,8
1000f9a8:	00c00604 	movi	r3,24
1000f9ac:	20c8d83a 	srl	r4,r4,r3
1000f9b0:	00c40074 	movhi	r3,4097
1000f9b4:	18ca1504 	addi	r3,r3,10324
1000f9b8:	1909883a 	add	r4,r3,r4
1000f9bc:	20c00003 	ldbu	r3,0(r4)
1000f9c0:	10c5c83a 	sub	r2,r2,r3
1000f9c4:	f800283a 	ret
1000f9c8:	00800604 	movi	r2,24
1000f9cc:	00c00204 	movi	r3,8
1000f9d0:	003ff606 	br	1000f9ac <__alt_data_end+0xf800f9ac>
1000f9d4:	00800404 	movi	r2,16
1000f9d8:	1007883a 	mov	r3,r2
1000f9dc:	003ff306 	br	1000f9ac <__alt_data_end+0xf800f9ac>

1000f9e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f9e0:	defffe04 	addi	sp,sp,-8
1000f9e4:	dfc00115 	stw	ra,4(sp)
1000f9e8:	df000015 	stw	fp,0(sp)
1000f9ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f9f0:	d0a01217 	ldw	r2,-32696(gp)
1000f9f4:	10000326 	beq	r2,zero,1000fa04 <alt_get_errno+0x24>
1000f9f8:	d0a01217 	ldw	r2,-32696(gp)
1000f9fc:	103ee83a 	callr	r2
1000fa00:	00000106 	br	1000fa08 <alt_get_errno+0x28>
1000fa04:	d0a73104 	addi	r2,gp,-25404
}
1000fa08:	e037883a 	mov	sp,fp
1000fa0c:	dfc00117 	ldw	ra,4(sp)
1000fa10:	df000017 	ldw	fp,0(sp)
1000fa14:	dec00204 	addi	sp,sp,8
1000fa18:	f800283a 	ret

1000fa1c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000fa1c:	defffb04 	addi	sp,sp,-20
1000fa20:	dfc00415 	stw	ra,16(sp)
1000fa24:	df000315 	stw	fp,12(sp)
1000fa28:	df000304 	addi	fp,sp,12
1000fa2c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000fa30:	e0bfff17 	ldw	r2,-4(fp)
1000fa34:	10000816 	blt	r2,zero,1000fa58 <close+0x3c>
1000fa38:	01400304 	movi	r5,12
1000fa3c:	e13fff17 	ldw	r4,-4(fp)
1000fa40:	000175c0 	call	1000175c <__mulsi3>
1000fa44:	1007883a 	mov	r3,r2
1000fa48:	00840074 	movhi	r2,4097
1000fa4c:	108cc104 	addi	r2,r2,13060
1000fa50:	1885883a 	add	r2,r3,r2
1000fa54:	00000106 	br	1000fa5c <close+0x40>
1000fa58:	0005883a 	mov	r2,zero
1000fa5c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000fa60:	e0bffd17 	ldw	r2,-12(fp)
1000fa64:	10001926 	beq	r2,zero,1000facc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000fa68:	e0bffd17 	ldw	r2,-12(fp)
1000fa6c:	10800017 	ldw	r2,0(r2)
1000fa70:	10800417 	ldw	r2,16(r2)
1000fa74:	10000626 	beq	r2,zero,1000fa90 <close+0x74>
1000fa78:	e0bffd17 	ldw	r2,-12(fp)
1000fa7c:	10800017 	ldw	r2,0(r2)
1000fa80:	10800417 	ldw	r2,16(r2)
1000fa84:	e13ffd17 	ldw	r4,-12(fp)
1000fa88:	103ee83a 	callr	r2
1000fa8c:	00000106 	br	1000fa94 <close+0x78>
1000fa90:	0005883a 	mov	r2,zero
1000fa94:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000fa98:	e13fff17 	ldw	r4,-4(fp)
1000fa9c:	00104080 	call	10010408 <alt_release_fd>
    if (rval < 0)
1000faa0:	e0bffe17 	ldw	r2,-8(fp)
1000faa4:	1000070e 	bge	r2,zero,1000fac4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000faa8:	000f9e00 	call	1000f9e0 <alt_get_errno>
1000faac:	1007883a 	mov	r3,r2
1000fab0:	e0bffe17 	ldw	r2,-8(fp)
1000fab4:	0085c83a 	sub	r2,zero,r2
1000fab8:	18800015 	stw	r2,0(r3)
      return -1;
1000fabc:	00bfffc4 	movi	r2,-1
1000fac0:	00000706 	br	1000fae0 <close+0xc4>
    }
    return 0;
1000fac4:	0005883a 	mov	r2,zero
1000fac8:	00000506 	br	1000fae0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000facc:	000f9e00 	call	1000f9e0 <alt_get_errno>
1000fad0:	1007883a 	mov	r3,r2
1000fad4:	00801444 	movi	r2,81
1000fad8:	18800015 	stw	r2,0(r3)
    return -1;
1000fadc:	00bfffc4 	movi	r2,-1
  }
}
1000fae0:	e037883a 	mov	sp,fp
1000fae4:	dfc00117 	ldw	ra,4(sp)
1000fae8:	df000017 	ldw	fp,0(sp)
1000faec:	dec00204 	addi	sp,sp,8
1000faf0:	f800283a 	ret

1000faf4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000faf4:	defffc04 	addi	sp,sp,-16
1000faf8:	df000315 	stw	fp,12(sp)
1000fafc:	df000304 	addi	fp,sp,12
1000fb00:	e13ffd15 	stw	r4,-12(fp)
1000fb04:	e17ffe15 	stw	r5,-8(fp)
1000fb08:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000fb0c:	e0bfff17 	ldw	r2,-4(fp)
}
1000fb10:	e037883a 	mov	sp,fp
1000fb14:	df000017 	ldw	fp,0(sp)
1000fb18:	dec00104 	addi	sp,sp,4
1000fb1c:	f800283a 	ret

1000fb20 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1000fb20:	defffd04 	addi	sp,sp,-12
1000fb24:	df000215 	stw	fp,8(sp)
1000fb28:	df000204 	addi	fp,sp,8
1000fb2c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1000fb30:	0001883a 	nop
1000fb34:	e0bfff17 	ldw	r2,-4(fp)
1000fb38:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
1000fb3c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1000fb40:	10000226 	beq	r2,zero,1000fb4c <_exit+0x2c>
    ALT_SIM_FAIL();
1000fb44:	002af070 	cmpltui	zero,zero,43969
1000fb48:	00000106 	br	1000fb50 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
1000fb4c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1000fb50:	003fff06 	br	1000fb50 <__alt_data_end+0xf800fb50>

1000fb54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fb54:	defffe04 	addi	sp,sp,-8
1000fb58:	dfc00115 	stw	ra,4(sp)
1000fb5c:	df000015 	stw	fp,0(sp)
1000fb60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fb64:	d0a01217 	ldw	r2,-32696(gp)
1000fb68:	10000326 	beq	r2,zero,1000fb78 <alt_get_errno+0x24>
1000fb6c:	d0a01217 	ldw	r2,-32696(gp)
1000fb70:	103ee83a 	callr	r2
1000fb74:	00000106 	br	1000fb7c <alt_get_errno+0x28>
1000fb78:	d0a73104 	addi	r2,gp,-25404
}
1000fb7c:	e037883a 	mov	sp,fp
1000fb80:	dfc00117 	ldw	ra,4(sp)
1000fb84:	df000017 	ldw	fp,0(sp)
1000fb88:	dec00204 	addi	sp,sp,8
1000fb8c:	f800283a 	ret

1000fb90 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000fb90:	defffb04 	addi	sp,sp,-20
1000fb94:	dfc00415 	stw	ra,16(sp)
1000fb98:	df000315 	stw	fp,12(sp)
1000fb9c:	df000304 	addi	fp,sp,12
1000fba0:	e13ffe15 	stw	r4,-8(fp)
1000fba4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fba8:	e0bffe17 	ldw	r2,-8(fp)
1000fbac:	10000816 	blt	r2,zero,1000fbd0 <fstat+0x40>
1000fbb0:	01400304 	movi	r5,12
1000fbb4:	e13ffe17 	ldw	r4,-8(fp)
1000fbb8:	000175c0 	call	1000175c <__mulsi3>
1000fbbc:	1007883a 	mov	r3,r2
1000fbc0:	00840074 	movhi	r2,4097
1000fbc4:	108cc104 	addi	r2,r2,13060
1000fbc8:	1885883a 	add	r2,r3,r2
1000fbcc:	00000106 	br	1000fbd4 <fstat+0x44>
1000fbd0:	0005883a 	mov	r2,zero
1000fbd4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000fbd8:	e0bffd17 	ldw	r2,-12(fp)
1000fbdc:	10001026 	beq	r2,zero,1000fc20 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000fbe0:	e0bffd17 	ldw	r2,-12(fp)
1000fbe4:	10800017 	ldw	r2,0(r2)
1000fbe8:	10800817 	ldw	r2,32(r2)
1000fbec:	10000726 	beq	r2,zero,1000fc0c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000fbf0:	e0bffd17 	ldw	r2,-12(fp)
1000fbf4:	10800017 	ldw	r2,0(r2)
1000fbf8:	10800817 	ldw	r2,32(r2)
1000fbfc:	e17fff17 	ldw	r5,-4(fp)
1000fc00:	e13ffd17 	ldw	r4,-12(fp)
1000fc04:	103ee83a 	callr	r2
1000fc08:	00000a06 	br	1000fc34 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000fc0c:	e0bfff17 	ldw	r2,-4(fp)
1000fc10:	00c80004 	movi	r3,8192
1000fc14:	10c00115 	stw	r3,4(r2)
      return 0;
1000fc18:	0005883a 	mov	r2,zero
1000fc1c:	00000506 	br	1000fc34 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000fc20:	000fb540 	call	1000fb54 <alt_get_errno>
1000fc24:	1007883a 	mov	r3,r2
1000fc28:	00801444 	movi	r2,81
1000fc2c:	18800015 	stw	r2,0(r3)
    return -1;
1000fc30:	00bfffc4 	movi	r2,-1
  }
}
1000fc34:	e037883a 	mov	sp,fp
1000fc38:	dfc00117 	ldw	ra,4(sp)
1000fc3c:	df000017 	ldw	fp,0(sp)
1000fc40:	dec00204 	addi	sp,sp,8
1000fc44:	f800283a 	ret

1000fc48 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
1000fc48:	deffff04 	addi	sp,sp,-4
1000fc4c:	df000015 	stw	fp,0(sp)
1000fc50:	d839883a 	mov	fp,sp
  return 0;
1000fc54:	0005883a 	mov	r2,zero
}
1000fc58:	e037883a 	mov	sp,fp
1000fc5c:	df000017 	ldw	fp,0(sp)
1000fc60:	dec00104 	addi	sp,sp,4
1000fc64:	f800283a 	ret

1000fc68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fc68:	defffe04 	addi	sp,sp,-8
1000fc6c:	dfc00115 	stw	ra,4(sp)
1000fc70:	df000015 	stw	fp,0(sp)
1000fc74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fc78:	d0a01217 	ldw	r2,-32696(gp)
1000fc7c:	10000326 	beq	r2,zero,1000fc8c <alt_get_errno+0x24>
1000fc80:	d0a01217 	ldw	r2,-32696(gp)
1000fc84:	103ee83a 	callr	r2
1000fc88:	00000106 	br	1000fc90 <alt_get_errno+0x28>
1000fc8c:	d0a73104 	addi	r2,gp,-25404
}
1000fc90:	e037883a 	mov	sp,fp
1000fc94:	dfc00117 	ldw	ra,4(sp)
1000fc98:	df000017 	ldw	fp,0(sp)
1000fc9c:	dec00204 	addi	sp,sp,8
1000fca0:	f800283a 	ret

1000fca4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000fca4:	deffed04 	addi	sp,sp,-76
1000fca8:	dfc01215 	stw	ra,72(sp)
1000fcac:	df001115 	stw	fp,68(sp)
1000fcb0:	df001104 	addi	fp,sp,68
1000fcb4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fcb8:	e0bfff17 	ldw	r2,-4(fp)
1000fcbc:	10000816 	blt	r2,zero,1000fce0 <isatty+0x3c>
1000fcc0:	01400304 	movi	r5,12
1000fcc4:	e13fff17 	ldw	r4,-4(fp)
1000fcc8:	000175c0 	call	1000175c <__mulsi3>
1000fccc:	1007883a 	mov	r3,r2
1000fcd0:	00840074 	movhi	r2,4097
1000fcd4:	108cc104 	addi	r2,r2,13060
1000fcd8:	1885883a 	add	r2,r3,r2
1000fcdc:	00000106 	br	1000fce4 <isatty+0x40>
1000fce0:	0005883a 	mov	r2,zero
1000fce4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000fce8:	e0bfef17 	ldw	r2,-68(fp)
1000fcec:	10000e26 	beq	r2,zero,1000fd28 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000fcf0:	e0bfef17 	ldw	r2,-68(fp)
1000fcf4:	10800017 	ldw	r2,0(r2)
1000fcf8:	10800817 	ldw	r2,32(r2)
1000fcfc:	1000021e 	bne	r2,zero,1000fd08 <isatty+0x64>
    {
      return 1;
1000fd00:	00800044 	movi	r2,1
1000fd04:	00000d06 	br	1000fd3c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000fd08:	e0bff004 	addi	r2,fp,-64
1000fd0c:	100b883a 	mov	r5,r2
1000fd10:	e13fff17 	ldw	r4,-4(fp)
1000fd14:	000fb900 	call	1000fb90 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000fd18:	e0bff117 	ldw	r2,-60(fp)
1000fd1c:	10880020 	cmpeqi	r2,r2,8192
1000fd20:	10803fcc 	andi	r2,r2,255
1000fd24:	00000506 	br	1000fd3c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000fd28:	000fc680 	call	1000fc68 <alt_get_errno>
1000fd2c:	1007883a 	mov	r3,r2
1000fd30:	00801444 	movi	r2,81
1000fd34:	18800015 	stw	r2,0(r3)
    return 0;
1000fd38:	0005883a 	mov	r2,zero
  }
}
1000fd3c:	e037883a 	mov	sp,fp
1000fd40:	dfc00117 	ldw	ra,4(sp)
1000fd44:	df000017 	ldw	fp,0(sp)
1000fd48:	dec00204 	addi	sp,sp,8
1000fd4c:	f800283a 	ret

1000fd50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fd50:	defffe04 	addi	sp,sp,-8
1000fd54:	dfc00115 	stw	ra,4(sp)
1000fd58:	df000015 	stw	fp,0(sp)
1000fd5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fd60:	d0a01217 	ldw	r2,-32696(gp)
1000fd64:	10000326 	beq	r2,zero,1000fd74 <alt_get_errno+0x24>
1000fd68:	d0a01217 	ldw	r2,-32696(gp)
1000fd6c:	103ee83a 	callr	r2
1000fd70:	00000106 	br	1000fd78 <alt_get_errno+0x28>
1000fd74:	d0a73104 	addi	r2,gp,-25404
}
1000fd78:	e037883a 	mov	sp,fp
1000fd7c:	dfc00117 	ldw	ra,4(sp)
1000fd80:	df000017 	ldw	fp,0(sp)
1000fd84:	dec00204 	addi	sp,sp,8
1000fd88:	f800283a 	ret

1000fd8c <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
1000fd8c:	defffb04 	addi	sp,sp,-20
1000fd90:	dfc00415 	stw	ra,16(sp)
1000fd94:	df000315 	stw	fp,12(sp)
1000fd98:	df000304 	addi	fp,sp,12
1000fd9c:	e13ffe15 	stw	r4,-8(fp)
1000fda0:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
1000fda4:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
1000fda8:	e0bffe17 	ldw	r2,-8(fp)
1000fdac:	00802f16 	blt	zero,r2,1000fe6c <kill+0xe0>
  {
    switch (sig)
1000fdb0:	e0bfff17 	ldw	r2,-4(fp)
1000fdb4:	10800828 	cmpgeui	r2,r2,32
1000fdb8:	1000291e 	bne	r2,zero,1000fe60 <kill+0xd4>
1000fdbc:	e0bfff17 	ldw	r2,-4(fp)
1000fdc0:	100690ba 	slli	r3,r2,2
1000fdc4:	00840074 	movhi	r2,4097
1000fdc8:	10bf7604 	addi	r2,r2,-552
1000fdcc:	1885883a 	add	r2,r3,r2
1000fdd0:	10800017 	ldw	r2,0(r2)
1000fdd4:	1000683a 	jmp	r2
1000fdd8:	1000fe80 	call	11000fe8 <_gp+0xfe4adc>
1000fddc:	1000fe60 	cmpeqi	zero,r2,1017
1000fde0:	1000fe60 	cmpeqi	zero,r2,1017
1000fde4:	1000fe58 	cmpnei	zero,r2,1017
1000fde8:	1000fe58 	cmpnei	zero,r2,1017
1000fdec:	1000fe58 	cmpnei	zero,r2,1017
1000fdf0:	1000fe58 	cmpnei	zero,r2,1017
1000fdf4:	1000fe60 	cmpeqi	zero,r2,1017
1000fdf8:	1000fe58 	cmpnei	zero,r2,1017
1000fdfc:	1000fe58 	cmpnei	zero,r2,1017
1000fe00:	1000fe58 	cmpnei	zero,r2,1017
1000fe04:	1000fe58 	cmpnei	zero,r2,1017
1000fe08:	1000fe58 	cmpnei	zero,r2,1017
1000fe0c:	1000fe58 	cmpnei	zero,r2,1017
1000fe10:	1000fe58 	cmpnei	zero,r2,1017
1000fe14:	1000fe58 	cmpnei	zero,r2,1017
1000fe18:	1000fe80 	call	11000fe8 <_gp+0xfe4adc>
1000fe1c:	1000fe60 	cmpeqi	zero,r2,1017
1000fe20:	1000fe60 	cmpeqi	zero,r2,1017
1000fe24:	1000fe60 	cmpeqi	zero,r2,1017
1000fe28:	1000fe80 	call	11000fe8 <_gp+0xfe4adc>
1000fe2c:	1000fe60 	cmpeqi	zero,r2,1017
1000fe30:	1000fe60 	cmpeqi	zero,r2,1017
1000fe34:	1000fe58 	cmpnei	zero,r2,1017
1000fe38:	1000fe58 	cmpnei	zero,r2,1017
1000fe3c:	1000fe58 	cmpnei	zero,r2,1017
1000fe40:	1000fe58 	cmpnei	zero,r2,1017
1000fe44:	1000fe58 	cmpnei	zero,r2,1017
1000fe48:	1000fe60 	cmpeqi	zero,r2,1017
1000fe4c:	1000fe60 	cmpeqi	zero,r2,1017
1000fe50:	1000fe58 	cmpnei	zero,r2,1017
1000fe54:	1000fe58 	cmpnei	zero,r2,1017
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
1000fe58:	0009883a 	mov	r4,zero
1000fe5c:	000fb200 	call	1000fb20 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
1000fe60:	00800584 	movi	r2,22
1000fe64:	e0bffd15 	stw	r2,-12(fp)
1000fe68:	00000606 	br	1000fe84 <kill+0xf8>
    }
  }

  else if (pid > 0)
1000fe6c:	e0bffe17 	ldw	r2,-8(fp)
1000fe70:	0080040e 	bge	zero,r2,1000fe84 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
1000fe74:	008000c4 	movi	r2,3
1000fe78:	e0bffd15 	stw	r2,-12(fp)
1000fe7c:	00000106 	br	1000fe84 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
1000fe80:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
1000fe84:	e0bffd17 	ldw	r2,-12(fp)
1000fe88:	10000626 	beq	r2,zero,1000fea4 <kill+0x118>
  {
    ALT_ERRNO = status;
1000fe8c:	000fd500 	call	1000fd50 <alt_get_errno>
1000fe90:	1007883a 	mov	r3,r2
1000fe94:	e0bffd17 	ldw	r2,-12(fp)
1000fe98:	18800015 	stw	r2,0(r3)
    return -1;
1000fe9c:	00bfffc4 	movi	r2,-1
1000fea0:	00000106 	br	1000fea8 <kill+0x11c>
  }

  return 0;
1000fea4:	0005883a 	mov	r2,zero
}
1000fea8:	e037883a 	mov	sp,fp
1000feac:	dfc00117 	ldw	ra,4(sp)
1000feb0:	df000017 	ldw	fp,0(sp)
1000feb4:	dec00204 	addi	sp,sp,8
1000feb8:	f800283a 	ret

1000febc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000febc:	defffc04 	addi	sp,sp,-16
1000fec0:	df000315 	stw	fp,12(sp)
1000fec4:	df000304 	addi	fp,sp,12
1000fec8:	e13ffd15 	stw	r4,-12(fp)
1000fecc:	e17ffe15 	stw	r5,-8(fp)
1000fed0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000fed4:	e0fffe17 	ldw	r3,-8(fp)
1000fed8:	e0bffd17 	ldw	r2,-12(fp)
1000fedc:	18800c26 	beq	r3,r2,1000ff10 <alt_load_section+0x54>
  {
    while( to != end )
1000fee0:	00000806 	br	1000ff04 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000fee4:	e0bffe17 	ldw	r2,-8(fp)
1000fee8:	10c00104 	addi	r3,r2,4
1000feec:	e0fffe15 	stw	r3,-8(fp)
1000fef0:	e0fffd17 	ldw	r3,-12(fp)
1000fef4:	19000104 	addi	r4,r3,4
1000fef8:	e13ffd15 	stw	r4,-12(fp)
1000fefc:	18c00017 	ldw	r3,0(r3)
1000ff00:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000ff04:	e0fffe17 	ldw	r3,-8(fp)
1000ff08:	e0bfff17 	ldw	r2,-4(fp)
1000ff0c:	18bff51e 	bne	r3,r2,1000fee4 <__alt_data_end+0xf800fee4>
    {
      *to++ = *from++;
    }
  }
}
1000ff10:	0001883a 	nop
1000ff14:	e037883a 	mov	sp,fp
1000ff18:	df000017 	ldw	fp,0(sp)
1000ff1c:	dec00104 	addi	sp,sp,4
1000ff20:	f800283a 	ret

1000ff24 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000ff24:	defffe04 	addi	sp,sp,-8
1000ff28:	dfc00115 	stw	ra,4(sp)
1000ff2c:	df000015 	stw	fp,0(sp)
1000ff30:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000ff34:	01840074 	movhi	r6,4097
1000ff38:	31916c04 	addi	r6,r6,17840
1000ff3c:	01440074 	movhi	r5,4097
1000ff40:	294a6504 	addi	r5,r5,10644
1000ff44:	01040074 	movhi	r4,4097
1000ff48:	21116c04 	addi	r4,r4,17840
1000ff4c:	000febc0 	call	1000febc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000ff50:	01840034 	movhi	r6,4096
1000ff54:	31808c04 	addi	r6,r6,560
1000ff58:	01440034 	movhi	r5,4096
1000ff5c:	29400804 	addi	r5,r5,32
1000ff60:	01040034 	movhi	r4,4096
1000ff64:	21000804 	addi	r4,r4,32
1000ff68:	000febc0 	call	1000febc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000ff6c:	01840074 	movhi	r6,4097
1000ff70:	318a6504 	addi	r6,r6,10644
1000ff74:	01440074 	movhi	r5,4097
1000ff78:	29490704 	addi	r5,r5,9244
1000ff7c:	01040074 	movhi	r4,4097
1000ff80:	21090704 	addi	r4,r4,9244
1000ff84:	000febc0 	call	1000febc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000ff88:	00117540 	call	10011754 <alt_dcache_flush_all>
  alt_icache_flush_all();
1000ff8c:	0011bf00 	call	10011bf0 <alt_icache_flush_all>
}
1000ff90:	0001883a 	nop
1000ff94:	e037883a 	mov	sp,fp
1000ff98:	dfc00117 	ldw	ra,4(sp)
1000ff9c:	df000017 	ldw	fp,0(sp)
1000ffa0:	dec00204 	addi	sp,sp,8
1000ffa4:	f800283a 	ret

1000ffa8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ffa8:	defffe04 	addi	sp,sp,-8
1000ffac:	dfc00115 	stw	ra,4(sp)
1000ffb0:	df000015 	stw	fp,0(sp)
1000ffb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ffb8:	d0a01217 	ldw	r2,-32696(gp)
1000ffbc:	10000326 	beq	r2,zero,1000ffcc <alt_get_errno+0x24>
1000ffc0:	d0a01217 	ldw	r2,-32696(gp)
1000ffc4:	103ee83a 	callr	r2
1000ffc8:	00000106 	br	1000ffd0 <alt_get_errno+0x28>
1000ffcc:	d0a73104 	addi	r2,gp,-25404
}
1000ffd0:	e037883a 	mov	sp,fp
1000ffd4:	dfc00117 	ldw	ra,4(sp)
1000ffd8:	df000017 	ldw	fp,0(sp)
1000ffdc:	dec00204 	addi	sp,sp,8
1000ffe0:	f800283a 	ret

1000ffe4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000ffe4:	defff904 	addi	sp,sp,-28
1000ffe8:	dfc00615 	stw	ra,24(sp)
1000ffec:	df000515 	stw	fp,20(sp)
1000fff0:	df000504 	addi	fp,sp,20
1000fff4:	e13ffd15 	stw	r4,-12(fp)
1000fff8:	e17ffe15 	stw	r5,-8(fp)
1000fffc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10010000:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10010004:	e0bffd17 	ldw	r2,-12(fp)
10010008:	10000816 	blt	r2,zero,1001002c <lseek+0x48>
1001000c:	01400304 	movi	r5,12
10010010:	e13ffd17 	ldw	r4,-12(fp)
10010014:	000175c0 	call	1000175c <__mulsi3>
10010018:	1007883a 	mov	r3,r2
1001001c:	00840074 	movhi	r2,4097
10010020:	108cc104 	addi	r2,r2,13060
10010024:	1885883a 	add	r2,r3,r2
10010028:	00000106 	br	10010030 <lseek+0x4c>
1001002c:	0005883a 	mov	r2,zero
10010030:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10010034:	e0bffc17 	ldw	r2,-16(fp)
10010038:	10001026 	beq	r2,zero,1001007c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1001003c:	e0bffc17 	ldw	r2,-16(fp)
10010040:	10800017 	ldw	r2,0(r2)
10010044:	10800717 	ldw	r2,28(r2)
10010048:	10000926 	beq	r2,zero,10010070 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1001004c:	e0bffc17 	ldw	r2,-16(fp)
10010050:	10800017 	ldw	r2,0(r2)
10010054:	10800717 	ldw	r2,28(r2)
10010058:	e1bfff17 	ldw	r6,-4(fp)
1001005c:	e17ffe17 	ldw	r5,-8(fp)
10010060:	e13ffc17 	ldw	r4,-16(fp)
10010064:	103ee83a 	callr	r2
10010068:	e0bffb15 	stw	r2,-20(fp)
1001006c:	00000506 	br	10010084 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
10010070:	00bfde84 	movi	r2,-134
10010074:	e0bffb15 	stw	r2,-20(fp)
10010078:	00000206 	br	10010084 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1001007c:	00bfebc4 	movi	r2,-81
10010080:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
10010084:	e0bffb17 	ldw	r2,-20(fp)
10010088:	1000070e 	bge	r2,zero,100100a8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1001008c:	000ffa80 	call	1000ffa8 <alt_get_errno>
10010090:	1007883a 	mov	r3,r2
10010094:	e0bffb17 	ldw	r2,-20(fp)
10010098:	0085c83a 	sub	r2,zero,r2
1001009c:	18800015 	stw	r2,0(r3)
    rc = -1;
100100a0:	00bfffc4 	movi	r2,-1
100100a4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
100100a8:	e0bffb17 	ldw	r2,-20(fp)
}
100100ac:	e037883a 	mov	sp,fp
100100b0:	dfc00117 	ldw	ra,4(sp)
100100b4:	df000017 	ldw	fp,0(sp)
100100b8:	dec00204 	addi	sp,sp,8
100100bc:	f800283a 	ret

100100c0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
100100c0:	defffd04 	addi	sp,sp,-12
100100c4:	dfc00215 	stw	ra,8(sp)
100100c8:	df000115 	stw	fp,4(sp)
100100cc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
100100d0:	0009883a 	mov	r4,zero
100100d4:	00106ac0 	call	100106ac <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
100100d8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
100100dc:	00106e40 	call	100106e4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
100100e0:	01840074 	movhi	r6,4097
100100e4:	318a5804 	addi	r6,r6,10592
100100e8:	01440074 	movhi	r5,4097
100100ec:	294a5804 	addi	r5,r5,10592
100100f0:	01040074 	movhi	r4,4097
100100f4:	210a5804 	addi	r4,r4,10592
100100f8:	0011f940 	call	10011f94 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
100100fc:	00118540 	call	10011854 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10010100:	01040074 	movhi	r4,4097
10010104:	21062d04 	addi	r4,r4,6324
10010108:	00122740 	call	10012274 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1001010c:	d0a73817 	ldw	r2,-25376(gp)
10010110:	d0e73917 	ldw	r3,-25372(gp)
10010114:	d1273a17 	ldw	r4,-25368(gp)
10010118:	200d883a 	mov	r6,r4
1001011c:	180b883a 	mov	r5,r3
10010120:	1009883a 	mov	r4,r2
10010124:	0000b440 	call	10000b44 <main>
10010128:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1001012c:	01000044 	movi	r4,1
10010130:	000fa1c0 	call	1000fa1c <close>
  exit (result);
10010134:	e13fff17 	ldw	r4,-4(fp)
10010138:	00018000 	call	10001800 <exit>

1001013c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1001013c:	defffe04 	addi	sp,sp,-8
10010140:	df000115 	stw	fp,4(sp)
10010144:	df000104 	addi	fp,sp,4
10010148:	e13fff15 	stw	r4,-4(fp)
}
1001014c:	0001883a 	nop
10010150:	e037883a 	mov	sp,fp
10010154:	df000017 	ldw	fp,0(sp)
10010158:	dec00104 	addi	sp,sp,4
1001015c:	f800283a 	ret

10010160 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
10010160:	defffe04 	addi	sp,sp,-8
10010164:	df000115 	stw	fp,4(sp)
10010168:	df000104 	addi	fp,sp,4
1001016c:	e13fff15 	stw	r4,-4(fp)
}
10010170:	0001883a 	nop
10010174:	e037883a 	mov	sp,fp
10010178:	df000017 	ldw	fp,0(sp)
1001017c:	dec00104 	addi	sp,sp,4
10010180:	f800283a 	ret

10010184 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010184:	defffe04 	addi	sp,sp,-8
10010188:	dfc00115 	stw	ra,4(sp)
1001018c:	df000015 	stw	fp,0(sp)
10010190:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010194:	d0a01217 	ldw	r2,-32696(gp)
10010198:	10000326 	beq	r2,zero,100101a8 <alt_get_errno+0x24>
1001019c:	d0a01217 	ldw	r2,-32696(gp)
100101a0:	103ee83a 	callr	r2
100101a4:	00000106 	br	100101ac <alt_get_errno+0x28>
100101a8:	d0a73104 	addi	r2,gp,-25404
}
100101ac:	e037883a 	mov	sp,fp
100101b0:	dfc00117 	ldw	ra,4(sp)
100101b4:	df000017 	ldw	fp,0(sp)
100101b8:	dec00204 	addi	sp,sp,8
100101bc:	f800283a 	ret

100101c0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
100101c0:	defffb04 	addi	sp,sp,-20
100101c4:	dfc00415 	stw	ra,16(sp)
100101c8:	df000315 	stw	fp,12(sp)
100101cc:	dc000215 	stw	r16,8(sp)
100101d0:	df000304 	addi	fp,sp,12
100101d4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
100101d8:	e0bffe17 	ldw	r2,-8(fp)
100101dc:	10800217 	ldw	r2,8(r2)
100101e0:	10d00034 	orhi	r3,r2,16384
100101e4:	e0bffe17 	ldw	r2,-8(fp)
100101e8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100101ec:	e03ffd15 	stw	zero,-12(fp)
100101f0:	00002306 	br	10010280 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100101f4:	04040074 	movhi	r16,4097
100101f8:	840cc104 	addi	r16,r16,13060
100101fc:	e0bffd17 	ldw	r2,-12(fp)
10010200:	01400304 	movi	r5,12
10010204:	1009883a 	mov	r4,r2
10010208:	000175c0 	call	1000175c <__mulsi3>
1001020c:	8085883a 	add	r2,r16,r2
10010210:	10c00017 	ldw	r3,0(r2)
10010214:	e0bffe17 	ldw	r2,-8(fp)
10010218:	10800017 	ldw	r2,0(r2)
1001021c:	1880151e 	bne	r3,r2,10010274 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10010220:	04040074 	movhi	r16,4097
10010224:	840cc104 	addi	r16,r16,13060
10010228:	e0bffd17 	ldw	r2,-12(fp)
1001022c:	01400304 	movi	r5,12
10010230:	1009883a 	mov	r4,r2
10010234:	000175c0 	call	1000175c <__mulsi3>
10010238:	8085883a 	add	r2,r16,r2
1001023c:	10800204 	addi	r2,r2,8
10010240:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10010244:	10000b0e 	bge	r2,zero,10010274 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10010248:	01400304 	movi	r5,12
1001024c:	e13ffd17 	ldw	r4,-12(fp)
10010250:	000175c0 	call	1000175c <__mulsi3>
10010254:	1007883a 	mov	r3,r2
10010258:	00840074 	movhi	r2,4097
1001025c:	108cc104 	addi	r2,r2,13060
10010260:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10010264:	e0bffe17 	ldw	r2,-8(fp)
10010268:	18800226 	beq	r3,r2,10010274 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1001026c:	00bffcc4 	movi	r2,-13
10010270:	00000806 	br	10010294 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10010274:	e0bffd17 	ldw	r2,-12(fp)
10010278:	10800044 	addi	r2,r2,1
1001027c:	e0bffd15 	stw	r2,-12(fp)
10010280:	d0a01117 	ldw	r2,-32700(gp)
10010284:	1007883a 	mov	r3,r2
10010288:	e0bffd17 	ldw	r2,-12(fp)
1001028c:	18bfd92e 	bgeu	r3,r2,100101f4 <__alt_data_end+0xf80101f4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10010290:	0005883a 	mov	r2,zero
}
10010294:	e6ffff04 	addi	sp,fp,-4
10010298:	dfc00217 	ldw	ra,8(sp)
1001029c:	df000117 	ldw	fp,4(sp)
100102a0:	dc000017 	ldw	r16,0(sp)
100102a4:	dec00304 	addi	sp,sp,12
100102a8:	f800283a 	ret

100102ac <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
100102ac:	defff604 	addi	sp,sp,-40
100102b0:	dfc00915 	stw	ra,36(sp)
100102b4:	df000815 	stw	fp,32(sp)
100102b8:	df000804 	addi	fp,sp,32
100102bc:	e13ffd15 	stw	r4,-12(fp)
100102c0:	e17ffe15 	stw	r5,-8(fp)
100102c4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
100102c8:	00bfffc4 	movi	r2,-1
100102cc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
100102d0:	00bffb44 	movi	r2,-19
100102d4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
100102d8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
100102dc:	d1600f04 	addi	r5,gp,-32708
100102e0:	e13ffd17 	ldw	r4,-12(fp)
100102e4:	00119140 	call	10011914 <alt_find_dev>
100102e8:	e0bff815 	stw	r2,-32(fp)
100102ec:	e0bff817 	ldw	r2,-32(fp)
100102f0:	1000051e 	bne	r2,zero,10010308 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
100102f4:	e13ffd17 	ldw	r4,-12(fp)
100102f8:	00119a40 	call	100119a4 <alt_find_file>
100102fc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10010300:	00800044 	movi	r2,1
10010304:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10010308:	e0bff817 	ldw	r2,-32(fp)
1001030c:	10002b26 	beq	r2,zero,100103bc <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
10010310:	e13ff817 	ldw	r4,-32(fp)
10010314:	0011b2c0 	call	10011b2c <alt_get_fd>
10010318:	e0bff915 	stw	r2,-28(fp)
1001031c:	e0bff917 	ldw	r2,-28(fp)
10010320:	1000030e 	bge	r2,zero,10010330 <open+0x84>
    {
      status = index;
10010324:	e0bff917 	ldw	r2,-28(fp)
10010328:	e0bffa15 	stw	r2,-24(fp)
1001032c:	00002506 	br	100103c4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
10010330:	01400304 	movi	r5,12
10010334:	e13ff917 	ldw	r4,-28(fp)
10010338:	000175c0 	call	1000175c <__mulsi3>
1001033c:	1007883a 	mov	r3,r2
10010340:	00840074 	movhi	r2,4097
10010344:	108cc104 	addi	r2,r2,13060
10010348:	1885883a 	add	r2,r3,r2
1001034c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10010350:	e0fffe17 	ldw	r3,-8(fp)
10010354:	00900034 	movhi	r2,16384
10010358:	10bfffc4 	addi	r2,r2,-1
1001035c:	1886703a 	and	r3,r3,r2
10010360:	e0bffc17 	ldw	r2,-16(fp)
10010364:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10010368:	e0bffb17 	ldw	r2,-20(fp)
1001036c:	1000051e 	bne	r2,zero,10010384 <open+0xd8>
10010370:	e13ffc17 	ldw	r4,-16(fp)
10010374:	00101c00 	call	100101c0 <alt_file_locked>
10010378:	e0bffa15 	stw	r2,-24(fp)
1001037c:	e0bffa17 	ldw	r2,-24(fp)
10010380:	10001016 	blt	r2,zero,100103c4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10010384:	e0bff817 	ldw	r2,-32(fp)
10010388:	10800317 	ldw	r2,12(r2)
1001038c:	10000826 	beq	r2,zero,100103b0 <open+0x104>
10010390:	e0bff817 	ldw	r2,-32(fp)
10010394:	10800317 	ldw	r2,12(r2)
10010398:	e1ffff17 	ldw	r7,-4(fp)
1001039c:	e1bffe17 	ldw	r6,-8(fp)
100103a0:	e17ffd17 	ldw	r5,-12(fp)
100103a4:	e13ffc17 	ldw	r4,-16(fp)
100103a8:	103ee83a 	callr	r2
100103ac:	00000106 	br	100103b4 <open+0x108>
100103b0:	0005883a 	mov	r2,zero
100103b4:	e0bffa15 	stw	r2,-24(fp)
100103b8:	00000206 	br	100103c4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
100103bc:	00bffb44 	movi	r2,-19
100103c0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
100103c4:	e0bffa17 	ldw	r2,-24(fp)
100103c8:	1000090e 	bge	r2,zero,100103f0 <open+0x144>
  {
    alt_release_fd (index);  
100103cc:	e13ff917 	ldw	r4,-28(fp)
100103d0:	00104080 	call	10010408 <alt_release_fd>
    ALT_ERRNO = -status;
100103d4:	00101840 	call	10010184 <alt_get_errno>
100103d8:	1007883a 	mov	r3,r2
100103dc:	e0bffa17 	ldw	r2,-24(fp)
100103e0:	0085c83a 	sub	r2,zero,r2
100103e4:	18800015 	stw	r2,0(r3)
    return -1;
100103e8:	00bfffc4 	movi	r2,-1
100103ec:	00000106 	br	100103f4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
100103f0:	e0bff917 	ldw	r2,-28(fp)
}
100103f4:	e037883a 	mov	sp,fp
100103f8:	dfc00117 	ldw	ra,4(sp)
100103fc:	df000017 	ldw	fp,0(sp)
10010400:	dec00204 	addi	sp,sp,8
10010404:	f800283a 	ret

10010408 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10010408:	defffc04 	addi	sp,sp,-16
1001040c:	dfc00315 	stw	ra,12(sp)
10010410:	df000215 	stw	fp,8(sp)
10010414:	dc000115 	stw	r16,4(sp)
10010418:	df000204 	addi	fp,sp,8
1001041c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10010420:	e0bffe17 	ldw	r2,-8(fp)
10010424:	108000d0 	cmplti	r2,r2,3
10010428:	1000111e 	bne	r2,zero,10010470 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1001042c:	04040074 	movhi	r16,4097
10010430:	840cc104 	addi	r16,r16,13060
10010434:	e0bffe17 	ldw	r2,-8(fp)
10010438:	01400304 	movi	r5,12
1001043c:	1009883a 	mov	r4,r2
10010440:	000175c0 	call	1000175c <__mulsi3>
10010444:	8085883a 	add	r2,r16,r2
10010448:	10800204 	addi	r2,r2,8
1001044c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10010450:	04040074 	movhi	r16,4097
10010454:	840cc104 	addi	r16,r16,13060
10010458:	e0bffe17 	ldw	r2,-8(fp)
1001045c:	01400304 	movi	r5,12
10010460:	1009883a 	mov	r4,r2
10010464:	000175c0 	call	1000175c <__mulsi3>
10010468:	8085883a 	add	r2,r16,r2
1001046c:	10000015 	stw	zero,0(r2)
  }
}
10010470:	0001883a 	nop
10010474:	e6ffff04 	addi	sp,fp,-4
10010478:	dfc00217 	ldw	ra,8(sp)
1001047c:	df000117 	ldw	fp,4(sp)
10010480:	dc000017 	ldw	r16,0(sp)
10010484:	dec00304 	addi	sp,sp,12
10010488:	f800283a 	ret

1001048c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1001048c:	defff904 	addi	sp,sp,-28
10010490:	df000615 	stw	fp,24(sp)
10010494:	df000604 	addi	fp,sp,24
10010498:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001049c:	0005303a 	rdctl	r2,status
100104a0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100104a4:	e0fffe17 	ldw	r3,-8(fp)
100104a8:	00bfff84 	movi	r2,-2
100104ac:	1884703a 	and	r2,r3,r2
100104b0:	1001703a 	wrctl	status,r2
  
  return context;
100104b4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
100104b8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
100104bc:	d0a01317 	ldw	r2,-32692(gp)
100104c0:	10c000c4 	addi	r3,r2,3
100104c4:	00bfff04 	movi	r2,-4
100104c8:	1884703a 	and	r2,r3,r2
100104cc:	d0a01315 	stw	r2,-32692(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
100104d0:	d0e01317 	ldw	r3,-32692(gp)
100104d4:	e0bfff17 	ldw	r2,-4(fp)
100104d8:	1887883a 	add	r3,r3,r2
100104dc:	00860034 	movhi	r2,6144
100104e0:	10800004 	addi	r2,r2,0
100104e4:	10c0062e 	bgeu	r2,r3,10010500 <sbrk+0x74>
100104e8:	e0bffb17 	ldw	r2,-20(fp)
100104ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100104f0:	e0bffa17 	ldw	r2,-24(fp)
100104f4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
100104f8:	00bfffc4 	movi	r2,-1
100104fc:	00000b06 	br	1001052c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10010500:	d0a01317 	ldw	r2,-32692(gp)
10010504:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
10010508:	d0e01317 	ldw	r3,-32692(gp)
1001050c:	e0bfff17 	ldw	r2,-4(fp)
10010510:	1885883a 	add	r2,r3,r2
10010514:	d0a01315 	stw	r2,-32692(gp)
10010518:	e0bffb17 	ldw	r2,-20(fp)
1001051c:	e0bffc15 	stw	r2,-16(fp)
10010520:	e0bffc17 	ldw	r2,-16(fp)
10010524:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10010528:	e0bffd17 	ldw	r2,-12(fp)
} 
1001052c:	e037883a 	mov	sp,fp
10010530:	df000017 	ldw	fp,0(sp)
10010534:	dec00104 	addi	sp,sp,4
10010538:	f800283a 	ret

1001053c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001053c:	defffe04 	addi	sp,sp,-8
10010540:	dfc00115 	stw	ra,4(sp)
10010544:	df000015 	stw	fp,0(sp)
10010548:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001054c:	d0a01217 	ldw	r2,-32696(gp)
10010550:	10000326 	beq	r2,zero,10010560 <alt_get_errno+0x24>
10010554:	d0a01217 	ldw	r2,-32696(gp)
10010558:	103ee83a 	callr	r2
1001055c:	00000106 	br	10010564 <alt_get_errno+0x28>
10010560:	d0a73104 	addi	r2,gp,-25404
}
10010564:	e037883a 	mov	sp,fp
10010568:	dfc00117 	ldw	ra,4(sp)
1001056c:	df000017 	ldw	fp,0(sp)
10010570:	dec00204 	addi	sp,sp,8
10010574:	f800283a 	ret

10010578 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10010578:	defff904 	addi	sp,sp,-28
1001057c:	dfc00615 	stw	ra,24(sp)
10010580:	df000515 	stw	fp,20(sp)
10010584:	df000504 	addi	fp,sp,20
10010588:	e13ffd15 	stw	r4,-12(fp)
1001058c:	e17ffe15 	stw	r5,-8(fp)
10010590:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10010594:	e0bffd17 	ldw	r2,-12(fp)
10010598:	10000816 	blt	r2,zero,100105bc <write+0x44>
1001059c:	01400304 	movi	r5,12
100105a0:	e13ffd17 	ldw	r4,-12(fp)
100105a4:	000175c0 	call	1000175c <__mulsi3>
100105a8:	1007883a 	mov	r3,r2
100105ac:	00840074 	movhi	r2,4097
100105b0:	108cc104 	addi	r2,r2,13060
100105b4:	1885883a 	add	r2,r3,r2
100105b8:	00000106 	br	100105c0 <write+0x48>
100105bc:	0005883a 	mov	r2,zero
100105c0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
100105c4:	e0bffb17 	ldw	r2,-20(fp)
100105c8:	10002126 	beq	r2,zero,10010650 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
100105cc:	e0bffb17 	ldw	r2,-20(fp)
100105d0:	10800217 	ldw	r2,8(r2)
100105d4:	108000cc 	andi	r2,r2,3
100105d8:	10001826 	beq	r2,zero,1001063c <write+0xc4>
100105dc:	e0bffb17 	ldw	r2,-20(fp)
100105e0:	10800017 	ldw	r2,0(r2)
100105e4:	10800617 	ldw	r2,24(r2)
100105e8:	10001426 	beq	r2,zero,1001063c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
100105ec:	e0bffb17 	ldw	r2,-20(fp)
100105f0:	10800017 	ldw	r2,0(r2)
100105f4:	10800617 	ldw	r2,24(r2)
100105f8:	e0ffff17 	ldw	r3,-4(fp)
100105fc:	180d883a 	mov	r6,r3
10010600:	e17ffe17 	ldw	r5,-8(fp)
10010604:	e13ffb17 	ldw	r4,-20(fp)
10010608:	103ee83a 	callr	r2
1001060c:	e0bffc15 	stw	r2,-16(fp)
10010610:	e0bffc17 	ldw	r2,-16(fp)
10010614:	1000070e 	bge	r2,zero,10010634 <write+0xbc>
      {
        ALT_ERRNO = -rval;
10010618:	001053c0 	call	1001053c <alt_get_errno>
1001061c:	1007883a 	mov	r3,r2
10010620:	e0bffc17 	ldw	r2,-16(fp)
10010624:	0085c83a 	sub	r2,zero,r2
10010628:	18800015 	stw	r2,0(r3)
        return -1;
1001062c:	00bfffc4 	movi	r2,-1
10010630:	00000c06 	br	10010664 <write+0xec>
      }
      return rval;
10010634:	e0bffc17 	ldw	r2,-16(fp)
10010638:	00000a06 	br	10010664 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
1001063c:	001053c0 	call	1001053c <alt_get_errno>
10010640:	1007883a 	mov	r3,r2
10010644:	00800344 	movi	r2,13
10010648:	18800015 	stw	r2,0(r3)
1001064c:	00000406 	br	10010660 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10010650:	001053c0 	call	1001053c <alt_get_errno>
10010654:	1007883a 	mov	r3,r2
10010658:	00801444 	movi	r2,81
1001065c:	18800015 	stw	r2,0(r3)
  }
  return -1;
10010660:	00bfffc4 	movi	r2,-1
}
10010664:	e037883a 	mov	sp,fp
10010668:	dfc00117 	ldw	ra,4(sp)
1001066c:	df000017 	ldw	fp,0(sp)
10010670:	dec00204 	addi	sp,sp,8
10010674:	f800283a 	ret

10010678 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10010678:	defffd04 	addi	sp,sp,-12
1001067c:	dfc00215 	stw	ra,8(sp)
10010680:	df000115 	stw	fp,4(sp)
10010684:	df000104 	addi	fp,sp,4
10010688:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1001068c:	d1600f04 	addi	r5,gp,-32708
10010690:	e13fff17 	ldw	r4,-4(fp)
10010694:	00117b00 	call	100117b0 <alt_dev_llist_insert>
}
10010698:	e037883a 	mov	sp,fp
1001069c:	dfc00117 	ldw	ra,4(sp)
100106a0:	df000017 	ldw	fp,0(sp)
100106a4:	dec00204 	addi	sp,sp,8
100106a8:	f800283a 	ret

100106ac <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
100106ac:	defffd04 	addi	sp,sp,-12
100106b0:	dfc00215 	stw	ra,8(sp)
100106b4:	df000115 	stw	fp,4(sp)
100106b8:	df000104 	addi	fp,sp,4
100106bc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
100106c0:	00121b40 	call	100121b4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
100106c4:	00800044 	movi	r2,1
100106c8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
100106cc:	0001883a 	nop
100106d0:	e037883a 	mov	sp,fp
100106d4:	dfc00117 	ldw	ra,4(sp)
100106d8:	df000017 	ldw	fp,0(sp)
100106dc:	dec00204 	addi	sp,sp,8
100106e0:	f800283a 	ret

100106e4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
100106e4:	defffe04 	addi	sp,sp,-8
100106e8:	dfc00115 	stw	ra,4(sp)
100106ec:	df000015 	stw	fp,0(sp)
100106f0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
100106f4:	000d883a 	mov	r6,zero
100106f8:	000b883a 	mov	r5,zero
100106fc:	01040074 	movhi	r4,4097
10010700:	210d2b04 	addi	r4,r4,13484
10010704:	00108a00 	call	100108a0 <altera_avalon_jtag_uart_init>
10010708:	01040074 	movhi	r4,4097
1001070c:	210d2104 	addi	r4,r4,13444
10010710:	00106780 	call	10010678 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10010714:	0001883a 	nop
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
10010718:	01040074 	movhi	r4,4097
1001071c:	21113904 	addi	r4,r4,17636
10010720:	0011aac0 	call	10011aac <alt_fs_reg>
}
10010724:	0001883a 	nop
10010728:	e037883a 	mov	sp,fp
1001072c:	dfc00117 	ldw	ra,4(sp)
10010730:	df000017 	ldw	fp,0(sp)
10010734:	dec00204 	addi	sp,sp,8
10010738:	f800283a 	ret

1001073c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1001073c:	defffa04 	addi	sp,sp,-24
10010740:	dfc00515 	stw	ra,20(sp)
10010744:	df000415 	stw	fp,16(sp)
10010748:	df000404 	addi	fp,sp,16
1001074c:	e13ffd15 	stw	r4,-12(fp)
10010750:	e17ffe15 	stw	r5,-8(fp)
10010754:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010758:	e0bffd17 	ldw	r2,-12(fp)
1001075c:	10800017 	ldw	r2,0(r2)
10010760:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10010764:	e0bffc17 	ldw	r2,-16(fp)
10010768:	10c00a04 	addi	r3,r2,40
1001076c:	e0bffd17 	ldw	r2,-12(fp)
10010770:	10800217 	ldw	r2,8(r2)
10010774:	100f883a 	mov	r7,r2
10010778:	e1bfff17 	ldw	r6,-4(fp)
1001077c:	e17ffe17 	ldw	r5,-8(fp)
10010780:	1809883a 	mov	r4,r3
10010784:	0010d640 	call	10010d64 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10010788:	e037883a 	mov	sp,fp
1001078c:	dfc00117 	ldw	ra,4(sp)
10010790:	df000017 	ldw	fp,0(sp)
10010794:	dec00204 	addi	sp,sp,8
10010798:	f800283a 	ret

1001079c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1001079c:	defffa04 	addi	sp,sp,-24
100107a0:	dfc00515 	stw	ra,20(sp)
100107a4:	df000415 	stw	fp,16(sp)
100107a8:	df000404 	addi	fp,sp,16
100107ac:	e13ffd15 	stw	r4,-12(fp)
100107b0:	e17ffe15 	stw	r5,-8(fp)
100107b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100107b8:	e0bffd17 	ldw	r2,-12(fp)
100107bc:	10800017 	ldw	r2,0(r2)
100107c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
100107c4:	e0bffc17 	ldw	r2,-16(fp)
100107c8:	10c00a04 	addi	r3,r2,40
100107cc:	e0bffd17 	ldw	r2,-12(fp)
100107d0:	10800217 	ldw	r2,8(r2)
100107d4:	100f883a 	mov	r7,r2
100107d8:	e1bfff17 	ldw	r6,-4(fp)
100107dc:	e17ffe17 	ldw	r5,-8(fp)
100107e0:	1809883a 	mov	r4,r3
100107e4:	0010f800 	call	10010f80 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
100107e8:	e037883a 	mov	sp,fp
100107ec:	dfc00117 	ldw	ra,4(sp)
100107f0:	df000017 	ldw	fp,0(sp)
100107f4:	dec00204 	addi	sp,sp,8
100107f8:	f800283a 	ret

100107fc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
100107fc:	defffc04 	addi	sp,sp,-16
10010800:	dfc00315 	stw	ra,12(sp)
10010804:	df000215 	stw	fp,8(sp)
10010808:	df000204 	addi	fp,sp,8
1001080c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010810:	e0bfff17 	ldw	r2,-4(fp)
10010814:	10800017 	ldw	r2,0(r2)
10010818:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1001081c:	e0bffe17 	ldw	r2,-8(fp)
10010820:	10c00a04 	addi	r3,r2,40
10010824:	e0bfff17 	ldw	r2,-4(fp)
10010828:	10800217 	ldw	r2,8(r2)
1001082c:	100b883a 	mov	r5,r2
10010830:	1809883a 	mov	r4,r3
10010834:	0010c0c0 	call	10010c0c <altera_avalon_jtag_uart_close>
}
10010838:	e037883a 	mov	sp,fp
1001083c:	dfc00117 	ldw	ra,4(sp)
10010840:	df000017 	ldw	fp,0(sp)
10010844:	dec00204 	addi	sp,sp,8
10010848:	f800283a 	ret

1001084c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1001084c:	defffa04 	addi	sp,sp,-24
10010850:	dfc00515 	stw	ra,20(sp)
10010854:	df000415 	stw	fp,16(sp)
10010858:	df000404 	addi	fp,sp,16
1001085c:	e13ffd15 	stw	r4,-12(fp)
10010860:	e17ffe15 	stw	r5,-8(fp)
10010864:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10010868:	e0bffd17 	ldw	r2,-12(fp)
1001086c:	10800017 	ldw	r2,0(r2)
10010870:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10010874:	e0bffc17 	ldw	r2,-16(fp)
10010878:	10800a04 	addi	r2,r2,40
1001087c:	e1bfff17 	ldw	r6,-4(fp)
10010880:	e17ffe17 	ldw	r5,-8(fp)
10010884:	1009883a 	mov	r4,r2
10010888:	0010c740 	call	10010c74 <altera_avalon_jtag_uart_ioctl>
}
1001088c:	e037883a 	mov	sp,fp
10010890:	dfc00117 	ldw	ra,4(sp)
10010894:	df000017 	ldw	fp,0(sp)
10010898:	dec00204 	addi	sp,sp,8
1001089c:	f800283a 	ret

100108a0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
100108a0:	defffa04 	addi	sp,sp,-24
100108a4:	dfc00515 	stw	ra,20(sp)
100108a8:	df000415 	stw	fp,16(sp)
100108ac:	df000404 	addi	fp,sp,16
100108b0:	e13ffd15 	stw	r4,-12(fp)
100108b4:	e17ffe15 	stw	r5,-8(fp)
100108b8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100108bc:	e0bffd17 	ldw	r2,-12(fp)
100108c0:	00c00044 	movi	r3,1
100108c4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
100108c8:	e0bffd17 	ldw	r2,-12(fp)
100108cc:	10800017 	ldw	r2,0(r2)
100108d0:	10800104 	addi	r2,r2,4
100108d4:	1007883a 	mov	r3,r2
100108d8:	e0bffd17 	ldw	r2,-12(fp)
100108dc:	10800817 	ldw	r2,32(r2)
100108e0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
100108e4:	e0bffe17 	ldw	r2,-8(fp)
100108e8:	e0ffff17 	ldw	r3,-4(fp)
100108ec:	d8000015 	stw	zero,0(sp)
100108f0:	e1fffd17 	ldw	r7,-12(fp)
100108f4:	01840074 	movhi	r6,4097
100108f8:	31825804 	addi	r6,r6,2400
100108fc:	180b883a 	mov	r5,r3
10010900:	1009883a 	mov	r4,r2
10010904:	0011c100 	call	10011c10 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10010908:	e0bffd17 	ldw	r2,-12(fp)
1001090c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10010910:	e0bffd17 	ldw	r2,-12(fp)
10010914:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10010918:	d0e73c17 	ldw	r3,-25360(gp)
1001091c:	e1fffd17 	ldw	r7,-12(fp)
10010920:	01840074 	movhi	r6,4097
10010924:	3182db04 	addi	r6,r6,2924
10010928:	180b883a 	mov	r5,r3
1001092c:	1009883a 	mov	r4,r2
10010930:	00116280 	call	10011628 <alt_alarm_start>
10010934:	1000040e 	bge	r2,zero,10010948 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10010938:	e0fffd17 	ldw	r3,-12(fp)
1001093c:	00a00034 	movhi	r2,32768
10010940:	10bfffc4 	addi	r2,r2,-1
10010944:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10010948:	0001883a 	nop
1001094c:	e037883a 	mov	sp,fp
10010950:	dfc00117 	ldw	ra,4(sp)
10010954:	df000017 	ldw	fp,0(sp)
10010958:	dec00204 	addi	sp,sp,8
1001095c:	f800283a 	ret

10010960 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10010960:	defff804 	addi	sp,sp,-32
10010964:	df000715 	stw	fp,28(sp)
10010968:	df000704 	addi	fp,sp,28
1001096c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10010970:	e0bfff17 	ldw	r2,-4(fp)
10010974:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10010978:	e0bffb17 	ldw	r2,-20(fp)
1001097c:	10800017 	ldw	r2,0(r2)
10010980:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010984:	e0bffc17 	ldw	r2,-16(fp)
10010988:	10800104 	addi	r2,r2,4
1001098c:	10800037 	ldwio	r2,0(r2)
10010990:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10010994:	e0bffd17 	ldw	r2,-12(fp)
10010998:	1080c00c 	andi	r2,r2,768
1001099c:	10006d26 	beq	r2,zero,10010b54 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
100109a0:	e0bffd17 	ldw	r2,-12(fp)
100109a4:	1080400c 	andi	r2,r2,256
100109a8:	10003526 	beq	r2,zero,10010a80 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
100109ac:	00800074 	movhi	r2,1
100109b0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100109b4:	e0bffb17 	ldw	r2,-20(fp)
100109b8:	10800a17 	ldw	r2,40(r2)
100109bc:	10800044 	addi	r2,r2,1
100109c0:	1081ffcc 	andi	r2,r2,2047
100109c4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
100109c8:	e0bffb17 	ldw	r2,-20(fp)
100109cc:	10c00b17 	ldw	r3,44(r2)
100109d0:	e0bffe17 	ldw	r2,-8(fp)
100109d4:	18801526 	beq	r3,r2,10010a2c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
100109d8:	e0bffc17 	ldw	r2,-16(fp)
100109dc:	10800037 	ldwio	r2,0(r2)
100109e0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
100109e4:	e0bff917 	ldw	r2,-28(fp)
100109e8:	10a0000c 	andi	r2,r2,32768
100109ec:	10001126 	beq	r2,zero,10010a34 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
100109f0:	e0bffb17 	ldw	r2,-20(fp)
100109f4:	10800a17 	ldw	r2,40(r2)
100109f8:	e0fff917 	ldw	r3,-28(fp)
100109fc:	1809883a 	mov	r4,r3
10010a00:	e0fffb17 	ldw	r3,-20(fp)
10010a04:	1885883a 	add	r2,r3,r2
10010a08:	10800e04 	addi	r2,r2,56
10010a0c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010a10:	e0bffb17 	ldw	r2,-20(fp)
10010a14:	10800a17 	ldw	r2,40(r2)
10010a18:	10800044 	addi	r2,r2,1
10010a1c:	10c1ffcc 	andi	r3,r2,2047
10010a20:	e0bffb17 	ldw	r2,-20(fp)
10010a24:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10010a28:	003fe206 	br	100109b4 <__alt_data_end+0xf80109b4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
10010a2c:	0001883a 	nop
10010a30:	00000106 	br	10010a38 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10010a34:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10010a38:	e0bff917 	ldw	r2,-28(fp)
10010a3c:	10bfffec 	andhi	r2,r2,65535
10010a40:	10000f26 	beq	r2,zero,10010a80 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010a44:	e0bffb17 	ldw	r2,-20(fp)
10010a48:	10c00817 	ldw	r3,32(r2)
10010a4c:	00bfff84 	movi	r2,-2
10010a50:	1886703a 	and	r3,r3,r2
10010a54:	e0bffb17 	ldw	r2,-20(fp)
10010a58:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10010a5c:	e0bffc17 	ldw	r2,-16(fp)
10010a60:	10800104 	addi	r2,r2,4
10010a64:	1007883a 	mov	r3,r2
10010a68:	e0bffb17 	ldw	r2,-20(fp)
10010a6c:	10800817 	ldw	r2,32(r2)
10010a70:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010a74:	e0bffc17 	ldw	r2,-16(fp)
10010a78:	10800104 	addi	r2,r2,4
10010a7c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10010a80:	e0bffd17 	ldw	r2,-12(fp)
10010a84:	1080800c 	andi	r2,r2,512
10010a88:	103fbe26 	beq	r2,zero,10010984 <__alt_data_end+0xf8010984>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10010a8c:	e0bffd17 	ldw	r2,-12(fp)
10010a90:	1004d43a 	srli	r2,r2,16
10010a94:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10010a98:	00001406 	br	10010aec <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10010a9c:	e0bffc17 	ldw	r2,-16(fp)
10010aa0:	e0fffb17 	ldw	r3,-20(fp)
10010aa4:	18c00d17 	ldw	r3,52(r3)
10010aa8:	e13ffb17 	ldw	r4,-20(fp)
10010aac:	20c7883a 	add	r3,r4,r3
10010ab0:	18c20e04 	addi	r3,r3,2104
10010ab4:	18c00003 	ldbu	r3,0(r3)
10010ab8:	18c03fcc 	andi	r3,r3,255
10010abc:	18c0201c 	xori	r3,r3,128
10010ac0:	18ffe004 	addi	r3,r3,-128
10010ac4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010ac8:	e0bffb17 	ldw	r2,-20(fp)
10010acc:	10800d17 	ldw	r2,52(r2)
10010ad0:	10800044 	addi	r2,r2,1
10010ad4:	10c1ffcc 	andi	r3,r2,2047
10010ad8:	e0bffb17 	ldw	r2,-20(fp)
10010adc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10010ae0:	e0bffa17 	ldw	r2,-24(fp)
10010ae4:	10bfffc4 	addi	r2,r2,-1
10010ae8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10010aec:	e0bffa17 	ldw	r2,-24(fp)
10010af0:	10000526 	beq	r2,zero,10010b08 <altera_avalon_jtag_uart_irq+0x1a8>
10010af4:	e0bffb17 	ldw	r2,-20(fp)
10010af8:	10c00d17 	ldw	r3,52(r2)
10010afc:	e0bffb17 	ldw	r2,-20(fp)
10010b00:	10800c17 	ldw	r2,48(r2)
10010b04:	18bfe51e 	bne	r3,r2,10010a9c <__alt_data_end+0xf8010a9c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10010b08:	e0bffa17 	ldw	r2,-24(fp)
10010b0c:	103f9d26 	beq	r2,zero,10010984 <__alt_data_end+0xf8010984>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10010b10:	e0bffb17 	ldw	r2,-20(fp)
10010b14:	10c00817 	ldw	r3,32(r2)
10010b18:	00bfff44 	movi	r2,-3
10010b1c:	1886703a 	and	r3,r3,r2
10010b20:	e0bffb17 	ldw	r2,-20(fp)
10010b24:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010b28:	e0bffb17 	ldw	r2,-20(fp)
10010b2c:	10800017 	ldw	r2,0(r2)
10010b30:	10800104 	addi	r2,r2,4
10010b34:	1007883a 	mov	r3,r2
10010b38:	e0bffb17 	ldw	r2,-20(fp)
10010b3c:	10800817 	ldw	r2,32(r2)
10010b40:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010b44:	e0bffc17 	ldw	r2,-16(fp)
10010b48:	10800104 	addi	r2,r2,4
10010b4c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10010b50:	003f8c06 	br	10010984 <__alt_data_end+0xf8010984>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10010b54:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10010b58:	0001883a 	nop
10010b5c:	e037883a 	mov	sp,fp
10010b60:	df000017 	ldw	fp,0(sp)
10010b64:	dec00104 	addi	sp,sp,4
10010b68:	f800283a 	ret

10010b6c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10010b6c:	defff804 	addi	sp,sp,-32
10010b70:	df000715 	stw	fp,28(sp)
10010b74:	df000704 	addi	fp,sp,28
10010b78:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10010b7c:	e0bffb17 	ldw	r2,-20(fp)
10010b80:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10010b84:	e0bff917 	ldw	r2,-28(fp)
10010b88:	10800017 	ldw	r2,0(r2)
10010b8c:	10800104 	addi	r2,r2,4
10010b90:	10800037 	ldwio	r2,0(r2)
10010b94:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10010b98:	e0bffa17 	ldw	r2,-24(fp)
10010b9c:	1081000c 	andi	r2,r2,1024
10010ba0:	10000b26 	beq	r2,zero,10010bd0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10010ba4:	e0bff917 	ldw	r2,-28(fp)
10010ba8:	10800017 	ldw	r2,0(r2)
10010bac:	10800104 	addi	r2,r2,4
10010bb0:	1007883a 	mov	r3,r2
10010bb4:	e0bff917 	ldw	r2,-28(fp)
10010bb8:	10800817 	ldw	r2,32(r2)
10010bbc:	10810014 	ori	r2,r2,1024
10010bc0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10010bc4:	e0bff917 	ldw	r2,-28(fp)
10010bc8:	10000915 	stw	zero,36(r2)
10010bcc:	00000a06 	br	10010bf8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10010bd0:	e0bff917 	ldw	r2,-28(fp)
10010bd4:	10c00917 	ldw	r3,36(r2)
10010bd8:	00a00034 	movhi	r2,32768
10010bdc:	10bfff04 	addi	r2,r2,-4
10010be0:	10c00536 	bltu	r2,r3,10010bf8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10010be4:	e0bff917 	ldw	r2,-28(fp)
10010be8:	10800917 	ldw	r2,36(r2)
10010bec:	10c00044 	addi	r3,r2,1
10010bf0:	e0bff917 	ldw	r2,-28(fp)
10010bf4:	10c00915 	stw	r3,36(r2)
10010bf8:	d0a73c17 	ldw	r2,-25360(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10010bfc:	e037883a 	mov	sp,fp
10010c00:	df000017 	ldw	fp,0(sp)
10010c04:	dec00104 	addi	sp,sp,4
10010c08:	f800283a 	ret

10010c0c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10010c0c:	defffd04 	addi	sp,sp,-12
10010c10:	df000215 	stw	fp,8(sp)
10010c14:	df000204 	addi	fp,sp,8
10010c18:	e13ffe15 	stw	r4,-8(fp)
10010c1c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10010c20:	00000506 	br	10010c38 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10010c24:	e0bfff17 	ldw	r2,-4(fp)
10010c28:	1090000c 	andi	r2,r2,16384
10010c2c:	10000226 	beq	r2,zero,10010c38 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10010c30:	00bffd44 	movi	r2,-11
10010c34:	00000b06 	br	10010c64 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10010c38:	e0bffe17 	ldw	r2,-8(fp)
10010c3c:	10c00d17 	ldw	r3,52(r2)
10010c40:	e0bffe17 	ldw	r2,-8(fp)
10010c44:	10800c17 	ldw	r2,48(r2)
10010c48:	18800526 	beq	r3,r2,10010c60 <altera_avalon_jtag_uart_close+0x54>
10010c4c:	e0bffe17 	ldw	r2,-8(fp)
10010c50:	10c00917 	ldw	r3,36(r2)
10010c54:	e0bffe17 	ldw	r2,-8(fp)
10010c58:	10800117 	ldw	r2,4(r2)
10010c5c:	18bff136 	bltu	r3,r2,10010c24 <__alt_data_end+0xf8010c24>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10010c60:	0005883a 	mov	r2,zero
}
10010c64:	e037883a 	mov	sp,fp
10010c68:	df000017 	ldw	fp,0(sp)
10010c6c:	dec00104 	addi	sp,sp,4
10010c70:	f800283a 	ret

10010c74 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10010c74:	defffa04 	addi	sp,sp,-24
10010c78:	df000515 	stw	fp,20(sp)
10010c7c:	df000504 	addi	fp,sp,20
10010c80:	e13ffd15 	stw	r4,-12(fp)
10010c84:	e17ffe15 	stw	r5,-8(fp)
10010c88:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10010c8c:	00bff9c4 	movi	r2,-25
10010c90:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10010c94:	e0bffe17 	ldw	r2,-8(fp)
10010c98:	10da8060 	cmpeqi	r3,r2,27137
10010c9c:	1800031e 	bne	r3,zero,10010cac <altera_avalon_jtag_uart_ioctl+0x38>
10010ca0:	109a80a0 	cmpeqi	r2,r2,27138
10010ca4:	1000181e 	bne	r2,zero,10010d08 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10010ca8:	00002906 	br	10010d50 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10010cac:	e0bffd17 	ldw	r2,-12(fp)
10010cb0:	10c00117 	ldw	r3,4(r2)
10010cb4:	00a00034 	movhi	r2,32768
10010cb8:	10bfffc4 	addi	r2,r2,-1
10010cbc:	18802126 	beq	r3,r2,10010d44 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10010cc0:	e0bfff17 	ldw	r2,-4(fp)
10010cc4:	10800017 	ldw	r2,0(r2)
10010cc8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10010ccc:	e0bffc17 	ldw	r2,-16(fp)
10010cd0:	10800090 	cmplti	r2,r2,2
10010cd4:	1000061e 	bne	r2,zero,10010cf0 <altera_avalon_jtag_uart_ioctl+0x7c>
10010cd8:	e0fffc17 	ldw	r3,-16(fp)
10010cdc:	00a00034 	movhi	r2,32768
10010ce0:	10bfffc4 	addi	r2,r2,-1
10010ce4:	18800226 	beq	r3,r2,10010cf0 <altera_avalon_jtag_uart_ioctl+0x7c>
10010ce8:	e0bffc17 	ldw	r2,-16(fp)
10010cec:	00000206 	br	10010cf8 <altera_avalon_jtag_uart_ioctl+0x84>
10010cf0:	00a00034 	movhi	r2,32768
10010cf4:	10bfff84 	addi	r2,r2,-2
10010cf8:	e0fffd17 	ldw	r3,-12(fp)
10010cfc:	18800115 	stw	r2,4(r3)
      rc = 0;
10010d00:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10010d04:	00000f06 	br	10010d44 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10010d08:	e0bffd17 	ldw	r2,-12(fp)
10010d0c:	10c00117 	ldw	r3,4(r2)
10010d10:	00a00034 	movhi	r2,32768
10010d14:	10bfffc4 	addi	r2,r2,-1
10010d18:	18800c26 	beq	r3,r2,10010d4c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10010d1c:	e0bffd17 	ldw	r2,-12(fp)
10010d20:	10c00917 	ldw	r3,36(r2)
10010d24:	e0bffd17 	ldw	r2,-12(fp)
10010d28:	10800117 	ldw	r2,4(r2)
10010d2c:	1885803a 	cmpltu	r2,r3,r2
10010d30:	10c03fcc 	andi	r3,r2,255
10010d34:	e0bfff17 	ldw	r2,-4(fp)
10010d38:	10c00015 	stw	r3,0(r2)
      rc = 0;
10010d3c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10010d40:	00000206 	br	10010d4c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10010d44:	0001883a 	nop
10010d48:	00000106 	br	10010d50 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10010d4c:	0001883a 	nop

  default:
    break;
  }

  return rc;
10010d50:	e0bffb17 	ldw	r2,-20(fp)
}
10010d54:	e037883a 	mov	sp,fp
10010d58:	df000017 	ldw	fp,0(sp)
10010d5c:	dec00104 	addi	sp,sp,4
10010d60:	f800283a 	ret

10010d64 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10010d64:	defff304 	addi	sp,sp,-52
10010d68:	dfc00c15 	stw	ra,48(sp)
10010d6c:	df000b15 	stw	fp,44(sp)
10010d70:	df000b04 	addi	fp,sp,44
10010d74:	e13ffc15 	stw	r4,-16(fp)
10010d78:	e17ffd15 	stw	r5,-12(fp)
10010d7c:	e1bffe15 	stw	r6,-8(fp)
10010d80:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10010d84:	e0bffd17 	ldw	r2,-12(fp)
10010d88:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10010d8c:	00004706 	br	10010eac <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10010d90:	e0bffc17 	ldw	r2,-16(fp)
10010d94:	10800a17 	ldw	r2,40(r2)
10010d98:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10010d9c:	e0bffc17 	ldw	r2,-16(fp)
10010da0:	10800b17 	ldw	r2,44(r2)
10010da4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10010da8:	e0fff717 	ldw	r3,-36(fp)
10010dac:	e0bff817 	ldw	r2,-32(fp)
10010db0:	18800536 	bltu	r3,r2,10010dc8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10010db4:	e0fff717 	ldw	r3,-36(fp)
10010db8:	e0bff817 	ldw	r2,-32(fp)
10010dbc:	1885c83a 	sub	r2,r3,r2
10010dc0:	e0bff615 	stw	r2,-40(fp)
10010dc4:	00000406 	br	10010dd8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10010dc8:	00c20004 	movi	r3,2048
10010dcc:	e0bff817 	ldw	r2,-32(fp)
10010dd0:	1885c83a 	sub	r2,r3,r2
10010dd4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10010dd8:	e0bff617 	ldw	r2,-40(fp)
10010ddc:	10001e26 	beq	r2,zero,10010e58 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10010de0:	e0fffe17 	ldw	r3,-8(fp)
10010de4:	e0bff617 	ldw	r2,-40(fp)
10010de8:	1880022e 	bgeu	r3,r2,10010df4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
10010dec:	e0bffe17 	ldw	r2,-8(fp)
10010df0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10010df4:	e0bffc17 	ldw	r2,-16(fp)
10010df8:	10c00e04 	addi	r3,r2,56
10010dfc:	e0bff817 	ldw	r2,-32(fp)
10010e00:	1885883a 	add	r2,r3,r2
10010e04:	e1bff617 	ldw	r6,-40(fp)
10010e08:	100b883a 	mov	r5,r2
10010e0c:	e13ff517 	ldw	r4,-44(fp)
10010e10:	0003a680 	call	10003a68 <memcpy>
      ptr   += n;
10010e14:	e0fff517 	ldw	r3,-44(fp)
10010e18:	e0bff617 	ldw	r2,-40(fp)
10010e1c:	1885883a 	add	r2,r3,r2
10010e20:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10010e24:	e0fffe17 	ldw	r3,-8(fp)
10010e28:	e0bff617 	ldw	r2,-40(fp)
10010e2c:	1885c83a 	sub	r2,r3,r2
10010e30:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010e34:	e0fff817 	ldw	r3,-32(fp)
10010e38:	e0bff617 	ldw	r2,-40(fp)
10010e3c:	1885883a 	add	r2,r3,r2
10010e40:	10c1ffcc 	andi	r3,r2,2047
10010e44:	e0bffc17 	ldw	r2,-16(fp)
10010e48:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10010e4c:	e0bffe17 	ldw	r2,-8(fp)
10010e50:	00bfcf16 	blt	zero,r2,10010d90 <__alt_data_end+0xf8010d90>
10010e54:	00000106 	br	10010e5c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10010e58:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10010e5c:	e0fff517 	ldw	r3,-44(fp)
10010e60:	e0bffd17 	ldw	r2,-12(fp)
10010e64:	1880141e 	bne	r3,r2,10010eb8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10010e68:	e0bfff17 	ldw	r2,-4(fp)
10010e6c:	1090000c 	andi	r2,r2,16384
10010e70:	1000131e 	bne	r2,zero,10010ec0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10010e74:	0001883a 	nop
10010e78:	e0bffc17 	ldw	r2,-16(fp)
10010e7c:	10c00a17 	ldw	r3,40(r2)
10010e80:	e0bff717 	ldw	r2,-36(fp)
10010e84:	1880051e 	bne	r3,r2,10010e9c <altera_avalon_jtag_uart_read+0x138>
10010e88:	e0bffc17 	ldw	r2,-16(fp)
10010e8c:	10c00917 	ldw	r3,36(r2)
10010e90:	e0bffc17 	ldw	r2,-16(fp)
10010e94:	10800117 	ldw	r2,4(r2)
10010e98:	18bff736 	bltu	r3,r2,10010e78 <__alt_data_end+0xf8010e78>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10010e9c:	e0bffc17 	ldw	r2,-16(fp)
10010ea0:	10c00a17 	ldw	r3,40(r2)
10010ea4:	e0bff717 	ldw	r2,-36(fp)
10010ea8:	18800726 	beq	r3,r2,10010ec8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10010eac:	e0bffe17 	ldw	r2,-8(fp)
10010eb0:	00bfb716 	blt	zero,r2,10010d90 <__alt_data_end+0xf8010d90>
10010eb4:	00000506 	br	10010ecc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10010eb8:	0001883a 	nop
10010ebc:	00000306 	br	10010ecc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10010ec0:	0001883a 	nop
10010ec4:	00000106 	br	10010ecc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10010ec8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10010ecc:	e0fff517 	ldw	r3,-44(fp)
10010ed0:	e0bffd17 	ldw	r2,-12(fp)
10010ed4:	18801826 	beq	r3,r2,10010f38 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010ed8:	0005303a 	rdctl	r2,status
10010edc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010ee0:	e0fffb17 	ldw	r3,-20(fp)
10010ee4:	00bfff84 	movi	r2,-2
10010ee8:	1884703a 	and	r2,r3,r2
10010eec:	1001703a 	wrctl	status,r2
  
  return context;
10010ef0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10010ef4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010ef8:	e0bffc17 	ldw	r2,-16(fp)
10010efc:	10800817 	ldw	r2,32(r2)
10010f00:	10c00054 	ori	r3,r2,1
10010f04:	e0bffc17 	ldw	r2,-16(fp)
10010f08:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010f0c:	e0bffc17 	ldw	r2,-16(fp)
10010f10:	10800017 	ldw	r2,0(r2)
10010f14:	10800104 	addi	r2,r2,4
10010f18:	1007883a 	mov	r3,r2
10010f1c:	e0bffc17 	ldw	r2,-16(fp)
10010f20:	10800817 	ldw	r2,32(r2)
10010f24:	18800035 	stwio	r2,0(r3)
10010f28:	e0bffa17 	ldw	r2,-24(fp)
10010f2c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010f30:	e0bff917 	ldw	r2,-28(fp)
10010f34:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10010f38:	e0fff517 	ldw	r3,-44(fp)
10010f3c:	e0bffd17 	ldw	r2,-12(fp)
10010f40:	18800426 	beq	r3,r2,10010f54 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10010f44:	e0fff517 	ldw	r3,-44(fp)
10010f48:	e0bffd17 	ldw	r2,-12(fp)
10010f4c:	1885c83a 	sub	r2,r3,r2
10010f50:	00000606 	br	10010f6c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10010f54:	e0bfff17 	ldw	r2,-4(fp)
10010f58:	1090000c 	andi	r2,r2,16384
10010f5c:	10000226 	beq	r2,zero,10010f68 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10010f60:	00bffd44 	movi	r2,-11
10010f64:	00000106 	br	10010f6c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10010f68:	00bffec4 	movi	r2,-5
}
10010f6c:	e037883a 	mov	sp,fp
10010f70:	dfc00117 	ldw	ra,4(sp)
10010f74:	df000017 	ldw	fp,0(sp)
10010f78:	dec00204 	addi	sp,sp,8
10010f7c:	f800283a 	ret

10010f80 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10010f80:	defff304 	addi	sp,sp,-52
10010f84:	dfc00c15 	stw	ra,48(sp)
10010f88:	df000b15 	stw	fp,44(sp)
10010f8c:	df000b04 	addi	fp,sp,44
10010f90:	e13ffc15 	stw	r4,-16(fp)
10010f94:	e17ffd15 	stw	r5,-12(fp)
10010f98:	e1bffe15 	stw	r6,-8(fp)
10010f9c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10010fa0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10010fa4:	e0bffd17 	ldw	r2,-12(fp)
10010fa8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10010fac:	00003706 	br	1001108c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10010fb0:	e0bffc17 	ldw	r2,-16(fp)
10010fb4:	10800c17 	ldw	r2,48(r2)
10010fb8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10010fbc:	e0bffc17 	ldw	r2,-16(fp)
10010fc0:	10800d17 	ldw	r2,52(r2)
10010fc4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10010fc8:	e0fff917 	ldw	r3,-28(fp)
10010fcc:	e0bff517 	ldw	r2,-44(fp)
10010fd0:	1880062e 	bgeu	r3,r2,10010fec <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10010fd4:	e0fff517 	ldw	r3,-44(fp)
10010fd8:	e0bff917 	ldw	r2,-28(fp)
10010fdc:	1885c83a 	sub	r2,r3,r2
10010fe0:	10bfffc4 	addi	r2,r2,-1
10010fe4:	e0bff615 	stw	r2,-40(fp)
10010fe8:	00000b06 	br	10011018 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10010fec:	e0bff517 	ldw	r2,-44(fp)
10010ff0:	10000526 	beq	r2,zero,10011008 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10010ff4:	00c20004 	movi	r3,2048
10010ff8:	e0bff917 	ldw	r2,-28(fp)
10010ffc:	1885c83a 	sub	r2,r3,r2
10011000:	e0bff615 	stw	r2,-40(fp)
10011004:	00000406 	br	10011018 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10011008:	00c1ffc4 	movi	r3,2047
1001100c:	e0bff917 	ldw	r2,-28(fp)
10011010:	1885c83a 	sub	r2,r3,r2
10011014:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10011018:	e0bff617 	ldw	r2,-40(fp)
1001101c:	10001e26 	beq	r2,zero,10011098 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10011020:	e0fffe17 	ldw	r3,-8(fp)
10011024:	e0bff617 	ldw	r2,-40(fp)
10011028:	1880022e 	bgeu	r3,r2,10011034 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
1001102c:	e0bffe17 	ldw	r2,-8(fp)
10011030:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10011034:	e0bffc17 	ldw	r2,-16(fp)
10011038:	10c20e04 	addi	r3,r2,2104
1001103c:	e0bff917 	ldw	r2,-28(fp)
10011040:	1885883a 	add	r2,r3,r2
10011044:	e1bff617 	ldw	r6,-40(fp)
10011048:	e17ffd17 	ldw	r5,-12(fp)
1001104c:	1009883a 	mov	r4,r2
10011050:	0003a680 	call	10003a68 <memcpy>
      ptr   += n;
10011054:	e0fffd17 	ldw	r3,-12(fp)
10011058:	e0bff617 	ldw	r2,-40(fp)
1001105c:	1885883a 	add	r2,r3,r2
10011060:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10011064:	e0fffe17 	ldw	r3,-8(fp)
10011068:	e0bff617 	ldw	r2,-40(fp)
1001106c:	1885c83a 	sub	r2,r3,r2
10011070:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10011074:	e0fff917 	ldw	r3,-28(fp)
10011078:	e0bff617 	ldw	r2,-40(fp)
1001107c:	1885883a 	add	r2,r3,r2
10011080:	10c1ffcc 	andi	r3,r2,2047
10011084:	e0bffc17 	ldw	r2,-16(fp)
10011088:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1001108c:	e0bffe17 	ldw	r2,-8(fp)
10011090:	00bfc716 	blt	zero,r2,10010fb0 <__alt_data_end+0xf8010fb0>
10011094:	00000106 	br	1001109c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10011098:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001109c:	0005303a 	rdctl	r2,status
100110a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100110a4:	e0fffb17 	ldw	r3,-20(fp)
100110a8:	00bfff84 	movi	r2,-2
100110ac:	1884703a 	and	r2,r3,r2
100110b0:	1001703a 	wrctl	status,r2
  
  return context;
100110b4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
100110b8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100110bc:	e0bffc17 	ldw	r2,-16(fp)
100110c0:	10800817 	ldw	r2,32(r2)
100110c4:	10c00094 	ori	r3,r2,2
100110c8:	e0bffc17 	ldw	r2,-16(fp)
100110cc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100110d0:	e0bffc17 	ldw	r2,-16(fp)
100110d4:	10800017 	ldw	r2,0(r2)
100110d8:	10800104 	addi	r2,r2,4
100110dc:	1007883a 	mov	r3,r2
100110e0:	e0bffc17 	ldw	r2,-16(fp)
100110e4:	10800817 	ldw	r2,32(r2)
100110e8:	18800035 	stwio	r2,0(r3)
100110ec:	e0bffa17 	ldw	r2,-24(fp)
100110f0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100110f4:	e0bff817 	ldw	r2,-32(fp)
100110f8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
100110fc:	e0bffe17 	ldw	r2,-8(fp)
10011100:	0080100e 	bge	zero,r2,10011144 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10011104:	e0bfff17 	ldw	r2,-4(fp)
10011108:	1090000c 	andi	r2,r2,16384
1001110c:	1000101e 	bne	r2,zero,10011150 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10011110:	0001883a 	nop
10011114:	e0bffc17 	ldw	r2,-16(fp)
10011118:	10c00d17 	ldw	r3,52(r2)
1001111c:	e0bff517 	ldw	r2,-44(fp)
10011120:	1880051e 	bne	r3,r2,10011138 <altera_avalon_jtag_uart_write+0x1b8>
10011124:	e0bffc17 	ldw	r2,-16(fp)
10011128:	10c00917 	ldw	r3,36(r2)
1001112c:	e0bffc17 	ldw	r2,-16(fp)
10011130:	10800117 	ldw	r2,4(r2)
10011134:	18bff736 	bltu	r3,r2,10011114 <__alt_data_end+0xf8011114>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10011138:	e0bffc17 	ldw	r2,-16(fp)
1001113c:	10800917 	ldw	r2,36(r2)
10011140:	1000051e 	bne	r2,zero,10011158 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10011144:	e0bffe17 	ldw	r2,-8(fp)
10011148:	00bfd016 	blt	zero,r2,1001108c <__alt_data_end+0xf801108c>
1001114c:	00000306 	br	1001115c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10011150:	0001883a 	nop
10011154:	00000106 	br	1001115c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10011158:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1001115c:	e0fffd17 	ldw	r3,-12(fp)
10011160:	e0bff717 	ldw	r2,-36(fp)
10011164:	18800426 	beq	r3,r2,10011178 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10011168:	e0fffd17 	ldw	r3,-12(fp)
1001116c:	e0bff717 	ldw	r2,-36(fp)
10011170:	1885c83a 	sub	r2,r3,r2
10011174:	00000606 	br	10011190 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10011178:	e0bfff17 	ldw	r2,-4(fp)
1001117c:	1090000c 	andi	r2,r2,16384
10011180:	10000226 	beq	r2,zero,1001118c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10011184:	00bffd44 	movi	r2,-11
10011188:	00000106 	br	10011190 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1001118c:	00bffec4 	movi	r2,-5
}
10011190:	e037883a 	mov	sp,fp
10011194:	dfc00117 	ldw	ra,4(sp)
10011198:	df000017 	ldw	fp,0(sp)
1001119c:	dec00204 	addi	sp,sp,8
100111a0:	f800283a 	ret

100111a4 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
100111a4:	defff404 	addi	sp,sp,-48
100111a8:	df000b15 	stw	fp,44(sp)
100111ac:	df000b04 	addi	fp,sp,44
100111b0:	e13ffc15 	stw	r4,-16(fp)
100111b4:	e17ffd15 	stw	r5,-12(fp)
100111b8:	e1bffe15 	stw	r6,-8(fp)
100111bc:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
100111c0:	e0bffc17 	ldw	r2,-16(fp)
100111c4:	10800017 	ldw	r2,0(r2)
100111c8:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
100111cc:	e0bff517 	ldw	r2,-44(fp)
100111d0:	10800217 	ldw	r2,8(r2)
100111d4:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
100111d8:	e0bff617 	ldw	r2,-40(fp)
100111dc:	10bfffc4 	addi	r2,r2,-1
100111e0:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
100111e4:	e0bffb17 	ldw	r2,-20(fp)
100111e8:	10800044 	addi	r2,r2,1
100111ec:	e0bffb15 	stw	r2,-20(fp)
100111f0:	e0bffb17 	ldw	r2,-20(fp)
100111f4:	10800003 	ldbu	r2,0(r2)
100111f8:	10803fcc 	andi	r2,r2,255
100111fc:	1080201c 	xori	r2,r2,128
10011200:	10bfe004 	addi	r2,r2,-128
10011204:	103ff71e 	bne	r2,zero,100111e4 <__alt_data_end+0xf80111e4>
    ;

  return ptr - string;
10011208:	e0fffb17 	ldw	r3,-20(fp)
1001120c:	e0bff617 	ldw	r2,-40(fp)
10011210:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
10011214:	10800044 	addi	r2,r2,1
10011218:	1007883a 	mov	r3,r2
1001121c:	e0bffd17 	ldw	r2,-12(fp)
10011220:	10c5883a 	add	r2,r2,r3
10011224:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
10011228:	d0a01404 	addi	r2,gp,-32688
1001122c:	1007883a 	mov	r3,r2
  r4 = (int)name;
10011230:	e0bffd17 	ldw	r2,-12(fp)
10011234:	1009883a 	mov	r4,r2
  r5 = flags;
10011238:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
1001123c:	e1bfff17 	ldw	r6,-4(fp)
10011240:	e0bffd17 	ldw	r2,-12(fp)
10011244:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
10011248:	e0bff917 	ldw	r2,-28(fp)
1001124c:	10bfffc4 	addi	r2,r2,-1
10011250:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
10011254:	e0bffa17 	ldw	r2,-24(fp)
10011258:	10800044 	addi	r2,r2,1
1001125c:	e0bffa15 	stw	r2,-24(fp)
10011260:	e0bffa17 	ldw	r2,-24(fp)
10011264:	10800003 	ldbu	r2,0(r2)
10011268:	10803fcc 	andi	r2,r2,255
1001126c:	1080201c 	xori	r2,r2,128
10011270:	10bfe004 	addi	r2,r2,-128
10011274:	103ff71e 	bne	r2,zero,10011254 <__alt_data_end+0xf8011254>
    ;

  return ptr - string;
10011278:	e1fffa17 	ldw	r7,-24(fp)
1001127c:	e0bff917 	ldw	r2,-28(fp)
10011280:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
10011284:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
10011288:	003da07a 	break	1

  handle = (void *)r2;
1001128c:	e0bff715 	stw	r2,-36(fp)
  error = r3;
10011290:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
10011294:	e0bff817 	ldw	r2,-32(fp)
10011298:	1000031e 	bne	r2,zero,100112a8 <alt_hostfs_open+0x104>
    fd->priv = handle;
1001129c:	e0bffc17 	ldw	r2,-16(fp)
100112a0:	e0fff717 	ldw	r3,-36(fp)
100112a4:	10c00115 	stw	r3,4(r2)

  return -error;
100112a8:	e0bff817 	ldw	r2,-32(fp)
100112ac:	0085c83a 	sub	r2,zero,r2
}
100112b0:	e037883a 	mov	sp,fp
100112b4:	df000017 	ldw	fp,0(sp)
100112b8:	dec00104 	addi	sp,sp,4
100112bc:	f800283a 	ret

100112c0 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
100112c0:	defffd04 	addi	sp,sp,-12
100112c4:	df000215 	stw	fp,8(sp)
100112c8:	df000204 	addi	fp,sp,8
100112cc:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
100112d0:	d0a01704 	addi	r2,gp,-32676
100112d4:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
100112d8:	e0bfff17 	ldw	r2,-4(fp)
100112dc:	10800117 	ldw	r2,4(r2)
100112e0:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
100112e4:	003da07a 	break	1

  error = r3;
100112e8:	e0fffe15 	stw	r3,-8(fp)

  return -error;
100112ec:	e0bffe17 	ldw	r2,-8(fp)
100112f0:	0085c83a 	sub	r2,zero,r2
}
100112f4:	e037883a 	mov	sp,fp
100112f8:	df000017 	ldw	fp,0(sp)
100112fc:	dec00104 	addi	sp,sp,4
10011300:	f800283a 	ret

10011304 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
10011304:	defffa04 	addi	sp,sp,-24
10011308:	df000515 	stw	fp,20(sp)
1001130c:	df000504 	addi	fp,sp,20
10011310:	e13ffd15 	stw	r4,-12(fp)
10011314:	e17ffe15 	stw	r5,-8(fp)
10011318:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
1001131c:	d0a01a04 	addi	r2,gp,-32664
10011320:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10011324:	e0bffd17 	ldw	r2,-12(fp)
10011328:	10800117 	ldw	r2,4(r2)
1001132c:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
10011330:	e0bffe17 	ldw	r2,-8(fp)
10011334:	100b883a 	mov	r5,r2
  r6 = len;
10011338:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
1001133c:	003da07a 	break	1

  rc = r2;
10011340:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
10011344:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
10011348:	e0bffc17 	ldw	r2,-16(fp)
1001134c:	10000326 	beq	r2,zero,1001135c <alt_hostfs_read+0x58>
10011350:	e0bffc17 	ldw	r2,-16(fp)
10011354:	0085c83a 	sub	r2,zero,r2
10011358:	00000106 	br	10011360 <alt_hostfs_read+0x5c>
1001135c:	e0bffb17 	ldw	r2,-20(fp)
}
10011360:	e037883a 	mov	sp,fp
10011364:	df000017 	ldw	fp,0(sp)
10011368:	dec00104 	addi	sp,sp,4
1001136c:	f800283a 	ret

10011370 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
10011370:	defffa04 	addi	sp,sp,-24
10011374:	df000515 	stw	fp,20(sp)
10011378:	df000504 	addi	fp,sp,20
1001137c:	e13ffd15 	stw	r4,-12(fp)
10011380:	e17ffe15 	stw	r5,-8(fp)
10011384:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
10011388:	d0a01d04 	addi	r2,gp,-32652
1001138c:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10011390:	e0bffd17 	ldw	r2,-12(fp)
10011394:	10800117 	ldw	r2,4(r2)
10011398:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
1001139c:	e0bffe17 	ldw	r2,-8(fp)
100113a0:	100b883a 	mov	r5,r2
  r6 = len;
100113a4:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
100113a8:	003da07a 	break	1

  rc = r2;
100113ac:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
100113b0:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
100113b4:	e0bffc17 	ldw	r2,-16(fp)
100113b8:	10000326 	beq	r2,zero,100113c8 <alt_hostfs_write+0x58>
100113bc:	e0bffc17 	ldw	r2,-16(fp)
100113c0:	0085c83a 	sub	r2,zero,r2
100113c4:	00000106 	br	100113cc <alt_hostfs_write+0x5c>
100113c8:	e0bffb17 	ldw	r2,-20(fp)
}
100113cc:	e037883a 	mov	sp,fp
100113d0:	df000017 	ldw	fp,0(sp)
100113d4:	dec00104 	addi	sp,sp,4
100113d8:	f800283a 	ret

100113dc <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
100113dc:	defffa04 	addi	sp,sp,-24
100113e0:	df000515 	stw	fp,20(sp)
100113e4:	df000504 	addi	fp,sp,20
100113e8:	e13ffd15 	stw	r4,-12(fp)
100113ec:	e17ffe15 	stw	r5,-8(fp)
100113f0:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
100113f4:	d0a02004 	addi	r2,gp,-32640
100113f8:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
100113fc:	e0bffd17 	ldw	r2,-12(fp)
10011400:	10800117 	ldw	r2,4(r2)
10011404:	1009883a 	mov	r4,r2
  r5 = ptr;
10011408:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
1001140c:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
10011410:	003da07a 	break	1

  rc = r2;
10011414:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
10011418:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
1001141c:	e0bffc17 	ldw	r2,-16(fp)
10011420:	10000326 	beq	r2,zero,10011430 <alt_hostfs_seek+0x54>
10011424:	e0bffc17 	ldw	r2,-16(fp)
10011428:	0085c83a 	sub	r2,zero,r2
1001142c:	00000106 	br	10011434 <alt_hostfs_seek+0x58>
10011430:	e0bffb17 	ldw	r2,-20(fp)
}
10011434:	e037883a 	mov	sp,fp
10011438:	df000017 	ldw	fp,0(sp)
1001143c:	dec00104 	addi	sp,sp,4
10011440:	f800283a 	ret

10011444 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
10011444:	deffe904 	addi	sp,sp,-92
10011448:	df001615 	stw	fp,88(sp)
1001144c:	df001604 	addi	fp,sp,88
10011450:	e13ffe15 	stw	r4,-8(fp)
10011454:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
10011458:	d0a02304 	addi	r2,gp,-32628
1001145c:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10011460:	e0bffe17 	ldw	r2,-8(fp)
10011464:	10800117 	ldw	r2,4(r2)
10011468:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
1001146c:	e0bfee04 	addi	r2,fp,-72
10011470:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
10011474:	003da07a 	break	1

  rc = r2;
10011478:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
1001147c:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
10011480:	e0bfec17 	ldw	r2,-80(fp)
10011484:	1000621e 	bne	r2,zero,10011610 <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
10011488:	e0bfee04 	addi	r2,fp,-72
1001148c:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
10011490:	e0bfea17 	ldw	r2,-88(fp)
10011494:	10801004 	addi	r2,r2,64
10011498:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
1001149c:	00001606 	br	100114f8 <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
100114a0:	e0bfea17 	ldw	r2,-88(fp)
100114a4:	10800017 	ldw	r2,0(r2)
100114a8:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
100114ac:	e0bfea17 	ldw	r2,-88(fp)
100114b0:	10800017 	ldw	r2,0(r2)
100114b4:	10803fec 	andhi	r2,r2,255
100114b8:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
100114bc:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
100114c0:	e0bfea17 	ldw	r2,-88(fp)
100114c4:	10800017 	ldw	r2,0(r2)
100114c8:	10bfc00c 	andi	r2,r2,65280
100114cc:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
100114d0:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
100114d4:	e0bfea17 	ldw	r2,-88(fp)
100114d8:	10800017 	ldw	r2,0(r2)
100114dc:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
100114e0:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
100114e4:	e0bfea17 	ldw	r2,-88(fp)
100114e8:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
100114ec:	e0bfea17 	ldw	r2,-88(fp)
100114f0:	10800104 	addi	r2,r2,4
100114f4:	e0bfea15 	stw	r2,-88(fp)
100114f8:	e0ffea17 	ldw	r3,-88(fp)
100114fc:	e0bfed17 	ldw	r2,-76(fp)
10011500:	18bfe736 	bltu	r3,r2,100114a0 <__alt_data_end+0xf80114a0>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
10011504:	e0bfff17 	ldw	r2,-4(fp)
10011508:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
1001150c:	e0bfea17 	ldw	r2,-88(fp)
10011510:	10800f04 	addi	r2,r2,60
10011514:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
10011518:	00000506 	br	10011530 <alt_hostfs_fstat+0xec>
      *ptr = 0;
1001151c:	e0bfea17 	ldw	r2,-88(fp)
10011520:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
10011524:	e0bfea17 	ldw	r2,-88(fp)
10011528:	10800104 	addi	r2,r2,4
1001152c:	e0bfea15 	stw	r2,-88(fp)
10011530:	e0ffea17 	ldw	r3,-88(fp)
10011534:	e0bfed17 	ldw	r2,-76(fp)
10011538:	18bff836 	bltu	r3,r2,1001151c <__alt_data_end+0xf801151c>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
1001153c:	e0bfee17 	ldw	r2,-72(fp)
10011540:	1007883a 	mov	r3,r2
10011544:	e0bfff17 	ldw	r2,-4(fp)
10011548:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
1001154c:	e0bfef17 	ldw	r2,-68(fp)
10011550:	1007883a 	mov	r3,r2
10011554:	e0bfff17 	ldw	r2,-4(fp)
10011558:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
1001155c:	e0fff017 	ldw	r3,-64(fp)
10011560:	e0bfff17 	ldw	r2,-4(fp)
10011564:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
10011568:	e0bff117 	ldw	r2,-60(fp)
1001156c:	1007883a 	mov	r3,r2
10011570:	e0bfff17 	ldw	r2,-4(fp)
10011574:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
10011578:	e0bff217 	ldw	r2,-56(fp)
1001157c:	1007883a 	mov	r3,r2
10011580:	e0bfff17 	ldw	r2,-4(fp)
10011584:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
10011588:	e0bff317 	ldw	r2,-52(fp)
1001158c:	1007883a 	mov	r3,r2
10011590:	e0bfff17 	ldw	r2,-4(fp)
10011594:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
10011598:	e0bff417 	ldw	r2,-48(fp)
1001159c:	1007883a 	mov	r3,r2
100115a0:	e0bfff17 	ldw	r2,-4(fp)
100115a4:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
100115a8:	e0bff617 	ldw	r2,-40(fp)
100115ac:	1007883a 	mov	r3,r2
100115b0:	e0bfff17 	ldw	r2,-4(fp)
100115b4:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
100115b8:	e0bffb17 	ldw	r2,-20(fp)
100115bc:	1007883a 	mov	r3,r2
100115c0:	e0bfff17 	ldw	r2,-4(fp)
100115c4:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
100115c8:	e0bffc17 	ldw	r2,-16(fp)
100115cc:	1007883a 	mov	r3,r2
100115d0:	e0bfff17 	ldw	r2,-4(fp)
100115d4:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
100115d8:	e0bffd17 	ldw	r2,-12(fp)
100115dc:	1007883a 	mov	r3,r2
100115e0:	e0bfff17 	ldw	r2,-4(fp)
100115e4:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
100115e8:	e0bff817 	ldw	r2,-32(fp)
100115ec:	1007883a 	mov	r3,r2
100115f0:	e0bfff17 	ldw	r2,-4(fp)
100115f4:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
100115f8:	e0bffa17 	ldw	r2,-24(fp)
100115fc:	1007883a 	mov	r3,r2
10011600:	e0bfff17 	ldw	r2,-4(fp)
10011604:	10c00c15 	stw	r3,48(r2)

    return rc;
10011608:	e0bfeb17 	ldw	r2,-84(fp)
1001160c:	00000206 	br	10011618 <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
10011610:	e0bfec17 	ldw	r2,-80(fp)
10011614:	0085c83a 	sub	r2,zero,r2
}
10011618:	e037883a 	mov	sp,fp
1001161c:	df000017 	ldw	fp,0(sp)
10011620:	dec00104 	addi	sp,sp,4
10011624:	f800283a 	ret

10011628 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10011628:	defff504 	addi	sp,sp,-44
1001162c:	df000a15 	stw	fp,40(sp)
10011630:	df000a04 	addi	fp,sp,40
10011634:	e13ffc15 	stw	r4,-16(fp)
10011638:	e17ffd15 	stw	r5,-12(fp)
1001163c:	e1bffe15 	stw	r6,-8(fp)
10011640:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10011644:	e03ff615 	stw	zero,-40(fp)
10011648:	d0a73c17 	ldw	r2,-25360(gp)
  
  if (alt_ticks_per_second ())
1001164c:	10003c26 	beq	r2,zero,10011740 <alt_alarm_start+0x118>
  {
    if (alarm)
10011650:	e0bffc17 	ldw	r2,-16(fp)
10011654:	10003826 	beq	r2,zero,10011738 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
10011658:	e0bffc17 	ldw	r2,-16(fp)
1001165c:	e0fffe17 	ldw	r3,-8(fp)
10011660:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10011664:	e0bffc17 	ldw	r2,-16(fp)
10011668:	e0ffff17 	ldw	r3,-4(fp)
1001166c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011670:	0005303a 	rdctl	r2,status
10011674:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011678:	e0fff917 	ldw	r3,-28(fp)
1001167c:	00bfff84 	movi	r2,-2
10011680:	1884703a 	and	r2,r3,r2
10011684:	1001703a 	wrctl	status,r2
  
  return context;
10011688:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
1001168c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10011690:	d0a73d17 	ldw	r2,-25356(gp)
      
      current_nticks = alt_nticks();
10011694:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10011698:	e0fffd17 	ldw	r3,-12(fp)
1001169c:	e0bff617 	ldw	r2,-40(fp)
100116a0:	1885883a 	add	r2,r3,r2
100116a4:	10c00044 	addi	r3,r2,1
100116a8:	e0bffc17 	ldw	r2,-16(fp)
100116ac:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
100116b0:	e0bffc17 	ldw	r2,-16(fp)
100116b4:	10c00217 	ldw	r3,8(r2)
100116b8:	e0bff617 	ldw	r2,-40(fp)
100116bc:	1880042e 	bgeu	r3,r2,100116d0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
100116c0:	e0bffc17 	ldw	r2,-16(fp)
100116c4:	00c00044 	movi	r3,1
100116c8:	10c00405 	stb	r3,16(r2)
100116cc:	00000206 	br	100116d8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
100116d0:	e0bffc17 	ldw	r2,-16(fp)
100116d4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
100116d8:	e0bffc17 	ldw	r2,-16(fp)
100116dc:	d0e02704 	addi	r3,gp,-32612
100116e0:	e0fffa15 	stw	r3,-24(fp)
100116e4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100116e8:	e0bffb17 	ldw	r2,-20(fp)
100116ec:	e0fffa17 	ldw	r3,-24(fp)
100116f0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100116f4:	e0bffa17 	ldw	r2,-24(fp)
100116f8:	10c00017 	ldw	r3,0(r2)
100116fc:	e0bffb17 	ldw	r2,-20(fp)
10011700:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10011704:	e0bffa17 	ldw	r2,-24(fp)
10011708:	10800017 	ldw	r2,0(r2)
1001170c:	e0fffb17 	ldw	r3,-20(fp)
10011710:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10011714:	e0bffa17 	ldw	r2,-24(fp)
10011718:	e0fffb17 	ldw	r3,-20(fp)
1001171c:	10c00015 	stw	r3,0(r2)
10011720:	e0bff817 	ldw	r2,-32(fp)
10011724:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011728:	e0bff717 	ldw	r2,-36(fp)
1001172c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10011730:	0005883a 	mov	r2,zero
10011734:	00000306 	br	10011744 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10011738:	00bffa84 	movi	r2,-22
1001173c:	00000106 	br	10011744 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10011740:	00bfde84 	movi	r2,-134
  }
}
10011744:	e037883a 	mov	sp,fp
10011748:	df000017 	ldw	fp,0(sp)
1001174c:	dec00104 	addi	sp,sp,4
10011750:	f800283a 	ret

10011754 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10011754:	deffff04 	addi	sp,sp,-4
10011758:	df000015 	stw	fp,0(sp)
1001175c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10011760:	0001883a 	nop
10011764:	e037883a 	mov	sp,fp
10011768:	df000017 	ldw	fp,0(sp)
1001176c:	dec00104 	addi	sp,sp,4
10011770:	f800283a 	ret

10011774 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011774:	defffe04 	addi	sp,sp,-8
10011778:	dfc00115 	stw	ra,4(sp)
1001177c:	df000015 	stw	fp,0(sp)
10011780:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011784:	d0a01217 	ldw	r2,-32696(gp)
10011788:	10000326 	beq	r2,zero,10011798 <alt_get_errno+0x24>
1001178c:	d0a01217 	ldw	r2,-32696(gp)
10011790:	103ee83a 	callr	r2
10011794:	00000106 	br	1001179c <alt_get_errno+0x28>
10011798:	d0a73104 	addi	r2,gp,-25404
}
1001179c:	e037883a 	mov	sp,fp
100117a0:	dfc00117 	ldw	ra,4(sp)
100117a4:	df000017 	ldw	fp,0(sp)
100117a8:	dec00204 	addi	sp,sp,8
100117ac:	f800283a 	ret

100117b0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
100117b0:	defffa04 	addi	sp,sp,-24
100117b4:	dfc00515 	stw	ra,20(sp)
100117b8:	df000415 	stw	fp,16(sp)
100117bc:	df000404 	addi	fp,sp,16
100117c0:	e13ffe15 	stw	r4,-8(fp)
100117c4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
100117c8:	e0bffe17 	ldw	r2,-8(fp)
100117cc:	10000326 	beq	r2,zero,100117dc <alt_dev_llist_insert+0x2c>
100117d0:	e0bffe17 	ldw	r2,-8(fp)
100117d4:	10800217 	ldw	r2,8(r2)
100117d8:	1000061e 	bne	r2,zero,100117f4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
100117dc:	00117740 	call	10011774 <alt_get_errno>
100117e0:	1007883a 	mov	r3,r2
100117e4:	00800584 	movi	r2,22
100117e8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
100117ec:	00bffa84 	movi	r2,-22
100117f0:	00001306 	br	10011840 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
100117f4:	e0bffe17 	ldw	r2,-8(fp)
100117f8:	e0ffff17 	ldw	r3,-4(fp)
100117fc:	e0fffc15 	stw	r3,-16(fp)
10011800:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10011804:	e0bffd17 	ldw	r2,-12(fp)
10011808:	e0fffc17 	ldw	r3,-16(fp)
1001180c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10011810:	e0bffc17 	ldw	r2,-16(fp)
10011814:	10c00017 	ldw	r3,0(r2)
10011818:	e0bffd17 	ldw	r2,-12(fp)
1001181c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10011820:	e0bffc17 	ldw	r2,-16(fp)
10011824:	10800017 	ldw	r2,0(r2)
10011828:	e0fffd17 	ldw	r3,-12(fp)
1001182c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10011830:	e0bffc17 	ldw	r2,-16(fp)
10011834:	e0fffd17 	ldw	r3,-12(fp)
10011838:	10c00015 	stw	r3,0(r2)

  return 0;  
1001183c:	0005883a 	mov	r2,zero
}
10011840:	e037883a 	mov	sp,fp
10011844:	dfc00117 	ldw	ra,4(sp)
10011848:	df000017 	ldw	fp,0(sp)
1001184c:	dec00204 	addi	sp,sp,8
10011850:	f800283a 	ret

10011854 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10011854:	defffd04 	addi	sp,sp,-12
10011858:	dfc00215 	stw	ra,8(sp)
1001185c:	df000115 	stw	fp,4(sp)
10011860:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10011864:	00840074 	movhi	r2,4097
10011868:	10890604 	addi	r2,r2,9240
1001186c:	e0bfff15 	stw	r2,-4(fp)
10011870:	00000606 	br	1001188c <_do_ctors+0x38>
        (*ctor) (); 
10011874:	e0bfff17 	ldw	r2,-4(fp)
10011878:	10800017 	ldw	r2,0(r2)
1001187c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10011880:	e0bfff17 	ldw	r2,-4(fp)
10011884:	10bfff04 	addi	r2,r2,-4
10011888:	e0bfff15 	stw	r2,-4(fp)
1001188c:	e0ffff17 	ldw	r3,-4(fp)
10011890:	00840074 	movhi	r2,4097
10011894:	10890704 	addi	r2,r2,9244
10011898:	18bff62e 	bgeu	r3,r2,10011874 <__alt_data_end+0xf8011874>
        (*ctor) (); 
}
1001189c:	0001883a 	nop
100118a0:	e037883a 	mov	sp,fp
100118a4:	dfc00117 	ldw	ra,4(sp)
100118a8:	df000017 	ldw	fp,0(sp)
100118ac:	dec00204 	addi	sp,sp,8
100118b0:	f800283a 	ret

100118b4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
100118b4:	defffd04 	addi	sp,sp,-12
100118b8:	dfc00215 	stw	ra,8(sp)
100118bc:	df000115 	stw	fp,4(sp)
100118c0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100118c4:	00840074 	movhi	r2,4097
100118c8:	10890604 	addi	r2,r2,9240
100118cc:	e0bfff15 	stw	r2,-4(fp)
100118d0:	00000606 	br	100118ec <_do_dtors+0x38>
        (*dtor) (); 
100118d4:	e0bfff17 	ldw	r2,-4(fp)
100118d8:	10800017 	ldw	r2,0(r2)
100118dc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100118e0:	e0bfff17 	ldw	r2,-4(fp)
100118e4:	10bfff04 	addi	r2,r2,-4
100118e8:	e0bfff15 	stw	r2,-4(fp)
100118ec:	e0ffff17 	ldw	r3,-4(fp)
100118f0:	00840074 	movhi	r2,4097
100118f4:	10890704 	addi	r2,r2,9244
100118f8:	18bff62e 	bgeu	r3,r2,100118d4 <__alt_data_end+0xf80118d4>
        (*dtor) (); 
}
100118fc:	0001883a 	nop
10011900:	e037883a 	mov	sp,fp
10011904:	dfc00117 	ldw	ra,4(sp)
10011908:	df000017 	ldw	fp,0(sp)
1001190c:	dec00204 	addi	sp,sp,8
10011910:	f800283a 	ret

10011914 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10011914:	defffa04 	addi	sp,sp,-24
10011918:	dfc00515 	stw	ra,20(sp)
1001191c:	df000415 	stw	fp,16(sp)
10011920:	df000404 	addi	fp,sp,16
10011924:	e13ffe15 	stw	r4,-8(fp)
10011928:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1001192c:	e0bfff17 	ldw	r2,-4(fp)
10011930:	10800017 	ldw	r2,0(r2)
10011934:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10011938:	e13ffe17 	ldw	r4,-8(fp)
1001193c:	00047940 	call	10004794 <strlen>
10011940:	10800044 	addi	r2,r2,1
10011944:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10011948:	00000d06 	br	10011980 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1001194c:	e0bffc17 	ldw	r2,-16(fp)
10011950:	10800217 	ldw	r2,8(r2)
10011954:	e0fffd17 	ldw	r3,-12(fp)
10011958:	180d883a 	mov	r6,r3
1001195c:	e17ffe17 	ldw	r5,-8(fp)
10011960:	1009883a 	mov	r4,r2
10011964:	00122880 	call	10012288 <memcmp>
10011968:	1000021e 	bne	r2,zero,10011974 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1001196c:	e0bffc17 	ldw	r2,-16(fp)
10011970:	00000706 	br	10011990 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10011974:	e0bffc17 	ldw	r2,-16(fp)
10011978:	10800017 	ldw	r2,0(r2)
1001197c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10011980:	e0fffc17 	ldw	r3,-16(fp)
10011984:	e0bfff17 	ldw	r2,-4(fp)
10011988:	18bff01e 	bne	r3,r2,1001194c <__alt_data_end+0xf801194c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1001198c:	0005883a 	mov	r2,zero
}
10011990:	e037883a 	mov	sp,fp
10011994:	dfc00117 	ldw	ra,4(sp)
10011998:	df000017 	ldw	fp,0(sp)
1001199c:	dec00204 	addi	sp,sp,8
100119a0:	f800283a 	ret

100119a4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
100119a4:	defffb04 	addi	sp,sp,-20
100119a8:	dfc00415 	stw	ra,16(sp)
100119ac:	df000315 	stw	fp,12(sp)
100119b0:	df000304 	addi	fp,sp,12
100119b4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
100119b8:	d0a00d17 	ldw	r2,-32716(gp)
100119bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100119c0:	00003106 	br	10011a88 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
100119c4:	e0bffd17 	ldw	r2,-12(fp)
100119c8:	10800217 	ldw	r2,8(r2)
100119cc:	1009883a 	mov	r4,r2
100119d0:	00047940 	call	10004794 <strlen>
100119d4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
100119d8:	e0bffd17 	ldw	r2,-12(fp)
100119dc:	10c00217 	ldw	r3,8(r2)
100119e0:	e0bffe17 	ldw	r2,-8(fp)
100119e4:	10bfffc4 	addi	r2,r2,-1
100119e8:	1885883a 	add	r2,r3,r2
100119ec:	10800003 	ldbu	r2,0(r2)
100119f0:	10803fcc 	andi	r2,r2,255
100119f4:	1080201c 	xori	r2,r2,128
100119f8:	10bfe004 	addi	r2,r2,-128
100119fc:	10800bd8 	cmpnei	r2,r2,47
10011a00:	1000031e 	bne	r2,zero,10011a10 <alt_find_file+0x6c>
    {
      len -= 1;
10011a04:	e0bffe17 	ldw	r2,-8(fp)
10011a08:	10bfffc4 	addi	r2,r2,-1
10011a0c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10011a10:	e0bffe17 	ldw	r2,-8(fp)
10011a14:	e0ffff17 	ldw	r3,-4(fp)
10011a18:	1885883a 	add	r2,r3,r2
10011a1c:	10800003 	ldbu	r2,0(r2)
10011a20:	10803fcc 	andi	r2,r2,255
10011a24:	1080201c 	xori	r2,r2,128
10011a28:	10bfe004 	addi	r2,r2,-128
10011a2c:	10800be0 	cmpeqi	r2,r2,47
10011a30:	1000081e 	bne	r2,zero,10011a54 <alt_find_file+0xb0>
10011a34:	e0bffe17 	ldw	r2,-8(fp)
10011a38:	e0ffff17 	ldw	r3,-4(fp)
10011a3c:	1885883a 	add	r2,r3,r2
10011a40:	10800003 	ldbu	r2,0(r2)
10011a44:	10803fcc 	andi	r2,r2,255
10011a48:	1080201c 	xori	r2,r2,128
10011a4c:	10bfe004 	addi	r2,r2,-128
10011a50:	10000a1e 	bne	r2,zero,10011a7c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10011a54:	e0bffd17 	ldw	r2,-12(fp)
10011a58:	10800217 	ldw	r2,8(r2)
10011a5c:	e0fffe17 	ldw	r3,-8(fp)
10011a60:	180d883a 	mov	r6,r3
10011a64:	e17fff17 	ldw	r5,-4(fp)
10011a68:	1009883a 	mov	r4,r2
10011a6c:	00122880 	call	10012288 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10011a70:	1000021e 	bne	r2,zero,10011a7c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10011a74:	e0bffd17 	ldw	r2,-12(fp)
10011a78:	00000706 	br	10011a98 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10011a7c:	e0bffd17 	ldw	r2,-12(fp)
10011a80:	10800017 	ldw	r2,0(r2)
10011a84:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10011a88:	e0fffd17 	ldw	r3,-12(fp)
10011a8c:	d0a00d04 	addi	r2,gp,-32716
10011a90:	18bfcc1e 	bne	r3,r2,100119c4 <__alt_data_end+0xf80119c4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10011a94:	0005883a 	mov	r2,zero
}
10011a98:	e037883a 	mov	sp,fp
10011a9c:	dfc00117 	ldw	ra,4(sp)
10011aa0:	df000017 	ldw	fp,0(sp)
10011aa4:	dec00204 	addi	sp,sp,8
10011aa8:	f800283a 	ret

10011aac <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
10011aac:	defffc04 	addi	sp,sp,-16
10011ab0:	df000315 	stw	fp,12(sp)
10011ab4:	df000304 	addi	fp,sp,12
10011ab8:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
10011abc:	e0bfff17 	ldw	r2,-4(fp)
10011ac0:	10800217 	ldw	r2,8(r2)
10011ac4:	1000021e 	bne	r2,zero,10011ad0 <alt_fs_reg+0x24>
  {
    return -ENODEV;
10011ac8:	00bffb44 	movi	r2,-19
10011acc:	00001306 	br	10011b1c <alt_fs_reg+0x70>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
10011ad0:	e0bfff17 	ldw	r2,-4(fp)
10011ad4:	d0e00d04 	addi	r3,gp,-32716
10011ad8:	e0fffd15 	stw	r3,-12(fp)
10011adc:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10011ae0:	e0bffe17 	ldw	r2,-8(fp)
10011ae4:	e0fffd17 	ldw	r3,-12(fp)
10011ae8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10011aec:	e0bffd17 	ldw	r2,-12(fp)
10011af0:	10c00017 	ldw	r3,0(r2)
10011af4:	e0bffe17 	ldw	r2,-8(fp)
10011af8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10011afc:	e0bffd17 	ldw	r2,-12(fp)
10011b00:	10800017 	ldw	r2,0(r2)
10011b04:	e0fffe17 	ldw	r3,-8(fp)
10011b08:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10011b0c:	e0bffd17 	ldw	r2,-12(fp)
10011b10:	e0fffe17 	ldw	r3,-8(fp)
10011b14:	10c00015 	stw	r3,0(r2)

  return 0;
10011b18:	0005883a 	mov	r2,zero
} 
10011b1c:	e037883a 	mov	sp,fp
10011b20:	df000017 	ldw	fp,0(sp)
10011b24:	dec00104 	addi	sp,sp,4
10011b28:	f800283a 	ret

10011b2c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10011b2c:	defffa04 	addi	sp,sp,-24
10011b30:	dfc00515 	stw	ra,20(sp)
10011b34:	df000415 	stw	fp,16(sp)
10011b38:	dc000315 	stw	r16,12(sp)
10011b3c:	df000404 	addi	fp,sp,16
10011b40:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10011b44:	00bffa04 	movi	r2,-24
10011b48:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10011b4c:	e03ffc15 	stw	zero,-16(fp)
10011b50:	00001d06 	br	10011bc8 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
10011b54:	04040074 	movhi	r16,4097
10011b58:	840cc104 	addi	r16,r16,13060
10011b5c:	e0bffc17 	ldw	r2,-16(fp)
10011b60:	01400304 	movi	r5,12
10011b64:	1009883a 	mov	r4,r2
10011b68:	000175c0 	call	1000175c <__mulsi3>
10011b6c:	8085883a 	add	r2,r16,r2
10011b70:	10800017 	ldw	r2,0(r2)
10011b74:	1000111e 	bne	r2,zero,10011bbc <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
10011b78:	04040074 	movhi	r16,4097
10011b7c:	840cc104 	addi	r16,r16,13060
10011b80:	e0bffc17 	ldw	r2,-16(fp)
10011b84:	01400304 	movi	r5,12
10011b88:	1009883a 	mov	r4,r2
10011b8c:	000175c0 	call	1000175c <__mulsi3>
10011b90:	8085883a 	add	r2,r16,r2
10011b94:	e0fffe17 	ldw	r3,-8(fp)
10011b98:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10011b9c:	d0e01117 	ldw	r3,-32700(gp)
10011ba0:	e0bffc17 	ldw	r2,-16(fp)
10011ba4:	1880020e 	bge	r3,r2,10011bb0 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
10011ba8:	e0bffc17 	ldw	r2,-16(fp)
10011bac:	d0a01115 	stw	r2,-32700(gp)
      }
      rc = i;
10011bb0:	e0bffc17 	ldw	r2,-16(fp)
10011bb4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10011bb8:	00000606 	br	10011bd4 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10011bbc:	e0bffc17 	ldw	r2,-16(fp)
10011bc0:	10800044 	addi	r2,r2,1
10011bc4:	e0bffc15 	stw	r2,-16(fp)
10011bc8:	e0bffc17 	ldw	r2,-16(fp)
10011bcc:	10800810 	cmplti	r2,r2,32
10011bd0:	103fe01e 	bne	r2,zero,10011b54 <__alt_data_end+0xf8011b54>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10011bd4:	e0bffd17 	ldw	r2,-12(fp)
}
10011bd8:	e6ffff04 	addi	sp,fp,-4
10011bdc:	dfc00217 	ldw	ra,8(sp)
10011be0:	df000117 	ldw	fp,4(sp)
10011be4:	dc000017 	ldw	r16,0(sp)
10011be8:	dec00304 	addi	sp,sp,12
10011bec:	f800283a 	ret

10011bf0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10011bf0:	deffff04 	addi	sp,sp,-4
10011bf4:	df000015 	stw	fp,0(sp)
10011bf8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10011bfc:	0001883a 	nop
10011c00:	e037883a 	mov	sp,fp
10011c04:	df000017 	ldw	fp,0(sp)
10011c08:	dec00104 	addi	sp,sp,4
10011c0c:	f800283a 	ret

10011c10 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10011c10:	defff904 	addi	sp,sp,-28
10011c14:	dfc00615 	stw	ra,24(sp)
10011c18:	df000515 	stw	fp,20(sp)
10011c1c:	df000504 	addi	fp,sp,20
10011c20:	e13ffc15 	stw	r4,-16(fp)
10011c24:	e17ffd15 	stw	r5,-12(fp)
10011c28:	e1bffe15 	stw	r6,-8(fp)
10011c2c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10011c30:	e0800217 	ldw	r2,8(fp)
10011c34:	d8800015 	stw	r2,0(sp)
10011c38:	e1ffff17 	ldw	r7,-4(fp)
10011c3c:	e1bffe17 	ldw	r6,-8(fp)
10011c40:	e17ffd17 	ldw	r5,-12(fp)
10011c44:	e13ffc17 	ldw	r4,-16(fp)
10011c48:	0011dc00 	call	10011dc0 <alt_iic_isr_register>
}  
10011c4c:	e037883a 	mov	sp,fp
10011c50:	dfc00117 	ldw	ra,4(sp)
10011c54:	df000017 	ldw	fp,0(sp)
10011c58:	dec00204 	addi	sp,sp,8
10011c5c:	f800283a 	ret

10011c60 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10011c60:	defff904 	addi	sp,sp,-28
10011c64:	df000615 	stw	fp,24(sp)
10011c68:	df000604 	addi	fp,sp,24
10011c6c:	e13ffe15 	stw	r4,-8(fp)
10011c70:	e17fff15 	stw	r5,-4(fp)
10011c74:	e0bfff17 	ldw	r2,-4(fp)
10011c78:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011c7c:	0005303a 	rdctl	r2,status
10011c80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011c84:	e0fffb17 	ldw	r3,-20(fp)
10011c88:	00bfff84 	movi	r2,-2
10011c8c:	1884703a 	and	r2,r3,r2
10011c90:	1001703a 	wrctl	status,r2
  
  return context;
10011c94:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10011c98:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10011c9c:	00c00044 	movi	r3,1
10011ca0:	e0bffa17 	ldw	r2,-24(fp)
10011ca4:	1884983a 	sll	r2,r3,r2
10011ca8:	1007883a 	mov	r3,r2
10011cac:	d0a73b17 	ldw	r2,-25364(gp)
10011cb0:	1884b03a 	or	r2,r3,r2
10011cb4:	d0a73b15 	stw	r2,-25364(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10011cb8:	d0a73b17 	ldw	r2,-25364(gp)
10011cbc:	100170fa 	wrctl	ienable,r2
10011cc0:	e0bffc17 	ldw	r2,-16(fp)
10011cc4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011cc8:	e0bffd17 	ldw	r2,-12(fp)
10011ccc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10011cd0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10011cd4:	0001883a 	nop
}
10011cd8:	e037883a 	mov	sp,fp
10011cdc:	df000017 	ldw	fp,0(sp)
10011ce0:	dec00104 	addi	sp,sp,4
10011ce4:	f800283a 	ret

10011ce8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10011ce8:	defff904 	addi	sp,sp,-28
10011cec:	df000615 	stw	fp,24(sp)
10011cf0:	df000604 	addi	fp,sp,24
10011cf4:	e13ffe15 	stw	r4,-8(fp)
10011cf8:	e17fff15 	stw	r5,-4(fp)
10011cfc:	e0bfff17 	ldw	r2,-4(fp)
10011d00:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011d04:	0005303a 	rdctl	r2,status
10011d08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011d0c:	e0fffb17 	ldw	r3,-20(fp)
10011d10:	00bfff84 	movi	r2,-2
10011d14:	1884703a 	and	r2,r3,r2
10011d18:	1001703a 	wrctl	status,r2
  
  return context;
10011d1c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10011d20:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10011d24:	00c00044 	movi	r3,1
10011d28:	e0bffa17 	ldw	r2,-24(fp)
10011d2c:	1884983a 	sll	r2,r3,r2
10011d30:	0084303a 	nor	r2,zero,r2
10011d34:	1007883a 	mov	r3,r2
10011d38:	d0a73b17 	ldw	r2,-25364(gp)
10011d3c:	1884703a 	and	r2,r3,r2
10011d40:	d0a73b15 	stw	r2,-25364(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10011d44:	d0a73b17 	ldw	r2,-25364(gp)
10011d48:	100170fa 	wrctl	ienable,r2
10011d4c:	e0bffc17 	ldw	r2,-16(fp)
10011d50:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011d54:	e0bffd17 	ldw	r2,-12(fp)
10011d58:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10011d5c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10011d60:	0001883a 	nop
}
10011d64:	e037883a 	mov	sp,fp
10011d68:	df000017 	ldw	fp,0(sp)
10011d6c:	dec00104 	addi	sp,sp,4
10011d70:	f800283a 	ret

10011d74 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10011d74:	defffc04 	addi	sp,sp,-16
10011d78:	df000315 	stw	fp,12(sp)
10011d7c:	df000304 	addi	fp,sp,12
10011d80:	e13ffe15 	stw	r4,-8(fp)
10011d84:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10011d88:	000530fa 	rdctl	r2,ienable
10011d8c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10011d90:	00c00044 	movi	r3,1
10011d94:	e0bfff17 	ldw	r2,-4(fp)
10011d98:	1884983a 	sll	r2,r3,r2
10011d9c:	1007883a 	mov	r3,r2
10011da0:	e0bffd17 	ldw	r2,-12(fp)
10011da4:	1884703a 	and	r2,r3,r2
10011da8:	1004c03a 	cmpne	r2,r2,zero
10011dac:	10803fcc 	andi	r2,r2,255
}
10011db0:	e037883a 	mov	sp,fp
10011db4:	df000017 	ldw	fp,0(sp)
10011db8:	dec00104 	addi	sp,sp,4
10011dbc:	f800283a 	ret

10011dc0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10011dc0:	defff504 	addi	sp,sp,-44
10011dc4:	dfc00a15 	stw	ra,40(sp)
10011dc8:	df000915 	stw	fp,36(sp)
10011dcc:	df000904 	addi	fp,sp,36
10011dd0:	e13ffc15 	stw	r4,-16(fp)
10011dd4:	e17ffd15 	stw	r5,-12(fp)
10011dd8:	e1bffe15 	stw	r6,-8(fp)
10011ddc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10011de0:	00bffa84 	movi	r2,-22
10011de4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10011de8:	e0bffd17 	ldw	r2,-12(fp)
10011dec:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10011df0:	e0bff817 	ldw	r2,-32(fp)
10011df4:	10800808 	cmpgei	r2,r2,32
10011df8:	1000271e 	bne	r2,zero,10011e98 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011dfc:	0005303a 	rdctl	r2,status
10011e00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011e04:	e0fffb17 	ldw	r3,-20(fp)
10011e08:	00bfff84 	movi	r2,-2
10011e0c:	1884703a 	and	r2,r3,r2
10011e10:	1001703a 	wrctl	status,r2
  
  return context;
10011e14:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10011e18:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10011e1c:	00840074 	movhi	r2,4097
10011e20:	10988c04 	addi	r2,r2,25136
10011e24:	e0fff817 	ldw	r3,-32(fp)
10011e28:	180690fa 	slli	r3,r3,3
10011e2c:	10c5883a 	add	r2,r2,r3
10011e30:	e0fffe17 	ldw	r3,-8(fp)
10011e34:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10011e38:	00840074 	movhi	r2,4097
10011e3c:	10988c04 	addi	r2,r2,25136
10011e40:	e0fff817 	ldw	r3,-32(fp)
10011e44:	180690fa 	slli	r3,r3,3
10011e48:	10c5883a 	add	r2,r2,r3
10011e4c:	10800104 	addi	r2,r2,4
10011e50:	e0ffff17 	ldw	r3,-4(fp)
10011e54:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10011e58:	e0bffe17 	ldw	r2,-8(fp)
10011e5c:	10000526 	beq	r2,zero,10011e74 <alt_iic_isr_register+0xb4>
10011e60:	e0bff817 	ldw	r2,-32(fp)
10011e64:	100b883a 	mov	r5,r2
10011e68:	e13ffc17 	ldw	r4,-16(fp)
10011e6c:	0011c600 	call	10011c60 <alt_ic_irq_enable>
10011e70:	00000406 	br	10011e84 <alt_iic_isr_register+0xc4>
10011e74:	e0bff817 	ldw	r2,-32(fp)
10011e78:	100b883a 	mov	r5,r2
10011e7c:	e13ffc17 	ldw	r4,-16(fp)
10011e80:	0011ce80 	call	10011ce8 <alt_ic_irq_disable>
10011e84:	e0bff715 	stw	r2,-36(fp)
10011e88:	e0bffa17 	ldw	r2,-24(fp)
10011e8c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011e90:	e0bff917 	ldw	r2,-28(fp)
10011e94:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10011e98:	e0bff717 	ldw	r2,-36(fp)
}
10011e9c:	e037883a 	mov	sp,fp
10011ea0:	dfc00117 	ldw	ra,4(sp)
10011ea4:	df000017 	ldw	fp,0(sp)
10011ea8:	dec00204 	addi	sp,sp,8
10011eac:	f800283a 	ret

10011eb0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10011eb0:	defff804 	addi	sp,sp,-32
10011eb4:	dfc00715 	stw	ra,28(sp)
10011eb8:	df000615 	stw	fp,24(sp)
10011ebc:	dc000515 	stw	r16,20(sp)
10011ec0:	df000604 	addi	fp,sp,24
10011ec4:	e13ffb15 	stw	r4,-20(fp)
10011ec8:	e17ffc15 	stw	r5,-16(fp)
10011ecc:	e1bffd15 	stw	r6,-12(fp)
10011ed0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10011ed4:	e1bffe17 	ldw	r6,-8(fp)
10011ed8:	e17ffd17 	ldw	r5,-12(fp)
10011edc:	e13ffc17 	ldw	r4,-16(fp)
10011ee0:	00102ac0 	call	100102ac <open>
10011ee4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10011ee8:	e0bffa17 	ldw	r2,-24(fp)
10011eec:	10002216 	blt	r2,zero,10011f78 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10011ef0:	04040074 	movhi	r16,4097
10011ef4:	840cc104 	addi	r16,r16,13060
10011ef8:	e0bffa17 	ldw	r2,-24(fp)
10011efc:	01400304 	movi	r5,12
10011f00:	1009883a 	mov	r4,r2
10011f04:	000175c0 	call	1000175c <__mulsi3>
10011f08:	8085883a 	add	r2,r16,r2
10011f0c:	10c00017 	ldw	r3,0(r2)
10011f10:	e0bffb17 	ldw	r2,-20(fp)
10011f14:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10011f18:	04040074 	movhi	r16,4097
10011f1c:	840cc104 	addi	r16,r16,13060
10011f20:	e0bffa17 	ldw	r2,-24(fp)
10011f24:	01400304 	movi	r5,12
10011f28:	1009883a 	mov	r4,r2
10011f2c:	000175c0 	call	1000175c <__mulsi3>
10011f30:	8085883a 	add	r2,r16,r2
10011f34:	10800104 	addi	r2,r2,4
10011f38:	10c00017 	ldw	r3,0(r2)
10011f3c:	e0bffb17 	ldw	r2,-20(fp)
10011f40:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10011f44:	04040074 	movhi	r16,4097
10011f48:	840cc104 	addi	r16,r16,13060
10011f4c:	e0bffa17 	ldw	r2,-24(fp)
10011f50:	01400304 	movi	r5,12
10011f54:	1009883a 	mov	r4,r2
10011f58:	000175c0 	call	1000175c <__mulsi3>
10011f5c:	8085883a 	add	r2,r16,r2
10011f60:	10800204 	addi	r2,r2,8
10011f64:	10c00017 	ldw	r3,0(r2)
10011f68:	e0bffb17 	ldw	r2,-20(fp)
10011f6c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10011f70:	e13ffa17 	ldw	r4,-24(fp)
10011f74:	00104080 	call	10010408 <alt_release_fd>
  }
} 
10011f78:	0001883a 	nop
10011f7c:	e6ffff04 	addi	sp,fp,-4
10011f80:	dfc00217 	ldw	ra,8(sp)
10011f84:	df000117 	ldw	fp,4(sp)
10011f88:	dc000017 	ldw	r16,0(sp)
10011f8c:	dec00304 	addi	sp,sp,12
10011f90:	f800283a 	ret

10011f94 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10011f94:	defffb04 	addi	sp,sp,-20
10011f98:	dfc00415 	stw	ra,16(sp)
10011f9c:	df000315 	stw	fp,12(sp)
10011fa0:	df000304 	addi	fp,sp,12
10011fa4:	e13ffd15 	stw	r4,-12(fp)
10011fa8:	e17ffe15 	stw	r5,-8(fp)
10011fac:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10011fb0:	01c07fc4 	movi	r7,511
10011fb4:	01800044 	movi	r6,1
10011fb8:	e17ffd17 	ldw	r5,-12(fp)
10011fbc:	01040074 	movhi	r4,4097
10011fc0:	210cc404 	addi	r4,r4,13072
10011fc4:	0011eb00 	call	10011eb0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10011fc8:	01c07fc4 	movi	r7,511
10011fcc:	000d883a 	mov	r6,zero
10011fd0:	e17ffe17 	ldw	r5,-8(fp)
10011fd4:	01040074 	movhi	r4,4097
10011fd8:	210cc104 	addi	r4,r4,13060
10011fdc:	0011eb00 	call	10011eb0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10011fe0:	01c07fc4 	movi	r7,511
10011fe4:	01800044 	movi	r6,1
10011fe8:	e17fff17 	ldw	r5,-4(fp)
10011fec:	01040074 	movhi	r4,4097
10011ff0:	210cc704 	addi	r4,r4,13084
10011ff4:	0011eb00 	call	10011eb0 <alt_open_fd>
}  
10011ff8:	0001883a 	nop
10011ffc:	e037883a 	mov	sp,fp
10012000:	dfc00117 	ldw	ra,4(sp)
10012004:	df000017 	ldw	fp,0(sp)
10012008:	dec00204 	addi	sp,sp,8
1001200c:	f800283a 	ret

10012010 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10012010:	defffa04 	addi	sp,sp,-24
10012014:	df000515 	stw	fp,20(sp)
10012018:	df000504 	addi	fp,sp,20
1001201c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012020:	0005303a 	rdctl	r2,status
10012024:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012028:	e0fffc17 	ldw	r3,-16(fp)
1001202c:	00bfff84 	movi	r2,-2
10012030:	1884703a 	and	r2,r3,r2
10012034:	1001703a 	wrctl	status,r2
  
  return context;
10012038:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1001203c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10012040:	e0bfff17 	ldw	r2,-4(fp)
10012044:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10012048:	e0bffd17 	ldw	r2,-12(fp)
1001204c:	10800017 	ldw	r2,0(r2)
10012050:	e0fffd17 	ldw	r3,-12(fp)
10012054:	18c00117 	ldw	r3,4(r3)
10012058:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1001205c:	e0bffd17 	ldw	r2,-12(fp)
10012060:	10800117 	ldw	r2,4(r2)
10012064:	e0fffd17 	ldw	r3,-12(fp)
10012068:	18c00017 	ldw	r3,0(r3)
1001206c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10012070:	e0bffd17 	ldw	r2,-12(fp)
10012074:	e0fffd17 	ldw	r3,-12(fp)
10012078:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1001207c:	e0bffd17 	ldw	r2,-12(fp)
10012080:	e0fffd17 	ldw	r3,-12(fp)
10012084:	10c00015 	stw	r3,0(r2)
10012088:	e0bffb17 	ldw	r2,-20(fp)
1001208c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012090:	e0bffe17 	ldw	r2,-8(fp)
10012094:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10012098:	0001883a 	nop
1001209c:	e037883a 	mov	sp,fp
100120a0:	df000017 	ldw	fp,0(sp)
100120a4:	dec00104 	addi	sp,sp,4
100120a8:	f800283a 	ret

100120ac <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
100120ac:	defffb04 	addi	sp,sp,-20
100120b0:	dfc00415 	stw	ra,16(sp)
100120b4:	df000315 	stw	fp,12(sp)
100120b8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
100120bc:	d0a02717 	ldw	r2,-32612(gp)
100120c0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
100120c4:	d0a73d17 	ldw	r2,-25356(gp)
100120c8:	10800044 	addi	r2,r2,1
100120cc:	d0a73d15 	stw	r2,-25356(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100120d0:	00002e06 	br	1001218c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
100120d4:	e0bffd17 	ldw	r2,-12(fp)
100120d8:	10800017 	ldw	r2,0(r2)
100120dc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
100120e0:	e0bffd17 	ldw	r2,-12(fp)
100120e4:	10800403 	ldbu	r2,16(r2)
100120e8:	10803fcc 	andi	r2,r2,255
100120ec:	10000426 	beq	r2,zero,10012100 <alt_tick+0x54>
100120f0:	d0a73d17 	ldw	r2,-25356(gp)
100120f4:	1000021e 	bne	r2,zero,10012100 <alt_tick+0x54>
    {
      alarm->rollover = 0;
100120f8:	e0bffd17 	ldw	r2,-12(fp)
100120fc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10012100:	e0bffd17 	ldw	r2,-12(fp)
10012104:	10800217 	ldw	r2,8(r2)
10012108:	d0e73d17 	ldw	r3,-25356(gp)
1001210c:	18801d36 	bltu	r3,r2,10012184 <alt_tick+0xd8>
10012110:	e0bffd17 	ldw	r2,-12(fp)
10012114:	10800403 	ldbu	r2,16(r2)
10012118:	10803fcc 	andi	r2,r2,255
1001211c:	1000191e 	bne	r2,zero,10012184 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10012120:	e0bffd17 	ldw	r2,-12(fp)
10012124:	10800317 	ldw	r2,12(r2)
10012128:	e0fffd17 	ldw	r3,-12(fp)
1001212c:	18c00517 	ldw	r3,20(r3)
10012130:	1809883a 	mov	r4,r3
10012134:	103ee83a 	callr	r2
10012138:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1001213c:	e0bfff17 	ldw	r2,-4(fp)
10012140:	1000031e 	bne	r2,zero,10012150 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10012144:	e13ffd17 	ldw	r4,-12(fp)
10012148:	00120100 	call	10012010 <alt_alarm_stop>
1001214c:	00000d06 	br	10012184 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10012150:	e0bffd17 	ldw	r2,-12(fp)
10012154:	10c00217 	ldw	r3,8(r2)
10012158:	e0bfff17 	ldw	r2,-4(fp)
1001215c:	1887883a 	add	r3,r3,r2
10012160:	e0bffd17 	ldw	r2,-12(fp)
10012164:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10012168:	e0bffd17 	ldw	r2,-12(fp)
1001216c:	10c00217 	ldw	r3,8(r2)
10012170:	d0a73d17 	ldw	r2,-25356(gp)
10012174:	1880032e 	bgeu	r3,r2,10012184 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10012178:	e0bffd17 	ldw	r2,-12(fp)
1001217c:	00c00044 	movi	r3,1
10012180:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10012184:	e0bffe17 	ldw	r2,-8(fp)
10012188:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1001218c:	e0fffd17 	ldw	r3,-12(fp)
10012190:	d0a02704 	addi	r2,gp,-32612
10012194:	18bfcf1e 	bne	r3,r2,100120d4 <__alt_data_end+0xf80120d4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10012198:	0001883a 	nop
}
1001219c:	0001883a 	nop
100121a0:	e037883a 	mov	sp,fp
100121a4:	dfc00117 	ldw	ra,4(sp)
100121a8:	df000017 	ldw	fp,0(sp)
100121ac:	dec00204 	addi	sp,sp,8
100121b0:	f800283a 	ret

100121b4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
100121b4:	deffff04 	addi	sp,sp,-4
100121b8:	df000015 	stw	fp,0(sp)
100121bc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
100121c0:	000170fa 	wrctl	ienable,zero
}
100121c4:	0001883a 	nop
100121c8:	e037883a 	mov	sp,fp
100121cc:	df000017 	ldw	fp,0(sp)
100121d0:	dec00104 	addi	sp,sp,4
100121d4:	f800283a 	ret

100121d8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
100121d8:	defffe04 	addi	sp,sp,-8
100121dc:	df000115 	stw	fp,4(sp)
100121e0:	df000104 	addi	fp,sp,4
100121e4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
100121e8:	e0bfff17 	ldw	r2,-4(fp)
100121ec:	10bffe84 	addi	r2,r2,-6
100121f0:	10c00428 	cmpgeui	r3,r2,16
100121f4:	18001a1e 	bne	r3,zero,10012260 <alt_exception_cause_generated_bad_addr+0x88>
100121f8:	100690ba 	slli	r3,r2,2
100121fc:	00840074 	movhi	r2,4097
10012200:	10888404 	addi	r2,r2,8720
10012204:	1885883a 	add	r2,r3,r2
10012208:	10800017 	ldw	r2,0(r2)
1001220c:	1000683a 	jmp	r2
10012210:	10012250 	cmplti	zero,r2,1161
10012214:	10012250 	cmplti	zero,r2,1161
10012218:	10012260 	cmpeqi	zero,r2,1161
1001221c:	10012260 	cmpeqi	zero,r2,1161
10012220:	10012260 	cmpeqi	zero,r2,1161
10012224:	10012250 	cmplti	zero,r2,1161
10012228:	10012258 	cmpnei	zero,r2,1161
1001222c:	10012260 	cmpeqi	zero,r2,1161
10012230:	10012250 	cmplti	zero,r2,1161
10012234:	10012250 	cmplti	zero,r2,1161
10012238:	10012260 	cmpeqi	zero,r2,1161
1001223c:	10012250 	cmplti	zero,r2,1161
10012240:	10012258 	cmpnei	zero,r2,1161
10012244:	10012260 	cmpeqi	zero,r2,1161
10012248:	10012260 	cmpeqi	zero,r2,1161
1001224c:	10012250 	cmplti	zero,r2,1161
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10012250:	00800044 	movi	r2,1
10012254:	00000306 	br	10012264 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10012258:	0005883a 	mov	r2,zero
1001225c:	00000106 	br	10012264 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10012260:	0005883a 	mov	r2,zero
  }
}
10012264:	e037883a 	mov	sp,fp
10012268:	df000017 	ldw	fp,0(sp)
1001226c:	dec00104 	addi	sp,sp,4
10012270:	f800283a 	ret

10012274 <atexit>:
10012274:	200b883a 	mov	r5,r4
10012278:	000f883a 	mov	r7,zero
1001227c:	000d883a 	mov	r6,zero
10012280:	0009883a 	mov	r4,zero
10012284:	00123041 	jmpi	10012304 <__register_exitproc>

10012288 <memcmp>:
10012288:	01c000c4 	movi	r7,3
1001228c:	3980192e 	bgeu	r7,r6,100122f4 <memcmp+0x6c>
10012290:	2144b03a 	or	r2,r4,r5
10012294:	11c4703a 	and	r2,r2,r7
10012298:	10000f26 	beq	r2,zero,100122d8 <memcmp+0x50>
1001229c:	20800003 	ldbu	r2,0(r4)
100122a0:	28c00003 	ldbu	r3,0(r5)
100122a4:	10c0151e 	bne	r2,r3,100122fc <memcmp+0x74>
100122a8:	31bfff84 	addi	r6,r6,-2
100122ac:	01ffffc4 	movi	r7,-1
100122b0:	00000406 	br	100122c4 <memcmp+0x3c>
100122b4:	20800003 	ldbu	r2,0(r4)
100122b8:	28c00003 	ldbu	r3,0(r5)
100122bc:	31bfffc4 	addi	r6,r6,-1
100122c0:	10c00e1e 	bne	r2,r3,100122fc <memcmp+0x74>
100122c4:	21000044 	addi	r4,r4,1
100122c8:	29400044 	addi	r5,r5,1
100122cc:	31fff91e 	bne	r6,r7,100122b4 <__alt_data_end+0xf80122b4>
100122d0:	0005883a 	mov	r2,zero
100122d4:	f800283a 	ret
100122d8:	20c00017 	ldw	r3,0(r4)
100122dc:	28800017 	ldw	r2,0(r5)
100122e0:	18bfee1e 	bne	r3,r2,1001229c <__alt_data_end+0xf801229c>
100122e4:	31bfff04 	addi	r6,r6,-4
100122e8:	21000104 	addi	r4,r4,4
100122ec:	29400104 	addi	r5,r5,4
100122f0:	39bff936 	bltu	r7,r6,100122d8 <__alt_data_end+0xf80122d8>
100122f4:	303fe91e 	bne	r6,zero,1001229c <__alt_data_end+0xf801229c>
100122f8:	003ff506 	br	100122d0 <__alt_data_end+0xf80122d0>
100122fc:	10c5c83a 	sub	r2,r2,r3
10012300:	f800283a 	ret

10012304 <__register_exitproc>:
10012304:	defffa04 	addi	sp,sp,-24
10012308:	dc000315 	stw	r16,12(sp)
1001230c:	04040074 	movhi	r16,4097
10012310:	84114a04 	addi	r16,r16,17704
10012314:	80c00017 	ldw	r3,0(r16)
10012318:	dc400415 	stw	r17,16(sp)
1001231c:	dfc00515 	stw	ra,20(sp)
10012320:	18805217 	ldw	r2,328(r3)
10012324:	2023883a 	mov	r17,r4
10012328:	10003726 	beq	r2,zero,10012408 <__register_exitproc+0x104>
1001232c:	10c00117 	ldw	r3,4(r2)
10012330:	010007c4 	movi	r4,31
10012334:	20c00e16 	blt	r4,r3,10012370 <__register_exitproc+0x6c>
10012338:	1a000044 	addi	r8,r3,1
1001233c:	8800221e 	bne	r17,zero,100123c8 <__register_exitproc+0xc4>
10012340:	18c00084 	addi	r3,r3,2
10012344:	18c7883a 	add	r3,r3,r3
10012348:	18c7883a 	add	r3,r3,r3
1001234c:	12000115 	stw	r8,4(r2)
10012350:	10c7883a 	add	r3,r2,r3
10012354:	19400015 	stw	r5,0(r3)
10012358:	0005883a 	mov	r2,zero
1001235c:	dfc00517 	ldw	ra,20(sp)
10012360:	dc400417 	ldw	r17,16(sp)
10012364:	dc000317 	ldw	r16,12(sp)
10012368:	dec00604 	addi	sp,sp,24
1001236c:	f800283a 	ret
10012370:	00840034 	movhi	r2,4096
10012374:	108c8d04 	addi	r2,r2,12852
10012378:	10002626 	beq	r2,zero,10012414 <__register_exitproc+0x110>
1001237c:	01006404 	movi	r4,400
10012380:	d9400015 	stw	r5,0(sp)
10012384:	d9800115 	stw	r6,4(sp)
10012388:	d9c00215 	stw	r7,8(sp)
1001238c:	00032340 	call	10003234 <malloc>
10012390:	d9400017 	ldw	r5,0(sp)
10012394:	d9800117 	ldw	r6,4(sp)
10012398:	d9c00217 	ldw	r7,8(sp)
1001239c:	10001d26 	beq	r2,zero,10012414 <__register_exitproc+0x110>
100123a0:	81000017 	ldw	r4,0(r16)
100123a4:	10000115 	stw	zero,4(r2)
100123a8:	02000044 	movi	r8,1
100123ac:	22405217 	ldw	r9,328(r4)
100123b0:	0007883a 	mov	r3,zero
100123b4:	12400015 	stw	r9,0(r2)
100123b8:	20805215 	stw	r2,328(r4)
100123bc:	10006215 	stw	zero,392(r2)
100123c0:	10006315 	stw	zero,396(r2)
100123c4:	883fde26 	beq	r17,zero,10012340 <__alt_data_end+0xf8012340>
100123c8:	18c9883a 	add	r4,r3,r3
100123cc:	2109883a 	add	r4,r4,r4
100123d0:	1109883a 	add	r4,r2,r4
100123d4:	21802215 	stw	r6,136(r4)
100123d8:	01800044 	movi	r6,1
100123dc:	12406217 	ldw	r9,392(r2)
100123e0:	30cc983a 	sll	r6,r6,r3
100123e4:	4992b03a 	or	r9,r9,r6
100123e8:	12406215 	stw	r9,392(r2)
100123ec:	21c04215 	stw	r7,264(r4)
100123f0:	01000084 	movi	r4,2
100123f4:	893fd21e 	bne	r17,r4,10012340 <__alt_data_end+0xf8012340>
100123f8:	11006317 	ldw	r4,396(r2)
100123fc:	218cb03a 	or	r6,r4,r6
10012400:	11806315 	stw	r6,396(r2)
10012404:	003fce06 	br	10012340 <__alt_data_end+0xf8012340>
10012408:	18805304 	addi	r2,r3,332
1001240c:	18805215 	stw	r2,328(r3)
10012410:	003fc606 	br	1001232c <__alt_data_end+0xf801232c>
10012414:	00bfffc4 	movi	r2,-1
10012418:	003fd006 	br	1001235c <__alt_data_end+0xf801235c>
