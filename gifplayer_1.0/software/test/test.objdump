
test.elf:     file format elf32-littlenios2
test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00012fc0 memsz 0x00012fc0 flags r-x
    LOAD off    0x00013fe0 vaddr 0x10012fe0 paddr 0x10014c30 align 2**12
         filesz 0x00001c50 memsz 0x00001c50 flags rw-
    LOAD off    0x00016880 vaddr 0x10016880 paddr 0x10016880 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000127e8  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005c8  10012a18  10012a18  00013a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c50  10012fe0  10014c30  00013fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  10016880  10016880  00016880  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  100169e4  100169e4  00015c30  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00015c30  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001268  00000000  00000000  00015c58  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00031bc1  00000000  00000000  00016ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000c1aa  00000000  00000000  00048a81  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000e872  00000000  00000000  00054c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002944  00000000  00000000  000634a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000044fd  00000000  00000000  00065de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000195a8  00000000  00000000  0006a2e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0008388c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001c20  00000000  00000000  000838a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00088f1e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00088f21  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00088f2d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00088f2e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00088f2f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00088f33  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00088f37  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00088f3b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00088f46  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00088f51  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  00088f5c  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000034  00000000  00000000  00088f69  2**0
                  CONTENTS, READONLY
 29 .jdi          00005803  00000000  00000000  00088f9d  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00053685  00000000  00000000  0008e7a0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
10012a18 l    d  .rodata	00000000 .rodata
10012fe0 l    d  .rwdata	00000000 .rwdata
10016880 l    d  .bss	00000000 .bss
100169e4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
100130c0 l     O .rwdata	00000003 VALID_HEADER
100130c4 l     O .rwdata	00000004 frameptr
100130c8 l     O .rwdata	00000004 ocmptr
100130cc l     O .rwdata	00000004 ON_NIOS
10012c80 l     O .rodata	0000000a __func__.3281
100130d0 l     O .rwdata	00000004 temp.3287
10012c8c l     O .rodata	00000005 __func__.3302
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
100022bc l     F .text	00000008 __fp_unlock
100022d0 l     F .text	0000019c __sinit.part.1
1000246c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 ftell.c
00000000 l    df *ABS*	00000000 ftello.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
100130d4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
10004aec l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 vfprintf.c
10012d1e l     O .rodata	00000010 zeroes.4404
10007214 l     F .text	000000bc __sbprintf
10012d2e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 dtoa.c
10007670 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
10013920 l     O .rwdata	00000020 lc_ctype_charset
10013900 l     O .rwdata	00000020 lc_message_charset
10013940 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
10012d5c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000af38 l     F .text	000000fc __sprint_r.part.0
10012e80 l     O .rodata	00000010 zeroes.4349
1000c574 l     F .text	000000bc __sbprintf
10012e90 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000ffdc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
100100f0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
10010150 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
10010264 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
1001034c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
100104b8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
100105a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
10010780 l     F .text	0000003c alt_get_errno
100107bc l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10014bd8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
10010b38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10010c74 l     F .text	00000034 alt_dev_reg
10013b20 l     O .rwdata	00001060 jtag_uart_0
10014b80 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10010f5c l     F .text	0000020c altera_avalon_jtag_uart_irq
10011168 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
10014bdc l     O .rwdata	00000009 hcinfo.2538
10014be8 l     O .rwdata	0000000a hcinfo.2551
10014bf4 l     O .rwdata	00000009 hcinfo.2560
10014c00 l     O .rwdata	0000000a hcinfo.2573
10014c0c l     O .rwdata	0000000a hcinfo.2586
10014c18 l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10011d70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
100124ac l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
100168b8 g     O .bss	00000004 alt_instruction_exception_handler
10004484 g     F .text	00000018 putchar
1000a7a4 g     F .text	00000074 _mprec_log10
1000a890 g     F .text	0000008c __any_on
10009494 g     F .text	00000054 _isatty_r
10012d68 g     O .rodata	00000028 __mprec_tinytens
100106bc g     F .text	0000007c alt_main
1000026c g     F .text	0000069c uncompress
1000449c g     F .text	000000c0 _puts_r
100168e4 g     O .bss	00000100 alt_irq
100095c4 g     F .text	00000060 _lseek_r
10014c30 g       *ABS*	00000000 __flash_rwdata_start
10008f20 g     F .text	000000ac __sflags
1000e9b4 g     F .text	00000088 .hidden __eqdf2
100169e4 g       *ABS*	00000000 __alt_heap_start
1000adfc g     F .text	0000005c _kill_r
10004440 g     F .text	0000003c printf
1000c990 g     F .text	0000009c _wcrtomb_r
1000abc4 g     F .text	00000084 _signal_r
10004e08 g     F .text	0000005c __sseek
1000261c g     F .text	00000010 __sinit
1000c630 g     F .text	00000140 __swbuf_r
100094e8 g     F .text	0000007c _setlocale_r
10002474 g     F .text	00000078 __sfmoreglue
1001075c g     F .text	00000024 __malloc_unlock
100117a0 g     F .text	0000011c alt_hostfs_open
10000c94 g     F .text	00000034 getControl
10000908 g     F .text	00000020 checkPacked
10009708 g     F .text	0000015c memmove
10002604 g     F .text	00000018 _cleanup
10009864 g     F .text	000000a8 _Balloc
1000ea3c g     F .text	000000dc .hidden __gtdf2
100127b0 g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
10003344 g     F .text	0000005c _fstat_r
10016884 g     O .bss	00000004 errno
10004d84 g     F .text	00000008 __seofread
100168a4 g     O .bss	00000004 alt_argv
1001cba8 g       *ABS*	00000000 _gp
10010244 g     F .text	00000020 getpid
100139a0 g     O .rwdata	00000180 alt_fd_list
100119d8 g     F .text	00000068 alt_hostfs_seek
1000447c g     F .text	00000008 _putchar_r
10011f10 g     F .text	00000090 alt_find_dev
10004140 g     F .text	00000148 memcpy
100022c4 g     F .text	0000000c _cleanup_r
1000fdf4 g     F .text	000000dc .hidden __floatsidf
100120a8 g     F .text	00000080 alt_fs_reg
10012590 g     F .text	0000007c alt_io_redirect
1000eb18 g     F .text	000000f4 .hidden __ltdf2
10012a18 g       *ABS*	00000000 __DTOR_END__
1000455c g     F .text	00000014 puts
100127d4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
1000aae4 g     F .text	00000074 __fpclassifyd
1000a700 g     F .text	000000a4 __ratio
1000c558 g     F .text	0000001c __vfiprintf_internal
10011360 g     F .text	0000021c altera_avalon_jtag_uart_read
1000390c g     F .text	00000014 malloc
10004410 g     F .text	00000030 _printf_r
10001c84 g     F .text	00000064 .hidden __udivsi3
100102a0 g     F .text	000000ac isatty
1000ac48 g     F .text	000000bc _raise_r
10001d68 g     F .text	00000068 __assert_func
10012db8 g     O .rodata	000000c8 __mprec_tens
10009564 g     F .text	0000000c __locale_charset
10016890 g     O .bss	00000004 __malloc_top_pad
1000ae58 g     F .text	00000004 _getpid_r
10014bb8 g     O .rwdata	00000004 __mb_cur_max
10009594 g     F .text	0000000c _localeconv_r
10009c98 g     F .text	0000003c __i2b
10008fcc g     F .text	000004c8 __sfvwrite_r
1000ad04 g     F .text	000000a8 __sigtramp_r
10004cdc g     F .text	00000054 _sbrk_r
10011900 g     F .text	0000006c alt_hostfs_read
1000aa84 g     F .text	00000060 _read_r
10014bd0 g     O .rwdata	00000004 alt_max_fd
10001f10 g     F .text	000000f0 _fclose_r
1000228c g     F .text	00000030 fflush
1001688c g     O .bss	00000004 __malloc_max_sbrked_mem
1000d738 g     F .text	000008ac .hidden __adddf3
1000a4a8 g     F .text	0000010c __b2d
1000d174 g     F .text	000005c4 .hidden __umoddi3
100105e0 g     F .text	000000dc lseek
10014ba8 g     O .rwdata	00000004 _global_impure_ptr
10004588 g     F .text	00000564 _realloc_r
100169e4 g       *ABS*	00000000 __bss_end
100123bc g     F .text	000000f0 alt_iic_isr_register
100126a8 g     F .text	00000108 alt_tick
1000cb78 g     F .text	000005fc .hidden __udivdi3
1000c8ec g     F .text	00000024 _fputwc_r
10012d90 g     O .rodata	00000028 __mprec_bigtens
10009a7c g     F .text	00000104 __s2b
10007658 g     F .text	00000018 abort
1000fed0 g     F .text	000000a8 .hidden __floatunsidf
1000a1e8 g     F .text	00000060 __mcmp
1000263c g     F .text	00000018 __fp_lock_all
10012370 g     F .text	0000004c alt_ic_irq_enabled
1001260c g     F .text	0000009c alt_alarm_stop
100168ac g     O .bss	00000004 alt_irq_active
10002ee4 g     F .text	00000444 _fseeko_r
100118bc g     F .text	00000044 alt_hostfs_close
100000fc g     F .exceptions	000000d4 alt_irq_handler
10013978 g     O .rwdata	00000028 alt_dev_null
10000990 g     F .text	00000030 getch
10011d50 g     F .text	00000020 alt_dcache_flush_all
10009b80 g     F .text	00000068 __hi0bits
1000fd74 g     F .text	00000080 .hidden __fixdfsi
10001de4 g     F .text	00000018 calloc
10014c30 g       *ABS*	00000000 __ram_rwdata_end
10014bc8 g     O .rwdata	00000008 alt_dev_list
10010b74 g     F .text	00000100 write
1000a91c g     F .text	000000a0 _putc_r
10012fe0 g       *ABS*	00000000 __ram_rodata_end
1001018c g     F .text	000000b8 fstat
100027fc g     F .text	00000024 fprintf
10010388 g     F .text	00000130 kill
1000eb18 g     F .text	000000f4 .hidden __ledf2
10009f60 g     F .text	00000140 __pow5mult
1001689c g     O .bss	00000004 __nlocale_changed
1000b04c g     F .text	0000150c ___vfiprintf_internal_r
10001ce8 g     F .text	00000058 .hidden __umodsi3
100169e4 g       *ABS*	00000000 end
10016880 g     O .bss	00000004 fileptr
10003328 g     F .text	0000001c fseeko
10002ec8 g     F .text	0000001c fseek
10010e9c g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
10012a18 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000ff78 g     F .text	00000064 .hidden __clzsi2
1001157c g     F .text	00000224 altera_avalon_jtag_uart_write
1000262c g     F .text	00000004 __sfp_lock_acquire
10009624 g     F .text	000000e4 memchr
10004f1c g     F .text	000022dc ___vfprintf_internal_r
10002bb4 g     F .text	00000310 _free_r
10009570 g     F .text	00000010 __locale_mb_cur_max
100074d8 g     F .text	00000180 __call_exitprocs
10016898 g     O .bss	00000004 __mlocale_changed
10014bb0 g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
100168b0 g     O .bss	00000004 _alt_tick_rate
100034a4 g     F .text	00000014 ftello
1000a0a0 g     F .text	00000148 __lshift
100168b4 g     O .bss	00000004 _alt_nticks
1000adc0 g     F .text	00000018 signal
10000928 g     F .text	00000068 read
10010ce0 g     F .text	00000058 alt_sys_init
100043b0 g     F .text	00000060 _open_r
10012900 g     F .text	00000118 __register_exitproc
10009cd4 g     F .text	0000028c __multiply
10011208 g     F .text	00000068 altera_avalon_jtag_uart_close
10001d40 g     F .text	00000028 .hidden __mulsi3
10012fe0 g       *ABS*	00000000 __ram_rwdata_start
10012a18 g       *ABS*	00000000 __ram_rodata_start
100168bc g     O .bss	00000028 __malloc_current_mallinfo
1000a5b4 g     F .text	0000014c __d2b
10004570 g     F .text	00000018 realloc
10010d38 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10012128 g     F .text	000000c4 alt_get_fd
10007484 g     F .text	00000054 _close_r
10012884 g     F .text	0000007c memcmp
10010df8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
100169e4 g       *ABS*	00000000 __alt_stack_base
10010e48 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10003640 g     F .text	000000dc _fwrite_r
100033b8 g     F .text	000000ec _ftello_r
10007330 g     F .text	00000154 __swsetup_r
1000dfe4 g     F .text	000009d0 .hidden __divdf3
100024ec g     F .text	00000118 __sfp
1000a818 g     F .text	00000078 __copybits
100134f8 g     O .rwdata	00000408 __malloc_av_
10002638 g     F .text	00000004 __sinit_lock_release
1000ec0c g     F .text	0000086c .hidden __muldf3
10004d30 g     F .text	00000054 __sread
10002a5c g     F .text	00000034 fread
10012fe0 g     O .rwdata	000000da _gif
10011fa0 g     F .text	00000108 alt_find_file
10011dac g     F .text	000000a4 alt_dev_llist_insert
10010738 g     F .text	00000024 __malloc_lock
100027d4 g     F .text	00000028 _fprintf_r
10010a88 g     F .text	000000b0 sbrk
10002230 g     F .text	0000005c _fflush_r
10001dfc g     F .text	000000dc _calloc_r
100027bc g     F .text	00000018 fopen
10016880 g       *ABS*	00000000 __bss_start
10004288 g     F .text	00000128 memset
10000cc8 g     F .text	00000ec4 main
10000c38 g     F .text	0000005c eraseSRAM
100168a8 g     O .bss	00000004 alt_envp
10016888 g     O .bss	00000004 __malloc_max_total_mem
10010d98 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
100033a4 g     F .text	00000014 ftell
1000c770 g     F .text	00000018 __swbuf
10002820 g     F .text	0000023c _fread_r
100009f8 g     F .text	0000008c skipToTerm
10004e64 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
10002000 g     F .text	00000014 fclose
10007898 g     F .text	00001688 _dtoa_r
10003934 g     F .text	0000080c _malloc_r
1000caec g     F .text	00000030 __ascii_wctomb
10014bd4 g     O .rwdata	00000004 alt_errno
1000266c g     F .text	00000020 _fiprintf_r
1000add8 g     F .text	00000010 _init_signal
100009c0 g     F .text	00000038 seek
100034b8 g     F .text	000000c4 _fwalk
1000a9bc g     F .text	000000c8 putc
10001b8c g     F .text	00000084 .hidden __divsi3
10002a90 g     F .text	00000124 _malloc_trim_r
10012a18 g       *ABS*	00000000 __CTOR_END__
1000ae5c g     F .text	000000dc strcmp
10012a18 g       *ABS*	00000000 __flash_rodata_start
10012a18 g       *ABS*	00000000 __DTOR_LIST__
1000e9b4 g     F .text	00000088 .hidden __nedf2
10010ca8 g     F .text	00000038 alt_irq_init
10010a04 g     F .text	00000084 alt_release_fd
10012ea0 g     O .rodata	00000100 .hidden __clz_tab
10016894 g     O .bss	00000004 _PathLocale
10012870 g     F .text	00000014 atexit
100072d0 g     F .text	00000060 _write_r
100095a0 g     F .text	00000018 setlocale
10014bac g     O .rwdata	00000004 _impure_ptr
10000a84 g     F .text	000001b4 writeSRAM
100168a0 g     O .bss	00000004 alt_argc
10002014 g     F .text	0000021c __sflush_r
10011eb0 g     F .text	00000060 _do_dtors
1000958c g     F .text	00000008 __locale_cjk_lang
10002ec4 g     F .text	00000004 _fseek_r
10004b08 g     F .text	000001d4 __srefill_r
10000020 g       .exceptions	00000000 alt_irq_entry
1000a444 g     F .text	00000064 __ulp
10002654 g     F .text	00000018 __fp_unlock_all
10014bc0 g     O .rwdata	00000008 alt_fs_list
1001196c g     F .text	0000006c alt_hostfs_write
10000020 g       *ABS*	00000000 __ram_exceptions_start
100095b8 g     F .text	0000000c localeconv
100130bc g     O .rwdata	00000004 _gif_len
1001220c g     F .text	00000050 alt_ic_isr_register
1000371c g     F .text	00000034 fwrite
10014c30 g       *ABS*	00000000 _edata
100169e4 g       *ABS*	00000000 _end
1000c788 g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
10011270 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
100122e4 g     F .text	0000008c alt_ic_irq_disable
10004d8c g     F .text	0000007c __swrite
10014bb4 g     O .rwdata	00000004 __malloc_trim_threshold
10009580 g     F .text	0000000c __locale_msgcharset
10001ed8 g     F .text	00000038 exit
1000268c g     F .text	0000003c fiprintf
10004f04 g     F .text	00000018 _vfiprintf_r
1000357c g     F .text	000000c4 _fwalk_reent
1000a248 g     F .text	000001fc __mdiff
10001c10 g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10002630 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
100026c8 g     F .text	000000f4 _fopen_r
1001011c g     F .text	00000034 _exit
10011c24 g     F .text	0000012c alt_alarm_start
10003750 g     F .text	000001bc __smakebuf_r
10004e6c g     F .text	00000098 strlen
1000ab58 g     F .text	0000006c _init_signal_r
100108a8 g     F .text	0000015c open
1000ea3c g     F .text	000000dc .hidden __gedf2
10001dd0 g     F .text	00000014 __assert
10014bbc g     O .rwdata	00000004 __wctomb
100033a0 g     F .text	00000004 _ftell_r
1000b034 g     F .text	00000018 __sprint_r
100121ec g     F .text	00000020 alt_icache_flush_all
10014c24 g     O .rwdata	00000004 alt_priority_mask
1001225c g     F .text	00000088 alt_ic_irq_enable
100071f8 g     F .text	0000001c __vfprintf_internal
1000cb1c g     F .text	0000005c _wctomb_r
1000f478 g     F .text	000008fc .hidden __subdf3
10009be8 g     F .text	000000b0 __lo0bits
10014c28 g     O .rwdata	00000008 alt_alarm_list
10011e50 g     F .text	00000060 _do_ctors
1000ade8 g     F .text	00000014 __sigtramp
1000ca2c g     F .text	000000c0 wcrtomb
10010018 g     F .text	000000d8 close
10010520 g     F .text	00000084 alt_load
1000c910 g     F .text	00000080 fputwc
1000adac g     F .text	00000014 raise
10003920 g     F .text	00000014 free
10002634 g     F .text	00000004 __sinit_lock_acquire
10009934 g     F .text	00000148 __multadd
1000990c g     F .text	00000028 _Bfree
10011a40 g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	109a3904 	addi	r2,r2,26852
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	109a3904 	addi	r2,r2,26852
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0a74417 	ldw	r2,-25328(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0a74417 	ldw	r2,-25328(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
1000023c:	d6b2ea14 	ori	gp,gp,52136
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000244:	109a2014 	ori	r2,r2,26752

    movhi r3, %hi(__bss_end)
10000248:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
1000024c:	18da7914 	ori	r3,r3,27108

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	00105200 	call	10010520 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	00106bc0 	call	100106bc <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <uncompress>:
} dictionary_entry_t;

void uncompress(int32_t code_length,
				const unsigned char *input,
				int32_t input_length,
				unsigned char *out) {
1000026c:	deffec04 	addi	sp,sp,-80
10000270:	dfc01315 	stw	ra,76(sp)
10000274:	df001215 	stw	fp,72(sp)
10000278:	dc001115 	stw	r16,68(sp)
1000027c:	df001204 	addi	fp,sp,72
10000280:	e13ffb15 	stw	r4,-20(fp)
10000284:	e17ffc15 	stw	r5,-16(fp)
10000288:	e1bffd15 	stw	r6,-12(fp)
1000028c:	e1fffe15 	stw	r7,-8(fp)
	printf("uncompress!\n");
10000290:	01040074 	movhi	r4,4097
10000294:	210a8604 	addi	r4,r4,10776
10000298:	000455c0 	call	1000455c <puts>
	// Source for this function is:
	// https://commandlinefanatic.com/cgi-bin/showarticle.cgi?article=art011
	int32_t i, bit;
	int32_t code, prev = -1;
1000029c:	00bfffc4 	movi	r2,-1
100002a0:	e0bff015 	stw	r2,-64(fp)
	dictionary_entry_t *dictionary;
	int32_t dictionary_ind;
	uint32_t mask = 0x01;
100002a4:	00800044 	movi	r2,1
100002a8:	e0bff315 	stw	r2,-52(fp)
	int32_t reset_code_length;
	int32_t clear_code;	 // This varies depending on code_length
	int32_t stop_code;	 // one more than clear code
	int32_t match_len;

	clear_code = 1 << (code_length);
100002ac:	00c00044 	movi	r3,1
100002b0:	e0bffb17 	ldw	r2,-20(fp)
100002b4:	1884983a 	sll	r2,r3,r2
100002b8:	e0bff615 	stw	r2,-40(fp)
	stop_code = clear_code + 1;
100002bc:	e0bff617 	ldw	r2,-40(fp)
100002c0:	10800044 	addi	r2,r2,1
100002c4:	e0bff715 	stw	r2,-36(fp)
	// To handle clear codes
	reset_code_length = code_length;
100002c8:	e0bffb17 	ldw	r2,-20(fp)
100002cc:	e0bff815 	stw	r2,-32(fp)

	// Create a dictionary large enough to hold "code_length" entries.
	// Once the dictionary overflows, code_length increases
	dictionary = (dictionary_entry_t *)
		malloc(sizeof(dictionary_entry_t) * (1 << (code_length + 1)));
100002d0:	e0bffb17 	ldw	r2,-20(fp)
100002d4:	10800044 	addi	r2,r2,1
100002d8:	00c00304 	movi	r3,12
100002dc:	1884983a 	sll	r2,r3,r2
	// To handle clear codes
	reset_code_length = code_length;

	// Create a dictionary large enough to hold "code_length" entries.
	// Once the dictionary overflows, code_length increases
	dictionary = (dictionary_entry_t *)
100002e0:	1009883a 	mov	r4,r2
100002e4:	000390c0 	call	1000390c <malloc>
100002e8:	e0bff115 	stw	r2,-60(fp)

	// Technically, it shouldn't be necessary to initialize the
	// dictionary.  The spec says that the encoder "should output a
	// clear code as the first code in the image data stream".  It doesn't
	// say must, though...
	for (dictionary_ind = 0;
100002ec:	e03ff215 	stw	zero,-56(fp)
100002f0:	00001e06 	br	1000036c <uncompress+0x100>
		 dictionary_ind < (1 << code_length);
		 dictionary_ind++) {
//		printf("setup dictionary start\n");
		dictionary[dictionary_ind].byte = dictionary_ind;
100002f4:	e0bff217 	ldw	r2,-56(fp)
100002f8:	01400304 	movi	r5,12
100002fc:	1009883a 	mov	r4,r2
10000300:	0001d400 	call	10001d40 <__mulsi3>
10000304:	1007883a 	mov	r3,r2
10000308:	e0bff117 	ldw	r2,-60(fp)
1000030c:	10c5883a 	add	r2,r2,r3
10000310:	e0fff217 	ldw	r3,-56(fp)
10000314:	10c00005 	stb	r3,0(r2)
		// XXX this only works because prev is a 32-bit int32_t (> 12 bits)
		dictionary[dictionary_ind].prev = -1;
10000318:	e0bff217 	ldw	r2,-56(fp)
1000031c:	01400304 	movi	r5,12
10000320:	1009883a 	mov	r4,r2
10000324:	0001d400 	call	10001d40 <__mulsi3>
10000328:	1007883a 	mov	r3,r2
1000032c:	e0bff117 	ldw	r2,-60(fp)
10000330:	10c5883a 	add	r2,r2,r3
10000334:	00ffffc4 	movi	r3,-1
10000338:	10c00115 	stw	r3,4(r2)
		dictionary[dictionary_ind].len = 1;
1000033c:	e0bff217 	ldw	r2,-56(fp)
10000340:	01400304 	movi	r5,12
10000344:	1009883a 	mov	r4,r2
10000348:	0001d400 	call	10001d40 <__mulsi3>
1000034c:	1007883a 	mov	r3,r2
10000350:	e0bff117 	ldw	r2,-60(fp)
10000354:	10c5883a 	add	r2,r2,r3
10000358:	00c00044 	movi	r3,1
1000035c:	10c00215 	stw	r3,8(r2)
	// dictionary.  The spec says that the encoder "should output a
	// clear code as the first code in the image data stream".  It doesn't
	// say must, though...
	for (dictionary_ind = 0;
		 dictionary_ind < (1 << code_length);
		 dictionary_ind++) {
10000360:	e0bff217 	ldw	r2,-56(fp)
10000364:	10800044 	addi	r2,r2,1
10000368:	e0bff215 	stw	r2,-56(fp)
	// Technically, it shouldn't be necessary to initialize the
	// dictionary.  The spec says that the encoder "should output a
	// clear code as the first code in the image data stream".  It doesn't
	// say must, though...
	for (dictionary_ind = 0;
		 dictionary_ind < (1 << code_length);
1000036c:	00c00044 	movi	r3,1
10000370:	e0bffb17 	ldw	r2,-20(fp)
10000374:	1884983a 	sll	r2,r3,r2

	// Technically, it shouldn't be necessary to initialize the
	// dictionary.  The spec says that the encoder "should output a
	// clear code as the first code in the image data stream".  It doesn't
	// say must, though...
	for (dictionary_ind = 0;
10000378:	e0fff217 	ldw	r3,-56(fp)
1000037c:	18bfdd16 	blt	r3,r2,100002f4 <__alt_data_end+0xf80002f4>
		dictionary[dictionary_ind].prev = -1;
		dictionary[dictionary_ind].len = 1;
	}

	// 2^code_len + 1 is the special "end" code; don't give it an entry here
	dictionary_ind++;
10000380:	e0bff217 	ldw	r2,-56(fp)
10000384:	10800044 	addi	r2,r2,1
10000388:	e0bff215 	stw	r2,-56(fp)
	dictionary_ind++;
1000038c:	e0bff217 	ldw	r2,-56(fp)
10000390:	10800044 	addi	r2,r2,1
10000394:	e0bff215 	stw	r2,-56(fp)

	// TODO verify that the very last byte is clear_code + 1
	while (input_length) {
10000398:	00014e06 	br	100008d4 <uncompress+0x668>
//		printf("main loop | code_length: %d\n", code_length);
		code = 0x0;
1000039c:	e03fef15 	stw	zero,-68(fp)
		// Always read one more bit than the code length
		for (i = 0; i < (code_length + 1); i++) {
100003a0:	e03fee15 	stw	zero,-72(fp)
100003a4:	00001f06 	br	10000424 <uncompress+0x1b8>
//			 printf("    mask:        %02x\n", mask);
//			 printf("    bit:         %02x\n", bit);
//			 printf("    input:       %02x\n", *input);
//

			bit = (*input & mask) ? 1 : 0;
100003a8:	e0bffc17 	ldw	r2,-16(fp)
100003ac:	10800003 	ldbu	r2,0(r2)
100003b0:	10c03fcc 	andi	r3,r2,255
100003b4:	e0bff317 	ldw	r2,-52(fp)
100003b8:	1884703a 	and	r2,r3,r2
100003bc:	1004c03a 	cmpne	r2,r2,zero
100003c0:	10803fcc 	andi	r2,r2,255
100003c4:	e0bff915 	stw	r2,-28(fp)
			mask <<= 1;
100003c8:	e0bff317 	ldw	r2,-52(fp)
100003cc:	1085883a 	add	r2,r2,r2
100003d0:	e0bff315 	stw	r2,-52(fp)

			if (mask == 0x100) {
100003d4:	e0bff317 	ldw	r2,-52(fp)
100003d8:	10804018 	cmpnei	r2,r2,256
100003dc:	1000081e 	bne	r2,zero,10000400 <uncompress+0x194>
				mask = 0x01;
100003e0:	00800044 	movi	r2,1
100003e4:	e0bff315 	stw	r2,-52(fp)
				input++;
100003e8:	e0bffc17 	ldw	r2,-16(fp)
100003ec:	10800044 	addi	r2,r2,1
100003f0:	e0bffc15 	stw	r2,-16(fp)
				input_length--;
100003f4:	e0bffd17 	ldw	r2,-12(fp)
100003f8:	10bfffc4 	addi	r2,r2,-1
100003fc:	e0bffd15 	stw	r2,-12(fp)
			}

			code = code | (bit << i);
10000400:	e0fff917 	ldw	r3,-28(fp)
10000404:	e0bfee17 	ldw	r2,-72(fp)
10000408:	1884983a 	sll	r2,r3,r2
1000040c:	e0ffef17 	ldw	r3,-68(fp)
10000410:	1884b03a 	or	r2,r3,r2
10000414:	e0bfef15 	stw	r2,-68(fp)
	// TODO verify that the very last byte is clear_code + 1
	while (input_length) {
//		printf("main loop | code_length: %d\n", code_length);
		code = 0x0;
		// Always read one more bit than the code length
		for (i = 0; i < (code_length + 1); i++) {
10000418:	e0bfee17 	ldw	r2,-72(fp)
1000041c:	10800044 	addi	r2,r2,1
10000420:	e0bfee15 	stw	r2,-72(fp)
10000424:	e0bffb17 	ldw	r2,-20(fp)
10000428:	10800044 	addi	r2,r2,1
1000042c:	e0ffee17 	ldw	r3,-72(fp)
10000430:	18bfdd16 	blt	r3,r2,100003a8 <__alt_data_end+0xf80003a8>
			code = code | (bit << i);
		}
//        printf("new code: %02x\n", code);


		if (code == clear_code) {
10000434:	e0ffef17 	ldw	r3,-68(fp)
10000438:	e0bff617 	ldw	r2,-40(fp)
1000043c:	1880381e 	bne	r3,r2,10000520 <uncompress+0x2b4>
			code_length = reset_code_length;
10000440:	e0bff817 	ldw	r2,-32(fp)
10000444:	e0bffb15 	stw	r2,-20(fp)
			dictionary = (dictionary_entry_t *)realloc(dictionary,
													   sizeof(dictionary_entry_t) * (1 << (code_length + 1)));
10000448:	e0bffb17 	ldw	r2,-20(fp)
1000044c:	10800044 	addi	r2,r2,1
//        printf("new code: %02x\n", code);


		if (code == clear_code) {
			code_length = reset_code_length;
			dictionary = (dictionary_entry_t *)realloc(dictionary,
10000450:	00c00304 	movi	r3,12
10000454:	1884983a 	sll	r2,r3,r2
10000458:	100b883a 	mov	r5,r2
1000045c:	e13ff117 	ldw	r4,-60(fp)
10000460:	00045700 	call	10004570 <realloc>
10000464:	e0bff115 	stw	r2,-60(fp)
													   sizeof(dictionary_entry_t) * (1 << (code_length + 1)));

			for (dictionary_ind = 0;
10000468:	e03ff215 	stw	zero,-56(fp)
1000046c:	00001e06 	br	100004e8 <uncompress+0x27c>
				 dictionary_ind < (1 << code_length);
				 dictionary_ind++) {
				dictionary[dictionary_ind].byte = dictionary_ind;
10000470:	e0bff217 	ldw	r2,-56(fp)
10000474:	01400304 	movi	r5,12
10000478:	1009883a 	mov	r4,r2
1000047c:	0001d400 	call	10001d40 <__mulsi3>
10000480:	1007883a 	mov	r3,r2
10000484:	e0bff117 	ldw	r2,-60(fp)
10000488:	10c5883a 	add	r2,r2,r3
1000048c:	e0fff217 	ldw	r3,-56(fp)
10000490:	10c00005 	stb	r3,0(r2)
				// XXX this only works because prev is a 32-bit int32_t (> 12 bits)
				dictionary[dictionary_ind].prev = -1;
10000494:	e0bff217 	ldw	r2,-56(fp)
10000498:	01400304 	movi	r5,12
1000049c:	1009883a 	mov	r4,r2
100004a0:	0001d400 	call	10001d40 <__mulsi3>
100004a4:	1007883a 	mov	r3,r2
100004a8:	e0bff117 	ldw	r2,-60(fp)
100004ac:	10c5883a 	add	r2,r2,r3
100004b0:	00ffffc4 	movi	r3,-1
100004b4:	10c00115 	stw	r3,4(r2)
				dictionary[dictionary_ind].len = 1;
100004b8:	e0bff217 	ldw	r2,-56(fp)
100004bc:	01400304 	movi	r5,12
100004c0:	1009883a 	mov	r4,r2
100004c4:	0001d400 	call	10001d40 <__mulsi3>
100004c8:	1007883a 	mov	r3,r2
100004cc:	e0bff117 	ldw	r2,-60(fp)
100004d0:	10c5883a 	add	r2,r2,r3
100004d4:	00c00044 	movi	r3,1
100004d8:	10c00215 	stw	r3,8(r2)
			dictionary = (dictionary_entry_t *)realloc(dictionary,
													   sizeof(dictionary_entry_t) * (1 << (code_length + 1)));

			for (dictionary_ind = 0;
				 dictionary_ind < (1 << code_length);
				 dictionary_ind++) {
100004dc:	e0bff217 	ldw	r2,-56(fp)
100004e0:	10800044 	addi	r2,r2,1
100004e4:	e0bff215 	stw	r2,-56(fp)
			code_length = reset_code_length;
			dictionary = (dictionary_entry_t *)realloc(dictionary,
													   sizeof(dictionary_entry_t) * (1 << (code_length + 1)));

			for (dictionary_ind = 0;
				 dictionary_ind < (1 << code_length);
100004e8:	00c00044 	movi	r3,1
100004ec:	e0bffb17 	ldw	r2,-20(fp)
100004f0:	1884983a 	sll	r2,r3,r2
		if (code == clear_code) {
			code_length = reset_code_length;
			dictionary = (dictionary_entry_t *)realloc(dictionary,
													   sizeof(dictionary_entry_t) * (1 << (code_length + 1)));

			for (dictionary_ind = 0;
100004f4:	e0fff217 	ldw	r3,-56(fp)
100004f8:	18bfdd16 	blt	r3,r2,10000470 <__alt_data_end+0xf8000470>
				dictionary[dictionary_ind].byte = dictionary_ind;
				// XXX this only works because prev is a 32-bit int32_t (> 12 bits)
				dictionary[dictionary_ind].prev = -1;
				dictionary[dictionary_ind].len = 1;
			}
			dictionary_ind++;
100004fc:	e0bff217 	ldw	r2,-56(fp)
10000500:	10800044 	addi	r2,r2,1
10000504:	e0bff215 	stw	r2,-56(fp)
			dictionary_ind++;
10000508:	e0bff217 	ldw	r2,-56(fp)
1000050c:	10800044 	addi	r2,r2,1
10000510:	e0bff215 	stw	r2,-56(fp)
			prev = -1;
10000514:	00bfffc4 	movi	r2,-1
10000518:	e0bff015 	stw	r2,-64(fp)
			continue;
1000051c:	0000ed06 	br	100008d4 <uncompress+0x668>
		} else if (code == stop_code) {
10000520:	e0ffef17 	ldw	r3,-68(fp)
10000524:	e0bff717 	ldw	r2,-36(fp)
10000528:	18800f1e 	bne	r3,r2,10000568 <uncompress+0x2fc>
			if (input_length > 1) {
1000052c:	e0bffd17 	ldw	r2,-12(fp)
10000530:	10800090 	cmplti	r2,r2,2
10000534:	1000ea1e 	bne	r2,zero,100008e0 <uncompress+0x674>
				fprintf(stderr, "Malformed GIF (early stop code)\n");
10000538:	00840074 	movhi	r2,4097
1000053c:	1092eb04 	addi	r2,r2,19372
10000540:	10800017 	ldw	r2,0(r2)
10000544:	10800317 	ldw	r2,12(r2)
10000548:	100f883a 	mov	r7,r2
1000054c:	01800804 	movi	r6,32
10000550:	01400044 	movi	r5,1
10000554:	01040074 	movhi	r4,4097
10000558:	210a8904 	addi	r4,r4,10788
1000055c:	000371c0 	call	1000371c <fwrite>
				exit(0);
10000560:	0009883a 	mov	r4,zero
10000564:	0001ed80 	call	10001ed8 <exit>
			break;
		}

		// Update the dictionary with this character plus the _entry_
		// (character or string) that came before it
		if ((prev > -1) && (code_length < 12)) {
10000568:	e0bff017 	ldw	r2,-64(fp)
1000056c:	10009316 	blt	r2,zero,100007bc <uncompress+0x550>
10000570:	e0bffb17 	ldw	r2,-20(fp)
10000574:	10800308 	cmpgei	r2,r2,12
10000578:	1000901e 	bne	r2,zero,100007bc <uncompress+0x550>

			if (code > dictionary_ind) {
1000057c:	e0bfef17 	ldw	r2,-68(fp)
10000580:	e0fff217 	ldw	r3,-56(fp)
10000584:	18800c0e 	bge	r3,r2,100005b8 <uncompress+0x34c>
				fprintf(stderr, "code = %.02x, but dictionary_ind = %.02x\n",
10000588:	00840074 	movhi	r2,4097
1000058c:	1092eb04 	addi	r2,r2,19372
10000590:	10800017 	ldw	r2,0(r2)
10000594:	10800317 	ldw	r2,12(r2)
10000598:	e1fff217 	ldw	r7,-56(fp)
1000059c:	e1bfef17 	ldw	r6,-68(fp)
100005a0:	01440074 	movhi	r5,4097
100005a4:	294a9204 	addi	r5,r5,10824
100005a8:	1009883a 	mov	r4,r2
100005ac:	00027fc0 	call	100027fc <fprintf>
						code, dictionary_ind);
				exit(0);
100005b0:	0009883a 	mov	r4,zero
100005b4:	0001ed80 	call	10001ed8 <exit>
			}

			// Special handling for KwKwK
			if (code == dictionary_ind) {
100005b8:	e0ffef17 	ldw	r3,-68(fp)
100005bc:	e0bff217 	ldw	r2,-56(fp)
100005c0:	1880271e 	bne	r3,r2,10000660 <uncompress+0x3f4>
				int32_t ptr = prev;
100005c4:	e0bff017 	ldw	r2,-64(fp)
100005c8:	e0bff415 	stw	r2,-48(fp)

				while (dictionary[ptr].prev != -1) {
100005cc:	00000906 	br	100005f4 <uncompress+0x388>
					ptr = dictionary[ptr].prev;
100005d0:	e0bff417 	ldw	r2,-48(fp)
100005d4:	01400304 	movi	r5,12
100005d8:	1009883a 	mov	r4,r2
100005dc:	0001d400 	call	10001d40 <__mulsi3>
100005e0:	1007883a 	mov	r3,r2
100005e4:	e0bff117 	ldw	r2,-60(fp)
100005e8:	10c5883a 	add	r2,r2,r3
100005ec:	10800117 	ldw	r2,4(r2)
100005f0:	e0bff415 	stw	r2,-48(fp)

			// Special handling for KwKwK
			if (code == dictionary_ind) {
				int32_t ptr = prev;

				while (dictionary[ptr].prev != -1) {
100005f4:	e0bff417 	ldw	r2,-48(fp)
100005f8:	01400304 	movi	r5,12
100005fc:	1009883a 	mov	r4,r2
10000600:	0001d400 	call	10001d40 <__mulsi3>
10000604:	1007883a 	mov	r3,r2
10000608:	e0bff117 	ldw	r2,-60(fp)
1000060c:	10c5883a 	add	r2,r2,r3
10000610:	10800117 	ldw	r2,4(r2)
10000614:	10bfffd8 	cmpnei	r2,r2,-1
10000618:	103fed1e 	bne	r2,zero,100005d0 <__alt_data_end+0xf80005d0>
					ptr = dictionary[ptr].prev;
				}
				dictionary[dictionary_ind].byte = dictionary[ptr].byte;
1000061c:	e0bff217 	ldw	r2,-56(fp)
10000620:	01400304 	movi	r5,12
10000624:	1009883a 	mov	r4,r2
10000628:	0001d400 	call	10001d40 <__mulsi3>
1000062c:	1007883a 	mov	r3,r2
10000630:	e0bff117 	ldw	r2,-60(fp)
10000634:	10e1883a 	add	r16,r2,r3
10000638:	e0bff417 	ldw	r2,-48(fp)
1000063c:	01400304 	movi	r5,12
10000640:	1009883a 	mov	r4,r2
10000644:	0001d400 	call	10001d40 <__mulsi3>
10000648:	1007883a 	mov	r3,r2
1000064c:	e0bff117 	ldw	r2,-60(fp)
10000650:	10c5883a 	add	r2,r2,r3
10000654:	10800003 	ldbu	r2,0(r2)
10000658:	80800005 	stb	r2,0(r16)
1000065c:	00002606 	br	100006f8 <uncompress+0x48c>
			} else {
				int32_t ptr = code;
10000660:	e0bfef17 	ldw	r2,-68(fp)
10000664:	e0bff515 	stw	r2,-44(fp)
				while (dictionary[ptr].prev != -1) {
10000668:	00000906 	br	10000690 <uncompress+0x424>
					ptr = dictionary[ptr].prev;
1000066c:	e0bff517 	ldw	r2,-44(fp)
10000670:	01400304 	movi	r5,12
10000674:	1009883a 	mov	r4,r2
10000678:	0001d400 	call	10001d40 <__mulsi3>
1000067c:	1007883a 	mov	r3,r2
10000680:	e0bff117 	ldw	r2,-60(fp)
10000684:	10c5883a 	add	r2,r2,r3
10000688:	10800117 	ldw	r2,4(r2)
1000068c:	e0bff515 	stw	r2,-44(fp)
					ptr = dictionary[ptr].prev;
				}
				dictionary[dictionary_ind].byte = dictionary[ptr].byte;
			} else {
				int32_t ptr = code;
				while (dictionary[ptr].prev != -1) {
10000690:	e0bff517 	ldw	r2,-44(fp)
10000694:	01400304 	movi	r5,12
10000698:	1009883a 	mov	r4,r2
1000069c:	0001d400 	call	10001d40 <__mulsi3>
100006a0:	1007883a 	mov	r3,r2
100006a4:	e0bff117 	ldw	r2,-60(fp)
100006a8:	10c5883a 	add	r2,r2,r3
100006ac:	10800117 	ldw	r2,4(r2)
100006b0:	10bfffd8 	cmpnei	r2,r2,-1
100006b4:	103fed1e 	bne	r2,zero,1000066c <__alt_data_end+0xf800066c>
					ptr = dictionary[ptr].prev;
				}
				dictionary[dictionary_ind].byte = dictionary[ptr].byte;
100006b8:	e0bff217 	ldw	r2,-56(fp)
100006bc:	01400304 	movi	r5,12
100006c0:	1009883a 	mov	r4,r2
100006c4:	0001d400 	call	10001d40 <__mulsi3>
100006c8:	1007883a 	mov	r3,r2
100006cc:	e0bff117 	ldw	r2,-60(fp)
100006d0:	10e1883a 	add	r16,r2,r3
100006d4:	e0bff517 	ldw	r2,-44(fp)
100006d8:	01400304 	movi	r5,12
100006dc:	1009883a 	mov	r4,r2
100006e0:	0001d400 	call	10001d40 <__mulsi3>
100006e4:	1007883a 	mov	r3,r2
100006e8:	e0bff117 	ldw	r2,-60(fp)
100006ec:	10c5883a 	add	r2,r2,r3
100006f0:	10800003 	ldbu	r2,0(r2)
100006f4:	80800005 	stb	r2,0(r16)
			}

			dictionary[dictionary_ind].prev = prev;
100006f8:	e0bff217 	ldw	r2,-56(fp)
100006fc:	01400304 	movi	r5,12
10000700:	1009883a 	mov	r4,r2
10000704:	0001d400 	call	10001d40 <__mulsi3>
10000708:	1007883a 	mov	r3,r2
1000070c:	e0bff117 	ldw	r2,-60(fp)
10000710:	10c5883a 	add	r2,r2,r3
10000714:	e0fff017 	ldw	r3,-64(fp)
10000718:	10c00115 	stw	r3,4(r2)

			dictionary[dictionary_ind].len = dictionary[prev].len + 1;
1000071c:	e0bff217 	ldw	r2,-56(fp)
10000720:	01400304 	movi	r5,12
10000724:	1009883a 	mov	r4,r2
10000728:	0001d400 	call	10001d40 <__mulsi3>
1000072c:	1007883a 	mov	r3,r2
10000730:	e0bff117 	ldw	r2,-60(fp)
10000734:	10e1883a 	add	r16,r2,r3
10000738:	e0bff017 	ldw	r2,-64(fp)
1000073c:	01400304 	movi	r5,12
10000740:	1009883a 	mov	r4,r2
10000744:	0001d400 	call	10001d40 <__mulsi3>
10000748:	1007883a 	mov	r3,r2
1000074c:	e0bff117 	ldw	r2,-60(fp)
10000750:	10c5883a 	add	r2,r2,r3
10000754:	10800217 	ldw	r2,8(r2)
10000758:	10800044 	addi	r2,r2,1
1000075c:	80800215 	stw	r2,8(r16)

			dictionary_ind++;
10000760:	e0bff217 	ldw	r2,-56(fp)
10000764:	10800044 	addi	r2,r2,1
10000768:	e0bff215 	stw	r2,-56(fp)

			// GIF89a mandates that this stops at 12 bits
			if ((dictionary_ind == (1 << (code_length + 1))) &&
1000076c:	e0bffb17 	ldw	r2,-20(fp)
10000770:	10800044 	addi	r2,r2,1
10000774:	00c00044 	movi	r3,1
10000778:	1886983a 	sll	r3,r3,r2
1000077c:	e0bff217 	ldw	r2,-56(fp)
10000780:	18800e1e 	bne	r3,r2,100007bc <uncompress+0x550>
10000784:	e0bffb17 	ldw	r2,-20(fp)
10000788:	108002c8 	cmpgei	r2,r2,11
1000078c:	10000b1e 	bne	r2,zero,100007bc <uncompress+0x550>
				(code_length < 11)) {
				code_length++;
10000790:	e0bffb17 	ldw	r2,-20(fp)
10000794:	10800044 	addi	r2,r2,1
10000798:	e0bffb15 	stw	r2,-20(fp)

				dictionary = (dictionary_entry_t *)realloc(dictionary,
														   sizeof(dictionary_entry_t) * (1 << (code_length + 1)));
1000079c:	e0bffb17 	ldw	r2,-20(fp)
100007a0:	10800044 	addi	r2,r2,1
			// GIF89a mandates that this stops at 12 bits
			if ((dictionary_ind == (1 << (code_length + 1))) &&
				(code_length < 11)) {
				code_length++;

				dictionary = (dictionary_entry_t *)realloc(dictionary,
100007a4:	00c00304 	movi	r3,12
100007a8:	1884983a 	sll	r2,r3,r2
100007ac:	100b883a 	mov	r5,r2
100007b0:	e13ff117 	ldw	r4,-60(fp)
100007b4:	00045700 	call	10004570 <realloc>
100007b8:	e0bff115 	stw	r2,-60(fp)
														   sizeof(dictionary_entry_t) * (1 << (code_length + 1)));
			}
		}

		prev = code;
100007bc:	e0bfef17 	ldw	r2,-68(fp)
100007c0:	e0bff015 	stw	r2,-64(fp)

		// Now copy the dictionary entry backwards int32_to "out"
		match_len = dictionary[code].len;
100007c4:	e0bfef17 	ldw	r2,-68(fp)
100007c8:	01400304 	movi	r5,12
100007cc:	1009883a 	mov	r4,r2
100007d0:	0001d400 	call	10001d40 <__mulsi3>
100007d4:	1007883a 	mov	r3,r2
100007d8:	e0bff117 	ldw	r2,-60(fp)
100007dc:	10c5883a 	add	r2,r2,r3
100007e0:	10800217 	ldw	r2,8(r2)
100007e4:	e0bffa15 	stw	r2,-24(fp)
		while (code != -1) {
100007e8:	00003306 	br	100008b8 <uncompress+0x64c>
			out[dictionary[code].len - 1] = dictionary[code].byte;
100007ec:	e0bfef17 	ldw	r2,-68(fp)
100007f0:	01400304 	movi	r5,12
100007f4:	1009883a 	mov	r4,r2
100007f8:	0001d400 	call	10001d40 <__mulsi3>
100007fc:	1007883a 	mov	r3,r2
10000800:	e0bff117 	ldw	r2,-60(fp)
10000804:	10c5883a 	add	r2,r2,r3
10000808:	10800217 	ldw	r2,8(r2)
1000080c:	10bfffc4 	addi	r2,r2,-1
10000810:	e0fffe17 	ldw	r3,-8(fp)
10000814:	18a1883a 	add	r16,r3,r2
10000818:	e0bfef17 	ldw	r2,-68(fp)
1000081c:	01400304 	movi	r5,12
10000820:	1009883a 	mov	r4,r2
10000824:	0001d400 	call	10001d40 <__mulsi3>
10000828:	1007883a 	mov	r3,r2
1000082c:	e0bff117 	ldw	r2,-60(fp)
10000830:	10c5883a 	add	r2,r2,r3
10000834:	10800003 	ldbu	r2,0(r2)
10000838:	80800005 	stb	r2,0(r16)
			if (dictionary[code].prev == code) {
1000083c:	e0bfef17 	ldw	r2,-68(fp)
10000840:	01400304 	movi	r5,12
10000844:	1009883a 	mov	r4,r2
10000848:	0001d400 	call	10001d40 <__mulsi3>
1000084c:	1007883a 	mov	r3,r2
10000850:	e0bff117 	ldw	r2,-60(fp)
10000854:	10c5883a 	add	r2,r2,r3
10000858:	10c00117 	ldw	r3,4(r2)
1000085c:	e0bfef17 	ldw	r2,-68(fp)
10000860:	18800c1e 	bne	r3,r2,10000894 <uncompress+0x628>
				fprintf(stderr, "internal error; self-reference.");
10000864:	00840074 	movhi	r2,4097
10000868:	1092eb04 	addi	r2,r2,19372
1000086c:	10800017 	ldw	r2,0(r2)
10000870:	10800317 	ldw	r2,12(r2)
10000874:	100f883a 	mov	r7,r2
10000878:	018007c4 	movi	r6,31
1000087c:	01400044 	movi	r5,1
10000880:	01040074 	movhi	r4,4097
10000884:	210a9d04 	addi	r4,r4,10868
10000888:	000371c0 	call	1000371c <fwrite>
				exit(0);
1000088c:	0009883a 	mov	r4,zero
10000890:	0001ed80 	call	10001ed8 <exit>
			}
			code = dictionary[code].prev;
10000894:	e0bfef17 	ldw	r2,-68(fp)
10000898:	01400304 	movi	r5,12
1000089c:	1009883a 	mov	r4,r2
100008a0:	0001d400 	call	10001d40 <__mulsi3>
100008a4:	1007883a 	mov	r3,r2
100008a8:	e0bff117 	ldw	r2,-60(fp)
100008ac:	10c5883a 	add	r2,r2,r3
100008b0:	10800117 	ldw	r2,4(r2)
100008b4:	e0bfef15 	stw	r2,-68(fp)

		prev = code;

		// Now copy the dictionary entry backwards int32_to "out"
		match_len = dictionary[code].len;
		while (code != -1) {
100008b8:	e0bfef17 	ldw	r2,-68(fp)
100008bc:	10bfffd8 	cmpnei	r2,r2,-1
100008c0:	103fca1e 	bne	r2,zero,100007ec <__alt_data_end+0xf80007ec>
				exit(0);
			}
			code = dictionary[code].prev;
		}

		out += match_len;
100008c4:	e0bffa17 	ldw	r2,-24(fp)
100008c8:	e0fffe17 	ldw	r3,-8(fp)
100008cc:	1885883a 	add	r2,r3,r2
100008d0:	e0bffe15 	stw	r2,-8(fp)
	// 2^code_len + 1 is the special "end" code; don't give it an entry here
	dictionary_ind++;
	dictionary_ind++;

	// TODO verify that the very last byte is clear_code + 1
	while (input_length) {
100008d4:	e0bffd17 	ldw	r2,-12(fp)
100008d8:	103eb01e 	bne	r2,zero,1000039c <__alt_data_end+0xf800039c>
100008dc:	00000106 	br	100008e4 <uncompress+0x678>
		} else if (code == stop_code) {
			if (input_length > 1) {
				fprintf(stderr, "Malformed GIF (early stop code)\n");
				exit(0);
			}
			break;
100008e0:	0001883a 	nop
			code = dictionary[code].prev;
		}

		out += match_len;
	}
	free(dictionary);
100008e4:	e13ff117 	ldw	r4,-60(fp)
100008e8:	00039200 	call	10003920 <free>
}
100008ec:	0001883a 	nop
100008f0:	e6ffff04 	addi	sp,fp,-4
100008f4:	dfc00217 	ldw	ra,8(sp)
100008f8:	df000117 	ldw	fp,4(sp)
100008fc:	dc000017 	ldw	r16,0(sp)
10000900:	dec00304 	addi	sp,sp,12
10000904:	f800283a 	ret

10000908 <checkPacked>:
volatile static uint32_t *ocmptr = (uint32_t *)0x00001000;
static int ON_NIOS = 1;

volatile unsigned char *fileptr;

void checkPacked() {
10000908:	deffff04 	addi	sp,sp,-4
1000090c:	df000015 	stw	fp,0(sp)
10000910:	d839883a 	mov	fp,sp
	assert(sizeof(HeaderBlock) == 6);
	assert(sizeof(LSD) == 7);
	assert(sizeof(GCE) == 6);
	assert(sizeof(imageDescriptor) == 10);
	assert(sizeof(colorTableEntry) == 3);
}
10000914:	0001883a 	nop
10000918:	e037883a 	mov	sp,fp
1000091c:	df000017 	ldw	fp,0(sp)
10000920:	dec00104 	addi	sp,sp,4
10000924:	f800283a 	ret

10000928 <read>:

volatile unsigned char *read(void *dest, int size, int segments, volatile unsigned char *src) {
10000928:	defffa04 	addi	sp,sp,-24
1000092c:	dfc00515 	stw	ra,20(sp)
10000930:	df000415 	stw	fp,16(sp)
10000934:	df000404 	addi	fp,sp,16
10000938:	e13ffc15 	stw	r4,-16(fp)
1000093c:	e17ffd15 	stw	r5,-12(fp)
10000940:	e1bffe15 	stw	r6,-8(fp)
10000944:	e1ffff15 	stw	r7,-4(fp)
	memcpy(dest, src, size * segments);
10000948:	e17ffe17 	ldw	r5,-8(fp)
1000094c:	e13ffd17 	ldw	r4,-12(fp)
10000950:	0001d400 	call	10001d40 <__mulsi3>
10000954:	100d883a 	mov	r6,r2
10000958:	e17fff17 	ldw	r5,-4(fp)
1000095c:	e13ffc17 	ldw	r4,-16(fp)
10000960:	00041400 	call	10004140 <memcpy>
	return src + size * segments;
10000964:	e17ffe17 	ldw	r5,-8(fp)
10000968:	e13ffd17 	ldw	r4,-12(fp)
1000096c:	0001d400 	call	10001d40 <__mulsi3>
10000970:	1007883a 	mov	r3,r2
10000974:	e0bfff17 	ldw	r2,-4(fp)
10000978:	10c5883a 	add	r2,r2,r3
}
1000097c:	e037883a 	mov	sp,fp
10000980:	dfc00117 	ldw	ra,4(sp)
10000984:	df000017 	ldw	fp,0(sp)
10000988:	dec00204 	addi	sp,sp,8
1000098c:	f800283a 	ret

10000990 <getch>:
//
unsigned char getch(volatile unsigned char *ptr) {
10000990:	defffe04 	addi	sp,sp,-8
10000994:	df000115 	stw	fp,4(sp)
10000998:	df000104 	addi	fp,sp,4
1000099c:	e13fff15 	stw	r4,-4(fp)
	return *fileptr;
100009a0:	00840074 	movhi	r2,4097
100009a4:	109a2004 	addi	r2,r2,26752
100009a8:	10800017 	ldw	r2,0(r2)
100009ac:	10800003 	ldbu	r2,0(r2)
}
100009b0:	e037883a 	mov	sp,fp
100009b4:	df000017 	ldw	fp,0(sp)
100009b8:	dec00104 	addi	sp,sp,4
100009bc:	f800283a 	ret

100009c0 <seek>:

volatile unsigned char *seek(volatile unsigned char *ptr, int size) {
100009c0:	defffd04 	addi	sp,sp,-12
100009c4:	df000215 	stw	fp,8(sp)
100009c8:	df000204 	addi	fp,sp,8
100009cc:	e13ffe15 	stw	r4,-8(fp)
100009d0:	e17fff15 	stw	r5,-4(fp)
	ptr += size;
100009d4:	e0bfff17 	ldw	r2,-4(fp)
100009d8:	e0fffe17 	ldw	r3,-8(fp)
100009dc:	1885883a 	add	r2,r3,r2
100009e0:	e0bffe15 	stw	r2,-8(fp)
	return ptr;
100009e4:	e0bffe17 	ldw	r2,-8(fp)
}
100009e8:	e037883a 	mov	sp,fp
100009ec:	df000017 	ldw	fp,0(sp)
100009f0:	dec00104 	addi	sp,sp,4
100009f4:	f800283a 	ret

100009f8 <skipToTerm>:

void skipToTerm() {
100009f8:	defffe04 	addi	sp,sp,-8
100009fc:	dfc00115 	stw	ra,4(sp)
10000a00:	df000015 	stw	fp,0(sp)
10000a04:	d839883a 	mov	fp,sp
	while (getch(fileptr) != 0x00) {
10000a08:	00000706 	br	10000a28 <skipToTerm+0x30>
		fileptr++;
10000a0c:	00840074 	movhi	r2,4097
10000a10:	109a2004 	addi	r2,r2,26752
10000a14:	10800017 	ldw	r2,0(r2)
10000a18:	10c00044 	addi	r3,r2,1
10000a1c:	00840074 	movhi	r2,4097
10000a20:	109a2004 	addi	r2,r2,26752
10000a24:	10c00015 	stw	r3,0(r2)
	ptr += size;
	return ptr;
}

void skipToTerm() {
	while (getch(fileptr) != 0x00) {
10000a28:	00840074 	movhi	r2,4097
10000a2c:	109a2004 	addi	r2,r2,26752
10000a30:	10800017 	ldw	r2,0(r2)
10000a34:	1009883a 	mov	r4,r2
10000a38:	00009900 	call	10000990 <getch>
10000a3c:	10803fcc 	andi	r2,r2,255
10000a40:	103ff21e 	bne	r2,zero,10000a0c <__alt_data_end+0xf8000a0c>
		fileptr++;
	}
	printf("Skipping!\n");
10000a44:	01040074 	movhi	r4,4097
10000a48:	210aa504 	addi	r4,r4,10900
10000a4c:	000455c0 	call	1000455c <puts>

	fileptr++;
10000a50:	00840074 	movhi	r2,4097
10000a54:	109a2004 	addi	r2,r2,26752
10000a58:	10800017 	ldw	r2,0(r2)
10000a5c:	10c00044 	addi	r3,r2,1
10000a60:	00840074 	movhi	r2,4097
10000a64:	109a2004 	addi	r2,r2,26752
10000a68:	10c00015 	stw	r3,0(r2)
}
10000a6c:	0001883a 	nop
10000a70:	e037883a 	mov	sp,fp
10000a74:	dfc00117 	ldw	ra,4(sp)
10000a78:	df000017 	ldw	fp,0(sp)
10000a7c:	dec00204 	addi	sp,sp,8
10000a80:	f800283a 	ret

10000a84 <writeSRAM>:

void writeSRAM() {
10000a84:	defffc04 	addi	sp,sp,-16
10000a88:	dfc00315 	stw	ra,12(sp)
10000a8c:	df000215 	stw	fp,8(sp)
10000a90:	df000204 	addi	fp,sp,8
	printf("here: %02x\n", fileptr[0]);
10000a94:	00840074 	movhi	r2,4097
10000a98:	109a2004 	addi	r2,r2,26752
10000a9c:	10800017 	ldw	r2,0(r2)
10000aa0:	10800003 	ldbu	r2,0(r2)
10000aa4:	10803fcc 	andi	r2,r2,255
10000aa8:	100b883a 	mov	r5,r2
10000aac:	01040074 	movhi	r4,4097
10000ab0:	210aa804 	addi	r4,r4,10912
10000ab4:	00044400 	call	10004440 <printf>
	for (int i = 0; i < _gif_len; i++) {
10000ab8:	e03ffe15 	stw	zero,-8(fp)
10000abc:	00002006 	br	10000b40 <writeSRAM+0xbc>
		fileptr[i] = _gif[i];
10000ac0:	00840074 	movhi	r2,4097
10000ac4:	109a2004 	addi	r2,r2,26752
10000ac8:	10c00017 	ldw	r3,0(r2)
10000acc:	e0bffe17 	ldw	r2,-8(fp)
10000ad0:	1887883a 	add	r3,r3,r2
10000ad4:	00840074 	movhi	r2,4097
10000ad8:	108bf804 	addi	r2,r2,12256
10000adc:	e13ffe17 	ldw	r4,-8(fp)
10000ae0:	1105883a 	add	r2,r2,r4
10000ae4:	10800003 	ldbu	r2,0(r2)
10000ae8:	18800005 	stb	r2,0(r3)
		printf("%02x, %02x \n", fileptr[i], _gif[i]);
10000aec:	00840074 	movhi	r2,4097
10000af0:	109a2004 	addi	r2,r2,26752
10000af4:	10c00017 	ldw	r3,0(r2)
10000af8:	e0bffe17 	ldw	r2,-8(fp)
10000afc:	1885883a 	add	r2,r3,r2
10000b00:	10800003 	ldbu	r2,0(r2)
10000b04:	11003fcc 	andi	r4,r2,255
10000b08:	00840074 	movhi	r2,4097
10000b0c:	108bf804 	addi	r2,r2,12256
10000b10:	e0fffe17 	ldw	r3,-8(fp)
10000b14:	10c5883a 	add	r2,r2,r3
10000b18:	10800003 	ldbu	r2,0(r2)
10000b1c:	10803fcc 	andi	r2,r2,255
10000b20:	100d883a 	mov	r6,r2
10000b24:	200b883a 	mov	r5,r4
10000b28:	01040074 	movhi	r4,4097
10000b2c:	210aab04 	addi	r4,r4,10924
10000b30:	00044400 	call	10004440 <printf>
	fileptr++;
}

void writeSRAM() {
	printf("here: %02x\n", fileptr[0]);
	for (int i = 0; i < _gif_len; i++) {
10000b34:	e0bffe17 	ldw	r2,-8(fp)
10000b38:	10800044 	addi	r2,r2,1
10000b3c:	e0bffe15 	stw	r2,-8(fp)
10000b40:	e0fffe17 	ldw	r3,-8(fp)
10000b44:	00840074 	movhi	r2,4097
10000b48:	108c2f04 	addi	r2,r2,12476
10000b4c:	10800017 	ldw	r2,0(r2)
10000b50:	18bfdb36 	bltu	r3,r2,10000ac0 <__alt_data_end+0xf8000ac0>
		fileptr[i] = _gif[i];
		printf("%02x, %02x \n", fileptr[i], _gif[i]);
	}
//	fileptr[48] = 0x32;
//	fileptr[49] = 0x2e;
	for (int i = 0; i < _gif_len; i++) {
10000b54:	e03fff15 	stw	zero,-4(fp)
10000b58:	00002c06 	br	10000c0c <writeSRAM+0x188>
		printf("%d: %02x | %02x \n", i, fileptr[i], _gif[i]);
10000b5c:	00840074 	movhi	r2,4097
10000b60:	109a2004 	addi	r2,r2,26752
10000b64:	10c00017 	ldw	r3,0(r2)
10000b68:	e0bfff17 	ldw	r2,-4(fp)
10000b6c:	1885883a 	add	r2,r3,r2
10000b70:	10800003 	ldbu	r2,0(r2)
10000b74:	11003fcc 	andi	r4,r2,255
10000b78:	00840074 	movhi	r2,4097
10000b7c:	108bf804 	addi	r2,r2,12256
10000b80:	e0ffff17 	ldw	r3,-4(fp)
10000b84:	10c5883a 	add	r2,r2,r3
10000b88:	10800003 	ldbu	r2,0(r2)
10000b8c:	10803fcc 	andi	r2,r2,255
10000b90:	100f883a 	mov	r7,r2
10000b94:	200d883a 	mov	r6,r4
10000b98:	e17fff17 	ldw	r5,-4(fp)
10000b9c:	01040074 	movhi	r4,4097
10000ba0:	210aaf04 	addi	r4,r4,10940
10000ba4:	00044400 	call	10004440 <printf>
		assert(fileptr[i] == _gif[i]);
10000ba8:	00840074 	movhi	r2,4097
10000bac:	109a2004 	addi	r2,r2,26752
10000bb0:	10c00017 	ldw	r3,0(r2)
10000bb4:	e0bfff17 	ldw	r2,-4(fp)
10000bb8:	1885883a 	add	r2,r3,r2
10000bbc:	11000003 	ldbu	r4,0(r2)
10000bc0:	00840074 	movhi	r2,4097
10000bc4:	108bf804 	addi	r2,r2,12256
10000bc8:	e0ffff17 	ldw	r3,-4(fp)
10000bcc:	10c5883a 	add	r2,r2,r3
10000bd0:	10800003 	ldbu	r2,0(r2)
10000bd4:	20c03fcc 	andi	r3,r4,255
10000bd8:	10803fcc 	andi	r2,r2,255
10000bdc:	18800826 	beq	r3,r2,10000c00 <writeSRAM+0x17c>
10000be0:	01c40074 	movhi	r7,4097
10000be4:	39cab404 	addi	r7,r7,10960
10000be8:	01840074 	movhi	r6,4097
10000bec:	318b2004 	addi	r6,r6,11392
10000bf0:	01400e84 	movi	r5,58
10000bf4:	01040074 	movhi	r4,4097
10000bf8:	210aba04 	addi	r4,r4,10984
10000bfc:	0001d680 	call	10001d68 <__assert_func>
		fileptr[i] = _gif[i];
		printf("%02x, %02x \n", fileptr[i], _gif[i]);
	}
//	fileptr[48] = 0x32;
//	fileptr[49] = 0x2e;
	for (int i = 0; i < _gif_len; i++) {
10000c00:	e0bfff17 	ldw	r2,-4(fp)
10000c04:	10800044 	addi	r2,r2,1
10000c08:	e0bfff15 	stw	r2,-4(fp)
10000c0c:	e0ffff17 	ldw	r3,-4(fp)
10000c10:	00840074 	movhi	r2,4097
10000c14:	108c2f04 	addi	r2,r2,12476
10000c18:	10800017 	ldw	r2,0(r2)
10000c1c:	18bfcf36 	bltu	r3,r2,10000b5c <__alt_data_end+0xf8000b5c>
		printf("%d: %02x | %02x \n", i, fileptr[i], _gif[i]);
		assert(fileptr[i] == _gif[i]);
	}
}
10000c20:	0001883a 	nop
10000c24:	e037883a 	mov	sp,fp
10000c28:	dfc00117 	ldw	ra,4(sp)
10000c2c:	df000017 	ldw	fp,0(sp)
10000c30:	dec00204 	addi	sp,sp,8
10000c34:	f800283a 	ret

10000c38 <eraseSRAM>:

void eraseSRAM() {
10000c38:	defffe04 	addi	sp,sp,-8
10000c3c:	df000115 	stw	fp,4(sp)
10000c40:	df000104 	addi	fp,sp,4
	static unsigned char *temp = (unsigned char *)0x00400000;
	for (int i = 0; i<2000000; i++) {
10000c44:	e03fff15 	stw	zero,-4(fp)
10000c48:	00000906 	br	10000c70 <eraseSRAM+0x38>
		temp[i] = 0x00;
10000c4c:	00840074 	movhi	r2,4097
10000c50:	108c3404 	addi	r2,r2,12496
10000c54:	10c00017 	ldw	r3,0(r2)
10000c58:	e0bfff17 	ldw	r2,-4(fp)
10000c5c:	1885883a 	add	r2,r3,r2
10000c60:	10000005 	stb	zero,0(r2)
	}
}

void eraseSRAM() {
	static unsigned char *temp = (unsigned char *)0x00400000;
	for (int i = 0; i<2000000; i++) {
10000c64:	e0bfff17 	ldw	r2,-4(fp)
10000c68:	10800044 	addi	r2,r2,1
10000c6c:	e0bfff15 	stw	r2,-4(fp)
10000c70:	e0ffff17 	ldw	r3,-4(fp)
10000c74:	008007f4 	movhi	r2,31
10000c78:	10a11fc4 	addi	r2,r2,-31617
10000c7c:	10fff30e 	bge	r2,r3,10000c4c <__alt_data_end+0xf8000c4c>
		temp[i] = 0x00;
	}
	//Probably slow af
}
10000c80:	0001883a 	nop
10000c84:	e037883a 	mov	sp,fp
10000c88:	df000017 	ldw	fp,0(sp)
10000c8c:	dec00104 	addi	sp,sp,4
10000c90:	f800283a 	ret

10000c94 <getControl>:

void getControl() {
10000c94:	deffff04 	addi	sp,sp,-4
10000c98:	df000015 	stw	fp,0(sp)
10000c9c:	d839883a 	mov	fp,sp
	ocmptr[257] = 0;
10000ca0:	00840074 	movhi	r2,4097
10000ca4:	108c3204 	addi	r2,r2,12488
10000ca8:	10800017 	ldw	r2,0(r2)
10000cac:	10810104 	addi	r2,r2,1028
10000cb0:	10000015 	stw	zero,0(r2)
}
10000cb4:	0001883a 	nop
10000cb8:	e037883a 	mov	sp,fp
10000cbc:	df000017 	ldw	fp,0(sp)
10000cc0:	dec00104 	addi	sp,sp,4
10000cc4:	f800283a 	ret

10000cc8 <main>:

int main() {
10000cc8:	deffd904 	addi	sp,sp,-156
10000ccc:	dfc02615 	stw	ra,152(sp)
10000cd0:	df002515 	stw	fp,148(sp)
10000cd4:	dc002415 	stw	r16,144(sp)
10000cd8:	df002504 	addi	fp,sp,148
	checkPacked();
10000cdc:	00009080 	call	10000908 <checkPacked>
	getControl();
10000ce0:	0000c940 	call	10000c94 <getControl>

	unsigned char *fileChunk = NULL;
10000ce4:	e03fdb15 	stw	zero,-148(fp)

	if (!ON_NIOS) {
10000ce8:	00840074 	movhi	r2,4097
10000cec:	108c3304 	addi	r2,r2,12492
10000cf0:	10800017 	ldw	r2,0(r2)
10000cf4:	10002e1e 	bne	r2,zero,10000db0 <main+0xe8>
		FILE *f = NULL;
10000cf8:	e03fed15 	stw	zero,-76(fp)
		f = fopen("sampleanim2.gif", "rb");
10000cfc:	01440074 	movhi	r5,4097
10000d00:	294abc04 	addi	r5,r5,10992
10000d04:	01040074 	movhi	r4,4097
10000d08:	210abd04 	addi	r4,r4,10996
10000d0c:	00027bc0 	call	100027bc <fopen>
10000d10:	e0bfed15 	stw	r2,-76(fp)
		if (f == NULL) {
10000d14:	e0bfed17 	ldw	r2,-76(fp)
10000d18:	1000051e 	bne	r2,zero,10000d30 <main+0x68>
			printf("File not load !\n");
10000d1c:	01040074 	movhi	r4,4097
10000d20:	210ac104 	addi	r4,r4,11012
10000d24:	000455c0 	call	1000455c <puts>
			exit(0);
10000d28:	0009883a 	mov	r4,zero
10000d2c:	0001ed80 	call	10001ed8 <exit>
		}
		fseek(f, 0, SEEK_END);
10000d30:	01800084 	movi	r6,2
10000d34:	000b883a 	mov	r5,zero
10000d38:	e13fed17 	ldw	r4,-76(fp)
10000d3c:	0002ec80 	call	10002ec8 <fseek>
		long fsize = ftell(f);
10000d40:	e13fed17 	ldw	r4,-76(fp)
10000d44:	00033a40 	call	100033a4 <ftell>
10000d48:	e0bfee15 	stw	r2,-72(fp)
		fseek(f, 0, SEEK_SET);
10000d4c:	000d883a 	mov	r6,zero
10000d50:	000b883a 	mov	r5,zero
10000d54:	e13fed17 	ldw	r4,-76(fp)
10000d58:	0002ec80 	call	10002ec8 <fseek>

		fileChunk = malloc(fsize + 1);
10000d5c:	e0bfee17 	ldw	r2,-72(fp)
10000d60:	10800044 	addi	r2,r2,1
10000d64:	1009883a 	mov	r4,r2
10000d68:	000390c0 	call	1000390c <malloc>
10000d6c:	e0bfdb15 	stw	r2,-148(fp)
		fileptr = fileChunk;
10000d70:	00840074 	movhi	r2,4097
10000d74:	109a2004 	addi	r2,r2,26752
10000d78:	e0ffdb17 	ldw	r3,-148(fp)
10000d7c:	10c00015 	stw	r3,0(r2)
		fread(fileptr, 1, fsize, f);
10000d80:	00840074 	movhi	r2,4097
10000d84:	109a2004 	addi	r2,r2,26752
10000d88:	10800017 	ldw	r2,0(r2)
10000d8c:	e0ffee17 	ldw	r3,-72(fp)
10000d90:	e1ffed17 	ldw	r7,-76(fp)
10000d94:	180d883a 	mov	r6,r3
10000d98:	01400044 	movi	r5,1
10000d9c:	1009883a 	mov	r4,r2
10000da0:	0002a5c0 	call	10002a5c <fread>
		fclose(f);
10000da4:	e13fed17 	ldw	r4,-76(fp)
10000da8:	00020000 	call	10002000 <fclose>
10000dac:	00000506 	br	10000dc4 <main+0xfc>
	} else {
		//Set pointer from SRAM
		fileptr = 0x004000100;
10000db0:	00840074 	movhi	r2,4097
10000db4:	109a2004 	addi	r2,r2,26752
10000db8:	00c10034 	movhi	r3,1024
10000dbc:	18c04004 	addi	r3,r3,256
10000dc0:	10c00015 	stw	r3,0(r2)
	}
	 //Write SRAM if we want:
	 writeSRAM();
10000dc4:	0000a840 	call	10000a84 <writeSRAM>
//		exit(0);

	HeaderBlock header;
	LSD descriptor;

	fileptr = read(&header, 1, sizeof(header), fileptr);
10000dc8:	00840074 	movhi	r2,4097
10000dcc:	109a2004 	addi	r2,r2,26752
10000dd0:	10c00017 	ldw	r3,0(r2)
10000dd4:	e0bff704 	addi	r2,fp,-36
10000dd8:	180f883a 	mov	r7,r3
10000ddc:	01800184 	movi	r6,6
10000de0:	01400044 	movi	r5,1
10000de4:	1009883a 	mov	r4,r2
10000de8:	00009280 	call	10000928 <read>
10000dec:	1007883a 	mov	r3,r2
10000df0:	00840074 	movhi	r2,4097
10000df4:	109a2004 	addi	r2,r2,26752
10000df8:	10c00015 	stw	r3,0(r2)
	fileptr = read(&descriptor, 1, sizeof(descriptor), fileptr);
10000dfc:	00840074 	movhi	r2,4097
10000e00:	109a2004 	addi	r2,r2,26752
10000e04:	10c00017 	ldw	r3,0(r2)
10000e08:	e0bff884 	addi	r2,fp,-30
10000e0c:	180f883a 	mov	r7,r3
10000e10:	018001c4 	movi	r6,7
10000e14:	01400044 	movi	r5,1
10000e18:	1009883a 	mov	r4,r2
10000e1c:	00009280 	call	10000928 <read>
10000e20:	1007883a 	mov	r3,r2
10000e24:	00840074 	movhi	r2,4097
10000e28:	109a2004 	addi	r2,r2,26752
10000e2c:	10c00015 	stw	r3,0(r2)
	for (int i = 0; i < 3; i++) {
10000e30:	e03fdc15 	stw	zero,-144(fp)
10000e34:	00001906 	br	10000e9c <main+0x1d4>
		assert(header.signature[i] == VALID_HEADER[i]);
10000e38:	e0fff704 	addi	r3,fp,-36
10000e3c:	e0bfdc17 	ldw	r2,-144(fp)
10000e40:	1885883a 	add	r2,r3,r2
10000e44:	10800003 	ldbu	r2,0(r2)
10000e48:	10c03fcc 	andi	r3,r2,255
10000e4c:	00840074 	movhi	r2,4097
10000e50:	108c3004 	addi	r2,r2,12480
10000e54:	e13fdc17 	ldw	r4,-144(fp)
10000e58:	1105883a 	add	r2,r2,r4
10000e5c:	10800003 	ldbu	r2,0(r2)
10000e60:	10803fcc 	andi	r2,r2,255
10000e64:	1080201c 	xori	r2,r2,128
10000e68:	10bfe004 	addi	r2,r2,-128
10000e6c:	18800826 	beq	r3,r2,10000e90 <main+0x1c8>
10000e70:	01c40074 	movhi	r7,4097
10000e74:	39cac504 	addi	r7,r7,11028
10000e78:	01840074 	movhi	r6,4097
10000e7c:	318b2304 	addi	r6,r6,11404
10000e80:	01401d84 	movi	r5,118
10000e84:	01040074 	movhi	r4,4097
10000e88:	210aba04 	addi	r4,r4,10984
10000e8c:	0001d680 	call	10001d68 <__assert_func>
	HeaderBlock header;
	LSD descriptor;

	fileptr = read(&header, 1, sizeof(header), fileptr);
	fileptr = read(&descriptor, 1, sizeof(descriptor), fileptr);
	for (int i = 0; i < 3; i++) {
10000e90:	e0bfdc17 	ldw	r2,-144(fp)
10000e94:	10800044 	addi	r2,r2,1
10000e98:	e0bfdc15 	stw	r2,-144(fp)
10000e9c:	e0bfdc17 	ldw	r2,-144(fp)
10000ea0:	108000d0 	cmplti	r2,r2,3
10000ea4:	103fe41e 	bne	r2,zero,10000e38 <__alt_data_end+0xf8000e38>
		assert(header.signature[i] == VALID_HEADER[i]);
	}
	assert(descriptor.packedField.globalColorFlag);	 //For all intents we're going to need a global table
10000ea8:	e0fff983 	ldbu	r3,-26(fp)
10000eac:	00bfe004 	movi	r2,-128
10000eb0:	1884703a 	and	r2,r3,r2
10000eb4:	10803fcc 	andi	r2,r2,255
10000eb8:	1000081e 	bne	r2,zero,10000edc <main+0x214>
10000ebc:	01c40074 	movhi	r7,4097
10000ec0:	39cacf04 	addi	r7,r7,11068
10000ec4:	01840074 	movhi	r6,4097
10000ec8:	318b2304 	addi	r6,r6,11404
10000ecc:	01401e04 	movi	r5,120
10000ed0:	01040074 	movhi	r4,4097
10000ed4:	210aba04 	addi	r4,r4,10984
10000ed8:	0001d680 	call	10001d68 <__assert_func>

	int readlGlobalColorSize = 0x2 << descriptor.packedField.globalColorSize;  // 2^(N+1) actual colors
10000edc:	e0bff98b 	ldhu	r2,-26(fp)
10000ee0:	108001cc 	andi	r2,r2,7
10000ee4:	10803fcc 	andi	r2,r2,255
10000ee8:	00c00084 	movi	r3,2
10000eec:	1884983a 	sll	r2,r3,r2
10000ef0:	e0bfef15 	stw	r2,-68(fp)
	// printf("%d, %d\n", test, packed.actual_color_size);
	colorTableEntry *globalTable = (colorTableEntry *)
		malloc(readlGlobalColorSize * sizeof(colorTableEntry));	 // We can make this 256 for hardware
10000ef4:	e0ffef17 	ldw	r3,-68(fp)
10000ef8:	1805883a 	mov	r2,r3
10000efc:	1085883a 	add	r2,r2,r2
10000f00:	10c5883a 	add	r2,r2,r3
	}
	assert(descriptor.packedField.globalColorFlag);	 //For all intents we're going to need a global table

	int readlGlobalColorSize = 0x2 << descriptor.packedField.globalColorSize;  // 2^(N+1) actual colors
	// printf("%d, %d\n", test, packed.actual_color_size);
	colorTableEntry *globalTable = (colorTableEntry *)
10000f04:	1009883a 	mov	r4,r2
10000f08:	000390c0 	call	1000390c <malloc>
10000f0c:	e0bff015 	stw	r2,-64(fp)
		malloc(readlGlobalColorSize * sizeof(colorTableEntry));	 // We can make this 256 for hardware

	printf("Dimensions (Canvas): %dx%d\n", descriptor.canvasWidth, descriptor.canvasHeight);
10000f10:	e0bff88b 	ldhu	r2,-30(fp)
10000f14:	10bfffcc 	andi	r2,r2,65535
10000f18:	e0fff90b 	ldhu	r3,-28(fp)
10000f1c:	18ffffcc 	andi	r3,r3,65535
10000f20:	180d883a 	mov	r6,r3
10000f24:	100b883a 	mov	r5,r2
10000f28:	01040074 	movhi	r4,4097
10000f2c:	210ad904 	addi	r4,r4,11108
10000f30:	00044400 	call	10004440 <printf>

	//Read global color table and print it
	fileptr = read(globalTable, 3, readlGlobalColorSize, fileptr);
10000f34:	00840074 	movhi	r2,4097
10000f38:	109a2004 	addi	r2,r2,26752
10000f3c:	10800017 	ldw	r2,0(r2)
10000f40:	100f883a 	mov	r7,r2
10000f44:	e1bfef17 	ldw	r6,-68(fp)
10000f48:	014000c4 	movi	r5,3
10000f4c:	e13ff017 	ldw	r4,-64(fp)
10000f50:	00009280 	call	10000928 <read>
10000f54:	1007883a 	mov	r3,r2
10000f58:	00840074 	movhi	r2,4097
10000f5c:	109a2004 	addi	r2,r2,26752
10000f60:	10c00015 	stw	r3,0(r2)

	for (int i = 0; i < readlGlobalColorSize; i++) {
10000f64:	e03fdd15 	stw	zero,-140(fp)
10000f68:	00001f06 	br	10000fe8 <main+0x320>
		printf("[#");
10000f6c:	01040074 	movhi	r4,4097
10000f70:	210ae004 	addi	r4,r4,11136
10000f74:	00044400 	call	10004440 <printf>
		for (int j = 0; j < 3; j++) {
10000f78:	e03fde15 	stw	zero,-136(fp)
10000f7c:	00001106 	br	10000fc4 <main+0x2fc>
			printf("%02x", globalTable[i].RGB[j]);
10000f80:	e0ffdd17 	ldw	r3,-140(fp)
10000f84:	1805883a 	mov	r2,r3
10000f88:	1085883a 	add	r2,r2,r2
10000f8c:	10c5883a 	add	r2,r2,r3
10000f90:	e0fff017 	ldw	r3,-64(fp)
10000f94:	1887883a 	add	r3,r3,r2
10000f98:	e0bfde17 	ldw	r2,-136(fp)
10000f9c:	1885883a 	add	r2,r3,r2
10000fa0:	10800003 	ldbu	r2,0(r2)
10000fa4:	10803fcc 	andi	r2,r2,255
10000fa8:	100b883a 	mov	r5,r2
10000fac:	01040074 	movhi	r4,4097
10000fb0:	210ae104 	addi	r4,r4,11140
10000fb4:	00044400 	call	10004440 <printf>
	//Read global color table and print it
	fileptr = read(globalTable, 3, readlGlobalColorSize, fileptr);

	for (int i = 0; i < readlGlobalColorSize; i++) {
		printf("[#");
		for (int j = 0; j < 3; j++) {
10000fb8:	e0bfde17 	ldw	r2,-136(fp)
10000fbc:	10800044 	addi	r2,r2,1
10000fc0:	e0bfde15 	stw	r2,-136(fp)
10000fc4:	e0bfde17 	ldw	r2,-136(fp)
10000fc8:	108000d0 	cmplti	r2,r2,3
10000fcc:	103fec1e 	bne	r2,zero,10000f80 <__alt_data_end+0xf8000f80>
			printf("%02x", globalTable[i].RGB[j]);
		}
		printf("],");
10000fd0:	01040074 	movhi	r4,4097
10000fd4:	210ae304 	addi	r4,r4,11148
10000fd8:	00044400 	call	10004440 <printf>
	printf("Dimensions (Canvas): %dx%d\n", descriptor.canvasWidth, descriptor.canvasHeight);

	//Read global color table and print it
	fileptr = read(globalTable, 3, readlGlobalColorSize, fileptr);

	for (int i = 0; i < readlGlobalColorSize; i++) {
10000fdc:	e0bfdd17 	ldw	r2,-140(fp)
10000fe0:	10800044 	addi	r2,r2,1
10000fe4:	e0bfdd15 	stw	r2,-140(fp)
10000fe8:	e0ffdd17 	ldw	r3,-140(fp)
10000fec:	e0bfef17 	ldw	r2,-68(fp)
10000ff0:	18bfde16 	blt	r3,r2,10000f6c <__alt_data_end+0xf8000f6c>
		for (int j = 0; j < 3; j++) {
			printf("%02x", globalTable[i].RGB[j]);
		}
		printf("],");
	}
	printf("\n");
10000ff4:	01000284 	movi	r4,10
10000ff8:	00044840 	call	10004484 <putchar>

	//////////////////////////////////////////////////

	int canvasSize = descriptor.canvasWidth * descriptor.canvasHeight;
10000ffc:	e0bff88b 	ldhu	r2,-30(fp)
10001000:	10bfffcc 	andi	r2,r2,65535
10001004:	e0fff90b 	ldhu	r3,-28(fp)
10001008:	18ffffcc 	andi	r3,r3,65535
1000100c:	180b883a 	mov	r5,r3
10001010:	1009883a 	mov	r4,r2
10001014:	0001d400 	call	10001d40 <__mulsi3>
10001018:	e0bff115 	stw	r2,-60(fp)
	unsigned char *currentFrame = (char *)calloc(canvasSize, 1);	 // This holds the current full canvas size exported frame
1000101c:	e0bff117 	ldw	r2,-60(fp)
10001020:	01400044 	movi	r5,1
10001024:	1009883a 	mov	r4,r2
10001028:	0001de40 	call	10001de4 <calloc>
1000102c:	e0bff215 	stw	r2,-56(fp)
		//Hardware needs full canvas size frames, not variable each time.

	int8_t totalFrameCount = 0;
10001030:	e03fdf05 	stb	zero,-132(fp)
	while (1) {
		GCE gce;
		imageDescriptor imgDesc;
		colorTableEntry *localTable = NULL;
10001034:	e03fe015 	stw	zero,-128(fp)
		unsigned char c = *fileptr;
10001038:	00840074 	movhi	r2,4097
1000103c:	109a2004 	addi	r2,r2,26752
10001040:	10800017 	ldw	r2,0(r2)
10001044:	10800003 	ldbu	r2,0(r2)
10001048:	e0bfe105 	stb	r2,-124(fp)
		fileptr++;
1000104c:	00840074 	movhi	r2,4097
10001050:	109a2004 	addi	r2,r2,26752
10001054:	10800017 	ldw	r2,0(r2)
10001058:	10c00044 	addi	r3,r2,1
1000105c:	00840074 	movhi	r2,4097
10001060:	109a2004 	addi	r2,r2,26752
10001064:	10c00015 	stw	r3,0(r2)

		while (c == 0x21) {
10001068:	0000ac06 	br	1000131c <main+0x654>
			// We encountered a extension block...
			unsigned char label = getch(fileptr);
1000106c:	00840074 	movhi	r2,4097
10001070:	109a2004 	addi	r2,r2,26752
10001074:	10800017 	ldw	r2,0(r2)
10001078:	1009883a 	mov	r4,r2
1000107c:	00009900 	call	10000990 <getch>
10001080:	e0bff305 	stb	r2,-52(fp)
			fileptr++;
10001084:	00840074 	movhi	r2,4097
10001088:	109a2004 	addi	r2,r2,26752
1000108c:	10800017 	ldw	r2,0(r2)
10001090:	10c00044 	addi	r3,r2,1
10001094:	00840074 	movhi	r2,4097
10001098:	109a2004 	addi	r2,r2,26752
1000109c:	10c00015 	stw	r3,0(r2)
			switch (label) {
100010a0:	e0bff303 	ldbu	r2,-52(fp)
100010a4:	10c03fa0 	cmpeqi	r3,r2,254
100010a8:	1800731e 	bne	r3,zero,10001278 <main+0x5b0>
100010ac:	10c03fe0 	cmpeqi	r3,r2,255
100010b0:	1800031e 	bne	r3,zero,100010c0 <main+0x3f8>
100010b4:	10803e60 	cmpeqi	r2,r2,249
100010b8:	10005e1e 	bne	r2,zero,10001234 <main+0x56c>
100010bc:	00007006 	br	10001280 <main+0x5b8>
			case 0xFF: {
				// Application Extension
				printf("Loaded AEB\n");
100010c0:	01040074 	movhi	r4,4097
100010c4:	210ae404 	addi	r4,r4,11152
100010c8:	000455c0 	call	1000455c <puts>
				assert(getch(fileptr) == 0x0B);
100010cc:	00840074 	movhi	r2,4097
100010d0:	109a2004 	addi	r2,r2,26752
100010d4:	10800017 	ldw	r2,0(r2)
100010d8:	1009883a 	mov	r4,r2
100010dc:	00009900 	call	10000990 <getch>
100010e0:	10803fcc 	andi	r2,r2,255
100010e4:	108002e0 	cmpeqi	r2,r2,11
100010e8:	1000081e 	bne	r2,zero,1000110c <main+0x444>
100010ec:	01c40074 	movhi	r7,4097
100010f0:	39cae704 	addi	r7,r7,11164
100010f4:	01840074 	movhi	r6,4097
100010f8:	318b2304 	addi	r6,r6,11404
100010fc:	014028c4 	movi	r5,163
10001100:	01040074 	movhi	r4,4097
10001104:	210aba04 	addi	r4,r4,10984
10001108:	0001d680 	call	10001d68 <__assert_func>
				fileptr++;
1000110c:	00840074 	movhi	r2,4097
10001110:	109a2004 	addi	r2,r2,26752
10001114:	10800017 	ldw	r2,0(r2)
10001118:	10c00044 	addi	r3,r2,1
1000111c:	00840074 	movhi	r2,4097
10001120:	109a2004 	addi	r2,r2,26752
10001124:	10c00015 	stw	r3,0(r2)
				fileptr = seek(fileptr, 11);
10001128:	00840074 	movhi	r2,4097
1000112c:	109a2004 	addi	r2,r2,26752
10001130:	10800017 	ldw	r2,0(r2)
10001134:	014002c4 	movi	r5,11
10001138:	1009883a 	mov	r4,r2
1000113c:	00009c00 	call	100009c0 <seek>
10001140:	1007883a 	mov	r3,r2
10001144:	00840074 	movhi	r2,4097
10001148:	109a2004 	addi	r2,r2,26752
1000114c:	10c00015 	stw	r3,0(r2)
				assert(getch(fileptr) == 0x03);
10001150:	00840074 	movhi	r2,4097
10001154:	109a2004 	addi	r2,r2,26752
10001158:	10800017 	ldw	r2,0(r2)
1000115c:	1009883a 	mov	r4,r2
10001160:	00009900 	call	10000990 <getch>
10001164:	10803fcc 	andi	r2,r2,255
10001168:	108000e0 	cmpeqi	r2,r2,3
1000116c:	1000081e 	bne	r2,zero,10001190 <main+0x4c8>
10001170:	01c40074 	movhi	r7,4097
10001174:	39caed04 	addi	r7,r7,11188
10001178:	01840074 	movhi	r6,4097
1000117c:	318b2304 	addi	r6,r6,11404
10001180:	01402984 	movi	r5,166
10001184:	01040074 	movhi	r4,4097
10001188:	210aba04 	addi	r4,r4,10984
1000118c:	0001d680 	call	10001d68 <__assert_func>
				fileptr++;
10001190:	00840074 	movhi	r2,4097
10001194:	109a2004 	addi	r2,r2,26752
10001198:	10800017 	ldw	r2,0(r2)
1000119c:	10c00044 	addi	r3,r2,1
100011a0:	00840074 	movhi	r2,4097
100011a4:	109a2004 	addi	r2,r2,26752
100011a8:	10c00015 	stw	r3,0(r2)
				assert(getch(fileptr) == 0x01);
100011ac:	00840074 	movhi	r2,4097
100011b0:	109a2004 	addi	r2,r2,26752
100011b4:	10800017 	ldw	r2,0(r2)
100011b8:	1009883a 	mov	r4,r2
100011bc:	00009900 	call	10000990 <getch>
100011c0:	10803fcc 	andi	r2,r2,255
100011c4:	10800060 	cmpeqi	r2,r2,1
100011c8:	1000081e 	bne	r2,zero,100011ec <main+0x524>
100011cc:	01c40074 	movhi	r7,4097
100011d0:	39caf304 	addi	r7,r7,11212
100011d4:	01840074 	movhi	r6,4097
100011d8:	318b2304 	addi	r6,r6,11404
100011dc:	01402a04 	movi	r5,168
100011e0:	01040074 	movhi	r4,4097
100011e4:	210aba04 	addi	r4,r4,10984
100011e8:	0001d680 	call	10001d68 <__assert_func>
				fileptr++;
100011ec:	00840074 	movhi	r2,4097
100011f0:	109a2004 	addi	r2,r2,26752
100011f4:	10800017 	ldw	r2,0(r2)
100011f8:	10c00044 	addi	r3,r2,1
100011fc:	00840074 	movhi	r2,4097
10001200:	109a2004 	addi	r2,r2,26752
10001204:	10c00015 	stw	r3,0(r2)
				fileptr = seek(fileptr, 3);
10001208:	00840074 	movhi	r2,4097
1000120c:	109a2004 	addi	r2,r2,26752
10001210:	10800017 	ldw	r2,0(r2)
10001214:	014000c4 	movi	r5,3
10001218:	1009883a 	mov	r4,r2
1000121c:	00009c00 	call	100009c0 <seek>
10001220:	1007883a 	mov	r3,r2
10001224:	00840074 	movhi	r2,4097
10001228:	109a2004 	addi	r2,r2,26752
1000122c:	10c00015 	stw	r3,0(r2)
				//Read repeat count if we care
				break;
10001230:	00002d06 	br	100012e8 <main+0x620>
			}
			case 0xF9: {
				printf("Loaded GCE\n");
10001234:	01040074 	movhi	r4,4097
10001238:	210af904 	addi	r4,r4,11236
1000123c:	000455c0 	call	1000455c <puts>
				fileptr = read(&gce, 1, sizeof(gce), fileptr);
10001240:	00840074 	movhi	r2,4097
10001244:	109a2004 	addi	r2,r2,26752
10001248:	10c00017 	ldw	r3,0(r2)
1000124c:	e0bffa44 	addi	r2,fp,-23
10001250:	180f883a 	mov	r7,r3
10001254:	01800184 	movi	r6,6
10001258:	01400044 	movi	r5,1
1000125c:	1009883a 	mov	r4,r2
10001260:	00009280 	call	10000928 <read>
10001264:	1007883a 	mov	r3,r2
10001268:	00840074 	movhi	r2,4097
1000126c:	109a2004 	addi	r2,r2,26752
10001270:	10c00015 	stw	r3,0(r2)
				break;
10001274:	00001c06 	br	100012e8 <main+0x620>
			}
			case 0xFE: {
				//Comment Extension
				skipToTerm();
10001278:	00009f80 	call	100009f8 <skipToTerm>
				break;
1000127c:	00001a06 	br	100012e8 <main+0x620>
			}
			default: {
				unsigned char bytesToSkip = getch(fileptr);
10001280:	00840074 	movhi	r2,4097
10001284:	109a2004 	addi	r2,r2,26752
10001288:	10800017 	ldw	r2,0(r2)
1000128c:	1009883a 	mov	r4,r2
10001290:	00009900 	call	10000990 <getch>
10001294:	e0bff345 	stb	r2,-51(fp)
				fileptr++;
10001298:	00840074 	movhi	r2,4097
1000129c:	109a2004 	addi	r2,r2,26752
100012a0:	10800017 	ldw	r2,0(r2)
100012a4:	10c00044 	addi	r3,r2,1
100012a8:	00840074 	movhi	r2,4097
100012ac:	109a2004 	addi	r2,r2,26752
100012b0:	10c00015 	stw	r3,0(r2)
				fileptr = seek(fileptr, bytesToSkip);
100012b4:	00840074 	movhi	r2,4097
100012b8:	109a2004 	addi	r2,r2,26752
100012bc:	10800017 	ldw	r2,0(r2)
100012c0:	e0fff343 	ldbu	r3,-51(fp)
100012c4:	180b883a 	mov	r5,r3
100012c8:	1009883a 	mov	r4,r2
100012cc:	00009c00 	call	100009c0 <seek>
100012d0:	1007883a 	mov	r3,r2
100012d4:	00840074 	movhi	r2,4097
100012d8:	109a2004 	addi	r2,r2,26752
100012dc:	10c00015 	stw	r3,0(r2)
				skipToTerm();
100012e0:	00009f80 	call	100009f8 <skipToTerm>
				break;
100012e4:	0001883a 	nop
			}
			}
			c = getch(fileptr);
100012e8:	00840074 	movhi	r2,4097
100012ec:	109a2004 	addi	r2,r2,26752
100012f0:	10800017 	ldw	r2,0(r2)
100012f4:	1009883a 	mov	r4,r2
100012f8:	00009900 	call	10000990 <getch>
100012fc:	e0bfe105 	stb	r2,-124(fp)
			fileptr++;
10001300:	00840074 	movhi	r2,4097
10001304:	109a2004 	addi	r2,r2,26752
10001308:	10800017 	ldw	r2,0(r2)
1000130c:	10c00044 	addi	r3,r2,1
10001310:	00840074 	movhi	r2,4097
10001314:	109a2004 	addi	r2,r2,26752
10001318:	10c00015 	stw	r3,0(r2)
		imageDescriptor imgDesc;
		colorTableEntry *localTable = NULL;
		unsigned char c = *fileptr;
		fileptr++;

		while (c == 0x21) {
1000131c:	e0bfe103 	ldbu	r2,-124(fp)
10001320:	10800860 	cmpeqi	r2,r2,33
10001324:	103f511e 	bne	r2,zero,1000106c <__alt_data_end+0xf800106c>
			}
			}
			c = getch(fileptr);
			fileptr++;
		}
		fileptr--;
10001328:	00840074 	movhi	r2,4097
1000132c:	109a2004 	addi	r2,r2,26752
10001330:	10800017 	ldw	r2,0(r2)
10001334:	10ffffc4 	addi	r3,r2,-1
10001338:	00840074 	movhi	r2,4097
1000133c:	109a2004 	addi	r2,r2,26752
10001340:	10c00015 	stw	r3,0(r2)

		fileptr = read(&imgDesc, 1, sizeof(imgDesc), fileptr);
10001344:	00840074 	movhi	r2,4097
10001348:	109a2004 	addi	r2,r2,26752
1000134c:	10c00017 	ldw	r3,0(r2)
10001350:	e0bffbc4 	addi	r2,fp,-17
10001354:	180f883a 	mov	r7,r3
10001358:	01800284 	movi	r6,10
1000135c:	01400044 	movi	r5,1
10001360:	1009883a 	mov	r4,r2
10001364:	00009280 	call	10000928 <read>
10001368:	1007883a 	mov	r3,r2
1000136c:	00840074 	movhi	r2,4097
10001370:	109a2004 	addi	r2,r2,26752
10001374:	10c00015 	stw	r3,0(r2)
		assert(imgDesc.imgSeperator == 0x2C);
10001378:	e0bffbc3 	ldbu	r2,-17(fp)
1000137c:	10803fcc 	andi	r2,r2,255
10001380:	10800b20 	cmpeqi	r2,r2,44
10001384:	1000081e 	bne	r2,zero,100013a8 <main+0x6e0>
10001388:	01c40074 	movhi	r7,4097
1000138c:	39cafc04 	addi	r7,r7,11248
10001390:	01840074 	movhi	r6,4097
10001394:	318b2304 	addi	r6,r6,11404
10001398:	01403184 	movi	r5,198
1000139c:	01040074 	movhi	r4,4097
100013a0:	210aba04 	addi	r4,r4,10984
100013a4:	0001d680 	call	10001d68 <__assert_func>
		if (imgDesc.packedField.localColorFlag) {
100013a8:	e0fffe03 	ldbu	r3,-8(fp)
100013ac:	00bfe004 	movi	r2,-128
100013b0:	1884703a 	and	r2,r3,r2
100013b4:	10803fcc 	andi	r2,r2,255
100013b8:	10001c26 	beq	r2,zero,1000142c <main+0x764>
			// Load a local color table
			printf("Local color table\n");
100013bc:	01040074 	movhi	r4,4097
100013c0:	210b0404 	addi	r4,r4,11280
100013c4:	000455c0 	call	1000455c <puts>
			int realLocalColorSize = 0x2 << imgDesc.packedField.localColorSize;	 // 2^(N+1) actual colors
100013c8:	e0bffe03 	ldbu	r2,-8(fp)
100013cc:	108001cc 	andi	r2,r2,7
100013d0:	10803fcc 	andi	r2,r2,255
100013d4:	00c00084 	movi	r3,2
100013d8:	1884983a 	sll	r2,r3,r2
100013dc:	e0bff415 	stw	r2,-48(fp)
			localTable = (colorTableEntry *)
				malloc(realLocalColorSize * sizeof(colorTableEntry));
100013e0:	e0fff417 	ldw	r3,-48(fp)
100013e4:	1805883a 	mov	r2,r3
100013e8:	1085883a 	add	r2,r2,r2
100013ec:	10c5883a 	add	r2,r2,r3
		assert(imgDesc.imgSeperator == 0x2C);
		if (imgDesc.packedField.localColorFlag) {
			// Load a local color table
			printf("Local color table\n");
			int realLocalColorSize = 0x2 << imgDesc.packedField.localColorSize;	 // 2^(N+1) actual colors
			localTable = (colorTableEntry *)
100013f0:	1009883a 	mov	r4,r2
100013f4:	000390c0 	call	1000390c <malloc>
100013f8:	e0bfe015 	stw	r2,-128(fp)
				malloc(realLocalColorSize * sizeof(colorTableEntry));
			fileptr = read(localTable, 3, realLocalColorSize, fileptr);
100013fc:	00840074 	movhi	r2,4097
10001400:	109a2004 	addi	r2,r2,26752
10001404:	10800017 	ldw	r2,0(r2)
10001408:	100f883a 	mov	r7,r2
1000140c:	e1bff417 	ldw	r6,-48(fp)
10001410:	014000c4 	movi	r5,3
10001414:	e13fe017 	ldw	r4,-128(fp)
10001418:	00009280 	call	10000928 <read>
1000141c:	1007883a 	mov	r3,r2
10001420:	00840074 	movhi	r2,4097
10001424:	109a2004 	addi	r2,r2,26752
10001428:	10c00015 	stw	r3,0(r2)
		}

		//Let's yeet that image data into something
		unsigned char LZWMinCode = getch(fileptr);
1000142c:	00840074 	movhi	r2,4097
10001430:	109a2004 	addi	r2,r2,26752
10001434:	10800017 	ldw	r2,0(r2)
10001438:	1009883a 	mov	r4,r2
1000143c:	00009900 	call	10000990 <getch>
10001440:	e0bff505 	stb	r2,-44(fp)
		fileptr++;
10001444:	00840074 	movhi	r2,4097
10001448:	109a2004 	addi	r2,r2,26752
1000144c:	10800017 	ldw	r2,0(r2)
10001450:	10c00044 	addi	r3,r2,1
10001454:	00840074 	movhi	r2,4097
10001458:	109a2004 	addi	r2,r2,26752
1000145c:	10c00015 	stw	r3,0(r2)
		printf("%02x\n", LZWMinCode);
10001460:	e0bff503 	ldbu	r2,-44(fp)
10001464:	100b883a 	mov	r5,r2
10001468:	01040074 	movhi	r4,4097
1000146c:	210b0904 	addi	r4,r4,11300
10001470:	00044400 	call	10004440 <printf>
		unsigned char *data = NULL;
10001474:	e03fe215 	stw	zero,-120(fp)
		unsigned int dataSize = 0;
10001478:	e03fe315 	stw	zero,-116(fp)
		unsigned char bytesInSubblock = getch(fileptr);
1000147c:	00840074 	movhi	r2,4097
10001480:	109a2004 	addi	r2,r2,26752
10001484:	10800017 	ldw	r2,0(r2)
10001488:	1009883a 	mov	r4,r2
1000148c:	00009900 	call	10000990 <getch>
10001490:	e0bfe405 	stb	r2,-112(fp)
		fileptr++;
10001494:	00840074 	movhi	r2,4097
10001498:	109a2004 	addi	r2,r2,26752
1000149c:	10800017 	ldw	r2,0(r2)
100014a0:	10c00044 	addi	r3,r2,1
100014a4:	00840074 	movhi	r2,4097
100014a8:	109a2004 	addi	r2,r2,26752
100014ac:	10c00015 	stw	r3,0(r2)
		while (bytesInSubblock) {
100014b0:	00002806 	br	10001554 <main+0x88c>
			data = realloc(data, (sizeof(char) * (dataSize + bytesInSubblock)));
100014b4:	e0ffe403 	ldbu	r3,-112(fp)
100014b8:	e0bfe317 	ldw	r2,-116(fp)
100014bc:	1885883a 	add	r2,r3,r2
100014c0:	100b883a 	mov	r5,r2
100014c4:	e13fe217 	ldw	r4,-120(fp)
100014c8:	00045700 	call	10004570 <realloc>
100014cc:	e0bfe215 	stw	r2,-120(fp)
			fileptr = read(data + dataSize, 1, bytesInSubblock, fileptr);
100014d0:	e0ffe217 	ldw	r3,-120(fp)
100014d4:	e0bfe317 	ldw	r2,-116(fp)
100014d8:	1887883a 	add	r3,r3,r2
100014dc:	e13fe403 	ldbu	r4,-112(fp)
100014e0:	00840074 	movhi	r2,4097
100014e4:	109a2004 	addi	r2,r2,26752
100014e8:	10800017 	ldw	r2,0(r2)
100014ec:	100f883a 	mov	r7,r2
100014f0:	200d883a 	mov	r6,r4
100014f4:	01400044 	movi	r5,1
100014f8:	1809883a 	mov	r4,r3
100014fc:	00009280 	call	10000928 <read>
10001500:	1007883a 	mov	r3,r2
10001504:	00840074 	movhi	r2,4097
10001508:	109a2004 	addi	r2,r2,26752
1000150c:	10c00015 	stw	r3,0(r2)
			dataSize += bytesInSubblock;
10001510:	e0bfe403 	ldbu	r2,-112(fp)
10001514:	e0ffe317 	ldw	r3,-116(fp)
10001518:	1885883a 	add	r2,r3,r2
1000151c:	e0bfe315 	stw	r2,-116(fp)
			bytesInSubblock = getch(fileptr);
10001520:	00840074 	movhi	r2,4097
10001524:	109a2004 	addi	r2,r2,26752
10001528:	10800017 	ldw	r2,0(r2)
1000152c:	1009883a 	mov	r4,r2
10001530:	00009900 	call	10000990 <getch>
10001534:	e0bfe405 	stb	r2,-112(fp)
			fileptr++;
10001538:	00840074 	movhi	r2,4097
1000153c:	109a2004 	addi	r2,r2,26752
10001540:	10800017 	ldw	r2,0(r2)
10001544:	10c00044 	addi	r3,r2,1
10001548:	00840074 	movhi	r2,4097
1000154c:	109a2004 	addi	r2,r2,26752
10001550:	10c00015 	stw	r3,0(r2)
		printf("%02x\n", LZWMinCode);
		unsigned char *data = NULL;
		unsigned int dataSize = 0;
		unsigned char bytesInSubblock = getch(fileptr);
		fileptr++;
		while (bytesInSubblock) {
10001554:	e0bfe403 	ldbu	r2,-112(fp)
10001558:	103fd61e 	bne	r2,zero,100014b4 <__alt_data_end+0xf80014b4>
			fileptr = read(data + dataSize, 1, bytesInSubblock, fileptr);
			dataSize += bytesInSubblock;
			bytesInSubblock = getch(fileptr);
			fileptr++;
		}
		unsigned char *dataOut = (unsigned char *)malloc(imgDesc.imgHeight * imgDesc.imgWidth);
1000155c:	e0bffd83 	ldbu	r2,-10(fp)
10001560:	e0fffdc3 	ldbu	r3,-9(fp)
10001564:	1806923a 	slli	r3,r3,8
10001568:	1884b03a 	or	r2,r3,r2
1000156c:	113fffcc 	andi	r4,r2,65535
10001570:	e0bffd03 	ldbu	r2,-12(fp)
10001574:	e0fffd43 	ldbu	r3,-11(fp)
10001578:	1806923a 	slli	r3,r3,8
1000157c:	1884b03a 	or	r2,r3,r2
10001580:	10bfffcc 	andi	r2,r2,65535
10001584:	100b883a 	mov	r5,r2
10001588:	0001d400 	call	10001d40 <__mulsi3>
1000158c:	1009883a 	mov	r4,r2
10001590:	000390c0 	call	1000390c <malloc>
10001594:	e0bff615 	stw	r2,-40(fp)
		//
		// // Write developed image frame to some sort of storage
		uncompress(LZWMinCode, data, dataSize, dataOut);
10001598:	e0bff503 	ldbu	r2,-44(fp)
1000159c:	e0ffe317 	ldw	r3,-116(fp)
100015a0:	e1fff617 	ldw	r7,-40(fp)
100015a4:	180d883a 	mov	r6,r3
100015a8:	e17fe217 	ldw	r5,-120(fp)
100015ac:	1009883a 	mov	r4,r2
100015b0:	000026c0 	call	1000026c <uncompress>
////		 	printf("\033[0m");
//		 }
//		 printf("\n");

		 // Copy the new frame overtop of previous
		for (int x = 0; x < descriptor.canvasWidth; x++) {
100015b4:	e03fe515 	stw	zero,-108(fp)
100015b8:	00005b06 	br	10001728 <main+0xa60>
			for (int y = 0; y < descriptor.canvasHeight; y++) {
100015bc:	e03fe615 	stw	zero,-104(fp)
100015c0:	00005206 	br	1000170c <main+0xa44>
				if (y >= imgDesc.imgTop && y < imgDesc.imgTop + imgDesc.imgHeight &&
100015c4:	e0bffc83 	ldbu	r2,-14(fp)
100015c8:	e0fffcc3 	ldbu	r3,-13(fp)
100015cc:	1806923a 	slli	r3,r3,8
100015d0:	1884b03a 	or	r2,r3,r2
100015d4:	10bfffcc 	andi	r2,r2,65535
100015d8:	e0ffe617 	ldw	r3,-104(fp)
100015dc:	18804816 	blt	r3,r2,10001700 <main+0xa38>
100015e0:	e0bffc83 	ldbu	r2,-14(fp)
100015e4:	e0fffcc3 	ldbu	r3,-13(fp)
100015e8:	1806923a 	slli	r3,r3,8
100015ec:	1884b03a 	or	r2,r3,r2
100015f0:	10ffffcc 	andi	r3,r2,65535
100015f4:	e0bffd83 	ldbu	r2,-10(fp)
100015f8:	e13ffdc3 	ldbu	r4,-9(fp)
100015fc:	2008923a 	slli	r4,r4,8
10001600:	2084b03a 	or	r2,r4,r2
10001604:	10bfffcc 	andi	r2,r2,65535
10001608:	1885883a 	add	r2,r3,r2
1000160c:	e0ffe617 	ldw	r3,-104(fp)
10001610:	18803b0e 	bge	r3,r2,10001700 <main+0xa38>
					x >= imgDesc.imgLeft && x < imgDesc.imgLeft + imgDesc.imgWidth) {
10001614:	e0bffc03 	ldbu	r2,-16(fp)
10001618:	e0fffc43 	ldbu	r3,-15(fp)
1000161c:	1806923a 	slli	r3,r3,8
10001620:	1884b03a 	or	r2,r3,r2
10001624:	10bfffcc 	andi	r2,r2,65535
//		 printf("\n");

		 // Copy the new frame overtop of previous
		for (int x = 0; x < descriptor.canvasWidth; x++) {
			for (int y = 0; y < descriptor.canvasHeight; y++) {
				if (y >= imgDesc.imgTop && y < imgDesc.imgTop + imgDesc.imgHeight &&
10001628:	e0ffe517 	ldw	r3,-108(fp)
1000162c:	18803416 	blt	r3,r2,10001700 <main+0xa38>
					x >= imgDesc.imgLeft && x < imgDesc.imgLeft + imgDesc.imgWidth) {
10001630:	e0bffc03 	ldbu	r2,-16(fp)
10001634:	e0fffc43 	ldbu	r3,-15(fp)
10001638:	1806923a 	slli	r3,r3,8
1000163c:	1884b03a 	or	r2,r3,r2
10001640:	10ffffcc 	andi	r3,r2,65535
10001644:	e0bffd03 	ldbu	r2,-12(fp)
10001648:	e13ffd43 	ldbu	r4,-11(fp)
1000164c:	2008923a 	slli	r4,r4,8
10001650:	2084b03a 	or	r2,r4,r2
10001654:	10bfffcc 	andi	r2,r2,65535
10001658:	1885883a 	add	r2,r3,r2
1000165c:	e0ffe517 	ldw	r3,-108(fp)
10001660:	1880270e 	bge	r3,r2,10001700 <main+0xa38>
					currentFrame[y * descriptor.canvasWidth + x] = dataOut[(y - imgDesc.imgTop) * imgDesc.imgWidth + (x - imgDesc.imgLeft)];
10001664:	e0bff88b 	ldhu	r2,-30(fp)
10001668:	10bfffcc 	andi	r2,r2,65535
1000166c:	e17fe617 	ldw	r5,-104(fp)
10001670:	1009883a 	mov	r4,r2
10001674:	0001d400 	call	10001d40 <__mulsi3>
10001678:	1007883a 	mov	r3,r2
1000167c:	e0bfe517 	ldw	r2,-108(fp)
10001680:	1885883a 	add	r2,r3,r2
10001684:	1007883a 	mov	r3,r2
10001688:	e0bff217 	ldw	r2,-56(fp)
1000168c:	10e1883a 	add	r16,r2,r3
10001690:	e0bffc83 	ldbu	r2,-14(fp)
10001694:	e0fffcc3 	ldbu	r3,-13(fp)
10001698:	1806923a 	slli	r3,r3,8
1000169c:	1884b03a 	or	r2,r3,r2
100016a0:	10bfffcc 	andi	r2,r2,65535
100016a4:	e0ffe617 	ldw	r3,-104(fp)
100016a8:	1889c83a 	sub	r4,r3,r2
100016ac:	e0bffd03 	ldbu	r2,-12(fp)
100016b0:	e0fffd43 	ldbu	r3,-11(fp)
100016b4:	1806923a 	slli	r3,r3,8
100016b8:	1884b03a 	or	r2,r3,r2
100016bc:	10bfffcc 	andi	r2,r2,65535
100016c0:	100b883a 	mov	r5,r2
100016c4:	0001d400 	call	10001d40 <__mulsi3>
100016c8:	1009883a 	mov	r4,r2
100016cc:	e0bffc03 	ldbu	r2,-16(fp)
100016d0:	e0fffc43 	ldbu	r3,-15(fp)
100016d4:	1806923a 	slli	r3,r3,8
100016d8:	1884b03a 	or	r2,r3,r2
100016dc:	10bfffcc 	andi	r2,r2,65535
100016e0:	e0ffe517 	ldw	r3,-108(fp)
100016e4:	1885c83a 	sub	r2,r3,r2
100016e8:	2085883a 	add	r2,r4,r2
100016ec:	1007883a 	mov	r3,r2
100016f0:	e0bff617 	ldw	r2,-40(fp)
100016f4:	10c5883a 	add	r2,r2,r3
100016f8:	10800003 	ldbu	r2,0(r2)
100016fc:	80800005 	stb	r2,0(r16)
//		 }
//		 printf("\n");

		 // Copy the new frame overtop of previous
		for (int x = 0; x < descriptor.canvasWidth; x++) {
			for (int y = 0; y < descriptor.canvasHeight; y++) {
10001700:	e0bfe617 	ldw	r2,-104(fp)
10001704:	10800044 	addi	r2,r2,1
10001708:	e0bfe615 	stw	r2,-104(fp)
1000170c:	e0bff90b 	ldhu	r2,-28(fp)
10001710:	10bfffcc 	andi	r2,r2,65535
10001714:	e0ffe617 	ldw	r3,-104(fp)
10001718:	18bfaa16 	blt	r3,r2,100015c4 <__alt_data_end+0xf80015c4>
////		 	printf("\033[0m");
//		 }
//		 printf("\n");

		 // Copy the new frame overtop of previous
		for (int x = 0; x < descriptor.canvasWidth; x++) {
1000171c:	e0bfe517 	ldw	r2,-108(fp)
10001720:	10800044 	addi	r2,r2,1
10001724:	e0bfe515 	stw	r2,-108(fp)
10001728:	e0bff88b 	ldhu	r2,-30(fp)
1000172c:	10bfffcc 	andi	r2,r2,65535
10001730:	e0ffe517 	ldw	r3,-108(fp)
10001734:	18bfa116 	blt	r3,r2,100015bc <__alt_data_end+0xf80015bc>
					x >= imgDesc.imgLeft && x < imgDesc.imgLeft + imgDesc.imgWidth) {
					currentFrame[y * descriptor.canvasWidth + x] = dataOut[(y - imgDesc.imgTop) * imgDesc.imgWidth + (x - imgDesc.imgLeft)];
				}
			}
		}
		if (ON_NIOS) {
10001738:	00840074 	movhi	r2,4097
1000173c:	108c3304 	addi	r2,r2,12492
10001740:	10800017 	ldw	r2,0(r2)
10001744:	10001826 	beq	r2,zero,100017a8 <main+0xae0>
			//Memcpy is broken for some unknown reason
			 for (int i = 0; i < canvasSize; i++) {
10001748:	e03fe715 	stw	zero,-100(fp)
1000174c:	00001306 	br	1000179c <main+0xad4>
				 frameptr[i+totalFrameCount*canvasSize] = currentFrame[i];
10001750:	00840074 	movhi	r2,4097
10001754:	108c3104 	addi	r2,r2,12484
10001758:	14000017 	ldw	r16,0(r2)
1000175c:	e0bfdf07 	ldb	r2,-132(fp)
10001760:	e17ff117 	ldw	r5,-60(fp)
10001764:	1009883a 	mov	r4,r2
10001768:	0001d400 	call	10001d40 <__mulsi3>
1000176c:	1007883a 	mov	r3,r2
10001770:	e0bfe717 	ldw	r2,-100(fp)
10001774:	1885883a 	add	r2,r3,r2
10001778:	8085883a 	add	r2,r16,r2
1000177c:	e0ffe717 	ldw	r3,-100(fp)
10001780:	e13ff217 	ldw	r4,-56(fp)
10001784:	20c7883a 	add	r3,r4,r3
10001788:	18c00003 	ldbu	r3,0(r3)
1000178c:	10c00005 	stb	r3,0(r2)
				}
			}
		}
		if (ON_NIOS) {
			//Memcpy is broken for some unknown reason
			 for (int i = 0; i < canvasSize; i++) {
10001790:	e0bfe717 	ldw	r2,-100(fp)
10001794:	10800044 	addi	r2,r2,1
10001798:	e0bfe715 	stw	r2,-100(fp)
1000179c:	e0ffe717 	ldw	r3,-100(fp)
100017a0:	e0bff117 	ldw	r2,-60(fp)
100017a4:	18bfea16 	blt	r3,r2,10001750 <__alt_data_end+0xf8001750>
				 frameptr[i+totalFrameCount*canvasSize] = currentFrame[i];
			 }
		}
		 for (int i = 0; i < canvasSize; i++) {
100017a8:	e03fe815 	stw	zero,-96(fp)
100017ac:	00001506 	br	10001804 <main+0xb3c>
		 	if (i % descriptor.canvasWidth == 0) {
100017b0:	e0bff88b 	ldhu	r2,-30(fp)
100017b4:	10ffffcc 	andi	r3,r2,65535
100017b8:	e0bfe817 	ldw	r2,-96(fp)
100017bc:	180b883a 	mov	r5,r3
100017c0:	1009883a 	mov	r4,r2
100017c4:	0001c100 	call	10001c10 <__modsi3>
100017c8:	1000021e 	bne	r2,zero,100017d4 <main+0xb0c>
		 		printf("\n");
100017cc:	01000284 	movi	r4,10
100017d0:	00044840 	call	10004484 <putchar>
		 	}
//		 	printf("\033[38;5;%dm", dataOut[i]);
		 	printf("%02x ", currentFrame[i]);
100017d4:	e0bfe817 	ldw	r2,-96(fp)
100017d8:	e0fff217 	ldw	r3,-56(fp)
100017dc:	1885883a 	add	r2,r3,r2
100017e0:	10800003 	ldbu	r2,0(r2)
100017e4:	10803fcc 	andi	r2,r2,255
100017e8:	100b883a 	mov	r5,r2
100017ec:	01040074 	movhi	r4,4097
100017f0:	210b0b04 	addi	r4,r4,11308
100017f4:	00044400 	call	10004440 <printf>
			//Memcpy is broken for some unknown reason
			 for (int i = 0; i < canvasSize; i++) {
				 frameptr[i+totalFrameCount*canvasSize] = currentFrame[i];
			 }
		}
		 for (int i = 0; i < canvasSize; i++) {
100017f8:	e0bfe817 	ldw	r2,-96(fp)
100017fc:	10800044 	addi	r2,r2,1
10001800:	e0bfe815 	stw	r2,-96(fp)
10001804:	e0ffe817 	ldw	r3,-96(fp)
10001808:	e0bff117 	ldw	r2,-60(fp)
1000180c:	18bfe816 	blt	r3,r2,100017b0 <__alt_data_end+0xf80017b0>
		 	}
//		 	printf("\033[38;5;%dm", dataOut[i]);
		 	printf("%02x ", currentFrame[i]);
//		 	printf("\033[0m");
		 }
		 printf("---------------\n");
10001810:	01040074 	movhi	r4,4097
10001814:	210b0d04 	addi	r4,r4,11316
10001818:	000455c0 	call	1000455c <puts>

		 for (int i = 0; i < canvasSize; i++) {
1000181c:	e03fe915 	stw	zero,-92(fp)
10001820:	00001d06 	br	10001898 <main+0xbd0>
		 	if (i % descriptor.canvasWidth == 0) {
10001824:	e0bff88b 	ldhu	r2,-30(fp)
10001828:	10ffffcc 	andi	r3,r2,65535
1000182c:	e0bfe917 	ldw	r2,-92(fp)
10001830:	180b883a 	mov	r5,r3
10001834:	1009883a 	mov	r4,r2
10001838:	0001c100 	call	10001c10 <__modsi3>
1000183c:	1000021e 	bne	r2,zero,10001848 <main+0xb80>
		 		printf("\n");
10001840:	01000284 	movi	r4,10
10001844:	00044840 	call	10004484 <putchar>
		 	}
//		 	printf("\033[38;5;%dm", dataOut[i]);
		 	printf("%02x ", frameptr[i+totalFrameCount*canvasSize]);
10001848:	00840074 	movhi	r2,4097
1000184c:	108c3104 	addi	r2,r2,12484
10001850:	14000017 	ldw	r16,0(r2)
10001854:	e0bfdf07 	ldb	r2,-132(fp)
10001858:	e17ff117 	ldw	r5,-60(fp)
1000185c:	1009883a 	mov	r4,r2
10001860:	0001d400 	call	10001d40 <__mulsi3>
10001864:	1007883a 	mov	r3,r2
10001868:	e0bfe917 	ldw	r2,-92(fp)
1000186c:	1885883a 	add	r2,r3,r2
10001870:	8085883a 	add	r2,r16,r2
10001874:	10800003 	ldbu	r2,0(r2)
10001878:	10803fcc 	andi	r2,r2,255
1000187c:	100b883a 	mov	r5,r2
10001880:	01040074 	movhi	r4,4097
10001884:	210b0b04 	addi	r4,r4,11308
10001888:	00044400 	call	10004440 <printf>
		 	printf("%02x ", currentFrame[i]);
//		 	printf("\033[0m");
		 }
		 printf("---------------\n");

		 for (int i = 0; i < canvasSize; i++) {
1000188c:	e0bfe917 	ldw	r2,-92(fp)
10001890:	10800044 	addi	r2,r2,1
10001894:	e0bfe915 	stw	r2,-92(fp)
10001898:	e0ffe917 	ldw	r3,-92(fp)
1000189c:	e0bff117 	ldw	r2,-60(fp)
100018a0:	18bfe016 	blt	r3,r2,10001824 <__alt_data_end+0xf8001824>
		 }


		// Check if we're at end of file:
		// and break loop!
		c = getch(fileptr);
100018a4:	00840074 	movhi	r2,4097
100018a8:	109a2004 	addi	r2,r2,26752
100018ac:	10800017 	ldw	r2,0(r2)
100018b0:	1009883a 	mov	r4,r2
100018b4:	00009900 	call	10000990 <getch>
100018b8:	e0bfe105 	stb	r2,-124(fp)

		printf("\nFrame done: %d | size: %dx%d\n", totalFrameCount, imgDesc.imgWidth, imgDesc.imgHeight);
100018bc:	e13fdf07 	ldb	r4,-132(fp)
100018c0:	e0bffd03 	ldbu	r2,-12(fp)
100018c4:	e0fffd43 	ldbu	r3,-11(fp)
100018c8:	1806923a 	slli	r3,r3,8
100018cc:	1884b03a 	or	r2,r3,r2
100018d0:	117fffcc 	andi	r5,r2,65535
100018d4:	e0bffd83 	ldbu	r2,-10(fp)
100018d8:	e0fffdc3 	ldbu	r3,-9(fp)
100018dc:	1806923a 	slli	r3,r3,8
100018e0:	1884b03a 	or	r2,r3,r2
100018e4:	10bfffcc 	andi	r2,r2,65535
100018e8:	100f883a 	mov	r7,r2
100018ec:	280d883a 	mov	r6,r5
100018f0:	200b883a 	mov	r5,r4
100018f4:	01040074 	movhi	r4,4097
100018f8:	210b1104 	addi	r4,r4,11332
100018fc:	00044400 	call	10004440 <printf>

		free(localTable);
10001900:	e13fe017 	ldw	r4,-128(fp)
10001904:	00039200 	call	10003920 <free>
		free(data);
10001908:	e13fe217 	ldw	r4,-120(fp)
1000190c:	00039200 	call	10003920 <free>
		free(dataOut);
10001910:	e13ff617 	ldw	r4,-40(fp)
10001914:	00039200 	call	10003920 <free>
		if (c == 0x3B) {
10001918:	e0bfe103 	ldbu	r2,-124(fp)
1000191c:	10800ed8 	cmpnei	r2,r2,59
10001920:	1000081e 	bne	r2,zero,10001944 <main+0xc7c>
			printf("\nEOF found\n");
10001924:	01040074 	movhi	r4,4097
10001928:	210b1904 	addi	r4,r4,11364
1000192c:	000455c0 	call	1000455c <puts>
			break;
		}
		totalFrameCount++;
	}

	if (ON_NIOS) {
10001930:	00840074 	movhi	r2,4097
10001934:	108c3304 	addi	r2,r2,12492
10001938:	10800017 	ldw	r2,0(r2)
1000193c:	1000051e 	bne	r2,zero,10001954 <main+0xc8c>
10001940:	00008006 	br	10001b44 <main+0xe7c>
		free(dataOut);
		if (c == 0x3B) {
			printf("\nEOF found\n");
			break;
		}
		totalFrameCount++;
10001944:	e0bfdf03 	ldbu	r2,-132(fp)
10001948:	10800044 	addi	r2,r2,1
1000194c:	e0bfdf05 	stb	r2,-132(fp)
	}
10001950:	003db806 	br	10001034 <__alt_data_end+0xf8001034>

	if (ON_NIOS) {
		for (int i = 0; i < 258; i++) {
10001954:	e03fea15 	stw	zero,-88(fp)
10001958:	00000b06 	br	10001988 <main+0xcc0>
			ocmptr[i] = 0;
1000195c:	00840074 	movhi	r2,4097
10001960:	108c3204 	addi	r2,r2,12488
10001964:	10c00017 	ldw	r3,0(r2)
10001968:	e0bfea17 	ldw	r2,-88(fp)
1000196c:	1085883a 	add	r2,r2,r2
10001970:	1085883a 	add	r2,r2,r2
10001974:	1885883a 	add	r2,r3,r2
10001978:	10000015 	stw	zero,0(r2)
		}
		totalFrameCount++;
	}

	if (ON_NIOS) {
		for (int i = 0; i < 258; i++) {
1000197c:	e0bfea17 	ldw	r2,-88(fp)
10001980:	10800044 	addi	r2,r2,1
10001984:	e0bfea15 	stw	r2,-88(fp)
10001988:	e0bfea17 	ldw	r2,-88(fp)
1000198c:	10804090 	cmplti	r2,r2,258
10001990:	103ff21e 	bne	r2,zero,1000195c <__alt_data_end+0xf800195c>
			ocmptr[i] = 0;
		}

//		ocmptr[255] = 0x0000ff00;
//
		for (int i = 0; i < readlGlobalColorSize; i++) {
10001994:	e03feb15 	stw	zero,-84(fp)
10001998:	00002b06 	br	10001a48 <main+0xd80>
			for (int j = 0; j < 3; j++) {
1000199c:	e03fec15 	stw	zero,-80(fp)
100019a0:	00002306 	br	10001a30 <main+0xd68>
				ocmptr[i] += globalTable[i].RGB[j] << (24 - j * 8);
100019a4:	00840074 	movhi	r2,4097
100019a8:	108c3204 	addi	r2,r2,12488
100019ac:	10c00017 	ldw	r3,0(r2)
100019b0:	e0bfeb17 	ldw	r2,-84(fp)
100019b4:	1085883a 	add	r2,r2,r2
100019b8:	1085883a 	add	r2,r2,r2
100019bc:	1889883a 	add	r4,r3,r2
100019c0:	00840074 	movhi	r2,4097
100019c4:	108c3204 	addi	r2,r2,12488
100019c8:	10c00017 	ldw	r3,0(r2)
100019cc:	e0bfeb17 	ldw	r2,-84(fp)
100019d0:	1085883a 	add	r2,r2,r2
100019d4:	1085883a 	add	r2,r2,r2
100019d8:	1885883a 	add	r2,r3,r2
100019dc:	11400017 	ldw	r5,0(r2)
100019e0:	e0ffeb17 	ldw	r3,-84(fp)
100019e4:	1805883a 	mov	r2,r3
100019e8:	1085883a 	add	r2,r2,r2
100019ec:	10c5883a 	add	r2,r2,r3
100019f0:	e0fff017 	ldw	r3,-64(fp)
100019f4:	1887883a 	add	r3,r3,r2
100019f8:	e0bfec17 	ldw	r2,-80(fp)
100019fc:	1885883a 	add	r2,r3,r2
10001a00:	10800003 	ldbu	r2,0(r2)
10001a04:	10c03fcc 	andi	r3,r2,255
10001a08:	018000c4 	movi	r6,3
10001a0c:	e0bfec17 	ldw	r2,-80(fp)
10001a10:	3085c83a 	sub	r2,r6,r2
10001a14:	100490fa 	slli	r2,r2,3
10001a18:	1884983a 	sll	r2,r3,r2
10001a1c:	2885883a 	add	r2,r5,r2
10001a20:	20800015 	stw	r2,0(r4)
		}

//		ocmptr[255] = 0x0000ff00;
//
		for (int i = 0; i < readlGlobalColorSize; i++) {
			for (int j = 0; j < 3; j++) {
10001a24:	e0bfec17 	ldw	r2,-80(fp)
10001a28:	10800044 	addi	r2,r2,1
10001a2c:	e0bfec15 	stw	r2,-80(fp)
10001a30:	e0bfec17 	ldw	r2,-80(fp)
10001a34:	108000d0 	cmplti	r2,r2,3
10001a38:	103fda1e 	bne	r2,zero,100019a4 <__alt_data_end+0xf80019a4>
			ocmptr[i] = 0;
		}

//		ocmptr[255] = 0x0000ff00;
//
		for (int i = 0; i < readlGlobalColorSize; i++) {
10001a3c:	e0bfeb17 	ldw	r2,-84(fp)
10001a40:	10800044 	addi	r2,r2,1
10001a44:	e0bfeb15 	stw	r2,-84(fp)
10001a48:	e0ffeb17 	ldw	r3,-84(fp)
10001a4c:	e0bfef17 	ldw	r2,-68(fp)
10001a50:	18bfd216 	blt	r3,r2,1000199c <__alt_data_end+0xf800199c>

			}
//			printf("final %d: %08x\n", i, ocmptr[i]);
		}

		ocmptr[256] += descriptor.canvasWidth << 16;
10001a54:	00840074 	movhi	r2,4097
10001a58:	108c3204 	addi	r2,r2,12488
10001a5c:	10800017 	ldw	r2,0(r2)
10001a60:	10c10004 	addi	r3,r2,1024
10001a64:	00840074 	movhi	r2,4097
10001a68:	108c3204 	addi	r2,r2,12488
10001a6c:	10800017 	ldw	r2,0(r2)
10001a70:	10810004 	addi	r2,r2,1024
10001a74:	10800017 	ldw	r2,0(r2)
10001a78:	e13ff88b 	ldhu	r4,-30(fp)
10001a7c:	213fffcc 	andi	r4,r4,65535
10001a80:	2008943a 	slli	r4,r4,16
10001a84:	1105883a 	add	r2,r2,r4
10001a88:	18800015 	stw	r2,0(r3)
		ocmptr[256] += descriptor.canvasHeight;
10001a8c:	00840074 	movhi	r2,4097
10001a90:	108c3204 	addi	r2,r2,12488
10001a94:	10800017 	ldw	r2,0(r2)
10001a98:	10c10004 	addi	r3,r2,1024
10001a9c:	00840074 	movhi	r2,4097
10001aa0:	108c3204 	addi	r2,r2,12488
10001aa4:	10800017 	ldw	r2,0(r2)
10001aa8:	10810004 	addi	r2,r2,1024
10001aac:	11000017 	ldw	r4,0(r2)
10001ab0:	e0bff90b 	ldhu	r2,-28(fp)
10001ab4:	10bfffcc 	andi	r2,r2,65535
10001ab8:	2085883a 	add	r2,r4,r2
10001abc:	18800015 	stw	r2,0(r3)
		//011f
		//ff34
		ocmptr[257] += totalFrameCount << 24;  //last set of bytes
10001ac0:	00840074 	movhi	r2,4097
10001ac4:	108c3204 	addi	r2,r2,12488
10001ac8:	10800017 	ldw	r2,0(r2)
10001acc:	10c10104 	addi	r3,r2,1028
10001ad0:	00840074 	movhi	r2,4097
10001ad4:	108c3204 	addi	r2,r2,12488
10001ad8:	10800017 	ldw	r2,0(r2)
10001adc:	10810104 	addi	r2,r2,1028
10001ae0:	10800017 	ldw	r2,0(r2)
10001ae4:	e13fdf07 	ldb	r4,-132(fp)
10001ae8:	2008963a 	slli	r4,r4,24
10001aec:	1105883a 	add	r2,r2,r4
10001af0:	18800015 	stw	r2,0(r3)
		printf("%08x\n", ocmptr[257]);
10001af4:	00840074 	movhi	r2,4097
10001af8:	108c3204 	addi	r2,r2,12488
10001afc:	10800017 	ldw	r2,0(r2)
10001b00:	10810104 	addi	r2,r2,1028
10001b04:	10800017 	ldw	r2,0(r2)
10001b08:	100b883a 	mov	r5,r2
10001b0c:	01040074 	movhi	r4,4097
10001b10:	210b1c04 	addi	r4,r4,11376
10001b14:	00044400 	call	10004440 <printf>
		ocmptr[257] += 1;
10001b18:	00840074 	movhi	r2,4097
10001b1c:	108c3204 	addi	r2,r2,12488
10001b20:	10800017 	ldw	r2,0(r2)
10001b24:	10c10104 	addi	r3,r2,1028
10001b28:	00840074 	movhi	r2,4097
10001b2c:	108c3204 	addi	r2,r2,12488
10001b30:	10800017 	ldw	r2,0(r2)
10001b34:	10810104 	addi	r2,r2,1028
10001b38:	10800017 	ldw	r2,0(r2)
10001b3c:	10800044 	addi	r2,r2,1
10001b40:	18800015 	stw	r2,0(r3)
	}
	free(fileChunk);
10001b44:	e13fdb17 	ldw	r4,-148(fp)
10001b48:	00039200 	call	10003920 <free>
	free(currentFrame);
10001b4c:	e13ff217 	ldw	r4,-56(fp)
10001b50:	00039200 	call	10003920 <free>
	free(globalTable);
10001b54:	e13ff017 	ldw	r4,-64(fp)
10001b58:	00039200 	call	10003920 <free>
	printf("\n");
10001b5c:	01000284 	movi	r4,10
10001b60:	00044840 	call	10004484 <putchar>
	printf("\nDONE\n");
10001b64:	01040074 	movhi	r4,4097
10001b68:	210b1e04 	addi	r4,r4,11384
10001b6c:	000455c0 	call	1000455c <puts>
10001b70:	0005883a 	mov	r2,zero
}
10001b74:	e6ffff04 	addi	sp,fp,-4
10001b78:	dfc00217 	ldw	ra,8(sp)
10001b7c:	df000117 	ldw	fp,4(sp)
10001b80:	dc000017 	ldw	r16,0(sp)
10001b84:	dec00304 	addi	sp,sp,12
10001b88:	f800283a 	ret

10001b8c <__divsi3>:
10001b8c:	20001b16 	blt	r4,zero,10001bfc <__divsi3+0x70>
10001b90:	000f883a 	mov	r7,zero
10001b94:	28001616 	blt	r5,zero,10001bf0 <__divsi3+0x64>
10001b98:	200d883a 	mov	r6,r4
10001b9c:	29001a2e 	bgeu	r5,r4,10001c08 <__divsi3+0x7c>
10001ba0:	00800804 	movi	r2,32
10001ba4:	00c00044 	movi	r3,1
10001ba8:	00000106 	br	10001bb0 <__divsi3+0x24>
10001bac:	10000d26 	beq	r2,zero,10001be4 <__divsi3+0x58>
10001bb0:	294b883a 	add	r5,r5,r5
10001bb4:	10bfffc4 	addi	r2,r2,-1
10001bb8:	18c7883a 	add	r3,r3,r3
10001bbc:	293ffb36 	bltu	r5,r4,10001bac <__alt_data_end+0xf8001bac>
10001bc0:	0005883a 	mov	r2,zero
10001bc4:	18000726 	beq	r3,zero,10001be4 <__divsi3+0x58>
10001bc8:	0005883a 	mov	r2,zero
10001bcc:	31400236 	bltu	r6,r5,10001bd8 <__divsi3+0x4c>
10001bd0:	314dc83a 	sub	r6,r6,r5
10001bd4:	10c4b03a 	or	r2,r2,r3
10001bd8:	1806d07a 	srli	r3,r3,1
10001bdc:	280ad07a 	srli	r5,r5,1
10001be0:	183ffa1e 	bne	r3,zero,10001bcc <__alt_data_end+0xf8001bcc>
10001be4:	38000126 	beq	r7,zero,10001bec <__divsi3+0x60>
10001be8:	0085c83a 	sub	r2,zero,r2
10001bec:	f800283a 	ret
10001bf0:	014bc83a 	sub	r5,zero,r5
10001bf4:	39c0005c 	xori	r7,r7,1
10001bf8:	003fe706 	br	10001b98 <__alt_data_end+0xf8001b98>
10001bfc:	0109c83a 	sub	r4,zero,r4
10001c00:	01c00044 	movi	r7,1
10001c04:	003fe306 	br	10001b94 <__alt_data_end+0xf8001b94>
10001c08:	00c00044 	movi	r3,1
10001c0c:	003fee06 	br	10001bc8 <__alt_data_end+0xf8001bc8>

10001c10 <__modsi3>:
10001c10:	20001716 	blt	r4,zero,10001c70 <__modsi3+0x60>
10001c14:	000f883a 	mov	r7,zero
10001c18:	2005883a 	mov	r2,r4
10001c1c:	28001216 	blt	r5,zero,10001c68 <__modsi3+0x58>
10001c20:	2900162e 	bgeu	r5,r4,10001c7c <__modsi3+0x6c>
10001c24:	01800804 	movi	r6,32
10001c28:	00c00044 	movi	r3,1
10001c2c:	00000106 	br	10001c34 <__modsi3+0x24>
10001c30:	30000a26 	beq	r6,zero,10001c5c <__modsi3+0x4c>
10001c34:	294b883a 	add	r5,r5,r5
10001c38:	31bfffc4 	addi	r6,r6,-1
10001c3c:	18c7883a 	add	r3,r3,r3
10001c40:	293ffb36 	bltu	r5,r4,10001c30 <__alt_data_end+0xf8001c30>
10001c44:	18000526 	beq	r3,zero,10001c5c <__modsi3+0x4c>
10001c48:	1806d07a 	srli	r3,r3,1
10001c4c:	11400136 	bltu	r2,r5,10001c54 <__modsi3+0x44>
10001c50:	1145c83a 	sub	r2,r2,r5
10001c54:	280ad07a 	srli	r5,r5,1
10001c58:	183ffb1e 	bne	r3,zero,10001c48 <__alt_data_end+0xf8001c48>
10001c5c:	38000126 	beq	r7,zero,10001c64 <__modsi3+0x54>
10001c60:	0085c83a 	sub	r2,zero,r2
10001c64:	f800283a 	ret
10001c68:	014bc83a 	sub	r5,zero,r5
10001c6c:	003fec06 	br	10001c20 <__alt_data_end+0xf8001c20>
10001c70:	0109c83a 	sub	r4,zero,r4
10001c74:	01c00044 	movi	r7,1
10001c78:	003fe706 	br	10001c18 <__alt_data_end+0xf8001c18>
10001c7c:	00c00044 	movi	r3,1
10001c80:	003ff106 	br	10001c48 <__alt_data_end+0xf8001c48>

10001c84 <__udivsi3>:
10001c84:	200d883a 	mov	r6,r4
10001c88:	2900152e 	bgeu	r5,r4,10001ce0 <__udivsi3+0x5c>
10001c8c:	28001416 	blt	r5,zero,10001ce0 <__udivsi3+0x5c>
10001c90:	00800804 	movi	r2,32
10001c94:	00c00044 	movi	r3,1
10001c98:	00000206 	br	10001ca4 <__udivsi3+0x20>
10001c9c:	10000e26 	beq	r2,zero,10001cd8 <__udivsi3+0x54>
10001ca0:	28000516 	blt	r5,zero,10001cb8 <__udivsi3+0x34>
10001ca4:	294b883a 	add	r5,r5,r5
10001ca8:	10bfffc4 	addi	r2,r2,-1
10001cac:	18c7883a 	add	r3,r3,r3
10001cb0:	293ffa36 	bltu	r5,r4,10001c9c <__alt_data_end+0xf8001c9c>
10001cb4:	18000826 	beq	r3,zero,10001cd8 <__udivsi3+0x54>
10001cb8:	0005883a 	mov	r2,zero
10001cbc:	31400236 	bltu	r6,r5,10001cc8 <__udivsi3+0x44>
10001cc0:	314dc83a 	sub	r6,r6,r5
10001cc4:	10c4b03a 	or	r2,r2,r3
10001cc8:	1806d07a 	srli	r3,r3,1
10001ccc:	280ad07a 	srli	r5,r5,1
10001cd0:	183ffa1e 	bne	r3,zero,10001cbc <__alt_data_end+0xf8001cbc>
10001cd4:	f800283a 	ret
10001cd8:	0005883a 	mov	r2,zero
10001cdc:	f800283a 	ret
10001ce0:	00c00044 	movi	r3,1
10001ce4:	003ff406 	br	10001cb8 <__alt_data_end+0xf8001cb8>

10001ce8 <__umodsi3>:
10001ce8:	2005883a 	mov	r2,r4
10001cec:	2900122e 	bgeu	r5,r4,10001d38 <__umodsi3+0x50>
10001cf0:	28001116 	blt	r5,zero,10001d38 <__umodsi3+0x50>
10001cf4:	01800804 	movi	r6,32
10001cf8:	00c00044 	movi	r3,1
10001cfc:	00000206 	br	10001d08 <__umodsi3+0x20>
10001d00:	30000c26 	beq	r6,zero,10001d34 <__umodsi3+0x4c>
10001d04:	28000516 	blt	r5,zero,10001d1c <__umodsi3+0x34>
10001d08:	294b883a 	add	r5,r5,r5
10001d0c:	31bfffc4 	addi	r6,r6,-1
10001d10:	18c7883a 	add	r3,r3,r3
10001d14:	293ffa36 	bltu	r5,r4,10001d00 <__alt_data_end+0xf8001d00>
10001d18:	18000626 	beq	r3,zero,10001d34 <__umodsi3+0x4c>
10001d1c:	1806d07a 	srli	r3,r3,1
10001d20:	11400136 	bltu	r2,r5,10001d28 <__umodsi3+0x40>
10001d24:	1145c83a 	sub	r2,r2,r5
10001d28:	280ad07a 	srli	r5,r5,1
10001d2c:	183ffb1e 	bne	r3,zero,10001d1c <__alt_data_end+0xf8001d1c>
10001d30:	f800283a 	ret
10001d34:	f800283a 	ret
10001d38:	00c00044 	movi	r3,1
10001d3c:	003ff706 	br	10001d1c <__alt_data_end+0xf8001d1c>

10001d40 <__mulsi3>:
10001d40:	0005883a 	mov	r2,zero
10001d44:	20000726 	beq	r4,zero,10001d64 <__mulsi3+0x24>
10001d48:	20c0004c 	andi	r3,r4,1
10001d4c:	2008d07a 	srli	r4,r4,1
10001d50:	18000126 	beq	r3,zero,10001d58 <__mulsi3+0x18>
10001d54:	1145883a 	add	r2,r2,r5
10001d58:	294b883a 	add	r5,r5,r5
10001d5c:	203ffa1e 	bne	r4,zero,10001d48 <__alt_data_end+0xf8001d48>
10001d60:	f800283a 	ret
10001d64:	f800283a 	ret

10001d68 <__assert_func>:
10001d68:	00840074 	movhi	r2,4097
10001d6c:	1092eb04 	addi	r2,r2,19372
10001d70:	10800017 	ldw	r2,0(r2)
10001d74:	defffc04 	addi	sp,sp,-16
10001d78:	dfc00315 	stw	ra,12(sp)
10001d7c:	2015883a 	mov	r10,r4
10001d80:	2811883a 	mov	r8,r5
10001d84:	3813883a 	mov	r9,r7
10001d88:	11000317 	ldw	r4,12(r2)
10001d8c:	30000c26 	beq	r6,zero,10001dc0 <__assert_func+0x58>
10001d90:	00c40074 	movhi	r3,4097
10001d94:	18cb2504 	addi	r3,r3,11412
10001d98:	3005883a 	mov	r2,r6
10001d9c:	01440074 	movhi	r5,4097
10001da0:	294b2904 	addi	r5,r5,11428
10001da4:	500f883a 	mov	r7,r10
10001da8:	480d883a 	mov	r6,r9
10001dac:	d8c00115 	stw	r3,4(sp)
10001db0:	da000015 	stw	r8,0(sp)
10001db4:	d8800215 	stw	r2,8(sp)
10001db8:	000268c0 	call	1000268c <fiprintf>
10001dbc:	00076580 	call	10007658 <abort>
10001dc0:	00c40074 	movhi	r3,4097
10001dc4:	18cb2804 	addi	r3,r3,11424
10001dc8:	1805883a 	mov	r2,r3
10001dcc:	003ff306 	br	10001d9c <__alt_data_end+0xf8001d9c>

10001dd0 <__assert>:
10001dd0:	deffff04 	addi	sp,sp,-4
10001dd4:	300f883a 	mov	r7,r6
10001dd8:	000d883a 	mov	r6,zero
10001ddc:	dfc00015 	stw	ra,0(sp)
10001de0:	0001d680 	call	10001d68 <__assert_func>

10001de4 <calloc>:
10001de4:	00840074 	movhi	r2,4097
10001de8:	1092eb04 	addi	r2,r2,19372
10001dec:	280d883a 	mov	r6,r5
10001df0:	200b883a 	mov	r5,r4
10001df4:	11000017 	ldw	r4,0(r2)
10001df8:	0001dfc1 	jmpi	10001dfc <_calloc_r>

10001dfc <_calloc_r>:
10001dfc:	defffe04 	addi	sp,sp,-8
10001e00:	2805883a 	mov	r2,r5
10001e04:	dc000015 	stw	r16,0(sp)
10001e08:	300b883a 	mov	r5,r6
10001e0c:	2021883a 	mov	r16,r4
10001e10:	1009883a 	mov	r4,r2
10001e14:	dfc00115 	stw	ra,4(sp)
10001e18:	0001d400 	call	10001d40 <__mulsi3>
10001e1c:	100b883a 	mov	r5,r2
10001e20:	8009883a 	mov	r4,r16
10001e24:	00039340 	call	10003934 <_malloc_r>
10001e28:	10002926 	beq	r2,zero,10001ed0 <_calloc_r+0xd4>
10001e2c:	11bfff17 	ldw	r6,-4(r2)
10001e30:	1021883a 	mov	r16,r2
10001e34:	00bfff04 	movi	r2,-4
10001e38:	308c703a 	and	r6,r6,r2
10001e3c:	00c00904 	movi	r3,36
10001e40:	308d883a 	add	r6,r6,r2
10001e44:	19801636 	bltu	r3,r6,10001ea0 <_calloc_r+0xa4>
10001e48:	008004c4 	movi	r2,19
10001e4c:	11800b2e 	bgeu	r2,r6,10001e7c <_calloc_r+0x80>
10001e50:	80000015 	stw	zero,0(r16)
10001e54:	80000115 	stw	zero,4(r16)
10001e58:	008006c4 	movi	r2,27
10001e5c:	11801a2e 	bgeu	r2,r6,10001ec8 <_calloc_r+0xcc>
10001e60:	80000215 	stw	zero,8(r16)
10001e64:	80000315 	stw	zero,12(r16)
10001e68:	30c0151e 	bne	r6,r3,10001ec0 <_calloc_r+0xc4>
10001e6c:	80000415 	stw	zero,16(r16)
10001e70:	80800604 	addi	r2,r16,24
10001e74:	80000515 	stw	zero,20(r16)
10001e78:	00000106 	br	10001e80 <_calloc_r+0x84>
10001e7c:	8005883a 	mov	r2,r16
10001e80:	10000015 	stw	zero,0(r2)
10001e84:	10000115 	stw	zero,4(r2)
10001e88:	10000215 	stw	zero,8(r2)
10001e8c:	8005883a 	mov	r2,r16
10001e90:	dfc00117 	ldw	ra,4(sp)
10001e94:	dc000017 	ldw	r16,0(sp)
10001e98:	dec00204 	addi	sp,sp,8
10001e9c:	f800283a 	ret
10001ea0:	000b883a 	mov	r5,zero
10001ea4:	8009883a 	mov	r4,r16
10001ea8:	00042880 	call	10004288 <memset>
10001eac:	8005883a 	mov	r2,r16
10001eb0:	dfc00117 	ldw	ra,4(sp)
10001eb4:	dc000017 	ldw	r16,0(sp)
10001eb8:	dec00204 	addi	sp,sp,8
10001ebc:	f800283a 	ret
10001ec0:	80800404 	addi	r2,r16,16
10001ec4:	003fee06 	br	10001e80 <__alt_data_end+0xf8001e80>
10001ec8:	80800204 	addi	r2,r16,8
10001ecc:	003fec06 	br	10001e80 <__alt_data_end+0xf8001e80>
10001ed0:	0005883a 	mov	r2,zero
10001ed4:	003fee06 	br	10001e90 <__alt_data_end+0xf8001e90>

10001ed8 <exit>:
10001ed8:	defffe04 	addi	sp,sp,-8
10001edc:	000b883a 	mov	r5,zero
10001ee0:	dc000015 	stw	r16,0(sp)
10001ee4:	dfc00115 	stw	ra,4(sp)
10001ee8:	2021883a 	mov	r16,r4
10001eec:	00074d80 	call	100074d8 <__call_exitprocs>
10001ef0:	00840074 	movhi	r2,4097
10001ef4:	1092ea04 	addi	r2,r2,19368
10001ef8:	11000017 	ldw	r4,0(r2)
10001efc:	20800f17 	ldw	r2,60(r4)
10001f00:	10000126 	beq	r2,zero,10001f08 <exit+0x30>
10001f04:	103ee83a 	callr	r2
10001f08:	8009883a 	mov	r4,r16
10001f0c:	001011c0 	call	1001011c <_exit>

10001f10 <_fclose_r>:
10001f10:	28003926 	beq	r5,zero,10001ff8 <_fclose_r+0xe8>
10001f14:	defffc04 	addi	sp,sp,-16
10001f18:	dc400115 	stw	r17,4(sp)
10001f1c:	dc000015 	stw	r16,0(sp)
10001f20:	dfc00315 	stw	ra,12(sp)
10001f24:	dc800215 	stw	r18,8(sp)
10001f28:	2023883a 	mov	r17,r4
10001f2c:	2821883a 	mov	r16,r5
10001f30:	20000226 	beq	r4,zero,10001f3c <_fclose_r+0x2c>
10001f34:	20800e17 	ldw	r2,56(r4)
10001f38:	10002726 	beq	r2,zero,10001fd8 <_fclose_r+0xc8>
10001f3c:	8080030f 	ldh	r2,12(r16)
10001f40:	1000071e 	bne	r2,zero,10001f60 <_fclose_r+0x50>
10001f44:	0005883a 	mov	r2,zero
10001f48:	dfc00317 	ldw	ra,12(sp)
10001f4c:	dc800217 	ldw	r18,8(sp)
10001f50:	dc400117 	ldw	r17,4(sp)
10001f54:	dc000017 	ldw	r16,0(sp)
10001f58:	dec00404 	addi	sp,sp,16
10001f5c:	f800283a 	ret
10001f60:	800b883a 	mov	r5,r16
10001f64:	8809883a 	mov	r4,r17
10001f68:	00020140 	call	10002014 <__sflush_r>
10001f6c:	1025883a 	mov	r18,r2
10001f70:	80800b17 	ldw	r2,44(r16)
10001f74:	10000426 	beq	r2,zero,10001f88 <_fclose_r+0x78>
10001f78:	81400717 	ldw	r5,28(r16)
10001f7c:	8809883a 	mov	r4,r17
10001f80:	103ee83a 	callr	r2
10001f84:	10001616 	blt	r2,zero,10001fe0 <_fclose_r+0xd0>
10001f88:	8080030b 	ldhu	r2,12(r16)
10001f8c:	1080200c 	andi	r2,r2,128
10001f90:	1000151e 	bne	r2,zero,10001fe8 <_fclose_r+0xd8>
10001f94:	81400c17 	ldw	r5,48(r16)
10001f98:	28000526 	beq	r5,zero,10001fb0 <_fclose_r+0xa0>
10001f9c:	80801004 	addi	r2,r16,64
10001fa0:	28800226 	beq	r5,r2,10001fac <_fclose_r+0x9c>
10001fa4:	8809883a 	mov	r4,r17
10001fa8:	0002bb40 	call	10002bb4 <_free_r>
10001fac:	80000c15 	stw	zero,48(r16)
10001fb0:	81401117 	ldw	r5,68(r16)
10001fb4:	28000326 	beq	r5,zero,10001fc4 <_fclose_r+0xb4>
10001fb8:	8809883a 	mov	r4,r17
10001fbc:	0002bb40 	call	10002bb4 <_free_r>
10001fc0:	80001115 	stw	zero,68(r16)
10001fc4:	000262c0 	call	1000262c <__sfp_lock_acquire>
10001fc8:	8000030d 	sth	zero,12(r16)
10001fcc:	00026300 	call	10002630 <__sfp_lock_release>
10001fd0:	9005883a 	mov	r2,r18
10001fd4:	003fdc06 	br	10001f48 <__alt_data_end+0xf8001f48>
10001fd8:	000261c0 	call	1000261c <__sinit>
10001fdc:	003fd706 	br	10001f3c <__alt_data_end+0xf8001f3c>
10001fe0:	04bfffc4 	movi	r18,-1
10001fe4:	003fe806 	br	10001f88 <__alt_data_end+0xf8001f88>
10001fe8:	81400417 	ldw	r5,16(r16)
10001fec:	8809883a 	mov	r4,r17
10001ff0:	0002bb40 	call	10002bb4 <_free_r>
10001ff4:	003fe706 	br	10001f94 <__alt_data_end+0xf8001f94>
10001ff8:	0005883a 	mov	r2,zero
10001ffc:	f800283a 	ret

10002000 <fclose>:
10002000:	00840074 	movhi	r2,4097
10002004:	1092eb04 	addi	r2,r2,19372
10002008:	200b883a 	mov	r5,r4
1000200c:	11000017 	ldw	r4,0(r2)
10002010:	0001f101 	jmpi	10001f10 <_fclose_r>

10002014 <__sflush_r>:
10002014:	2880030b 	ldhu	r2,12(r5)
10002018:	defffb04 	addi	sp,sp,-20
1000201c:	dcc00315 	stw	r19,12(sp)
10002020:	dc400115 	stw	r17,4(sp)
10002024:	dfc00415 	stw	ra,16(sp)
10002028:	dc800215 	stw	r18,8(sp)
1000202c:	dc000015 	stw	r16,0(sp)
10002030:	10c0020c 	andi	r3,r2,8
10002034:	2823883a 	mov	r17,r5
10002038:	2027883a 	mov	r19,r4
1000203c:	1800311e 	bne	r3,zero,10002104 <__sflush_r+0xf0>
10002040:	28c00117 	ldw	r3,4(r5)
10002044:	10820014 	ori	r2,r2,2048
10002048:	2880030d 	sth	r2,12(r5)
1000204c:	00c04b0e 	bge	zero,r3,1000217c <__sflush_r+0x168>
10002050:	8a000a17 	ldw	r8,40(r17)
10002054:	40002326 	beq	r8,zero,100020e4 <__sflush_r+0xd0>
10002058:	9c000017 	ldw	r16,0(r19)
1000205c:	10c4000c 	andi	r3,r2,4096
10002060:	98000015 	stw	zero,0(r19)
10002064:	18004826 	beq	r3,zero,10002188 <__sflush_r+0x174>
10002068:	89801417 	ldw	r6,80(r17)
1000206c:	10c0010c 	andi	r3,r2,4
10002070:	18000626 	beq	r3,zero,1000208c <__sflush_r+0x78>
10002074:	88c00117 	ldw	r3,4(r17)
10002078:	88800c17 	ldw	r2,48(r17)
1000207c:	30cdc83a 	sub	r6,r6,r3
10002080:	10000226 	beq	r2,zero,1000208c <__sflush_r+0x78>
10002084:	88800f17 	ldw	r2,60(r17)
10002088:	308dc83a 	sub	r6,r6,r2
1000208c:	89400717 	ldw	r5,28(r17)
10002090:	000f883a 	mov	r7,zero
10002094:	9809883a 	mov	r4,r19
10002098:	403ee83a 	callr	r8
1000209c:	00ffffc4 	movi	r3,-1
100020a0:	10c04426 	beq	r2,r3,100021b4 <__sflush_r+0x1a0>
100020a4:	88c0030b 	ldhu	r3,12(r17)
100020a8:	89000417 	ldw	r4,16(r17)
100020ac:	88000115 	stw	zero,4(r17)
100020b0:	197dffcc 	andi	r5,r3,63487
100020b4:	8940030d 	sth	r5,12(r17)
100020b8:	89000015 	stw	r4,0(r17)
100020bc:	18c4000c 	andi	r3,r3,4096
100020c0:	18002c1e 	bne	r3,zero,10002174 <__sflush_r+0x160>
100020c4:	89400c17 	ldw	r5,48(r17)
100020c8:	9c000015 	stw	r16,0(r19)
100020cc:	28000526 	beq	r5,zero,100020e4 <__sflush_r+0xd0>
100020d0:	88801004 	addi	r2,r17,64
100020d4:	28800226 	beq	r5,r2,100020e0 <__sflush_r+0xcc>
100020d8:	9809883a 	mov	r4,r19
100020dc:	0002bb40 	call	10002bb4 <_free_r>
100020e0:	88000c15 	stw	zero,48(r17)
100020e4:	0005883a 	mov	r2,zero
100020e8:	dfc00417 	ldw	ra,16(sp)
100020ec:	dcc00317 	ldw	r19,12(sp)
100020f0:	dc800217 	ldw	r18,8(sp)
100020f4:	dc400117 	ldw	r17,4(sp)
100020f8:	dc000017 	ldw	r16,0(sp)
100020fc:	dec00504 	addi	sp,sp,20
10002100:	f800283a 	ret
10002104:	2c800417 	ldw	r18,16(r5)
10002108:	903ff626 	beq	r18,zero,100020e4 <__alt_data_end+0xf80020e4>
1000210c:	2c000017 	ldw	r16,0(r5)
10002110:	108000cc 	andi	r2,r2,3
10002114:	2c800015 	stw	r18,0(r5)
10002118:	84a1c83a 	sub	r16,r16,r18
1000211c:	1000131e 	bne	r2,zero,1000216c <__sflush_r+0x158>
10002120:	28800517 	ldw	r2,20(r5)
10002124:	88800215 	stw	r2,8(r17)
10002128:	04000316 	blt	zero,r16,10002138 <__sflush_r+0x124>
1000212c:	003fed06 	br	100020e4 <__alt_data_end+0xf80020e4>
10002130:	90a5883a 	add	r18,r18,r2
10002134:	043feb0e 	bge	zero,r16,100020e4 <__alt_data_end+0xf80020e4>
10002138:	88800917 	ldw	r2,36(r17)
1000213c:	89400717 	ldw	r5,28(r17)
10002140:	800f883a 	mov	r7,r16
10002144:	900d883a 	mov	r6,r18
10002148:	9809883a 	mov	r4,r19
1000214c:	103ee83a 	callr	r2
10002150:	80a1c83a 	sub	r16,r16,r2
10002154:	00bff616 	blt	zero,r2,10002130 <__alt_data_end+0xf8002130>
10002158:	88c0030b 	ldhu	r3,12(r17)
1000215c:	00bfffc4 	movi	r2,-1
10002160:	18c01014 	ori	r3,r3,64
10002164:	88c0030d 	sth	r3,12(r17)
10002168:	003fdf06 	br	100020e8 <__alt_data_end+0xf80020e8>
1000216c:	0005883a 	mov	r2,zero
10002170:	003fec06 	br	10002124 <__alt_data_end+0xf8002124>
10002174:	88801415 	stw	r2,80(r17)
10002178:	003fd206 	br	100020c4 <__alt_data_end+0xf80020c4>
1000217c:	28c00f17 	ldw	r3,60(r5)
10002180:	00ffb316 	blt	zero,r3,10002050 <__alt_data_end+0xf8002050>
10002184:	003fd706 	br	100020e4 <__alt_data_end+0xf80020e4>
10002188:	89400717 	ldw	r5,28(r17)
1000218c:	000d883a 	mov	r6,zero
10002190:	01c00044 	movi	r7,1
10002194:	9809883a 	mov	r4,r19
10002198:	403ee83a 	callr	r8
1000219c:	100d883a 	mov	r6,r2
100021a0:	00bfffc4 	movi	r2,-1
100021a4:	30801426 	beq	r6,r2,100021f8 <__sflush_r+0x1e4>
100021a8:	8880030b 	ldhu	r2,12(r17)
100021ac:	8a000a17 	ldw	r8,40(r17)
100021b0:	003fae06 	br	1000206c <__alt_data_end+0xf800206c>
100021b4:	98c00017 	ldw	r3,0(r19)
100021b8:	183fba26 	beq	r3,zero,100020a4 <__alt_data_end+0xf80020a4>
100021bc:	01000744 	movi	r4,29
100021c0:	19000626 	beq	r3,r4,100021dc <__sflush_r+0x1c8>
100021c4:	01000584 	movi	r4,22
100021c8:	19000426 	beq	r3,r4,100021dc <__sflush_r+0x1c8>
100021cc:	88c0030b 	ldhu	r3,12(r17)
100021d0:	18c01014 	ori	r3,r3,64
100021d4:	88c0030d 	sth	r3,12(r17)
100021d8:	003fc306 	br	100020e8 <__alt_data_end+0xf80020e8>
100021dc:	8880030b 	ldhu	r2,12(r17)
100021e0:	88c00417 	ldw	r3,16(r17)
100021e4:	88000115 	stw	zero,4(r17)
100021e8:	10bdffcc 	andi	r2,r2,63487
100021ec:	8880030d 	sth	r2,12(r17)
100021f0:	88c00015 	stw	r3,0(r17)
100021f4:	003fb306 	br	100020c4 <__alt_data_end+0xf80020c4>
100021f8:	98800017 	ldw	r2,0(r19)
100021fc:	103fea26 	beq	r2,zero,100021a8 <__alt_data_end+0xf80021a8>
10002200:	00c00744 	movi	r3,29
10002204:	10c00226 	beq	r2,r3,10002210 <__sflush_r+0x1fc>
10002208:	00c00584 	movi	r3,22
1000220c:	10c0031e 	bne	r2,r3,1000221c <__sflush_r+0x208>
10002210:	9c000015 	stw	r16,0(r19)
10002214:	0005883a 	mov	r2,zero
10002218:	003fb306 	br	100020e8 <__alt_data_end+0xf80020e8>
1000221c:	88c0030b 	ldhu	r3,12(r17)
10002220:	3005883a 	mov	r2,r6
10002224:	18c01014 	ori	r3,r3,64
10002228:	88c0030d 	sth	r3,12(r17)
1000222c:	003fae06 	br	100020e8 <__alt_data_end+0xf80020e8>

10002230 <_fflush_r>:
10002230:	defffd04 	addi	sp,sp,-12
10002234:	dc000115 	stw	r16,4(sp)
10002238:	dfc00215 	stw	ra,8(sp)
1000223c:	2021883a 	mov	r16,r4
10002240:	20000226 	beq	r4,zero,1000224c <_fflush_r+0x1c>
10002244:	20800e17 	ldw	r2,56(r4)
10002248:	10000c26 	beq	r2,zero,1000227c <_fflush_r+0x4c>
1000224c:	2880030f 	ldh	r2,12(r5)
10002250:	1000051e 	bne	r2,zero,10002268 <_fflush_r+0x38>
10002254:	0005883a 	mov	r2,zero
10002258:	dfc00217 	ldw	ra,8(sp)
1000225c:	dc000117 	ldw	r16,4(sp)
10002260:	dec00304 	addi	sp,sp,12
10002264:	f800283a 	ret
10002268:	8009883a 	mov	r4,r16
1000226c:	dfc00217 	ldw	ra,8(sp)
10002270:	dc000117 	ldw	r16,4(sp)
10002274:	dec00304 	addi	sp,sp,12
10002278:	00020141 	jmpi	10002014 <__sflush_r>
1000227c:	d9400015 	stw	r5,0(sp)
10002280:	000261c0 	call	1000261c <__sinit>
10002284:	d9400017 	ldw	r5,0(sp)
10002288:	003ff006 	br	1000224c <__alt_data_end+0xf800224c>

1000228c <fflush>:
1000228c:	20000526 	beq	r4,zero,100022a4 <fflush+0x18>
10002290:	00840074 	movhi	r2,4097
10002294:	1092eb04 	addi	r2,r2,19372
10002298:	200b883a 	mov	r5,r4
1000229c:	11000017 	ldw	r4,0(r2)
100022a0:	00022301 	jmpi	10002230 <_fflush_r>
100022a4:	00840074 	movhi	r2,4097
100022a8:	1092ea04 	addi	r2,r2,19368
100022ac:	11000017 	ldw	r4,0(r2)
100022b0:	01440034 	movhi	r5,4096
100022b4:	29488c04 	addi	r5,r5,8752
100022b8:	000357c1 	jmpi	1000357c <_fwalk_reent>

100022bc <__fp_unlock>:
100022bc:	0005883a 	mov	r2,zero
100022c0:	f800283a 	ret

100022c4 <_cleanup_r>:
100022c4:	01440034 	movhi	r5,4096
100022c8:	2947c404 	addi	r5,r5,7952
100022cc:	000357c1 	jmpi	1000357c <_fwalk_reent>

100022d0 <__sinit.part.1>:
100022d0:	defff704 	addi	sp,sp,-36
100022d4:	00c40034 	movhi	r3,4096
100022d8:	dfc00815 	stw	ra,32(sp)
100022dc:	ddc00715 	stw	r23,28(sp)
100022e0:	dd800615 	stw	r22,24(sp)
100022e4:	dd400515 	stw	r21,20(sp)
100022e8:	dd000415 	stw	r20,16(sp)
100022ec:	dcc00315 	stw	r19,12(sp)
100022f0:	dc800215 	stw	r18,8(sp)
100022f4:	dc400115 	stw	r17,4(sp)
100022f8:	dc000015 	stw	r16,0(sp)
100022fc:	18c8b104 	addi	r3,r3,8900
10002300:	24000117 	ldw	r16,4(r4)
10002304:	20c00f15 	stw	r3,60(r4)
10002308:	2080bb04 	addi	r2,r4,748
1000230c:	00c000c4 	movi	r3,3
10002310:	20c0b915 	stw	r3,740(r4)
10002314:	2080ba15 	stw	r2,744(r4)
10002318:	2000b815 	stw	zero,736(r4)
1000231c:	05c00204 	movi	r23,8
10002320:	00800104 	movi	r2,4
10002324:	2025883a 	mov	r18,r4
10002328:	b80d883a 	mov	r6,r23
1000232c:	81001704 	addi	r4,r16,92
10002330:	000b883a 	mov	r5,zero
10002334:	80000015 	stw	zero,0(r16)
10002338:	80000115 	stw	zero,4(r16)
1000233c:	80000215 	stw	zero,8(r16)
10002340:	8080030d 	sth	r2,12(r16)
10002344:	80001915 	stw	zero,100(r16)
10002348:	8000038d 	sth	zero,14(r16)
1000234c:	80000415 	stw	zero,16(r16)
10002350:	80000515 	stw	zero,20(r16)
10002354:	80000615 	stw	zero,24(r16)
10002358:	00042880 	call	10004288 <memset>
1000235c:	05840034 	movhi	r22,4096
10002360:	94400217 	ldw	r17,8(r18)
10002364:	05440034 	movhi	r21,4096
10002368:	05040034 	movhi	r20,4096
1000236c:	04c40034 	movhi	r19,4096
10002370:	b5934c04 	addi	r22,r22,19760
10002374:	ad536304 	addi	r21,r21,19852
10002378:	a5138204 	addi	r20,r20,19976
1000237c:	9cd39904 	addi	r19,r19,20068
10002380:	85800815 	stw	r22,32(r16)
10002384:	85400915 	stw	r21,36(r16)
10002388:	85000a15 	stw	r20,40(r16)
1000238c:	84c00b15 	stw	r19,44(r16)
10002390:	84000715 	stw	r16,28(r16)
10002394:	00800284 	movi	r2,10
10002398:	8880030d 	sth	r2,12(r17)
1000239c:	00800044 	movi	r2,1
100023a0:	b80d883a 	mov	r6,r23
100023a4:	89001704 	addi	r4,r17,92
100023a8:	000b883a 	mov	r5,zero
100023ac:	88000015 	stw	zero,0(r17)
100023b0:	88000115 	stw	zero,4(r17)
100023b4:	88000215 	stw	zero,8(r17)
100023b8:	88001915 	stw	zero,100(r17)
100023bc:	8880038d 	sth	r2,14(r17)
100023c0:	88000415 	stw	zero,16(r17)
100023c4:	88000515 	stw	zero,20(r17)
100023c8:	88000615 	stw	zero,24(r17)
100023cc:	00042880 	call	10004288 <memset>
100023d0:	94000317 	ldw	r16,12(r18)
100023d4:	00800484 	movi	r2,18
100023d8:	8c400715 	stw	r17,28(r17)
100023dc:	8d800815 	stw	r22,32(r17)
100023e0:	8d400915 	stw	r21,36(r17)
100023e4:	8d000a15 	stw	r20,40(r17)
100023e8:	8cc00b15 	stw	r19,44(r17)
100023ec:	8080030d 	sth	r2,12(r16)
100023f0:	00800084 	movi	r2,2
100023f4:	80000015 	stw	zero,0(r16)
100023f8:	80000115 	stw	zero,4(r16)
100023fc:	80000215 	stw	zero,8(r16)
10002400:	80001915 	stw	zero,100(r16)
10002404:	8080038d 	sth	r2,14(r16)
10002408:	80000415 	stw	zero,16(r16)
1000240c:	80000515 	stw	zero,20(r16)
10002410:	80000615 	stw	zero,24(r16)
10002414:	b80d883a 	mov	r6,r23
10002418:	000b883a 	mov	r5,zero
1000241c:	81001704 	addi	r4,r16,92
10002420:	00042880 	call	10004288 <memset>
10002424:	00800044 	movi	r2,1
10002428:	84000715 	stw	r16,28(r16)
1000242c:	85800815 	stw	r22,32(r16)
10002430:	85400915 	stw	r21,36(r16)
10002434:	85000a15 	stw	r20,40(r16)
10002438:	84c00b15 	stw	r19,44(r16)
1000243c:	90800e15 	stw	r2,56(r18)
10002440:	dfc00817 	ldw	ra,32(sp)
10002444:	ddc00717 	ldw	r23,28(sp)
10002448:	dd800617 	ldw	r22,24(sp)
1000244c:	dd400517 	ldw	r21,20(sp)
10002450:	dd000417 	ldw	r20,16(sp)
10002454:	dcc00317 	ldw	r19,12(sp)
10002458:	dc800217 	ldw	r18,8(sp)
1000245c:	dc400117 	ldw	r17,4(sp)
10002460:	dc000017 	ldw	r16,0(sp)
10002464:	dec00904 	addi	sp,sp,36
10002468:	f800283a 	ret

1000246c <__fp_lock>:
1000246c:	0005883a 	mov	r2,zero
10002470:	f800283a 	ret

10002474 <__sfmoreglue>:
10002474:	defffc04 	addi	sp,sp,-16
10002478:	dc800215 	stw	r18,8(sp)
1000247c:	2825883a 	mov	r18,r5
10002480:	dc000015 	stw	r16,0(sp)
10002484:	01401a04 	movi	r5,104
10002488:	2021883a 	mov	r16,r4
1000248c:	913fffc4 	addi	r4,r18,-1
10002490:	dfc00315 	stw	ra,12(sp)
10002494:	dc400115 	stw	r17,4(sp)
10002498:	0001d400 	call	10001d40 <__mulsi3>
1000249c:	8009883a 	mov	r4,r16
100024a0:	11401d04 	addi	r5,r2,116
100024a4:	1023883a 	mov	r17,r2
100024a8:	00039340 	call	10003934 <_malloc_r>
100024ac:	1021883a 	mov	r16,r2
100024b0:	10000726 	beq	r2,zero,100024d0 <__sfmoreglue+0x5c>
100024b4:	11000304 	addi	r4,r2,12
100024b8:	10000015 	stw	zero,0(r2)
100024bc:	14800115 	stw	r18,4(r2)
100024c0:	11000215 	stw	r4,8(r2)
100024c4:	89801a04 	addi	r6,r17,104
100024c8:	000b883a 	mov	r5,zero
100024cc:	00042880 	call	10004288 <memset>
100024d0:	8005883a 	mov	r2,r16
100024d4:	dfc00317 	ldw	ra,12(sp)
100024d8:	dc800217 	ldw	r18,8(sp)
100024dc:	dc400117 	ldw	r17,4(sp)
100024e0:	dc000017 	ldw	r16,0(sp)
100024e4:	dec00404 	addi	sp,sp,16
100024e8:	f800283a 	ret

100024ec <__sfp>:
100024ec:	defffb04 	addi	sp,sp,-20
100024f0:	dc000015 	stw	r16,0(sp)
100024f4:	04040074 	movhi	r16,4097
100024f8:	8412ea04 	addi	r16,r16,19368
100024fc:	dcc00315 	stw	r19,12(sp)
10002500:	2027883a 	mov	r19,r4
10002504:	81000017 	ldw	r4,0(r16)
10002508:	dfc00415 	stw	ra,16(sp)
1000250c:	dc800215 	stw	r18,8(sp)
10002510:	20800e17 	ldw	r2,56(r4)
10002514:	dc400115 	stw	r17,4(sp)
10002518:	1000021e 	bne	r2,zero,10002524 <__sfp+0x38>
1000251c:	00022d00 	call	100022d0 <__sinit.part.1>
10002520:	81000017 	ldw	r4,0(r16)
10002524:	2480b804 	addi	r18,r4,736
10002528:	047fffc4 	movi	r17,-1
1000252c:	91000117 	ldw	r4,4(r18)
10002530:	94000217 	ldw	r16,8(r18)
10002534:	213fffc4 	addi	r4,r4,-1
10002538:	20000a16 	blt	r4,zero,10002564 <__sfp+0x78>
1000253c:	8080030f 	ldh	r2,12(r16)
10002540:	10000c26 	beq	r2,zero,10002574 <__sfp+0x88>
10002544:	80c01d04 	addi	r3,r16,116
10002548:	00000206 	br	10002554 <__sfp+0x68>
1000254c:	18bfe60f 	ldh	r2,-104(r3)
10002550:	10000826 	beq	r2,zero,10002574 <__sfp+0x88>
10002554:	213fffc4 	addi	r4,r4,-1
10002558:	1c3ffd04 	addi	r16,r3,-12
1000255c:	18c01a04 	addi	r3,r3,104
10002560:	247ffa1e 	bne	r4,r17,1000254c <__alt_data_end+0xf800254c>
10002564:	90800017 	ldw	r2,0(r18)
10002568:	10001d26 	beq	r2,zero,100025e0 <__sfp+0xf4>
1000256c:	1025883a 	mov	r18,r2
10002570:	003fee06 	br	1000252c <__alt_data_end+0xf800252c>
10002574:	00bfffc4 	movi	r2,-1
10002578:	8080038d 	sth	r2,14(r16)
1000257c:	00800044 	movi	r2,1
10002580:	8080030d 	sth	r2,12(r16)
10002584:	80001915 	stw	zero,100(r16)
10002588:	80000015 	stw	zero,0(r16)
1000258c:	80000215 	stw	zero,8(r16)
10002590:	80000115 	stw	zero,4(r16)
10002594:	80000415 	stw	zero,16(r16)
10002598:	80000515 	stw	zero,20(r16)
1000259c:	80000615 	stw	zero,24(r16)
100025a0:	01800204 	movi	r6,8
100025a4:	000b883a 	mov	r5,zero
100025a8:	81001704 	addi	r4,r16,92
100025ac:	00042880 	call	10004288 <memset>
100025b0:	8005883a 	mov	r2,r16
100025b4:	80000c15 	stw	zero,48(r16)
100025b8:	80000d15 	stw	zero,52(r16)
100025bc:	80001115 	stw	zero,68(r16)
100025c0:	80001215 	stw	zero,72(r16)
100025c4:	dfc00417 	ldw	ra,16(sp)
100025c8:	dcc00317 	ldw	r19,12(sp)
100025cc:	dc800217 	ldw	r18,8(sp)
100025d0:	dc400117 	ldw	r17,4(sp)
100025d4:	dc000017 	ldw	r16,0(sp)
100025d8:	dec00504 	addi	sp,sp,20
100025dc:	f800283a 	ret
100025e0:	01400104 	movi	r5,4
100025e4:	9809883a 	mov	r4,r19
100025e8:	00024740 	call	10002474 <__sfmoreglue>
100025ec:	90800015 	stw	r2,0(r18)
100025f0:	103fde1e 	bne	r2,zero,1000256c <__alt_data_end+0xf800256c>
100025f4:	00800304 	movi	r2,12
100025f8:	98800015 	stw	r2,0(r19)
100025fc:	0005883a 	mov	r2,zero
10002600:	003ff006 	br	100025c4 <__alt_data_end+0xf80025c4>

10002604 <_cleanup>:
10002604:	00840074 	movhi	r2,4097
10002608:	1092ea04 	addi	r2,r2,19368
1000260c:	11000017 	ldw	r4,0(r2)
10002610:	01440034 	movhi	r5,4096
10002614:	2947c404 	addi	r5,r5,7952
10002618:	000357c1 	jmpi	1000357c <_fwalk_reent>

1000261c <__sinit>:
1000261c:	20800e17 	ldw	r2,56(r4)
10002620:	10000126 	beq	r2,zero,10002628 <__sinit+0xc>
10002624:	f800283a 	ret
10002628:	00022d01 	jmpi	100022d0 <__sinit.part.1>

1000262c <__sfp_lock_acquire>:
1000262c:	f800283a 	ret

10002630 <__sfp_lock_release>:
10002630:	f800283a 	ret

10002634 <__sinit_lock_acquire>:
10002634:	f800283a 	ret

10002638 <__sinit_lock_release>:
10002638:	f800283a 	ret

1000263c <__fp_lock_all>:
1000263c:	00840074 	movhi	r2,4097
10002640:	1092eb04 	addi	r2,r2,19372
10002644:	11000017 	ldw	r4,0(r2)
10002648:	01440034 	movhi	r5,4096
1000264c:	29491b04 	addi	r5,r5,9324
10002650:	00034b81 	jmpi	100034b8 <_fwalk>

10002654 <__fp_unlock_all>:
10002654:	00840074 	movhi	r2,4097
10002658:	1092eb04 	addi	r2,r2,19372
1000265c:	11000017 	ldw	r4,0(r2)
10002660:	01440034 	movhi	r5,4096
10002664:	2948af04 	addi	r5,r5,8892
10002668:	00034b81 	jmpi	100034b8 <_fwalk>

1000266c <_fiprintf_r>:
1000266c:	defffe04 	addi	sp,sp,-8
10002670:	dfc00015 	stw	ra,0(sp)
10002674:	d9c00115 	stw	r7,4(sp)
10002678:	d9c00104 	addi	r7,sp,4
1000267c:	0004f040 	call	10004f04 <_vfiprintf_r>
10002680:	dfc00017 	ldw	ra,0(sp)
10002684:	dec00204 	addi	sp,sp,8
10002688:	f800283a 	ret

1000268c <fiprintf>:
1000268c:	defffd04 	addi	sp,sp,-12
10002690:	2005883a 	mov	r2,r4
10002694:	dfc00015 	stw	ra,0(sp)
10002698:	d9800115 	stw	r6,4(sp)
1000269c:	d9c00215 	stw	r7,8(sp)
100026a0:	00c40074 	movhi	r3,4097
100026a4:	18d2eb04 	addi	r3,r3,19372
100026a8:	19000017 	ldw	r4,0(r3)
100026ac:	280d883a 	mov	r6,r5
100026b0:	d9c00104 	addi	r7,sp,4
100026b4:	100b883a 	mov	r5,r2
100026b8:	0004f040 	call	10004f04 <_vfiprintf_r>
100026bc:	dfc00017 	ldw	ra,0(sp)
100026c0:	dec00304 	addi	sp,sp,12
100026c4:	f800283a 	ret

100026c8 <_fopen_r>:
100026c8:	defffa04 	addi	sp,sp,-24
100026cc:	3005883a 	mov	r2,r6
100026d0:	dcc00415 	stw	r19,16(sp)
100026d4:	d80d883a 	mov	r6,sp
100026d8:	2827883a 	mov	r19,r5
100026dc:	100b883a 	mov	r5,r2
100026e0:	dc800315 	stw	r18,12(sp)
100026e4:	dfc00515 	stw	ra,20(sp)
100026e8:	dc400215 	stw	r17,8(sp)
100026ec:	dc000115 	stw	r16,4(sp)
100026f0:	2025883a 	mov	r18,r4
100026f4:	0008f200 	call	10008f20 <__sflags>
100026f8:	10002726 	beq	r2,zero,10002798 <_fopen_r+0xd0>
100026fc:	9009883a 	mov	r4,r18
10002700:	1023883a 	mov	r17,r2
10002704:	00024ec0 	call	100024ec <__sfp>
10002708:	1021883a 	mov	r16,r2
1000270c:	10002226 	beq	r2,zero,10002798 <_fopen_r+0xd0>
10002710:	d9800017 	ldw	r6,0(sp)
10002714:	01c06d84 	movi	r7,438
10002718:	980b883a 	mov	r5,r19
1000271c:	9009883a 	mov	r4,r18
10002720:	00043b00 	call	100043b0 <_open_r>
10002724:	10001916 	blt	r2,zero,1000278c <_fopen_r+0xc4>
10002728:	8080038d 	sth	r2,14(r16)
1000272c:	00840034 	movhi	r2,4096
10002730:	10934c04 	addi	r2,r2,19760
10002734:	80800815 	stw	r2,32(r16)
10002738:	00840034 	movhi	r2,4096
1000273c:	10936304 	addi	r2,r2,19852
10002740:	80800915 	stw	r2,36(r16)
10002744:	00840034 	movhi	r2,4096
10002748:	10938204 	addi	r2,r2,19976
1000274c:	80800a15 	stw	r2,40(r16)
10002750:	00840034 	movhi	r2,4096
10002754:	10939904 	addi	r2,r2,20068
10002758:	8440030d 	sth	r17,12(r16)
1000275c:	84000715 	stw	r16,28(r16)
10002760:	80800b15 	stw	r2,44(r16)
10002764:	8c40400c 	andi	r17,r17,256
10002768:	88000d1e 	bne	r17,zero,100027a0 <_fopen_r+0xd8>
1000276c:	8005883a 	mov	r2,r16
10002770:	dfc00517 	ldw	ra,20(sp)
10002774:	dcc00417 	ldw	r19,16(sp)
10002778:	dc800317 	ldw	r18,12(sp)
1000277c:	dc400217 	ldw	r17,8(sp)
10002780:	dc000117 	ldw	r16,4(sp)
10002784:	dec00604 	addi	sp,sp,24
10002788:	f800283a 	ret
1000278c:	000262c0 	call	1000262c <__sfp_lock_acquire>
10002790:	8000030d 	sth	zero,12(r16)
10002794:	00026300 	call	10002630 <__sfp_lock_release>
10002798:	0005883a 	mov	r2,zero
1000279c:	003ff406 	br	10002770 <__alt_data_end+0xf8002770>
100027a0:	01c00084 	movi	r7,2
100027a4:	000d883a 	mov	r6,zero
100027a8:	800b883a 	mov	r5,r16
100027ac:	9009883a 	mov	r4,r18
100027b0:	0002ec40 	call	10002ec4 <_fseek_r>
100027b4:	8005883a 	mov	r2,r16
100027b8:	003fed06 	br	10002770 <__alt_data_end+0xf8002770>

100027bc <fopen>:
100027bc:	00840074 	movhi	r2,4097
100027c0:	1092eb04 	addi	r2,r2,19372
100027c4:	280d883a 	mov	r6,r5
100027c8:	200b883a 	mov	r5,r4
100027cc:	11000017 	ldw	r4,0(r2)
100027d0:	00026c81 	jmpi	100026c8 <_fopen_r>

100027d4 <_fprintf_r>:
100027d4:	defffe04 	addi	sp,sp,-8
100027d8:	2809883a 	mov	r4,r5
100027dc:	300b883a 	mov	r5,r6
100027e0:	dfc00015 	stw	ra,0(sp)
100027e4:	d9c00115 	stw	r7,4(sp)
100027e8:	d9800104 	addi	r6,sp,4
100027ec:	00071f80 	call	100071f8 <__vfprintf_internal>
100027f0:	dfc00017 	ldw	ra,0(sp)
100027f4:	dec00204 	addi	sp,sp,8
100027f8:	f800283a 	ret

100027fc <fprintf>:
100027fc:	defffd04 	addi	sp,sp,-12
10002800:	dfc00015 	stw	ra,0(sp)
10002804:	d9800115 	stw	r6,4(sp)
10002808:	d9c00215 	stw	r7,8(sp)
1000280c:	d9800104 	addi	r6,sp,4
10002810:	00071f80 	call	100071f8 <__vfprintf_internal>
10002814:	dfc00017 	ldw	ra,0(sp)
10002818:	dec00304 	addi	sp,sp,12
1000281c:	f800283a 	ret

10002820 <_fread_r>:
10002820:	defff404 	addi	sp,sp,-48
10002824:	dd000615 	stw	r20,24(sp)
10002828:	dcc00515 	stw	r19,20(sp)
1000282c:	2029883a 	mov	r20,r4
10002830:	2827883a 	mov	r19,r5
10002834:	3809883a 	mov	r4,r7
10002838:	300b883a 	mov	r5,r6
1000283c:	ddc00915 	stw	r23,36(sp)
10002840:	dd400715 	stw	r21,28(sp)
10002844:	dc000215 	stw	r16,8(sp)
10002848:	dfc00b15 	stw	ra,44(sp)
1000284c:	df000a15 	stw	fp,40(sp)
10002850:	dd800815 	stw	r22,32(sp)
10002854:	dc800415 	stw	r18,16(sp)
10002858:	dc400315 	stw	r17,12(sp)
1000285c:	302f883a 	mov	r23,r6
10002860:	382b883a 	mov	r21,r7
10002864:	0001d400 	call	10001d40 <__mulsi3>
10002868:	dc000c17 	ldw	r16,48(sp)
1000286c:	10003826 	beq	r2,zero,10002950 <_fread_r+0x130>
10002870:	102d883a 	mov	r22,r2
10002874:	a0000226 	beq	r20,zero,10002880 <_fread_r+0x60>
10002878:	a0800e17 	ldw	r2,56(r20)
1000287c:	10006e26 	beq	r2,zero,10002a38 <_fread_r+0x218>
10002880:	8080030b 	ldhu	r2,12(r16)
10002884:	10c8000c 	andi	r3,r2,8192
10002888:	1800061e 	bne	r3,zero,100028a4 <_fread_r+0x84>
1000288c:	81001917 	ldw	r4,100(r16)
10002890:	00f7ffc4 	movi	r3,-8193
10002894:	10880014 	ori	r2,r2,8192
10002898:	20c6703a 	and	r3,r4,r3
1000289c:	8080030d 	sth	r2,12(r16)
100028a0:	80c01915 	stw	r3,100(r16)
100028a4:	84400117 	ldw	r17,4(r16)
100028a8:	88005f16 	blt	r17,zero,10002a28 <_fread_r+0x208>
100028ac:	8809883a 	mov	r4,r17
100028b0:	1080008c 	andi	r2,r2,2
100028b4:	1000281e 	bne	r2,zero,10002958 <_fread_r+0x138>
100028b8:	b025883a 	mov	r18,r22
100028bc:	00000b06 	br	100028ec <_fread_r+0xcc>
100028c0:	00041400 	call	10004140 <memcpy>
100028c4:	80800017 	ldw	r2,0(r16)
100028c8:	9c67883a 	add	r19,r19,r17
100028cc:	9465c83a 	sub	r18,r18,r17
100028d0:	1463883a 	add	r17,r2,r17
100028d4:	800b883a 	mov	r5,r16
100028d8:	a009883a 	mov	r4,r20
100028dc:	84400015 	stw	r17,0(r16)
100028e0:	0004b080 	call	10004b08 <__srefill_r>
100028e4:	10004c1e 	bne	r2,zero,10002a18 <_fread_r+0x1f8>
100028e8:	84400117 	ldw	r17,4(r16)
100028ec:	880d883a 	mov	r6,r17
100028f0:	9809883a 	mov	r4,r19
100028f4:	81400017 	ldw	r5,0(r16)
100028f8:	8cbff136 	bltu	r17,r18,100028c0 <__alt_data_end+0xf80028c0>
100028fc:	900d883a 	mov	r6,r18
10002900:	00041400 	call	10004140 <memcpy>
10002904:	80c00117 	ldw	r3,4(r16)
10002908:	81000017 	ldw	r4,0(r16)
1000290c:	a805883a 	mov	r2,r21
10002910:	1c87c83a 	sub	r3,r3,r18
10002914:	24a5883a 	add	r18,r4,r18
10002918:	80c00115 	stw	r3,4(r16)
1000291c:	84800015 	stw	r18,0(r16)
10002920:	dfc00b17 	ldw	ra,44(sp)
10002924:	df000a17 	ldw	fp,40(sp)
10002928:	ddc00917 	ldw	r23,36(sp)
1000292c:	dd800817 	ldw	r22,32(sp)
10002930:	dd400717 	ldw	r21,28(sp)
10002934:	dd000617 	ldw	r20,24(sp)
10002938:	dcc00517 	ldw	r19,20(sp)
1000293c:	dc800417 	ldw	r18,16(sp)
10002940:	dc400317 	ldw	r17,12(sp)
10002944:	dc000217 	ldw	r16,8(sp)
10002948:	dec00c04 	addi	sp,sp,48
1000294c:	f800283a 	ret
10002950:	0005883a 	mov	r2,zero
10002954:	003ff206 	br	10002920 <__alt_data_end+0xf8002920>
10002958:	b007883a 	mov	r3,r22
1000295c:	2580012e 	bgeu	r4,r22,10002964 <_fread_r+0x144>
10002960:	2007883a 	mov	r3,r4
10002964:	81400017 	ldw	r5,0(r16)
10002968:	180d883a 	mov	r6,r3
1000296c:	9809883a 	mov	r4,r19
10002970:	d8c00115 	stw	r3,4(sp)
10002974:	00041400 	call	10004140 <memcpy>
10002978:	d8c00117 	ldw	r3,4(sp)
1000297c:	84400017 	ldw	r17,0(r16)
10002980:	80800117 	ldw	r2,4(r16)
10002984:	81400c17 	ldw	r5,48(r16)
10002988:	88e3883a 	add	r17,r17,r3
1000298c:	10c5c83a 	sub	r2,r2,r3
10002990:	84400015 	stw	r17,0(r16)
10002994:	80800115 	stw	r2,4(r16)
10002998:	b0e5c83a 	sub	r18,r22,r3
1000299c:	28002c26 	beq	r5,zero,10002a50 <_fread_r+0x230>
100029a0:	90002c26 	beq	r18,zero,10002a54 <_fread_r+0x234>
100029a4:	80801004 	addi	r2,r16,64
100029a8:	28800526 	beq	r5,r2,100029c0 <_fread_r+0x1a0>
100029ac:	a009883a 	mov	r4,r20
100029b0:	d8c00115 	stw	r3,4(sp)
100029b4:	0002bb40 	call	10002bb4 <_free_r>
100029b8:	d8c00117 	ldw	r3,4(sp)
100029bc:	84400017 	ldw	r17,0(r16)
100029c0:	80000c15 	stw	zero,48(r16)
100029c4:	80800517 	ldw	r2,20(r16)
100029c8:	87000417 	ldw	fp,16(r16)
100029cc:	98e7883a 	add	r19,r19,r3
100029d0:	d8800015 	stw	r2,0(sp)
100029d4:	00000106 	br	100029dc <_fread_r+0x1bc>
100029d8:	90001e26 	beq	r18,zero,10002a54 <_fread_r+0x234>
100029dc:	84c00415 	stw	r19,16(r16)
100029e0:	84800515 	stw	r18,20(r16)
100029e4:	84c00015 	stw	r19,0(r16)
100029e8:	a009883a 	mov	r4,r20
100029ec:	800b883a 	mov	r5,r16
100029f0:	0004b080 	call	10004b08 <__srefill_r>
100029f4:	d9000017 	ldw	r4,0(sp)
100029f8:	80c00117 	ldw	r3,4(r16)
100029fc:	87000415 	stw	fp,16(r16)
10002a00:	81000515 	stw	r4,20(r16)
10002a04:	84400015 	stw	r17,0(r16)
10002a08:	80000115 	stw	zero,4(r16)
10002a0c:	90e5c83a 	sub	r18,r18,r3
10002a10:	98e7883a 	add	r19,r19,r3
10002a14:	103ff026 	beq	r2,zero,100029d8 <__alt_data_end+0xf80029d8>
10002a18:	b80b883a 	mov	r5,r23
10002a1c:	b489c83a 	sub	r4,r22,r18
10002a20:	0001c840 	call	10001c84 <__udivsi3>
10002a24:	003fbe06 	br	10002920 <__alt_data_end+0xf8002920>
10002a28:	80000115 	stw	zero,4(r16)
10002a2c:	0009883a 	mov	r4,zero
10002a30:	0023883a 	mov	r17,zero
10002a34:	003f9e06 	br	100028b0 <__alt_data_end+0xf80028b0>
10002a38:	a009883a 	mov	r4,r20
10002a3c:	000261c0 	call	1000261c <__sinit>
10002a40:	8080030b 	ldhu	r2,12(r16)
10002a44:	10c8000c 	andi	r3,r2,8192
10002a48:	183f961e 	bne	r3,zero,100028a4 <__alt_data_end+0xf80028a4>
10002a4c:	003f8f06 	br	1000288c <__alt_data_end+0xf800288c>
10002a50:	903fdc1e 	bne	r18,zero,100029c4 <__alt_data_end+0xf80029c4>
10002a54:	a805883a 	mov	r2,r21
10002a58:	003fb106 	br	10002920 <__alt_data_end+0xf8002920>

10002a5c <fread>:
10002a5c:	defffe04 	addi	sp,sp,-8
10002a60:	00840074 	movhi	r2,4097
10002a64:	d9c00015 	stw	r7,0(sp)
10002a68:	1092eb04 	addi	r2,r2,19372
10002a6c:	300f883a 	mov	r7,r6
10002a70:	280d883a 	mov	r6,r5
10002a74:	200b883a 	mov	r5,r4
10002a78:	11000017 	ldw	r4,0(r2)
10002a7c:	dfc00115 	stw	ra,4(sp)
10002a80:	00028200 	call	10002820 <_fread_r>
10002a84:	dfc00117 	ldw	ra,4(sp)
10002a88:	dec00204 	addi	sp,sp,8
10002a8c:	f800283a 	ret

10002a90 <_malloc_trim_r>:
10002a90:	defffb04 	addi	sp,sp,-20
10002a94:	dcc00315 	stw	r19,12(sp)
10002a98:	04c40074 	movhi	r19,4097
10002a9c:	dc800215 	stw	r18,8(sp)
10002aa0:	dc400115 	stw	r17,4(sp)
10002aa4:	dc000015 	stw	r16,0(sp)
10002aa8:	dfc00415 	stw	ra,16(sp)
10002aac:	2821883a 	mov	r16,r5
10002ab0:	9ccd3e04 	addi	r19,r19,13560
10002ab4:	2025883a 	mov	r18,r4
10002ab8:	00107380 	call	10010738 <__malloc_lock>
10002abc:	98800217 	ldw	r2,8(r19)
10002ac0:	14400117 	ldw	r17,4(r2)
10002ac4:	00bfff04 	movi	r2,-4
10002ac8:	88a2703a 	and	r17,r17,r2
10002acc:	8c21c83a 	sub	r16,r17,r16
10002ad0:	8403fbc4 	addi	r16,r16,4079
10002ad4:	8020d33a 	srli	r16,r16,12
10002ad8:	0083ffc4 	movi	r2,4095
10002adc:	843fffc4 	addi	r16,r16,-1
10002ae0:	8020933a 	slli	r16,r16,12
10002ae4:	1400060e 	bge	r2,r16,10002b00 <_malloc_trim_r+0x70>
10002ae8:	000b883a 	mov	r5,zero
10002aec:	9009883a 	mov	r4,r18
10002af0:	0004cdc0 	call	10004cdc <_sbrk_r>
10002af4:	98c00217 	ldw	r3,8(r19)
10002af8:	1c47883a 	add	r3,r3,r17
10002afc:	10c00a26 	beq	r2,r3,10002b28 <_malloc_trim_r+0x98>
10002b00:	9009883a 	mov	r4,r18
10002b04:	001075c0 	call	1001075c <__malloc_unlock>
10002b08:	0005883a 	mov	r2,zero
10002b0c:	dfc00417 	ldw	ra,16(sp)
10002b10:	dcc00317 	ldw	r19,12(sp)
10002b14:	dc800217 	ldw	r18,8(sp)
10002b18:	dc400117 	ldw	r17,4(sp)
10002b1c:	dc000017 	ldw	r16,0(sp)
10002b20:	dec00504 	addi	sp,sp,20
10002b24:	f800283a 	ret
10002b28:	040bc83a 	sub	r5,zero,r16
10002b2c:	9009883a 	mov	r4,r18
10002b30:	0004cdc0 	call	10004cdc <_sbrk_r>
10002b34:	00ffffc4 	movi	r3,-1
10002b38:	10c00d26 	beq	r2,r3,10002b70 <_malloc_trim_r+0xe0>
10002b3c:	00c40074 	movhi	r3,4097
10002b40:	18da2f04 	addi	r3,r3,26812
10002b44:	18800017 	ldw	r2,0(r3)
10002b48:	99000217 	ldw	r4,8(r19)
10002b4c:	8c23c83a 	sub	r17,r17,r16
10002b50:	8c400054 	ori	r17,r17,1
10002b54:	1421c83a 	sub	r16,r2,r16
10002b58:	24400115 	stw	r17,4(r4)
10002b5c:	9009883a 	mov	r4,r18
10002b60:	1c000015 	stw	r16,0(r3)
10002b64:	001075c0 	call	1001075c <__malloc_unlock>
10002b68:	00800044 	movi	r2,1
10002b6c:	003fe706 	br	10002b0c <__alt_data_end+0xf8002b0c>
10002b70:	000b883a 	mov	r5,zero
10002b74:	9009883a 	mov	r4,r18
10002b78:	0004cdc0 	call	10004cdc <_sbrk_r>
10002b7c:	99000217 	ldw	r4,8(r19)
10002b80:	014003c4 	movi	r5,15
10002b84:	1107c83a 	sub	r3,r2,r4
10002b88:	28ffdd0e 	bge	r5,r3,10002b00 <__alt_data_end+0xf8002b00>
10002b8c:	01440074 	movhi	r5,4097
10002b90:	2952ec04 	addi	r5,r5,19376
10002b94:	29400017 	ldw	r5,0(r5)
10002b98:	18c00054 	ori	r3,r3,1
10002b9c:	20c00115 	stw	r3,4(r4)
10002ba0:	00c40074 	movhi	r3,4097
10002ba4:	1145c83a 	sub	r2,r2,r5
10002ba8:	18da2f04 	addi	r3,r3,26812
10002bac:	18800015 	stw	r2,0(r3)
10002bb0:	003fd306 	br	10002b00 <__alt_data_end+0xf8002b00>

10002bb4 <_free_r>:
10002bb4:	28004126 	beq	r5,zero,10002cbc <_free_r+0x108>
10002bb8:	defffd04 	addi	sp,sp,-12
10002bbc:	dc400115 	stw	r17,4(sp)
10002bc0:	dc000015 	stw	r16,0(sp)
10002bc4:	2023883a 	mov	r17,r4
10002bc8:	2821883a 	mov	r16,r5
10002bcc:	dfc00215 	stw	ra,8(sp)
10002bd0:	00107380 	call	10010738 <__malloc_lock>
10002bd4:	81ffff17 	ldw	r7,-4(r16)
10002bd8:	00bfff84 	movi	r2,-2
10002bdc:	01040074 	movhi	r4,4097
10002be0:	81bffe04 	addi	r6,r16,-8
10002be4:	3884703a 	and	r2,r7,r2
10002be8:	210d3e04 	addi	r4,r4,13560
10002bec:	308b883a 	add	r5,r6,r2
10002bf0:	2a400117 	ldw	r9,4(r5)
10002bf4:	22000217 	ldw	r8,8(r4)
10002bf8:	00ffff04 	movi	r3,-4
10002bfc:	48c6703a 	and	r3,r9,r3
10002c00:	2a005726 	beq	r5,r8,10002d60 <_free_r+0x1ac>
10002c04:	28c00115 	stw	r3,4(r5)
10002c08:	39c0004c 	andi	r7,r7,1
10002c0c:	3800091e 	bne	r7,zero,10002c34 <_free_r+0x80>
10002c10:	823ffe17 	ldw	r8,-8(r16)
10002c14:	22400204 	addi	r9,r4,8
10002c18:	320dc83a 	sub	r6,r6,r8
10002c1c:	31c00217 	ldw	r7,8(r6)
10002c20:	1205883a 	add	r2,r2,r8
10002c24:	3a406526 	beq	r7,r9,10002dbc <_free_r+0x208>
10002c28:	32000317 	ldw	r8,12(r6)
10002c2c:	3a000315 	stw	r8,12(r7)
10002c30:	41c00215 	stw	r7,8(r8)
10002c34:	28cf883a 	add	r7,r5,r3
10002c38:	39c00117 	ldw	r7,4(r7)
10002c3c:	39c0004c 	andi	r7,r7,1
10002c40:	38003a26 	beq	r7,zero,10002d2c <_free_r+0x178>
10002c44:	10c00054 	ori	r3,r2,1
10002c48:	30c00115 	stw	r3,4(r6)
10002c4c:	3087883a 	add	r3,r6,r2
10002c50:	18800015 	stw	r2,0(r3)
10002c54:	00c07fc4 	movi	r3,511
10002c58:	18801936 	bltu	r3,r2,10002cc0 <_free_r+0x10c>
10002c5c:	1004d0fa 	srli	r2,r2,3
10002c60:	01c00044 	movi	r7,1
10002c64:	21400117 	ldw	r5,4(r4)
10002c68:	10c00044 	addi	r3,r2,1
10002c6c:	18c7883a 	add	r3,r3,r3
10002c70:	1005d0ba 	srai	r2,r2,2
10002c74:	18c7883a 	add	r3,r3,r3
10002c78:	18c7883a 	add	r3,r3,r3
10002c7c:	1907883a 	add	r3,r3,r4
10002c80:	3884983a 	sll	r2,r7,r2
10002c84:	19c00017 	ldw	r7,0(r3)
10002c88:	1a3ffe04 	addi	r8,r3,-8
10002c8c:	1144b03a 	or	r2,r2,r5
10002c90:	32000315 	stw	r8,12(r6)
10002c94:	31c00215 	stw	r7,8(r6)
10002c98:	20800115 	stw	r2,4(r4)
10002c9c:	19800015 	stw	r6,0(r3)
10002ca0:	39800315 	stw	r6,12(r7)
10002ca4:	8809883a 	mov	r4,r17
10002ca8:	dfc00217 	ldw	ra,8(sp)
10002cac:	dc400117 	ldw	r17,4(sp)
10002cb0:	dc000017 	ldw	r16,0(sp)
10002cb4:	dec00304 	addi	sp,sp,12
10002cb8:	001075c1 	jmpi	1001075c <__malloc_unlock>
10002cbc:	f800283a 	ret
10002cc0:	100ad27a 	srli	r5,r2,9
10002cc4:	00c00104 	movi	r3,4
10002cc8:	19404a36 	bltu	r3,r5,10002df4 <_free_r+0x240>
10002ccc:	100ad1ba 	srli	r5,r2,6
10002cd0:	28c00e44 	addi	r3,r5,57
10002cd4:	18c7883a 	add	r3,r3,r3
10002cd8:	29400e04 	addi	r5,r5,56
10002cdc:	18c7883a 	add	r3,r3,r3
10002ce0:	18c7883a 	add	r3,r3,r3
10002ce4:	1909883a 	add	r4,r3,r4
10002ce8:	20c00017 	ldw	r3,0(r4)
10002cec:	01c40074 	movhi	r7,4097
10002cf0:	213ffe04 	addi	r4,r4,-8
10002cf4:	39cd3e04 	addi	r7,r7,13560
10002cf8:	20c04426 	beq	r4,r3,10002e0c <_free_r+0x258>
10002cfc:	01ffff04 	movi	r7,-4
10002d00:	19400117 	ldw	r5,4(r3)
10002d04:	29ca703a 	and	r5,r5,r7
10002d08:	1140022e 	bgeu	r2,r5,10002d14 <_free_r+0x160>
10002d0c:	18c00217 	ldw	r3,8(r3)
10002d10:	20fffb1e 	bne	r4,r3,10002d00 <__alt_data_end+0xf8002d00>
10002d14:	19000317 	ldw	r4,12(r3)
10002d18:	31000315 	stw	r4,12(r6)
10002d1c:	30c00215 	stw	r3,8(r6)
10002d20:	21800215 	stw	r6,8(r4)
10002d24:	19800315 	stw	r6,12(r3)
10002d28:	003fde06 	br	10002ca4 <__alt_data_end+0xf8002ca4>
10002d2c:	29c00217 	ldw	r7,8(r5)
10002d30:	10c5883a 	add	r2,r2,r3
10002d34:	00c40074 	movhi	r3,4097
10002d38:	18cd4004 	addi	r3,r3,13568
10002d3c:	38c03b26 	beq	r7,r3,10002e2c <_free_r+0x278>
10002d40:	2a000317 	ldw	r8,12(r5)
10002d44:	11400054 	ori	r5,r2,1
10002d48:	3087883a 	add	r3,r6,r2
10002d4c:	3a000315 	stw	r8,12(r7)
10002d50:	41c00215 	stw	r7,8(r8)
10002d54:	31400115 	stw	r5,4(r6)
10002d58:	18800015 	stw	r2,0(r3)
10002d5c:	003fbd06 	br	10002c54 <__alt_data_end+0xf8002c54>
10002d60:	39c0004c 	andi	r7,r7,1
10002d64:	10c5883a 	add	r2,r2,r3
10002d68:	3800071e 	bne	r7,zero,10002d88 <_free_r+0x1d4>
10002d6c:	81fffe17 	ldw	r7,-8(r16)
10002d70:	31cdc83a 	sub	r6,r6,r7
10002d74:	30c00317 	ldw	r3,12(r6)
10002d78:	31400217 	ldw	r5,8(r6)
10002d7c:	11c5883a 	add	r2,r2,r7
10002d80:	28c00315 	stw	r3,12(r5)
10002d84:	19400215 	stw	r5,8(r3)
10002d88:	10c00054 	ori	r3,r2,1
10002d8c:	30c00115 	stw	r3,4(r6)
10002d90:	00c40074 	movhi	r3,4097
10002d94:	18d2ed04 	addi	r3,r3,19380
10002d98:	18c00017 	ldw	r3,0(r3)
10002d9c:	21800215 	stw	r6,8(r4)
10002da0:	10ffc036 	bltu	r2,r3,10002ca4 <__alt_data_end+0xf8002ca4>
10002da4:	00840074 	movhi	r2,4097
10002da8:	109a2404 	addi	r2,r2,26768
10002dac:	11400017 	ldw	r5,0(r2)
10002db0:	8809883a 	mov	r4,r17
10002db4:	0002a900 	call	10002a90 <_malloc_trim_r>
10002db8:	003fba06 	br	10002ca4 <__alt_data_end+0xf8002ca4>
10002dbc:	28c9883a 	add	r4,r5,r3
10002dc0:	21000117 	ldw	r4,4(r4)
10002dc4:	2100004c 	andi	r4,r4,1
10002dc8:	2000391e 	bne	r4,zero,10002eb0 <_free_r+0x2fc>
10002dcc:	29c00217 	ldw	r7,8(r5)
10002dd0:	29000317 	ldw	r4,12(r5)
10002dd4:	1885883a 	add	r2,r3,r2
10002dd8:	10c00054 	ori	r3,r2,1
10002ddc:	39000315 	stw	r4,12(r7)
10002de0:	21c00215 	stw	r7,8(r4)
10002de4:	30c00115 	stw	r3,4(r6)
10002de8:	308d883a 	add	r6,r6,r2
10002dec:	30800015 	stw	r2,0(r6)
10002df0:	003fac06 	br	10002ca4 <__alt_data_end+0xf8002ca4>
10002df4:	00c00504 	movi	r3,20
10002df8:	19401536 	bltu	r3,r5,10002e50 <_free_r+0x29c>
10002dfc:	28c01704 	addi	r3,r5,92
10002e00:	18c7883a 	add	r3,r3,r3
10002e04:	294016c4 	addi	r5,r5,91
10002e08:	003fb406 	br	10002cdc <__alt_data_end+0xf8002cdc>
10002e0c:	280bd0ba 	srai	r5,r5,2
10002e10:	00c00044 	movi	r3,1
10002e14:	38800117 	ldw	r2,4(r7)
10002e18:	194a983a 	sll	r5,r3,r5
10002e1c:	2007883a 	mov	r3,r4
10002e20:	2884b03a 	or	r2,r5,r2
10002e24:	38800115 	stw	r2,4(r7)
10002e28:	003fbb06 	br	10002d18 <__alt_data_end+0xf8002d18>
10002e2c:	21800515 	stw	r6,20(r4)
10002e30:	21800415 	stw	r6,16(r4)
10002e34:	10c00054 	ori	r3,r2,1
10002e38:	31c00315 	stw	r7,12(r6)
10002e3c:	31c00215 	stw	r7,8(r6)
10002e40:	30c00115 	stw	r3,4(r6)
10002e44:	308d883a 	add	r6,r6,r2
10002e48:	30800015 	stw	r2,0(r6)
10002e4c:	003f9506 	br	10002ca4 <__alt_data_end+0xf8002ca4>
10002e50:	00c01504 	movi	r3,84
10002e54:	19400536 	bltu	r3,r5,10002e6c <_free_r+0x2b8>
10002e58:	100ad33a 	srli	r5,r2,12
10002e5c:	28c01bc4 	addi	r3,r5,111
10002e60:	18c7883a 	add	r3,r3,r3
10002e64:	29401b84 	addi	r5,r5,110
10002e68:	003f9c06 	br	10002cdc <__alt_data_end+0xf8002cdc>
10002e6c:	00c05504 	movi	r3,340
10002e70:	19400536 	bltu	r3,r5,10002e88 <_free_r+0x2d4>
10002e74:	100ad3fa 	srli	r5,r2,15
10002e78:	28c01e04 	addi	r3,r5,120
10002e7c:	18c7883a 	add	r3,r3,r3
10002e80:	29401dc4 	addi	r5,r5,119
10002e84:	003f9506 	br	10002cdc <__alt_data_end+0xf8002cdc>
10002e88:	00c15504 	movi	r3,1364
10002e8c:	19400536 	bltu	r3,r5,10002ea4 <_free_r+0x2f0>
10002e90:	100ad4ba 	srli	r5,r2,18
10002e94:	28c01f44 	addi	r3,r5,125
10002e98:	18c7883a 	add	r3,r3,r3
10002e9c:	29401f04 	addi	r5,r5,124
10002ea0:	003f8e06 	br	10002cdc <__alt_data_end+0xf8002cdc>
10002ea4:	00c03f84 	movi	r3,254
10002ea8:	01401f84 	movi	r5,126
10002eac:	003f8b06 	br	10002cdc <__alt_data_end+0xf8002cdc>
10002eb0:	10c00054 	ori	r3,r2,1
10002eb4:	30c00115 	stw	r3,4(r6)
10002eb8:	308d883a 	add	r6,r6,r2
10002ebc:	30800015 	stw	r2,0(r6)
10002ec0:	003f7806 	br	10002ca4 <__alt_data_end+0xf8002ca4>

10002ec4 <_fseek_r>:
10002ec4:	0002ee41 	jmpi	10002ee4 <_fseeko_r>

10002ec8 <fseek>:
10002ec8:	00840074 	movhi	r2,4097
10002ecc:	1092eb04 	addi	r2,r2,19372
10002ed0:	300f883a 	mov	r7,r6
10002ed4:	280d883a 	mov	r6,r5
10002ed8:	200b883a 	mov	r5,r4
10002edc:	11000017 	ldw	r4,0(r2)
10002ee0:	0002ee41 	jmpi	10002ee4 <_fseeko_r>

10002ee4 <_fseeko_r>:
10002ee4:	deffe804 	addi	sp,sp,-96
10002ee8:	dd401415 	stw	r21,80(sp)
10002eec:	dc801115 	stw	r18,68(sp)
10002ef0:	dc401015 	stw	r17,64(sp)
10002ef4:	dc000f15 	stw	r16,60(sp)
10002ef8:	dfc01715 	stw	ra,92(sp)
10002efc:	ddc01615 	stw	r23,88(sp)
10002f00:	dd801515 	stw	r22,84(sp)
10002f04:	dd001315 	stw	r20,76(sp)
10002f08:	dcc01215 	stw	r19,72(sp)
10002f0c:	2023883a 	mov	r17,r4
10002f10:	2821883a 	mov	r16,r5
10002f14:	302b883a 	mov	r21,r6
10002f18:	3825883a 	mov	r18,r7
10002f1c:	20000226 	beq	r4,zero,10002f28 <_fseeko_r+0x44>
10002f20:	20800e17 	ldw	r2,56(r4)
10002f24:	10005a26 	beq	r2,zero,10003090 <_fseeko_r+0x1ac>
10002f28:	8080030b 	ldhu	r2,12(r16)
10002f2c:	00c04204 	movi	r3,264
10002f30:	1080420c 	andi	r2,r2,264
10002f34:	10c05b26 	beq	r2,r3,100030a4 <_fseeko_r+0x1c0>
10002f38:	85000a17 	ldw	r20,40(r16)
10002f3c:	a000f626 	beq	r20,zero,10003318 <_fseeko_r+0x434>
10002f40:	00800044 	movi	r2,1
10002f44:	90803e26 	beq	r18,r2,10003040 <_fseeko_r+0x15c>
10002f48:	00800084 	movi	r2,2
10002f4c:	90801026 	beq	r18,r2,10002f90 <_fseeko_r+0xac>
10002f50:	90000f26 	beq	r18,zero,10002f90 <_fseeko_r+0xac>
10002f54:	00800584 	movi	r2,22
10002f58:	88800015 	stw	r2,0(r17)
10002f5c:	04ffffc4 	movi	r19,-1
10002f60:	9805883a 	mov	r2,r19
10002f64:	dfc01717 	ldw	ra,92(sp)
10002f68:	ddc01617 	ldw	r23,88(sp)
10002f6c:	dd801517 	ldw	r22,84(sp)
10002f70:	dd401417 	ldw	r21,80(sp)
10002f74:	dd001317 	ldw	r20,76(sp)
10002f78:	dcc01217 	ldw	r19,72(sp)
10002f7c:	dc801117 	ldw	r18,68(sp)
10002f80:	dc401017 	ldw	r17,64(sp)
10002f84:	dc000f17 	ldw	r16,60(sp)
10002f88:	dec01804 	addi	sp,sp,96
10002f8c:	f800283a 	ret
10002f90:	80800417 	ldw	r2,16(r16)
10002f94:	002f883a 	mov	r23,zero
10002f98:	0027883a 	mov	r19,zero
10002f9c:	1000cb26 	beq	r2,zero,100032cc <_fseeko_r+0x3e8>
10002fa0:	8080030b 	ldhu	r2,12(r16)
10002fa4:	10c2068c 	andi	r3,r2,2074
10002fa8:	1800071e 	bne	r3,zero,10002fc8 <_fseeko_r+0xe4>
10002fac:	10c1000c 	andi	r3,r2,1024
10002fb0:	1800451e 	bne	r3,zero,100030c8 <_fseeko_r+0x1e4>
10002fb4:	00c40034 	movhi	r3,4096
10002fb8:	18d38204 	addi	r3,r3,19976
10002fbc:	a0c0b726 	beq	r20,r3,1000329c <_fseeko_r+0x3b8>
10002fc0:	10820014 	ori	r2,r2,2048
10002fc4:	8080030d 	sth	r2,12(r16)
10002fc8:	800b883a 	mov	r5,r16
10002fcc:	8809883a 	mov	r4,r17
10002fd0:	00022300 	call	10002230 <_fflush_r>
10002fd4:	1027883a 	mov	r19,r2
10002fd8:	103fe01e 	bne	r2,zero,10002f5c <__alt_data_end+0xf8002f5c>
10002fdc:	81400717 	ldw	r5,28(r16)
10002fe0:	900f883a 	mov	r7,r18
10002fe4:	a80d883a 	mov	r6,r21
10002fe8:	8809883a 	mov	r4,r17
10002fec:	a03ee83a 	callr	r20
10002ff0:	00ffffc4 	movi	r3,-1
10002ff4:	10ffd926 	beq	r2,r3,10002f5c <__alt_data_end+0xf8002f5c>
10002ff8:	81400c17 	ldw	r5,48(r16)
10002ffc:	28000526 	beq	r5,zero,10003014 <_fseeko_r+0x130>
10003000:	80801004 	addi	r2,r16,64
10003004:	28800226 	beq	r5,r2,10003010 <_fseeko_r+0x12c>
10003008:	8809883a 	mov	r4,r17
1000300c:	0002bb40 	call	10002bb4 <_free_r>
10003010:	80000c15 	stw	zero,48(r16)
10003014:	8080030b 	ldhu	r2,12(r16)
10003018:	80c00417 	ldw	r3,16(r16)
1000301c:	80000115 	stw	zero,4(r16)
10003020:	10bdf7cc 	andi	r2,r2,63455
10003024:	80c00015 	stw	r3,0(r16)
10003028:	8080030d 	sth	r2,12(r16)
1000302c:	01800204 	movi	r6,8
10003030:	000b883a 	mov	r5,zero
10003034:	81001704 	addi	r4,r16,92
10003038:	00042880 	call	10004288 <memset>
1000303c:	003fc806 	br	10002f60 <__alt_data_end+0xf8002f60>
10003040:	800b883a 	mov	r5,r16
10003044:	8809883a 	mov	r4,r17
10003048:	00022300 	call	10002230 <_fflush_r>
1000304c:	8080030b 	ldhu	r2,12(r16)
10003050:	10c4000c 	andi	r3,r2,4096
10003054:	18008726 	beq	r3,zero,10003274 <_fseeko_r+0x390>
10003058:	84c01417 	ldw	r19,80(r16)
1000305c:	10c0010c 	andi	r3,r2,4
10003060:	1800431e 	bne	r3,zero,10003170 <_fseeko_r+0x28c>
10003064:	1080020c 	andi	r2,r2,8
10003068:	10008026 	beq	r2,zero,1000326c <_fseeko_r+0x388>
1000306c:	80c00017 	ldw	r3,0(r16)
10003070:	80800417 	ldw	r2,16(r16)
10003074:	18000226 	beq	r3,zero,10003080 <_fseeko_r+0x19c>
10003078:	1887c83a 	sub	r3,r3,r2
1000307c:	98e7883a 	add	r19,r19,r3
10003080:	aceb883a 	add	r21,r21,r19
10003084:	05c00044 	movi	r23,1
10003088:	0025883a 	mov	r18,zero
1000308c:	003fc306 	br	10002f9c <__alt_data_end+0xf8002f9c>
10003090:	000261c0 	call	1000261c <__sinit>
10003094:	8080030b 	ldhu	r2,12(r16)
10003098:	00c04204 	movi	r3,264
1000309c:	1080420c 	andi	r2,r2,264
100030a0:	10ffa51e 	bne	r2,r3,10002f38 <__alt_data_end+0xf8002f38>
100030a4:	800b883a 	mov	r5,r16
100030a8:	8809883a 	mov	r4,r17
100030ac:	00022300 	call	10002230 <_fflush_r>
100030b0:	003fa106 	br	10002f38 <__alt_data_end+0xf8002f38>
100030b4:	8080030b 	ldhu	r2,12(r16)
100030b8:	00c10004 	movi	r3,1024
100030bc:	80c01315 	stw	r3,76(r16)
100030c0:	10c4b03a 	or	r2,r2,r3
100030c4:	8080030d 	sth	r2,12(r16)
100030c8:	9000311e 	bne	r18,zero,10003190 <_fseeko_r+0x2ac>
100030cc:	a82d883a 	mov	r22,r21
100030d0:	b800371e 	bne	r23,zero,100031b0 <_fseeko_r+0x2cc>
100030d4:	8080030b 	ldhu	r2,12(r16)
100030d8:	1084000c 	andi	r2,r2,4096
100030dc:	10007f26 	beq	r2,zero,100032dc <_fseeko_r+0x3f8>
100030e0:	80801417 	ldw	r2,80(r16)
100030e4:	81800117 	ldw	r6,4(r16)
100030e8:	81400c17 	ldw	r5,48(r16)
100030ec:	11a7c83a 	sub	r19,r2,r6
100030f0:	28008226 	beq	r5,zero,100032fc <_fseeko_r+0x418>
100030f4:	81c00f17 	ldw	r7,60(r16)
100030f8:	99e7c83a 	sub	r19,r19,r7
100030fc:	81000e17 	ldw	r4,56(r16)
10003100:	80800417 	ldw	r2,16(r16)
10003104:	99a7883a 	add	r19,r19,r6
10003108:	2087c83a 	sub	r3,r4,r2
1000310c:	98e7c83a 	sub	r19,r19,r3
10003110:	38c7883a 	add	r3,r7,r3
10003114:	b4c02b16 	blt	r22,r19,100031c4 <_fseeko_r+0x2e0>
10003118:	98c9883a 	add	r4,r19,r3
1000311c:	b100292e 	bgeu	r22,r4,100031c4 <_fseeko_r+0x2e0>
10003120:	b4e7c83a 	sub	r19,r22,r19
10003124:	14c5883a 	add	r2,r2,r19
10003128:	1ce7c83a 	sub	r19,r3,r19
1000312c:	80800015 	stw	r2,0(r16)
10003130:	84c00115 	stw	r19,4(r16)
10003134:	28000526 	beq	r5,zero,1000314c <_fseeko_r+0x268>
10003138:	80801004 	addi	r2,r16,64
1000313c:	28800226 	beq	r5,r2,10003148 <_fseeko_r+0x264>
10003140:	8809883a 	mov	r4,r17
10003144:	0002bb40 	call	10002bb4 <_free_r>
10003148:	80000c15 	stw	zero,48(r16)
1000314c:	8080030b 	ldhu	r2,12(r16)
10003150:	01800204 	movi	r6,8
10003154:	000b883a 	mov	r5,zero
10003158:	10bff7cc 	andi	r2,r2,65503
1000315c:	8080030d 	sth	r2,12(r16)
10003160:	81001704 	addi	r4,r16,92
10003164:	00042880 	call	10004288 <memset>
10003168:	0027883a 	mov	r19,zero
1000316c:	003f7c06 	br	10002f60 <__alt_data_end+0xf8002f60>
10003170:	80c00117 	ldw	r3,4(r16)
10003174:	80800c17 	ldw	r2,48(r16)
10003178:	98e7c83a 	sub	r19,r19,r3
1000317c:	10003b26 	beq	r2,zero,1000326c <_fseeko_r+0x388>
10003180:	80c00f17 	ldw	r3,60(r16)
10003184:	80800417 	ldw	r2,16(r16)
10003188:	98e7c83a 	sub	r19,r19,r3
1000318c:	003fbc06 	br	10003080 <__alt_data_end+0xf8003080>
10003190:	8140038f 	ldh	r5,14(r16)
10003194:	d80d883a 	mov	r6,sp
10003198:	8809883a 	mov	r4,r17
1000319c:	00033440 	call	10003344 <_fstat_r>
100031a0:	103f891e 	bne	r2,zero,10002fc8 <__alt_data_end+0xf8002fc8>
100031a4:	dd800417 	ldw	r22,16(sp)
100031a8:	adad883a 	add	r22,r21,r22
100031ac:	b83fc926 	beq	r23,zero,100030d4 <__alt_data_end+0xf80030d4>
100031b0:	81400c17 	ldw	r5,48(r16)
100031b4:	81800117 	ldw	r6,4(r16)
100031b8:	28005026 	beq	r5,zero,100032fc <_fseeko_r+0x418>
100031bc:	81c00f17 	ldw	r7,60(r16)
100031c0:	003fce06 	br	100030fc <__alt_data_end+0xf80030fc>
100031c4:	84c01317 	ldw	r19,76(r16)
100031c8:	81400717 	ldw	r5,28(r16)
100031cc:	000f883a 	mov	r7,zero
100031d0:	04e7c83a 	sub	r19,zero,r19
100031d4:	9da6703a 	and	r19,r19,r22
100031d8:	980d883a 	mov	r6,r19
100031dc:	8809883a 	mov	r4,r17
100031e0:	a03ee83a 	callr	r20
100031e4:	00ffffc4 	movi	r3,-1
100031e8:	10ff7726 	beq	r2,r3,10002fc8 <__alt_data_end+0xf8002fc8>
100031ec:	80800417 	ldw	r2,16(r16)
100031f0:	81400c17 	ldw	r5,48(r16)
100031f4:	80000115 	stw	zero,4(r16)
100031f8:	80800015 	stw	r2,0(r16)
100031fc:	28000526 	beq	r5,zero,10003214 <_fseeko_r+0x330>
10003200:	80801004 	addi	r2,r16,64
10003204:	28800226 	beq	r5,r2,10003210 <_fseeko_r+0x32c>
10003208:	8809883a 	mov	r4,r17
1000320c:	0002bb40 	call	10002bb4 <_free_r>
10003210:	80000c15 	stw	zero,48(r16)
10003214:	8080030b 	ldhu	r2,12(r16)
10003218:	b4e7c83a 	sub	r19,r22,r19
1000321c:	10bff7cc 	andi	r2,r2,65503
10003220:	8080030d 	sth	r2,12(r16)
10003224:	98000b26 	beq	r19,zero,10003254 <_fseeko_r+0x370>
10003228:	800b883a 	mov	r5,r16
1000322c:	8809883a 	mov	r4,r17
10003230:	0004b080 	call	10004b08 <__srefill_r>
10003234:	103f641e 	bne	r2,zero,10002fc8 <__alt_data_end+0xf8002fc8>
10003238:	80800117 	ldw	r2,4(r16)
1000323c:	14ff6236 	bltu	r2,r19,10002fc8 <__alt_data_end+0xf8002fc8>
10003240:	80c00017 	ldw	r3,0(r16)
10003244:	14c5c83a 	sub	r2,r2,r19
10003248:	80800115 	stw	r2,4(r16)
1000324c:	1ce7883a 	add	r19,r3,r19
10003250:	84c00015 	stw	r19,0(r16)
10003254:	01800204 	movi	r6,8
10003258:	000b883a 	mov	r5,zero
1000325c:	81001704 	addi	r4,r16,92
10003260:	00042880 	call	10004288 <memset>
10003264:	0027883a 	mov	r19,zero
10003268:	003f3d06 	br	10002f60 <__alt_data_end+0xf8002f60>
1000326c:	80800417 	ldw	r2,16(r16)
10003270:	003f8306 	br	10003080 <__alt_data_end+0xf8003080>
10003274:	81400717 	ldw	r5,28(r16)
10003278:	900f883a 	mov	r7,r18
1000327c:	000d883a 	mov	r6,zero
10003280:	8809883a 	mov	r4,r17
10003284:	a03ee83a 	callr	r20
10003288:	1027883a 	mov	r19,r2
1000328c:	00bfffc4 	movi	r2,-1
10003290:	98bf3226 	beq	r19,r2,10002f5c <__alt_data_end+0xf8002f5c>
10003294:	8080030b 	ldhu	r2,12(r16)
10003298:	003f7006 	br	1000305c <__alt_data_end+0xf800305c>
1000329c:	8140038f 	ldh	r5,14(r16)
100032a0:	283f4716 	blt	r5,zero,10002fc0 <__alt_data_end+0xf8002fc0>
100032a4:	d80d883a 	mov	r6,sp
100032a8:	8809883a 	mov	r4,r17
100032ac:	00033440 	call	10003344 <_fstat_r>
100032b0:	1000041e 	bne	r2,zero,100032c4 <_fseeko_r+0x3e0>
100032b4:	d8800117 	ldw	r2,4(sp)
100032b8:	00e00014 	movui	r3,32768
100032bc:	10bc000c 	andi	r2,r2,61440
100032c0:	10ff7c26 	beq	r2,r3,100030b4 <__alt_data_end+0xf80030b4>
100032c4:	8080030b 	ldhu	r2,12(r16)
100032c8:	003f3d06 	br	10002fc0 <__alt_data_end+0xf8002fc0>
100032cc:	800b883a 	mov	r5,r16
100032d0:	8809883a 	mov	r4,r17
100032d4:	00037500 	call	10003750 <__smakebuf_r>
100032d8:	003f3106 	br	10002fa0 <__alt_data_end+0xf8002fa0>
100032dc:	81400717 	ldw	r5,28(r16)
100032e0:	01c00044 	movi	r7,1
100032e4:	000d883a 	mov	r6,zero
100032e8:	8809883a 	mov	r4,r17
100032ec:	a03ee83a 	callr	r20
100032f0:	00ffffc4 	movi	r3,-1
100032f4:	10ff7b1e 	bne	r2,r3,100030e4 <__alt_data_end+0xf80030e4>
100032f8:	003f3306 	br	10002fc8 <__alt_data_end+0xf8002fc8>
100032fc:	80c00017 	ldw	r3,0(r16)
10003300:	80800417 	ldw	r2,16(r16)
10003304:	000b883a 	mov	r5,zero
10003308:	1887c83a 	sub	r3,r3,r2
1000330c:	98e7c83a 	sub	r19,r19,r3
10003310:	30c7883a 	add	r3,r6,r3
10003314:	003f7f06 	br	10003114 <__alt_data_end+0xf8003114>
10003318:	00800744 	movi	r2,29
1000331c:	88800015 	stw	r2,0(r17)
10003320:	04ffffc4 	movi	r19,-1
10003324:	003f0e06 	br	10002f60 <__alt_data_end+0xf8002f60>

10003328 <fseeko>:
10003328:	00840074 	movhi	r2,4097
1000332c:	1092eb04 	addi	r2,r2,19372
10003330:	300f883a 	mov	r7,r6
10003334:	280d883a 	mov	r6,r5
10003338:	200b883a 	mov	r5,r4
1000333c:	11000017 	ldw	r4,0(r2)
10003340:	0002ee41 	jmpi	10002ee4 <_fseeko_r>

10003344 <_fstat_r>:
10003344:	defffd04 	addi	sp,sp,-12
10003348:	2805883a 	mov	r2,r5
1000334c:	dc000015 	stw	r16,0(sp)
10003350:	04040074 	movhi	r16,4097
10003354:	dc400115 	stw	r17,4(sp)
10003358:	841a2104 	addi	r16,r16,26756
1000335c:	2023883a 	mov	r17,r4
10003360:	300b883a 	mov	r5,r6
10003364:	1009883a 	mov	r4,r2
10003368:	dfc00215 	stw	ra,8(sp)
1000336c:	80000015 	stw	zero,0(r16)
10003370:	001018c0 	call	1001018c <fstat>
10003374:	00ffffc4 	movi	r3,-1
10003378:	10c00526 	beq	r2,r3,10003390 <_fstat_r+0x4c>
1000337c:	dfc00217 	ldw	ra,8(sp)
10003380:	dc400117 	ldw	r17,4(sp)
10003384:	dc000017 	ldw	r16,0(sp)
10003388:	dec00304 	addi	sp,sp,12
1000338c:	f800283a 	ret
10003390:	80c00017 	ldw	r3,0(r16)
10003394:	183ff926 	beq	r3,zero,1000337c <__alt_data_end+0xf800337c>
10003398:	88c00015 	stw	r3,0(r17)
1000339c:	003ff706 	br	1000337c <__alt_data_end+0xf800337c>

100033a0 <_ftell_r>:
100033a0:	00033b81 	jmpi	100033b8 <_ftello_r>

100033a4 <ftell>:
100033a4:	00840074 	movhi	r2,4097
100033a8:	1092eb04 	addi	r2,r2,19372
100033ac:	200b883a 	mov	r5,r4
100033b0:	11000017 	ldw	r4,0(r2)
100033b4:	00033b81 	jmpi	100033b8 <_ftello_r>

100033b8 <_ftello_r>:
100033b8:	defffd04 	addi	sp,sp,-12
100033bc:	dc400115 	stw	r17,4(sp)
100033c0:	dc000015 	stw	r16,0(sp)
100033c4:	dfc00215 	stw	ra,8(sp)
100033c8:	2023883a 	mov	r17,r4
100033cc:	2821883a 	mov	r16,r5
100033d0:	20000226 	beq	r4,zero,100033dc <_ftello_r+0x24>
100033d4:	20800e17 	ldw	r2,56(r4)
100033d8:	10002c26 	beq	r2,zero,1000348c <_ftello_r+0xd4>
100033dc:	80800a17 	ldw	r2,40(r16)
100033e0:	10002c26 	beq	r2,zero,10003494 <_ftello_r+0xdc>
100033e4:	80c0030b 	ldhu	r3,12(r16)
100033e8:	1880020c 	andi	r2,r3,8
100033ec:	1000221e 	bne	r2,zero,10003478 <_ftello_r+0xc0>
100033f0:	1884000c 	andi	r2,r3,4096
100033f4:	10001626 	beq	r2,zero,10003450 <_ftello_r+0x98>
100033f8:	80801417 	ldw	r2,80(r16)
100033fc:	1900010c 	andi	r4,r3,4
10003400:	20000b26 	beq	r4,zero,10003430 <_ftello_r+0x78>
10003404:	81000117 	ldw	r4,4(r16)
10003408:	80c00c17 	ldw	r3,48(r16)
1000340c:	1105c83a 	sub	r2,r2,r4
10003410:	18000226 	beq	r3,zero,1000341c <_ftello_r+0x64>
10003414:	80c00f17 	ldw	r3,60(r16)
10003418:	10c5c83a 	sub	r2,r2,r3
1000341c:	dfc00217 	ldw	ra,8(sp)
10003420:	dc400117 	ldw	r17,4(sp)
10003424:	dc000017 	ldw	r16,0(sp)
10003428:	dec00304 	addi	sp,sp,12
1000342c:	f800283a 	ret
10003430:	18c0020c 	andi	r3,r3,8
10003434:	183ff926 	beq	r3,zero,1000341c <__alt_data_end+0xf800341c>
10003438:	80c00017 	ldw	r3,0(r16)
1000343c:	183ff726 	beq	r3,zero,1000341c <__alt_data_end+0xf800341c>
10003440:	81000417 	ldw	r4,16(r16)
10003444:	1907c83a 	sub	r3,r3,r4
10003448:	1885883a 	add	r2,r3,r2
1000344c:	003ff306 	br	1000341c <__alt_data_end+0xf800341c>
10003450:	80800a17 	ldw	r2,40(r16)
10003454:	81400717 	ldw	r5,28(r16)
10003458:	01c00044 	movi	r7,1
1000345c:	000d883a 	mov	r6,zero
10003460:	8809883a 	mov	r4,r17
10003464:	103ee83a 	callr	r2
10003468:	00ffffc4 	movi	r3,-1
1000346c:	10ffeb26 	beq	r2,r3,1000341c <__alt_data_end+0xf800341c>
10003470:	80c0030b 	ldhu	r3,12(r16)
10003474:	003fe106 	br	100033fc <__alt_data_end+0xf80033fc>
10003478:	800b883a 	mov	r5,r16
1000347c:	8809883a 	mov	r4,r17
10003480:	00022300 	call	10002230 <_fflush_r>
10003484:	80c0030b 	ldhu	r3,12(r16)
10003488:	003fd906 	br	100033f0 <__alt_data_end+0xf80033f0>
1000348c:	000261c0 	call	1000261c <__sinit>
10003490:	003fd206 	br	100033dc <__alt_data_end+0xf80033dc>
10003494:	00800744 	movi	r2,29
10003498:	88800015 	stw	r2,0(r17)
1000349c:	00bfffc4 	movi	r2,-1
100034a0:	003fde06 	br	1000341c <__alt_data_end+0xf800341c>

100034a4 <ftello>:
100034a4:	00840074 	movhi	r2,4097
100034a8:	1092eb04 	addi	r2,r2,19372
100034ac:	200b883a 	mov	r5,r4
100034b0:	11000017 	ldw	r4,0(r2)
100034b4:	00033b81 	jmpi	100033b8 <_ftello_r>

100034b8 <_fwalk>:
100034b8:	defff704 	addi	sp,sp,-36
100034bc:	dd000415 	stw	r20,16(sp)
100034c0:	dfc00815 	stw	ra,32(sp)
100034c4:	ddc00715 	stw	r23,28(sp)
100034c8:	dd800615 	stw	r22,24(sp)
100034cc:	dd400515 	stw	r21,20(sp)
100034d0:	dcc00315 	stw	r19,12(sp)
100034d4:	dc800215 	stw	r18,8(sp)
100034d8:	dc400115 	stw	r17,4(sp)
100034dc:	dc000015 	stw	r16,0(sp)
100034e0:	2500b804 	addi	r20,r4,736
100034e4:	a0002326 	beq	r20,zero,10003574 <_fwalk+0xbc>
100034e8:	282b883a 	mov	r21,r5
100034ec:	002f883a 	mov	r23,zero
100034f0:	05800044 	movi	r22,1
100034f4:	04ffffc4 	movi	r19,-1
100034f8:	a4400117 	ldw	r17,4(r20)
100034fc:	a4800217 	ldw	r18,8(r20)
10003500:	8c7fffc4 	addi	r17,r17,-1
10003504:	88000d16 	blt	r17,zero,1000353c <_fwalk+0x84>
10003508:	94000304 	addi	r16,r18,12
1000350c:	94800384 	addi	r18,r18,14
10003510:	8080000b 	ldhu	r2,0(r16)
10003514:	8c7fffc4 	addi	r17,r17,-1
10003518:	813ffd04 	addi	r4,r16,-12
1000351c:	b080042e 	bgeu	r22,r2,10003530 <_fwalk+0x78>
10003520:	9080000f 	ldh	r2,0(r18)
10003524:	14c00226 	beq	r2,r19,10003530 <_fwalk+0x78>
10003528:	a83ee83a 	callr	r21
1000352c:	b8aeb03a 	or	r23,r23,r2
10003530:	84001a04 	addi	r16,r16,104
10003534:	94801a04 	addi	r18,r18,104
10003538:	8cfff51e 	bne	r17,r19,10003510 <__alt_data_end+0xf8003510>
1000353c:	a5000017 	ldw	r20,0(r20)
10003540:	a03fed1e 	bne	r20,zero,100034f8 <__alt_data_end+0xf80034f8>
10003544:	b805883a 	mov	r2,r23
10003548:	dfc00817 	ldw	ra,32(sp)
1000354c:	ddc00717 	ldw	r23,28(sp)
10003550:	dd800617 	ldw	r22,24(sp)
10003554:	dd400517 	ldw	r21,20(sp)
10003558:	dd000417 	ldw	r20,16(sp)
1000355c:	dcc00317 	ldw	r19,12(sp)
10003560:	dc800217 	ldw	r18,8(sp)
10003564:	dc400117 	ldw	r17,4(sp)
10003568:	dc000017 	ldw	r16,0(sp)
1000356c:	dec00904 	addi	sp,sp,36
10003570:	f800283a 	ret
10003574:	002f883a 	mov	r23,zero
10003578:	003ff206 	br	10003544 <__alt_data_end+0xf8003544>

1000357c <_fwalk_reent>:
1000357c:	defff704 	addi	sp,sp,-36
10003580:	dd000415 	stw	r20,16(sp)
10003584:	dfc00815 	stw	ra,32(sp)
10003588:	ddc00715 	stw	r23,28(sp)
1000358c:	dd800615 	stw	r22,24(sp)
10003590:	dd400515 	stw	r21,20(sp)
10003594:	dcc00315 	stw	r19,12(sp)
10003598:	dc800215 	stw	r18,8(sp)
1000359c:	dc400115 	stw	r17,4(sp)
100035a0:	dc000015 	stw	r16,0(sp)
100035a4:	2500b804 	addi	r20,r4,736
100035a8:	a0002326 	beq	r20,zero,10003638 <_fwalk_reent+0xbc>
100035ac:	282b883a 	mov	r21,r5
100035b0:	2027883a 	mov	r19,r4
100035b4:	002f883a 	mov	r23,zero
100035b8:	05800044 	movi	r22,1
100035bc:	04bfffc4 	movi	r18,-1
100035c0:	a4400117 	ldw	r17,4(r20)
100035c4:	a4000217 	ldw	r16,8(r20)
100035c8:	8c7fffc4 	addi	r17,r17,-1
100035cc:	88000c16 	blt	r17,zero,10003600 <_fwalk_reent+0x84>
100035d0:	84000304 	addi	r16,r16,12
100035d4:	8080000b 	ldhu	r2,0(r16)
100035d8:	8c7fffc4 	addi	r17,r17,-1
100035dc:	817ffd04 	addi	r5,r16,-12
100035e0:	b080052e 	bgeu	r22,r2,100035f8 <_fwalk_reent+0x7c>
100035e4:	8080008f 	ldh	r2,2(r16)
100035e8:	9809883a 	mov	r4,r19
100035ec:	14800226 	beq	r2,r18,100035f8 <_fwalk_reent+0x7c>
100035f0:	a83ee83a 	callr	r21
100035f4:	b8aeb03a 	or	r23,r23,r2
100035f8:	84001a04 	addi	r16,r16,104
100035fc:	8cbff51e 	bne	r17,r18,100035d4 <__alt_data_end+0xf80035d4>
10003600:	a5000017 	ldw	r20,0(r20)
10003604:	a03fee1e 	bne	r20,zero,100035c0 <__alt_data_end+0xf80035c0>
10003608:	b805883a 	mov	r2,r23
1000360c:	dfc00817 	ldw	ra,32(sp)
10003610:	ddc00717 	ldw	r23,28(sp)
10003614:	dd800617 	ldw	r22,24(sp)
10003618:	dd400517 	ldw	r21,20(sp)
1000361c:	dd000417 	ldw	r20,16(sp)
10003620:	dcc00317 	ldw	r19,12(sp)
10003624:	dc800217 	ldw	r18,8(sp)
10003628:	dc400117 	ldw	r17,4(sp)
1000362c:	dc000017 	ldw	r16,0(sp)
10003630:	dec00904 	addi	sp,sp,36
10003634:	f800283a 	ret
10003638:	002f883a 	mov	r23,zero
1000363c:	003ff206 	br	10003608 <__alt_data_end+0xf8003608>

10003640 <_fwrite_r>:
10003640:	defff504 	addi	sp,sp,-44
10003644:	dc400715 	stw	r17,28(sp)
10003648:	d9400315 	stw	r5,12(sp)
1000364c:	2023883a 	mov	r17,r4
10003650:	300b883a 	mov	r5,r6
10003654:	3809883a 	mov	r4,r7
10003658:	dcc00915 	stw	r19,36(sp)
1000365c:	dc800815 	stw	r18,32(sp)
10003660:	dc000615 	stw	r16,24(sp)
10003664:	dfc00a15 	stw	ra,40(sp)
10003668:	3027883a 	mov	r19,r6
1000366c:	3821883a 	mov	r16,r7
10003670:	0001d400 	call	10001d40 <__mulsi3>
10003674:	1025883a 	mov	r18,r2
10003678:	d8800415 	stw	r2,16(sp)
1000367c:	d8800215 	stw	r2,8(sp)
10003680:	d8800304 	addi	r2,sp,12
10003684:	d8800015 	stw	r2,0(sp)
10003688:	00800044 	movi	r2,1
1000368c:	d8800115 	stw	r2,4(sp)
10003690:	d9400b17 	ldw	r5,44(sp)
10003694:	88000226 	beq	r17,zero,100036a0 <_fwrite_r+0x60>
10003698:	88800e17 	ldw	r2,56(r17)
1000369c:	10001a26 	beq	r2,zero,10003708 <_fwrite_r+0xc8>
100036a0:	2880030b 	ldhu	r2,12(r5)
100036a4:	10c8000c 	andi	r3,r2,8192
100036a8:	1800061e 	bne	r3,zero,100036c4 <_fwrite_r+0x84>
100036ac:	29001917 	ldw	r4,100(r5)
100036b0:	00f7ffc4 	movi	r3,-8193
100036b4:	10880014 	ori	r2,r2,8192
100036b8:	20c6703a 	and	r3,r4,r3
100036bc:	2880030d 	sth	r2,12(r5)
100036c0:	28c01915 	stw	r3,100(r5)
100036c4:	d80d883a 	mov	r6,sp
100036c8:	8809883a 	mov	r4,r17
100036cc:	0008fcc0 	call	10008fcc <__sfvwrite_r>
100036d0:	10000b26 	beq	r2,zero,10003700 <_fwrite_r+0xc0>
100036d4:	d9000217 	ldw	r4,8(sp)
100036d8:	980b883a 	mov	r5,r19
100036dc:	9109c83a 	sub	r4,r18,r4
100036e0:	0001c840 	call	10001c84 <__udivsi3>
100036e4:	dfc00a17 	ldw	ra,40(sp)
100036e8:	dcc00917 	ldw	r19,36(sp)
100036ec:	dc800817 	ldw	r18,32(sp)
100036f0:	dc400717 	ldw	r17,28(sp)
100036f4:	dc000617 	ldw	r16,24(sp)
100036f8:	dec00b04 	addi	sp,sp,44
100036fc:	f800283a 	ret
10003700:	8005883a 	mov	r2,r16
10003704:	003ff706 	br	100036e4 <__alt_data_end+0xf80036e4>
10003708:	8809883a 	mov	r4,r17
1000370c:	d9400515 	stw	r5,20(sp)
10003710:	000261c0 	call	1000261c <__sinit>
10003714:	d9400517 	ldw	r5,20(sp)
10003718:	003fe106 	br	100036a0 <__alt_data_end+0xf80036a0>

1000371c <fwrite>:
1000371c:	defffe04 	addi	sp,sp,-8
10003720:	00840074 	movhi	r2,4097
10003724:	d9c00015 	stw	r7,0(sp)
10003728:	1092eb04 	addi	r2,r2,19372
1000372c:	300f883a 	mov	r7,r6
10003730:	280d883a 	mov	r6,r5
10003734:	200b883a 	mov	r5,r4
10003738:	11000017 	ldw	r4,0(r2)
1000373c:	dfc00115 	stw	ra,4(sp)
10003740:	00036400 	call	10003640 <_fwrite_r>
10003744:	dfc00117 	ldw	ra,4(sp)
10003748:	dec00204 	addi	sp,sp,8
1000374c:	f800283a 	ret

10003750 <__smakebuf_r>:
10003750:	2880030b 	ldhu	r2,12(r5)
10003754:	10c0008c 	andi	r3,r2,2
10003758:	1800411e 	bne	r3,zero,10003860 <__smakebuf_r+0x110>
1000375c:	deffec04 	addi	sp,sp,-80
10003760:	dc000f15 	stw	r16,60(sp)
10003764:	2821883a 	mov	r16,r5
10003768:	2940038f 	ldh	r5,14(r5)
1000376c:	dc401015 	stw	r17,64(sp)
10003770:	dfc01315 	stw	ra,76(sp)
10003774:	dcc01215 	stw	r19,72(sp)
10003778:	dc801115 	stw	r18,68(sp)
1000377c:	2023883a 	mov	r17,r4
10003780:	28001c16 	blt	r5,zero,100037f4 <__smakebuf_r+0xa4>
10003784:	d80d883a 	mov	r6,sp
10003788:	00033440 	call	10003344 <_fstat_r>
1000378c:	10001816 	blt	r2,zero,100037f0 <__smakebuf_r+0xa0>
10003790:	d8800117 	ldw	r2,4(sp)
10003794:	00e00014 	movui	r3,32768
10003798:	10bc000c 	andi	r2,r2,61440
1000379c:	14c80020 	cmpeqi	r19,r2,8192
100037a0:	10c03726 	beq	r2,r3,10003880 <__smakebuf_r+0x130>
100037a4:	80c0030b 	ldhu	r3,12(r16)
100037a8:	18c20014 	ori	r3,r3,2048
100037ac:	80c0030d 	sth	r3,12(r16)
100037b0:	00c80004 	movi	r3,8192
100037b4:	10c0521e 	bne	r2,r3,10003900 <__smakebuf_r+0x1b0>
100037b8:	8140038f 	ldh	r5,14(r16)
100037bc:	8809883a 	mov	r4,r17
100037c0:	00094940 	call	10009494 <_isatty_r>
100037c4:	10004c26 	beq	r2,zero,100038f8 <__smakebuf_r+0x1a8>
100037c8:	8080030b 	ldhu	r2,12(r16)
100037cc:	80c010c4 	addi	r3,r16,67
100037d0:	80c00015 	stw	r3,0(r16)
100037d4:	10800054 	ori	r2,r2,1
100037d8:	8080030d 	sth	r2,12(r16)
100037dc:	00800044 	movi	r2,1
100037e0:	80c00415 	stw	r3,16(r16)
100037e4:	80800515 	stw	r2,20(r16)
100037e8:	04810004 	movi	r18,1024
100037ec:	00000706 	br	1000380c <__smakebuf_r+0xbc>
100037f0:	8080030b 	ldhu	r2,12(r16)
100037f4:	10c0200c 	andi	r3,r2,128
100037f8:	18001f1e 	bne	r3,zero,10003878 <__smakebuf_r+0x128>
100037fc:	04810004 	movi	r18,1024
10003800:	10820014 	ori	r2,r2,2048
10003804:	8080030d 	sth	r2,12(r16)
10003808:	0027883a 	mov	r19,zero
1000380c:	900b883a 	mov	r5,r18
10003810:	8809883a 	mov	r4,r17
10003814:	00039340 	call	10003934 <_malloc_r>
10003818:	10002c26 	beq	r2,zero,100038cc <__smakebuf_r+0x17c>
1000381c:	80c0030b 	ldhu	r3,12(r16)
10003820:	01040034 	movhi	r4,4096
10003824:	2108b104 	addi	r4,r4,8900
10003828:	89000f15 	stw	r4,60(r17)
1000382c:	18c02014 	ori	r3,r3,128
10003830:	80c0030d 	sth	r3,12(r16)
10003834:	80800015 	stw	r2,0(r16)
10003838:	80800415 	stw	r2,16(r16)
1000383c:	84800515 	stw	r18,20(r16)
10003840:	98001a1e 	bne	r19,zero,100038ac <__smakebuf_r+0x15c>
10003844:	dfc01317 	ldw	ra,76(sp)
10003848:	dcc01217 	ldw	r19,72(sp)
1000384c:	dc801117 	ldw	r18,68(sp)
10003850:	dc401017 	ldw	r17,64(sp)
10003854:	dc000f17 	ldw	r16,60(sp)
10003858:	dec01404 	addi	sp,sp,80
1000385c:	f800283a 	ret
10003860:	288010c4 	addi	r2,r5,67
10003864:	28800015 	stw	r2,0(r5)
10003868:	28800415 	stw	r2,16(r5)
1000386c:	00800044 	movi	r2,1
10003870:	28800515 	stw	r2,20(r5)
10003874:	f800283a 	ret
10003878:	04801004 	movi	r18,64
1000387c:	003fe006 	br	10003800 <__alt_data_end+0xf8003800>
10003880:	81000a17 	ldw	r4,40(r16)
10003884:	00c40034 	movhi	r3,4096
10003888:	18d38204 	addi	r3,r3,19976
1000388c:	20ffc51e 	bne	r4,r3,100037a4 <__alt_data_end+0xf80037a4>
10003890:	8080030b 	ldhu	r2,12(r16)
10003894:	04810004 	movi	r18,1024
10003898:	84801315 	stw	r18,76(r16)
1000389c:	1484b03a 	or	r2,r2,r18
100038a0:	8080030d 	sth	r2,12(r16)
100038a4:	0027883a 	mov	r19,zero
100038a8:	003fd806 	br	1000380c <__alt_data_end+0xf800380c>
100038ac:	8140038f 	ldh	r5,14(r16)
100038b0:	8809883a 	mov	r4,r17
100038b4:	00094940 	call	10009494 <_isatty_r>
100038b8:	103fe226 	beq	r2,zero,10003844 <__alt_data_end+0xf8003844>
100038bc:	8080030b 	ldhu	r2,12(r16)
100038c0:	10800054 	ori	r2,r2,1
100038c4:	8080030d 	sth	r2,12(r16)
100038c8:	003fde06 	br	10003844 <__alt_data_end+0xf8003844>
100038cc:	8080030b 	ldhu	r2,12(r16)
100038d0:	10c0800c 	andi	r3,r2,512
100038d4:	183fdb1e 	bne	r3,zero,10003844 <__alt_data_end+0xf8003844>
100038d8:	10800094 	ori	r2,r2,2
100038dc:	80c010c4 	addi	r3,r16,67
100038e0:	8080030d 	sth	r2,12(r16)
100038e4:	00800044 	movi	r2,1
100038e8:	80c00015 	stw	r3,0(r16)
100038ec:	80c00415 	stw	r3,16(r16)
100038f0:	80800515 	stw	r2,20(r16)
100038f4:	003fd306 	br	10003844 <__alt_data_end+0xf8003844>
100038f8:	04810004 	movi	r18,1024
100038fc:	003fc306 	br	1000380c <__alt_data_end+0xf800380c>
10003900:	0027883a 	mov	r19,zero
10003904:	04810004 	movi	r18,1024
10003908:	003fc006 	br	1000380c <__alt_data_end+0xf800380c>

1000390c <malloc>:
1000390c:	00840074 	movhi	r2,4097
10003910:	1092eb04 	addi	r2,r2,19372
10003914:	200b883a 	mov	r5,r4
10003918:	11000017 	ldw	r4,0(r2)
1000391c:	00039341 	jmpi	10003934 <_malloc_r>

10003920 <free>:
10003920:	00840074 	movhi	r2,4097
10003924:	1092eb04 	addi	r2,r2,19372
10003928:	200b883a 	mov	r5,r4
1000392c:	11000017 	ldw	r4,0(r2)
10003930:	0002bb41 	jmpi	10002bb4 <_free_r>

10003934 <_malloc_r>:
10003934:	defff504 	addi	sp,sp,-44
10003938:	dc800315 	stw	r18,12(sp)
1000393c:	dfc00a15 	stw	ra,40(sp)
10003940:	df000915 	stw	fp,36(sp)
10003944:	ddc00815 	stw	r23,32(sp)
10003948:	dd800715 	stw	r22,28(sp)
1000394c:	dd400615 	stw	r21,24(sp)
10003950:	dd000515 	stw	r20,20(sp)
10003954:	dcc00415 	stw	r19,16(sp)
10003958:	dc400215 	stw	r17,8(sp)
1000395c:	dc000115 	stw	r16,4(sp)
10003960:	288002c4 	addi	r2,r5,11
10003964:	00c00584 	movi	r3,22
10003968:	2025883a 	mov	r18,r4
1000396c:	18807f2e 	bgeu	r3,r2,10003b6c <_malloc_r+0x238>
10003970:	047ffe04 	movi	r17,-8
10003974:	1462703a 	and	r17,r2,r17
10003978:	8800a316 	blt	r17,zero,10003c08 <_malloc_r+0x2d4>
1000397c:	8940a236 	bltu	r17,r5,10003c08 <_malloc_r+0x2d4>
10003980:	00107380 	call	10010738 <__malloc_lock>
10003984:	00807dc4 	movi	r2,503
10003988:	1441e92e 	bgeu	r2,r17,10004130 <_malloc_r+0x7fc>
1000398c:	8804d27a 	srli	r2,r17,9
10003990:	1000a126 	beq	r2,zero,10003c18 <_malloc_r+0x2e4>
10003994:	00c00104 	movi	r3,4
10003998:	18811e36 	bltu	r3,r2,10003e14 <_malloc_r+0x4e0>
1000399c:	8804d1ba 	srli	r2,r17,6
100039a0:	12000e44 	addi	r8,r2,57
100039a4:	11c00e04 	addi	r7,r2,56
100039a8:	4209883a 	add	r4,r8,r8
100039ac:	04c40074 	movhi	r19,4097
100039b0:	2109883a 	add	r4,r4,r4
100039b4:	9ccd3e04 	addi	r19,r19,13560
100039b8:	2109883a 	add	r4,r4,r4
100039bc:	9909883a 	add	r4,r19,r4
100039c0:	24000117 	ldw	r16,4(r4)
100039c4:	213ffe04 	addi	r4,r4,-8
100039c8:	24009726 	beq	r4,r16,10003c28 <_malloc_r+0x2f4>
100039cc:	80800117 	ldw	r2,4(r16)
100039d0:	01bfff04 	movi	r6,-4
100039d4:	014003c4 	movi	r5,15
100039d8:	1184703a 	and	r2,r2,r6
100039dc:	1447c83a 	sub	r3,r2,r17
100039e0:	28c00716 	blt	r5,r3,10003a00 <_malloc_r+0xcc>
100039e4:	1800920e 	bge	r3,zero,10003c30 <_malloc_r+0x2fc>
100039e8:	84000317 	ldw	r16,12(r16)
100039ec:	24008e26 	beq	r4,r16,10003c28 <_malloc_r+0x2f4>
100039f0:	80800117 	ldw	r2,4(r16)
100039f4:	1184703a 	and	r2,r2,r6
100039f8:	1447c83a 	sub	r3,r2,r17
100039fc:	28fff90e 	bge	r5,r3,100039e4 <__alt_data_end+0xf80039e4>
10003a00:	3809883a 	mov	r4,r7
10003a04:	01840074 	movhi	r6,4097
10003a08:	9c000417 	ldw	r16,16(r19)
10003a0c:	318d3e04 	addi	r6,r6,13560
10003a10:	32000204 	addi	r8,r6,8
10003a14:	82013426 	beq	r16,r8,10003ee8 <_malloc_r+0x5b4>
10003a18:	80c00117 	ldw	r3,4(r16)
10003a1c:	00bfff04 	movi	r2,-4
10003a20:	188e703a 	and	r7,r3,r2
10003a24:	3c45c83a 	sub	r2,r7,r17
10003a28:	00c003c4 	movi	r3,15
10003a2c:	18811f16 	blt	r3,r2,10003eac <_malloc_r+0x578>
10003a30:	32000515 	stw	r8,20(r6)
10003a34:	32000415 	stw	r8,16(r6)
10003a38:	10007f0e 	bge	r2,zero,10003c38 <_malloc_r+0x304>
10003a3c:	00807fc4 	movi	r2,511
10003a40:	11c0fd36 	bltu	r2,r7,10003e38 <_malloc_r+0x504>
10003a44:	3806d0fa 	srli	r3,r7,3
10003a48:	01c00044 	movi	r7,1
10003a4c:	30800117 	ldw	r2,4(r6)
10003a50:	19400044 	addi	r5,r3,1
10003a54:	294b883a 	add	r5,r5,r5
10003a58:	1807d0ba 	srai	r3,r3,2
10003a5c:	294b883a 	add	r5,r5,r5
10003a60:	294b883a 	add	r5,r5,r5
10003a64:	298b883a 	add	r5,r5,r6
10003a68:	38c6983a 	sll	r3,r7,r3
10003a6c:	29c00017 	ldw	r7,0(r5)
10003a70:	2a7ffe04 	addi	r9,r5,-8
10003a74:	1886b03a 	or	r3,r3,r2
10003a78:	82400315 	stw	r9,12(r16)
10003a7c:	81c00215 	stw	r7,8(r16)
10003a80:	30c00115 	stw	r3,4(r6)
10003a84:	2c000015 	stw	r16,0(r5)
10003a88:	3c000315 	stw	r16,12(r7)
10003a8c:	2005d0ba 	srai	r2,r4,2
10003a90:	01400044 	movi	r5,1
10003a94:	288a983a 	sll	r5,r5,r2
10003a98:	19406f36 	bltu	r3,r5,10003c58 <_malloc_r+0x324>
10003a9c:	28c4703a 	and	r2,r5,r3
10003aa0:	10000a1e 	bne	r2,zero,10003acc <_malloc_r+0x198>
10003aa4:	00bfff04 	movi	r2,-4
10003aa8:	294b883a 	add	r5,r5,r5
10003aac:	2088703a 	and	r4,r4,r2
10003ab0:	28c4703a 	and	r2,r5,r3
10003ab4:	21000104 	addi	r4,r4,4
10003ab8:	1000041e 	bne	r2,zero,10003acc <_malloc_r+0x198>
10003abc:	294b883a 	add	r5,r5,r5
10003ac0:	28c4703a 	and	r2,r5,r3
10003ac4:	21000104 	addi	r4,r4,4
10003ac8:	103ffc26 	beq	r2,zero,10003abc <__alt_data_end+0xf8003abc>
10003acc:	02bfff04 	movi	r10,-4
10003ad0:	024003c4 	movi	r9,15
10003ad4:	21800044 	addi	r6,r4,1
10003ad8:	318d883a 	add	r6,r6,r6
10003adc:	318d883a 	add	r6,r6,r6
10003ae0:	318d883a 	add	r6,r6,r6
10003ae4:	998d883a 	add	r6,r19,r6
10003ae8:	333ffe04 	addi	r12,r6,-8
10003aec:	2017883a 	mov	r11,r4
10003af0:	31800104 	addi	r6,r6,4
10003af4:	34000017 	ldw	r16,0(r6)
10003af8:	31fffd04 	addi	r7,r6,-12
10003afc:	81c0041e 	bne	r16,r7,10003b10 <_malloc_r+0x1dc>
10003b00:	0000fb06 	br	10003ef0 <_malloc_r+0x5bc>
10003b04:	1801030e 	bge	r3,zero,10003f14 <_malloc_r+0x5e0>
10003b08:	84000317 	ldw	r16,12(r16)
10003b0c:	81c0f826 	beq	r16,r7,10003ef0 <_malloc_r+0x5bc>
10003b10:	80800117 	ldw	r2,4(r16)
10003b14:	1284703a 	and	r2,r2,r10
10003b18:	1447c83a 	sub	r3,r2,r17
10003b1c:	48fff90e 	bge	r9,r3,10003b04 <__alt_data_end+0xf8003b04>
10003b20:	80800317 	ldw	r2,12(r16)
10003b24:	81000217 	ldw	r4,8(r16)
10003b28:	89400054 	ori	r5,r17,1
10003b2c:	81400115 	stw	r5,4(r16)
10003b30:	20800315 	stw	r2,12(r4)
10003b34:	11000215 	stw	r4,8(r2)
10003b38:	8463883a 	add	r17,r16,r17
10003b3c:	9c400515 	stw	r17,20(r19)
10003b40:	9c400415 	stw	r17,16(r19)
10003b44:	18800054 	ori	r2,r3,1
10003b48:	88800115 	stw	r2,4(r17)
10003b4c:	8a000315 	stw	r8,12(r17)
10003b50:	8a000215 	stw	r8,8(r17)
10003b54:	88e3883a 	add	r17,r17,r3
10003b58:	88c00015 	stw	r3,0(r17)
10003b5c:	9009883a 	mov	r4,r18
10003b60:	001075c0 	call	1001075c <__malloc_unlock>
10003b64:	80800204 	addi	r2,r16,8
10003b68:	00001b06 	br	10003bd8 <_malloc_r+0x2a4>
10003b6c:	04400404 	movi	r17,16
10003b70:	89402536 	bltu	r17,r5,10003c08 <_malloc_r+0x2d4>
10003b74:	00107380 	call	10010738 <__malloc_lock>
10003b78:	00800184 	movi	r2,6
10003b7c:	01000084 	movi	r4,2
10003b80:	04c40074 	movhi	r19,4097
10003b84:	1085883a 	add	r2,r2,r2
10003b88:	9ccd3e04 	addi	r19,r19,13560
10003b8c:	1085883a 	add	r2,r2,r2
10003b90:	9885883a 	add	r2,r19,r2
10003b94:	14000117 	ldw	r16,4(r2)
10003b98:	10fffe04 	addi	r3,r2,-8
10003b9c:	80c0d926 	beq	r16,r3,10003f04 <_malloc_r+0x5d0>
10003ba0:	80c00117 	ldw	r3,4(r16)
10003ba4:	81000317 	ldw	r4,12(r16)
10003ba8:	00bfff04 	movi	r2,-4
10003bac:	1884703a 	and	r2,r3,r2
10003bb0:	81400217 	ldw	r5,8(r16)
10003bb4:	8085883a 	add	r2,r16,r2
10003bb8:	10c00117 	ldw	r3,4(r2)
10003bbc:	29000315 	stw	r4,12(r5)
10003bc0:	21400215 	stw	r5,8(r4)
10003bc4:	18c00054 	ori	r3,r3,1
10003bc8:	10c00115 	stw	r3,4(r2)
10003bcc:	9009883a 	mov	r4,r18
10003bd0:	001075c0 	call	1001075c <__malloc_unlock>
10003bd4:	80800204 	addi	r2,r16,8
10003bd8:	dfc00a17 	ldw	ra,40(sp)
10003bdc:	df000917 	ldw	fp,36(sp)
10003be0:	ddc00817 	ldw	r23,32(sp)
10003be4:	dd800717 	ldw	r22,28(sp)
10003be8:	dd400617 	ldw	r21,24(sp)
10003bec:	dd000517 	ldw	r20,20(sp)
10003bf0:	dcc00417 	ldw	r19,16(sp)
10003bf4:	dc800317 	ldw	r18,12(sp)
10003bf8:	dc400217 	ldw	r17,8(sp)
10003bfc:	dc000117 	ldw	r16,4(sp)
10003c00:	dec00b04 	addi	sp,sp,44
10003c04:	f800283a 	ret
10003c08:	00800304 	movi	r2,12
10003c0c:	90800015 	stw	r2,0(r18)
10003c10:	0005883a 	mov	r2,zero
10003c14:	003ff006 	br	10003bd8 <__alt_data_end+0xf8003bd8>
10003c18:	01002004 	movi	r4,128
10003c1c:	02001004 	movi	r8,64
10003c20:	01c00fc4 	movi	r7,63
10003c24:	003f6106 	br	100039ac <__alt_data_end+0xf80039ac>
10003c28:	4009883a 	mov	r4,r8
10003c2c:	003f7506 	br	10003a04 <__alt_data_end+0xf8003a04>
10003c30:	81000317 	ldw	r4,12(r16)
10003c34:	003fde06 	br	10003bb0 <__alt_data_end+0xf8003bb0>
10003c38:	81c5883a 	add	r2,r16,r7
10003c3c:	11400117 	ldw	r5,4(r2)
10003c40:	9009883a 	mov	r4,r18
10003c44:	29400054 	ori	r5,r5,1
10003c48:	11400115 	stw	r5,4(r2)
10003c4c:	001075c0 	call	1001075c <__malloc_unlock>
10003c50:	80800204 	addi	r2,r16,8
10003c54:	003fe006 	br	10003bd8 <__alt_data_end+0xf8003bd8>
10003c58:	9c000217 	ldw	r16,8(r19)
10003c5c:	00bfff04 	movi	r2,-4
10003c60:	85800117 	ldw	r22,4(r16)
10003c64:	b0ac703a 	and	r22,r22,r2
10003c68:	b4400336 	bltu	r22,r17,10003c78 <_malloc_r+0x344>
10003c6c:	b445c83a 	sub	r2,r22,r17
10003c70:	00c003c4 	movi	r3,15
10003c74:	18805d16 	blt	r3,r2,10003dec <_malloc_r+0x4b8>
10003c78:	05c40074 	movhi	r23,4097
10003c7c:	00840074 	movhi	r2,4097
10003c80:	109a2404 	addi	r2,r2,26768
10003c84:	bdd2ec04 	addi	r23,r23,19376
10003c88:	15400017 	ldw	r21,0(r2)
10003c8c:	b8c00017 	ldw	r3,0(r23)
10003c90:	00bfffc4 	movi	r2,-1
10003c94:	858d883a 	add	r6,r16,r22
10003c98:	8d6b883a 	add	r21,r17,r21
10003c9c:	1880ea26 	beq	r3,r2,10004048 <_malloc_r+0x714>
10003ca0:	ad4403c4 	addi	r21,r21,4111
10003ca4:	00bc0004 	movi	r2,-4096
10003ca8:	a8aa703a 	and	r21,r21,r2
10003cac:	a80b883a 	mov	r5,r21
10003cb0:	9009883a 	mov	r4,r18
10003cb4:	d9800015 	stw	r6,0(sp)
10003cb8:	0004cdc0 	call	10004cdc <_sbrk_r>
10003cbc:	1029883a 	mov	r20,r2
10003cc0:	00bfffc4 	movi	r2,-1
10003cc4:	d9800017 	ldw	r6,0(sp)
10003cc8:	a080e826 	beq	r20,r2,1000406c <_malloc_r+0x738>
10003ccc:	a180a636 	bltu	r20,r6,10003f68 <_malloc_r+0x634>
10003cd0:	07040074 	movhi	fp,4097
10003cd4:	e71a2f04 	addi	fp,fp,26812
10003cd8:	e0800017 	ldw	r2,0(fp)
10003cdc:	a887883a 	add	r3,r21,r2
10003ce0:	e0c00015 	stw	r3,0(fp)
10003ce4:	3500e626 	beq	r6,r20,10004080 <_malloc_r+0x74c>
10003ce8:	b9000017 	ldw	r4,0(r23)
10003cec:	00bfffc4 	movi	r2,-1
10003cf0:	2080ee26 	beq	r4,r2,100040ac <_malloc_r+0x778>
10003cf4:	a185c83a 	sub	r2,r20,r6
10003cf8:	10c5883a 	add	r2,r2,r3
10003cfc:	e0800015 	stw	r2,0(fp)
10003d00:	a0c001cc 	andi	r3,r20,7
10003d04:	1800bc26 	beq	r3,zero,10003ff8 <_malloc_r+0x6c4>
10003d08:	a0e9c83a 	sub	r20,r20,r3
10003d0c:	00840204 	movi	r2,4104
10003d10:	a5000204 	addi	r20,r20,8
10003d14:	10c7c83a 	sub	r3,r2,r3
10003d18:	a545883a 	add	r2,r20,r21
10003d1c:	1083ffcc 	andi	r2,r2,4095
10003d20:	18abc83a 	sub	r21,r3,r2
10003d24:	a80b883a 	mov	r5,r21
10003d28:	9009883a 	mov	r4,r18
10003d2c:	0004cdc0 	call	10004cdc <_sbrk_r>
10003d30:	00ffffc4 	movi	r3,-1
10003d34:	10c0e126 	beq	r2,r3,100040bc <_malloc_r+0x788>
10003d38:	1505c83a 	sub	r2,r2,r20
10003d3c:	1545883a 	add	r2,r2,r21
10003d40:	10800054 	ori	r2,r2,1
10003d44:	e0c00017 	ldw	r3,0(fp)
10003d48:	9d000215 	stw	r20,8(r19)
10003d4c:	a0800115 	stw	r2,4(r20)
10003d50:	a8c7883a 	add	r3,r21,r3
10003d54:	e0c00015 	stw	r3,0(fp)
10003d58:	84c00e26 	beq	r16,r19,10003d94 <_malloc_r+0x460>
10003d5c:	018003c4 	movi	r6,15
10003d60:	3580a72e 	bgeu	r6,r22,10004000 <_malloc_r+0x6cc>
10003d64:	81400117 	ldw	r5,4(r16)
10003d68:	013ffe04 	movi	r4,-8
10003d6c:	b0bffd04 	addi	r2,r22,-12
10003d70:	1104703a 	and	r2,r2,r4
10003d74:	2900004c 	andi	r4,r5,1
10003d78:	2088b03a 	or	r4,r4,r2
10003d7c:	81000115 	stw	r4,4(r16)
10003d80:	01400144 	movi	r5,5
10003d84:	8089883a 	add	r4,r16,r2
10003d88:	21400115 	stw	r5,4(r4)
10003d8c:	21400215 	stw	r5,8(r4)
10003d90:	3080cd36 	bltu	r6,r2,100040c8 <_malloc_r+0x794>
10003d94:	00840074 	movhi	r2,4097
10003d98:	109a2304 	addi	r2,r2,26764
10003d9c:	11000017 	ldw	r4,0(r2)
10003da0:	20c0012e 	bgeu	r4,r3,10003da8 <_malloc_r+0x474>
10003da4:	10c00015 	stw	r3,0(r2)
10003da8:	00840074 	movhi	r2,4097
10003dac:	109a2204 	addi	r2,r2,26760
10003db0:	11000017 	ldw	r4,0(r2)
10003db4:	9c000217 	ldw	r16,8(r19)
10003db8:	20c0012e 	bgeu	r4,r3,10003dc0 <_malloc_r+0x48c>
10003dbc:	10c00015 	stw	r3,0(r2)
10003dc0:	80c00117 	ldw	r3,4(r16)
10003dc4:	00bfff04 	movi	r2,-4
10003dc8:	1886703a 	and	r3,r3,r2
10003dcc:	1c45c83a 	sub	r2,r3,r17
10003dd0:	1c400236 	bltu	r3,r17,10003ddc <_malloc_r+0x4a8>
10003dd4:	00c003c4 	movi	r3,15
10003dd8:	18800416 	blt	r3,r2,10003dec <_malloc_r+0x4b8>
10003ddc:	9009883a 	mov	r4,r18
10003de0:	001075c0 	call	1001075c <__malloc_unlock>
10003de4:	0005883a 	mov	r2,zero
10003de8:	003f7b06 	br	10003bd8 <__alt_data_end+0xf8003bd8>
10003dec:	88c00054 	ori	r3,r17,1
10003df0:	80c00115 	stw	r3,4(r16)
10003df4:	8463883a 	add	r17,r16,r17
10003df8:	10800054 	ori	r2,r2,1
10003dfc:	9c400215 	stw	r17,8(r19)
10003e00:	88800115 	stw	r2,4(r17)
10003e04:	9009883a 	mov	r4,r18
10003e08:	001075c0 	call	1001075c <__malloc_unlock>
10003e0c:	80800204 	addi	r2,r16,8
10003e10:	003f7106 	br	10003bd8 <__alt_data_end+0xf8003bd8>
10003e14:	00c00504 	movi	r3,20
10003e18:	18804a2e 	bgeu	r3,r2,10003f44 <_malloc_r+0x610>
10003e1c:	00c01504 	movi	r3,84
10003e20:	18806e36 	bltu	r3,r2,10003fdc <_malloc_r+0x6a8>
10003e24:	8804d33a 	srli	r2,r17,12
10003e28:	12001bc4 	addi	r8,r2,111
10003e2c:	11c01b84 	addi	r7,r2,110
10003e30:	4209883a 	add	r4,r8,r8
10003e34:	003edd06 	br	100039ac <__alt_data_end+0xf80039ac>
10003e38:	3804d27a 	srli	r2,r7,9
10003e3c:	00c00104 	movi	r3,4
10003e40:	1880442e 	bgeu	r3,r2,10003f54 <_malloc_r+0x620>
10003e44:	00c00504 	movi	r3,20
10003e48:	18808136 	bltu	r3,r2,10004050 <_malloc_r+0x71c>
10003e4c:	11401704 	addi	r5,r2,92
10003e50:	10c016c4 	addi	r3,r2,91
10003e54:	294b883a 	add	r5,r5,r5
10003e58:	294b883a 	add	r5,r5,r5
10003e5c:	294b883a 	add	r5,r5,r5
10003e60:	994b883a 	add	r5,r19,r5
10003e64:	28800017 	ldw	r2,0(r5)
10003e68:	01840074 	movhi	r6,4097
10003e6c:	297ffe04 	addi	r5,r5,-8
10003e70:	318d3e04 	addi	r6,r6,13560
10003e74:	28806526 	beq	r5,r2,1000400c <_malloc_r+0x6d8>
10003e78:	01bfff04 	movi	r6,-4
10003e7c:	10c00117 	ldw	r3,4(r2)
10003e80:	1986703a 	and	r3,r3,r6
10003e84:	38c0022e 	bgeu	r7,r3,10003e90 <_malloc_r+0x55c>
10003e88:	10800217 	ldw	r2,8(r2)
10003e8c:	28bffb1e 	bne	r5,r2,10003e7c <__alt_data_end+0xf8003e7c>
10003e90:	11400317 	ldw	r5,12(r2)
10003e94:	98c00117 	ldw	r3,4(r19)
10003e98:	81400315 	stw	r5,12(r16)
10003e9c:	80800215 	stw	r2,8(r16)
10003ea0:	2c000215 	stw	r16,8(r5)
10003ea4:	14000315 	stw	r16,12(r2)
10003ea8:	003ef806 	br	10003a8c <__alt_data_end+0xf8003a8c>
10003eac:	88c00054 	ori	r3,r17,1
10003eb0:	80c00115 	stw	r3,4(r16)
10003eb4:	8463883a 	add	r17,r16,r17
10003eb8:	34400515 	stw	r17,20(r6)
10003ebc:	34400415 	stw	r17,16(r6)
10003ec0:	10c00054 	ori	r3,r2,1
10003ec4:	8a000315 	stw	r8,12(r17)
10003ec8:	8a000215 	stw	r8,8(r17)
10003ecc:	88c00115 	stw	r3,4(r17)
10003ed0:	88a3883a 	add	r17,r17,r2
10003ed4:	88800015 	stw	r2,0(r17)
10003ed8:	9009883a 	mov	r4,r18
10003edc:	001075c0 	call	1001075c <__malloc_unlock>
10003ee0:	80800204 	addi	r2,r16,8
10003ee4:	003f3c06 	br	10003bd8 <__alt_data_end+0xf8003bd8>
10003ee8:	30c00117 	ldw	r3,4(r6)
10003eec:	003ee706 	br	10003a8c <__alt_data_end+0xf8003a8c>
10003ef0:	5ac00044 	addi	r11,r11,1
10003ef4:	588000cc 	andi	r2,r11,3
10003ef8:	31800204 	addi	r6,r6,8
10003efc:	103efd1e 	bne	r2,zero,10003af4 <__alt_data_end+0xf8003af4>
10003f00:	00002406 	br	10003f94 <_malloc_r+0x660>
10003f04:	14000317 	ldw	r16,12(r2)
10003f08:	143f251e 	bne	r2,r16,10003ba0 <__alt_data_end+0xf8003ba0>
10003f0c:	21000084 	addi	r4,r4,2
10003f10:	003ebc06 	br	10003a04 <__alt_data_end+0xf8003a04>
10003f14:	8085883a 	add	r2,r16,r2
10003f18:	10c00117 	ldw	r3,4(r2)
10003f1c:	81000317 	ldw	r4,12(r16)
10003f20:	81400217 	ldw	r5,8(r16)
10003f24:	18c00054 	ori	r3,r3,1
10003f28:	10c00115 	stw	r3,4(r2)
10003f2c:	29000315 	stw	r4,12(r5)
10003f30:	21400215 	stw	r5,8(r4)
10003f34:	9009883a 	mov	r4,r18
10003f38:	001075c0 	call	1001075c <__malloc_unlock>
10003f3c:	80800204 	addi	r2,r16,8
10003f40:	003f2506 	br	10003bd8 <__alt_data_end+0xf8003bd8>
10003f44:	12001704 	addi	r8,r2,92
10003f48:	11c016c4 	addi	r7,r2,91
10003f4c:	4209883a 	add	r4,r8,r8
10003f50:	003e9606 	br	100039ac <__alt_data_end+0xf80039ac>
10003f54:	3804d1ba 	srli	r2,r7,6
10003f58:	11400e44 	addi	r5,r2,57
10003f5c:	10c00e04 	addi	r3,r2,56
10003f60:	294b883a 	add	r5,r5,r5
10003f64:	003fbc06 	br	10003e58 <__alt_data_end+0xf8003e58>
10003f68:	84ff5926 	beq	r16,r19,10003cd0 <__alt_data_end+0xf8003cd0>
10003f6c:	00840074 	movhi	r2,4097
10003f70:	108d3e04 	addi	r2,r2,13560
10003f74:	14000217 	ldw	r16,8(r2)
10003f78:	00bfff04 	movi	r2,-4
10003f7c:	80c00117 	ldw	r3,4(r16)
10003f80:	1886703a 	and	r3,r3,r2
10003f84:	003f9106 	br	10003dcc <__alt_data_end+0xf8003dcc>
10003f88:	60800217 	ldw	r2,8(r12)
10003f8c:	213fffc4 	addi	r4,r4,-1
10003f90:	1300651e 	bne	r2,r12,10004128 <_malloc_r+0x7f4>
10003f94:	208000cc 	andi	r2,r4,3
10003f98:	633ffe04 	addi	r12,r12,-8
10003f9c:	103ffa1e 	bne	r2,zero,10003f88 <__alt_data_end+0xf8003f88>
10003fa0:	98800117 	ldw	r2,4(r19)
10003fa4:	0146303a 	nor	r3,zero,r5
10003fa8:	1884703a 	and	r2,r3,r2
10003fac:	98800115 	stw	r2,4(r19)
10003fb0:	294b883a 	add	r5,r5,r5
10003fb4:	117f2836 	bltu	r2,r5,10003c58 <__alt_data_end+0xf8003c58>
10003fb8:	283f2726 	beq	r5,zero,10003c58 <__alt_data_end+0xf8003c58>
10003fbc:	2886703a 	and	r3,r5,r2
10003fc0:	5809883a 	mov	r4,r11
10003fc4:	183ec31e 	bne	r3,zero,10003ad4 <__alt_data_end+0xf8003ad4>
10003fc8:	294b883a 	add	r5,r5,r5
10003fcc:	2886703a 	and	r3,r5,r2
10003fd0:	21000104 	addi	r4,r4,4
10003fd4:	183ffc26 	beq	r3,zero,10003fc8 <__alt_data_end+0xf8003fc8>
10003fd8:	003ebe06 	br	10003ad4 <__alt_data_end+0xf8003ad4>
10003fdc:	00c05504 	movi	r3,340
10003fe0:	18801236 	bltu	r3,r2,1000402c <_malloc_r+0x6f8>
10003fe4:	8804d3fa 	srli	r2,r17,15
10003fe8:	12001e04 	addi	r8,r2,120
10003fec:	11c01dc4 	addi	r7,r2,119
10003ff0:	4209883a 	add	r4,r8,r8
10003ff4:	003e6d06 	br	100039ac <__alt_data_end+0xf80039ac>
10003ff8:	00c40004 	movi	r3,4096
10003ffc:	003f4606 	br	10003d18 <__alt_data_end+0xf8003d18>
10004000:	00800044 	movi	r2,1
10004004:	a0800115 	stw	r2,4(r20)
10004008:	003f7406 	br	10003ddc <__alt_data_end+0xf8003ddc>
1000400c:	1805d0ba 	srai	r2,r3,2
10004010:	01c00044 	movi	r7,1
10004014:	30c00117 	ldw	r3,4(r6)
10004018:	388e983a 	sll	r7,r7,r2
1000401c:	2805883a 	mov	r2,r5
10004020:	38c6b03a 	or	r3,r7,r3
10004024:	30c00115 	stw	r3,4(r6)
10004028:	003f9b06 	br	10003e98 <__alt_data_end+0xf8003e98>
1000402c:	00c15504 	movi	r3,1364
10004030:	18801a36 	bltu	r3,r2,1000409c <_malloc_r+0x768>
10004034:	8804d4ba 	srli	r2,r17,18
10004038:	12001f44 	addi	r8,r2,125
1000403c:	11c01f04 	addi	r7,r2,124
10004040:	4209883a 	add	r4,r8,r8
10004044:	003e5906 	br	100039ac <__alt_data_end+0xf80039ac>
10004048:	ad400404 	addi	r21,r21,16
1000404c:	003f1706 	br	10003cac <__alt_data_end+0xf8003cac>
10004050:	00c01504 	movi	r3,84
10004054:	18802336 	bltu	r3,r2,100040e4 <_malloc_r+0x7b0>
10004058:	3804d33a 	srli	r2,r7,12
1000405c:	11401bc4 	addi	r5,r2,111
10004060:	10c01b84 	addi	r3,r2,110
10004064:	294b883a 	add	r5,r5,r5
10004068:	003f7b06 	br	10003e58 <__alt_data_end+0xf8003e58>
1000406c:	9c000217 	ldw	r16,8(r19)
10004070:	00bfff04 	movi	r2,-4
10004074:	80c00117 	ldw	r3,4(r16)
10004078:	1886703a 	and	r3,r3,r2
1000407c:	003f5306 	br	10003dcc <__alt_data_end+0xf8003dcc>
10004080:	3083ffcc 	andi	r2,r6,4095
10004084:	103f181e 	bne	r2,zero,10003ce8 <__alt_data_end+0xf8003ce8>
10004088:	99000217 	ldw	r4,8(r19)
1000408c:	b545883a 	add	r2,r22,r21
10004090:	10800054 	ori	r2,r2,1
10004094:	20800115 	stw	r2,4(r4)
10004098:	003f3e06 	br	10003d94 <__alt_data_end+0xf8003d94>
1000409c:	01003f84 	movi	r4,254
100040a0:	02001fc4 	movi	r8,127
100040a4:	01c01f84 	movi	r7,126
100040a8:	003e4006 	br	100039ac <__alt_data_end+0xf80039ac>
100040ac:	00840074 	movhi	r2,4097
100040b0:	1092ec04 	addi	r2,r2,19376
100040b4:	15000015 	stw	r20,0(r2)
100040b8:	003f1106 	br	10003d00 <__alt_data_end+0xf8003d00>
100040bc:	00800044 	movi	r2,1
100040c0:	002b883a 	mov	r21,zero
100040c4:	003f1f06 	br	10003d44 <__alt_data_end+0xf8003d44>
100040c8:	81400204 	addi	r5,r16,8
100040cc:	9009883a 	mov	r4,r18
100040d0:	0002bb40 	call	10002bb4 <_free_r>
100040d4:	00840074 	movhi	r2,4097
100040d8:	109a2f04 	addi	r2,r2,26812
100040dc:	10c00017 	ldw	r3,0(r2)
100040e0:	003f2c06 	br	10003d94 <__alt_data_end+0xf8003d94>
100040e4:	00c05504 	movi	r3,340
100040e8:	18800536 	bltu	r3,r2,10004100 <_malloc_r+0x7cc>
100040ec:	3804d3fa 	srli	r2,r7,15
100040f0:	11401e04 	addi	r5,r2,120
100040f4:	10c01dc4 	addi	r3,r2,119
100040f8:	294b883a 	add	r5,r5,r5
100040fc:	003f5606 	br	10003e58 <__alt_data_end+0xf8003e58>
10004100:	00c15504 	movi	r3,1364
10004104:	18800536 	bltu	r3,r2,1000411c <_malloc_r+0x7e8>
10004108:	3804d4ba 	srli	r2,r7,18
1000410c:	11401f44 	addi	r5,r2,125
10004110:	10c01f04 	addi	r3,r2,124
10004114:	294b883a 	add	r5,r5,r5
10004118:	003f4f06 	br	10003e58 <__alt_data_end+0xf8003e58>
1000411c:	01403f84 	movi	r5,254
10004120:	00c01f84 	movi	r3,126
10004124:	003f4c06 	br	10003e58 <__alt_data_end+0xf8003e58>
10004128:	98800117 	ldw	r2,4(r19)
1000412c:	003fa006 	br	10003fb0 <__alt_data_end+0xf8003fb0>
10004130:	8808d0fa 	srli	r4,r17,3
10004134:	20800044 	addi	r2,r4,1
10004138:	1085883a 	add	r2,r2,r2
1000413c:	003e9006 	br	10003b80 <__alt_data_end+0xf8003b80>

10004140 <memcpy>:
10004140:	defffd04 	addi	sp,sp,-12
10004144:	dfc00215 	stw	ra,8(sp)
10004148:	dc400115 	stw	r17,4(sp)
1000414c:	dc000015 	stw	r16,0(sp)
10004150:	00c003c4 	movi	r3,15
10004154:	2005883a 	mov	r2,r4
10004158:	1980452e 	bgeu	r3,r6,10004270 <memcpy+0x130>
1000415c:	2906b03a 	or	r3,r5,r4
10004160:	18c000cc 	andi	r3,r3,3
10004164:	1800441e 	bne	r3,zero,10004278 <memcpy+0x138>
10004168:	347ffc04 	addi	r17,r6,-16
1000416c:	8822d13a 	srli	r17,r17,4
10004170:	28c00104 	addi	r3,r5,4
10004174:	23400104 	addi	r13,r4,4
10004178:	8820913a 	slli	r16,r17,4
1000417c:	2b000204 	addi	r12,r5,8
10004180:	22c00204 	addi	r11,r4,8
10004184:	84000504 	addi	r16,r16,20
10004188:	2a800304 	addi	r10,r5,12
1000418c:	22400304 	addi	r9,r4,12
10004190:	2c21883a 	add	r16,r5,r16
10004194:	2811883a 	mov	r8,r5
10004198:	200f883a 	mov	r7,r4
1000419c:	41000017 	ldw	r4,0(r8)
100041a0:	1fc00017 	ldw	ra,0(r3)
100041a4:	63c00017 	ldw	r15,0(r12)
100041a8:	39000015 	stw	r4,0(r7)
100041ac:	53800017 	ldw	r14,0(r10)
100041b0:	6fc00015 	stw	ra,0(r13)
100041b4:	5bc00015 	stw	r15,0(r11)
100041b8:	4b800015 	stw	r14,0(r9)
100041bc:	18c00404 	addi	r3,r3,16
100041c0:	39c00404 	addi	r7,r7,16
100041c4:	42000404 	addi	r8,r8,16
100041c8:	6b400404 	addi	r13,r13,16
100041cc:	63000404 	addi	r12,r12,16
100041d0:	5ac00404 	addi	r11,r11,16
100041d4:	52800404 	addi	r10,r10,16
100041d8:	4a400404 	addi	r9,r9,16
100041dc:	1c3fef1e 	bne	r3,r16,1000419c <__alt_data_end+0xf800419c>
100041e0:	89c00044 	addi	r7,r17,1
100041e4:	380e913a 	slli	r7,r7,4
100041e8:	310003cc 	andi	r4,r6,15
100041ec:	02c000c4 	movi	r11,3
100041f0:	11c7883a 	add	r3,r2,r7
100041f4:	29cb883a 	add	r5,r5,r7
100041f8:	5900212e 	bgeu	r11,r4,10004280 <memcpy+0x140>
100041fc:	1813883a 	mov	r9,r3
10004200:	2811883a 	mov	r8,r5
10004204:	200f883a 	mov	r7,r4
10004208:	42800017 	ldw	r10,0(r8)
1000420c:	4a400104 	addi	r9,r9,4
10004210:	39ffff04 	addi	r7,r7,-4
10004214:	4abfff15 	stw	r10,-4(r9)
10004218:	42000104 	addi	r8,r8,4
1000421c:	59fffa36 	bltu	r11,r7,10004208 <__alt_data_end+0xf8004208>
10004220:	213fff04 	addi	r4,r4,-4
10004224:	2008d0ba 	srli	r4,r4,2
10004228:	318000cc 	andi	r6,r6,3
1000422c:	21000044 	addi	r4,r4,1
10004230:	2109883a 	add	r4,r4,r4
10004234:	2109883a 	add	r4,r4,r4
10004238:	1907883a 	add	r3,r3,r4
1000423c:	290b883a 	add	r5,r5,r4
10004240:	30000626 	beq	r6,zero,1000425c <memcpy+0x11c>
10004244:	198d883a 	add	r6,r3,r6
10004248:	29c00003 	ldbu	r7,0(r5)
1000424c:	18c00044 	addi	r3,r3,1
10004250:	29400044 	addi	r5,r5,1
10004254:	19ffffc5 	stb	r7,-1(r3)
10004258:	19bffb1e 	bne	r3,r6,10004248 <__alt_data_end+0xf8004248>
1000425c:	dfc00217 	ldw	ra,8(sp)
10004260:	dc400117 	ldw	r17,4(sp)
10004264:	dc000017 	ldw	r16,0(sp)
10004268:	dec00304 	addi	sp,sp,12
1000426c:	f800283a 	ret
10004270:	2007883a 	mov	r3,r4
10004274:	003ff206 	br	10004240 <__alt_data_end+0xf8004240>
10004278:	2007883a 	mov	r3,r4
1000427c:	003ff106 	br	10004244 <__alt_data_end+0xf8004244>
10004280:	200d883a 	mov	r6,r4
10004284:	003fee06 	br	10004240 <__alt_data_end+0xf8004240>

10004288 <memset>:
10004288:	20c000cc 	andi	r3,r4,3
1000428c:	2005883a 	mov	r2,r4
10004290:	18004426 	beq	r3,zero,100043a4 <memset+0x11c>
10004294:	31ffffc4 	addi	r7,r6,-1
10004298:	30004026 	beq	r6,zero,1000439c <memset+0x114>
1000429c:	2813883a 	mov	r9,r5
100042a0:	200d883a 	mov	r6,r4
100042a4:	2007883a 	mov	r3,r4
100042a8:	00000406 	br	100042bc <memset+0x34>
100042ac:	3a3fffc4 	addi	r8,r7,-1
100042b0:	31800044 	addi	r6,r6,1
100042b4:	38003926 	beq	r7,zero,1000439c <memset+0x114>
100042b8:	400f883a 	mov	r7,r8
100042bc:	18c00044 	addi	r3,r3,1
100042c0:	32400005 	stb	r9,0(r6)
100042c4:	1a0000cc 	andi	r8,r3,3
100042c8:	403ff81e 	bne	r8,zero,100042ac <__alt_data_end+0xf80042ac>
100042cc:	010000c4 	movi	r4,3
100042d0:	21c02d2e 	bgeu	r4,r7,10004388 <memset+0x100>
100042d4:	29003fcc 	andi	r4,r5,255
100042d8:	200c923a 	slli	r6,r4,8
100042dc:	3108b03a 	or	r4,r6,r4
100042e0:	200c943a 	slli	r6,r4,16
100042e4:	218cb03a 	or	r6,r4,r6
100042e8:	010003c4 	movi	r4,15
100042ec:	21c0182e 	bgeu	r4,r7,10004350 <memset+0xc8>
100042f0:	3b3ffc04 	addi	r12,r7,-16
100042f4:	6018d13a 	srli	r12,r12,4
100042f8:	1a000104 	addi	r8,r3,4
100042fc:	1ac00204 	addi	r11,r3,8
10004300:	6008913a 	slli	r4,r12,4
10004304:	1a800304 	addi	r10,r3,12
10004308:	1813883a 	mov	r9,r3
1000430c:	21000504 	addi	r4,r4,20
10004310:	1909883a 	add	r4,r3,r4
10004314:	49800015 	stw	r6,0(r9)
10004318:	41800015 	stw	r6,0(r8)
1000431c:	59800015 	stw	r6,0(r11)
10004320:	51800015 	stw	r6,0(r10)
10004324:	42000404 	addi	r8,r8,16
10004328:	4a400404 	addi	r9,r9,16
1000432c:	5ac00404 	addi	r11,r11,16
10004330:	52800404 	addi	r10,r10,16
10004334:	413ff71e 	bne	r8,r4,10004314 <__alt_data_end+0xf8004314>
10004338:	63000044 	addi	r12,r12,1
1000433c:	6018913a 	slli	r12,r12,4
10004340:	39c003cc 	andi	r7,r7,15
10004344:	010000c4 	movi	r4,3
10004348:	1b07883a 	add	r3,r3,r12
1000434c:	21c00e2e 	bgeu	r4,r7,10004388 <memset+0x100>
10004350:	1813883a 	mov	r9,r3
10004354:	3811883a 	mov	r8,r7
10004358:	010000c4 	movi	r4,3
1000435c:	49800015 	stw	r6,0(r9)
10004360:	423fff04 	addi	r8,r8,-4
10004364:	4a400104 	addi	r9,r9,4
10004368:	223ffc36 	bltu	r4,r8,1000435c <__alt_data_end+0xf800435c>
1000436c:	393fff04 	addi	r4,r7,-4
10004370:	2008d0ba 	srli	r4,r4,2
10004374:	39c000cc 	andi	r7,r7,3
10004378:	21000044 	addi	r4,r4,1
1000437c:	2109883a 	add	r4,r4,r4
10004380:	2109883a 	add	r4,r4,r4
10004384:	1907883a 	add	r3,r3,r4
10004388:	38000526 	beq	r7,zero,100043a0 <memset+0x118>
1000438c:	19cf883a 	add	r7,r3,r7
10004390:	19400005 	stb	r5,0(r3)
10004394:	18c00044 	addi	r3,r3,1
10004398:	38fffd1e 	bne	r7,r3,10004390 <__alt_data_end+0xf8004390>
1000439c:	f800283a 	ret
100043a0:	f800283a 	ret
100043a4:	2007883a 	mov	r3,r4
100043a8:	300f883a 	mov	r7,r6
100043ac:	003fc706 	br	100042cc <__alt_data_end+0xf80042cc>

100043b0 <_open_r>:
100043b0:	defffd04 	addi	sp,sp,-12
100043b4:	2805883a 	mov	r2,r5
100043b8:	dc000015 	stw	r16,0(sp)
100043bc:	04040074 	movhi	r16,4097
100043c0:	dc400115 	stw	r17,4(sp)
100043c4:	300b883a 	mov	r5,r6
100043c8:	841a2104 	addi	r16,r16,26756
100043cc:	2023883a 	mov	r17,r4
100043d0:	380d883a 	mov	r6,r7
100043d4:	1009883a 	mov	r4,r2
100043d8:	dfc00215 	stw	ra,8(sp)
100043dc:	80000015 	stw	zero,0(r16)
100043e0:	00108a80 	call	100108a8 <open>
100043e4:	00ffffc4 	movi	r3,-1
100043e8:	10c00526 	beq	r2,r3,10004400 <_open_r+0x50>
100043ec:	dfc00217 	ldw	ra,8(sp)
100043f0:	dc400117 	ldw	r17,4(sp)
100043f4:	dc000017 	ldw	r16,0(sp)
100043f8:	dec00304 	addi	sp,sp,12
100043fc:	f800283a 	ret
10004400:	80c00017 	ldw	r3,0(r16)
10004404:	183ff926 	beq	r3,zero,100043ec <__alt_data_end+0xf80043ec>
10004408:	88c00015 	stw	r3,0(r17)
1000440c:	003ff706 	br	100043ec <__alt_data_end+0xf80043ec>

10004410 <_printf_r>:
10004410:	defffd04 	addi	sp,sp,-12
10004414:	2805883a 	mov	r2,r5
10004418:	dfc00015 	stw	ra,0(sp)
1000441c:	d9800115 	stw	r6,4(sp)
10004420:	d9c00215 	stw	r7,8(sp)
10004424:	21400217 	ldw	r5,8(r4)
10004428:	d9c00104 	addi	r7,sp,4
1000442c:	100d883a 	mov	r6,r2
10004430:	0004f1c0 	call	10004f1c <___vfprintf_internal_r>
10004434:	dfc00017 	ldw	ra,0(sp)
10004438:	dec00304 	addi	sp,sp,12
1000443c:	f800283a 	ret

10004440 <printf>:
10004440:	defffc04 	addi	sp,sp,-16
10004444:	dfc00015 	stw	ra,0(sp)
10004448:	d9400115 	stw	r5,4(sp)
1000444c:	d9800215 	stw	r6,8(sp)
10004450:	d9c00315 	stw	r7,12(sp)
10004454:	00840074 	movhi	r2,4097
10004458:	1092eb04 	addi	r2,r2,19372
1000445c:	10800017 	ldw	r2,0(r2)
10004460:	200b883a 	mov	r5,r4
10004464:	d9800104 	addi	r6,sp,4
10004468:	11000217 	ldw	r4,8(r2)
1000446c:	00071f80 	call	100071f8 <__vfprintf_internal>
10004470:	dfc00017 	ldw	ra,0(sp)
10004474:	dec00404 	addi	sp,sp,16
10004478:	f800283a 	ret

1000447c <_putchar_r>:
1000447c:	21800217 	ldw	r6,8(r4)
10004480:	000a91c1 	jmpi	1000a91c <_putc_r>

10004484 <putchar>:
10004484:	00840074 	movhi	r2,4097
10004488:	1092eb04 	addi	r2,r2,19372
1000448c:	200b883a 	mov	r5,r4
10004490:	11000017 	ldw	r4,0(r2)
10004494:	21800217 	ldw	r6,8(r4)
10004498:	000a91c1 	jmpi	1000a91c <_putc_r>

1000449c <_puts_r>:
1000449c:	defff604 	addi	sp,sp,-40
100044a0:	dc000715 	stw	r16,28(sp)
100044a4:	2021883a 	mov	r16,r4
100044a8:	2809883a 	mov	r4,r5
100044ac:	dc400815 	stw	r17,32(sp)
100044b0:	dfc00915 	stw	ra,36(sp)
100044b4:	2823883a 	mov	r17,r5
100044b8:	0004e6c0 	call	10004e6c <strlen>
100044bc:	10c00044 	addi	r3,r2,1
100044c0:	d8800115 	stw	r2,4(sp)
100044c4:	00840074 	movhi	r2,4097
100044c8:	108b3604 	addi	r2,r2,11480
100044cc:	d8800215 	stw	r2,8(sp)
100044d0:	00800044 	movi	r2,1
100044d4:	d8800315 	stw	r2,12(sp)
100044d8:	00800084 	movi	r2,2
100044dc:	dc400015 	stw	r17,0(sp)
100044e0:	d8c00615 	stw	r3,24(sp)
100044e4:	dec00415 	stw	sp,16(sp)
100044e8:	d8800515 	stw	r2,20(sp)
100044ec:	80000226 	beq	r16,zero,100044f8 <_puts_r+0x5c>
100044f0:	80800e17 	ldw	r2,56(r16)
100044f4:	10001426 	beq	r2,zero,10004548 <_puts_r+0xac>
100044f8:	81400217 	ldw	r5,8(r16)
100044fc:	2880030b 	ldhu	r2,12(r5)
10004500:	10c8000c 	andi	r3,r2,8192
10004504:	1800061e 	bne	r3,zero,10004520 <_puts_r+0x84>
10004508:	29001917 	ldw	r4,100(r5)
1000450c:	00f7ffc4 	movi	r3,-8193
10004510:	10880014 	ori	r2,r2,8192
10004514:	20c6703a 	and	r3,r4,r3
10004518:	2880030d 	sth	r2,12(r5)
1000451c:	28c01915 	stw	r3,100(r5)
10004520:	d9800404 	addi	r6,sp,16
10004524:	8009883a 	mov	r4,r16
10004528:	0008fcc0 	call	10008fcc <__sfvwrite_r>
1000452c:	1000091e 	bne	r2,zero,10004554 <_puts_r+0xb8>
10004530:	00800284 	movi	r2,10
10004534:	dfc00917 	ldw	ra,36(sp)
10004538:	dc400817 	ldw	r17,32(sp)
1000453c:	dc000717 	ldw	r16,28(sp)
10004540:	dec00a04 	addi	sp,sp,40
10004544:	f800283a 	ret
10004548:	8009883a 	mov	r4,r16
1000454c:	000261c0 	call	1000261c <__sinit>
10004550:	003fe906 	br	100044f8 <__alt_data_end+0xf80044f8>
10004554:	00bfffc4 	movi	r2,-1
10004558:	003ff606 	br	10004534 <__alt_data_end+0xf8004534>

1000455c <puts>:
1000455c:	00840074 	movhi	r2,4097
10004560:	1092eb04 	addi	r2,r2,19372
10004564:	200b883a 	mov	r5,r4
10004568:	11000017 	ldw	r4,0(r2)
1000456c:	000449c1 	jmpi	1000449c <_puts_r>

10004570 <realloc>:
10004570:	00840074 	movhi	r2,4097
10004574:	1092eb04 	addi	r2,r2,19372
10004578:	280d883a 	mov	r6,r5
1000457c:	200b883a 	mov	r5,r4
10004580:	11000017 	ldw	r4,0(r2)
10004584:	00045881 	jmpi	10004588 <_realloc_r>

10004588 <_realloc_r>:
10004588:	defff604 	addi	sp,sp,-40
1000458c:	dc800215 	stw	r18,8(sp)
10004590:	dfc00915 	stw	ra,36(sp)
10004594:	df000815 	stw	fp,32(sp)
10004598:	ddc00715 	stw	r23,28(sp)
1000459c:	dd800615 	stw	r22,24(sp)
100045a0:	dd400515 	stw	r21,20(sp)
100045a4:	dd000415 	stw	r20,16(sp)
100045a8:	dcc00315 	stw	r19,12(sp)
100045ac:	dc400115 	stw	r17,4(sp)
100045b0:	dc000015 	stw	r16,0(sp)
100045b4:	3025883a 	mov	r18,r6
100045b8:	2800b726 	beq	r5,zero,10004898 <_realloc_r+0x310>
100045bc:	282b883a 	mov	r21,r5
100045c0:	2029883a 	mov	r20,r4
100045c4:	00107380 	call	10010738 <__malloc_lock>
100045c8:	a8bfff17 	ldw	r2,-4(r21)
100045cc:	043fff04 	movi	r16,-4
100045d0:	90c002c4 	addi	r3,r18,11
100045d4:	01000584 	movi	r4,22
100045d8:	acfffe04 	addi	r19,r21,-8
100045dc:	1420703a 	and	r16,r2,r16
100045e0:	20c0332e 	bgeu	r4,r3,100046b0 <_realloc_r+0x128>
100045e4:	047ffe04 	movi	r17,-8
100045e8:	1c62703a 	and	r17,r3,r17
100045ec:	8807883a 	mov	r3,r17
100045f0:	88005816 	blt	r17,zero,10004754 <_realloc_r+0x1cc>
100045f4:	8c805736 	bltu	r17,r18,10004754 <_realloc_r+0x1cc>
100045f8:	80c0300e 	bge	r16,r3,100046bc <_realloc_r+0x134>
100045fc:	07040074 	movhi	fp,4097
10004600:	e70d3e04 	addi	fp,fp,13560
10004604:	e1c00217 	ldw	r7,8(fp)
10004608:	9c09883a 	add	r4,r19,r16
1000460c:	22000117 	ldw	r8,4(r4)
10004610:	21c06326 	beq	r4,r7,100047a0 <_realloc_r+0x218>
10004614:	017fff84 	movi	r5,-2
10004618:	414a703a 	and	r5,r8,r5
1000461c:	214b883a 	add	r5,r4,r5
10004620:	29800117 	ldw	r6,4(r5)
10004624:	3180004c 	andi	r6,r6,1
10004628:	30003f26 	beq	r6,zero,10004728 <_realloc_r+0x1a0>
1000462c:	1080004c 	andi	r2,r2,1
10004630:	10008326 	beq	r2,zero,10004840 <_realloc_r+0x2b8>
10004634:	900b883a 	mov	r5,r18
10004638:	a009883a 	mov	r4,r20
1000463c:	00039340 	call	10003934 <_malloc_r>
10004640:	1025883a 	mov	r18,r2
10004644:	10011e26 	beq	r2,zero,10004ac0 <_realloc_r+0x538>
10004648:	a93fff17 	ldw	r4,-4(r21)
1000464c:	10fffe04 	addi	r3,r2,-8
10004650:	00bfff84 	movi	r2,-2
10004654:	2084703a 	and	r2,r4,r2
10004658:	9885883a 	add	r2,r19,r2
1000465c:	1880ee26 	beq	r3,r2,10004a18 <_realloc_r+0x490>
10004660:	81bfff04 	addi	r6,r16,-4
10004664:	00800904 	movi	r2,36
10004668:	1180b836 	bltu	r2,r6,1000494c <_realloc_r+0x3c4>
1000466c:	00c004c4 	movi	r3,19
10004670:	19809636 	bltu	r3,r6,100048cc <_realloc_r+0x344>
10004674:	9005883a 	mov	r2,r18
10004678:	a807883a 	mov	r3,r21
1000467c:	19000017 	ldw	r4,0(r3)
10004680:	11000015 	stw	r4,0(r2)
10004684:	19000117 	ldw	r4,4(r3)
10004688:	11000115 	stw	r4,4(r2)
1000468c:	18c00217 	ldw	r3,8(r3)
10004690:	10c00215 	stw	r3,8(r2)
10004694:	a80b883a 	mov	r5,r21
10004698:	a009883a 	mov	r4,r20
1000469c:	0002bb40 	call	10002bb4 <_free_r>
100046a0:	a009883a 	mov	r4,r20
100046a4:	001075c0 	call	1001075c <__malloc_unlock>
100046a8:	9005883a 	mov	r2,r18
100046ac:	00001206 	br	100046f8 <_realloc_r+0x170>
100046b0:	00c00404 	movi	r3,16
100046b4:	1823883a 	mov	r17,r3
100046b8:	003fce06 	br	100045f4 <__alt_data_end+0xf80045f4>
100046bc:	a825883a 	mov	r18,r21
100046c0:	8445c83a 	sub	r2,r16,r17
100046c4:	00c003c4 	movi	r3,15
100046c8:	18802636 	bltu	r3,r2,10004764 <_realloc_r+0x1dc>
100046cc:	99800117 	ldw	r6,4(r19)
100046d0:	9c07883a 	add	r3,r19,r16
100046d4:	3180004c 	andi	r6,r6,1
100046d8:	3420b03a 	or	r16,r6,r16
100046dc:	9c000115 	stw	r16,4(r19)
100046e0:	18800117 	ldw	r2,4(r3)
100046e4:	10800054 	ori	r2,r2,1
100046e8:	18800115 	stw	r2,4(r3)
100046ec:	a009883a 	mov	r4,r20
100046f0:	001075c0 	call	1001075c <__malloc_unlock>
100046f4:	9005883a 	mov	r2,r18
100046f8:	dfc00917 	ldw	ra,36(sp)
100046fc:	df000817 	ldw	fp,32(sp)
10004700:	ddc00717 	ldw	r23,28(sp)
10004704:	dd800617 	ldw	r22,24(sp)
10004708:	dd400517 	ldw	r21,20(sp)
1000470c:	dd000417 	ldw	r20,16(sp)
10004710:	dcc00317 	ldw	r19,12(sp)
10004714:	dc800217 	ldw	r18,8(sp)
10004718:	dc400117 	ldw	r17,4(sp)
1000471c:	dc000017 	ldw	r16,0(sp)
10004720:	dec00a04 	addi	sp,sp,40
10004724:	f800283a 	ret
10004728:	017fff04 	movi	r5,-4
1000472c:	414a703a 	and	r5,r8,r5
10004730:	814d883a 	add	r6,r16,r5
10004734:	30c01f16 	blt	r6,r3,100047b4 <_realloc_r+0x22c>
10004738:	20800317 	ldw	r2,12(r4)
1000473c:	20c00217 	ldw	r3,8(r4)
10004740:	a825883a 	mov	r18,r21
10004744:	3021883a 	mov	r16,r6
10004748:	18800315 	stw	r2,12(r3)
1000474c:	10c00215 	stw	r3,8(r2)
10004750:	003fdb06 	br	100046c0 <__alt_data_end+0xf80046c0>
10004754:	00800304 	movi	r2,12
10004758:	a0800015 	stw	r2,0(r20)
1000475c:	0005883a 	mov	r2,zero
10004760:	003fe506 	br	100046f8 <__alt_data_end+0xf80046f8>
10004764:	98c00117 	ldw	r3,4(r19)
10004768:	9c4b883a 	add	r5,r19,r17
1000476c:	11000054 	ori	r4,r2,1
10004770:	18c0004c 	andi	r3,r3,1
10004774:	1c62b03a 	or	r17,r3,r17
10004778:	9c400115 	stw	r17,4(r19)
1000477c:	29000115 	stw	r4,4(r5)
10004780:	2885883a 	add	r2,r5,r2
10004784:	10c00117 	ldw	r3,4(r2)
10004788:	29400204 	addi	r5,r5,8
1000478c:	a009883a 	mov	r4,r20
10004790:	18c00054 	ori	r3,r3,1
10004794:	10c00115 	stw	r3,4(r2)
10004798:	0002bb40 	call	10002bb4 <_free_r>
1000479c:	003fd306 	br	100046ec <__alt_data_end+0xf80046ec>
100047a0:	017fff04 	movi	r5,-4
100047a4:	414a703a 	and	r5,r8,r5
100047a8:	89800404 	addi	r6,r17,16
100047ac:	8151883a 	add	r8,r16,r5
100047b0:	4180590e 	bge	r8,r6,10004918 <_realloc_r+0x390>
100047b4:	1080004c 	andi	r2,r2,1
100047b8:	103f9e1e 	bne	r2,zero,10004634 <__alt_data_end+0xf8004634>
100047bc:	adbffe17 	ldw	r22,-8(r21)
100047c0:	00bfff04 	movi	r2,-4
100047c4:	9dadc83a 	sub	r22,r19,r22
100047c8:	b1800117 	ldw	r6,4(r22)
100047cc:	3084703a 	and	r2,r6,r2
100047d0:	20002026 	beq	r4,zero,10004854 <_realloc_r+0x2cc>
100047d4:	80af883a 	add	r23,r16,r2
100047d8:	b96f883a 	add	r23,r23,r5
100047dc:	21c05f26 	beq	r4,r7,1000495c <_realloc_r+0x3d4>
100047e0:	b8c01c16 	blt	r23,r3,10004854 <_realloc_r+0x2cc>
100047e4:	20800317 	ldw	r2,12(r4)
100047e8:	20c00217 	ldw	r3,8(r4)
100047ec:	81bfff04 	addi	r6,r16,-4
100047f0:	01000904 	movi	r4,36
100047f4:	18800315 	stw	r2,12(r3)
100047f8:	10c00215 	stw	r3,8(r2)
100047fc:	b0c00217 	ldw	r3,8(r22)
10004800:	b0800317 	ldw	r2,12(r22)
10004804:	b4800204 	addi	r18,r22,8
10004808:	18800315 	stw	r2,12(r3)
1000480c:	10c00215 	stw	r3,8(r2)
10004810:	21801b36 	bltu	r4,r6,10004880 <_realloc_r+0x2f8>
10004814:	008004c4 	movi	r2,19
10004818:	1180352e 	bgeu	r2,r6,100048f0 <_realloc_r+0x368>
1000481c:	a8800017 	ldw	r2,0(r21)
10004820:	b0800215 	stw	r2,8(r22)
10004824:	a8800117 	ldw	r2,4(r21)
10004828:	b0800315 	stw	r2,12(r22)
1000482c:	008006c4 	movi	r2,27
10004830:	11807f36 	bltu	r2,r6,10004a30 <_realloc_r+0x4a8>
10004834:	b0800404 	addi	r2,r22,16
10004838:	ad400204 	addi	r21,r21,8
1000483c:	00002d06 	br	100048f4 <_realloc_r+0x36c>
10004840:	adbffe17 	ldw	r22,-8(r21)
10004844:	00bfff04 	movi	r2,-4
10004848:	9dadc83a 	sub	r22,r19,r22
1000484c:	b1000117 	ldw	r4,4(r22)
10004850:	2084703a 	and	r2,r4,r2
10004854:	b03f7726 	beq	r22,zero,10004634 <__alt_data_end+0xf8004634>
10004858:	80af883a 	add	r23,r16,r2
1000485c:	b8ff7516 	blt	r23,r3,10004634 <__alt_data_end+0xf8004634>
10004860:	b0800317 	ldw	r2,12(r22)
10004864:	b0c00217 	ldw	r3,8(r22)
10004868:	81bfff04 	addi	r6,r16,-4
1000486c:	01000904 	movi	r4,36
10004870:	18800315 	stw	r2,12(r3)
10004874:	10c00215 	stw	r3,8(r2)
10004878:	b4800204 	addi	r18,r22,8
1000487c:	21bfe52e 	bgeu	r4,r6,10004814 <__alt_data_end+0xf8004814>
10004880:	a80b883a 	mov	r5,r21
10004884:	9009883a 	mov	r4,r18
10004888:	00097080 	call	10009708 <memmove>
1000488c:	b821883a 	mov	r16,r23
10004890:	b027883a 	mov	r19,r22
10004894:	003f8a06 	br	100046c0 <__alt_data_end+0xf80046c0>
10004898:	300b883a 	mov	r5,r6
1000489c:	dfc00917 	ldw	ra,36(sp)
100048a0:	df000817 	ldw	fp,32(sp)
100048a4:	ddc00717 	ldw	r23,28(sp)
100048a8:	dd800617 	ldw	r22,24(sp)
100048ac:	dd400517 	ldw	r21,20(sp)
100048b0:	dd000417 	ldw	r20,16(sp)
100048b4:	dcc00317 	ldw	r19,12(sp)
100048b8:	dc800217 	ldw	r18,8(sp)
100048bc:	dc400117 	ldw	r17,4(sp)
100048c0:	dc000017 	ldw	r16,0(sp)
100048c4:	dec00a04 	addi	sp,sp,40
100048c8:	00039341 	jmpi	10003934 <_malloc_r>
100048cc:	a8c00017 	ldw	r3,0(r21)
100048d0:	90c00015 	stw	r3,0(r18)
100048d4:	a8c00117 	ldw	r3,4(r21)
100048d8:	90c00115 	stw	r3,4(r18)
100048dc:	00c006c4 	movi	r3,27
100048e0:	19804536 	bltu	r3,r6,100049f8 <_realloc_r+0x470>
100048e4:	90800204 	addi	r2,r18,8
100048e8:	a8c00204 	addi	r3,r21,8
100048ec:	003f6306 	br	1000467c <__alt_data_end+0xf800467c>
100048f0:	9005883a 	mov	r2,r18
100048f4:	a8c00017 	ldw	r3,0(r21)
100048f8:	b821883a 	mov	r16,r23
100048fc:	b027883a 	mov	r19,r22
10004900:	10c00015 	stw	r3,0(r2)
10004904:	a8c00117 	ldw	r3,4(r21)
10004908:	10c00115 	stw	r3,4(r2)
1000490c:	a8c00217 	ldw	r3,8(r21)
10004910:	10c00215 	stw	r3,8(r2)
10004914:	003f6a06 	br	100046c0 <__alt_data_end+0xf80046c0>
10004918:	9c67883a 	add	r19,r19,r17
1000491c:	4445c83a 	sub	r2,r8,r17
10004920:	e4c00215 	stw	r19,8(fp)
10004924:	10800054 	ori	r2,r2,1
10004928:	98800115 	stw	r2,4(r19)
1000492c:	a8bfff17 	ldw	r2,-4(r21)
10004930:	a009883a 	mov	r4,r20
10004934:	1080004c 	andi	r2,r2,1
10004938:	1462b03a 	or	r17,r2,r17
1000493c:	ac7fff15 	stw	r17,-4(r21)
10004940:	001075c0 	call	1001075c <__malloc_unlock>
10004944:	a805883a 	mov	r2,r21
10004948:	003f6b06 	br	100046f8 <__alt_data_end+0xf80046f8>
1000494c:	a80b883a 	mov	r5,r21
10004950:	9009883a 	mov	r4,r18
10004954:	00097080 	call	10009708 <memmove>
10004958:	003f4e06 	br	10004694 <__alt_data_end+0xf8004694>
1000495c:	89000404 	addi	r4,r17,16
10004960:	b93fbc16 	blt	r23,r4,10004854 <__alt_data_end+0xf8004854>
10004964:	b0800317 	ldw	r2,12(r22)
10004968:	b0c00217 	ldw	r3,8(r22)
1000496c:	81bfff04 	addi	r6,r16,-4
10004970:	01000904 	movi	r4,36
10004974:	18800315 	stw	r2,12(r3)
10004978:	10c00215 	stw	r3,8(r2)
1000497c:	b4800204 	addi	r18,r22,8
10004980:	21804336 	bltu	r4,r6,10004a90 <_realloc_r+0x508>
10004984:	008004c4 	movi	r2,19
10004988:	11803f2e 	bgeu	r2,r6,10004a88 <_realloc_r+0x500>
1000498c:	a8800017 	ldw	r2,0(r21)
10004990:	b0800215 	stw	r2,8(r22)
10004994:	a8800117 	ldw	r2,4(r21)
10004998:	b0800315 	stw	r2,12(r22)
1000499c:	008006c4 	movi	r2,27
100049a0:	11803f36 	bltu	r2,r6,10004aa0 <_realloc_r+0x518>
100049a4:	b0800404 	addi	r2,r22,16
100049a8:	ad400204 	addi	r21,r21,8
100049ac:	a8c00017 	ldw	r3,0(r21)
100049b0:	10c00015 	stw	r3,0(r2)
100049b4:	a8c00117 	ldw	r3,4(r21)
100049b8:	10c00115 	stw	r3,4(r2)
100049bc:	a8c00217 	ldw	r3,8(r21)
100049c0:	10c00215 	stw	r3,8(r2)
100049c4:	b447883a 	add	r3,r22,r17
100049c8:	bc45c83a 	sub	r2,r23,r17
100049cc:	e0c00215 	stw	r3,8(fp)
100049d0:	10800054 	ori	r2,r2,1
100049d4:	18800115 	stw	r2,4(r3)
100049d8:	b0800117 	ldw	r2,4(r22)
100049dc:	a009883a 	mov	r4,r20
100049e0:	1080004c 	andi	r2,r2,1
100049e4:	1462b03a 	or	r17,r2,r17
100049e8:	b4400115 	stw	r17,4(r22)
100049ec:	001075c0 	call	1001075c <__malloc_unlock>
100049f0:	9005883a 	mov	r2,r18
100049f4:	003f4006 	br	100046f8 <__alt_data_end+0xf80046f8>
100049f8:	a8c00217 	ldw	r3,8(r21)
100049fc:	90c00215 	stw	r3,8(r18)
10004a00:	a8c00317 	ldw	r3,12(r21)
10004a04:	90c00315 	stw	r3,12(r18)
10004a08:	30801126 	beq	r6,r2,10004a50 <_realloc_r+0x4c8>
10004a0c:	90800404 	addi	r2,r18,16
10004a10:	a8c00404 	addi	r3,r21,16
10004a14:	003f1906 	br	1000467c <__alt_data_end+0xf800467c>
10004a18:	90ffff17 	ldw	r3,-4(r18)
10004a1c:	00bfff04 	movi	r2,-4
10004a20:	a825883a 	mov	r18,r21
10004a24:	1884703a 	and	r2,r3,r2
10004a28:	80a1883a 	add	r16,r16,r2
10004a2c:	003f2406 	br	100046c0 <__alt_data_end+0xf80046c0>
10004a30:	a8800217 	ldw	r2,8(r21)
10004a34:	b0800415 	stw	r2,16(r22)
10004a38:	a8800317 	ldw	r2,12(r21)
10004a3c:	b0800515 	stw	r2,20(r22)
10004a40:	31000a26 	beq	r6,r4,10004a6c <_realloc_r+0x4e4>
10004a44:	b0800604 	addi	r2,r22,24
10004a48:	ad400404 	addi	r21,r21,16
10004a4c:	003fa906 	br	100048f4 <__alt_data_end+0xf80048f4>
10004a50:	a9000417 	ldw	r4,16(r21)
10004a54:	90800604 	addi	r2,r18,24
10004a58:	a8c00604 	addi	r3,r21,24
10004a5c:	91000415 	stw	r4,16(r18)
10004a60:	a9000517 	ldw	r4,20(r21)
10004a64:	91000515 	stw	r4,20(r18)
10004a68:	003f0406 	br	1000467c <__alt_data_end+0xf800467c>
10004a6c:	a8c00417 	ldw	r3,16(r21)
10004a70:	ad400604 	addi	r21,r21,24
10004a74:	b0800804 	addi	r2,r22,32
10004a78:	b0c00615 	stw	r3,24(r22)
10004a7c:	a8ffff17 	ldw	r3,-4(r21)
10004a80:	b0c00715 	stw	r3,28(r22)
10004a84:	003f9b06 	br	100048f4 <__alt_data_end+0xf80048f4>
10004a88:	9005883a 	mov	r2,r18
10004a8c:	003fc706 	br	100049ac <__alt_data_end+0xf80049ac>
10004a90:	a80b883a 	mov	r5,r21
10004a94:	9009883a 	mov	r4,r18
10004a98:	00097080 	call	10009708 <memmove>
10004a9c:	003fc906 	br	100049c4 <__alt_data_end+0xf80049c4>
10004aa0:	a8800217 	ldw	r2,8(r21)
10004aa4:	b0800415 	stw	r2,16(r22)
10004aa8:	a8800317 	ldw	r2,12(r21)
10004aac:	b0800515 	stw	r2,20(r22)
10004ab0:	31000726 	beq	r6,r4,10004ad0 <_realloc_r+0x548>
10004ab4:	b0800604 	addi	r2,r22,24
10004ab8:	ad400404 	addi	r21,r21,16
10004abc:	003fbb06 	br	100049ac <__alt_data_end+0xf80049ac>
10004ac0:	a009883a 	mov	r4,r20
10004ac4:	001075c0 	call	1001075c <__malloc_unlock>
10004ac8:	0005883a 	mov	r2,zero
10004acc:	003f0a06 	br	100046f8 <__alt_data_end+0xf80046f8>
10004ad0:	a8c00417 	ldw	r3,16(r21)
10004ad4:	ad400604 	addi	r21,r21,24
10004ad8:	b0800804 	addi	r2,r22,32
10004adc:	b0c00615 	stw	r3,24(r22)
10004ae0:	a8ffff17 	ldw	r3,-4(r21)
10004ae4:	b0c00715 	stw	r3,28(r22)
10004ae8:	003fb006 	br	100049ac <__alt_data_end+0xf80049ac>

10004aec <lflush>:
10004aec:	2080030b 	ldhu	r2,12(r4)
10004af0:	00c00244 	movi	r3,9
10004af4:	1080024c 	andi	r2,r2,9
10004af8:	10c00226 	beq	r2,r3,10004b04 <lflush+0x18>
10004afc:	0005883a 	mov	r2,zero
10004b00:	f800283a 	ret
10004b04:	000228c1 	jmpi	1000228c <fflush>

10004b08 <__srefill_r>:
10004b08:	defffc04 	addi	sp,sp,-16
10004b0c:	dc400115 	stw	r17,4(sp)
10004b10:	dc000015 	stw	r16,0(sp)
10004b14:	dfc00315 	stw	ra,12(sp)
10004b18:	dc800215 	stw	r18,8(sp)
10004b1c:	2023883a 	mov	r17,r4
10004b20:	2821883a 	mov	r16,r5
10004b24:	20000226 	beq	r4,zero,10004b30 <__srefill_r+0x28>
10004b28:	20800e17 	ldw	r2,56(r4)
10004b2c:	10003c26 	beq	r2,zero,10004c20 <__srefill_r+0x118>
10004b30:	80c0030b 	ldhu	r3,12(r16)
10004b34:	1908000c 	andi	r4,r3,8192
10004b38:	1805883a 	mov	r2,r3
10004b3c:	2000071e 	bne	r4,zero,10004b5c <__srefill_r+0x54>
10004b40:	81001917 	ldw	r4,100(r16)
10004b44:	18880014 	ori	r2,r3,8192
10004b48:	00f7ffc4 	movi	r3,-8193
10004b4c:	20c8703a 	and	r4,r4,r3
10004b50:	8080030d 	sth	r2,12(r16)
10004b54:	1007883a 	mov	r3,r2
10004b58:	81001915 	stw	r4,100(r16)
10004b5c:	80000115 	stw	zero,4(r16)
10004b60:	1100080c 	andi	r4,r2,32
10004b64:	2000571e 	bne	r4,zero,10004cc4 <__srefill_r+0x1bc>
10004b68:	1100010c 	andi	r4,r2,4
10004b6c:	20001f26 	beq	r4,zero,10004bec <__srefill_r+0xe4>
10004b70:	81400c17 	ldw	r5,48(r16)
10004b74:	28000826 	beq	r5,zero,10004b98 <__srefill_r+0x90>
10004b78:	80801004 	addi	r2,r16,64
10004b7c:	28800226 	beq	r5,r2,10004b88 <__srefill_r+0x80>
10004b80:	8809883a 	mov	r4,r17
10004b84:	0002bb40 	call	10002bb4 <_free_r>
10004b88:	80800f17 	ldw	r2,60(r16)
10004b8c:	80000c15 	stw	zero,48(r16)
10004b90:	80800115 	stw	r2,4(r16)
10004b94:	1000391e 	bne	r2,zero,10004c7c <__srefill_r+0x174>
10004b98:	80800417 	ldw	r2,16(r16)
10004b9c:	10004b26 	beq	r2,zero,10004ccc <__srefill_r+0x1c4>
10004ba0:	8480030b 	ldhu	r18,12(r16)
10004ba4:	908000cc 	andi	r2,r18,3
10004ba8:	10001f1e 	bne	r2,zero,10004c28 <__srefill_r+0x120>
10004bac:	81800417 	ldw	r6,16(r16)
10004bb0:	80800817 	ldw	r2,32(r16)
10004bb4:	81c00517 	ldw	r7,20(r16)
10004bb8:	81400717 	ldw	r5,28(r16)
10004bbc:	81800015 	stw	r6,0(r16)
10004bc0:	8809883a 	mov	r4,r17
10004bc4:	103ee83a 	callr	r2
10004bc8:	80800115 	stw	r2,4(r16)
10004bcc:	00800e0e 	bge	zero,r2,10004c08 <__srefill_r+0x100>
10004bd0:	0005883a 	mov	r2,zero
10004bd4:	dfc00317 	ldw	ra,12(sp)
10004bd8:	dc800217 	ldw	r18,8(sp)
10004bdc:	dc400117 	ldw	r17,4(sp)
10004be0:	dc000017 	ldw	r16,0(sp)
10004be4:	dec00404 	addi	sp,sp,16
10004be8:	f800283a 	ret
10004bec:	1100040c 	andi	r4,r2,16
10004bf0:	20003026 	beq	r4,zero,10004cb4 <__srefill_r+0x1ac>
10004bf4:	1080020c 	andi	r2,r2,8
10004bf8:	1000241e 	bne	r2,zero,10004c8c <__srefill_r+0x184>
10004bfc:	18c00114 	ori	r3,r3,4
10004c00:	80c0030d 	sth	r3,12(r16)
10004c04:	003fe406 	br	10004b98 <__alt_data_end+0xf8004b98>
10004c08:	80c0030b 	ldhu	r3,12(r16)
10004c0c:	1000161e 	bne	r2,zero,10004c68 <__srefill_r+0x160>
10004c10:	18c00814 	ori	r3,r3,32
10004c14:	00bfffc4 	movi	r2,-1
10004c18:	80c0030d 	sth	r3,12(r16)
10004c1c:	003fed06 	br	10004bd4 <__alt_data_end+0xf8004bd4>
10004c20:	000261c0 	call	1000261c <__sinit>
10004c24:	003fc206 	br	10004b30 <__alt_data_end+0xf8004b30>
10004c28:	00840074 	movhi	r2,4097
10004c2c:	1092ea04 	addi	r2,r2,19368
10004c30:	11000017 	ldw	r4,0(r2)
10004c34:	01440034 	movhi	r5,4096
10004c38:	00800044 	movi	r2,1
10004c3c:	2952bb04 	addi	r5,r5,19180
10004c40:	8080030d 	sth	r2,12(r16)
10004c44:	00034b80 	call	100034b8 <_fwalk>
10004c48:	00800244 	movi	r2,9
10004c4c:	8480030d 	sth	r18,12(r16)
10004c50:	9480024c 	andi	r18,r18,9
10004c54:	90bfd51e 	bne	r18,r2,10004bac <__alt_data_end+0xf8004bac>
10004c58:	800b883a 	mov	r5,r16
10004c5c:	8809883a 	mov	r4,r17
10004c60:	00020140 	call	10002014 <__sflush_r>
10004c64:	003fd106 	br	10004bac <__alt_data_end+0xf8004bac>
10004c68:	18c01014 	ori	r3,r3,64
10004c6c:	80000115 	stw	zero,4(r16)
10004c70:	00bfffc4 	movi	r2,-1
10004c74:	80c0030d 	sth	r3,12(r16)
10004c78:	003fd606 	br	10004bd4 <__alt_data_end+0xf8004bd4>
10004c7c:	80c00e17 	ldw	r3,56(r16)
10004c80:	0005883a 	mov	r2,zero
10004c84:	80c00015 	stw	r3,0(r16)
10004c88:	003fd206 	br	10004bd4 <__alt_data_end+0xf8004bd4>
10004c8c:	800b883a 	mov	r5,r16
10004c90:	8809883a 	mov	r4,r17
10004c94:	00022300 	call	10002230 <_fflush_r>
10004c98:	10000a1e 	bne	r2,zero,10004cc4 <__srefill_r+0x1bc>
10004c9c:	8080030b 	ldhu	r2,12(r16)
10004ca0:	00fffdc4 	movi	r3,-9
10004ca4:	80000215 	stw	zero,8(r16)
10004ca8:	1886703a 	and	r3,r3,r2
10004cac:	80000615 	stw	zero,24(r16)
10004cb0:	003fd206 	br	10004bfc <__alt_data_end+0xf8004bfc>
10004cb4:	00800244 	movi	r2,9
10004cb8:	88800015 	stw	r2,0(r17)
10004cbc:	18c01014 	ori	r3,r3,64
10004cc0:	80c0030d 	sth	r3,12(r16)
10004cc4:	00bfffc4 	movi	r2,-1
10004cc8:	003fc206 	br	10004bd4 <__alt_data_end+0xf8004bd4>
10004ccc:	800b883a 	mov	r5,r16
10004cd0:	8809883a 	mov	r4,r17
10004cd4:	00037500 	call	10003750 <__smakebuf_r>
10004cd8:	003fb106 	br	10004ba0 <__alt_data_end+0xf8004ba0>

10004cdc <_sbrk_r>:
10004cdc:	defffd04 	addi	sp,sp,-12
10004ce0:	dc000015 	stw	r16,0(sp)
10004ce4:	04040074 	movhi	r16,4097
10004ce8:	dc400115 	stw	r17,4(sp)
10004cec:	841a2104 	addi	r16,r16,26756
10004cf0:	2023883a 	mov	r17,r4
10004cf4:	2809883a 	mov	r4,r5
10004cf8:	dfc00215 	stw	ra,8(sp)
10004cfc:	80000015 	stw	zero,0(r16)
10004d00:	0010a880 	call	10010a88 <sbrk>
10004d04:	00ffffc4 	movi	r3,-1
10004d08:	10c00526 	beq	r2,r3,10004d20 <_sbrk_r+0x44>
10004d0c:	dfc00217 	ldw	ra,8(sp)
10004d10:	dc400117 	ldw	r17,4(sp)
10004d14:	dc000017 	ldw	r16,0(sp)
10004d18:	dec00304 	addi	sp,sp,12
10004d1c:	f800283a 	ret
10004d20:	80c00017 	ldw	r3,0(r16)
10004d24:	183ff926 	beq	r3,zero,10004d0c <__alt_data_end+0xf8004d0c>
10004d28:	88c00015 	stw	r3,0(r17)
10004d2c:	003ff706 	br	10004d0c <__alt_data_end+0xf8004d0c>

10004d30 <__sread>:
10004d30:	defffe04 	addi	sp,sp,-8
10004d34:	dc000015 	stw	r16,0(sp)
10004d38:	2821883a 	mov	r16,r5
10004d3c:	2940038f 	ldh	r5,14(r5)
10004d40:	dfc00115 	stw	ra,4(sp)
10004d44:	000aa840 	call	1000aa84 <_read_r>
10004d48:	10000716 	blt	r2,zero,10004d68 <__sread+0x38>
10004d4c:	80c01417 	ldw	r3,80(r16)
10004d50:	1887883a 	add	r3,r3,r2
10004d54:	80c01415 	stw	r3,80(r16)
10004d58:	dfc00117 	ldw	ra,4(sp)
10004d5c:	dc000017 	ldw	r16,0(sp)
10004d60:	dec00204 	addi	sp,sp,8
10004d64:	f800283a 	ret
10004d68:	80c0030b 	ldhu	r3,12(r16)
10004d6c:	18fbffcc 	andi	r3,r3,61439
10004d70:	80c0030d 	sth	r3,12(r16)
10004d74:	dfc00117 	ldw	ra,4(sp)
10004d78:	dc000017 	ldw	r16,0(sp)
10004d7c:	dec00204 	addi	sp,sp,8
10004d80:	f800283a 	ret

10004d84 <__seofread>:
10004d84:	0005883a 	mov	r2,zero
10004d88:	f800283a 	ret

10004d8c <__swrite>:
10004d8c:	2880030b 	ldhu	r2,12(r5)
10004d90:	defffb04 	addi	sp,sp,-20
10004d94:	dcc00315 	stw	r19,12(sp)
10004d98:	dc800215 	stw	r18,8(sp)
10004d9c:	dc400115 	stw	r17,4(sp)
10004da0:	dc000015 	stw	r16,0(sp)
10004da4:	dfc00415 	stw	ra,16(sp)
10004da8:	10c0400c 	andi	r3,r2,256
10004dac:	2821883a 	mov	r16,r5
10004db0:	2023883a 	mov	r17,r4
10004db4:	3025883a 	mov	r18,r6
10004db8:	3827883a 	mov	r19,r7
10004dbc:	18000526 	beq	r3,zero,10004dd4 <__swrite+0x48>
10004dc0:	2940038f 	ldh	r5,14(r5)
10004dc4:	01c00084 	movi	r7,2
10004dc8:	000d883a 	mov	r6,zero
10004dcc:	00095c40 	call	100095c4 <_lseek_r>
10004dd0:	8080030b 	ldhu	r2,12(r16)
10004dd4:	8140038f 	ldh	r5,14(r16)
10004dd8:	10bbffcc 	andi	r2,r2,61439
10004ddc:	980f883a 	mov	r7,r19
10004de0:	900d883a 	mov	r6,r18
10004de4:	8809883a 	mov	r4,r17
10004de8:	8080030d 	sth	r2,12(r16)
10004dec:	dfc00417 	ldw	ra,16(sp)
10004df0:	dcc00317 	ldw	r19,12(sp)
10004df4:	dc800217 	ldw	r18,8(sp)
10004df8:	dc400117 	ldw	r17,4(sp)
10004dfc:	dc000017 	ldw	r16,0(sp)
10004e00:	dec00504 	addi	sp,sp,20
10004e04:	00072d01 	jmpi	100072d0 <_write_r>

10004e08 <__sseek>:
10004e08:	defffe04 	addi	sp,sp,-8
10004e0c:	dc000015 	stw	r16,0(sp)
10004e10:	2821883a 	mov	r16,r5
10004e14:	2940038f 	ldh	r5,14(r5)
10004e18:	dfc00115 	stw	ra,4(sp)
10004e1c:	00095c40 	call	100095c4 <_lseek_r>
10004e20:	00ffffc4 	movi	r3,-1
10004e24:	10c00826 	beq	r2,r3,10004e48 <__sseek+0x40>
10004e28:	80c0030b 	ldhu	r3,12(r16)
10004e2c:	80801415 	stw	r2,80(r16)
10004e30:	18c40014 	ori	r3,r3,4096
10004e34:	80c0030d 	sth	r3,12(r16)
10004e38:	dfc00117 	ldw	ra,4(sp)
10004e3c:	dc000017 	ldw	r16,0(sp)
10004e40:	dec00204 	addi	sp,sp,8
10004e44:	f800283a 	ret
10004e48:	80c0030b 	ldhu	r3,12(r16)
10004e4c:	18fbffcc 	andi	r3,r3,61439
10004e50:	80c0030d 	sth	r3,12(r16)
10004e54:	dfc00117 	ldw	ra,4(sp)
10004e58:	dc000017 	ldw	r16,0(sp)
10004e5c:	dec00204 	addi	sp,sp,8
10004e60:	f800283a 	ret

10004e64 <__sclose>:
10004e64:	2940038f 	ldh	r5,14(r5)
10004e68:	00074841 	jmpi	10007484 <_close_r>

10004e6c <strlen>:
10004e6c:	208000cc 	andi	r2,r4,3
10004e70:	10002026 	beq	r2,zero,10004ef4 <strlen+0x88>
10004e74:	20800007 	ldb	r2,0(r4)
10004e78:	10002026 	beq	r2,zero,10004efc <strlen+0x90>
10004e7c:	2005883a 	mov	r2,r4
10004e80:	00000206 	br	10004e8c <strlen+0x20>
10004e84:	10c00007 	ldb	r3,0(r2)
10004e88:	18001826 	beq	r3,zero,10004eec <strlen+0x80>
10004e8c:	10800044 	addi	r2,r2,1
10004e90:	10c000cc 	andi	r3,r2,3
10004e94:	183ffb1e 	bne	r3,zero,10004e84 <__alt_data_end+0xf8004e84>
10004e98:	10c00017 	ldw	r3,0(r2)
10004e9c:	01ffbff4 	movhi	r7,65279
10004ea0:	39ffbfc4 	addi	r7,r7,-257
10004ea4:	00ca303a 	nor	r5,zero,r3
10004ea8:	01a02074 	movhi	r6,32897
10004eac:	19c7883a 	add	r3,r3,r7
10004eb0:	31a02004 	addi	r6,r6,-32640
10004eb4:	1946703a 	and	r3,r3,r5
10004eb8:	1986703a 	and	r3,r3,r6
10004ebc:	1800091e 	bne	r3,zero,10004ee4 <strlen+0x78>
10004ec0:	10800104 	addi	r2,r2,4
10004ec4:	10c00017 	ldw	r3,0(r2)
10004ec8:	19cb883a 	add	r5,r3,r7
10004ecc:	00c6303a 	nor	r3,zero,r3
10004ed0:	28c6703a 	and	r3,r5,r3
10004ed4:	1986703a 	and	r3,r3,r6
10004ed8:	183ff926 	beq	r3,zero,10004ec0 <__alt_data_end+0xf8004ec0>
10004edc:	00000106 	br	10004ee4 <strlen+0x78>
10004ee0:	10800044 	addi	r2,r2,1
10004ee4:	10c00007 	ldb	r3,0(r2)
10004ee8:	183ffd1e 	bne	r3,zero,10004ee0 <__alt_data_end+0xf8004ee0>
10004eec:	1105c83a 	sub	r2,r2,r4
10004ef0:	f800283a 	ret
10004ef4:	2005883a 	mov	r2,r4
10004ef8:	003fe706 	br	10004e98 <__alt_data_end+0xf8004e98>
10004efc:	0005883a 	mov	r2,zero
10004f00:	f800283a 	ret

10004f04 <_vfiprintf_r>:
10004f04:	deffff04 	addi	sp,sp,-4
10004f08:	dfc00015 	stw	ra,0(sp)
10004f0c:	000b04c0 	call	1000b04c <___vfiprintf_internal_r>
10004f10:	dfc00017 	ldw	ra,0(sp)
10004f14:	dec00104 	addi	sp,sp,4
10004f18:	f800283a 	ret

10004f1c <___vfprintf_internal_r>:
10004f1c:	deffb804 	addi	sp,sp,-288
10004f20:	dfc04715 	stw	ra,284(sp)
10004f24:	ddc04515 	stw	r23,276(sp)
10004f28:	dd404315 	stw	r21,268(sp)
10004f2c:	d9002d15 	stw	r4,180(sp)
10004f30:	282f883a 	mov	r23,r5
10004f34:	302b883a 	mov	r21,r6
10004f38:	d9c02e15 	stw	r7,184(sp)
10004f3c:	df004615 	stw	fp,280(sp)
10004f40:	dd804415 	stw	r22,272(sp)
10004f44:	dd004215 	stw	r20,264(sp)
10004f48:	dcc04115 	stw	r19,260(sp)
10004f4c:	dc804015 	stw	r18,256(sp)
10004f50:	dc403f15 	stw	r17,252(sp)
10004f54:	dc003e15 	stw	r16,248(sp)
10004f58:	00095940 	call	10009594 <_localeconv_r>
10004f5c:	10800017 	ldw	r2,0(r2)
10004f60:	1009883a 	mov	r4,r2
10004f64:	d8803415 	stw	r2,208(sp)
10004f68:	0004e6c0 	call	10004e6c <strlen>
10004f6c:	d8803715 	stw	r2,220(sp)
10004f70:	d8802d17 	ldw	r2,180(sp)
10004f74:	10000226 	beq	r2,zero,10004f80 <___vfprintf_internal_r+0x64>
10004f78:	10800e17 	ldw	r2,56(r2)
10004f7c:	1000fb26 	beq	r2,zero,1000536c <___vfprintf_internal_r+0x450>
10004f80:	b880030b 	ldhu	r2,12(r23)
10004f84:	10c8000c 	andi	r3,r2,8192
10004f88:	1800061e 	bne	r3,zero,10004fa4 <___vfprintf_internal_r+0x88>
10004f8c:	b9001917 	ldw	r4,100(r23)
10004f90:	00f7ffc4 	movi	r3,-8193
10004f94:	10880014 	ori	r2,r2,8192
10004f98:	20c6703a 	and	r3,r4,r3
10004f9c:	b880030d 	sth	r2,12(r23)
10004fa0:	b8c01915 	stw	r3,100(r23)
10004fa4:	10c0020c 	andi	r3,r2,8
10004fa8:	1800c326 	beq	r3,zero,100052b8 <___vfprintf_internal_r+0x39c>
10004fac:	b8c00417 	ldw	r3,16(r23)
10004fb0:	1800c126 	beq	r3,zero,100052b8 <___vfprintf_internal_r+0x39c>
10004fb4:	1080068c 	andi	r2,r2,26
10004fb8:	00c00284 	movi	r3,10
10004fbc:	10c0c626 	beq	r2,r3,100052d8 <___vfprintf_internal_r+0x3bc>
10004fc0:	d8c00404 	addi	r3,sp,16
10004fc4:	05040074 	movhi	r20,4097
10004fc8:	d9001e04 	addi	r4,sp,120
10004fcc:	a50b4784 	addi	r20,r20,11550
10004fd0:	d8c01e15 	stw	r3,120(sp)
10004fd4:	d8002015 	stw	zero,128(sp)
10004fd8:	d8001f15 	stw	zero,124(sp)
10004fdc:	d8003315 	stw	zero,204(sp)
10004fe0:	d8003615 	stw	zero,216(sp)
10004fe4:	d8003815 	stw	zero,224(sp)
10004fe8:	1811883a 	mov	r8,r3
10004fec:	d8003915 	stw	zero,228(sp)
10004ff0:	d8003a15 	stw	zero,232(sp)
10004ff4:	d8002f15 	stw	zero,188(sp)
10004ff8:	d9002815 	stw	r4,160(sp)
10004ffc:	a8800007 	ldb	r2,0(r21)
10005000:	10028b26 	beq	r2,zero,10005a30 <___vfprintf_internal_r+0xb14>
10005004:	00c00944 	movi	r3,37
10005008:	a823883a 	mov	r17,r21
1000500c:	10c0021e 	bne	r2,r3,10005018 <___vfprintf_internal_r+0xfc>
10005010:	00001406 	br	10005064 <___vfprintf_internal_r+0x148>
10005014:	10c00326 	beq	r2,r3,10005024 <___vfprintf_internal_r+0x108>
10005018:	8c400044 	addi	r17,r17,1
1000501c:	88800007 	ldb	r2,0(r17)
10005020:	103ffc1e 	bne	r2,zero,10005014 <__alt_data_end+0xf8005014>
10005024:	8d61c83a 	sub	r16,r17,r21
10005028:	80000e26 	beq	r16,zero,10005064 <___vfprintf_internal_r+0x148>
1000502c:	d8c02017 	ldw	r3,128(sp)
10005030:	d8801f17 	ldw	r2,124(sp)
10005034:	45400015 	stw	r21,0(r8)
10005038:	1c07883a 	add	r3,r3,r16
1000503c:	10800044 	addi	r2,r2,1
10005040:	d8c02015 	stw	r3,128(sp)
10005044:	44000115 	stw	r16,4(r8)
10005048:	d8801f15 	stw	r2,124(sp)
1000504c:	00c001c4 	movi	r3,7
10005050:	1880a916 	blt	r3,r2,100052f8 <___vfprintf_internal_r+0x3dc>
10005054:	42000204 	addi	r8,r8,8
10005058:	d9402f17 	ldw	r5,188(sp)
1000505c:	2c0b883a 	add	r5,r5,r16
10005060:	d9402f15 	stw	r5,188(sp)
10005064:	88800007 	ldb	r2,0(r17)
10005068:	1000aa26 	beq	r2,zero,10005314 <___vfprintf_internal_r+0x3f8>
1000506c:	8d400044 	addi	r21,r17,1
10005070:	8c400047 	ldb	r17,1(r17)
10005074:	0021883a 	mov	r16,zero
10005078:	00bfffc4 	movi	r2,-1
1000507c:	0025883a 	mov	r18,zero
10005080:	dc002905 	stb	r16,164(sp)
10005084:	d8002785 	stb	zero,158(sp)
10005088:	d8002b05 	stb	zero,172(sp)
1000508c:	d8802a15 	stw	r2,168(sp)
10005090:	d8003115 	stw	zero,196(sp)
10005094:	04c01604 	movi	r19,88
10005098:	05800244 	movi	r22,9
1000509c:	9021883a 	mov	r16,r18
100050a0:	4039883a 	mov	fp,r8
100050a4:	ad400044 	addi	r21,r21,1
100050a8:	88bff804 	addi	r2,r17,-32
100050ac:	98833236 	bltu	r19,r2,10005d78 <___vfprintf_internal_r+0xe5c>
100050b0:	100490ba 	slli	r2,r2,2
100050b4:	00c40034 	movhi	r3,4096
100050b8:	18d43204 	addi	r3,r3,20680
100050bc:	10c5883a 	add	r2,r2,r3
100050c0:	10800017 	ldw	r2,0(r2)
100050c4:	1000683a 	jmp	r2
100050c8:	10005c70 	cmpltui	zero,r2,369
100050cc:	10005d78 	rdprs	zero,r2,373
100050d0:	10005d78 	rdprs	zero,r2,373
100050d4:	10005c90 	cmplti	zero,r2,370
100050d8:	10005d78 	rdprs	zero,r2,373
100050dc:	10005d78 	rdprs	zero,r2,373
100050e0:	10005d78 	rdprs	zero,r2,373
100050e4:	10005d78 	rdprs	zero,r2,373
100050e8:	10005d78 	rdprs	zero,r2,373
100050ec:	10005d78 	rdprs	zero,r2,373
100050f0:	10005378 	rdprs	zero,r2,333
100050f4:	10005b80 	call	110005b8 <_gp+0xfe3a10>
100050f8:	10005d78 	rdprs	zero,r2,373
100050fc:	1000523c 	xorhi	zero,r2,328
10005100:	1000539c 	xori	zero,r2,334
10005104:	10005d78 	rdprs	zero,r2,373
10005108:	100053ec 	andhi	zero,r2,335
1000510c:	100053f8 	rdprs	zero,r2,335
10005110:	100053f8 	rdprs	zero,r2,335
10005114:	100053f8 	rdprs	zero,r2,335
10005118:	100053f8 	rdprs	zero,r2,335
1000511c:	100053f8 	rdprs	zero,r2,335
10005120:	100053f8 	rdprs	zero,r2,335
10005124:	100053f8 	rdprs	zero,r2,335
10005128:	100053f8 	rdprs	zero,r2,335
1000512c:	100053f8 	rdprs	zero,r2,335
10005130:	10005d78 	rdprs	zero,r2,373
10005134:	10005d78 	rdprs	zero,r2,373
10005138:	10005d78 	rdprs	zero,r2,373
1000513c:	10005d78 	rdprs	zero,r2,373
10005140:	10005d78 	rdprs	zero,r2,373
10005144:	10005d78 	rdprs	zero,r2,373
10005148:	10005d78 	rdprs	zero,r2,373
1000514c:	10005d78 	rdprs	zero,r2,373
10005150:	10005d78 	rdprs	zero,r2,373
10005154:	10005d78 	rdprs	zero,r2,373
10005158:	10005434 	orhi	zero,r2,336
1000515c:	100054fc 	xorhi	zero,r2,339
10005160:	10005d78 	rdprs	zero,r2,373
10005164:	100054fc 	xorhi	zero,r2,339
10005168:	10005d78 	rdprs	zero,r2,373
1000516c:	10005d78 	rdprs	zero,r2,373
10005170:	10005d78 	rdprs	zero,r2,373
10005174:	10005d78 	rdprs	zero,r2,373
10005178:	100055a8 	cmpgeui	zero,r2,342
1000517c:	10005d78 	rdprs	zero,r2,373
10005180:	10005d78 	rdprs	zero,r2,373
10005184:	100055b4 	orhi	zero,r2,342
10005188:	10005d78 	rdprs	zero,r2,373
1000518c:	10005d78 	rdprs	zero,r2,373
10005190:	10005d78 	rdprs	zero,r2,373
10005194:	10005d78 	rdprs	zero,r2,373
10005198:	10005d78 	rdprs	zero,r2,373
1000519c:	10005a38 	rdprs	zero,r2,360
100051a0:	10005d78 	rdprs	zero,r2,373
100051a4:	10005d78 	rdprs	zero,r2,373
100051a8:	10005aa4 	muli	zero,r2,362
100051ac:	10005d78 	rdprs	zero,r2,373
100051b0:	10005d78 	rdprs	zero,r2,373
100051b4:	10005d78 	rdprs	zero,r2,373
100051b8:	10005d78 	rdprs	zero,r2,373
100051bc:	10005d78 	rdprs	zero,r2,373
100051c0:	10005d78 	rdprs	zero,r2,373
100051c4:	10005d78 	rdprs	zero,r2,373
100051c8:	10005d78 	rdprs	zero,r2,373
100051cc:	10005d78 	rdprs	zero,r2,373
100051d0:	10005d78 	rdprs	zero,r2,373
100051d4:	10005d1c 	xori	zero,r2,372
100051d8:	10005c9c 	xori	zero,r2,370
100051dc:	100054fc 	xorhi	zero,r2,339
100051e0:	100054fc 	xorhi	zero,r2,339
100051e4:	100054fc 	xorhi	zero,r2,339
100051e8:	10005cbc 	xorhi	zero,r2,370
100051ec:	10005c9c 	xori	zero,r2,370
100051f0:	10005d78 	rdprs	zero,r2,373
100051f4:	10005d78 	rdprs	zero,r2,373
100051f8:	10005cc8 	cmpgei	zero,r2,371
100051fc:	10005d78 	rdprs	zero,r2,373
10005200:	10005cdc 	xori	zero,r2,371
10005204:	10005b60 	cmpeqi	zero,r2,365
10005208:	10005248 	cmpgei	zero,r2,329
1000520c:	10005b98 	cmpnei	zero,r2,366
10005210:	10005d78 	rdprs	zero,r2,373
10005214:	10005ba4 	muli	zero,r2,366
10005218:	10005d78 	rdprs	zero,r2,373
1000521c:	10005c08 	cmpgei	zero,r2,368
10005220:	10005d78 	rdprs	zero,r2,373
10005224:	10005d78 	rdprs	zero,r2,373
10005228:	10005c28 	cmpgeui	zero,r2,368
1000522c:	d8c03117 	ldw	r3,196(sp)
10005230:	d8802e15 	stw	r2,184(sp)
10005234:	00c7c83a 	sub	r3,zero,r3
10005238:	d8c03115 	stw	r3,196(sp)
1000523c:	84000114 	ori	r16,r16,4
10005240:	ac400007 	ldb	r17,0(r21)
10005244:	003f9706 	br	100050a4 <__alt_data_end+0xf80050a4>
10005248:	00800c04 	movi	r2,48
1000524c:	d8802705 	stb	r2,156(sp)
10005250:	00801e04 	movi	r2,120
10005254:	d8802745 	stb	r2,157(sp)
10005258:	d9002a17 	ldw	r4,168(sp)
1000525c:	d8802e17 	ldw	r2,184(sp)
10005260:	d8002785 	stb	zero,158(sp)
10005264:	e011883a 	mov	r8,fp
10005268:	10c00104 	addi	r3,r2,4
1000526c:	14c00017 	ldw	r19,0(r2)
10005270:	002d883a 	mov	r22,zero
10005274:	80800094 	ori	r2,r16,2
10005278:	2002ca16 	blt	r4,zero,10005da4 <___vfprintf_internal_r+0xe88>
1000527c:	00bfdfc4 	movi	r2,-129
10005280:	80a4703a 	and	r18,r16,r2
10005284:	d8c02e15 	stw	r3,184(sp)
10005288:	94800094 	ori	r18,r18,2
1000528c:	9802b41e 	bne	r19,zero,10005d60 <___vfprintf_internal_r+0xe44>
10005290:	01440074 	movhi	r5,4097
10005294:	294b4004 	addi	r5,r5,11520
10005298:	d9403915 	stw	r5,228(sp)
1000529c:	04401e04 	movi	r17,120
100052a0:	d8802a17 	ldw	r2,168(sp)
100052a4:	0039883a 	mov	fp,zero
100052a8:	1001fa26 	beq	r2,zero,10005a94 <___vfprintf_internal_r+0xb78>
100052ac:	0027883a 	mov	r19,zero
100052b0:	002d883a 	mov	r22,zero
100052b4:	00021906 	br	10005b1c <___vfprintf_internal_r+0xc00>
100052b8:	d9002d17 	ldw	r4,180(sp)
100052bc:	b80b883a 	mov	r5,r23
100052c0:	00073300 	call	10007330 <__swsetup_r>
100052c4:	1005dc1e 	bne	r2,zero,10006a38 <___vfprintf_internal_r+0x1b1c>
100052c8:	b880030b 	ldhu	r2,12(r23)
100052cc:	00c00284 	movi	r3,10
100052d0:	1080068c 	andi	r2,r2,26
100052d4:	10ff3a1e 	bne	r2,r3,10004fc0 <__alt_data_end+0xf8004fc0>
100052d8:	b880038f 	ldh	r2,14(r23)
100052dc:	103f3816 	blt	r2,zero,10004fc0 <__alt_data_end+0xf8004fc0>
100052e0:	d9c02e17 	ldw	r7,184(sp)
100052e4:	d9002d17 	ldw	r4,180(sp)
100052e8:	a80d883a 	mov	r6,r21
100052ec:	b80b883a 	mov	r5,r23
100052f0:	00072140 	call	10007214 <__sbprintf>
100052f4:	00001106 	br	1000533c <___vfprintf_internal_r+0x420>
100052f8:	d9002d17 	ldw	r4,180(sp)
100052fc:	d9801e04 	addi	r6,sp,120
10005300:	b80b883a 	mov	r5,r23
10005304:	000b0340 	call	1000b034 <__sprint_r>
10005308:	1000081e 	bne	r2,zero,1000532c <___vfprintf_internal_r+0x410>
1000530c:	da000404 	addi	r8,sp,16
10005310:	003f5106 	br	10005058 <__alt_data_end+0xf8005058>
10005314:	d8802017 	ldw	r2,128(sp)
10005318:	10000426 	beq	r2,zero,1000532c <___vfprintf_internal_r+0x410>
1000531c:	d9002d17 	ldw	r4,180(sp)
10005320:	d9801e04 	addi	r6,sp,120
10005324:	b80b883a 	mov	r5,r23
10005328:	000b0340 	call	1000b034 <__sprint_r>
1000532c:	b880030b 	ldhu	r2,12(r23)
10005330:	1080100c 	andi	r2,r2,64
10005334:	1005c01e 	bne	r2,zero,10006a38 <___vfprintf_internal_r+0x1b1c>
10005338:	d8802f17 	ldw	r2,188(sp)
1000533c:	dfc04717 	ldw	ra,284(sp)
10005340:	df004617 	ldw	fp,280(sp)
10005344:	ddc04517 	ldw	r23,276(sp)
10005348:	dd804417 	ldw	r22,272(sp)
1000534c:	dd404317 	ldw	r21,268(sp)
10005350:	dd004217 	ldw	r20,264(sp)
10005354:	dcc04117 	ldw	r19,260(sp)
10005358:	dc804017 	ldw	r18,256(sp)
1000535c:	dc403f17 	ldw	r17,252(sp)
10005360:	dc003e17 	ldw	r16,248(sp)
10005364:	dec04804 	addi	sp,sp,288
10005368:	f800283a 	ret
1000536c:	d9002d17 	ldw	r4,180(sp)
10005370:	000261c0 	call	1000261c <__sinit>
10005374:	003f0206 	br	10004f80 <__alt_data_end+0xf8004f80>
10005378:	d9002e17 	ldw	r4,184(sp)
1000537c:	d9402e17 	ldw	r5,184(sp)
10005380:	21000017 	ldw	r4,0(r4)
10005384:	28800104 	addi	r2,r5,4
10005388:	d9003115 	stw	r4,196(sp)
1000538c:	203fa716 	blt	r4,zero,1000522c <__alt_data_end+0xf800522c>
10005390:	d8802e15 	stw	r2,184(sp)
10005394:	ac400007 	ldb	r17,0(r21)
10005398:	003f4206 	br	100050a4 <__alt_data_end+0xf80050a4>
1000539c:	ac400007 	ldb	r17,0(r21)
100053a0:	01000a84 	movi	r4,42
100053a4:	a8c00044 	addi	r3,r21,1
100053a8:	89075826 	beq	r17,r4,1000710c <___vfprintf_internal_r+0x21f0>
100053ac:	8cbff404 	addi	r18,r17,-48
100053b0:	b486ae36 	bltu	r22,r18,10006e6c <___vfprintf_internal_r+0x1f50>
100053b4:	0009883a 	mov	r4,zero
100053b8:	1823883a 	mov	r17,r3
100053bc:	01400284 	movi	r5,10
100053c0:	0001d400 	call	10001d40 <__mulsi3>
100053c4:	88c00007 	ldb	r3,0(r17)
100053c8:	1489883a 	add	r4,r2,r18
100053cc:	8d400044 	addi	r21,r17,1
100053d0:	1cbff404 	addi	r18,r3,-48
100053d4:	a823883a 	mov	r17,r21
100053d8:	b4bff82e 	bgeu	r22,r18,100053bc <__alt_data_end+0xf80053bc>
100053dc:	1823883a 	mov	r17,r3
100053e0:	2005f616 	blt	r4,zero,10006bbc <___vfprintf_internal_r+0x1ca0>
100053e4:	d9002a15 	stw	r4,168(sp)
100053e8:	003f2f06 	br	100050a8 <__alt_data_end+0xf80050a8>
100053ec:	84002014 	ori	r16,r16,128
100053f0:	ac400007 	ldb	r17,0(r21)
100053f4:	003f2b06 	br	100050a4 <__alt_data_end+0xf80050a4>
100053f8:	8cbff404 	addi	r18,r17,-48
100053fc:	d8003115 	stw	zero,196(sp)
10005400:	0009883a 	mov	r4,zero
10005404:	a823883a 	mov	r17,r21
10005408:	01400284 	movi	r5,10
1000540c:	0001d400 	call	10001d40 <__mulsi3>
10005410:	88c00007 	ldb	r3,0(r17)
10005414:	9089883a 	add	r4,r18,r2
10005418:	ad400044 	addi	r21,r21,1
1000541c:	1cbff404 	addi	r18,r3,-48
10005420:	a823883a 	mov	r17,r21
10005424:	b4bff82e 	bgeu	r22,r18,10005408 <__alt_data_end+0xf8005408>
10005428:	1823883a 	mov	r17,r3
1000542c:	d9003115 	stw	r4,196(sp)
10005430:	003f1d06 	br	100050a8 <__alt_data_end+0xf80050a8>
10005434:	8025883a 	mov	r18,r16
10005438:	dc002903 	ldbu	r16,164(sp)
1000543c:	e011883a 	mov	r8,fp
10005440:	84003fcc 	andi	r16,r16,255
10005444:	8007531e 	bne	r16,zero,10007194 <___vfprintf_internal_r+0x2278>
10005448:	94800414 	ori	r18,r18,16
1000544c:	9080080c 	andi	r2,r18,32
10005450:	1003a326 	beq	r2,zero,100062e0 <___vfprintf_internal_r+0x13c4>
10005454:	d9002e17 	ldw	r4,184(sp)
10005458:	20800117 	ldw	r2,4(r4)
1000545c:	24c00017 	ldw	r19,0(r4)
10005460:	21000204 	addi	r4,r4,8
10005464:	d9002e15 	stw	r4,184(sp)
10005468:	102d883a 	mov	r22,r2
1000546c:	10047316 	blt	r2,zero,1000663c <___vfprintf_internal_r+0x1720>
10005470:	d9002a17 	ldw	r4,168(sp)
10005474:	df002783 	ldbu	fp,158(sp)
10005478:	2003e416 	blt	r4,zero,1000640c <___vfprintf_internal_r+0x14f0>
1000547c:	00ffdfc4 	movi	r3,-129
10005480:	9d84b03a 	or	r2,r19,r22
10005484:	90e4703a 	and	r18,r18,r3
10005488:	10018026 	beq	r2,zero,10005a8c <___vfprintf_internal_r+0xb70>
1000548c:	b003ab26 	beq	r22,zero,1000633c <___vfprintf_internal_r+0x1420>
10005490:	dc402915 	stw	r17,164(sp)
10005494:	dc001e04 	addi	r16,sp,120
10005498:	b023883a 	mov	r17,r22
1000549c:	402d883a 	mov	r22,r8
100054a0:	9809883a 	mov	r4,r19
100054a4:	880b883a 	mov	r5,r17
100054a8:	01800284 	movi	r6,10
100054ac:	000f883a 	mov	r7,zero
100054b0:	000d1740 	call	1000d174 <__umoddi3>
100054b4:	10800c04 	addi	r2,r2,48
100054b8:	843fffc4 	addi	r16,r16,-1
100054bc:	9809883a 	mov	r4,r19
100054c0:	880b883a 	mov	r5,r17
100054c4:	80800005 	stb	r2,0(r16)
100054c8:	01800284 	movi	r6,10
100054cc:	000f883a 	mov	r7,zero
100054d0:	000cb780 	call	1000cb78 <__udivdi3>
100054d4:	1027883a 	mov	r19,r2
100054d8:	10c4b03a 	or	r2,r2,r3
100054dc:	1823883a 	mov	r17,r3
100054e0:	103fef1e 	bne	r2,zero,100054a0 <__alt_data_end+0xf80054a0>
100054e4:	d8c02817 	ldw	r3,160(sp)
100054e8:	dc402917 	ldw	r17,164(sp)
100054ec:	b011883a 	mov	r8,r22
100054f0:	1c07c83a 	sub	r3,r3,r16
100054f4:	d8c02b15 	stw	r3,172(sp)
100054f8:	00005f06 	br	10005678 <___vfprintf_internal_r+0x75c>
100054fc:	8025883a 	mov	r18,r16
10005500:	dc002903 	ldbu	r16,164(sp)
10005504:	e011883a 	mov	r8,fp
10005508:	84003fcc 	andi	r16,r16,255
1000550c:	80071e1e 	bne	r16,zero,10007188 <___vfprintf_internal_r+0x226c>
10005510:	9080020c 	andi	r2,r18,8
10005514:	1004af26 	beq	r2,zero,100067d4 <___vfprintf_internal_r+0x18b8>
10005518:	d9002e17 	ldw	r4,184(sp)
1000551c:	d9402e17 	ldw	r5,184(sp)
10005520:	d8802e17 	ldw	r2,184(sp)
10005524:	21000017 	ldw	r4,0(r4)
10005528:	29400117 	ldw	r5,4(r5)
1000552c:	10800204 	addi	r2,r2,8
10005530:	d9003615 	stw	r4,216(sp)
10005534:	d9403815 	stw	r5,224(sp)
10005538:	d8802e15 	stw	r2,184(sp)
1000553c:	d9003617 	ldw	r4,216(sp)
10005540:	d9403817 	ldw	r5,224(sp)
10005544:	da003d15 	stw	r8,244(sp)
10005548:	04000044 	movi	r16,1
1000554c:	000aae40 	call	1000aae4 <__fpclassifyd>
10005550:	da003d17 	ldw	r8,244(sp)
10005554:	1404441e 	bne	r2,r16,10006668 <___vfprintf_internal_r+0x174c>
10005558:	d9003617 	ldw	r4,216(sp)
1000555c:	d9403817 	ldw	r5,224(sp)
10005560:	000d883a 	mov	r6,zero
10005564:	000f883a 	mov	r7,zero
10005568:	000eb180 	call	1000eb18 <__ledf2>
1000556c:	da003d17 	ldw	r8,244(sp)
10005570:	1005e316 	blt	r2,zero,10006d00 <___vfprintf_internal_r+0x1de4>
10005574:	df002783 	ldbu	fp,158(sp)
10005578:	008011c4 	movi	r2,71
1000557c:	1445580e 	bge	r2,r17,10006ae0 <___vfprintf_internal_r+0x1bc4>
10005580:	04040074 	movhi	r16,4097
10005584:	840b3804 	addi	r16,r16,11488
10005588:	00c000c4 	movi	r3,3
1000558c:	00bfdfc4 	movi	r2,-129
10005590:	d8c02915 	stw	r3,164(sp)
10005594:	90a4703a 	and	r18,r18,r2
10005598:	d8c02b15 	stw	r3,172(sp)
1000559c:	d8002a15 	stw	zero,168(sp)
100055a0:	d8003215 	stw	zero,200(sp)
100055a4:	00003a06 	br	10005690 <___vfprintf_internal_r+0x774>
100055a8:	84000214 	ori	r16,r16,8
100055ac:	ac400007 	ldb	r17,0(r21)
100055b0:	003ebc06 	br	100050a4 <__alt_data_end+0xf80050a4>
100055b4:	8025883a 	mov	r18,r16
100055b8:	dc002903 	ldbu	r16,164(sp)
100055bc:	e011883a 	mov	r8,fp
100055c0:	84003fcc 	andi	r16,r16,255
100055c4:	8007001e 	bne	r16,zero,100071c8 <___vfprintf_internal_r+0x22ac>
100055c8:	94800414 	ori	r18,r18,16
100055cc:	9080080c 	andi	r2,r18,32
100055d0:	1002fa26 	beq	r2,zero,100061bc <___vfprintf_internal_r+0x12a0>
100055d4:	d9002e17 	ldw	r4,184(sp)
100055d8:	d9402a17 	ldw	r5,168(sp)
100055dc:	d8002785 	stb	zero,158(sp)
100055e0:	20800204 	addi	r2,r4,8
100055e4:	24c00017 	ldw	r19,0(r4)
100055e8:	25800117 	ldw	r22,4(r4)
100055ec:	2804b116 	blt	r5,zero,100068b4 <___vfprintf_internal_r+0x1998>
100055f0:	013fdfc4 	movi	r4,-129
100055f4:	9d86b03a 	or	r3,r19,r22
100055f8:	d8802e15 	stw	r2,184(sp)
100055fc:	9124703a 	and	r18,r18,r4
10005600:	1802fb1e 	bne	r3,zero,100061f0 <___vfprintf_internal_r+0x12d4>
10005604:	d8c02a17 	ldw	r3,168(sp)
10005608:	0039883a 	mov	fp,zero
1000560c:	1805e526 	beq	r3,zero,10006da4 <___vfprintf_internal_r+0x1e88>
10005610:	0027883a 	mov	r19,zero
10005614:	002d883a 	mov	r22,zero
10005618:	dc001e04 	addi	r16,sp,120
1000561c:	9806d0fa 	srli	r3,r19,3
10005620:	b008977a 	slli	r4,r22,29
10005624:	b02cd0fa 	srli	r22,r22,3
10005628:	9cc001cc 	andi	r19,r19,7
1000562c:	98800c04 	addi	r2,r19,48
10005630:	843fffc4 	addi	r16,r16,-1
10005634:	20e6b03a 	or	r19,r4,r3
10005638:	80800005 	stb	r2,0(r16)
1000563c:	9d86b03a 	or	r3,r19,r22
10005640:	183ff61e 	bne	r3,zero,1000561c <__alt_data_end+0xf800561c>
10005644:	90c0004c 	andi	r3,r18,1
10005648:	18014126 	beq	r3,zero,10005b50 <___vfprintf_internal_r+0xc34>
1000564c:	10803fcc 	andi	r2,r2,255
10005650:	1080201c 	xori	r2,r2,128
10005654:	10bfe004 	addi	r2,r2,-128
10005658:	00c00c04 	movi	r3,48
1000565c:	10c13c26 	beq	r2,r3,10005b50 <___vfprintf_internal_r+0xc34>
10005660:	80ffffc5 	stb	r3,-1(r16)
10005664:	d8c02817 	ldw	r3,160(sp)
10005668:	80bfffc4 	addi	r2,r16,-1
1000566c:	1021883a 	mov	r16,r2
10005670:	1887c83a 	sub	r3,r3,r2
10005674:	d8c02b15 	stw	r3,172(sp)
10005678:	d8802b17 	ldw	r2,172(sp)
1000567c:	d9002a17 	ldw	r4,168(sp)
10005680:	1100010e 	bge	r2,r4,10005688 <___vfprintf_internal_r+0x76c>
10005684:	2005883a 	mov	r2,r4
10005688:	d8802915 	stw	r2,164(sp)
1000568c:	d8003215 	stw	zero,200(sp)
10005690:	e7003fcc 	andi	fp,fp,255
10005694:	e700201c 	xori	fp,fp,128
10005698:	e73fe004 	addi	fp,fp,-128
1000569c:	e0000326 	beq	fp,zero,100056ac <___vfprintf_internal_r+0x790>
100056a0:	d8c02917 	ldw	r3,164(sp)
100056a4:	18c00044 	addi	r3,r3,1
100056a8:	d8c02915 	stw	r3,164(sp)
100056ac:	90c0008c 	andi	r3,r18,2
100056b0:	d8c02c15 	stw	r3,176(sp)
100056b4:	18000326 	beq	r3,zero,100056c4 <___vfprintf_internal_r+0x7a8>
100056b8:	d8c02917 	ldw	r3,164(sp)
100056bc:	18c00084 	addi	r3,r3,2
100056c0:	d8c02915 	stw	r3,164(sp)
100056c4:	90c0210c 	andi	r3,r18,132
100056c8:	d8c03015 	stw	r3,192(sp)
100056cc:	1801c51e 	bne	r3,zero,10005de4 <___vfprintf_internal_r+0xec8>
100056d0:	d9003117 	ldw	r4,196(sp)
100056d4:	d8c02917 	ldw	r3,164(sp)
100056d8:	20e7c83a 	sub	r19,r4,r3
100056dc:	04c1c10e 	bge	zero,r19,10005de4 <___vfprintf_internal_r+0xec8>
100056e0:	02400404 	movi	r9,16
100056e4:	d8c02017 	ldw	r3,128(sp)
100056e8:	d8801f17 	ldw	r2,124(sp)
100056ec:	4cc52f0e 	bge	r9,r19,10006bac <___vfprintf_internal_r+0x1c90>
100056f0:	01440074 	movhi	r5,4097
100056f4:	294b4b84 	addi	r5,r5,11566
100056f8:	dc403b15 	stw	r17,236(sp)
100056fc:	d9403515 	stw	r5,212(sp)
10005700:	9823883a 	mov	r17,r19
10005704:	482d883a 	mov	r22,r9
10005708:	9027883a 	mov	r19,r18
1000570c:	070001c4 	movi	fp,7
10005710:	8025883a 	mov	r18,r16
10005714:	dc002d17 	ldw	r16,180(sp)
10005718:	00000306 	br	10005728 <___vfprintf_internal_r+0x80c>
1000571c:	8c7ffc04 	addi	r17,r17,-16
10005720:	42000204 	addi	r8,r8,8
10005724:	b440130e 	bge	r22,r17,10005774 <___vfprintf_internal_r+0x858>
10005728:	01040074 	movhi	r4,4097
1000572c:	18c00404 	addi	r3,r3,16
10005730:	10800044 	addi	r2,r2,1
10005734:	210b4b84 	addi	r4,r4,11566
10005738:	41000015 	stw	r4,0(r8)
1000573c:	45800115 	stw	r22,4(r8)
10005740:	d8c02015 	stw	r3,128(sp)
10005744:	d8801f15 	stw	r2,124(sp)
10005748:	e0bff40e 	bge	fp,r2,1000571c <__alt_data_end+0xf800571c>
1000574c:	d9801e04 	addi	r6,sp,120
10005750:	b80b883a 	mov	r5,r23
10005754:	8009883a 	mov	r4,r16
10005758:	000b0340 	call	1000b034 <__sprint_r>
1000575c:	103ef31e 	bne	r2,zero,1000532c <__alt_data_end+0xf800532c>
10005760:	8c7ffc04 	addi	r17,r17,-16
10005764:	d8c02017 	ldw	r3,128(sp)
10005768:	d8801f17 	ldw	r2,124(sp)
1000576c:	da000404 	addi	r8,sp,16
10005770:	b47fed16 	blt	r22,r17,10005728 <__alt_data_end+0xf8005728>
10005774:	9021883a 	mov	r16,r18
10005778:	9825883a 	mov	r18,r19
1000577c:	8827883a 	mov	r19,r17
10005780:	dc403b17 	ldw	r17,236(sp)
10005784:	d9403517 	ldw	r5,212(sp)
10005788:	98c7883a 	add	r3,r19,r3
1000578c:	10800044 	addi	r2,r2,1
10005790:	41400015 	stw	r5,0(r8)
10005794:	44c00115 	stw	r19,4(r8)
10005798:	d8c02015 	stw	r3,128(sp)
1000579c:	d8801f15 	stw	r2,124(sp)
100057a0:	010001c4 	movi	r4,7
100057a4:	2082c516 	blt	r4,r2,100062bc <___vfprintf_internal_r+0x13a0>
100057a8:	df002787 	ldb	fp,158(sp)
100057ac:	42000204 	addi	r8,r8,8
100057b0:	e0000c26 	beq	fp,zero,100057e4 <___vfprintf_internal_r+0x8c8>
100057b4:	d8801f17 	ldw	r2,124(sp)
100057b8:	d9002784 	addi	r4,sp,158
100057bc:	18c00044 	addi	r3,r3,1
100057c0:	10800044 	addi	r2,r2,1
100057c4:	41000015 	stw	r4,0(r8)
100057c8:	01000044 	movi	r4,1
100057cc:	41000115 	stw	r4,4(r8)
100057d0:	d8c02015 	stw	r3,128(sp)
100057d4:	d8801f15 	stw	r2,124(sp)
100057d8:	010001c4 	movi	r4,7
100057dc:	20825e16 	blt	r4,r2,10006158 <___vfprintf_internal_r+0x123c>
100057e0:	42000204 	addi	r8,r8,8
100057e4:	d8802c17 	ldw	r2,176(sp)
100057e8:	10000c26 	beq	r2,zero,1000581c <___vfprintf_internal_r+0x900>
100057ec:	d8801f17 	ldw	r2,124(sp)
100057f0:	d9002704 	addi	r4,sp,156
100057f4:	18c00084 	addi	r3,r3,2
100057f8:	10800044 	addi	r2,r2,1
100057fc:	41000015 	stw	r4,0(r8)
10005800:	01000084 	movi	r4,2
10005804:	41000115 	stw	r4,4(r8)
10005808:	d8c02015 	stw	r3,128(sp)
1000580c:	d8801f15 	stw	r2,124(sp)
10005810:	010001c4 	movi	r4,7
10005814:	20825816 	blt	r4,r2,10006178 <___vfprintf_internal_r+0x125c>
10005818:	42000204 	addi	r8,r8,8
1000581c:	d9003017 	ldw	r4,192(sp)
10005820:	00802004 	movi	r2,128
10005824:	2081bb26 	beq	r4,r2,10005f14 <___vfprintf_internal_r+0xff8>
10005828:	d9402a17 	ldw	r5,168(sp)
1000582c:	d8802b17 	ldw	r2,172(sp)
10005830:	28adc83a 	sub	r22,r5,r2
10005834:	0580310e 	bge	zero,r22,100058fc <___vfprintf_internal_r+0x9e0>
10005838:	07000404 	movi	fp,16
1000583c:	d8801f17 	ldw	r2,124(sp)
10005840:	e584360e 	bge	fp,r22,1000691c <___vfprintf_internal_r+0x1a00>
10005844:	01440074 	movhi	r5,4097
10005848:	294b4784 	addi	r5,r5,11550
1000584c:	dc402a15 	stw	r17,168(sp)
10005850:	d9402c15 	stw	r5,176(sp)
10005854:	b023883a 	mov	r17,r22
10005858:	04c001c4 	movi	r19,7
1000585c:	a82d883a 	mov	r22,r21
10005860:	902b883a 	mov	r21,r18
10005864:	8025883a 	mov	r18,r16
10005868:	dc002d17 	ldw	r16,180(sp)
1000586c:	00000306 	br	1000587c <___vfprintf_internal_r+0x960>
10005870:	8c7ffc04 	addi	r17,r17,-16
10005874:	42000204 	addi	r8,r8,8
10005878:	e440110e 	bge	fp,r17,100058c0 <___vfprintf_internal_r+0x9a4>
1000587c:	18c00404 	addi	r3,r3,16
10005880:	10800044 	addi	r2,r2,1
10005884:	45000015 	stw	r20,0(r8)
10005888:	47000115 	stw	fp,4(r8)
1000588c:	d8c02015 	stw	r3,128(sp)
10005890:	d8801f15 	stw	r2,124(sp)
10005894:	98bff60e 	bge	r19,r2,10005870 <__alt_data_end+0xf8005870>
10005898:	d9801e04 	addi	r6,sp,120
1000589c:	b80b883a 	mov	r5,r23
100058a0:	8009883a 	mov	r4,r16
100058a4:	000b0340 	call	1000b034 <__sprint_r>
100058a8:	103ea01e 	bne	r2,zero,1000532c <__alt_data_end+0xf800532c>
100058ac:	8c7ffc04 	addi	r17,r17,-16
100058b0:	d8c02017 	ldw	r3,128(sp)
100058b4:	d8801f17 	ldw	r2,124(sp)
100058b8:	da000404 	addi	r8,sp,16
100058bc:	e47fef16 	blt	fp,r17,1000587c <__alt_data_end+0xf800587c>
100058c0:	9021883a 	mov	r16,r18
100058c4:	a825883a 	mov	r18,r21
100058c8:	b02b883a 	mov	r21,r22
100058cc:	882d883a 	mov	r22,r17
100058d0:	dc402a17 	ldw	r17,168(sp)
100058d4:	d9002c17 	ldw	r4,176(sp)
100058d8:	1d87883a 	add	r3,r3,r22
100058dc:	10800044 	addi	r2,r2,1
100058e0:	41000015 	stw	r4,0(r8)
100058e4:	45800115 	stw	r22,4(r8)
100058e8:	d8c02015 	stw	r3,128(sp)
100058ec:	d8801f15 	stw	r2,124(sp)
100058f0:	010001c4 	movi	r4,7
100058f4:	20821016 	blt	r4,r2,10006138 <___vfprintf_internal_r+0x121c>
100058f8:	42000204 	addi	r8,r8,8
100058fc:	9080400c 	andi	r2,r18,256
10005900:	10013a1e 	bne	r2,zero,10005dec <___vfprintf_internal_r+0xed0>
10005904:	d9402b17 	ldw	r5,172(sp)
10005908:	d8801f17 	ldw	r2,124(sp)
1000590c:	44000015 	stw	r16,0(r8)
10005910:	1947883a 	add	r3,r3,r5
10005914:	10800044 	addi	r2,r2,1
10005918:	41400115 	stw	r5,4(r8)
1000591c:	d8c02015 	stw	r3,128(sp)
10005920:	d8801f15 	stw	r2,124(sp)
10005924:	010001c4 	movi	r4,7
10005928:	2081f516 	blt	r4,r2,10006100 <___vfprintf_internal_r+0x11e4>
1000592c:	42000204 	addi	r8,r8,8
10005930:	9480010c 	andi	r18,r18,4
10005934:	90003226 	beq	r18,zero,10005a00 <___vfprintf_internal_r+0xae4>
10005938:	d9403117 	ldw	r5,196(sp)
1000593c:	d8802917 	ldw	r2,164(sp)
10005940:	28a1c83a 	sub	r16,r5,r2
10005944:	04002e0e 	bge	zero,r16,10005a00 <___vfprintf_internal_r+0xae4>
10005948:	04400404 	movi	r17,16
1000594c:	d8801f17 	ldw	r2,124(sp)
10005950:	8c04c40e 	bge	r17,r16,10006c64 <___vfprintf_internal_r+0x1d48>
10005954:	01440074 	movhi	r5,4097
10005958:	294b4b84 	addi	r5,r5,11566
1000595c:	d9403515 	stw	r5,212(sp)
10005960:	048001c4 	movi	r18,7
10005964:	dcc02d17 	ldw	r19,180(sp)
10005968:	00000306 	br	10005978 <___vfprintf_internal_r+0xa5c>
1000596c:	843ffc04 	addi	r16,r16,-16
10005970:	42000204 	addi	r8,r8,8
10005974:	8c00130e 	bge	r17,r16,100059c4 <___vfprintf_internal_r+0xaa8>
10005978:	01040074 	movhi	r4,4097
1000597c:	18c00404 	addi	r3,r3,16
10005980:	10800044 	addi	r2,r2,1
10005984:	210b4b84 	addi	r4,r4,11566
10005988:	41000015 	stw	r4,0(r8)
1000598c:	44400115 	stw	r17,4(r8)
10005990:	d8c02015 	stw	r3,128(sp)
10005994:	d8801f15 	stw	r2,124(sp)
10005998:	90bff40e 	bge	r18,r2,1000596c <__alt_data_end+0xf800596c>
1000599c:	d9801e04 	addi	r6,sp,120
100059a0:	b80b883a 	mov	r5,r23
100059a4:	9809883a 	mov	r4,r19
100059a8:	000b0340 	call	1000b034 <__sprint_r>
100059ac:	103e5f1e 	bne	r2,zero,1000532c <__alt_data_end+0xf800532c>
100059b0:	843ffc04 	addi	r16,r16,-16
100059b4:	d8c02017 	ldw	r3,128(sp)
100059b8:	d8801f17 	ldw	r2,124(sp)
100059bc:	da000404 	addi	r8,sp,16
100059c0:	8c3fed16 	blt	r17,r16,10005978 <__alt_data_end+0xf8005978>
100059c4:	d9403517 	ldw	r5,212(sp)
100059c8:	1c07883a 	add	r3,r3,r16
100059cc:	10800044 	addi	r2,r2,1
100059d0:	41400015 	stw	r5,0(r8)
100059d4:	44000115 	stw	r16,4(r8)
100059d8:	d8c02015 	stw	r3,128(sp)
100059dc:	d8801f15 	stw	r2,124(sp)
100059e0:	010001c4 	movi	r4,7
100059e4:	2080060e 	bge	r4,r2,10005a00 <___vfprintf_internal_r+0xae4>
100059e8:	d9002d17 	ldw	r4,180(sp)
100059ec:	d9801e04 	addi	r6,sp,120
100059f0:	b80b883a 	mov	r5,r23
100059f4:	000b0340 	call	1000b034 <__sprint_r>
100059f8:	103e4c1e 	bne	r2,zero,1000532c <__alt_data_end+0xf800532c>
100059fc:	d8c02017 	ldw	r3,128(sp)
10005a00:	d8803117 	ldw	r2,196(sp)
10005a04:	d9002917 	ldw	r4,164(sp)
10005a08:	1100010e 	bge	r2,r4,10005a10 <___vfprintf_internal_r+0xaf4>
10005a0c:	2005883a 	mov	r2,r4
10005a10:	d9402f17 	ldw	r5,188(sp)
10005a14:	288b883a 	add	r5,r5,r2
10005a18:	d9402f15 	stw	r5,188(sp)
10005a1c:	1801c01e 	bne	r3,zero,10006120 <___vfprintf_internal_r+0x1204>
10005a20:	a8800007 	ldb	r2,0(r21)
10005a24:	d8001f15 	stw	zero,124(sp)
10005a28:	da000404 	addi	r8,sp,16
10005a2c:	103d751e 	bne	r2,zero,10005004 <__alt_data_end+0xf8005004>
10005a30:	a823883a 	mov	r17,r21
10005a34:	003d8b06 	br	10005064 <__alt_data_end+0xf8005064>
10005a38:	8025883a 	mov	r18,r16
10005a3c:	dc002903 	ldbu	r16,164(sp)
10005a40:	e011883a 	mov	r8,fp
10005a44:	84003fcc 	andi	r16,r16,255
10005a48:	8005e51e 	bne	r16,zero,100071e0 <___vfprintf_internal_r+0x22c4>
10005a4c:	94800414 	ori	r18,r18,16
10005a50:	9080080c 	andi	r2,r18,32
10005a54:	10022b26 	beq	r2,zero,10006304 <___vfprintf_internal_r+0x13e8>
10005a58:	d9002e17 	ldw	r4,184(sp)
10005a5c:	d9402a17 	ldw	r5,168(sp)
10005a60:	d8002785 	stb	zero,158(sp)
10005a64:	20c00204 	addi	r3,r4,8
10005a68:	24c00017 	ldw	r19,0(r4)
10005a6c:	25800117 	ldw	r22,4(r4)
10005a70:	28042e16 	blt	r5,zero,10006b2c <___vfprintf_internal_r+0x1c10>
10005a74:	013fdfc4 	movi	r4,-129
10005a78:	9d84b03a 	or	r2,r19,r22
10005a7c:	d8c02e15 	stw	r3,184(sp)
10005a80:	9124703a 	and	r18,r18,r4
10005a84:	0039883a 	mov	fp,zero
10005a88:	103e801e 	bne	r2,zero,1000548c <__alt_data_end+0xf800548c>
10005a8c:	d9002a17 	ldw	r4,168(sp)
10005a90:	2002e01e 	bne	r4,zero,10006614 <___vfprintf_internal_r+0x16f8>
10005a94:	d8002a15 	stw	zero,168(sp)
10005a98:	d8002b15 	stw	zero,172(sp)
10005a9c:	dc001e04 	addi	r16,sp,120
10005aa0:	003ef506 	br	10005678 <__alt_data_end+0xf8005678>
10005aa4:	8025883a 	mov	r18,r16
10005aa8:	dc002903 	ldbu	r16,164(sp)
10005aac:	e011883a 	mov	r8,fp
10005ab0:	84003fcc 	andi	r16,r16,255
10005ab4:	8005ba1e 	bne	r16,zero,100071a0 <___vfprintf_internal_r+0x2284>
10005ab8:	01040074 	movhi	r4,4097
10005abc:	210b3b04 	addi	r4,r4,11500
10005ac0:	d9003915 	stw	r4,228(sp)
10005ac4:	9080080c 	andi	r2,r18,32
10005ac8:	10006126 	beq	r2,zero,10005c50 <___vfprintf_internal_r+0xd34>
10005acc:	d9402e17 	ldw	r5,184(sp)
10005ad0:	2cc00017 	ldw	r19,0(r5)
10005ad4:	2d800117 	ldw	r22,4(r5)
10005ad8:	29400204 	addi	r5,r5,8
10005adc:	d9402e15 	stw	r5,184(sp)
10005ae0:	9080004c 	andi	r2,r18,1
10005ae4:	1001ac26 	beq	r2,zero,10006198 <___vfprintf_internal_r+0x127c>
10005ae8:	9d84b03a 	or	r2,r19,r22
10005aec:	10038526 	beq	r2,zero,10006904 <___vfprintf_internal_r+0x19e8>
10005af0:	d8c02a17 	ldw	r3,168(sp)
10005af4:	00800c04 	movi	r2,48
10005af8:	d8802705 	stb	r2,156(sp)
10005afc:	dc402745 	stb	r17,157(sp)
10005b00:	d8002785 	stb	zero,158(sp)
10005b04:	90800094 	ori	r2,r18,2
10005b08:	18047916 	blt	r3,zero,10006cf0 <___vfprintf_internal_r+0x1dd4>
10005b0c:	00bfdfc4 	movi	r2,-129
10005b10:	90a4703a 	and	r18,r18,r2
10005b14:	94800094 	ori	r18,r18,2
10005b18:	0039883a 	mov	fp,zero
10005b1c:	d9003917 	ldw	r4,228(sp)
10005b20:	dc001e04 	addi	r16,sp,120
10005b24:	988003cc 	andi	r2,r19,15
10005b28:	b006973a 	slli	r3,r22,28
10005b2c:	2085883a 	add	r2,r4,r2
10005b30:	9826d13a 	srli	r19,r19,4
10005b34:	10800003 	ldbu	r2,0(r2)
10005b38:	b02cd13a 	srli	r22,r22,4
10005b3c:	843fffc4 	addi	r16,r16,-1
10005b40:	1ce6b03a 	or	r19,r3,r19
10005b44:	80800005 	stb	r2,0(r16)
10005b48:	9d84b03a 	or	r2,r19,r22
10005b4c:	103ff51e 	bne	r2,zero,10005b24 <__alt_data_end+0xf8005b24>
10005b50:	d8c02817 	ldw	r3,160(sp)
10005b54:	1c07c83a 	sub	r3,r3,r16
10005b58:	d8c02b15 	stw	r3,172(sp)
10005b5c:	003ec606 	br	10005678 <__alt_data_end+0xf8005678>
10005b60:	8025883a 	mov	r18,r16
10005b64:	dc002903 	ldbu	r16,164(sp)
10005b68:	e011883a 	mov	r8,fp
10005b6c:	84003fcc 	andi	r16,r16,255
10005b70:	803e9626 	beq	r16,zero,100055cc <__alt_data_end+0xf80055cc>
10005b74:	d8c02b03 	ldbu	r3,172(sp)
10005b78:	d8c02785 	stb	r3,158(sp)
10005b7c:	003e9306 	br	100055cc <__alt_data_end+0xf80055cc>
10005b80:	00c00044 	movi	r3,1
10005b84:	d8c02905 	stb	r3,164(sp)
10005b88:	00c00ac4 	movi	r3,43
10005b8c:	d8c02b05 	stb	r3,172(sp)
10005b90:	ac400007 	ldb	r17,0(r21)
10005b94:	003d4306 	br	100050a4 <__alt_data_end+0xf80050a4>
10005b98:	84000814 	ori	r16,r16,32
10005b9c:	ac400007 	ldb	r17,0(r21)
10005ba0:	003d4006 	br	100050a4 <__alt_data_end+0xf80050a4>
10005ba4:	d8802e17 	ldw	r2,184(sp)
10005ba8:	8025883a 	mov	r18,r16
10005bac:	d8002785 	stb	zero,158(sp)
10005bb0:	14000017 	ldw	r16,0(r2)
10005bb4:	e011883a 	mov	r8,fp
10005bb8:	14c00104 	addi	r19,r2,4
10005bbc:	80042d26 	beq	r16,zero,10006c74 <___vfprintf_internal_r+0x1d58>
10005bc0:	d8c02a17 	ldw	r3,168(sp)
10005bc4:	1803e416 	blt	r3,zero,10006b58 <___vfprintf_internal_r+0x1c3c>
10005bc8:	180d883a 	mov	r6,r3
10005bcc:	000b883a 	mov	r5,zero
10005bd0:	8009883a 	mov	r4,r16
10005bd4:	df003d15 	stw	fp,244(sp)
10005bd8:	00096240 	call	10009624 <memchr>
10005bdc:	da003d17 	ldw	r8,244(sp)
10005be0:	10046826 	beq	r2,zero,10006d84 <___vfprintf_internal_r+0x1e68>
10005be4:	1405c83a 	sub	r2,r2,r16
10005be8:	d8802b15 	stw	r2,172(sp)
10005bec:	1003e016 	blt	r2,zero,10006b70 <___vfprintf_internal_r+0x1c54>
10005bf0:	df002783 	ldbu	fp,158(sp)
10005bf4:	d8802915 	stw	r2,164(sp)
10005bf8:	dcc02e15 	stw	r19,184(sp)
10005bfc:	d8002a15 	stw	zero,168(sp)
10005c00:	d8003215 	stw	zero,200(sp)
10005c04:	003ea206 	br	10005690 <__alt_data_end+0xf8005690>
10005c08:	8025883a 	mov	r18,r16
10005c0c:	dc002903 	ldbu	r16,164(sp)
10005c10:	e011883a 	mov	r8,fp
10005c14:	84003fcc 	andi	r16,r16,255
10005c18:	803f8d26 	beq	r16,zero,10005a50 <__alt_data_end+0xf8005a50>
10005c1c:	d8c02b03 	ldbu	r3,172(sp)
10005c20:	d8c02785 	stb	r3,158(sp)
10005c24:	003f8a06 	br	10005a50 <__alt_data_end+0xf8005a50>
10005c28:	8025883a 	mov	r18,r16
10005c2c:	dc002903 	ldbu	r16,164(sp)
10005c30:	e011883a 	mov	r8,fp
10005c34:	84003fcc 	andi	r16,r16,255
10005c38:	8005661e 	bne	r16,zero,100071d4 <___vfprintf_internal_r+0x22b8>
10005c3c:	01040074 	movhi	r4,4097
10005c40:	210b4004 	addi	r4,r4,11520
10005c44:	d9003915 	stw	r4,228(sp)
10005c48:	9080080c 	andi	r2,r18,32
10005c4c:	103f9f1e 	bne	r2,zero,10005acc <__alt_data_end+0xf8005acc>
10005c50:	9080040c 	andi	r2,r18,16
10005c54:	1002eb26 	beq	r2,zero,10006804 <___vfprintf_internal_r+0x18e8>
10005c58:	d8802e17 	ldw	r2,184(sp)
10005c5c:	002d883a 	mov	r22,zero
10005c60:	14c00017 	ldw	r19,0(r2)
10005c64:	10800104 	addi	r2,r2,4
10005c68:	d8802e15 	stw	r2,184(sp)
10005c6c:	003f9c06 	br	10005ae0 <__alt_data_end+0xf8005ae0>
10005c70:	d8802b07 	ldb	r2,172(sp)
10005c74:	1002e11e 	bne	r2,zero,100067fc <___vfprintf_internal_r+0x18e0>
10005c78:	00c00044 	movi	r3,1
10005c7c:	d8c02905 	stb	r3,164(sp)
10005c80:	00c00804 	movi	r3,32
10005c84:	d8c02b05 	stb	r3,172(sp)
10005c88:	ac400007 	ldb	r17,0(r21)
10005c8c:	003d0506 	br	100050a4 <__alt_data_end+0xf80050a4>
10005c90:	84000054 	ori	r16,r16,1
10005c94:	ac400007 	ldb	r17,0(r21)
10005c98:	003d0206 	br	100050a4 <__alt_data_end+0xf80050a4>
10005c9c:	8025883a 	mov	r18,r16
10005ca0:	dc002903 	ldbu	r16,164(sp)
10005ca4:	e011883a 	mov	r8,fp
10005ca8:	84003fcc 	andi	r16,r16,255
10005cac:	803de726 	beq	r16,zero,1000544c <__alt_data_end+0xf800544c>
10005cb0:	d8c02b03 	ldbu	r3,172(sp)
10005cb4:	d8c02785 	stb	r3,158(sp)
10005cb8:	003de406 	br	1000544c <__alt_data_end+0xf800544c>
10005cbc:	84001014 	ori	r16,r16,64
10005cc0:	ac400007 	ldb	r17,0(r21)
10005cc4:	003cf706 	br	100050a4 <__alt_data_end+0xf80050a4>
10005cc8:	ac400007 	ldb	r17,0(r21)
10005ccc:	00801b04 	movi	r2,108
10005cd0:	88838f26 	beq	r17,r2,10006b10 <___vfprintf_internal_r+0x1bf4>
10005cd4:	84000414 	ori	r16,r16,16
10005cd8:	003cf206 	br	100050a4 <__alt_data_end+0xf80050a4>
10005cdc:	8025883a 	mov	r18,r16
10005ce0:	dc002903 	ldbu	r16,164(sp)
10005ce4:	e011883a 	mov	r8,fp
10005ce8:	84003fcc 	andi	r16,r16,255
10005cec:	80053f1e 	bne	r16,zero,100071ec <___vfprintf_internal_r+0x22d0>
10005cf0:	9080080c 	andi	r2,r18,32
10005cf4:	1002d226 	beq	r2,zero,10006840 <___vfprintf_internal_r+0x1924>
10005cf8:	d9002e17 	ldw	r4,184(sp)
10005cfc:	d9402f17 	ldw	r5,188(sp)
10005d00:	20800017 	ldw	r2,0(r4)
10005d04:	2807d7fa 	srai	r3,r5,31
10005d08:	21000104 	addi	r4,r4,4
10005d0c:	d9002e15 	stw	r4,184(sp)
10005d10:	11400015 	stw	r5,0(r2)
10005d14:	10c00115 	stw	r3,4(r2)
10005d18:	003cb806 	br	10004ffc <__alt_data_end+0xf8004ffc>
10005d1c:	d8c02e17 	ldw	r3,184(sp)
10005d20:	d9002e17 	ldw	r4,184(sp)
10005d24:	8025883a 	mov	r18,r16
10005d28:	18800017 	ldw	r2,0(r3)
10005d2c:	21000104 	addi	r4,r4,4
10005d30:	00c00044 	movi	r3,1
10005d34:	e011883a 	mov	r8,fp
10005d38:	d8c02915 	stw	r3,164(sp)
10005d3c:	d8002785 	stb	zero,158(sp)
10005d40:	d8801405 	stb	r2,80(sp)
10005d44:	d9002e15 	stw	r4,184(sp)
10005d48:	d8c02b15 	stw	r3,172(sp)
10005d4c:	d8002a15 	stw	zero,168(sp)
10005d50:	d8003215 	stw	zero,200(sp)
10005d54:	dc001404 	addi	r16,sp,80
10005d58:	0039883a 	mov	fp,zero
10005d5c:	003e5306 	br	100056ac <__alt_data_end+0xf80056ac>
10005d60:	01040074 	movhi	r4,4097
10005d64:	210b4004 	addi	r4,r4,11520
10005d68:	0039883a 	mov	fp,zero
10005d6c:	d9003915 	stw	r4,228(sp)
10005d70:	04401e04 	movi	r17,120
10005d74:	003f6906 	br	10005b1c <__alt_data_end+0xf8005b1c>
10005d78:	8025883a 	mov	r18,r16
10005d7c:	dc002903 	ldbu	r16,164(sp)
10005d80:	e011883a 	mov	r8,fp
10005d84:	84003fcc 	andi	r16,r16,255
10005d88:	8005081e 	bne	r16,zero,100071ac <___vfprintf_internal_r+0x2290>
10005d8c:	883d6126 	beq	r17,zero,10005314 <__alt_data_end+0xf8005314>
10005d90:	00c00044 	movi	r3,1
10005d94:	d8c02915 	stw	r3,164(sp)
10005d98:	dc401405 	stb	r17,80(sp)
10005d9c:	d8002785 	stb	zero,158(sp)
10005da0:	003fe906 	br	10005d48 <__alt_data_end+0xf8005d48>
10005da4:	01440074 	movhi	r5,4097
10005da8:	294b4004 	addi	r5,r5,11520
10005dac:	d9403915 	stw	r5,228(sp)
10005db0:	d8c02e15 	stw	r3,184(sp)
10005db4:	1025883a 	mov	r18,r2
10005db8:	04401e04 	movi	r17,120
10005dbc:	9d84b03a 	or	r2,r19,r22
10005dc0:	1000fc1e 	bne	r2,zero,100061b4 <___vfprintf_internal_r+0x1298>
10005dc4:	0039883a 	mov	fp,zero
10005dc8:	00800084 	movi	r2,2
10005dcc:	10803fcc 	andi	r2,r2,255
10005dd0:	00c00044 	movi	r3,1
10005dd4:	10c20f26 	beq	r2,r3,10006614 <___vfprintf_internal_r+0x16f8>
10005dd8:	00c00084 	movi	r3,2
10005ddc:	10fd3326 	beq	r2,r3,100052ac <__alt_data_end+0xf80052ac>
10005de0:	003e0b06 	br	10005610 <__alt_data_end+0xf8005610>
10005de4:	d8c02017 	ldw	r3,128(sp)
10005de8:	003e7106 	br	100057b0 <__alt_data_end+0xf80057b0>
10005dec:	00801944 	movi	r2,101
10005df0:	14407e0e 	bge	r2,r17,10005fec <___vfprintf_internal_r+0x10d0>
10005df4:	d9003617 	ldw	r4,216(sp)
10005df8:	d9403817 	ldw	r5,224(sp)
10005dfc:	000d883a 	mov	r6,zero
10005e00:	000f883a 	mov	r7,zero
10005e04:	d8c03c15 	stw	r3,240(sp)
10005e08:	da003d15 	stw	r8,244(sp)
10005e0c:	000e9b40 	call	1000e9b4 <__eqdf2>
10005e10:	d8c03c17 	ldw	r3,240(sp)
10005e14:	da003d17 	ldw	r8,244(sp)
10005e18:	1000f71e 	bne	r2,zero,100061f8 <___vfprintf_internal_r+0x12dc>
10005e1c:	d8801f17 	ldw	r2,124(sp)
10005e20:	01040074 	movhi	r4,4097
10005e24:	210b4704 	addi	r4,r4,11548
10005e28:	18c00044 	addi	r3,r3,1
10005e2c:	10800044 	addi	r2,r2,1
10005e30:	41000015 	stw	r4,0(r8)
10005e34:	01000044 	movi	r4,1
10005e38:	41000115 	stw	r4,4(r8)
10005e3c:	d8c02015 	stw	r3,128(sp)
10005e40:	d8801f15 	stw	r2,124(sp)
10005e44:	010001c4 	movi	r4,7
10005e48:	2082b816 	blt	r4,r2,1000692c <___vfprintf_internal_r+0x1a10>
10005e4c:	42000204 	addi	r8,r8,8
10005e50:	d8802617 	ldw	r2,152(sp)
10005e54:	d9403317 	ldw	r5,204(sp)
10005e58:	11400216 	blt	r2,r5,10005e64 <___vfprintf_internal_r+0xf48>
10005e5c:	9080004c 	andi	r2,r18,1
10005e60:	103eb326 	beq	r2,zero,10005930 <__alt_data_end+0xf8005930>
10005e64:	d8803717 	ldw	r2,220(sp)
10005e68:	d9003417 	ldw	r4,208(sp)
10005e6c:	d9403717 	ldw	r5,220(sp)
10005e70:	1887883a 	add	r3,r3,r2
10005e74:	d8801f17 	ldw	r2,124(sp)
10005e78:	41000015 	stw	r4,0(r8)
10005e7c:	41400115 	stw	r5,4(r8)
10005e80:	10800044 	addi	r2,r2,1
10005e84:	d8c02015 	stw	r3,128(sp)
10005e88:	d8801f15 	stw	r2,124(sp)
10005e8c:	010001c4 	movi	r4,7
10005e90:	20832916 	blt	r4,r2,10006b38 <___vfprintf_internal_r+0x1c1c>
10005e94:	42000204 	addi	r8,r8,8
10005e98:	d8803317 	ldw	r2,204(sp)
10005e9c:	143fffc4 	addi	r16,r2,-1
10005ea0:	043ea30e 	bge	zero,r16,10005930 <__alt_data_end+0xf8005930>
10005ea4:	04400404 	movi	r17,16
10005ea8:	d8801f17 	ldw	r2,124(sp)
10005eac:	8c00880e 	bge	r17,r16,100060d0 <___vfprintf_internal_r+0x11b4>
10005eb0:	01440074 	movhi	r5,4097
10005eb4:	294b4784 	addi	r5,r5,11550
10005eb8:	d9402c15 	stw	r5,176(sp)
10005ebc:	058001c4 	movi	r22,7
10005ec0:	dcc02d17 	ldw	r19,180(sp)
10005ec4:	00000306 	br	10005ed4 <___vfprintf_internal_r+0xfb8>
10005ec8:	42000204 	addi	r8,r8,8
10005ecc:	843ffc04 	addi	r16,r16,-16
10005ed0:	8c00820e 	bge	r17,r16,100060dc <___vfprintf_internal_r+0x11c0>
10005ed4:	18c00404 	addi	r3,r3,16
10005ed8:	10800044 	addi	r2,r2,1
10005edc:	45000015 	stw	r20,0(r8)
10005ee0:	44400115 	stw	r17,4(r8)
10005ee4:	d8c02015 	stw	r3,128(sp)
10005ee8:	d8801f15 	stw	r2,124(sp)
10005eec:	b0bff60e 	bge	r22,r2,10005ec8 <__alt_data_end+0xf8005ec8>
10005ef0:	d9801e04 	addi	r6,sp,120
10005ef4:	b80b883a 	mov	r5,r23
10005ef8:	9809883a 	mov	r4,r19
10005efc:	000b0340 	call	1000b034 <__sprint_r>
10005f00:	103d0a1e 	bne	r2,zero,1000532c <__alt_data_end+0xf800532c>
10005f04:	d8c02017 	ldw	r3,128(sp)
10005f08:	d8801f17 	ldw	r2,124(sp)
10005f0c:	da000404 	addi	r8,sp,16
10005f10:	003fee06 	br	10005ecc <__alt_data_end+0xf8005ecc>
10005f14:	d9403117 	ldw	r5,196(sp)
10005f18:	d8802917 	ldw	r2,164(sp)
10005f1c:	28adc83a 	sub	r22,r5,r2
10005f20:	05be410e 	bge	zero,r22,10005828 <__alt_data_end+0xf8005828>
10005f24:	07000404 	movi	fp,16
10005f28:	d8801f17 	ldw	r2,124(sp)
10005f2c:	e5838f0e 	bge	fp,r22,10006d6c <___vfprintf_internal_r+0x1e50>
10005f30:	01440074 	movhi	r5,4097
10005f34:	294b4784 	addi	r5,r5,11550
10005f38:	dc403015 	stw	r17,192(sp)
10005f3c:	d9402c15 	stw	r5,176(sp)
10005f40:	b023883a 	mov	r17,r22
10005f44:	04c001c4 	movi	r19,7
10005f48:	a82d883a 	mov	r22,r21
10005f4c:	902b883a 	mov	r21,r18
10005f50:	8025883a 	mov	r18,r16
10005f54:	dc002d17 	ldw	r16,180(sp)
10005f58:	00000306 	br	10005f68 <___vfprintf_internal_r+0x104c>
10005f5c:	8c7ffc04 	addi	r17,r17,-16
10005f60:	42000204 	addi	r8,r8,8
10005f64:	e440110e 	bge	fp,r17,10005fac <___vfprintf_internal_r+0x1090>
10005f68:	18c00404 	addi	r3,r3,16
10005f6c:	10800044 	addi	r2,r2,1
10005f70:	45000015 	stw	r20,0(r8)
10005f74:	47000115 	stw	fp,4(r8)
10005f78:	d8c02015 	stw	r3,128(sp)
10005f7c:	d8801f15 	stw	r2,124(sp)
10005f80:	98bff60e 	bge	r19,r2,10005f5c <__alt_data_end+0xf8005f5c>
10005f84:	d9801e04 	addi	r6,sp,120
10005f88:	b80b883a 	mov	r5,r23
10005f8c:	8009883a 	mov	r4,r16
10005f90:	000b0340 	call	1000b034 <__sprint_r>
10005f94:	103ce51e 	bne	r2,zero,1000532c <__alt_data_end+0xf800532c>
10005f98:	8c7ffc04 	addi	r17,r17,-16
10005f9c:	d8c02017 	ldw	r3,128(sp)
10005fa0:	d8801f17 	ldw	r2,124(sp)
10005fa4:	da000404 	addi	r8,sp,16
10005fa8:	e47fef16 	blt	fp,r17,10005f68 <__alt_data_end+0xf8005f68>
10005fac:	9021883a 	mov	r16,r18
10005fb0:	a825883a 	mov	r18,r21
10005fb4:	b02b883a 	mov	r21,r22
10005fb8:	882d883a 	mov	r22,r17
10005fbc:	dc403017 	ldw	r17,192(sp)
10005fc0:	d9002c17 	ldw	r4,176(sp)
10005fc4:	1d87883a 	add	r3,r3,r22
10005fc8:	10800044 	addi	r2,r2,1
10005fcc:	41000015 	stw	r4,0(r8)
10005fd0:	45800115 	stw	r22,4(r8)
10005fd4:	d8c02015 	stw	r3,128(sp)
10005fd8:	d8801f15 	stw	r2,124(sp)
10005fdc:	010001c4 	movi	r4,7
10005fe0:	20818e16 	blt	r4,r2,1000661c <___vfprintf_internal_r+0x1700>
10005fe4:	42000204 	addi	r8,r8,8
10005fe8:	003e0f06 	br	10005828 <__alt_data_end+0xf8005828>
10005fec:	d9403317 	ldw	r5,204(sp)
10005ff0:	00800044 	movi	r2,1
10005ff4:	18c00044 	addi	r3,r3,1
10005ff8:	1141530e 	bge	r2,r5,10006548 <___vfprintf_internal_r+0x162c>
10005ffc:	dc401f17 	ldw	r17,124(sp)
10006000:	00800044 	movi	r2,1
10006004:	40800115 	stw	r2,4(r8)
10006008:	8c400044 	addi	r17,r17,1
1000600c:	44000015 	stw	r16,0(r8)
10006010:	d8c02015 	stw	r3,128(sp)
10006014:	dc401f15 	stw	r17,124(sp)
10006018:	008001c4 	movi	r2,7
1000601c:	14416b16 	blt	r2,r17,100065cc <___vfprintf_internal_r+0x16b0>
10006020:	42000204 	addi	r8,r8,8
10006024:	d8803717 	ldw	r2,220(sp)
10006028:	d9003417 	ldw	r4,208(sp)
1000602c:	8c400044 	addi	r17,r17,1
10006030:	10c7883a 	add	r3,r2,r3
10006034:	40800115 	stw	r2,4(r8)
10006038:	41000015 	stw	r4,0(r8)
1000603c:	d8c02015 	stw	r3,128(sp)
10006040:	dc401f15 	stw	r17,124(sp)
10006044:	008001c4 	movi	r2,7
10006048:	14416916 	blt	r2,r17,100065f0 <___vfprintf_internal_r+0x16d4>
1000604c:	45800204 	addi	r22,r8,8
10006050:	d9003617 	ldw	r4,216(sp)
10006054:	d9403817 	ldw	r5,224(sp)
10006058:	000d883a 	mov	r6,zero
1000605c:	000f883a 	mov	r7,zero
10006060:	d8c03c15 	stw	r3,240(sp)
10006064:	000e9b40 	call	1000e9b4 <__eqdf2>
10006068:	d8c03c17 	ldw	r3,240(sp)
1000606c:	1000bc26 	beq	r2,zero,10006360 <___vfprintf_internal_r+0x1444>
10006070:	d9403317 	ldw	r5,204(sp)
10006074:	84000044 	addi	r16,r16,1
10006078:	8c400044 	addi	r17,r17,1
1000607c:	28bfffc4 	addi	r2,r5,-1
10006080:	1887883a 	add	r3,r3,r2
10006084:	b0800115 	stw	r2,4(r22)
10006088:	b4000015 	stw	r16,0(r22)
1000608c:	d8c02015 	stw	r3,128(sp)
10006090:	dc401f15 	stw	r17,124(sp)
10006094:	008001c4 	movi	r2,7
10006098:	14414316 	blt	r2,r17,100065a8 <___vfprintf_internal_r+0x168c>
1000609c:	b5800204 	addi	r22,r22,8
100060a0:	d9003a17 	ldw	r4,232(sp)
100060a4:	df0022c4 	addi	fp,sp,139
100060a8:	8c400044 	addi	r17,r17,1
100060ac:	20c7883a 	add	r3,r4,r3
100060b0:	b7000015 	stw	fp,0(r22)
100060b4:	b1000115 	stw	r4,4(r22)
100060b8:	d8c02015 	stw	r3,128(sp)
100060bc:	dc401f15 	stw	r17,124(sp)
100060c0:	008001c4 	movi	r2,7
100060c4:	14400e16 	blt	r2,r17,10006100 <___vfprintf_internal_r+0x11e4>
100060c8:	b2000204 	addi	r8,r22,8
100060cc:	003e1806 	br	10005930 <__alt_data_end+0xf8005930>
100060d0:	01040074 	movhi	r4,4097
100060d4:	210b4784 	addi	r4,r4,11550
100060d8:	d9002c15 	stw	r4,176(sp)
100060dc:	d9002c17 	ldw	r4,176(sp)
100060e0:	1c07883a 	add	r3,r3,r16
100060e4:	44000115 	stw	r16,4(r8)
100060e8:	41000015 	stw	r4,0(r8)
100060ec:	10800044 	addi	r2,r2,1
100060f0:	d8c02015 	stw	r3,128(sp)
100060f4:	d8801f15 	stw	r2,124(sp)
100060f8:	010001c4 	movi	r4,7
100060fc:	20be0b0e 	bge	r4,r2,1000592c <__alt_data_end+0xf800592c>
10006100:	d9002d17 	ldw	r4,180(sp)
10006104:	d9801e04 	addi	r6,sp,120
10006108:	b80b883a 	mov	r5,r23
1000610c:	000b0340 	call	1000b034 <__sprint_r>
10006110:	103c861e 	bne	r2,zero,1000532c <__alt_data_end+0xf800532c>
10006114:	d8c02017 	ldw	r3,128(sp)
10006118:	da000404 	addi	r8,sp,16
1000611c:	003e0406 	br	10005930 <__alt_data_end+0xf8005930>
10006120:	d9002d17 	ldw	r4,180(sp)
10006124:	d9801e04 	addi	r6,sp,120
10006128:	b80b883a 	mov	r5,r23
1000612c:	000b0340 	call	1000b034 <__sprint_r>
10006130:	103e3b26 	beq	r2,zero,10005a20 <__alt_data_end+0xf8005a20>
10006134:	003c7d06 	br	1000532c <__alt_data_end+0xf800532c>
10006138:	d9002d17 	ldw	r4,180(sp)
1000613c:	d9801e04 	addi	r6,sp,120
10006140:	b80b883a 	mov	r5,r23
10006144:	000b0340 	call	1000b034 <__sprint_r>
10006148:	103c781e 	bne	r2,zero,1000532c <__alt_data_end+0xf800532c>
1000614c:	d8c02017 	ldw	r3,128(sp)
10006150:	da000404 	addi	r8,sp,16
10006154:	003de906 	br	100058fc <__alt_data_end+0xf80058fc>
10006158:	d9002d17 	ldw	r4,180(sp)
1000615c:	d9801e04 	addi	r6,sp,120
10006160:	b80b883a 	mov	r5,r23
10006164:	000b0340 	call	1000b034 <__sprint_r>
10006168:	103c701e 	bne	r2,zero,1000532c <__alt_data_end+0xf800532c>
1000616c:	d8c02017 	ldw	r3,128(sp)
10006170:	da000404 	addi	r8,sp,16
10006174:	003d9b06 	br	100057e4 <__alt_data_end+0xf80057e4>
10006178:	d9002d17 	ldw	r4,180(sp)
1000617c:	d9801e04 	addi	r6,sp,120
10006180:	b80b883a 	mov	r5,r23
10006184:	000b0340 	call	1000b034 <__sprint_r>
10006188:	103c681e 	bne	r2,zero,1000532c <__alt_data_end+0xf800532c>
1000618c:	d8c02017 	ldw	r3,128(sp)
10006190:	da000404 	addi	r8,sp,16
10006194:	003da106 	br	1000581c <__alt_data_end+0xf800581c>
10006198:	d9402a17 	ldw	r5,168(sp)
1000619c:	d8002785 	stb	zero,158(sp)
100061a0:	283f0616 	blt	r5,zero,10005dbc <__alt_data_end+0xf8005dbc>
100061a4:	00ffdfc4 	movi	r3,-129
100061a8:	9d84b03a 	or	r2,r19,r22
100061ac:	90e4703a 	and	r18,r18,r3
100061b0:	103c3b26 	beq	r2,zero,100052a0 <__alt_data_end+0xf80052a0>
100061b4:	0039883a 	mov	fp,zero
100061b8:	003e5806 	br	10005b1c <__alt_data_end+0xf8005b1c>
100061bc:	9080040c 	andi	r2,r18,16
100061c0:	1001b326 	beq	r2,zero,10006890 <___vfprintf_internal_r+0x1974>
100061c4:	d8c02e17 	ldw	r3,184(sp)
100061c8:	d9002a17 	ldw	r4,168(sp)
100061cc:	d8002785 	stb	zero,158(sp)
100061d0:	18800104 	addi	r2,r3,4
100061d4:	1cc00017 	ldw	r19,0(r3)
100061d8:	002d883a 	mov	r22,zero
100061dc:	2001b516 	blt	r4,zero,100068b4 <___vfprintf_internal_r+0x1998>
100061e0:	00ffdfc4 	movi	r3,-129
100061e4:	d8802e15 	stw	r2,184(sp)
100061e8:	90e4703a 	and	r18,r18,r3
100061ec:	983d0526 	beq	r19,zero,10005604 <__alt_data_end+0xf8005604>
100061f0:	0039883a 	mov	fp,zero
100061f4:	003d0806 	br	10005618 <__alt_data_end+0xf8005618>
100061f8:	dc402617 	ldw	r17,152(sp)
100061fc:	0441d30e 	bge	zero,r17,1000694c <___vfprintf_internal_r+0x1a30>
10006200:	dc403217 	ldw	r17,200(sp)
10006204:	d8803317 	ldw	r2,204(sp)
10006208:	1440010e 	bge	r2,r17,10006210 <___vfprintf_internal_r+0x12f4>
1000620c:	1023883a 	mov	r17,r2
10006210:	04400a0e 	bge	zero,r17,1000623c <___vfprintf_internal_r+0x1320>
10006214:	d8801f17 	ldw	r2,124(sp)
10006218:	1c47883a 	add	r3,r3,r17
1000621c:	44000015 	stw	r16,0(r8)
10006220:	10800044 	addi	r2,r2,1
10006224:	44400115 	stw	r17,4(r8)
10006228:	d8c02015 	stw	r3,128(sp)
1000622c:	d8801f15 	stw	r2,124(sp)
10006230:	010001c4 	movi	r4,7
10006234:	20826516 	blt	r4,r2,10006bcc <___vfprintf_internal_r+0x1cb0>
10006238:	42000204 	addi	r8,r8,8
1000623c:	88026116 	blt	r17,zero,10006bc4 <___vfprintf_internal_r+0x1ca8>
10006240:	d9003217 	ldw	r4,200(sp)
10006244:	2463c83a 	sub	r17,r4,r17
10006248:	04407b0e 	bge	zero,r17,10006438 <___vfprintf_internal_r+0x151c>
1000624c:	05800404 	movi	r22,16
10006250:	d8801f17 	ldw	r2,124(sp)
10006254:	b4419d0e 	bge	r22,r17,100068cc <___vfprintf_internal_r+0x19b0>
10006258:	01040074 	movhi	r4,4097
1000625c:	210b4784 	addi	r4,r4,11550
10006260:	d9002c15 	stw	r4,176(sp)
10006264:	070001c4 	movi	fp,7
10006268:	dcc02d17 	ldw	r19,180(sp)
1000626c:	00000306 	br	1000627c <___vfprintf_internal_r+0x1360>
10006270:	42000204 	addi	r8,r8,8
10006274:	8c7ffc04 	addi	r17,r17,-16
10006278:	b441970e 	bge	r22,r17,100068d8 <___vfprintf_internal_r+0x19bc>
1000627c:	18c00404 	addi	r3,r3,16
10006280:	10800044 	addi	r2,r2,1
10006284:	45000015 	stw	r20,0(r8)
10006288:	45800115 	stw	r22,4(r8)
1000628c:	d8c02015 	stw	r3,128(sp)
10006290:	d8801f15 	stw	r2,124(sp)
10006294:	e0bff60e 	bge	fp,r2,10006270 <__alt_data_end+0xf8006270>
10006298:	d9801e04 	addi	r6,sp,120
1000629c:	b80b883a 	mov	r5,r23
100062a0:	9809883a 	mov	r4,r19
100062a4:	000b0340 	call	1000b034 <__sprint_r>
100062a8:	103c201e 	bne	r2,zero,1000532c <__alt_data_end+0xf800532c>
100062ac:	d8c02017 	ldw	r3,128(sp)
100062b0:	d8801f17 	ldw	r2,124(sp)
100062b4:	da000404 	addi	r8,sp,16
100062b8:	003fee06 	br	10006274 <__alt_data_end+0xf8006274>
100062bc:	d9002d17 	ldw	r4,180(sp)
100062c0:	d9801e04 	addi	r6,sp,120
100062c4:	b80b883a 	mov	r5,r23
100062c8:	000b0340 	call	1000b034 <__sprint_r>
100062cc:	103c171e 	bne	r2,zero,1000532c <__alt_data_end+0xf800532c>
100062d0:	d8c02017 	ldw	r3,128(sp)
100062d4:	df002787 	ldb	fp,158(sp)
100062d8:	da000404 	addi	r8,sp,16
100062dc:	003d3406 	br	100057b0 <__alt_data_end+0xf80057b0>
100062e0:	9080040c 	andi	r2,r18,16
100062e4:	10016126 	beq	r2,zero,1000686c <___vfprintf_internal_r+0x1950>
100062e8:	d9402e17 	ldw	r5,184(sp)
100062ec:	2cc00017 	ldw	r19,0(r5)
100062f0:	29400104 	addi	r5,r5,4
100062f4:	d9402e15 	stw	r5,184(sp)
100062f8:	982dd7fa 	srai	r22,r19,31
100062fc:	b005883a 	mov	r2,r22
10006300:	003c5a06 	br	1000546c <__alt_data_end+0xf800546c>
10006304:	9080040c 	andi	r2,r18,16
10006308:	10003526 	beq	r2,zero,100063e0 <___vfprintf_internal_r+0x14c4>
1000630c:	d8c02e17 	ldw	r3,184(sp)
10006310:	d9002a17 	ldw	r4,168(sp)
10006314:	d8002785 	stb	zero,158(sp)
10006318:	18800104 	addi	r2,r3,4
1000631c:	1cc00017 	ldw	r19,0(r3)
10006320:	002d883a 	mov	r22,zero
10006324:	20003716 	blt	r4,zero,10006404 <___vfprintf_internal_r+0x14e8>
10006328:	00ffdfc4 	movi	r3,-129
1000632c:	d8802e15 	stw	r2,184(sp)
10006330:	90e4703a 	and	r18,r18,r3
10006334:	0039883a 	mov	fp,zero
10006338:	983dd426 	beq	r19,zero,10005a8c <__alt_data_end+0xf8005a8c>
1000633c:	00800244 	movi	r2,9
10006340:	14fc5336 	bltu	r2,r19,10005490 <__alt_data_end+0xf8005490>
10006344:	d8c02817 	ldw	r3,160(sp)
10006348:	dc001dc4 	addi	r16,sp,119
1000634c:	9cc00c04 	addi	r19,r19,48
10006350:	1c07c83a 	sub	r3,r3,r16
10006354:	dcc01dc5 	stb	r19,119(sp)
10006358:	d8c02b15 	stw	r3,172(sp)
1000635c:	003cc606 	br	10005678 <__alt_data_end+0xf8005678>
10006360:	d8803317 	ldw	r2,204(sp)
10006364:	143fffc4 	addi	r16,r2,-1
10006368:	043f4d0e 	bge	zero,r16,100060a0 <__alt_data_end+0xf80060a0>
1000636c:	07000404 	movi	fp,16
10006370:	e400810e 	bge	fp,r16,10006578 <___vfprintf_internal_r+0x165c>
10006374:	01440074 	movhi	r5,4097
10006378:	294b4784 	addi	r5,r5,11550
1000637c:	d9402c15 	stw	r5,176(sp)
10006380:	01c001c4 	movi	r7,7
10006384:	dcc02d17 	ldw	r19,180(sp)
10006388:	00000306 	br	10006398 <___vfprintf_internal_r+0x147c>
1000638c:	b5800204 	addi	r22,r22,8
10006390:	843ffc04 	addi	r16,r16,-16
10006394:	e4007b0e 	bge	fp,r16,10006584 <___vfprintf_internal_r+0x1668>
10006398:	18c00404 	addi	r3,r3,16
1000639c:	8c400044 	addi	r17,r17,1
100063a0:	b5000015 	stw	r20,0(r22)
100063a4:	b7000115 	stw	fp,4(r22)
100063a8:	d8c02015 	stw	r3,128(sp)
100063ac:	dc401f15 	stw	r17,124(sp)
100063b0:	3c7ff60e 	bge	r7,r17,1000638c <__alt_data_end+0xf800638c>
100063b4:	d9801e04 	addi	r6,sp,120
100063b8:	b80b883a 	mov	r5,r23
100063bc:	9809883a 	mov	r4,r19
100063c0:	d9c03c15 	stw	r7,240(sp)
100063c4:	000b0340 	call	1000b034 <__sprint_r>
100063c8:	d9c03c17 	ldw	r7,240(sp)
100063cc:	103bd71e 	bne	r2,zero,1000532c <__alt_data_end+0xf800532c>
100063d0:	d8c02017 	ldw	r3,128(sp)
100063d4:	dc401f17 	ldw	r17,124(sp)
100063d8:	dd800404 	addi	r22,sp,16
100063dc:	003fec06 	br	10006390 <__alt_data_end+0xf8006390>
100063e0:	9080100c 	andi	r2,r18,64
100063e4:	d8002785 	stb	zero,158(sp)
100063e8:	10010e26 	beq	r2,zero,10006824 <___vfprintf_internal_r+0x1908>
100063ec:	d9402e17 	ldw	r5,184(sp)
100063f0:	d8c02a17 	ldw	r3,168(sp)
100063f4:	002d883a 	mov	r22,zero
100063f8:	28800104 	addi	r2,r5,4
100063fc:	2cc0000b 	ldhu	r19,0(r5)
10006400:	183fc90e 	bge	r3,zero,10006328 <__alt_data_end+0xf8006328>
10006404:	d8802e15 	stw	r2,184(sp)
10006408:	0039883a 	mov	fp,zero
1000640c:	9d84b03a 	or	r2,r19,r22
10006410:	103c1e1e 	bne	r2,zero,1000548c <__alt_data_end+0xf800548c>
10006414:	00800044 	movi	r2,1
10006418:	003e6c06 	br	10005dcc <__alt_data_end+0xf8005dcc>
1000641c:	d9002d17 	ldw	r4,180(sp)
10006420:	d9801e04 	addi	r6,sp,120
10006424:	b80b883a 	mov	r5,r23
10006428:	000b0340 	call	1000b034 <__sprint_r>
1000642c:	103bbf1e 	bne	r2,zero,1000532c <__alt_data_end+0xf800532c>
10006430:	d8c02017 	ldw	r3,128(sp)
10006434:	da000404 	addi	r8,sp,16
10006438:	d9003217 	ldw	r4,200(sp)
1000643c:	d8802617 	ldw	r2,152(sp)
10006440:	d9403317 	ldw	r5,204(sp)
10006444:	8123883a 	add	r17,r16,r4
10006448:	11400216 	blt	r2,r5,10006454 <___vfprintf_internal_r+0x1538>
1000644c:	9100004c 	andi	r4,r18,1
10006450:	20000d26 	beq	r4,zero,10006488 <___vfprintf_internal_r+0x156c>
10006454:	d9003717 	ldw	r4,220(sp)
10006458:	d9403417 	ldw	r5,208(sp)
1000645c:	1907883a 	add	r3,r3,r4
10006460:	d9001f17 	ldw	r4,124(sp)
10006464:	41400015 	stw	r5,0(r8)
10006468:	d9403717 	ldw	r5,220(sp)
1000646c:	21000044 	addi	r4,r4,1
10006470:	d8c02015 	stw	r3,128(sp)
10006474:	41400115 	stw	r5,4(r8)
10006478:	d9001f15 	stw	r4,124(sp)
1000647c:	014001c4 	movi	r5,7
10006480:	2901e816 	blt	r5,r4,10006c24 <___vfprintf_internal_r+0x1d08>
10006484:	42000204 	addi	r8,r8,8
10006488:	d9003317 	ldw	r4,204(sp)
1000648c:	8121883a 	add	r16,r16,r4
10006490:	2085c83a 	sub	r2,r4,r2
10006494:	8461c83a 	sub	r16,r16,r17
10006498:	1400010e 	bge	r2,r16,100064a0 <___vfprintf_internal_r+0x1584>
1000649c:	1021883a 	mov	r16,r2
100064a0:	04000a0e 	bge	zero,r16,100064cc <___vfprintf_internal_r+0x15b0>
100064a4:	d9001f17 	ldw	r4,124(sp)
100064a8:	1c07883a 	add	r3,r3,r16
100064ac:	44400015 	stw	r17,0(r8)
100064b0:	21000044 	addi	r4,r4,1
100064b4:	44000115 	stw	r16,4(r8)
100064b8:	d8c02015 	stw	r3,128(sp)
100064bc:	d9001f15 	stw	r4,124(sp)
100064c0:	014001c4 	movi	r5,7
100064c4:	2901fb16 	blt	r5,r4,10006cb4 <___vfprintf_internal_r+0x1d98>
100064c8:	42000204 	addi	r8,r8,8
100064cc:	8001f716 	blt	r16,zero,10006cac <___vfprintf_internal_r+0x1d90>
100064d0:	1421c83a 	sub	r16,r2,r16
100064d4:	043d160e 	bge	zero,r16,10005930 <__alt_data_end+0xf8005930>
100064d8:	04400404 	movi	r17,16
100064dc:	d8801f17 	ldw	r2,124(sp)
100064e0:	8c3efb0e 	bge	r17,r16,100060d0 <__alt_data_end+0xf80060d0>
100064e4:	01440074 	movhi	r5,4097
100064e8:	294b4784 	addi	r5,r5,11550
100064ec:	d9402c15 	stw	r5,176(sp)
100064f0:	058001c4 	movi	r22,7
100064f4:	dcc02d17 	ldw	r19,180(sp)
100064f8:	00000306 	br	10006508 <___vfprintf_internal_r+0x15ec>
100064fc:	42000204 	addi	r8,r8,8
10006500:	843ffc04 	addi	r16,r16,-16
10006504:	8c3ef50e 	bge	r17,r16,100060dc <__alt_data_end+0xf80060dc>
10006508:	18c00404 	addi	r3,r3,16
1000650c:	10800044 	addi	r2,r2,1
10006510:	45000015 	stw	r20,0(r8)
10006514:	44400115 	stw	r17,4(r8)
10006518:	d8c02015 	stw	r3,128(sp)
1000651c:	d8801f15 	stw	r2,124(sp)
10006520:	b0bff60e 	bge	r22,r2,100064fc <__alt_data_end+0xf80064fc>
10006524:	d9801e04 	addi	r6,sp,120
10006528:	b80b883a 	mov	r5,r23
1000652c:	9809883a 	mov	r4,r19
10006530:	000b0340 	call	1000b034 <__sprint_r>
10006534:	103b7d1e 	bne	r2,zero,1000532c <__alt_data_end+0xf800532c>
10006538:	d8c02017 	ldw	r3,128(sp)
1000653c:	d8801f17 	ldw	r2,124(sp)
10006540:	da000404 	addi	r8,sp,16
10006544:	003fee06 	br	10006500 <__alt_data_end+0xf8006500>
10006548:	9088703a 	and	r4,r18,r2
1000654c:	203eab1e 	bne	r4,zero,10005ffc <__alt_data_end+0xf8005ffc>
10006550:	dc401f17 	ldw	r17,124(sp)
10006554:	40800115 	stw	r2,4(r8)
10006558:	44000015 	stw	r16,0(r8)
1000655c:	8c400044 	addi	r17,r17,1
10006560:	d8c02015 	stw	r3,128(sp)
10006564:	dc401f15 	stw	r17,124(sp)
10006568:	008001c4 	movi	r2,7
1000656c:	14400e16 	blt	r2,r17,100065a8 <___vfprintf_internal_r+0x168c>
10006570:	45800204 	addi	r22,r8,8
10006574:	003eca06 	br	100060a0 <__alt_data_end+0xf80060a0>
10006578:	01040074 	movhi	r4,4097
1000657c:	210b4784 	addi	r4,r4,11550
10006580:	d9002c15 	stw	r4,176(sp)
10006584:	d8802c17 	ldw	r2,176(sp)
10006588:	1c07883a 	add	r3,r3,r16
1000658c:	8c400044 	addi	r17,r17,1
10006590:	b0800015 	stw	r2,0(r22)
10006594:	b4000115 	stw	r16,4(r22)
10006598:	d8c02015 	stw	r3,128(sp)
1000659c:	dc401f15 	stw	r17,124(sp)
100065a0:	008001c4 	movi	r2,7
100065a4:	147ebd0e 	bge	r2,r17,1000609c <__alt_data_end+0xf800609c>
100065a8:	d9002d17 	ldw	r4,180(sp)
100065ac:	d9801e04 	addi	r6,sp,120
100065b0:	b80b883a 	mov	r5,r23
100065b4:	000b0340 	call	1000b034 <__sprint_r>
100065b8:	103b5c1e 	bne	r2,zero,1000532c <__alt_data_end+0xf800532c>
100065bc:	d8c02017 	ldw	r3,128(sp)
100065c0:	dc401f17 	ldw	r17,124(sp)
100065c4:	dd800404 	addi	r22,sp,16
100065c8:	003eb506 	br	100060a0 <__alt_data_end+0xf80060a0>
100065cc:	d9002d17 	ldw	r4,180(sp)
100065d0:	d9801e04 	addi	r6,sp,120
100065d4:	b80b883a 	mov	r5,r23
100065d8:	000b0340 	call	1000b034 <__sprint_r>
100065dc:	103b531e 	bne	r2,zero,1000532c <__alt_data_end+0xf800532c>
100065e0:	d8c02017 	ldw	r3,128(sp)
100065e4:	dc401f17 	ldw	r17,124(sp)
100065e8:	da000404 	addi	r8,sp,16
100065ec:	003e8d06 	br	10006024 <__alt_data_end+0xf8006024>
100065f0:	d9002d17 	ldw	r4,180(sp)
100065f4:	d9801e04 	addi	r6,sp,120
100065f8:	b80b883a 	mov	r5,r23
100065fc:	000b0340 	call	1000b034 <__sprint_r>
10006600:	103b4a1e 	bne	r2,zero,1000532c <__alt_data_end+0xf800532c>
10006604:	d8c02017 	ldw	r3,128(sp)
10006608:	dc401f17 	ldw	r17,124(sp)
1000660c:	dd800404 	addi	r22,sp,16
10006610:	003e8f06 	br	10006050 <__alt_data_end+0xf8006050>
10006614:	0027883a 	mov	r19,zero
10006618:	003f4a06 	br	10006344 <__alt_data_end+0xf8006344>
1000661c:	d9002d17 	ldw	r4,180(sp)
10006620:	d9801e04 	addi	r6,sp,120
10006624:	b80b883a 	mov	r5,r23
10006628:	000b0340 	call	1000b034 <__sprint_r>
1000662c:	103b3f1e 	bne	r2,zero,1000532c <__alt_data_end+0xf800532c>
10006630:	d8c02017 	ldw	r3,128(sp)
10006634:	da000404 	addi	r8,sp,16
10006638:	003c7b06 	br	10005828 <__alt_data_end+0xf8005828>
1000663c:	d9402a17 	ldw	r5,168(sp)
10006640:	04e7c83a 	sub	r19,zero,r19
10006644:	07000b44 	movi	fp,45
10006648:	9804c03a 	cmpne	r2,r19,zero
1000664c:	05adc83a 	sub	r22,zero,r22
10006650:	df002785 	stb	fp,158(sp)
10006654:	b0adc83a 	sub	r22,r22,r2
10006658:	28017b16 	blt	r5,zero,10006c48 <___vfprintf_internal_r+0x1d2c>
1000665c:	00bfdfc4 	movi	r2,-129
10006660:	90a4703a 	and	r18,r18,r2
10006664:	003b8906 	br	1000548c <__alt_data_end+0xf800548c>
10006668:	d9003617 	ldw	r4,216(sp)
1000666c:	d9403817 	ldw	r5,224(sp)
10006670:	da003d15 	stw	r8,244(sp)
10006674:	000aae40 	call	1000aae4 <__fpclassifyd>
10006678:	da003d17 	ldw	r8,244(sp)
1000667c:	1000f026 	beq	r2,zero,10006a40 <___vfprintf_internal_r+0x1b24>
10006680:	d9002a17 	ldw	r4,168(sp)
10006684:	05bff7c4 	movi	r22,-33
10006688:	00bfffc4 	movi	r2,-1
1000668c:	8dac703a 	and	r22,r17,r22
10006690:	20820026 	beq	r4,r2,10006e94 <___vfprintf_internal_r+0x1f78>
10006694:	008011c4 	movi	r2,71
10006698:	b081f726 	beq	r22,r2,10006e78 <___vfprintf_internal_r+0x1f5c>
1000669c:	d9003817 	ldw	r4,224(sp)
100066a0:	90c04014 	ori	r3,r18,256
100066a4:	d8c02c15 	stw	r3,176(sp)
100066a8:	20021516 	blt	r4,zero,10006f00 <___vfprintf_internal_r+0x1fe4>
100066ac:	dcc03817 	ldw	r19,224(sp)
100066b0:	d8002905 	stb	zero,164(sp)
100066b4:	00801984 	movi	r2,102
100066b8:	8881f926 	beq	r17,r2,10006ea0 <___vfprintf_internal_r+0x1f84>
100066bc:	00801184 	movi	r2,70
100066c0:	88821c26 	beq	r17,r2,10006f34 <___vfprintf_internal_r+0x2018>
100066c4:	00801144 	movi	r2,69
100066c8:	b081ef26 	beq	r22,r2,10006e88 <___vfprintf_internal_r+0x1f6c>
100066cc:	d8c02a17 	ldw	r3,168(sp)
100066d0:	d8802104 	addi	r2,sp,132
100066d4:	d8800315 	stw	r2,12(sp)
100066d8:	d9403617 	ldw	r5,216(sp)
100066dc:	d8802504 	addi	r2,sp,148
100066e0:	d9002d17 	ldw	r4,180(sp)
100066e4:	d8800215 	stw	r2,8(sp)
100066e8:	d8802604 	addi	r2,sp,152
100066ec:	d8c00015 	stw	r3,0(sp)
100066f0:	d8800115 	stw	r2,4(sp)
100066f4:	01c00084 	movi	r7,2
100066f8:	980d883a 	mov	r6,r19
100066fc:	d8c03c15 	stw	r3,240(sp)
10006700:	da003d15 	stw	r8,244(sp)
10006704:	00078980 	call	10007898 <_dtoa_r>
10006708:	1021883a 	mov	r16,r2
1000670c:	008019c4 	movi	r2,103
10006710:	d8c03c17 	ldw	r3,240(sp)
10006714:	da003d17 	ldw	r8,244(sp)
10006718:	88817126 	beq	r17,r2,10006ce0 <___vfprintf_internal_r+0x1dc4>
1000671c:	008011c4 	movi	r2,71
10006720:	88829126 	beq	r17,r2,10007168 <___vfprintf_internal_r+0x224c>
10006724:	80f9883a 	add	fp,r16,r3
10006728:	d9003617 	ldw	r4,216(sp)
1000672c:	000d883a 	mov	r6,zero
10006730:	000f883a 	mov	r7,zero
10006734:	980b883a 	mov	r5,r19
10006738:	da003d15 	stw	r8,244(sp)
1000673c:	000e9b40 	call	1000e9b4 <__eqdf2>
10006740:	da003d17 	ldw	r8,244(sp)
10006744:	10018d26 	beq	r2,zero,10006d7c <___vfprintf_internal_r+0x1e60>
10006748:	d8802117 	ldw	r2,132(sp)
1000674c:	1700062e 	bgeu	r2,fp,10006768 <___vfprintf_internal_r+0x184c>
10006750:	01000c04 	movi	r4,48
10006754:	10c00044 	addi	r3,r2,1
10006758:	d8c02115 	stw	r3,132(sp)
1000675c:	11000005 	stb	r4,0(r2)
10006760:	d8802117 	ldw	r2,132(sp)
10006764:	173ffb36 	bltu	r2,fp,10006754 <__alt_data_end+0xf8006754>
10006768:	1405c83a 	sub	r2,r2,r16
1000676c:	d8803315 	stw	r2,204(sp)
10006770:	008011c4 	movi	r2,71
10006774:	b0817626 	beq	r22,r2,10006d50 <___vfprintf_internal_r+0x1e34>
10006778:	00801944 	movi	r2,101
1000677c:	1442800e 	bge	r2,r17,10007180 <___vfprintf_internal_r+0x2264>
10006780:	d8c02617 	ldw	r3,152(sp)
10006784:	00801984 	movi	r2,102
10006788:	d8c03215 	stw	r3,200(sp)
1000678c:	8881fe26 	beq	r17,r2,10006f88 <___vfprintf_internal_r+0x206c>
10006790:	d8c03217 	ldw	r3,200(sp)
10006794:	d9003317 	ldw	r4,204(sp)
10006798:	1901dd16 	blt	r3,r4,10006f10 <___vfprintf_internal_r+0x1ff4>
1000679c:	9480004c 	andi	r18,r18,1
100067a0:	90022b1e 	bne	r18,zero,10007050 <___vfprintf_internal_r+0x2134>
100067a4:	1805883a 	mov	r2,r3
100067a8:	18028316 	blt	r3,zero,100071b8 <___vfprintf_internal_r+0x229c>
100067ac:	d8c03217 	ldw	r3,200(sp)
100067b0:	044019c4 	movi	r17,103
100067b4:	d8c02b15 	stw	r3,172(sp)
100067b8:	df002907 	ldb	fp,164(sp)
100067bc:	e001531e 	bne	fp,zero,10006d0c <___vfprintf_internal_r+0x1df0>
100067c0:	df002783 	ldbu	fp,158(sp)
100067c4:	d8802915 	stw	r2,164(sp)
100067c8:	dc802c17 	ldw	r18,176(sp)
100067cc:	d8002a15 	stw	zero,168(sp)
100067d0:	003baf06 	br	10005690 <__alt_data_end+0xf8005690>
100067d4:	d8c02e17 	ldw	r3,184(sp)
100067d8:	d9002e17 	ldw	r4,184(sp)
100067dc:	d9402e17 	ldw	r5,184(sp)
100067e0:	18c00017 	ldw	r3,0(r3)
100067e4:	21000117 	ldw	r4,4(r4)
100067e8:	29400204 	addi	r5,r5,8
100067ec:	d8c03615 	stw	r3,216(sp)
100067f0:	d9003815 	stw	r4,224(sp)
100067f4:	d9402e15 	stw	r5,184(sp)
100067f8:	003b5006 	br	1000553c <__alt_data_end+0xf800553c>
100067fc:	ac400007 	ldb	r17,0(r21)
10006800:	003a2806 	br	100050a4 <__alt_data_end+0xf80050a4>
10006804:	9080100c 	andi	r2,r18,64
10006808:	1000a826 	beq	r2,zero,10006aac <___vfprintf_internal_r+0x1b90>
1000680c:	d8c02e17 	ldw	r3,184(sp)
10006810:	002d883a 	mov	r22,zero
10006814:	1cc0000b 	ldhu	r19,0(r3)
10006818:	18c00104 	addi	r3,r3,4
1000681c:	d8c02e15 	stw	r3,184(sp)
10006820:	003caf06 	br	10005ae0 <__alt_data_end+0xf8005ae0>
10006824:	d9002e17 	ldw	r4,184(sp)
10006828:	d9402a17 	ldw	r5,168(sp)
1000682c:	002d883a 	mov	r22,zero
10006830:	20800104 	addi	r2,r4,4
10006834:	24c00017 	ldw	r19,0(r4)
10006838:	283ebb0e 	bge	r5,zero,10006328 <__alt_data_end+0xf8006328>
1000683c:	003ef106 	br	10006404 <__alt_data_end+0xf8006404>
10006840:	9080040c 	andi	r2,r18,16
10006844:	1000921e 	bne	r2,zero,10006a90 <___vfprintf_internal_r+0x1b74>
10006848:	9480100c 	andi	r18,r18,64
1000684c:	90013926 	beq	r18,zero,10006d34 <___vfprintf_internal_r+0x1e18>
10006850:	d9402e17 	ldw	r5,184(sp)
10006854:	d8c02f17 	ldw	r3,188(sp)
10006858:	28800017 	ldw	r2,0(r5)
1000685c:	29400104 	addi	r5,r5,4
10006860:	d9402e15 	stw	r5,184(sp)
10006864:	10c0000d 	sth	r3,0(r2)
10006868:	0039e406 	br	10004ffc <__alt_data_end+0xf8004ffc>
1000686c:	9080100c 	andi	r2,r18,64
10006870:	10008026 	beq	r2,zero,10006a74 <___vfprintf_internal_r+0x1b58>
10006874:	d8802e17 	ldw	r2,184(sp)
10006878:	14c0000f 	ldh	r19,0(r2)
1000687c:	10800104 	addi	r2,r2,4
10006880:	d8802e15 	stw	r2,184(sp)
10006884:	982dd7fa 	srai	r22,r19,31
10006888:	b005883a 	mov	r2,r22
1000688c:	003af706 	br	1000546c <__alt_data_end+0xf800546c>
10006890:	9080100c 	andi	r2,r18,64
10006894:	d8002785 	stb	zero,158(sp)
10006898:	10008a1e 	bne	r2,zero,10006ac4 <___vfprintf_internal_r+0x1ba8>
1000689c:	d9002e17 	ldw	r4,184(sp)
100068a0:	d9402a17 	ldw	r5,168(sp)
100068a4:	002d883a 	mov	r22,zero
100068a8:	20800104 	addi	r2,r4,4
100068ac:	24c00017 	ldw	r19,0(r4)
100068b0:	283e4b0e 	bge	r5,zero,100061e0 <__alt_data_end+0xf80061e0>
100068b4:	9d86b03a 	or	r3,r19,r22
100068b8:	d8802e15 	stw	r2,184(sp)
100068bc:	183e4c1e 	bne	r3,zero,100061f0 <__alt_data_end+0xf80061f0>
100068c0:	0039883a 	mov	fp,zero
100068c4:	0005883a 	mov	r2,zero
100068c8:	003d4006 	br	10005dcc <__alt_data_end+0xf8005dcc>
100068cc:	01440074 	movhi	r5,4097
100068d0:	294b4784 	addi	r5,r5,11550
100068d4:	d9402c15 	stw	r5,176(sp)
100068d8:	d9402c17 	ldw	r5,176(sp)
100068dc:	1c47883a 	add	r3,r3,r17
100068e0:	10800044 	addi	r2,r2,1
100068e4:	41400015 	stw	r5,0(r8)
100068e8:	44400115 	stw	r17,4(r8)
100068ec:	d8c02015 	stw	r3,128(sp)
100068f0:	d8801f15 	stw	r2,124(sp)
100068f4:	010001c4 	movi	r4,7
100068f8:	20bec816 	blt	r4,r2,1000641c <__alt_data_end+0xf800641c>
100068fc:	42000204 	addi	r8,r8,8
10006900:	003ecd06 	br	10006438 <__alt_data_end+0xf8006438>
10006904:	d9002a17 	ldw	r4,168(sp)
10006908:	d8002785 	stb	zero,158(sp)
1000690c:	203d2d16 	blt	r4,zero,10005dc4 <__alt_data_end+0xf8005dc4>
10006910:	00bfdfc4 	movi	r2,-129
10006914:	90a4703a 	and	r18,r18,r2
10006918:	003a6106 	br	100052a0 <__alt_data_end+0xf80052a0>
1000691c:	01040074 	movhi	r4,4097
10006920:	210b4784 	addi	r4,r4,11550
10006924:	d9002c15 	stw	r4,176(sp)
10006928:	003bea06 	br	100058d4 <__alt_data_end+0xf80058d4>
1000692c:	d9002d17 	ldw	r4,180(sp)
10006930:	d9801e04 	addi	r6,sp,120
10006934:	b80b883a 	mov	r5,r23
10006938:	000b0340 	call	1000b034 <__sprint_r>
1000693c:	103a7b1e 	bne	r2,zero,1000532c <__alt_data_end+0xf800532c>
10006940:	d8c02017 	ldw	r3,128(sp)
10006944:	da000404 	addi	r8,sp,16
10006948:	003d4106 	br	10005e50 <__alt_data_end+0xf8005e50>
1000694c:	d8801f17 	ldw	r2,124(sp)
10006950:	01440074 	movhi	r5,4097
10006954:	01000044 	movi	r4,1
10006958:	18c00044 	addi	r3,r3,1
1000695c:	10800044 	addi	r2,r2,1
10006960:	294b4704 	addi	r5,r5,11548
10006964:	41000115 	stw	r4,4(r8)
10006968:	41400015 	stw	r5,0(r8)
1000696c:	d8c02015 	stw	r3,128(sp)
10006970:	d8801f15 	stw	r2,124(sp)
10006974:	010001c4 	movi	r4,7
10006978:	20805c16 	blt	r4,r2,10006aec <___vfprintf_internal_r+0x1bd0>
1000697c:	42000204 	addi	r8,r8,8
10006980:	8800041e 	bne	r17,zero,10006994 <___vfprintf_internal_r+0x1a78>
10006984:	d8803317 	ldw	r2,204(sp)
10006988:	1000021e 	bne	r2,zero,10006994 <___vfprintf_internal_r+0x1a78>
1000698c:	9080004c 	andi	r2,r18,1
10006990:	103be726 	beq	r2,zero,10005930 <__alt_data_end+0xf8005930>
10006994:	d9003717 	ldw	r4,220(sp)
10006998:	d8801f17 	ldw	r2,124(sp)
1000699c:	d9403417 	ldw	r5,208(sp)
100069a0:	20c7883a 	add	r3,r4,r3
100069a4:	10800044 	addi	r2,r2,1
100069a8:	41000115 	stw	r4,4(r8)
100069ac:	41400015 	stw	r5,0(r8)
100069b0:	d8c02015 	stw	r3,128(sp)
100069b4:	d8801f15 	stw	r2,124(sp)
100069b8:	010001c4 	movi	r4,7
100069bc:	20812116 	blt	r4,r2,10006e44 <___vfprintf_internal_r+0x1f28>
100069c0:	42000204 	addi	r8,r8,8
100069c4:	0463c83a 	sub	r17,zero,r17
100069c8:	0440730e 	bge	zero,r17,10006b98 <___vfprintf_internal_r+0x1c7c>
100069cc:	05800404 	movi	r22,16
100069d0:	b440860e 	bge	r22,r17,10006bec <___vfprintf_internal_r+0x1cd0>
100069d4:	01440074 	movhi	r5,4097
100069d8:	294b4784 	addi	r5,r5,11550
100069dc:	d9402c15 	stw	r5,176(sp)
100069e0:	070001c4 	movi	fp,7
100069e4:	dcc02d17 	ldw	r19,180(sp)
100069e8:	00000306 	br	100069f8 <___vfprintf_internal_r+0x1adc>
100069ec:	42000204 	addi	r8,r8,8
100069f0:	8c7ffc04 	addi	r17,r17,-16
100069f4:	b440800e 	bge	r22,r17,10006bf8 <___vfprintf_internal_r+0x1cdc>
100069f8:	18c00404 	addi	r3,r3,16
100069fc:	10800044 	addi	r2,r2,1
10006a00:	45000015 	stw	r20,0(r8)
10006a04:	45800115 	stw	r22,4(r8)
10006a08:	d8c02015 	stw	r3,128(sp)
10006a0c:	d8801f15 	stw	r2,124(sp)
10006a10:	e0bff60e 	bge	fp,r2,100069ec <__alt_data_end+0xf80069ec>
10006a14:	d9801e04 	addi	r6,sp,120
10006a18:	b80b883a 	mov	r5,r23
10006a1c:	9809883a 	mov	r4,r19
10006a20:	000b0340 	call	1000b034 <__sprint_r>
10006a24:	103a411e 	bne	r2,zero,1000532c <__alt_data_end+0xf800532c>
10006a28:	d8c02017 	ldw	r3,128(sp)
10006a2c:	d8801f17 	ldw	r2,124(sp)
10006a30:	da000404 	addi	r8,sp,16
10006a34:	003fee06 	br	100069f0 <__alt_data_end+0xf80069f0>
10006a38:	00bfffc4 	movi	r2,-1
10006a3c:	003a3f06 	br	1000533c <__alt_data_end+0xf800533c>
10006a40:	008011c4 	movi	r2,71
10006a44:	1440b816 	blt	r2,r17,10006d28 <___vfprintf_internal_r+0x1e0c>
10006a48:	04040074 	movhi	r16,4097
10006a4c:	840b3904 	addi	r16,r16,11492
10006a50:	00c000c4 	movi	r3,3
10006a54:	00bfdfc4 	movi	r2,-129
10006a58:	d8c02915 	stw	r3,164(sp)
10006a5c:	90a4703a 	and	r18,r18,r2
10006a60:	df002783 	ldbu	fp,158(sp)
10006a64:	d8c02b15 	stw	r3,172(sp)
10006a68:	d8002a15 	stw	zero,168(sp)
10006a6c:	d8003215 	stw	zero,200(sp)
10006a70:	003b0706 	br	10005690 <__alt_data_end+0xf8005690>
10006a74:	d8c02e17 	ldw	r3,184(sp)
10006a78:	1cc00017 	ldw	r19,0(r3)
10006a7c:	18c00104 	addi	r3,r3,4
10006a80:	d8c02e15 	stw	r3,184(sp)
10006a84:	982dd7fa 	srai	r22,r19,31
10006a88:	b005883a 	mov	r2,r22
10006a8c:	003a7706 	br	1000546c <__alt_data_end+0xf800546c>
10006a90:	d8c02e17 	ldw	r3,184(sp)
10006a94:	d9002f17 	ldw	r4,188(sp)
10006a98:	18800017 	ldw	r2,0(r3)
10006a9c:	18c00104 	addi	r3,r3,4
10006aa0:	d8c02e15 	stw	r3,184(sp)
10006aa4:	11000015 	stw	r4,0(r2)
10006aa8:	00395406 	br	10004ffc <__alt_data_end+0xf8004ffc>
10006aac:	d9002e17 	ldw	r4,184(sp)
10006ab0:	002d883a 	mov	r22,zero
10006ab4:	24c00017 	ldw	r19,0(r4)
10006ab8:	21000104 	addi	r4,r4,4
10006abc:	d9002e15 	stw	r4,184(sp)
10006ac0:	003c0706 	br	10005ae0 <__alt_data_end+0xf8005ae0>
10006ac4:	d9402e17 	ldw	r5,184(sp)
10006ac8:	d8c02a17 	ldw	r3,168(sp)
10006acc:	002d883a 	mov	r22,zero
10006ad0:	28800104 	addi	r2,r5,4
10006ad4:	2cc0000b 	ldhu	r19,0(r5)
10006ad8:	183dc10e 	bge	r3,zero,100061e0 <__alt_data_end+0xf80061e0>
10006adc:	003f7506 	br	100068b4 <__alt_data_end+0xf80068b4>
10006ae0:	04040074 	movhi	r16,4097
10006ae4:	840b3704 	addi	r16,r16,11484
10006ae8:	003aa706 	br	10005588 <__alt_data_end+0xf8005588>
10006aec:	d9002d17 	ldw	r4,180(sp)
10006af0:	d9801e04 	addi	r6,sp,120
10006af4:	b80b883a 	mov	r5,r23
10006af8:	000b0340 	call	1000b034 <__sprint_r>
10006afc:	103a0b1e 	bne	r2,zero,1000532c <__alt_data_end+0xf800532c>
10006b00:	dc402617 	ldw	r17,152(sp)
10006b04:	d8c02017 	ldw	r3,128(sp)
10006b08:	da000404 	addi	r8,sp,16
10006b0c:	003f9c06 	br	10006980 <__alt_data_end+0xf8006980>
10006b10:	ac400043 	ldbu	r17,1(r21)
10006b14:	84000814 	ori	r16,r16,32
10006b18:	ad400044 	addi	r21,r21,1
10006b1c:	8c403fcc 	andi	r17,r17,255
10006b20:	8c40201c 	xori	r17,r17,128
10006b24:	8c7fe004 	addi	r17,r17,-128
10006b28:	00395e06 	br	100050a4 <__alt_data_end+0xf80050a4>
10006b2c:	d8c02e15 	stw	r3,184(sp)
10006b30:	0039883a 	mov	fp,zero
10006b34:	003e3506 	br	1000640c <__alt_data_end+0xf800640c>
10006b38:	d9002d17 	ldw	r4,180(sp)
10006b3c:	d9801e04 	addi	r6,sp,120
10006b40:	b80b883a 	mov	r5,r23
10006b44:	000b0340 	call	1000b034 <__sprint_r>
10006b48:	1039f81e 	bne	r2,zero,1000532c <__alt_data_end+0xf800532c>
10006b4c:	d8c02017 	ldw	r3,128(sp)
10006b50:	da000404 	addi	r8,sp,16
10006b54:	003cd006 	br	10005e98 <__alt_data_end+0xf8005e98>
10006b58:	8009883a 	mov	r4,r16
10006b5c:	df003d15 	stw	fp,244(sp)
10006b60:	0004e6c0 	call	10004e6c <strlen>
10006b64:	d8802b15 	stw	r2,172(sp)
10006b68:	da003d17 	ldw	r8,244(sp)
10006b6c:	103c200e 	bge	r2,zero,10005bf0 <__alt_data_end+0xf8005bf0>
10006b70:	0005883a 	mov	r2,zero
10006b74:	003c1e06 	br	10005bf0 <__alt_data_end+0xf8005bf0>
10006b78:	d9002d17 	ldw	r4,180(sp)
10006b7c:	d9801e04 	addi	r6,sp,120
10006b80:	b80b883a 	mov	r5,r23
10006b84:	000b0340 	call	1000b034 <__sprint_r>
10006b88:	1039e81e 	bne	r2,zero,1000532c <__alt_data_end+0xf800532c>
10006b8c:	d8c02017 	ldw	r3,128(sp)
10006b90:	d8801f17 	ldw	r2,124(sp)
10006b94:	da000404 	addi	r8,sp,16
10006b98:	d9403317 	ldw	r5,204(sp)
10006b9c:	10800044 	addi	r2,r2,1
10006ba0:	44000015 	stw	r16,0(r8)
10006ba4:	28c7883a 	add	r3,r5,r3
10006ba8:	003b5b06 	br	10005918 <__alt_data_end+0xf8005918>
10006bac:	01040074 	movhi	r4,4097
10006bb0:	210b4b84 	addi	r4,r4,11566
10006bb4:	d9003515 	stw	r4,212(sp)
10006bb8:	003af206 	br	10005784 <__alt_data_end+0xf8005784>
10006bbc:	013fffc4 	movi	r4,-1
10006bc0:	003a0806 	br	100053e4 <__alt_data_end+0xf80053e4>
10006bc4:	0023883a 	mov	r17,zero
10006bc8:	003d9d06 	br	10006240 <__alt_data_end+0xf8006240>
10006bcc:	d9002d17 	ldw	r4,180(sp)
10006bd0:	d9801e04 	addi	r6,sp,120
10006bd4:	b80b883a 	mov	r5,r23
10006bd8:	000b0340 	call	1000b034 <__sprint_r>
10006bdc:	1039d31e 	bne	r2,zero,1000532c <__alt_data_end+0xf800532c>
10006be0:	d8c02017 	ldw	r3,128(sp)
10006be4:	da000404 	addi	r8,sp,16
10006be8:	003d9406 	br	1000623c <__alt_data_end+0xf800623c>
10006bec:	01040074 	movhi	r4,4097
10006bf0:	210b4784 	addi	r4,r4,11550
10006bf4:	d9002c15 	stw	r4,176(sp)
10006bf8:	d9002c17 	ldw	r4,176(sp)
10006bfc:	1c47883a 	add	r3,r3,r17
10006c00:	10800044 	addi	r2,r2,1
10006c04:	41000015 	stw	r4,0(r8)
10006c08:	44400115 	stw	r17,4(r8)
10006c0c:	d8c02015 	stw	r3,128(sp)
10006c10:	d8801f15 	stw	r2,124(sp)
10006c14:	010001c4 	movi	r4,7
10006c18:	20bfd716 	blt	r4,r2,10006b78 <__alt_data_end+0xf8006b78>
10006c1c:	42000204 	addi	r8,r8,8
10006c20:	003fdd06 	br	10006b98 <__alt_data_end+0xf8006b98>
10006c24:	d9002d17 	ldw	r4,180(sp)
10006c28:	d9801e04 	addi	r6,sp,120
10006c2c:	b80b883a 	mov	r5,r23
10006c30:	000b0340 	call	1000b034 <__sprint_r>
10006c34:	1039bd1e 	bne	r2,zero,1000532c <__alt_data_end+0xf800532c>
10006c38:	d8802617 	ldw	r2,152(sp)
10006c3c:	d8c02017 	ldw	r3,128(sp)
10006c40:	da000404 	addi	r8,sp,16
10006c44:	003e1006 	br	10006488 <__alt_data_end+0xf8006488>
10006c48:	00800044 	movi	r2,1
10006c4c:	10803fcc 	andi	r2,r2,255
10006c50:	00c00044 	movi	r3,1
10006c54:	10fa0d26 	beq	r2,r3,1000548c <__alt_data_end+0xf800548c>
10006c58:	00c00084 	movi	r3,2
10006c5c:	10fbaf26 	beq	r2,r3,10005b1c <__alt_data_end+0xf8005b1c>
10006c60:	003a6d06 	br	10005618 <__alt_data_end+0xf8005618>
10006c64:	01040074 	movhi	r4,4097
10006c68:	210b4b84 	addi	r4,r4,11566
10006c6c:	d9003515 	stw	r4,212(sp)
10006c70:	003b5406 	br	100059c4 <__alt_data_end+0xf80059c4>
10006c74:	d8802a17 	ldw	r2,168(sp)
10006c78:	00c00184 	movi	r3,6
10006c7c:	1880012e 	bgeu	r3,r2,10006c84 <___vfprintf_internal_r+0x1d68>
10006c80:	1805883a 	mov	r2,r3
10006c84:	d8802b15 	stw	r2,172(sp)
10006c88:	1000ef16 	blt	r2,zero,10007048 <___vfprintf_internal_r+0x212c>
10006c8c:	04040074 	movhi	r16,4097
10006c90:	d8802915 	stw	r2,164(sp)
10006c94:	dcc02e15 	stw	r19,184(sp)
10006c98:	d8002a15 	stw	zero,168(sp)
10006c9c:	d8003215 	stw	zero,200(sp)
10006ca0:	840b4504 	addi	r16,r16,11540
10006ca4:	0039883a 	mov	fp,zero
10006ca8:	003a8006 	br	100056ac <__alt_data_end+0xf80056ac>
10006cac:	0021883a 	mov	r16,zero
10006cb0:	003e0706 	br	100064d0 <__alt_data_end+0xf80064d0>
10006cb4:	d9002d17 	ldw	r4,180(sp)
10006cb8:	d9801e04 	addi	r6,sp,120
10006cbc:	b80b883a 	mov	r5,r23
10006cc0:	000b0340 	call	1000b034 <__sprint_r>
10006cc4:	1039991e 	bne	r2,zero,1000532c <__alt_data_end+0xf800532c>
10006cc8:	d8802617 	ldw	r2,152(sp)
10006ccc:	d9403317 	ldw	r5,204(sp)
10006cd0:	d8c02017 	ldw	r3,128(sp)
10006cd4:	da000404 	addi	r8,sp,16
10006cd8:	2885c83a 	sub	r2,r5,r2
10006cdc:	003dfb06 	br	100064cc <__alt_data_end+0xf80064cc>
10006ce0:	9080004c 	andi	r2,r18,1
10006ce4:	103e8f1e 	bne	r2,zero,10006724 <__alt_data_end+0xf8006724>
10006ce8:	d8802117 	ldw	r2,132(sp)
10006cec:	003e9e06 	br	10006768 <__alt_data_end+0xf8006768>
10006cf0:	1025883a 	mov	r18,r2
10006cf4:	0039883a 	mov	fp,zero
10006cf8:	00800084 	movi	r2,2
10006cfc:	003fd306 	br	10006c4c <__alt_data_end+0xf8006c4c>
10006d00:	07000b44 	movi	fp,45
10006d04:	df002785 	stb	fp,158(sp)
10006d08:	003a1b06 	br	10005578 <__alt_data_end+0xf8005578>
10006d0c:	00c00b44 	movi	r3,45
10006d10:	d8c02785 	stb	r3,158(sp)
10006d14:	d8802915 	stw	r2,164(sp)
10006d18:	dc802c17 	ldw	r18,176(sp)
10006d1c:	d8002a15 	stw	zero,168(sp)
10006d20:	07000b44 	movi	fp,45
10006d24:	003a5e06 	br	100056a0 <__alt_data_end+0xf80056a0>
10006d28:	04040074 	movhi	r16,4097
10006d2c:	840b3a04 	addi	r16,r16,11496
10006d30:	003f4706 	br	10006a50 <__alt_data_end+0xf8006a50>
10006d34:	d9002e17 	ldw	r4,184(sp)
10006d38:	d9402f17 	ldw	r5,188(sp)
10006d3c:	20800017 	ldw	r2,0(r4)
10006d40:	21000104 	addi	r4,r4,4
10006d44:	d9002e15 	stw	r4,184(sp)
10006d48:	11400015 	stw	r5,0(r2)
10006d4c:	0038ab06 	br	10004ffc <__alt_data_end+0xf8004ffc>
10006d50:	dd802617 	ldw	r22,152(sp)
10006d54:	00bfff44 	movi	r2,-3
10006d58:	b0801c16 	blt	r22,r2,10006dcc <___vfprintf_internal_r+0x1eb0>
10006d5c:	d9402a17 	ldw	r5,168(sp)
10006d60:	2d801a16 	blt	r5,r22,10006dcc <___vfprintf_internal_r+0x1eb0>
10006d64:	dd803215 	stw	r22,200(sp)
10006d68:	003e8906 	br	10006790 <__alt_data_end+0xf8006790>
10006d6c:	01040074 	movhi	r4,4097
10006d70:	210b4784 	addi	r4,r4,11550
10006d74:	d9002c15 	stw	r4,176(sp)
10006d78:	003c9106 	br	10005fc0 <__alt_data_end+0xf8005fc0>
10006d7c:	e005883a 	mov	r2,fp
10006d80:	003e7906 	br	10006768 <__alt_data_end+0xf8006768>
10006d84:	d9002a17 	ldw	r4,168(sp)
10006d88:	df002783 	ldbu	fp,158(sp)
10006d8c:	dcc02e15 	stw	r19,184(sp)
10006d90:	d9002915 	stw	r4,164(sp)
10006d94:	d9002b15 	stw	r4,172(sp)
10006d98:	d8002a15 	stw	zero,168(sp)
10006d9c:	d8003215 	stw	zero,200(sp)
10006da0:	003a3b06 	br	10005690 <__alt_data_end+0xf8005690>
10006da4:	9080004c 	andi	r2,r18,1
10006da8:	0039883a 	mov	fp,zero
10006dac:	10000426 	beq	r2,zero,10006dc0 <___vfprintf_internal_r+0x1ea4>
10006db0:	00800c04 	movi	r2,48
10006db4:	dc001dc4 	addi	r16,sp,119
10006db8:	d8801dc5 	stb	r2,119(sp)
10006dbc:	003b6406 	br	10005b50 <__alt_data_end+0xf8005b50>
10006dc0:	d8002b15 	stw	zero,172(sp)
10006dc4:	dc001e04 	addi	r16,sp,120
10006dc8:	003a2b06 	br	10005678 <__alt_data_end+0xf8005678>
10006dcc:	8c7fff84 	addi	r17,r17,-2
10006dd0:	b5bfffc4 	addi	r22,r22,-1
10006dd4:	dd802615 	stw	r22,152(sp)
10006dd8:	dc4022c5 	stb	r17,139(sp)
10006ddc:	b000bf16 	blt	r22,zero,100070dc <___vfprintf_internal_r+0x21c0>
10006de0:	00800ac4 	movi	r2,43
10006de4:	d8802305 	stb	r2,140(sp)
10006de8:	00800244 	movi	r2,9
10006dec:	15807016 	blt	r2,r22,10006fb0 <___vfprintf_internal_r+0x2094>
10006df0:	00800c04 	movi	r2,48
10006df4:	b5800c04 	addi	r22,r22,48
10006df8:	d8802345 	stb	r2,141(sp)
10006dfc:	dd802385 	stb	r22,142(sp)
10006e00:	d88023c4 	addi	r2,sp,143
10006e04:	df0022c4 	addi	fp,sp,139
10006e08:	d8c03317 	ldw	r3,204(sp)
10006e0c:	1739c83a 	sub	fp,r2,fp
10006e10:	d9003317 	ldw	r4,204(sp)
10006e14:	e0c7883a 	add	r3,fp,r3
10006e18:	df003a15 	stw	fp,232(sp)
10006e1c:	d8c02b15 	stw	r3,172(sp)
10006e20:	00800044 	movi	r2,1
10006e24:	1100b30e 	bge	r2,r4,100070f4 <___vfprintf_internal_r+0x21d8>
10006e28:	d8c02b17 	ldw	r3,172(sp)
10006e2c:	18c00044 	addi	r3,r3,1
10006e30:	d8c02b15 	stw	r3,172(sp)
10006e34:	1805883a 	mov	r2,r3
10006e38:	1800ac16 	blt	r3,zero,100070ec <___vfprintf_internal_r+0x21d0>
10006e3c:	d8003215 	stw	zero,200(sp)
10006e40:	003e5d06 	br	100067b8 <__alt_data_end+0xf80067b8>
10006e44:	d9002d17 	ldw	r4,180(sp)
10006e48:	d9801e04 	addi	r6,sp,120
10006e4c:	b80b883a 	mov	r5,r23
10006e50:	000b0340 	call	1000b034 <__sprint_r>
10006e54:	1039351e 	bne	r2,zero,1000532c <__alt_data_end+0xf800532c>
10006e58:	dc402617 	ldw	r17,152(sp)
10006e5c:	d8c02017 	ldw	r3,128(sp)
10006e60:	d8801f17 	ldw	r2,124(sp)
10006e64:	da000404 	addi	r8,sp,16
10006e68:	003ed606 	br	100069c4 <__alt_data_end+0xf80069c4>
10006e6c:	182b883a 	mov	r21,r3
10006e70:	d8002a15 	stw	zero,168(sp)
10006e74:	00388c06 	br	100050a8 <__alt_data_end+0xf80050a8>
10006e78:	d8802a17 	ldw	r2,168(sp)
10006e7c:	103e071e 	bne	r2,zero,1000669c <__alt_data_end+0xf800669c>
10006e80:	dc002a15 	stw	r16,168(sp)
10006e84:	003e0506 	br	1000669c <__alt_data_end+0xf800669c>
10006e88:	d9002a17 	ldw	r4,168(sp)
10006e8c:	20c00044 	addi	r3,r4,1
10006e90:	003e0f06 	br	100066d0 <__alt_data_end+0xf80066d0>
10006e94:	01400184 	movi	r5,6
10006e98:	d9402a15 	stw	r5,168(sp)
10006e9c:	003dff06 	br	1000669c <__alt_data_end+0xf800669c>
10006ea0:	d8802104 	addi	r2,sp,132
10006ea4:	d8800315 	stw	r2,12(sp)
10006ea8:	d8802504 	addi	r2,sp,148
10006eac:	d8800215 	stw	r2,8(sp)
10006eb0:	d8802604 	addi	r2,sp,152
10006eb4:	d8800115 	stw	r2,4(sp)
10006eb8:	d8802a17 	ldw	r2,168(sp)
10006ebc:	d9403617 	ldw	r5,216(sp)
10006ec0:	d9002d17 	ldw	r4,180(sp)
10006ec4:	d8800015 	stw	r2,0(sp)
10006ec8:	01c000c4 	movi	r7,3
10006ecc:	980d883a 	mov	r6,r19
10006ed0:	da003d15 	stw	r8,244(sp)
10006ed4:	00078980 	call	10007898 <_dtoa_r>
10006ed8:	d8c02a17 	ldw	r3,168(sp)
10006edc:	da003d17 	ldw	r8,244(sp)
10006ee0:	1021883a 	mov	r16,r2
10006ee4:	10f9883a 	add	fp,r2,r3
10006ee8:	81000007 	ldb	r4,0(r16)
10006eec:	00800c04 	movi	r2,48
10006ef0:	20805e26 	beq	r4,r2,1000706c <___vfprintf_internal_r+0x2150>
10006ef4:	d8c02617 	ldw	r3,152(sp)
10006ef8:	e0f9883a 	add	fp,fp,r3
10006efc:	003e0a06 	br	10006728 <__alt_data_end+0xf8006728>
10006f00:	00c00b44 	movi	r3,45
10006f04:	24e0003c 	xorhi	r19,r4,32768
10006f08:	d8c02905 	stb	r3,164(sp)
10006f0c:	003de906 	br	100066b4 <__alt_data_end+0xf80066b4>
10006f10:	d8c03217 	ldw	r3,200(sp)
10006f14:	00c07a0e 	bge	zero,r3,10007100 <___vfprintf_internal_r+0x21e4>
10006f18:	00800044 	movi	r2,1
10006f1c:	d9003317 	ldw	r4,204(sp)
10006f20:	1105883a 	add	r2,r2,r4
10006f24:	d8802b15 	stw	r2,172(sp)
10006f28:	10004e16 	blt	r2,zero,10007064 <___vfprintf_internal_r+0x2148>
10006f2c:	044019c4 	movi	r17,103
10006f30:	003e2106 	br	100067b8 <__alt_data_end+0xf80067b8>
10006f34:	d9002a17 	ldw	r4,168(sp)
10006f38:	d8802104 	addi	r2,sp,132
10006f3c:	d8800315 	stw	r2,12(sp)
10006f40:	d9000015 	stw	r4,0(sp)
10006f44:	d8802504 	addi	r2,sp,148
10006f48:	d9403617 	ldw	r5,216(sp)
10006f4c:	d9002d17 	ldw	r4,180(sp)
10006f50:	d8800215 	stw	r2,8(sp)
10006f54:	d8802604 	addi	r2,sp,152
10006f58:	d8800115 	stw	r2,4(sp)
10006f5c:	01c000c4 	movi	r7,3
10006f60:	980d883a 	mov	r6,r19
10006f64:	da003d15 	stw	r8,244(sp)
10006f68:	00078980 	call	10007898 <_dtoa_r>
10006f6c:	d8c02a17 	ldw	r3,168(sp)
10006f70:	da003d17 	ldw	r8,244(sp)
10006f74:	1021883a 	mov	r16,r2
10006f78:	00801184 	movi	r2,70
10006f7c:	80f9883a 	add	fp,r16,r3
10006f80:	88bfd926 	beq	r17,r2,10006ee8 <__alt_data_end+0xf8006ee8>
10006f84:	003de806 	br	10006728 <__alt_data_end+0xf8006728>
10006f88:	d9002a17 	ldw	r4,168(sp)
10006f8c:	00c04d0e 	bge	zero,r3,100070c4 <___vfprintf_internal_r+0x21a8>
10006f90:	2000441e 	bne	r4,zero,100070a4 <___vfprintf_internal_r+0x2188>
10006f94:	9480004c 	andi	r18,r18,1
10006f98:	9000421e 	bne	r18,zero,100070a4 <___vfprintf_internal_r+0x2188>
10006f9c:	1805883a 	mov	r2,r3
10006fa0:	18006f16 	blt	r3,zero,10007160 <___vfprintf_internal_r+0x2244>
10006fa4:	d8c03217 	ldw	r3,200(sp)
10006fa8:	d8c02b15 	stw	r3,172(sp)
10006fac:	003e0206 	br	100067b8 <__alt_data_end+0xf80067b8>
10006fb0:	df0022c4 	addi	fp,sp,139
10006fb4:	dc002a15 	stw	r16,168(sp)
10006fb8:	4027883a 	mov	r19,r8
10006fbc:	e021883a 	mov	r16,fp
10006fc0:	b009883a 	mov	r4,r22
10006fc4:	01400284 	movi	r5,10
10006fc8:	0001c100 	call	10001c10 <__modsi3>
10006fcc:	10800c04 	addi	r2,r2,48
10006fd0:	843fffc4 	addi	r16,r16,-1
10006fd4:	b009883a 	mov	r4,r22
10006fd8:	01400284 	movi	r5,10
10006fdc:	80800005 	stb	r2,0(r16)
10006fe0:	0001b8c0 	call	10001b8c <__divsi3>
10006fe4:	102d883a 	mov	r22,r2
10006fe8:	00800244 	movi	r2,9
10006fec:	15bff416 	blt	r2,r22,10006fc0 <__alt_data_end+0xf8006fc0>
10006ff0:	9811883a 	mov	r8,r19
10006ff4:	b0800c04 	addi	r2,r22,48
10006ff8:	8027883a 	mov	r19,r16
10006ffc:	997fffc4 	addi	r5,r19,-1
10007000:	98bfffc5 	stb	r2,-1(r19)
10007004:	dc002a17 	ldw	r16,168(sp)
10007008:	2f006d2e 	bgeu	r5,fp,100071c0 <___vfprintf_internal_r+0x22a4>
1000700c:	d9c02384 	addi	r7,sp,142
10007010:	3ccfc83a 	sub	r7,r7,r19
10007014:	d9002344 	addi	r4,sp,141
10007018:	e1cf883a 	add	r7,fp,r7
1000701c:	00000106 	br	10007024 <___vfprintf_internal_r+0x2108>
10007020:	28800003 	ldbu	r2,0(r5)
10007024:	20800005 	stb	r2,0(r4)
10007028:	21000044 	addi	r4,r4,1
1000702c:	29400044 	addi	r5,r5,1
10007030:	393ffb1e 	bne	r7,r4,10007020 <__alt_data_end+0xf8007020>
10007034:	d8802304 	addi	r2,sp,140
10007038:	14c5c83a 	sub	r2,r2,r19
1000703c:	d8c02344 	addi	r3,sp,141
10007040:	1885883a 	add	r2,r3,r2
10007044:	003f7006 	br	10006e08 <__alt_data_end+0xf8006e08>
10007048:	0005883a 	mov	r2,zero
1000704c:	003f0f06 	br	10006c8c <__alt_data_end+0xf8006c8c>
10007050:	d8c03217 	ldw	r3,200(sp)
10007054:	18c00044 	addi	r3,r3,1
10007058:	d8c02b15 	stw	r3,172(sp)
1000705c:	1805883a 	mov	r2,r3
10007060:	183fb20e 	bge	r3,zero,10006f2c <__alt_data_end+0xf8006f2c>
10007064:	0005883a 	mov	r2,zero
10007068:	003fb006 	br	10006f2c <__alt_data_end+0xf8006f2c>
1000706c:	d9003617 	ldw	r4,216(sp)
10007070:	000d883a 	mov	r6,zero
10007074:	000f883a 	mov	r7,zero
10007078:	980b883a 	mov	r5,r19
1000707c:	d8c03c15 	stw	r3,240(sp)
10007080:	da003d15 	stw	r8,244(sp)
10007084:	000e9b40 	call	1000e9b4 <__eqdf2>
10007088:	d8c03c17 	ldw	r3,240(sp)
1000708c:	da003d17 	ldw	r8,244(sp)
10007090:	103f9826 	beq	r2,zero,10006ef4 <__alt_data_end+0xf8006ef4>
10007094:	00800044 	movi	r2,1
10007098:	10c7c83a 	sub	r3,r2,r3
1000709c:	d8c02615 	stw	r3,152(sp)
100070a0:	003f9506 	br	10006ef8 <__alt_data_end+0xf8006ef8>
100070a4:	d9002a17 	ldw	r4,168(sp)
100070a8:	d8c03217 	ldw	r3,200(sp)
100070ac:	20800044 	addi	r2,r4,1
100070b0:	1885883a 	add	r2,r3,r2
100070b4:	d8802b15 	stw	r2,172(sp)
100070b8:	103dbf0e 	bge	r2,zero,100067b8 <__alt_data_end+0xf80067b8>
100070bc:	0005883a 	mov	r2,zero
100070c0:	003dbd06 	br	100067b8 <__alt_data_end+0xf80067b8>
100070c4:	2000201e 	bne	r4,zero,10007148 <___vfprintf_internal_r+0x222c>
100070c8:	9480004c 	andi	r18,r18,1
100070cc:	90001e1e 	bne	r18,zero,10007148 <___vfprintf_internal_r+0x222c>
100070d0:	00800044 	movi	r2,1
100070d4:	d8802b15 	stw	r2,172(sp)
100070d8:	003db706 	br	100067b8 <__alt_data_end+0xf80067b8>
100070dc:	00800b44 	movi	r2,45
100070e0:	05adc83a 	sub	r22,zero,r22
100070e4:	d8802305 	stb	r2,140(sp)
100070e8:	003f3f06 	br	10006de8 <__alt_data_end+0xf8006de8>
100070ec:	0005883a 	mov	r2,zero
100070f0:	003f5206 	br	10006e3c <__alt_data_end+0xf8006e3c>
100070f4:	90a4703a 	and	r18,r18,r2
100070f8:	903f4e26 	beq	r18,zero,10006e34 <__alt_data_end+0xf8006e34>
100070fc:	003f4a06 	br	10006e28 <__alt_data_end+0xf8006e28>
10007100:	00800084 	movi	r2,2
10007104:	10c5c83a 	sub	r2,r2,r3
10007108:	003f8406 	br	10006f1c <__alt_data_end+0xf8006f1c>
1000710c:	d9402e17 	ldw	r5,184(sp)
10007110:	d9002e17 	ldw	r4,184(sp)
10007114:	ac400043 	ldbu	r17,1(r21)
10007118:	29400017 	ldw	r5,0(r5)
1000711c:	20800104 	addi	r2,r4,4
10007120:	d8802e15 	stw	r2,184(sp)
10007124:	d9402a15 	stw	r5,168(sp)
10007128:	182b883a 	mov	r21,r3
1000712c:	283e7b0e 	bge	r5,zero,10006b1c <__alt_data_end+0xf8006b1c>
10007130:	8c403fcc 	andi	r17,r17,255
10007134:	017fffc4 	movi	r5,-1
10007138:	8c40201c 	xori	r17,r17,128
1000713c:	d9402a15 	stw	r5,168(sp)
10007140:	8c7fe004 	addi	r17,r17,-128
10007144:	0037d706 	br	100050a4 <__alt_data_end+0xf80050a4>
10007148:	d8c02a17 	ldw	r3,168(sp)
1000714c:	18c00084 	addi	r3,r3,2
10007150:	d8c02b15 	stw	r3,172(sp)
10007154:	1805883a 	mov	r2,r3
10007158:	183d970e 	bge	r3,zero,100067b8 <__alt_data_end+0xf80067b8>
1000715c:	003fd706 	br	100070bc <__alt_data_end+0xf80070bc>
10007160:	0005883a 	mov	r2,zero
10007164:	003f8f06 	br	10006fa4 <__alt_data_end+0xf8006fa4>
10007168:	9080004c 	andi	r2,r18,1
1000716c:	103f821e 	bne	r2,zero,10006f78 <__alt_data_end+0xf8006f78>
10007170:	d8802117 	ldw	r2,132(sp)
10007174:	1405c83a 	sub	r2,r2,r16
10007178:	d8803315 	stw	r2,204(sp)
1000717c:	b47ef426 	beq	r22,r17,10006d50 <__alt_data_end+0xf8006d50>
10007180:	dd802617 	ldw	r22,152(sp)
10007184:	003f1206 	br	10006dd0 <__alt_data_end+0xf8006dd0>
10007188:	d8c02b03 	ldbu	r3,172(sp)
1000718c:	d8c02785 	stb	r3,158(sp)
10007190:	0038df06 	br	10005510 <__alt_data_end+0xf8005510>
10007194:	d8c02b03 	ldbu	r3,172(sp)
10007198:	d8c02785 	stb	r3,158(sp)
1000719c:	0038aa06 	br	10005448 <__alt_data_end+0xf8005448>
100071a0:	d8c02b03 	ldbu	r3,172(sp)
100071a4:	d8c02785 	stb	r3,158(sp)
100071a8:	003a4306 	br	10005ab8 <__alt_data_end+0xf8005ab8>
100071ac:	d8c02b03 	ldbu	r3,172(sp)
100071b0:	d8c02785 	stb	r3,158(sp)
100071b4:	003af506 	br	10005d8c <__alt_data_end+0xf8005d8c>
100071b8:	0005883a 	mov	r2,zero
100071bc:	003d7b06 	br	100067ac <__alt_data_end+0xf80067ac>
100071c0:	d8802344 	addi	r2,sp,141
100071c4:	003f1006 	br	10006e08 <__alt_data_end+0xf8006e08>
100071c8:	d8c02b03 	ldbu	r3,172(sp)
100071cc:	d8c02785 	stb	r3,158(sp)
100071d0:	0038fd06 	br	100055c8 <__alt_data_end+0xf80055c8>
100071d4:	d8c02b03 	ldbu	r3,172(sp)
100071d8:	d8c02785 	stb	r3,158(sp)
100071dc:	003a9706 	br	10005c3c <__alt_data_end+0xf8005c3c>
100071e0:	d8c02b03 	ldbu	r3,172(sp)
100071e4:	d8c02785 	stb	r3,158(sp)
100071e8:	003a1806 	br	10005a4c <__alt_data_end+0xf8005a4c>
100071ec:	d8c02b03 	ldbu	r3,172(sp)
100071f0:	d8c02785 	stb	r3,158(sp)
100071f4:	003abe06 	br	10005cf0 <__alt_data_end+0xf8005cf0>

100071f8 <__vfprintf_internal>:
100071f8:	00840074 	movhi	r2,4097
100071fc:	1092eb04 	addi	r2,r2,19372
10007200:	300f883a 	mov	r7,r6
10007204:	280d883a 	mov	r6,r5
10007208:	200b883a 	mov	r5,r4
1000720c:	11000017 	ldw	r4,0(r2)
10007210:	0004f1c1 	jmpi	10004f1c <___vfprintf_internal_r>

10007214 <__sbprintf>:
10007214:	2880030b 	ldhu	r2,12(r5)
10007218:	2ac01917 	ldw	r11,100(r5)
1000721c:	2a80038b 	ldhu	r10,14(r5)
10007220:	2a400717 	ldw	r9,28(r5)
10007224:	2a000917 	ldw	r8,36(r5)
10007228:	defee204 	addi	sp,sp,-1144
1000722c:	00c10004 	movi	r3,1024
10007230:	dc011a15 	stw	r16,1128(sp)
10007234:	10bfff4c 	andi	r2,r2,65533
10007238:	2821883a 	mov	r16,r5
1000723c:	d8cb883a 	add	r5,sp,r3
10007240:	dc811c15 	stw	r18,1136(sp)
10007244:	dc411b15 	stw	r17,1132(sp)
10007248:	dfc11d15 	stw	ra,1140(sp)
1000724c:	2025883a 	mov	r18,r4
10007250:	d881030d 	sth	r2,1036(sp)
10007254:	dac11915 	stw	r11,1124(sp)
10007258:	da81038d 	sth	r10,1038(sp)
1000725c:	da410715 	stw	r9,1052(sp)
10007260:	da010915 	stw	r8,1060(sp)
10007264:	dec10015 	stw	sp,1024(sp)
10007268:	dec10415 	stw	sp,1040(sp)
1000726c:	d8c10215 	stw	r3,1032(sp)
10007270:	d8c10515 	stw	r3,1044(sp)
10007274:	d8010615 	stw	zero,1048(sp)
10007278:	0004f1c0 	call	10004f1c <___vfprintf_internal_r>
1000727c:	1023883a 	mov	r17,r2
10007280:	10000416 	blt	r2,zero,10007294 <__sbprintf+0x80>
10007284:	d9410004 	addi	r5,sp,1024
10007288:	9009883a 	mov	r4,r18
1000728c:	00022300 	call	10002230 <_fflush_r>
10007290:	10000d1e 	bne	r2,zero,100072c8 <__sbprintf+0xb4>
10007294:	d881030b 	ldhu	r2,1036(sp)
10007298:	1080100c 	andi	r2,r2,64
1000729c:	10000326 	beq	r2,zero,100072ac <__sbprintf+0x98>
100072a0:	8080030b 	ldhu	r2,12(r16)
100072a4:	10801014 	ori	r2,r2,64
100072a8:	8080030d 	sth	r2,12(r16)
100072ac:	8805883a 	mov	r2,r17
100072b0:	dfc11d17 	ldw	ra,1140(sp)
100072b4:	dc811c17 	ldw	r18,1136(sp)
100072b8:	dc411b17 	ldw	r17,1132(sp)
100072bc:	dc011a17 	ldw	r16,1128(sp)
100072c0:	dec11e04 	addi	sp,sp,1144
100072c4:	f800283a 	ret
100072c8:	047fffc4 	movi	r17,-1
100072cc:	003ff106 	br	10007294 <__alt_data_end+0xf8007294>

100072d0 <_write_r>:
100072d0:	defffd04 	addi	sp,sp,-12
100072d4:	2805883a 	mov	r2,r5
100072d8:	dc000015 	stw	r16,0(sp)
100072dc:	04040074 	movhi	r16,4097
100072e0:	dc400115 	stw	r17,4(sp)
100072e4:	300b883a 	mov	r5,r6
100072e8:	841a2104 	addi	r16,r16,26756
100072ec:	2023883a 	mov	r17,r4
100072f0:	380d883a 	mov	r6,r7
100072f4:	1009883a 	mov	r4,r2
100072f8:	dfc00215 	stw	ra,8(sp)
100072fc:	80000015 	stw	zero,0(r16)
10007300:	0010b740 	call	10010b74 <write>
10007304:	00ffffc4 	movi	r3,-1
10007308:	10c00526 	beq	r2,r3,10007320 <_write_r+0x50>
1000730c:	dfc00217 	ldw	ra,8(sp)
10007310:	dc400117 	ldw	r17,4(sp)
10007314:	dc000017 	ldw	r16,0(sp)
10007318:	dec00304 	addi	sp,sp,12
1000731c:	f800283a 	ret
10007320:	80c00017 	ldw	r3,0(r16)
10007324:	183ff926 	beq	r3,zero,1000730c <__alt_data_end+0xf800730c>
10007328:	88c00015 	stw	r3,0(r17)
1000732c:	003ff706 	br	1000730c <__alt_data_end+0xf800730c>

10007330 <__swsetup_r>:
10007330:	00840074 	movhi	r2,4097
10007334:	defffd04 	addi	sp,sp,-12
10007338:	1092eb04 	addi	r2,r2,19372
1000733c:	dc400115 	stw	r17,4(sp)
10007340:	2023883a 	mov	r17,r4
10007344:	11000017 	ldw	r4,0(r2)
10007348:	dc000015 	stw	r16,0(sp)
1000734c:	dfc00215 	stw	ra,8(sp)
10007350:	2821883a 	mov	r16,r5
10007354:	20000226 	beq	r4,zero,10007360 <__swsetup_r+0x30>
10007358:	20800e17 	ldw	r2,56(r4)
1000735c:	10003126 	beq	r2,zero,10007424 <__swsetup_r+0xf4>
10007360:	8080030b 	ldhu	r2,12(r16)
10007364:	10c0020c 	andi	r3,r2,8
10007368:	1009883a 	mov	r4,r2
1000736c:	18000f26 	beq	r3,zero,100073ac <__swsetup_r+0x7c>
10007370:	80c00417 	ldw	r3,16(r16)
10007374:	18001526 	beq	r3,zero,100073cc <__swsetup_r+0x9c>
10007378:	1100004c 	andi	r4,r2,1
1000737c:	20001c1e 	bne	r4,zero,100073f0 <__swsetup_r+0xc0>
10007380:	1080008c 	andi	r2,r2,2
10007384:	1000291e 	bne	r2,zero,1000742c <__swsetup_r+0xfc>
10007388:	80800517 	ldw	r2,20(r16)
1000738c:	80800215 	stw	r2,8(r16)
10007390:	18001c26 	beq	r3,zero,10007404 <__swsetup_r+0xd4>
10007394:	0005883a 	mov	r2,zero
10007398:	dfc00217 	ldw	ra,8(sp)
1000739c:	dc400117 	ldw	r17,4(sp)
100073a0:	dc000017 	ldw	r16,0(sp)
100073a4:	dec00304 	addi	sp,sp,12
100073a8:	f800283a 	ret
100073ac:	2080040c 	andi	r2,r4,16
100073b0:	10002e26 	beq	r2,zero,1000746c <__swsetup_r+0x13c>
100073b4:	2080010c 	andi	r2,r4,4
100073b8:	10001e1e 	bne	r2,zero,10007434 <__swsetup_r+0x104>
100073bc:	80c00417 	ldw	r3,16(r16)
100073c0:	20800214 	ori	r2,r4,8
100073c4:	8080030d 	sth	r2,12(r16)
100073c8:	183feb1e 	bne	r3,zero,10007378 <__alt_data_end+0xf8007378>
100073cc:	1100a00c 	andi	r4,r2,640
100073d0:	01408004 	movi	r5,512
100073d4:	217fe826 	beq	r4,r5,10007378 <__alt_data_end+0xf8007378>
100073d8:	800b883a 	mov	r5,r16
100073dc:	8809883a 	mov	r4,r17
100073e0:	00037500 	call	10003750 <__smakebuf_r>
100073e4:	8080030b 	ldhu	r2,12(r16)
100073e8:	80c00417 	ldw	r3,16(r16)
100073ec:	003fe206 	br	10007378 <__alt_data_end+0xf8007378>
100073f0:	80800517 	ldw	r2,20(r16)
100073f4:	80000215 	stw	zero,8(r16)
100073f8:	0085c83a 	sub	r2,zero,r2
100073fc:	80800615 	stw	r2,24(r16)
10007400:	183fe41e 	bne	r3,zero,10007394 <__alt_data_end+0xf8007394>
10007404:	80c0030b 	ldhu	r3,12(r16)
10007408:	0005883a 	mov	r2,zero
1000740c:	1900200c 	andi	r4,r3,128
10007410:	203fe126 	beq	r4,zero,10007398 <__alt_data_end+0xf8007398>
10007414:	18c01014 	ori	r3,r3,64
10007418:	80c0030d 	sth	r3,12(r16)
1000741c:	00bfffc4 	movi	r2,-1
10007420:	003fdd06 	br	10007398 <__alt_data_end+0xf8007398>
10007424:	000261c0 	call	1000261c <__sinit>
10007428:	003fcd06 	br	10007360 <__alt_data_end+0xf8007360>
1000742c:	0005883a 	mov	r2,zero
10007430:	003fd606 	br	1000738c <__alt_data_end+0xf800738c>
10007434:	81400c17 	ldw	r5,48(r16)
10007438:	28000626 	beq	r5,zero,10007454 <__swsetup_r+0x124>
1000743c:	80801004 	addi	r2,r16,64
10007440:	28800326 	beq	r5,r2,10007450 <__swsetup_r+0x120>
10007444:	8809883a 	mov	r4,r17
10007448:	0002bb40 	call	10002bb4 <_free_r>
1000744c:	8100030b 	ldhu	r4,12(r16)
10007450:	80000c15 	stw	zero,48(r16)
10007454:	80c00417 	ldw	r3,16(r16)
10007458:	00bff6c4 	movi	r2,-37
1000745c:	1108703a 	and	r4,r2,r4
10007460:	80000115 	stw	zero,4(r16)
10007464:	80c00015 	stw	r3,0(r16)
10007468:	003fd506 	br	100073c0 <__alt_data_end+0xf80073c0>
1000746c:	00800244 	movi	r2,9
10007470:	88800015 	stw	r2,0(r17)
10007474:	20801014 	ori	r2,r4,64
10007478:	8080030d 	sth	r2,12(r16)
1000747c:	00bfffc4 	movi	r2,-1
10007480:	003fc506 	br	10007398 <__alt_data_end+0xf8007398>

10007484 <_close_r>:
10007484:	defffd04 	addi	sp,sp,-12
10007488:	dc000015 	stw	r16,0(sp)
1000748c:	04040074 	movhi	r16,4097
10007490:	dc400115 	stw	r17,4(sp)
10007494:	841a2104 	addi	r16,r16,26756
10007498:	2023883a 	mov	r17,r4
1000749c:	2809883a 	mov	r4,r5
100074a0:	dfc00215 	stw	ra,8(sp)
100074a4:	80000015 	stw	zero,0(r16)
100074a8:	00100180 	call	10010018 <close>
100074ac:	00ffffc4 	movi	r3,-1
100074b0:	10c00526 	beq	r2,r3,100074c8 <_close_r+0x44>
100074b4:	dfc00217 	ldw	ra,8(sp)
100074b8:	dc400117 	ldw	r17,4(sp)
100074bc:	dc000017 	ldw	r16,0(sp)
100074c0:	dec00304 	addi	sp,sp,12
100074c4:	f800283a 	ret
100074c8:	80c00017 	ldw	r3,0(r16)
100074cc:	183ff926 	beq	r3,zero,100074b4 <__alt_data_end+0xf80074b4>
100074d0:	88c00015 	stw	r3,0(r17)
100074d4:	003ff706 	br	100074b4 <__alt_data_end+0xf80074b4>

100074d8 <__call_exitprocs>:
100074d8:	defff504 	addi	sp,sp,-44
100074dc:	df000915 	stw	fp,36(sp)
100074e0:	dd400615 	stw	r21,24(sp)
100074e4:	dc800315 	stw	r18,12(sp)
100074e8:	dfc00a15 	stw	ra,40(sp)
100074ec:	ddc00815 	stw	r23,32(sp)
100074f0:	dd800715 	stw	r22,28(sp)
100074f4:	dd000515 	stw	r20,20(sp)
100074f8:	dcc00415 	stw	r19,16(sp)
100074fc:	dc400215 	stw	r17,8(sp)
10007500:	dc000115 	stw	r16,4(sp)
10007504:	d9000015 	stw	r4,0(sp)
10007508:	2839883a 	mov	fp,r5
1000750c:	04800044 	movi	r18,1
10007510:	057fffc4 	movi	r21,-1
10007514:	00840074 	movhi	r2,4097
10007518:	1092ea04 	addi	r2,r2,19368
1000751c:	12000017 	ldw	r8,0(r2)
10007520:	45005217 	ldw	r20,328(r8)
10007524:	44c05204 	addi	r19,r8,328
10007528:	a0001c26 	beq	r20,zero,1000759c <__call_exitprocs+0xc4>
1000752c:	a0800117 	ldw	r2,4(r20)
10007530:	15ffffc4 	addi	r23,r2,-1
10007534:	b8000d16 	blt	r23,zero,1000756c <__call_exitprocs+0x94>
10007538:	14000044 	addi	r16,r2,1
1000753c:	8421883a 	add	r16,r16,r16
10007540:	8421883a 	add	r16,r16,r16
10007544:	84402004 	addi	r17,r16,128
10007548:	a463883a 	add	r17,r20,r17
1000754c:	a421883a 	add	r16,r20,r16
10007550:	e0001e26 	beq	fp,zero,100075cc <__call_exitprocs+0xf4>
10007554:	80804017 	ldw	r2,256(r16)
10007558:	e0801c26 	beq	fp,r2,100075cc <__call_exitprocs+0xf4>
1000755c:	bdffffc4 	addi	r23,r23,-1
10007560:	843fff04 	addi	r16,r16,-4
10007564:	8c7fff04 	addi	r17,r17,-4
10007568:	bd7ff91e 	bne	r23,r21,10007550 <__alt_data_end+0xf8007550>
1000756c:	00840034 	movhi	r2,4096
10007570:	108e4804 	addi	r2,r2,14624
10007574:	10000926 	beq	r2,zero,1000759c <__call_exitprocs+0xc4>
10007578:	a0800117 	ldw	r2,4(r20)
1000757c:	1000301e 	bne	r2,zero,10007640 <__call_exitprocs+0x168>
10007580:	a0800017 	ldw	r2,0(r20)
10007584:	10003226 	beq	r2,zero,10007650 <__call_exitprocs+0x178>
10007588:	a009883a 	mov	r4,r20
1000758c:	98800015 	stw	r2,0(r19)
10007590:	00039200 	call	10003920 <free>
10007594:	9d000017 	ldw	r20,0(r19)
10007598:	a03fe41e 	bne	r20,zero,1000752c <__alt_data_end+0xf800752c>
1000759c:	dfc00a17 	ldw	ra,40(sp)
100075a0:	df000917 	ldw	fp,36(sp)
100075a4:	ddc00817 	ldw	r23,32(sp)
100075a8:	dd800717 	ldw	r22,28(sp)
100075ac:	dd400617 	ldw	r21,24(sp)
100075b0:	dd000517 	ldw	r20,20(sp)
100075b4:	dcc00417 	ldw	r19,16(sp)
100075b8:	dc800317 	ldw	r18,12(sp)
100075bc:	dc400217 	ldw	r17,8(sp)
100075c0:	dc000117 	ldw	r16,4(sp)
100075c4:	dec00b04 	addi	sp,sp,44
100075c8:	f800283a 	ret
100075cc:	a0800117 	ldw	r2,4(r20)
100075d0:	80c00017 	ldw	r3,0(r16)
100075d4:	10bfffc4 	addi	r2,r2,-1
100075d8:	15c01426 	beq	r2,r23,1000762c <__call_exitprocs+0x154>
100075dc:	80000015 	stw	zero,0(r16)
100075e0:	183fde26 	beq	r3,zero,1000755c <__alt_data_end+0xf800755c>
100075e4:	95c8983a 	sll	r4,r18,r23
100075e8:	a0806217 	ldw	r2,392(r20)
100075ec:	a5800117 	ldw	r22,4(r20)
100075f0:	2084703a 	and	r2,r4,r2
100075f4:	10000b26 	beq	r2,zero,10007624 <__call_exitprocs+0x14c>
100075f8:	a0806317 	ldw	r2,396(r20)
100075fc:	2088703a 	and	r4,r4,r2
10007600:	20000c1e 	bne	r4,zero,10007634 <__call_exitprocs+0x15c>
10007604:	89400017 	ldw	r5,0(r17)
10007608:	d9000017 	ldw	r4,0(sp)
1000760c:	183ee83a 	callr	r3
10007610:	a0800117 	ldw	r2,4(r20)
10007614:	15bfbf1e 	bne	r2,r22,10007514 <__alt_data_end+0xf8007514>
10007618:	98800017 	ldw	r2,0(r19)
1000761c:	153fcf26 	beq	r2,r20,1000755c <__alt_data_end+0xf800755c>
10007620:	003fbc06 	br	10007514 <__alt_data_end+0xf8007514>
10007624:	183ee83a 	callr	r3
10007628:	003ff906 	br	10007610 <__alt_data_end+0xf8007610>
1000762c:	a5c00115 	stw	r23,4(r20)
10007630:	003feb06 	br	100075e0 <__alt_data_end+0xf80075e0>
10007634:	89000017 	ldw	r4,0(r17)
10007638:	183ee83a 	callr	r3
1000763c:	003ff406 	br	10007610 <__alt_data_end+0xf8007610>
10007640:	a0800017 	ldw	r2,0(r20)
10007644:	a027883a 	mov	r19,r20
10007648:	1029883a 	mov	r20,r2
1000764c:	003fb606 	br	10007528 <__alt_data_end+0xf8007528>
10007650:	0005883a 	mov	r2,zero
10007654:	003ffb06 	br	10007644 <__alt_data_end+0xf8007644>

10007658 <abort>:
10007658:	deffff04 	addi	sp,sp,-4
1000765c:	01000184 	movi	r4,6
10007660:	dfc00015 	stw	ra,0(sp)
10007664:	000adac0 	call	1000adac <raise>
10007668:	01000044 	movi	r4,1
1000766c:	001011c0 	call	1001011c <_exit>

10007670 <quorem>:
10007670:	defff204 	addi	sp,sp,-56
10007674:	ddc00b15 	stw	r23,44(sp)
10007678:	20800417 	ldw	r2,16(r4)
1000767c:	2dc00417 	ldw	r23,16(r5)
10007680:	dfc00d15 	stw	ra,52(sp)
10007684:	df000c15 	stw	fp,48(sp)
10007688:	dd800a15 	stw	r22,40(sp)
1000768c:	dd400915 	stw	r21,36(sp)
10007690:	dd000815 	stw	r20,32(sp)
10007694:	dcc00715 	stw	r19,28(sp)
10007698:	dc800615 	stw	r18,24(sp)
1000769c:	dc400515 	stw	r17,20(sp)
100076a0:	dc000415 	stw	r16,16(sp)
100076a4:	15c07a16 	blt	r2,r23,10007890 <quorem+0x220>
100076a8:	bdffffc4 	addi	r23,r23,-1
100076ac:	bde9883a 	add	r20,r23,r23
100076b0:	28c00504 	addi	r3,r5,20
100076b4:	a529883a 	add	r20,r20,r20
100076b8:	1d39883a 	add	fp,r3,r20
100076bc:	24c00504 	addi	r19,r4,20
100076c0:	d9400215 	stw	r5,8(sp)
100076c4:	9d29883a 	add	r20,r19,r20
100076c8:	e1400017 	ldw	r5,0(fp)
100076cc:	d9000015 	stw	r4,0(sp)
100076d0:	a1000017 	ldw	r4,0(r20)
100076d4:	29400044 	addi	r5,r5,1
100076d8:	d8c00115 	stw	r3,4(sp)
100076dc:	dd000315 	stw	r20,12(sp)
100076e0:	0001c840 	call	10001c84 <__udivsi3>
100076e4:	1025883a 	mov	r18,r2
100076e8:	10003026 	beq	r2,zero,100077ac <quorem+0x13c>
100076ec:	dc400117 	ldw	r17,4(sp)
100076f0:	9829883a 	mov	r20,r19
100076f4:	002d883a 	mov	r22,zero
100076f8:	0021883a 	mov	r16,zero
100076fc:	8d400017 	ldw	r21,0(r17)
10007700:	900b883a 	mov	r5,r18
10007704:	8c400104 	addi	r17,r17,4
10007708:	a93fffcc 	andi	r4,r21,65535
1000770c:	0001d400 	call	10001d40 <__mulsi3>
10007710:	a808d43a 	srli	r4,r21,16
10007714:	900b883a 	mov	r5,r18
10007718:	15ad883a 	add	r22,r2,r22
1000771c:	0001d400 	call	10001d40 <__mulsi3>
10007720:	a1000017 	ldw	r4,0(r20)
10007724:	b00cd43a 	srli	r6,r22,16
10007728:	b0ffffcc 	andi	r3,r22,65535
1000772c:	217fffcc 	andi	r5,r4,65535
10007730:	2c21883a 	add	r16,r5,r16
10007734:	80c7c83a 	sub	r3,r16,r3
10007738:	2008d43a 	srli	r4,r4,16
1000773c:	1185883a 	add	r2,r2,r6
10007740:	1821d43a 	srai	r16,r3,16
10007744:	117fffcc 	andi	r5,r2,65535
10007748:	2149c83a 	sub	r4,r4,r5
1000774c:	2421883a 	add	r16,r4,r16
10007750:	8008943a 	slli	r4,r16,16
10007754:	18ffffcc 	andi	r3,r3,65535
10007758:	102cd43a 	srli	r22,r2,16
1000775c:	20c8b03a 	or	r4,r4,r3
10007760:	a1000015 	stw	r4,0(r20)
10007764:	8021d43a 	srai	r16,r16,16
10007768:	a5000104 	addi	r20,r20,4
1000776c:	e47fe32e 	bgeu	fp,r17,100076fc <__alt_data_end+0xf80076fc>
10007770:	d8c00317 	ldw	r3,12(sp)
10007774:	18800017 	ldw	r2,0(r3)
10007778:	10000c1e 	bne	r2,zero,100077ac <quorem+0x13c>
1000777c:	18bfff04 	addi	r2,r3,-4
10007780:	9880082e 	bgeu	r19,r2,100077a4 <quorem+0x134>
10007784:	18ffff17 	ldw	r3,-4(r3)
10007788:	18000326 	beq	r3,zero,10007798 <quorem+0x128>
1000778c:	00000506 	br	100077a4 <quorem+0x134>
10007790:	10c00017 	ldw	r3,0(r2)
10007794:	1800031e 	bne	r3,zero,100077a4 <quorem+0x134>
10007798:	10bfff04 	addi	r2,r2,-4
1000779c:	bdffffc4 	addi	r23,r23,-1
100077a0:	98bffb36 	bltu	r19,r2,10007790 <__alt_data_end+0xf8007790>
100077a4:	d8c00017 	ldw	r3,0(sp)
100077a8:	1dc00415 	stw	r23,16(r3)
100077ac:	d9400217 	ldw	r5,8(sp)
100077b0:	d9000017 	ldw	r4,0(sp)
100077b4:	000a1e80 	call	1000a1e8 <__mcmp>
100077b8:	10002816 	blt	r2,zero,1000785c <quorem+0x1ec>
100077bc:	dc400117 	ldw	r17,4(sp)
100077c0:	94800044 	addi	r18,r18,1
100077c4:	980d883a 	mov	r6,r19
100077c8:	0007883a 	mov	r3,zero
100077cc:	31000017 	ldw	r4,0(r6)
100077d0:	89400017 	ldw	r5,0(r17)
100077d4:	31800104 	addi	r6,r6,4
100077d8:	20bfffcc 	andi	r2,r4,65535
100077dc:	10c7883a 	add	r3,r2,r3
100077e0:	28bfffcc 	andi	r2,r5,65535
100077e4:	1885c83a 	sub	r2,r3,r2
100077e8:	280ad43a 	srli	r5,r5,16
100077ec:	2008d43a 	srli	r4,r4,16
100077f0:	1007d43a 	srai	r3,r2,16
100077f4:	10bfffcc 	andi	r2,r2,65535
100077f8:	2149c83a 	sub	r4,r4,r5
100077fc:	20c9883a 	add	r4,r4,r3
10007800:	200a943a 	slli	r5,r4,16
10007804:	8c400104 	addi	r17,r17,4
10007808:	2007d43a 	srai	r3,r4,16
1000780c:	2884b03a 	or	r2,r5,r2
10007810:	30bfff15 	stw	r2,-4(r6)
10007814:	e47fed2e 	bgeu	fp,r17,100077cc <__alt_data_end+0xf80077cc>
10007818:	bdc5883a 	add	r2,r23,r23
1000781c:	1085883a 	add	r2,r2,r2
10007820:	9887883a 	add	r3,r19,r2
10007824:	18800017 	ldw	r2,0(r3)
10007828:	10000c1e 	bne	r2,zero,1000785c <quorem+0x1ec>
1000782c:	18bfff04 	addi	r2,r3,-4
10007830:	9880082e 	bgeu	r19,r2,10007854 <quorem+0x1e4>
10007834:	18ffff17 	ldw	r3,-4(r3)
10007838:	18000326 	beq	r3,zero,10007848 <quorem+0x1d8>
1000783c:	00000506 	br	10007854 <quorem+0x1e4>
10007840:	10c00017 	ldw	r3,0(r2)
10007844:	1800031e 	bne	r3,zero,10007854 <quorem+0x1e4>
10007848:	10bfff04 	addi	r2,r2,-4
1000784c:	bdffffc4 	addi	r23,r23,-1
10007850:	98bffb36 	bltu	r19,r2,10007840 <__alt_data_end+0xf8007840>
10007854:	d8c00017 	ldw	r3,0(sp)
10007858:	1dc00415 	stw	r23,16(r3)
1000785c:	9005883a 	mov	r2,r18
10007860:	dfc00d17 	ldw	ra,52(sp)
10007864:	df000c17 	ldw	fp,48(sp)
10007868:	ddc00b17 	ldw	r23,44(sp)
1000786c:	dd800a17 	ldw	r22,40(sp)
10007870:	dd400917 	ldw	r21,36(sp)
10007874:	dd000817 	ldw	r20,32(sp)
10007878:	dcc00717 	ldw	r19,28(sp)
1000787c:	dc800617 	ldw	r18,24(sp)
10007880:	dc400517 	ldw	r17,20(sp)
10007884:	dc000417 	ldw	r16,16(sp)
10007888:	dec00e04 	addi	sp,sp,56
1000788c:	f800283a 	ret
10007890:	0005883a 	mov	r2,zero
10007894:	003ff206 	br	10007860 <__alt_data_end+0xf8007860>

10007898 <_dtoa_r>:
10007898:	20801017 	ldw	r2,64(r4)
1000789c:	deffde04 	addi	sp,sp,-136
100078a0:	df002015 	stw	fp,128(sp)
100078a4:	dcc01b15 	stw	r19,108(sp)
100078a8:	dc801a15 	stw	r18,104(sp)
100078ac:	dc401915 	stw	r17,100(sp)
100078b0:	dc001815 	stw	r16,96(sp)
100078b4:	dfc02115 	stw	ra,132(sp)
100078b8:	ddc01f15 	stw	r23,124(sp)
100078bc:	dd801e15 	stw	r22,120(sp)
100078c0:	dd401d15 	stw	r21,116(sp)
100078c4:	dd001c15 	stw	r20,112(sp)
100078c8:	d9c00315 	stw	r7,12(sp)
100078cc:	2039883a 	mov	fp,r4
100078d0:	3023883a 	mov	r17,r6
100078d4:	2825883a 	mov	r18,r5
100078d8:	dc002417 	ldw	r16,144(sp)
100078dc:	3027883a 	mov	r19,r6
100078e0:	10000826 	beq	r2,zero,10007904 <_dtoa_r+0x6c>
100078e4:	21801117 	ldw	r6,68(r4)
100078e8:	00c00044 	movi	r3,1
100078ec:	100b883a 	mov	r5,r2
100078f0:	1986983a 	sll	r3,r3,r6
100078f4:	11800115 	stw	r6,4(r2)
100078f8:	10c00215 	stw	r3,8(r2)
100078fc:	000990c0 	call	1000990c <_Bfree>
10007900:	e0001015 	stw	zero,64(fp)
10007904:	88002e16 	blt	r17,zero,100079c0 <_dtoa_r+0x128>
10007908:	80000015 	stw	zero,0(r16)
1000790c:	889ffc2c 	andhi	r2,r17,32752
10007910:	00dffc34 	movhi	r3,32752
10007914:	10c01c26 	beq	r2,r3,10007988 <_dtoa_r+0xf0>
10007918:	000d883a 	mov	r6,zero
1000791c:	000f883a 	mov	r7,zero
10007920:	9009883a 	mov	r4,r18
10007924:	980b883a 	mov	r5,r19
10007928:	000e9b40 	call	1000e9b4 <__eqdf2>
1000792c:	10002b1e 	bne	r2,zero,100079dc <_dtoa_r+0x144>
10007930:	d9c02317 	ldw	r7,140(sp)
10007934:	00800044 	movi	r2,1
10007938:	38800015 	stw	r2,0(r7)
1000793c:	d8802517 	ldw	r2,148(sp)
10007940:	10019e26 	beq	r2,zero,10007fbc <_dtoa_r+0x724>
10007944:	d8c02517 	ldw	r3,148(sp)
10007948:	00840074 	movhi	r2,4097
1000794c:	108b4744 	addi	r2,r2,11549
10007950:	18800015 	stw	r2,0(r3)
10007954:	10bfffc4 	addi	r2,r2,-1
10007958:	dfc02117 	ldw	ra,132(sp)
1000795c:	df002017 	ldw	fp,128(sp)
10007960:	ddc01f17 	ldw	r23,124(sp)
10007964:	dd801e17 	ldw	r22,120(sp)
10007968:	dd401d17 	ldw	r21,116(sp)
1000796c:	dd001c17 	ldw	r20,112(sp)
10007970:	dcc01b17 	ldw	r19,108(sp)
10007974:	dc801a17 	ldw	r18,104(sp)
10007978:	dc401917 	ldw	r17,100(sp)
1000797c:	dc001817 	ldw	r16,96(sp)
10007980:	dec02204 	addi	sp,sp,136
10007984:	f800283a 	ret
10007988:	d8c02317 	ldw	r3,140(sp)
1000798c:	0089c3c4 	movi	r2,9999
10007990:	18800015 	stw	r2,0(r3)
10007994:	90017726 	beq	r18,zero,10007f74 <_dtoa_r+0x6dc>
10007998:	00840074 	movhi	r2,4097
1000799c:	108b5304 	addi	r2,r2,11596
100079a0:	d9002517 	ldw	r4,148(sp)
100079a4:	203fec26 	beq	r4,zero,10007958 <__alt_data_end+0xf8007958>
100079a8:	10c000c7 	ldb	r3,3(r2)
100079ac:	1801781e 	bne	r3,zero,10007f90 <_dtoa_r+0x6f8>
100079b0:	10c000c4 	addi	r3,r2,3
100079b4:	d9802517 	ldw	r6,148(sp)
100079b8:	30c00015 	stw	r3,0(r6)
100079bc:	003fe606 	br	10007958 <__alt_data_end+0xf8007958>
100079c0:	04e00034 	movhi	r19,32768
100079c4:	9cffffc4 	addi	r19,r19,-1
100079c8:	00800044 	movi	r2,1
100079cc:	8ce6703a 	and	r19,r17,r19
100079d0:	80800015 	stw	r2,0(r16)
100079d4:	9823883a 	mov	r17,r19
100079d8:	003fcc06 	br	1000790c <__alt_data_end+0xf800790c>
100079dc:	d8800204 	addi	r2,sp,8
100079e0:	d8800015 	stw	r2,0(sp)
100079e4:	d9c00104 	addi	r7,sp,4
100079e8:	900b883a 	mov	r5,r18
100079ec:	980d883a 	mov	r6,r19
100079f0:	e009883a 	mov	r4,fp
100079f4:	8820d53a 	srli	r16,r17,20
100079f8:	000a5b40 	call	1000a5b4 <__d2b>
100079fc:	d8800915 	stw	r2,36(sp)
10007a00:	8001651e 	bne	r16,zero,10007f98 <_dtoa_r+0x700>
10007a04:	dd800217 	ldw	r22,8(sp)
10007a08:	dc000117 	ldw	r16,4(sp)
10007a0c:	00800804 	movi	r2,32
10007a10:	b421883a 	add	r16,r22,r16
10007a14:	80c10c84 	addi	r3,r16,1074
10007a18:	10c2d10e 	bge	r2,r3,10008560 <_dtoa_r+0xcc8>
10007a1c:	00801004 	movi	r2,64
10007a20:	81010484 	addi	r4,r16,1042
10007a24:	10c7c83a 	sub	r3,r2,r3
10007a28:	9108d83a 	srl	r4,r18,r4
10007a2c:	88e2983a 	sll	r17,r17,r3
10007a30:	2448b03a 	or	r4,r4,r17
10007a34:	000fed00 	call	1000fed0 <__floatunsidf>
10007a38:	017f8434 	movhi	r5,65040
10007a3c:	01800044 	movi	r6,1
10007a40:	1009883a 	mov	r4,r2
10007a44:	194b883a 	add	r5,r3,r5
10007a48:	843fffc4 	addi	r16,r16,-1
10007a4c:	d9801115 	stw	r6,68(sp)
10007a50:	000d883a 	mov	r6,zero
10007a54:	01cffe34 	movhi	r7,16376
10007a58:	000f4780 	call	1000f478 <__subdf3>
10007a5c:	0198dbf4 	movhi	r6,25455
10007a60:	01cff4f4 	movhi	r7,16339
10007a64:	3190d844 	addi	r6,r6,17249
10007a68:	39e1e9c4 	addi	r7,r7,-30809
10007a6c:	1009883a 	mov	r4,r2
10007a70:	180b883a 	mov	r5,r3
10007a74:	000ec0c0 	call	1000ec0c <__muldf3>
10007a78:	01a2d874 	movhi	r6,35681
10007a7c:	01cff1f4 	movhi	r7,16327
10007a80:	31b22cc4 	addi	r6,r6,-14157
10007a84:	39e28a04 	addi	r7,r7,-30168
10007a88:	180b883a 	mov	r5,r3
10007a8c:	1009883a 	mov	r4,r2
10007a90:	000d7380 	call	1000d738 <__adddf3>
10007a94:	8009883a 	mov	r4,r16
10007a98:	1029883a 	mov	r20,r2
10007a9c:	1823883a 	mov	r17,r3
10007aa0:	000fdf40 	call	1000fdf4 <__floatsidf>
10007aa4:	019427f4 	movhi	r6,20639
10007aa8:	01cff4f4 	movhi	r7,16339
10007aac:	319e7ec4 	addi	r6,r6,31227
10007ab0:	39d104c4 	addi	r7,r7,17427
10007ab4:	1009883a 	mov	r4,r2
10007ab8:	180b883a 	mov	r5,r3
10007abc:	000ec0c0 	call	1000ec0c <__muldf3>
10007ac0:	100d883a 	mov	r6,r2
10007ac4:	180f883a 	mov	r7,r3
10007ac8:	a009883a 	mov	r4,r20
10007acc:	880b883a 	mov	r5,r17
10007ad0:	000d7380 	call	1000d738 <__adddf3>
10007ad4:	1009883a 	mov	r4,r2
10007ad8:	180b883a 	mov	r5,r3
10007adc:	1029883a 	mov	r20,r2
10007ae0:	1823883a 	mov	r17,r3
10007ae4:	000fd740 	call	1000fd74 <__fixdfsi>
10007ae8:	000d883a 	mov	r6,zero
10007aec:	000f883a 	mov	r7,zero
10007af0:	a009883a 	mov	r4,r20
10007af4:	880b883a 	mov	r5,r17
10007af8:	d8800515 	stw	r2,20(sp)
10007afc:	000eb180 	call	1000eb18 <__ledf2>
10007b00:	10028716 	blt	r2,zero,10008520 <_dtoa_r+0xc88>
10007b04:	d8c00517 	ldw	r3,20(sp)
10007b08:	00800584 	movi	r2,22
10007b0c:	10c27536 	bltu	r2,r3,100084e4 <_dtoa_r+0xc4c>
10007b10:	180490fa 	slli	r2,r3,3
10007b14:	00c40074 	movhi	r3,4097
10007b18:	18cb6e04 	addi	r3,r3,11704
10007b1c:	1885883a 	add	r2,r3,r2
10007b20:	11000017 	ldw	r4,0(r2)
10007b24:	11400117 	ldw	r5,4(r2)
10007b28:	900d883a 	mov	r6,r18
10007b2c:	980f883a 	mov	r7,r19
10007b30:	000ea3c0 	call	1000ea3c <__gedf2>
10007b34:	00828d0e 	bge	zero,r2,1000856c <_dtoa_r+0xcd4>
10007b38:	d9000517 	ldw	r4,20(sp)
10007b3c:	d8000e15 	stw	zero,56(sp)
10007b40:	213fffc4 	addi	r4,r4,-1
10007b44:	d9000515 	stw	r4,20(sp)
10007b48:	b42dc83a 	sub	r22,r22,r16
10007b4c:	b5bfffc4 	addi	r22,r22,-1
10007b50:	b0026f16 	blt	r22,zero,10008510 <_dtoa_r+0xc78>
10007b54:	d8000815 	stw	zero,32(sp)
10007b58:	d9c00517 	ldw	r7,20(sp)
10007b5c:	38026416 	blt	r7,zero,100084f0 <_dtoa_r+0xc58>
10007b60:	b1ed883a 	add	r22,r22,r7
10007b64:	d9c00d15 	stw	r7,52(sp)
10007b68:	d8000a15 	stw	zero,40(sp)
10007b6c:	d9800317 	ldw	r6,12(sp)
10007b70:	00800244 	movi	r2,9
10007b74:	11811436 	bltu	r2,r6,10007fc8 <_dtoa_r+0x730>
10007b78:	00800144 	movi	r2,5
10007b7c:	1184e10e 	bge	r2,r6,10008f04 <_dtoa_r+0x166c>
10007b80:	31bfff04 	addi	r6,r6,-4
10007b84:	d9800315 	stw	r6,12(sp)
10007b88:	0023883a 	mov	r17,zero
10007b8c:	d9800317 	ldw	r6,12(sp)
10007b90:	008000c4 	movi	r2,3
10007b94:	30836726 	beq	r6,r2,10008934 <_dtoa_r+0x109c>
10007b98:	1183410e 	bge	r2,r6,100088a0 <_dtoa_r+0x1008>
10007b9c:	d9c00317 	ldw	r7,12(sp)
10007ba0:	00800104 	movi	r2,4
10007ba4:	38827c26 	beq	r7,r2,10008598 <_dtoa_r+0xd00>
10007ba8:	00800144 	movi	r2,5
10007bac:	3884c41e 	bne	r7,r2,10008ec0 <_dtoa_r+0x1628>
10007bb0:	00800044 	movi	r2,1
10007bb4:	d8800b15 	stw	r2,44(sp)
10007bb8:	d8c00517 	ldw	r3,20(sp)
10007bbc:	d9002217 	ldw	r4,136(sp)
10007bc0:	1907883a 	add	r3,r3,r4
10007bc4:	19800044 	addi	r6,r3,1
10007bc8:	d8c00c15 	stw	r3,48(sp)
10007bcc:	d9800615 	stw	r6,24(sp)
10007bd0:	0183a40e 	bge	zero,r6,10008a64 <_dtoa_r+0x11cc>
10007bd4:	d9800617 	ldw	r6,24(sp)
10007bd8:	3021883a 	mov	r16,r6
10007bdc:	e0001115 	stw	zero,68(fp)
10007be0:	008005c4 	movi	r2,23
10007be4:	1184c92e 	bgeu	r2,r6,10008f0c <_dtoa_r+0x1674>
10007be8:	00c00044 	movi	r3,1
10007bec:	00800104 	movi	r2,4
10007bf0:	1085883a 	add	r2,r2,r2
10007bf4:	11000504 	addi	r4,r2,20
10007bf8:	180b883a 	mov	r5,r3
10007bfc:	18c00044 	addi	r3,r3,1
10007c00:	313ffb2e 	bgeu	r6,r4,10007bf0 <__alt_data_end+0xf8007bf0>
10007c04:	e1401115 	stw	r5,68(fp)
10007c08:	e009883a 	mov	r4,fp
10007c0c:	00098640 	call	10009864 <_Balloc>
10007c10:	d8800715 	stw	r2,28(sp)
10007c14:	e0801015 	stw	r2,64(fp)
10007c18:	00800384 	movi	r2,14
10007c1c:	1400f736 	bltu	r2,r16,10007ffc <_dtoa_r+0x764>
10007c20:	8800f626 	beq	r17,zero,10007ffc <_dtoa_r+0x764>
10007c24:	d9c00517 	ldw	r7,20(sp)
10007c28:	01c39a0e 	bge	zero,r7,10008a94 <_dtoa_r+0x11fc>
10007c2c:	388003cc 	andi	r2,r7,15
10007c30:	100490fa 	slli	r2,r2,3
10007c34:	382bd13a 	srai	r21,r7,4
10007c38:	00c40074 	movhi	r3,4097
10007c3c:	18cb6e04 	addi	r3,r3,11704
10007c40:	1885883a 	add	r2,r3,r2
10007c44:	a8c0040c 	andi	r3,r21,16
10007c48:	12400017 	ldw	r9,0(r2)
10007c4c:	12000117 	ldw	r8,4(r2)
10007c50:	18037926 	beq	r3,zero,10008a38 <_dtoa_r+0x11a0>
10007c54:	00840074 	movhi	r2,4097
10007c58:	108b6404 	addi	r2,r2,11664
10007c5c:	11800817 	ldw	r6,32(r2)
10007c60:	11c00917 	ldw	r7,36(r2)
10007c64:	9009883a 	mov	r4,r18
10007c68:	980b883a 	mov	r5,r19
10007c6c:	da001715 	stw	r8,92(sp)
10007c70:	da401615 	stw	r9,88(sp)
10007c74:	000dfe40 	call	1000dfe4 <__divdf3>
10007c78:	da001717 	ldw	r8,92(sp)
10007c7c:	da401617 	ldw	r9,88(sp)
10007c80:	ad4003cc 	andi	r21,r21,15
10007c84:	040000c4 	movi	r16,3
10007c88:	1023883a 	mov	r17,r2
10007c8c:	1829883a 	mov	r20,r3
10007c90:	a8001126 	beq	r21,zero,10007cd8 <_dtoa_r+0x440>
10007c94:	05c40074 	movhi	r23,4097
10007c98:	bdcb6404 	addi	r23,r23,11664
10007c9c:	4805883a 	mov	r2,r9
10007ca0:	4007883a 	mov	r3,r8
10007ca4:	a980004c 	andi	r6,r21,1
10007ca8:	1009883a 	mov	r4,r2
10007cac:	a82bd07a 	srai	r21,r21,1
10007cb0:	180b883a 	mov	r5,r3
10007cb4:	30000426 	beq	r6,zero,10007cc8 <_dtoa_r+0x430>
10007cb8:	b9800017 	ldw	r6,0(r23)
10007cbc:	b9c00117 	ldw	r7,4(r23)
10007cc0:	84000044 	addi	r16,r16,1
10007cc4:	000ec0c0 	call	1000ec0c <__muldf3>
10007cc8:	bdc00204 	addi	r23,r23,8
10007ccc:	a83ff51e 	bne	r21,zero,10007ca4 <__alt_data_end+0xf8007ca4>
10007cd0:	1013883a 	mov	r9,r2
10007cd4:	1811883a 	mov	r8,r3
10007cd8:	480d883a 	mov	r6,r9
10007cdc:	400f883a 	mov	r7,r8
10007ce0:	8809883a 	mov	r4,r17
10007ce4:	a00b883a 	mov	r5,r20
10007ce8:	000dfe40 	call	1000dfe4 <__divdf3>
10007cec:	d8800f15 	stw	r2,60(sp)
10007cf0:	d8c01015 	stw	r3,64(sp)
10007cf4:	d8c00e17 	ldw	r3,56(sp)
10007cf8:	18000626 	beq	r3,zero,10007d14 <_dtoa_r+0x47c>
10007cfc:	d9000f17 	ldw	r4,60(sp)
10007d00:	d9401017 	ldw	r5,64(sp)
10007d04:	000d883a 	mov	r6,zero
10007d08:	01cffc34 	movhi	r7,16368
10007d0c:	000eb180 	call	1000eb18 <__ledf2>
10007d10:	10040b16 	blt	r2,zero,10008d40 <_dtoa_r+0x14a8>
10007d14:	8009883a 	mov	r4,r16
10007d18:	000fdf40 	call	1000fdf4 <__floatsidf>
10007d1c:	d9800f17 	ldw	r6,60(sp)
10007d20:	d9c01017 	ldw	r7,64(sp)
10007d24:	1009883a 	mov	r4,r2
10007d28:	180b883a 	mov	r5,r3
10007d2c:	000ec0c0 	call	1000ec0c <__muldf3>
10007d30:	000d883a 	mov	r6,zero
10007d34:	01d00734 	movhi	r7,16412
10007d38:	1009883a 	mov	r4,r2
10007d3c:	180b883a 	mov	r5,r3
10007d40:	000d7380 	call	1000d738 <__adddf3>
10007d44:	1021883a 	mov	r16,r2
10007d48:	d8800617 	ldw	r2,24(sp)
10007d4c:	047f3034 	movhi	r17,64704
10007d50:	1c63883a 	add	r17,r3,r17
10007d54:	10031826 	beq	r2,zero,100089b8 <_dtoa_r+0x1120>
10007d58:	d8c00517 	ldw	r3,20(sp)
10007d5c:	db000617 	ldw	r12,24(sp)
10007d60:	d8c01315 	stw	r3,76(sp)
10007d64:	d9000b17 	ldw	r4,44(sp)
10007d68:	20038f26 	beq	r4,zero,10008ba8 <_dtoa_r+0x1310>
10007d6c:	60bfffc4 	addi	r2,r12,-1
10007d70:	100490fa 	slli	r2,r2,3
10007d74:	00c40074 	movhi	r3,4097
10007d78:	18cb6e04 	addi	r3,r3,11704
10007d7c:	1885883a 	add	r2,r3,r2
10007d80:	11800017 	ldw	r6,0(r2)
10007d84:	11c00117 	ldw	r7,4(r2)
10007d88:	d8800717 	ldw	r2,28(sp)
10007d8c:	0009883a 	mov	r4,zero
10007d90:	014ff834 	movhi	r5,16352
10007d94:	db001615 	stw	r12,88(sp)
10007d98:	15c00044 	addi	r23,r2,1
10007d9c:	000dfe40 	call	1000dfe4 <__divdf3>
10007da0:	800d883a 	mov	r6,r16
10007da4:	880f883a 	mov	r7,r17
10007da8:	1009883a 	mov	r4,r2
10007dac:	180b883a 	mov	r5,r3
10007db0:	000f4780 	call	1000f478 <__subdf3>
10007db4:	d9401017 	ldw	r5,64(sp)
10007db8:	d9000f17 	ldw	r4,60(sp)
10007dbc:	102b883a 	mov	r21,r2
10007dc0:	d8c01215 	stw	r3,72(sp)
10007dc4:	000fd740 	call	1000fd74 <__fixdfsi>
10007dc8:	1009883a 	mov	r4,r2
10007dcc:	1029883a 	mov	r20,r2
10007dd0:	000fdf40 	call	1000fdf4 <__floatsidf>
10007dd4:	d9000f17 	ldw	r4,60(sp)
10007dd8:	d9401017 	ldw	r5,64(sp)
10007ddc:	100d883a 	mov	r6,r2
10007de0:	180f883a 	mov	r7,r3
10007de4:	000f4780 	call	1000f478 <__subdf3>
10007de8:	1823883a 	mov	r17,r3
10007dec:	d8c00717 	ldw	r3,28(sp)
10007df0:	d9401217 	ldw	r5,72(sp)
10007df4:	a2000c04 	addi	r8,r20,48
10007df8:	1021883a 	mov	r16,r2
10007dfc:	1a000005 	stb	r8,0(r3)
10007e00:	800d883a 	mov	r6,r16
10007e04:	880f883a 	mov	r7,r17
10007e08:	a809883a 	mov	r4,r21
10007e0c:	4029883a 	mov	r20,r8
10007e10:	000ea3c0 	call	1000ea3c <__gedf2>
10007e14:	00841d16 	blt	zero,r2,10008e8c <_dtoa_r+0x15f4>
10007e18:	800d883a 	mov	r6,r16
10007e1c:	880f883a 	mov	r7,r17
10007e20:	0009883a 	mov	r4,zero
10007e24:	014ffc34 	movhi	r5,16368
10007e28:	000f4780 	call	1000f478 <__subdf3>
10007e2c:	d9401217 	ldw	r5,72(sp)
10007e30:	100d883a 	mov	r6,r2
10007e34:	180f883a 	mov	r7,r3
10007e38:	a809883a 	mov	r4,r21
10007e3c:	000ea3c0 	call	1000ea3c <__gedf2>
10007e40:	db001617 	ldw	r12,88(sp)
10007e44:	00840e16 	blt	zero,r2,10008e80 <_dtoa_r+0x15e8>
10007e48:	00800044 	movi	r2,1
10007e4c:	13006b0e 	bge	r2,r12,10007ffc <_dtoa_r+0x764>
10007e50:	d9000717 	ldw	r4,28(sp)
10007e54:	dd800f15 	stw	r22,60(sp)
10007e58:	dcc01015 	stw	r19,64(sp)
10007e5c:	2319883a 	add	r12,r4,r12
10007e60:	dcc01217 	ldw	r19,72(sp)
10007e64:	602d883a 	mov	r22,r12
10007e68:	dc801215 	stw	r18,72(sp)
10007e6c:	b825883a 	mov	r18,r23
10007e70:	00000906 	br	10007e98 <_dtoa_r+0x600>
10007e74:	000f4780 	call	1000f478 <__subdf3>
10007e78:	a80d883a 	mov	r6,r21
10007e7c:	980f883a 	mov	r7,r19
10007e80:	1009883a 	mov	r4,r2
10007e84:	180b883a 	mov	r5,r3
10007e88:	000eb180 	call	1000eb18 <__ledf2>
10007e8c:	1003e816 	blt	r2,zero,10008e30 <_dtoa_r+0x1598>
10007e90:	b825883a 	mov	r18,r23
10007e94:	bd83e926 	beq	r23,r22,10008e3c <_dtoa_r+0x15a4>
10007e98:	a809883a 	mov	r4,r21
10007e9c:	980b883a 	mov	r5,r19
10007ea0:	000d883a 	mov	r6,zero
10007ea4:	01d00934 	movhi	r7,16420
10007ea8:	000ec0c0 	call	1000ec0c <__muldf3>
10007eac:	000d883a 	mov	r6,zero
10007eb0:	01d00934 	movhi	r7,16420
10007eb4:	8009883a 	mov	r4,r16
10007eb8:	880b883a 	mov	r5,r17
10007ebc:	102b883a 	mov	r21,r2
10007ec0:	1827883a 	mov	r19,r3
10007ec4:	000ec0c0 	call	1000ec0c <__muldf3>
10007ec8:	180b883a 	mov	r5,r3
10007ecc:	1009883a 	mov	r4,r2
10007ed0:	1821883a 	mov	r16,r3
10007ed4:	1023883a 	mov	r17,r2
10007ed8:	000fd740 	call	1000fd74 <__fixdfsi>
10007edc:	1009883a 	mov	r4,r2
10007ee0:	1029883a 	mov	r20,r2
10007ee4:	000fdf40 	call	1000fdf4 <__floatsidf>
10007ee8:	8809883a 	mov	r4,r17
10007eec:	800b883a 	mov	r5,r16
10007ef0:	100d883a 	mov	r6,r2
10007ef4:	180f883a 	mov	r7,r3
10007ef8:	000f4780 	call	1000f478 <__subdf3>
10007efc:	a5000c04 	addi	r20,r20,48
10007f00:	a80d883a 	mov	r6,r21
10007f04:	980f883a 	mov	r7,r19
10007f08:	1009883a 	mov	r4,r2
10007f0c:	180b883a 	mov	r5,r3
10007f10:	95000005 	stb	r20,0(r18)
10007f14:	1021883a 	mov	r16,r2
10007f18:	1823883a 	mov	r17,r3
10007f1c:	000eb180 	call	1000eb18 <__ledf2>
10007f20:	bdc00044 	addi	r23,r23,1
10007f24:	800d883a 	mov	r6,r16
10007f28:	880f883a 	mov	r7,r17
10007f2c:	0009883a 	mov	r4,zero
10007f30:	014ffc34 	movhi	r5,16368
10007f34:	103fcf0e 	bge	r2,zero,10007e74 <__alt_data_end+0xf8007e74>
10007f38:	d8c01317 	ldw	r3,76(sp)
10007f3c:	d8c00515 	stw	r3,20(sp)
10007f40:	d9400917 	ldw	r5,36(sp)
10007f44:	e009883a 	mov	r4,fp
10007f48:	000990c0 	call	1000990c <_Bfree>
10007f4c:	d9000517 	ldw	r4,20(sp)
10007f50:	d9802317 	ldw	r6,140(sp)
10007f54:	d9c02517 	ldw	r7,148(sp)
10007f58:	b8000005 	stb	zero,0(r23)
10007f5c:	20800044 	addi	r2,r4,1
10007f60:	30800015 	stw	r2,0(r6)
10007f64:	3802aa26 	beq	r7,zero,10008a10 <_dtoa_r+0x1178>
10007f68:	3dc00015 	stw	r23,0(r7)
10007f6c:	d8800717 	ldw	r2,28(sp)
10007f70:	003e7906 	br	10007958 <__alt_data_end+0xf8007958>
10007f74:	00800434 	movhi	r2,16
10007f78:	10bfffc4 	addi	r2,r2,-1
10007f7c:	88a2703a 	and	r17,r17,r2
10007f80:	883e851e 	bne	r17,zero,10007998 <__alt_data_end+0xf8007998>
10007f84:	00840074 	movhi	r2,4097
10007f88:	108b5004 	addi	r2,r2,11584
10007f8c:	003e8406 	br	100079a0 <__alt_data_end+0xf80079a0>
10007f90:	10c00204 	addi	r3,r2,8
10007f94:	003e8706 	br	100079b4 <__alt_data_end+0xf80079b4>
10007f98:	01400434 	movhi	r5,16
10007f9c:	297fffc4 	addi	r5,r5,-1
10007fa0:	994a703a 	and	r5,r19,r5
10007fa4:	9009883a 	mov	r4,r18
10007fa8:	843f0044 	addi	r16,r16,-1023
10007fac:	294ffc34 	orhi	r5,r5,16368
10007fb0:	dd800217 	ldw	r22,8(sp)
10007fb4:	d8001115 	stw	zero,68(sp)
10007fb8:	003ea506 	br	10007a50 <__alt_data_end+0xf8007a50>
10007fbc:	00840074 	movhi	r2,4097
10007fc0:	108b4704 	addi	r2,r2,11548
10007fc4:	003e6406 	br	10007958 <__alt_data_end+0xf8007958>
10007fc8:	e0001115 	stw	zero,68(fp)
10007fcc:	000b883a 	mov	r5,zero
10007fd0:	e009883a 	mov	r4,fp
10007fd4:	00098640 	call	10009864 <_Balloc>
10007fd8:	01bfffc4 	movi	r6,-1
10007fdc:	01c00044 	movi	r7,1
10007fe0:	d8800715 	stw	r2,28(sp)
10007fe4:	d9800c15 	stw	r6,48(sp)
10007fe8:	e0801015 	stw	r2,64(fp)
10007fec:	d8000315 	stw	zero,12(sp)
10007ff0:	d9c00b15 	stw	r7,44(sp)
10007ff4:	d9800615 	stw	r6,24(sp)
10007ff8:	d8002215 	stw	zero,136(sp)
10007ffc:	d8800117 	ldw	r2,4(sp)
10008000:	10008916 	blt	r2,zero,10008228 <_dtoa_r+0x990>
10008004:	d9000517 	ldw	r4,20(sp)
10008008:	00c00384 	movi	r3,14
1000800c:	19008616 	blt	r3,r4,10008228 <_dtoa_r+0x990>
10008010:	200490fa 	slli	r2,r4,3
10008014:	00c40074 	movhi	r3,4097
10008018:	d9802217 	ldw	r6,136(sp)
1000801c:	18cb6e04 	addi	r3,r3,11704
10008020:	1885883a 	add	r2,r3,r2
10008024:	14000017 	ldw	r16,0(r2)
10008028:	14400117 	ldw	r17,4(r2)
1000802c:	30016316 	blt	r6,zero,100085bc <_dtoa_r+0xd24>
10008030:	800d883a 	mov	r6,r16
10008034:	880f883a 	mov	r7,r17
10008038:	9009883a 	mov	r4,r18
1000803c:	980b883a 	mov	r5,r19
10008040:	000dfe40 	call	1000dfe4 <__divdf3>
10008044:	180b883a 	mov	r5,r3
10008048:	1009883a 	mov	r4,r2
1000804c:	000fd740 	call	1000fd74 <__fixdfsi>
10008050:	1009883a 	mov	r4,r2
10008054:	102b883a 	mov	r21,r2
10008058:	000fdf40 	call	1000fdf4 <__floatsidf>
1000805c:	800d883a 	mov	r6,r16
10008060:	880f883a 	mov	r7,r17
10008064:	1009883a 	mov	r4,r2
10008068:	180b883a 	mov	r5,r3
1000806c:	000ec0c0 	call	1000ec0c <__muldf3>
10008070:	100d883a 	mov	r6,r2
10008074:	180f883a 	mov	r7,r3
10008078:	9009883a 	mov	r4,r18
1000807c:	980b883a 	mov	r5,r19
10008080:	000f4780 	call	1000f478 <__subdf3>
10008084:	d9c00717 	ldw	r7,28(sp)
10008088:	1009883a 	mov	r4,r2
1000808c:	a8800c04 	addi	r2,r21,48
10008090:	38800005 	stb	r2,0(r7)
10008094:	3dc00044 	addi	r23,r7,1
10008098:	d9c00617 	ldw	r7,24(sp)
1000809c:	01800044 	movi	r6,1
100080a0:	180b883a 	mov	r5,r3
100080a4:	2005883a 	mov	r2,r4
100080a8:	39803826 	beq	r7,r6,1000818c <_dtoa_r+0x8f4>
100080ac:	000d883a 	mov	r6,zero
100080b0:	01d00934 	movhi	r7,16420
100080b4:	000ec0c0 	call	1000ec0c <__muldf3>
100080b8:	000d883a 	mov	r6,zero
100080bc:	000f883a 	mov	r7,zero
100080c0:	1009883a 	mov	r4,r2
100080c4:	180b883a 	mov	r5,r3
100080c8:	1025883a 	mov	r18,r2
100080cc:	1827883a 	mov	r19,r3
100080d0:	000e9b40 	call	1000e9b4 <__eqdf2>
100080d4:	103f9a26 	beq	r2,zero,10007f40 <__alt_data_end+0xf8007f40>
100080d8:	d9c00617 	ldw	r7,24(sp)
100080dc:	d8c00717 	ldw	r3,28(sp)
100080e0:	b829883a 	mov	r20,r23
100080e4:	38bfffc4 	addi	r2,r7,-1
100080e8:	18ad883a 	add	r22,r3,r2
100080ec:	00000a06 	br	10008118 <_dtoa_r+0x880>
100080f0:	000ec0c0 	call	1000ec0c <__muldf3>
100080f4:	000d883a 	mov	r6,zero
100080f8:	000f883a 	mov	r7,zero
100080fc:	1009883a 	mov	r4,r2
10008100:	180b883a 	mov	r5,r3
10008104:	1025883a 	mov	r18,r2
10008108:	1827883a 	mov	r19,r3
1000810c:	b829883a 	mov	r20,r23
10008110:	000e9b40 	call	1000e9b4 <__eqdf2>
10008114:	103f8a26 	beq	r2,zero,10007f40 <__alt_data_end+0xf8007f40>
10008118:	800d883a 	mov	r6,r16
1000811c:	880f883a 	mov	r7,r17
10008120:	9009883a 	mov	r4,r18
10008124:	980b883a 	mov	r5,r19
10008128:	000dfe40 	call	1000dfe4 <__divdf3>
1000812c:	180b883a 	mov	r5,r3
10008130:	1009883a 	mov	r4,r2
10008134:	000fd740 	call	1000fd74 <__fixdfsi>
10008138:	1009883a 	mov	r4,r2
1000813c:	102b883a 	mov	r21,r2
10008140:	000fdf40 	call	1000fdf4 <__floatsidf>
10008144:	800d883a 	mov	r6,r16
10008148:	880f883a 	mov	r7,r17
1000814c:	1009883a 	mov	r4,r2
10008150:	180b883a 	mov	r5,r3
10008154:	000ec0c0 	call	1000ec0c <__muldf3>
10008158:	100d883a 	mov	r6,r2
1000815c:	180f883a 	mov	r7,r3
10008160:	9009883a 	mov	r4,r18
10008164:	980b883a 	mov	r5,r19
10008168:	000f4780 	call	1000f478 <__subdf3>
1000816c:	aa000c04 	addi	r8,r21,48
10008170:	a2000005 	stb	r8,0(r20)
10008174:	000d883a 	mov	r6,zero
10008178:	01d00934 	movhi	r7,16420
1000817c:	1009883a 	mov	r4,r2
10008180:	180b883a 	mov	r5,r3
10008184:	a5c00044 	addi	r23,r20,1
10008188:	b53fd91e 	bne	r22,r20,100080f0 <__alt_data_end+0xf80080f0>
1000818c:	100d883a 	mov	r6,r2
10008190:	180f883a 	mov	r7,r3
10008194:	1009883a 	mov	r4,r2
10008198:	180b883a 	mov	r5,r3
1000819c:	000d7380 	call	1000d738 <__adddf3>
100081a0:	100d883a 	mov	r6,r2
100081a4:	180f883a 	mov	r7,r3
100081a8:	8009883a 	mov	r4,r16
100081ac:	880b883a 	mov	r5,r17
100081b0:	1027883a 	mov	r19,r2
100081b4:	1825883a 	mov	r18,r3
100081b8:	000eb180 	call	1000eb18 <__ledf2>
100081bc:	10000816 	blt	r2,zero,100081e0 <_dtoa_r+0x948>
100081c0:	980d883a 	mov	r6,r19
100081c4:	900f883a 	mov	r7,r18
100081c8:	8009883a 	mov	r4,r16
100081cc:	880b883a 	mov	r5,r17
100081d0:	000e9b40 	call	1000e9b4 <__eqdf2>
100081d4:	103f5a1e 	bne	r2,zero,10007f40 <__alt_data_end+0xf8007f40>
100081d8:	ad40004c 	andi	r21,r21,1
100081dc:	a83f5826 	beq	r21,zero,10007f40 <__alt_data_end+0xf8007f40>
100081e0:	bd3fffc3 	ldbu	r20,-1(r23)
100081e4:	b8bfffc4 	addi	r2,r23,-1
100081e8:	1007883a 	mov	r3,r2
100081ec:	01400e44 	movi	r5,57
100081f0:	d9800717 	ldw	r6,28(sp)
100081f4:	00000506 	br	1000820c <_dtoa_r+0x974>
100081f8:	18ffffc4 	addi	r3,r3,-1
100081fc:	11824726 	beq	r2,r6,10008b1c <_dtoa_r+0x1284>
10008200:	1d000003 	ldbu	r20,0(r3)
10008204:	102f883a 	mov	r23,r2
10008208:	10bfffc4 	addi	r2,r2,-1
1000820c:	a1003fcc 	andi	r4,r20,255
10008210:	2100201c 	xori	r4,r4,128
10008214:	213fe004 	addi	r4,r4,-128
10008218:	217ff726 	beq	r4,r5,100081f8 <__alt_data_end+0xf80081f8>
1000821c:	a2000044 	addi	r8,r20,1
10008220:	12000005 	stb	r8,0(r2)
10008224:	003f4606 	br	10007f40 <__alt_data_end+0xf8007f40>
10008228:	d9000b17 	ldw	r4,44(sp)
1000822c:	2000c826 	beq	r4,zero,10008550 <_dtoa_r+0xcb8>
10008230:	d9800317 	ldw	r6,12(sp)
10008234:	00c00044 	movi	r3,1
10008238:	1980f90e 	bge	r3,r6,10008620 <_dtoa_r+0xd88>
1000823c:	d8800617 	ldw	r2,24(sp)
10008240:	d8c00a17 	ldw	r3,40(sp)
10008244:	157fffc4 	addi	r21,r2,-1
10008248:	1d41f316 	blt	r3,r21,10008a18 <_dtoa_r+0x1180>
1000824c:	1d6bc83a 	sub	r21,r3,r21
10008250:	d9c00617 	ldw	r7,24(sp)
10008254:	3802aa16 	blt	r7,zero,10008d00 <_dtoa_r+0x1468>
10008258:	dd000817 	ldw	r20,32(sp)
1000825c:	d8800617 	ldw	r2,24(sp)
10008260:	d8c00817 	ldw	r3,32(sp)
10008264:	01400044 	movi	r5,1
10008268:	e009883a 	mov	r4,fp
1000826c:	1887883a 	add	r3,r3,r2
10008270:	d8c00815 	stw	r3,32(sp)
10008274:	b0ad883a 	add	r22,r22,r2
10008278:	0009c980 	call	10009c98 <__i2b>
1000827c:	1023883a 	mov	r17,r2
10008280:	a0000826 	beq	r20,zero,100082a4 <_dtoa_r+0xa0c>
10008284:	0580070e 	bge	zero,r22,100082a4 <_dtoa_r+0xa0c>
10008288:	a005883a 	mov	r2,r20
1000828c:	b500b916 	blt	r22,r20,10008574 <_dtoa_r+0xcdc>
10008290:	d9000817 	ldw	r4,32(sp)
10008294:	a0a9c83a 	sub	r20,r20,r2
10008298:	b0adc83a 	sub	r22,r22,r2
1000829c:	2089c83a 	sub	r4,r4,r2
100082a0:	d9000815 	stw	r4,32(sp)
100082a4:	d9800a17 	ldw	r6,40(sp)
100082a8:	0181810e 	bge	zero,r6,100088b0 <_dtoa_r+0x1018>
100082ac:	d9c00b17 	ldw	r7,44(sp)
100082b0:	3800b326 	beq	r7,zero,10008580 <_dtoa_r+0xce8>
100082b4:	a800b226 	beq	r21,zero,10008580 <_dtoa_r+0xce8>
100082b8:	880b883a 	mov	r5,r17
100082bc:	a80d883a 	mov	r6,r21
100082c0:	e009883a 	mov	r4,fp
100082c4:	0009f600 	call	10009f60 <__pow5mult>
100082c8:	d9800917 	ldw	r6,36(sp)
100082cc:	100b883a 	mov	r5,r2
100082d0:	e009883a 	mov	r4,fp
100082d4:	1023883a 	mov	r17,r2
100082d8:	0009cd40 	call	10009cd4 <__multiply>
100082dc:	1021883a 	mov	r16,r2
100082e0:	d8800a17 	ldw	r2,40(sp)
100082e4:	d9400917 	ldw	r5,36(sp)
100082e8:	e009883a 	mov	r4,fp
100082ec:	1545c83a 	sub	r2,r2,r21
100082f0:	d8800a15 	stw	r2,40(sp)
100082f4:	000990c0 	call	1000990c <_Bfree>
100082f8:	d8c00a17 	ldw	r3,40(sp)
100082fc:	18009f1e 	bne	r3,zero,1000857c <_dtoa_r+0xce4>
10008300:	05c00044 	movi	r23,1
10008304:	e009883a 	mov	r4,fp
10008308:	b80b883a 	mov	r5,r23
1000830c:	0009c980 	call	10009c98 <__i2b>
10008310:	d9000d17 	ldw	r4,52(sp)
10008314:	102b883a 	mov	r21,r2
10008318:	2000ce26 	beq	r4,zero,10008654 <_dtoa_r+0xdbc>
1000831c:	200d883a 	mov	r6,r4
10008320:	100b883a 	mov	r5,r2
10008324:	e009883a 	mov	r4,fp
10008328:	0009f600 	call	10009f60 <__pow5mult>
1000832c:	d9800317 	ldw	r6,12(sp)
10008330:	102b883a 	mov	r21,r2
10008334:	b981810e 	bge	r23,r6,1000893c <_dtoa_r+0x10a4>
10008338:	0027883a 	mov	r19,zero
1000833c:	a8800417 	ldw	r2,16(r21)
10008340:	05c00804 	movi	r23,32
10008344:	10800104 	addi	r2,r2,4
10008348:	1085883a 	add	r2,r2,r2
1000834c:	1085883a 	add	r2,r2,r2
10008350:	a885883a 	add	r2,r21,r2
10008354:	11000017 	ldw	r4,0(r2)
10008358:	0009b800 	call	10009b80 <__hi0bits>
1000835c:	b885c83a 	sub	r2,r23,r2
10008360:	1585883a 	add	r2,r2,r22
10008364:	108007cc 	andi	r2,r2,31
10008368:	1000b326 	beq	r2,zero,10008638 <_dtoa_r+0xda0>
1000836c:	00c00804 	movi	r3,32
10008370:	1887c83a 	sub	r3,r3,r2
10008374:	01000104 	movi	r4,4
10008378:	20c2cd0e 	bge	r4,r3,10008eb0 <_dtoa_r+0x1618>
1000837c:	00c00704 	movi	r3,28
10008380:	1885c83a 	sub	r2,r3,r2
10008384:	d8c00817 	ldw	r3,32(sp)
10008388:	a0a9883a 	add	r20,r20,r2
1000838c:	b0ad883a 	add	r22,r22,r2
10008390:	1887883a 	add	r3,r3,r2
10008394:	d8c00815 	stw	r3,32(sp)
10008398:	d9800817 	ldw	r6,32(sp)
1000839c:	0180040e 	bge	zero,r6,100083b0 <_dtoa_r+0xb18>
100083a0:	800b883a 	mov	r5,r16
100083a4:	e009883a 	mov	r4,fp
100083a8:	000a0a00 	call	1000a0a0 <__lshift>
100083ac:	1021883a 	mov	r16,r2
100083b0:	0580050e 	bge	zero,r22,100083c8 <_dtoa_r+0xb30>
100083b4:	a80b883a 	mov	r5,r21
100083b8:	b00d883a 	mov	r6,r22
100083bc:	e009883a 	mov	r4,fp
100083c0:	000a0a00 	call	1000a0a0 <__lshift>
100083c4:	102b883a 	mov	r21,r2
100083c8:	d9c00e17 	ldw	r7,56(sp)
100083cc:	3801211e 	bne	r7,zero,10008854 <_dtoa_r+0xfbc>
100083d0:	d9800617 	ldw	r6,24(sp)
100083d4:	0181380e 	bge	zero,r6,100088b8 <_dtoa_r+0x1020>
100083d8:	d8c00b17 	ldw	r3,44(sp)
100083dc:	1800ab1e 	bne	r3,zero,1000868c <_dtoa_r+0xdf4>
100083e0:	dc800717 	ldw	r18,28(sp)
100083e4:	dcc00617 	ldw	r19,24(sp)
100083e8:	9029883a 	mov	r20,r18
100083ec:	00000206 	br	100083f8 <_dtoa_r+0xb60>
100083f0:	00099340 	call	10009934 <__multadd>
100083f4:	1021883a 	mov	r16,r2
100083f8:	a80b883a 	mov	r5,r21
100083fc:	8009883a 	mov	r4,r16
10008400:	00076700 	call	10007670 <quorem>
10008404:	10800c04 	addi	r2,r2,48
10008408:	90800005 	stb	r2,0(r18)
1000840c:	94800044 	addi	r18,r18,1
10008410:	9507c83a 	sub	r3,r18,r20
10008414:	000f883a 	mov	r7,zero
10008418:	01800284 	movi	r6,10
1000841c:	800b883a 	mov	r5,r16
10008420:	e009883a 	mov	r4,fp
10008424:	1cfff216 	blt	r3,r19,100083f0 <__alt_data_end+0xf80083f0>
10008428:	1011883a 	mov	r8,r2
1000842c:	d8800617 	ldw	r2,24(sp)
10008430:	0082370e 	bge	zero,r2,10008d10 <_dtoa_r+0x1478>
10008434:	d9000717 	ldw	r4,28(sp)
10008438:	0025883a 	mov	r18,zero
1000843c:	20af883a 	add	r23,r4,r2
10008440:	01800044 	movi	r6,1
10008444:	800b883a 	mov	r5,r16
10008448:	e009883a 	mov	r4,fp
1000844c:	da001715 	stw	r8,92(sp)
10008450:	000a0a00 	call	1000a0a0 <__lshift>
10008454:	a80b883a 	mov	r5,r21
10008458:	1009883a 	mov	r4,r2
1000845c:	d8800915 	stw	r2,36(sp)
10008460:	000a1e80 	call	1000a1e8 <__mcmp>
10008464:	da001717 	ldw	r8,92(sp)
10008468:	0081800e 	bge	zero,r2,10008a6c <_dtoa_r+0x11d4>
1000846c:	b93fffc3 	ldbu	r4,-1(r23)
10008470:	b8bfffc4 	addi	r2,r23,-1
10008474:	1007883a 	mov	r3,r2
10008478:	01800e44 	movi	r6,57
1000847c:	d9c00717 	ldw	r7,28(sp)
10008480:	00000506 	br	10008498 <_dtoa_r+0xc00>
10008484:	18ffffc4 	addi	r3,r3,-1
10008488:	11c12326 	beq	r2,r7,10008918 <_dtoa_r+0x1080>
1000848c:	19000003 	ldbu	r4,0(r3)
10008490:	102f883a 	mov	r23,r2
10008494:	10bfffc4 	addi	r2,r2,-1
10008498:	21403fcc 	andi	r5,r4,255
1000849c:	2940201c 	xori	r5,r5,128
100084a0:	297fe004 	addi	r5,r5,-128
100084a4:	29bff726 	beq	r5,r6,10008484 <__alt_data_end+0xf8008484>
100084a8:	21000044 	addi	r4,r4,1
100084ac:	11000005 	stb	r4,0(r2)
100084b0:	a80b883a 	mov	r5,r21
100084b4:	e009883a 	mov	r4,fp
100084b8:	000990c0 	call	1000990c <_Bfree>
100084bc:	883ea026 	beq	r17,zero,10007f40 <__alt_data_end+0xf8007f40>
100084c0:	90000426 	beq	r18,zero,100084d4 <_dtoa_r+0xc3c>
100084c4:	94400326 	beq	r18,r17,100084d4 <_dtoa_r+0xc3c>
100084c8:	900b883a 	mov	r5,r18
100084cc:	e009883a 	mov	r4,fp
100084d0:	000990c0 	call	1000990c <_Bfree>
100084d4:	880b883a 	mov	r5,r17
100084d8:	e009883a 	mov	r4,fp
100084dc:	000990c0 	call	1000990c <_Bfree>
100084e0:	003e9706 	br	10007f40 <__alt_data_end+0xf8007f40>
100084e4:	01800044 	movi	r6,1
100084e8:	d9800e15 	stw	r6,56(sp)
100084ec:	003d9606 	br	10007b48 <__alt_data_end+0xf8007b48>
100084f0:	d8800817 	ldw	r2,32(sp)
100084f4:	d8c00517 	ldw	r3,20(sp)
100084f8:	d8000d15 	stw	zero,52(sp)
100084fc:	10c5c83a 	sub	r2,r2,r3
10008500:	00c9c83a 	sub	r4,zero,r3
10008504:	d8800815 	stw	r2,32(sp)
10008508:	d9000a15 	stw	r4,40(sp)
1000850c:	003d9706 	br	10007b6c <__alt_data_end+0xf8007b6c>
10008510:	05adc83a 	sub	r22,zero,r22
10008514:	dd800815 	stw	r22,32(sp)
10008518:	002d883a 	mov	r22,zero
1000851c:	003d8e06 	br	10007b58 <__alt_data_end+0xf8007b58>
10008520:	d9000517 	ldw	r4,20(sp)
10008524:	000fdf40 	call	1000fdf4 <__floatsidf>
10008528:	100d883a 	mov	r6,r2
1000852c:	180f883a 	mov	r7,r3
10008530:	a009883a 	mov	r4,r20
10008534:	880b883a 	mov	r5,r17
10008538:	000e9b40 	call	1000e9b4 <__eqdf2>
1000853c:	103d7126 	beq	r2,zero,10007b04 <__alt_data_end+0xf8007b04>
10008540:	d9c00517 	ldw	r7,20(sp)
10008544:	39ffffc4 	addi	r7,r7,-1
10008548:	d9c00515 	stw	r7,20(sp)
1000854c:	003d6d06 	br	10007b04 <__alt_data_end+0xf8007b04>
10008550:	dd400a17 	ldw	r21,40(sp)
10008554:	dd000817 	ldw	r20,32(sp)
10008558:	0023883a 	mov	r17,zero
1000855c:	003f4806 	br	10008280 <__alt_data_end+0xf8008280>
10008560:	10e3c83a 	sub	r17,r2,r3
10008564:	9448983a 	sll	r4,r18,r17
10008568:	003d3206 	br	10007a34 <__alt_data_end+0xf8007a34>
1000856c:	d8000e15 	stw	zero,56(sp)
10008570:	003d7506 	br	10007b48 <__alt_data_end+0xf8007b48>
10008574:	b005883a 	mov	r2,r22
10008578:	003f4506 	br	10008290 <__alt_data_end+0xf8008290>
1000857c:	dc000915 	stw	r16,36(sp)
10008580:	d9800a17 	ldw	r6,40(sp)
10008584:	d9400917 	ldw	r5,36(sp)
10008588:	e009883a 	mov	r4,fp
1000858c:	0009f600 	call	10009f60 <__pow5mult>
10008590:	1021883a 	mov	r16,r2
10008594:	003f5a06 	br	10008300 <__alt_data_end+0xf8008300>
10008598:	01c00044 	movi	r7,1
1000859c:	d9c00b15 	stw	r7,44(sp)
100085a0:	d8802217 	ldw	r2,136(sp)
100085a4:	0081280e 	bge	zero,r2,10008a48 <_dtoa_r+0x11b0>
100085a8:	100d883a 	mov	r6,r2
100085ac:	1021883a 	mov	r16,r2
100085b0:	d8800c15 	stw	r2,48(sp)
100085b4:	d8800615 	stw	r2,24(sp)
100085b8:	003d8806 	br	10007bdc <__alt_data_end+0xf8007bdc>
100085bc:	d8800617 	ldw	r2,24(sp)
100085c0:	00be9b16 	blt	zero,r2,10008030 <__alt_data_end+0xf8008030>
100085c4:	10010f1e 	bne	r2,zero,10008a04 <_dtoa_r+0x116c>
100085c8:	880b883a 	mov	r5,r17
100085cc:	000d883a 	mov	r6,zero
100085d0:	01d00534 	movhi	r7,16404
100085d4:	8009883a 	mov	r4,r16
100085d8:	000ec0c0 	call	1000ec0c <__muldf3>
100085dc:	900d883a 	mov	r6,r18
100085e0:	980f883a 	mov	r7,r19
100085e4:	1009883a 	mov	r4,r2
100085e8:	180b883a 	mov	r5,r3
100085ec:	000ea3c0 	call	1000ea3c <__gedf2>
100085f0:	002b883a 	mov	r21,zero
100085f4:	0023883a 	mov	r17,zero
100085f8:	1000bf16 	blt	r2,zero,100088f8 <_dtoa_r+0x1060>
100085fc:	d9802217 	ldw	r6,136(sp)
10008600:	ddc00717 	ldw	r23,28(sp)
10008604:	018c303a 	nor	r6,zero,r6
10008608:	d9800515 	stw	r6,20(sp)
1000860c:	a80b883a 	mov	r5,r21
10008610:	e009883a 	mov	r4,fp
10008614:	000990c0 	call	1000990c <_Bfree>
10008618:	883e4926 	beq	r17,zero,10007f40 <__alt_data_end+0xf8007f40>
1000861c:	003fad06 	br	100084d4 <__alt_data_end+0xf80084d4>
10008620:	d9c01117 	ldw	r7,68(sp)
10008624:	3801bc26 	beq	r7,zero,10008d18 <_dtoa_r+0x1480>
10008628:	10810cc4 	addi	r2,r2,1075
1000862c:	dd400a17 	ldw	r21,40(sp)
10008630:	dd000817 	ldw	r20,32(sp)
10008634:	003f0a06 	br	10008260 <__alt_data_end+0xf8008260>
10008638:	00800704 	movi	r2,28
1000863c:	d9000817 	ldw	r4,32(sp)
10008640:	a0a9883a 	add	r20,r20,r2
10008644:	b0ad883a 	add	r22,r22,r2
10008648:	2089883a 	add	r4,r4,r2
1000864c:	d9000815 	stw	r4,32(sp)
10008650:	003f5106 	br	10008398 <__alt_data_end+0xf8008398>
10008654:	d8c00317 	ldw	r3,12(sp)
10008658:	b8c1fc0e 	bge	r23,r3,10008e4c <_dtoa_r+0x15b4>
1000865c:	0027883a 	mov	r19,zero
10008660:	b805883a 	mov	r2,r23
10008664:	003f3e06 	br	10008360 <__alt_data_end+0xf8008360>
10008668:	880b883a 	mov	r5,r17
1000866c:	e009883a 	mov	r4,fp
10008670:	000f883a 	mov	r7,zero
10008674:	01800284 	movi	r6,10
10008678:	00099340 	call	10009934 <__multadd>
1000867c:	d9000c17 	ldw	r4,48(sp)
10008680:	1023883a 	mov	r17,r2
10008684:	0102040e 	bge	zero,r4,10008e98 <_dtoa_r+0x1600>
10008688:	d9000615 	stw	r4,24(sp)
1000868c:	0500050e 	bge	zero,r20,100086a4 <_dtoa_r+0xe0c>
10008690:	880b883a 	mov	r5,r17
10008694:	a00d883a 	mov	r6,r20
10008698:	e009883a 	mov	r4,fp
1000869c:	000a0a00 	call	1000a0a0 <__lshift>
100086a0:	1023883a 	mov	r17,r2
100086a4:	9801241e 	bne	r19,zero,10008b38 <_dtoa_r+0x12a0>
100086a8:	8829883a 	mov	r20,r17
100086ac:	d9000617 	ldw	r4,24(sp)
100086b0:	dcc00717 	ldw	r19,28(sp)
100086b4:	9480004c 	andi	r18,r18,1
100086b8:	20bfffc4 	addi	r2,r4,-1
100086bc:	9885883a 	add	r2,r19,r2
100086c0:	d8800415 	stw	r2,16(sp)
100086c4:	dc800615 	stw	r18,24(sp)
100086c8:	a80b883a 	mov	r5,r21
100086cc:	8009883a 	mov	r4,r16
100086d0:	00076700 	call	10007670 <quorem>
100086d4:	880b883a 	mov	r5,r17
100086d8:	8009883a 	mov	r4,r16
100086dc:	102f883a 	mov	r23,r2
100086e0:	000a1e80 	call	1000a1e8 <__mcmp>
100086e4:	a80b883a 	mov	r5,r21
100086e8:	a00d883a 	mov	r6,r20
100086ec:	e009883a 	mov	r4,fp
100086f0:	102d883a 	mov	r22,r2
100086f4:	000a2480 	call	1000a248 <__mdiff>
100086f8:	1007883a 	mov	r3,r2
100086fc:	10800317 	ldw	r2,12(r2)
10008700:	bc800c04 	addi	r18,r23,48
10008704:	180b883a 	mov	r5,r3
10008708:	10004e1e 	bne	r2,zero,10008844 <_dtoa_r+0xfac>
1000870c:	8009883a 	mov	r4,r16
10008710:	d8c01615 	stw	r3,88(sp)
10008714:	000a1e80 	call	1000a1e8 <__mcmp>
10008718:	d8c01617 	ldw	r3,88(sp)
1000871c:	e009883a 	mov	r4,fp
10008720:	d8801615 	stw	r2,88(sp)
10008724:	180b883a 	mov	r5,r3
10008728:	000990c0 	call	1000990c <_Bfree>
1000872c:	d8801617 	ldw	r2,88(sp)
10008730:	1000041e 	bne	r2,zero,10008744 <_dtoa_r+0xeac>
10008734:	d9800317 	ldw	r6,12(sp)
10008738:	3000021e 	bne	r6,zero,10008744 <_dtoa_r+0xeac>
1000873c:	d8c00617 	ldw	r3,24(sp)
10008740:	18003726 	beq	r3,zero,10008820 <_dtoa_r+0xf88>
10008744:	b0002016 	blt	r22,zero,100087c8 <_dtoa_r+0xf30>
10008748:	b000041e 	bne	r22,zero,1000875c <_dtoa_r+0xec4>
1000874c:	d9000317 	ldw	r4,12(sp)
10008750:	2000021e 	bne	r4,zero,1000875c <_dtoa_r+0xec4>
10008754:	d8c00617 	ldw	r3,24(sp)
10008758:	18001b26 	beq	r3,zero,100087c8 <_dtoa_r+0xf30>
1000875c:	00810716 	blt	zero,r2,10008b7c <_dtoa_r+0x12e4>
10008760:	d8c00417 	ldw	r3,16(sp)
10008764:	9d800044 	addi	r22,r19,1
10008768:	9c800005 	stb	r18,0(r19)
1000876c:	b02f883a 	mov	r23,r22
10008770:	98c10626 	beq	r19,r3,10008b8c <_dtoa_r+0x12f4>
10008774:	800b883a 	mov	r5,r16
10008778:	000f883a 	mov	r7,zero
1000877c:	01800284 	movi	r6,10
10008780:	e009883a 	mov	r4,fp
10008784:	00099340 	call	10009934 <__multadd>
10008788:	1021883a 	mov	r16,r2
1000878c:	000f883a 	mov	r7,zero
10008790:	01800284 	movi	r6,10
10008794:	880b883a 	mov	r5,r17
10008798:	e009883a 	mov	r4,fp
1000879c:	8d002526 	beq	r17,r20,10008834 <_dtoa_r+0xf9c>
100087a0:	00099340 	call	10009934 <__multadd>
100087a4:	a00b883a 	mov	r5,r20
100087a8:	000f883a 	mov	r7,zero
100087ac:	01800284 	movi	r6,10
100087b0:	e009883a 	mov	r4,fp
100087b4:	1023883a 	mov	r17,r2
100087b8:	00099340 	call	10009934 <__multadd>
100087bc:	1029883a 	mov	r20,r2
100087c0:	b027883a 	mov	r19,r22
100087c4:	003fc006 	br	100086c8 <__alt_data_end+0xf80086c8>
100087c8:	9011883a 	mov	r8,r18
100087cc:	00800e0e 	bge	zero,r2,10008808 <_dtoa_r+0xf70>
100087d0:	800b883a 	mov	r5,r16
100087d4:	01800044 	movi	r6,1
100087d8:	e009883a 	mov	r4,fp
100087dc:	da001715 	stw	r8,92(sp)
100087e0:	000a0a00 	call	1000a0a0 <__lshift>
100087e4:	a80b883a 	mov	r5,r21
100087e8:	1009883a 	mov	r4,r2
100087ec:	1021883a 	mov	r16,r2
100087f0:	000a1e80 	call	1000a1e8 <__mcmp>
100087f4:	da001717 	ldw	r8,92(sp)
100087f8:	0081960e 	bge	zero,r2,10008e54 <_dtoa_r+0x15bc>
100087fc:	00800e44 	movi	r2,57
10008800:	40817026 	beq	r8,r2,10008dc4 <_dtoa_r+0x152c>
10008804:	ba000c44 	addi	r8,r23,49
10008808:	8825883a 	mov	r18,r17
1000880c:	9dc00044 	addi	r23,r19,1
10008810:	9a000005 	stb	r8,0(r19)
10008814:	a023883a 	mov	r17,r20
10008818:	dc000915 	stw	r16,36(sp)
1000881c:	003f2406 	br	100084b0 <__alt_data_end+0xf80084b0>
10008820:	00800e44 	movi	r2,57
10008824:	9011883a 	mov	r8,r18
10008828:	90816626 	beq	r18,r2,10008dc4 <_dtoa_r+0x152c>
1000882c:	05bff516 	blt	zero,r22,10008804 <__alt_data_end+0xf8008804>
10008830:	003ff506 	br	10008808 <__alt_data_end+0xf8008808>
10008834:	00099340 	call	10009934 <__multadd>
10008838:	1023883a 	mov	r17,r2
1000883c:	1029883a 	mov	r20,r2
10008840:	003fdf06 	br	100087c0 <__alt_data_end+0xf80087c0>
10008844:	e009883a 	mov	r4,fp
10008848:	000990c0 	call	1000990c <_Bfree>
1000884c:	00800044 	movi	r2,1
10008850:	003fbc06 	br	10008744 <__alt_data_end+0xf8008744>
10008854:	a80b883a 	mov	r5,r21
10008858:	8009883a 	mov	r4,r16
1000885c:	000a1e80 	call	1000a1e8 <__mcmp>
10008860:	103edb0e 	bge	r2,zero,100083d0 <__alt_data_end+0xf80083d0>
10008864:	800b883a 	mov	r5,r16
10008868:	000f883a 	mov	r7,zero
1000886c:	01800284 	movi	r6,10
10008870:	e009883a 	mov	r4,fp
10008874:	00099340 	call	10009934 <__multadd>
10008878:	1021883a 	mov	r16,r2
1000887c:	d8800517 	ldw	r2,20(sp)
10008880:	d8c00b17 	ldw	r3,44(sp)
10008884:	10bfffc4 	addi	r2,r2,-1
10008888:	d8800515 	stw	r2,20(sp)
1000888c:	183f761e 	bne	r3,zero,10008668 <__alt_data_end+0xf8008668>
10008890:	d9000c17 	ldw	r4,48(sp)
10008894:	0101730e 	bge	zero,r4,10008e64 <_dtoa_r+0x15cc>
10008898:	d9000615 	stw	r4,24(sp)
1000889c:	003ed006 	br	100083e0 <__alt_data_end+0xf80083e0>
100088a0:	00800084 	movi	r2,2
100088a4:	3081861e 	bne	r6,r2,10008ec0 <_dtoa_r+0x1628>
100088a8:	d8000b15 	stw	zero,44(sp)
100088ac:	003f3c06 	br	100085a0 <__alt_data_end+0xf80085a0>
100088b0:	dc000917 	ldw	r16,36(sp)
100088b4:	003e9206 	br	10008300 <__alt_data_end+0xf8008300>
100088b8:	d9c00317 	ldw	r7,12(sp)
100088bc:	00800084 	movi	r2,2
100088c0:	11fec50e 	bge	r2,r7,100083d8 <__alt_data_end+0xf80083d8>
100088c4:	d9000617 	ldw	r4,24(sp)
100088c8:	20013c1e 	bne	r4,zero,10008dbc <_dtoa_r+0x1524>
100088cc:	a80b883a 	mov	r5,r21
100088d0:	000f883a 	mov	r7,zero
100088d4:	01800144 	movi	r6,5
100088d8:	e009883a 	mov	r4,fp
100088dc:	00099340 	call	10009934 <__multadd>
100088e0:	100b883a 	mov	r5,r2
100088e4:	8009883a 	mov	r4,r16
100088e8:	102b883a 	mov	r21,r2
100088ec:	000a1e80 	call	1000a1e8 <__mcmp>
100088f0:	dc000915 	stw	r16,36(sp)
100088f4:	00bf410e 	bge	zero,r2,100085fc <__alt_data_end+0xf80085fc>
100088f8:	d9c00717 	ldw	r7,28(sp)
100088fc:	00800c44 	movi	r2,49
10008900:	38800005 	stb	r2,0(r7)
10008904:	d8800517 	ldw	r2,20(sp)
10008908:	3dc00044 	addi	r23,r7,1
1000890c:	10800044 	addi	r2,r2,1
10008910:	d8800515 	stw	r2,20(sp)
10008914:	003f3d06 	br	1000860c <__alt_data_end+0xf800860c>
10008918:	d9800517 	ldw	r6,20(sp)
1000891c:	d9c00717 	ldw	r7,28(sp)
10008920:	00800c44 	movi	r2,49
10008924:	31800044 	addi	r6,r6,1
10008928:	d9800515 	stw	r6,20(sp)
1000892c:	38800005 	stb	r2,0(r7)
10008930:	003edf06 	br	100084b0 <__alt_data_end+0xf80084b0>
10008934:	d8000b15 	stw	zero,44(sp)
10008938:	003c9f06 	br	10007bb8 <__alt_data_end+0xf8007bb8>
1000893c:	903e7e1e 	bne	r18,zero,10008338 <__alt_data_end+0xf8008338>
10008940:	00800434 	movhi	r2,16
10008944:	10bfffc4 	addi	r2,r2,-1
10008948:	9884703a 	and	r2,r19,r2
1000894c:	1000ea1e 	bne	r2,zero,10008cf8 <_dtoa_r+0x1460>
10008950:	9cdffc2c 	andhi	r19,r19,32752
10008954:	9800e826 	beq	r19,zero,10008cf8 <_dtoa_r+0x1460>
10008958:	d9c00817 	ldw	r7,32(sp)
1000895c:	b5800044 	addi	r22,r22,1
10008960:	04c00044 	movi	r19,1
10008964:	39c00044 	addi	r7,r7,1
10008968:	d9c00815 	stw	r7,32(sp)
1000896c:	d8800d17 	ldw	r2,52(sp)
10008970:	103e721e 	bne	r2,zero,1000833c <__alt_data_end+0xf800833c>
10008974:	00800044 	movi	r2,1
10008978:	003e7906 	br	10008360 <__alt_data_end+0xf8008360>
1000897c:	8009883a 	mov	r4,r16
10008980:	000fdf40 	call	1000fdf4 <__floatsidf>
10008984:	d9800f17 	ldw	r6,60(sp)
10008988:	d9c01017 	ldw	r7,64(sp)
1000898c:	1009883a 	mov	r4,r2
10008990:	180b883a 	mov	r5,r3
10008994:	000ec0c0 	call	1000ec0c <__muldf3>
10008998:	000d883a 	mov	r6,zero
1000899c:	01d00734 	movhi	r7,16412
100089a0:	1009883a 	mov	r4,r2
100089a4:	180b883a 	mov	r5,r3
100089a8:	000d7380 	call	1000d738 <__adddf3>
100089ac:	047f3034 	movhi	r17,64704
100089b0:	1021883a 	mov	r16,r2
100089b4:	1c63883a 	add	r17,r3,r17
100089b8:	d9000f17 	ldw	r4,60(sp)
100089bc:	d9401017 	ldw	r5,64(sp)
100089c0:	000d883a 	mov	r6,zero
100089c4:	01d00534 	movhi	r7,16404
100089c8:	000f4780 	call	1000f478 <__subdf3>
100089cc:	800d883a 	mov	r6,r16
100089d0:	880f883a 	mov	r7,r17
100089d4:	1009883a 	mov	r4,r2
100089d8:	180b883a 	mov	r5,r3
100089dc:	102b883a 	mov	r21,r2
100089e0:	1829883a 	mov	r20,r3
100089e4:	000ea3c0 	call	1000ea3c <__gedf2>
100089e8:	00806c16 	blt	zero,r2,10008b9c <_dtoa_r+0x1304>
100089ec:	89e0003c 	xorhi	r7,r17,32768
100089f0:	800d883a 	mov	r6,r16
100089f4:	a809883a 	mov	r4,r21
100089f8:	a00b883a 	mov	r5,r20
100089fc:	000eb180 	call	1000eb18 <__ledf2>
10008a00:	103d7e0e 	bge	r2,zero,10007ffc <__alt_data_end+0xf8007ffc>
10008a04:	002b883a 	mov	r21,zero
10008a08:	0023883a 	mov	r17,zero
10008a0c:	003efb06 	br	100085fc <__alt_data_end+0xf80085fc>
10008a10:	d8800717 	ldw	r2,28(sp)
10008a14:	003bd006 	br	10007958 <__alt_data_end+0xf8007958>
10008a18:	d9000a17 	ldw	r4,40(sp)
10008a1c:	d9800d17 	ldw	r6,52(sp)
10008a20:	dd400a15 	stw	r21,40(sp)
10008a24:	a905c83a 	sub	r2,r21,r4
10008a28:	308d883a 	add	r6,r6,r2
10008a2c:	d9800d15 	stw	r6,52(sp)
10008a30:	002b883a 	mov	r21,zero
10008a34:	003e0606 	br	10008250 <__alt_data_end+0xf8008250>
10008a38:	9023883a 	mov	r17,r18
10008a3c:	9829883a 	mov	r20,r19
10008a40:	04000084 	movi	r16,2
10008a44:	003c9206 	br	10007c90 <__alt_data_end+0xf8007c90>
10008a48:	04000044 	movi	r16,1
10008a4c:	dc000c15 	stw	r16,48(sp)
10008a50:	dc000615 	stw	r16,24(sp)
10008a54:	dc002215 	stw	r16,136(sp)
10008a58:	e0001115 	stw	zero,68(fp)
10008a5c:	000b883a 	mov	r5,zero
10008a60:	003c6906 	br	10007c08 <__alt_data_end+0xf8007c08>
10008a64:	3021883a 	mov	r16,r6
10008a68:	003ffb06 	br	10008a58 <__alt_data_end+0xf8008a58>
10008a6c:	1000021e 	bne	r2,zero,10008a78 <_dtoa_r+0x11e0>
10008a70:	4200004c 	andi	r8,r8,1
10008a74:	403e7d1e 	bne	r8,zero,1000846c <__alt_data_end+0xf800846c>
10008a78:	01000c04 	movi	r4,48
10008a7c:	00000106 	br	10008a84 <_dtoa_r+0x11ec>
10008a80:	102f883a 	mov	r23,r2
10008a84:	b8bfffc4 	addi	r2,r23,-1
10008a88:	10c00007 	ldb	r3,0(r2)
10008a8c:	193ffc26 	beq	r3,r4,10008a80 <__alt_data_end+0xf8008a80>
10008a90:	003e8706 	br	100084b0 <__alt_data_end+0xf80084b0>
10008a94:	d8800517 	ldw	r2,20(sp)
10008a98:	00a3c83a 	sub	r17,zero,r2
10008a9c:	8800a426 	beq	r17,zero,10008d30 <_dtoa_r+0x1498>
10008aa0:	888003cc 	andi	r2,r17,15
10008aa4:	100490fa 	slli	r2,r2,3
10008aa8:	00c40074 	movhi	r3,4097
10008aac:	18cb6e04 	addi	r3,r3,11704
10008ab0:	1885883a 	add	r2,r3,r2
10008ab4:	11800017 	ldw	r6,0(r2)
10008ab8:	11c00117 	ldw	r7,4(r2)
10008abc:	9009883a 	mov	r4,r18
10008ac0:	980b883a 	mov	r5,r19
10008ac4:	8823d13a 	srai	r17,r17,4
10008ac8:	000ec0c0 	call	1000ec0c <__muldf3>
10008acc:	d8800f15 	stw	r2,60(sp)
10008ad0:	d8c01015 	stw	r3,64(sp)
10008ad4:	8800e826 	beq	r17,zero,10008e78 <_dtoa_r+0x15e0>
10008ad8:	05040074 	movhi	r20,4097
10008adc:	a50b6404 	addi	r20,r20,11664
10008ae0:	04000084 	movi	r16,2
10008ae4:	8980004c 	andi	r6,r17,1
10008ae8:	1009883a 	mov	r4,r2
10008aec:	8823d07a 	srai	r17,r17,1
10008af0:	180b883a 	mov	r5,r3
10008af4:	30000426 	beq	r6,zero,10008b08 <_dtoa_r+0x1270>
10008af8:	a1800017 	ldw	r6,0(r20)
10008afc:	a1c00117 	ldw	r7,4(r20)
10008b00:	84000044 	addi	r16,r16,1
10008b04:	000ec0c0 	call	1000ec0c <__muldf3>
10008b08:	a5000204 	addi	r20,r20,8
10008b0c:	883ff51e 	bne	r17,zero,10008ae4 <__alt_data_end+0xf8008ae4>
10008b10:	d8800f15 	stw	r2,60(sp)
10008b14:	d8c01015 	stw	r3,64(sp)
10008b18:	003c7606 	br	10007cf4 <__alt_data_end+0xf8007cf4>
10008b1c:	00c00c04 	movi	r3,48
10008b20:	10c00005 	stb	r3,0(r2)
10008b24:	d8c00517 	ldw	r3,20(sp)
10008b28:	bd3fffc3 	ldbu	r20,-1(r23)
10008b2c:	18c00044 	addi	r3,r3,1
10008b30:	d8c00515 	stw	r3,20(sp)
10008b34:	003db906 	br	1000821c <__alt_data_end+0xf800821c>
10008b38:	89400117 	ldw	r5,4(r17)
10008b3c:	e009883a 	mov	r4,fp
10008b40:	00098640 	call	10009864 <_Balloc>
10008b44:	89800417 	ldw	r6,16(r17)
10008b48:	89400304 	addi	r5,r17,12
10008b4c:	11000304 	addi	r4,r2,12
10008b50:	31800084 	addi	r6,r6,2
10008b54:	318d883a 	add	r6,r6,r6
10008b58:	318d883a 	add	r6,r6,r6
10008b5c:	1027883a 	mov	r19,r2
10008b60:	00041400 	call	10004140 <memcpy>
10008b64:	01800044 	movi	r6,1
10008b68:	980b883a 	mov	r5,r19
10008b6c:	e009883a 	mov	r4,fp
10008b70:	000a0a00 	call	1000a0a0 <__lshift>
10008b74:	1029883a 	mov	r20,r2
10008b78:	003ecc06 	br	100086ac <__alt_data_end+0xf80086ac>
10008b7c:	00800e44 	movi	r2,57
10008b80:	90809026 	beq	r18,r2,10008dc4 <_dtoa_r+0x152c>
10008b84:	92000044 	addi	r8,r18,1
10008b88:	003f1f06 	br	10008808 <__alt_data_end+0xf8008808>
10008b8c:	9011883a 	mov	r8,r18
10008b90:	8825883a 	mov	r18,r17
10008b94:	a023883a 	mov	r17,r20
10008b98:	003e2906 	br	10008440 <__alt_data_end+0xf8008440>
10008b9c:	002b883a 	mov	r21,zero
10008ba0:	0023883a 	mov	r17,zero
10008ba4:	003f5406 	br	100088f8 <__alt_data_end+0xf80088f8>
10008ba8:	61bfffc4 	addi	r6,r12,-1
10008bac:	300490fa 	slli	r2,r6,3
10008bb0:	00c40074 	movhi	r3,4097
10008bb4:	18cb6e04 	addi	r3,r3,11704
10008bb8:	1885883a 	add	r2,r3,r2
10008bbc:	11000017 	ldw	r4,0(r2)
10008bc0:	11400117 	ldw	r5,4(r2)
10008bc4:	d8800717 	ldw	r2,28(sp)
10008bc8:	880f883a 	mov	r7,r17
10008bcc:	d9801215 	stw	r6,72(sp)
10008bd0:	800d883a 	mov	r6,r16
10008bd4:	db001615 	stw	r12,88(sp)
10008bd8:	15c00044 	addi	r23,r2,1
10008bdc:	000ec0c0 	call	1000ec0c <__muldf3>
10008be0:	d9401017 	ldw	r5,64(sp)
10008be4:	d9000f17 	ldw	r4,60(sp)
10008be8:	d8c01515 	stw	r3,84(sp)
10008bec:	d8801415 	stw	r2,80(sp)
10008bf0:	000fd740 	call	1000fd74 <__fixdfsi>
10008bf4:	1009883a 	mov	r4,r2
10008bf8:	1021883a 	mov	r16,r2
10008bfc:	000fdf40 	call	1000fdf4 <__floatsidf>
10008c00:	d9000f17 	ldw	r4,60(sp)
10008c04:	d9401017 	ldw	r5,64(sp)
10008c08:	100d883a 	mov	r6,r2
10008c0c:	180f883a 	mov	r7,r3
10008c10:	000f4780 	call	1000f478 <__subdf3>
10008c14:	1829883a 	mov	r20,r3
10008c18:	d8c00717 	ldw	r3,28(sp)
10008c1c:	84000c04 	addi	r16,r16,48
10008c20:	1023883a 	mov	r17,r2
10008c24:	1c000005 	stb	r16,0(r3)
10008c28:	db001617 	ldw	r12,88(sp)
10008c2c:	00800044 	movi	r2,1
10008c30:	60802226 	beq	r12,r2,10008cbc <_dtoa_r+0x1424>
10008c34:	d9c00717 	ldw	r7,28(sp)
10008c38:	8805883a 	mov	r2,r17
10008c3c:	b82b883a 	mov	r21,r23
10008c40:	3b19883a 	add	r12,r7,r12
10008c44:	6023883a 	mov	r17,r12
10008c48:	a007883a 	mov	r3,r20
10008c4c:	dc800f15 	stw	r18,60(sp)
10008c50:	000d883a 	mov	r6,zero
10008c54:	01d00934 	movhi	r7,16420
10008c58:	1009883a 	mov	r4,r2
10008c5c:	180b883a 	mov	r5,r3
10008c60:	000ec0c0 	call	1000ec0c <__muldf3>
10008c64:	180b883a 	mov	r5,r3
10008c68:	1009883a 	mov	r4,r2
10008c6c:	1829883a 	mov	r20,r3
10008c70:	1025883a 	mov	r18,r2
10008c74:	000fd740 	call	1000fd74 <__fixdfsi>
10008c78:	1009883a 	mov	r4,r2
10008c7c:	1021883a 	mov	r16,r2
10008c80:	000fdf40 	call	1000fdf4 <__floatsidf>
10008c84:	100d883a 	mov	r6,r2
10008c88:	180f883a 	mov	r7,r3
10008c8c:	9009883a 	mov	r4,r18
10008c90:	a00b883a 	mov	r5,r20
10008c94:	84000c04 	addi	r16,r16,48
10008c98:	000f4780 	call	1000f478 <__subdf3>
10008c9c:	ad400044 	addi	r21,r21,1
10008ca0:	ac3fffc5 	stb	r16,-1(r21)
10008ca4:	ac7fea1e 	bne	r21,r17,10008c50 <__alt_data_end+0xf8008c50>
10008ca8:	1023883a 	mov	r17,r2
10008cac:	d8801217 	ldw	r2,72(sp)
10008cb0:	dc800f17 	ldw	r18,60(sp)
10008cb4:	1829883a 	mov	r20,r3
10008cb8:	b8af883a 	add	r23,r23,r2
10008cbc:	d9001417 	ldw	r4,80(sp)
10008cc0:	d9401517 	ldw	r5,84(sp)
10008cc4:	000d883a 	mov	r6,zero
10008cc8:	01cff834 	movhi	r7,16352
10008ccc:	000d7380 	call	1000d738 <__adddf3>
10008cd0:	880d883a 	mov	r6,r17
10008cd4:	a00f883a 	mov	r7,r20
10008cd8:	1009883a 	mov	r4,r2
10008cdc:	180b883a 	mov	r5,r3
10008ce0:	000eb180 	call	1000eb18 <__ledf2>
10008ce4:	10003e0e 	bge	r2,zero,10008de0 <_dtoa_r+0x1548>
10008ce8:	d9001317 	ldw	r4,76(sp)
10008cec:	bd3fffc3 	ldbu	r20,-1(r23)
10008cf0:	d9000515 	stw	r4,20(sp)
10008cf4:	003d3b06 	br	100081e4 <__alt_data_end+0xf80081e4>
10008cf8:	0027883a 	mov	r19,zero
10008cfc:	003f1b06 	br	1000896c <__alt_data_end+0xf800896c>
10008d00:	d8800817 	ldw	r2,32(sp)
10008d04:	11e9c83a 	sub	r20,r2,r7
10008d08:	0005883a 	mov	r2,zero
10008d0c:	003d5406 	br	10008260 <__alt_data_end+0xf8008260>
10008d10:	00800044 	movi	r2,1
10008d14:	003dc706 	br	10008434 <__alt_data_end+0xf8008434>
10008d18:	d8c00217 	ldw	r3,8(sp)
10008d1c:	00800d84 	movi	r2,54
10008d20:	dd400a17 	ldw	r21,40(sp)
10008d24:	10c5c83a 	sub	r2,r2,r3
10008d28:	dd000817 	ldw	r20,32(sp)
10008d2c:	003d4c06 	br	10008260 <__alt_data_end+0xf8008260>
10008d30:	dc800f15 	stw	r18,60(sp)
10008d34:	dcc01015 	stw	r19,64(sp)
10008d38:	04000084 	movi	r16,2
10008d3c:	003bed06 	br	10007cf4 <__alt_data_end+0xf8007cf4>
10008d40:	d9000617 	ldw	r4,24(sp)
10008d44:	203f0d26 	beq	r4,zero,1000897c <__alt_data_end+0xf800897c>
10008d48:	d9800c17 	ldw	r6,48(sp)
10008d4c:	01bcab0e 	bge	zero,r6,10007ffc <__alt_data_end+0xf8007ffc>
10008d50:	d9401017 	ldw	r5,64(sp)
10008d54:	d9000f17 	ldw	r4,60(sp)
10008d58:	000d883a 	mov	r6,zero
10008d5c:	01d00934 	movhi	r7,16420
10008d60:	000ec0c0 	call	1000ec0c <__muldf3>
10008d64:	81000044 	addi	r4,r16,1
10008d68:	d8800f15 	stw	r2,60(sp)
10008d6c:	d8c01015 	stw	r3,64(sp)
10008d70:	000fdf40 	call	1000fdf4 <__floatsidf>
10008d74:	d9800f17 	ldw	r6,60(sp)
10008d78:	d9c01017 	ldw	r7,64(sp)
10008d7c:	1009883a 	mov	r4,r2
10008d80:	180b883a 	mov	r5,r3
10008d84:	000ec0c0 	call	1000ec0c <__muldf3>
10008d88:	01d00734 	movhi	r7,16412
10008d8c:	000d883a 	mov	r6,zero
10008d90:	1009883a 	mov	r4,r2
10008d94:	180b883a 	mov	r5,r3
10008d98:	000d7380 	call	1000d738 <__adddf3>
10008d9c:	d9c00517 	ldw	r7,20(sp)
10008da0:	047f3034 	movhi	r17,64704
10008da4:	1021883a 	mov	r16,r2
10008da8:	39ffffc4 	addi	r7,r7,-1
10008dac:	d9c01315 	stw	r7,76(sp)
10008db0:	1c63883a 	add	r17,r3,r17
10008db4:	db000c17 	ldw	r12,48(sp)
10008db8:	003bea06 	br	10007d64 <__alt_data_end+0xf8007d64>
10008dbc:	dc000915 	stw	r16,36(sp)
10008dc0:	003e0e06 	br	100085fc <__alt_data_end+0xf80085fc>
10008dc4:	01000e44 	movi	r4,57
10008dc8:	8825883a 	mov	r18,r17
10008dcc:	9dc00044 	addi	r23,r19,1
10008dd0:	99000005 	stb	r4,0(r19)
10008dd4:	a023883a 	mov	r17,r20
10008dd8:	dc000915 	stw	r16,36(sp)
10008ddc:	003da406 	br	10008470 <__alt_data_end+0xf8008470>
10008de0:	d9801417 	ldw	r6,80(sp)
10008de4:	d9c01517 	ldw	r7,84(sp)
10008de8:	0009883a 	mov	r4,zero
10008dec:	014ff834 	movhi	r5,16352
10008df0:	000f4780 	call	1000f478 <__subdf3>
10008df4:	880d883a 	mov	r6,r17
10008df8:	a00f883a 	mov	r7,r20
10008dfc:	1009883a 	mov	r4,r2
10008e00:	180b883a 	mov	r5,r3
10008e04:	000ea3c0 	call	1000ea3c <__gedf2>
10008e08:	00bc7c0e 	bge	zero,r2,10007ffc <__alt_data_end+0xf8007ffc>
10008e0c:	01000c04 	movi	r4,48
10008e10:	00000106 	br	10008e18 <_dtoa_r+0x1580>
10008e14:	102f883a 	mov	r23,r2
10008e18:	b8bfffc4 	addi	r2,r23,-1
10008e1c:	10c00007 	ldb	r3,0(r2)
10008e20:	193ffc26 	beq	r3,r4,10008e14 <__alt_data_end+0xf8008e14>
10008e24:	d9801317 	ldw	r6,76(sp)
10008e28:	d9800515 	stw	r6,20(sp)
10008e2c:	003c4406 	br	10007f40 <__alt_data_end+0xf8007f40>
10008e30:	d9801317 	ldw	r6,76(sp)
10008e34:	d9800515 	stw	r6,20(sp)
10008e38:	003cea06 	br	100081e4 <__alt_data_end+0xf80081e4>
10008e3c:	dd800f17 	ldw	r22,60(sp)
10008e40:	dcc01017 	ldw	r19,64(sp)
10008e44:	dc801217 	ldw	r18,72(sp)
10008e48:	003c6c06 	br	10007ffc <__alt_data_end+0xf8007ffc>
10008e4c:	903e031e 	bne	r18,zero,1000865c <__alt_data_end+0xf800865c>
10008e50:	003ebb06 	br	10008940 <__alt_data_end+0xf8008940>
10008e54:	103e6c1e 	bne	r2,zero,10008808 <__alt_data_end+0xf8008808>
10008e58:	4080004c 	andi	r2,r8,1
10008e5c:	103e6a26 	beq	r2,zero,10008808 <__alt_data_end+0xf8008808>
10008e60:	003e6606 	br	100087fc <__alt_data_end+0xf80087fc>
10008e64:	d8c00317 	ldw	r3,12(sp)
10008e68:	00800084 	movi	r2,2
10008e6c:	10c02916 	blt	r2,r3,10008f14 <_dtoa_r+0x167c>
10008e70:	d9000c17 	ldw	r4,48(sp)
10008e74:	003e8806 	br	10008898 <__alt_data_end+0xf8008898>
10008e78:	04000084 	movi	r16,2
10008e7c:	003b9d06 	br	10007cf4 <__alt_data_end+0xf8007cf4>
10008e80:	d9001317 	ldw	r4,76(sp)
10008e84:	d9000515 	stw	r4,20(sp)
10008e88:	003cd606 	br	100081e4 <__alt_data_end+0xf80081e4>
10008e8c:	d8801317 	ldw	r2,76(sp)
10008e90:	d8800515 	stw	r2,20(sp)
10008e94:	003c2a06 	br	10007f40 <__alt_data_end+0xf8007f40>
10008e98:	d9800317 	ldw	r6,12(sp)
10008e9c:	00800084 	movi	r2,2
10008ea0:	11801516 	blt	r2,r6,10008ef8 <_dtoa_r+0x1660>
10008ea4:	d9c00c17 	ldw	r7,48(sp)
10008ea8:	d9c00615 	stw	r7,24(sp)
10008eac:	003df706 	br	1000868c <__alt_data_end+0xf800868c>
10008eb0:	193d3926 	beq	r3,r4,10008398 <__alt_data_end+0xf8008398>
10008eb4:	00c00f04 	movi	r3,60
10008eb8:	1885c83a 	sub	r2,r3,r2
10008ebc:	003ddf06 	br	1000863c <__alt_data_end+0xf800863c>
10008ec0:	e009883a 	mov	r4,fp
10008ec4:	e0001115 	stw	zero,68(fp)
10008ec8:	000b883a 	mov	r5,zero
10008ecc:	00098640 	call	10009864 <_Balloc>
10008ed0:	d8800715 	stw	r2,28(sp)
10008ed4:	d8c00717 	ldw	r3,28(sp)
10008ed8:	00bfffc4 	movi	r2,-1
10008edc:	01000044 	movi	r4,1
10008ee0:	d8800c15 	stw	r2,48(sp)
10008ee4:	e0c01015 	stw	r3,64(fp)
10008ee8:	d9000b15 	stw	r4,44(sp)
10008eec:	d8800615 	stw	r2,24(sp)
10008ef0:	d8002215 	stw	zero,136(sp)
10008ef4:	003c4106 	br	10007ffc <__alt_data_end+0xf8007ffc>
10008ef8:	d8c00c17 	ldw	r3,48(sp)
10008efc:	d8c00615 	stw	r3,24(sp)
10008f00:	003e7006 	br	100088c4 <__alt_data_end+0xf80088c4>
10008f04:	04400044 	movi	r17,1
10008f08:	003b2006 	br	10007b8c <__alt_data_end+0xf8007b8c>
10008f0c:	000b883a 	mov	r5,zero
10008f10:	003b3d06 	br	10007c08 <__alt_data_end+0xf8007c08>
10008f14:	d8800c17 	ldw	r2,48(sp)
10008f18:	d8800615 	stw	r2,24(sp)
10008f1c:	003e6906 	br	100088c4 <__alt_data_end+0xf80088c4>

10008f20 <__sflags>:
10008f20:	28800007 	ldb	r2,0(r5)
10008f24:	00c01c84 	movi	r3,114
10008f28:	10c02426 	beq	r2,r3,10008fbc <__sflags+0x9c>
10008f2c:	00c01dc4 	movi	r3,119
10008f30:	10c01e26 	beq	r2,r3,10008fac <__sflags+0x8c>
10008f34:	00c01844 	movi	r3,97
10008f38:	10c00426 	beq	r2,r3,10008f4c <__sflags+0x2c>
10008f3c:	00800584 	movi	r2,22
10008f40:	20800015 	stw	r2,0(r4)
10008f44:	0005883a 	mov	r2,zero
10008f48:	f800283a 	ret
10008f4c:	02c08204 	movi	r11,520
10008f50:	01000044 	movi	r4,1
10008f54:	00804204 	movi	r2,264
10008f58:	01c00ac4 	movi	r7,43
10008f5c:	02bff8c4 	movi	r10,-29
10008f60:	027fff04 	movi	r9,-4
10008f64:	02001e04 	movi	r8,120
10008f68:	29400044 	addi	r5,r5,1
10008f6c:	28c00007 	ldb	r3,0(r5)
10008f70:	18000626 	beq	r3,zero,10008f8c <__sflags+0x6c>
10008f74:	19c00826 	beq	r3,r7,10008f98 <__sflags+0x78>
10008f78:	1a3ffb1e 	bne	r3,r8,10008f68 <__alt_data_end+0xf8008f68>
10008f7c:	29400044 	addi	r5,r5,1
10008f80:	28c00007 	ldb	r3,0(r5)
10008f84:	21020014 	ori	r4,r4,2048
10008f88:	183ffa1e 	bne	r3,zero,10008f74 <__alt_data_end+0xf8008f74>
10008f8c:	22c8b03a 	or	r4,r4,r11
10008f90:	31000015 	stw	r4,0(r6)
10008f94:	f800283a 	ret
10008f98:	1284703a 	and	r2,r2,r10
10008f9c:	2248703a 	and	r4,r4,r9
10008fa0:	10800414 	ori	r2,r2,16
10008fa4:	21000094 	ori	r4,r4,2
10008fa8:	003fef06 	br	10008f68 <__alt_data_end+0xf8008f68>
10008fac:	02c18004 	movi	r11,1536
10008fb0:	01000044 	movi	r4,1
10008fb4:	00800204 	movi	r2,8
10008fb8:	003fe706 	br	10008f58 <__alt_data_end+0xf8008f58>
10008fbc:	0017883a 	mov	r11,zero
10008fc0:	0009883a 	mov	r4,zero
10008fc4:	00800104 	movi	r2,4
10008fc8:	003fe306 	br	10008f58 <__alt_data_end+0xf8008f58>

10008fcc <__sfvwrite_r>:
10008fcc:	30800217 	ldw	r2,8(r6)
10008fd0:	10006726 	beq	r2,zero,10009170 <__sfvwrite_r+0x1a4>
10008fd4:	28c0030b 	ldhu	r3,12(r5)
10008fd8:	defff404 	addi	sp,sp,-48
10008fdc:	dd400715 	stw	r21,28(sp)
10008fe0:	dd000615 	stw	r20,24(sp)
10008fe4:	dc000215 	stw	r16,8(sp)
10008fe8:	dfc00b15 	stw	ra,44(sp)
10008fec:	df000a15 	stw	fp,40(sp)
10008ff0:	ddc00915 	stw	r23,36(sp)
10008ff4:	dd800815 	stw	r22,32(sp)
10008ff8:	dcc00515 	stw	r19,20(sp)
10008ffc:	dc800415 	stw	r18,16(sp)
10009000:	dc400315 	stw	r17,12(sp)
10009004:	1880020c 	andi	r2,r3,8
10009008:	2821883a 	mov	r16,r5
1000900c:	202b883a 	mov	r21,r4
10009010:	3029883a 	mov	r20,r6
10009014:	10002726 	beq	r2,zero,100090b4 <__sfvwrite_r+0xe8>
10009018:	28800417 	ldw	r2,16(r5)
1000901c:	10002526 	beq	r2,zero,100090b4 <__sfvwrite_r+0xe8>
10009020:	1880008c 	andi	r2,r3,2
10009024:	a4400017 	ldw	r17,0(r20)
10009028:	10002a26 	beq	r2,zero,100090d4 <__sfvwrite_r+0x108>
1000902c:	05a00034 	movhi	r22,32768
10009030:	0027883a 	mov	r19,zero
10009034:	0025883a 	mov	r18,zero
10009038:	b5bf0004 	addi	r22,r22,-1024
1000903c:	980d883a 	mov	r6,r19
10009040:	a809883a 	mov	r4,r21
10009044:	90004626 	beq	r18,zero,10009160 <__sfvwrite_r+0x194>
10009048:	900f883a 	mov	r7,r18
1000904c:	b480022e 	bgeu	r22,r18,10009058 <__sfvwrite_r+0x8c>
10009050:	01e00034 	movhi	r7,32768
10009054:	39ff0004 	addi	r7,r7,-1024
10009058:	80800917 	ldw	r2,36(r16)
1000905c:	81400717 	ldw	r5,28(r16)
10009060:	103ee83a 	callr	r2
10009064:	00805a0e 	bge	zero,r2,100091d0 <__sfvwrite_r+0x204>
10009068:	a0c00217 	ldw	r3,8(r20)
1000906c:	98a7883a 	add	r19,r19,r2
10009070:	90a5c83a 	sub	r18,r18,r2
10009074:	1885c83a 	sub	r2,r3,r2
10009078:	a0800215 	stw	r2,8(r20)
1000907c:	103fef1e 	bne	r2,zero,1000903c <__alt_data_end+0xf800903c>
10009080:	0005883a 	mov	r2,zero
10009084:	dfc00b17 	ldw	ra,44(sp)
10009088:	df000a17 	ldw	fp,40(sp)
1000908c:	ddc00917 	ldw	r23,36(sp)
10009090:	dd800817 	ldw	r22,32(sp)
10009094:	dd400717 	ldw	r21,28(sp)
10009098:	dd000617 	ldw	r20,24(sp)
1000909c:	dcc00517 	ldw	r19,20(sp)
100090a0:	dc800417 	ldw	r18,16(sp)
100090a4:	dc400317 	ldw	r17,12(sp)
100090a8:	dc000217 	ldw	r16,8(sp)
100090ac:	dec00c04 	addi	sp,sp,48
100090b0:	f800283a 	ret
100090b4:	800b883a 	mov	r5,r16
100090b8:	a809883a 	mov	r4,r21
100090bc:	00073300 	call	10007330 <__swsetup_r>
100090c0:	1000ee1e 	bne	r2,zero,1000947c <__sfvwrite_r+0x4b0>
100090c4:	80c0030b 	ldhu	r3,12(r16)
100090c8:	a4400017 	ldw	r17,0(r20)
100090cc:	1880008c 	andi	r2,r3,2
100090d0:	103fd61e 	bne	r2,zero,1000902c <__alt_data_end+0xf800902c>
100090d4:	1880004c 	andi	r2,r3,1
100090d8:	1000421e 	bne	r2,zero,100091e4 <__sfvwrite_r+0x218>
100090dc:	0039883a 	mov	fp,zero
100090e0:	0025883a 	mov	r18,zero
100090e4:	90001a26 	beq	r18,zero,10009150 <__sfvwrite_r+0x184>
100090e8:	1880800c 	andi	r2,r3,512
100090ec:	84c00217 	ldw	r19,8(r16)
100090f0:	10002126 	beq	r2,zero,10009178 <__sfvwrite_r+0x1ac>
100090f4:	982f883a 	mov	r23,r19
100090f8:	94c09636 	bltu	r18,r19,10009354 <__sfvwrite_r+0x388>
100090fc:	1881200c 	andi	r2,r3,1152
10009100:	1000a11e 	bne	r2,zero,10009388 <__sfvwrite_r+0x3bc>
10009104:	81000017 	ldw	r4,0(r16)
10009108:	b80d883a 	mov	r6,r23
1000910c:	e00b883a 	mov	r5,fp
10009110:	00097080 	call	10009708 <memmove>
10009114:	80c00217 	ldw	r3,8(r16)
10009118:	81000017 	ldw	r4,0(r16)
1000911c:	9005883a 	mov	r2,r18
10009120:	1ce7c83a 	sub	r19,r3,r19
10009124:	25cf883a 	add	r7,r4,r23
10009128:	84c00215 	stw	r19,8(r16)
1000912c:	81c00015 	stw	r7,0(r16)
10009130:	a0c00217 	ldw	r3,8(r20)
10009134:	e0b9883a 	add	fp,fp,r2
10009138:	90a5c83a 	sub	r18,r18,r2
1000913c:	18a7c83a 	sub	r19,r3,r2
10009140:	a4c00215 	stw	r19,8(r20)
10009144:	983fce26 	beq	r19,zero,10009080 <__alt_data_end+0xf8009080>
10009148:	80c0030b 	ldhu	r3,12(r16)
1000914c:	903fe61e 	bne	r18,zero,100090e8 <__alt_data_end+0xf80090e8>
10009150:	8f000017 	ldw	fp,0(r17)
10009154:	8c800117 	ldw	r18,4(r17)
10009158:	8c400204 	addi	r17,r17,8
1000915c:	003fe106 	br	100090e4 <__alt_data_end+0xf80090e4>
10009160:	8cc00017 	ldw	r19,0(r17)
10009164:	8c800117 	ldw	r18,4(r17)
10009168:	8c400204 	addi	r17,r17,8
1000916c:	003fb306 	br	1000903c <__alt_data_end+0xf800903c>
10009170:	0005883a 	mov	r2,zero
10009174:	f800283a 	ret
10009178:	81000017 	ldw	r4,0(r16)
1000917c:	80800417 	ldw	r2,16(r16)
10009180:	11005a36 	bltu	r2,r4,100092ec <__sfvwrite_r+0x320>
10009184:	85c00517 	ldw	r23,20(r16)
10009188:	95c05836 	bltu	r18,r23,100092ec <__sfvwrite_r+0x320>
1000918c:	00a00034 	movhi	r2,32768
10009190:	10bfffc4 	addi	r2,r2,-1
10009194:	9009883a 	mov	r4,r18
10009198:	1480012e 	bgeu	r2,r18,100091a0 <__sfvwrite_r+0x1d4>
1000919c:	1009883a 	mov	r4,r2
100091a0:	b80b883a 	mov	r5,r23
100091a4:	0001b8c0 	call	10001b8c <__divsi3>
100091a8:	b80b883a 	mov	r5,r23
100091ac:	1009883a 	mov	r4,r2
100091b0:	0001d400 	call	10001d40 <__mulsi3>
100091b4:	81400717 	ldw	r5,28(r16)
100091b8:	80c00917 	ldw	r3,36(r16)
100091bc:	100f883a 	mov	r7,r2
100091c0:	e00d883a 	mov	r6,fp
100091c4:	a809883a 	mov	r4,r21
100091c8:	183ee83a 	callr	r3
100091cc:	00bfd816 	blt	zero,r2,10009130 <__alt_data_end+0xf8009130>
100091d0:	8080030b 	ldhu	r2,12(r16)
100091d4:	10801014 	ori	r2,r2,64
100091d8:	8080030d 	sth	r2,12(r16)
100091dc:	00bfffc4 	movi	r2,-1
100091e0:	003fa806 	br	10009084 <__alt_data_end+0xf8009084>
100091e4:	0027883a 	mov	r19,zero
100091e8:	0011883a 	mov	r8,zero
100091ec:	0039883a 	mov	fp,zero
100091f0:	0025883a 	mov	r18,zero
100091f4:	90001f26 	beq	r18,zero,10009274 <__sfvwrite_r+0x2a8>
100091f8:	40005a26 	beq	r8,zero,10009364 <__sfvwrite_r+0x398>
100091fc:	982d883a 	mov	r22,r19
10009200:	94c0012e 	bgeu	r18,r19,10009208 <__sfvwrite_r+0x23c>
10009204:	902d883a 	mov	r22,r18
10009208:	81000017 	ldw	r4,0(r16)
1000920c:	80800417 	ldw	r2,16(r16)
10009210:	b02f883a 	mov	r23,r22
10009214:	81c00517 	ldw	r7,20(r16)
10009218:	1100032e 	bgeu	r2,r4,10009228 <__sfvwrite_r+0x25c>
1000921c:	80c00217 	ldw	r3,8(r16)
10009220:	38c7883a 	add	r3,r7,r3
10009224:	1d801816 	blt	r3,r22,10009288 <__sfvwrite_r+0x2bc>
10009228:	b1c03e16 	blt	r22,r7,10009324 <__sfvwrite_r+0x358>
1000922c:	80800917 	ldw	r2,36(r16)
10009230:	81400717 	ldw	r5,28(r16)
10009234:	e00d883a 	mov	r6,fp
10009238:	da000115 	stw	r8,4(sp)
1000923c:	a809883a 	mov	r4,r21
10009240:	103ee83a 	callr	r2
10009244:	102f883a 	mov	r23,r2
10009248:	da000117 	ldw	r8,4(sp)
1000924c:	00bfe00e 	bge	zero,r2,100091d0 <__alt_data_end+0xf80091d0>
10009250:	9de7c83a 	sub	r19,r19,r23
10009254:	98001f26 	beq	r19,zero,100092d4 <__sfvwrite_r+0x308>
10009258:	a0800217 	ldw	r2,8(r20)
1000925c:	e5f9883a 	add	fp,fp,r23
10009260:	95e5c83a 	sub	r18,r18,r23
10009264:	15efc83a 	sub	r23,r2,r23
10009268:	a5c00215 	stw	r23,8(r20)
1000926c:	b83f8426 	beq	r23,zero,10009080 <__alt_data_end+0xf8009080>
10009270:	903fe11e 	bne	r18,zero,100091f8 <__alt_data_end+0xf80091f8>
10009274:	8f000017 	ldw	fp,0(r17)
10009278:	8c800117 	ldw	r18,4(r17)
1000927c:	0011883a 	mov	r8,zero
10009280:	8c400204 	addi	r17,r17,8
10009284:	003fdb06 	br	100091f4 <__alt_data_end+0xf80091f4>
10009288:	180d883a 	mov	r6,r3
1000928c:	e00b883a 	mov	r5,fp
10009290:	da000115 	stw	r8,4(sp)
10009294:	d8c00015 	stw	r3,0(sp)
10009298:	00097080 	call	10009708 <memmove>
1000929c:	d8c00017 	ldw	r3,0(sp)
100092a0:	80800017 	ldw	r2,0(r16)
100092a4:	800b883a 	mov	r5,r16
100092a8:	a809883a 	mov	r4,r21
100092ac:	10c5883a 	add	r2,r2,r3
100092b0:	80800015 	stw	r2,0(r16)
100092b4:	d8c00015 	stw	r3,0(sp)
100092b8:	00022300 	call	10002230 <_fflush_r>
100092bc:	d8c00017 	ldw	r3,0(sp)
100092c0:	da000117 	ldw	r8,4(sp)
100092c4:	103fc21e 	bne	r2,zero,100091d0 <__alt_data_end+0xf80091d0>
100092c8:	182f883a 	mov	r23,r3
100092cc:	9de7c83a 	sub	r19,r19,r23
100092d0:	983fe11e 	bne	r19,zero,10009258 <__alt_data_end+0xf8009258>
100092d4:	800b883a 	mov	r5,r16
100092d8:	a809883a 	mov	r4,r21
100092dc:	00022300 	call	10002230 <_fflush_r>
100092e0:	103fbb1e 	bne	r2,zero,100091d0 <__alt_data_end+0xf80091d0>
100092e4:	0011883a 	mov	r8,zero
100092e8:	003fdb06 	br	10009258 <__alt_data_end+0xf8009258>
100092ec:	94c0012e 	bgeu	r18,r19,100092f4 <__sfvwrite_r+0x328>
100092f0:	9027883a 	mov	r19,r18
100092f4:	980d883a 	mov	r6,r19
100092f8:	e00b883a 	mov	r5,fp
100092fc:	00097080 	call	10009708 <memmove>
10009300:	80800217 	ldw	r2,8(r16)
10009304:	80c00017 	ldw	r3,0(r16)
10009308:	14c5c83a 	sub	r2,r2,r19
1000930c:	1cc7883a 	add	r3,r3,r19
10009310:	80800215 	stw	r2,8(r16)
10009314:	80c00015 	stw	r3,0(r16)
10009318:	10004326 	beq	r2,zero,10009428 <__sfvwrite_r+0x45c>
1000931c:	9805883a 	mov	r2,r19
10009320:	003f8306 	br	10009130 <__alt_data_end+0xf8009130>
10009324:	b00d883a 	mov	r6,r22
10009328:	e00b883a 	mov	r5,fp
1000932c:	da000115 	stw	r8,4(sp)
10009330:	00097080 	call	10009708 <memmove>
10009334:	80800217 	ldw	r2,8(r16)
10009338:	80c00017 	ldw	r3,0(r16)
1000933c:	da000117 	ldw	r8,4(sp)
10009340:	1585c83a 	sub	r2,r2,r22
10009344:	1dad883a 	add	r22,r3,r22
10009348:	80800215 	stw	r2,8(r16)
1000934c:	85800015 	stw	r22,0(r16)
10009350:	003fbf06 	br	10009250 <__alt_data_end+0xf8009250>
10009354:	81000017 	ldw	r4,0(r16)
10009358:	9027883a 	mov	r19,r18
1000935c:	902f883a 	mov	r23,r18
10009360:	003f6906 	br	10009108 <__alt_data_end+0xf8009108>
10009364:	900d883a 	mov	r6,r18
10009368:	01400284 	movi	r5,10
1000936c:	e009883a 	mov	r4,fp
10009370:	00096240 	call	10009624 <memchr>
10009374:	10003e26 	beq	r2,zero,10009470 <__sfvwrite_r+0x4a4>
10009378:	10800044 	addi	r2,r2,1
1000937c:	1727c83a 	sub	r19,r2,fp
10009380:	02000044 	movi	r8,1
10009384:	003f9d06 	br	100091fc <__alt_data_end+0xf80091fc>
10009388:	80800517 	ldw	r2,20(r16)
1000938c:	81400417 	ldw	r5,16(r16)
10009390:	81c00017 	ldw	r7,0(r16)
10009394:	10a7883a 	add	r19,r2,r2
10009398:	9885883a 	add	r2,r19,r2
1000939c:	1026d7fa 	srli	r19,r2,31
100093a0:	396dc83a 	sub	r22,r7,r5
100093a4:	b1000044 	addi	r4,r22,1
100093a8:	9885883a 	add	r2,r19,r2
100093ac:	1027d07a 	srai	r19,r2,1
100093b0:	2485883a 	add	r2,r4,r18
100093b4:	980d883a 	mov	r6,r19
100093b8:	9880022e 	bgeu	r19,r2,100093c4 <__sfvwrite_r+0x3f8>
100093bc:	1027883a 	mov	r19,r2
100093c0:	100d883a 	mov	r6,r2
100093c4:	18c1000c 	andi	r3,r3,1024
100093c8:	18001c26 	beq	r3,zero,1000943c <__sfvwrite_r+0x470>
100093cc:	300b883a 	mov	r5,r6
100093d0:	a809883a 	mov	r4,r21
100093d4:	00039340 	call	10003934 <_malloc_r>
100093d8:	102f883a 	mov	r23,r2
100093dc:	10002926 	beq	r2,zero,10009484 <__sfvwrite_r+0x4b8>
100093e0:	81400417 	ldw	r5,16(r16)
100093e4:	b00d883a 	mov	r6,r22
100093e8:	1009883a 	mov	r4,r2
100093ec:	00041400 	call	10004140 <memcpy>
100093f0:	8080030b 	ldhu	r2,12(r16)
100093f4:	00fedfc4 	movi	r3,-1153
100093f8:	10c4703a 	and	r2,r2,r3
100093fc:	10802014 	ori	r2,r2,128
10009400:	8080030d 	sth	r2,12(r16)
10009404:	bd89883a 	add	r4,r23,r22
10009408:	9d8fc83a 	sub	r7,r19,r22
1000940c:	85c00415 	stw	r23,16(r16)
10009410:	84c00515 	stw	r19,20(r16)
10009414:	81000015 	stw	r4,0(r16)
10009418:	9027883a 	mov	r19,r18
1000941c:	81c00215 	stw	r7,8(r16)
10009420:	902f883a 	mov	r23,r18
10009424:	003f3806 	br	10009108 <__alt_data_end+0xf8009108>
10009428:	800b883a 	mov	r5,r16
1000942c:	a809883a 	mov	r4,r21
10009430:	00022300 	call	10002230 <_fflush_r>
10009434:	103fb926 	beq	r2,zero,1000931c <__alt_data_end+0xf800931c>
10009438:	003f6506 	br	100091d0 <__alt_data_end+0xf80091d0>
1000943c:	a809883a 	mov	r4,r21
10009440:	00045880 	call	10004588 <_realloc_r>
10009444:	102f883a 	mov	r23,r2
10009448:	103fee1e 	bne	r2,zero,10009404 <__alt_data_end+0xf8009404>
1000944c:	81400417 	ldw	r5,16(r16)
10009450:	a809883a 	mov	r4,r21
10009454:	0002bb40 	call	10002bb4 <_free_r>
10009458:	8080030b 	ldhu	r2,12(r16)
1000945c:	00ffdfc4 	movi	r3,-129
10009460:	1884703a 	and	r2,r3,r2
10009464:	00c00304 	movi	r3,12
10009468:	a8c00015 	stw	r3,0(r21)
1000946c:	003f5906 	br	100091d4 <__alt_data_end+0xf80091d4>
10009470:	94c00044 	addi	r19,r18,1
10009474:	02000044 	movi	r8,1
10009478:	003f6006 	br	100091fc <__alt_data_end+0xf80091fc>
1000947c:	00bfffc4 	movi	r2,-1
10009480:	003f0006 	br	10009084 <__alt_data_end+0xf8009084>
10009484:	00800304 	movi	r2,12
10009488:	a8800015 	stw	r2,0(r21)
1000948c:	8080030b 	ldhu	r2,12(r16)
10009490:	003f5006 	br	100091d4 <__alt_data_end+0xf80091d4>

10009494 <_isatty_r>:
10009494:	defffd04 	addi	sp,sp,-12
10009498:	dc000015 	stw	r16,0(sp)
1000949c:	04040074 	movhi	r16,4097
100094a0:	dc400115 	stw	r17,4(sp)
100094a4:	841a2104 	addi	r16,r16,26756
100094a8:	2023883a 	mov	r17,r4
100094ac:	2809883a 	mov	r4,r5
100094b0:	dfc00215 	stw	ra,8(sp)
100094b4:	80000015 	stw	zero,0(r16)
100094b8:	00102a00 	call	100102a0 <isatty>
100094bc:	00ffffc4 	movi	r3,-1
100094c0:	10c00526 	beq	r2,r3,100094d8 <_isatty_r+0x44>
100094c4:	dfc00217 	ldw	ra,8(sp)
100094c8:	dc400117 	ldw	r17,4(sp)
100094cc:	dc000017 	ldw	r16,0(sp)
100094d0:	dec00304 	addi	sp,sp,12
100094d4:	f800283a 	ret
100094d8:	80c00017 	ldw	r3,0(r16)
100094dc:	183ff926 	beq	r3,zero,100094c4 <__alt_data_end+0xf80094c4>
100094e0:	88c00015 	stw	r3,0(r17)
100094e4:	003ff706 	br	100094c4 <__alt_data_end+0xf80094c4>

100094e8 <_setlocale_r>:
100094e8:	30001b26 	beq	r6,zero,10009558 <_setlocale_r+0x70>
100094ec:	01440074 	movhi	r5,4097
100094f0:	defffe04 	addi	sp,sp,-8
100094f4:	294b5404 	addi	r5,r5,11600
100094f8:	3009883a 	mov	r4,r6
100094fc:	dc000015 	stw	r16,0(sp)
10009500:	dfc00115 	stw	ra,4(sp)
10009504:	3021883a 	mov	r16,r6
10009508:	000ae5c0 	call	1000ae5c <strcmp>
1000950c:	1000061e 	bne	r2,zero,10009528 <_setlocale_r+0x40>
10009510:	00840074 	movhi	r2,4097
10009514:	108b3504 	addi	r2,r2,11476
10009518:	dfc00117 	ldw	ra,4(sp)
1000951c:	dc000017 	ldw	r16,0(sp)
10009520:	dec00204 	addi	sp,sp,8
10009524:	f800283a 	ret
10009528:	01440074 	movhi	r5,4097
1000952c:	294b3504 	addi	r5,r5,11476
10009530:	8009883a 	mov	r4,r16
10009534:	000ae5c0 	call	1000ae5c <strcmp>
10009538:	103ff526 	beq	r2,zero,10009510 <__alt_data_end+0xf8009510>
1000953c:	01440074 	movhi	r5,4097
10009540:	294b2804 	addi	r5,r5,11424
10009544:	8009883a 	mov	r4,r16
10009548:	000ae5c0 	call	1000ae5c <strcmp>
1000954c:	103ff026 	beq	r2,zero,10009510 <__alt_data_end+0xf8009510>
10009550:	0005883a 	mov	r2,zero
10009554:	003ff006 	br	10009518 <__alt_data_end+0xf8009518>
10009558:	00840074 	movhi	r2,4097
1000955c:	108b3504 	addi	r2,r2,11476
10009560:	f800283a 	ret

10009564 <__locale_charset>:
10009564:	00840074 	movhi	r2,4097
10009568:	108e4804 	addi	r2,r2,14624
1000956c:	f800283a 	ret

10009570 <__locale_mb_cur_max>:
10009570:	00840074 	movhi	r2,4097
10009574:	1092ee04 	addi	r2,r2,19384
10009578:	10800017 	ldw	r2,0(r2)
1000957c:	f800283a 	ret

10009580 <__locale_msgcharset>:
10009580:	00840074 	movhi	r2,4097
10009584:	108e4004 	addi	r2,r2,14592
10009588:	f800283a 	ret

1000958c <__locale_cjk_lang>:
1000958c:	0005883a 	mov	r2,zero
10009590:	f800283a 	ret

10009594 <_localeconv_r>:
10009594:	00840074 	movhi	r2,4097
10009598:	108e5004 	addi	r2,r2,14656
1000959c:	f800283a 	ret

100095a0 <setlocale>:
100095a0:	00840074 	movhi	r2,4097
100095a4:	1092eb04 	addi	r2,r2,19372
100095a8:	280d883a 	mov	r6,r5
100095ac:	200b883a 	mov	r5,r4
100095b0:	11000017 	ldw	r4,0(r2)
100095b4:	00094e81 	jmpi	100094e8 <_setlocale_r>

100095b8 <localeconv>:
100095b8:	00840074 	movhi	r2,4097
100095bc:	108e5004 	addi	r2,r2,14656
100095c0:	f800283a 	ret

100095c4 <_lseek_r>:
100095c4:	defffd04 	addi	sp,sp,-12
100095c8:	2805883a 	mov	r2,r5
100095cc:	dc000015 	stw	r16,0(sp)
100095d0:	04040074 	movhi	r16,4097
100095d4:	dc400115 	stw	r17,4(sp)
100095d8:	300b883a 	mov	r5,r6
100095dc:	841a2104 	addi	r16,r16,26756
100095e0:	2023883a 	mov	r17,r4
100095e4:	380d883a 	mov	r6,r7
100095e8:	1009883a 	mov	r4,r2
100095ec:	dfc00215 	stw	ra,8(sp)
100095f0:	80000015 	stw	zero,0(r16)
100095f4:	00105e00 	call	100105e0 <lseek>
100095f8:	00ffffc4 	movi	r3,-1
100095fc:	10c00526 	beq	r2,r3,10009614 <_lseek_r+0x50>
10009600:	dfc00217 	ldw	ra,8(sp)
10009604:	dc400117 	ldw	r17,4(sp)
10009608:	dc000017 	ldw	r16,0(sp)
1000960c:	dec00304 	addi	sp,sp,12
10009610:	f800283a 	ret
10009614:	80c00017 	ldw	r3,0(r16)
10009618:	183ff926 	beq	r3,zero,10009600 <__alt_data_end+0xf8009600>
1000961c:	88c00015 	stw	r3,0(r17)
10009620:	003ff706 	br	10009600 <__alt_data_end+0xf8009600>

10009624 <memchr>:
10009624:	208000cc 	andi	r2,r4,3
10009628:	280f883a 	mov	r7,r5
1000962c:	10003426 	beq	r2,zero,10009700 <memchr+0xdc>
10009630:	30bfffc4 	addi	r2,r6,-1
10009634:	30001a26 	beq	r6,zero,100096a0 <memchr+0x7c>
10009638:	20c00003 	ldbu	r3,0(r4)
1000963c:	29803fcc 	andi	r6,r5,255
10009640:	30c0051e 	bne	r6,r3,10009658 <memchr+0x34>
10009644:	00001806 	br	100096a8 <memchr+0x84>
10009648:	10001526 	beq	r2,zero,100096a0 <memchr+0x7c>
1000964c:	20c00003 	ldbu	r3,0(r4)
10009650:	10bfffc4 	addi	r2,r2,-1
10009654:	30c01426 	beq	r6,r3,100096a8 <memchr+0x84>
10009658:	21000044 	addi	r4,r4,1
1000965c:	20c000cc 	andi	r3,r4,3
10009660:	183ff91e 	bne	r3,zero,10009648 <__alt_data_end+0xf8009648>
10009664:	020000c4 	movi	r8,3
10009668:	40801136 	bltu	r8,r2,100096b0 <memchr+0x8c>
1000966c:	10000c26 	beq	r2,zero,100096a0 <memchr+0x7c>
10009670:	20c00003 	ldbu	r3,0(r4)
10009674:	29403fcc 	andi	r5,r5,255
10009678:	28c00b26 	beq	r5,r3,100096a8 <memchr+0x84>
1000967c:	20c00044 	addi	r3,r4,1
10009680:	39803fcc 	andi	r6,r7,255
10009684:	2089883a 	add	r4,r4,r2
10009688:	00000306 	br	10009698 <memchr+0x74>
1000968c:	18c00044 	addi	r3,r3,1
10009690:	197fffc3 	ldbu	r5,-1(r3)
10009694:	31400526 	beq	r6,r5,100096ac <memchr+0x88>
10009698:	1805883a 	mov	r2,r3
1000969c:	20fffb1e 	bne	r4,r3,1000968c <__alt_data_end+0xf800968c>
100096a0:	0005883a 	mov	r2,zero
100096a4:	f800283a 	ret
100096a8:	2005883a 	mov	r2,r4
100096ac:	f800283a 	ret
100096b0:	28c03fcc 	andi	r3,r5,255
100096b4:	1812923a 	slli	r9,r3,8
100096b8:	02ffbff4 	movhi	r11,65279
100096bc:	02a02074 	movhi	r10,32897
100096c0:	48d2b03a 	or	r9,r9,r3
100096c4:	4806943a 	slli	r3,r9,16
100096c8:	5affbfc4 	addi	r11,r11,-257
100096cc:	52a02004 	addi	r10,r10,-32640
100096d0:	48d2b03a 	or	r9,r9,r3
100096d4:	20c00017 	ldw	r3,0(r4)
100096d8:	48c6f03a 	xor	r3,r9,r3
100096dc:	1acd883a 	add	r6,r3,r11
100096e0:	00c6303a 	nor	r3,zero,r3
100096e4:	30c6703a 	and	r3,r6,r3
100096e8:	1a86703a 	and	r3,r3,r10
100096ec:	183fe01e 	bne	r3,zero,10009670 <__alt_data_end+0xf8009670>
100096f0:	10bfff04 	addi	r2,r2,-4
100096f4:	21000104 	addi	r4,r4,4
100096f8:	40bff636 	bltu	r8,r2,100096d4 <__alt_data_end+0xf80096d4>
100096fc:	003fdb06 	br	1000966c <__alt_data_end+0xf800966c>
10009700:	3005883a 	mov	r2,r6
10009704:	003fd706 	br	10009664 <__alt_data_end+0xf8009664>

10009708 <memmove>:
10009708:	2005883a 	mov	r2,r4
1000970c:	29000b2e 	bgeu	r5,r4,1000973c <memmove+0x34>
10009710:	298f883a 	add	r7,r5,r6
10009714:	21c0092e 	bgeu	r4,r7,1000973c <memmove+0x34>
10009718:	2187883a 	add	r3,r4,r6
1000971c:	198bc83a 	sub	r5,r3,r6
10009720:	30004826 	beq	r6,zero,10009844 <memmove+0x13c>
10009724:	39ffffc4 	addi	r7,r7,-1
10009728:	39000003 	ldbu	r4,0(r7)
1000972c:	18ffffc4 	addi	r3,r3,-1
10009730:	19000005 	stb	r4,0(r3)
10009734:	28fffb1e 	bne	r5,r3,10009724 <__alt_data_end+0xf8009724>
10009738:	f800283a 	ret
1000973c:	00c003c4 	movi	r3,15
10009740:	1980412e 	bgeu	r3,r6,10009848 <memmove+0x140>
10009744:	2886b03a 	or	r3,r5,r2
10009748:	18c000cc 	andi	r3,r3,3
1000974c:	1800401e 	bne	r3,zero,10009850 <memmove+0x148>
10009750:	33fffc04 	addi	r15,r6,-16
10009754:	781ed13a 	srli	r15,r15,4
10009758:	28c00104 	addi	r3,r5,4
1000975c:	13400104 	addi	r13,r2,4
10009760:	781c913a 	slli	r14,r15,4
10009764:	2b000204 	addi	r12,r5,8
10009768:	12c00204 	addi	r11,r2,8
1000976c:	73800504 	addi	r14,r14,20
10009770:	2a800304 	addi	r10,r5,12
10009774:	12400304 	addi	r9,r2,12
10009778:	2b9d883a 	add	r14,r5,r14
1000977c:	2811883a 	mov	r8,r5
10009780:	100f883a 	mov	r7,r2
10009784:	41000017 	ldw	r4,0(r8)
10009788:	39c00404 	addi	r7,r7,16
1000978c:	18c00404 	addi	r3,r3,16
10009790:	393ffc15 	stw	r4,-16(r7)
10009794:	193ffc17 	ldw	r4,-16(r3)
10009798:	6b400404 	addi	r13,r13,16
1000979c:	5ac00404 	addi	r11,r11,16
100097a0:	693ffc15 	stw	r4,-16(r13)
100097a4:	61000017 	ldw	r4,0(r12)
100097a8:	4a400404 	addi	r9,r9,16
100097ac:	42000404 	addi	r8,r8,16
100097b0:	593ffc15 	stw	r4,-16(r11)
100097b4:	51000017 	ldw	r4,0(r10)
100097b8:	63000404 	addi	r12,r12,16
100097bc:	52800404 	addi	r10,r10,16
100097c0:	493ffc15 	stw	r4,-16(r9)
100097c4:	1bbfef1e 	bne	r3,r14,10009784 <__alt_data_end+0xf8009784>
100097c8:	79000044 	addi	r4,r15,1
100097cc:	2008913a 	slli	r4,r4,4
100097d0:	328003cc 	andi	r10,r6,15
100097d4:	02c000c4 	movi	r11,3
100097d8:	1107883a 	add	r3,r2,r4
100097dc:	290b883a 	add	r5,r5,r4
100097e0:	5a801e2e 	bgeu	r11,r10,1000985c <memmove+0x154>
100097e4:	1813883a 	mov	r9,r3
100097e8:	2811883a 	mov	r8,r5
100097ec:	500f883a 	mov	r7,r10
100097f0:	41000017 	ldw	r4,0(r8)
100097f4:	4a400104 	addi	r9,r9,4
100097f8:	39ffff04 	addi	r7,r7,-4
100097fc:	493fff15 	stw	r4,-4(r9)
10009800:	42000104 	addi	r8,r8,4
10009804:	59fffa36 	bltu	r11,r7,100097f0 <__alt_data_end+0xf80097f0>
10009808:	513fff04 	addi	r4,r10,-4
1000980c:	2008d0ba 	srli	r4,r4,2
10009810:	318000cc 	andi	r6,r6,3
10009814:	21000044 	addi	r4,r4,1
10009818:	2109883a 	add	r4,r4,r4
1000981c:	2109883a 	add	r4,r4,r4
10009820:	1907883a 	add	r3,r3,r4
10009824:	290b883a 	add	r5,r5,r4
10009828:	30000b26 	beq	r6,zero,10009858 <memmove+0x150>
1000982c:	198d883a 	add	r6,r3,r6
10009830:	29c00003 	ldbu	r7,0(r5)
10009834:	18c00044 	addi	r3,r3,1
10009838:	29400044 	addi	r5,r5,1
1000983c:	19ffffc5 	stb	r7,-1(r3)
10009840:	19bffb1e 	bne	r3,r6,10009830 <__alt_data_end+0xf8009830>
10009844:	f800283a 	ret
10009848:	1007883a 	mov	r3,r2
1000984c:	003ff606 	br	10009828 <__alt_data_end+0xf8009828>
10009850:	1007883a 	mov	r3,r2
10009854:	003ff506 	br	1000982c <__alt_data_end+0xf800982c>
10009858:	f800283a 	ret
1000985c:	500d883a 	mov	r6,r10
10009860:	003ff106 	br	10009828 <__alt_data_end+0xf8009828>

10009864 <_Balloc>:
10009864:	20801317 	ldw	r2,76(r4)
10009868:	defffc04 	addi	sp,sp,-16
1000986c:	dc400115 	stw	r17,4(sp)
10009870:	dc000015 	stw	r16,0(sp)
10009874:	dfc00315 	stw	ra,12(sp)
10009878:	dc800215 	stw	r18,8(sp)
1000987c:	2023883a 	mov	r17,r4
10009880:	2821883a 	mov	r16,r5
10009884:	10000f26 	beq	r2,zero,100098c4 <_Balloc+0x60>
10009888:	8407883a 	add	r3,r16,r16
1000988c:	18c7883a 	add	r3,r3,r3
10009890:	10c7883a 	add	r3,r2,r3
10009894:	18800017 	ldw	r2,0(r3)
10009898:	10001126 	beq	r2,zero,100098e0 <_Balloc+0x7c>
1000989c:	11000017 	ldw	r4,0(r2)
100098a0:	19000015 	stw	r4,0(r3)
100098a4:	10000415 	stw	zero,16(r2)
100098a8:	10000315 	stw	zero,12(r2)
100098ac:	dfc00317 	ldw	ra,12(sp)
100098b0:	dc800217 	ldw	r18,8(sp)
100098b4:	dc400117 	ldw	r17,4(sp)
100098b8:	dc000017 	ldw	r16,0(sp)
100098bc:	dec00404 	addi	sp,sp,16
100098c0:	f800283a 	ret
100098c4:	01800844 	movi	r6,33
100098c8:	01400104 	movi	r5,4
100098cc:	0001dfc0 	call	10001dfc <_calloc_r>
100098d0:	88801315 	stw	r2,76(r17)
100098d4:	103fec1e 	bne	r2,zero,10009888 <__alt_data_end+0xf8009888>
100098d8:	0005883a 	mov	r2,zero
100098dc:	003ff306 	br	100098ac <__alt_data_end+0xf80098ac>
100098e0:	01400044 	movi	r5,1
100098e4:	2c24983a 	sll	r18,r5,r16
100098e8:	8809883a 	mov	r4,r17
100098ec:	91800144 	addi	r6,r18,5
100098f0:	318d883a 	add	r6,r6,r6
100098f4:	318d883a 	add	r6,r6,r6
100098f8:	0001dfc0 	call	10001dfc <_calloc_r>
100098fc:	103ff626 	beq	r2,zero,100098d8 <__alt_data_end+0xf80098d8>
10009900:	14000115 	stw	r16,4(r2)
10009904:	14800215 	stw	r18,8(r2)
10009908:	003fe606 	br	100098a4 <__alt_data_end+0xf80098a4>

1000990c <_Bfree>:
1000990c:	28000826 	beq	r5,zero,10009930 <_Bfree+0x24>
10009910:	28c00117 	ldw	r3,4(r5)
10009914:	20801317 	ldw	r2,76(r4)
10009918:	18c7883a 	add	r3,r3,r3
1000991c:	18c7883a 	add	r3,r3,r3
10009920:	10c5883a 	add	r2,r2,r3
10009924:	10c00017 	ldw	r3,0(r2)
10009928:	28c00015 	stw	r3,0(r5)
1000992c:	11400015 	stw	r5,0(r2)
10009930:	f800283a 	ret

10009934 <__multadd>:
10009934:	defff704 	addi	sp,sp,-36
10009938:	dc800215 	stw	r18,8(sp)
1000993c:	2c800417 	ldw	r18,16(r5)
10009940:	dd800615 	stw	r22,24(sp)
10009944:	dd400515 	stw	r21,20(sp)
10009948:	dd000415 	stw	r20,16(sp)
1000994c:	dcc00315 	stw	r19,12(sp)
10009950:	dc400115 	stw	r17,4(sp)
10009954:	dc000015 	stw	r16,0(sp)
10009958:	dfc00815 	stw	ra,32(sp)
1000995c:	ddc00715 	stw	r23,28(sp)
10009960:	2827883a 	mov	r19,r5
10009964:	2029883a 	mov	r20,r4
10009968:	3023883a 	mov	r17,r6
1000996c:	3821883a 	mov	r16,r7
10009970:	2d400504 	addi	r21,r5,20
10009974:	002d883a 	mov	r22,zero
10009978:	adc00017 	ldw	r23,0(r21)
1000997c:	880b883a 	mov	r5,r17
10009980:	ad400104 	addi	r21,r21,4
10009984:	b93fffcc 	andi	r4,r23,65535
10009988:	0001d400 	call	10001d40 <__mulsi3>
1000998c:	b808d43a 	srli	r4,r23,16
10009990:	880b883a 	mov	r5,r17
10009994:	1421883a 	add	r16,r2,r16
10009998:	0001d400 	call	10001d40 <__mulsi3>
1000999c:	800ed43a 	srli	r7,r16,16
100099a0:	80ffffcc 	andi	r3,r16,65535
100099a4:	b5800044 	addi	r22,r22,1
100099a8:	11c5883a 	add	r2,r2,r7
100099ac:	100e943a 	slli	r7,r2,16
100099b0:	1020d43a 	srli	r16,r2,16
100099b4:	38c7883a 	add	r3,r7,r3
100099b8:	a8ffff15 	stw	r3,-4(r21)
100099bc:	b4bfee16 	blt	r22,r18,10009978 <__alt_data_end+0xf8009978>
100099c0:	80000926 	beq	r16,zero,100099e8 <__multadd+0xb4>
100099c4:	98800217 	ldw	r2,8(r19)
100099c8:	9080130e 	bge	r18,r2,10009a18 <__multadd+0xe4>
100099cc:	90800144 	addi	r2,r18,5
100099d0:	1085883a 	add	r2,r2,r2
100099d4:	1085883a 	add	r2,r2,r2
100099d8:	9885883a 	add	r2,r19,r2
100099dc:	14000015 	stw	r16,0(r2)
100099e0:	94800044 	addi	r18,r18,1
100099e4:	9c800415 	stw	r18,16(r19)
100099e8:	9805883a 	mov	r2,r19
100099ec:	dfc00817 	ldw	ra,32(sp)
100099f0:	ddc00717 	ldw	r23,28(sp)
100099f4:	dd800617 	ldw	r22,24(sp)
100099f8:	dd400517 	ldw	r21,20(sp)
100099fc:	dd000417 	ldw	r20,16(sp)
10009a00:	dcc00317 	ldw	r19,12(sp)
10009a04:	dc800217 	ldw	r18,8(sp)
10009a08:	dc400117 	ldw	r17,4(sp)
10009a0c:	dc000017 	ldw	r16,0(sp)
10009a10:	dec00904 	addi	sp,sp,36
10009a14:	f800283a 	ret
10009a18:	99400117 	ldw	r5,4(r19)
10009a1c:	a009883a 	mov	r4,r20
10009a20:	29400044 	addi	r5,r5,1
10009a24:	00098640 	call	10009864 <_Balloc>
10009a28:	99800417 	ldw	r6,16(r19)
10009a2c:	99400304 	addi	r5,r19,12
10009a30:	11000304 	addi	r4,r2,12
10009a34:	31800084 	addi	r6,r6,2
10009a38:	318d883a 	add	r6,r6,r6
10009a3c:	318d883a 	add	r6,r6,r6
10009a40:	1023883a 	mov	r17,r2
10009a44:	00041400 	call	10004140 <memcpy>
10009a48:	98000a26 	beq	r19,zero,10009a74 <__multadd+0x140>
10009a4c:	98c00117 	ldw	r3,4(r19)
10009a50:	a0801317 	ldw	r2,76(r20)
10009a54:	18c7883a 	add	r3,r3,r3
10009a58:	18c7883a 	add	r3,r3,r3
10009a5c:	10c5883a 	add	r2,r2,r3
10009a60:	10c00017 	ldw	r3,0(r2)
10009a64:	98c00015 	stw	r3,0(r19)
10009a68:	14c00015 	stw	r19,0(r2)
10009a6c:	8827883a 	mov	r19,r17
10009a70:	003fd606 	br	100099cc <__alt_data_end+0xf80099cc>
10009a74:	8827883a 	mov	r19,r17
10009a78:	003fd406 	br	100099cc <__alt_data_end+0xf80099cc>

10009a7c <__s2b>:
10009a7c:	defff904 	addi	sp,sp,-28
10009a80:	dc400115 	stw	r17,4(sp)
10009a84:	dc000015 	stw	r16,0(sp)
10009a88:	2023883a 	mov	r17,r4
10009a8c:	2821883a 	mov	r16,r5
10009a90:	39000204 	addi	r4,r7,8
10009a94:	01400244 	movi	r5,9
10009a98:	dcc00315 	stw	r19,12(sp)
10009a9c:	dc800215 	stw	r18,8(sp)
10009aa0:	dfc00615 	stw	ra,24(sp)
10009aa4:	dd400515 	stw	r21,20(sp)
10009aa8:	dd000415 	stw	r20,16(sp)
10009aac:	3825883a 	mov	r18,r7
10009ab0:	3027883a 	mov	r19,r6
10009ab4:	0001b8c0 	call	10001b8c <__divsi3>
10009ab8:	00c00044 	movi	r3,1
10009abc:	000b883a 	mov	r5,zero
10009ac0:	1880030e 	bge	r3,r2,10009ad0 <__s2b+0x54>
10009ac4:	18c7883a 	add	r3,r3,r3
10009ac8:	29400044 	addi	r5,r5,1
10009acc:	18bffd16 	blt	r3,r2,10009ac4 <__alt_data_end+0xf8009ac4>
10009ad0:	8809883a 	mov	r4,r17
10009ad4:	00098640 	call	10009864 <_Balloc>
10009ad8:	d8c00717 	ldw	r3,28(sp)
10009adc:	10c00515 	stw	r3,20(r2)
10009ae0:	00c00044 	movi	r3,1
10009ae4:	10c00415 	stw	r3,16(r2)
10009ae8:	00c00244 	movi	r3,9
10009aec:	1cc0210e 	bge	r3,r19,10009b74 <__s2b+0xf8>
10009af0:	80eb883a 	add	r21,r16,r3
10009af4:	a829883a 	mov	r20,r21
10009af8:	84e1883a 	add	r16,r16,r19
10009afc:	a1c00007 	ldb	r7,0(r20)
10009b00:	01800284 	movi	r6,10
10009b04:	a5000044 	addi	r20,r20,1
10009b08:	100b883a 	mov	r5,r2
10009b0c:	39fff404 	addi	r7,r7,-48
10009b10:	8809883a 	mov	r4,r17
10009b14:	00099340 	call	10009934 <__multadd>
10009b18:	a43ff81e 	bne	r20,r16,10009afc <__alt_data_end+0xf8009afc>
10009b1c:	ace1883a 	add	r16,r21,r19
10009b20:	843ffe04 	addi	r16,r16,-8
10009b24:	9c800a0e 	bge	r19,r18,10009b50 <__s2b+0xd4>
10009b28:	94e5c83a 	sub	r18,r18,r19
10009b2c:	84a5883a 	add	r18,r16,r18
10009b30:	81c00007 	ldb	r7,0(r16)
10009b34:	01800284 	movi	r6,10
10009b38:	84000044 	addi	r16,r16,1
10009b3c:	100b883a 	mov	r5,r2
10009b40:	39fff404 	addi	r7,r7,-48
10009b44:	8809883a 	mov	r4,r17
10009b48:	00099340 	call	10009934 <__multadd>
10009b4c:	84bff81e 	bne	r16,r18,10009b30 <__alt_data_end+0xf8009b30>
10009b50:	dfc00617 	ldw	ra,24(sp)
10009b54:	dd400517 	ldw	r21,20(sp)
10009b58:	dd000417 	ldw	r20,16(sp)
10009b5c:	dcc00317 	ldw	r19,12(sp)
10009b60:	dc800217 	ldw	r18,8(sp)
10009b64:	dc400117 	ldw	r17,4(sp)
10009b68:	dc000017 	ldw	r16,0(sp)
10009b6c:	dec00704 	addi	sp,sp,28
10009b70:	f800283a 	ret
10009b74:	84000284 	addi	r16,r16,10
10009b78:	1827883a 	mov	r19,r3
10009b7c:	003fe906 	br	10009b24 <__alt_data_end+0xf8009b24>

10009b80 <__hi0bits>:
10009b80:	20bfffec 	andhi	r2,r4,65535
10009b84:	1000141e 	bne	r2,zero,10009bd8 <__hi0bits+0x58>
10009b88:	2008943a 	slli	r4,r4,16
10009b8c:	00800404 	movi	r2,16
10009b90:	20ffc02c 	andhi	r3,r4,65280
10009b94:	1800021e 	bne	r3,zero,10009ba0 <__hi0bits+0x20>
10009b98:	2008923a 	slli	r4,r4,8
10009b9c:	10800204 	addi	r2,r2,8
10009ba0:	20fc002c 	andhi	r3,r4,61440
10009ba4:	1800021e 	bne	r3,zero,10009bb0 <__hi0bits+0x30>
10009ba8:	2008913a 	slli	r4,r4,4
10009bac:	10800104 	addi	r2,r2,4
10009bb0:	20f0002c 	andhi	r3,r4,49152
10009bb4:	1800031e 	bne	r3,zero,10009bc4 <__hi0bits+0x44>
10009bb8:	2109883a 	add	r4,r4,r4
10009bbc:	10800084 	addi	r2,r2,2
10009bc0:	2109883a 	add	r4,r4,r4
10009bc4:	20000316 	blt	r4,zero,10009bd4 <__hi0bits+0x54>
10009bc8:	2110002c 	andhi	r4,r4,16384
10009bcc:	2000041e 	bne	r4,zero,10009be0 <__hi0bits+0x60>
10009bd0:	00800804 	movi	r2,32
10009bd4:	f800283a 	ret
10009bd8:	0005883a 	mov	r2,zero
10009bdc:	003fec06 	br	10009b90 <__alt_data_end+0xf8009b90>
10009be0:	10800044 	addi	r2,r2,1
10009be4:	f800283a 	ret

10009be8 <__lo0bits>:
10009be8:	20c00017 	ldw	r3,0(r4)
10009bec:	188001cc 	andi	r2,r3,7
10009bf0:	10000826 	beq	r2,zero,10009c14 <__lo0bits+0x2c>
10009bf4:	1880004c 	andi	r2,r3,1
10009bf8:	1000211e 	bne	r2,zero,10009c80 <__lo0bits+0x98>
10009bfc:	1880008c 	andi	r2,r3,2
10009c00:	1000211e 	bne	r2,zero,10009c88 <__lo0bits+0xa0>
10009c04:	1806d0ba 	srli	r3,r3,2
10009c08:	00800084 	movi	r2,2
10009c0c:	20c00015 	stw	r3,0(r4)
10009c10:	f800283a 	ret
10009c14:	18bfffcc 	andi	r2,r3,65535
10009c18:	10001326 	beq	r2,zero,10009c68 <__lo0bits+0x80>
10009c1c:	0005883a 	mov	r2,zero
10009c20:	19403fcc 	andi	r5,r3,255
10009c24:	2800021e 	bne	r5,zero,10009c30 <__lo0bits+0x48>
10009c28:	1806d23a 	srli	r3,r3,8
10009c2c:	10800204 	addi	r2,r2,8
10009c30:	194003cc 	andi	r5,r3,15
10009c34:	2800021e 	bne	r5,zero,10009c40 <__lo0bits+0x58>
10009c38:	1806d13a 	srli	r3,r3,4
10009c3c:	10800104 	addi	r2,r2,4
10009c40:	194000cc 	andi	r5,r3,3
10009c44:	2800021e 	bne	r5,zero,10009c50 <__lo0bits+0x68>
10009c48:	1806d0ba 	srli	r3,r3,2
10009c4c:	10800084 	addi	r2,r2,2
10009c50:	1940004c 	andi	r5,r3,1
10009c54:	2800081e 	bne	r5,zero,10009c78 <__lo0bits+0x90>
10009c58:	1806d07a 	srli	r3,r3,1
10009c5c:	1800051e 	bne	r3,zero,10009c74 <__lo0bits+0x8c>
10009c60:	00800804 	movi	r2,32
10009c64:	f800283a 	ret
10009c68:	1806d43a 	srli	r3,r3,16
10009c6c:	00800404 	movi	r2,16
10009c70:	003feb06 	br	10009c20 <__alt_data_end+0xf8009c20>
10009c74:	10800044 	addi	r2,r2,1
10009c78:	20c00015 	stw	r3,0(r4)
10009c7c:	f800283a 	ret
10009c80:	0005883a 	mov	r2,zero
10009c84:	f800283a 	ret
10009c88:	1806d07a 	srli	r3,r3,1
10009c8c:	00800044 	movi	r2,1
10009c90:	20c00015 	stw	r3,0(r4)
10009c94:	f800283a 	ret

10009c98 <__i2b>:
10009c98:	defffd04 	addi	sp,sp,-12
10009c9c:	dc000015 	stw	r16,0(sp)
10009ca0:	04000044 	movi	r16,1
10009ca4:	dc400115 	stw	r17,4(sp)
10009ca8:	2823883a 	mov	r17,r5
10009cac:	800b883a 	mov	r5,r16
10009cb0:	dfc00215 	stw	ra,8(sp)
10009cb4:	00098640 	call	10009864 <_Balloc>
10009cb8:	14400515 	stw	r17,20(r2)
10009cbc:	14000415 	stw	r16,16(r2)
10009cc0:	dfc00217 	ldw	ra,8(sp)
10009cc4:	dc400117 	ldw	r17,4(sp)
10009cc8:	dc000017 	ldw	r16,0(sp)
10009ccc:	dec00304 	addi	sp,sp,12
10009cd0:	f800283a 	ret

10009cd4 <__multiply>:
10009cd4:	deffef04 	addi	sp,sp,-68
10009cd8:	dc400815 	stw	r17,32(sp)
10009cdc:	dc000715 	stw	r16,28(sp)
10009ce0:	34400417 	ldw	r17,16(r6)
10009ce4:	2c000417 	ldw	r16,16(r5)
10009ce8:	dd800d15 	stw	r22,52(sp)
10009cec:	dc800915 	stw	r18,36(sp)
10009cf0:	dfc01015 	stw	ra,64(sp)
10009cf4:	df000f15 	stw	fp,60(sp)
10009cf8:	ddc00e15 	stw	r23,56(sp)
10009cfc:	dd400c15 	stw	r21,48(sp)
10009d00:	dd000b15 	stw	r20,44(sp)
10009d04:	dcc00a15 	stw	r19,40(sp)
10009d08:	2825883a 	mov	r18,r5
10009d0c:	302d883a 	mov	r22,r6
10009d10:	8440050e 	bge	r16,r17,10009d28 <__multiply+0x54>
10009d14:	8007883a 	mov	r3,r16
10009d18:	3025883a 	mov	r18,r6
10009d1c:	8821883a 	mov	r16,r17
10009d20:	282d883a 	mov	r22,r5
10009d24:	1823883a 	mov	r17,r3
10009d28:	90800217 	ldw	r2,8(r18)
10009d2c:	8447883a 	add	r3,r16,r17
10009d30:	d8c00215 	stw	r3,8(sp)
10009d34:	91400117 	ldw	r5,4(r18)
10009d38:	10c0010e 	bge	r2,r3,10009d40 <__multiply+0x6c>
10009d3c:	29400044 	addi	r5,r5,1
10009d40:	00098640 	call	10009864 <_Balloc>
10009d44:	d8c00217 	ldw	r3,8(sp)
10009d48:	d8800615 	stw	r2,24(sp)
10009d4c:	18eb883a 	add	r21,r3,r3
10009d50:	ad6b883a 	add	r21,r21,r21
10009d54:	10c00504 	addi	r3,r2,20
10009d58:	1d6b883a 	add	r21,r3,r21
10009d5c:	d8c00115 	stw	r3,4(sp)
10009d60:	dd400315 	stw	r21,12(sp)
10009d64:	1805883a 	mov	r2,r3
10009d68:	1d40042e 	bgeu	r3,r21,10009d7c <__multiply+0xa8>
10009d6c:	d8c00317 	ldw	r3,12(sp)
10009d70:	10000015 	stw	zero,0(r2)
10009d74:	10800104 	addi	r2,r2,4
10009d78:	10fffc36 	bltu	r2,r3,10009d6c <__alt_data_end+0xf8009d6c>
10009d7c:	8c63883a 	add	r17,r17,r17
10009d80:	b5800504 	addi	r22,r22,20
10009d84:	8c63883a 	add	r17,r17,r17
10009d88:	94800504 	addi	r18,r18,20
10009d8c:	8421883a 	add	r16,r16,r16
10009d90:	b463883a 	add	r17,r22,r17
10009d94:	8421883a 	add	r16,r16,r16
10009d98:	dd800015 	stw	r22,0(sp)
10009d9c:	dc800415 	stw	r18,16(sp)
10009da0:	dc400515 	stw	r17,20(sp)
10009da4:	9429883a 	add	r20,r18,r16
10009da8:	b4404f2e 	bgeu	r22,r17,10009ee8 <__multiply+0x214>
10009dac:	d8c00017 	ldw	r3,0(sp)
10009db0:	1c800017 	ldw	r18,0(r3)
10009db4:	947fffcc 	andi	r17,r18,65535
10009db8:	88001e26 	beq	r17,zero,10009e34 <__multiply+0x160>
10009dbc:	dd800117 	ldw	r22,4(sp)
10009dc0:	dd400417 	ldw	r21,16(sp)
10009dc4:	0027883a 	mov	r19,zero
10009dc8:	ac800017 	ldw	r18,0(r21)
10009dcc:	b4000017 	ldw	r16,0(r22)
10009dd0:	880b883a 	mov	r5,r17
10009dd4:	913fffcc 	andi	r4,r18,65535
10009dd8:	0001d400 	call	10001d40 <__mulsi3>
10009ddc:	9008d43a 	srli	r4,r18,16
10009de0:	84bfffcc 	andi	r18,r16,65535
10009de4:	1485883a 	add	r2,r2,r18
10009de8:	14e5883a 	add	r18,r2,r19
10009dec:	8020d43a 	srli	r16,r16,16
10009df0:	9026d43a 	srli	r19,r18,16
10009df4:	880b883a 	mov	r5,r17
10009df8:	0001d400 	call	10001d40 <__mulsi3>
10009dfc:	1405883a 	add	r2,r2,r16
10009e00:	14e1883a 	add	r16,r2,r19
10009e04:	90ffffcc 	andi	r3,r18,65535
10009e08:	8024943a 	slli	r18,r16,16
10009e0c:	ad400104 	addi	r21,r21,4
10009e10:	b005883a 	mov	r2,r22
10009e14:	90c6b03a 	or	r3,r18,r3
10009e18:	b0c00015 	stw	r3,0(r22)
10009e1c:	8026d43a 	srli	r19,r16,16
10009e20:	b5800104 	addi	r22,r22,4
10009e24:	ad3fe836 	bltu	r21,r20,10009dc8 <__alt_data_end+0xf8009dc8>
10009e28:	d8c00017 	ldw	r3,0(sp)
10009e2c:	14c00115 	stw	r19,4(r2)
10009e30:	1c800017 	ldw	r18,0(r3)
10009e34:	9024d43a 	srli	r18,r18,16
10009e38:	90002226 	beq	r18,zero,10009ec4 <__multiply+0x1f0>
10009e3c:	d8c00117 	ldw	r3,4(sp)
10009e40:	dd800417 	ldw	r22,16(sp)
10009e44:	002f883a 	mov	r23,zero
10009e48:	1f000017 	ldw	fp,0(r3)
10009e4c:	1823883a 	mov	r17,r3
10009e50:	182b883a 	mov	r21,r3
10009e54:	e021883a 	mov	r16,fp
10009e58:	00000106 	br	10009e60 <__multiply+0x18c>
10009e5c:	982b883a 	mov	r21,r19
10009e60:	b100000b 	ldhu	r4,0(r22)
10009e64:	8020d43a 	srli	r16,r16,16
10009e68:	900b883a 	mov	r5,r18
10009e6c:	0001d400 	call	10001d40 <__mulsi3>
10009e70:	1405883a 	add	r2,r2,r16
10009e74:	15ef883a 	add	r23,r2,r23
10009e78:	b804943a 	slli	r2,r23,16
10009e7c:	e0ffffcc 	andi	r3,fp,65535
10009e80:	8c400104 	addi	r17,r17,4
10009e84:	10c6b03a 	or	r3,r2,r3
10009e88:	88ffff15 	stw	r3,-4(r17)
10009e8c:	b5800104 	addi	r22,r22,4
10009e90:	b13fff17 	ldw	r4,-4(r22)
10009e94:	acc00104 	addi	r19,r21,4
10009e98:	900b883a 	mov	r5,r18
10009e9c:	2008d43a 	srli	r4,r4,16
10009ea0:	9c000017 	ldw	r16,0(r19)
10009ea4:	0001d400 	call	10001d40 <__mulsi3>
10009ea8:	b806d43a 	srli	r3,r23,16
10009eac:	813fffcc 	andi	r4,r16,65535
10009eb0:	1105883a 	add	r2,r2,r4
10009eb4:	10f9883a 	add	fp,r2,r3
10009eb8:	e02ed43a 	srli	r23,fp,16
10009ebc:	b53fe736 	bltu	r22,r20,10009e5c <__alt_data_end+0xf8009e5c>
10009ec0:	af000115 	stw	fp,4(r21)
10009ec4:	d8c00017 	ldw	r3,0(sp)
10009ec8:	d9000517 	ldw	r4,20(sp)
10009ecc:	18c00104 	addi	r3,r3,4
10009ed0:	d8c00015 	stw	r3,0(sp)
10009ed4:	d8c00117 	ldw	r3,4(sp)
10009ed8:	18c00104 	addi	r3,r3,4
10009edc:	d8c00115 	stw	r3,4(sp)
10009ee0:	d8c00017 	ldw	r3,0(sp)
10009ee4:	193fb136 	bltu	r3,r4,10009dac <__alt_data_end+0xf8009dac>
10009ee8:	d8c00217 	ldw	r3,8(sp)
10009eec:	00c00c0e 	bge	zero,r3,10009f20 <__multiply+0x24c>
10009ef0:	d8c00317 	ldw	r3,12(sp)
10009ef4:	18bfff17 	ldw	r2,-4(r3)
10009ef8:	1d7fff04 	addi	r21,r3,-4
10009efc:	10000326 	beq	r2,zero,10009f0c <__multiply+0x238>
10009f00:	00000706 	br	10009f20 <__multiply+0x24c>
10009f04:	a8800017 	ldw	r2,0(r21)
10009f08:	1000051e 	bne	r2,zero,10009f20 <__multiply+0x24c>
10009f0c:	d8c00217 	ldw	r3,8(sp)
10009f10:	ad7fff04 	addi	r21,r21,-4
10009f14:	18ffffc4 	addi	r3,r3,-1
10009f18:	d8c00215 	stw	r3,8(sp)
10009f1c:	183ff91e 	bne	r3,zero,10009f04 <__alt_data_end+0xf8009f04>
10009f20:	d8c00617 	ldw	r3,24(sp)
10009f24:	d9000217 	ldw	r4,8(sp)
10009f28:	1805883a 	mov	r2,r3
10009f2c:	19000415 	stw	r4,16(r3)
10009f30:	dfc01017 	ldw	ra,64(sp)
10009f34:	df000f17 	ldw	fp,60(sp)
10009f38:	ddc00e17 	ldw	r23,56(sp)
10009f3c:	dd800d17 	ldw	r22,52(sp)
10009f40:	dd400c17 	ldw	r21,48(sp)
10009f44:	dd000b17 	ldw	r20,44(sp)
10009f48:	dcc00a17 	ldw	r19,40(sp)
10009f4c:	dc800917 	ldw	r18,36(sp)
10009f50:	dc400817 	ldw	r17,32(sp)
10009f54:	dc000717 	ldw	r16,28(sp)
10009f58:	dec01104 	addi	sp,sp,68
10009f5c:	f800283a 	ret

10009f60 <__pow5mult>:
10009f60:	defffa04 	addi	sp,sp,-24
10009f64:	dcc00315 	stw	r19,12(sp)
10009f68:	dc000015 	stw	r16,0(sp)
10009f6c:	dfc00515 	stw	ra,20(sp)
10009f70:	dd000415 	stw	r20,16(sp)
10009f74:	dc800215 	stw	r18,8(sp)
10009f78:	dc400115 	stw	r17,4(sp)
10009f7c:	308000cc 	andi	r2,r6,3
10009f80:	3021883a 	mov	r16,r6
10009f84:	2027883a 	mov	r19,r4
10009f88:	10002f1e 	bne	r2,zero,1000a048 <__pow5mult+0xe8>
10009f8c:	2825883a 	mov	r18,r5
10009f90:	8021d0ba 	srai	r16,r16,2
10009f94:	80001a26 	beq	r16,zero,1000a000 <__pow5mult+0xa0>
10009f98:	9c401217 	ldw	r17,72(r19)
10009f9c:	8800061e 	bne	r17,zero,10009fb8 <__pow5mult+0x58>
10009fa0:	00003406 	br	1000a074 <__pow5mult+0x114>
10009fa4:	8021d07a 	srai	r16,r16,1
10009fa8:	80001526 	beq	r16,zero,1000a000 <__pow5mult+0xa0>
10009fac:	88800017 	ldw	r2,0(r17)
10009fb0:	10001c26 	beq	r2,zero,1000a024 <__pow5mult+0xc4>
10009fb4:	1023883a 	mov	r17,r2
10009fb8:	8080004c 	andi	r2,r16,1
10009fbc:	103ff926 	beq	r2,zero,10009fa4 <__alt_data_end+0xf8009fa4>
10009fc0:	880d883a 	mov	r6,r17
10009fc4:	900b883a 	mov	r5,r18
10009fc8:	9809883a 	mov	r4,r19
10009fcc:	0009cd40 	call	10009cd4 <__multiply>
10009fd0:	90001b26 	beq	r18,zero,1000a040 <__pow5mult+0xe0>
10009fd4:	91000117 	ldw	r4,4(r18)
10009fd8:	98c01317 	ldw	r3,76(r19)
10009fdc:	8021d07a 	srai	r16,r16,1
10009fe0:	2109883a 	add	r4,r4,r4
10009fe4:	2109883a 	add	r4,r4,r4
10009fe8:	1907883a 	add	r3,r3,r4
10009fec:	19000017 	ldw	r4,0(r3)
10009ff0:	91000015 	stw	r4,0(r18)
10009ff4:	1c800015 	stw	r18,0(r3)
10009ff8:	1025883a 	mov	r18,r2
10009ffc:	803feb1e 	bne	r16,zero,10009fac <__alt_data_end+0xf8009fac>
1000a000:	9005883a 	mov	r2,r18
1000a004:	dfc00517 	ldw	ra,20(sp)
1000a008:	dd000417 	ldw	r20,16(sp)
1000a00c:	dcc00317 	ldw	r19,12(sp)
1000a010:	dc800217 	ldw	r18,8(sp)
1000a014:	dc400117 	ldw	r17,4(sp)
1000a018:	dc000017 	ldw	r16,0(sp)
1000a01c:	dec00604 	addi	sp,sp,24
1000a020:	f800283a 	ret
1000a024:	880d883a 	mov	r6,r17
1000a028:	880b883a 	mov	r5,r17
1000a02c:	9809883a 	mov	r4,r19
1000a030:	0009cd40 	call	10009cd4 <__multiply>
1000a034:	88800015 	stw	r2,0(r17)
1000a038:	10000015 	stw	zero,0(r2)
1000a03c:	003fdd06 	br	10009fb4 <__alt_data_end+0xf8009fb4>
1000a040:	1025883a 	mov	r18,r2
1000a044:	003fd706 	br	10009fa4 <__alt_data_end+0xf8009fa4>
1000a048:	10bfffc4 	addi	r2,r2,-1
1000a04c:	1085883a 	add	r2,r2,r2
1000a050:	00c40074 	movhi	r3,4097
1000a054:	18cb5704 	addi	r3,r3,11612
1000a058:	1085883a 	add	r2,r2,r2
1000a05c:	1885883a 	add	r2,r3,r2
1000a060:	11800017 	ldw	r6,0(r2)
1000a064:	000f883a 	mov	r7,zero
1000a068:	00099340 	call	10009934 <__multadd>
1000a06c:	1025883a 	mov	r18,r2
1000a070:	003fc706 	br	10009f90 <__alt_data_end+0xf8009f90>
1000a074:	05000044 	movi	r20,1
1000a078:	a00b883a 	mov	r5,r20
1000a07c:	9809883a 	mov	r4,r19
1000a080:	00098640 	call	10009864 <_Balloc>
1000a084:	1023883a 	mov	r17,r2
1000a088:	00809c44 	movi	r2,625
1000a08c:	88800515 	stw	r2,20(r17)
1000a090:	8d000415 	stw	r20,16(r17)
1000a094:	9c401215 	stw	r17,72(r19)
1000a098:	88000015 	stw	zero,0(r17)
1000a09c:	003fc606 	br	10009fb8 <__alt_data_end+0xf8009fb8>

1000a0a0 <__lshift>:
1000a0a0:	defff904 	addi	sp,sp,-28
1000a0a4:	dd400515 	stw	r21,20(sp)
1000a0a8:	dcc00315 	stw	r19,12(sp)
1000a0ac:	302bd17a 	srai	r21,r6,5
1000a0b0:	2cc00417 	ldw	r19,16(r5)
1000a0b4:	28800217 	ldw	r2,8(r5)
1000a0b8:	dd000415 	stw	r20,16(sp)
1000a0bc:	ace7883a 	add	r19,r21,r19
1000a0c0:	dc800215 	stw	r18,8(sp)
1000a0c4:	dc400115 	stw	r17,4(sp)
1000a0c8:	dc000015 	stw	r16,0(sp)
1000a0cc:	dfc00615 	stw	ra,24(sp)
1000a0d0:	9c000044 	addi	r16,r19,1
1000a0d4:	2823883a 	mov	r17,r5
1000a0d8:	3029883a 	mov	r20,r6
1000a0dc:	2025883a 	mov	r18,r4
1000a0e0:	29400117 	ldw	r5,4(r5)
1000a0e4:	1400030e 	bge	r2,r16,1000a0f4 <__lshift+0x54>
1000a0e8:	1085883a 	add	r2,r2,r2
1000a0ec:	29400044 	addi	r5,r5,1
1000a0f0:	143ffd16 	blt	r2,r16,1000a0e8 <__alt_data_end+0xf800a0e8>
1000a0f4:	9009883a 	mov	r4,r18
1000a0f8:	00098640 	call	10009864 <_Balloc>
1000a0fc:	10c00504 	addi	r3,r2,20
1000a100:	0540070e 	bge	zero,r21,1000a120 <__lshift+0x80>
1000a104:	ad6b883a 	add	r21,r21,r21
1000a108:	ad6b883a 	add	r21,r21,r21
1000a10c:	1809883a 	mov	r4,r3
1000a110:	1d47883a 	add	r3,r3,r21
1000a114:	20000015 	stw	zero,0(r4)
1000a118:	21000104 	addi	r4,r4,4
1000a11c:	193ffd1e 	bne	r3,r4,1000a114 <__alt_data_end+0xf800a114>
1000a120:	8a000417 	ldw	r8,16(r17)
1000a124:	89000504 	addi	r4,r17,20
1000a128:	a18007cc 	andi	r6,r20,31
1000a12c:	4211883a 	add	r8,r8,r8
1000a130:	4211883a 	add	r8,r8,r8
1000a134:	2211883a 	add	r8,r4,r8
1000a138:	30002326 	beq	r6,zero,1000a1c8 <__lshift+0x128>
1000a13c:	02400804 	movi	r9,32
1000a140:	4993c83a 	sub	r9,r9,r6
1000a144:	000b883a 	mov	r5,zero
1000a148:	21c00017 	ldw	r7,0(r4)
1000a14c:	1815883a 	mov	r10,r3
1000a150:	18c00104 	addi	r3,r3,4
1000a154:	398e983a 	sll	r7,r7,r6
1000a158:	21000104 	addi	r4,r4,4
1000a15c:	394ab03a 	or	r5,r7,r5
1000a160:	197fff15 	stw	r5,-4(r3)
1000a164:	217fff17 	ldw	r5,-4(r4)
1000a168:	2a4ad83a 	srl	r5,r5,r9
1000a16c:	223ff636 	bltu	r4,r8,1000a148 <__alt_data_end+0xf800a148>
1000a170:	51400115 	stw	r5,4(r10)
1000a174:	28001a1e 	bne	r5,zero,1000a1e0 <__lshift+0x140>
1000a178:	843fffc4 	addi	r16,r16,-1
1000a17c:	14000415 	stw	r16,16(r2)
1000a180:	88000826 	beq	r17,zero,1000a1a4 <__lshift+0x104>
1000a184:	89000117 	ldw	r4,4(r17)
1000a188:	90c01317 	ldw	r3,76(r18)
1000a18c:	2109883a 	add	r4,r4,r4
1000a190:	2109883a 	add	r4,r4,r4
1000a194:	1907883a 	add	r3,r3,r4
1000a198:	19000017 	ldw	r4,0(r3)
1000a19c:	89000015 	stw	r4,0(r17)
1000a1a0:	1c400015 	stw	r17,0(r3)
1000a1a4:	dfc00617 	ldw	ra,24(sp)
1000a1a8:	dd400517 	ldw	r21,20(sp)
1000a1ac:	dd000417 	ldw	r20,16(sp)
1000a1b0:	dcc00317 	ldw	r19,12(sp)
1000a1b4:	dc800217 	ldw	r18,8(sp)
1000a1b8:	dc400117 	ldw	r17,4(sp)
1000a1bc:	dc000017 	ldw	r16,0(sp)
1000a1c0:	dec00704 	addi	sp,sp,28
1000a1c4:	f800283a 	ret
1000a1c8:	21400017 	ldw	r5,0(r4)
1000a1cc:	18c00104 	addi	r3,r3,4
1000a1d0:	21000104 	addi	r4,r4,4
1000a1d4:	197fff15 	stw	r5,-4(r3)
1000a1d8:	223ffb36 	bltu	r4,r8,1000a1c8 <__alt_data_end+0xf800a1c8>
1000a1dc:	003fe606 	br	1000a178 <__alt_data_end+0xf800a178>
1000a1e0:	9c000084 	addi	r16,r19,2
1000a1e4:	003fe406 	br	1000a178 <__alt_data_end+0xf800a178>

1000a1e8 <__mcmp>:
1000a1e8:	20800417 	ldw	r2,16(r4)
1000a1ec:	28c00417 	ldw	r3,16(r5)
1000a1f0:	10c5c83a 	sub	r2,r2,r3
1000a1f4:	1000111e 	bne	r2,zero,1000a23c <__mcmp+0x54>
1000a1f8:	18c7883a 	add	r3,r3,r3
1000a1fc:	18c7883a 	add	r3,r3,r3
1000a200:	21000504 	addi	r4,r4,20
1000a204:	29400504 	addi	r5,r5,20
1000a208:	20c5883a 	add	r2,r4,r3
1000a20c:	28cb883a 	add	r5,r5,r3
1000a210:	00000106 	br	1000a218 <__mcmp+0x30>
1000a214:	20800a2e 	bgeu	r4,r2,1000a240 <__mcmp+0x58>
1000a218:	10bfff04 	addi	r2,r2,-4
1000a21c:	297fff04 	addi	r5,r5,-4
1000a220:	11800017 	ldw	r6,0(r2)
1000a224:	28c00017 	ldw	r3,0(r5)
1000a228:	30fffa26 	beq	r6,r3,1000a214 <__alt_data_end+0xf800a214>
1000a22c:	30c00236 	bltu	r6,r3,1000a238 <__mcmp+0x50>
1000a230:	00800044 	movi	r2,1
1000a234:	f800283a 	ret
1000a238:	00bfffc4 	movi	r2,-1
1000a23c:	f800283a 	ret
1000a240:	0005883a 	mov	r2,zero
1000a244:	f800283a 	ret

1000a248 <__mdiff>:
1000a248:	28c00417 	ldw	r3,16(r5)
1000a24c:	30800417 	ldw	r2,16(r6)
1000a250:	defffa04 	addi	sp,sp,-24
1000a254:	dcc00315 	stw	r19,12(sp)
1000a258:	dc800215 	stw	r18,8(sp)
1000a25c:	dfc00515 	stw	ra,20(sp)
1000a260:	dd000415 	stw	r20,16(sp)
1000a264:	dc400115 	stw	r17,4(sp)
1000a268:	dc000015 	stw	r16,0(sp)
1000a26c:	1887c83a 	sub	r3,r3,r2
1000a270:	2825883a 	mov	r18,r5
1000a274:	3027883a 	mov	r19,r6
1000a278:	1800141e 	bne	r3,zero,1000a2cc <__mdiff+0x84>
1000a27c:	1085883a 	add	r2,r2,r2
1000a280:	1085883a 	add	r2,r2,r2
1000a284:	2a000504 	addi	r8,r5,20
1000a288:	34000504 	addi	r16,r6,20
1000a28c:	4087883a 	add	r3,r8,r2
1000a290:	8085883a 	add	r2,r16,r2
1000a294:	00000106 	br	1000a29c <__mdiff+0x54>
1000a298:	40c0592e 	bgeu	r8,r3,1000a400 <__mdiff+0x1b8>
1000a29c:	18ffff04 	addi	r3,r3,-4
1000a2a0:	10bfff04 	addi	r2,r2,-4
1000a2a4:	19c00017 	ldw	r7,0(r3)
1000a2a8:	11400017 	ldw	r5,0(r2)
1000a2ac:	397ffa26 	beq	r7,r5,1000a298 <__alt_data_end+0xf800a298>
1000a2b0:	3940592e 	bgeu	r7,r5,1000a418 <__mdiff+0x1d0>
1000a2b4:	9005883a 	mov	r2,r18
1000a2b8:	4023883a 	mov	r17,r8
1000a2bc:	9825883a 	mov	r18,r19
1000a2c0:	05000044 	movi	r20,1
1000a2c4:	1027883a 	mov	r19,r2
1000a2c8:	00000406 	br	1000a2dc <__mdiff+0x94>
1000a2cc:	18005616 	blt	r3,zero,1000a428 <__mdiff+0x1e0>
1000a2d0:	34400504 	addi	r17,r6,20
1000a2d4:	2c000504 	addi	r16,r5,20
1000a2d8:	0029883a 	mov	r20,zero
1000a2dc:	91400117 	ldw	r5,4(r18)
1000a2e0:	00098640 	call	10009864 <_Balloc>
1000a2e4:	92400417 	ldw	r9,16(r18)
1000a2e8:	9b000417 	ldw	r12,16(r19)
1000a2ec:	12c00504 	addi	r11,r2,20
1000a2f0:	4a51883a 	add	r8,r9,r9
1000a2f4:	6319883a 	add	r12,r12,r12
1000a2f8:	4211883a 	add	r8,r8,r8
1000a2fc:	6319883a 	add	r12,r12,r12
1000a300:	15000315 	stw	r20,12(r2)
1000a304:	8211883a 	add	r8,r16,r8
1000a308:	8b19883a 	add	r12,r17,r12
1000a30c:	0007883a 	mov	r3,zero
1000a310:	81400017 	ldw	r5,0(r16)
1000a314:	89c00017 	ldw	r7,0(r17)
1000a318:	59800104 	addi	r6,r11,4
1000a31c:	293fffcc 	andi	r4,r5,65535
1000a320:	20c7883a 	add	r3,r4,r3
1000a324:	393fffcc 	andi	r4,r7,65535
1000a328:	1909c83a 	sub	r4,r3,r4
1000a32c:	280ad43a 	srli	r5,r5,16
1000a330:	380ed43a 	srli	r7,r7,16
1000a334:	2007d43a 	srai	r3,r4,16
1000a338:	213fffcc 	andi	r4,r4,65535
1000a33c:	29cbc83a 	sub	r5,r5,r7
1000a340:	28c7883a 	add	r3,r5,r3
1000a344:	180a943a 	slli	r5,r3,16
1000a348:	8c400104 	addi	r17,r17,4
1000a34c:	84000104 	addi	r16,r16,4
1000a350:	2908b03a 	or	r4,r5,r4
1000a354:	59000015 	stw	r4,0(r11)
1000a358:	1807d43a 	srai	r3,r3,16
1000a35c:	3015883a 	mov	r10,r6
1000a360:	3017883a 	mov	r11,r6
1000a364:	8b3fea36 	bltu	r17,r12,1000a310 <__alt_data_end+0xf800a310>
1000a368:	8200162e 	bgeu	r16,r8,1000a3c4 <__mdiff+0x17c>
1000a36c:	8017883a 	mov	r11,r16
1000a370:	59400017 	ldw	r5,0(r11)
1000a374:	31800104 	addi	r6,r6,4
1000a378:	5ac00104 	addi	r11,r11,4
1000a37c:	293fffcc 	andi	r4,r5,65535
1000a380:	20c7883a 	add	r3,r4,r3
1000a384:	280ed43a 	srli	r7,r5,16
1000a388:	180bd43a 	srai	r5,r3,16
1000a38c:	193fffcc 	andi	r4,r3,65535
1000a390:	3947883a 	add	r3,r7,r5
1000a394:	180a943a 	slli	r5,r3,16
1000a398:	1807d43a 	srai	r3,r3,16
1000a39c:	2908b03a 	or	r4,r5,r4
1000a3a0:	313fff15 	stw	r4,-4(r6)
1000a3a4:	5a3ff236 	bltu	r11,r8,1000a370 <__alt_data_end+0xf800a370>
1000a3a8:	0406303a 	nor	r3,zero,r16
1000a3ac:	1a07883a 	add	r3,r3,r8
1000a3b0:	1806d0ba 	srli	r3,r3,2
1000a3b4:	18c00044 	addi	r3,r3,1
1000a3b8:	18c7883a 	add	r3,r3,r3
1000a3bc:	18c7883a 	add	r3,r3,r3
1000a3c0:	50d5883a 	add	r10,r10,r3
1000a3c4:	50ffff04 	addi	r3,r10,-4
1000a3c8:	2000041e 	bne	r4,zero,1000a3dc <__mdiff+0x194>
1000a3cc:	18ffff04 	addi	r3,r3,-4
1000a3d0:	19000017 	ldw	r4,0(r3)
1000a3d4:	4a7fffc4 	addi	r9,r9,-1
1000a3d8:	203ffc26 	beq	r4,zero,1000a3cc <__alt_data_end+0xf800a3cc>
1000a3dc:	12400415 	stw	r9,16(r2)
1000a3e0:	dfc00517 	ldw	ra,20(sp)
1000a3e4:	dd000417 	ldw	r20,16(sp)
1000a3e8:	dcc00317 	ldw	r19,12(sp)
1000a3ec:	dc800217 	ldw	r18,8(sp)
1000a3f0:	dc400117 	ldw	r17,4(sp)
1000a3f4:	dc000017 	ldw	r16,0(sp)
1000a3f8:	dec00604 	addi	sp,sp,24
1000a3fc:	f800283a 	ret
1000a400:	000b883a 	mov	r5,zero
1000a404:	00098640 	call	10009864 <_Balloc>
1000a408:	00c00044 	movi	r3,1
1000a40c:	10c00415 	stw	r3,16(r2)
1000a410:	10000515 	stw	zero,20(r2)
1000a414:	003ff206 	br	1000a3e0 <__alt_data_end+0xf800a3e0>
1000a418:	8023883a 	mov	r17,r16
1000a41c:	0029883a 	mov	r20,zero
1000a420:	4021883a 	mov	r16,r8
1000a424:	003fad06 	br	1000a2dc <__alt_data_end+0xf800a2dc>
1000a428:	9005883a 	mov	r2,r18
1000a42c:	94400504 	addi	r17,r18,20
1000a430:	9c000504 	addi	r16,r19,20
1000a434:	9825883a 	mov	r18,r19
1000a438:	05000044 	movi	r20,1
1000a43c:	1027883a 	mov	r19,r2
1000a440:	003fa606 	br	1000a2dc <__alt_data_end+0xf800a2dc>

1000a444 <__ulp>:
1000a444:	295ffc2c 	andhi	r5,r5,32752
1000a448:	00bf3034 	movhi	r2,64704
1000a44c:	2887883a 	add	r3,r5,r2
1000a450:	00c0020e 	bge	zero,r3,1000a45c <__ulp+0x18>
1000a454:	0005883a 	mov	r2,zero
1000a458:	f800283a 	ret
1000a45c:	00c7c83a 	sub	r3,zero,r3
1000a460:	1807d53a 	srai	r3,r3,20
1000a464:	008004c4 	movi	r2,19
1000a468:	10c00b0e 	bge	r2,r3,1000a498 <__ulp+0x54>
1000a46c:	18bffb04 	addi	r2,r3,-20
1000a470:	01000784 	movi	r4,30
1000a474:	0007883a 	mov	r3,zero
1000a478:	20800516 	blt	r4,r2,1000a490 <__ulp+0x4c>
1000a47c:	010007c4 	movi	r4,31
1000a480:	2089c83a 	sub	r4,r4,r2
1000a484:	00800044 	movi	r2,1
1000a488:	1104983a 	sll	r2,r2,r4
1000a48c:	f800283a 	ret
1000a490:	00800044 	movi	r2,1
1000a494:	f800283a 	ret
1000a498:	01400234 	movhi	r5,8
1000a49c:	28c7d83a 	sra	r3,r5,r3
1000a4a0:	0005883a 	mov	r2,zero
1000a4a4:	f800283a 	ret

1000a4a8 <__b2d>:
1000a4a8:	defffa04 	addi	sp,sp,-24
1000a4ac:	dc000015 	stw	r16,0(sp)
1000a4b0:	24000417 	ldw	r16,16(r4)
1000a4b4:	dc400115 	stw	r17,4(sp)
1000a4b8:	24400504 	addi	r17,r4,20
1000a4bc:	8421883a 	add	r16,r16,r16
1000a4c0:	8421883a 	add	r16,r16,r16
1000a4c4:	8c21883a 	add	r16,r17,r16
1000a4c8:	dc800215 	stw	r18,8(sp)
1000a4cc:	84bfff17 	ldw	r18,-4(r16)
1000a4d0:	dd000415 	stw	r20,16(sp)
1000a4d4:	dcc00315 	stw	r19,12(sp)
1000a4d8:	9009883a 	mov	r4,r18
1000a4dc:	2829883a 	mov	r20,r5
1000a4e0:	dfc00515 	stw	ra,20(sp)
1000a4e4:	0009b800 	call	10009b80 <__hi0bits>
1000a4e8:	00c00804 	movi	r3,32
1000a4ec:	1889c83a 	sub	r4,r3,r2
1000a4f0:	a1000015 	stw	r4,0(r20)
1000a4f4:	01000284 	movi	r4,10
1000a4f8:	84ffff04 	addi	r19,r16,-4
1000a4fc:	20801216 	blt	r4,r2,1000a548 <__b2d+0xa0>
1000a500:	018002c4 	movi	r6,11
1000a504:	308dc83a 	sub	r6,r6,r2
1000a508:	9186d83a 	srl	r3,r18,r6
1000a50c:	18cffc34 	orhi	r3,r3,16368
1000a510:	8cc0212e 	bgeu	r17,r19,1000a598 <__b2d+0xf0>
1000a514:	813ffe17 	ldw	r4,-8(r16)
1000a518:	218cd83a 	srl	r6,r4,r6
1000a51c:	10800544 	addi	r2,r2,21
1000a520:	9084983a 	sll	r2,r18,r2
1000a524:	1184b03a 	or	r2,r2,r6
1000a528:	dfc00517 	ldw	ra,20(sp)
1000a52c:	dd000417 	ldw	r20,16(sp)
1000a530:	dcc00317 	ldw	r19,12(sp)
1000a534:	dc800217 	ldw	r18,8(sp)
1000a538:	dc400117 	ldw	r17,4(sp)
1000a53c:	dc000017 	ldw	r16,0(sp)
1000a540:	dec00604 	addi	sp,sp,24
1000a544:	f800283a 	ret
1000a548:	8cc00f2e 	bgeu	r17,r19,1000a588 <__b2d+0xe0>
1000a54c:	117ffd44 	addi	r5,r2,-11
1000a550:	80bffe17 	ldw	r2,-8(r16)
1000a554:	28000e26 	beq	r5,zero,1000a590 <__b2d+0xe8>
1000a558:	1949c83a 	sub	r4,r3,r5
1000a55c:	9164983a 	sll	r18,r18,r5
1000a560:	1106d83a 	srl	r3,r2,r4
1000a564:	81bffe04 	addi	r6,r16,-8
1000a568:	948ffc34 	orhi	r18,r18,16368
1000a56c:	90c6b03a 	or	r3,r18,r3
1000a570:	89800e2e 	bgeu	r17,r6,1000a5ac <__b2d+0x104>
1000a574:	81bffd17 	ldw	r6,-12(r16)
1000a578:	1144983a 	sll	r2,r2,r5
1000a57c:	310ad83a 	srl	r5,r6,r4
1000a580:	2884b03a 	or	r2,r5,r2
1000a584:	003fe806 	br	1000a528 <__alt_data_end+0xf800a528>
1000a588:	10bffd44 	addi	r2,r2,-11
1000a58c:	1000041e 	bne	r2,zero,1000a5a0 <__b2d+0xf8>
1000a590:	90cffc34 	orhi	r3,r18,16368
1000a594:	003fe406 	br	1000a528 <__alt_data_end+0xf800a528>
1000a598:	000d883a 	mov	r6,zero
1000a59c:	003fdf06 	br	1000a51c <__alt_data_end+0xf800a51c>
1000a5a0:	90a4983a 	sll	r18,r18,r2
1000a5a4:	0005883a 	mov	r2,zero
1000a5a8:	003ff906 	br	1000a590 <__alt_data_end+0xf800a590>
1000a5ac:	1144983a 	sll	r2,r2,r5
1000a5b0:	003fdd06 	br	1000a528 <__alt_data_end+0xf800a528>

1000a5b4 <__d2b>:
1000a5b4:	defff804 	addi	sp,sp,-32
1000a5b8:	dc000215 	stw	r16,8(sp)
1000a5bc:	3021883a 	mov	r16,r6
1000a5c0:	dc400315 	stw	r17,12(sp)
1000a5c4:	8022907a 	slli	r17,r16,1
1000a5c8:	dd000615 	stw	r20,24(sp)
1000a5cc:	2829883a 	mov	r20,r5
1000a5d0:	01400044 	movi	r5,1
1000a5d4:	dcc00515 	stw	r19,20(sp)
1000a5d8:	dc800415 	stw	r18,16(sp)
1000a5dc:	dfc00715 	stw	ra,28(sp)
1000a5e0:	3825883a 	mov	r18,r7
1000a5e4:	8822d57a 	srli	r17,r17,21
1000a5e8:	00098640 	call	10009864 <_Balloc>
1000a5ec:	1027883a 	mov	r19,r2
1000a5f0:	00800434 	movhi	r2,16
1000a5f4:	10bfffc4 	addi	r2,r2,-1
1000a5f8:	808c703a 	and	r6,r16,r2
1000a5fc:	88000126 	beq	r17,zero,1000a604 <__d2b+0x50>
1000a600:	31800434 	orhi	r6,r6,16
1000a604:	d9800015 	stw	r6,0(sp)
1000a608:	a0002426 	beq	r20,zero,1000a69c <__d2b+0xe8>
1000a60c:	d9000104 	addi	r4,sp,4
1000a610:	dd000115 	stw	r20,4(sp)
1000a614:	0009be80 	call	10009be8 <__lo0bits>
1000a618:	d8c00017 	ldw	r3,0(sp)
1000a61c:	10002f1e 	bne	r2,zero,1000a6dc <__d2b+0x128>
1000a620:	d9000117 	ldw	r4,4(sp)
1000a624:	99000515 	stw	r4,20(r19)
1000a628:	1821003a 	cmpeq	r16,r3,zero
1000a62c:	01000084 	movi	r4,2
1000a630:	2421c83a 	sub	r16,r4,r16
1000a634:	98c00615 	stw	r3,24(r19)
1000a638:	9c000415 	stw	r16,16(r19)
1000a63c:	88001f1e 	bne	r17,zero,1000a6bc <__d2b+0x108>
1000a640:	10bef384 	addi	r2,r2,-1074
1000a644:	90800015 	stw	r2,0(r18)
1000a648:	00900034 	movhi	r2,16384
1000a64c:	10bfffc4 	addi	r2,r2,-1
1000a650:	8085883a 	add	r2,r16,r2
1000a654:	1085883a 	add	r2,r2,r2
1000a658:	1085883a 	add	r2,r2,r2
1000a65c:	9885883a 	add	r2,r19,r2
1000a660:	11000517 	ldw	r4,20(r2)
1000a664:	8020917a 	slli	r16,r16,5
1000a668:	0009b800 	call	10009b80 <__hi0bits>
1000a66c:	d8c00817 	ldw	r3,32(sp)
1000a670:	8085c83a 	sub	r2,r16,r2
1000a674:	18800015 	stw	r2,0(r3)
1000a678:	9805883a 	mov	r2,r19
1000a67c:	dfc00717 	ldw	ra,28(sp)
1000a680:	dd000617 	ldw	r20,24(sp)
1000a684:	dcc00517 	ldw	r19,20(sp)
1000a688:	dc800417 	ldw	r18,16(sp)
1000a68c:	dc400317 	ldw	r17,12(sp)
1000a690:	dc000217 	ldw	r16,8(sp)
1000a694:	dec00804 	addi	sp,sp,32
1000a698:	f800283a 	ret
1000a69c:	d809883a 	mov	r4,sp
1000a6a0:	0009be80 	call	10009be8 <__lo0bits>
1000a6a4:	d8c00017 	ldw	r3,0(sp)
1000a6a8:	04000044 	movi	r16,1
1000a6ac:	9c000415 	stw	r16,16(r19)
1000a6b0:	98c00515 	stw	r3,20(r19)
1000a6b4:	10800804 	addi	r2,r2,32
1000a6b8:	883fe126 	beq	r17,zero,1000a640 <__alt_data_end+0xf800a640>
1000a6bc:	00c00d44 	movi	r3,53
1000a6c0:	8c7ef344 	addi	r17,r17,-1075
1000a6c4:	88a3883a 	add	r17,r17,r2
1000a6c8:	1885c83a 	sub	r2,r3,r2
1000a6cc:	d8c00817 	ldw	r3,32(sp)
1000a6d0:	94400015 	stw	r17,0(r18)
1000a6d4:	18800015 	stw	r2,0(r3)
1000a6d8:	003fe706 	br	1000a678 <__alt_data_end+0xf800a678>
1000a6dc:	01000804 	movi	r4,32
1000a6e0:	2089c83a 	sub	r4,r4,r2
1000a6e4:	1908983a 	sll	r4,r3,r4
1000a6e8:	d9400117 	ldw	r5,4(sp)
1000a6ec:	1886d83a 	srl	r3,r3,r2
1000a6f0:	2148b03a 	or	r4,r4,r5
1000a6f4:	99000515 	stw	r4,20(r19)
1000a6f8:	d8c00015 	stw	r3,0(sp)
1000a6fc:	003fca06 	br	1000a628 <__alt_data_end+0xf800a628>

1000a700 <__ratio>:
1000a700:	defff904 	addi	sp,sp,-28
1000a704:	dc400315 	stw	r17,12(sp)
1000a708:	2823883a 	mov	r17,r5
1000a70c:	d9400104 	addi	r5,sp,4
1000a710:	dfc00615 	stw	ra,24(sp)
1000a714:	dcc00515 	stw	r19,20(sp)
1000a718:	dc800415 	stw	r18,16(sp)
1000a71c:	2027883a 	mov	r19,r4
1000a720:	dc000215 	stw	r16,8(sp)
1000a724:	000a4a80 	call	1000a4a8 <__b2d>
1000a728:	d80b883a 	mov	r5,sp
1000a72c:	8809883a 	mov	r4,r17
1000a730:	1025883a 	mov	r18,r2
1000a734:	1821883a 	mov	r16,r3
1000a738:	000a4a80 	call	1000a4a8 <__b2d>
1000a73c:	8a000417 	ldw	r8,16(r17)
1000a740:	99000417 	ldw	r4,16(r19)
1000a744:	d9400117 	ldw	r5,4(sp)
1000a748:	2209c83a 	sub	r4,r4,r8
1000a74c:	2010917a 	slli	r8,r4,5
1000a750:	d9000017 	ldw	r4,0(sp)
1000a754:	2909c83a 	sub	r4,r5,r4
1000a758:	4109883a 	add	r4,r8,r4
1000a75c:	01000e0e 	bge	zero,r4,1000a798 <__ratio+0x98>
1000a760:	2008953a 	slli	r4,r4,20
1000a764:	2421883a 	add	r16,r4,r16
1000a768:	100d883a 	mov	r6,r2
1000a76c:	180f883a 	mov	r7,r3
1000a770:	9009883a 	mov	r4,r18
1000a774:	800b883a 	mov	r5,r16
1000a778:	000dfe40 	call	1000dfe4 <__divdf3>
1000a77c:	dfc00617 	ldw	ra,24(sp)
1000a780:	dcc00517 	ldw	r19,20(sp)
1000a784:	dc800417 	ldw	r18,16(sp)
1000a788:	dc400317 	ldw	r17,12(sp)
1000a78c:	dc000217 	ldw	r16,8(sp)
1000a790:	dec00704 	addi	sp,sp,28
1000a794:	f800283a 	ret
1000a798:	2008953a 	slli	r4,r4,20
1000a79c:	1907c83a 	sub	r3,r3,r4
1000a7a0:	003ff106 	br	1000a768 <__alt_data_end+0xf800a768>

1000a7a4 <_mprec_log10>:
1000a7a4:	defffe04 	addi	sp,sp,-8
1000a7a8:	dc000015 	stw	r16,0(sp)
1000a7ac:	dfc00115 	stw	ra,4(sp)
1000a7b0:	008005c4 	movi	r2,23
1000a7b4:	2021883a 	mov	r16,r4
1000a7b8:	11000d0e 	bge	r2,r4,1000a7f0 <_mprec_log10+0x4c>
1000a7bc:	0005883a 	mov	r2,zero
1000a7c0:	00cffc34 	movhi	r3,16368
1000a7c4:	843fffc4 	addi	r16,r16,-1
1000a7c8:	000d883a 	mov	r6,zero
1000a7cc:	01d00934 	movhi	r7,16420
1000a7d0:	1009883a 	mov	r4,r2
1000a7d4:	180b883a 	mov	r5,r3
1000a7d8:	000ec0c0 	call	1000ec0c <__muldf3>
1000a7dc:	803ff91e 	bne	r16,zero,1000a7c4 <__alt_data_end+0xf800a7c4>
1000a7e0:	dfc00117 	ldw	ra,4(sp)
1000a7e4:	dc000017 	ldw	r16,0(sp)
1000a7e8:	dec00204 	addi	sp,sp,8
1000a7ec:	f800283a 	ret
1000a7f0:	202090fa 	slli	r16,r4,3
1000a7f4:	00840074 	movhi	r2,4097
1000a7f8:	108b6e04 	addi	r2,r2,11704
1000a7fc:	1421883a 	add	r16,r2,r16
1000a800:	80800017 	ldw	r2,0(r16)
1000a804:	80c00117 	ldw	r3,4(r16)
1000a808:	dfc00117 	ldw	ra,4(sp)
1000a80c:	dc000017 	ldw	r16,0(sp)
1000a810:	dec00204 	addi	sp,sp,8
1000a814:	f800283a 	ret

1000a818 <__copybits>:
1000a818:	297fffc4 	addi	r5,r5,-1
1000a81c:	280fd17a 	srai	r7,r5,5
1000a820:	30c00417 	ldw	r3,16(r6)
1000a824:	30800504 	addi	r2,r6,20
1000a828:	39c00044 	addi	r7,r7,1
1000a82c:	18c7883a 	add	r3,r3,r3
1000a830:	39cf883a 	add	r7,r7,r7
1000a834:	18c7883a 	add	r3,r3,r3
1000a838:	39cf883a 	add	r7,r7,r7
1000a83c:	10c7883a 	add	r3,r2,r3
1000a840:	21cf883a 	add	r7,r4,r7
1000a844:	10c00d2e 	bgeu	r2,r3,1000a87c <__copybits+0x64>
1000a848:	200b883a 	mov	r5,r4
1000a84c:	12000017 	ldw	r8,0(r2)
1000a850:	29400104 	addi	r5,r5,4
1000a854:	10800104 	addi	r2,r2,4
1000a858:	2a3fff15 	stw	r8,-4(r5)
1000a85c:	10fffb36 	bltu	r2,r3,1000a84c <__alt_data_end+0xf800a84c>
1000a860:	1985c83a 	sub	r2,r3,r6
1000a864:	10bffac4 	addi	r2,r2,-21
1000a868:	1004d0ba 	srli	r2,r2,2
1000a86c:	10800044 	addi	r2,r2,1
1000a870:	1085883a 	add	r2,r2,r2
1000a874:	1085883a 	add	r2,r2,r2
1000a878:	2089883a 	add	r4,r4,r2
1000a87c:	21c0032e 	bgeu	r4,r7,1000a88c <__copybits+0x74>
1000a880:	20000015 	stw	zero,0(r4)
1000a884:	21000104 	addi	r4,r4,4
1000a888:	21fffd36 	bltu	r4,r7,1000a880 <__alt_data_end+0xf800a880>
1000a88c:	f800283a 	ret

1000a890 <__any_on>:
1000a890:	20c00417 	ldw	r3,16(r4)
1000a894:	2805d17a 	srai	r2,r5,5
1000a898:	21000504 	addi	r4,r4,20
1000a89c:	18800d0e 	bge	r3,r2,1000a8d4 <__any_on+0x44>
1000a8a0:	18c7883a 	add	r3,r3,r3
1000a8a4:	18c7883a 	add	r3,r3,r3
1000a8a8:	20c7883a 	add	r3,r4,r3
1000a8ac:	20c0192e 	bgeu	r4,r3,1000a914 <__any_on+0x84>
1000a8b0:	18bfff17 	ldw	r2,-4(r3)
1000a8b4:	18ffff04 	addi	r3,r3,-4
1000a8b8:	1000041e 	bne	r2,zero,1000a8cc <__any_on+0x3c>
1000a8bc:	20c0142e 	bgeu	r4,r3,1000a910 <__any_on+0x80>
1000a8c0:	18ffff04 	addi	r3,r3,-4
1000a8c4:	19400017 	ldw	r5,0(r3)
1000a8c8:	283ffc26 	beq	r5,zero,1000a8bc <__alt_data_end+0xf800a8bc>
1000a8cc:	00800044 	movi	r2,1
1000a8d0:	f800283a 	ret
1000a8d4:	10c00a0e 	bge	r2,r3,1000a900 <__any_on+0x70>
1000a8d8:	1085883a 	add	r2,r2,r2
1000a8dc:	1085883a 	add	r2,r2,r2
1000a8e0:	294007cc 	andi	r5,r5,31
1000a8e4:	2087883a 	add	r3,r4,r2
1000a8e8:	283ff026 	beq	r5,zero,1000a8ac <__alt_data_end+0xf800a8ac>
1000a8ec:	19800017 	ldw	r6,0(r3)
1000a8f0:	3144d83a 	srl	r2,r6,r5
1000a8f4:	114a983a 	sll	r5,r2,r5
1000a8f8:	317ff41e 	bne	r6,r5,1000a8cc <__alt_data_end+0xf800a8cc>
1000a8fc:	003feb06 	br	1000a8ac <__alt_data_end+0xf800a8ac>
1000a900:	1085883a 	add	r2,r2,r2
1000a904:	1085883a 	add	r2,r2,r2
1000a908:	2087883a 	add	r3,r4,r2
1000a90c:	003fe706 	br	1000a8ac <__alt_data_end+0xf800a8ac>
1000a910:	f800283a 	ret
1000a914:	0005883a 	mov	r2,zero
1000a918:	f800283a 	ret

1000a91c <_putc_r>:
1000a91c:	defffc04 	addi	sp,sp,-16
1000a920:	dc000215 	stw	r16,8(sp)
1000a924:	dfc00315 	stw	ra,12(sp)
1000a928:	2021883a 	mov	r16,r4
1000a92c:	20000226 	beq	r4,zero,1000a938 <_putc_r+0x1c>
1000a930:	20800e17 	ldw	r2,56(r4)
1000a934:	10001b26 	beq	r2,zero,1000a9a4 <_putc_r+0x88>
1000a938:	30800217 	ldw	r2,8(r6)
1000a93c:	10bfffc4 	addi	r2,r2,-1
1000a940:	30800215 	stw	r2,8(r6)
1000a944:	10000a16 	blt	r2,zero,1000a970 <_putc_r+0x54>
1000a948:	30800017 	ldw	r2,0(r6)
1000a94c:	11400005 	stb	r5,0(r2)
1000a950:	30800017 	ldw	r2,0(r6)
1000a954:	10c00044 	addi	r3,r2,1
1000a958:	30c00015 	stw	r3,0(r6)
1000a95c:	10800003 	ldbu	r2,0(r2)
1000a960:	dfc00317 	ldw	ra,12(sp)
1000a964:	dc000217 	ldw	r16,8(sp)
1000a968:	dec00404 	addi	sp,sp,16
1000a96c:	f800283a 	ret
1000a970:	30c00617 	ldw	r3,24(r6)
1000a974:	10c00616 	blt	r2,r3,1000a990 <_putc_r+0x74>
1000a978:	30800017 	ldw	r2,0(r6)
1000a97c:	00c00284 	movi	r3,10
1000a980:	11400005 	stb	r5,0(r2)
1000a984:	30800017 	ldw	r2,0(r6)
1000a988:	11400003 	ldbu	r5,0(r2)
1000a98c:	28fff11e 	bne	r5,r3,1000a954 <__alt_data_end+0xf800a954>
1000a990:	8009883a 	mov	r4,r16
1000a994:	dfc00317 	ldw	ra,12(sp)
1000a998:	dc000217 	ldw	r16,8(sp)
1000a99c:	dec00404 	addi	sp,sp,16
1000a9a0:	000c6301 	jmpi	1000c630 <__swbuf_r>
1000a9a4:	d9400015 	stw	r5,0(sp)
1000a9a8:	d9800115 	stw	r6,4(sp)
1000a9ac:	000261c0 	call	1000261c <__sinit>
1000a9b0:	d9800117 	ldw	r6,4(sp)
1000a9b4:	d9400017 	ldw	r5,0(sp)
1000a9b8:	003fdf06 	br	1000a938 <__alt_data_end+0xf800a938>

1000a9bc <putc>:
1000a9bc:	00840074 	movhi	r2,4097
1000a9c0:	defffc04 	addi	sp,sp,-16
1000a9c4:	1092eb04 	addi	r2,r2,19372
1000a9c8:	dc000115 	stw	r16,4(sp)
1000a9cc:	14000017 	ldw	r16,0(r2)
1000a9d0:	dc400215 	stw	r17,8(sp)
1000a9d4:	dfc00315 	stw	ra,12(sp)
1000a9d8:	2023883a 	mov	r17,r4
1000a9dc:	80000226 	beq	r16,zero,1000a9e8 <putc+0x2c>
1000a9e0:	80800e17 	ldw	r2,56(r16)
1000a9e4:	10001a26 	beq	r2,zero,1000aa50 <putc+0x94>
1000a9e8:	28800217 	ldw	r2,8(r5)
1000a9ec:	10bfffc4 	addi	r2,r2,-1
1000a9f0:	28800215 	stw	r2,8(r5)
1000a9f4:	10000b16 	blt	r2,zero,1000aa24 <putc+0x68>
1000a9f8:	28800017 	ldw	r2,0(r5)
1000a9fc:	14400005 	stb	r17,0(r2)
1000aa00:	28800017 	ldw	r2,0(r5)
1000aa04:	10c00044 	addi	r3,r2,1
1000aa08:	28c00015 	stw	r3,0(r5)
1000aa0c:	10800003 	ldbu	r2,0(r2)
1000aa10:	dfc00317 	ldw	ra,12(sp)
1000aa14:	dc400217 	ldw	r17,8(sp)
1000aa18:	dc000117 	ldw	r16,4(sp)
1000aa1c:	dec00404 	addi	sp,sp,16
1000aa20:	f800283a 	ret
1000aa24:	28c00617 	ldw	r3,24(r5)
1000aa28:	10c00e16 	blt	r2,r3,1000aa64 <putc+0xa8>
1000aa2c:	28800017 	ldw	r2,0(r5)
1000aa30:	01000284 	movi	r4,10
1000aa34:	14400005 	stb	r17,0(r2)
1000aa38:	28800017 	ldw	r2,0(r5)
1000aa3c:	10c00003 	ldbu	r3,0(r2)
1000aa40:	193ff01e 	bne	r3,r4,1000aa04 <__alt_data_end+0xf800aa04>
1000aa44:	280d883a 	mov	r6,r5
1000aa48:	180b883a 	mov	r5,r3
1000aa4c:	00000706 	br	1000aa6c <putc+0xb0>
1000aa50:	8009883a 	mov	r4,r16
1000aa54:	d9400015 	stw	r5,0(sp)
1000aa58:	000261c0 	call	1000261c <__sinit>
1000aa5c:	d9400017 	ldw	r5,0(sp)
1000aa60:	003fe106 	br	1000a9e8 <__alt_data_end+0xf800a9e8>
1000aa64:	280d883a 	mov	r6,r5
1000aa68:	880b883a 	mov	r5,r17
1000aa6c:	8009883a 	mov	r4,r16
1000aa70:	dfc00317 	ldw	ra,12(sp)
1000aa74:	dc400217 	ldw	r17,8(sp)
1000aa78:	dc000117 	ldw	r16,4(sp)
1000aa7c:	dec00404 	addi	sp,sp,16
1000aa80:	000c6301 	jmpi	1000c630 <__swbuf_r>

1000aa84 <_read_r>:
1000aa84:	defffd04 	addi	sp,sp,-12
1000aa88:	2805883a 	mov	r2,r5
1000aa8c:	dc000015 	stw	r16,0(sp)
1000aa90:	04040074 	movhi	r16,4097
1000aa94:	dc400115 	stw	r17,4(sp)
1000aa98:	300b883a 	mov	r5,r6
1000aa9c:	841a2104 	addi	r16,r16,26756
1000aaa0:	2023883a 	mov	r17,r4
1000aaa4:	380d883a 	mov	r6,r7
1000aaa8:	1009883a 	mov	r4,r2
1000aaac:	dfc00215 	stw	ra,8(sp)
1000aab0:	80000015 	stw	zero,0(r16)
1000aab4:	00009280 	call	10000928 <read>
1000aab8:	00ffffc4 	movi	r3,-1
1000aabc:	10c00526 	beq	r2,r3,1000aad4 <_read_r+0x50>
1000aac0:	dfc00217 	ldw	ra,8(sp)
1000aac4:	dc400117 	ldw	r17,4(sp)
1000aac8:	dc000017 	ldw	r16,0(sp)
1000aacc:	dec00304 	addi	sp,sp,12
1000aad0:	f800283a 	ret
1000aad4:	80c00017 	ldw	r3,0(r16)
1000aad8:	183ff926 	beq	r3,zero,1000aac0 <__alt_data_end+0xf800aac0>
1000aadc:	88c00015 	stw	r3,0(r17)
1000aae0:	003ff706 	br	1000aac0 <__alt_data_end+0xf800aac0>

1000aae4 <__fpclassifyd>:
1000aae4:	00a00034 	movhi	r2,32768
1000aae8:	10bfffc4 	addi	r2,r2,-1
1000aaec:	2884703a 	and	r2,r5,r2
1000aaf0:	10000726 	beq	r2,zero,1000ab10 <__fpclassifyd+0x2c>
1000aaf4:	00fffc34 	movhi	r3,65520
1000aaf8:	019ff834 	movhi	r6,32736
1000aafc:	28c7883a 	add	r3,r5,r3
1000ab00:	31bfffc4 	addi	r6,r6,-1
1000ab04:	30c00536 	bltu	r6,r3,1000ab1c <__fpclassifyd+0x38>
1000ab08:	00800104 	movi	r2,4
1000ab0c:	f800283a 	ret
1000ab10:	2000021e 	bne	r4,zero,1000ab1c <__fpclassifyd+0x38>
1000ab14:	00800084 	movi	r2,2
1000ab18:	f800283a 	ret
1000ab1c:	00dffc34 	movhi	r3,32752
1000ab20:	019ff834 	movhi	r6,32736
1000ab24:	28cb883a 	add	r5,r5,r3
1000ab28:	31bfffc4 	addi	r6,r6,-1
1000ab2c:	317ff62e 	bgeu	r6,r5,1000ab08 <__alt_data_end+0xf800ab08>
1000ab30:	01400434 	movhi	r5,16
1000ab34:	297fffc4 	addi	r5,r5,-1
1000ab38:	28800236 	bltu	r5,r2,1000ab44 <__fpclassifyd+0x60>
1000ab3c:	008000c4 	movi	r2,3
1000ab40:	f800283a 	ret
1000ab44:	10c00226 	beq	r2,r3,1000ab50 <__fpclassifyd+0x6c>
1000ab48:	0005883a 	mov	r2,zero
1000ab4c:	f800283a 	ret
1000ab50:	2005003a 	cmpeq	r2,r4,zero
1000ab54:	f800283a 	ret

1000ab58 <_init_signal_r>:
1000ab58:	2080b717 	ldw	r2,732(r4)
1000ab5c:	10000226 	beq	r2,zero,1000ab68 <_init_signal_r+0x10>
1000ab60:	0005883a 	mov	r2,zero
1000ab64:	f800283a 	ret
1000ab68:	defffe04 	addi	sp,sp,-8
1000ab6c:	01402004 	movi	r5,128
1000ab70:	dc000015 	stw	r16,0(sp)
1000ab74:	dfc00115 	stw	ra,4(sp)
1000ab78:	2021883a 	mov	r16,r4
1000ab7c:	00039340 	call	10003934 <_malloc_r>
1000ab80:	8080b715 	stw	r2,732(r16)
1000ab84:	10000d26 	beq	r2,zero,1000abbc <_init_signal_r+0x64>
1000ab88:	0007883a 	mov	r3,zero
1000ab8c:	01002004 	movi	r4,128
1000ab90:	00000106 	br	1000ab98 <_init_signal_r+0x40>
1000ab94:	8080b717 	ldw	r2,732(r16)
1000ab98:	10c5883a 	add	r2,r2,r3
1000ab9c:	10000015 	stw	zero,0(r2)
1000aba0:	18c00104 	addi	r3,r3,4
1000aba4:	193ffb1e 	bne	r3,r4,1000ab94 <__alt_data_end+0xf800ab94>
1000aba8:	0005883a 	mov	r2,zero
1000abac:	dfc00117 	ldw	ra,4(sp)
1000abb0:	dc000017 	ldw	r16,0(sp)
1000abb4:	dec00204 	addi	sp,sp,8
1000abb8:	f800283a 	ret
1000abbc:	00bfffc4 	movi	r2,-1
1000abc0:	003ffa06 	br	1000abac <__alt_data_end+0xf800abac>

1000abc4 <_signal_r>:
1000abc4:	00c007c4 	movi	r3,31
1000abc8:	19401536 	bltu	r3,r5,1000ac20 <_signal_r+0x5c>
1000abcc:	2080b717 	ldw	r2,732(r4)
1000abd0:	defffc04 	addi	sp,sp,-16
1000abd4:	dc800215 	stw	r18,8(sp)
1000abd8:	dc400115 	stw	r17,4(sp)
1000abdc:	dc000015 	stw	r16,0(sp)
1000abe0:	dfc00315 	stw	ra,12(sp)
1000abe4:	3023883a 	mov	r17,r6
1000abe8:	2021883a 	mov	r16,r4
1000abec:	2825883a 	mov	r18,r5
1000abf0:	10000f26 	beq	r2,zero,1000ac30 <_signal_r+0x6c>
1000abf4:	948b883a 	add	r5,r18,r18
1000abf8:	294b883a 	add	r5,r5,r5
1000abfc:	114b883a 	add	r5,r2,r5
1000ac00:	28800017 	ldw	r2,0(r5)
1000ac04:	2c400015 	stw	r17,0(r5)
1000ac08:	dfc00317 	ldw	ra,12(sp)
1000ac0c:	dc800217 	ldw	r18,8(sp)
1000ac10:	dc400117 	ldw	r17,4(sp)
1000ac14:	dc000017 	ldw	r16,0(sp)
1000ac18:	dec00404 	addi	sp,sp,16
1000ac1c:	f800283a 	ret
1000ac20:	00c00584 	movi	r3,22
1000ac24:	20c00015 	stw	r3,0(r4)
1000ac28:	00bfffc4 	movi	r2,-1
1000ac2c:	f800283a 	ret
1000ac30:	000ab580 	call	1000ab58 <_init_signal_r>
1000ac34:	1000021e 	bne	r2,zero,1000ac40 <_signal_r+0x7c>
1000ac38:	8080b717 	ldw	r2,732(r16)
1000ac3c:	003fed06 	br	1000abf4 <__alt_data_end+0xf800abf4>
1000ac40:	00bfffc4 	movi	r2,-1
1000ac44:	003ff006 	br	1000ac08 <__alt_data_end+0xf800ac08>

1000ac48 <_raise_r>:
1000ac48:	008007c4 	movi	r2,31
1000ac4c:	11402936 	bltu	r2,r5,1000acf4 <_raise_r+0xac>
1000ac50:	20c0b717 	ldw	r3,732(r4)
1000ac54:	defffd04 	addi	sp,sp,-12
1000ac58:	dc400115 	stw	r17,4(sp)
1000ac5c:	dc000015 	stw	r16,0(sp)
1000ac60:	dfc00215 	stw	ra,8(sp)
1000ac64:	2021883a 	mov	r16,r4
1000ac68:	2823883a 	mov	r17,r5
1000ac6c:	18001726 	beq	r3,zero,1000accc <_raise_r+0x84>
1000ac70:	2945883a 	add	r2,r5,r5
1000ac74:	1085883a 	add	r2,r2,r2
1000ac78:	1887883a 	add	r3,r3,r2
1000ac7c:	19800017 	ldw	r6,0(r3)
1000ac80:	30001226 	beq	r6,zero,1000accc <_raise_r+0x84>
1000ac84:	00800044 	movi	r2,1
1000ac88:	30800e26 	beq	r6,r2,1000acc4 <_raise_r+0x7c>
1000ac8c:	013fffc4 	movi	r4,-1
1000ac90:	31000926 	beq	r6,r4,1000acb8 <_raise_r+0x70>
1000ac94:	18000015 	stw	zero,0(r3)
1000ac98:	2809883a 	mov	r4,r5
1000ac9c:	303ee83a 	callr	r6
1000aca0:	0005883a 	mov	r2,zero
1000aca4:	dfc00217 	ldw	ra,8(sp)
1000aca8:	dc400117 	ldw	r17,4(sp)
1000acac:	dc000017 	ldw	r16,0(sp)
1000acb0:	dec00304 	addi	sp,sp,12
1000acb4:	f800283a 	ret
1000acb8:	00c00584 	movi	r3,22
1000acbc:	80c00015 	stw	r3,0(r16)
1000acc0:	003ff806 	br	1000aca4 <__alt_data_end+0xf800aca4>
1000acc4:	0005883a 	mov	r2,zero
1000acc8:	003ff606 	br	1000aca4 <__alt_data_end+0xf800aca4>
1000accc:	8009883a 	mov	r4,r16
1000acd0:	000ae580 	call	1000ae58 <_getpid_r>
1000acd4:	880d883a 	mov	r6,r17
1000acd8:	100b883a 	mov	r5,r2
1000acdc:	8009883a 	mov	r4,r16
1000ace0:	dfc00217 	ldw	ra,8(sp)
1000ace4:	dc400117 	ldw	r17,4(sp)
1000ace8:	dc000017 	ldw	r16,0(sp)
1000acec:	dec00304 	addi	sp,sp,12
1000acf0:	000adfc1 	jmpi	1000adfc <_kill_r>
1000acf4:	00800584 	movi	r2,22
1000acf8:	20800015 	stw	r2,0(r4)
1000acfc:	00bfffc4 	movi	r2,-1
1000ad00:	f800283a 	ret

1000ad04 <__sigtramp_r>:
1000ad04:	008007c4 	movi	r2,31
1000ad08:	11402436 	bltu	r2,r5,1000ad9c <__sigtramp_r+0x98>
1000ad0c:	20c0b717 	ldw	r3,732(r4)
1000ad10:	defffd04 	addi	sp,sp,-12
1000ad14:	dc400115 	stw	r17,4(sp)
1000ad18:	dc000015 	stw	r16,0(sp)
1000ad1c:	dfc00215 	stw	ra,8(sp)
1000ad20:	2021883a 	mov	r16,r4
1000ad24:	2823883a 	mov	r17,r5
1000ad28:	18001826 	beq	r3,zero,1000ad8c <__sigtramp_r+0x88>
1000ad2c:	8c45883a 	add	r2,r17,r17
1000ad30:	1085883a 	add	r2,r2,r2
1000ad34:	1885883a 	add	r2,r3,r2
1000ad38:	10c00017 	ldw	r3,0(r2)
1000ad3c:	18001126 	beq	r3,zero,1000ad84 <__sigtramp_r+0x80>
1000ad40:	013fffc4 	movi	r4,-1
1000ad44:	19000d26 	beq	r3,r4,1000ad7c <__sigtramp_r+0x78>
1000ad48:	01000044 	movi	r4,1
1000ad4c:	19000926 	beq	r3,r4,1000ad74 <__sigtramp_r+0x70>
1000ad50:	10000015 	stw	zero,0(r2)
1000ad54:	8809883a 	mov	r4,r17
1000ad58:	183ee83a 	callr	r3
1000ad5c:	0005883a 	mov	r2,zero
1000ad60:	dfc00217 	ldw	ra,8(sp)
1000ad64:	dc400117 	ldw	r17,4(sp)
1000ad68:	dc000017 	ldw	r16,0(sp)
1000ad6c:	dec00304 	addi	sp,sp,12
1000ad70:	f800283a 	ret
1000ad74:	008000c4 	movi	r2,3
1000ad78:	003ff906 	br	1000ad60 <__alt_data_end+0xf800ad60>
1000ad7c:	00800084 	movi	r2,2
1000ad80:	003ff706 	br	1000ad60 <__alt_data_end+0xf800ad60>
1000ad84:	00800044 	movi	r2,1
1000ad88:	003ff506 	br	1000ad60 <__alt_data_end+0xf800ad60>
1000ad8c:	000ab580 	call	1000ab58 <_init_signal_r>
1000ad90:	1000041e 	bne	r2,zero,1000ada4 <__sigtramp_r+0xa0>
1000ad94:	80c0b717 	ldw	r3,732(r16)
1000ad98:	003fe406 	br	1000ad2c <__alt_data_end+0xf800ad2c>
1000ad9c:	00bfffc4 	movi	r2,-1
1000ada0:	f800283a 	ret
1000ada4:	00bfffc4 	movi	r2,-1
1000ada8:	003fed06 	br	1000ad60 <__alt_data_end+0xf800ad60>

1000adac <raise>:
1000adac:	00840074 	movhi	r2,4097
1000adb0:	1092eb04 	addi	r2,r2,19372
1000adb4:	200b883a 	mov	r5,r4
1000adb8:	11000017 	ldw	r4,0(r2)
1000adbc:	000ac481 	jmpi	1000ac48 <_raise_r>

1000adc0 <signal>:
1000adc0:	00840074 	movhi	r2,4097
1000adc4:	1092eb04 	addi	r2,r2,19372
1000adc8:	280d883a 	mov	r6,r5
1000adcc:	200b883a 	mov	r5,r4
1000add0:	11000017 	ldw	r4,0(r2)
1000add4:	000abc41 	jmpi	1000abc4 <_signal_r>

1000add8 <_init_signal>:
1000add8:	00840074 	movhi	r2,4097
1000addc:	1092eb04 	addi	r2,r2,19372
1000ade0:	11000017 	ldw	r4,0(r2)
1000ade4:	000ab581 	jmpi	1000ab58 <_init_signal_r>

1000ade8 <__sigtramp>:
1000ade8:	00840074 	movhi	r2,4097
1000adec:	1092eb04 	addi	r2,r2,19372
1000adf0:	200b883a 	mov	r5,r4
1000adf4:	11000017 	ldw	r4,0(r2)
1000adf8:	000ad041 	jmpi	1000ad04 <__sigtramp_r>

1000adfc <_kill_r>:
1000adfc:	defffd04 	addi	sp,sp,-12
1000ae00:	2805883a 	mov	r2,r5
1000ae04:	dc000015 	stw	r16,0(sp)
1000ae08:	04040074 	movhi	r16,4097
1000ae0c:	dc400115 	stw	r17,4(sp)
1000ae10:	841a2104 	addi	r16,r16,26756
1000ae14:	2023883a 	mov	r17,r4
1000ae18:	300b883a 	mov	r5,r6
1000ae1c:	1009883a 	mov	r4,r2
1000ae20:	dfc00215 	stw	ra,8(sp)
1000ae24:	80000015 	stw	zero,0(r16)
1000ae28:	00103880 	call	10010388 <kill>
1000ae2c:	00ffffc4 	movi	r3,-1
1000ae30:	10c00526 	beq	r2,r3,1000ae48 <_kill_r+0x4c>
1000ae34:	dfc00217 	ldw	ra,8(sp)
1000ae38:	dc400117 	ldw	r17,4(sp)
1000ae3c:	dc000017 	ldw	r16,0(sp)
1000ae40:	dec00304 	addi	sp,sp,12
1000ae44:	f800283a 	ret
1000ae48:	80c00017 	ldw	r3,0(r16)
1000ae4c:	183ff926 	beq	r3,zero,1000ae34 <__alt_data_end+0xf800ae34>
1000ae50:	88c00015 	stw	r3,0(r17)
1000ae54:	003ff706 	br	1000ae34 <__alt_data_end+0xf800ae34>

1000ae58 <_getpid_r>:
1000ae58:	00102441 	jmpi	10010244 <getpid>

1000ae5c <strcmp>:
1000ae5c:	2144b03a 	or	r2,r4,r5
1000ae60:	108000cc 	andi	r2,r2,3
1000ae64:	1000171e 	bne	r2,zero,1000aec4 <strcmp+0x68>
1000ae68:	20800017 	ldw	r2,0(r4)
1000ae6c:	28c00017 	ldw	r3,0(r5)
1000ae70:	10c0141e 	bne	r2,r3,1000aec4 <strcmp+0x68>
1000ae74:	027fbff4 	movhi	r9,65279
1000ae78:	4a7fbfc4 	addi	r9,r9,-257
1000ae7c:	0086303a 	nor	r3,zero,r2
1000ae80:	02202074 	movhi	r8,32897
1000ae84:	1245883a 	add	r2,r2,r9
1000ae88:	42202004 	addi	r8,r8,-32640
1000ae8c:	10c4703a 	and	r2,r2,r3
1000ae90:	1204703a 	and	r2,r2,r8
1000ae94:	10000226 	beq	r2,zero,1000aea0 <strcmp+0x44>
1000ae98:	00002306 	br	1000af28 <strcmp+0xcc>
1000ae9c:	1000221e 	bne	r2,zero,1000af28 <strcmp+0xcc>
1000aea0:	21000104 	addi	r4,r4,4
1000aea4:	20c00017 	ldw	r3,0(r4)
1000aea8:	29400104 	addi	r5,r5,4
1000aeac:	29800017 	ldw	r6,0(r5)
1000aeb0:	1a4f883a 	add	r7,r3,r9
1000aeb4:	00c4303a 	nor	r2,zero,r3
1000aeb8:	3884703a 	and	r2,r7,r2
1000aebc:	1204703a 	and	r2,r2,r8
1000aec0:	19bff626 	beq	r3,r6,1000ae9c <__alt_data_end+0xf800ae9c>
1000aec4:	20800003 	ldbu	r2,0(r4)
1000aec8:	10c03fcc 	andi	r3,r2,255
1000aecc:	18c0201c 	xori	r3,r3,128
1000aed0:	18ffe004 	addi	r3,r3,-128
1000aed4:	18000c26 	beq	r3,zero,1000af08 <strcmp+0xac>
1000aed8:	29800007 	ldb	r6,0(r5)
1000aedc:	19800326 	beq	r3,r6,1000aeec <strcmp+0x90>
1000aee0:	00001306 	br	1000af30 <strcmp+0xd4>
1000aee4:	29800007 	ldb	r6,0(r5)
1000aee8:	11800b1e 	bne	r2,r6,1000af18 <strcmp+0xbc>
1000aeec:	21000044 	addi	r4,r4,1
1000aef0:	20c00003 	ldbu	r3,0(r4)
1000aef4:	29400044 	addi	r5,r5,1
1000aef8:	18803fcc 	andi	r2,r3,255
1000aefc:	1080201c 	xori	r2,r2,128
1000af00:	10bfe004 	addi	r2,r2,-128
1000af04:	103ff71e 	bne	r2,zero,1000aee4 <__alt_data_end+0xf800aee4>
1000af08:	0007883a 	mov	r3,zero
1000af0c:	28800003 	ldbu	r2,0(r5)
1000af10:	1885c83a 	sub	r2,r3,r2
1000af14:	f800283a 	ret
1000af18:	28800003 	ldbu	r2,0(r5)
1000af1c:	18c03fcc 	andi	r3,r3,255
1000af20:	1885c83a 	sub	r2,r3,r2
1000af24:	f800283a 	ret
1000af28:	0005883a 	mov	r2,zero
1000af2c:	f800283a 	ret
1000af30:	10c03fcc 	andi	r3,r2,255
1000af34:	003ff506 	br	1000af0c <__alt_data_end+0xf800af0c>

1000af38 <__sprint_r.part.0>:
1000af38:	28801917 	ldw	r2,100(r5)
1000af3c:	defff604 	addi	sp,sp,-40
1000af40:	dd400515 	stw	r21,20(sp)
1000af44:	dfc00915 	stw	ra,36(sp)
1000af48:	df000815 	stw	fp,32(sp)
1000af4c:	ddc00715 	stw	r23,28(sp)
1000af50:	dd800615 	stw	r22,24(sp)
1000af54:	dd000415 	stw	r20,16(sp)
1000af58:	dcc00315 	stw	r19,12(sp)
1000af5c:	dc800215 	stw	r18,8(sp)
1000af60:	dc400115 	stw	r17,4(sp)
1000af64:	dc000015 	stw	r16,0(sp)
1000af68:	1088000c 	andi	r2,r2,8192
1000af6c:	302b883a 	mov	r21,r6
1000af70:	10002e26 	beq	r2,zero,1000b02c <__sprint_r.part.0+0xf4>
1000af74:	30800217 	ldw	r2,8(r6)
1000af78:	35800017 	ldw	r22,0(r6)
1000af7c:	10002926 	beq	r2,zero,1000b024 <__sprint_r.part.0+0xec>
1000af80:	2827883a 	mov	r19,r5
1000af84:	2029883a 	mov	r20,r4
1000af88:	b5c00104 	addi	r23,r22,4
1000af8c:	04bfffc4 	movi	r18,-1
1000af90:	bc400017 	ldw	r17,0(r23)
1000af94:	b4000017 	ldw	r16,0(r22)
1000af98:	0039883a 	mov	fp,zero
1000af9c:	8822d0ba 	srli	r17,r17,2
1000afa0:	8800031e 	bne	r17,zero,1000afb0 <__sprint_r.part.0+0x78>
1000afa4:	00001806 	br	1000b008 <__sprint_r.part.0+0xd0>
1000afa8:	84000104 	addi	r16,r16,4
1000afac:	8f001526 	beq	r17,fp,1000b004 <__sprint_r.part.0+0xcc>
1000afb0:	81400017 	ldw	r5,0(r16)
1000afb4:	980d883a 	mov	r6,r19
1000afb8:	a009883a 	mov	r4,r20
1000afbc:	000c8ec0 	call	1000c8ec <_fputwc_r>
1000afc0:	e7000044 	addi	fp,fp,1
1000afc4:	14bff81e 	bne	r2,r18,1000afa8 <__alt_data_end+0xf800afa8>
1000afc8:	9005883a 	mov	r2,r18
1000afcc:	a8000215 	stw	zero,8(r21)
1000afd0:	a8000115 	stw	zero,4(r21)
1000afd4:	dfc00917 	ldw	ra,36(sp)
1000afd8:	df000817 	ldw	fp,32(sp)
1000afdc:	ddc00717 	ldw	r23,28(sp)
1000afe0:	dd800617 	ldw	r22,24(sp)
1000afe4:	dd400517 	ldw	r21,20(sp)
1000afe8:	dd000417 	ldw	r20,16(sp)
1000afec:	dcc00317 	ldw	r19,12(sp)
1000aff0:	dc800217 	ldw	r18,8(sp)
1000aff4:	dc400117 	ldw	r17,4(sp)
1000aff8:	dc000017 	ldw	r16,0(sp)
1000affc:	dec00a04 	addi	sp,sp,40
1000b000:	f800283a 	ret
1000b004:	a8800217 	ldw	r2,8(r21)
1000b008:	8c63883a 	add	r17,r17,r17
1000b00c:	8c63883a 	add	r17,r17,r17
1000b010:	1445c83a 	sub	r2,r2,r17
1000b014:	a8800215 	stw	r2,8(r21)
1000b018:	b5800204 	addi	r22,r22,8
1000b01c:	bdc00204 	addi	r23,r23,8
1000b020:	103fdb1e 	bne	r2,zero,1000af90 <__alt_data_end+0xf800af90>
1000b024:	0005883a 	mov	r2,zero
1000b028:	003fe806 	br	1000afcc <__alt_data_end+0xf800afcc>
1000b02c:	0008fcc0 	call	10008fcc <__sfvwrite_r>
1000b030:	003fe606 	br	1000afcc <__alt_data_end+0xf800afcc>

1000b034 <__sprint_r>:
1000b034:	30c00217 	ldw	r3,8(r6)
1000b038:	18000126 	beq	r3,zero,1000b040 <__sprint_r+0xc>
1000b03c:	000af381 	jmpi	1000af38 <__sprint_r.part.0>
1000b040:	30000115 	stw	zero,4(r6)
1000b044:	0005883a 	mov	r2,zero
1000b048:	f800283a 	ret

1000b04c <___vfiprintf_internal_r>:
1000b04c:	deffca04 	addi	sp,sp,-216
1000b050:	dd403115 	stw	r21,196(sp)
1000b054:	dfc03515 	stw	ra,212(sp)
1000b058:	df003415 	stw	fp,208(sp)
1000b05c:	ddc03315 	stw	r23,204(sp)
1000b060:	dd803215 	stw	r22,200(sp)
1000b064:	dd003015 	stw	r20,192(sp)
1000b068:	dcc02f15 	stw	r19,188(sp)
1000b06c:	dc802e15 	stw	r18,184(sp)
1000b070:	dc402d15 	stw	r17,180(sp)
1000b074:	dc002c15 	stw	r16,176(sp)
1000b078:	d9002115 	stw	r4,132(sp)
1000b07c:	d9402015 	stw	r5,128(sp)
1000b080:	d9c02215 	stw	r7,136(sp)
1000b084:	302b883a 	mov	r21,r6
1000b088:	20000226 	beq	r4,zero,1000b094 <___vfiprintf_internal_r+0x48>
1000b08c:	20800e17 	ldw	r2,56(r4)
1000b090:	1000cf26 	beq	r2,zero,1000b3d0 <___vfiprintf_internal_r+0x384>
1000b094:	d8c02017 	ldw	r3,128(sp)
1000b098:	1880030b 	ldhu	r2,12(r3)
1000b09c:	10c8000c 	andi	r3,r2,8192
1000b0a0:	1800071e 	bne	r3,zero,1000b0c0 <___vfiprintf_internal_r+0x74>
1000b0a4:	d9402017 	ldw	r5,128(sp)
1000b0a8:	00f7ffc4 	movi	r3,-8193
1000b0ac:	10880014 	ori	r2,r2,8192
1000b0b0:	29001917 	ldw	r4,100(r5)
1000b0b4:	2880030d 	sth	r2,12(r5)
1000b0b8:	20c6703a 	and	r3,r4,r3
1000b0bc:	28c01915 	stw	r3,100(r5)
1000b0c0:	10c0020c 	andi	r3,r2,8
1000b0c4:	1800a526 	beq	r3,zero,1000b35c <___vfiprintf_internal_r+0x310>
1000b0c8:	d9002017 	ldw	r4,128(sp)
1000b0cc:	20c00417 	ldw	r3,16(r4)
1000b0d0:	1800a226 	beq	r3,zero,1000b35c <___vfiprintf_internal_r+0x310>
1000b0d4:	1080068c 	andi	r2,r2,26
1000b0d8:	00c00284 	movi	r3,10
1000b0dc:	10c0a826 	beq	r2,r3,1000b380 <___vfiprintf_internal_r+0x334>
1000b0e0:	d9001a04 	addi	r4,sp,104
1000b0e4:	d94019c4 	addi	r5,sp,103
1000b0e8:	04840074 	movhi	r18,4097
1000b0ec:	2145c83a 	sub	r2,r4,r5
1000b0f0:	948ba004 	addi	r18,r18,11904
1000b0f4:	d9001e15 	stw	r4,120(sp)
1000b0f8:	d9401f15 	stw	r5,124(sp)
1000b0fc:	dec01a15 	stw	sp,104(sp)
1000b100:	d8001c15 	stw	zero,112(sp)
1000b104:	d8001b15 	stw	zero,108(sp)
1000b108:	d811883a 	mov	r8,sp
1000b10c:	d8002615 	stw	zero,152(sp)
1000b110:	d8002415 	stw	zero,144(sp)
1000b114:	d8802815 	stw	r2,160(sp)
1000b118:	a82d883a 	mov	r22,r21
1000b11c:	b0800007 	ldb	r2,0(r22)
1000b120:	10040d26 	beq	r2,zero,1000c158 <___vfiprintf_internal_r+0x110c>
1000b124:	00c00944 	movi	r3,37
1000b128:	b029883a 	mov	r20,r22
1000b12c:	10c0021e 	bne	r2,r3,1000b138 <___vfiprintf_internal_r+0xec>
1000b130:	00001606 	br	1000b18c <___vfiprintf_internal_r+0x140>
1000b134:	10c00326 	beq	r2,r3,1000b144 <___vfiprintf_internal_r+0xf8>
1000b138:	a5000044 	addi	r20,r20,1
1000b13c:	a0800007 	ldb	r2,0(r20)
1000b140:	103ffc1e 	bne	r2,zero,1000b134 <__alt_data_end+0xf800b134>
1000b144:	a5a1c83a 	sub	r16,r20,r22
1000b148:	80001026 	beq	r16,zero,1000b18c <___vfiprintf_internal_r+0x140>
1000b14c:	d8c01c17 	ldw	r3,112(sp)
1000b150:	d8801b17 	ldw	r2,108(sp)
1000b154:	45800015 	stw	r22,0(r8)
1000b158:	80c7883a 	add	r3,r16,r3
1000b15c:	10800044 	addi	r2,r2,1
1000b160:	44000115 	stw	r16,4(r8)
1000b164:	d8c01c15 	stw	r3,112(sp)
1000b168:	d8801b15 	stw	r2,108(sp)
1000b16c:	010001c4 	movi	r4,7
1000b170:	2080750e 	bge	r4,r2,1000b348 <___vfiprintf_internal_r+0x2fc>
1000b174:	1803951e 	bne	r3,zero,1000bfcc <___vfiprintf_internal_r+0xf80>
1000b178:	d8c02417 	ldw	r3,144(sp)
1000b17c:	d8001b15 	stw	zero,108(sp)
1000b180:	d811883a 	mov	r8,sp
1000b184:	1c07883a 	add	r3,r3,r16
1000b188:	d8c02415 	stw	r3,144(sp)
1000b18c:	a0800007 	ldb	r2,0(r20)
1000b190:	1002e026 	beq	r2,zero,1000bd14 <___vfiprintf_internal_r+0xcc8>
1000b194:	a5800044 	addi	r22,r20,1
1000b198:	a0c00047 	ldb	r3,1(r20)
1000b19c:	d8001d85 	stb	zero,118(sp)
1000b1a0:	0027883a 	mov	r19,zero
1000b1a4:	d8002305 	stb	zero,140(sp)
1000b1a8:	043fffc4 	movi	r16,-1
1000b1ac:	d8002515 	stw	zero,148(sp)
1000b1b0:	0023883a 	mov	r17,zero
1000b1b4:	05001604 	movi	r20,88
1000b1b8:	05400244 	movi	r21,9
1000b1bc:	402f883a 	mov	r23,r8
1000b1c0:	b5800044 	addi	r22,r22,1
1000b1c4:	18bff804 	addi	r2,r3,-32
1000b1c8:	a0827736 	bltu	r20,r2,1000bba8 <___vfiprintf_internal_r+0xb5c>
1000b1cc:	100490ba 	slli	r2,r2,2
1000b1d0:	01040074 	movhi	r4,4097
1000b1d4:	212c7904 	addi	r4,r4,-19996
1000b1d8:	1105883a 	add	r2,r2,r4
1000b1dc:	10800017 	ldw	r2,0(r2)
1000b1e0:	1000683a 	jmp	r2
1000b1e4:	1000b8a8 	cmpgeui	zero,r2,738
1000b1e8:	1000bba8 	cmpgeui	zero,r2,750
1000b1ec:	1000bba8 	cmpgeui	zero,r2,750
1000b1f0:	1000b8c4 	addi	zero,r2,739
1000b1f4:	1000bba8 	cmpgeui	zero,r2,750
1000b1f8:	1000bba8 	cmpgeui	zero,r2,750
1000b1fc:	1000bba8 	cmpgeui	zero,r2,750
1000b200:	1000bba8 	cmpgeui	zero,r2,750
1000b204:	1000bba8 	cmpgeui	zero,r2,750
1000b208:	1000bba8 	cmpgeui	zero,r2,750
1000b20c:	1000bacc 	andi	zero,r2,747
1000b210:	1000baf0 	cmpltui	zero,r2,747
1000b214:	1000bba8 	cmpgeui	zero,r2,750
1000b218:	1000b3e8 	cmpgeui	zero,r2,719
1000b21c:	1000bb04 	addi	zero,r2,748
1000b220:	1000bba8 	cmpgeui	zero,r2,750
1000b224:	1000b8d0 	cmplti	zero,r2,739
1000b228:	1000b8dc 	xori	zero,r2,739
1000b22c:	1000b8dc 	xori	zero,r2,739
1000b230:	1000b8dc 	xori	zero,r2,739
1000b234:	1000b8dc 	xori	zero,r2,739
1000b238:	1000b8dc 	xori	zero,r2,739
1000b23c:	1000b8dc 	xori	zero,r2,739
1000b240:	1000b8dc 	xori	zero,r2,739
1000b244:	1000b8dc 	xori	zero,r2,739
1000b248:	1000b8dc 	xori	zero,r2,739
1000b24c:	1000bba8 	cmpgeui	zero,r2,750
1000b250:	1000bba8 	cmpgeui	zero,r2,750
1000b254:	1000bba8 	cmpgeui	zero,r2,750
1000b258:	1000bba8 	cmpgeui	zero,r2,750
1000b25c:	1000bba8 	cmpgeui	zero,r2,750
1000b260:	1000bba8 	cmpgeui	zero,r2,750
1000b264:	1000bba8 	cmpgeui	zero,r2,750
1000b268:	1000bba8 	cmpgeui	zero,r2,750
1000b26c:	1000bba8 	cmpgeui	zero,r2,750
1000b270:	1000bba8 	cmpgeui	zero,r2,750
1000b274:	1000b91c 	xori	zero,r2,740
1000b278:	1000bba8 	cmpgeui	zero,r2,750
1000b27c:	1000bba8 	cmpgeui	zero,r2,750
1000b280:	1000bba8 	cmpgeui	zero,r2,750
1000b284:	1000bba8 	cmpgeui	zero,r2,750
1000b288:	1000bba8 	cmpgeui	zero,r2,750
1000b28c:	1000bba8 	cmpgeui	zero,r2,750
1000b290:	1000bba8 	cmpgeui	zero,r2,750
1000b294:	1000bba8 	cmpgeui	zero,r2,750
1000b298:	1000bba8 	cmpgeui	zero,r2,750
1000b29c:	1000bba8 	cmpgeui	zero,r2,750
1000b2a0:	1000b958 	cmpnei	zero,r2,741
1000b2a4:	1000bba8 	cmpgeui	zero,r2,750
1000b2a8:	1000bba8 	cmpgeui	zero,r2,750
1000b2ac:	1000bba8 	cmpgeui	zero,r2,750
1000b2b0:	1000bba8 	cmpgeui	zero,r2,750
1000b2b4:	1000bba8 	cmpgeui	zero,r2,750
1000b2b8:	1000b9b4 	orhi	zero,r2,742
1000b2bc:	1000bba8 	cmpgeui	zero,r2,750
1000b2c0:	1000bba8 	cmpgeui	zero,r2,750
1000b2c4:	1000ba28 	cmpgeui	zero,r2,744
1000b2c8:	1000bba8 	cmpgeui	zero,r2,750
1000b2cc:	1000bba8 	cmpgeui	zero,r2,750
1000b2d0:	1000bba8 	cmpgeui	zero,r2,750
1000b2d4:	1000bba8 	cmpgeui	zero,r2,750
1000b2d8:	1000bba8 	cmpgeui	zero,r2,750
1000b2dc:	1000bba8 	cmpgeui	zero,r2,750
1000b2e0:	1000bba8 	cmpgeui	zero,r2,750
1000b2e4:	1000bba8 	cmpgeui	zero,r2,750
1000b2e8:	1000bba8 	cmpgeui	zero,r2,750
1000b2ec:	1000bba8 	cmpgeui	zero,r2,750
1000b2f0:	1000b7d0 	cmplti	zero,r2,735
1000b2f4:	1000b800 	call	11000b80 <_gp+0xfe3fd8>
1000b2f8:	1000bba8 	cmpgeui	zero,r2,750
1000b2fc:	1000bba8 	cmpgeui	zero,r2,750
1000b300:	1000bba8 	cmpgeui	zero,r2,750
1000b304:	1000bb50 	cmplti	zero,r2,749
1000b308:	1000b800 	call	11000b80 <_gp+0xfe3fd8>
1000b30c:	1000bba8 	cmpgeui	zero,r2,750
1000b310:	1000bba8 	cmpgeui	zero,r2,750
1000b314:	1000b6a8 	cmpgeui	zero,r2,730
1000b318:	1000bba8 	cmpgeui	zero,r2,750
1000b31c:	1000b6bc 	xorhi	zero,r2,730
1000b320:	1000b6f4 	orhi	zero,r2,731
1000b324:	1000b3f4 	orhi	zero,r2,719
1000b328:	1000b69c 	xori	zero,r2,730
1000b32c:	1000bba8 	cmpgeui	zero,r2,750
1000b330:	1000ba68 	cmpgeui	zero,r2,745
1000b334:	1000bba8 	cmpgeui	zero,r2,750
1000b338:	1000bab4 	orhi	zero,r2,746
1000b33c:	1000bba8 	cmpgeui	zero,r2,750
1000b340:	1000bba8 	cmpgeui	zero,r2,750
1000b344:	1000b778 	rdprs	zero,r2,733
1000b348:	42000204 	addi	r8,r8,8
1000b34c:	d8c02417 	ldw	r3,144(sp)
1000b350:	1c07883a 	add	r3,r3,r16
1000b354:	d8c02415 	stw	r3,144(sp)
1000b358:	003f8c06 	br	1000b18c <__alt_data_end+0xf800b18c>
1000b35c:	d9402017 	ldw	r5,128(sp)
1000b360:	d9002117 	ldw	r4,132(sp)
1000b364:	00073300 	call	10007330 <__swsetup_r>
1000b368:	1003c11e 	bne	r2,zero,1000c270 <___vfiprintf_internal_r+0x1224>
1000b36c:	d9402017 	ldw	r5,128(sp)
1000b370:	00c00284 	movi	r3,10
1000b374:	2880030b 	ldhu	r2,12(r5)
1000b378:	1080068c 	andi	r2,r2,26
1000b37c:	10ff581e 	bne	r2,r3,1000b0e0 <__alt_data_end+0xf800b0e0>
1000b380:	d8c02017 	ldw	r3,128(sp)
1000b384:	1880038f 	ldh	r2,14(r3)
1000b388:	103f5516 	blt	r2,zero,1000b0e0 <__alt_data_end+0xf800b0e0>
1000b38c:	d9c02217 	ldw	r7,136(sp)
1000b390:	d9002117 	ldw	r4,132(sp)
1000b394:	a80d883a 	mov	r6,r21
1000b398:	180b883a 	mov	r5,r3
1000b39c:	000c5740 	call	1000c574 <__sbprintf>
1000b3a0:	dfc03517 	ldw	ra,212(sp)
1000b3a4:	df003417 	ldw	fp,208(sp)
1000b3a8:	ddc03317 	ldw	r23,204(sp)
1000b3ac:	dd803217 	ldw	r22,200(sp)
1000b3b0:	dd403117 	ldw	r21,196(sp)
1000b3b4:	dd003017 	ldw	r20,192(sp)
1000b3b8:	dcc02f17 	ldw	r19,188(sp)
1000b3bc:	dc802e17 	ldw	r18,184(sp)
1000b3c0:	dc402d17 	ldw	r17,180(sp)
1000b3c4:	dc002c17 	ldw	r16,176(sp)
1000b3c8:	dec03604 	addi	sp,sp,216
1000b3cc:	f800283a 	ret
1000b3d0:	000261c0 	call	1000261c <__sinit>
1000b3d4:	003f2f06 	br	1000b094 <__alt_data_end+0xf800b094>
1000b3d8:	d8c02517 	ldw	r3,148(sp)
1000b3dc:	d8802215 	stw	r2,136(sp)
1000b3e0:	00c7c83a 	sub	r3,zero,r3
1000b3e4:	d8c02515 	stw	r3,148(sp)
1000b3e8:	8c400114 	ori	r17,r17,4
1000b3ec:	b0c00007 	ldb	r3,0(r22)
1000b3f0:	003f7306 	br	1000b1c0 <__alt_data_end+0xf800b1c0>
1000b3f4:	00800c04 	movi	r2,48
1000b3f8:	d9402217 	ldw	r5,136(sp)
1000b3fc:	d8801d05 	stb	r2,116(sp)
1000b400:	00801e04 	movi	r2,120
1000b404:	d8801d45 	stb	r2,117(sp)
1000b408:	d8001d85 	stb	zero,118(sp)
1000b40c:	b811883a 	mov	r8,r23
1000b410:	28c00104 	addi	r3,r5,4
1000b414:	2cc00017 	ldw	r19,0(r5)
1000b418:	0029883a 	mov	r20,zero
1000b41c:	88800094 	ori	r2,r17,2
1000b420:	80032516 	blt	r16,zero,1000c0b8 <___vfiprintf_internal_r+0x106c>
1000b424:	00bfdfc4 	movi	r2,-129
1000b428:	88a2703a 	and	r17,r17,r2
1000b42c:	d8c02215 	stw	r3,136(sp)
1000b430:	8c400094 	ori	r17,r17,2
1000b434:	98032a1e 	bne	r19,zero,1000c0e0 <___vfiprintf_internal_r+0x1094>
1000b438:	00840074 	movhi	r2,4097
1000b43c:	108b4004 	addi	r2,r2,11520
1000b440:	d8802615 	stw	r2,152(sp)
1000b444:	002b883a 	mov	r21,zero
1000b448:	8001741e 	bne	r16,zero,1000ba1c <___vfiprintf_internal_r+0x9d0>
1000b44c:	0021883a 	mov	r16,zero
1000b450:	0029883a 	mov	r20,zero
1000b454:	ddc01a04 	addi	r23,sp,104
1000b458:	8027883a 	mov	r19,r16
1000b45c:	8500010e 	bge	r16,r20,1000b464 <___vfiprintf_internal_r+0x418>
1000b460:	a027883a 	mov	r19,r20
1000b464:	ad403fcc 	andi	r21,r21,255
1000b468:	ad40201c 	xori	r21,r21,128
1000b46c:	ad7fe004 	addi	r21,r21,-128
1000b470:	a8000126 	beq	r21,zero,1000b478 <___vfiprintf_internal_r+0x42c>
1000b474:	9cc00044 	addi	r19,r19,1
1000b478:	89c0008c 	andi	r7,r17,2
1000b47c:	38000126 	beq	r7,zero,1000b484 <___vfiprintf_internal_r+0x438>
1000b480:	9cc00084 	addi	r19,r19,2
1000b484:	88c0210c 	andi	r3,r17,132
1000b488:	1801dd1e 	bne	r3,zero,1000bc00 <___vfiprintf_internal_r+0xbb4>
1000b48c:	d9402517 	ldw	r5,148(sp)
1000b490:	2cebc83a 	sub	r21,r5,r19
1000b494:	0541da0e 	bge	zero,r21,1000bc00 <___vfiprintf_internal_r+0xbb4>
1000b498:	07000404 	movi	fp,16
1000b49c:	d8801c17 	ldw	r2,112(sp)
1000b4a0:	e543be0e 	bge	fp,r21,1000c39c <___vfiprintf_internal_r+0x1350>
1000b4a4:	01440074 	movhi	r5,4097
1000b4a8:	294ba404 	addi	r5,r5,11920
1000b4ac:	dc002715 	stw	r16,156(sp)
1000b4b0:	d9801b17 	ldw	r6,108(sp)
1000b4b4:	a821883a 	mov	r16,r21
1000b4b8:	d9402315 	stw	r5,140(sp)
1000b4bc:	028001c4 	movi	r10,7
1000b4c0:	d9c02915 	stw	r7,164(sp)
1000b4c4:	182b883a 	mov	r21,r3
1000b4c8:	00000506 	br	1000b4e0 <___vfiprintf_internal_r+0x494>
1000b4cc:	31000084 	addi	r4,r6,2
1000b4d0:	42000204 	addi	r8,r8,8
1000b4d4:	180d883a 	mov	r6,r3
1000b4d8:	843ffc04 	addi	r16,r16,-16
1000b4dc:	e4000f0e 	bge	fp,r16,1000b51c <___vfiprintf_internal_r+0x4d0>
1000b4e0:	01040074 	movhi	r4,4097
1000b4e4:	10800404 	addi	r2,r2,16
1000b4e8:	30c00044 	addi	r3,r6,1
1000b4ec:	210ba404 	addi	r4,r4,11920
1000b4f0:	41000015 	stw	r4,0(r8)
1000b4f4:	47000115 	stw	fp,4(r8)
1000b4f8:	d8801c15 	stw	r2,112(sp)
1000b4fc:	d8c01b15 	stw	r3,108(sp)
1000b500:	50fff20e 	bge	r10,r3,1000b4cc <__alt_data_end+0xf800b4cc>
1000b504:	1001b21e 	bne	r2,zero,1000bbd0 <___vfiprintf_internal_r+0xb84>
1000b508:	843ffc04 	addi	r16,r16,-16
1000b50c:	000d883a 	mov	r6,zero
1000b510:	01000044 	movi	r4,1
1000b514:	d811883a 	mov	r8,sp
1000b518:	e43ff116 	blt	fp,r16,1000b4e0 <__alt_data_end+0xf800b4e0>
1000b51c:	a807883a 	mov	r3,r21
1000b520:	d9c02917 	ldw	r7,164(sp)
1000b524:	802b883a 	mov	r21,r16
1000b528:	dc002717 	ldw	r16,156(sp)
1000b52c:	d9402317 	ldw	r5,140(sp)
1000b530:	a885883a 	add	r2,r21,r2
1000b534:	45400115 	stw	r21,4(r8)
1000b538:	41400015 	stw	r5,0(r8)
1000b53c:	d8801c15 	stw	r2,112(sp)
1000b540:	d9001b15 	stw	r4,108(sp)
1000b544:	014001c4 	movi	r5,7
1000b548:	29026216 	blt	r5,r4,1000bed4 <___vfiprintf_internal_r+0xe88>
1000b54c:	d9801d87 	ldb	r6,118(sp)
1000b550:	42000204 	addi	r8,r8,8
1000b554:	21400044 	addi	r5,r4,1
1000b558:	3001ae1e 	bne	r6,zero,1000bc14 <___vfiprintf_internal_r+0xbc8>
1000b55c:	3801bb26 	beq	r7,zero,1000bc4c <___vfiprintf_internal_r+0xc00>
1000b560:	d9001d04 	addi	r4,sp,116
1000b564:	10800084 	addi	r2,r2,2
1000b568:	41000015 	stw	r4,0(r8)
1000b56c:	01000084 	movi	r4,2
1000b570:	41000115 	stw	r4,4(r8)
1000b574:	d8801c15 	stw	r2,112(sp)
1000b578:	d9401b15 	stw	r5,108(sp)
1000b57c:	010001c4 	movi	r4,7
1000b580:	2142680e 	bge	r4,r5,1000bf24 <___vfiprintf_internal_r+0xed8>
1000b584:	1002b11e 	bne	r2,zero,1000c04c <___vfiprintf_internal_r+0x1000>
1000b588:	01802004 	movi	r6,128
1000b58c:	01400044 	movi	r5,1
1000b590:	0009883a 	mov	r4,zero
1000b594:	d811883a 	mov	r8,sp
1000b598:	1981ae1e 	bne	r3,r6,1000bc54 <___vfiprintf_internal_r+0xc08>
1000b59c:	d8c02517 	ldw	r3,148(sp)
1000b5a0:	1cf9c83a 	sub	fp,r3,r19
1000b5a4:	0701ab0e 	bge	zero,fp,1000bc54 <___vfiprintf_internal_r+0xc08>
1000b5a8:	05400404 	movi	r21,16
1000b5ac:	af03a90e 	bge	r21,fp,1000c454 <___vfiprintf_internal_r+0x1408>
1000b5b0:	01440074 	movhi	r5,4097
1000b5b4:	294ba004 	addi	r5,r5,11904
1000b5b8:	d9402315 	stw	r5,140(sp)
1000b5bc:	01c001c4 	movi	r7,7
1000b5c0:	00000506 	br	1000b5d8 <___vfiprintf_internal_r+0x58c>
1000b5c4:	21800084 	addi	r6,r4,2
1000b5c8:	42000204 	addi	r8,r8,8
1000b5cc:	1809883a 	mov	r4,r3
1000b5d0:	e73ffc04 	addi	fp,fp,-16
1000b5d4:	af000d0e 	bge	r21,fp,1000b60c <___vfiprintf_internal_r+0x5c0>
1000b5d8:	10800404 	addi	r2,r2,16
1000b5dc:	20c00044 	addi	r3,r4,1
1000b5e0:	44800015 	stw	r18,0(r8)
1000b5e4:	45400115 	stw	r21,4(r8)
1000b5e8:	d8801c15 	stw	r2,112(sp)
1000b5ec:	d8c01b15 	stw	r3,108(sp)
1000b5f0:	38fff40e 	bge	r7,r3,1000b5c4 <__alt_data_end+0xf800b5c4>
1000b5f4:	10022b1e 	bne	r2,zero,1000bea4 <___vfiprintf_internal_r+0xe58>
1000b5f8:	e73ffc04 	addi	fp,fp,-16
1000b5fc:	01800044 	movi	r6,1
1000b600:	0009883a 	mov	r4,zero
1000b604:	d811883a 	mov	r8,sp
1000b608:	af3ff316 	blt	r21,fp,1000b5d8 <__alt_data_end+0xf800b5d8>
1000b60c:	d8c02317 	ldw	r3,140(sp)
1000b610:	1705883a 	add	r2,r2,fp
1000b614:	47000115 	stw	fp,4(r8)
1000b618:	40c00015 	stw	r3,0(r8)
1000b61c:	d8801c15 	stw	r2,112(sp)
1000b620:	d9801b15 	stw	r6,108(sp)
1000b624:	00c001c4 	movi	r3,7
1000b628:	19829416 	blt	r3,r6,1000c07c <___vfiprintf_internal_r+0x1030>
1000b62c:	8521c83a 	sub	r16,r16,r20
1000b630:	42000204 	addi	r8,r8,8
1000b634:	31400044 	addi	r5,r6,1
1000b638:	3009883a 	mov	r4,r6
1000b63c:	04018716 	blt	zero,r16,1000bc5c <___vfiprintf_internal_r+0xc10>
1000b640:	a085883a 	add	r2,r20,r2
1000b644:	45c00015 	stw	r23,0(r8)
1000b648:	45000115 	stw	r20,4(r8)
1000b64c:	d8801c15 	stw	r2,112(sp)
1000b650:	d9401b15 	stw	r5,108(sp)
1000b654:	00c001c4 	movi	r3,7
1000b658:	1941c20e 	bge	r3,r5,1000bd64 <___vfiprintf_internal_r+0xd18>
1000b65c:	1002531e 	bne	r2,zero,1000bfac <___vfiprintf_internal_r+0xf60>
1000b660:	d8001b15 	stw	zero,108(sp)
1000b664:	8c40010c 	andi	r17,r17,4
1000b668:	88023226 	beq	r17,zero,1000bf34 <___vfiprintf_internal_r+0xee8>
1000b66c:	d9002517 	ldw	r4,148(sp)
1000b670:	24e3c83a 	sub	r17,r4,r19
1000b674:	04432916 	blt	zero,r17,1000c31c <___vfiprintf_internal_r+0x12d0>
1000b678:	d8802517 	ldw	r2,148(sp)
1000b67c:	14c0010e 	bge	r2,r19,1000b684 <___vfiprintf_internal_r+0x638>
1000b680:	9805883a 	mov	r2,r19
1000b684:	d8c02417 	ldw	r3,144(sp)
1000b688:	1887883a 	add	r3,r3,r2
1000b68c:	d8c02415 	stw	r3,144(sp)
1000b690:	d8001b15 	stw	zero,108(sp)
1000b694:	d811883a 	mov	r8,sp
1000b698:	003ea006 	br	1000b11c <__alt_data_end+0xf800b11c>
1000b69c:	8c400814 	ori	r17,r17,32
1000b6a0:	b0c00007 	ldb	r3,0(r22)
1000b6a4:	003ec606 	br	1000b1c0 <__alt_data_end+0xf800b1c0>
1000b6a8:	b0c00007 	ldb	r3,0(r22)
1000b6ac:	00801b04 	movi	r2,108
1000b6b0:	18832026 	beq	r3,r2,1000c334 <___vfiprintf_internal_r+0x12e8>
1000b6b4:	8c400414 	ori	r17,r17,16
1000b6b8:	003ec106 	br	1000b1c0 <__alt_data_end+0xf800b1c0>
1000b6bc:	9cc03fcc 	andi	r19,r19,255
1000b6c0:	b811883a 	mov	r8,r23
1000b6c4:	9803981e 	bne	r19,zero,1000c528 <___vfiprintf_internal_r+0x14dc>
1000b6c8:	8880080c 	andi	r2,r17,32
1000b6cc:	1002be26 	beq	r2,zero,1000c1c8 <___vfiprintf_internal_r+0x117c>
1000b6d0:	d9002217 	ldw	r4,136(sp)
1000b6d4:	d9402417 	ldw	r5,144(sp)
1000b6d8:	20800017 	ldw	r2,0(r4)
1000b6dc:	2807d7fa 	srai	r3,r5,31
1000b6e0:	21000104 	addi	r4,r4,4
1000b6e4:	d9002215 	stw	r4,136(sp)
1000b6e8:	11400015 	stw	r5,0(r2)
1000b6ec:	10c00115 	stw	r3,4(r2)
1000b6f0:	003e8a06 	br	1000b11c <__alt_data_end+0xf800b11c>
1000b6f4:	9cc03fcc 	andi	r19,r19,255
1000b6f8:	b811883a 	mov	r8,r23
1000b6fc:	9803871e 	bne	r19,zero,1000c51c <___vfiprintf_internal_r+0x14d0>
1000b700:	8880080c 	andi	r2,r17,32
1000b704:	10009a26 	beq	r2,zero,1000b970 <___vfiprintf_internal_r+0x924>
1000b708:	d9002217 	ldw	r4,136(sp)
1000b70c:	d8001d85 	stb	zero,118(sp)
1000b710:	20800204 	addi	r2,r4,8
1000b714:	24c00017 	ldw	r19,0(r4)
1000b718:	25000117 	ldw	r20,4(r4)
1000b71c:	8002a416 	blt	r16,zero,1000c1b0 <___vfiprintf_internal_r+0x1164>
1000b720:	013fdfc4 	movi	r4,-129
1000b724:	9d06b03a 	or	r3,r19,r20
1000b728:	d8802215 	stw	r2,136(sp)
1000b72c:	8922703a 	and	r17,r17,r4
1000b730:	18009b26 	beq	r3,zero,1000b9a0 <___vfiprintf_internal_r+0x954>
1000b734:	002b883a 	mov	r21,zero
1000b738:	ddc01a04 	addi	r23,sp,104
1000b73c:	9806d0fa 	srli	r3,r19,3
1000b740:	a008977a 	slli	r4,r20,29
1000b744:	a028d0fa 	srli	r20,r20,3
1000b748:	9cc001cc 	andi	r19,r19,7
1000b74c:	98800c04 	addi	r2,r19,48
1000b750:	bdffffc4 	addi	r23,r23,-1
1000b754:	20e6b03a 	or	r19,r4,r3
1000b758:	b8800005 	stb	r2,0(r23)
1000b75c:	9d06b03a 	or	r3,r19,r20
1000b760:	183ff61e 	bne	r3,zero,1000b73c <__alt_data_end+0xf800b73c>
1000b764:	88c0004c 	andi	r3,r17,1
1000b768:	18021f1e 	bne	r3,zero,1000bfe8 <___vfiprintf_internal_r+0xf9c>
1000b76c:	d9401e17 	ldw	r5,120(sp)
1000b770:	2de9c83a 	sub	r20,r5,r23
1000b774:	003f3806 	br	1000b458 <__alt_data_end+0xf800b458>
1000b778:	9cc03fcc 	andi	r19,r19,255
1000b77c:	b811883a 	mov	r8,r23
1000b780:	98034f1e 	bne	r19,zero,1000c4c0 <___vfiprintf_internal_r+0x1474>
1000b784:	00840074 	movhi	r2,4097
1000b788:	108b4004 	addi	r2,r2,11520
1000b78c:	d8802615 	stw	r2,152(sp)
1000b790:	8880080c 	andi	r2,r17,32
1000b794:	1000ac26 	beq	r2,zero,1000ba48 <___vfiprintf_internal_r+0x9fc>
1000b798:	d9002217 	ldw	r4,136(sp)
1000b79c:	24c00017 	ldw	r19,0(r4)
1000b7a0:	25000117 	ldw	r20,4(r4)
1000b7a4:	21000204 	addi	r4,r4,8
1000b7a8:	d9002215 	stw	r4,136(sp)
1000b7ac:	8880004c 	andi	r2,r17,1
1000b7b0:	1001e726 	beq	r2,zero,1000bf50 <___vfiprintf_internal_r+0xf04>
1000b7b4:	9d04b03a 	or	r2,r19,r20
1000b7b8:	10025c1e 	bne	r2,zero,1000c12c <___vfiprintf_internal_r+0x10e0>
1000b7bc:	d8001d85 	stb	zero,118(sp)
1000b7c0:	80024416 	blt	r16,zero,1000c0d4 <___vfiprintf_internal_r+0x1088>
1000b7c4:	00bfdfc4 	movi	r2,-129
1000b7c8:	88a2703a 	and	r17,r17,r2
1000b7cc:	003f1d06 	br	1000b444 <__alt_data_end+0xf800b444>
1000b7d0:	d8c02217 	ldw	r3,136(sp)
1000b7d4:	04c00044 	movi	r19,1
1000b7d8:	b811883a 	mov	r8,r23
1000b7dc:	18800017 	ldw	r2,0(r3)
1000b7e0:	18c00104 	addi	r3,r3,4
1000b7e4:	d8001d85 	stb	zero,118(sp)
1000b7e8:	d8801005 	stb	r2,64(sp)
1000b7ec:	d8c02215 	stw	r3,136(sp)
1000b7f0:	9829883a 	mov	r20,r19
1000b7f4:	ddc01004 	addi	r23,sp,64
1000b7f8:	0021883a 	mov	r16,zero
1000b7fc:	003f1e06 	br	1000b478 <__alt_data_end+0xf800b478>
1000b800:	9cc03fcc 	andi	r19,r19,255
1000b804:	b811883a 	mov	r8,r23
1000b808:	9803331e 	bne	r19,zero,1000c4d8 <___vfiprintf_internal_r+0x148c>
1000b80c:	8880080c 	andi	r2,r17,32
1000b810:	10004826 	beq	r2,zero,1000b934 <___vfiprintf_internal_r+0x8e8>
1000b814:	d9002217 	ldw	r4,136(sp)
1000b818:	20800117 	ldw	r2,4(r4)
1000b81c:	24c00017 	ldw	r19,0(r4)
1000b820:	21000204 	addi	r4,r4,8
1000b824:	d9002215 	stw	r4,136(sp)
1000b828:	1029883a 	mov	r20,r2
1000b82c:	10024c16 	blt	r2,zero,1000c160 <___vfiprintf_internal_r+0x1114>
1000b830:	dd401d83 	ldbu	r21,118(sp)
1000b834:	80007116 	blt	r16,zero,1000b9fc <___vfiprintf_internal_r+0x9b0>
1000b838:	00ffdfc4 	movi	r3,-129
1000b83c:	9d04b03a 	or	r2,r19,r20
1000b840:	88e2703a 	and	r17,r17,r3
1000b844:	1000d126 	beq	r2,zero,1000bb8c <___vfiprintf_internal_r+0xb40>
1000b848:	a0023526 	beq	r20,zero,1000c120 <___vfiprintf_internal_r+0x10d4>
1000b84c:	ddc01a04 	addi	r23,sp,104
1000b850:	4039883a 	mov	fp,r8
1000b854:	9809883a 	mov	r4,r19
1000b858:	a00b883a 	mov	r5,r20
1000b85c:	01800284 	movi	r6,10
1000b860:	000f883a 	mov	r7,zero
1000b864:	000d1740 	call	1000d174 <__umoddi3>
1000b868:	10800c04 	addi	r2,r2,48
1000b86c:	bdffffc4 	addi	r23,r23,-1
1000b870:	9809883a 	mov	r4,r19
1000b874:	a00b883a 	mov	r5,r20
1000b878:	b8800005 	stb	r2,0(r23)
1000b87c:	01800284 	movi	r6,10
1000b880:	000f883a 	mov	r7,zero
1000b884:	000cb780 	call	1000cb78 <__udivdi3>
1000b888:	1027883a 	mov	r19,r2
1000b88c:	10c4b03a 	or	r2,r2,r3
1000b890:	1829883a 	mov	r20,r3
1000b894:	103fef1e 	bne	r2,zero,1000b854 <__alt_data_end+0xf800b854>
1000b898:	d9001e17 	ldw	r4,120(sp)
1000b89c:	e011883a 	mov	r8,fp
1000b8a0:	25e9c83a 	sub	r20,r4,r23
1000b8a4:	003eec06 	br	1000b458 <__alt_data_end+0xf800b458>
1000b8a8:	d8802307 	ldb	r2,140(sp)
1000b8ac:	1002361e 	bne	r2,zero,1000c188 <___vfiprintf_internal_r+0x113c>
1000b8b0:	00c00804 	movi	r3,32
1000b8b4:	d8c02305 	stb	r3,140(sp)
1000b8b8:	04c00044 	movi	r19,1
1000b8bc:	b0c00007 	ldb	r3,0(r22)
1000b8c0:	003e3f06 	br	1000b1c0 <__alt_data_end+0xf800b1c0>
1000b8c4:	8c400054 	ori	r17,r17,1
1000b8c8:	b0c00007 	ldb	r3,0(r22)
1000b8cc:	003e3c06 	br	1000b1c0 <__alt_data_end+0xf800b1c0>
1000b8d0:	8c402014 	ori	r17,r17,128
1000b8d4:	b0c00007 	ldb	r3,0(r22)
1000b8d8:	003e3906 	br	1000b1c0 <__alt_data_end+0xf800b1c0>
1000b8dc:	dc002715 	stw	r16,156(sp)
1000b8e0:	d8002515 	stw	zero,148(sp)
1000b8e4:	1f3ff404 	addi	fp,r3,-48
1000b8e8:	0009883a 	mov	r4,zero
1000b8ec:	b021883a 	mov	r16,r22
1000b8f0:	01400284 	movi	r5,10
1000b8f4:	0001d400 	call	10001d40 <__mulsi3>
1000b8f8:	80c00007 	ldb	r3,0(r16)
1000b8fc:	e089883a 	add	r4,fp,r2
1000b900:	b5800044 	addi	r22,r22,1
1000b904:	1f3ff404 	addi	fp,r3,-48
1000b908:	b021883a 	mov	r16,r22
1000b90c:	af3ff82e 	bgeu	r21,fp,1000b8f0 <__alt_data_end+0xf800b8f0>
1000b910:	d9002515 	stw	r4,148(sp)
1000b914:	dc002717 	ldw	r16,156(sp)
1000b918:	003e2a06 	br	1000b1c4 <__alt_data_end+0xf800b1c4>
1000b91c:	9cc03fcc 	andi	r19,r19,255
1000b920:	b811883a 	mov	r8,r23
1000b924:	9802e91e 	bne	r19,zero,1000c4cc <___vfiprintf_internal_r+0x1480>
1000b928:	8c400414 	ori	r17,r17,16
1000b92c:	8880080c 	andi	r2,r17,32
1000b930:	103fb81e 	bne	r2,zero,1000b814 <__alt_data_end+0xf800b814>
1000b934:	8880040c 	andi	r2,r17,16
1000b938:	10022e26 	beq	r2,zero,1000c1f4 <___vfiprintf_internal_r+0x11a8>
1000b93c:	d9402217 	ldw	r5,136(sp)
1000b940:	2cc00017 	ldw	r19,0(r5)
1000b944:	29400104 	addi	r5,r5,4
1000b948:	d9402215 	stw	r5,136(sp)
1000b94c:	9829d7fa 	srai	r20,r19,31
1000b950:	a005883a 	mov	r2,r20
1000b954:	003fb506 	br	1000b82c <__alt_data_end+0xf800b82c>
1000b958:	9cc03fcc 	andi	r19,r19,255
1000b95c:	b811883a 	mov	r8,r23
1000b960:	9802fa1e 	bne	r19,zero,1000c54c <___vfiprintf_internal_r+0x1500>
1000b964:	8c400414 	ori	r17,r17,16
1000b968:	8880080c 	andi	r2,r17,32
1000b96c:	103f661e 	bne	r2,zero,1000b708 <__alt_data_end+0xf800b708>
1000b970:	8880040c 	andi	r2,r17,16
1000b974:	10020626 	beq	r2,zero,1000c190 <___vfiprintf_internal_r+0x1144>
1000b978:	d9402217 	ldw	r5,136(sp)
1000b97c:	d8001d85 	stb	zero,118(sp)
1000b980:	0029883a 	mov	r20,zero
1000b984:	28800104 	addi	r2,r5,4
1000b988:	2cc00017 	ldw	r19,0(r5)
1000b98c:	80020816 	blt	r16,zero,1000c1b0 <___vfiprintf_internal_r+0x1164>
1000b990:	00ffdfc4 	movi	r3,-129
1000b994:	d8802215 	stw	r2,136(sp)
1000b998:	88e2703a 	and	r17,r17,r3
1000b99c:	983f651e 	bne	r19,zero,1000b734 <__alt_data_end+0xf800b734>
1000b9a0:	002b883a 	mov	r21,zero
1000b9a4:	8002cf26 	beq	r16,zero,1000c4e4 <___vfiprintf_internal_r+0x1498>
1000b9a8:	0027883a 	mov	r19,zero
1000b9ac:	0029883a 	mov	r20,zero
1000b9b0:	003f6106 	br	1000b738 <__alt_data_end+0xf800b738>
1000b9b4:	9cc03fcc 	andi	r19,r19,255
1000b9b8:	b811883a 	mov	r8,r23
1000b9bc:	9802e01e 	bne	r19,zero,1000c540 <___vfiprintf_internal_r+0x14f4>
1000b9c0:	8c400414 	ori	r17,r17,16
1000b9c4:	8880080c 	andi	r2,r17,32
1000b9c8:	1000641e 	bne	r2,zero,1000bb5c <___vfiprintf_internal_r+0xb10>
1000b9cc:	8880040c 	andi	r2,r17,16
1000b9d0:	1001c81e 	bne	r2,zero,1000c0f4 <___vfiprintf_internal_r+0x10a8>
1000b9d4:	8880100c 	andi	r2,r17,64
1000b9d8:	d8001d85 	stb	zero,118(sp)
1000b9dc:	1002281e 	bne	r2,zero,1000c280 <___vfiprintf_internal_r+0x1234>
1000b9e0:	d9002217 	ldw	r4,136(sp)
1000b9e4:	0029883a 	mov	r20,zero
1000b9e8:	20800104 	addi	r2,r4,4
1000b9ec:	24c00017 	ldw	r19,0(r4)
1000b9f0:	8001c60e 	bge	r16,zero,1000c10c <___vfiprintf_internal_r+0x10c0>
1000b9f4:	d8802215 	stw	r2,136(sp)
1000b9f8:	002b883a 	mov	r21,zero
1000b9fc:	9d04b03a 	or	r2,r19,r20
1000ba00:	103f911e 	bne	r2,zero,1000b848 <__alt_data_end+0xf800b848>
1000ba04:	00800044 	movi	r2,1
1000ba08:	10803fcc 	andi	r2,r2,255
1000ba0c:	00c00044 	movi	r3,1
1000ba10:	10c05f26 	beq	r2,r3,1000bb90 <___vfiprintf_internal_r+0xb44>
1000ba14:	00c00084 	movi	r3,2
1000ba18:	10ffe31e 	bne	r2,r3,1000b9a8 <__alt_data_end+0xf800b9a8>
1000ba1c:	0027883a 	mov	r19,zero
1000ba20:	0029883a 	mov	r20,zero
1000ba24:	00015106 	br	1000bf6c <___vfiprintf_internal_r+0xf20>
1000ba28:	9cc03fcc 	andi	r19,r19,255
1000ba2c:	b811883a 	mov	r8,r23
1000ba30:	9802c01e 	bne	r19,zero,1000c534 <___vfiprintf_internal_r+0x14e8>
1000ba34:	01440074 	movhi	r5,4097
1000ba38:	294b3b04 	addi	r5,r5,11500
1000ba3c:	d9402615 	stw	r5,152(sp)
1000ba40:	8880080c 	andi	r2,r17,32
1000ba44:	103f541e 	bne	r2,zero,1000b798 <__alt_data_end+0xf800b798>
1000ba48:	8880040c 	andi	r2,r17,16
1000ba4c:	1001f226 	beq	r2,zero,1000c218 <___vfiprintf_internal_r+0x11cc>
1000ba50:	d9402217 	ldw	r5,136(sp)
1000ba54:	0029883a 	mov	r20,zero
1000ba58:	2cc00017 	ldw	r19,0(r5)
1000ba5c:	29400104 	addi	r5,r5,4
1000ba60:	d9402215 	stw	r5,136(sp)
1000ba64:	003f5106 	br	1000b7ac <__alt_data_end+0xf800b7ac>
1000ba68:	d8c02217 	ldw	r3,136(sp)
1000ba6c:	b811883a 	mov	r8,r23
1000ba70:	d8001d85 	stb	zero,118(sp)
1000ba74:	1dc00017 	ldw	r23,0(r3)
1000ba78:	1f000104 	addi	fp,r3,4
1000ba7c:	b8025926 	beq	r23,zero,1000c3e4 <___vfiprintf_internal_r+0x1398>
1000ba80:	80023316 	blt	r16,zero,1000c350 <___vfiprintf_internal_r+0x1304>
1000ba84:	800d883a 	mov	r6,r16
1000ba88:	000b883a 	mov	r5,zero
1000ba8c:	b809883a 	mov	r4,r23
1000ba90:	da002a15 	stw	r8,168(sp)
1000ba94:	00096240 	call	10009624 <memchr>
1000ba98:	da002a17 	ldw	r8,168(sp)
1000ba9c:	10026826 	beq	r2,zero,1000c440 <___vfiprintf_internal_r+0x13f4>
1000baa0:	15e9c83a 	sub	r20,r2,r23
1000baa4:	dd401d83 	ldbu	r21,118(sp)
1000baa8:	df002215 	stw	fp,136(sp)
1000baac:	0021883a 	mov	r16,zero
1000bab0:	003e6906 	br	1000b458 <__alt_data_end+0xf800b458>
1000bab4:	9cc03fcc 	andi	r19,r19,255
1000bab8:	b811883a 	mov	r8,r23
1000babc:	983fc126 	beq	r19,zero,1000b9c4 <__alt_data_end+0xf800b9c4>
1000bac0:	d8c02303 	ldbu	r3,140(sp)
1000bac4:	d8c01d85 	stb	r3,118(sp)
1000bac8:	003fbe06 	br	1000b9c4 <__alt_data_end+0xf800b9c4>
1000bacc:	d9002217 	ldw	r4,136(sp)
1000bad0:	d9402217 	ldw	r5,136(sp)
1000bad4:	21000017 	ldw	r4,0(r4)
1000bad8:	28800104 	addi	r2,r5,4
1000badc:	d9002515 	stw	r4,148(sp)
1000bae0:	203e3d16 	blt	r4,zero,1000b3d8 <__alt_data_end+0xf800b3d8>
1000bae4:	d8802215 	stw	r2,136(sp)
1000bae8:	b0c00007 	ldb	r3,0(r22)
1000baec:	003db406 	br	1000b1c0 <__alt_data_end+0xf800b1c0>
1000baf0:	00c00ac4 	movi	r3,43
1000baf4:	d8c02305 	stb	r3,140(sp)
1000baf8:	04c00044 	movi	r19,1
1000bafc:	b0c00007 	ldb	r3,0(r22)
1000bb00:	003daf06 	br	1000b1c0 <__alt_data_end+0xf800b1c0>
1000bb04:	b0c00007 	ldb	r3,0(r22)
1000bb08:	01000a84 	movi	r4,42
1000bb0c:	b4000044 	addi	r16,r22,1
1000bb10:	19025e26 	beq	r3,r4,1000c48c <___vfiprintf_internal_r+0x1440>
1000bb14:	1f3ff404 	addi	fp,r3,-48
1000bb18:	0009883a 	mov	r4,zero
1000bb1c:	af025236 	bltu	r21,fp,1000c468 <___vfiprintf_internal_r+0x141c>
1000bb20:	01400284 	movi	r5,10
1000bb24:	0001d400 	call	10001d40 <__mulsi3>
1000bb28:	80c00007 	ldb	r3,0(r16)
1000bb2c:	1709883a 	add	r4,r2,fp
1000bb30:	85800044 	addi	r22,r16,1
1000bb34:	1f3ff404 	addi	fp,r3,-48
1000bb38:	b021883a 	mov	r16,r22
1000bb3c:	af3ff82e 	bgeu	r21,fp,1000bb20 <__alt_data_end+0xf800bb20>
1000bb40:	2021883a 	mov	r16,r4
1000bb44:	203d9f0e 	bge	r4,zero,1000b1c4 <__alt_data_end+0xf800b1c4>
1000bb48:	043fffc4 	movi	r16,-1
1000bb4c:	003d9d06 	br	1000b1c4 <__alt_data_end+0xf800b1c4>
1000bb50:	8c401014 	ori	r17,r17,64
1000bb54:	b0c00007 	ldb	r3,0(r22)
1000bb58:	003d9906 	br	1000b1c0 <__alt_data_end+0xf800b1c0>
1000bb5c:	d9002217 	ldw	r4,136(sp)
1000bb60:	d8001d85 	stb	zero,118(sp)
1000bb64:	20c00204 	addi	r3,r4,8
1000bb68:	24c00017 	ldw	r19,0(r4)
1000bb6c:	25000117 	ldw	r20,4(r4)
1000bb70:	8001e716 	blt	r16,zero,1000c310 <___vfiprintf_internal_r+0x12c4>
1000bb74:	013fdfc4 	movi	r4,-129
1000bb78:	9d04b03a 	or	r2,r19,r20
1000bb7c:	d8c02215 	stw	r3,136(sp)
1000bb80:	8922703a 	and	r17,r17,r4
1000bb84:	002b883a 	mov	r21,zero
1000bb88:	103f2f1e 	bne	r2,zero,1000b848 <__alt_data_end+0xf800b848>
1000bb8c:	803e2f26 	beq	r16,zero,1000b44c <__alt_data_end+0xf800b44c>
1000bb90:	0027883a 	mov	r19,zero
1000bb94:	9cc00c04 	addi	r19,r19,48
1000bb98:	dcc019c5 	stb	r19,103(sp)
1000bb9c:	dd002817 	ldw	r20,160(sp)
1000bba0:	ddc019c4 	addi	r23,sp,103
1000bba4:	003e2c06 	br	1000b458 <__alt_data_end+0xf800b458>
1000bba8:	9cc03fcc 	andi	r19,r19,255
1000bbac:	b811883a 	mov	r8,r23
1000bbb0:	9802571e 	bne	r19,zero,1000c510 <___vfiprintf_internal_r+0x14c4>
1000bbb4:	18005726 	beq	r3,zero,1000bd14 <___vfiprintf_internal_r+0xcc8>
1000bbb8:	04c00044 	movi	r19,1
1000bbbc:	d8c01005 	stb	r3,64(sp)
1000bbc0:	d8001d85 	stb	zero,118(sp)
1000bbc4:	9829883a 	mov	r20,r19
1000bbc8:	ddc01004 	addi	r23,sp,64
1000bbcc:	003f0a06 	br	1000b7f8 <__alt_data_end+0xf800b7f8>
1000bbd0:	d9402017 	ldw	r5,128(sp)
1000bbd4:	d9002117 	ldw	r4,132(sp)
1000bbd8:	d9801a04 	addi	r6,sp,104
1000bbdc:	da802a15 	stw	r10,168(sp)
1000bbe0:	000af380 	call	1000af38 <__sprint_r.part.0>
1000bbe4:	da802a17 	ldw	r10,168(sp)
1000bbe8:	1000501e 	bne	r2,zero,1000bd2c <___vfiprintf_internal_r+0xce0>
1000bbec:	d9801b17 	ldw	r6,108(sp)
1000bbf0:	d8801c17 	ldw	r2,112(sp)
1000bbf4:	d811883a 	mov	r8,sp
1000bbf8:	31000044 	addi	r4,r6,1
1000bbfc:	003e3606 	br	1000b4d8 <__alt_data_end+0xf800b4d8>
1000bc00:	d9001b17 	ldw	r4,108(sp)
1000bc04:	d8801c17 	ldw	r2,112(sp)
1000bc08:	21400044 	addi	r5,r4,1
1000bc0c:	d9801d87 	ldb	r6,118(sp)
1000bc10:	303e5226 	beq	r6,zero,1000b55c <__alt_data_end+0xf800b55c>
1000bc14:	01800044 	movi	r6,1
1000bc18:	d9001d84 	addi	r4,sp,118
1000bc1c:	1185883a 	add	r2,r2,r6
1000bc20:	41000015 	stw	r4,0(r8)
1000bc24:	41800115 	stw	r6,4(r8)
1000bc28:	d8801c15 	stw	r2,112(sp)
1000bc2c:	d9401b15 	stw	r5,108(sp)
1000bc30:	010001c4 	movi	r4,7
1000bc34:	2140b00e 	bge	r4,r5,1000bef8 <___vfiprintf_internal_r+0xeac>
1000bc38:	1000f61e 	bne	r2,zero,1000c014 <___vfiprintf_internal_r+0xfc8>
1000bc3c:	3800b31e 	bne	r7,zero,1000bf0c <___vfiprintf_internal_r+0xec0>
1000bc40:	0009883a 	mov	r4,zero
1000bc44:	300b883a 	mov	r5,r6
1000bc48:	d811883a 	mov	r8,sp
1000bc4c:	01802004 	movi	r6,128
1000bc50:	19be5226 	beq	r3,r6,1000b59c <__alt_data_end+0xf800b59c>
1000bc54:	8521c83a 	sub	r16,r16,r20
1000bc58:	043e790e 	bge	zero,r16,1000b640 <__alt_data_end+0xf800b640>
1000bc5c:	05400404 	movi	r21,16
1000bc60:	ac01b00e 	bge	r21,r16,1000c324 <___vfiprintf_internal_r+0x12d8>
1000bc64:	01440074 	movhi	r5,4097
1000bc68:	294ba004 	addi	r5,r5,11904
1000bc6c:	d9402315 	stw	r5,140(sp)
1000bc70:	070001c4 	movi	fp,7
1000bc74:	00000506 	br	1000bc8c <___vfiprintf_internal_r+0xc40>
1000bc78:	21400084 	addi	r5,r4,2
1000bc7c:	42000204 	addi	r8,r8,8
1000bc80:	1809883a 	mov	r4,r3
1000bc84:	843ffc04 	addi	r16,r16,-16
1000bc88:	ac000d0e 	bge	r21,r16,1000bcc0 <___vfiprintf_internal_r+0xc74>
1000bc8c:	10800404 	addi	r2,r2,16
1000bc90:	20c00044 	addi	r3,r4,1
1000bc94:	44800015 	stw	r18,0(r8)
1000bc98:	45400115 	stw	r21,4(r8)
1000bc9c:	d8801c15 	stw	r2,112(sp)
1000bca0:	d8c01b15 	stw	r3,108(sp)
1000bca4:	e0fff40e 	bge	fp,r3,1000bc78 <__alt_data_end+0xf800bc78>
1000bca8:	1000101e 	bne	r2,zero,1000bcec <___vfiprintf_internal_r+0xca0>
1000bcac:	843ffc04 	addi	r16,r16,-16
1000bcb0:	01400044 	movi	r5,1
1000bcb4:	0009883a 	mov	r4,zero
1000bcb8:	d811883a 	mov	r8,sp
1000bcbc:	ac3ff316 	blt	r21,r16,1000bc8c <__alt_data_end+0xf800bc8c>
1000bcc0:	d8c02317 	ldw	r3,140(sp)
1000bcc4:	1405883a 	add	r2,r2,r16
1000bcc8:	44000115 	stw	r16,4(r8)
1000bccc:	40c00015 	stw	r3,0(r8)
1000bcd0:	d8801c15 	stw	r2,112(sp)
1000bcd4:	d9401b15 	stw	r5,108(sp)
1000bcd8:	00c001c4 	movi	r3,7
1000bcdc:	19401916 	blt	r3,r5,1000bd44 <___vfiprintf_internal_r+0xcf8>
1000bce0:	42000204 	addi	r8,r8,8
1000bce4:	29400044 	addi	r5,r5,1
1000bce8:	003e5506 	br	1000b640 <__alt_data_end+0xf800b640>
1000bcec:	d9402017 	ldw	r5,128(sp)
1000bcf0:	d9002117 	ldw	r4,132(sp)
1000bcf4:	d9801a04 	addi	r6,sp,104
1000bcf8:	000af380 	call	1000af38 <__sprint_r.part.0>
1000bcfc:	10000b1e 	bne	r2,zero,1000bd2c <___vfiprintf_internal_r+0xce0>
1000bd00:	d9001b17 	ldw	r4,108(sp)
1000bd04:	d8801c17 	ldw	r2,112(sp)
1000bd08:	d811883a 	mov	r8,sp
1000bd0c:	21400044 	addi	r5,r4,1
1000bd10:	003fdc06 	br	1000bc84 <__alt_data_end+0xf800bc84>
1000bd14:	d8801c17 	ldw	r2,112(sp)
1000bd18:	10000426 	beq	r2,zero,1000bd2c <___vfiprintf_internal_r+0xce0>
1000bd1c:	d9402017 	ldw	r5,128(sp)
1000bd20:	d9002117 	ldw	r4,132(sp)
1000bd24:	d9801a04 	addi	r6,sp,104
1000bd28:	000af380 	call	1000af38 <__sprint_r.part.0>
1000bd2c:	d9402017 	ldw	r5,128(sp)
1000bd30:	2880030b 	ldhu	r2,12(r5)
1000bd34:	1080100c 	andi	r2,r2,64
1000bd38:	10014d1e 	bne	r2,zero,1000c270 <___vfiprintf_internal_r+0x1224>
1000bd3c:	d8802417 	ldw	r2,144(sp)
1000bd40:	003d9706 	br	1000b3a0 <__alt_data_end+0xf800b3a0>
1000bd44:	1000d21e 	bne	r2,zero,1000c090 <___vfiprintf_internal_r+0x1044>
1000bd48:	00c00044 	movi	r3,1
1000bd4c:	a005883a 	mov	r2,r20
1000bd50:	ddc00015 	stw	r23,0(sp)
1000bd54:	dd000115 	stw	r20,4(sp)
1000bd58:	dd001c15 	stw	r20,112(sp)
1000bd5c:	d8c01b15 	stw	r3,108(sp)
1000bd60:	d811883a 	mov	r8,sp
1000bd64:	42000204 	addi	r8,r8,8
1000bd68:	8c40010c 	andi	r17,r17,4
1000bd6c:	88004026 	beq	r17,zero,1000be70 <___vfiprintf_internal_r+0xe24>
1000bd70:	d9002517 	ldw	r4,148(sp)
1000bd74:	24e3c83a 	sub	r17,r4,r19
1000bd78:	04403d0e 	bge	zero,r17,1000be70 <___vfiprintf_internal_r+0xe24>
1000bd7c:	04000404 	movi	r16,16
1000bd80:	8441a90e 	bge	r16,r17,1000c428 <___vfiprintf_internal_r+0x13dc>
1000bd84:	00c40074 	movhi	r3,4097
1000bd88:	18cba404 	addi	r3,r3,11920
1000bd8c:	d9001b17 	ldw	r4,108(sp)
1000bd90:	d8c02315 	stw	r3,140(sp)
1000bd94:	050001c4 	movi	r20,7
1000bd98:	dd402117 	ldw	r21,132(sp)
1000bd9c:	ddc02017 	ldw	r23,128(sp)
1000bda0:	00000506 	br	1000bdb8 <___vfiprintf_internal_r+0xd6c>
1000bda4:	21400084 	addi	r5,r4,2
1000bda8:	42000204 	addi	r8,r8,8
1000bdac:	1809883a 	mov	r4,r3
1000bdb0:	8c7ffc04 	addi	r17,r17,-16
1000bdb4:	84400f0e 	bge	r16,r17,1000bdf4 <___vfiprintf_internal_r+0xda8>
1000bdb8:	01440074 	movhi	r5,4097
1000bdbc:	10800404 	addi	r2,r2,16
1000bdc0:	20c00044 	addi	r3,r4,1
1000bdc4:	294ba404 	addi	r5,r5,11920
1000bdc8:	41400015 	stw	r5,0(r8)
1000bdcc:	44000115 	stw	r16,4(r8)
1000bdd0:	d8801c15 	stw	r2,112(sp)
1000bdd4:	d8c01b15 	stw	r3,108(sp)
1000bdd8:	a0fff20e 	bge	r20,r3,1000bda4 <__alt_data_end+0xf800bda4>
1000bddc:	1000141e 	bne	r2,zero,1000be30 <___vfiprintf_internal_r+0xde4>
1000bde0:	8c7ffc04 	addi	r17,r17,-16
1000bde4:	01400044 	movi	r5,1
1000bde8:	0009883a 	mov	r4,zero
1000bdec:	d811883a 	mov	r8,sp
1000bdf0:	847ff116 	blt	r16,r17,1000bdb8 <__alt_data_end+0xf800bdb8>
1000bdf4:	d8c02317 	ldw	r3,140(sp)
1000bdf8:	1445883a 	add	r2,r2,r17
1000bdfc:	44400115 	stw	r17,4(r8)
1000be00:	40c00015 	stw	r3,0(r8)
1000be04:	d8801c15 	stw	r2,112(sp)
1000be08:	d9401b15 	stw	r5,108(sp)
1000be0c:	00c001c4 	movi	r3,7
1000be10:	1940170e 	bge	r3,r5,1000be70 <___vfiprintf_internal_r+0xe24>
1000be14:	1000101e 	bne	r2,zero,1000be58 <___vfiprintf_internal_r+0xe0c>
1000be18:	d8802517 	ldw	r2,148(sp)
1000be1c:	14c11616 	blt	r2,r19,1000c278 <___vfiprintf_internal_r+0x122c>
1000be20:	d9002417 	ldw	r4,144(sp)
1000be24:	2089883a 	add	r4,r4,r2
1000be28:	d9002415 	stw	r4,144(sp)
1000be2c:	003e1806 	br	1000b690 <__alt_data_end+0xf800b690>
1000be30:	d9801a04 	addi	r6,sp,104
1000be34:	b80b883a 	mov	r5,r23
1000be38:	a809883a 	mov	r4,r21
1000be3c:	000af380 	call	1000af38 <__sprint_r.part.0>
1000be40:	103fba1e 	bne	r2,zero,1000bd2c <__alt_data_end+0xf800bd2c>
1000be44:	d9001b17 	ldw	r4,108(sp)
1000be48:	d8801c17 	ldw	r2,112(sp)
1000be4c:	d811883a 	mov	r8,sp
1000be50:	21400044 	addi	r5,r4,1
1000be54:	003fd606 	br	1000bdb0 <__alt_data_end+0xf800bdb0>
1000be58:	d9402017 	ldw	r5,128(sp)
1000be5c:	d9002117 	ldw	r4,132(sp)
1000be60:	d9801a04 	addi	r6,sp,104
1000be64:	000af380 	call	1000af38 <__sprint_r.part.0>
1000be68:	103fb01e 	bne	r2,zero,1000bd2c <__alt_data_end+0xf800bd2c>
1000be6c:	d8801c17 	ldw	r2,112(sp)
1000be70:	d8c02517 	ldw	r3,148(sp)
1000be74:	1cc0010e 	bge	r3,r19,1000be7c <___vfiprintf_internal_r+0xe30>
1000be78:	9807883a 	mov	r3,r19
1000be7c:	d9002417 	ldw	r4,144(sp)
1000be80:	20c9883a 	add	r4,r4,r3
1000be84:	d9002415 	stw	r4,144(sp)
1000be88:	103e0126 	beq	r2,zero,1000b690 <__alt_data_end+0xf800b690>
1000be8c:	d9402017 	ldw	r5,128(sp)
1000be90:	d9002117 	ldw	r4,132(sp)
1000be94:	d9801a04 	addi	r6,sp,104
1000be98:	000af380 	call	1000af38 <__sprint_r.part.0>
1000be9c:	103dfc26 	beq	r2,zero,1000b690 <__alt_data_end+0xf800b690>
1000bea0:	003fa206 	br	1000bd2c <__alt_data_end+0xf800bd2c>
1000bea4:	d9402017 	ldw	r5,128(sp)
1000bea8:	d9002117 	ldw	r4,132(sp)
1000beac:	d9801a04 	addi	r6,sp,104
1000beb0:	d9c02b15 	stw	r7,172(sp)
1000beb4:	000af380 	call	1000af38 <__sprint_r.part.0>
1000beb8:	d9c02b17 	ldw	r7,172(sp)
1000bebc:	103f9b1e 	bne	r2,zero,1000bd2c <__alt_data_end+0xf800bd2c>
1000bec0:	d9001b17 	ldw	r4,108(sp)
1000bec4:	d8801c17 	ldw	r2,112(sp)
1000bec8:	d811883a 	mov	r8,sp
1000becc:	21800044 	addi	r6,r4,1
1000bed0:	003dbf06 	br	1000b5d0 <__alt_data_end+0xf800b5d0>
1000bed4:	1000d81e 	bne	r2,zero,1000c238 <___vfiprintf_internal_r+0x11ec>
1000bed8:	d9001d87 	ldb	r4,118(sp)
1000bedc:	20000a26 	beq	r4,zero,1000bf08 <___vfiprintf_internal_r+0xebc>
1000bee0:	00800044 	movi	r2,1
1000bee4:	d9001d84 	addi	r4,sp,118
1000bee8:	100b883a 	mov	r5,r2
1000beec:	d9000015 	stw	r4,0(sp)
1000bef0:	d8800115 	stw	r2,4(sp)
1000bef4:	d811883a 	mov	r8,sp
1000bef8:	2809883a 	mov	r4,r5
1000befc:	42000204 	addi	r8,r8,8
1000bf00:	29400044 	addi	r5,r5,1
1000bf04:	003d9506 	br	1000b55c <__alt_data_end+0xf800b55c>
1000bf08:	3800fd26 	beq	r7,zero,1000c300 <___vfiprintf_internal_r+0x12b4>
1000bf0c:	00800084 	movi	r2,2
1000bf10:	d9001d04 	addi	r4,sp,116
1000bf14:	d9000015 	stw	r4,0(sp)
1000bf18:	d8800115 	stw	r2,4(sp)
1000bf1c:	01400044 	movi	r5,1
1000bf20:	d811883a 	mov	r8,sp
1000bf24:	2809883a 	mov	r4,r5
1000bf28:	42000204 	addi	r8,r8,8
1000bf2c:	29400044 	addi	r5,r5,1
1000bf30:	003f4606 	br	1000bc4c <__alt_data_end+0xf800bc4c>
1000bf34:	d8802517 	ldw	r2,148(sp)
1000bf38:	14c0010e 	bge	r2,r19,1000bf40 <___vfiprintf_internal_r+0xef4>
1000bf3c:	9805883a 	mov	r2,r19
1000bf40:	d9402417 	ldw	r5,144(sp)
1000bf44:	288b883a 	add	r5,r5,r2
1000bf48:	d9402415 	stw	r5,144(sp)
1000bf4c:	003dd006 	br	1000b690 <__alt_data_end+0xf800b690>
1000bf50:	d8001d85 	stb	zero,118(sp)
1000bf54:	80005d16 	blt	r16,zero,1000c0cc <___vfiprintf_internal_r+0x1080>
1000bf58:	00ffdfc4 	movi	r3,-129
1000bf5c:	9d04b03a 	or	r2,r19,r20
1000bf60:	88e2703a 	and	r17,r17,r3
1000bf64:	103d3726 	beq	r2,zero,1000b444 <__alt_data_end+0xf800b444>
1000bf68:	002b883a 	mov	r21,zero
1000bf6c:	d9002617 	ldw	r4,152(sp)
1000bf70:	ddc01a04 	addi	r23,sp,104
1000bf74:	988003cc 	andi	r2,r19,15
1000bf78:	a006973a 	slli	r3,r20,28
1000bf7c:	2085883a 	add	r2,r4,r2
1000bf80:	9826d13a 	srli	r19,r19,4
1000bf84:	10800003 	ldbu	r2,0(r2)
1000bf88:	a028d13a 	srli	r20,r20,4
1000bf8c:	bdffffc4 	addi	r23,r23,-1
1000bf90:	1ce6b03a 	or	r19,r3,r19
1000bf94:	b8800005 	stb	r2,0(r23)
1000bf98:	9d04b03a 	or	r2,r19,r20
1000bf9c:	103ff51e 	bne	r2,zero,1000bf74 <__alt_data_end+0xf800bf74>
1000bfa0:	d8801e17 	ldw	r2,120(sp)
1000bfa4:	15e9c83a 	sub	r20,r2,r23
1000bfa8:	003d2b06 	br	1000b458 <__alt_data_end+0xf800b458>
1000bfac:	d9402017 	ldw	r5,128(sp)
1000bfb0:	d9002117 	ldw	r4,132(sp)
1000bfb4:	d9801a04 	addi	r6,sp,104
1000bfb8:	000af380 	call	1000af38 <__sprint_r.part.0>
1000bfbc:	103f5b1e 	bne	r2,zero,1000bd2c <__alt_data_end+0xf800bd2c>
1000bfc0:	d8801c17 	ldw	r2,112(sp)
1000bfc4:	d811883a 	mov	r8,sp
1000bfc8:	003f6706 	br	1000bd68 <__alt_data_end+0xf800bd68>
1000bfcc:	d9402017 	ldw	r5,128(sp)
1000bfd0:	d9002117 	ldw	r4,132(sp)
1000bfd4:	d9801a04 	addi	r6,sp,104
1000bfd8:	000af380 	call	1000af38 <__sprint_r.part.0>
1000bfdc:	103f531e 	bne	r2,zero,1000bd2c <__alt_data_end+0xf800bd2c>
1000bfe0:	d811883a 	mov	r8,sp
1000bfe4:	003cd906 	br	1000b34c <__alt_data_end+0xf800b34c>
1000bfe8:	10803fcc 	andi	r2,r2,255
1000bfec:	1080201c 	xori	r2,r2,128
1000bff0:	10bfe004 	addi	r2,r2,-128
1000bff4:	00c00c04 	movi	r3,48
1000bff8:	10ffe926 	beq	r2,r3,1000bfa0 <__alt_data_end+0xf800bfa0>
1000bffc:	b8ffffc5 	stb	r3,-1(r23)
1000c000:	d8c01e17 	ldw	r3,120(sp)
1000c004:	b8bfffc4 	addi	r2,r23,-1
1000c008:	102f883a 	mov	r23,r2
1000c00c:	18a9c83a 	sub	r20,r3,r2
1000c010:	003d1106 	br	1000b458 <__alt_data_end+0xf800b458>
1000c014:	d9402017 	ldw	r5,128(sp)
1000c018:	d9002117 	ldw	r4,132(sp)
1000c01c:	d9801a04 	addi	r6,sp,104
1000c020:	d8c02a15 	stw	r3,168(sp)
1000c024:	d9c02b15 	stw	r7,172(sp)
1000c028:	000af380 	call	1000af38 <__sprint_r.part.0>
1000c02c:	d8c02a17 	ldw	r3,168(sp)
1000c030:	d9c02b17 	ldw	r7,172(sp)
1000c034:	103f3d1e 	bne	r2,zero,1000bd2c <__alt_data_end+0xf800bd2c>
1000c038:	d9001b17 	ldw	r4,108(sp)
1000c03c:	d8801c17 	ldw	r2,112(sp)
1000c040:	d811883a 	mov	r8,sp
1000c044:	21400044 	addi	r5,r4,1
1000c048:	003d4406 	br	1000b55c <__alt_data_end+0xf800b55c>
1000c04c:	d9402017 	ldw	r5,128(sp)
1000c050:	d9002117 	ldw	r4,132(sp)
1000c054:	d9801a04 	addi	r6,sp,104
1000c058:	d8c02a15 	stw	r3,168(sp)
1000c05c:	000af380 	call	1000af38 <__sprint_r.part.0>
1000c060:	d8c02a17 	ldw	r3,168(sp)
1000c064:	103f311e 	bne	r2,zero,1000bd2c <__alt_data_end+0xf800bd2c>
1000c068:	d9001b17 	ldw	r4,108(sp)
1000c06c:	d8801c17 	ldw	r2,112(sp)
1000c070:	d811883a 	mov	r8,sp
1000c074:	21400044 	addi	r5,r4,1
1000c078:	003ef406 	br	1000bc4c <__alt_data_end+0xf800bc4c>
1000c07c:	1000bd1e 	bne	r2,zero,1000c374 <___vfiprintf_internal_r+0x1328>
1000c080:	01400044 	movi	r5,1
1000c084:	0009883a 	mov	r4,zero
1000c088:	d811883a 	mov	r8,sp
1000c08c:	003ef106 	br	1000bc54 <__alt_data_end+0xf800bc54>
1000c090:	d9402017 	ldw	r5,128(sp)
1000c094:	d9002117 	ldw	r4,132(sp)
1000c098:	d9801a04 	addi	r6,sp,104
1000c09c:	000af380 	call	1000af38 <__sprint_r.part.0>
1000c0a0:	103f221e 	bne	r2,zero,1000bd2c <__alt_data_end+0xf800bd2c>
1000c0a4:	d9401b17 	ldw	r5,108(sp)
1000c0a8:	d8801c17 	ldw	r2,112(sp)
1000c0ac:	d811883a 	mov	r8,sp
1000c0b0:	29400044 	addi	r5,r5,1
1000c0b4:	003d6206 	br	1000b640 <__alt_data_end+0xf800b640>
1000c0b8:	01440074 	movhi	r5,4097
1000c0bc:	294b4004 	addi	r5,r5,11520
1000c0c0:	d9402615 	stw	r5,152(sp)
1000c0c4:	d8c02215 	stw	r3,136(sp)
1000c0c8:	1023883a 	mov	r17,r2
1000c0cc:	9d04b03a 	or	r2,r19,r20
1000c0d0:	103fa51e 	bne	r2,zero,1000bf68 <__alt_data_end+0xf800bf68>
1000c0d4:	002b883a 	mov	r21,zero
1000c0d8:	00800084 	movi	r2,2
1000c0dc:	003e4a06 	br	1000ba08 <__alt_data_end+0xf800ba08>
1000c0e0:	01440074 	movhi	r5,4097
1000c0e4:	294b4004 	addi	r5,r5,11520
1000c0e8:	002b883a 	mov	r21,zero
1000c0ec:	d9402615 	stw	r5,152(sp)
1000c0f0:	003f9e06 	br	1000bf6c <__alt_data_end+0xf800bf6c>
1000c0f4:	d9402217 	ldw	r5,136(sp)
1000c0f8:	d8001d85 	stb	zero,118(sp)
1000c0fc:	0029883a 	mov	r20,zero
1000c100:	28800104 	addi	r2,r5,4
1000c104:	2cc00017 	ldw	r19,0(r5)
1000c108:	803e3a16 	blt	r16,zero,1000b9f4 <__alt_data_end+0xf800b9f4>
1000c10c:	00ffdfc4 	movi	r3,-129
1000c110:	d8802215 	stw	r2,136(sp)
1000c114:	88e2703a 	and	r17,r17,r3
1000c118:	002b883a 	mov	r21,zero
1000c11c:	983e9b26 	beq	r19,zero,1000bb8c <__alt_data_end+0xf800bb8c>
1000c120:	00800244 	movi	r2,9
1000c124:	14fdc936 	bltu	r2,r19,1000b84c <__alt_data_end+0xf800b84c>
1000c128:	003e9a06 	br	1000bb94 <__alt_data_end+0xf800bb94>
1000c12c:	00800c04 	movi	r2,48
1000c130:	d8c01d45 	stb	r3,117(sp)
1000c134:	d8801d05 	stb	r2,116(sp)
1000c138:	d8001d85 	stb	zero,118(sp)
1000c13c:	88c00094 	ori	r3,r17,2
1000c140:	80009c16 	blt	r16,zero,1000c3b4 <___vfiprintf_internal_r+0x1368>
1000c144:	00bfdfc4 	movi	r2,-129
1000c148:	88a2703a 	and	r17,r17,r2
1000c14c:	8c400094 	ori	r17,r17,2
1000c150:	002b883a 	mov	r21,zero
1000c154:	003f8506 	br	1000bf6c <__alt_data_end+0xf800bf6c>
1000c158:	b029883a 	mov	r20,r22
1000c15c:	003c0b06 	br	1000b18c <__alt_data_end+0xf800b18c>
1000c160:	04e7c83a 	sub	r19,zero,r19
1000c164:	05400b44 	movi	r21,45
1000c168:	9804c03a 	cmpne	r2,r19,zero
1000c16c:	0529c83a 	sub	r20,zero,r20
1000c170:	dd401d85 	stb	r21,118(sp)
1000c174:	a0a9c83a 	sub	r20,r20,r2
1000c178:	80009716 	blt	r16,zero,1000c3d8 <___vfiprintf_internal_r+0x138c>
1000c17c:	00bfdfc4 	movi	r2,-129
1000c180:	88a2703a 	and	r17,r17,r2
1000c184:	003db006 	br	1000b848 <__alt_data_end+0xf800b848>
1000c188:	b0c00007 	ldb	r3,0(r22)
1000c18c:	003c0c06 	br	1000b1c0 <__alt_data_end+0xf800b1c0>
1000c190:	8880100c 	andi	r2,r17,64
1000c194:	d8001d85 	stb	zero,118(sp)
1000c198:	1000461e 	bne	r2,zero,1000c2b4 <___vfiprintf_internal_r+0x1268>
1000c19c:	d9002217 	ldw	r4,136(sp)
1000c1a0:	0029883a 	mov	r20,zero
1000c1a4:	20800104 	addi	r2,r4,4
1000c1a8:	24c00017 	ldw	r19,0(r4)
1000c1ac:	803df80e 	bge	r16,zero,1000b990 <__alt_data_end+0xf800b990>
1000c1b0:	9d06b03a 	or	r3,r19,r20
1000c1b4:	d8802215 	stw	r2,136(sp)
1000c1b8:	183d5e1e 	bne	r3,zero,1000b734 <__alt_data_end+0xf800b734>
1000c1bc:	002b883a 	mov	r21,zero
1000c1c0:	0005883a 	mov	r2,zero
1000c1c4:	003e1006 	br	1000ba08 <__alt_data_end+0xf800ba08>
1000c1c8:	8880040c 	andi	r2,r17,16
1000c1cc:	1000321e 	bne	r2,zero,1000c298 <___vfiprintf_internal_r+0x124c>
1000c1d0:	8c40100c 	andi	r17,r17,64
1000c1d4:	88008d26 	beq	r17,zero,1000c40c <___vfiprintf_internal_r+0x13c0>
1000c1d8:	d9402217 	ldw	r5,136(sp)
1000c1dc:	d8c02417 	ldw	r3,144(sp)
1000c1e0:	28800017 	ldw	r2,0(r5)
1000c1e4:	29400104 	addi	r5,r5,4
1000c1e8:	d9402215 	stw	r5,136(sp)
1000c1ec:	10c0000d 	sth	r3,0(r2)
1000c1f0:	003bca06 	br	1000b11c <__alt_data_end+0xf800b11c>
1000c1f4:	8880100c 	andi	r2,r17,64
1000c1f8:	10003a26 	beq	r2,zero,1000c2e4 <___vfiprintf_internal_r+0x1298>
1000c1fc:	d8802217 	ldw	r2,136(sp)
1000c200:	14c0000f 	ldh	r19,0(r2)
1000c204:	10800104 	addi	r2,r2,4
1000c208:	d8802215 	stw	r2,136(sp)
1000c20c:	9829d7fa 	srai	r20,r19,31
1000c210:	a005883a 	mov	r2,r20
1000c214:	003d8506 	br	1000b82c <__alt_data_end+0xf800b82c>
1000c218:	8880100c 	andi	r2,r17,64
1000c21c:	10002b26 	beq	r2,zero,1000c2cc <___vfiprintf_internal_r+0x1280>
1000c220:	d8802217 	ldw	r2,136(sp)
1000c224:	0029883a 	mov	r20,zero
1000c228:	14c0000b 	ldhu	r19,0(r2)
1000c22c:	10800104 	addi	r2,r2,4
1000c230:	d8802215 	stw	r2,136(sp)
1000c234:	003d5d06 	br	1000b7ac <__alt_data_end+0xf800b7ac>
1000c238:	d9402017 	ldw	r5,128(sp)
1000c23c:	d9002117 	ldw	r4,132(sp)
1000c240:	d9801a04 	addi	r6,sp,104
1000c244:	d8c02a15 	stw	r3,168(sp)
1000c248:	d9c02b15 	stw	r7,172(sp)
1000c24c:	000af380 	call	1000af38 <__sprint_r.part.0>
1000c250:	d8c02a17 	ldw	r3,168(sp)
1000c254:	d9c02b17 	ldw	r7,172(sp)
1000c258:	103eb41e 	bne	r2,zero,1000bd2c <__alt_data_end+0xf800bd2c>
1000c25c:	d9001b17 	ldw	r4,108(sp)
1000c260:	d8801c17 	ldw	r2,112(sp)
1000c264:	d811883a 	mov	r8,sp
1000c268:	21400044 	addi	r5,r4,1
1000c26c:	003e6706 	br	1000bc0c <__alt_data_end+0xf800bc0c>
1000c270:	00bfffc4 	movi	r2,-1
1000c274:	003c4a06 	br	1000b3a0 <__alt_data_end+0xf800b3a0>
1000c278:	9805883a 	mov	r2,r19
1000c27c:	003ee806 	br	1000be20 <__alt_data_end+0xf800be20>
1000c280:	d8c02217 	ldw	r3,136(sp)
1000c284:	0029883a 	mov	r20,zero
1000c288:	18800104 	addi	r2,r3,4
1000c28c:	1cc0000b 	ldhu	r19,0(r3)
1000c290:	803f9e0e 	bge	r16,zero,1000c10c <__alt_data_end+0xf800c10c>
1000c294:	003dd706 	br	1000b9f4 <__alt_data_end+0xf800b9f4>
1000c298:	d8c02217 	ldw	r3,136(sp)
1000c29c:	d9002417 	ldw	r4,144(sp)
1000c2a0:	18800017 	ldw	r2,0(r3)
1000c2a4:	18c00104 	addi	r3,r3,4
1000c2a8:	d8c02215 	stw	r3,136(sp)
1000c2ac:	11000015 	stw	r4,0(r2)
1000c2b0:	003b9a06 	br	1000b11c <__alt_data_end+0xf800b11c>
1000c2b4:	d8c02217 	ldw	r3,136(sp)
1000c2b8:	0029883a 	mov	r20,zero
1000c2bc:	18800104 	addi	r2,r3,4
1000c2c0:	1cc0000b 	ldhu	r19,0(r3)
1000c2c4:	803db20e 	bge	r16,zero,1000b990 <__alt_data_end+0xf800b990>
1000c2c8:	003fb906 	br	1000c1b0 <__alt_data_end+0xf800c1b0>
1000c2cc:	d9002217 	ldw	r4,136(sp)
1000c2d0:	0029883a 	mov	r20,zero
1000c2d4:	24c00017 	ldw	r19,0(r4)
1000c2d8:	21000104 	addi	r4,r4,4
1000c2dc:	d9002215 	stw	r4,136(sp)
1000c2e0:	003d3206 	br	1000b7ac <__alt_data_end+0xf800b7ac>
1000c2e4:	d8c02217 	ldw	r3,136(sp)
1000c2e8:	1cc00017 	ldw	r19,0(r3)
1000c2ec:	18c00104 	addi	r3,r3,4
1000c2f0:	d8c02215 	stw	r3,136(sp)
1000c2f4:	9829d7fa 	srai	r20,r19,31
1000c2f8:	a005883a 	mov	r2,r20
1000c2fc:	003d4b06 	br	1000b82c <__alt_data_end+0xf800b82c>
1000c300:	0009883a 	mov	r4,zero
1000c304:	01400044 	movi	r5,1
1000c308:	d811883a 	mov	r8,sp
1000c30c:	003e4f06 	br	1000bc4c <__alt_data_end+0xf800bc4c>
1000c310:	d8c02215 	stw	r3,136(sp)
1000c314:	002b883a 	mov	r21,zero
1000c318:	003db806 	br	1000b9fc <__alt_data_end+0xf800b9fc>
1000c31c:	d811883a 	mov	r8,sp
1000c320:	003e9606 	br	1000bd7c <__alt_data_end+0xf800bd7c>
1000c324:	01040074 	movhi	r4,4097
1000c328:	210ba004 	addi	r4,r4,11904
1000c32c:	d9002315 	stw	r4,140(sp)
1000c330:	003e6306 	br	1000bcc0 <__alt_data_end+0xf800bcc0>
1000c334:	b0c00043 	ldbu	r3,1(r22)
1000c338:	8c400814 	ori	r17,r17,32
1000c33c:	b5800044 	addi	r22,r22,1
1000c340:	18c03fcc 	andi	r3,r3,255
1000c344:	18c0201c 	xori	r3,r3,128
1000c348:	18ffe004 	addi	r3,r3,-128
1000c34c:	003b9c06 	br	1000b1c0 <__alt_data_end+0xf800b1c0>
1000c350:	b809883a 	mov	r4,r23
1000c354:	da002a15 	stw	r8,168(sp)
1000c358:	0004e6c0 	call	10004e6c <strlen>
1000c35c:	1029883a 	mov	r20,r2
1000c360:	dd401d83 	ldbu	r21,118(sp)
1000c364:	df002215 	stw	fp,136(sp)
1000c368:	0021883a 	mov	r16,zero
1000c36c:	da002a17 	ldw	r8,168(sp)
1000c370:	003c3906 	br	1000b458 <__alt_data_end+0xf800b458>
1000c374:	d9402017 	ldw	r5,128(sp)
1000c378:	d9002117 	ldw	r4,132(sp)
1000c37c:	d9801a04 	addi	r6,sp,104
1000c380:	000af380 	call	1000af38 <__sprint_r.part.0>
1000c384:	103e691e 	bne	r2,zero,1000bd2c <__alt_data_end+0xf800bd2c>
1000c388:	d9001b17 	ldw	r4,108(sp)
1000c38c:	d8801c17 	ldw	r2,112(sp)
1000c390:	d811883a 	mov	r8,sp
1000c394:	21400044 	addi	r5,r4,1
1000c398:	003e2e06 	br	1000bc54 <__alt_data_end+0xf800bc54>
1000c39c:	01040074 	movhi	r4,4097
1000c3a0:	210ba404 	addi	r4,r4,11920
1000c3a4:	d9002315 	stw	r4,140(sp)
1000c3a8:	d9001b17 	ldw	r4,108(sp)
1000c3ac:	21000044 	addi	r4,r4,1
1000c3b0:	003c5e06 	br	1000b52c <__alt_data_end+0xf800b52c>
1000c3b4:	002b883a 	mov	r21,zero
1000c3b8:	00800084 	movi	r2,2
1000c3bc:	10803fcc 	andi	r2,r2,255
1000c3c0:	01000044 	movi	r4,1
1000c3c4:	11002b26 	beq	r2,r4,1000c474 <___vfiprintf_internal_r+0x1428>
1000c3c8:	01000084 	movi	r4,2
1000c3cc:	11002b1e 	bne	r2,r4,1000c47c <___vfiprintf_internal_r+0x1430>
1000c3d0:	1823883a 	mov	r17,r3
1000c3d4:	003ee506 	br	1000bf6c <__alt_data_end+0xf800bf6c>
1000c3d8:	8807883a 	mov	r3,r17
1000c3dc:	00800044 	movi	r2,1
1000c3e0:	003ff606 	br	1000c3bc <__alt_data_end+0xf800c3bc>
1000c3e4:	00800184 	movi	r2,6
1000c3e8:	1400012e 	bgeu	r2,r16,1000c3f0 <___vfiprintf_internal_r+0x13a4>
1000c3ec:	1021883a 	mov	r16,r2
1000c3f0:	8029883a 	mov	r20,r16
1000c3f4:	8027883a 	mov	r19,r16
1000c3f8:	80002216 	blt	r16,zero,1000c484 <___vfiprintf_internal_r+0x1438>
1000c3fc:	05c40074 	movhi	r23,4097
1000c400:	df002215 	stw	fp,136(sp)
1000c404:	bdcb4504 	addi	r23,r23,11540
1000c408:	003cfb06 	br	1000b7f8 <__alt_data_end+0xf800b7f8>
1000c40c:	d9002217 	ldw	r4,136(sp)
1000c410:	d9402417 	ldw	r5,144(sp)
1000c414:	20800017 	ldw	r2,0(r4)
1000c418:	21000104 	addi	r4,r4,4
1000c41c:	d9002215 	stw	r4,136(sp)
1000c420:	11400015 	stw	r5,0(r2)
1000c424:	003b3d06 	br	1000b11c <__alt_data_end+0xf800b11c>
1000c428:	01440074 	movhi	r5,4097
1000c42c:	294ba404 	addi	r5,r5,11920
1000c430:	d9402315 	stw	r5,140(sp)
1000c434:	d9401b17 	ldw	r5,108(sp)
1000c438:	29400044 	addi	r5,r5,1
1000c43c:	003e6d06 	br	1000bdf4 <__alt_data_end+0xf800bdf4>
1000c440:	8029883a 	mov	r20,r16
1000c444:	dd401d83 	ldbu	r21,118(sp)
1000c448:	df002215 	stw	fp,136(sp)
1000c44c:	0021883a 	mov	r16,zero
1000c450:	003c0106 	br	1000b458 <__alt_data_end+0xf800b458>
1000c454:	00c40074 	movhi	r3,4097
1000c458:	18cba004 	addi	r3,r3,11904
1000c45c:	d8c02315 	stw	r3,140(sp)
1000c460:	280d883a 	mov	r6,r5
1000c464:	003c6906 	br	1000b60c <__alt_data_end+0xf800b60c>
1000c468:	802d883a 	mov	r22,r16
1000c46c:	0021883a 	mov	r16,zero
1000c470:	003b5406 	br	1000b1c4 <__alt_data_end+0xf800b1c4>
1000c474:	1823883a 	mov	r17,r3
1000c478:	003cf306 	br	1000b848 <__alt_data_end+0xf800b848>
1000c47c:	1823883a 	mov	r17,r3
1000c480:	003cad06 	br	1000b738 <__alt_data_end+0xf800b738>
1000c484:	0027883a 	mov	r19,zero
1000c488:	003fdc06 	br	1000c3fc <__alt_data_end+0xf800c3fc>
1000c48c:	d9402217 	ldw	r5,136(sp)
1000c490:	8005883a 	mov	r2,r16
1000c494:	b0c00043 	ldbu	r3,1(r22)
1000c498:	2c000017 	ldw	r16,0(r5)
1000c49c:	29000104 	addi	r4,r5,4
1000c4a0:	d9002215 	stw	r4,136(sp)
1000c4a4:	102d883a 	mov	r22,r2
1000c4a8:	803fa50e 	bge	r16,zero,1000c340 <__alt_data_end+0xf800c340>
1000c4ac:	18c03fcc 	andi	r3,r3,255
1000c4b0:	18c0201c 	xori	r3,r3,128
1000c4b4:	043fffc4 	movi	r16,-1
1000c4b8:	18ffe004 	addi	r3,r3,-128
1000c4bc:	003b4006 	br	1000b1c0 <__alt_data_end+0xf800b1c0>
1000c4c0:	d9402303 	ldbu	r5,140(sp)
1000c4c4:	d9401d85 	stb	r5,118(sp)
1000c4c8:	003cae06 	br	1000b784 <__alt_data_end+0xf800b784>
1000c4cc:	d8c02303 	ldbu	r3,140(sp)
1000c4d0:	d8c01d85 	stb	r3,118(sp)
1000c4d4:	003d1406 	br	1000b928 <__alt_data_end+0xf800b928>
1000c4d8:	d8c02303 	ldbu	r3,140(sp)
1000c4dc:	d8c01d85 	stb	r3,118(sp)
1000c4e0:	003cca06 	br	1000b80c <__alt_data_end+0xf800b80c>
1000c4e4:	8880004c 	andi	r2,r17,1
1000c4e8:	002b883a 	mov	r21,zero
1000c4ec:	10000526 	beq	r2,zero,1000c504 <___vfiprintf_internal_r+0x14b8>
1000c4f0:	00800c04 	movi	r2,48
1000c4f4:	d88019c5 	stb	r2,103(sp)
1000c4f8:	dd002817 	ldw	r20,160(sp)
1000c4fc:	ddc019c4 	addi	r23,sp,103
1000c500:	003bd506 	br	1000b458 <__alt_data_end+0xf800b458>
1000c504:	0029883a 	mov	r20,zero
1000c508:	ddc01a04 	addi	r23,sp,104
1000c50c:	003bd206 	br	1000b458 <__alt_data_end+0xf800b458>
1000c510:	d9002303 	ldbu	r4,140(sp)
1000c514:	d9001d85 	stb	r4,118(sp)
1000c518:	003da606 	br	1000bbb4 <__alt_data_end+0xf800bbb4>
1000c51c:	d8c02303 	ldbu	r3,140(sp)
1000c520:	d8c01d85 	stb	r3,118(sp)
1000c524:	003c7606 	br	1000b700 <__alt_data_end+0xf800b700>
1000c528:	d8c02303 	ldbu	r3,140(sp)
1000c52c:	d8c01d85 	stb	r3,118(sp)
1000c530:	003c6506 	br	1000b6c8 <__alt_data_end+0xf800b6c8>
1000c534:	d9002303 	ldbu	r4,140(sp)
1000c538:	d9001d85 	stb	r4,118(sp)
1000c53c:	003d3d06 	br	1000ba34 <__alt_data_end+0xf800ba34>
1000c540:	d8c02303 	ldbu	r3,140(sp)
1000c544:	d8c01d85 	stb	r3,118(sp)
1000c548:	003d1d06 	br	1000b9c0 <__alt_data_end+0xf800b9c0>
1000c54c:	d8c02303 	ldbu	r3,140(sp)
1000c550:	d8c01d85 	stb	r3,118(sp)
1000c554:	003d0306 	br	1000b964 <__alt_data_end+0xf800b964>

1000c558 <__vfiprintf_internal>:
1000c558:	00840074 	movhi	r2,4097
1000c55c:	1092eb04 	addi	r2,r2,19372
1000c560:	300f883a 	mov	r7,r6
1000c564:	280d883a 	mov	r6,r5
1000c568:	200b883a 	mov	r5,r4
1000c56c:	11000017 	ldw	r4,0(r2)
1000c570:	000b04c1 	jmpi	1000b04c <___vfiprintf_internal_r>

1000c574 <__sbprintf>:
1000c574:	2880030b 	ldhu	r2,12(r5)
1000c578:	2ac01917 	ldw	r11,100(r5)
1000c57c:	2a80038b 	ldhu	r10,14(r5)
1000c580:	2a400717 	ldw	r9,28(r5)
1000c584:	2a000917 	ldw	r8,36(r5)
1000c588:	defee204 	addi	sp,sp,-1144
1000c58c:	00c10004 	movi	r3,1024
1000c590:	dc011a15 	stw	r16,1128(sp)
1000c594:	10bfff4c 	andi	r2,r2,65533
1000c598:	2821883a 	mov	r16,r5
1000c59c:	d8cb883a 	add	r5,sp,r3
1000c5a0:	dc811c15 	stw	r18,1136(sp)
1000c5a4:	dc411b15 	stw	r17,1132(sp)
1000c5a8:	dfc11d15 	stw	ra,1140(sp)
1000c5ac:	2025883a 	mov	r18,r4
1000c5b0:	d881030d 	sth	r2,1036(sp)
1000c5b4:	dac11915 	stw	r11,1124(sp)
1000c5b8:	da81038d 	sth	r10,1038(sp)
1000c5bc:	da410715 	stw	r9,1052(sp)
1000c5c0:	da010915 	stw	r8,1060(sp)
1000c5c4:	dec10015 	stw	sp,1024(sp)
1000c5c8:	dec10415 	stw	sp,1040(sp)
1000c5cc:	d8c10215 	stw	r3,1032(sp)
1000c5d0:	d8c10515 	stw	r3,1044(sp)
1000c5d4:	d8010615 	stw	zero,1048(sp)
1000c5d8:	000b04c0 	call	1000b04c <___vfiprintf_internal_r>
1000c5dc:	1023883a 	mov	r17,r2
1000c5e0:	10000416 	blt	r2,zero,1000c5f4 <__sbprintf+0x80>
1000c5e4:	d9410004 	addi	r5,sp,1024
1000c5e8:	9009883a 	mov	r4,r18
1000c5ec:	00022300 	call	10002230 <_fflush_r>
1000c5f0:	10000d1e 	bne	r2,zero,1000c628 <__sbprintf+0xb4>
1000c5f4:	d881030b 	ldhu	r2,1036(sp)
1000c5f8:	1080100c 	andi	r2,r2,64
1000c5fc:	10000326 	beq	r2,zero,1000c60c <__sbprintf+0x98>
1000c600:	8080030b 	ldhu	r2,12(r16)
1000c604:	10801014 	ori	r2,r2,64
1000c608:	8080030d 	sth	r2,12(r16)
1000c60c:	8805883a 	mov	r2,r17
1000c610:	dfc11d17 	ldw	ra,1140(sp)
1000c614:	dc811c17 	ldw	r18,1136(sp)
1000c618:	dc411b17 	ldw	r17,1132(sp)
1000c61c:	dc011a17 	ldw	r16,1128(sp)
1000c620:	dec11e04 	addi	sp,sp,1144
1000c624:	f800283a 	ret
1000c628:	047fffc4 	movi	r17,-1
1000c62c:	003ff106 	br	1000c5f4 <__alt_data_end+0xf800c5f4>

1000c630 <__swbuf_r>:
1000c630:	defffb04 	addi	sp,sp,-20
1000c634:	dcc00315 	stw	r19,12(sp)
1000c638:	dc800215 	stw	r18,8(sp)
1000c63c:	dc000015 	stw	r16,0(sp)
1000c640:	dfc00415 	stw	ra,16(sp)
1000c644:	dc400115 	stw	r17,4(sp)
1000c648:	2025883a 	mov	r18,r4
1000c64c:	2827883a 	mov	r19,r5
1000c650:	3021883a 	mov	r16,r6
1000c654:	20000226 	beq	r4,zero,1000c660 <__swbuf_r+0x30>
1000c658:	20800e17 	ldw	r2,56(r4)
1000c65c:	10004226 	beq	r2,zero,1000c768 <__swbuf_r+0x138>
1000c660:	80800617 	ldw	r2,24(r16)
1000c664:	8100030b 	ldhu	r4,12(r16)
1000c668:	80800215 	stw	r2,8(r16)
1000c66c:	2080020c 	andi	r2,r4,8
1000c670:	10003626 	beq	r2,zero,1000c74c <__swbuf_r+0x11c>
1000c674:	80c00417 	ldw	r3,16(r16)
1000c678:	18003426 	beq	r3,zero,1000c74c <__swbuf_r+0x11c>
1000c67c:	2088000c 	andi	r2,r4,8192
1000c680:	9c403fcc 	andi	r17,r19,255
1000c684:	10001a26 	beq	r2,zero,1000c6f0 <__swbuf_r+0xc0>
1000c688:	80800017 	ldw	r2,0(r16)
1000c68c:	81000517 	ldw	r4,20(r16)
1000c690:	10c7c83a 	sub	r3,r2,r3
1000c694:	1900200e 	bge	r3,r4,1000c718 <__swbuf_r+0xe8>
1000c698:	18c00044 	addi	r3,r3,1
1000c69c:	81000217 	ldw	r4,8(r16)
1000c6a0:	11400044 	addi	r5,r2,1
1000c6a4:	81400015 	stw	r5,0(r16)
1000c6a8:	213fffc4 	addi	r4,r4,-1
1000c6ac:	81000215 	stw	r4,8(r16)
1000c6b0:	14c00005 	stb	r19,0(r2)
1000c6b4:	80800517 	ldw	r2,20(r16)
1000c6b8:	10c01e26 	beq	r2,r3,1000c734 <__swbuf_r+0x104>
1000c6bc:	8080030b 	ldhu	r2,12(r16)
1000c6c0:	1080004c 	andi	r2,r2,1
1000c6c4:	10000226 	beq	r2,zero,1000c6d0 <__swbuf_r+0xa0>
1000c6c8:	00800284 	movi	r2,10
1000c6cc:	88801926 	beq	r17,r2,1000c734 <__swbuf_r+0x104>
1000c6d0:	8805883a 	mov	r2,r17
1000c6d4:	dfc00417 	ldw	ra,16(sp)
1000c6d8:	dcc00317 	ldw	r19,12(sp)
1000c6dc:	dc800217 	ldw	r18,8(sp)
1000c6e0:	dc400117 	ldw	r17,4(sp)
1000c6e4:	dc000017 	ldw	r16,0(sp)
1000c6e8:	dec00504 	addi	sp,sp,20
1000c6ec:	f800283a 	ret
1000c6f0:	81401917 	ldw	r5,100(r16)
1000c6f4:	00b7ffc4 	movi	r2,-8193
1000c6f8:	21080014 	ori	r4,r4,8192
1000c6fc:	2884703a 	and	r2,r5,r2
1000c700:	80801915 	stw	r2,100(r16)
1000c704:	80800017 	ldw	r2,0(r16)
1000c708:	8100030d 	sth	r4,12(r16)
1000c70c:	81000517 	ldw	r4,20(r16)
1000c710:	10c7c83a 	sub	r3,r2,r3
1000c714:	193fe016 	blt	r3,r4,1000c698 <__alt_data_end+0xf800c698>
1000c718:	800b883a 	mov	r5,r16
1000c71c:	9009883a 	mov	r4,r18
1000c720:	00022300 	call	10002230 <_fflush_r>
1000c724:	1000071e 	bne	r2,zero,1000c744 <__swbuf_r+0x114>
1000c728:	80800017 	ldw	r2,0(r16)
1000c72c:	00c00044 	movi	r3,1
1000c730:	003fda06 	br	1000c69c <__alt_data_end+0xf800c69c>
1000c734:	800b883a 	mov	r5,r16
1000c738:	9009883a 	mov	r4,r18
1000c73c:	00022300 	call	10002230 <_fflush_r>
1000c740:	103fe326 	beq	r2,zero,1000c6d0 <__alt_data_end+0xf800c6d0>
1000c744:	00bfffc4 	movi	r2,-1
1000c748:	003fe206 	br	1000c6d4 <__alt_data_end+0xf800c6d4>
1000c74c:	800b883a 	mov	r5,r16
1000c750:	9009883a 	mov	r4,r18
1000c754:	00073300 	call	10007330 <__swsetup_r>
1000c758:	103ffa1e 	bne	r2,zero,1000c744 <__alt_data_end+0xf800c744>
1000c75c:	8100030b 	ldhu	r4,12(r16)
1000c760:	80c00417 	ldw	r3,16(r16)
1000c764:	003fc506 	br	1000c67c <__alt_data_end+0xf800c67c>
1000c768:	000261c0 	call	1000261c <__sinit>
1000c76c:	003fbc06 	br	1000c660 <__alt_data_end+0xf800c660>

1000c770 <__swbuf>:
1000c770:	00840074 	movhi	r2,4097
1000c774:	1092eb04 	addi	r2,r2,19372
1000c778:	280d883a 	mov	r6,r5
1000c77c:	200b883a 	mov	r5,r4
1000c780:	11000017 	ldw	r4,0(r2)
1000c784:	000c6301 	jmpi	1000c630 <__swbuf_r>

1000c788 <__fputwc>:
1000c788:	defff804 	addi	sp,sp,-32
1000c78c:	dcc00415 	stw	r19,16(sp)
1000c790:	dc800315 	stw	r18,12(sp)
1000c794:	dc000115 	stw	r16,4(sp)
1000c798:	dfc00715 	stw	ra,28(sp)
1000c79c:	dd400615 	stw	r21,24(sp)
1000c7a0:	dd000515 	stw	r20,20(sp)
1000c7a4:	dc400215 	stw	r17,8(sp)
1000c7a8:	2027883a 	mov	r19,r4
1000c7ac:	2825883a 	mov	r18,r5
1000c7b0:	3021883a 	mov	r16,r6
1000c7b4:	00095700 	call	10009570 <__locale_mb_cur_max>
1000c7b8:	00c00044 	movi	r3,1
1000c7bc:	10c03e26 	beq	r2,r3,1000c8b8 <__fputwc+0x130>
1000c7c0:	81c01704 	addi	r7,r16,92
1000c7c4:	900d883a 	mov	r6,r18
1000c7c8:	d80b883a 	mov	r5,sp
1000c7cc:	9809883a 	mov	r4,r19
1000c7d0:	000c9900 	call	1000c990 <_wcrtomb_r>
1000c7d4:	1029883a 	mov	r20,r2
1000c7d8:	00bfffc4 	movi	r2,-1
1000c7dc:	a0802026 	beq	r20,r2,1000c860 <__fputwc+0xd8>
1000c7e0:	d9400003 	ldbu	r5,0(sp)
1000c7e4:	a0001c26 	beq	r20,zero,1000c858 <__fputwc+0xd0>
1000c7e8:	0023883a 	mov	r17,zero
1000c7ec:	05400284 	movi	r21,10
1000c7f0:	00000906 	br	1000c818 <__fputwc+0x90>
1000c7f4:	80800017 	ldw	r2,0(r16)
1000c7f8:	11400005 	stb	r5,0(r2)
1000c7fc:	80c00017 	ldw	r3,0(r16)
1000c800:	18c00044 	addi	r3,r3,1
1000c804:	80c00015 	stw	r3,0(r16)
1000c808:	8c400044 	addi	r17,r17,1
1000c80c:	dc45883a 	add	r2,sp,r17
1000c810:	8d00112e 	bgeu	r17,r20,1000c858 <__fputwc+0xd0>
1000c814:	11400003 	ldbu	r5,0(r2)
1000c818:	80c00217 	ldw	r3,8(r16)
1000c81c:	18ffffc4 	addi	r3,r3,-1
1000c820:	80c00215 	stw	r3,8(r16)
1000c824:	183ff30e 	bge	r3,zero,1000c7f4 <__alt_data_end+0xf800c7f4>
1000c828:	80800617 	ldw	r2,24(r16)
1000c82c:	18801916 	blt	r3,r2,1000c894 <__fputwc+0x10c>
1000c830:	80800017 	ldw	r2,0(r16)
1000c834:	11400005 	stb	r5,0(r2)
1000c838:	80800017 	ldw	r2,0(r16)
1000c83c:	10c00003 	ldbu	r3,0(r2)
1000c840:	10800044 	addi	r2,r2,1
1000c844:	1d402326 	beq	r3,r21,1000c8d4 <__fputwc+0x14c>
1000c848:	80800015 	stw	r2,0(r16)
1000c84c:	8c400044 	addi	r17,r17,1
1000c850:	dc45883a 	add	r2,sp,r17
1000c854:	8d3fef36 	bltu	r17,r20,1000c814 <__alt_data_end+0xf800c814>
1000c858:	9005883a 	mov	r2,r18
1000c85c:	00000406 	br	1000c870 <__fputwc+0xe8>
1000c860:	80c0030b 	ldhu	r3,12(r16)
1000c864:	a005883a 	mov	r2,r20
1000c868:	18c01014 	ori	r3,r3,64
1000c86c:	80c0030d 	sth	r3,12(r16)
1000c870:	dfc00717 	ldw	ra,28(sp)
1000c874:	dd400617 	ldw	r21,24(sp)
1000c878:	dd000517 	ldw	r20,20(sp)
1000c87c:	dcc00417 	ldw	r19,16(sp)
1000c880:	dc800317 	ldw	r18,12(sp)
1000c884:	dc400217 	ldw	r17,8(sp)
1000c888:	dc000117 	ldw	r16,4(sp)
1000c88c:	dec00804 	addi	sp,sp,32
1000c890:	f800283a 	ret
1000c894:	800d883a 	mov	r6,r16
1000c898:	29403fcc 	andi	r5,r5,255
1000c89c:	9809883a 	mov	r4,r19
1000c8a0:	000c6300 	call	1000c630 <__swbuf_r>
1000c8a4:	10bfffe0 	cmpeqi	r2,r2,-1
1000c8a8:	10803fcc 	andi	r2,r2,255
1000c8ac:	103fd626 	beq	r2,zero,1000c808 <__alt_data_end+0xf800c808>
1000c8b0:	00bfffc4 	movi	r2,-1
1000c8b4:	003fee06 	br	1000c870 <__alt_data_end+0xf800c870>
1000c8b8:	90ffffc4 	addi	r3,r18,-1
1000c8bc:	01003f84 	movi	r4,254
1000c8c0:	20ffbf36 	bltu	r4,r3,1000c7c0 <__alt_data_end+0xf800c7c0>
1000c8c4:	900b883a 	mov	r5,r18
1000c8c8:	dc800005 	stb	r18,0(sp)
1000c8cc:	1029883a 	mov	r20,r2
1000c8d0:	003fc506 	br	1000c7e8 <__alt_data_end+0xf800c7e8>
1000c8d4:	800d883a 	mov	r6,r16
1000c8d8:	a80b883a 	mov	r5,r21
1000c8dc:	9809883a 	mov	r4,r19
1000c8e0:	000c6300 	call	1000c630 <__swbuf_r>
1000c8e4:	10bfffe0 	cmpeqi	r2,r2,-1
1000c8e8:	003fef06 	br	1000c8a8 <__alt_data_end+0xf800c8a8>

1000c8ec <_fputwc_r>:
1000c8ec:	3080030b 	ldhu	r2,12(r6)
1000c8f0:	10c8000c 	andi	r3,r2,8192
1000c8f4:	1800051e 	bne	r3,zero,1000c90c <_fputwc_r+0x20>
1000c8f8:	30c01917 	ldw	r3,100(r6)
1000c8fc:	10880014 	ori	r2,r2,8192
1000c900:	3080030d 	sth	r2,12(r6)
1000c904:	18880014 	ori	r2,r3,8192
1000c908:	30801915 	stw	r2,100(r6)
1000c90c:	000c7881 	jmpi	1000c788 <__fputwc>

1000c910 <fputwc>:
1000c910:	00840074 	movhi	r2,4097
1000c914:	defffc04 	addi	sp,sp,-16
1000c918:	1092eb04 	addi	r2,r2,19372
1000c91c:	dc000115 	stw	r16,4(sp)
1000c920:	14000017 	ldw	r16,0(r2)
1000c924:	dc400215 	stw	r17,8(sp)
1000c928:	dfc00315 	stw	ra,12(sp)
1000c92c:	2023883a 	mov	r17,r4
1000c930:	80000226 	beq	r16,zero,1000c93c <fputwc+0x2c>
1000c934:	80800e17 	ldw	r2,56(r16)
1000c938:	10001026 	beq	r2,zero,1000c97c <fputwc+0x6c>
1000c93c:	2880030b 	ldhu	r2,12(r5)
1000c940:	10c8000c 	andi	r3,r2,8192
1000c944:	1800051e 	bne	r3,zero,1000c95c <fputwc+0x4c>
1000c948:	28c01917 	ldw	r3,100(r5)
1000c94c:	10880014 	ori	r2,r2,8192
1000c950:	2880030d 	sth	r2,12(r5)
1000c954:	18880014 	ori	r2,r3,8192
1000c958:	28801915 	stw	r2,100(r5)
1000c95c:	280d883a 	mov	r6,r5
1000c960:	8009883a 	mov	r4,r16
1000c964:	880b883a 	mov	r5,r17
1000c968:	dfc00317 	ldw	ra,12(sp)
1000c96c:	dc400217 	ldw	r17,8(sp)
1000c970:	dc000117 	ldw	r16,4(sp)
1000c974:	dec00404 	addi	sp,sp,16
1000c978:	000c7881 	jmpi	1000c788 <__fputwc>
1000c97c:	8009883a 	mov	r4,r16
1000c980:	d9400015 	stw	r5,0(sp)
1000c984:	000261c0 	call	1000261c <__sinit>
1000c988:	d9400017 	ldw	r5,0(sp)
1000c98c:	003feb06 	br	1000c93c <__alt_data_end+0xf800c93c>

1000c990 <_wcrtomb_r>:
1000c990:	defff604 	addi	sp,sp,-40
1000c994:	00840074 	movhi	r2,4097
1000c998:	dc800815 	stw	r18,32(sp)
1000c99c:	dc400715 	stw	r17,28(sp)
1000c9a0:	dc000615 	stw	r16,24(sp)
1000c9a4:	1092ef04 	addi	r2,r2,19388
1000c9a8:	dfc00915 	stw	ra,36(sp)
1000c9ac:	2021883a 	mov	r16,r4
1000c9b0:	3823883a 	mov	r17,r7
1000c9b4:	14800017 	ldw	r18,0(r2)
1000c9b8:	28001426 	beq	r5,zero,1000ca0c <_wcrtomb_r+0x7c>
1000c9bc:	d9400415 	stw	r5,16(sp)
1000c9c0:	d9800515 	stw	r6,20(sp)
1000c9c4:	00095640 	call	10009564 <__locale_charset>
1000c9c8:	d9800517 	ldw	r6,20(sp)
1000c9cc:	d9400417 	ldw	r5,16(sp)
1000c9d0:	100f883a 	mov	r7,r2
1000c9d4:	dc400015 	stw	r17,0(sp)
1000c9d8:	8009883a 	mov	r4,r16
1000c9dc:	903ee83a 	callr	r18
1000c9e0:	00ffffc4 	movi	r3,-1
1000c9e4:	10c0031e 	bne	r2,r3,1000c9f4 <_wcrtomb_r+0x64>
1000c9e8:	88000015 	stw	zero,0(r17)
1000c9ec:	00c02284 	movi	r3,138
1000c9f0:	80c00015 	stw	r3,0(r16)
1000c9f4:	dfc00917 	ldw	ra,36(sp)
1000c9f8:	dc800817 	ldw	r18,32(sp)
1000c9fc:	dc400717 	ldw	r17,28(sp)
1000ca00:	dc000617 	ldw	r16,24(sp)
1000ca04:	dec00a04 	addi	sp,sp,40
1000ca08:	f800283a 	ret
1000ca0c:	00095640 	call	10009564 <__locale_charset>
1000ca10:	100f883a 	mov	r7,r2
1000ca14:	dc400015 	stw	r17,0(sp)
1000ca18:	000d883a 	mov	r6,zero
1000ca1c:	d9400104 	addi	r5,sp,4
1000ca20:	8009883a 	mov	r4,r16
1000ca24:	903ee83a 	callr	r18
1000ca28:	003fed06 	br	1000c9e0 <__alt_data_end+0xf800c9e0>

1000ca2c <wcrtomb>:
1000ca2c:	defff604 	addi	sp,sp,-40
1000ca30:	00840074 	movhi	r2,4097
1000ca34:	dc800615 	stw	r18,24(sp)
1000ca38:	dc400515 	stw	r17,20(sp)
1000ca3c:	1092eb04 	addi	r2,r2,19372
1000ca40:	dfc00915 	stw	ra,36(sp)
1000ca44:	dd000815 	stw	r20,32(sp)
1000ca48:	dcc00715 	stw	r19,28(sp)
1000ca4c:	dc000415 	stw	r16,16(sp)
1000ca50:	3025883a 	mov	r18,r6
1000ca54:	14400017 	ldw	r17,0(r2)
1000ca58:	20001926 	beq	r4,zero,1000cac0 <wcrtomb+0x94>
1000ca5c:	00840074 	movhi	r2,4097
1000ca60:	1092ef04 	addi	r2,r2,19388
1000ca64:	15000017 	ldw	r20,0(r2)
1000ca68:	2021883a 	mov	r16,r4
1000ca6c:	2827883a 	mov	r19,r5
1000ca70:	00095640 	call	10009564 <__locale_charset>
1000ca74:	100f883a 	mov	r7,r2
1000ca78:	dc800015 	stw	r18,0(sp)
1000ca7c:	980d883a 	mov	r6,r19
1000ca80:	800b883a 	mov	r5,r16
1000ca84:	8809883a 	mov	r4,r17
1000ca88:	a03ee83a 	callr	r20
1000ca8c:	00ffffc4 	movi	r3,-1
1000ca90:	10c0031e 	bne	r2,r3,1000caa0 <wcrtomb+0x74>
1000ca94:	90000015 	stw	zero,0(r18)
1000ca98:	00c02284 	movi	r3,138
1000ca9c:	88c00015 	stw	r3,0(r17)
1000caa0:	dfc00917 	ldw	ra,36(sp)
1000caa4:	dd000817 	ldw	r20,32(sp)
1000caa8:	dcc00717 	ldw	r19,28(sp)
1000caac:	dc800617 	ldw	r18,24(sp)
1000cab0:	dc400517 	ldw	r17,20(sp)
1000cab4:	dc000417 	ldw	r16,16(sp)
1000cab8:	dec00a04 	addi	sp,sp,40
1000cabc:	f800283a 	ret
1000cac0:	00840074 	movhi	r2,4097
1000cac4:	1092ef04 	addi	r2,r2,19388
1000cac8:	14000017 	ldw	r16,0(r2)
1000cacc:	00095640 	call	10009564 <__locale_charset>
1000cad0:	100f883a 	mov	r7,r2
1000cad4:	dc800015 	stw	r18,0(sp)
1000cad8:	000d883a 	mov	r6,zero
1000cadc:	d9400104 	addi	r5,sp,4
1000cae0:	8809883a 	mov	r4,r17
1000cae4:	803ee83a 	callr	r16
1000cae8:	003fe806 	br	1000ca8c <__alt_data_end+0xf800ca8c>

1000caec <__ascii_wctomb>:
1000caec:	28000526 	beq	r5,zero,1000cb04 <__ascii_wctomb+0x18>
1000caf0:	00803fc4 	movi	r2,255
1000caf4:	11800536 	bltu	r2,r6,1000cb0c <__ascii_wctomb+0x20>
1000caf8:	29800005 	stb	r6,0(r5)
1000cafc:	00800044 	movi	r2,1
1000cb00:	f800283a 	ret
1000cb04:	0005883a 	mov	r2,zero
1000cb08:	f800283a 	ret
1000cb0c:	00802284 	movi	r2,138
1000cb10:	20800015 	stw	r2,0(r4)
1000cb14:	00bfffc4 	movi	r2,-1
1000cb18:	f800283a 	ret

1000cb1c <_wctomb_r>:
1000cb1c:	00840074 	movhi	r2,4097
1000cb20:	defff904 	addi	sp,sp,-28
1000cb24:	1092ef04 	addi	r2,r2,19388
1000cb28:	dfc00615 	stw	ra,24(sp)
1000cb2c:	dc400515 	stw	r17,20(sp)
1000cb30:	dc000415 	stw	r16,16(sp)
1000cb34:	3823883a 	mov	r17,r7
1000cb38:	14000017 	ldw	r16,0(r2)
1000cb3c:	d9000115 	stw	r4,4(sp)
1000cb40:	d9400215 	stw	r5,8(sp)
1000cb44:	d9800315 	stw	r6,12(sp)
1000cb48:	00095640 	call	10009564 <__locale_charset>
1000cb4c:	d9800317 	ldw	r6,12(sp)
1000cb50:	d9400217 	ldw	r5,8(sp)
1000cb54:	d9000117 	ldw	r4,4(sp)
1000cb58:	100f883a 	mov	r7,r2
1000cb5c:	dc400015 	stw	r17,0(sp)
1000cb60:	803ee83a 	callr	r16
1000cb64:	dfc00617 	ldw	ra,24(sp)
1000cb68:	dc400517 	ldw	r17,20(sp)
1000cb6c:	dc000417 	ldw	r16,16(sp)
1000cb70:	dec00704 	addi	sp,sp,28
1000cb74:	f800283a 	ret

1000cb78 <__udivdi3>:
1000cb78:	defff404 	addi	sp,sp,-48
1000cb7c:	dcc00515 	stw	r19,20(sp)
1000cb80:	dc000215 	stw	r16,8(sp)
1000cb84:	dfc00b15 	stw	ra,44(sp)
1000cb88:	df000a15 	stw	fp,40(sp)
1000cb8c:	ddc00915 	stw	r23,36(sp)
1000cb90:	dd800815 	stw	r22,32(sp)
1000cb94:	dd400715 	stw	r21,28(sp)
1000cb98:	dd000615 	stw	r20,24(sp)
1000cb9c:	dc800415 	stw	r18,16(sp)
1000cba0:	dc400315 	stw	r17,12(sp)
1000cba4:	2027883a 	mov	r19,r4
1000cba8:	2821883a 	mov	r16,r5
1000cbac:	3800461e 	bne	r7,zero,1000ccc8 <__udivdi3+0x150>
1000cbb0:	3023883a 	mov	r17,r6
1000cbb4:	2025883a 	mov	r18,r4
1000cbb8:	2980572e 	bgeu	r5,r6,1000cd18 <__udivdi3+0x1a0>
1000cbbc:	00bfffd4 	movui	r2,65535
1000cbc0:	282d883a 	mov	r22,r5
1000cbc4:	1180b236 	bltu	r2,r6,1000ce90 <__udivdi3+0x318>
1000cbc8:	00803fc4 	movi	r2,255
1000cbcc:	1185803a 	cmpltu	r2,r2,r6
1000cbd0:	100490fa 	slli	r2,r2,3
1000cbd4:	3086d83a 	srl	r3,r6,r2
1000cbd8:	01040074 	movhi	r4,4097
1000cbdc:	210ba804 	addi	r4,r4,11936
1000cbe0:	20c7883a 	add	r3,r4,r3
1000cbe4:	18c00003 	ldbu	r3,0(r3)
1000cbe8:	1885883a 	add	r2,r3,r2
1000cbec:	00c00804 	movi	r3,32
1000cbf0:	1887c83a 	sub	r3,r3,r2
1000cbf4:	18000526 	beq	r3,zero,1000cc0c <__udivdi3+0x94>
1000cbf8:	80e0983a 	sll	r16,r16,r3
1000cbfc:	9884d83a 	srl	r2,r19,r2
1000cc00:	30e2983a 	sll	r17,r6,r3
1000cc04:	98e4983a 	sll	r18,r19,r3
1000cc08:	142cb03a 	or	r22,r2,r16
1000cc0c:	882ad43a 	srli	r21,r17,16
1000cc10:	b009883a 	mov	r4,r22
1000cc14:	8d3fffcc 	andi	r20,r17,65535
1000cc18:	a80b883a 	mov	r5,r21
1000cc1c:	0001ce80 	call	10001ce8 <__umodsi3>
1000cc20:	b009883a 	mov	r4,r22
1000cc24:	a80b883a 	mov	r5,r21
1000cc28:	1027883a 	mov	r19,r2
1000cc2c:	0001c840 	call	10001c84 <__udivsi3>
1000cc30:	100b883a 	mov	r5,r2
1000cc34:	a009883a 	mov	r4,r20
1000cc38:	102d883a 	mov	r22,r2
1000cc3c:	0001d400 	call	10001d40 <__mulsi3>
1000cc40:	9826943a 	slli	r19,r19,16
1000cc44:	9006d43a 	srli	r3,r18,16
1000cc48:	1cc6b03a 	or	r3,r3,r19
1000cc4c:	1880052e 	bgeu	r3,r2,1000cc64 <__udivdi3+0xec>
1000cc50:	1c47883a 	add	r3,r3,r17
1000cc54:	b13fffc4 	addi	r4,r22,-1
1000cc58:	1c400136 	bltu	r3,r17,1000cc60 <__udivdi3+0xe8>
1000cc5c:	18814236 	bltu	r3,r2,1000d168 <__udivdi3+0x5f0>
1000cc60:	202d883a 	mov	r22,r4
1000cc64:	18a1c83a 	sub	r16,r3,r2
1000cc68:	8009883a 	mov	r4,r16
1000cc6c:	a80b883a 	mov	r5,r21
1000cc70:	0001ce80 	call	10001ce8 <__umodsi3>
1000cc74:	1027883a 	mov	r19,r2
1000cc78:	8009883a 	mov	r4,r16
1000cc7c:	a80b883a 	mov	r5,r21
1000cc80:	9826943a 	slli	r19,r19,16
1000cc84:	0001c840 	call	10001c84 <__udivsi3>
1000cc88:	100b883a 	mov	r5,r2
1000cc8c:	a009883a 	mov	r4,r20
1000cc90:	94bfffcc 	andi	r18,r18,65535
1000cc94:	1021883a 	mov	r16,r2
1000cc98:	94e4b03a 	or	r18,r18,r19
1000cc9c:	0001d400 	call	10001d40 <__mulsi3>
1000cca0:	9080052e 	bgeu	r18,r2,1000ccb8 <__udivdi3+0x140>
1000cca4:	8ca5883a 	add	r18,r17,r18
1000cca8:	80ffffc4 	addi	r3,r16,-1
1000ccac:	94410c36 	bltu	r18,r17,1000d0e0 <__udivdi3+0x568>
1000ccb0:	90810b2e 	bgeu	r18,r2,1000d0e0 <__udivdi3+0x568>
1000ccb4:	843fff84 	addi	r16,r16,-2
1000ccb8:	b004943a 	slli	r2,r22,16
1000ccbc:	0007883a 	mov	r3,zero
1000ccc0:	1404b03a 	or	r2,r2,r16
1000ccc4:	00005e06 	br	1000ce40 <__udivdi3+0x2c8>
1000ccc8:	29c05b36 	bltu	r5,r7,1000ce38 <__udivdi3+0x2c0>
1000cccc:	00bfffd4 	movui	r2,65535
1000ccd0:	11c0672e 	bgeu	r2,r7,1000ce70 <__udivdi3+0x2f8>
1000ccd4:	00804034 	movhi	r2,256
1000ccd8:	10bfffc4 	addi	r2,r2,-1
1000ccdc:	11c10a36 	bltu	r2,r7,1000d108 <__udivdi3+0x590>
1000cce0:	00800404 	movi	r2,16
1000cce4:	3886d83a 	srl	r3,r7,r2
1000cce8:	01040074 	movhi	r4,4097
1000ccec:	210ba804 	addi	r4,r4,11936
1000ccf0:	20c7883a 	add	r3,r4,r3
1000ccf4:	18c00003 	ldbu	r3,0(r3)
1000ccf8:	05c00804 	movi	r23,32
1000ccfc:	1885883a 	add	r2,r3,r2
1000cd00:	b8afc83a 	sub	r23,r23,r2
1000cd04:	b800671e 	bne	r23,zero,1000cea4 <__udivdi3+0x32c>
1000cd08:	3c010536 	bltu	r7,r16,1000d120 <__udivdi3+0x5a8>
1000cd0c:	9985403a 	cmpgeu	r2,r19,r6
1000cd10:	0007883a 	mov	r3,zero
1000cd14:	00004a06 	br	1000ce40 <__udivdi3+0x2c8>
1000cd18:	3000041e 	bne	r6,zero,1000cd2c <__udivdi3+0x1b4>
1000cd1c:	000b883a 	mov	r5,zero
1000cd20:	01000044 	movi	r4,1
1000cd24:	0001c840 	call	10001c84 <__udivsi3>
1000cd28:	1023883a 	mov	r17,r2
1000cd2c:	00bfffd4 	movui	r2,65535
1000cd30:	1440532e 	bgeu	r2,r17,1000ce80 <__udivdi3+0x308>
1000cd34:	00804034 	movhi	r2,256
1000cd38:	10bfffc4 	addi	r2,r2,-1
1000cd3c:	1440f436 	bltu	r2,r17,1000d110 <__udivdi3+0x598>
1000cd40:	00800404 	movi	r2,16
1000cd44:	8886d83a 	srl	r3,r17,r2
1000cd48:	01040074 	movhi	r4,4097
1000cd4c:	210ba804 	addi	r4,r4,11936
1000cd50:	20c7883a 	add	r3,r4,r3
1000cd54:	18c00003 	ldbu	r3,0(r3)
1000cd58:	1885883a 	add	r2,r3,r2
1000cd5c:	00c00804 	movi	r3,32
1000cd60:	1887c83a 	sub	r3,r3,r2
1000cd64:	1800a51e 	bne	r3,zero,1000cffc <__udivdi3+0x484>
1000cd68:	882ad43a 	srli	r21,r17,16
1000cd6c:	8461c83a 	sub	r16,r16,r17
1000cd70:	8d3fffcc 	andi	r20,r17,65535
1000cd74:	00c00044 	movi	r3,1
1000cd78:	a80b883a 	mov	r5,r21
1000cd7c:	8009883a 	mov	r4,r16
1000cd80:	d8c00115 	stw	r3,4(sp)
1000cd84:	0001ce80 	call	10001ce8 <__umodsi3>
1000cd88:	a80b883a 	mov	r5,r21
1000cd8c:	8009883a 	mov	r4,r16
1000cd90:	1027883a 	mov	r19,r2
1000cd94:	0001c840 	call	10001c84 <__udivsi3>
1000cd98:	a00b883a 	mov	r5,r20
1000cd9c:	1009883a 	mov	r4,r2
1000cda0:	102d883a 	mov	r22,r2
1000cda4:	0001d400 	call	10001d40 <__mulsi3>
1000cda8:	9826943a 	slli	r19,r19,16
1000cdac:	900ed43a 	srli	r7,r18,16
1000cdb0:	d8c00117 	ldw	r3,4(sp)
1000cdb4:	3cceb03a 	or	r7,r7,r19
1000cdb8:	3880052e 	bgeu	r7,r2,1000cdd0 <__udivdi3+0x258>
1000cdbc:	3c4f883a 	add	r7,r7,r17
1000cdc0:	b13fffc4 	addi	r4,r22,-1
1000cdc4:	3c400136 	bltu	r7,r17,1000cdcc <__udivdi3+0x254>
1000cdc8:	3880e436 	bltu	r7,r2,1000d15c <__udivdi3+0x5e4>
1000cdcc:	202d883a 	mov	r22,r4
1000cdd0:	38a1c83a 	sub	r16,r7,r2
1000cdd4:	8009883a 	mov	r4,r16
1000cdd8:	a80b883a 	mov	r5,r21
1000cddc:	d8c00115 	stw	r3,4(sp)
1000cde0:	0001ce80 	call	10001ce8 <__umodsi3>
1000cde4:	1027883a 	mov	r19,r2
1000cde8:	8009883a 	mov	r4,r16
1000cdec:	a80b883a 	mov	r5,r21
1000cdf0:	9826943a 	slli	r19,r19,16
1000cdf4:	0001c840 	call	10001c84 <__udivsi3>
1000cdf8:	a00b883a 	mov	r5,r20
1000cdfc:	1009883a 	mov	r4,r2
1000ce00:	94bfffcc 	andi	r18,r18,65535
1000ce04:	1021883a 	mov	r16,r2
1000ce08:	94e4b03a 	or	r18,r18,r19
1000ce0c:	0001d400 	call	10001d40 <__mulsi3>
1000ce10:	d8c00117 	ldw	r3,4(sp)
1000ce14:	9080052e 	bgeu	r18,r2,1000ce2c <__udivdi3+0x2b4>
1000ce18:	8ca5883a 	add	r18,r17,r18
1000ce1c:	813fffc4 	addi	r4,r16,-1
1000ce20:	9440ad36 	bltu	r18,r17,1000d0d8 <__udivdi3+0x560>
1000ce24:	9080ac2e 	bgeu	r18,r2,1000d0d8 <__udivdi3+0x560>
1000ce28:	843fff84 	addi	r16,r16,-2
1000ce2c:	b004943a 	slli	r2,r22,16
1000ce30:	1404b03a 	or	r2,r2,r16
1000ce34:	00000206 	br	1000ce40 <__udivdi3+0x2c8>
1000ce38:	0007883a 	mov	r3,zero
1000ce3c:	0005883a 	mov	r2,zero
1000ce40:	dfc00b17 	ldw	ra,44(sp)
1000ce44:	df000a17 	ldw	fp,40(sp)
1000ce48:	ddc00917 	ldw	r23,36(sp)
1000ce4c:	dd800817 	ldw	r22,32(sp)
1000ce50:	dd400717 	ldw	r21,28(sp)
1000ce54:	dd000617 	ldw	r20,24(sp)
1000ce58:	dcc00517 	ldw	r19,20(sp)
1000ce5c:	dc800417 	ldw	r18,16(sp)
1000ce60:	dc400317 	ldw	r17,12(sp)
1000ce64:	dc000217 	ldw	r16,8(sp)
1000ce68:	dec00c04 	addi	sp,sp,48
1000ce6c:	f800283a 	ret
1000ce70:	00803fc4 	movi	r2,255
1000ce74:	11c5803a 	cmpltu	r2,r2,r7
1000ce78:	100490fa 	slli	r2,r2,3
1000ce7c:	003f9906 	br	1000cce4 <__alt_data_end+0xf800cce4>
1000ce80:	00803fc4 	movi	r2,255
1000ce84:	1445803a 	cmpltu	r2,r2,r17
1000ce88:	100490fa 	slli	r2,r2,3
1000ce8c:	003fad06 	br	1000cd44 <__alt_data_end+0xf800cd44>
1000ce90:	00804034 	movhi	r2,256
1000ce94:	10bfffc4 	addi	r2,r2,-1
1000ce98:	11809f36 	bltu	r2,r6,1000d118 <__udivdi3+0x5a0>
1000ce9c:	00800404 	movi	r2,16
1000cea0:	003f4c06 	br	1000cbd4 <__alt_data_end+0xf800cbd4>
1000cea4:	3dce983a 	sll	r7,r7,r23
1000cea8:	30b8d83a 	srl	fp,r6,r2
1000ceac:	80a2d83a 	srl	r17,r16,r2
1000ceb0:	35cc983a 	sll	r6,r6,r23
1000ceb4:	3f38b03a 	or	fp,r7,fp
1000ceb8:	e024d43a 	srli	r18,fp,16
1000cebc:	9884d83a 	srl	r2,r19,r2
1000cec0:	85e0983a 	sll	r16,r16,r23
1000cec4:	8809883a 	mov	r4,r17
1000cec8:	900b883a 	mov	r5,r18
1000cecc:	d9800015 	stw	r6,0(sp)
1000ced0:	1420b03a 	or	r16,r2,r16
1000ced4:	0001ce80 	call	10001ce8 <__umodsi3>
1000ced8:	900b883a 	mov	r5,r18
1000cedc:	8809883a 	mov	r4,r17
1000cee0:	1029883a 	mov	r20,r2
1000cee4:	e5bfffcc 	andi	r22,fp,65535
1000cee8:	0001c840 	call	10001c84 <__udivsi3>
1000ceec:	100b883a 	mov	r5,r2
1000cef0:	b009883a 	mov	r4,r22
1000cef4:	102b883a 	mov	r21,r2
1000cef8:	0001d400 	call	10001d40 <__mulsi3>
1000cefc:	a028943a 	slli	r20,r20,16
1000cf00:	8006d43a 	srli	r3,r16,16
1000cf04:	1d06b03a 	or	r3,r3,r20
1000cf08:	1880042e 	bgeu	r3,r2,1000cf1c <__udivdi3+0x3a4>
1000cf0c:	1f07883a 	add	r3,r3,fp
1000cf10:	a93fffc4 	addi	r4,r21,-1
1000cf14:	1f00892e 	bgeu	r3,fp,1000d13c <__udivdi3+0x5c4>
1000cf18:	202b883a 	mov	r21,r4
1000cf1c:	18a3c83a 	sub	r17,r3,r2
1000cf20:	8809883a 	mov	r4,r17
1000cf24:	900b883a 	mov	r5,r18
1000cf28:	0001ce80 	call	10001ce8 <__umodsi3>
1000cf2c:	1029883a 	mov	r20,r2
1000cf30:	8809883a 	mov	r4,r17
1000cf34:	900b883a 	mov	r5,r18
1000cf38:	a028943a 	slli	r20,r20,16
1000cf3c:	0001c840 	call	10001c84 <__udivsi3>
1000cf40:	100b883a 	mov	r5,r2
1000cf44:	b009883a 	mov	r4,r22
1000cf48:	843fffcc 	andi	r16,r16,65535
1000cf4c:	1023883a 	mov	r17,r2
1000cf50:	8520b03a 	or	r16,r16,r20
1000cf54:	0001d400 	call	10001d40 <__mulsi3>
1000cf58:	8080042e 	bgeu	r16,r2,1000cf6c <__udivdi3+0x3f4>
1000cf5c:	8721883a 	add	r16,r16,fp
1000cf60:	88ffffc4 	addi	r3,r17,-1
1000cf64:	8700712e 	bgeu	r16,fp,1000d12c <__udivdi3+0x5b4>
1000cf68:	1823883a 	mov	r17,r3
1000cf6c:	a80e943a 	slli	r7,r21,16
1000cf70:	d8c00017 	ldw	r3,0(sp)
1000cf74:	80a1c83a 	sub	r16,r16,r2
1000cf78:	3c64b03a 	or	r18,r7,r17
1000cf7c:	1d3fffcc 	andi	r20,r3,65535
1000cf80:	9022d43a 	srli	r17,r18,16
1000cf84:	95bfffcc 	andi	r22,r18,65535
1000cf88:	a00b883a 	mov	r5,r20
1000cf8c:	b009883a 	mov	r4,r22
1000cf90:	182ad43a 	srli	r21,r3,16
1000cf94:	0001d400 	call	10001d40 <__mulsi3>
1000cf98:	a00b883a 	mov	r5,r20
1000cf9c:	8809883a 	mov	r4,r17
1000cfa0:	1039883a 	mov	fp,r2
1000cfa4:	0001d400 	call	10001d40 <__mulsi3>
1000cfa8:	8809883a 	mov	r4,r17
1000cfac:	a80b883a 	mov	r5,r21
1000cfb0:	1029883a 	mov	r20,r2
1000cfb4:	0001d400 	call	10001d40 <__mulsi3>
1000cfb8:	a80b883a 	mov	r5,r21
1000cfbc:	b009883a 	mov	r4,r22
1000cfc0:	1023883a 	mov	r17,r2
1000cfc4:	0001d400 	call	10001d40 <__mulsi3>
1000cfc8:	e006d43a 	srli	r3,fp,16
1000cfcc:	1505883a 	add	r2,r2,r20
1000cfd0:	1887883a 	add	r3,r3,r2
1000cfd4:	1d00022e 	bgeu	r3,r20,1000cfe0 <__udivdi3+0x468>
1000cfd8:	00800074 	movhi	r2,1
1000cfdc:	88a3883a 	add	r17,r17,r2
1000cfe0:	1804d43a 	srli	r2,r3,16
1000cfe4:	1463883a 	add	r17,r2,r17
1000cfe8:	84404436 	bltu	r16,r17,1000d0fc <__udivdi3+0x584>
1000cfec:	84403e26 	beq	r16,r17,1000d0e8 <__udivdi3+0x570>
1000cff0:	9005883a 	mov	r2,r18
1000cff4:	0007883a 	mov	r3,zero
1000cff8:	003f9106 	br	1000ce40 <__alt_data_end+0xf800ce40>
1000cffc:	88e2983a 	sll	r17,r17,r3
1000d000:	80aed83a 	srl	r23,r16,r2
1000d004:	80e0983a 	sll	r16,r16,r3
1000d008:	882ad43a 	srli	r21,r17,16
1000d00c:	9884d83a 	srl	r2,r19,r2
1000d010:	b809883a 	mov	r4,r23
1000d014:	a80b883a 	mov	r5,r21
1000d018:	98e4983a 	sll	r18,r19,r3
1000d01c:	142cb03a 	or	r22,r2,r16
1000d020:	0001ce80 	call	10001ce8 <__umodsi3>
1000d024:	b809883a 	mov	r4,r23
1000d028:	a80b883a 	mov	r5,r21
1000d02c:	1027883a 	mov	r19,r2
1000d030:	8d3fffcc 	andi	r20,r17,65535
1000d034:	0001c840 	call	10001c84 <__udivsi3>
1000d038:	a009883a 	mov	r4,r20
1000d03c:	100b883a 	mov	r5,r2
1000d040:	102f883a 	mov	r23,r2
1000d044:	0001d400 	call	10001d40 <__mulsi3>
1000d048:	9826943a 	slli	r19,r19,16
1000d04c:	b008d43a 	srli	r4,r22,16
1000d050:	24c8b03a 	or	r4,r4,r19
1000d054:	2080062e 	bgeu	r4,r2,1000d070 <__udivdi3+0x4f8>
1000d058:	2449883a 	add	r4,r4,r17
1000d05c:	b8ffffc4 	addi	r3,r23,-1
1000d060:	24403c36 	bltu	r4,r17,1000d154 <__udivdi3+0x5dc>
1000d064:	20803b2e 	bgeu	r4,r2,1000d154 <__udivdi3+0x5dc>
1000d068:	bdffff84 	addi	r23,r23,-2
1000d06c:	2449883a 	add	r4,r4,r17
1000d070:	20a1c83a 	sub	r16,r4,r2
1000d074:	a80b883a 	mov	r5,r21
1000d078:	8009883a 	mov	r4,r16
1000d07c:	0001ce80 	call	10001ce8 <__umodsi3>
1000d080:	a80b883a 	mov	r5,r21
1000d084:	8009883a 	mov	r4,r16
1000d088:	1027883a 	mov	r19,r2
1000d08c:	0001c840 	call	10001c84 <__udivsi3>
1000d090:	a009883a 	mov	r4,r20
1000d094:	100b883a 	mov	r5,r2
1000d098:	9826943a 	slli	r19,r19,16
1000d09c:	1039883a 	mov	fp,r2
1000d0a0:	0001d400 	call	10001d40 <__mulsi3>
1000d0a4:	b13fffcc 	andi	r4,r22,65535
1000d0a8:	24c8b03a 	or	r4,r4,r19
1000d0ac:	2080062e 	bgeu	r4,r2,1000d0c8 <__udivdi3+0x550>
1000d0b0:	2449883a 	add	r4,r4,r17
1000d0b4:	e0ffffc4 	addi	r3,fp,-1
1000d0b8:	24402436 	bltu	r4,r17,1000d14c <__udivdi3+0x5d4>
1000d0bc:	2080232e 	bgeu	r4,r2,1000d14c <__udivdi3+0x5d4>
1000d0c0:	e73fff84 	addi	fp,fp,-2
1000d0c4:	2449883a 	add	r4,r4,r17
1000d0c8:	b82e943a 	slli	r23,r23,16
1000d0cc:	20a1c83a 	sub	r16,r4,r2
1000d0d0:	bf06b03a 	or	r3,r23,fp
1000d0d4:	003f2806 	br	1000cd78 <__alt_data_end+0xf800cd78>
1000d0d8:	2021883a 	mov	r16,r4
1000d0dc:	003f5306 	br	1000ce2c <__alt_data_end+0xf800ce2c>
1000d0e0:	1821883a 	mov	r16,r3
1000d0e4:	003ef406 	br	1000ccb8 <__alt_data_end+0xf800ccb8>
1000d0e8:	1806943a 	slli	r3,r3,16
1000d0ec:	9de6983a 	sll	r19,r19,r23
1000d0f0:	e73fffcc 	andi	fp,fp,65535
1000d0f4:	1f07883a 	add	r3,r3,fp
1000d0f8:	98ffbd2e 	bgeu	r19,r3,1000cff0 <__alt_data_end+0xf800cff0>
1000d0fc:	90bfffc4 	addi	r2,r18,-1
1000d100:	0007883a 	mov	r3,zero
1000d104:	003f4e06 	br	1000ce40 <__alt_data_end+0xf800ce40>
1000d108:	00800604 	movi	r2,24
1000d10c:	003ef506 	br	1000cce4 <__alt_data_end+0xf800cce4>
1000d110:	00800604 	movi	r2,24
1000d114:	003f0b06 	br	1000cd44 <__alt_data_end+0xf800cd44>
1000d118:	00800604 	movi	r2,24
1000d11c:	003ead06 	br	1000cbd4 <__alt_data_end+0xf800cbd4>
1000d120:	0007883a 	mov	r3,zero
1000d124:	00800044 	movi	r2,1
1000d128:	003f4506 	br	1000ce40 <__alt_data_end+0xf800ce40>
1000d12c:	80bf8e2e 	bgeu	r16,r2,1000cf68 <__alt_data_end+0xf800cf68>
1000d130:	8c7fff84 	addi	r17,r17,-2
1000d134:	8721883a 	add	r16,r16,fp
1000d138:	003f8c06 	br	1000cf6c <__alt_data_end+0xf800cf6c>
1000d13c:	18bf762e 	bgeu	r3,r2,1000cf18 <__alt_data_end+0xf800cf18>
1000d140:	ad7fff84 	addi	r21,r21,-2
1000d144:	1f07883a 	add	r3,r3,fp
1000d148:	003f7406 	br	1000cf1c <__alt_data_end+0xf800cf1c>
1000d14c:	1839883a 	mov	fp,r3
1000d150:	003fdd06 	br	1000d0c8 <__alt_data_end+0xf800d0c8>
1000d154:	182f883a 	mov	r23,r3
1000d158:	003fc506 	br	1000d070 <__alt_data_end+0xf800d070>
1000d15c:	b5bfff84 	addi	r22,r22,-2
1000d160:	3c4f883a 	add	r7,r7,r17
1000d164:	003f1a06 	br	1000cdd0 <__alt_data_end+0xf800cdd0>
1000d168:	b5bfff84 	addi	r22,r22,-2
1000d16c:	1c47883a 	add	r3,r3,r17
1000d170:	003ebc06 	br	1000cc64 <__alt_data_end+0xf800cc64>

1000d174 <__umoddi3>:
1000d174:	defff304 	addi	sp,sp,-52
1000d178:	df000b15 	stw	fp,44(sp)
1000d17c:	dc400415 	stw	r17,16(sp)
1000d180:	dc000315 	stw	r16,12(sp)
1000d184:	dfc00c15 	stw	ra,48(sp)
1000d188:	ddc00a15 	stw	r23,40(sp)
1000d18c:	dd800915 	stw	r22,36(sp)
1000d190:	dd400815 	stw	r21,32(sp)
1000d194:	dd000715 	stw	r20,28(sp)
1000d198:	dcc00615 	stw	r19,24(sp)
1000d19c:	dc800515 	stw	r18,20(sp)
1000d1a0:	2021883a 	mov	r16,r4
1000d1a4:	2823883a 	mov	r17,r5
1000d1a8:	2839883a 	mov	fp,r5
1000d1ac:	3800401e 	bne	r7,zero,1000d2b0 <__umoddi3+0x13c>
1000d1b0:	3027883a 	mov	r19,r6
1000d1b4:	2029883a 	mov	r20,r4
1000d1b8:	2980552e 	bgeu	r5,r6,1000d310 <__umoddi3+0x19c>
1000d1bc:	00bfffd4 	movui	r2,65535
1000d1c0:	1180a236 	bltu	r2,r6,1000d44c <__umoddi3+0x2d8>
1000d1c4:	01003fc4 	movi	r4,255
1000d1c8:	2189803a 	cmpltu	r4,r4,r6
1000d1cc:	200890fa 	slli	r4,r4,3
1000d1d0:	3104d83a 	srl	r2,r6,r4
1000d1d4:	00c40074 	movhi	r3,4097
1000d1d8:	18cba804 	addi	r3,r3,11936
1000d1dc:	1885883a 	add	r2,r3,r2
1000d1e0:	10c00003 	ldbu	r3,0(r2)
1000d1e4:	00800804 	movi	r2,32
1000d1e8:	1909883a 	add	r4,r3,r4
1000d1ec:	1125c83a 	sub	r18,r2,r4
1000d1f0:	90000526 	beq	r18,zero,1000d208 <__umoddi3+0x94>
1000d1f4:	8ca2983a 	sll	r17,r17,r18
1000d1f8:	8108d83a 	srl	r4,r16,r4
1000d1fc:	34a6983a 	sll	r19,r6,r18
1000d200:	84a8983a 	sll	r20,r16,r18
1000d204:	2478b03a 	or	fp,r4,r17
1000d208:	982cd43a 	srli	r22,r19,16
1000d20c:	e009883a 	mov	r4,fp
1000d210:	9dffffcc 	andi	r23,r19,65535
1000d214:	b00b883a 	mov	r5,r22
1000d218:	0001ce80 	call	10001ce8 <__umodsi3>
1000d21c:	b00b883a 	mov	r5,r22
1000d220:	e009883a 	mov	r4,fp
1000d224:	102b883a 	mov	r21,r2
1000d228:	0001c840 	call	10001c84 <__udivsi3>
1000d22c:	100b883a 	mov	r5,r2
1000d230:	b809883a 	mov	r4,r23
1000d234:	0001d400 	call	10001d40 <__mulsi3>
1000d238:	a82a943a 	slli	r21,r21,16
1000d23c:	a006d43a 	srli	r3,r20,16
1000d240:	1d46b03a 	or	r3,r3,r21
1000d244:	1880032e 	bgeu	r3,r2,1000d254 <__umoddi3+0xe0>
1000d248:	1cc7883a 	add	r3,r3,r19
1000d24c:	1cc00136 	bltu	r3,r19,1000d254 <__umoddi3+0xe0>
1000d250:	18813136 	bltu	r3,r2,1000d718 <__umoddi3+0x5a4>
1000d254:	18a1c83a 	sub	r16,r3,r2
1000d258:	b00b883a 	mov	r5,r22
1000d25c:	8009883a 	mov	r4,r16
1000d260:	0001ce80 	call	10001ce8 <__umodsi3>
1000d264:	b00b883a 	mov	r5,r22
1000d268:	8009883a 	mov	r4,r16
1000d26c:	1023883a 	mov	r17,r2
1000d270:	0001c840 	call	10001c84 <__udivsi3>
1000d274:	100b883a 	mov	r5,r2
1000d278:	b809883a 	mov	r4,r23
1000d27c:	8822943a 	slli	r17,r17,16
1000d280:	0001d400 	call	10001d40 <__mulsi3>
1000d284:	a0ffffcc 	andi	r3,r20,65535
1000d288:	1c46b03a 	or	r3,r3,r17
1000d28c:	1880042e 	bgeu	r3,r2,1000d2a0 <__umoddi3+0x12c>
1000d290:	1cc7883a 	add	r3,r3,r19
1000d294:	1cc00236 	bltu	r3,r19,1000d2a0 <__umoddi3+0x12c>
1000d298:	1880012e 	bgeu	r3,r2,1000d2a0 <__umoddi3+0x12c>
1000d29c:	1cc7883a 	add	r3,r3,r19
1000d2a0:	1885c83a 	sub	r2,r3,r2
1000d2a4:	1484d83a 	srl	r2,r2,r18
1000d2a8:	0007883a 	mov	r3,zero
1000d2ac:	00005306 	br	1000d3fc <__umoddi3+0x288>
1000d2b0:	29c05036 	bltu	r5,r7,1000d3f4 <__umoddi3+0x280>
1000d2b4:	00bfffd4 	movui	r2,65535
1000d2b8:	11c05c2e 	bgeu	r2,r7,1000d42c <__umoddi3+0x2b8>
1000d2bc:	00804034 	movhi	r2,256
1000d2c0:	10bfffc4 	addi	r2,r2,-1
1000d2c4:	11c10636 	bltu	r2,r7,1000d6e0 <__umoddi3+0x56c>
1000d2c8:	01000404 	movi	r4,16
1000d2cc:	3904d83a 	srl	r2,r7,r4
1000d2d0:	00c40074 	movhi	r3,4097
1000d2d4:	18cba804 	addi	r3,r3,11936
1000d2d8:	1885883a 	add	r2,r3,r2
1000d2dc:	14c00003 	ldbu	r19,0(r2)
1000d2e0:	00c00804 	movi	r3,32
1000d2e4:	9927883a 	add	r19,r19,r4
1000d2e8:	1ce9c83a 	sub	r20,r3,r19
1000d2ec:	a0005c1e 	bne	r20,zero,1000d460 <__umoddi3+0x2ec>
1000d2f0:	3c400136 	bltu	r7,r17,1000d2f8 <__umoddi3+0x184>
1000d2f4:	81810a36 	bltu	r16,r6,1000d720 <__umoddi3+0x5ac>
1000d2f8:	8185c83a 	sub	r2,r16,r6
1000d2fc:	89e3c83a 	sub	r17,r17,r7
1000d300:	8089803a 	cmpltu	r4,r16,r2
1000d304:	8939c83a 	sub	fp,r17,r4
1000d308:	e007883a 	mov	r3,fp
1000d30c:	00003b06 	br	1000d3fc <__umoddi3+0x288>
1000d310:	3000041e 	bne	r6,zero,1000d324 <__umoddi3+0x1b0>
1000d314:	000b883a 	mov	r5,zero
1000d318:	01000044 	movi	r4,1
1000d31c:	0001c840 	call	10001c84 <__udivsi3>
1000d320:	1027883a 	mov	r19,r2
1000d324:	00bfffd4 	movui	r2,65535
1000d328:	14c0442e 	bgeu	r2,r19,1000d43c <__umoddi3+0x2c8>
1000d32c:	00804034 	movhi	r2,256
1000d330:	10bfffc4 	addi	r2,r2,-1
1000d334:	14c0ec36 	bltu	r2,r19,1000d6e8 <__umoddi3+0x574>
1000d338:	00800404 	movi	r2,16
1000d33c:	9886d83a 	srl	r3,r19,r2
1000d340:	01040074 	movhi	r4,4097
1000d344:	210ba804 	addi	r4,r4,11936
1000d348:	20c7883a 	add	r3,r4,r3
1000d34c:	18c00003 	ldbu	r3,0(r3)
1000d350:	1887883a 	add	r3,r3,r2
1000d354:	00800804 	movi	r2,32
1000d358:	10e5c83a 	sub	r18,r2,r3
1000d35c:	9000ab1e 	bne	r18,zero,1000d60c <__umoddi3+0x498>
1000d360:	982cd43a 	srli	r22,r19,16
1000d364:	8ce3c83a 	sub	r17,r17,r19
1000d368:	9dffffcc 	andi	r23,r19,65535
1000d36c:	b00b883a 	mov	r5,r22
1000d370:	8809883a 	mov	r4,r17
1000d374:	0001ce80 	call	10001ce8 <__umodsi3>
1000d378:	b00b883a 	mov	r5,r22
1000d37c:	8809883a 	mov	r4,r17
1000d380:	102b883a 	mov	r21,r2
1000d384:	0001c840 	call	10001c84 <__udivsi3>
1000d388:	b80b883a 	mov	r5,r23
1000d38c:	1009883a 	mov	r4,r2
1000d390:	0001d400 	call	10001d40 <__mulsi3>
1000d394:	a82a943a 	slli	r21,r21,16
1000d398:	a006d43a 	srli	r3,r20,16
1000d39c:	1d46b03a 	or	r3,r3,r21
1000d3a0:	1880042e 	bgeu	r3,r2,1000d3b4 <__umoddi3+0x240>
1000d3a4:	1cc7883a 	add	r3,r3,r19
1000d3a8:	1cc00236 	bltu	r3,r19,1000d3b4 <__umoddi3+0x240>
1000d3ac:	1880012e 	bgeu	r3,r2,1000d3b4 <__umoddi3+0x240>
1000d3b0:	1cc7883a 	add	r3,r3,r19
1000d3b4:	18a1c83a 	sub	r16,r3,r2
1000d3b8:	b00b883a 	mov	r5,r22
1000d3bc:	8009883a 	mov	r4,r16
1000d3c0:	0001ce80 	call	10001ce8 <__umodsi3>
1000d3c4:	1023883a 	mov	r17,r2
1000d3c8:	b00b883a 	mov	r5,r22
1000d3cc:	8009883a 	mov	r4,r16
1000d3d0:	0001c840 	call	10001c84 <__udivsi3>
1000d3d4:	8822943a 	slli	r17,r17,16
1000d3d8:	b80b883a 	mov	r5,r23
1000d3dc:	1009883a 	mov	r4,r2
1000d3e0:	0001d400 	call	10001d40 <__mulsi3>
1000d3e4:	a53fffcc 	andi	r20,r20,65535
1000d3e8:	a446b03a 	or	r3,r20,r17
1000d3ec:	18bfac2e 	bgeu	r3,r2,1000d2a0 <__alt_data_end+0xf800d2a0>
1000d3f0:	003fa706 	br	1000d290 <__alt_data_end+0xf800d290>
1000d3f4:	2005883a 	mov	r2,r4
1000d3f8:	2807883a 	mov	r3,r5
1000d3fc:	dfc00c17 	ldw	ra,48(sp)
1000d400:	df000b17 	ldw	fp,44(sp)
1000d404:	ddc00a17 	ldw	r23,40(sp)
1000d408:	dd800917 	ldw	r22,36(sp)
1000d40c:	dd400817 	ldw	r21,32(sp)
1000d410:	dd000717 	ldw	r20,28(sp)
1000d414:	dcc00617 	ldw	r19,24(sp)
1000d418:	dc800517 	ldw	r18,20(sp)
1000d41c:	dc400417 	ldw	r17,16(sp)
1000d420:	dc000317 	ldw	r16,12(sp)
1000d424:	dec00d04 	addi	sp,sp,52
1000d428:	f800283a 	ret
1000d42c:	04c03fc4 	movi	r19,255
1000d430:	99c9803a 	cmpltu	r4,r19,r7
1000d434:	200890fa 	slli	r4,r4,3
1000d438:	003fa406 	br	1000d2cc <__alt_data_end+0xf800d2cc>
1000d43c:	00803fc4 	movi	r2,255
1000d440:	14c5803a 	cmpltu	r2,r2,r19
1000d444:	100490fa 	slli	r2,r2,3
1000d448:	003fbc06 	br	1000d33c <__alt_data_end+0xf800d33c>
1000d44c:	00804034 	movhi	r2,256
1000d450:	10bfffc4 	addi	r2,r2,-1
1000d454:	1180a636 	bltu	r2,r6,1000d6f0 <__umoddi3+0x57c>
1000d458:	01000404 	movi	r4,16
1000d45c:	003f5c06 	br	1000d1d0 <__alt_data_end+0xf800d1d0>
1000d460:	3d0e983a 	sll	r7,r7,r20
1000d464:	34ead83a 	srl	r21,r6,r19
1000d468:	8cc6d83a 	srl	r3,r17,r19
1000d46c:	8d10983a 	sll	r8,r17,r20
1000d470:	3d6ab03a 	or	r21,r7,r21
1000d474:	a82cd43a 	srli	r22,r21,16
1000d478:	84e2d83a 	srl	r17,r16,r19
1000d47c:	1809883a 	mov	r4,r3
1000d480:	b00b883a 	mov	r5,r22
1000d484:	8a22b03a 	or	r17,r17,r8
1000d488:	3524983a 	sll	r18,r6,r20
1000d48c:	dc400015 	stw	r17,0(sp)
1000d490:	d8c00115 	stw	r3,4(sp)
1000d494:	0001ce80 	call	10001ce8 <__umodsi3>
1000d498:	d8c00117 	ldw	r3,4(sp)
1000d49c:	b00b883a 	mov	r5,r22
1000d4a0:	1039883a 	mov	fp,r2
1000d4a4:	1809883a 	mov	r4,r3
1000d4a8:	0001c840 	call	10001c84 <__udivsi3>
1000d4ac:	adffffcc 	andi	r23,r21,65535
1000d4b0:	100b883a 	mov	r5,r2
1000d4b4:	b809883a 	mov	r4,r23
1000d4b8:	1023883a 	mov	r17,r2
1000d4bc:	0001d400 	call	10001d40 <__mulsi3>
1000d4c0:	d9400017 	ldw	r5,0(sp)
1000d4c4:	e008943a 	slli	r4,fp,16
1000d4c8:	8520983a 	sll	r16,r16,r20
1000d4cc:	2806d43a 	srli	r3,r5,16
1000d4d0:	1906b03a 	or	r3,r3,r4
1000d4d4:	1880042e 	bgeu	r3,r2,1000d4e8 <__umoddi3+0x374>
1000d4d8:	1d47883a 	add	r3,r3,r21
1000d4dc:	893fffc4 	addi	r4,r17,-1
1000d4e0:	1d40892e 	bgeu	r3,r21,1000d708 <__umoddi3+0x594>
1000d4e4:	2023883a 	mov	r17,r4
1000d4e8:	18b9c83a 	sub	fp,r3,r2
1000d4ec:	b00b883a 	mov	r5,r22
1000d4f0:	e009883a 	mov	r4,fp
1000d4f4:	0001ce80 	call	10001ce8 <__umodsi3>
1000d4f8:	b00b883a 	mov	r5,r22
1000d4fc:	e009883a 	mov	r4,fp
1000d500:	d8800215 	stw	r2,8(sp)
1000d504:	0001c840 	call	10001c84 <__udivsi3>
1000d508:	100b883a 	mov	r5,r2
1000d50c:	b809883a 	mov	r4,r23
1000d510:	102d883a 	mov	r22,r2
1000d514:	0001d400 	call	10001d40 <__mulsi3>
1000d518:	d9800217 	ldw	r6,8(sp)
1000d51c:	d8c00017 	ldw	r3,0(sp)
1000d520:	300c943a 	slli	r6,r6,16
1000d524:	1a3fffcc 	andi	r8,r3,65535
1000d528:	4190b03a 	or	r8,r8,r6
1000d52c:	4080042e 	bgeu	r8,r2,1000d540 <__umoddi3+0x3cc>
1000d530:	4551883a 	add	r8,r8,r21
1000d534:	b0ffffc4 	addi	r3,r22,-1
1000d538:	45406f2e 	bgeu	r8,r21,1000d6f8 <__umoddi3+0x584>
1000d53c:	182d883a 	mov	r22,r3
1000d540:	880e943a 	slli	r7,r17,16
1000d544:	9006d43a 	srli	r3,r18,16
1000d548:	91bfffcc 	andi	r6,r18,65535
1000d54c:	3dacb03a 	or	r22,r7,r22
1000d550:	b02ed43a 	srli	r23,r22,16
1000d554:	b5bfffcc 	andi	r22,r22,65535
1000d558:	300b883a 	mov	r5,r6
1000d55c:	b009883a 	mov	r4,r22
1000d560:	40a3c83a 	sub	r17,r8,r2
1000d564:	d8c00115 	stw	r3,4(sp)
1000d568:	d9800215 	stw	r6,8(sp)
1000d56c:	0001d400 	call	10001d40 <__mulsi3>
1000d570:	d9800217 	ldw	r6,8(sp)
1000d574:	b809883a 	mov	r4,r23
1000d578:	1039883a 	mov	fp,r2
1000d57c:	300b883a 	mov	r5,r6
1000d580:	0001d400 	call	10001d40 <__mulsi3>
1000d584:	d8c00117 	ldw	r3,4(sp)
1000d588:	b809883a 	mov	r4,r23
1000d58c:	d8800215 	stw	r2,8(sp)
1000d590:	180b883a 	mov	r5,r3
1000d594:	0001d400 	call	10001d40 <__mulsi3>
1000d598:	d8c00117 	ldw	r3,4(sp)
1000d59c:	b009883a 	mov	r4,r22
1000d5a0:	102f883a 	mov	r23,r2
1000d5a4:	180b883a 	mov	r5,r3
1000d5a8:	0001d400 	call	10001d40 <__mulsi3>
1000d5ac:	d9800217 	ldw	r6,8(sp)
1000d5b0:	e006d43a 	srli	r3,fp,16
1000d5b4:	1185883a 	add	r2,r2,r6
1000d5b8:	1885883a 	add	r2,r3,r2
1000d5bc:	1180022e 	bgeu	r2,r6,1000d5c8 <__umoddi3+0x454>
1000d5c0:	00c00074 	movhi	r3,1
1000d5c4:	b8ef883a 	add	r23,r23,r3
1000d5c8:	1006d43a 	srli	r3,r2,16
1000d5cc:	1004943a 	slli	r2,r2,16
1000d5d0:	e73fffcc 	andi	fp,fp,65535
1000d5d4:	1dc7883a 	add	r3,r3,r23
1000d5d8:	1739883a 	add	fp,r2,fp
1000d5dc:	88c03a36 	bltu	r17,r3,1000d6c8 <__umoddi3+0x554>
1000d5e0:	88c05126 	beq	r17,r3,1000d728 <__umoddi3+0x5b4>
1000d5e4:	88c9c83a 	sub	r4,r17,r3
1000d5e8:	e00f883a 	mov	r7,fp
1000d5ec:	81cfc83a 	sub	r7,r16,r7
1000d5f0:	81c7803a 	cmpltu	r3,r16,r7
1000d5f4:	20c7c83a 	sub	r3,r4,r3
1000d5f8:	1cc4983a 	sll	r2,r3,r19
1000d5fc:	3d0ed83a 	srl	r7,r7,r20
1000d600:	1d06d83a 	srl	r3,r3,r20
1000d604:	11c4b03a 	or	r2,r2,r7
1000d608:	003f7c06 	br	1000d3fc <__alt_data_end+0xf800d3fc>
1000d60c:	9ca6983a 	sll	r19,r19,r18
1000d610:	88f8d83a 	srl	fp,r17,r3
1000d614:	80c4d83a 	srl	r2,r16,r3
1000d618:	982cd43a 	srli	r22,r19,16
1000d61c:	8ca2983a 	sll	r17,r17,r18
1000d620:	e009883a 	mov	r4,fp
1000d624:	b00b883a 	mov	r5,r22
1000d628:	146ab03a 	or	r21,r2,r17
1000d62c:	0001ce80 	call	10001ce8 <__umodsi3>
1000d630:	b00b883a 	mov	r5,r22
1000d634:	e009883a 	mov	r4,fp
1000d638:	1029883a 	mov	r20,r2
1000d63c:	9dffffcc 	andi	r23,r19,65535
1000d640:	0001c840 	call	10001c84 <__udivsi3>
1000d644:	b809883a 	mov	r4,r23
1000d648:	100b883a 	mov	r5,r2
1000d64c:	0001d400 	call	10001d40 <__mulsi3>
1000d650:	a008943a 	slli	r4,r20,16
1000d654:	a806d43a 	srli	r3,r21,16
1000d658:	84a8983a 	sll	r20,r16,r18
1000d65c:	1906b03a 	or	r3,r3,r4
1000d660:	1880042e 	bgeu	r3,r2,1000d674 <__umoddi3+0x500>
1000d664:	1cc7883a 	add	r3,r3,r19
1000d668:	1cc00236 	bltu	r3,r19,1000d674 <__umoddi3+0x500>
1000d66c:	1880012e 	bgeu	r3,r2,1000d674 <__umoddi3+0x500>
1000d670:	1cc7883a 	add	r3,r3,r19
1000d674:	18a3c83a 	sub	r17,r3,r2
1000d678:	b00b883a 	mov	r5,r22
1000d67c:	8809883a 	mov	r4,r17
1000d680:	0001ce80 	call	10001ce8 <__umodsi3>
1000d684:	b00b883a 	mov	r5,r22
1000d688:	8809883a 	mov	r4,r17
1000d68c:	1021883a 	mov	r16,r2
1000d690:	0001c840 	call	10001c84 <__udivsi3>
1000d694:	100b883a 	mov	r5,r2
1000d698:	b809883a 	mov	r4,r23
1000d69c:	8020943a 	slli	r16,r16,16
1000d6a0:	0001d400 	call	10001d40 <__mulsi3>
1000d6a4:	a8ffffcc 	andi	r3,r21,65535
1000d6a8:	1c06b03a 	or	r3,r3,r16
1000d6ac:	1880042e 	bgeu	r3,r2,1000d6c0 <__umoddi3+0x54c>
1000d6b0:	1cc7883a 	add	r3,r3,r19
1000d6b4:	1cc00236 	bltu	r3,r19,1000d6c0 <__umoddi3+0x54c>
1000d6b8:	1880012e 	bgeu	r3,r2,1000d6c0 <__umoddi3+0x54c>
1000d6bc:	1cc7883a 	add	r3,r3,r19
1000d6c0:	18a3c83a 	sub	r17,r3,r2
1000d6c4:	003f2906 	br	1000d36c <__alt_data_end+0xf800d36c>
1000d6c8:	e48fc83a 	sub	r7,fp,r18
1000d6cc:	1d49c83a 	sub	r4,r3,r21
1000d6d0:	e1f9803a 	cmpltu	fp,fp,r7
1000d6d4:	2739c83a 	sub	fp,r4,fp
1000d6d8:	8f09c83a 	sub	r4,r17,fp
1000d6dc:	003fc306 	br	1000d5ec <__alt_data_end+0xf800d5ec>
1000d6e0:	01000604 	movi	r4,24
1000d6e4:	003ef906 	br	1000d2cc <__alt_data_end+0xf800d2cc>
1000d6e8:	00800604 	movi	r2,24
1000d6ec:	003f1306 	br	1000d33c <__alt_data_end+0xf800d33c>
1000d6f0:	01000604 	movi	r4,24
1000d6f4:	003eb606 	br	1000d1d0 <__alt_data_end+0xf800d1d0>
1000d6f8:	40bf902e 	bgeu	r8,r2,1000d53c <__alt_data_end+0xf800d53c>
1000d6fc:	b5bfff84 	addi	r22,r22,-2
1000d700:	4551883a 	add	r8,r8,r21
1000d704:	003f8e06 	br	1000d540 <__alt_data_end+0xf800d540>
1000d708:	18bf762e 	bgeu	r3,r2,1000d4e4 <__alt_data_end+0xf800d4e4>
1000d70c:	8c7fff84 	addi	r17,r17,-2
1000d710:	1d47883a 	add	r3,r3,r21
1000d714:	003f7406 	br	1000d4e8 <__alt_data_end+0xf800d4e8>
1000d718:	1cc7883a 	add	r3,r3,r19
1000d71c:	003ecd06 	br	1000d254 <__alt_data_end+0xf800d254>
1000d720:	8005883a 	mov	r2,r16
1000d724:	003ef806 	br	1000d308 <__alt_data_end+0xf800d308>
1000d728:	873fe736 	bltu	r16,fp,1000d6c8 <__alt_data_end+0xf800d6c8>
1000d72c:	e00f883a 	mov	r7,fp
1000d730:	0009883a 	mov	r4,zero
1000d734:	003fad06 	br	1000d5ec <__alt_data_end+0xf800d5ec>

1000d738 <__adddf3>:
1000d738:	02c00434 	movhi	r11,16
1000d73c:	5affffc4 	addi	r11,r11,-1
1000d740:	2806d7fa 	srli	r3,r5,31
1000d744:	2ad4703a 	and	r10,r5,r11
1000d748:	3ad2703a 	and	r9,r7,r11
1000d74c:	3804d53a 	srli	r2,r7,20
1000d750:	3018d77a 	srli	r12,r6,29
1000d754:	280ad53a 	srli	r5,r5,20
1000d758:	501490fa 	slli	r10,r10,3
1000d75c:	2010d77a 	srli	r8,r4,29
1000d760:	481290fa 	slli	r9,r9,3
1000d764:	380ed7fa 	srli	r7,r7,31
1000d768:	defffb04 	addi	sp,sp,-20
1000d76c:	dc800215 	stw	r18,8(sp)
1000d770:	dc400115 	stw	r17,4(sp)
1000d774:	dc000015 	stw	r16,0(sp)
1000d778:	dfc00415 	stw	ra,16(sp)
1000d77c:	dcc00315 	stw	r19,12(sp)
1000d780:	1c803fcc 	andi	r18,r3,255
1000d784:	2c01ffcc 	andi	r16,r5,2047
1000d788:	5210b03a 	or	r8,r10,r8
1000d78c:	202290fa 	slli	r17,r4,3
1000d790:	1081ffcc 	andi	r2,r2,2047
1000d794:	4b12b03a 	or	r9,r9,r12
1000d798:	300c90fa 	slli	r6,r6,3
1000d79c:	91c07526 	beq	r18,r7,1000d974 <__adddf3+0x23c>
1000d7a0:	8087c83a 	sub	r3,r16,r2
1000d7a4:	00c0ab0e 	bge	zero,r3,1000da54 <__adddf3+0x31c>
1000d7a8:	10002a1e 	bne	r2,zero,1000d854 <__adddf3+0x11c>
1000d7ac:	4984b03a 	or	r2,r9,r6
1000d7b0:	1000961e 	bne	r2,zero,1000da0c <__adddf3+0x2d4>
1000d7b4:	888001cc 	andi	r2,r17,7
1000d7b8:	10000726 	beq	r2,zero,1000d7d8 <__adddf3+0xa0>
1000d7bc:	888003cc 	andi	r2,r17,15
1000d7c0:	00c00104 	movi	r3,4
1000d7c4:	10c00426 	beq	r2,r3,1000d7d8 <__adddf3+0xa0>
1000d7c8:	88c7883a 	add	r3,r17,r3
1000d7cc:	1c63803a 	cmpltu	r17,r3,r17
1000d7d0:	4451883a 	add	r8,r8,r17
1000d7d4:	1823883a 	mov	r17,r3
1000d7d8:	4080202c 	andhi	r2,r8,128
1000d7dc:	10005926 	beq	r2,zero,1000d944 <__adddf3+0x20c>
1000d7e0:	84000044 	addi	r16,r16,1
1000d7e4:	0081ffc4 	movi	r2,2047
1000d7e8:	8080ba26 	beq	r16,r2,1000dad4 <__adddf3+0x39c>
1000d7ec:	00bfe034 	movhi	r2,65408
1000d7f0:	10bfffc4 	addi	r2,r2,-1
1000d7f4:	4090703a 	and	r8,r8,r2
1000d7f8:	4004977a 	slli	r2,r8,29
1000d7fc:	4010927a 	slli	r8,r8,9
1000d800:	8822d0fa 	srli	r17,r17,3
1000d804:	8401ffcc 	andi	r16,r16,2047
1000d808:	4010d33a 	srli	r8,r8,12
1000d80c:	9007883a 	mov	r3,r18
1000d810:	1444b03a 	or	r2,r2,r17
1000d814:	8401ffcc 	andi	r16,r16,2047
1000d818:	8020953a 	slli	r16,r16,20
1000d81c:	18c03fcc 	andi	r3,r3,255
1000d820:	01000434 	movhi	r4,16
1000d824:	213fffc4 	addi	r4,r4,-1
1000d828:	180697fa 	slli	r3,r3,31
1000d82c:	4110703a 	and	r8,r8,r4
1000d830:	4410b03a 	or	r8,r8,r16
1000d834:	40c6b03a 	or	r3,r8,r3
1000d838:	dfc00417 	ldw	ra,16(sp)
1000d83c:	dcc00317 	ldw	r19,12(sp)
1000d840:	dc800217 	ldw	r18,8(sp)
1000d844:	dc400117 	ldw	r17,4(sp)
1000d848:	dc000017 	ldw	r16,0(sp)
1000d84c:	dec00504 	addi	sp,sp,20
1000d850:	f800283a 	ret
1000d854:	0081ffc4 	movi	r2,2047
1000d858:	80bfd626 	beq	r16,r2,1000d7b4 <__alt_data_end+0xf800d7b4>
1000d85c:	4a402034 	orhi	r9,r9,128
1000d860:	00800e04 	movi	r2,56
1000d864:	10c09f16 	blt	r2,r3,1000dae4 <__adddf3+0x3ac>
1000d868:	008007c4 	movi	r2,31
1000d86c:	10c0c216 	blt	r2,r3,1000db78 <__adddf3+0x440>
1000d870:	00800804 	movi	r2,32
1000d874:	10c5c83a 	sub	r2,r2,r3
1000d878:	488a983a 	sll	r5,r9,r2
1000d87c:	30c8d83a 	srl	r4,r6,r3
1000d880:	3084983a 	sll	r2,r6,r2
1000d884:	48c6d83a 	srl	r3,r9,r3
1000d888:	290cb03a 	or	r6,r5,r4
1000d88c:	1004c03a 	cmpne	r2,r2,zero
1000d890:	308cb03a 	or	r6,r6,r2
1000d894:	898dc83a 	sub	r6,r17,r6
1000d898:	89a3803a 	cmpltu	r17,r17,r6
1000d89c:	40d1c83a 	sub	r8,r8,r3
1000d8a0:	4451c83a 	sub	r8,r8,r17
1000d8a4:	3023883a 	mov	r17,r6
1000d8a8:	4080202c 	andhi	r2,r8,128
1000d8ac:	10002326 	beq	r2,zero,1000d93c <__adddf3+0x204>
1000d8b0:	04c02034 	movhi	r19,128
1000d8b4:	9cffffc4 	addi	r19,r19,-1
1000d8b8:	44e6703a 	and	r19,r8,r19
1000d8bc:	98007626 	beq	r19,zero,1000da98 <__adddf3+0x360>
1000d8c0:	9809883a 	mov	r4,r19
1000d8c4:	000ff780 	call	1000ff78 <__clzsi2>
1000d8c8:	10fffe04 	addi	r3,r2,-8
1000d8cc:	010007c4 	movi	r4,31
1000d8d0:	20c07716 	blt	r4,r3,1000dab0 <__adddf3+0x378>
1000d8d4:	00800804 	movi	r2,32
1000d8d8:	10c5c83a 	sub	r2,r2,r3
1000d8dc:	8884d83a 	srl	r2,r17,r2
1000d8e0:	98d0983a 	sll	r8,r19,r3
1000d8e4:	88e2983a 	sll	r17,r17,r3
1000d8e8:	1204b03a 	or	r2,r2,r8
1000d8ec:	1c007416 	blt	r3,r16,1000dac0 <__adddf3+0x388>
1000d8f0:	1c21c83a 	sub	r16,r3,r16
1000d8f4:	82000044 	addi	r8,r16,1
1000d8f8:	00c007c4 	movi	r3,31
1000d8fc:	1a009116 	blt	r3,r8,1000db44 <__adddf3+0x40c>
1000d900:	00c00804 	movi	r3,32
1000d904:	1a07c83a 	sub	r3,r3,r8
1000d908:	8a08d83a 	srl	r4,r17,r8
1000d90c:	88e2983a 	sll	r17,r17,r3
1000d910:	10c6983a 	sll	r3,r2,r3
1000d914:	1210d83a 	srl	r8,r2,r8
1000d918:	8804c03a 	cmpne	r2,r17,zero
1000d91c:	1906b03a 	or	r3,r3,r4
1000d920:	18a2b03a 	or	r17,r3,r2
1000d924:	0021883a 	mov	r16,zero
1000d928:	003fa206 	br	1000d7b4 <__alt_data_end+0xf800d7b4>
1000d92c:	1890b03a 	or	r8,r3,r2
1000d930:	40017d26 	beq	r8,zero,1000df28 <__adddf3+0x7f0>
1000d934:	1011883a 	mov	r8,r2
1000d938:	1823883a 	mov	r17,r3
1000d93c:	888001cc 	andi	r2,r17,7
1000d940:	103f9e1e 	bne	r2,zero,1000d7bc <__alt_data_end+0xf800d7bc>
1000d944:	4004977a 	slli	r2,r8,29
1000d948:	8822d0fa 	srli	r17,r17,3
1000d94c:	4010d0fa 	srli	r8,r8,3
1000d950:	9007883a 	mov	r3,r18
1000d954:	1444b03a 	or	r2,r2,r17
1000d958:	0101ffc4 	movi	r4,2047
1000d95c:	81002426 	beq	r16,r4,1000d9f0 <__adddf3+0x2b8>
1000d960:	8120703a 	and	r16,r16,r4
1000d964:	01000434 	movhi	r4,16
1000d968:	213fffc4 	addi	r4,r4,-1
1000d96c:	4110703a 	and	r8,r8,r4
1000d970:	003fa806 	br	1000d814 <__alt_data_end+0xf800d814>
1000d974:	8089c83a 	sub	r4,r16,r2
1000d978:	01005e0e 	bge	zero,r4,1000daf4 <__adddf3+0x3bc>
1000d97c:	10002b26 	beq	r2,zero,1000da2c <__adddf3+0x2f4>
1000d980:	0081ffc4 	movi	r2,2047
1000d984:	80bf8b26 	beq	r16,r2,1000d7b4 <__alt_data_end+0xf800d7b4>
1000d988:	4a402034 	orhi	r9,r9,128
1000d98c:	00800e04 	movi	r2,56
1000d990:	1100a40e 	bge	r2,r4,1000dc24 <__adddf3+0x4ec>
1000d994:	498cb03a 	or	r6,r9,r6
1000d998:	300ac03a 	cmpne	r5,r6,zero
1000d99c:	0013883a 	mov	r9,zero
1000d9a0:	2c4b883a 	add	r5,r5,r17
1000d9a4:	2c63803a 	cmpltu	r17,r5,r17
1000d9a8:	4a11883a 	add	r8,r9,r8
1000d9ac:	8a11883a 	add	r8,r17,r8
1000d9b0:	2823883a 	mov	r17,r5
1000d9b4:	4080202c 	andhi	r2,r8,128
1000d9b8:	103fe026 	beq	r2,zero,1000d93c <__alt_data_end+0xf800d93c>
1000d9bc:	84000044 	addi	r16,r16,1
1000d9c0:	0081ffc4 	movi	r2,2047
1000d9c4:	8080d226 	beq	r16,r2,1000dd10 <__adddf3+0x5d8>
1000d9c8:	00bfe034 	movhi	r2,65408
1000d9cc:	10bfffc4 	addi	r2,r2,-1
1000d9d0:	4090703a 	and	r8,r8,r2
1000d9d4:	880ad07a 	srli	r5,r17,1
1000d9d8:	400897fa 	slli	r4,r8,31
1000d9dc:	88c0004c 	andi	r3,r17,1
1000d9e0:	28e2b03a 	or	r17,r5,r3
1000d9e4:	4010d07a 	srli	r8,r8,1
1000d9e8:	2462b03a 	or	r17,r4,r17
1000d9ec:	003f7106 	br	1000d7b4 <__alt_data_end+0xf800d7b4>
1000d9f0:	4088b03a 	or	r4,r8,r2
1000d9f4:	20014526 	beq	r4,zero,1000df0c <__adddf3+0x7d4>
1000d9f8:	01000434 	movhi	r4,16
1000d9fc:	42000234 	orhi	r8,r8,8
1000da00:	213fffc4 	addi	r4,r4,-1
1000da04:	4110703a 	and	r8,r8,r4
1000da08:	003f8206 	br	1000d814 <__alt_data_end+0xf800d814>
1000da0c:	18ffffc4 	addi	r3,r3,-1
1000da10:	1800491e 	bne	r3,zero,1000db38 <__adddf3+0x400>
1000da14:	898bc83a 	sub	r5,r17,r6
1000da18:	8963803a 	cmpltu	r17,r17,r5
1000da1c:	4251c83a 	sub	r8,r8,r9
1000da20:	4451c83a 	sub	r8,r8,r17
1000da24:	2823883a 	mov	r17,r5
1000da28:	003f9f06 	br	1000d8a8 <__alt_data_end+0xf800d8a8>
1000da2c:	4984b03a 	or	r2,r9,r6
1000da30:	103f6026 	beq	r2,zero,1000d7b4 <__alt_data_end+0xf800d7b4>
1000da34:	213fffc4 	addi	r4,r4,-1
1000da38:	2000931e 	bne	r4,zero,1000dc88 <__adddf3+0x550>
1000da3c:	898d883a 	add	r6,r17,r6
1000da40:	3463803a 	cmpltu	r17,r6,r17
1000da44:	4251883a 	add	r8,r8,r9
1000da48:	8a11883a 	add	r8,r17,r8
1000da4c:	3023883a 	mov	r17,r6
1000da50:	003fd806 	br	1000d9b4 <__alt_data_end+0xf800d9b4>
1000da54:	1800541e 	bne	r3,zero,1000dba8 <__adddf3+0x470>
1000da58:	80800044 	addi	r2,r16,1
1000da5c:	1081ffcc 	andi	r2,r2,2047
1000da60:	00c00044 	movi	r3,1
1000da64:	1880a00e 	bge	r3,r2,1000dce8 <__adddf3+0x5b0>
1000da68:	8989c83a 	sub	r4,r17,r6
1000da6c:	8905803a 	cmpltu	r2,r17,r4
1000da70:	4267c83a 	sub	r19,r8,r9
1000da74:	98a7c83a 	sub	r19,r19,r2
1000da78:	9880202c 	andhi	r2,r19,128
1000da7c:	10006326 	beq	r2,zero,1000dc0c <__adddf3+0x4d4>
1000da80:	3463c83a 	sub	r17,r6,r17
1000da84:	4a07c83a 	sub	r3,r9,r8
1000da88:	344d803a 	cmpltu	r6,r6,r17
1000da8c:	19a7c83a 	sub	r19,r3,r6
1000da90:	3825883a 	mov	r18,r7
1000da94:	983f8a1e 	bne	r19,zero,1000d8c0 <__alt_data_end+0xf800d8c0>
1000da98:	8809883a 	mov	r4,r17
1000da9c:	000ff780 	call	1000ff78 <__clzsi2>
1000daa0:	10800804 	addi	r2,r2,32
1000daa4:	10fffe04 	addi	r3,r2,-8
1000daa8:	010007c4 	movi	r4,31
1000daac:	20ff890e 	bge	r4,r3,1000d8d4 <__alt_data_end+0xf800d8d4>
1000dab0:	10bff604 	addi	r2,r2,-40
1000dab4:	8884983a 	sll	r2,r17,r2
1000dab8:	0023883a 	mov	r17,zero
1000dabc:	1c3f8c0e 	bge	r3,r16,1000d8f0 <__alt_data_end+0xf800d8f0>
1000dac0:	023fe034 	movhi	r8,65408
1000dac4:	423fffc4 	addi	r8,r8,-1
1000dac8:	80e1c83a 	sub	r16,r16,r3
1000dacc:	1210703a 	and	r8,r2,r8
1000dad0:	003f3806 	br	1000d7b4 <__alt_data_end+0xf800d7b4>
1000dad4:	9007883a 	mov	r3,r18
1000dad8:	0011883a 	mov	r8,zero
1000dadc:	0005883a 	mov	r2,zero
1000dae0:	003f4c06 	br	1000d814 <__alt_data_end+0xf800d814>
1000dae4:	498cb03a 	or	r6,r9,r6
1000dae8:	300cc03a 	cmpne	r6,r6,zero
1000daec:	0007883a 	mov	r3,zero
1000daf0:	003f6806 	br	1000d894 <__alt_data_end+0xf800d894>
1000daf4:	20009c1e 	bne	r4,zero,1000dd68 <__adddf3+0x630>
1000daf8:	80800044 	addi	r2,r16,1
1000dafc:	1141ffcc 	andi	r5,r2,2047
1000db00:	01000044 	movi	r4,1
1000db04:	2140670e 	bge	r4,r5,1000dca4 <__adddf3+0x56c>
1000db08:	0101ffc4 	movi	r4,2047
1000db0c:	11007f26 	beq	r2,r4,1000dd0c <__adddf3+0x5d4>
1000db10:	898d883a 	add	r6,r17,r6
1000db14:	4247883a 	add	r3,r8,r9
1000db18:	3451803a 	cmpltu	r8,r6,r17
1000db1c:	40d1883a 	add	r8,r8,r3
1000db20:	402297fa 	slli	r17,r8,31
1000db24:	300cd07a 	srli	r6,r6,1
1000db28:	4010d07a 	srli	r8,r8,1
1000db2c:	1021883a 	mov	r16,r2
1000db30:	89a2b03a 	or	r17,r17,r6
1000db34:	003f1f06 	br	1000d7b4 <__alt_data_end+0xf800d7b4>
1000db38:	0081ffc4 	movi	r2,2047
1000db3c:	80bf481e 	bne	r16,r2,1000d860 <__alt_data_end+0xf800d860>
1000db40:	003f1c06 	br	1000d7b4 <__alt_data_end+0xf800d7b4>
1000db44:	843ff844 	addi	r16,r16,-31
1000db48:	01000804 	movi	r4,32
1000db4c:	1406d83a 	srl	r3,r2,r16
1000db50:	41005026 	beq	r8,r4,1000dc94 <__adddf3+0x55c>
1000db54:	01001004 	movi	r4,64
1000db58:	2211c83a 	sub	r8,r4,r8
1000db5c:	1204983a 	sll	r2,r2,r8
1000db60:	88a2b03a 	or	r17,r17,r2
1000db64:	8822c03a 	cmpne	r17,r17,zero
1000db68:	1c62b03a 	or	r17,r3,r17
1000db6c:	0011883a 	mov	r8,zero
1000db70:	0021883a 	mov	r16,zero
1000db74:	003f7106 	br	1000d93c <__alt_data_end+0xf800d93c>
1000db78:	193ff804 	addi	r4,r3,-32
1000db7c:	00800804 	movi	r2,32
1000db80:	4908d83a 	srl	r4,r9,r4
1000db84:	18804526 	beq	r3,r2,1000dc9c <__adddf3+0x564>
1000db88:	00801004 	movi	r2,64
1000db8c:	10c5c83a 	sub	r2,r2,r3
1000db90:	4886983a 	sll	r3,r9,r2
1000db94:	198cb03a 	or	r6,r3,r6
1000db98:	300cc03a 	cmpne	r6,r6,zero
1000db9c:	218cb03a 	or	r6,r4,r6
1000dba0:	0007883a 	mov	r3,zero
1000dba4:	003f3b06 	br	1000d894 <__alt_data_end+0xf800d894>
1000dba8:	80002a26 	beq	r16,zero,1000dc54 <__adddf3+0x51c>
1000dbac:	0101ffc4 	movi	r4,2047
1000dbb0:	11006826 	beq	r2,r4,1000dd54 <__adddf3+0x61c>
1000dbb4:	00c7c83a 	sub	r3,zero,r3
1000dbb8:	42002034 	orhi	r8,r8,128
1000dbbc:	01000e04 	movi	r4,56
1000dbc0:	20c07c16 	blt	r4,r3,1000ddb4 <__adddf3+0x67c>
1000dbc4:	010007c4 	movi	r4,31
1000dbc8:	20c0da16 	blt	r4,r3,1000df34 <__adddf3+0x7fc>
1000dbcc:	01000804 	movi	r4,32
1000dbd0:	20c9c83a 	sub	r4,r4,r3
1000dbd4:	4114983a 	sll	r10,r8,r4
1000dbd8:	88cad83a 	srl	r5,r17,r3
1000dbdc:	8908983a 	sll	r4,r17,r4
1000dbe0:	40c6d83a 	srl	r3,r8,r3
1000dbe4:	5162b03a 	or	r17,r10,r5
1000dbe8:	2008c03a 	cmpne	r4,r4,zero
1000dbec:	8922b03a 	or	r17,r17,r4
1000dbf0:	3463c83a 	sub	r17,r6,r17
1000dbf4:	48c7c83a 	sub	r3,r9,r3
1000dbf8:	344d803a 	cmpltu	r6,r6,r17
1000dbfc:	1991c83a 	sub	r8,r3,r6
1000dc00:	1021883a 	mov	r16,r2
1000dc04:	3825883a 	mov	r18,r7
1000dc08:	003f2706 	br	1000d8a8 <__alt_data_end+0xf800d8a8>
1000dc0c:	24d0b03a 	or	r8,r4,r19
1000dc10:	40001b1e 	bne	r8,zero,1000dc80 <__adddf3+0x548>
1000dc14:	0005883a 	mov	r2,zero
1000dc18:	0007883a 	mov	r3,zero
1000dc1c:	0021883a 	mov	r16,zero
1000dc20:	003f4d06 	br	1000d958 <__alt_data_end+0xf800d958>
1000dc24:	008007c4 	movi	r2,31
1000dc28:	11003c16 	blt	r2,r4,1000dd1c <__adddf3+0x5e4>
1000dc2c:	00800804 	movi	r2,32
1000dc30:	1105c83a 	sub	r2,r2,r4
1000dc34:	488e983a 	sll	r7,r9,r2
1000dc38:	310ad83a 	srl	r5,r6,r4
1000dc3c:	3084983a 	sll	r2,r6,r2
1000dc40:	4912d83a 	srl	r9,r9,r4
1000dc44:	394ab03a 	or	r5,r7,r5
1000dc48:	1004c03a 	cmpne	r2,r2,zero
1000dc4c:	288ab03a 	or	r5,r5,r2
1000dc50:	003f5306 	br	1000d9a0 <__alt_data_end+0xf800d9a0>
1000dc54:	4448b03a 	or	r4,r8,r17
1000dc58:	20003e26 	beq	r4,zero,1000dd54 <__adddf3+0x61c>
1000dc5c:	00c6303a 	nor	r3,zero,r3
1000dc60:	18003a1e 	bne	r3,zero,1000dd4c <__adddf3+0x614>
1000dc64:	3463c83a 	sub	r17,r6,r17
1000dc68:	4a07c83a 	sub	r3,r9,r8
1000dc6c:	344d803a 	cmpltu	r6,r6,r17
1000dc70:	1991c83a 	sub	r8,r3,r6
1000dc74:	1021883a 	mov	r16,r2
1000dc78:	3825883a 	mov	r18,r7
1000dc7c:	003f0a06 	br	1000d8a8 <__alt_data_end+0xf800d8a8>
1000dc80:	2023883a 	mov	r17,r4
1000dc84:	003f0d06 	br	1000d8bc <__alt_data_end+0xf800d8bc>
1000dc88:	0081ffc4 	movi	r2,2047
1000dc8c:	80bf3f1e 	bne	r16,r2,1000d98c <__alt_data_end+0xf800d98c>
1000dc90:	003ec806 	br	1000d7b4 <__alt_data_end+0xf800d7b4>
1000dc94:	0005883a 	mov	r2,zero
1000dc98:	003fb106 	br	1000db60 <__alt_data_end+0xf800db60>
1000dc9c:	0007883a 	mov	r3,zero
1000dca0:	003fbc06 	br	1000db94 <__alt_data_end+0xf800db94>
1000dca4:	4444b03a 	or	r2,r8,r17
1000dca8:	8000871e 	bne	r16,zero,1000dec8 <__adddf3+0x790>
1000dcac:	1000ba26 	beq	r2,zero,1000df98 <__adddf3+0x860>
1000dcb0:	4984b03a 	or	r2,r9,r6
1000dcb4:	103ebf26 	beq	r2,zero,1000d7b4 <__alt_data_end+0xf800d7b4>
1000dcb8:	8985883a 	add	r2,r17,r6
1000dcbc:	4247883a 	add	r3,r8,r9
1000dcc0:	1451803a 	cmpltu	r8,r2,r17
1000dcc4:	40d1883a 	add	r8,r8,r3
1000dcc8:	40c0202c 	andhi	r3,r8,128
1000dccc:	1023883a 	mov	r17,r2
1000dcd0:	183f1a26 	beq	r3,zero,1000d93c <__alt_data_end+0xf800d93c>
1000dcd4:	00bfe034 	movhi	r2,65408
1000dcd8:	10bfffc4 	addi	r2,r2,-1
1000dcdc:	2021883a 	mov	r16,r4
1000dce0:	4090703a 	and	r8,r8,r2
1000dce4:	003eb306 	br	1000d7b4 <__alt_data_end+0xf800d7b4>
1000dce8:	4444b03a 	or	r2,r8,r17
1000dcec:	8000291e 	bne	r16,zero,1000dd94 <__adddf3+0x65c>
1000dcf0:	10004b1e 	bne	r2,zero,1000de20 <__adddf3+0x6e8>
1000dcf4:	4990b03a 	or	r8,r9,r6
1000dcf8:	40008b26 	beq	r8,zero,1000df28 <__adddf3+0x7f0>
1000dcfc:	4811883a 	mov	r8,r9
1000dd00:	3023883a 	mov	r17,r6
1000dd04:	3825883a 	mov	r18,r7
1000dd08:	003eaa06 	br	1000d7b4 <__alt_data_end+0xf800d7b4>
1000dd0c:	1021883a 	mov	r16,r2
1000dd10:	0011883a 	mov	r8,zero
1000dd14:	0005883a 	mov	r2,zero
1000dd18:	003f0f06 	br	1000d958 <__alt_data_end+0xf800d958>
1000dd1c:	217ff804 	addi	r5,r4,-32
1000dd20:	00800804 	movi	r2,32
1000dd24:	494ad83a 	srl	r5,r9,r5
1000dd28:	20807d26 	beq	r4,r2,1000df20 <__adddf3+0x7e8>
1000dd2c:	00801004 	movi	r2,64
1000dd30:	1109c83a 	sub	r4,r2,r4
1000dd34:	4912983a 	sll	r9,r9,r4
1000dd38:	498cb03a 	or	r6,r9,r6
1000dd3c:	300cc03a 	cmpne	r6,r6,zero
1000dd40:	298ab03a 	or	r5,r5,r6
1000dd44:	0013883a 	mov	r9,zero
1000dd48:	003f1506 	br	1000d9a0 <__alt_data_end+0xf800d9a0>
1000dd4c:	0101ffc4 	movi	r4,2047
1000dd50:	113f9a1e 	bne	r2,r4,1000dbbc <__alt_data_end+0xf800dbbc>
1000dd54:	4811883a 	mov	r8,r9
1000dd58:	3023883a 	mov	r17,r6
1000dd5c:	1021883a 	mov	r16,r2
1000dd60:	3825883a 	mov	r18,r7
1000dd64:	003e9306 	br	1000d7b4 <__alt_data_end+0xf800d7b4>
1000dd68:	8000161e 	bne	r16,zero,1000ddc4 <__adddf3+0x68c>
1000dd6c:	444ab03a 	or	r5,r8,r17
1000dd70:	28005126 	beq	r5,zero,1000deb8 <__adddf3+0x780>
1000dd74:	0108303a 	nor	r4,zero,r4
1000dd78:	20004d1e 	bne	r4,zero,1000deb0 <__adddf3+0x778>
1000dd7c:	89a3883a 	add	r17,r17,r6
1000dd80:	4253883a 	add	r9,r8,r9
1000dd84:	898d803a 	cmpltu	r6,r17,r6
1000dd88:	3251883a 	add	r8,r6,r9
1000dd8c:	1021883a 	mov	r16,r2
1000dd90:	003f0806 	br	1000d9b4 <__alt_data_end+0xf800d9b4>
1000dd94:	1000301e 	bne	r2,zero,1000de58 <__adddf3+0x720>
1000dd98:	4984b03a 	or	r2,r9,r6
1000dd9c:	10007126 	beq	r2,zero,1000df64 <__adddf3+0x82c>
1000dda0:	4811883a 	mov	r8,r9
1000dda4:	3023883a 	mov	r17,r6
1000dda8:	3825883a 	mov	r18,r7
1000ddac:	0401ffc4 	movi	r16,2047
1000ddb0:	003e8006 	br	1000d7b4 <__alt_data_end+0xf800d7b4>
1000ddb4:	4462b03a 	or	r17,r8,r17
1000ddb8:	8822c03a 	cmpne	r17,r17,zero
1000ddbc:	0007883a 	mov	r3,zero
1000ddc0:	003f8b06 	br	1000dbf0 <__alt_data_end+0xf800dbf0>
1000ddc4:	0141ffc4 	movi	r5,2047
1000ddc8:	11403b26 	beq	r2,r5,1000deb8 <__adddf3+0x780>
1000ddcc:	0109c83a 	sub	r4,zero,r4
1000ddd0:	42002034 	orhi	r8,r8,128
1000ddd4:	01400e04 	movi	r5,56
1000ddd8:	29006716 	blt	r5,r4,1000df78 <__adddf3+0x840>
1000dddc:	014007c4 	movi	r5,31
1000dde0:	29007016 	blt	r5,r4,1000dfa4 <__adddf3+0x86c>
1000dde4:	01400804 	movi	r5,32
1000dde8:	290bc83a 	sub	r5,r5,r4
1000ddec:	4154983a 	sll	r10,r8,r5
1000ddf0:	890ed83a 	srl	r7,r17,r4
1000ddf4:	894a983a 	sll	r5,r17,r5
1000ddf8:	4108d83a 	srl	r4,r8,r4
1000ddfc:	51e2b03a 	or	r17,r10,r7
1000de00:	280ac03a 	cmpne	r5,r5,zero
1000de04:	8962b03a 	or	r17,r17,r5
1000de08:	89a3883a 	add	r17,r17,r6
1000de0c:	2253883a 	add	r9,r4,r9
1000de10:	898d803a 	cmpltu	r6,r17,r6
1000de14:	3251883a 	add	r8,r6,r9
1000de18:	1021883a 	mov	r16,r2
1000de1c:	003ee506 	br	1000d9b4 <__alt_data_end+0xf800d9b4>
1000de20:	4984b03a 	or	r2,r9,r6
1000de24:	103e6326 	beq	r2,zero,1000d7b4 <__alt_data_end+0xf800d7b4>
1000de28:	8987c83a 	sub	r3,r17,r6
1000de2c:	88c9803a 	cmpltu	r4,r17,r3
1000de30:	4245c83a 	sub	r2,r8,r9
1000de34:	1105c83a 	sub	r2,r2,r4
1000de38:	1100202c 	andhi	r4,r2,128
1000de3c:	203ebb26 	beq	r4,zero,1000d92c <__alt_data_end+0xf800d92c>
1000de40:	3463c83a 	sub	r17,r6,r17
1000de44:	4a07c83a 	sub	r3,r9,r8
1000de48:	344d803a 	cmpltu	r6,r6,r17
1000de4c:	1991c83a 	sub	r8,r3,r6
1000de50:	3825883a 	mov	r18,r7
1000de54:	003e5706 	br	1000d7b4 <__alt_data_end+0xf800d7b4>
1000de58:	4984b03a 	or	r2,r9,r6
1000de5c:	10002e26 	beq	r2,zero,1000df18 <__adddf3+0x7e0>
1000de60:	4004d0fa 	srli	r2,r8,3
1000de64:	8822d0fa 	srli	r17,r17,3
1000de68:	4010977a 	slli	r8,r8,29
1000de6c:	10c0022c 	andhi	r3,r2,8
1000de70:	4462b03a 	or	r17,r8,r17
1000de74:	18000826 	beq	r3,zero,1000de98 <__adddf3+0x760>
1000de78:	4808d0fa 	srli	r4,r9,3
1000de7c:	20c0022c 	andhi	r3,r4,8
1000de80:	1800051e 	bne	r3,zero,1000de98 <__adddf3+0x760>
1000de84:	300cd0fa 	srli	r6,r6,3
1000de88:	4806977a 	slli	r3,r9,29
1000de8c:	2005883a 	mov	r2,r4
1000de90:	3825883a 	mov	r18,r7
1000de94:	19a2b03a 	or	r17,r3,r6
1000de98:	8810d77a 	srli	r8,r17,29
1000de9c:	100490fa 	slli	r2,r2,3
1000dea0:	882290fa 	slli	r17,r17,3
1000dea4:	0401ffc4 	movi	r16,2047
1000dea8:	4090b03a 	or	r8,r8,r2
1000deac:	003e4106 	br	1000d7b4 <__alt_data_end+0xf800d7b4>
1000deb0:	0141ffc4 	movi	r5,2047
1000deb4:	117fc71e 	bne	r2,r5,1000ddd4 <__alt_data_end+0xf800ddd4>
1000deb8:	4811883a 	mov	r8,r9
1000debc:	3023883a 	mov	r17,r6
1000dec0:	1021883a 	mov	r16,r2
1000dec4:	003e3b06 	br	1000d7b4 <__alt_data_end+0xf800d7b4>
1000dec8:	10002f26 	beq	r2,zero,1000df88 <__adddf3+0x850>
1000decc:	4984b03a 	or	r2,r9,r6
1000ded0:	10001126 	beq	r2,zero,1000df18 <__adddf3+0x7e0>
1000ded4:	4004d0fa 	srli	r2,r8,3
1000ded8:	8822d0fa 	srli	r17,r17,3
1000dedc:	4010977a 	slli	r8,r8,29
1000dee0:	10c0022c 	andhi	r3,r2,8
1000dee4:	4462b03a 	or	r17,r8,r17
1000dee8:	183feb26 	beq	r3,zero,1000de98 <__alt_data_end+0xf800de98>
1000deec:	4808d0fa 	srli	r4,r9,3
1000def0:	20c0022c 	andhi	r3,r4,8
1000def4:	183fe81e 	bne	r3,zero,1000de98 <__alt_data_end+0xf800de98>
1000def8:	300cd0fa 	srli	r6,r6,3
1000defc:	4806977a 	slli	r3,r9,29
1000df00:	2005883a 	mov	r2,r4
1000df04:	19a2b03a 	or	r17,r3,r6
1000df08:	003fe306 	br	1000de98 <__alt_data_end+0xf800de98>
1000df0c:	0011883a 	mov	r8,zero
1000df10:	0005883a 	mov	r2,zero
1000df14:	003e3f06 	br	1000d814 <__alt_data_end+0xf800d814>
1000df18:	0401ffc4 	movi	r16,2047
1000df1c:	003e2506 	br	1000d7b4 <__alt_data_end+0xf800d7b4>
1000df20:	0013883a 	mov	r9,zero
1000df24:	003f8406 	br	1000dd38 <__alt_data_end+0xf800dd38>
1000df28:	0005883a 	mov	r2,zero
1000df2c:	0007883a 	mov	r3,zero
1000df30:	003e8906 	br	1000d958 <__alt_data_end+0xf800d958>
1000df34:	197ff804 	addi	r5,r3,-32
1000df38:	01000804 	movi	r4,32
1000df3c:	414ad83a 	srl	r5,r8,r5
1000df40:	19002426 	beq	r3,r4,1000dfd4 <__adddf3+0x89c>
1000df44:	01001004 	movi	r4,64
1000df48:	20c7c83a 	sub	r3,r4,r3
1000df4c:	40c6983a 	sll	r3,r8,r3
1000df50:	1c46b03a 	or	r3,r3,r17
1000df54:	1806c03a 	cmpne	r3,r3,zero
1000df58:	28e2b03a 	or	r17,r5,r3
1000df5c:	0007883a 	mov	r3,zero
1000df60:	003f2306 	br	1000dbf0 <__alt_data_end+0xf800dbf0>
1000df64:	0007883a 	mov	r3,zero
1000df68:	5811883a 	mov	r8,r11
1000df6c:	00bfffc4 	movi	r2,-1
1000df70:	0401ffc4 	movi	r16,2047
1000df74:	003e7806 	br	1000d958 <__alt_data_end+0xf800d958>
1000df78:	4462b03a 	or	r17,r8,r17
1000df7c:	8822c03a 	cmpne	r17,r17,zero
1000df80:	0009883a 	mov	r4,zero
1000df84:	003fa006 	br	1000de08 <__alt_data_end+0xf800de08>
1000df88:	4811883a 	mov	r8,r9
1000df8c:	3023883a 	mov	r17,r6
1000df90:	0401ffc4 	movi	r16,2047
1000df94:	003e0706 	br	1000d7b4 <__alt_data_end+0xf800d7b4>
1000df98:	4811883a 	mov	r8,r9
1000df9c:	3023883a 	mov	r17,r6
1000dfa0:	003e0406 	br	1000d7b4 <__alt_data_end+0xf800d7b4>
1000dfa4:	21fff804 	addi	r7,r4,-32
1000dfa8:	01400804 	movi	r5,32
1000dfac:	41ced83a 	srl	r7,r8,r7
1000dfb0:	21400a26 	beq	r4,r5,1000dfdc <__adddf3+0x8a4>
1000dfb4:	01401004 	movi	r5,64
1000dfb8:	2909c83a 	sub	r4,r5,r4
1000dfbc:	4108983a 	sll	r4,r8,r4
1000dfc0:	2448b03a 	or	r4,r4,r17
1000dfc4:	2008c03a 	cmpne	r4,r4,zero
1000dfc8:	3922b03a 	or	r17,r7,r4
1000dfcc:	0009883a 	mov	r4,zero
1000dfd0:	003f8d06 	br	1000de08 <__alt_data_end+0xf800de08>
1000dfd4:	0007883a 	mov	r3,zero
1000dfd8:	003fdd06 	br	1000df50 <__alt_data_end+0xf800df50>
1000dfdc:	0009883a 	mov	r4,zero
1000dfe0:	003ff706 	br	1000dfc0 <__alt_data_end+0xf800dfc0>

1000dfe4 <__divdf3>:
1000dfe4:	defff004 	addi	sp,sp,-64
1000dfe8:	dc800815 	stw	r18,32(sp)
1000dfec:	2824d53a 	srli	r18,r5,20
1000dff0:	dd800c15 	stw	r22,48(sp)
1000dff4:	282cd7fa 	srli	r22,r5,31
1000dff8:	dc000615 	stw	r16,24(sp)
1000dffc:	04000434 	movhi	r16,16
1000e000:	843fffc4 	addi	r16,r16,-1
1000e004:	dfc00f15 	stw	ra,60(sp)
1000e008:	df000e15 	stw	fp,56(sp)
1000e00c:	ddc00d15 	stw	r23,52(sp)
1000e010:	dd400b15 	stw	r21,44(sp)
1000e014:	dd000a15 	stw	r20,40(sp)
1000e018:	dcc00915 	stw	r19,36(sp)
1000e01c:	dc400715 	stw	r17,28(sp)
1000e020:	9481ffcc 	andi	r18,r18,2047
1000e024:	2c20703a 	and	r16,r5,r16
1000e028:	b2003fcc 	andi	r8,r22,255
1000e02c:	90006126 	beq	r18,zero,1000e1b4 <__divdf3+0x1d0>
1000e030:	0081ffc4 	movi	r2,2047
1000e034:	202b883a 	mov	r21,r4
1000e038:	90803726 	beq	r18,r2,1000e118 <__divdf3+0x134>
1000e03c:	80800434 	orhi	r2,r16,16
1000e040:	100490fa 	slli	r2,r2,3
1000e044:	2020d77a 	srli	r16,r4,29
1000e048:	202a90fa 	slli	r21,r4,3
1000e04c:	94bf0044 	addi	r18,r18,-1023
1000e050:	80a0b03a 	or	r16,r16,r2
1000e054:	0013883a 	mov	r9,zero
1000e058:	000b883a 	mov	r5,zero
1000e05c:	3806d53a 	srli	r3,r7,20
1000e060:	382ed7fa 	srli	r23,r7,31
1000e064:	04400434 	movhi	r17,16
1000e068:	8c7fffc4 	addi	r17,r17,-1
1000e06c:	18c1ffcc 	andi	r3,r3,2047
1000e070:	3029883a 	mov	r20,r6
1000e074:	3c62703a 	and	r17,r7,r17
1000e078:	bf003fcc 	andi	fp,r23,255
1000e07c:	18006e26 	beq	r3,zero,1000e238 <__divdf3+0x254>
1000e080:	0081ffc4 	movi	r2,2047
1000e084:	18806626 	beq	r3,r2,1000e220 <__divdf3+0x23c>
1000e088:	88800434 	orhi	r2,r17,16
1000e08c:	100490fa 	slli	r2,r2,3
1000e090:	3022d77a 	srli	r17,r6,29
1000e094:	302890fa 	slli	r20,r6,3
1000e098:	18ff0044 	addi	r3,r3,-1023
1000e09c:	88a2b03a 	or	r17,r17,r2
1000e0a0:	000f883a 	mov	r7,zero
1000e0a4:	b5e6f03a 	xor	r19,r22,r23
1000e0a8:	3a4cb03a 	or	r6,r7,r9
1000e0ac:	008003c4 	movi	r2,15
1000e0b0:	9809883a 	mov	r4,r19
1000e0b4:	90c7c83a 	sub	r3,r18,r3
1000e0b8:	9cc03fcc 	andi	r19,r19,255
1000e0bc:	11809636 	bltu	r2,r6,1000e318 <__divdf3+0x334>
1000e0c0:	300c90ba 	slli	r6,r6,2
1000e0c4:	00840074 	movhi	r2,4097
1000e0c8:	10b83604 	addi	r2,r2,-7976
1000e0cc:	308d883a 	add	r6,r6,r2
1000e0d0:	30800017 	ldw	r2,0(r6)
1000e0d4:	1000683a 	jmp	r2
1000e0d8:	1000e318 	cmpnei	zero,r2,908
1000e0dc:	1000e150 	cmplti	zero,r2,901
1000e0e0:	1000e308 	cmpgei	zero,r2,908
1000e0e4:	1000e144 	addi	zero,r2,901
1000e0e8:	1000e308 	cmpgei	zero,r2,908
1000e0ec:	1000e2dc 	xori	zero,r2,907
1000e0f0:	1000e308 	cmpgei	zero,r2,908
1000e0f4:	1000e144 	addi	zero,r2,901
1000e0f8:	1000e150 	cmplti	zero,r2,901
1000e0fc:	1000e150 	cmplti	zero,r2,901
1000e100:	1000e2dc 	xori	zero,r2,907
1000e104:	1000e144 	addi	zero,r2,901
1000e108:	1000e134 	orhi	zero,r2,900
1000e10c:	1000e134 	orhi	zero,r2,900
1000e110:	1000e134 	orhi	zero,r2,900
1000e114:	1000e6a0 	cmpeqi	zero,r2,922
1000e118:	2404b03a 	or	r2,r4,r16
1000e11c:	10006c1e 	bne	r2,zero,1000e2d0 <__divdf3+0x2ec>
1000e120:	02400204 	movi	r9,8
1000e124:	0021883a 	mov	r16,zero
1000e128:	002b883a 	mov	r21,zero
1000e12c:	01400084 	movi	r5,2
1000e130:	003fca06 	br	1000e05c <__alt_data_end+0xf800e05c>
1000e134:	8023883a 	mov	r17,r16
1000e138:	a829883a 	mov	r20,r21
1000e13c:	4039883a 	mov	fp,r8
1000e140:	280f883a 	mov	r7,r5
1000e144:	00800084 	movi	r2,2
1000e148:	3881601e 	bne	r7,r2,1000e6cc <__divdf3+0x6e8>
1000e14c:	e027883a 	mov	r19,fp
1000e150:	9900004c 	andi	r4,r19,1
1000e154:	0081ffc4 	movi	r2,2047
1000e158:	0021883a 	mov	r16,zero
1000e15c:	002b883a 	mov	r21,zero
1000e160:	1004953a 	slli	r2,r2,20
1000e164:	20c03fcc 	andi	r3,r4,255
1000e168:	01400434 	movhi	r5,16
1000e16c:	297fffc4 	addi	r5,r5,-1
1000e170:	180697fa 	slli	r3,r3,31
1000e174:	8160703a 	and	r16,r16,r5
1000e178:	80a0b03a 	or	r16,r16,r2
1000e17c:	80c6b03a 	or	r3,r16,r3
1000e180:	a805883a 	mov	r2,r21
1000e184:	dfc00f17 	ldw	ra,60(sp)
1000e188:	df000e17 	ldw	fp,56(sp)
1000e18c:	ddc00d17 	ldw	r23,52(sp)
1000e190:	dd800c17 	ldw	r22,48(sp)
1000e194:	dd400b17 	ldw	r21,44(sp)
1000e198:	dd000a17 	ldw	r20,40(sp)
1000e19c:	dcc00917 	ldw	r19,36(sp)
1000e1a0:	dc800817 	ldw	r18,32(sp)
1000e1a4:	dc400717 	ldw	r17,28(sp)
1000e1a8:	dc000617 	ldw	r16,24(sp)
1000e1ac:	dec01004 	addi	sp,sp,64
1000e1b0:	f800283a 	ret
1000e1b4:	2404b03a 	or	r2,r4,r16
1000e1b8:	2023883a 	mov	r17,r4
1000e1bc:	10003f26 	beq	r2,zero,1000e2bc <__divdf3+0x2d8>
1000e1c0:	80015e26 	beq	r16,zero,1000e73c <__divdf3+0x758>
1000e1c4:	8009883a 	mov	r4,r16
1000e1c8:	d9800215 	stw	r6,8(sp)
1000e1cc:	d9c00515 	stw	r7,20(sp)
1000e1d0:	da000415 	stw	r8,16(sp)
1000e1d4:	000ff780 	call	1000ff78 <__clzsi2>
1000e1d8:	d9800217 	ldw	r6,8(sp)
1000e1dc:	d9c00517 	ldw	r7,20(sp)
1000e1e0:	da000417 	ldw	r8,16(sp)
1000e1e4:	113ffd44 	addi	r4,r2,-11
1000e1e8:	00c00704 	movi	r3,28
1000e1ec:	19014f16 	blt	r3,r4,1000e72c <__divdf3+0x748>
1000e1f0:	00c00744 	movi	r3,29
1000e1f4:	157ffe04 	addi	r21,r2,-8
1000e1f8:	1907c83a 	sub	r3,r3,r4
1000e1fc:	8560983a 	sll	r16,r16,r21
1000e200:	88c6d83a 	srl	r3,r17,r3
1000e204:	8d6a983a 	sll	r21,r17,r21
1000e208:	1c20b03a 	or	r16,r3,r16
1000e20c:	1080fcc4 	addi	r2,r2,1011
1000e210:	00a5c83a 	sub	r18,zero,r2
1000e214:	0013883a 	mov	r9,zero
1000e218:	000b883a 	mov	r5,zero
1000e21c:	003f8f06 	br	1000e05c <__alt_data_end+0xf800e05c>
1000e220:	3444b03a 	or	r2,r6,r17
1000e224:	1000231e 	bne	r2,zero,1000e2b4 <__divdf3+0x2d0>
1000e228:	0023883a 	mov	r17,zero
1000e22c:	0029883a 	mov	r20,zero
1000e230:	01c00084 	movi	r7,2
1000e234:	003f9b06 	br	1000e0a4 <__alt_data_end+0xf800e0a4>
1000e238:	3444b03a 	or	r2,r6,r17
1000e23c:	10001926 	beq	r2,zero,1000e2a4 <__divdf3+0x2c0>
1000e240:	88014b26 	beq	r17,zero,1000e770 <__divdf3+0x78c>
1000e244:	8809883a 	mov	r4,r17
1000e248:	d9400115 	stw	r5,4(sp)
1000e24c:	d9800215 	stw	r6,8(sp)
1000e250:	da000415 	stw	r8,16(sp)
1000e254:	da400315 	stw	r9,12(sp)
1000e258:	000ff780 	call	1000ff78 <__clzsi2>
1000e25c:	d9400117 	ldw	r5,4(sp)
1000e260:	d9800217 	ldw	r6,8(sp)
1000e264:	da000417 	ldw	r8,16(sp)
1000e268:	da400317 	ldw	r9,12(sp)
1000e26c:	113ffd44 	addi	r4,r2,-11
1000e270:	00c00704 	movi	r3,28
1000e274:	19013a16 	blt	r3,r4,1000e760 <__divdf3+0x77c>
1000e278:	00c00744 	movi	r3,29
1000e27c:	153ffe04 	addi	r20,r2,-8
1000e280:	1907c83a 	sub	r3,r3,r4
1000e284:	8d22983a 	sll	r17,r17,r20
1000e288:	30c6d83a 	srl	r3,r6,r3
1000e28c:	3528983a 	sll	r20,r6,r20
1000e290:	1c62b03a 	or	r17,r3,r17
1000e294:	1080fcc4 	addi	r2,r2,1011
1000e298:	0087c83a 	sub	r3,zero,r2
1000e29c:	000f883a 	mov	r7,zero
1000e2a0:	003f8006 	br	1000e0a4 <__alt_data_end+0xf800e0a4>
1000e2a4:	0023883a 	mov	r17,zero
1000e2a8:	0029883a 	mov	r20,zero
1000e2ac:	01c00044 	movi	r7,1
1000e2b0:	003f7c06 	br	1000e0a4 <__alt_data_end+0xf800e0a4>
1000e2b4:	01c000c4 	movi	r7,3
1000e2b8:	003f7a06 	br	1000e0a4 <__alt_data_end+0xf800e0a4>
1000e2bc:	02400104 	movi	r9,4
1000e2c0:	0021883a 	mov	r16,zero
1000e2c4:	002b883a 	mov	r21,zero
1000e2c8:	01400044 	movi	r5,1
1000e2cc:	003f6306 	br	1000e05c <__alt_data_end+0xf800e05c>
1000e2d0:	02400304 	movi	r9,12
1000e2d4:	014000c4 	movi	r5,3
1000e2d8:	003f6006 	br	1000e05c <__alt_data_end+0xf800e05c>
1000e2dc:	04000434 	movhi	r16,16
1000e2e0:	0009883a 	mov	r4,zero
1000e2e4:	843fffc4 	addi	r16,r16,-1
1000e2e8:	057fffc4 	movi	r21,-1
1000e2ec:	0081ffc4 	movi	r2,2047
1000e2f0:	003f9b06 	br	1000e160 <__alt_data_end+0xf800e160>
1000e2f4:	00c00044 	movi	r3,1
1000e2f8:	1887c83a 	sub	r3,r3,r2
1000e2fc:	01000e04 	movi	r4,56
1000e300:	20c1530e 	bge	r4,r3,1000e850 <__divdf3+0x86c>
1000e304:	9900004c 	andi	r4,r19,1
1000e308:	0005883a 	mov	r2,zero
1000e30c:	0021883a 	mov	r16,zero
1000e310:	002b883a 	mov	r21,zero
1000e314:	003f9206 	br	1000e160 <__alt_data_end+0xf800e160>
1000e318:	8c012e36 	bltu	r17,r16,1000e7d4 <__divdf3+0x7f0>
1000e31c:	84412c26 	beq	r16,r17,1000e7d0 <__divdf3+0x7ec>
1000e320:	a82f883a 	mov	r23,r21
1000e324:	18ffffc4 	addi	r3,r3,-1
1000e328:	002b883a 	mov	r21,zero
1000e32c:	a004d63a 	srli	r2,r20,24
1000e330:	8822923a 	slli	r17,r17,8
1000e334:	a028923a 	slli	r20,r20,8
1000e338:	8009883a 	mov	r4,r16
1000e33c:	88acb03a 	or	r22,r17,r2
1000e340:	dd000015 	stw	r20,0(sp)
1000e344:	b028d43a 	srli	r20,r22,16
1000e348:	d8c00215 	stw	r3,8(sp)
1000e34c:	b4bfffcc 	andi	r18,r22,65535
1000e350:	a00b883a 	mov	r5,r20
1000e354:	0001c840 	call	10001c84 <__udivsi3>
1000e358:	100b883a 	mov	r5,r2
1000e35c:	9009883a 	mov	r4,r18
1000e360:	1023883a 	mov	r17,r2
1000e364:	0001d400 	call	10001d40 <__mulsi3>
1000e368:	8009883a 	mov	r4,r16
1000e36c:	a00b883a 	mov	r5,r20
1000e370:	1039883a 	mov	fp,r2
1000e374:	0001ce80 	call	10001ce8 <__umodsi3>
1000e378:	1004943a 	slli	r2,r2,16
1000e37c:	b808d43a 	srli	r4,r23,16
1000e380:	d8c00217 	ldw	r3,8(sp)
1000e384:	2084b03a 	or	r2,r4,r2
1000e388:	1700062e 	bgeu	r2,fp,1000e3a4 <__divdf3+0x3c0>
1000e38c:	1585883a 	add	r2,r2,r22
1000e390:	893fffc4 	addi	r4,r17,-1
1000e394:	15811d36 	bltu	r2,r22,1000e80c <__divdf3+0x828>
1000e398:	17011c2e 	bgeu	r2,fp,1000e80c <__divdf3+0x828>
1000e39c:	8c7fff84 	addi	r17,r17,-2
1000e3a0:	1585883a 	add	r2,r2,r22
1000e3a4:	1739c83a 	sub	fp,r2,fp
1000e3a8:	a00b883a 	mov	r5,r20
1000e3ac:	e009883a 	mov	r4,fp
1000e3b0:	d8c00215 	stw	r3,8(sp)
1000e3b4:	0001c840 	call	10001c84 <__udivsi3>
1000e3b8:	100b883a 	mov	r5,r2
1000e3bc:	9009883a 	mov	r4,r18
1000e3c0:	1021883a 	mov	r16,r2
1000e3c4:	0001d400 	call	10001d40 <__mulsi3>
1000e3c8:	a00b883a 	mov	r5,r20
1000e3cc:	e009883a 	mov	r4,fp
1000e3d0:	d8800415 	stw	r2,16(sp)
1000e3d4:	0001ce80 	call	10001ce8 <__umodsi3>
1000e3d8:	1004943a 	slli	r2,r2,16
1000e3dc:	da000417 	ldw	r8,16(sp)
1000e3e0:	bdffffcc 	andi	r23,r23,65535
1000e3e4:	b884b03a 	or	r2,r23,r2
1000e3e8:	d8c00217 	ldw	r3,8(sp)
1000e3ec:	1200062e 	bgeu	r2,r8,1000e408 <__divdf3+0x424>
1000e3f0:	1585883a 	add	r2,r2,r22
1000e3f4:	813fffc4 	addi	r4,r16,-1
1000e3f8:	15810236 	bltu	r2,r22,1000e804 <__divdf3+0x820>
1000e3fc:	1201012e 	bgeu	r2,r8,1000e804 <__divdf3+0x820>
1000e400:	843fff84 	addi	r16,r16,-2
1000e404:	1585883a 	add	r2,r2,r22
1000e408:	8822943a 	slli	r17,r17,16
1000e40c:	d9800017 	ldw	r6,0(sp)
1000e410:	1211c83a 	sub	r8,r2,r8
1000e414:	8c22b03a 	or	r17,r17,r16
1000e418:	373fffcc 	andi	fp,r6,65535
1000e41c:	8abfffcc 	andi	r10,r17,65535
1000e420:	8820d43a 	srli	r16,r17,16
1000e424:	5009883a 	mov	r4,r10
1000e428:	e00b883a 	mov	r5,fp
1000e42c:	302ed43a 	srli	r23,r6,16
1000e430:	d8c00215 	stw	r3,8(sp)
1000e434:	da000415 	stw	r8,16(sp)
1000e438:	da800115 	stw	r10,4(sp)
1000e43c:	0001d400 	call	10001d40 <__mulsi3>
1000e440:	800b883a 	mov	r5,r16
1000e444:	e009883a 	mov	r4,fp
1000e448:	d8800515 	stw	r2,20(sp)
1000e44c:	0001d400 	call	10001d40 <__mulsi3>
1000e450:	8009883a 	mov	r4,r16
1000e454:	b80b883a 	mov	r5,r23
1000e458:	d8800315 	stw	r2,12(sp)
1000e45c:	0001d400 	call	10001d40 <__mulsi3>
1000e460:	da800117 	ldw	r10,4(sp)
1000e464:	b80b883a 	mov	r5,r23
1000e468:	1021883a 	mov	r16,r2
1000e46c:	5009883a 	mov	r4,r10
1000e470:	0001d400 	call	10001d40 <__mulsi3>
1000e474:	d9c00517 	ldw	r7,20(sp)
1000e478:	da400317 	ldw	r9,12(sp)
1000e47c:	d8c00217 	ldw	r3,8(sp)
1000e480:	3808d43a 	srli	r4,r7,16
1000e484:	1245883a 	add	r2,r2,r9
1000e488:	da000417 	ldw	r8,16(sp)
1000e48c:	2085883a 	add	r2,r4,r2
1000e490:	1240022e 	bgeu	r2,r9,1000e49c <__divdf3+0x4b8>
1000e494:	01000074 	movhi	r4,1
1000e498:	8121883a 	add	r16,r16,r4
1000e49c:	1008d43a 	srli	r4,r2,16
1000e4a0:	1004943a 	slli	r2,r2,16
1000e4a4:	39ffffcc 	andi	r7,r7,65535
1000e4a8:	2409883a 	add	r4,r4,r16
1000e4ac:	11c5883a 	add	r2,r2,r7
1000e4b0:	4100bb36 	bltu	r8,r4,1000e7a0 <__divdf3+0x7bc>
1000e4b4:	4100d726 	beq	r8,r4,1000e814 <__divdf3+0x830>
1000e4b8:	4109c83a 	sub	r4,r8,r4
1000e4bc:	a8a1c83a 	sub	r16,r21,r2
1000e4c0:	ac2b803a 	cmpltu	r21,r21,r16
1000e4c4:	256bc83a 	sub	r21,r4,r21
1000e4c8:	b540d926 	beq	r22,r21,1000e830 <__divdf3+0x84c>
1000e4cc:	a00b883a 	mov	r5,r20
1000e4d0:	a809883a 	mov	r4,r21
1000e4d4:	d8c00215 	stw	r3,8(sp)
1000e4d8:	0001c840 	call	10001c84 <__udivsi3>
1000e4dc:	100b883a 	mov	r5,r2
1000e4e0:	9009883a 	mov	r4,r18
1000e4e4:	d8800515 	stw	r2,20(sp)
1000e4e8:	0001d400 	call	10001d40 <__mulsi3>
1000e4ec:	a809883a 	mov	r4,r21
1000e4f0:	a00b883a 	mov	r5,r20
1000e4f4:	d8800415 	stw	r2,16(sp)
1000e4f8:	0001ce80 	call	10001ce8 <__umodsi3>
1000e4fc:	1004943a 	slli	r2,r2,16
1000e500:	8008d43a 	srli	r4,r16,16
1000e504:	da000417 	ldw	r8,16(sp)
1000e508:	d8c00217 	ldw	r3,8(sp)
1000e50c:	2084b03a 	or	r2,r4,r2
1000e510:	d9c00517 	ldw	r7,20(sp)
1000e514:	1200062e 	bgeu	r2,r8,1000e530 <__divdf3+0x54c>
1000e518:	1585883a 	add	r2,r2,r22
1000e51c:	393fffc4 	addi	r4,r7,-1
1000e520:	1580c536 	bltu	r2,r22,1000e838 <__divdf3+0x854>
1000e524:	1200c42e 	bgeu	r2,r8,1000e838 <__divdf3+0x854>
1000e528:	39ffff84 	addi	r7,r7,-2
1000e52c:	1585883a 	add	r2,r2,r22
1000e530:	122bc83a 	sub	r21,r2,r8
1000e534:	a00b883a 	mov	r5,r20
1000e538:	a809883a 	mov	r4,r21
1000e53c:	d8c00215 	stw	r3,8(sp)
1000e540:	d9c00515 	stw	r7,20(sp)
1000e544:	0001c840 	call	10001c84 <__udivsi3>
1000e548:	9009883a 	mov	r4,r18
1000e54c:	100b883a 	mov	r5,r2
1000e550:	d8800415 	stw	r2,16(sp)
1000e554:	0001d400 	call	10001d40 <__mulsi3>
1000e558:	a809883a 	mov	r4,r21
1000e55c:	a00b883a 	mov	r5,r20
1000e560:	1025883a 	mov	r18,r2
1000e564:	0001ce80 	call	10001ce8 <__umodsi3>
1000e568:	1004943a 	slli	r2,r2,16
1000e56c:	813fffcc 	andi	r4,r16,65535
1000e570:	d8c00217 	ldw	r3,8(sp)
1000e574:	20a0b03a 	or	r16,r4,r2
1000e578:	d9c00517 	ldw	r7,20(sp)
1000e57c:	da000417 	ldw	r8,16(sp)
1000e580:	8480062e 	bgeu	r16,r18,1000e59c <__divdf3+0x5b8>
1000e584:	85a1883a 	add	r16,r16,r22
1000e588:	40bfffc4 	addi	r2,r8,-1
1000e58c:	8580ac36 	bltu	r16,r22,1000e840 <__divdf3+0x85c>
1000e590:	8480ab2e 	bgeu	r16,r18,1000e840 <__divdf3+0x85c>
1000e594:	423fff84 	addi	r8,r8,-2
1000e598:	85a1883a 	add	r16,r16,r22
1000e59c:	3804943a 	slli	r2,r7,16
1000e5a0:	84a1c83a 	sub	r16,r16,r18
1000e5a4:	e009883a 	mov	r4,fp
1000e5a8:	1228b03a 	or	r20,r2,r8
1000e5ac:	a1ffffcc 	andi	r7,r20,65535
1000e5b0:	a024d43a 	srli	r18,r20,16
1000e5b4:	380b883a 	mov	r5,r7
1000e5b8:	d8c00215 	stw	r3,8(sp)
1000e5bc:	d9c00515 	stw	r7,20(sp)
1000e5c0:	0001d400 	call	10001d40 <__mulsi3>
1000e5c4:	900b883a 	mov	r5,r18
1000e5c8:	e009883a 	mov	r4,fp
1000e5cc:	102b883a 	mov	r21,r2
1000e5d0:	0001d400 	call	10001d40 <__mulsi3>
1000e5d4:	900b883a 	mov	r5,r18
1000e5d8:	b809883a 	mov	r4,r23
1000e5dc:	1039883a 	mov	fp,r2
1000e5e0:	0001d400 	call	10001d40 <__mulsi3>
1000e5e4:	d9c00517 	ldw	r7,20(sp)
1000e5e8:	b80b883a 	mov	r5,r23
1000e5ec:	1025883a 	mov	r18,r2
1000e5f0:	3809883a 	mov	r4,r7
1000e5f4:	0001d400 	call	10001d40 <__mulsi3>
1000e5f8:	a808d43a 	srli	r4,r21,16
1000e5fc:	1705883a 	add	r2,r2,fp
1000e600:	d8c00217 	ldw	r3,8(sp)
1000e604:	2085883a 	add	r2,r4,r2
1000e608:	1700022e 	bgeu	r2,fp,1000e614 <__divdf3+0x630>
1000e60c:	01000074 	movhi	r4,1
1000e610:	9125883a 	add	r18,r18,r4
1000e614:	1008d43a 	srli	r4,r2,16
1000e618:	1004943a 	slli	r2,r2,16
1000e61c:	ad7fffcc 	andi	r21,r21,65535
1000e620:	2489883a 	add	r4,r4,r18
1000e624:	1545883a 	add	r2,r2,r21
1000e628:	81003836 	bltu	r16,r4,1000e70c <__divdf3+0x728>
1000e62c:	81003626 	beq	r16,r4,1000e708 <__divdf3+0x724>
1000e630:	a5000054 	ori	r20,r20,1
1000e634:	1880ffc4 	addi	r2,r3,1023
1000e638:	00bf2e0e 	bge	zero,r2,1000e2f4 <__alt_data_end+0xf800e2f4>
1000e63c:	a10001cc 	andi	r4,r20,7
1000e640:	20000726 	beq	r4,zero,1000e660 <__divdf3+0x67c>
1000e644:	a10003cc 	andi	r4,r20,15
1000e648:	01400104 	movi	r5,4
1000e64c:	21400426 	beq	r4,r5,1000e660 <__divdf3+0x67c>
1000e650:	a149883a 	add	r4,r20,r5
1000e654:	2529803a 	cmpltu	r20,r4,r20
1000e658:	8d23883a 	add	r17,r17,r20
1000e65c:	2029883a 	mov	r20,r4
1000e660:	8900402c 	andhi	r4,r17,256
1000e664:	20000426 	beq	r4,zero,1000e678 <__divdf3+0x694>
1000e668:	18810004 	addi	r2,r3,1024
1000e66c:	00ffc034 	movhi	r3,65280
1000e670:	18ffffc4 	addi	r3,r3,-1
1000e674:	88e2703a 	and	r17,r17,r3
1000e678:	00c1ff84 	movi	r3,2046
1000e67c:	18beb416 	blt	r3,r2,1000e150 <__alt_data_end+0xf800e150>
1000e680:	a028d0fa 	srli	r20,r20,3
1000e684:	882a977a 	slli	r21,r17,29
1000e688:	8820927a 	slli	r16,r17,9
1000e68c:	1081ffcc 	andi	r2,r2,2047
1000e690:	ad2ab03a 	or	r21,r21,r20
1000e694:	8020d33a 	srli	r16,r16,12
1000e698:	9900004c 	andi	r4,r19,1
1000e69c:	003eb006 	br	1000e160 <__alt_data_end+0xf800e160>
1000e6a0:	8080022c 	andhi	r2,r16,8
1000e6a4:	10001226 	beq	r2,zero,1000e6f0 <__divdf3+0x70c>
1000e6a8:	8880022c 	andhi	r2,r17,8
1000e6ac:	1000101e 	bne	r2,zero,1000e6f0 <__divdf3+0x70c>
1000e6b0:	00800434 	movhi	r2,16
1000e6b4:	8c000234 	orhi	r16,r17,8
1000e6b8:	10bfffc4 	addi	r2,r2,-1
1000e6bc:	b809883a 	mov	r4,r23
1000e6c0:	80a0703a 	and	r16,r16,r2
1000e6c4:	a02b883a 	mov	r21,r20
1000e6c8:	003f0806 	br	1000e2ec <__alt_data_end+0xf800e2ec>
1000e6cc:	008000c4 	movi	r2,3
1000e6d0:	3880b126 	beq	r7,r2,1000e998 <__divdf3+0x9b4>
1000e6d4:	00800044 	movi	r2,1
1000e6d8:	38805b1e 	bne	r7,r2,1000e848 <__divdf3+0x864>
1000e6dc:	e009883a 	mov	r4,fp
1000e6e0:	0005883a 	mov	r2,zero
1000e6e4:	0021883a 	mov	r16,zero
1000e6e8:	002b883a 	mov	r21,zero
1000e6ec:	003e9c06 	br	1000e160 <__alt_data_end+0xf800e160>
1000e6f0:	00800434 	movhi	r2,16
1000e6f4:	84000234 	orhi	r16,r16,8
1000e6f8:	10bfffc4 	addi	r2,r2,-1
1000e6fc:	b009883a 	mov	r4,r22
1000e700:	80a0703a 	and	r16,r16,r2
1000e704:	003ef906 	br	1000e2ec <__alt_data_end+0xf800e2ec>
1000e708:	103fca26 	beq	r2,zero,1000e634 <__alt_data_end+0xf800e634>
1000e70c:	b421883a 	add	r16,r22,r16
1000e710:	a17fffc4 	addi	r5,r20,-1
1000e714:	8580422e 	bgeu	r16,r22,1000e820 <__divdf3+0x83c>
1000e718:	2829883a 	mov	r20,r5
1000e71c:	813fc41e 	bne	r16,r4,1000e630 <__alt_data_end+0xf800e630>
1000e720:	d9800017 	ldw	r6,0(sp)
1000e724:	30bfc21e 	bne	r6,r2,1000e630 <__alt_data_end+0xf800e630>
1000e728:	003fc206 	br	1000e634 <__alt_data_end+0xf800e634>
1000e72c:	143ff604 	addi	r16,r2,-40
1000e730:	8c20983a 	sll	r16,r17,r16
1000e734:	002b883a 	mov	r21,zero
1000e738:	003eb406 	br	1000e20c <__alt_data_end+0xf800e20c>
1000e73c:	d9800215 	stw	r6,8(sp)
1000e740:	d9c00515 	stw	r7,20(sp)
1000e744:	da000415 	stw	r8,16(sp)
1000e748:	000ff780 	call	1000ff78 <__clzsi2>
1000e74c:	10800804 	addi	r2,r2,32
1000e750:	da000417 	ldw	r8,16(sp)
1000e754:	d9c00517 	ldw	r7,20(sp)
1000e758:	d9800217 	ldw	r6,8(sp)
1000e75c:	003ea106 	br	1000e1e4 <__alt_data_end+0xf800e1e4>
1000e760:	147ff604 	addi	r17,r2,-40
1000e764:	3462983a 	sll	r17,r6,r17
1000e768:	0029883a 	mov	r20,zero
1000e76c:	003ec906 	br	1000e294 <__alt_data_end+0xf800e294>
1000e770:	3009883a 	mov	r4,r6
1000e774:	d9400115 	stw	r5,4(sp)
1000e778:	d9800215 	stw	r6,8(sp)
1000e77c:	da000415 	stw	r8,16(sp)
1000e780:	da400315 	stw	r9,12(sp)
1000e784:	000ff780 	call	1000ff78 <__clzsi2>
1000e788:	10800804 	addi	r2,r2,32
1000e78c:	da400317 	ldw	r9,12(sp)
1000e790:	da000417 	ldw	r8,16(sp)
1000e794:	d9800217 	ldw	r6,8(sp)
1000e798:	d9400117 	ldw	r5,4(sp)
1000e79c:	003eb306 	br	1000e26c <__alt_data_end+0xf800e26c>
1000e7a0:	d9800017 	ldw	r6,0(sp)
1000e7a4:	a9ab883a 	add	r21,r21,r6
1000e7a8:	a98b803a 	cmpltu	r5,r21,r6
1000e7ac:	2d8b883a 	add	r5,r5,r22
1000e7b0:	2a11883a 	add	r8,r5,r8
1000e7b4:	897fffc4 	addi	r5,r17,-1
1000e7b8:	b2000c2e 	bgeu	r22,r8,1000e7ec <__divdf3+0x808>
1000e7bc:	41003f36 	bltu	r8,r4,1000e8bc <__divdf3+0x8d8>
1000e7c0:	22006c26 	beq	r4,r8,1000e974 <__divdf3+0x990>
1000e7c4:	4109c83a 	sub	r4,r8,r4
1000e7c8:	2823883a 	mov	r17,r5
1000e7cc:	003f3b06 	br	1000e4bc <__alt_data_end+0xf800e4bc>
1000e7d0:	ad3ed336 	bltu	r21,r20,1000e320 <__alt_data_end+0xf800e320>
1000e7d4:	a804d07a 	srli	r2,r21,1
1000e7d8:	802e97fa 	slli	r23,r16,31
1000e7dc:	a82a97fa 	slli	r21,r21,31
1000e7e0:	8020d07a 	srli	r16,r16,1
1000e7e4:	b8aeb03a 	or	r23,r23,r2
1000e7e8:	003ed006 	br	1000e32c <__alt_data_end+0xf800e32c>
1000e7ec:	b23ff51e 	bne	r22,r8,1000e7c4 <__alt_data_end+0xf800e7c4>
1000e7f0:	d9800017 	ldw	r6,0(sp)
1000e7f4:	a9bff12e 	bgeu	r21,r6,1000e7bc <__alt_data_end+0xf800e7bc>
1000e7f8:	b109c83a 	sub	r4,r22,r4
1000e7fc:	2823883a 	mov	r17,r5
1000e800:	003f2e06 	br	1000e4bc <__alt_data_end+0xf800e4bc>
1000e804:	2021883a 	mov	r16,r4
1000e808:	003eff06 	br	1000e408 <__alt_data_end+0xf800e408>
1000e80c:	2023883a 	mov	r17,r4
1000e810:	003ee406 	br	1000e3a4 <__alt_data_end+0xf800e3a4>
1000e814:	a8bfe236 	bltu	r21,r2,1000e7a0 <__alt_data_end+0xf800e7a0>
1000e818:	0009883a 	mov	r4,zero
1000e81c:	003f2706 	br	1000e4bc <__alt_data_end+0xf800e4bc>
1000e820:	81002d36 	bltu	r16,r4,1000e8d8 <__divdf3+0x8f4>
1000e824:	24005626 	beq	r4,r16,1000e980 <__divdf3+0x99c>
1000e828:	2829883a 	mov	r20,r5
1000e82c:	003f8006 	br	1000e630 <__alt_data_end+0xf800e630>
1000e830:	053fffc4 	movi	r20,-1
1000e834:	003f7f06 	br	1000e634 <__alt_data_end+0xf800e634>
1000e838:	200f883a 	mov	r7,r4
1000e83c:	003f3c06 	br	1000e530 <__alt_data_end+0xf800e530>
1000e840:	1011883a 	mov	r8,r2
1000e844:	003f5506 	br	1000e59c <__alt_data_end+0xf800e59c>
1000e848:	e027883a 	mov	r19,fp
1000e84c:	003f7906 	br	1000e634 <__alt_data_end+0xf800e634>
1000e850:	010007c4 	movi	r4,31
1000e854:	20c02816 	blt	r4,r3,1000e8f8 <__divdf3+0x914>
1000e858:	00800804 	movi	r2,32
1000e85c:	10c5c83a 	sub	r2,r2,r3
1000e860:	888a983a 	sll	r5,r17,r2
1000e864:	a0c8d83a 	srl	r4,r20,r3
1000e868:	a084983a 	sll	r2,r20,r2
1000e86c:	88e2d83a 	srl	r17,r17,r3
1000e870:	2906b03a 	or	r3,r5,r4
1000e874:	1004c03a 	cmpne	r2,r2,zero
1000e878:	1886b03a 	or	r3,r3,r2
1000e87c:	188001cc 	andi	r2,r3,7
1000e880:	10000726 	beq	r2,zero,1000e8a0 <__divdf3+0x8bc>
1000e884:	188003cc 	andi	r2,r3,15
1000e888:	01000104 	movi	r4,4
1000e88c:	11000426 	beq	r2,r4,1000e8a0 <__divdf3+0x8bc>
1000e890:	1805883a 	mov	r2,r3
1000e894:	10c00104 	addi	r3,r2,4
1000e898:	1885803a 	cmpltu	r2,r3,r2
1000e89c:	88a3883a 	add	r17,r17,r2
1000e8a0:	8880202c 	andhi	r2,r17,128
1000e8a4:	10002926 	beq	r2,zero,1000e94c <__divdf3+0x968>
1000e8a8:	9900004c 	andi	r4,r19,1
1000e8ac:	00800044 	movi	r2,1
1000e8b0:	0021883a 	mov	r16,zero
1000e8b4:	002b883a 	mov	r21,zero
1000e8b8:	003e2906 	br	1000e160 <__alt_data_end+0xf800e160>
1000e8bc:	d9800017 	ldw	r6,0(sp)
1000e8c0:	8c7fff84 	addi	r17,r17,-2
1000e8c4:	a9ab883a 	add	r21,r21,r6
1000e8c8:	a98b803a 	cmpltu	r5,r21,r6
1000e8cc:	2d8b883a 	add	r5,r5,r22
1000e8d0:	2a11883a 	add	r8,r5,r8
1000e8d4:	003ef806 	br	1000e4b8 <__alt_data_end+0xf800e4b8>
1000e8d8:	d9800017 	ldw	r6,0(sp)
1000e8dc:	318f883a 	add	r7,r6,r6
1000e8e0:	398b803a 	cmpltu	r5,r7,r6
1000e8e4:	2d8d883a 	add	r6,r5,r22
1000e8e8:	81a1883a 	add	r16,r16,r6
1000e8ec:	a17fff84 	addi	r5,r20,-2
1000e8f0:	d9c00015 	stw	r7,0(sp)
1000e8f4:	003f8806 	br	1000e718 <__alt_data_end+0xf800e718>
1000e8f8:	013ff844 	movi	r4,-31
1000e8fc:	2085c83a 	sub	r2,r4,r2
1000e900:	8888d83a 	srl	r4,r17,r2
1000e904:	00800804 	movi	r2,32
1000e908:	18802126 	beq	r3,r2,1000e990 <__divdf3+0x9ac>
1000e90c:	04001004 	movi	r16,64
1000e910:	80c7c83a 	sub	r3,r16,r3
1000e914:	88e0983a 	sll	r16,r17,r3
1000e918:	8504b03a 	or	r2,r16,r20
1000e91c:	1004c03a 	cmpne	r2,r2,zero
1000e920:	2084b03a 	or	r2,r4,r2
1000e924:	144001cc 	andi	r17,r2,7
1000e928:	88000d1e 	bne	r17,zero,1000e960 <__divdf3+0x97c>
1000e92c:	0021883a 	mov	r16,zero
1000e930:	102ad0fa 	srli	r21,r2,3
1000e934:	9900004c 	andi	r4,r19,1
1000e938:	0005883a 	mov	r2,zero
1000e93c:	ac6ab03a 	or	r21,r21,r17
1000e940:	003e0706 	br	1000e160 <__alt_data_end+0xf800e160>
1000e944:	1007883a 	mov	r3,r2
1000e948:	0023883a 	mov	r17,zero
1000e94c:	8820927a 	slli	r16,r17,9
1000e950:	1805883a 	mov	r2,r3
1000e954:	8822977a 	slli	r17,r17,29
1000e958:	8020d33a 	srli	r16,r16,12
1000e95c:	003ff406 	br	1000e930 <__alt_data_end+0xf800e930>
1000e960:	10c003cc 	andi	r3,r2,15
1000e964:	01000104 	movi	r4,4
1000e968:	193ff626 	beq	r3,r4,1000e944 <__alt_data_end+0xf800e944>
1000e96c:	0023883a 	mov	r17,zero
1000e970:	003fc806 	br	1000e894 <__alt_data_end+0xf800e894>
1000e974:	a8bfd136 	bltu	r21,r2,1000e8bc <__alt_data_end+0xf800e8bc>
1000e978:	2823883a 	mov	r17,r5
1000e97c:	003fa606 	br	1000e818 <__alt_data_end+0xf800e818>
1000e980:	d9800017 	ldw	r6,0(sp)
1000e984:	30bfd436 	bltu	r6,r2,1000e8d8 <__alt_data_end+0xf800e8d8>
1000e988:	2829883a 	mov	r20,r5
1000e98c:	003f6406 	br	1000e720 <__alt_data_end+0xf800e720>
1000e990:	0021883a 	mov	r16,zero
1000e994:	003fe006 	br	1000e918 <__alt_data_end+0xf800e918>
1000e998:	00800434 	movhi	r2,16
1000e99c:	8c000234 	orhi	r16,r17,8
1000e9a0:	10bfffc4 	addi	r2,r2,-1
1000e9a4:	e009883a 	mov	r4,fp
1000e9a8:	80a0703a 	and	r16,r16,r2
1000e9ac:	a02b883a 	mov	r21,r20
1000e9b0:	003e4e06 	br	1000e2ec <__alt_data_end+0xf800e2ec>

1000e9b4 <__eqdf2>:
1000e9b4:	2804d53a 	srli	r2,r5,20
1000e9b8:	3806d53a 	srli	r3,r7,20
1000e9bc:	02000434 	movhi	r8,16
1000e9c0:	423fffc4 	addi	r8,r8,-1
1000e9c4:	1081ffcc 	andi	r2,r2,2047
1000e9c8:	0281ffc4 	movi	r10,2047
1000e9cc:	2a12703a 	and	r9,r5,r8
1000e9d0:	18c1ffcc 	andi	r3,r3,2047
1000e9d4:	3a10703a 	and	r8,r7,r8
1000e9d8:	280ad7fa 	srli	r5,r5,31
1000e9dc:	380ed7fa 	srli	r7,r7,31
1000e9e0:	12801026 	beq	r2,r10,1000ea24 <__eqdf2+0x70>
1000e9e4:	0281ffc4 	movi	r10,2047
1000e9e8:	1a800a26 	beq	r3,r10,1000ea14 <__eqdf2+0x60>
1000e9ec:	10c00226 	beq	r2,r3,1000e9f8 <__eqdf2+0x44>
1000e9f0:	00800044 	movi	r2,1
1000e9f4:	f800283a 	ret
1000e9f8:	4a3ffd1e 	bne	r9,r8,1000e9f0 <__alt_data_end+0xf800e9f0>
1000e9fc:	21bffc1e 	bne	r4,r6,1000e9f0 <__alt_data_end+0xf800e9f0>
1000ea00:	29c00c26 	beq	r5,r7,1000ea34 <__eqdf2+0x80>
1000ea04:	103ffa1e 	bne	r2,zero,1000e9f0 <__alt_data_end+0xf800e9f0>
1000ea08:	2244b03a 	or	r2,r4,r9
1000ea0c:	1004c03a 	cmpne	r2,r2,zero
1000ea10:	f800283a 	ret
1000ea14:	3214b03a 	or	r10,r6,r8
1000ea18:	503ff426 	beq	r10,zero,1000e9ec <__alt_data_end+0xf800e9ec>
1000ea1c:	00800044 	movi	r2,1
1000ea20:	f800283a 	ret
1000ea24:	2254b03a 	or	r10,r4,r9
1000ea28:	503fee26 	beq	r10,zero,1000e9e4 <__alt_data_end+0xf800e9e4>
1000ea2c:	00800044 	movi	r2,1
1000ea30:	f800283a 	ret
1000ea34:	0005883a 	mov	r2,zero
1000ea38:	f800283a 	ret

1000ea3c <__gedf2>:
1000ea3c:	2804d53a 	srli	r2,r5,20
1000ea40:	3806d53a 	srli	r3,r7,20
1000ea44:	02000434 	movhi	r8,16
1000ea48:	423fffc4 	addi	r8,r8,-1
1000ea4c:	1081ffcc 	andi	r2,r2,2047
1000ea50:	0241ffc4 	movi	r9,2047
1000ea54:	2a14703a 	and	r10,r5,r8
1000ea58:	18c1ffcc 	andi	r3,r3,2047
1000ea5c:	3a10703a 	and	r8,r7,r8
1000ea60:	280ad7fa 	srli	r5,r5,31
1000ea64:	380ed7fa 	srli	r7,r7,31
1000ea68:	12401d26 	beq	r2,r9,1000eae0 <__gedf2+0xa4>
1000ea6c:	0241ffc4 	movi	r9,2047
1000ea70:	1a401226 	beq	r3,r9,1000eabc <__gedf2+0x80>
1000ea74:	1000081e 	bne	r2,zero,1000ea98 <__gedf2+0x5c>
1000ea78:	2296b03a 	or	r11,r4,r10
1000ea7c:	5813003a 	cmpeq	r9,r11,zero
1000ea80:	1800091e 	bne	r3,zero,1000eaa8 <__gedf2+0x6c>
1000ea84:	3218b03a 	or	r12,r6,r8
1000ea88:	6000071e 	bne	r12,zero,1000eaa8 <__gedf2+0x6c>
1000ea8c:	0005883a 	mov	r2,zero
1000ea90:	5800101e 	bne	r11,zero,1000ead4 <__gedf2+0x98>
1000ea94:	f800283a 	ret
1000ea98:	18000c1e 	bne	r3,zero,1000eacc <__gedf2+0x90>
1000ea9c:	3212b03a 	or	r9,r6,r8
1000eaa0:	48000c26 	beq	r9,zero,1000ead4 <__gedf2+0x98>
1000eaa4:	0013883a 	mov	r9,zero
1000eaa8:	39c03fcc 	andi	r7,r7,255
1000eaac:	48000826 	beq	r9,zero,1000ead0 <__gedf2+0x94>
1000eab0:	38000926 	beq	r7,zero,1000ead8 <__gedf2+0x9c>
1000eab4:	00800044 	movi	r2,1
1000eab8:	f800283a 	ret
1000eabc:	3212b03a 	or	r9,r6,r8
1000eac0:	483fec26 	beq	r9,zero,1000ea74 <__alt_data_end+0xf800ea74>
1000eac4:	00bfff84 	movi	r2,-2
1000eac8:	f800283a 	ret
1000eacc:	39c03fcc 	andi	r7,r7,255
1000ead0:	29c00626 	beq	r5,r7,1000eaec <__gedf2+0xb0>
1000ead4:	283ff726 	beq	r5,zero,1000eab4 <__alt_data_end+0xf800eab4>
1000ead8:	00bfffc4 	movi	r2,-1
1000eadc:	f800283a 	ret
1000eae0:	2292b03a 	or	r9,r4,r10
1000eae4:	483fe126 	beq	r9,zero,1000ea6c <__alt_data_end+0xf800ea6c>
1000eae8:	003ff606 	br	1000eac4 <__alt_data_end+0xf800eac4>
1000eaec:	18bff916 	blt	r3,r2,1000ead4 <__alt_data_end+0xf800ead4>
1000eaf0:	10c00316 	blt	r2,r3,1000eb00 <__gedf2+0xc4>
1000eaf4:	42bff736 	bltu	r8,r10,1000ead4 <__alt_data_end+0xf800ead4>
1000eaf8:	52000326 	beq	r10,r8,1000eb08 <__gedf2+0xcc>
1000eafc:	5200042e 	bgeu	r10,r8,1000eb10 <__gedf2+0xd4>
1000eb00:	283fec1e 	bne	r5,zero,1000eab4 <__alt_data_end+0xf800eab4>
1000eb04:	003ff406 	br	1000ead8 <__alt_data_end+0xf800ead8>
1000eb08:	313ff236 	bltu	r6,r4,1000ead4 <__alt_data_end+0xf800ead4>
1000eb0c:	21bffc36 	bltu	r4,r6,1000eb00 <__alt_data_end+0xf800eb00>
1000eb10:	0005883a 	mov	r2,zero
1000eb14:	f800283a 	ret

1000eb18 <__ledf2>:
1000eb18:	2804d53a 	srli	r2,r5,20
1000eb1c:	3810d53a 	srli	r8,r7,20
1000eb20:	00c00434 	movhi	r3,16
1000eb24:	18ffffc4 	addi	r3,r3,-1
1000eb28:	1081ffcc 	andi	r2,r2,2047
1000eb2c:	0241ffc4 	movi	r9,2047
1000eb30:	28d4703a 	and	r10,r5,r3
1000eb34:	4201ffcc 	andi	r8,r8,2047
1000eb38:	38c6703a 	and	r3,r7,r3
1000eb3c:	280ad7fa 	srli	r5,r5,31
1000eb40:	380ed7fa 	srli	r7,r7,31
1000eb44:	12401f26 	beq	r2,r9,1000ebc4 <__ledf2+0xac>
1000eb48:	0241ffc4 	movi	r9,2047
1000eb4c:	42401426 	beq	r8,r9,1000eba0 <__ledf2+0x88>
1000eb50:	1000091e 	bne	r2,zero,1000eb78 <__ledf2+0x60>
1000eb54:	2296b03a 	or	r11,r4,r10
1000eb58:	5813003a 	cmpeq	r9,r11,zero
1000eb5c:	29403fcc 	andi	r5,r5,255
1000eb60:	40000a1e 	bne	r8,zero,1000eb8c <__ledf2+0x74>
1000eb64:	30d8b03a 	or	r12,r6,r3
1000eb68:	6000081e 	bne	r12,zero,1000eb8c <__ledf2+0x74>
1000eb6c:	0005883a 	mov	r2,zero
1000eb70:	5800111e 	bne	r11,zero,1000ebb8 <__ledf2+0xa0>
1000eb74:	f800283a 	ret
1000eb78:	29403fcc 	andi	r5,r5,255
1000eb7c:	40000c1e 	bne	r8,zero,1000ebb0 <__ledf2+0x98>
1000eb80:	30d2b03a 	or	r9,r6,r3
1000eb84:	48000c26 	beq	r9,zero,1000ebb8 <__ledf2+0xa0>
1000eb88:	0013883a 	mov	r9,zero
1000eb8c:	39c03fcc 	andi	r7,r7,255
1000eb90:	48000826 	beq	r9,zero,1000ebb4 <__ledf2+0x9c>
1000eb94:	38001126 	beq	r7,zero,1000ebdc <__ledf2+0xc4>
1000eb98:	00800044 	movi	r2,1
1000eb9c:	f800283a 	ret
1000eba0:	30d2b03a 	or	r9,r6,r3
1000eba4:	483fea26 	beq	r9,zero,1000eb50 <__alt_data_end+0xf800eb50>
1000eba8:	00800084 	movi	r2,2
1000ebac:	f800283a 	ret
1000ebb0:	39c03fcc 	andi	r7,r7,255
1000ebb4:	39400726 	beq	r7,r5,1000ebd4 <__ledf2+0xbc>
1000ebb8:	2800081e 	bne	r5,zero,1000ebdc <__ledf2+0xc4>
1000ebbc:	00800044 	movi	r2,1
1000ebc0:	f800283a 	ret
1000ebc4:	2292b03a 	or	r9,r4,r10
1000ebc8:	483fdf26 	beq	r9,zero,1000eb48 <__alt_data_end+0xf800eb48>
1000ebcc:	00800084 	movi	r2,2
1000ebd0:	f800283a 	ret
1000ebd4:	4080030e 	bge	r8,r2,1000ebe4 <__ledf2+0xcc>
1000ebd8:	383fef26 	beq	r7,zero,1000eb98 <__alt_data_end+0xf800eb98>
1000ebdc:	00bfffc4 	movi	r2,-1
1000ebe0:	f800283a 	ret
1000ebe4:	123feb16 	blt	r2,r8,1000eb94 <__alt_data_end+0xf800eb94>
1000ebe8:	1abff336 	bltu	r3,r10,1000ebb8 <__alt_data_end+0xf800ebb8>
1000ebec:	50c00326 	beq	r10,r3,1000ebfc <__ledf2+0xe4>
1000ebf0:	50c0042e 	bgeu	r10,r3,1000ec04 <__ledf2+0xec>
1000ebf4:	283fe81e 	bne	r5,zero,1000eb98 <__alt_data_end+0xf800eb98>
1000ebf8:	003ff806 	br	1000ebdc <__alt_data_end+0xf800ebdc>
1000ebfc:	313fee36 	bltu	r6,r4,1000ebb8 <__alt_data_end+0xf800ebb8>
1000ec00:	21bffc36 	bltu	r4,r6,1000ebf4 <__alt_data_end+0xf800ebf4>
1000ec04:	0005883a 	mov	r2,zero
1000ec08:	f800283a 	ret

1000ec0c <__muldf3>:
1000ec0c:	deffee04 	addi	sp,sp,-72
1000ec10:	dd000c15 	stw	r20,48(sp)
1000ec14:	2828d53a 	srli	r20,r5,20
1000ec18:	ddc00f15 	stw	r23,60(sp)
1000ec1c:	282ed7fa 	srli	r23,r5,31
1000ec20:	dc000815 	stw	r16,32(sp)
1000ec24:	04000434 	movhi	r16,16
1000ec28:	dcc00b15 	stw	r19,44(sp)
1000ec2c:	843fffc4 	addi	r16,r16,-1
1000ec30:	dfc01115 	stw	ra,68(sp)
1000ec34:	df001015 	stw	fp,64(sp)
1000ec38:	dd800e15 	stw	r22,56(sp)
1000ec3c:	dd400d15 	stw	r21,52(sp)
1000ec40:	dc800a15 	stw	r18,40(sp)
1000ec44:	dc400915 	stw	r17,36(sp)
1000ec48:	a501ffcc 	andi	r20,r20,2047
1000ec4c:	2c20703a 	and	r16,r5,r16
1000ec50:	b827883a 	mov	r19,r23
1000ec54:	ba403fcc 	andi	r9,r23,255
1000ec58:	a0006026 	beq	r20,zero,1000eddc <__muldf3+0x1d0>
1000ec5c:	0081ffc4 	movi	r2,2047
1000ec60:	202d883a 	mov	r22,r4
1000ec64:	a0803626 	beq	r20,r2,1000ed40 <__muldf3+0x134>
1000ec68:	84000434 	orhi	r16,r16,16
1000ec6c:	200ad77a 	srli	r5,r4,29
1000ec70:	800490fa 	slli	r2,r16,3
1000ec74:	202c90fa 	slli	r22,r4,3
1000ec78:	a53f0044 	addi	r20,r20,-1023
1000ec7c:	28a0b03a 	or	r16,r5,r2
1000ec80:	002b883a 	mov	r21,zero
1000ec84:	000b883a 	mov	r5,zero
1000ec88:	3804d53a 	srli	r2,r7,20
1000ec8c:	3838d7fa 	srli	fp,r7,31
1000ec90:	04400434 	movhi	r17,16
1000ec94:	8c7fffc4 	addi	r17,r17,-1
1000ec98:	1081ffcc 	andi	r2,r2,2047
1000ec9c:	3025883a 	mov	r18,r6
1000eca0:	3c62703a 	and	r17,r7,r17
1000eca4:	e2803fcc 	andi	r10,fp,255
1000eca8:	10006d26 	beq	r2,zero,1000ee60 <__muldf3+0x254>
1000ecac:	00c1ffc4 	movi	r3,2047
1000ecb0:	10c06526 	beq	r2,r3,1000ee48 <__muldf3+0x23c>
1000ecb4:	8c400434 	orhi	r17,r17,16
1000ecb8:	300ed77a 	srli	r7,r6,29
1000ecbc:	880690fa 	slli	r3,r17,3
1000ecc0:	302490fa 	slli	r18,r6,3
1000ecc4:	10bf0044 	addi	r2,r2,-1023
1000ecc8:	38e2b03a 	or	r17,r7,r3
1000eccc:	000f883a 	mov	r7,zero
1000ecd0:	a087883a 	add	r3,r20,r2
1000ecd4:	010003c4 	movi	r4,15
1000ecd8:	3d44b03a 	or	r2,r7,r21
1000ecdc:	e5ccf03a 	xor	r6,fp,r23
1000ece0:	1a000044 	addi	r8,r3,1
1000ece4:	20809b36 	bltu	r4,r2,1000ef54 <__muldf3+0x348>
1000ece8:	100490ba 	slli	r2,r2,2
1000ecec:	01040074 	movhi	r4,4097
1000ecf0:	213b4004 	addi	r4,r4,-4864
1000ecf4:	1105883a 	add	r2,r2,r4
1000ecf8:	10800017 	ldw	r2,0(r2)
1000ecfc:	1000683a 	jmp	r2
1000ed00:	1000ef54 	ori	zero,r2,957
1000ed04:	1000ed60 	cmpeqi	zero,r2,949
1000ed08:	1000ed60 	cmpeqi	zero,r2,949
1000ed0c:	1000ed5c 	xori	zero,r2,949
1000ed10:	1000ef30 	cmpltui	zero,r2,956
1000ed14:	1000ef30 	cmpltui	zero,r2,956
1000ed18:	1000ef18 	cmpnei	zero,r2,956
1000ed1c:	1000ed5c 	xori	zero,r2,949
1000ed20:	1000ef30 	cmpltui	zero,r2,956
1000ed24:	1000ef18 	cmpnei	zero,r2,956
1000ed28:	1000ef30 	cmpltui	zero,r2,956
1000ed2c:	1000ed5c 	xori	zero,r2,949
1000ed30:	1000ef40 	call	11000ef4 <_gp+0xfe434c>
1000ed34:	1000ef40 	call	11000ef4 <_gp+0xfe434c>
1000ed38:	1000ef40 	call	11000ef4 <_gp+0xfe434c>
1000ed3c:	1000f2a0 	cmpeqi	zero,r2,970
1000ed40:	2404b03a 	or	r2,r4,r16
1000ed44:	1000711e 	bne	r2,zero,1000ef0c <__muldf3+0x300>
1000ed48:	05400204 	movi	r21,8
1000ed4c:	0021883a 	mov	r16,zero
1000ed50:	002d883a 	mov	r22,zero
1000ed54:	01400084 	movi	r5,2
1000ed58:	003fcb06 	br	1000ec88 <__alt_data_end+0xf800ec88>
1000ed5c:	500d883a 	mov	r6,r10
1000ed60:	00800084 	movi	r2,2
1000ed64:	38805926 	beq	r7,r2,1000eecc <__muldf3+0x2c0>
1000ed68:	008000c4 	movi	r2,3
1000ed6c:	3881bb26 	beq	r7,r2,1000f45c <__muldf3+0x850>
1000ed70:	00800044 	movi	r2,1
1000ed74:	3881961e 	bne	r7,r2,1000f3d0 <__muldf3+0x7c4>
1000ed78:	3027883a 	mov	r19,r6
1000ed7c:	0005883a 	mov	r2,zero
1000ed80:	0021883a 	mov	r16,zero
1000ed84:	002d883a 	mov	r22,zero
1000ed88:	1004953a 	slli	r2,r2,20
1000ed8c:	98c03fcc 	andi	r3,r19,255
1000ed90:	04400434 	movhi	r17,16
1000ed94:	8c7fffc4 	addi	r17,r17,-1
1000ed98:	180697fa 	slli	r3,r3,31
1000ed9c:	8460703a 	and	r16,r16,r17
1000eda0:	80a0b03a 	or	r16,r16,r2
1000eda4:	80c6b03a 	or	r3,r16,r3
1000eda8:	b005883a 	mov	r2,r22
1000edac:	dfc01117 	ldw	ra,68(sp)
1000edb0:	df001017 	ldw	fp,64(sp)
1000edb4:	ddc00f17 	ldw	r23,60(sp)
1000edb8:	dd800e17 	ldw	r22,56(sp)
1000edbc:	dd400d17 	ldw	r21,52(sp)
1000edc0:	dd000c17 	ldw	r20,48(sp)
1000edc4:	dcc00b17 	ldw	r19,44(sp)
1000edc8:	dc800a17 	ldw	r18,40(sp)
1000edcc:	dc400917 	ldw	r17,36(sp)
1000edd0:	dc000817 	ldw	r16,32(sp)
1000edd4:	dec01204 	addi	sp,sp,72
1000edd8:	f800283a 	ret
1000eddc:	2404b03a 	or	r2,r4,r16
1000ede0:	202b883a 	mov	r21,r4
1000ede4:	10004426 	beq	r2,zero,1000eef8 <__muldf3+0x2ec>
1000ede8:	80015126 	beq	r16,zero,1000f330 <__muldf3+0x724>
1000edec:	8009883a 	mov	r4,r16
1000edf0:	d9800715 	stw	r6,28(sp)
1000edf4:	d9c00215 	stw	r7,8(sp)
1000edf8:	da400415 	stw	r9,16(sp)
1000edfc:	000ff780 	call	1000ff78 <__clzsi2>
1000ee00:	d9800717 	ldw	r6,28(sp)
1000ee04:	d9c00217 	ldw	r7,8(sp)
1000ee08:	da400417 	ldw	r9,16(sp)
1000ee0c:	113ffd44 	addi	r4,r2,-11
1000ee10:	00c00704 	movi	r3,28
1000ee14:	19014216 	blt	r3,r4,1000f320 <__muldf3+0x714>
1000ee18:	00c00744 	movi	r3,29
1000ee1c:	15bffe04 	addi	r22,r2,-8
1000ee20:	1907c83a 	sub	r3,r3,r4
1000ee24:	85a0983a 	sll	r16,r16,r22
1000ee28:	a8c6d83a 	srl	r3,r21,r3
1000ee2c:	adac983a 	sll	r22,r21,r22
1000ee30:	1c20b03a 	or	r16,r3,r16
1000ee34:	1080fcc4 	addi	r2,r2,1011
1000ee38:	00a9c83a 	sub	r20,zero,r2
1000ee3c:	002b883a 	mov	r21,zero
1000ee40:	000b883a 	mov	r5,zero
1000ee44:	003f9006 	br	1000ec88 <__alt_data_end+0xf800ec88>
1000ee48:	3446b03a 	or	r3,r6,r17
1000ee4c:	1800281e 	bne	r3,zero,1000eef0 <__muldf3+0x2e4>
1000ee50:	0023883a 	mov	r17,zero
1000ee54:	0025883a 	mov	r18,zero
1000ee58:	01c00084 	movi	r7,2
1000ee5c:	003f9c06 	br	1000ecd0 <__alt_data_end+0xf800ecd0>
1000ee60:	3446b03a 	or	r3,r6,r17
1000ee64:	18001e26 	beq	r3,zero,1000eee0 <__muldf3+0x2d4>
1000ee68:	88012126 	beq	r17,zero,1000f2f0 <__muldf3+0x6e4>
1000ee6c:	8809883a 	mov	r4,r17
1000ee70:	d9400215 	stw	r5,8(sp)
1000ee74:	d9800715 	stw	r6,28(sp)
1000ee78:	da400415 	stw	r9,16(sp)
1000ee7c:	da800315 	stw	r10,12(sp)
1000ee80:	000ff780 	call	1000ff78 <__clzsi2>
1000ee84:	d9400217 	ldw	r5,8(sp)
1000ee88:	d9800717 	ldw	r6,28(sp)
1000ee8c:	da400417 	ldw	r9,16(sp)
1000ee90:	da800317 	ldw	r10,12(sp)
1000ee94:	113ffd44 	addi	r4,r2,-11
1000ee98:	00c00704 	movi	r3,28
1000ee9c:	19011016 	blt	r3,r4,1000f2e0 <__muldf3+0x6d4>
1000eea0:	00c00744 	movi	r3,29
1000eea4:	14bffe04 	addi	r18,r2,-8
1000eea8:	1907c83a 	sub	r3,r3,r4
1000eeac:	8ca2983a 	sll	r17,r17,r18
1000eeb0:	30c6d83a 	srl	r3,r6,r3
1000eeb4:	34a4983a 	sll	r18,r6,r18
1000eeb8:	1c62b03a 	or	r17,r3,r17
1000eebc:	1080fcc4 	addi	r2,r2,1011
1000eec0:	0085c83a 	sub	r2,zero,r2
1000eec4:	000f883a 	mov	r7,zero
1000eec8:	003f8106 	br	1000ecd0 <__alt_data_end+0xf800ecd0>
1000eecc:	3027883a 	mov	r19,r6
1000eed0:	0081ffc4 	movi	r2,2047
1000eed4:	0021883a 	mov	r16,zero
1000eed8:	002d883a 	mov	r22,zero
1000eedc:	003faa06 	br	1000ed88 <__alt_data_end+0xf800ed88>
1000eee0:	0023883a 	mov	r17,zero
1000eee4:	0025883a 	mov	r18,zero
1000eee8:	01c00044 	movi	r7,1
1000eeec:	003f7806 	br	1000ecd0 <__alt_data_end+0xf800ecd0>
1000eef0:	01c000c4 	movi	r7,3
1000eef4:	003f7606 	br	1000ecd0 <__alt_data_end+0xf800ecd0>
1000eef8:	05400104 	movi	r21,4
1000eefc:	0021883a 	mov	r16,zero
1000ef00:	002d883a 	mov	r22,zero
1000ef04:	01400044 	movi	r5,1
1000ef08:	003f5f06 	br	1000ec88 <__alt_data_end+0xf800ec88>
1000ef0c:	05400304 	movi	r21,12
1000ef10:	014000c4 	movi	r5,3
1000ef14:	003f5c06 	br	1000ec88 <__alt_data_end+0xf800ec88>
1000ef18:	04000434 	movhi	r16,16
1000ef1c:	0027883a 	mov	r19,zero
1000ef20:	843fffc4 	addi	r16,r16,-1
1000ef24:	05bfffc4 	movi	r22,-1
1000ef28:	0081ffc4 	movi	r2,2047
1000ef2c:	003f9606 	br	1000ed88 <__alt_data_end+0xf800ed88>
1000ef30:	8023883a 	mov	r17,r16
1000ef34:	b025883a 	mov	r18,r22
1000ef38:	280f883a 	mov	r7,r5
1000ef3c:	003f8806 	br	1000ed60 <__alt_data_end+0xf800ed60>
1000ef40:	8023883a 	mov	r17,r16
1000ef44:	b025883a 	mov	r18,r22
1000ef48:	480d883a 	mov	r6,r9
1000ef4c:	280f883a 	mov	r7,r5
1000ef50:	003f8306 	br	1000ed60 <__alt_data_end+0xf800ed60>
1000ef54:	b026d43a 	srli	r19,r22,16
1000ef58:	902ed43a 	srli	r23,r18,16
1000ef5c:	b5bfffcc 	andi	r22,r22,65535
1000ef60:	94bfffcc 	andi	r18,r18,65535
1000ef64:	b00b883a 	mov	r5,r22
1000ef68:	9009883a 	mov	r4,r18
1000ef6c:	d8c00515 	stw	r3,20(sp)
1000ef70:	d9800715 	stw	r6,28(sp)
1000ef74:	da000615 	stw	r8,24(sp)
1000ef78:	0001d400 	call	10001d40 <__mulsi3>
1000ef7c:	980b883a 	mov	r5,r19
1000ef80:	9009883a 	mov	r4,r18
1000ef84:	1029883a 	mov	r20,r2
1000ef88:	0001d400 	call	10001d40 <__mulsi3>
1000ef8c:	b80b883a 	mov	r5,r23
1000ef90:	9809883a 	mov	r4,r19
1000ef94:	102b883a 	mov	r21,r2
1000ef98:	0001d400 	call	10001d40 <__mulsi3>
1000ef9c:	b809883a 	mov	r4,r23
1000efa0:	b00b883a 	mov	r5,r22
1000efa4:	1039883a 	mov	fp,r2
1000efa8:	0001d400 	call	10001d40 <__mulsi3>
1000efac:	a008d43a 	srli	r4,r20,16
1000efb0:	1545883a 	add	r2,r2,r21
1000efb4:	d8c00517 	ldw	r3,20(sp)
1000efb8:	2085883a 	add	r2,r4,r2
1000efbc:	d9800717 	ldw	r6,28(sp)
1000efc0:	da000617 	ldw	r8,24(sp)
1000efc4:	1540022e 	bgeu	r2,r21,1000efd0 <__muldf3+0x3c4>
1000efc8:	01000074 	movhi	r4,1
1000efcc:	e139883a 	add	fp,fp,r4
1000efd0:	100e943a 	slli	r7,r2,16
1000efd4:	1004d43a 	srli	r2,r2,16
1000efd8:	882ad43a 	srli	r21,r17,16
1000efdc:	a53fffcc 	andi	r20,r20,65535
1000efe0:	8c7fffcc 	andi	r17,r17,65535
1000efe4:	3d29883a 	add	r20,r7,r20
1000efe8:	b00b883a 	mov	r5,r22
1000efec:	8809883a 	mov	r4,r17
1000eff0:	d8c00515 	stw	r3,20(sp)
1000eff4:	d9800715 	stw	r6,28(sp)
1000eff8:	da000615 	stw	r8,24(sp)
1000effc:	dd000115 	stw	r20,4(sp)
1000f000:	d8800015 	stw	r2,0(sp)
1000f004:	0001d400 	call	10001d40 <__mulsi3>
1000f008:	980b883a 	mov	r5,r19
1000f00c:	8809883a 	mov	r4,r17
1000f010:	d8800215 	stw	r2,8(sp)
1000f014:	0001d400 	call	10001d40 <__mulsi3>
1000f018:	9809883a 	mov	r4,r19
1000f01c:	a80b883a 	mov	r5,r21
1000f020:	1029883a 	mov	r20,r2
1000f024:	0001d400 	call	10001d40 <__mulsi3>
1000f028:	b00b883a 	mov	r5,r22
1000f02c:	a809883a 	mov	r4,r21
1000f030:	d8800415 	stw	r2,16(sp)
1000f034:	0001d400 	call	10001d40 <__mulsi3>
1000f038:	d9c00217 	ldw	r7,8(sp)
1000f03c:	1505883a 	add	r2,r2,r20
1000f040:	d8c00517 	ldw	r3,20(sp)
1000f044:	3826d43a 	srli	r19,r7,16
1000f048:	d9800717 	ldw	r6,28(sp)
1000f04c:	da000617 	ldw	r8,24(sp)
1000f050:	9885883a 	add	r2,r19,r2
1000f054:	da400417 	ldw	r9,16(sp)
1000f058:	1500022e 	bgeu	r2,r20,1000f064 <__muldf3+0x458>
1000f05c:	01000074 	movhi	r4,1
1000f060:	4913883a 	add	r9,r9,r4
1000f064:	1028d43a 	srli	r20,r2,16
1000f068:	1004943a 	slli	r2,r2,16
1000f06c:	802cd43a 	srli	r22,r16,16
1000f070:	843fffcc 	andi	r16,r16,65535
1000f074:	3cffffcc 	andi	r19,r7,65535
1000f078:	9009883a 	mov	r4,r18
1000f07c:	800b883a 	mov	r5,r16
1000f080:	a269883a 	add	r20,r20,r9
1000f084:	d8c00515 	stw	r3,20(sp)
1000f088:	d9800715 	stw	r6,28(sp)
1000f08c:	da000615 	stw	r8,24(sp)
1000f090:	14e7883a 	add	r19,r2,r19
1000f094:	0001d400 	call	10001d40 <__mulsi3>
1000f098:	9009883a 	mov	r4,r18
1000f09c:	b00b883a 	mov	r5,r22
1000f0a0:	d8800315 	stw	r2,12(sp)
1000f0a4:	0001d400 	call	10001d40 <__mulsi3>
1000f0a8:	b809883a 	mov	r4,r23
1000f0ac:	b00b883a 	mov	r5,r22
1000f0b0:	d8800215 	stw	r2,8(sp)
1000f0b4:	0001d400 	call	10001d40 <__mulsi3>
1000f0b8:	b80b883a 	mov	r5,r23
1000f0bc:	8009883a 	mov	r4,r16
1000f0c0:	d8800415 	stw	r2,16(sp)
1000f0c4:	0001d400 	call	10001d40 <__mulsi3>
1000f0c8:	da800317 	ldw	r10,12(sp)
1000f0cc:	d9c00217 	ldw	r7,8(sp)
1000f0d0:	d9000017 	ldw	r4,0(sp)
1000f0d4:	502ed43a 	srli	r23,r10,16
1000f0d8:	11c5883a 	add	r2,r2,r7
1000f0dc:	24e5883a 	add	r18,r4,r19
1000f0e0:	b885883a 	add	r2,r23,r2
1000f0e4:	d8c00517 	ldw	r3,20(sp)
1000f0e8:	d9800717 	ldw	r6,28(sp)
1000f0ec:	da000617 	ldw	r8,24(sp)
1000f0f0:	da400417 	ldw	r9,16(sp)
1000f0f4:	11c0022e 	bgeu	r2,r7,1000f100 <__muldf3+0x4f4>
1000f0f8:	01000074 	movhi	r4,1
1000f0fc:	4913883a 	add	r9,r9,r4
1000f100:	100ed43a 	srli	r7,r2,16
1000f104:	1004943a 	slli	r2,r2,16
1000f108:	55ffffcc 	andi	r23,r10,65535
1000f10c:	3a53883a 	add	r9,r7,r9
1000f110:	8809883a 	mov	r4,r17
1000f114:	800b883a 	mov	r5,r16
1000f118:	d8c00515 	stw	r3,20(sp)
1000f11c:	d9800715 	stw	r6,28(sp)
1000f120:	da000615 	stw	r8,24(sp)
1000f124:	da400415 	stw	r9,16(sp)
1000f128:	15ef883a 	add	r23,r2,r23
1000f12c:	0001d400 	call	10001d40 <__mulsi3>
1000f130:	8809883a 	mov	r4,r17
1000f134:	b00b883a 	mov	r5,r22
1000f138:	d8800215 	stw	r2,8(sp)
1000f13c:	0001d400 	call	10001d40 <__mulsi3>
1000f140:	b00b883a 	mov	r5,r22
1000f144:	a809883a 	mov	r4,r21
1000f148:	d8800315 	stw	r2,12(sp)
1000f14c:	0001d400 	call	10001d40 <__mulsi3>
1000f150:	8009883a 	mov	r4,r16
1000f154:	a80b883a 	mov	r5,r21
1000f158:	1023883a 	mov	r17,r2
1000f15c:	0001d400 	call	10001d40 <__mulsi3>
1000f160:	d9c00217 	ldw	r7,8(sp)
1000f164:	da800317 	ldw	r10,12(sp)
1000f168:	d8c00517 	ldw	r3,20(sp)
1000f16c:	3808d43a 	srli	r4,r7,16
1000f170:	1285883a 	add	r2,r2,r10
1000f174:	d9800717 	ldw	r6,28(sp)
1000f178:	2085883a 	add	r2,r4,r2
1000f17c:	da000617 	ldw	r8,24(sp)
1000f180:	da400417 	ldw	r9,16(sp)
1000f184:	1280022e 	bgeu	r2,r10,1000f190 <__muldf3+0x584>
1000f188:	01000074 	movhi	r4,1
1000f18c:	8923883a 	add	r17,r17,r4
1000f190:	1008943a 	slli	r4,r2,16
1000f194:	39ffffcc 	andi	r7,r7,65535
1000f198:	e4b9883a 	add	fp,fp,r18
1000f19c:	21cf883a 	add	r7,r4,r7
1000f1a0:	e4e7803a 	cmpltu	r19,fp,r19
1000f1a4:	3d0f883a 	add	r7,r7,r20
1000f1a8:	bf39883a 	add	fp,r23,fp
1000f1ac:	99c9883a 	add	r4,r19,r7
1000f1b0:	e5ef803a 	cmpltu	r23,fp,r23
1000f1b4:	490b883a 	add	r5,r9,r4
1000f1b8:	1004d43a 	srli	r2,r2,16
1000f1bc:	b965883a 	add	r18,r23,r5
1000f1c0:	24c9803a 	cmpltu	r4,r4,r19
1000f1c4:	3d29803a 	cmpltu	r20,r7,r20
1000f1c8:	a128b03a 	or	r20,r20,r4
1000f1cc:	95ef803a 	cmpltu	r23,r18,r23
1000f1d0:	2a53803a 	cmpltu	r9,r5,r9
1000f1d4:	a0a9883a 	add	r20,r20,r2
1000f1d8:	4deeb03a 	or	r23,r9,r23
1000f1dc:	a5ef883a 	add	r23,r20,r23
1000f1e0:	bc63883a 	add	r17,r23,r17
1000f1e4:	e004927a 	slli	r2,fp,9
1000f1e8:	d9000117 	ldw	r4,4(sp)
1000f1ec:	882e927a 	slli	r23,r17,9
1000f1f0:	9022d5fa 	srli	r17,r18,23
1000f1f4:	e038d5fa 	srli	fp,fp,23
1000f1f8:	1104b03a 	or	r2,r2,r4
1000f1fc:	9024927a 	slli	r18,r18,9
1000f200:	1004c03a 	cmpne	r2,r2,zero
1000f204:	bc62b03a 	or	r17,r23,r17
1000f208:	1738b03a 	or	fp,r2,fp
1000f20c:	8880402c 	andhi	r2,r17,256
1000f210:	e4a4b03a 	or	r18,fp,r18
1000f214:	10000726 	beq	r2,zero,1000f234 <__muldf3+0x628>
1000f218:	9006d07a 	srli	r3,r18,1
1000f21c:	880497fa 	slli	r2,r17,31
1000f220:	9480004c 	andi	r18,r18,1
1000f224:	8822d07a 	srli	r17,r17,1
1000f228:	1ca4b03a 	or	r18,r3,r18
1000f22c:	14a4b03a 	or	r18,r2,r18
1000f230:	4007883a 	mov	r3,r8
1000f234:	1880ffc4 	addi	r2,r3,1023
1000f238:	0080460e 	bge	zero,r2,1000f354 <__muldf3+0x748>
1000f23c:	910001cc 	andi	r4,r18,7
1000f240:	20000726 	beq	r4,zero,1000f260 <__muldf3+0x654>
1000f244:	910003cc 	andi	r4,r18,15
1000f248:	01400104 	movi	r5,4
1000f24c:	21400426 	beq	r4,r5,1000f260 <__muldf3+0x654>
1000f250:	9149883a 	add	r4,r18,r5
1000f254:	24a5803a 	cmpltu	r18,r4,r18
1000f258:	8ca3883a 	add	r17,r17,r18
1000f25c:	2025883a 	mov	r18,r4
1000f260:	8900402c 	andhi	r4,r17,256
1000f264:	20000426 	beq	r4,zero,1000f278 <__muldf3+0x66c>
1000f268:	18810004 	addi	r2,r3,1024
1000f26c:	00ffc034 	movhi	r3,65280
1000f270:	18ffffc4 	addi	r3,r3,-1
1000f274:	88e2703a 	and	r17,r17,r3
1000f278:	00c1ff84 	movi	r3,2046
1000f27c:	18bf1316 	blt	r3,r2,1000eecc <__alt_data_end+0xf800eecc>
1000f280:	882c977a 	slli	r22,r17,29
1000f284:	9024d0fa 	srli	r18,r18,3
1000f288:	8822927a 	slli	r17,r17,9
1000f28c:	1081ffcc 	andi	r2,r2,2047
1000f290:	b4acb03a 	or	r22,r22,r18
1000f294:	8820d33a 	srli	r16,r17,12
1000f298:	3027883a 	mov	r19,r6
1000f29c:	003eba06 	br	1000ed88 <__alt_data_end+0xf800ed88>
1000f2a0:	8080022c 	andhi	r2,r16,8
1000f2a4:	10000926 	beq	r2,zero,1000f2cc <__muldf3+0x6c0>
1000f2a8:	8880022c 	andhi	r2,r17,8
1000f2ac:	1000071e 	bne	r2,zero,1000f2cc <__muldf3+0x6c0>
1000f2b0:	00800434 	movhi	r2,16
1000f2b4:	8c000234 	orhi	r16,r17,8
1000f2b8:	10bfffc4 	addi	r2,r2,-1
1000f2bc:	e027883a 	mov	r19,fp
1000f2c0:	80a0703a 	and	r16,r16,r2
1000f2c4:	902d883a 	mov	r22,r18
1000f2c8:	003f1706 	br	1000ef28 <__alt_data_end+0xf800ef28>
1000f2cc:	00800434 	movhi	r2,16
1000f2d0:	84000234 	orhi	r16,r16,8
1000f2d4:	10bfffc4 	addi	r2,r2,-1
1000f2d8:	80a0703a 	and	r16,r16,r2
1000f2dc:	003f1206 	br	1000ef28 <__alt_data_end+0xf800ef28>
1000f2e0:	147ff604 	addi	r17,r2,-40
1000f2e4:	3462983a 	sll	r17,r6,r17
1000f2e8:	0025883a 	mov	r18,zero
1000f2ec:	003ef306 	br	1000eebc <__alt_data_end+0xf800eebc>
1000f2f0:	3009883a 	mov	r4,r6
1000f2f4:	d9400215 	stw	r5,8(sp)
1000f2f8:	d9800715 	stw	r6,28(sp)
1000f2fc:	da400415 	stw	r9,16(sp)
1000f300:	da800315 	stw	r10,12(sp)
1000f304:	000ff780 	call	1000ff78 <__clzsi2>
1000f308:	10800804 	addi	r2,r2,32
1000f30c:	da800317 	ldw	r10,12(sp)
1000f310:	da400417 	ldw	r9,16(sp)
1000f314:	d9800717 	ldw	r6,28(sp)
1000f318:	d9400217 	ldw	r5,8(sp)
1000f31c:	003edd06 	br	1000ee94 <__alt_data_end+0xf800ee94>
1000f320:	143ff604 	addi	r16,r2,-40
1000f324:	ac20983a 	sll	r16,r21,r16
1000f328:	002d883a 	mov	r22,zero
1000f32c:	003ec106 	br	1000ee34 <__alt_data_end+0xf800ee34>
1000f330:	d9800715 	stw	r6,28(sp)
1000f334:	d9c00215 	stw	r7,8(sp)
1000f338:	da400415 	stw	r9,16(sp)
1000f33c:	000ff780 	call	1000ff78 <__clzsi2>
1000f340:	10800804 	addi	r2,r2,32
1000f344:	da400417 	ldw	r9,16(sp)
1000f348:	d9c00217 	ldw	r7,8(sp)
1000f34c:	d9800717 	ldw	r6,28(sp)
1000f350:	003eae06 	br	1000ee0c <__alt_data_end+0xf800ee0c>
1000f354:	00c00044 	movi	r3,1
1000f358:	1887c83a 	sub	r3,r3,r2
1000f35c:	01000e04 	movi	r4,56
1000f360:	20fe8516 	blt	r4,r3,1000ed78 <__alt_data_end+0xf800ed78>
1000f364:	010007c4 	movi	r4,31
1000f368:	20c01b16 	blt	r4,r3,1000f3d8 <__muldf3+0x7cc>
1000f36c:	00800804 	movi	r2,32
1000f370:	10c5c83a 	sub	r2,r2,r3
1000f374:	888a983a 	sll	r5,r17,r2
1000f378:	90c8d83a 	srl	r4,r18,r3
1000f37c:	9084983a 	sll	r2,r18,r2
1000f380:	88e2d83a 	srl	r17,r17,r3
1000f384:	2906b03a 	or	r3,r5,r4
1000f388:	1004c03a 	cmpne	r2,r2,zero
1000f38c:	1886b03a 	or	r3,r3,r2
1000f390:	188001cc 	andi	r2,r3,7
1000f394:	10000726 	beq	r2,zero,1000f3b4 <__muldf3+0x7a8>
1000f398:	188003cc 	andi	r2,r3,15
1000f39c:	01000104 	movi	r4,4
1000f3a0:	11000426 	beq	r2,r4,1000f3b4 <__muldf3+0x7a8>
1000f3a4:	1805883a 	mov	r2,r3
1000f3a8:	10c00104 	addi	r3,r2,4
1000f3ac:	1885803a 	cmpltu	r2,r3,r2
1000f3b0:	88a3883a 	add	r17,r17,r2
1000f3b4:	8880202c 	andhi	r2,r17,128
1000f3b8:	10001c26 	beq	r2,zero,1000f42c <__muldf3+0x820>
1000f3bc:	3027883a 	mov	r19,r6
1000f3c0:	00800044 	movi	r2,1
1000f3c4:	0021883a 	mov	r16,zero
1000f3c8:	002d883a 	mov	r22,zero
1000f3cc:	003e6e06 	br	1000ed88 <__alt_data_end+0xf800ed88>
1000f3d0:	4007883a 	mov	r3,r8
1000f3d4:	003f9706 	br	1000f234 <__alt_data_end+0xf800f234>
1000f3d8:	017ff844 	movi	r5,-31
1000f3dc:	2885c83a 	sub	r2,r5,r2
1000f3e0:	888ad83a 	srl	r5,r17,r2
1000f3e4:	00800804 	movi	r2,32
1000f3e8:	18801a26 	beq	r3,r2,1000f454 <__muldf3+0x848>
1000f3ec:	01001004 	movi	r4,64
1000f3f0:	20c7c83a 	sub	r3,r4,r3
1000f3f4:	88e2983a 	sll	r17,r17,r3
1000f3f8:	8ca4b03a 	or	r18,r17,r18
1000f3fc:	9004c03a 	cmpne	r2,r18,zero
1000f400:	2884b03a 	or	r2,r5,r2
1000f404:	144001cc 	andi	r17,r2,7
1000f408:	88000d1e 	bne	r17,zero,1000f440 <__muldf3+0x834>
1000f40c:	0021883a 	mov	r16,zero
1000f410:	102cd0fa 	srli	r22,r2,3
1000f414:	3027883a 	mov	r19,r6
1000f418:	0005883a 	mov	r2,zero
1000f41c:	b46cb03a 	or	r22,r22,r17
1000f420:	003e5906 	br	1000ed88 <__alt_data_end+0xf800ed88>
1000f424:	1007883a 	mov	r3,r2
1000f428:	0023883a 	mov	r17,zero
1000f42c:	8820927a 	slli	r16,r17,9
1000f430:	1805883a 	mov	r2,r3
1000f434:	8822977a 	slli	r17,r17,29
1000f438:	8020d33a 	srli	r16,r16,12
1000f43c:	003ff406 	br	1000f410 <__alt_data_end+0xf800f410>
1000f440:	10c003cc 	andi	r3,r2,15
1000f444:	01000104 	movi	r4,4
1000f448:	193ff626 	beq	r3,r4,1000f424 <__alt_data_end+0xf800f424>
1000f44c:	0023883a 	mov	r17,zero
1000f450:	003fd506 	br	1000f3a8 <__alt_data_end+0xf800f3a8>
1000f454:	0023883a 	mov	r17,zero
1000f458:	003fe706 	br	1000f3f8 <__alt_data_end+0xf800f3f8>
1000f45c:	00800434 	movhi	r2,16
1000f460:	8c000234 	orhi	r16,r17,8
1000f464:	10bfffc4 	addi	r2,r2,-1
1000f468:	3027883a 	mov	r19,r6
1000f46c:	80a0703a 	and	r16,r16,r2
1000f470:	902d883a 	mov	r22,r18
1000f474:	003eac06 	br	1000ef28 <__alt_data_end+0xf800ef28>

1000f478 <__subdf3>:
1000f478:	02000434 	movhi	r8,16
1000f47c:	423fffc4 	addi	r8,r8,-1
1000f480:	defffb04 	addi	sp,sp,-20
1000f484:	2a14703a 	and	r10,r5,r8
1000f488:	3812d53a 	srli	r9,r7,20
1000f48c:	3a10703a 	and	r8,r7,r8
1000f490:	2006d77a 	srli	r3,r4,29
1000f494:	3004d77a 	srli	r2,r6,29
1000f498:	dc000015 	stw	r16,0(sp)
1000f49c:	501490fa 	slli	r10,r10,3
1000f4a0:	2820d53a 	srli	r16,r5,20
1000f4a4:	401090fa 	slli	r8,r8,3
1000f4a8:	dc800215 	stw	r18,8(sp)
1000f4ac:	dc400115 	stw	r17,4(sp)
1000f4b0:	dfc00415 	stw	ra,16(sp)
1000f4b4:	202290fa 	slli	r17,r4,3
1000f4b8:	dcc00315 	stw	r19,12(sp)
1000f4bc:	4a41ffcc 	andi	r9,r9,2047
1000f4c0:	0101ffc4 	movi	r4,2047
1000f4c4:	2824d7fa 	srli	r18,r5,31
1000f4c8:	8401ffcc 	andi	r16,r16,2047
1000f4cc:	50c6b03a 	or	r3,r10,r3
1000f4d0:	380ed7fa 	srli	r7,r7,31
1000f4d4:	408ab03a 	or	r5,r8,r2
1000f4d8:	300c90fa 	slli	r6,r6,3
1000f4dc:	49009626 	beq	r9,r4,1000f738 <__subdf3+0x2c0>
1000f4e0:	39c0005c 	xori	r7,r7,1
1000f4e4:	8245c83a 	sub	r2,r16,r9
1000f4e8:	3c807426 	beq	r7,r18,1000f6bc <__subdf3+0x244>
1000f4ec:	0080af0e 	bge	zero,r2,1000f7ac <__subdf3+0x334>
1000f4f0:	48002a1e 	bne	r9,zero,1000f59c <__subdf3+0x124>
1000f4f4:	2988b03a 	or	r4,r5,r6
1000f4f8:	20009a1e 	bne	r4,zero,1000f764 <__subdf3+0x2ec>
1000f4fc:	888001cc 	andi	r2,r17,7
1000f500:	10000726 	beq	r2,zero,1000f520 <__subdf3+0xa8>
1000f504:	888003cc 	andi	r2,r17,15
1000f508:	01000104 	movi	r4,4
1000f50c:	11000426 	beq	r2,r4,1000f520 <__subdf3+0xa8>
1000f510:	890b883a 	add	r5,r17,r4
1000f514:	2c63803a 	cmpltu	r17,r5,r17
1000f518:	1c47883a 	add	r3,r3,r17
1000f51c:	2823883a 	mov	r17,r5
1000f520:	1880202c 	andhi	r2,r3,128
1000f524:	10005926 	beq	r2,zero,1000f68c <__subdf3+0x214>
1000f528:	84000044 	addi	r16,r16,1
1000f52c:	0081ffc4 	movi	r2,2047
1000f530:	8080be26 	beq	r16,r2,1000f82c <__subdf3+0x3b4>
1000f534:	017fe034 	movhi	r5,65408
1000f538:	297fffc4 	addi	r5,r5,-1
1000f53c:	1946703a 	and	r3,r3,r5
1000f540:	1804977a 	slli	r2,r3,29
1000f544:	1806927a 	slli	r3,r3,9
1000f548:	8822d0fa 	srli	r17,r17,3
1000f54c:	8401ffcc 	andi	r16,r16,2047
1000f550:	180ad33a 	srli	r5,r3,12
1000f554:	9100004c 	andi	r4,r18,1
1000f558:	1444b03a 	or	r2,r2,r17
1000f55c:	80c1ffcc 	andi	r3,r16,2047
1000f560:	1820953a 	slli	r16,r3,20
1000f564:	20c03fcc 	andi	r3,r4,255
1000f568:	180897fa 	slli	r4,r3,31
1000f56c:	00c00434 	movhi	r3,16
1000f570:	18ffffc4 	addi	r3,r3,-1
1000f574:	28c6703a 	and	r3,r5,r3
1000f578:	1c06b03a 	or	r3,r3,r16
1000f57c:	1906b03a 	or	r3,r3,r4
1000f580:	dfc00417 	ldw	ra,16(sp)
1000f584:	dcc00317 	ldw	r19,12(sp)
1000f588:	dc800217 	ldw	r18,8(sp)
1000f58c:	dc400117 	ldw	r17,4(sp)
1000f590:	dc000017 	ldw	r16,0(sp)
1000f594:	dec00504 	addi	sp,sp,20
1000f598:	f800283a 	ret
1000f59c:	0101ffc4 	movi	r4,2047
1000f5a0:	813fd626 	beq	r16,r4,1000f4fc <__alt_data_end+0xf800f4fc>
1000f5a4:	29402034 	orhi	r5,r5,128
1000f5a8:	01000e04 	movi	r4,56
1000f5ac:	2080a316 	blt	r4,r2,1000f83c <__subdf3+0x3c4>
1000f5b0:	010007c4 	movi	r4,31
1000f5b4:	2080c616 	blt	r4,r2,1000f8d0 <__subdf3+0x458>
1000f5b8:	01000804 	movi	r4,32
1000f5bc:	2089c83a 	sub	r4,r4,r2
1000f5c0:	2910983a 	sll	r8,r5,r4
1000f5c4:	308ed83a 	srl	r7,r6,r2
1000f5c8:	3108983a 	sll	r4,r6,r4
1000f5cc:	2884d83a 	srl	r2,r5,r2
1000f5d0:	41ccb03a 	or	r6,r8,r7
1000f5d4:	2008c03a 	cmpne	r4,r4,zero
1000f5d8:	310cb03a 	or	r6,r6,r4
1000f5dc:	898dc83a 	sub	r6,r17,r6
1000f5e0:	89a3803a 	cmpltu	r17,r17,r6
1000f5e4:	1887c83a 	sub	r3,r3,r2
1000f5e8:	1c47c83a 	sub	r3,r3,r17
1000f5ec:	3023883a 	mov	r17,r6
1000f5f0:	1880202c 	andhi	r2,r3,128
1000f5f4:	10002326 	beq	r2,zero,1000f684 <__subdf3+0x20c>
1000f5f8:	04c02034 	movhi	r19,128
1000f5fc:	9cffffc4 	addi	r19,r19,-1
1000f600:	1ce6703a 	and	r19,r3,r19
1000f604:	98007a26 	beq	r19,zero,1000f7f0 <__subdf3+0x378>
1000f608:	9809883a 	mov	r4,r19
1000f60c:	000ff780 	call	1000ff78 <__clzsi2>
1000f610:	113ffe04 	addi	r4,r2,-8
1000f614:	00c007c4 	movi	r3,31
1000f618:	19007b16 	blt	r3,r4,1000f808 <__subdf3+0x390>
1000f61c:	00800804 	movi	r2,32
1000f620:	1105c83a 	sub	r2,r2,r4
1000f624:	8884d83a 	srl	r2,r17,r2
1000f628:	9906983a 	sll	r3,r19,r4
1000f62c:	8922983a 	sll	r17,r17,r4
1000f630:	10c4b03a 	or	r2,r2,r3
1000f634:	24007816 	blt	r4,r16,1000f818 <__subdf3+0x3a0>
1000f638:	2421c83a 	sub	r16,r4,r16
1000f63c:	80c00044 	addi	r3,r16,1
1000f640:	010007c4 	movi	r4,31
1000f644:	20c09516 	blt	r4,r3,1000f89c <__subdf3+0x424>
1000f648:	01400804 	movi	r5,32
1000f64c:	28cbc83a 	sub	r5,r5,r3
1000f650:	88c8d83a 	srl	r4,r17,r3
1000f654:	8962983a 	sll	r17,r17,r5
1000f658:	114a983a 	sll	r5,r2,r5
1000f65c:	10c6d83a 	srl	r3,r2,r3
1000f660:	8804c03a 	cmpne	r2,r17,zero
1000f664:	290ab03a 	or	r5,r5,r4
1000f668:	28a2b03a 	or	r17,r5,r2
1000f66c:	0021883a 	mov	r16,zero
1000f670:	003fa206 	br	1000f4fc <__alt_data_end+0xf800f4fc>
1000f674:	2090b03a 	or	r8,r4,r2
1000f678:	40018e26 	beq	r8,zero,1000fcb4 <__subdf3+0x83c>
1000f67c:	1007883a 	mov	r3,r2
1000f680:	2023883a 	mov	r17,r4
1000f684:	888001cc 	andi	r2,r17,7
1000f688:	103f9e1e 	bne	r2,zero,1000f504 <__alt_data_end+0xf800f504>
1000f68c:	1804977a 	slli	r2,r3,29
1000f690:	8822d0fa 	srli	r17,r17,3
1000f694:	1810d0fa 	srli	r8,r3,3
1000f698:	9100004c 	andi	r4,r18,1
1000f69c:	1444b03a 	or	r2,r2,r17
1000f6a0:	00c1ffc4 	movi	r3,2047
1000f6a4:	80c02826 	beq	r16,r3,1000f748 <__subdf3+0x2d0>
1000f6a8:	01400434 	movhi	r5,16
1000f6ac:	297fffc4 	addi	r5,r5,-1
1000f6b0:	80e0703a 	and	r16,r16,r3
1000f6b4:	414a703a 	and	r5,r8,r5
1000f6b8:	003fa806 	br	1000f55c <__alt_data_end+0xf800f55c>
1000f6bc:	0080630e 	bge	zero,r2,1000f84c <__subdf3+0x3d4>
1000f6c0:	48003026 	beq	r9,zero,1000f784 <__subdf3+0x30c>
1000f6c4:	0101ffc4 	movi	r4,2047
1000f6c8:	813f8c26 	beq	r16,r4,1000f4fc <__alt_data_end+0xf800f4fc>
1000f6cc:	29402034 	orhi	r5,r5,128
1000f6d0:	01000e04 	movi	r4,56
1000f6d4:	2080a90e 	bge	r4,r2,1000f97c <__subdf3+0x504>
1000f6d8:	298cb03a 	or	r6,r5,r6
1000f6dc:	3012c03a 	cmpne	r9,r6,zero
1000f6e0:	0005883a 	mov	r2,zero
1000f6e4:	4c53883a 	add	r9,r9,r17
1000f6e8:	4c63803a 	cmpltu	r17,r9,r17
1000f6ec:	10c7883a 	add	r3,r2,r3
1000f6f0:	88c7883a 	add	r3,r17,r3
1000f6f4:	4823883a 	mov	r17,r9
1000f6f8:	1880202c 	andhi	r2,r3,128
1000f6fc:	1000d026 	beq	r2,zero,1000fa40 <__subdf3+0x5c8>
1000f700:	84000044 	addi	r16,r16,1
1000f704:	0081ffc4 	movi	r2,2047
1000f708:	8080fe26 	beq	r16,r2,1000fb04 <__subdf3+0x68c>
1000f70c:	00bfe034 	movhi	r2,65408
1000f710:	10bfffc4 	addi	r2,r2,-1
1000f714:	1886703a 	and	r3,r3,r2
1000f718:	880ad07a 	srli	r5,r17,1
1000f71c:	180497fa 	slli	r2,r3,31
1000f720:	8900004c 	andi	r4,r17,1
1000f724:	2922b03a 	or	r17,r5,r4
1000f728:	1806d07a 	srli	r3,r3,1
1000f72c:	1462b03a 	or	r17,r2,r17
1000f730:	3825883a 	mov	r18,r7
1000f734:	003f7106 	br	1000f4fc <__alt_data_end+0xf800f4fc>
1000f738:	2984b03a 	or	r2,r5,r6
1000f73c:	103f6826 	beq	r2,zero,1000f4e0 <__alt_data_end+0xf800f4e0>
1000f740:	39c03fcc 	andi	r7,r7,255
1000f744:	003f6706 	br	1000f4e4 <__alt_data_end+0xf800f4e4>
1000f748:	4086b03a 	or	r3,r8,r2
1000f74c:	18015226 	beq	r3,zero,1000fc98 <__subdf3+0x820>
1000f750:	00c00434 	movhi	r3,16
1000f754:	41400234 	orhi	r5,r8,8
1000f758:	18ffffc4 	addi	r3,r3,-1
1000f75c:	28ca703a 	and	r5,r5,r3
1000f760:	003f7e06 	br	1000f55c <__alt_data_end+0xf800f55c>
1000f764:	10bfffc4 	addi	r2,r2,-1
1000f768:	1000491e 	bne	r2,zero,1000f890 <__subdf3+0x418>
1000f76c:	898fc83a 	sub	r7,r17,r6
1000f770:	89e3803a 	cmpltu	r17,r17,r7
1000f774:	1947c83a 	sub	r3,r3,r5
1000f778:	1c47c83a 	sub	r3,r3,r17
1000f77c:	3823883a 	mov	r17,r7
1000f780:	003f9b06 	br	1000f5f0 <__alt_data_end+0xf800f5f0>
1000f784:	2988b03a 	or	r4,r5,r6
1000f788:	203f5c26 	beq	r4,zero,1000f4fc <__alt_data_end+0xf800f4fc>
1000f78c:	10bfffc4 	addi	r2,r2,-1
1000f790:	1000931e 	bne	r2,zero,1000f9e0 <__subdf3+0x568>
1000f794:	898d883a 	add	r6,r17,r6
1000f798:	3463803a 	cmpltu	r17,r6,r17
1000f79c:	1947883a 	add	r3,r3,r5
1000f7a0:	88c7883a 	add	r3,r17,r3
1000f7a4:	3023883a 	mov	r17,r6
1000f7a8:	003fd306 	br	1000f6f8 <__alt_data_end+0xf800f6f8>
1000f7ac:	1000541e 	bne	r2,zero,1000f900 <__subdf3+0x488>
1000f7b0:	80800044 	addi	r2,r16,1
1000f7b4:	1081ffcc 	andi	r2,r2,2047
1000f7b8:	01000044 	movi	r4,1
1000f7bc:	2080a20e 	bge	r4,r2,1000fa48 <__subdf3+0x5d0>
1000f7c0:	8989c83a 	sub	r4,r17,r6
1000f7c4:	8905803a 	cmpltu	r2,r17,r4
1000f7c8:	1967c83a 	sub	r19,r3,r5
1000f7cc:	98a7c83a 	sub	r19,r19,r2
1000f7d0:	9880202c 	andhi	r2,r19,128
1000f7d4:	10006326 	beq	r2,zero,1000f964 <__subdf3+0x4ec>
1000f7d8:	3463c83a 	sub	r17,r6,r17
1000f7dc:	28c7c83a 	sub	r3,r5,r3
1000f7e0:	344d803a 	cmpltu	r6,r6,r17
1000f7e4:	19a7c83a 	sub	r19,r3,r6
1000f7e8:	3825883a 	mov	r18,r7
1000f7ec:	983f861e 	bne	r19,zero,1000f608 <__alt_data_end+0xf800f608>
1000f7f0:	8809883a 	mov	r4,r17
1000f7f4:	000ff780 	call	1000ff78 <__clzsi2>
1000f7f8:	10800804 	addi	r2,r2,32
1000f7fc:	113ffe04 	addi	r4,r2,-8
1000f800:	00c007c4 	movi	r3,31
1000f804:	193f850e 	bge	r3,r4,1000f61c <__alt_data_end+0xf800f61c>
1000f808:	10bff604 	addi	r2,r2,-40
1000f80c:	8884983a 	sll	r2,r17,r2
1000f810:	0023883a 	mov	r17,zero
1000f814:	243f880e 	bge	r4,r16,1000f638 <__alt_data_end+0xf800f638>
1000f818:	00ffe034 	movhi	r3,65408
1000f81c:	18ffffc4 	addi	r3,r3,-1
1000f820:	8121c83a 	sub	r16,r16,r4
1000f824:	10c6703a 	and	r3,r2,r3
1000f828:	003f3406 	br	1000f4fc <__alt_data_end+0xf800f4fc>
1000f82c:	9100004c 	andi	r4,r18,1
1000f830:	000b883a 	mov	r5,zero
1000f834:	0005883a 	mov	r2,zero
1000f838:	003f4806 	br	1000f55c <__alt_data_end+0xf800f55c>
1000f83c:	298cb03a 	or	r6,r5,r6
1000f840:	300cc03a 	cmpne	r6,r6,zero
1000f844:	0005883a 	mov	r2,zero
1000f848:	003f6406 	br	1000f5dc <__alt_data_end+0xf800f5dc>
1000f84c:	10009a1e 	bne	r2,zero,1000fab8 <__subdf3+0x640>
1000f850:	82400044 	addi	r9,r16,1
1000f854:	4881ffcc 	andi	r2,r9,2047
1000f858:	02800044 	movi	r10,1
1000f85c:	5080670e 	bge	r10,r2,1000f9fc <__subdf3+0x584>
1000f860:	0081ffc4 	movi	r2,2047
1000f864:	4880af26 	beq	r9,r2,1000fb24 <__subdf3+0x6ac>
1000f868:	898d883a 	add	r6,r17,r6
1000f86c:	1945883a 	add	r2,r3,r5
1000f870:	3447803a 	cmpltu	r3,r6,r17
1000f874:	1887883a 	add	r3,r3,r2
1000f878:	182297fa 	slli	r17,r3,31
1000f87c:	300cd07a 	srli	r6,r6,1
1000f880:	1806d07a 	srli	r3,r3,1
1000f884:	4821883a 	mov	r16,r9
1000f888:	89a2b03a 	or	r17,r17,r6
1000f88c:	003f1b06 	br	1000f4fc <__alt_data_end+0xf800f4fc>
1000f890:	0101ffc4 	movi	r4,2047
1000f894:	813f441e 	bne	r16,r4,1000f5a8 <__alt_data_end+0xf800f5a8>
1000f898:	003f1806 	br	1000f4fc <__alt_data_end+0xf800f4fc>
1000f89c:	843ff844 	addi	r16,r16,-31
1000f8a0:	01400804 	movi	r5,32
1000f8a4:	1408d83a 	srl	r4,r2,r16
1000f8a8:	19405026 	beq	r3,r5,1000f9ec <__subdf3+0x574>
1000f8ac:	01401004 	movi	r5,64
1000f8b0:	28c7c83a 	sub	r3,r5,r3
1000f8b4:	10c4983a 	sll	r2,r2,r3
1000f8b8:	88a2b03a 	or	r17,r17,r2
1000f8bc:	8822c03a 	cmpne	r17,r17,zero
1000f8c0:	2462b03a 	or	r17,r4,r17
1000f8c4:	0007883a 	mov	r3,zero
1000f8c8:	0021883a 	mov	r16,zero
1000f8cc:	003f6d06 	br	1000f684 <__alt_data_end+0xf800f684>
1000f8d0:	11fff804 	addi	r7,r2,-32
1000f8d4:	01000804 	movi	r4,32
1000f8d8:	29ced83a 	srl	r7,r5,r7
1000f8dc:	11004526 	beq	r2,r4,1000f9f4 <__subdf3+0x57c>
1000f8e0:	01001004 	movi	r4,64
1000f8e4:	2089c83a 	sub	r4,r4,r2
1000f8e8:	2904983a 	sll	r2,r5,r4
1000f8ec:	118cb03a 	or	r6,r2,r6
1000f8f0:	300cc03a 	cmpne	r6,r6,zero
1000f8f4:	398cb03a 	or	r6,r7,r6
1000f8f8:	0005883a 	mov	r2,zero
1000f8fc:	003f3706 	br	1000f5dc <__alt_data_end+0xf800f5dc>
1000f900:	80002a26 	beq	r16,zero,1000f9ac <__subdf3+0x534>
1000f904:	0101ffc4 	movi	r4,2047
1000f908:	49006626 	beq	r9,r4,1000faa4 <__subdf3+0x62c>
1000f90c:	0085c83a 	sub	r2,zero,r2
1000f910:	18c02034 	orhi	r3,r3,128
1000f914:	01000e04 	movi	r4,56
1000f918:	20807e16 	blt	r4,r2,1000fb14 <__subdf3+0x69c>
1000f91c:	010007c4 	movi	r4,31
1000f920:	2080e716 	blt	r4,r2,1000fcc0 <__subdf3+0x848>
1000f924:	01000804 	movi	r4,32
1000f928:	2089c83a 	sub	r4,r4,r2
1000f92c:	1914983a 	sll	r10,r3,r4
1000f930:	8890d83a 	srl	r8,r17,r2
1000f934:	8908983a 	sll	r4,r17,r4
1000f938:	1884d83a 	srl	r2,r3,r2
1000f93c:	5222b03a 	or	r17,r10,r8
1000f940:	2006c03a 	cmpne	r3,r4,zero
1000f944:	88e2b03a 	or	r17,r17,r3
1000f948:	3463c83a 	sub	r17,r6,r17
1000f94c:	2885c83a 	sub	r2,r5,r2
1000f950:	344d803a 	cmpltu	r6,r6,r17
1000f954:	1187c83a 	sub	r3,r2,r6
1000f958:	4821883a 	mov	r16,r9
1000f95c:	3825883a 	mov	r18,r7
1000f960:	003f2306 	br	1000f5f0 <__alt_data_end+0xf800f5f0>
1000f964:	24d0b03a 	or	r8,r4,r19
1000f968:	40001b1e 	bne	r8,zero,1000f9d8 <__subdf3+0x560>
1000f96c:	0005883a 	mov	r2,zero
1000f970:	0009883a 	mov	r4,zero
1000f974:	0021883a 	mov	r16,zero
1000f978:	003f4906 	br	1000f6a0 <__alt_data_end+0xf800f6a0>
1000f97c:	010007c4 	movi	r4,31
1000f980:	20803a16 	blt	r4,r2,1000fa6c <__subdf3+0x5f4>
1000f984:	01000804 	movi	r4,32
1000f988:	2089c83a 	sub	r4,r4,r2
1000f98c:	2912983a 	sll	r9,r5,r4
1000f990:	3090d83a 	srl	r8,r6,r2
1000f994:	3108983a 	sll	r4,r6,r4
1000f998:	2884d83a 	srl	r2,r5,r2
1000f99c:	4a12b03a 	or	r9,r9,r8
1000f9a0:	2008c03a 	cmpne	r4,r4,zero
1000f9a4:	4912b03a 	or	r9,r9,r4
1000f9a8:	003f4e06 	br	1000f6e4 <__alt_data_end+0xf800f6e4>
1000f9ac:	1c48b03a 	or	r4,r3,r17
1000f9b0:	20003c26 	beq	r4,zero,1000faa4 <__subdf3+0x62c>
1000f9b4:	0084303a 	nor	r2,zero,r2
1000f9b8:	1000381e 	bne	r2,zero,1000fa9c <__subdf3+0x624>
1000f9bc:	3463c83a 	sub	r17,r6,r17
1000f9c0:	28c5c83a 	sub	r2,r5,r3
1000f9c4:	344d803a 	cmpltu	r6,r6,r17
1000f9c8:	1187c83a 	sub	r3,r2,r6
1000f9cc:	4821883a 	mov	r16,r9
1000f9d0:	3825883a 	mov	r18,r7
1000f9d4:	003f0606 	br	1000f5f0 <__alt_data_end+0xf800f5f0>
1000f9d8:	2023883a 	mov	r17,r4
1000f9dc:	003f0906 	br	1000f604 <__alt_data_end+0xf800f604>
1000f9e0:	0101ffc4 	movi	r4,2047
1000f9e4:	813f3a1e 	bne	r16,r4,1000f6d0 <__alt_data_end+0xf800f6d0>
1000f9e8:	003ec406 	br	1000f4fc <__alt_data_end+0xf800f4fc>
1000f9ec:	0005883a 	mov	r2,zero
1000f9f0:	003fb106 	br	1000f8b8 <__alt_data_end+0xf800f8b8>
1000f9f4:	0005883a 	mov	r2,zero
1000f9f8:	003fbc06 	br	1000f8ec <__alt_data_end+0xf800f8ec>
1000f9fc:	1c44b03a 	or	r2,r3,r17
1000fa00:	80008e1e 	bne	r16,zero,1000fc3c <__subdf3+0x7c4>
1000fa04:	1000c826 	beq	r2,zero,1000fd28 <__subdf3+0x8b0>
1000fa08:	2984b03a 	or	r2,r5,r6
1000fa0c:	103ebb26 	beq	r2,zero,1000f4fc <__alt_data_end+0xf800f4fc>
1000fa10:	8989883a 	add	r4,r17,r6
1000fa14:	1945883a 	add	r2,r3,r5
1000fa18:	2447803a 	cmpltu	r3,r4,r17
1000fa1c:	1887883a 	add	r3,r3,r2
1000fa20:	1880202c 	andhi	r2,r3,128
1000fa24:	2023883a 	mov	r17,r4
1000fa28:	103f1626 	beq	r2,zero,1000f684 <__alt_data_end+0xf800f684>
1000fa2c:	00bfe034 	movhi	r2,65408
1000fa30:	10bfffc4 	addi	r2,r2,-1
1000fa34:	5021883a 	mov	r16,r10
1000fa38:	1886703a 	and	r3,r3,r2
1000fa3c:	003eaf06 	br	1000f4fc <__alt_data_end+0xf800f4fc>
1000fa40:	3825883a 	mov	r18,r7
1000fa44:	003f0f06 	br	1000f684 <__alt_data_end+0xf800f684>
1000fa48:	1c44b03a 	or	r2,r3,r17
1000fa4c:	8000251e 	bne	r16,zero,1000fae4 <__subdf3+0x66c>
1000fa50:	1000661e 	bne	r2,zero,1000fbec <__subdf3+0x774>
1000fa54:	2990b03a 	or	r8,r5,r6
1000fa58:	40009626 	beq	r8,zero,1000fcb4 <__subdf3+0x83c>
1000fa5c:	2807883a 	mov	r3,r5
1000fa60:	3023883a 	mov	r17,r6
1000fa64:	3825883a 	mov	r18,r7
1000fa68:	003ea406 	br	1000f4fc <__alt_data_end+0xf800f4fc>
1000fa6c:	127ff804 	addi	r9,r2,-32
1000fa70:	01000804 	movi	r4,32
1000fa74:	2a52d83a 	srl	r9,r5,r9
1000fa78:	11008c26 	beq	r2,r4,1000fcac <__subdf3+0x834>
1000fa7c:	01001004 	movi	r4,64
1000fa80:	2085c83a 	sub	r2,r4,r2
1000fa84:	2884983a 	sll	r2,r5,r2
1000fa88:	118cb03a 	or	r6,r2,r6
1000fa8c:	300cc03a 	cmpne	r6,r6,zero
1000fa90:	4992b03a 	or	r9,r9,r6
1000fa94:	0005883a 	mov	r2,zero
1000fa98:	003f1206 	br	1000f6e4 <__alt_data_end+0xf800f6e4>
1000fa9c:	0101ffc4 	movi	r4,2047
1000faa0:	493f9c1e 	bne	r9,r4,1000f914 <__alt_data_end+0xf800f914>
1000faa4:	2807883a 	mov	r3,r5
1000faa8:	3023883a 	mov	r17,r6
1000faac:	4821883a 	mov	r16,r9
1000fab0:	3825883a 	mov	r18,r7
1000fab4:	003e9106 	br	1000f4fc <__alt_data_end+0xf800f4fc>
1000fab8:	80001f1e 	bne	r16,zero,1000fb38 <__subdf3+0x6c0>
1000fabc:	1c48b03a 	or	r4,r3,r17
1000fac0:	20005a26 	beq	r4,zero,1000fc2c <__subdf3+0x7b4>
1000fac4:	0084303a 	nor	r2,zero,r2
1000fac8:	1000561e 	bne	r2,zero,1000fc24 <__subdf3+0x7ac>
1000facc:	89a3883a 	add	r17,r17,r6
1000fad0:	1945883a 	add	r2,r3,r5
1000fad4:	898d803a 	cmpltu	r6,r17,r6
1000fad8:	3087883a 	add	r3,r6,r2
1000fadc:	4821883a 	mov	r16,r9
1000fae0:	003f0506 	br	1000f6f8 <__alt_data_end+0xf800f6f8>
1000fae4:	10002b1e 	bne	r2,zero,1000fb94 <__subdf3+0x71c>
1000fae8:	2984b03a 	or	r2,r5,r6
1000faec:	10008026 	beq	r2,zero,1000fcf0 <__subdf3+0x878>
1000faf0:	2807883a 	mov	r3,r5
1000faf4:	3023883a 	mov	r17,r6
1000faf8:	3825883a 	mov	r18,r7
1000fafc:	0401ffc4 	movi	r16,2047
1000fb00:	003e7e06 	br	1000f4fc <__alt_data_end+0xf800f4fc>
1000fb04:	3809883a 	mov	r4,r7
1000fb08:	0011883a 	mov	r8,zero
1000fb0c:	0005883a 	mov	r2,zero
1000fb10:	003ee306 	br	1000f6a0 <__alt_data_end+0xf800f6a0>
1000fb14:	1c62b03a 	or	r17,r3,r17
1000fb18:	8822c03a 	cmpne	r17,r17,zero
1000fb1c:	0005883a 	mov	r2,zero
1000fb20:	003f8906 	br	1000f948 <__alt_data_end+0xf800f948>
1000fb24:	3809883a 	mov	r4,r7
1000fb28:	4821883a 	mov	r16,r9
1000fb2c:	0011883a 	mov	r8,zero
1000fb30:	0005883a 	mov	r2,zero
1000fb34:	003eda06 	br	1000f6a0 <__alt_data_end+0xf800f6a0>
1000fb38:	0101ffc4 	movi	r4,2047
1000fb3c:	49003b26 	beq	r9,r4,1000fc2c <__subdf3+0x7b4>
1000fb40:	0085c83a 	sub	r2,zero,r2
1000fb44:	18c02034 	orhi	r3,r3,128
1000fb48:	01000e04 	movi	r4,56
1000fb4c:	20806e16 	blt	r4,r2,1000fd08 <__subdf3+0x890>
1000fb50:	010007c4 	movi	r4,31
1000fb54:	20807716 	blt	r4,r2,1000fd34 <__subdf3+0x8bc>
1000fb58:	01000804 	movi	r4,32
1000fb5c:	2089c83a 	sub	r4,r4,r2
1000fb60:	1914983a 	sll	r10,r3,r4
1000fb64:	8890d83a 	srl	r8,r17,r2
1000fb68:	8908983a 	sll	r4,r17,r4
1000fb6c:	1884d83a 	srl	r2,r3,r2
1000fb70:	5222b03a 	or	r17,r10,r8
1000fb74:	2006c03a 	cmpne	r3,r4,zero
1000fb78:	88e2b03a 	or	r17,r17,r3
1000fb7c:	89a3883a 	add	r17,r17,r6
1000fb80:	1145883a 	add	r2,r2,r5
1000fb84:	898d803a 	cmpltu	r6,r17,r6
1000fb88:	3087883a 	add	r3,r6,r2
1000fb8c:	4821883a 	mov	r16,r9
1000fb90:	003ed906 	br	1000f6f8 <__alt_data_end+0xf800f6f8>
1000fb94:	2984b03a 	or	r2,r5,r6
1000fb98:	10004226 	beq	r2,zero,1000fca4 <__subdf3+0x82c>
1000fb9c:	1808d0fa 	srli	r4,r3,3
1000fba0:	8822d0fa 	srli	r17,r17,3
1000fba4:	1806977a 	slli	r3,r3,29
1000fba8:	2080022c 	andhi	r2,r4,8
1000fbac:	1c62b03a 	or	r17,r3,r17
1000fbb0:	10000826 	beq	r2,zero,1000fbd4 <__subdf3+0x75c>
1000fbb4:	2812d0fa 	srli	r9,r5,3
1000fbb8:	4880022c 	andhi	r2,r9,8
1000fbbc:	1000051e 	bne	r2,zero,1000fbd4 <__subdf3+0x75c>
1000fbc0:	300cd0fa 	srli	r6,r6,3
1000fbc4:	2804977a 	slli	r2,r5,29
1000fbc8:	4809883a 	mov	r4,r9
1000fbcc:	3825883a 	mov	r18,r7
1000fbd0:	11a2b03a 	or	r17,r2,r6
1000fbd4:	8806d77a 	srli	r3,r17,29
1000fbd8:	200890fa 	slli	r4,r4,3
1000fbdc:	882290fa 	slli	r17,r17,3
1000fbe0:	0401ffc4 	movi	r16,2047
1000fbe4:	1906b03a 	or	r3,r3,r4
1000fbe8:	003e4406 	br	1000f4fc <__alt_data_end+0xf800f4fc>
1000fbec:	2984b03a 	or	r2,r5,r6
1000fbf0:	103e4226 	beq	r2,zero,1000f4fc <__alt_data_end+0xf800f4fc>
1000fbf4:	8989c83a 	sub	r4,r17,r6
1000fbf8:	8911803a 	cmpltu	r8,r17,r4
1000fbfc:	1945c83a 	sub	r2,r3,r5
1000fc00:	1205c83a 	sub	r2,r2,r8
1000fc04:	1200202c 	andhi	r8,r2,128
1000fc08:	403e9a26 	beq	r8,zero,1000f674 <__alt_data_end+0xf800f674>
1000fc0c:	3463c83a 	sub	r17,r6,r17
1000fc10:	28c5c83a 	sub	r2,r5,r3
1000fc14:	344d803a 	cmpltu	r6,r6,r17
1000fc18:	1187c83a 	sub	r3,r2,r6
1000fc1c:	3825883a 	mov	r18,r7
1000fc20:	003e3606 	br	1000f4fc <__alt_data_end+0xf800f4fc>
1000fc24:	0101ffc4 	movi	r4,2047
1000fc28:	493fc71e 	bne	r9,r4,1000fb48 <__alt_data_end+0xf800fb48>
1000fc2c:	2807883a 	mov	r3,r5
1000fc30:	3023883a 	mov	r17,r6
1000fc34:	4821883a 	mov	r16,r9
1000fc38:	003e3006 	br	1000f4fc <__alt_data_end+0xf800f4fc>
1000fc3c:	10003626 	beq	r2,zero,1000fd18 <__subdf3+0x8a0>
1000fc40:	2984b03a 	or	r2,r5,r6
1000fc44:	10001726 	beq	r2,zero,1000fca4 <__subdf3+0x82c>
1000fc48:	1808d0fa 	srli	r4,r3,3
1000fc4c:	8822d0fa 	srli	r17,r17,3
1000fc50:	1806977a 	slli	r3,r3,29
1000fc54:	2080022c 	andhi	r2,r4,8
1000fc58:	1c62b03a 	or	r17,r3,r17
1000fc5c:	10000726 	beq	r2,zero,1000fc7c <__subdf3+0x804>
1000fc60:	2812d0fa 	srli	r9,r5,3
1000fc64:	4880022c 	andhi	r2,r9,8
1000fc68:	1000041e 	bne	r2,zero,1000fc7c <__subdf3+0x804>
1000fc6c:	300cd0fa 	srli	r6,r6,3
1000fc70:	2804977a 	slli	r2,r5,29
1000fc74:	4809883a 	mov	r4,r9
1000fc78:	11a2b03a 	or	r17,r2,r6
1000fc7c:	8806d77a 	srli	r3,r17,29
1000fc80:	200890fa 	slli	r4,r4,3
1000fc84:	882290fa 	slli	r17,r17,3
1000fc88:	3825883a 	mov	r18,r7
1000fc8c:	1906b03a 	or	r3,r3,r4
1000fc90:	0401ffc4 	movi	r16,2047
1000fc94:	003e1906 	br	1000f4fc <__alt_data_end+0xf800f4fc>
1000fc98:	000b883a 	mov	r5,zero
1000fc9c:	0005883a 	mov	r2,zero
1000fca0:	003e2e06 	br	1000f55c <__alt_data_end+0xf800f55c>
1000fca4:	0401ffc4 	movi	r16,2047
1000fca8:	003e1406 	br	1000f4fc <__alt_data_end+0xf800f4fc>
1000fcac:	0005883a 	mov	r2,zero
1000fcb0:	003f7506 	br	1000fa88 <__alt_data_end+0xf800fa88>
1000fcb4:	0005883a 	mov	r2,zero
1000fcb8:	0009883a 	mov	r4,zero
1000fcbc:	003e7806 	br	1000f6a0 <__alt_data_end+0xf800f6a0>
1000fcc0:	123ff804 	addi	r8,r2,-32
1000fcc4:	01000804 	movi	r4,32
1000fcc8:	1a10d83a 	srl	r8,r3,r8
1000fccc:	11002526 	beq	r2,r4,1000fd64 <__subdf3+0x8ec>
1000fcd0:	01001004 	movi	r4,64
1000fcd4:	2085c83a 	sub	r2,r4,r2
1000fcd8:	1884983a 	sll	r2,r3,r2
1000fcdc:	1444b03a 	or	r2,r2,r17
1000fce0:	1004c03a 	cmpne	r2,r2,zero
1000fce4:	40a2b03a 	or	r17,r8,r2
1000fce8:	0005883a 	mov	r2,zero
1000fcec:	003f1606 	br	1000f948 <__alt_data_end+0xf800f948>
1000fcf0:	02000434 	movhi	r8,16
1000fcf4:	0009883a 	mov	r4,zero
1000fcf8:	423fffc4 	addi	r8,r8,-1
1000fcfc:	00bfffc4 	movi	r2,-1
1000fd00:	0401ffc4 	movi	r16,2047
1000fd04:	003e6606 	br	1000f6a0 <__alt_data_end+0xf800f6a0>
1000fd08:	1c62b03a 	or	r17,r3,r17
1000fd0c:	8822c03a 	cmpne	r17,r17,zero
1000fd10:	0005883a 	mov	r2,zero
1000fd14:	003f9906 	br	1000fb7c <__alt_data_end+0xf800fb7c>
1000fd18:	2807883a 	mov	r3,r5
1000fd1c:	3023883a 	mov	r17,r6
1000fd20:	0401ffc4 	movi	r16,2047
1000fd24:	003df506 	br	1000f4fc <__alt_data_end+0xf800f4fc>
1000fd28:	2807883a 	mov	r3,r5
1000fd2c:	3023883a 	mov	r17,r6
1000fd30:	003df206 	br	1000f4fc <__alt_data_end+0xf800f4fc>
1000fd34:	123ff804 	addi	r8,r2,-32
1000fd38:	01000804 	movi	r4,32
1000fd3c:	1a10d83a 	srl	r8,r3,r8
1000fd40:	11000a26 	beq	r2,r4,1000fd6c <__subdf3+0x8f4>
1000fd44:	01001004 	movi	r4,64
1000fd48:	2085c83a 	sub	r2,r4,r2
1000fd4c:	1884983a 	sll	r2,r3,r2
1000fd50:	1444b03a 	or	r2,r2,r17
1000fd54:	1004c03a 	cmpne	r2,r2,zero
1000fd58:	40a2b03a 	or	r17,r8,r2
1000fd5c:	0005883a 	mov	r2,zero
1000fd60:	003f8606 	br	1000fb7c <__alt_data_end+0xf800fb7c>
1000fd64:	0005883a 	mov	r2,zero
1000fd68:	003fdc06 	br	1000fcdc <__alt_data_end+0xf800fcdc>
1000fd6c:	0005883a 	mov	r2,zero
1000fd70:	003ff706 	br	1000fd50 <__alt_data_end+0xf800fd50>

1000fd74 <__fixdfsi>:
1000fd74:	280cd53a 	srli	r6,r5,20
1000fd78:	00c00434 	movhi	r3,16
1000fd7c:	18ffffc4 	addi	r3,r3,-1
1000fd80:	3181ffcc 	andi	r6,r6,2047
1000fd84:	01c0ff84 	movi	r7,1022
1000fd88:	28c6703a 	and	r3,r5,r3
1000fd8c:	280ad7fa 	srli	r5,r5,31
1000fd90:	3980120e 	bge	r7,r6,1000fddc <__fixdfsi+0x68>
1000fd94:	00810744 	movi	r2,1053
1000fd98:	11800c16 	blt	r2,r6,1000fdcc <__fixdfsi+0x58>
1000fd9c:	00810cc4 	movi	r2,1075
1000fda0:	1185c83a 	sub	r2,r2,r6
1000fda4:	01c007c4 	movi	r7,31
1000fda8:	18c00434 	orhi	r3,r3,16
1000fdac:	38800d16 	blt	r7,r2,1000fde4 <__fixdfsi+0x70>
1000fdb0:	31befb44 	addi	r6,r6,-1043
1000fdb4:	2084d83a 	srl	r2,r4,r2
1000fdb8:	1986983a 	sll	r3,r3,r6
1000fdbc:	1884b03a 	or	r2,r3,r2
1000fdc0:	28000726 	beq	r5,zero,1000fde0 <__fixdfsi+0x6c>
1000fdc4:	0085c83a 	sub	r2,zero,r2
1000fdc8:	f800283a 	ret
1000fdcc:	00a00034 	movhi	r2,32768
1000fdd0:	10bfffc4 	addi	r2,r2,-1
1000fdd4:	2885883a 	add	r2,r5,r2
1000fdd8:	f800283a 	ret
1000fddc:	0005883a 	mov	r2,zero
1000fde0:	f800283a 	ret
1000fde4:	008104c4 	movi	r2,1043
1000fde8:	1185c83a 	sub	r2,r2,r6
1000fdec:	1884d83a 	srl	r2,r3,r2
1000fdf0:	003ff306 	br	1000fdc0 <__alt_data_end+0xf800fdc0>

1000fdf4 <__floatsidf>:
1000fdf4:	defffd04 	addi	sp,sp,-12
1000fdf8:	dfc00215 	stw	ra,8(sp)
1000fdfc:	dc400115 	stw	r17,4(sp)
1000fe00:	dc000015 	stw	r16,0(sp)
1000fe04:	20002b26 	beq	r4,zero,1000feb4 <__floatsidf+0xc0>
1000fe08:	2023883a 	mov	r17,r4
1000fe0c:	2020d7fa 	srli	r16,r4,31
1000fe10:	20002d16 	blt	r4,zero,1000fec8 <__floatsidf+0xd4>
1000fe14:	8809883a 	mov	r4,r17
1000fe18:	000ff780 	call	1000ff78 <__clzsi2>
1000fe1c:	01410784 	movi	r5,1054
1000fe20:	288bc83a 	sub	r5,r5,r2
1000fe24:	01010cc4 	movi	r4,1075
1000fe28:	2149c83a 	sub	r4,r4,r5
1000fe2c:	00c007c4 	movi	r3,31
1000fe30:	1900160e 	bge	r3,r4,1000fe8c <__floatsidf+0x98>
1000fe34:	00c104c4 	movi	r3,1043
1000fe38:	1947c83a 	sub	r3,r3,r5
1000fe3c:	88c6983a 	sll	r3,r17,r3
1000fe40:	00800434 	movhi	r2,16
1000fe44:	10bfffc4 	addi	r2,r2,-1
1000fe48:	1886703a 	and	r3,r3,r2
1000fe4c:	2941ffcc 	andi	r5,r5,2047
1000fe50:	800d883a 	mov	r6,r16
1000fe54:	0005883a 	mov	r2,zero
1000fe58:	280a953a 	slli	r5,r5,20
1000fe5c:	31803fcc 	andi	r6,r6,255
1000fe60:	01000434 	movhi	r4,16
1000fe64:	300c97fa 	slli	r6,r6,31
1000fe68:	213fffc4 	addi	r4,r4,-1
1000fe6c:	1906703a 	and	r3,r3,r4
1000fe70:	1946b03a 	or	r3,r3,r5
1000fe74:	1986b03a 	or	r3,r3,r6
1000fe78:	dfc00217 	ldw	ra,8(sp)
1000fe7c:	dc400117 	ldw	r17,4(sp)
1000fe80:	dc000017 	ldw	r16,0(sp)
1000fe84:	dec00304 	addi	sp,sp,12
1000fe88:	f800283a 	ret
1000fe8c:	00c002c4 	movi	r3,11
1000fe90:	1887c83a 	sub	r3,r3,r2
1000fe94:	88c6d83a 	srl	r3,r17,r3
1000fe98:	8904983a 	sll	r2,r17,r4
1000fe9c:	01000434 	movhi	r4,16
1000fea0:	213fffc4 	addi	r4,r4,-1
1000fea4:	2941ffcc 	andi	r5,r5,2047
1000fea8:	1906703a 	and	r3,r3,r4
1000feac:	800d883a 	mov	r6,r16
1000feb0:	003fe906 	br	1000fe58 <__alt_data_end+0xf800fe58>
1000feb4:	000d883a 	mov	r6,zero
1000feb8:	000b883a 	mov	r5,zero
1000febc:	0007883a 	mov	r3,zero
1000fec0:	0005883a 	mov	r2,zero
1000fec4:	003fe406 	br	1000fe58 <__alt_data_end+0xf800fe58>
1000fec8:	0123c83a 	sub	r17,zero,r4
1000fecc:	003fd106 	br	1000fe14 <__alt_data_end+0xf800fe14>

1000fed0 <__floatunsidf>:
1000fed0:	defffe04 	addi	sp,sp,-8
1000fed4:	dc000015 	stw	r16,0(sp)
1000fed8:	dfc00115 	stw	ra,4(sp)
1000fedc:	2021883a 	mov	r16,r4
1000fee0:	20002226 	beq	r4,zero,1000ff6c <__floatunsidf+0x9c>
1000fee4:	000ff780 	call	1000ff78 <__clzsi2>
1000fee8:	01010784 	movi	r4,1054
1000feec:	2089c83a 	sub	r4,r4,r2
1000fef0:	01810cc4 	movi	r6,1075
1000fef4:	310dc83a 	sub	r6,r6,r4
1000fef8:	00c007c4 	movi	r3,31
1000fefc:	1980120e 	bge	r3,r6,1000ff48 <__floatunsidf+0x78>
1000ff00:	00c104c4 	movi	r3,1043
1000ff04:	1907c83a 	sub	r3,r3,r4
1000ff08:	80ca983a 	sll	r5,r16,r3
1000ff0c:	00800434 	movhi	r2,16
1000ff10:	10bfffc4 	addi	r2,r2,-1
1000ff14:	2101ffcc 	andi	r4,r4,2047
1000ff18:	0021883a 	mov	r16,zero
1000ff1c:	288a703a 	and	r5,r5,r2
1000ff20:	2008953a 	slli	r4,r4,20
1000ff24:	00c00434 	movhi	r3,16
1000ff28:	18ffffc4 	addi	r3,r3,-1
1000ff2c:	28c6703a 	and	r3,r5,r3
1000ff30:	8005883a 	mov	r2,r16
1000ff34:	1906b03a 	or	r3,r3,r4
1000ff38:	dfc00117 	ldw	ra,4(sp)
1000ff3c:	dc000017 	ldw	r16,0(sp)
1000ff40:	dec00204 	addi	sp,sp,8
1000ff44:	f800283a 	ret
1000ff48:	00c002c4 	movi	r3,11
1000ff4c:	188bc83a 	sub	r5,r3,r2
1000ff50:	814ad83a 	srl	r5,r16,r5
1000ff54:	00c00434 	movhi	r3,16
1000ff58:	18ffffc4 	addi	r3,r3,-1
1000ff5c:	81a0983a 	sll	r16,r16,r6
1000ff60:	2101ffcc 	andi	r4,r4,2047
1000ff64:	28ca703a 	and	r5,r5,r3
1000ff68:	003fed06 	br	1000ff20 <__alt_data_end+0xf800ff20>
1000ff6c:	0009883a 	mov	r4,zero
1000ff70:	000b883a 	mov	r5,zero
1000ff74:	003fea06 	br	1000ff20 <__alt_data_end+0xf800ff20>

1000ff78 <__clzsi2>:
1000ff78:	00bfffd4 	movui	r2,65535
1000ff7c:	11000536 	bltu	r2,r4,1000ff94 <__clzsi2+0x1c>
1000ff80:	00803fc4 	movi	r2,255
1000ff84:	11000f36 	bltu	r2,r4,1000ffc4 <__clzsi2+0x4c>
1000ff88:	00800804 	movi	r2,32
1000ff8c:	0007883a 	mov	r3,zero
1000ff90:	00000506 	br	1000ffa8 <__clzsi2+0x30>
1000ff94:	00804034 	movhi	r2,256
1000ff98:	10bfffc4 	addi	r2,r2,-1
1000ff9c:	11000c2e 	bgeu	r2,r4,1000ffd0 <__clzsi2+0x58>
1000ffa0:	00800204 	movi	r2,8
1000ffa4:	00c00604 	movi	r3,24
1000ffa8:	20c8d83a 	srl	r4,r4,r3
1000ffac:	00c40074 	movhi	r3,4097
1000ffb0:	18cba804 	addi	r3,r3,11936
1000ffb4:	1909883a 	add	r4,r3,r4
1000ffb8:	20c00003 	ldbu	r3,0(r4)
1000ffbc:	10c5c83a 	sub	r2,r2,r3
1000ffc0:	f800283a 	ret
1000ffc4:	00800604 	movi	r2,24
1000ffc8:	00c00204 	movi	r3,8
1000ffcc:	003ff606 	br	1000ffa8 <__alt_data_end+0xf800ffa8>
1000ffd0:	00800404 	movi	r2,16
1000ffd4:	1007883a 	mov	r3,r2
1000ffd8:	003ff306 	br	1000ffa8 <__alt_data_end+0xf800ffa8>

1000ffdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ffdc:	defffe04 	addi	sp,sp,-8
1000ffe0:	dfc00115 	stw	ra,4(sp)
1000ffe4:	df000015 	stw	fp,0(sp)
1000ffe8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ffec:	d0a00b17 	ldw	r2,-32724(gp)
1000fff0:	10000326 	beq	r2,zero,10010000 <alt_get_errno+0x24>
1000fff4:	d0a00b17 	ldw	r2,-32724(gp)
1000fff8:	103ee83a 	callr	r2
1000fffc:	00000106 	br	10010004 <alt_get_errno+0x28>
10010000:	d0a73704 	addi	r2,gp,-25380
}
10010004:	e037883a 	mov	sp,fp
10010008:	dfc00117 	ldw	ra,4(sp)
1001000c:	df000017 	ldw	fp,0(sp)
10010010:	dec00204 	addi	sp,sp,8
10010014:	f800283a 	ret

10010018 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10010018:	defffb04 	addi	sp,sp,-20
1001001c:	dfc00415 	stw	ra,16(sp)
10010020:	df000315 	stw	fp,12(sp)
10010024:	df000304 	addi	fp,sp,12
10010028:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1001002c:	e0bfff17 	ldw	r2,-4(fp)
10010030:	10000816 	blt	r2,zero,10010054 <close+0x3c>
10010034:	01400304 	movi	r5,12
10010038:	e13fff17 	ldw	r4,-4(fp)
1001003c:	0001d400 	call	10001d40 <__mulsi3>
10010040:	1007883a 	mov	r3,r2
10010044:	00840074 	movhi	r2,4097
10010048:	108e6804 	addi	r2,r2,14752
1001004c:	1885883a 	add	r2,r3,r2
10010050:	00000106 	br	10010058 <close+0x40>
10010054:	0005883a 	mov	r2,zero
10010058:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1001005c:	e0bffd17 	ldw	r2,-12(fp)
10010060:	10001926 	beq	r2,zero,100100c8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10010064:	e0bffd17 	ldw	r2,-12(fp)
10010068:	10800017 	ldw	r2,0(r2)
1001006c:	10800417 	ldw	r2,16(r2)
10010070:	10000626 	beq	r2,zero,1001008c <close+0x74>
10010074:	e0bffd17 	ldw	r2,-12(fp)
10010078:	10800017 	ldw	r2,0(r2)
1001007c:	10800417 	ldw	r2,16(r2)
10010080:	e13ffd17 	ldw	r4,-12(fp)
10010084:	103ee83a 	callr	r2
10010088:	00000106 	br	10010090 <close+0x78>
1001008c:	0005883a 	mov	r2,zero
10010090:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10010094:	e13fff17 	ldw	r4,-4(fp)
10010098:	0010a040 	call	10010a04 <alt_release_fd>
    if (rval < 0)
1001009c:	e0bffe17 	ldw	r2,-8(fp)
100100a0:	1000070e 	bge	r2,zero,100100c0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
100100a4:	000ffdc0 	call	1000ffdc <alt_get_errno>
100100a8:	1007883a 	mov	r3,r2
100100ac:	e0bffe17 	ldw	r2,-8(fp)
100100b0:	0085c83a 	sub	r2,zero,r2
100100b4:	18800015 	stw	r2,0(r3)
      return -1;
100100b8:	00bfffc4 	movi	r2,-1
100100bc:	00000706 	br	100100dc <close+0xc4>
    }
    return 0;
100100c0:	0005883a 	mov	r2,zero
100100c4:	00000506 	br	100100dc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
100100c8:	000ffdc0 	call	1000ffdc <alt_get_errno>
100100cc:	1007883a 	mov	r3,r2
100100d0:	00801444 	movi	r2,81
100100d4:	18800015 	stw	r2,0(r3)
    return -1;
100100d8:	00bfffc4 	movi	r2,-1
  }
}
100100dc:	e037883a 	mov	sp,fp
100100e0:	dfc00117 	ldw	ra,4(sp)
100100e4:	df000017 	ldw	fp,0(sp)
100100e8:	dec00204 	addi	sp,sp,8
100100ec:	f800283a 	ret

100100f0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
100100f0:	defffc04 	addi	sp,sp,-16
100100f4:	df000315 	stw	fp,12(sp)
100100f8:	df000304 	addi	fp,sp,12
100100fc:	e13ffd15 	stw	r4,-12(fp)
10010100:	e17ffe15 	stw	r5,-8(fp)
10010104:	e1bfff15 	stw	r6,-4(fp)
  return len;
10010108:	e0bfff17 	ldw	r2,-4(fp)
}
1001010c:	e037883a 	mov	sp,fp
10010110:	df000017 	ldw	fp,0(sp)
10010114:	dec00104 	addi	sp,sp,4
10010118:	f800283a 	ret

1001011c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1001011c:	defffd04 	addi	sp,sp,-12
10010120:	df000215 	stw	fp,8(sp)
10010124:	df000204 	addi	fp,sp,8
10010128:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1001012c:	0001883a 	nop
10010130:	e0bfff17 	ldw	r2,-4(fp)
10010134:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10010138:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1001013c:	10000226 	beq	r2,zero,10010148 <_exit+0x2c>
    ALT_SIM_FAIL();
10010140:	002af070 	cmpltui	zero,zero,43969
10010144:	00000106 	br	1001014c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10010148:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1001014c:	003fff06 	br	1001014c <__alt_data_end+0xf801014c>

10010150 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010150:	defffe04 	addi	sp,sp,-8
10010154:	dfc00115 	stw	ra,4(sp)
10010158:	df000015 	stw	fp,0(sp)
1001015c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010160:	d0a00b17 	ldw	r2,-32724(gp)
10010164:	10000326 	beq	r2,zero,10010174 <alt_get_errno+0x24>
10010168:	d0a00b17 	ldw	r2,-32724(gp)
1001016c:	103ee83a 	callr	r2
10010170:	00000106 	br	10010178 <alt_get_errno+0x28>
10010174:	d0a73704 	addi	r2,gp,-25380
}
10010178:	e037883a 	mov	sp,fp
1001017c:	dfc00117 	ldw	ra,4(sp)
10010180:	df000017 	ldw	fp,0(sp)
10010184:	dec00204 	addi	sp,sp,8
10010188:	f800283a 	ret

1001018c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1001018c:	defffb04 	addi	sp,sp,-20
10010190:	dfc00415 	stw	ra,16(sp)
10010194:	df000315 	stw	fp,12(sp)
10010198:	df000304 	addi	fp,sp,12
1001019c:	e13ffe15 	stw	r4,-8(fp)
100101a0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100101a4:	e0bffe17 	ldw	r2,-8(fp)
100101a8:	10000816 	blt	r2,zero,100101cc <fstat+0x40>
100101ac:	01400304 	movi	r5,12
100101b0:	e13ffe17 	ldw	r4,-8(fp)
100101b4:	0001d400 	call	10001d40 <__mulsi3>
100101b8:	1007883a 	mov	r3,r2
100101bc:	00840074 	movhi	r2,4097
100101c0:	108e6804 	addi	r2,r2,14752
100101c4:	1885883a 	add	r2,r3,r2
100101c8:	00000106 	br	100101d0 <fstat+0x44>
100101cc:	0005883a 	mov	r2,zero
100101d0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
100101d4:	e0bffd17 	ldw	r2,-12(fp)
100101d8:	10001026 	beq	r2,zero,1001021c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
100101dc:	e0bffd17 	ldw	r2,-12(fp)
100101e0:	10800017 	ldw	r2,0(r2)
100101e4:	10800817 	ldw	r2,32(r2)
100101e8:	10000726 	beq	r2,zero,10010208 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
100101ec:	e0bffd17 	ldw	r2,-12(fp)
100101f0:	10800017 	ldw	r2,0(r2)
100101f4:	10800817 	ldw	r2,32(r2)
100101f8:	e17fff17 	ldw	r5,-4(fp)
100101fc:	e13ffd17 	ldw	r4,-12(fp)
10010200:	103ee83a 	callr	r2
10010204:	00000a06 	br	10010230 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10010208:	e0bfff17 	ldw	r2,-4(fp)
1001020c:	00c80004 	movi	r3,8192
10010210:	10c00115 	stw	r3,4(r2)
      return 0;
10010214:	0005883a 	mov	r2,zero
10010218:	00000506 	br	10010230 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1001021c:	00101500 	call	10010150 <alt_get_errno>
10010220:	1007883a 	mov	r3,r2
10010224:	00801444 	movi	r2,81
10010228:	18800015 	stw	r2,0(r3)
    return -1;
1001022c:	00bfffc4 	movi	r2,-1
  }
}
10010230:	e037883a 	mov	sp,fp
10010234:	dfc00117 	ldw	ra,4(sp)
10010238:	df000017 	ldw	fp,0(sp)
1001023c:	dec00204 	addi	sp,sp,8
10010240:	f800283a 	ret

10010244 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
10010244:	deffff04 	addi	sp,sp,-4
10010248:	df000015 	stw	fp,0(sp)
1001024c:	d839883a 	mov	fp,sp
  return 0;
10010250:	0005883a 	mov	r2,zero
}
10010254:	e037883a 	mov	sp,fp
10010258:	df000017 	ldw	fp,0(sp)
1001025c:	dec00104 	addi	sp,sp,4
10010260:	f800283a 	ret

10010264 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010264:	defffe04 	addi	sp,sp,-8
10010268:	dfc00115 	stw	ra,4(sp)
1001026c:	df000015 	stw	fp,0(sp)
10010270:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010274:	d0a00b17 	ldw	r2,-32724(gp)
10010278:	10000326 	beq	r2,zero,10010288 <alt_get_errno+0x24>
1001027c:	d0a00b17 	ldw	r2,-32724(gp)
10010280:	103ee83a 	callr	r2
10010284:	00000106 	br	1001028c <alt_get_errno+0x28>
10010288:	d0a73704 	addi	r2,gp,-25380
}
1001028c:	e037883a 	mov	sp,fp
10010290:	dfc00117 	ldw	ra,4(sp)
10010294:	df000017 	ldw	fp,0(sp)
10010298:	dec00204 	addi	sp,sp,8
1001029c:	f800283a 	ret

100102a0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
100102a0:	deffed04 	addi	sp,sp,-76
100102a4:	dfc01215 	stw	ra,72(sp)
100102a8:	df001115 	stw	fp,68(sp)
100102ac:	df001104 	addi	fp,sp,68
100102b0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100102b4:	e0bfff17 	ldw	r2,-4(fp)
100102b8:	10000816 	blt	r2,zero,100102dc <isatty+0x3c>
100102bc:	01400304 	movi	r5,12
100102c0:	e13fff17 	ldw	r4,-4(fp)
100102c4:	0001d400 	call	10001d40 <__mulsi3>
100102c8:	1007883a 	mov	r3,r2
100102cc:	00840074 	movhi	r2,4097
100102d0:	108e6804 	addi	r2,r2,14752
100102d4:	1885883a 	add	r2,r3,r2
100102d8:	00000106 	br	100102e0 <isatty+0x40>
100102dc:	0005883a 	mov	r2,zero
100102e0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
100102e4:	e0bfef17 	ldw	r2,-68(fp)
100102e8:	10000e26 	beq	r2,zero,10010324 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
100102ec:	e0bfef17 	ldw	r2,-68(fp)
100102f0:	10800017 	ldw	r2,0(r2)
100102f4:	10800817 	ldw	r2,32(r2)
100102f8:	1000021e 	bne	r2,zero,10010304 <isatty+0x64>
    {
      return 1;
100102fc:	00800044 	movi	r2,1
10010300:	00000d06 	br	10010338 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10010304:	e0bff004 	addi	r2,fp,-64
10010308:	100b883a 	mov	r5,r2
1001030c:	e13fff17 	ldw	r4,-4(fp)
10010310:	001018c0 	call	1001018c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10010314:	e0bff117 	ldw	r2,-60(fp)
10010318:	10880020 	cmpeqi	r2,r2,8192
1001031c:	10803fcc 	andi	r2,r2,255
10010320:	00000506 	br	10010338 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10010324:	00102640 	call	10010264 <alt_get_errno>
10010328:	1007883a 	mov	r3,r2
1001032c:	00801444 	movi	r2,81
10010330:	18800015 	stw	r2,0(r3)
    return 0;
10010334:	0005883a 	mov	r2,zero
  }
}
10010338:	e037883a 	mov	sp,fp
1001033c:	dfc00117 	ldw	ra,4(sp)
10010340:	df000017 	ldw	fp,0(sp)
10010344:	dec00204 	addi	sp,sp,8
10010348:	f800283a 	ret

1001034c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001034c:	defffe04 	addi	sp,sp,-8
10010350:	dfc00115 	stw	ra,4(sp)
10010354:	df000015 	stw	fp,0(sp)
10010358:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001035c:	d0a00b17 	ldw	r2,-32724(gp)
10010360:	10000326 	beq	r2,zero,10010370 <alt_get_errno+0x24>
10010364:	d0a00b17 	ldw	r2,-32724(gp)
10010368:	103ee83a 	callr	r2
1001036c:	00000106 	br	10010374 <alt_get_errno+0x28>
10010370:	d0a73704 	addi	r2,gp,-25380
}
10010374:	e037883a 	mov	sp,fp
10010378:	dfc00117 	ldw	ra,4(sp)
1001037c:	df000017 	ldw	fp,0(sp)
10010380:	dec00204 	addi	sp,sp,8
10010384:	f800283a 	ret

10010388 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
10010388:	defffb04 	addi	sp,sp,-20
1001038c:	dfc00415 	stw	ra,16(sp)
10010390:	df000315 	stw	fp,12(sp)
10010394:	df000304 	addi	fp,sp,12
10010398:	e13ffe15 	stw	r4,-8(fp)
1001039c:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
100103a0:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
100103a4:	e0bffe17 	ldw	r2,-8(fp)
100103a8:	00802f16 	blt	zero,r2,10010468 <kill+0xe0>
  {
    switch (sig)
100103ac:	e0bfff17 	ldw	r2,-4(fp)
100103b0:	10800828 	cmpgeui	r2,r2,32
100103b4:	1000291e 	bne	r2,zero,1001045c <kill+0xd4>
100103b8:	e0bfff17 	ldw	r2,-4(fp)
100103bc:	100690ba 	slli	r3,r2,2
100103c0:	00840074 	movhi	r2,4097
100103c4:	1080f504 	addi	r2,r2,980
100103c8:	1885883a 	add	r2,r3,r2
100103cc:	10800017 	ldw	r2,0(r2)
100103d0:	1000683a 	jmp	r2
100103d4:	1001047c 	xorhi	zero,r2,1041
100103d8:	1001045c 	xori	zero,r2,1041
100103dc:	1001045c 	xori	zero,r2,1041
100103e0:	10010454 	ori	zero,r2,1041
100103e4:	10010454 	ori	zero,r2,1041
100103e8:	10010454 	ori	zero,r2,1041
100103ec:	10010454 	ori	zero,r2,1041
100103f0:	1001045c 	xori	zero,r2,1041
100103f4:	10010454 	ori	zero,r2,1041
100103f8:	10010454 	ori	zero,r2,1041
100103fc:	10010454 	ori	zero,r2,1041
10010400:	10010454 	ori	zero,r2,1041
10010404:	10010454 	ori	zero,r2,1041
10010408:	10010454 	ori	zero,r2,1041
1001040c:	10010454 	ori	zero,r2,1041
10010410:	10010454 	ori	zero,r2,1041
10010414:	1001047c 	xorhi	zero,r2,1041
10010418:	1001045c 	xori	zero,r2,1041
1001041c:	1001045c 	xori	zero,r2,1041
10010420:	1001045c 	xori	zero,r2,1041
10010424:	1001047c 	xorhi	zero,r2,1041
10010428:	1001045c 	xori	zero,r2,1041
1001042c:	1001045c 	xori	zero,r2,1041
10010430:	10010454 	ori	zero,r2,1041
10010434:	10010454 	ori	zero,r2,1041
10010438:	10010454 	ori	zero,r2,1041
1001043c:	10010454 	ori	zero,r2,1041
10010440:	10010454 	ori	zero,r2,1041
10010444:	1001045c 	xori	zero,r2,1041
10010448:	1001045c 	xori	zero,r2,1041
1001044c:	10010454 	ori	zero,r2,1041
10010450:	10010454 	ori	zero,r2,1041
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
10010454:	0009883a 	mov	r4,zero
10010458:	001011c0 	call	1001011c <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
1001045c:	00800584 	movi	r2,22
10010460:	e0bffd15 	stw	r2,-12(fp)
10010464:	00000606 	br	10010480 <kill+0xf8>
    }
  }

  else if (pid > 0)
10010468:	e0bffe17 	ldw	r2,-8(fp)
1001046c:	0080040e 	bge	zero,r2,10010480 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
10010470:	008000c4 	movi	r2,3
10010474:	e0bffd15 	stw	r2,-12(fp)
10010478:	00000106 	br	10010480 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
1001047c:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
10010480:	e0bffd17 	ldw	r2,-12(fp)
10010484:	10000626 	beq	r2,zero,100104a0 <kill+0x118>
  {
    ALT_ERRNO = status;
10010488:	001034c0 	call	1001034c <alt_get_errno>
1001048c:	1007883a 	mov	r3,r2
10010490:	e0bffd17 	ldw	r2,-12(fp)
10010494:	18800015 	stw	r2,0(r3)
    return -1;
10010498:	00bfffc4 	movi	r2,-1
1001049c:	00000106 	br	100104a4 <kill+0x11c>
  }

  return 0;
100104a0:	0005883a 	mov	r2,zero
}
100104a4:	e037883a 	mov	sp,fp
100104a8:	dfc00117 	ldw	ra,4(sp)
100104ac:	df000017 	ldw	fp,0(sp)
100104b0:	dec00204 	addi	sp,sp,8
100104b4:	f800283a 	ret

100104b8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
100104b8:	defffc04 	addi	sp,sp,-16
100104bc:	df000315 	stw	fp,12(sp)
100104c0:	df000304 	addi	fp,sp,12
100104c4:	e13ffd15 	stw	r4,-12(fp)
100104c8:	e17ffe15 	stw	r5,-8(fp)
100104cc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
100104d0:	e0fffe17 	ldw	r3,-8(fp)
100104d4:	e0bffd17 	ldw	r2,-12(fp)
100104d8:	18800c26 	beq	r3,r2,1001050c <alt_load_section+0x54>
  {
    while( to != end )
100104dc:	00000806 	br	10010500 <alt_load_section+0x48>
    {
      *to++ = *from++;
100104e0:	e0bffe17 	ldw	r2,-8(fp)
100104e4:	10c00104 	addi	r3,r2,4
100104e8:	e0fffe15 	stw	r3,-8(fp)
100104ec:	e0fffd17 	ldw	r3,-12(fp)
100104f0:	19000104 	addi	r4,r3,4
100104f4:	e13ffd15 	stw	r4,-12(fp)
100104f8:	18c00017 	ldw	r3,0(r3)
100104fc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10010500:	e0fffe17 	ldw	r3,-8(fp)
10010504:	e0bfff17 	ldw	r2,-4(fp)
10010508:	18bff51e 	bne	r3,r2,100104e0 <__alt_data_end+0xf80104e0>
    {
      *to++ = *from++;
    }
  }
}
1001050c:	0001883a 	nop
10010510:	e037883a 	mov	sp,fp
10010514:	df000017 	ldw	fp,0(sp)
10010518:	dec00104 	addi	sp,sp,4
1001051c:	f800283a 	ret

10010520 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10010520:	defffe04 	addi	sp,sp,-8
10010524:	dfc00115 	stw	ra,4(sp)
10010528:	df000015 	stw	fp,0(sp)
1001052c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10010530:	01840074 	movhi	r6,4097
10010534:	31930c04 	addi	r6,r6,19504
10010538:	01440074 	movhi	r5,4097
1001053c:	294bf804 	addi	r5,r5,12256
10010540:	01040074 	movhi	r4,4097
10010544:	21130c04 	addi	r4,r4,19504
10010548:	00104b80 	call	100104b8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1001054c:	01840034 	movhi	r6,4096
10010550:	31808c04 	addi	r6,r6,560
10010554:	01440034 	movhi	r5,4096
10010558:	29400804 	addi	r5,r5,32
1001055c:	01040034 	movhi	r4,4096
10010560:	21000804 	addi	r4,r4,32
10010564:	00104b80 	call	100104b8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10010568:	01840074 	movhi	r6,4097
1001056c:	318bf804 	addi	r6,r6,12256
10010570:	01440074 	movhi	r5,4097
10010574:	294a8604 	addi	r5,r5,10776
10010578:	01040074 	movhi	r4,4097
1001057c:	210a8604 	addi	r4,r4,10776
10010580:	00104b80 	call	100104b8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10010584:	0011d500 	call	10011d50 <alt_dcache_flush_all>
  alt_icache_flush_all();
10010588:	00121ec0 	call	100121ec <alt_icache_flush_all>
}
1001058c:	0001883a 	nop
10010590:	e037883a 	mov	sp,fp
10010594:	dfc00117 	ldw	ra,4(sp)
10010598:	df000017 	ldw	fp,0(sp)
1001059c:	dec00204 	addi	sp,sp,8
100105a0:	f800283a 	ret

100105a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100105a4:	defffe04 	addi	sp,sp,-8
100105a8:	dfc00115 	stw	ra,4(sp)
100105ac:	df000015 	stw	fp,0(sp)
100105b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100105b4:	d0a00b17 	ldw	r2,-32724(gp)
100105b8:	10000326 	beq	r2,zero,100105c8 <alt_get_errno+0x24>
100105bc:	d0a00b17 	ldw	r2,-32724(gp)
100105c0:	103ee83a 	callr	r2
100105c4:	00000106 	br	100105cc <alt_get_errno+0x28>
100105c8:	d0a73704 	addi	r2,gp,-25380
}
100105cc:	e037883a 	mov	sp,fp
100105d0:	dfc00117 	ldw	ra,4(sp)
100105d4:	df000017 	ldw	fp,0(sp)
100105d8:	dec00204 	addi	sp,sp,8
100105dc:	f800283a 	ret

100105e0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
100105e0:	defff904 	addi	sp,sp,-28
100105e4:	dfc00615 	stw	ra,24(sp)
100105e8:	df000515 	stw	fp,20(sp)
100105ec:	df000504 	addi	fp,sp,20
100105f0:	e13ffd15 	stw	r4,-12(fp)
100105f4:	e17ffe15 	stw	r5,-8(fp)
100105f8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
100105fc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10010600:	e0bffd17 	ldw	r2,-12(fp)
10010604:	10000816 	blt	r2,zero,10010628 <lseek+0x48>
10010608:	01400304 	movi	r5,12
1001060c:	e13ffd17 	ldw	r4,-12(fp)
10010610:	0001d400 	call	10001d40 <__mulsi3>
10010614:	1007883a 	mov	r3,r2
10010618:	00840074 	movhi	r2,4097
1001061c:	108e6804 	addi	r2,r2,14752
10010620:	1885883a 	add	r2,r3,r2
10010624:	00000106 	br	1001062c <lseek+0x4c>
10010628:	0005883a 	mov	r2,zero
1001062c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10010630:	e0bffc17 	ldw	r2,-16(fp)
10010634:	10001026 	beq	r2,zero,10010678 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10010638:	e0bffc17 	ldw	r2,-16(fp)
1001063c:	10800017 	ldw	r2,0(r2)
10010640:	10800717 	ldw	r2,28(r2)
10010644:	10000926 	beq	r2,zero,1001066c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10010648:	e0bffc17 	ldw	r2,-16(fp)
1001064c:	10800017 	ldw	r2,0(r2)
10010650:	10800717 	ldw	r2,28(r2)
10010654:	e1bfff17 	ldw	r6,-4(fp)
10010658:	e17ffe17 	ldw	r5,-8(fp)
1001065c:	e13ffc17 	ldw	r4,-16(fp)
10010660:	103ee83a 	callr	r2
10010664:	e0bffb15 	stw	r2,-20(fp)
10010668:	00000506 	br	10010680 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1001066c:	00bfde84 	movi	r2,-134
10010670:	e0bffb15 	stw	r2,-20(fp)
10010674:	00000206 	br	10010680 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
10010678:	00bfebc4 	movi	r2,-81
1001067c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
10010680:	e0bffb17 	ldw	r2,-20(fp)
10010684:	1000070e 	bge	r2,zero,100106a4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
10010688:	00105a40 	call	100105a4 <alt_get_errno>
1001068c:	1007883a 	mov	r3,r2
10010690:	e0bffb17 	ldw	r2,-20(fp)
10010694:	0085c83a 	sub	r2,zero,r2
10010698:	18800015 	stw	r2,0(r3)
    rc = -1;
1001069c:	00bfffc4 	movi	r2,-1
100106a0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
100106a4:	e0bffb17 	ldw	r2,-20(fp)
}
100106a8:	e037883a 	mov	sp,fp
100106ac:	dfc00117 	ldw	ra,4(sp)
100106b0:	df000017 	ldw	fp,0(sp)
100106b4:	dec00204 	addi	sp,sp,8
100106b8:	f800283a 	ret

100106bc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
100106bc:	defffd04 	addi	sp,sp,-12
100106c0:	dfc00215 	stw	ra,8(sp)
100106c4:	df000115 	stw	fp,4(sp)
100106c8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
100106cc:	0009883a 	mov	r4,zero
100106d0:	0010ca80 	call	10010ca8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
100106d4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
100106d8:	0010ce00 	call	10010ce0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
100106dc:	01840074 	movhi	r6,4097
100106e0:	318beb04 	addi	r6,r6,12204
100106e4:	01440074 	movhi	r5,4097
100106e8:	294beb04 	addi	r5,r5,12204
100106ec:	01040074 	movhi	r4,4097
100106f0:	210beb04 	addi	r4,r4,12204
100106f4:	00125900 	call	10012590 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
100106f8:	0011e500 	call	10011e50 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
100106fc:	01040074 	movhi	r4,4097
10010700:	2107ac04 	addi	r4,r4,7856
10010704:	00128700 	call	10012870 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10010708:	d0a73e17 	ldw	r2,-25352(gp)
1001070c:	d0e73f17 	ldw	r3,-25348(gp)
10010710:	d1274017 	ldw	r4,-25344(gp)
10010714:	200d883a 	mov	r6,r4
10010718:	180b883a 	mov	r5,r3
1001071c:	1009883a 	mov	r4,r2
10010720:	0000cc80 	call	10000cc8 <main>
10010724:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10010728:	01000044 	movi	r4,1
1001072c:	00100180 	call	10010018 <close>
  exit (result);
10010730:	e13fff17 	ldw	r4,-4(fp)
10010734:	0001ed80 	call	10001ed8 <exit>

10010738 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10010738:	defffe04 	addi	sp,sp,-8
1001073c:	df000115 	stw	fp,4(sp)
10010740:	df000104 	addi	fp,sp,4
10010744:	e13fff15 	stw	r4,-4(fp)
}
10010748:	0001883a 	nop
1001074c:	e037883a 	mov	sp,fp
10010750:	df000017 	ldw	fp,0(sp)
10010754:	dec00104 	addi	sp,sp,4
10010758:	f800283a 	ret

1001075c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1001075c:	defffe04 	addi	sp,sp,-8
10010760:	df000115 	stw	fp,4(sp)
10010764:	df000104 	addi	fp,sp,4
10010768:	e13fff15 	stw	r4,-4(fp)
}
1001076c:	0001883a 	nop
10010770:	e037883a 	mov	sp,fp
10010774:	df000017 	ldw	fp,0(sp)
10010778:	dec00104 	addi	sp,sp,4
1001077c:	f800283a 	ret

10010780 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010780:	defffe04 	addi	sp,sp,-8
10010784:	dfc00115 	stw	ra,4(sp)
10010788:	df000015 	stw	fp,0(sp)
1001078c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010790:	d0a00b17 	ldw	r2,-32724(gp)
10010794:	10000326 	beq	r2,zero,100107a4 <alt_get_errno+0x24>
10010798:	d0a00b17 	ldw	r2,-32724(gp)
1001079c:	103ee83a 	callr	r2
100107a0:	00000106 	br	100107a8 <alt_get_errno+0x28>
100107a4:	d0a73704 	addi	r2,gp,-25380
}
100107a8:	e037883a 	mov	sp,fp
100107ac:	dfc00117 	ldw	ra,4(sp)
100107b0:	df000017 	ldw	fp,0(sp)
100107b4:	dec00204 	addi	sp,sp,8
100107b8:	f800283a 	ret

100107bc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
100107bc:	defffb04 	addi	sp,sp,-20
100107c0:	dfc00415 	stw	ra,16(sp)
100107c4:	df000315 	stw	fp,12(sp)
100107c8:	dc000215 	stw	r16,8(sp)
100107cc:	df000304 	addi	fp,sp,12
100107d0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
100107d4:	e0bffe17 	ldw	r2,-8(fp)
100107d8:	10800217 	ldw	r2,8(r2)
100107dc:	10d00034 	orhi	r3,r2,16384
100107e0:	e0bffe17 	ldw	r2,-8(fp)
100107e4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100107e8:	e03ffd15 	stw	zero,-12(fp)
100107ec:	00002306 	br	1001087c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100107f0:	04040074 	movhi	r16,4097
100107f4:	840e6804 	addi	r16,r16,14752
100107f8:	e0bffd17 	ldw	r2,-12(fp)
100107fc:	01400304 	movi	r5,12
10010800:	1009883a 	mov	r4,r2
10010804:	0001d400 	call	10001d40 <__mulsi3>
10010808:	8085883a 	add	r2,r16,r2
1001080c:	10c00017 	ldw	r3,0(r2)
10010810:	e0bffe17 	ldw	r2,-8(fp)
10010814:	10800017 	ldw	r2,0(r2)
10010818:	1880151e 	bne	r3,r2,10010870 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1001081c:	04040074 	movhi	r16,4097
10010820:	840e6804 	addi	r16,r16,14752
10010824:	e0bffd17 	ldw	r2,-12(fp)
10010828:	01400304 	movi	r5,12
1001082c:	1009883a 	mov	r4,r2
10010830:	0001d400 	call	10001d40 <__mulsi3>
10010834:	8085883a 	add	r2,r16,r2
10010838:	10800204 	addi	r2,r2,8
1001083c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10010840:	10000b0e 	bge	r2,zero,10010870 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10010844:	01400304 	movi	r5,12
10010848:	e13ffd17 	ldw	r4,-12(fp)
1001084c:	0001d400 	call	10001d40 <__mulsi3>
10010850:	1007883a 	mov	r3,r2
10010854:	00840074 	movhi	r2,4097
10010858:	108e6804 	addi	r2,r2,14752
1001085c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10010860:	e0bffe17 	ldw	r2,-8(fp)
10010864:	18800226 	beq	r3,r2,10010870 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10010868:	00bffcc4 	movi	r2,-13
1001086c:	00000806 	br	10010890 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10010870:	e0bffd17 	ldw	r2,-12(fp)
10010874:	10800044 	addi	r2,r2,1
10010878:	e0bffd15 	stw	r2,-12(fp)
1001087c:	d0a00a17 	ldw	r2,-32728(gp)
10010880:	1007883a 	mov	r3,r2
10010884:	e0bffd17 	ldw	r2,-12(fp)
10010888:	18bfd92e 	bgeu	r3,r2,100107f0 <__alt_data_end+0xf80107f0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1001088c:	0005883a 	mov	r2,zero
}
10010890:	e6ffff04 	addi	sp,fp,-4
10010894:	dfc00217 	ldw	ra,8(sp)
10010898:	df000117 	ldw	fp,4(sp)
1001089c:	dc000017 	ldw	r16,0(sp)
100108a0:	dec00304 	addi	sp,sp,12
100108a4:	f800283a 	ret

100108a8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
100108a8:	defff604 	addi	sp,sp,-40
100108ac:	dfc00915 	stw	ra,36(sp)
100108b0:	df000815 	stw	fp,32(sp)
100108b4:	df000804 	addi	fp,sp,32
100108b8:	e13ffd15 	stw	r4,-12(fp)
100108bc:	e17ffe15 	stw	r5,-8(fp)
100108c0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
100108c4:	00bfffc4 	movi	r2,-1
100108c8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
100108cc:	00bffb44 	movi	r2,-19
100108d0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
100108d4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
100108d8:	d1600804 	addi	r5,gp,-32736
100108dc:	e13ffd17 	ldw	r4,-12(fp)
100108e0:	0011f100 	call	10011f10 <alt_find_dev>
100108e4:	e0bff815 	stw	r2,-32(fp)
100108e8:	e0bff817 	ldw	r2,-32(fp)
100108ec:	1000051e 	bne	r2,zero,10010904 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
100108f0:	e13ffd17 	ldw	r4,-12(fp)
100108f4:	0011fa00 	call	10011fa0 <alt_find_file>
100108f8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
100108fc:	00800044 	movi	r2,1
10010900:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10010904:	e0bff817 	ldw	r2,-32(fp)
10010908:	10002b26 	beq	r2,zero,100109b8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
1001090c:	e13ff817 	ldw	r4,-32(fp)
10010910:	00121280 	call	10012128 <alt_get_fd>
10010914:	e0bff915 	stw	r2,-28(fp)
10010918:	e0bff917 	ldw	r2,-28(fp)
1001091c:	1000030e 	bge	r2,zero,1001092c <open+0x84>
    {
      status = index;
10010920:	e0bff917 	ldw	r2,-28(fp)
10010924:	e0bffa15 	stw	r2,-24(fp)
10010928:	00002506 	br	100109c0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
1001092c:	01400304 	movi	r5,12
10010930:	e13ff917 	ldw	r4,-28(fp)
10010934:	0001d400 	call	10001d40 <__mulsi3>
10010938:	1007883a 	mov	r3,r2
1001093c:	00840074 	movhi	r2,4097
10010940:	108e6804 	addi	r2,r2,14752
10010944:	1885883a 	add	r2,r3,r2
10010948:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1001094c:	e0fffe17 	ldw	r3,-8(fp)
10010950:	00900034 	movhi	r2,16384
10010954:	10bfffc4 	addi	r2,r2,-1
10010958:	1886703a 	and	r3,r3,r2
1001095c:	e0bffc17 	ldw	r2,-16(fp)
10010960:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10010964:	e0bffb17 	ldw	r2,-20(fp)
10010968:	1000051e 	bne	r2,zero,10010980 <open+0xd8>
1001096c:	e13ffc17 	ldw	r4,-16(fp)
10010970:	00107bc0 	call	100107bc <alt_file_locked>
10010974:	e0bffa15 	stw	r2,-24(fp)
10010978:	e0bffa17 	ldw	r2,-24(fp)
1001097c:	10001016 	blt	r2,zero,100109c0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10010980:	e0bff817 	ldw	r2,-32(fp)
10010984:	10800317 	ldw	r2,12(r2)
10010988:	10000826 	beq	r2,zero,100109ac <open+0x104>
1001098c:	e0bff817 	ldw	r2,-32(fp)
10010990:	10800317 	ldw	r2,12(r2)
10010994:	e1ffff17 	ldw	r7,-4(fp)
10010998:	e1bffe17 	ldw	r6,-8(fp)
1001099c:	e17ffd17 	ldw	r5,-12(fp)
100109a0:	e13ffc17 	ldw	r4,-16(fp)
100109a4:	103ee83a 	callr	r2
100109a8:	00000106 	br	100109b0 <open+0x108>
100109ac:	0005883a 	mov	r2,zero
100109b0:	e0bffa15 	stw	r2,-24(fp)
100109b4:	00000206 	br	100109c0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
100109b8:	00bffb44 	movi	r2,-19
100109bc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
100109c0:	e0bffa17 	ldw	r2,-24(fp)
100109c4:	1000090e 	bge	r2,zero,100109ec <open+0x144>
  {
    alt_release_fd (index);  
100109c8:	e13ff917 	ldw	r4,-28(fp)
100109cc:	0010a040 	call	10010a04 <alt_release_fd>
    ALT_ERRNO = -status;
100109d0:	00107800 	call	10010780 <alt_get_errno>
100109d4:	1007883a 	mov	r3,r2
100109d8:	e0bffa17 	ldw	r2,-24(fp)
100109dc:	0085c83a 	sub	r2,zero,r2
100109e0:	18800015 	stw	r2,0(r3)
    return -1;
100109e4:	00bfffc4 	movi	r2,-1
100109e8:	00000106 	br	100109f0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
100109ec:	e0bff917 	ldw	r2,-28(fp)
}
100109f0:	e037883a 	mov	sp,fp
100109f4:	dfc00117 	ldw	ra,4(sp)
100109f8:	df000017 	ldw	fp,0(sp)
100109fc:	dec00204 	addi	sp,sp,8
10010a00:	f800283a 	ret

10010a04 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10010a04:	defffc04 	addi	sp,sp,-16
10010a08:	dfc00315 	stw	ra,12(sp)
10010a0c:	df000215 	stw	fp,8(sp)
10010a10:	dc000115 	stw	r16,4(sp)
10010a14:	df000204 	addi	fp,sp,8
10010a18:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10010a1c:	e0bffe17 	ldw	r2,-8(fp)
10010a20:	108000d0 	cmplti	r2,r2,3
10010a24:	1000111e 	bne	r2,zero,10010a6c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10010a28:	04040074 	movhi	r16,4097
10010a2c:	840e6804 	addi	r16,r16,14752
10010a30:	e0bffe17 	ldw	r2,-8(fp)
10010a34:	01400304 	movi	r5,12
10010a38:	1009883a 	mov	r4,r2
10010a3c:	0001d400 	call	10001d40 <__mulsi3>
10010a40:	8085883a 	add	r2,r16,r2
10010a44:	10800204 	addi	r2,r2,8
10010a48:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10010a4c:	04040074 	movhi	r16,4097
10010a50:	840e6804 	addi	r16,r16,14752
10010a54:	e0bffe17 	ldw	r2,-8(fp)
10010a58:	01400304 	movi	r5,12
10010a5c:	1009883a 	mov	r4,r2
10010a60:	0001d400 	call	10001d40 <__mulsi3>
10010a64:	8085883a 	add	r2,r16,r2
10010a68:	10000015 	stw	zero,0(r2)
  }
}
10010a6c:	0001883a 	nop
10010a70:	e6ffff04 	addi	sp,fp,-4
10010a74:	dfc00217 	ldw	ra,8(sp)
10010a78:	df000117 	ldw	fp,4(sp)
10010a7c:	dc000017 	ldw	r16,0(sp)
10010a80:	dec00304 	addi	sp,sp,12
10010a84:	f800283a 	ret

10010a88 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10010a88:	defff904 	addi	sp,sp,-28
10010a8c:	df000615 	stw	fp,24(sp)
10010a90:	df000604 	addi	fp,sp,24
10010a94:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010a98:	0005303a 	rdctl	r2,status
10010a9c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010aa0:	e0fffe17 	ldw	r3,-8(fp)
10010aa4:	00bfff84 	movi	r2,-2
10010aa8:	1884703a 	and	r2,r3,r2
10010aac:	1001703a 	wrctl	status,r2
  
  return context;
10010ab0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10010ab4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10010ab8:	d0a00c17 	ldw	r2,-32720(gp)
10010abc:	10c000c4 	addi	r3,r2,3
10010ac0:	00bfff04 	movi	r2,-4
10010ac4:	1884703a 	and	r2,r3,r2
10010ac8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10010acc:	d0e00c17 	ldw	r3,-32720(gp)
10010ad0:	e0bfff17 	ldw	r2,-4(fp)
10010ad4:	1887883a 	add	r3,r3,r2
10010ad8:	00860034 	movhi	r2,6144
10010adc:	10800004 	addi	r2,r2,0
10010ae0:	10c0062e 	bgeu	r2,r3,10010afc <sbrk+0x74>
10010ae4:	e0bffb17 	ldw	r2,-20(fp)
10010ae8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010aec:	e0bffa17 	ldw	r2,-24(fp)
10010af0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10010af4:	00bfffc4 	movi	r2,-1
10010af8:	00000b06 	br	10010b28 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10010afc:	d0a00c17 	ldw	r2,-32720(gp)
10010b00:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
10010b04:	d0e00c17 	ldw	r3,-32720(gp)
10010b08:	e0bfff17 	ldw	r2,-4(fp)
10010b0c:	1885883a 	add	r2,r3,r2
10010b10:	d0a00c15 	stw	r2,-32720(gp)
10010b14:	e0bffb17 	ldw	r2,-20(fp)
10010b18:	e0bffc15 	stw	r2,-16(fp)
10010b1c:	e0bffc17 	ldw	r2,-16(fp)
10010b20:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10010b24:	e0bffd17 	ldw	r2,-12(fp)
} 
10010b28:	e037883a 	mov	sp,fp
10010b2c:	df000017 	ldw	fp,0(sp)
10010b30:	dec00104 	addi	sp,sp,4
10010b34:	f800283a 	ret

10010b38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010b38:	defffe04 	addi	sp,sp,-8
10010b3c:	dfc00115 	stw	ra,4(sp)
10010b40:	df000015 	stw	fp,0(sp)
10010b44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010b48:	d0a00b17 	ldw	r2,-32724(gp)
10010b4c:	10000326 	beq	r2,zero,10010b5c <alt_get_errno+0x24>
10010b50:	d0a00b17 	ldw	r2,-32724(gp)
10010b54:	103ee83a 	callr	r2
10010b58:	00000106 	br	10010b60 <alt_get_errno+0x28>
10010b5c:	d0a73704 	addi	r2,gp,-25380
}
10010b60:	e037883a 	mov	sp,fp
10010b64:	dfc00117 	ldw	ra,4(sp)
10010b68:	df000017 	ldw	fp,0(sp)
10010b6c:	dec00204 	addi	sp,sp,8
10010b70:	f800283a 	ret

10010b74 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10010b74:	defff904 	addi	sp,sp,-28
10010b78:	dfc00615 	stw	ra,24(sp)
10010b7c:	df000515 	stw	fp,20(sp)
10010b80:	df000504 	addi	fp,sp,20
10010b84:	e13ffd15 	stw	r4,-12(fp)
10010b88:	e17ffe15 	stw	r5,-8(fp)
10010b8c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10010b90:	e0bffd17 	ldw	r2,-12(fp)
10010b94:	10000816 	blt	r2,zero,10010bb8 <write+0x44>
10010b98:	01400304 	movi	r5,12
10010b9c:	e13ffd17 	ldw	r4,-12(fp)
10010ba0:	0001d400 	call	10001d40 <__mulsi3>
10010ba4:	1007883a 	mov	r3,r2
10010ba8:	00840074 	movhi	r2,4097
10010bac:	108e6804 	addi	r2,r2,14752
10010bb0:	1885883a 	add	r2,r3,r2
10010bb4:	00000106 	br	10010bbc <write+0x48>
10010bb8:	0005883a 	mov	r2,zero
10010bbc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10010bc0:	e0bffb17 	ldw	r2,-20(fp)
10010bc4:	10002126 	beq	r2,zero,10010c4c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10010bc8:	e0bffb17 	ldw	r2,-20(fp)
10010bcc:	10800217 	ldw	r2,8(r2)
10010bd0:	108000cc 	andi	r2,r2,3
10010bd4:	10001826 	beq	r2,zero,10010c38 <write+0xc4>
10010bd8:	e0bffb17 	ldw	r2,-20(fp)
10010bdc:	10800017 	ldw	r2,0(r2)
10010be0:	10800617 	ldw	r2,24(r2)
10010be4:	10001426 	beq	r2,zero,10010c38 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10010be8:	e0bffb17 	ldw	r2,-20(fp)
10010bec:	10800017 	ldw	r2,0(r2)
10010bf0:	10800617 	ldw	r2,24(r2)
10010bf4:	e0ffff17 	ldw	r3,-4(fp)
10010bf8:	180d883a 	mov	r6,r3
10010bfc:	e17ffe17 	ldw	r5,-8(fp)
10010c00:	e13ffb17 	ldw	r4,-20(fp)
10010c04:	103ee83a 	callr	r2
10010c08:	e0bffc15 	stw	r2,-16(fp)
10010c0c:	e0bffc17 	ldw	r2,-16(fp)
10010c10:	1000070e 	bge	r2,zero,10010c30 <write+0xbc>
      {
        ALT_ERRNO = -rval;
10010c14:	0010b380 	call	10010b38 <alt_get_errno>
10010c18:	1007883a 	mov	r3,r2
10010c1c:	e0bffc17 	ldw	r2,-16(fp)
10010c20:	0085c83a 	sub	r2,zero,r2
10010c24:	18800015 	stw	r2,0(r3)
        return -1;
10010c28:	00bfffc4 	movi	r2,-1
10010c2c:	00000c06 	br	10010c60 <write+0xec>
      }
      return rval;
10010c30:	e0bffc17 	ldw	r2,-16(fp)
10010c34:	00000a06 	br	10010c60 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
10010c38:	0010b380 	call	10010b38 <alt_get_errno>
10010c3c:	1007883a 	mov	r3,r2
10010c40:	00800344 	movi	r2,13
10010c44:	18800015 	stw	r2,0(r3)
10010c48:	00000406 	br	10010c5c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10010c4c:	0010b380 	call	10010b38 <alt_get_errno>
10010c50:	1007883a 	mov	r3,r2
10010c54:	00801444 	movi	r2,81
10010c58:	18800015 	stw	r2,0(r3)
  }
  return -1;
10010c5c:	00bfffc4 	movi	r2,-1
}
10010c60:	e037883a 	mov	sp,fp
10010c64:	dfc00117 	ldw	ra,4(sp)
10010c68:	df000017 	ldw	fp,0(sp)
10010c6c:	dec00204 	addi	sp,sp,8
10010c70:	f800283a 	ret

10010c74 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10010c74:	defffd04 	addi	sp,sp,-12
10010c78:	dfc00215 	stw	ra,8(sp)
10010c7c:	df000115 	stw	fp,4(sp)
10010c80:	df000104 	addi	fp,sp,4
10010c84:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10010c88:	d1600804 	addi	r5,gp,-32736
10010c8c:	e13fff17 	ldw	r4,-4(fp)
10010c90:	0011dac0 	call	10011dac <alt_dev_llist_insert>
}
10010c94:	e037883a 	mov	sp,fp
10010c98:	dfc00117 	ldw	ra,4(sp)
10010c9c:	df000017 	ldw	fp,0(sp)
10010ca0:	dec00204 	addi	sp,sp,8
10010ca4:	f800283a 	ret

10010ca8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10010ca8:	defffd04 	addi	sp,sp,-12
10010cac:	dfc00215 	stw	ra,8(sp)
10010cb0:	df000115 	stw	fp,4(sp)
10010cb4:	df000104 	addi	fp,sp,4
10010cb8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10010cbc:	00127b00 	call	100127b0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10010cc0:	00800044 	movi	r2,1
10010cc4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10010cc8:	0001883a 	nop
10010ccc:	e037883a 	mov	sp,fp
10010cd0:	dfc00117 	ldw	ra,4(sp)
10010cd4:	df000017 	ldw	fp,0(sp)
10010cd8:	dec00204 	addi	sp,sp,8
10010cdc:	f800283a 	ret

10010ce0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10010ce0:	defffe04 	addi	sp,sp,-8
10010ce4:	dfc00115 	stw	ra,4(sp)
10010ce8:	df000015 	stw	fp,0(sp)
10010cec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10010cf0:	000d883a 	mov	r6,zero
10010cf4:	000b883a 	mov	r5,zero
10010cf8:	01040074 	movhi	r4,4097
10010cfc:	210ed204 	addi	r4,r4,15176
10010d00:	0010e9c0 	call	10010e9c <altera_avalon_jtag_uart_init>
10010d04:	01040074 	movhi	r4,4097
10010d08:	210ec804 	addi	r4,r4,15136
10010d0c:	0010c740 	call	10010c74 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10010d10:	0001883a 	nop
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
10010d14:	01040074 	movhi	r4,4097
10010d18:	2112e004 	addi	r4,r4,19328
10010d1c:	00120a80 	call	100120a8 <alt_fs_reg>
}
10010d20:	0001883a 	nop
10010d24:	e037883a 	mov	sp,fp
10010d28:	dfc00117 	ldw	ra,4(sp)
10010d2c:	df000017 	ldw	fp,0(sp)
10010d30:	dec00204 	addi	sp,sp,8
10010d34:	f800283a 	ret

10010d38 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10010d38:	defffa04 	addi	sp,sp,-24
10010d3c:	dfc00515 	stw	ra,20(sp)
10010d40:	df000415 	stw	fp,16(sp)
10010d44:	df000404 	addi	fp,sp,16
10010d48:	e13ffd15 	stw	r4,-12(fp)
10010d4c:	e17ffe15 	stw	r5,-8(fp)
10010d50:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010d54:	e0bffd17 	ldw	r2,-12(fp)
10010d58:	10800017 	ldw	r2,0(r2)
10010d5c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10010d60:	e0bffc17 	ldw	r2,-16(fp)
10010d64:	10c00a04 	addi	r3,r2,40
10010d68:	e0bffd17 	ldw	r2,-12(fp)
10010d6c:	10800217 	ldw	r2,8(r2)
10010d70:	100f883a 	mov	r7,r2
10010d74:	e1bfff17 	ldw	r6,-4(fp)
10010d78:	e17ffe17 	ldw	r5,-8(fp)
10010d7c:	1809883a 	mov	r4,r3
10010d80:	00113600 	call	10011360 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10010d84:	e037883a 	mov	sp,fp
10010d88:	dfc00117 	ldw	ra,4(sp)
10010d8c:	df000017 	ldw	fp,0(sp)
10010d90:	dec00204 	addi	sp,sp,8
10010d94:	f800283a 	ret

10010d98 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10010d98:	defffa04 	addi	sp,sp,-24
10010d9c:	dfc00515 	stw	ra,20(sp)
10010da0:	df000415 	stw	fp,16(sp)
10010da4:	df000404 	addi	fp,sp,16
10010da8:	e13ffd15 	stw	r4,-12(fp)
10010dac:	e17ffe15 	stw	r5,-8(fp)
10010db0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010db4:	e0bffd17 	ldw	r2,-12(fp)
10010db8:	10800017 	ldw	r2,0(r2)
10010dbc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10010dc0:	e0bffc17 	ldw	r2,-16(fp)
10010dc4:	10c00a04 	addi	r3,r2,40
10010dc8:	e0bffd17 	ldw	r2,-12(fp)
10010dcc:	10800217 	ldw	r2,8(r2)
10010dd0:	100f883a 	mov	r7,r2
10010dd4:	e1bfff17 	ldw	r6,-4(fp)
10010dd8:	e17ffe17 	ldw	r5,-8(fp)
10010ddc:	1809883a 	mov	r4,r3
10010de0:	001157c0 	call	1001157c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10010de4:	e037883a 	mov	sp,fp
10010de8:	dfc00117 	ldw	ra,4(sp)
10010dec:	df000017 	ldw	fp,0(sp)
10010df0:	dec00204 	addi	sp,sp,8
10010df4:	f800283a 	ret

10010df8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10010df8:	defffc04 	addi	sp,sp,-16
10010dfc:	dfc00315 	stw	ra,12(sp)
10010e00:	df000215 	stw	fp,8(sp)
10010e04:	df000204 	addi	fp,sp,8
10010e08:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010e0c:	e0bfff17 	ldw	r2,-4(fp)
10010e10:	10800017 	ldw	r2,0(r2)
10010e14:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10010e18:	e0bffe17 	ldw	r2,-8(fp)
10010e1c:	10c00a04 	addi	r3,r2,40
10010e20:	e0bfff17 	ldw	r2,-4(fp)
10010e24:	10800217 	ldw	r2,8(r2)
10010e28:	100b883a 	mov	r5,r2
10010e2c:	1809883a 	mov	r4,r3
10010e30:	00112080 	call	10011208 <altera_avalon_jtag_uart_close>
}
10010e34:	e037883a 	mov	sp,fp
10010e38:	dfc00117 	ldw	ra,4(sp)
10010e3c:	df000017 	ldw	fp,0(sp)
10010e40:	dec00204 	addi	sp,sp,8
10010e44:	f800283a 	ret

10010e48 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10010e48:	defffa04 	addi	sp,sp,-24
10010e4c:	dfc00515 	stw	ra,20(sp)
10010e50:	df000415 	stw	fp,16(sp)
10010e54:	df000404 	addi	fp,sp,16
10010e58:	e13ffd15 	stw	r4,-12(fp)
10010e5c:	e17ffe15 	stw	r5,-8(fp)
10010e60:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10010e64:	e0bffd17 	ldw	r2,-12(fp)
10010e68:	10800017 	ldw	r2,0(r2)
10010e6c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10010e70:	e0bffc17 	ldw	r2,-16(fp)
10010e74:	10800a04 	addi	r2,r2,40
10010e78:	e1bfff17 	ldw	r6,-4(fp)
10010e7c:	e17ffe17 	ldw	r5,-8(fp)
10010e80:	1009883a 	mov	r4,r2
10010e84:	00112700 	call	10011270 <altera_avalon_jtag_uart_ioctl>
}
10010e88:	e037883a 	mov	sp,fp
10010e8c:	dfc00117 	ldw	ra,4(sp)
10010e90:	df000017 	ldw	fp,0(sp)
10010e94:	dec00204 	addi	sp,sp,8
10010e98:	f800283a 	ret

10010e9c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10010e9c:	defffa04 	addi	sp,sp,-24
10010ea0:	dfc00515 	stw	ra,20(sp)
10010ea4:	df000415 	stw	fp,16(sp)
10010ea8:	df000404 	addi	fp,sp,16
10010eac:	e13ffd15 	stw	r4,-12(fp)
10010eb0:	e17ffe15 	stw	r5,-8(fp)
10010eb4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010eb8:	e0bffd17 	ldw	r2,-12(fp)
10010ebc:	00c00044 	movi	r3,1
10010ec0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10010ec4:	e0bffd17 	ldw	r2,-12(fp)
10010ec8:	10800017 	ldw	r2,0(r2)
10010ecc:	10800104 	addi	r2,r2,4
10010ed0:	1007883a 	mov	r3,r2
10010ed4:	e0bffd17 	ldw	r2,-12(fp)
10010ed8:	10800817 	ldw	r2,32(r2)
10010edc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10010ee0:	e0bffe17 	ldw	r2,-8(fp)
10010ee4:	e0ffff17 	ldw	r3,-4(fp)
10010ee8:	d8000015 	stw	zero,0(sp)
10010eec:	e1fffd17 	ldw	r7,-12(fp)
10010ef0:	01840074 	movhi	r6,4097
10010ef4:	3183d704 	addi	r6,r6,3932
10010ef8:	180b883a 	mov	r5,r3
10010efc:	1009883a 	mov	r4,r2
10010f00:	001220c0 	call	1001220c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10010f04:	e0bffd17 	ldw	r2,-12(fp)
10010f08:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10010f0c:	e0bffd17 	ldw	r2,-12(fp)
10010f10:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10010f14:	d0e74217 	ldw	r3,-25336(gp)
10010f18:	e1fffd17 	ldw	r7,-12(fp)
10010f1c:	01840074 	movhi	r6,4097
10010f20:	31845a04 	addi	r6,r6,4456
10010f24:	180b883a 	mov	r5,r3
10010f28:	1009883a 	mov	r4,r2
10010f2c:	0011c240 	call	10011c24 <alt_alarm_start>
10010f30:	1000040e 	bge	r2,zero,10010f44 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10010f34:	e0fffd17 	ldw	r3,-12(fp)
10010f38:	00a00034 	movhi	r2,32768
10010f3c:	10bfffc4 	addi	r2,r2,-1
10010f40:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10010f44:	0001883a 	nop
10010f48:	e037883a 	mov	sp,fp
10010f4c:	dfc00117 	ldw	ra,4(sp)
10010f50:	df000017 	ldw	fp,0(sp)
10010f54:	dec00204 	addi	sp,sp,8
10010f58:	f800283a 	ret

10010f5c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10010f5c:	defff804 	addi	sp,sp,-32
10010f60:	df000715 	stw	fp,28(sp)
10010f64:	df000704 	addi	fp,sp,28
10010f68:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10010f6c:	e0bfff17 	ldw	r2,-4(fp)
10010f70:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10010f74:	e0bffb17 	ldw	r2,-20(fp)
10010f78:	10800017 	ldw	r2,0(r2)
10010f7c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010f80:	e0bffc17 	ldw	r2,-16(fp)
10010f84:	10800104 	addi	r2,r2,4
10010f88:	10800037 	ldwio	r2,0(r2)
10010f8c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10010f90:	e0bffd17 	ldw	r2,-12(fp)
10010f94:	1080c00c 	andi	r2,r2,768
10010f98:	10006d26 	beq	r2,zero,10011150 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10010f9c:	e0bffd17 	ldw	r2,-12(fp)
10010fa0:	1080400c 	andi	r2,r2,256
10010fa4:	10003526 	beq	r2,zero,1001107c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10010fa8:	00800074 	movhi	r2,1
10010fac:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010fb0:	e0bffb17 	ldw	r2,-20(fp)
10010fb4:	10800a17 	ldw	r2,40(r2)
10010fb8:	10800044 	addi	r2,r2,1
10010fbc:	1081ffcc 	andi	r2,r2,2047
10010fc0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10010fc4:	e0bffb17 	ldw	r2,-20(fp)
10010fc8:	10c00b17 	ldw	r3,44(r2)
10010fcc:	e0bffe17 	ldw	r2,-8(fp)
10010fd0:	18801526 	beq	r3,r2,10011028 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10010fd4:	e0bffc17 	ldw	r2,-16(fp)
10010fd8:	10800037 	ldwio	r2,0(r2)
10010fdc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10010fe0:	e0bff917 	ldw	r2,-28(fp)
10010fe4:	10a0000c 	andi	r2,r2,32768
10010fe8:	10001126 	beq	r2,zero,10011030 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10010fec:	e0bffb17 	ldw	r2,-20(fp)
10010ff0:	10800a17 	ldw	r2,40(r2)
10010ff4:	e0fff917 	ldw	r3,-28(fp)
10010ff8:	1809883a 	mov	r4,r3
10010ffc:	e0fffb17 	ldw	r3,-20(fp)
10011000:	1885883a 	add	r2,r3,r2
10011004:	10800e04 	addi	r2,r2,56
10011008:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1001100c:	e0bffb17 	ldw	r2,-20(fp)
10011010:	10800a17 	ldw	r2,40(r2)
10011014:	10800044 	addi	r2,r2,1
10011018:	10c1ffcc 	andi	r3,r2,2047
1001101c:	e0bffb17 	ldw	r2,-20(fp)
10011020:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10011024:	003fe206 	br	10010fb0 <__alt_data_end+0xf8010fb0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
10011028:	0001883a 	nop
1001102c:	00000106 	br	10011034 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10011030:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10011034:	e0bff917 	ldw	r2,-28(fp)
10011038:	10bfffec 	andhi	r2,r2,65535
1001103c:	10000f26 	beq	r2,zero,1001107c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10011040:	e0bffb17 	ldw	r2,-20(fp)
10011044:	10c00817 	ldw	r3,32(r2)
10011048:	00bfff84 	movi	r2,-2
1001104c:	1886703a 	and	r3,r3,r2
10011050:	e0bffb17 	ldw	r2,-20(fp)
10011054:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10011058:	e0bffc17 	ldw	r2,-16(fp)
1001105c:	10800104 	addi	r2,r2,4
10011060:	1007883a 	mov	r3,r2
10011064:	e0bffb17 	ldw	r2,-20(fp)
10011068:	10800817 	ldw	r2,32(r2)
1001106c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10011070:	e0bffc17 	ldw	r2,-16(fp)
10011074:	10800104 	addi	r2,r2,4
10011078:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1001107c:	e0bffd17 	ldw	r2,-12(fp)
10011080:	1080800c 	andi	r2,r2,512
10011084:	103fbe26 	beq	r2,zero,10010f80 <__alt_data_end+0xf8010f80>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10011088:	e0bffd17 	ldw	r2,-12(fp)
1001108c:	1004d43a 	srli	r2,r2,16
10011090:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10011094:	00001406 	br	100110e8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10011098:	e0bffc17 	ldw	r2,-16(fp)
1001109c:	e0fffb17 	ldw	r3,-20(fp)
100110a0:	18c00d17 	ldw	r3,52(r3)
100110a4:	e13ffb17 	ldw	r4,-20(fp)
100110a8:	20c7883a 	add	r3,r4,r3
100110ac:	18c20e04 	addi	r3,r3,2104
100110b0:	18c00003 	ldbu	r3,0(r3)
100110b4:	18c03fcc 	andi	r3,r3,255
100110b8:	18c0201c 	xori	r3,r3,128
100110bc:	18ffe004 	addi	r3,r3,-128
100110c0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100110c4:	e0bffb17 	ldw	r2,-20(fp)
100110c8:	10800d17 	ldw	r2,52(r2)
100110cc:	10800044 	addi	r2,r2,1
100110d0:	10c1ffcc 	andi	r3,r2,2047
100110d4:	e0bffb17 	ldw	r2,-20(fp)
100110d8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
100110dc:	e0bffa17 	ldw	r2,-24(fp)
100110e0:	10bfffc4 	addi	r2,r2,-1
100110e4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
100110e8:	e0bffa17 	ldw	r2,-24(fp)
100110ec:	10000526 	beq	r2,zero,10011104 <altera_avalon_jtag_uart_irq+0x1a8>
100110f0:	e0bffb17 	ldw	r2,-20(fp)
100110f4:	10c00d17 	ldw	r3,52(r2)
100110f8:	e0bffb17 	ldw	r2,-20(fp)
100110fc:	10800c17 	ldw	r2,48(r2)
10011100:	18bfe51e 	bne	r3,r2,10011098 <__alt_data_end+0xf8011098>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10011104:	e0bffa17 	ldw	r2,-24(fp)
10011108:	103f9d26 	beq	r2,zero,10010f80 <__alt_data_end+0xf8010f80>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1001110c:	e0bffb17 	ldw	r2,-20(fp)
10011110:	10c00817 	ldw	r3,32(r2)
10011114:	00bfff44 	movi	r2,-3
10011118:	1886703a 	and	r3,r3,r2
1001111c:	e0bffb17 	ldw	r2,-20(fp)
10011120:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10011124:	e0bffb17 	ldw	r2,-20(fp)
10011128:	10800017 	ldw	r2,0(r2)
1001112c:	10800104 	addi	r2,r2,4
10011130:	1007883a 	mov	r3,r2
10011134:	e0bffb17 	ldw	r2,-20(fp)
10011138:	10800817 	ldw	r2,32(r2)
1001113c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10011140:	e0bffc17 	ldw	r2,-16(fp)
10011144:	10800104 	addi	r2,r2,4
10011148:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1001114c:	003f8c06 	br	10010f80 <__alt_data_end+0xf8010f80>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10011150:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10011154:	0001883a 	nop
10011158:	e037883a 	mov	sp,fp
1001115c:	df000017 	ldw	fp,0(sp)
10011160:	dec00104 	addi	sp,sp,4
10011164:	f800283a 	ret

10011168 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10011168:	defff804 	addi	sp,sp,-32
1001116c:	df000715 	stw	fp,28(sp)
10011170:	df000704 	addi	fp,sp,28
10011174:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10011178:	e0bffb17 	ldw	r2,-20(fp)
1001117c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10011180:	e0bff917 	ldw	r2,-28(fp)
10011184:	10800017 	ldw	r2,0(r2)
10011188:	10800104 	addi	r2,r2,4
1001118c:	10800037 	ldwio	r2,0(r2)
10011190:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10011194:	e0bffa17 	ldw	r2,-24(fp)
10011198:	1081000c 	andi	r2,r2,1024
1001119c:	10000b26 	beq	r2,zero,100111cc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
100111a0:	e0bff917 	ldw	r2,-28(fp)
100111a4:	10800017 	ldw	r2,0(r2)
100111a8:	10800104 	addi	r2,r2,4
100111ac:	1007883a 	mov	r3,r2
100111b0:	e0bff917 	ldw	r2,-28(fp)
100111b4:	10800817 	ldw	r2,32(r2)
100111b8:	10810014 	ori	r2,r2,1024
100111bc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
100111c0:	e0bff917 	ldw	r2,-28(fp)
100111c4:	10000915 	stw	zero,36(r2)
100111c8:	00000a06 	br	100111f4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
100111cc:	e0bff917 	ldw	r2,-28(fp)
100111d0:	10c00917 	ldw	r3,36(r2)
100111d4:	00a00034 	movhi	r2,32768
100111d8:	10bfff04 	addi	r2,r2,-4
100111dc:	10c00536 	bltu	r2,r3,100111f4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
100111e0:	e0bff917 	ldw	r2,-28(fp)
100111e4:	10800917 	ldw	r2,36(r2)
100111e8:	10c00044 	addi	r3,r2,1
100111ec:	e0bff917 	ldw	r2,-28(fp)
100111f0:	10c00915 	stw	r3,36(r2)
100111f4:	d0a74217 	ldw	r2,-25336(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
100111f8:	e037883a 	mov	sp,fp
100111fc:	df000017 	ldw	fp,0(sp)
10011200:	dec00104 	addi	sp,sp,4
10011204:	f800283a 	ret

10011208 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10011208:	defffd04 	addi	sp,sp,-12
1001120c:	df000215 	stw	fp,8(sp)
10011210:	df000204 	addi	fp,sp,8
10011214:	e13ffe15 	stw	r4,-8(fp)
10011218:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1001121c:	00000506 	br	10011234 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10011220:	e0bfff17 	ldw	r2,-4(fp)
10011224:	1090000c 	andi	r2,r2,16384
10011228:	10000226 	beq	r2,zero,10011234 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1001122c:	00bffd44 	movi	r2,-11
10011230:	00000b06 	br	10011260 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10011234:	e0bffe17 	ldw	r2,-8(fp)
10011238:	10c00d17 	ldw	r3,52(r2)
1001123c:	e0bffe17 	ldw	r2,-8(fp)
10011240:	10800c17 	ldw	r2,48(r2)
10011244:	18800526 	beq	r3,r2,1001125c <altera_avalon_jtag_uart_close+0x54>
10011248:	e0bffe17 	ldw	r2,-8(fp)
1001124c:	10c00917 	ldw	r3,36(r2)
10011250:	e0bffe17 	ldw	r2,-8(fp)
10011254:	10800117 	ldw	r2,4(r2)
10011258:	18bff136 	bltu	r3,r2,10011220 <__alt_data_end+0xf8011220>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1001125c:	0005883a 	mov	r2,zero
}
10011260:	e037883a 	mov	sp,fp
10011264:	df000017 	ldw	fp,0(sp)
10011268:	dec00104 	addi	sp,sp,4
1001126c:	f800283a 	ret

10011270 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10011270:	defffa04 	addi	sp,sp,-24
10011274:	df000515 	stw	fp,20(sp)
10011278:	df000504 	addi	fp,sp,20
1001127c:	e13ffd15 	stw	r4,-12(fp)
10011280:	e17ffe15 	stw	r5,-8(fp)
10011284:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10011288:	00bff9c4 	movi	r2,-25
1001128c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10011290:	e0bffe17 	ldw	r2,-8(fp)
10011294:	10da8060 	cmpeqi	r3,r2,27137
10011298:	1800031e 	bne	r3,zero,100112a8 <altera_avalon_jtag_uart_ioctl+0x38>
1001129c:	109a80a0 	cmpeqi	r2,r2,27138
100112a0:	1000181e 	bne	r2,zero,10011304 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
100112a4:	00002906 	br	1001134c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
100112a8:	e0bffd17 	ldw	r2,-12(fp)
100112ac:	10c00117 	ldw	r3,4(r2)
100112b0:	00a00034 	movhi	r2,32768
100112b4:	10bfffc4 	addi	r2,r2,-1
100112b8:	18802126 	beq	r3,r2,10011340 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
100112bc:	e0bfff17 	ldw	r2,-4(fp)
100112c0:	10800017 	ldw	r2,0(r2)
100112c4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
100112c8:	e0bffc17 	ldw	r2,-16(fp)
100112cc:	10800090 	cmplti	r2,r2,2
100112d0:	1000061e 	bne	r2,zero,100112ec <altera_avalon_jtag_uart_ioctl+0x7c>
100112d4:	e0fffc17 	ldw	r3,-16(fp)
100112d8:	00a00034 	movhi	r2,32768
100112dc:	10bfffc4 	addi	r2,r2,-1
100112e0:	18800226 	beq	r3,r2,100112ec <altera_avalon_jtag_uart_ioctl+0x7c>
100112e4:	e0bffc17 	ldw	r2,-16(fp)
100112e8:	00000206 	br	100112f4 <altera_avalon_jtag_uart_ioctl+0x84>
100112ec:	00a00034 	movhi	r2,32768
100112f0:	10bfff84 	addi	r2,r2,-2
100112f4:	e0fffd17 	ldw	r3,-12(fp)
100112f8:	18800115 	stw	r2,4(r3)
      rc = 0;
100112fc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10011300:	00000f06 	br	10011340 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10011304:	e0bffd17 	ldw	r2,-12(fp)
10011308:	10c00117 	ldw	r3,4(r2)
1001130c:	00a00034 	movhi	r2,32768
10011310:	10bfffc4 	addi	r2,r2,-1
10011314:	18800c26 	beq	r3,r2,10011348 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10011318:	e0bffd17 	ldw	r2,-12(fp)
1001131c:	10c00917 	ldw	r3,36(r2)
10011320:	e0bffd17 	ldw	r2,-12(fp)
10011324:	10800117 	ldw	r2,4(r2)
10011328:	1885803a 	cmpltu	r2,r3,r2
1001132c:	10c03fcc 	andi	r3,r2,255
10011330:	e0bfff17 	ldw	r2,-4(fp)
10011334:	10c00015 	stw	r3,0(r2)
      rc = 0;
10011338:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1001133c:	00000206 	br	10011348 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10011340:	0001883a 	nop
10011344:	00000106 	br	1001134c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10011348:	0001883a 	nop

  default:
    break;
  }

  return rc;
1001134c:	e0bffb17 	ldw	r2,-20(fp)
}
10011350:	e037883a 	mov	sp,fp
10011354:	df000017 	ldw	fp,0(sp)
10011358:	dec00104 	addi	sp,sp,4
1001135c:	f800283a 	ret

10011360 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10011360:	defff304 	addi	sp,sp,-52
10011364:	dfc00c15 	stw	ra,48(sp)
10011368:	df000b15 	stw	fp,44(sp)
1001136c:	df000b04 	addi	fp,sp,44
10011370:	e13ffc15 	stw	r4,-16(fp)
10011374:	e17ffd15 	stw	r5,-12(fp)
10011378:	e1bffe15 	stw	r6,-8(fp)
1001137c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10011380:	e0bffd17 	ldw	r2,-12(fp)
10011384:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10011388:	00004706 	br	100114a8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1001138c:	e0bffc17 	ldw	r2,-16(fp)
10011390:	10800a17 	ldw	r2,40(r2)
10011394:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10011398:	e0bffc17 	ldw	r2,-16(fp)
1001139c:	10800b17 	ldw	r2,44(r2)
100113a0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
100113a4:	e0fff717 	ldw	r3,-36(fp)
100113a8:	e0bff817 	ldw	r2,-32(fp)
100113ac:	18800536 	bltu	r3,r2,100113c4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
100113b0:	e0fff717 	ldw	r3,-36(fp)
100113b4:	e0bff817 	ldw	r2,-32(fp)
100113b8:	1885c83a 	sub	r2,r3,r2
100113bc:	e0bff615 	stw	r2,-40(fp)
100113c0:	00000406 	br	100113d4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
100113c4:	00c20004 	movi	r3,2048
100113c8:	e0bff817 	ldw	r2,-32(fp)
100113cc:	1885c83a 	sub	r2,r3,r2
100113d0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100113d4:	e0bff617 	ldw	r2,-40(fp)
100113d8:	10001e26 	beq	r2,zero,10011454 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
100113dc:	e0fffe17 	ldw	r3,-8(fp)
100113e0:	e0bff617 	ldw	r2,-40(fp)
100113e4:	1880022e 	bgeu	r3,r2,100113f0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
100113e8:	e0bffe17 	ldw	r2,-8(fp)
100113ec:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
100113f0:	e0bffc17 	ldw	r2,-16(fp)
100113f4:	10c00e04 	addi	r3,r2,56
100113f8:	e0bff817 	ldw	r2,-32(fp)
100113fc:	1885883a 	add	r2,r3,r2
10011400:	e1bff617 	ldw	r6,-40(fp)
10011404:	100b883a 	mov	r5,r2
10011408:	e13ff517 	ldw	r4,-44(fp)
1001140c:	00041400 	call	10004140 <memcpy>
      ptr   += n;
10011410:	e0fff517 	ldw	r3,-44(fp)
10011414:	e0bff617 	ldw	r2,-40(fp)
10011418:	1885883a 	add	r2,r3,r2
1001141c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10011420:	e0fffe17 	ldw	r3,-8(fp)
10011424:	e0bff617 	ldw	r2,-40(fp)
10011428:	1885c83a 	sub	r2,r3,r2
1001142c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10011430:	e0fff817 	ldw	r3,-32(fp)
10011434:	e0bff617 	ldw	r2,-40(fp)
10011438:	1885883a 	add	r2,r3,r2
1001143c:	10c1ffcc 	andi	r3,r2,2047
10011440:	e0bffc17 	ldw	r2,-16(fp)
10011444:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10011448:	e0bffe17 	ldw	r2,-8(fp)
1001144c:	00bfcf16 	blt	zero,r2,1001138c <__alt_data_end+0xf801138c>
10011450:	00000106 	br	10011458 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10011454:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10011458:	e0fff517 	ldw	r3,-44(fp)
1001145c:	e0bffd17 	ldw	r2,-12(fp)
10011460:	1880141e 	bne	r3,r2,100114b4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10011464:	e0bfff17 	ldw	r2,-4(fp)
10011468:	1090000c 	andi	r2,r2,16384
1001146c:	1000131e 	bne	r2,zero,100114bc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10011470:	0001883a 	nop
10011474:	e0bffc17 	ldw	r2,-16(fp)
10011478:	10c00a17 	ldw	r3,40(r2)
1001147c:	e0bff717 	ldw	r2,-36(fp)
10011480:	1880051e 	bne	r3,r2,10011498 <altera_avalon_jtag_uart_read+0x138>
10011484:	e0bffc17 	ldw	r2,-16(fp)
10011488:	10c00917 	ldw	r3,36(r2)
1001148c:	e0bffc17 	ldw	r2,-16(fp)
10011490:	10800117 	ldw	r2,4(r2)
10011494:	18bff736 	bltu	r3,r2,10011474 <__alt_data_end+0xf8011474>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10011498:	e0bffc17 	ldw	r2,-16(fp)
1001149c:	10c00a17 	ldw	r3,40(r2)
100114a0:	e0bff717 	ldw	r2,-36(fp)
100114a4:	18800726 	beq	r3,r2,100114c4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100114a8:	e0bffe17 	ldw	r2,-8(fp)
100114ac:	00bfb716 	blt	zero,r2,1001138c <__alt_data_end+0xf801138c>
100114b0:	00000506 	br	100114c8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
100114b4:	0001883a 	nop
100114b8:	00000306 	br	100114c8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
100114bc:	0001883a 	nop
100114c0:	00000106 	br	100114c8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
100114c4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
100114c8:	e0fff517 	ldw	r3,-44(fp)
100114cc:	e0bffd17 	ldw	r2,-12(fp)
100114d0:	18801826 	beq	r3,r2,10011534 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100114d4:	0005303a 	rdctl	r2,status
100114d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100114dc:	e0fffb17 	ldw	r3,-20(fp)
100114e0:	00bfff84 	movi	r2,-2
100114e4:	1884703a 	and	r2,r3,r2
100114e8:	1001703a 	wrctl	status,r2
  
  return context;
100114ec:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
100114f0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100114f4:	e0bffc17 	ldw	r2,-16(fp)
100114f8:	10800817 	ldw	r2,32(r2)
100114fc:	10c00054 	ori	r3,r2,1
10011500:	e0bffc17 	ldw	r2,-16(fp)
10011504:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10011508:	e0bffc17 	ldw	r2,-16(fp)
1001150c:	10800017 	ldw	r2,0(r2)
10011510:	10800104 	addi	r2,r2,4
10011514:	1007883a 	mov	r3,r2
10011518:	e0bffc17 	ldw	r2,-16(fp)
1001151c:	10800817 	ldw	r2,32(r2)
10011520:	18800035 	stwio	r2,0(r3)
10011524:	e0bffa17 	ldw	r2,-24(fp)
10011528:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001152c:	e0bff917 	ldw	r2,-28(fp)
10011530:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10011534:	e0fff517 	ldw	r3,-44(fp)
10011538:	e0bffd17 	ldw	r2,-12(fp)
1001153c:	18800426 	beq	r3,r2,10011550 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10011540:	e0fff517 	ldw	r3,-44(fp)
10011544:	e0bffd17 	ldw	r2,-12(fp)
10011548:	1885c83a 	sub	r2,r3,r2
1001154c:	00000606 	br	10011568 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10011550:	e0bfff17 	ldw	r2,-4(fp)
10011554:	1090000c 	andi	r2,r2,16384
10011558:	10000226 	beq	r2,zero,10011564 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
1001155c:	00bffd44 	movi	r2,-11
10011560:	00000106 	br	10011568 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10011564:	00bffec4 	movi	r2,-5
}
10011568:	e037883a 	mov	sp,fp
1001156c:	dfc00117 	ldw	ra,4(sp)
10011570:	df000017 	ldw	fp,0(sp)
10011574:	dec00204 	addi	sp,sp,8
10011578:	f800283a 	ret

1001157c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1001157c:	defff304 	addi	sp,sp,-52
10011580:	dfc00c15 	stw	ra,48(sp)
10011584:	df000b15 	stw	fp,44(sp)
10011588:	df000b04 	addi	fp,sp,44
1001158c:	e13ffc15 	stw	r4,-16(fp)
10011590:	e17ffd15 	stw	r5,-12(fp)
10011594:	e1bffe15 	stw	r6,-8(fp)
10011598:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1001159c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
100115a0:	e0bffd17 	ldw	r2,-12(fp)
100115a4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100115a8:	00003706 	br	10011688 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
100115ac:	e0bffc17 	ldw	r2,-16(fp)
100115b0:	10800c17 	ldw	r2,48(r2)
100115b4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
100115b8:	e0bffc17 	ldw	r2,-16(fp)
100115bc:	10800d17 	ldw	r2,52(r2)
100115c0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
100115c4:	e0fff917 	ldw	r3,-28(fp)
100115c8:	e0bff517 	ldw	r2,-44(fp)
100115cc:	1880062e 	bgeu	r3,r2,100115e8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
100115d0:	e0fff517 	ldw	r3,-44(fp)
100115d4:	e0bff917 	ldw	r2,-28(fp)
100115d8:	1885c83a 	sub	r2,r3,r2
100115dc:	10bfffc4 	addi	r2,r2,-1
100115e0:	e0bff615 	stw	r2,-40(fp)
100115e4:	00000b06 	br	10011614 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
100115e8:	e0bff517 	ldw	r2,-44(fp)
100115ec:	10000526 	beq	r2,zero,10011604 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
100115f0:	00c20004 	movi	r3,2048
100115f4:	e0bff917 	ldw	r2,-28(fp)
100115f8:	1885c83a 	sub	r2,r3,r2
100115fc:	e0bff615 	stw	r2,-40(fp)
10011600:	00000406 	br	10011614 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10011604:	00c1ffc4 	movi	r3,2047
10011608:	e0bff917 	ldw	r2,-28(fp)
1001160c:	1885c83a 	sub	r2,r3,r2
10011610:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10011614:	e0bff617 	ldw	r2,-40(fp)
10011618:	10001e26 	beq	r2,zero,10011694 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
1001161c:	e0fffe17 	ldw	r3,-8(fp)
10011620:	e0bff617 	ldw	r2,-40(fp)
10011624:	1880022e 	bgeu	r3,r2,10011630 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10011628:	e0bffe17 	ldw	r2,-8(fp)
1001162c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10011630:	e0bffc17 	ldw	r2,-16(fp)
10011634:	10c20e04 	addi	r3,r2,2104
10011638:	e0bff917 	ldw	r2,-28(fp)
1001163c:	1885883a 	add	r2,r3,r2
10011640:	e1bff617 	ldw	r6,-40(fp)
10011644:	e17ffd17 	ldw	r5,-12(fp)
10011648:	1009883a 	mov	r4,r2
1001164c:	00041400 	call	10004140 <memcpy>
      ptr   += n;
10011650:	e0fffd17 	ldw	r3,-12(fp)
10011654:	e0bff617 	ldw	r2,-40(fp)
10011658:	1885883a 	add	r2,r3,r2
1001165c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10011660:	e0fffe17 	ldw	r3,-8(fp)
10011664:	e0bff617 	ldw	r2,-40(fp)
10011668:	1885c83a 	sub	r2,r3,r2
1001166c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10011670:	e0fff917 	ldw	r3,-28(fp)
10011674:	e0bff617 	ldw	r2,-40(fp)
10011678:	1885883a 	add	r2,r3,r2
1001167c:	10c1ffcc 	andi	r3,r2,2047
10011680:	e0bffc17 	ldw	r2,-16(fp)
10011684:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10011688:	e0bffe17 	ldw	r2,-8(fp)
1001168c:	00bfc716 	blt	zero,r2,100115ac <__alt_data_end+0xf80115ac>
10011690:	00000106 	br	10011698 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10011694:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011698:	0005303a 	rdctl	r2,status
1001169c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100116a0:	e0fffb17 	ldw	r3,-20(fp)
100116a4:	00bfff84 	movi	r2,-2
100116a8:	1884703a 	and	r2,r3,r2
100116ac:	1001703a 	wrctl	status,r2
  
  return context;
100116b0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
100116b4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100116b8:	e0bffc17 	ldw	r2,-16(fp)
100116bc:	10800817 	ldw	r2,32(r2)
100116c0:	10c00094 	ori	r3,r2,2
100116c4:	e0bffc17 	ldw	r2,-16(fp)
100116c8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100116cc:	e0bffc17 	ldw	r2,-16(fp)
100116d0:	10800017 	ldw	r2,0(r2)
100116d4:	10800104 	addi	r2,r2,4
100116d8:	1007883a 	mov	r3,r2
100116dc:	e0bffc17 	ldw	r2,-16(fp)
100116e0:	10800817 	ldw	r2,32(r2)
100116e4:	18800035 	stwio	r2,0(r3)
100116e8:	e0bffa17 	ldw	r2,-24(fp)
100116ec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100116f0:	e0bff817 	ldw	r2,-32(fp)
100116f4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
100116f8:	e0bffe17 	ldw	r2,-8(fp)
100116fc:	0080100e 	bge	zero,r2,10011740 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10011700:	e0bfff17 	ldw	r2,-4(fp)
10011704:	1090000c 	andi	r2,r2,16384
10011708:	1000101e 	bne	r2,zero,1001174c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1001170c:	0001883a 	nop
10011710:	e0bffc17 	ldw	r2,-16(fp)
10011714:	10c00d17 	ldw	r3,52(r2)
10011718:	e0bff517 	ldw	r2,-44(fp)
1001171c:	1880051e 	bne	r3,r2,10011734 <altera_avalon_jtag_uart_write+0x1b8>
10011720:	e0bffc17 	ldw	r2,-16(fp)
10011724:	10c00917 	ldw	r3,36(r2)
10011728:	e0bffc17 	ldw	r2,-16(fp)
1001172c:	10800117 	ldw	r2,4(r2)
10011730:	18bff736 	bltu	r3,r2,10011710 <__alt_data_end+0xf8011710>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10011734:	e0bffc17 	ldw	r2,-16(fp)
10011738:	10800917 	ldw	r2,36(r2)
1001173c:	1000051e 	bne	r2,zero,10011754 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10011740:	e0bffe17 	ldw	r2,-8(fp)
10011744:	00bfd016 	blt	zero,r2,10011688 <__alt_data_end+0xf8011688>
10011748:	00000306 	br	10011758 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
1001174c:	0001883a 	nop
10011750:	00000106 	br	10011758 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10011754:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10011758:	e0fffd17 	ldw	r3,-12(fp)
1001175c:	e0bff717 	ldw	r2,-36(fp)
10011760:	18800426 	beq	r3,r2,10011774 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10011764:	e0fffd17 	ldw	r3,-12(fp)
10011768:	e0bff717 	ldw	r2,-36(fp)
1001176c:	1885c83a 	sub	r2,r3,r2
10011770:	00000606 	br	1001178c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10011774:	e0bfff17 	ldw	r2,-4(fp)
10011778:	1090000c 	andi	r2,r2,16384
1001177c:	10000226 	beq	r2,zero,10011788 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10011780:	00bffd44 	movi	r2,-11
10011784:	00000106 	br	1001178c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10011788:	00bffec4 	movi	r2,-5
}
1001178c:	e037883a 	mov	sp,fp
10011790:	dfc00117 	ldw	ra,4(sp)
10011794:	df000017 	ldw	fp,0(sp)
10011798:	dec00204 	addi	sp,sp,8
1001179c:	f800283a 	ret

100117a0 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
100117a0:	defff404 	addi	sp,sp,-48
100117a4:	df000b15 	stw	fp,44(sp)
100117a8:	df000b04 	addi	fp,sp,44
100117ac:	e13ffc15 	stw	r4,-16(fp)
100117b0:	e17ffd15 	stw	r5,-12(fp)
100117b4:	e1bffe15 	stw	r6,-8(fp)
100117b8:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
100117bc:	e0bffc17 	ldw	r2,-16(fp)
100117c0:	10800017 	ldw	r2,0(r2)
100117c4:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
100117c8:	e0bff517 	ldw	r2,-44(fp)
100117cc:	10800217 	ldw	r2,8(r2)
100117d0:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
100117d4:	e0bff617 	ldw	r2,-40(fp)
100117d8:	10bfffc4 	addi	r2,r2,-1
100117dc:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
100117e0:	e0bffb17 	ldw	r2,-20(fp)
100117e4:	10800044 	addi	r2,r2,1
100117e8:	e0bffb15 	stw	r2,-20(fp)
100117ec:	e0bffb17 	ldw	r2,-20(fp)
100117f0:	10800003 	ldbu	r2,0(r2)
100117f4:	10803fcc 	andi	r2,r2,255
100117f8:	1080201c 	xori	r2,r2,128
100117fc:	10bfe004 	addi	r2,r2,-128
10011800:	103ff71e 	bne	r2,zero,100117e0 <__alt_data_end+0xf80117e0>
    ;

  return ptr - string;
10011804:	e0fffb17 	ldw	r3,-20(fp)
10011808:	e0bff617 	ldw	r2,-40(fp)
1001180c:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
10011810:	10800044 	addi	r2,r2,1
10011814:	1007883a 	mov	r3,r2
10011818:	e0bffd17 	ldw	r2,-12(fp)
1001181c:	10c5883a 	add	r2,r2,r3
10011820:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
10011824:	d0a00d04 	addi	r2,gp,-32716
10011828:	1007883a 	mov	r3,r2
  r4 = (int)name;
1001182c:	e0bffd17 	ldw	r2,-12(fp)
10011830:	1009883a 	mov	r4,r2
  r5 = flags;
10011834:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
10011838:	e1bfff17 	ldw	r6,-4(fp)
1001183c:	e0bffd17 	ldw	r2,-12(fp)
10011840:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
10011844:	e0bff917 	ldw	r2,-28(fp)
10011848:	10bfffc4 	addi	r2,r2,-1
1001184c:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
10011850:	e0bffa17 	ldw	r2,-24(fp)
10011854:	10800044 	addi	r2,r2,1
10011858:	e0bffa15 	stw	r2,-24(fp)
1001185c:	e0bffa17 	ldw	r2,-24(fp)
10011860:	10800003 	ldbu	r2,0(r2)
10011864:	10803fcc 	andi	r2,r2,255
10011868:	1080201c 	xori	r2,r2,128
1001186c:	10bfe004 	addi	r2,r2,-128
10011870:	103ff71e 	bne	r2,zero,10011850 <__alt_data_end+0xf8011850>
    ;

  return ptr - string;
10011874:	e1fffa17 	ldw	r7,-24(fp)
10011878:	e0bff917 	ldw	r2,-28(fp)
1001187c:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
10011880:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
10011884:	003da07a 	break	1

  handle = (void *)r2;
10011888:	e0bff715 	stw	r2,-36(fp)
  error = r3;
1001188c:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
10011890:	e0bff817 	ldw	r2,-32(fp)
10011894:	1000031e 	bne	r2,zero,100118a4 <alt_hostfs_open+0x104>
    fd->priv = handle;
10011898:	e0bffc17 	ldw	r2,-16(fp)
1001189c:	e0fff717 	ldw	r3,-36(fp)
100118a0:	10c00115 	stw	r3,4(r2)

  return -error;
100118a4:	e0bff817 	ldw	r2,-32(fp)
100118a8:	0085c83a 	sub	r2,zero,r2
}
100118ac:	e037883a 	mov	sp,fp
100118b0:	df000017 	ldw	fp,0(sp)
100118b4:	dec00104 	addi	sp,sp,4
100118b8:	f800283a 	ret

100118bc <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
100118bc:	defffd04 	addi	sp,sp,-12
100118c0:	df000215 	stw	fp,8(sp)
100118c4:	df000204 	addi	fp,sp,8
100118c8:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
100118cc:	d0a01004 	addi	r2,gp,-32704
100118d0:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
100118d4:	e0bfff17 	ldw	r2,-4(fp)
100118d8:	10800117 	ldw	r2,4(r2)
100118dc:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
100118e0:	003da07a 	break	1

  error = r3;
100118e4:	e0fffe15 	stw	r3,-8(fp)

  return -error;
100118e8:	e0bffe17 	ldw	r2,-8(fp)
100118ec:	0085c83a 	sub	r2,zero,r2
}
100118f0:	e037883a 	mov	sp,fp
100118f4:	df000017 	ldw	fp,0(sp)
100118f8:	dec00104 	addi	sp,sp,4
100118fc:	f800283a 	ret

10011900 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
10011900:	defffa04 	addi	sp,sp,-24
10011904:	df000515 	stw	fp,20(sp)
10011908:	df000504 	addi	fp,sp,20
1001190c:	e13ffd15 	stw	r4,-12(fp)
10011910:	e17ffe15 	stw	r5,-8(fp)
10011914:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
10011918:	d0a01304 	addi	r2,gp,-32692
1001191c:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10011920:	e0bffd17 	ldw	r2,-12(fp)
10011924:	10800117 	ldw	r2,4(r2)
10011928:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
1001192c:	e0bffe17 	ldw	r2,-8(fp)
10011930:	100b883a 	mov	r5,r2
  r6 = len;
10011934:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
10011938:	003da07a 	break	1

  rc = r2;
1001193c:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
10011940:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
10011944:	e0bffc17 	ldw	r2,-16(fp)
10011948:	10000326 	beq	r2,zero,10011958 <alt_hostfs_read+0x58>
1001194c:	e0bffc17 	ldw	r2,-16(fp)
10011950:	0085c83a 	sub	r2,zero,r2
10011954:	00000106 	br	1001195c <alt_hostfs_read+0x5c>
10011958:	e0bffb17 	ldw	r2,-20(fp)
}
1001195c:	e037883a 	mov	sp,fp
10011960:	df000017 	ldw	fp,0(sp)
10011964:	dec00104 	addi	sp,sp,4
10011968:	f800283a 	ret

1001196c <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
1001196c:	defffa04 	addi	sp,sp,-24
10011970:	df000515 	stw	fp,20(sp)
10011974:	df000504 	addi	fp,sp,20
10011978:	e13ffd15 	stw	r4,-12(fp)
1001197c:	e17ffe15 	stw	r5,-8(fp)
10011980:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
10011984:	d0a01604 	addi	r2,gp,-32680
10011988:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
1001198c:	e0bffd17 	ldw	r2,-12(fp)
10011990:	10800117 	ldw	r2,4(r2)
10011994:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
10011998:	e0bffe17 	ldw	r2,-8(fp)
1001199c:	100b883a 	mov	r5,r2
  r6 = len;
100119a0:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
100119a4:	003da07a 	break	1

  rc = r2;
100119a8:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
100119ac:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
100119b0:	e0bffc17 	ldw	r2,-16(fp)
100119b4:	10000326 	beq	r2,zero,100119c4 <alt_hostfs_write+0x58>
100119b8:	e0bffc17 	ldw	r2,-16(fp)
100119bc:	0085c83a 	sub	r2,zero,r2
100119c0:	00000106 	br	100119c8 <alt_hostfs_write+0x5c>
100119c4:	e0bffb17 	ldw	r2,-20(fp)
}
100119c8:	e037883a 	mov	sp,fp
100119cc:	df000017 	ldw	fp,0(sp)
100119d0:	dec00104 	addi	sp,sp,4
100119d4:	f800283a 	ret

100119d8 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
100119d8:	defffa04 	addi	sp,sp,-24
100119dc:	df000515 	stw	fp,20(sp)
100119e0:	df000504 	addi	fp,sp,20
100119e4:	e13ffd15 	stw	r4,-12(fp)
100119e8:	e17ffe15 	stw	r5,-8(fp)
100119ec:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
100119f0:	d0a01904 	addi	r2,gp,-32668
100119f4:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
100119f8:	e0bffd17 	ldw	r2,-12(fp)
100119fc:	10800117 	ldw	r2,4(r2)
10011a00:	1009883a 	mov	r4,r2
  r5 = ptr;
10011a04:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
10011a08:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
10011a0c:	003da07a 	break	1

  rc = r2;
10011a10:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
10011a14:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
10011a18:	e0bffc17 	ldw	r2,-16(fp)
10011a1c:	10000326 	beq	r2,zero,10011a2c <alt_hostfs_seek+0x54>
10011a20:	e0bffc17 	ldw	r2,-16(fp)
10011a24:	0085c83a 	sub	r2,zero,r2
10011a28:	00000106 	br	10011a30 <alt_hostfs_seek+0x58>
10011a2c:	e0bffb17 	ldw	r2,-20(fp)
}
10011a30:	e037883a 	mov	sp,fp
10011a34:	df000017 	ldw	fp,0(sp)
10011a38:	dec00104 	addi	sp,sp,4
10011a3c:	f800283a 	ret

10011a40 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
10011a40:	deffe904 	addi	sp,sp,-92
10011a44:	df001615 	stw	fp,88(sp)
10011a48:	df001604 	addi	fp,sp,88
10011a4c:	e13ffe15 	stw	r4,-8(fp)
10011a50:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
10011a54:	d0a01c04 	addi	r2,gp,-32656
10011a58:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10011a5c:	e0bffe17 	ldw	r2,-8(fp)
10011a60:	10800117 	ldw	r2,4(r2)
10011a64:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
10011a68:	e0bfee04 	addi	r2,fp,-72
10011a6c:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
10011a70:	003da07a 	break	1

  rc = r2;
10011a74:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
10011a78:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
10011a7c:	e0bfec17 	ldw	r2,-80(fp)
10011a80:	1000621e 	bne	r2,zero,10011c0c <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
10011a84:	e0bfee04 	addi	r2,fp,-72
10011a88:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
10011a8c:	e0bfea17 	ldw	r2,-88(fp)
10011a90:	10801004 	addi	r2,r2,64
10011a94:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
10011a98:	00001606 	br	10011af4 <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10011a9c:	e0bfea17 	ldw	r2,-88(fp)
10011aa0:	10800017 	ldw	r2,0(r2)
10011aa4:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
10011aa8:	e0bfea17 	ldw	r2,-88(fp)
10011aac:	10800017 	ldw	r2,0(r2)
10011ab0:	10803fec 	andhi	r2,r2,255
10011ab4:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10011ab8:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
10011abc:	e0bfea17 	ldw	r2,-88(fp)
10011ac0:	10800017 	ldw	r2,0(r2)
10011ac4:	10bfc00c 	andi	r2,r2,65280
10011ac8:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
10011acc:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
10011ad0:	e0bfea17 	ldw	r2,-88(fp)
10011ad4:	10800017 	ldw	r2,0(r2)
10011ad8:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
10011adc:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10011ae0:	e0bfea17 	ldw	r2,-88(fp)
10011ae4:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
10011ae8:	e0bfea17 	ldw	r2,-88(fp)
10011aec:	10800104 	addi	r2,r2,4
10011af0:	e0bfea15 	stw	r2,-88(fp)
10011af4:	e0ffea17 	ldw	r3,-88(fp)
10011af8:	e0bfed17 	ldw	r2,-76(fp)
10011afc:	18bfe736 	bltu	r3,r2,10011a9c <__alt_data_end+0xf8011a9c>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
10011b00:	e0bfff17 	ldw	r2,-4(fp)
10011b04:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
10011b08:	e0bfea17 	ldw	r2,-88(fp)
10011b0c:	10800f04 	addi	r2,r2,60
10011b10:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
10011b14:	00000506 	br	10011b2c <alt_hostfs_fstat+0xec>
      *ptr = 0;
10011b18:	e0bfea17 	ldw	r2,-88(fp)
10011b1c:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
10011b20:	e0bfea17 	ldw	r2,-88(fp)
10011b24:	10800104 	addi	r2,r2,4
10011b28:	e0bfea15 	stw	r2,-88(fp)
10011b2c:	e0ffea17 	ldw	r3,-88(fp)
10011b30:	e0bfed17 	ldw	r2,-76(fp)
10011b34:	18bff836 	bltu	r3,r2,10011b18 <__alt_data_end+0xf8011b18>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
10011b38:	e0bfee17 	ldw	r2,-72(fp)
10011b3c:	1007883a 	mov	r3,r2
10011b40:	e0bfff17 	ldw	r2,-4(fp)
10011b44:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
10011b48:	e0bfef17 	ldw	r2,-68(fp)
10011b4c:	1007883a 	mov	r3,r2
10011b50:	e0bfff17 	ldw	r2,-4(fp)
10011b54:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
10011b58:	e0fff017 	ldw	r3,-64(fp)
10011b5c:	e0bfff17 	ldw	r2,-4(fp)
10011b60:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
10011b64:	e0bff117 	ldw	r2,-60(fp)
10011b68:	1007883a 	mov	r3,r2
10011b6c:	e0bfff17 	ldw	r2,-4(fp)
10011b70:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
10011b74:	e0bff217 	ldw	r2,-56(fp)
10011b78:	1007883a 	mov	r3,r2
10011b7c:	e0bfff17 	ldw	r2,-4(fp)
10011b80:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
10011b84:	e0bff317 	ldw	r2,-52(fp)
10011b88:	1007883a 	mov	r3,r2
10011b8c:	e0bfff17 	ldw	r2,-4(fp)
10011b90:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
10011b94:	e0bff417 	ldw	r2,-48(fp)
10011b98:	1007883a 	mov	r3,r2
10011b9c:	e0bfff17 	ldw	r2,-4(fp)
10011ba0:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
10011ba4:	e0bff617 	ldw	r2,-40(fp)
10011ba8:	1007883a 	mov	r3,r2
10011bac:	e0bfff17 	ldw	r2,-4(fp)
10011bb0:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
10011bb4:	e0bffb17 	ldw	r2,-20(fp)
10011bb8:	1007883a 	mov	r3,r2
10011bbc:	e0bfff17 	ldw	r2,-4(fp)
10011bc0:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
10011bc4:	e0bffc17 	ldw	r2,-16(fp)
10011bc8:	1007883a 	mov	r3,r2
10011bcc:	e0bfff17 	ldw	r2,-4(fp)
10011bd0:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
10011bd4:	e0bffd17 	ldw	r2,-12(fp)
10011bd8:	1007883a 	mov	r3,r2
10011bdc:	e0bfff17 	ldw	r2,-4(fp)
10011be0:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
10011be4:	e0bff817 	ldw	r2,-32(fp)
10011be8:	1007883a 	mov	r3,r2
10011bec:	e0bfff17 	ldw	r2,-4(fp)
10011bf0:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
10011bf4:	e0bffa17 	ldw	r2,-24(fp)
10011bf8:	1007883a 	mov	r3,r2
10011bfc:	e0bfff17 	ldw	r2,-4(fp)
10011c00:	10c00c15 	stw	r3,48(r2)

    return rc;
10011c04:	e0bfeb17 	ldw	r2,-84(fp)
10011c08:	00000206 	br	10011c14 <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
10011c0c:	e0bfec17 	ldw	r2,-80(fp)
10011c10:	0085c83a 	sub	r2,zero,r2
}
10011c14:	e037883a 	mov	sp,fp
10011c18:	df000017 	ldw	fp,0(sp)
10011c1c:	dec00104 	addi	sp,sp,4
10011c20:	f800283a 	ret

10011c24 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10011c24:	defff504 	addi	sp,sp,-44
10011c28:	df000a15 	stw	fp,40(sp)
10011c2c:	df000a04 	addi	fp,sp,40
10011c30:	e13ffc15 	stw	r4,-16(fp)
10011c34:	e17ffd15 	stw	r5,-12(fp)
10011c38:	e1bffe15 	stw	r6,-8(fp)
10011c3c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10011c40:	e03ff615 	stw	zero,-40(fp)
10011c44:	d0a74217 	ldw	r2,-25336(gp)
  
  if (alt_ticks_per_second ())
10011c48:	10003c26 	beq	r2,zero,10011d3c <alt_alarm_start+0x118>
  {
    if (alarm)
10011c4c:	e0bffc17 	ldw	r2,-16(fp)
10011c50:	10003826 	beq	r2,zero,10011d34 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
10011c54:	e0bffc17 	ldw	r2,-16(fp)
10011c58:	e0fffe17 	ldw	r3,-8(fp)
10011c5c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10011c60:	e0bffc17 	ldw	r2,-16(fp)
10011c64:	e0ffff17 	ldw	r3,-4(fp)
10011c68:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011c6c:	0005303a 	rdctl	r2,status
10011c70:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011c74:	e0fff917 	ldw	r3,-28(fp)
10011c78:	00bfff84 	movi	r2,-2
10011c7c:	1884703a 	and	r2,r3,r2
10011c80:	1001703a 	wrctl	status,r2
  
  return context;
10011c84:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10011c88:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10011c8c:	d0a74317 	ldw	r2,-25332(gp)
      
      current_nticks = alt_nticks();
10011c90:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10011c94:	e0fffd17 	ldw	r3,-12(fp)
10011c98:	e0bff617 	ldw	r2,-40(fp)
10011c9c:	1885883a 	add	r2,r3,r2
10011ca0:	10c00044 	addi	r3,r2,1
10011ca4:	e0bffc17 	ldw	r2,-16(fp)
10011ca8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10011cac:	e0bffc17 	ldw	r2,-16(fp)
10011cb0:	10c00217 	ldw	r3,8(r2)
10011cb4:	e0bff617 	ldw	r2,-40(fp)
10011cb8:	1880042e 	bgeu	r3,r2,10011ccc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10011cbc:	e0bffc17 	ldw	r2,-16(fp)
10011cc0:	00c00044 	movi	r3,1
10011cc4:	10c00405 	stb	r3,16(r2)
10011cc8:	00000206 	br	10011cd4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10011ccc:	e0bffc17 	ldw	r2,-16(fp)
10011cd0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10011cd4:	e0bffc17 	ldw	r2,-16(fp)
10011cd8:	d0e02004 	addi	r3,gp,-32640
10011cdc:	e0fffa15 	stw	r3,-24(fp)
10011ce0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10011ce4:	e0bffb17 	ldw	r2,-20(fp)
10011ce8:	e0fffa17 	ldw	r3,-24(fp)
10011cec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10011cf0:	e0bffa17 	ldw	r2,-24(fp)
10011cf4:	10c00017 	ldw	r3,0(r2)
10011cf8:	e0bffb17 	ldw	r2,-20(fp)
10011cfc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10011d00:	e0bffa17 	ldw	r2,-24(fp)
10011d04:	10800017 	ldw	r2,0(r2)
10011d08:	e0fffb17 	ldw	r3,-20(fp)
10011d0c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10011d10:	e0bffa17 	ldw	r2,-24(fp)
10011d14:	e0fffb17 	ldw	r3,-20(fp)
10011d18:	10c00015 	stw	r3,0(r2)
10011d1c:	e0bff817 	ldw	r2,-32(fp)
10011d20:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011d24:	e0bff717 	ldw	r2,-36(fp)
10011d28:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10011d2c:	0005883a 	mov	r2,zero
10011d30:	00000306 	br	10011d40 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10011d34:	00bffa84 	movi	r2,-22
10011d38:	00000106 	br	10011d40 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10011d3c:	00bfde84 	movi	r2,-134
  }
}
10011d40:	e037883a 	mov	sp,fp
10011d44:	df000017 	ldw	fp,0(sp)
10011d48:	dec00104 	addi	sp,sp,4
10011d4c:	f800283a 	ret

10011d50 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10011d50:	deffff04 	addi	sp,sp,-4
10011d54:	df000015 	stw	fp,0(sp)
10011d58:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10011d5c:	0001883a 	nop
10011d60:	e037883a 	mov	sp,fp
10011d64:	df000017 	ldw	fp,0(sp)
10011d68:	dec00104 	addi	sp,sp,4
10011d6c:	f800283a 	ret

10011d70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011d70:	defffe04 	addi	sp,sp,-8
10011d74:	dfc00115 	stw	ra,4(sp)
10011d78:	df000015 	stw	fp,0(sp)
10011d7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011d80:	d0a00b17 	ldw	r2,-32724(gp)
10011d84:	10000326 	beq	r2,zero,10011d94 <alt_get_errno+0x24>
10011d88:	d0a00b17 	ldw	r2,-32724(gp)
10011d8c:	103ee83a 	callr	r2
10011d90:	00000106 	br	10011d98 <alt_get_errno+0x28>
10011d94:	d0a73704 	addi	r2,gp,-25380
}
10011d98:	e037883a 	mov	sp,fp
10011d9c:	dfc00117 	ldw	ra,4(sp)
10011da0:	df000017 	ldw	fp,0(sp)
10011da4:	dec00204 	addi	sp,sp,8
10011da8:	f800283a 	ret

10011dac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10011dac:	defffa04 	addi	sp,sp,-24
10011db0:	dfc00515 	stw	ra,20(sp)
10011db4:	df000415 	stw	fp,16(sp)
10011db8:	df000404 	addi	fp,sp,16
10011dbc:	e13ffe15 	stw	r4,-8(fp)
10011dc0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10011dc4:	e0bffe17 	ldw	r2,-8(fp)
10011dc8:	10000326 	beq	r2,zero,10011dd8 <alt_dev_llist_insert+0x2c>
10011dcc:	e0bffe17 	ldw	r2,-8(fp)
10011dd0:	10800217 	ldw	r2,8(r2)
10011dd4:	1000061e 	bne	r2,zero,10011df0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10011dd8:	0011d700 	call	10011d70 <alt_get_errno>
10011ddc:	1007883a 	mov	r3,r2
10011de0:	00800584 	movi	r2,22
10011de4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10011de8:	00bffa84 	movi	r2,-22
10011dec:	00001306 	br	10011e3c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10011df0:	e0bffe17 	ldw	r2,-8(fp)
10011df4:	e0ffff17 	ldw	r3,-4(fp)
10011df8:	e0fffc15 	stw	r3,-16(fp)
10011dfc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10011e00:	e0bffd17 	ldw	r2,-12(fp)
10011e04:	e0fffc17 	ldw	r3,-16(fp)
10011e08:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10011e0c:	e0bffc17 	ldw	r2,-16(fp)
10011e10:	10c00017 	ldw	r3,0(r2)
10011e14:	e0bffd17 	ldw	r2,-12(fp)
10011e18:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10011e1c:	e0bffc17 	ldw	r2,-16(fp)
10011e20:	10800017 	ldw	r2,0(r2)
10011e24:	e0fffd17 	ldw	r3,-12(fp)
10011e28:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10011e2c:	e0bffc17 	ldw	r2,-16(fp)
10011e30:	e0fffd17 	ldw	r3,-12(fp)
10011e34:	10c00015 	stw	r3,0(r2)

  return 0;  
10011e38:	0005883a 	mov	r2,zero
}
10011e3c:	e037883a 	mov	sp,fp
10011e40:	dfc00117 	ldw	ra,4(sp)
10011e44:	df000017 	ldw	fp,0(sp)
10011e48:	dec00204 	addi	sp,sp,8
10011e4c:	f800283a 	ret

10011e50 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10011e50:	defffd04 	addi	sp,sp,-12
10011e54:	dfc00215 	stw	ra,8(sp)
10011e58:	df000115 	stw	fp,4(sp)
10011e5c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10011e60:	00840074 	movhi	r2,4097
10011e64:	108a8504 	addi	r2,r2,10772
10011e68:	e0bfff15 	stw	r2,-4(fp)
10011e6c:	00000606 	br	10011e88 <_do_ctors+0x38>
        (*ctor) (); 
10011e70:	e0bfff17 	ldw	r2,-4(fp)
10011e74:	10800017 	ldw	r2,0(r2)
10011e78:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10011e7c:	e0bfff17 	ldw	r2,-4(fp)
10011e80:	10bfff04 	addi	r2,r2,-4
10011e84:	e0bfff15 	stw	r2,-4(fp)
10011e88:	e0ffff17 	ldw	r3,-4(fp)
10011e8c:	00840074 	movhi	r2,4097
10011e90:	108a8604 	addi	r2,r2,10776
10011e94:	18bff62e 	bgeu	r3,r2,10011e70 <__alt_data_end+0xf8011e70>
        (*ctor) (); 
}
10011e98:	0001883a 	nop
10011e9c:	e037883a 	mov	sp,fp
10011ea0:	dfc00117 	ldw	ra,4(sp)
10011ea4:	df000017 	ldw	fp,0(sp)
10011ea8:	dec00204 	addi	sp,sp,8
10011eac:	f800283a 	ret

10011eb0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10011eb0:	defffd04 	addi	sp,sp,-12
10011eb4:	dfc00215 	stw	ra,8(sp)
10011eb8:	df000115 	stw	fp,4(sp)
10011ebc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10011ec0:	00840074 	movhi	r2,4097
10011ec4:	108a8504 	addi	r2,r2,10772
10011ec8:	e0bfff15 	stw	r2,-4(fp)
10011ecc:	00000606 	br	10011ee8 <_do_dtors+0x38>
        (*dtor) (); 
10011ed0:	e0bfff17 	ldw	r2,-4(fp)
10011ed4:	10800017 	ldw	r2,0(r2)
10011ed8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10011edc:	e0bfff17 	ldw	r2,-4(fp)
10011ee0:	10bfff04 	addi	r2,r2,-4
10011ee4:	e0bfff15 	stw	r2,-4(fp)
10011ee8:	e0ffff17 	ldw	r3,-4(fp)
10011eec:	00840074 	movhi	r2,4097
10011ef0:	108a8604 	addi	r2,r2,10776
10011ef4:	18bff62e 	bgeu	r3,r2,10011ed0 <__alt_data_end+0xf8011ed0>
        (*dtor) (); 
}
10011ef8:	0001883a 	nop
10011efc:	e037883a 	mov	sp,fp
10011f00:	dfc00117 	ldw	ra,4(sp)
10011f04:	df000017 	ldw	fp,0(sp)
10011f08:	dec00204 	addi	sp,sp,8
10011f0c:	f800283a 	ret

10011f10 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10011f10:	defffa04 	addi	sp,sp,-24
10011f14:	dfc00515 	stw	ra,20(sp)
10011f18:	df000415 	stw	fp,16(sp)
10011f1c:	df000404 	addi	fp,sp,16
10011f20:	e13ffe15 	stw	r4,-8(fp)
10011f24:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10011f28:	e0bfff17 	ldw	r2,-4(fp)
10011f2c:	10800017 	ldw	r2,0(r2)
10011f30:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10011f34:	e13ffe17 	ldw	r4,-8(fp)
10011f38:	0004e6c0 	call	10004e6c <strlen>
10011f3c:	10800044 	addi	r2,r2,1
10011f40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10011f44:	00000d06 	br	10011f7c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10011f48:	e0bffc17 	ldw	r2,-16(fp)
10011f4c:	10800217 	ldw	r2,8(r2)
10011f50:	e0fffd17 	ldw	r3,-12(fp)
10011f54:	180d883a 	mov	r6,r3
10011f58:	e17ffe17 	ldw	r5,-8(fp)
10011f5c:	1009883a 	mov	r4,r2
10011f60:	00128840 	call	10012884 <memcmp>
10011f64:	1000021e 	bne	r2,zero,10011f70 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10011f68:	e0bffc17 	ldw	r2,-16(fp)
10011f6c:	00000706 	br	10011f8c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10011f70:	e0bffc17 	ldw	r2,-16(fp)
10011f74:	10800017 	ldw	r2,0(r2)
10011f78:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10011f7c:	e0fffc17 	ldw	r3,-16(fp)
10011f80:	e0bfff17 	ldw	r2,-4(fp)
10011f84:	18bff01e 	bne	r3,r2,10011f48 <__alt_data_end+0xf8011f48>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10011f88:	0005883a 	mov	r2,zero
}
10011f8c:	e037883a 	mov	sp,fp
10011f90:	dfc00117 	ldw	ra,4(sp)
10011f94:	df000017 	ldw	fp,0(sp)
10011f98:	dec00204 	addi	sp,sp,8
10011f9c:	f800283a 	ret

10011fa0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10011fa0:	defffb04 	addi	sp,sp,-20
10011fa4:	dfc00415 	stw	ra,16(sp)
10011fa8:	df000315 	stw	fp,12(sp)
10011fac:	df000304 	addi	fp,sp,12
10011fb0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10011fb4:	d0a00617 	ldw	r2,-32744(gp)
10011fb8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10011fbc:	00003106 	br	10012084 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10011fc0:	e0bffd17 	ldw	r2,-12(fp)
10011fc4:	10800217 	ldw	r2,8(r2)
10011fc8:	1009883a 	mov	r4,r2
10011fcc:	0004e6c0 	call	10004e6c <strlen>
10011fd0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10011fd4:	e0bffd17 	ldw	r2,-12(fp)
10011fd8:	10c00217 	ldw	r3,8(r2)
10011fdc:	e0bffe17 	ldw	r2,-8(fp)
10011fe0:	10bfffc4 	addi	r2,r2,-1
10011fe4:	1885883a 	add	r2,r3,r2
10011fe8:	10800003 	ldbu	r2,0(r2)
10011fec:	10803fcc 	andi	r2,r2,255
10011ff0:	1080201c 	xori	r2,r2,128
10011ff4:	10bfe004 	addi	r2,r2,-128
10011ff8:	10800bd8 	cmpnei	r2,r2,47
10011ffc:	1000031e 	bne	r2,zero,1001200c <alt_find_file+0x6c>
    {
      len -= 1;
10012000:	e0bffe17 	ldw	r2,-8(fp)
10012004:	10bfffc4 	addi	r2,r2,-1
10012008:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1001200c:	e0bffe17 	ldw	r2,-8(fp)
10012010:	e0ffff17 	ldw	r3,-4(fp)
10012014:	1885883a 	add	r2,r3,r2
10012018:	10800003 	ldbu	r2,0(r2)
1001201c:	10803fcc 	andi	r2,r2,255
10012020:	1080201c 	xori	r2,r2,128
10012024:	10bfe004 	addi	r2,r2,-128
10012028:	10800be0 	cmpeqi	r2,r2,47
1001202c:	1000081e 	bne	r2,zero,10012050 <alt_find_file+0xb0>
10012030:	e0bffe17 	ldw	r2,-8(fp)
10012034:	e0ffff17 	ldw	r3,-4(fp)
10012038:	1885883a 	add	r2,r3,r2
1001203c:	10800003 	ldbu	r2,0(r2)
10012040:	10803fcc 	andi	r2,r2,255
10012044:	1080201c 	xori	r2,r2,128
10012048:	10bfe004 	addi	r2,r2,-128
1001204c:	10000a1e 	bne	r2,zero,10012078 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10012050:	e0bffd17 	ldw	r2,-12(fp)
10012054:	10800217 	ldw	r2,8(r2)
10012058:	e0fffe17 	ldw	r3,-8(fp)
1001205c:	180d883a 	mov	r6,r3
10012060:	e17fff17 	ldw	r5,-4(fp)
10012064:	1009883a 	mov	r4,r2
10012068:	00128840 	call	10012884 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1001206c:	1000021e 	bne	r2,zero,10012078 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10012070:	e0bffd17 	ldw	r2,-12(fp)
10012074:	00000706 	br	10012094 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10012078:	e0bffd17 	ldw	r2,-12(fp)
1001207c:	10800017 	ldw	r2,0(r2)
10012080:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10012084:	e0fffd17 	ldw	r3,-12(fp)
10012088:	d0a00604 	addi	r2,gp,-32744
1001208c:	18bfcc1e 	bne	r3,r2,10011fc0 <__alt_data_end+0xf8011fc0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10012090:	0005883a 	mov	r2,zero
}
10012094:	e037883a 	mov	sp,fp
10012098:	dfc00117 	ldw	ra,4(sp)
1001209c:	df000017 	ldw	fp,0(sp)
100120a0:	dec00204 	addi	sp,sp,8
100120a4:	f800283a 	ret

100120a8 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
100120a8:	defffc04 	addi	sp,sp,-16
100120ac:	df000315 	stw	fp,12(sp)
100120b0:	df000304 	addi	fp,sp,12
100120b4:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
100120b8:	e0bfff17 	ldw	r2,-4(fp)
100120bc:	10800217 	ldw	r2,8(r2)
100120c0:	1000021e 	bne	r2,zero,100120cc <alt_fs_reg+0x24>
  {
    return -ENODEV;
100120c4:	00bffb44 	movi	r2,-19
100120c8:	00001306 	br	10012118 <alt_fs_reg+0x70>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
100120cc:	e0bfff17 	ldw	r2,-4(fp)
100120d0:	d0e00604 	addi	r3,gp,-32744
100120d4:	e0fffd15 	stw	r3,-12(fp)
100120d8:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100120dc:	e0bffe17 	ldw	r2,-8(fp)
100120e0:	e0fffd17 	ldw	r3,-12(fp)
100120e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100120e8:	e0bffd17 	ldw	r2,-12(fp)
100120ec:	10c00017 	ldw	r3,0(r2)
100120f0:	e0bffe17 	ldw	r2,-8(fp)
100120f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100120f8:	e0bffd17 	ldw	r2,-12(fp)
100120fc:	10800017 	ldw	r2,0(r2)
10012100:	e0fffe17 	ldw	r3,-8(fp)
10012104:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10012108:	e0bffd17 	ldw	r2,-12(fp)
1001210c:	e0fffe17 	ldw	r3,-8(fp)
10012110:	10c00015 	stw	r3,0(r2)

  return 0;
10012114:	0005883a 	mov	r2,zero
} 
10012118:	e037883a 	mov	sp,fp
1001211c:	df000017 	ldw	fp,0(sp)
10012120:	dec00104 	addi	sp,sp,4
10012124:	f800283a 	ret

10012128 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10012128:	defffa04 	addi	sp,sp,-24
1001212c:	dfc00515 	stw	ra,20(sp)
10012130:	df000415 	stw	fp,16(sp)
10012134:	dc000315 	stw	r16,12(sp)
10012138:	df000404 	addi	fp,sp,16
1001213c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10012140:	00bffa04 	movi	r2,-24
10012144:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10012148:	e03ffc15 	stw	zero,-16(fp)
1001214c:	00001d06 	br	100121c4 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
10012150:	04040074 	movhi	r16,4097
10012154:	840e6804 	addi	r16,r16,14752
10012158:	e0bffc17 	ldw	r2,-16(fp)
1001215c:	01400304 	movi	r5,12
10012160:	1009883a 	mov	r4,r2
10012164:	0001d400 	call	10001d40 <__mulsi3>
10012168:	8085883a 	add	r2,r16,r2
1001216c:	10800017 	ldw	r2,0(r2)
10012170:	1000111e 	bne	r2,zero,100121b8 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
10012174:	04040074 	movhi	r16,4097
10012178:	840e6804 	addi	r16,r16,14752
1001217c:	e0bffc17 	ldw	r2,-16(fp)
10012180:	01400304 	movi	r5,12
10012184:	1009883a 	mov	r4,r2
10012188:	0001d400 	call	10001d40 <__mulsi3>
1001218c:	8085883a 	add	r2,r16,r2
10012190:	e0fffe17 	ldw	r3,-8(fp)
10012194:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10012198:	d0e00a17 	ldw	r3,-32728(gp)
1001219c:	e0bffc17 	ldw	r2,-16(fp)
100121a0:	1880020e 	bge	r3,r2,100121ac <alt_get_fd+0x84>
      {
        alt_max_fd = i;
100121a4:	e0bffc17 	ldw	r2,-16(fp)
100121a8:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
100121ac:	e0bffc17 	ldw	r2,-16(fp)
100121b0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
100121b4:	00000606 	br	100121d0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100121b8:	e0bffc17 	ldw	r2,-16(fp)
100121bc:	10800044 	addi	r2,r2,1
100121c0:	e0bffc15 	stw	r2,-16(fp)
100121c4:	e0bffc17 	ldw	r2,-16(fp)
100121c8:	10800810 	cmplti	r2,r2,32
100121cc:	103fe01e 	bne	r2,zero,10012150 <__alt_data_end+0xf8012150>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
100121d0:	e0bffd17 	ldw	r2,-12(fp)
}
100121d4:	e6ffff04 	addi	sp,fp,-4
100121d8:	dfc00217 	ldw	ra,8(sp)
100121dc:	df000117 	ldw	fp,4(sp)
100121e0:	dc000017 	ldw	r16,0(sp)
100121e4:	dec00304 	addi	sp,sp,12
100121e8:	f800283a 	ret

100121ec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
100121ec:	deffff04 	addi	sp,sp,-4
100121f0:	df000015 	stw	fp,0(sp)
100121f4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
100121f8:	0001883a 	nop
100121fc:	e037883a 	mov	sp,fp
10012200:	df000017 	ldw	fp,0(sp)
10012204:	dec00104 	addi	sp,sp,4
10012208:	f800283a 	ret

1001220c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1001220c:	defff904 	addi	sp,sp,-28
10012210:	dfc00615 	stw	ra,24(sp)
10012214:	df000515 	stw	fp,20(sp)
10012218:	df000504 	addi	fp,sp,20
1001221c:	e13ffc15 	stw	r4,-16(fp)
10012220:	e17ffd15 	stw	r5,-12(fp)
10012224:	e1bffe15 	stw	r6,-8(fp)
10012228:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1001222c:	e0800217 	ldw	r2,8(fp)
10012230:	d8800015 	stw	r2,0(sp)
10012234:	e1ffff17 	ldw	r7,-4(fp)
10012238:	e1bffe17 	ldw	r6,-8(fp)
1001223c:	e17ffd17 	ldw	r5,-12(fp)
10012240:	e13ffc17 	ldw	r4,-16(fp)
10012244:	00123bc0 	call	100123bc <alt_iic_isr_register>
}  
10012248:	e037883a 	mov	sp,fp
1001224c:	dfc00117 	ldw	ra,4(sp)
10012250:	df000017 	ldw	fp,0(sp)
10012254:	dec00204 	addi	sp,sp,8
10012258:	f800283a 	ret

1001225c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1001225c:	defff904 	addi	sp,sp,-28
10012260:	df000615 	stw	fp,24(sp)
10012264:	df000604 	addi	fp,sp,24
10012268:	e13ffe15 	stw	r4,-8(fp)
1001226c:	e17fff15 	stw	r5,-4(fp)
10012270:	e0bfff17 	ldw	r2,-4(fp)
10012274:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012278:	0005303a 	rdctl	r2,status
1001227c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012280:	e0fffb17 	ldw	r3,-20(fp)
10012284:	00bfff84 	movi	r2,-2
10012288:	1884703a 	and	r2,r3,r2
1001228c:	1001703a 	wrctl	status,r2
  
  return context;
10012290:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10012294:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10012298:	00c00044 	movi	r3,1
1001229c:	e0bffa17 	ldw	r2,-24(fp)
100122a0:	1884983a 	sll	r2,r3,r2
100122a4:	1007883a 	mov	r3,r2
100122a8:	d0a74117 	ldw	r2,-25340(gp)
100122ac:	1884b03a 	or	r2,r3,r2
100122b0:	d0a74115 	stw	r2,-25340(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100122b4:	d0a74117 	ldw	r2,-25340(gp)
100122b8:	100170fa 	wrctl	ienable,r2
100122bc:	e0bffc17 	ldw	r2,-16(fp)
100122c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100122c4:	e0bffd17 	ldw	r2,-12(fp)
100122c8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100122cc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
100122d0:	0001883a 	nop
}
100122d4:	e037883a 	mov	sp,fp
100122d8:	df000017 	ldw	fp,0(sp)
100122dc:	dec00104 	addi	sp,sp,4
100122e0:	f800283a 	ret

100122e4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
100122e4:	defff904 	addi	sp,sp,-28
100122e8:	df000615 	stw	fp,24(sp)
100122ec:	df000604 	addi	fp,sp,24
100122f0:	e13ffe15 	stw	r4,-8(fp)
100122f4:	e17fff15 	stw	r5,-4(fp)
100122f8:	e0bfff17 	ldw	r2,-4(fp)
100122fc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012300:	0005303a 	rdctl	r2,status
10012304:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012308:	e0fffb17 	ldw	r3,-20(fp)
1001230c:	00bfff84 	movi	r2,-2
10012310:	1884703a 	and	r2,r3,r2
10012314:	1001703a 	wrctl	status,r2
  
  return context;
10012318:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1001231c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10012320:	00c00044 	movi	r3,1
10012324:	e0bffa17 	ldw	r2,-24(fp)
10012328:	1884983a 	sll	r2,r3,r2
1001232c:	0084303a 	nor	r2,zero,r2
10012330:	1007883a 	mov	r3,r2
10012334:	d0a74117 	ldw	r2,-25340(gp)
10012338:	1884703a 	and	r2,r3,r2
1001233c:	d0a74115 	stw	r2,-25340(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10012340:	d0a74117 	ldw	r2,-25340(gp)
10012344:	100170fa 	wrctl	ienable,r2
10012348:	e0bffc17 	ldw	r2,-16(fp)
1001234c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012350:	e0bffd17 	ldw	r2,-12(fp)
10012354:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10012358:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
1001235c:	0001883a 	nop
}
10012360:	e037883a 	mov	sp,fp
10012364:	df000017 	ldw	fp,0(sp)
10012368:	dec00104 	addi	sp,sp,4
1001236c:	f800283a 	ret

10012370 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10012370:	defffc04 	addi	sp,sp,-16
10012374:	df000315 	stw	fp,12(sp)
10012378:	df000304 	addi	fp,sp,12
1001237c:	e13ffe15 	stw	r4,-8(fp)
10012380:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10012384:	000530fa 	rdctl	r2,ienable
10012388:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1001238c:	00c00044 	movi	r3,1
10012390:	e0bfff17 	ldw	r2,-4(fp)
10012394:	1884983a 	sll	r2,r3,r2
10012398:	1007883a 	mov	r3,r2
1001239c:	e0bffd17 	ldw	r2,-12(fp)
100123a0:	1884703a 	and	r2,r3,r2
100123a4:	1004c03a 	cmpne	r2,r2,zero
100123a8:	10803fcc 	andi	r2,r2,255
}
100123ac:	e037883a 	mov	sp,fp
100123b0:	df000017 	ldw	fp,0(sp)
100123b4:	dec00104 	addi	sp,sp,4
100123b8:	f800283a 	ret

100123bc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100123bc:	defff504 	addi	sp,sp,-44
100123c0:	dfc00a15 	stw	ra,40(sp)
100123c4:	df000915 	stw	fp,36(sp)
100123c8:	df000904 	addi	fp,sp,36
100123cc:	e13ffc15 	stw	r4,-16(fp)
100123d0:	e17ffd15 	stw	r5,-12(fp)
100123d4:	e1bffe15 	stw	r6,-8(fp)
100123d8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
100123dc:	00bffa84 	movi	r2,-22
100123e0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
100123e4:	e0bffd17 	ldw	r2,-12(fp)
100123e8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
100123ec:	e0bff817 	ldw	r2,-32(fp)
100123f0:	10800808 	cmpgei	r2,r2,32
100123f4:	1000271e 	bne	r2,zero,10012494 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100123f8:	0005303a 	rdctl	r2,status
100123fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012400:	e0fffb17 	ldw	r3,-20(fp)
10012404:	00bfff84 	movi	r2,-2
10012408:	1884703a 	and	r2,r3,r2
1001240c:	1001703a 	wrctl	status,r2
  
  return context;
10012410:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10012414:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10012418:	00840074 	movhi	r2,4097
1001241c:	109a3904 	addi	r2,r2,26852
10012420:	e0fff817 	ldw	r3,-32(fp)
10012424:	180690fa 	slli	r3,r3,3
10012428:	10c5883a 	add	r2,r2,r3
1001242c:	e0fffe17 	ldw	r3,-8(fp)
10012430:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10012434:	00840074 	movhi	r2,4097
10012438:	109a3904 	addi	r2,r2,26852
1001243c:	e0fff817 	ldw	r3,-32(fp)
10012440:	180690fa 	slli	r3,r3,3
10012444:	10c5883a 	add	r2,r2,r3
10012448:	10800104 	addi	r2,r2,4
1001244c:	e0ffff17 	ldw	r3,-4(fp)
10012450:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10012454:	e0bffe17 	ldw	r2,-8(fp)
10012458:	10000526 	beq	r2,zero,10012470 <alt_iic_isr_register+0xb4>
1001245c:	e0bff817 	ldw	r2,-32(fp)
10012460:	100b883a 	mov	r5,r2
10012464:	e13ffc17 	ldw	r4,-16(fp)
10012468:	001225c0 	call	1001225c <alt_ic_irq_enable>
1001246c:	00000406 	br	10012480 <alt_iic_isr_register+0xc4>
10012470:	e0bff817 	ldw	r2,-32(fp)
10012474:	100b883a 	mov	r5,r2
10012478:	e13ffc17 	ldw	r4,-16(fp)
1001247c:	00122e40 	call	100122e4 <alt_ic_irq_disable>
10012480:	e0bff715 	stw	r2,-36(fp)
10012484:	e0bffa17 	ldw	r2,-24(fp)
10012488:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001248c:	e0bff917 	ldw	r2,-28(fp)
10012490:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10012494:	e0bff717 	ldw	r2,-36(fp)
}
10012498:	e037883a 	mov	sp,fp
1001249c:	dfc00117 	ldw	ra,4(sp)
100124a0:	df000017 	ldw	fp,0(sp)
100124a4:	dec00204 	addi	sp,sp,8
100124a8:	f800283a 	ret

100124ac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
100124ac:	defff804 	addi	sp,sp,-32
100124b0:	dfc00715 	stw	ra,28(sp)
100124b4:	df000615 	stw	fp,24(sp)
100124b8:	dc000515 	stw	r16,20(sp)
100124bc:	df000604 	addi	fp,sp,24
100124c0:	e13ffb15 	stw	r4,-20(fp)
100124c4:	e17ffc15 	stw	r5,-16(fp)
100124c8:	e1bffd15 	stw	r6,-12(fp)
100124cc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
100124d0:	e1bffe17 	ldw	r6,-8(fp)
100124d4:	e17ffd17 	ldw	r5,-12(fp)
100124d8:	e13ffc17 	ldw	r4,-16(fp)
100124dc:	00108a80 	call	100108a8 <open>
100124e0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
100124e4:	e0bffa17 	ldw	r2,-24(fp)
100124e8:	10002216 	blt	r2,zero,10012574 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
100124ec:	04040074 	movhi	r16,4097
100124f0:	840e6804 	addi	r16,r16,14752
100124f4:	e0bffa17 	ldw	r2,-24(fp)
100124f8:	01400304 	movi	r5,12
100124fc:	1009883a 	mov	r4,r2
10012500:	0001d400 	call	10001d40 <__mulsi3>
10012504:	8085883a 	add	r2,r16,r2
10012508:	10c00017 	ldw	r3,0(r2)
1001250c:	e0bffb17 	ldw	r2,-20(fp)
10012510:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10012514:	04040074 	movhi	r16,4097
10012518:	840e6804 	addi	r16,r16,14752
1001251c:	e0bffa17 	ldw	r2,-24(fp)
10012520:	01400304 	movi	r5,12
10012524:	1009883a 	mov	r4,r2
10012528:	0001d400 	call	10001d40 <__mulsi3>
1001252c:	8085883a 	add	r2,r16,r2
10012530:	10800104 	addi	r2,r2,4
10012534:	10c00017 	ldw	r3,0(r2)
10012538:	e0bffb17 	ldw	r2,-20(fp)
1001253c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10012540:	04040074 	movhi	r16,4097
10012544:	840e6804 	addi	r16,r16,14752
10012548:	e0bffa17 	ldw	r2,-24(fp)
1001254c:	01400304 	movi	r5,12
10012550:	1009883a 	mov	r4,r2
10012554:	0001d400 	call	10001d40 <__mulsi3>
10012558:	8085883a 	add	r2,r16,r2
1001255c:	10800204 	addi	r2,r2,8
10012560:	10c00017 	ldw	r3,0(r2)
10012564:	e0bffb17 	ldw	r2,-20(fp)
10012568:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1001256c:	e13ffa17 	ldw	r4,-24(fp)
10012570:	0010a040 	call	10010a04 <alt_release_fd>
  }
} 
10012574:	0001883a 	nop
10012578:	e6ffff04 	addi	sp,fp,-4
1001257c:	dfc00217 	ldw	ra,8(sp)
10012580:	df000117 	ldw	fp,4(sp)
10012584:	dc000017 	ldw	r16,0(sp)
10012588:	dec00304 	addi	sp,sp,12
1001258c:	f800283a 	ret

10012590 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10012590:	defffb04 	addi	sp,sp,-20
10012594:	dfc00415 	stw	ra,16(sp)
10012598:	df000315 	stw	fp,12(sp)
1001259c:	df000304 	addi	fp,sp,12
100125a0:	e13ffd15 	stw	r4,-12(fp)
100125a4:	e17ffe15 	stw	r5,-8(fp)
100125a8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
100125ac:	01c07fc4 	movi	r7,511
100125b0:	01800044 	movi	r6,1
100125b4:	e17ffd17 	ldw	r5,-12(fp)
100125b8:	01040074 	movhi	r4,4097
100125bc:	210e6b04 	addi	r4,r4,14764
100125c0:	00124ac0 	call	100124ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
100125c4:	01c07fc4 	movi	r7,511
100125c8:	000d883a 	mov	r6,zero
100125cc:	e17ffe17 	ldw	r5,-8(fp)
100125d0:	01040074 	movhi	r4,4097
100125d4:	210e6804 	addi	r4,r4,14752
100125d8:	00124ac0 	call	100124ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
100125dc:	01c07fc4 	movi	r7,511
100125e0:	01800044 	movi	r6,1
100125e4:	e17fff17 	ldw	r5,-4(fp)
100125e8:	01040074 	movhi	r4,4097
100125ec:	210e6e04 	addi	r4,r4,14776
100125f0:	00124ac0 	call	100124ac <alt_open_fd>
}  
100125f4:	0001883a 	nop
100125f8:	e037883a 	mov	sp,fp
100125fc:	dfc00117 	ldw	ra,4(sp)
10012600:	df000017 	ldw	fp,0(sp)
10012604:	dec00204 	addi	sp,sp,8
10012608:	f800283a 	ret

1001260c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1001260c:	defffa04 	addi	sp,sp,-24
10012610:	df000515 	stw	fp,20(sp)
10012614:	df000504 	addi	fp,sp,20
10012618:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001261c:	0005303a 	rdctl	r2,status
10012620:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012624:	e0fffc17 	ldw	r3,-16(fp)
10012628:	00bfff84 	movi	r2,-2
1001262c:	1884703a 	and	r2,r3,r2
10012630:	1001703a 	wrctl	status,r2
  
  return context;
10012634:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10012638:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1001263c:	e0bfff17 	ldw	r2,-4(fp)
10012640:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10012644:	e0bffd17 	ldw	r2,-12(fp)
10012648:	10800017 	ldw	r2,0(r2)
1001264c:	e0fffd17 	ldw	r3,-12(fp)
10012650:	18c00117 	ldw	r3,4(r3)
10012654:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10012658:	e0bffd17 	ldw	r2,-12(fp)
1001265c:	10800117 	ldw	r2,4(r2)
10012660:	e0fffd17 	ldw	r3,-12(fp)
10012664:	18c00017 	ldw	r3,0(r3)
10012668:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1001266c:	e0bffd17 	ldw	r2,-12(fp)
10012670:	e0fffd17 	ldw	r3,-12(fp)
10012674:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10012678:	e0bffd17 	ldw	r2,-12(fp)
1001267c:	e0fffd17 	ldw	r3,-12(fp)
10012680:	10c00015 	stw	r3,0(r2)
10012684:	e0bffb17 	ldw	r2,-20(fp)
10012688:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001268c:	e0bffe17 	ldw	r2,-8(fp)
10012690:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10012694:	0001883a 	nop
10012698:	e037883a 	mov	sp,fp
1001269c:	df000017 	ldw	fp,0(sp)
100126a0:	dec00104 	addi	sp,sp,4
100126a4:	f800283a 	ret

100126a8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
100126a8:	defffb04 	addi	sp,sp,-20
100126ac:	dfc00415 	stw	ra,16(sp)
100126b0:	df000315 	stw	fp,12(sp)
100126b4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
100126b8:	d0a02017 	ldw	r2,-32640(gp)
100126bc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
100126c0:	d0a74317 	ldw	r2,-25332(gp)
100126c4:	10800044 	addi	r2,r2,1
100126c8:	d0a74315 	stw	r2,-25332(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100126cc:	00002e06 	br	10012788 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
100126d0:	e0bffd17 	ldw	r2,-12(fp)
100126d4:	10800017 	ldw	r2,0(r2)
100126d8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
100126dc:	e0bffd17 	ldw	r2,-12(fp)
100126e0:	10800403 	ldbu	r2,16(r2)
100126e4:	10803fcc 	andi	r2,r2,255
100126e8:	10000426 	beq	r2,zero,100126fc <alt_tick+0x54>
100126ec:	d0a74317 	ldw	r2,-25332(gp)
100126f0:	1000021e 	bne	r2,zero,100126fc <alt_tick+0x54>
    {
      alarm->rollover = 0;
100126f4:	e0bffd17 	ldw	r2,-12(fp)
100126f8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
100126fc:	e0bffd17 	ldw	r2,-12(fp)
10012700:	10800217 	ldw	r2,8(r2)
10012704:	d0e74317 	ldw	r3,-25332(gp)
10012708:	18801d36 	bltu	r3,r2,10012780 <alt_tick+0xd8>
1001270c:	e0bffd17 	ldw	r2,-12(fp)
10012710:	10800403 	ldbu	r2,16(r2)
10012714:	10803fcc 	andi	r2,r2,255
10012718:	1000191e 	bne	r2,zero,10012780 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1001271c:	e0bffd17 	ldw	r2,-12(fp)
10012720:	10800317 	ldw	r2,12(r2)
10012724:	e0fffd17 	ldw	r3,-12(fp)
10012728:	18c00517 	ldw	r3,20(r3)
1001272c:	1809883a 	mov	r4,r3
10012730:	103ee83a 	callr	r2
10012734:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10012738:	e0bfff17 	ldw	r2,-4(fp)
1001273c:	1000031e 	bne	r2,zero,1001274c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10012740:	e13ffd17 	ldw	r4,-12(fp)
10012744:	001260c0 	call	1001260c <alt_alarm_stop>
10012748:	00000d06 	br	10012780 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1001274c:	e0bffd17 	ldw	r2,-12(fp)
10012750:	10c00217 	ldw	r3,8(r2)
10012754:	e0bfff17 	ldw	r2,-4(fp)
10012758:	1887883a 	add	r3,r3,r2
1001275c:	e0bffd17 	ldw	r2,-12(fp)
10012760:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10012764:	e0bffd17 	ldw	r2,-12(fp)
10012768:	10c00217 	ldw	r3,8(r2)
1001276c:	d0a74317 	ldw	r2,-25332(gp)
10012770:	1880032e 	bgeu	r3,r2,10012780 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10012774:	e0bffd17 	ldw	r2,-12(fp)
10012778:	00c00044 	movi	r3,1
1001277c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10012780:	e0bffe17 	ldw	r2,-8(fp)
10012784:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10012788:	e0fffd17 	ldw	r3,-12(fp)
1001278c:	d0a02004 	addi	r2,gp,-32640
10012790:	18bfcf1e 	bne	r3,r2,100126d0 <__alt_data_end+0xf80126d0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10012794:	0001883a 	nop
}
10012798:	0001883a 	nop
1001279c:	e037883a 	mov	sp,fp
100127a0:	dfc00117 	ldw	ra,4(sp)
100127a4:	df000017 	ldw	fp,0(sp)
100127a8:	dec00204 	addi	sp,sp,8
100127ac:	f800283a 	ret

100127b0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
100127b0:	deffff04 	addi	sp,sp,-4
100127b4:	df000015 	stw	fp,0(sp)
100127b8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
100127bc:	000170fa 	wrctl	ienable,zero
}
100127c0:	0001883a 	nop
100127c4:	e037883a 	mov	sp,fp
100127c8:	df000017 	ldw	fp,0(sp)
100127cc:	dec00104 	addi	sp,sp,4
100127d0:	f800283a 	ret

100127d4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
100127d4:	defffe04 	addi	sp,sp,-8
100127d8:	df000115 	stw	fp,4(sp)
100127dc:	df000104 	addi	fp,sp,4
100127e0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
100127e4:	e0bfff17 	ldw	r2,-4(fp)
100127e8:	10bffe84 	addi	r2,r2,-6
100127ec:	10c00428 	cmpgeui	r3,r2,16
100127f0:	18001a1e 	bne	r3,zero,1001285c <alt_exception_cause_generated_bad_addr+0x88>
100127f4:	100690ba 	slli	r3,r2,2
100127f8:	00840074 	movhi	r2,4097
100127fc:	108a0304 	addi	r2,r2,10252
10012800:	1885883a 	add	r2,r3,r2
10012804:	10800017 	ldw	r2,0(r2)
10012808:	1000683a 	jmp	r2
1001280c:	1001284c 	andi	zero,r2,1185
10012810:	1001284c 	andi	zero,r2,1185
10012814:	1001285c 	xori	zero,r2,1185
10012818:	1001285c 	xori	zero,r2,1185
1001281c:	1001285c 	xori	zero,r2,1185
10012820:	1001284c 	andi	zero,r2,1185
10012824:	10012854 	ori	zero,r2,1185
10012828:	1001285c 	xori	zero,r2,1185
1001282c:	1001284c 	andi	zero,r2,1185
10012830:	1001284c 	andi	zero,r2,1185
10012834:	1001285c 	xori	zero,r2,1185
10012838:	1001284c 	andi	zero,r2,1185
1001283c:	10012854 	ori	zero,r2,1185
10012840:	1001285c 	xori	zero,r2,1185
10012844:	1001285c 	xori	zero,r2,1185
10012848:	1001284c 	andi	zero,r2,1185
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
1001284c:	00800044 	movi	r2,1
10012850:	00000306 	br	10012860 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10012854:	0005883a 	mov	r2,zero
10012858:	00000106 	br	10012860 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
1001285c:	0005883a 	mov	r2,zero
  }
}
10012860:	e037883a 	mov	sp,fp
10012864:	df000017 	ldw	fp,0(sp)
10012868:	dec00104 	addi	sp,sp,4
1001286c:	f800283a 	ret

10012870 <atexit>:
10012870:	200b883a 	mov	r5,r4
10012874:	000f883a 	mov	r7,zero
10012878:	000d883a 	mov	r6,zero
1001287c:	0009883a 	mov	r4,zero
10012880:	00129001 	jmpi	10012900 <__register_exitproc>

10012884 <memcmp>:
10012884:	01c000c4 	movi	r7,3
10012888:	3980192e 	bgeu	r7,r6,100128f0 <memcmp+0x6c>
1001288c:	2144b03a 	or	r2,r4,r5
10012890:	11c4703a 	and	r2,r2,r7
10012894:	10000f26 	beq	r2,zero,100128d4 <memcmp+0x50>
10012898:	20800003 	ldbu	r2,0(r4)
1001289c:	28c00003 	ldbu	r3,0(r5)
100128a0:	10c0151e 	bne	r2,r3,100128f8 <memcmp+0x74>
100128a4:	31bfff84 	addi	r6,r6,-2
100128a8:	01ffffc4 	movi	r7,-1
100128ac:	00000406 	br	100128c0 <memcmp+0x3c>
100128b0:	20800003 	ldbu	r2,0(r4)
100128b4:	28c00003 	ldbu	r3,0(r5)
100128b8:	31bfffc4 	addi	r6,r6,-1
100128bc:	10c00e1e 	bne	r2,r3,100128f8 <memcmp+0x74>
100128c0:	21000044 	addi	r4,r4,1
100128c4:	29400044 	addi	r5,r5,1
100128c8:	31fff91e 	bne	r6,r7,100128b0 <__alt_data_end+0xf80128b0>
100128cc:	0005883a 	mov	r2,zero
100128d0:	f800283a 	ret
100128d4:	20c00017 	ldw	r3,0(r4)
100128d8:	28800017 	ldw	r2,0(r5)
100128dc:	18bfee1e 	bne	r3,r2,10012898 <__alt_data_end+0xf8012898>
100128e0:	31bfff04 	addi	r6,r6,-4
100128e4:	21000104 	addi	r4,r4,4
100128e8:	29400104 	addi	r5,r5,4
100128ec:	39bff936 	bltu	r7,r6,100128d4 <__alt_data_end+0xf80128d4>
100128f0:	303fe91e 	bne	r6,zero,10012898 <__alt_data_end+0xf8012898>
100128f4:	003ff506 	br	100128cc <__alt_data_end+0xf80128cc>
100128f8:	10c5c83a 	sub	r2,r2,r3
100128fc:	f800283a 	ret

10012900 <__register_exitproc>:
10012900:	defffa04 	addi	sp,sp,-24
10012904:	dc000315 	stw	r16,12(sp)
10012908:	04040074 	movhi	r16,4097
1001290c:	8412ea04 	addi	r16,r16,19368
10012910:	80c00017 	ldw	r3,0(r16)
10012914:	dc400415 	stw	r17,16(sp)
10012918:	dfc00515 	stw	ra,20(sp)
1001291c:	18805217 	ldw	r2,328(r3)
10012920:	2023883a 	mov	r17,r4
10012924:	10003726 	beq	r2,zero,10012a04 <__register_exitproc+0x104>
10012928:	10c00117 	ldw	r3,4(r2)
1001292c:	010007c4 	movi	r4,31
10012930:	20c00e16 	blt	r4,r3,1001296c <__register_exitproc+0x6c>
10012934:	1a000044 	addi	r8,r3,1
10012938:	8800221e 	bne	r17,zero,100129c4 <__register_exitproc+0xc4>
1001293c:	18c00084 	addi	r3,r3,2
10012940:	18c7883a 	add	r3,r3,r3
10012944:	18c7883a 	add	r3,r3,r3
10012948:	12000115 	stw	r8,4(r2)
1001294c:	10c7883a 	add	r3,r2,r3
10012950:	19400015 	stw	r5,0(r3)
10012954:	0005883a 	mov	r2,zero
10012958:	dfc00517 	ldw	ra,20(sp)
1001295c:	dc400417 	ldw	r17,16(sp)
10012960:	dc000317 	ldw	r16,12(sp)
10012964:	dec00604 	addi	sp,sp,24
10012968:	f800283a 	ret
1001296c:	00840034 	movhi	r2,4096
10012970:	108e4304 	addi	r2,r2,14604
10012974:	10002626 	beq	r2,zero,10012a10 <__register_exitproc+0x110>
10012978:	01006404 	movi	r4,400
1001297c:	d9400015 	stw	r5,0(sp)
10012980:	d9800115 	stw	r6,4(sp)
10012984:	d9c00215 	stw	r7,8(sp)
10012988:	000390c0 	call	1000390c <malloc>
1001298c:	d9400017 	ldw	r5,0(sp)
10012990:	d9800117 	ldw	r6,4(sp)
10012994:	d9c00217 	ldw	r7,8(sp)
10012998:	10001d26 	beq	r2,zero,10012a10 <__register_exitproc+0x110>
1001299c:	81000017 	ldw	r4,0(r16)
100129a0:	10000115 	stw	zero,4(r2)
100129a4:	02000044 	movi	r8,1
100129a8:	22405217 	ldw	r9,328(r4)
100129ac:	0007883a 	mov	r3,zero
100129b0:	12400015 	stw	r9,0(r2)
100129b4:	20805215 	stw	r2,328(r4)
100129b8:	10006215 	stw	zero,392(r2)
100129bc:	10006315 	stw	zero,396(r2)
100129c0:	883fde26 	beq	r17,zero,1001293c <__alt_data_end+0xf801293c>
100129c4:	18c9883a 	add	r4,r3,r3
100129c8:	2109883a 	add	r4,r4,r4
100129cc:	1109883a 	add	r4,r2,r4
100129d0:	21802215 	stw	r6,136(r4)
100129d4:	01800044 	movi	r6,1
100129d8:	12406217 	ldw	r9,392(r2)
100129dc:	30cc983a 	sll	r6,r6,r3
100129e0:	4992b03a 	or	r9,r9,r6
100129e4:	12406215 	stw	r9,392(r2)
100129e8:	21c04215 	stw	r7,264(r4)
100129ec:	01000084 	movi	r4,2
100129f0:	893fd21e 	bne	r17,r4,1001293c <__alt_data_end+0xf801293c>
100129f4:	11006317 	ldw	r4,396(r2)
100129f8:	218cb03a 	or	r6,r4,r6
100129fc:	11806315 	stw	r6,396(r2)
10012a00:	003fce06 	br	1001293c <__alt_data_end+0xf801293c>
10012a04:	18805304 	addi	r2,r3,332
10012a08:	18805215 	stw	r2,328(r3)
10012a0c:	003fc606 	br	10012928 <__alt_data_end+0xf8012928>
10012a10:	00bfffc4 	movi	r2,-1
10012a14:	003fd006 	br	10012958 <__alt_data_end+0xf8012958>
