
test.elf:     file format elf32-littlenios2
test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00012a18 memsz 0x00012a18 flags r-x
    LOAD off    0x00013a38 vaddr 0x10012a38 paddr 0x100145fc align 2**12
         filesz 0x00001bc4 memsz 0x00001bc4 flags rw-
    LOAD off    0x000161c0 vaddr 0x100161c0 paddr 0x100161c0 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012274  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000594  100124a4  100124a4  000134a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bc4  10012a38  100145fc  00013a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  100161c0  100161c0  000161c0  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  10016324  10016324  000155fc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000155fc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001248  00000000  00000000  00015620  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00031255  00000000  00000000  00016868  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000bfc1  00000000  00000000  00047abd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000e60d  00000000  00000000  00053a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002924  00000000  00000000  0006208c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004453  00000000  00000000  000649b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00019550  00000000  00000000  00068e03  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00082354  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001c10  00000000  00000000  00082368  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000879a6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000879a9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000879b5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000879b6  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000879b7  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000879bb  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000879bf  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000879c3  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000879ce  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000879d9  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  000879e4  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000034  00000000  00000000  000879f1  2**0
                  CONTENTS, READONLY
 29 .jdi          00005803  00000000  00000000  00087a25  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00053685  00000000  00000000  0008d228  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
100124a4 l    d  .rodata	00000000 .rodata
10012a38 l    d  .rwdata	00000000 .rwdata
100161c0 l    d  .bss	00000000 .bss
10016324 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
10014558 l     O .rwdata	00000003 VALID_HEADER
1001455c l     O .rwdata	00000004 frameptr
10014560 l     O .rwdata	00000004 ocmptr
10014564 l     O .rwdata	00000004 ON_NIOS
100126e0 l     O .rodata	0000000a __func__.3281
10014568 l     O .rwdata	00000004 temp.3287
1001456c l     O .rwdata	00000005 __func__.3302
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10001c6c l     F .text	00000008 __fp_unlock
10001c80 l     F .text	0000019c __sinit.part.1
10001e1c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 ftell.c
00000000 l    df *ABS*	00000000 ftello.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
10012a80 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
1000449c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 vfprintf.c
10012776 l     O .rodata	00000010 zeroes.4404
10006bc4 l     F .text	000000bc __sbprintf
10012786 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 dtoa.c
10007020 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
100132cc l     O .rwdata	00000020 lc_ctype_charset
100132ac l     O .rwdata	00000020 lc_message_charset
100132ec l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
100127b4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000a8e8 l     F .text	000000fc __sprint_r.part.0
100128d8 l     O .rodata	00000010 zeroes.4349
1000bf24 l     F .text	000000bc __sbprintf
100128e8 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000fa68 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000fb7c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000fbdc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
1000fcf0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
1000fdd8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000ff44 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10010030 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
1001020c l     F .text	0000003c alt_get_errno
10010248 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
100145a4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
100105c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10010700 l     F .text	00000034 alt_dev_reg
100134cc l     O .rwdata	00001060 jtag_uart_0
1001452c l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
100109e8 l     F .text	0000020c altera_avalon_jtag_uart_irq
10010bf4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
100145a8 l     O .rwdata	00000009 hcinfo.2538
100145b4 l     O .rwdata	0000000a hcinfo.2551
100145c0 l     O .rwdata	00000009 hcinfo.2560
100145cc l     O .rwdata	0000000a hcinfo.2573
100145d8 l     O .rwdata	0000000a hcinfo.2586
100145e4 l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
100117fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10011f38 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
100161f8 g     O .bss	00000004 alt_instruction_exception_handler
10003e34 g     F .text	00000018 putchar
1000a154 g     F .text	00000074 _mprec_log10
1000a240 g     F .text	0000008c __any_on
10008e44 g     F .text	00000054 _isatty_r
100127c0 g     O .rodata	00000028 __mprec_tinytens
10010148 g     F .text	0000007c alt_main
1000026c g     F .text	00000684 uncompress
10003e4c g     F .text	000000c0 _puts_r
10016224 g     O .bss	00000100 alt_irq
10008f74 g     F .text	00000060 _lseek_r
100145fc g       *ABS*	00000000 __flash_rwdata_start
100088d0 g     F .text	000000ac __sflags
1000e440 g     F .text	00000088 .hidden __eqdf2
10016324 g       *ABS*	00000000 __alt_heap_start
1000a7ac g     F .text	0000005c _kill_r
10003df0 g     F .text	0000003c printf
1000c41c g     F .text	0000009c _wcrtomb_r
1000a574 g     F .text	00000084 _signal_r
100047b8 g     F .text	0000005c __sseek
10001fcc g     F .text	00000010 __sinit
1000bfe0 g     F .text	00000140 __swbuf_r
10008e98 g     F .text	0000007c _setlocale_r
10001e24 g     F .text	00000078 __sfmoreglue
100101e8 g     F .text	00000024 __malloc_unlock
1001122c g     F .text	0000011c alt_hostfs_open
10000b6c g     F .text	0000002c getControl
100008f0 g     F .text	00000020 checkPacked
100090b8 g     F .text	0000015c memmove
10001fb4 g     F .text	00000018 _cleanup
10009214 g     F .text	000000a8 _Balloc
1000e4c8 g     F .text	000000dc .hidden __gtdf2
1001223c g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
10002cf4 g     F .text	0000005c _fstat_r
100161c4 g     O .bss	00000004 errno
10004734 g     F .text	00000008 __seofread
100161e4 g     O .bss	00000004 alt_argv
1001c554 g       *ABS*	00000000 _gp
1000fcd0 g     F .text	00000020 getpid
1001334c g     O .rwdata	00000180 alt_fd_list
10011464 g     F .text	00000068 alt_hostfs_seek
10003e2c g     F .text	00000008 _putchar_r
1001199c g     F .text	00000090 alt_find_dev
10003af0 g     F .text	00000148 memcpy
10001c74 g     F .text	0000000c _cleanup_r
1000f880 g     F .text	000000dc .hidden __floatsidf
10011b34 g     F .text	00000080 alt_fs_reg
1001201c g     F .text	0000007c alt_io_redirect
1000e5a4 g     F .text	000000f4 .hidden __ltdf2
100124a4 g       *ABS*	00000000 __DTOR_END__
10003f0c g     F .text	00000014 puts
10012260 g     F .text	0000009c alt_exception_cause_generated_bad_addr
1000a494 g     F .text	00000074 __fpclassifyd
1000a0b0 g     F .text	000000a4 __ratio
1000bf08 g     F .text	0000001c __vfiprintf_internal
10010dec g     F .text	0000021c altera_avalon_jtag_uart_read
100032bc g     F .text	00000014 malloc
10003dc0 g     F .text	00000030 _printf_r
10001728 g     F .text	00000064 .hidden __udivsi3
1000fd2c g     F .text	000000ac isatty
1000a5f8 g     F .text	000000bc _raise_r
1000180c g     F .text	00000068 __assert_func
10012810 g     O .rodata	000000c8 __mprec_tens
10008f14 g     F .text	0000000c __locale_charset
100161d0 g     O .bss	00000004 __malloc_top_pad
1000a808 g     F .text	00000004 _getpid_r
10014584 g     O .rwdata	00000004 __mb_cur_max
10008f44 g     F .text	0000000c _localeconv_r
10009648 g     F .text	0000003c __i2b
1000897c g     F .text	000004c8 __sfvwrite_r
1000a6b4 g     F .text	000000a8 __sigtramp_r
1000468c g     F .text	00000054 _sbrk_r
1001138c g     F .text	0000006c alt_hostfs_read
1000a434 g     F .text	00000060 _read_r
1001459c g     O .rwdata	00000004 alt_max_fd
100018c0 g     F .text	000000f0 _fclose_r
10001c3c g     F .text	00000030 fflush
100161cc g     O .bss	00000004 __malloc_max_sbrked_mem
1000d1c4 g     F .text	000008ac .hidden __adddf3
10009e58 g     F .text	0000010c __b2d
1000cc00 g     F .text	000005c4 .hidden __umoddi3
1001006c g     F .text	000000dc lseek
10014574 g     O .rwdata	00000004 _global_impure_ptr
10003f38 g     F .text	00000564 _realloc_r
10016324 g       *ABS*	00000000 __bss_end
10011e48 g     F .text	000000f0 alt_iic_isr_register
10012134 g     F .text	00000108 alt_tick
1000c604 g     F .text	000005fc .hidden __udivdi3
1000c378 g     F .text	00000024 _fputwc_r
100127e8 g     O .rodata	00000028 __mprec_bigtens
1000942c g     F .text	00000104 __s2b
10007008 g     F .text	00000018 abort
1000f95c g     F .text	000000a8 .hidden __floatunsidf
10009b98 g     F .text	00000060 __mcmp
10001fec g     F .text	00000018 __fp_lock_all
10011dfc g     F .text	0000004c alt_ic_irq_enabled
10012098 g     F .text	0000009c alt_alarm_stop
100161ec g     O .bss	00000004 alt_irq_active
10002894 g     F .text	00000444 _fseeko_r
10011348 g     F .text	00000044 alt_hostfs_close
100000fc g     F .exceptions	000000d4 alt_irq_handler
10013324 g     O .rwdata	00000028 alt_dev_null
10000978 g     F .text	00000028 getch
100117dc g     F .text	00000020 alt_dcache_flush_all
10009530 g     F .text	00000068 __hi0bits
1000f800 g     F .text	00000080 .hidden __fixdfsi
100145fc g       *ABS*	00000000 __ram_rwdata_end
10014594 g     O .rwdata	00000008 alt_dev_list
10010600 g     F .text	00000100 write
1000a2cc g     F .text	000000a0 _putc_r
10012a38 g       *ABS*	00000000 __ram_rodata_end
1000fc18 g     F .text	000000b8 fstat
100021ac g     F .text	00000024 fprintf
1000fe14 g     F .text	00000130 kill
1000e5a4 g     F .text	000000f4 .hidden __ledf2
10009910 g     F .text	00000140 __pow5mult
100161dc g     O .bss	00000004 __nlocale_changed
1000a9fc g     F .text	0000150c ___vfiprintf_internal_r
1000178c g     F .text	00000058 .hidden __umodsi3
10016324 g       *ABS*	00000000 end
100161c0 g     O .bss	00000004 fileptr
10002cd8 g     F .text	0000001c fseeko
10002878 g     F .text	0000001c fseek
10010928 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
100124a4 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000fa04 g     F .text	00000064 .hidden __clzsi2
10011008 g     F .text	00000224 altera_avalon_jtag_uart_write
10001fdc g     F .text	00000004 __sfp_lock_acquire
10008fd4 g     F .text	000000e4 memchr
100048cc g     F .text	000022dc ___vfprintf_internal_r
10002564 g     F .text	00000310 _free_r
10008f20 g     F .text	00000010 __locale_mb_cur_max
10006e88 g     F .text	00000180 __call_exitprocs
100161d8 g     O .bss	00000004 __mlocale_changed
1001457c g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
100161f0 g     O .bss	00000004 _alt_tick_rate
10002e54 g     F .text	00000014 ftello
10009a50 g     F .text	00000148 __lshift
100161f4 g     O .bss	00000004 _alt_nticks
1000a770 g     F .text	00000018 signal
10000910 g     F .text	00000068 read
1001076c g     F .text	00000058 alt_sys_init
10003d60 g     F .text	00000060 _open_r
1001238c g     F .text	00000118 __register_exitproc
10009684 g     F .text	0000028c __multiply
10010c94 g     F .text	00000068 altera_avalon_jtag_uart_close
100017e4 g     F .text	00000028 .hidden __mulsi3
10012a38 g       *ABS*	00000000 __ram_rwdata_start
100124a4 g       *ABS*	00000000 __ram_rodata_start
100161fc g     O .bss	00000028 __malloc_current_mallinfo
10009f64 g     F .text	0000014c __d2b
10003f20 g     F .text	00000018 realloc
100107c4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10011bb4 g     F .text	000000c4 alt_get_fd
10006e34 g     F .text	00000054 _close_r
10012310 g     F .text	0000007c memcmp
10010884 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10016324 g       *ABS*	00000000 __alt_stack_base
100108d4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10002ff0 g     F .text	000000dc _fwrite_r
10002d68 g     F .text	000000ec _ftello_r
10006ce0 g     F .text	00000154 __swsetup_r
1000da70 g     F .text	000009d0 .hidden __divdf3
10001e9c g     F .text	00000118 __sfp
1000a1c8 g     F .text	00000078 __copybits
10012ea4 g     O .rwdata	00000408 __malloc_av_
10001fe8 g     F .text	00000004 __sinit_lock_release
1000e698 g     F .text	0000086c .hidden __muldf3
100046e0 g     F .text	00000054 __sread
1000240c g     F .text	00000034 fread
10012a38 g     O .rwdata	00000045 _gif
10011a2c g     F .text	00000108 alt_find_file
10011838 g     F .text	000000a4 alt_dev_llist_insert
100101c4 g     F .text	00000024 __malloc_lock
10002184 g     F .text	00000028 _fprintf_r
10010514 g     F .text	000000b0 sbrk
10001be0 g     F .text	0000005c _fflush_r
1000c138 g     F .text	000000dc _calloc_r
1000216c g     F .text	00000018 fopen
100161c0 g       *ABS*	00000000 __bss_start
10003c38 g     F .text	00000128 memset
10000b98 g     F .text	00000a98 main
10000b18 g     F .text	00000054 eraseSRAM
100161e8 g     O .bss	00000004 alt_envp
100161c8 g     O .bss	00000004 __malloc_max_total_mem
10010824 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10002d54 g     F .text	00000014 ftell
1000c120 g     F .text	00000018 __swbuf
100021d0 g     F .text	0000023c _fread_r
100009d8 g     F .text	00000064 skipToTerm
10004814 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
100019b0 g     F .text	00000014 fclose
10007248 g     F .text	00001688 _dtoa_r
100032e4 g     F .text	0000080c _malloc_r
1000c578 g     F .text	00000030 __ascii_wctomb
100145a0 g     O .rwdata	00000004 alt_errno
1000201c g     F .text	00000020 _fiprintf_r
1000a788 g     F .text	00000010 _init_signal
100009a0 g     F .text	00000038 seek
10002e68 g     F .text	000000c4 _fwalk
1000a36c g     F .text	000000c8 putc
10001630 g     F .text	00000084 .hidden __divsi3
10002440 g     F .text	00000124 _malloc_trim_r
100124a4 g       *ABS*	00000000 __CTOR_END__
1000a80c g     F .text	000000dc strcmp
100124a4 g       *ABS*	00000000 __flash_rodata_start
100124a4 g       *ABS*	00000000 __DTOR_LIST__
1000e440 g     F .text	00000088 .hidden __nedf2
10010734 g     F .text	00000038 alt_irq_init
10010490 g     F .text	00000084 alt_release_fd
100128f8 g     O .rodata	00000100 .hidden __clz_tab
100161d4 g     O .bss	00000004 _PathLocale
100122fc g     F .text	00000014 atexit
10006c80 g     F .text	00000060 _write_r
10008f50 g     F .text	00000018 setlocale
10014578 g     O .rwdata	00000004 _impure_ptr
10000a3c g     F .text	000000dc writeSRAM
100161e0 g     O .bss	00000004 alt_argc
100019c4 g     F .text	0000021c __sflush_r
1001193c g     F .text	00000060 _do_dtors
10008f3c g     F .text	00000008 __locale_cjk_lang
10002874 g     F .text	00000004 _fseek_r
100044b8 g     F .text	000001d4 __srefill_r
10000020 g       .exceptions	00000000 alt_irq_entry
10009df4 g     F .text	00000064 __ulp
10002004 g     F .text	00000018 __fp_unlock_all
1001458c g     O .rwdata	00000008 alt_fs_list
100113f8 g     F .text	0000006c alt_hostfs_write
10000020 g       *ABS*	00000000 __ram_exceptions_start
10008f68 g     F .text	0000000c localeconv
10014554 g     O .rwdata	00000004 _gif_len
10011c98 g     F .text	00000050 alt_ic_isr_register
100030cc g     F .text	00000034 fwrite
100145fc g       *ABS*	00000000 _edata
10016324 g       *ABS*	00000000 _end
1000c214 g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
10010cfc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10011d70 g     F .text	0000008c alt_ic_irq_disable
1000473c g     F .text	0000007c __swrite
10014580 g     O .rwdata	00000004 __malloc_trim_threshold
10008f30 g     F .text	0000000c __locale_msgcharset
10001888 g     F .text	00000038 exit
1000203c g     F .text	0000003c fiprintf
100048b4 g     F .text	00000018 _vfiprintf_r
10002f2c g     F .text	000000c4 _fwalk_reent
10009bf8 g     F .text	000001fc __mdiff
100016b4 g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10001fe0 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10002078 g     F .text	000000f4 _fopen_r
1000fba8 g     F .text	00000034 _exit
100116b0 g     F .text	0000012c alt_alarm_start
10003100 g     F .text	000001bc __smakebuf_r
1000481c g     F .text	00000098 strlen
1000a508 g     F .text	0000006c _init_signal_r
10010334 g     F .text	0000015c open
1000e4c8 g     F .text	000000dc .hidden __gedf2
10001874 g     F .text	00000014 __assert
10014588 g     O .rwdata	00000004 __wctomb
10002d50 g     F .text	00000004 _ftell_r
1000a9e4 g     F .text	00000018 __sprint_r
10011c78 g     F .text	00000020 alt_icache_flush_all
100145f0 g     O .rwdata	00000004 alt_priority_mask
10011ce8 g     F .text	00000088 alt_ic_irq_enable
10006ba8 g     F .text	0000001c __vfprintf_internal
1000c5a8 g     F .text	0000005c _wctomb_r
1000ef04 g     F .text	000008fc .hidden __subdf3
10009598 g     F .text	000000b0 __lo0bits
100145f4 g     O .rwdata	00000008 alt_alarm_list
100118dc g     F .text	00000060 _do_ctors
1000a798 g     F .text	00000014 __sigtramp
1000c4b8 g     F .text	000000c0 wcrtomb
1000faa4 g     F .text	000000d8 close
1000ffac g     F .text	00000084 alt_load
1000c39c g     F .text	00000080 fputwc
1000a75c g     F .text	00000014 raise
100032d0 g     F .text	00000014 free
10001fe4 g     F .text	00000004 __sinit_lock_acquire
100092e4 g     F .text	00000148 __multadd
100092bc g     F .text	00000028 _Bfree
100114cc g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	10988904 	addi	r2,r2,25124
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	10988904 	addi	r2,r2,25124
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0a72917 	ldw	r2,-25436(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0a72917 	ldw	r2,-25436(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
1000023c:	d6b15514 	ori	gp,gp,50516
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000244:	10987014 	ori	r2,r2,25024

    movhi r3, %hi(__bss_end)
10000248:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
1000024c:	18d8c914 	ori	r3,r3,25380

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	000ffac0 	call	1000ffac <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	00101480 	call	10010148 <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <uncompress>:
} dictionary_entry_t;

void uncompress(int32_t code_length,
				const unsigned char *input,
				int32_t input_length,
				unsigned char *out) {
1000026c:	deffec04 	addi	sp,sp,-80
10000270:	dfc01315 	stw	ra,76(sp)
10000274:	df001215 	stw	fp,72(sp)
10000278:	dc001115 	stw	r16,68(sp)
1000027c:	df001204 	addi	fp,sp,72
10000280:	e13ffb15 	stw	r4,-20(fp)
10000284:	e17ffc15 	stw	r5,-16(fp)
10000288:	e1bffd15 	stw	r6,-12(fp)
1000028c:	e1fffe15 	stw	r7,-8(fp)
	printf("uncompress!\n");
10000290:	01040074 	movhi	r4,4097
10000294:	21092904 	addi	r4,r4,9380
10000298:	0003f0c0 	call	10003f0c <puts>
	// Source for this function is:
	// https://commandlinefanatic.com/cgi-bin/showarticle.cgi?article=art011
	int32_t i, bit;
	int32_t code, prev = -1;
1000029c:	00bfffc4 	movi	r2,-1
100002a0:	e0bff015 	stw	r2,-64(fp)
	dictionary_entry_t *dictionary;
	int32_t dictionary_ind;
	uint32_t mask = 0x01;
100002a4:	00800044 	movi	r2,1
100002a8:	e0bff315 	stw	r2,-52(fp)
	int32_t reset_code_length;
	int32_t clear_code;	 // This varies depending on code_length
	int32_t stop_code;	 // one more than clear code
	int32_t match_len;

	clear_code = 1 << (code_length);
100002ac:	00c00044 	movi	r3,1
100002b0:	e0bffb17 	ldw	r2,-20(fp)
100002b4:	1884983a 	sll	r2,r3,r2
100002b8:	e0bff615 	stw	r2,-40(fp)
	stop_code = clear_code + 1;
100002bc:	e0bff617 	ldw	r2,-40(fp)
100002c0:	10800044 	addi	r2,r2,1
100002c4:	e0bff715 	stw	r2,-36(fp)
	// To handle clear codes
	reset_code_length = code_length;
100002c8:	e0bffb17 	ldw	r2,-20(fp)
100002cc:	e0bff815 	stw	r2,-32(fp)

	// Create a dictionary large enough to hold "code_length" entries.
	// Once the dictionary overflows, code_length increases
	dictionary = (dictionary_entry_t *)
		malloc(sizeof(dictionary_entry_t) * (1 << (code_length + 1)));
100002d0:	e0bffb17 	ldw	r2,-20(fp)
100002d4:	10800044 	addi	r2,r2,1
100002d8:	00c00304 	movi	r3,12
100002dc:	1884983a 	sll	r2,r3,r2
	// To handle clear codes
	reset_code_length = code_length;

	// Create a dictionary large enough to hold "code_length" entries.
	// Once the dictionary overflows, code_length increases
	dictionary = (dictionary_entry_t *)
100002e0:	1009883a 	mov	r4,r2
100002e4:	00032bc0 	call	100032bc <malloc>
100002e8:	e0bff115 	stw	r2,-60(fp)

	// Technically, it shouldn't be necessary to initialize the
	// dictionary.  The spec says that the encoder "should output a
	// clear code as the first code in the image data stream".  It doesn't
	// say must, though...
	for (dictionary_ind = 0;
100002ec:	e03ff215 	stw	zero,-56(fp)
100002f0:	00001e06 	br	1000036c <uncompress+0x100>
		 dictionary_ind < (1 << code_length);
		 dictionary_ind++) {
//		printf("setup dictionary start\n");
		dictionary[dictionary_ind].byte = dictionary_ind;
100002f4:	e0bff217 	ldw	r2,-56(fp)
100002f8:	01400304 	movi	r5,12
100002fc:	1009883a 	mov	r4,r2
10000300:	00017e40 	call	100017e4 <__mulsi3>
10000304:	1007883a 	mov	r3,r2
10000308:	e0bff117 	ldw	r2,-60(fp)
1000030c:	10c5883a 	add	r2,r2,r3
10000310:	e0fff217 	ldw	r3,-56(fp)
10000314:	10c00005 	stb	r3,0(r2)
		// XXX this only works because prev is a 32-bit int32_t (> 12 bits)
		dictionary[dictionary_ind].prev = -1;
10000318:	e0bff217 	ldw	r2,-56(fp)
1000031c:	01400304 	movi	r5,12
10000320:	1009883a 	mov	r4,r2
10000324:	00017e40 	call	100017e4 <__mulsi3>
10000328:	1007883a 	mov	r3,r2
1000032c:	e0bff117 	ldw	r2,-60(fp)
10000330:	10c5883a 	add	r2,r2,r3
10000334:	00ffffc4 	movi	r3,-1
10000338:	10c00115 	stw	r3,4(r2)
		dictionary[dictionary_ind].len = 1;
1000033c:	e0bff217 	ldw	r2,-56(fp)
10000340:	01400304 	movi	r5,12
10000344:	1009883a 	mov	r4,r2
10000348:	00017e40 	call	100017e4 <__mulsi3>
1000034c:	1007883a 	mov	r3,r2
10000350:	e0bff117 	ldw	r2,-60(fp)
10000354:	10c5883a 	add	r2,r2,r3
10000358:	00c00044 	movi	r3,1
1000035c:	10c00215 	stw	r3,8(r2)
	// dictionary.  The spec says that the encoder "should output a
	// clear code as the first code in the image data stream".  It doesn't
	// say must, though...
	for (dictionary_ind = 0;
		 dictionary_ind < (1 << code_length);
		 dictionary_ind++) {
10000360:	e0bff217 	ldw	r2,-56(fp)
10000364:	10800044 	addi	r2,r2,1
10000368:	e0bff215 	stw	r2,-56(fp)
	// Technically, it shouldn't be necessary to initialize the
	// dictionary.  The spec says that the encoder "should output a
	// clear code as the first code in the image data stream".  It doesn't
	// say must, though...
	for (dictionary_ind = 0;
		 dictionary_ind < (1 << code_length);
1000036c:	00c00044 	movi	r3,1
10000370:	e0bffb17 	ldw	r2,-20(fp)
10000374:	1884983a 	sll	r2,r3,r2

	// Technically, it shouldn't be necessary to initialize the
	// dictionary.  The spec says that the encoder "should output a
	// clear code as the first code in the image data stream".  It doesn't
	// say must, though...
	for (dictionary_ind = 0;
10000378:	e0fff217 	ldw	r3,-56(fp)
1000037c:	18bfdd16 	blt	r3,r2,100002f4 <__alt_data_end+0xf80002f4>
		dictionary[dictionary_ind].prev = -1;
		dictionary[dictionary_ind].len = 1;
	}

	// 2^code_len + 1 is the special "end" code; don't give it an entry here
	dictionary_ind++;
10000380:	e0bff217 	ldw	r2,-56(fp)
10000384:	10800044 	addi	r2,r2,1
10000388:	e0bff215 	stw	r2,-56(fp)
	dictionary_ind++;
1000038c:	e0bff217 	ldw	r2,-56(fp)
10000390:	10800044 	addi	r2,r2,1
10000394:	e0bff215 	stw	r2,-56(fp)

	// TODO verify that the very last byte is clear_code + 1
	while (input_length) {
10000398:	00014806 	br	100008bc <uncompress+0x650>
//		printf("main loop | code_length: %d\n", code_length);
		code = 0x0;
1000039c:	e03fef15 	stw	zero,-68(fp)
		// Always read one more bit than the code length
		for (i = 0; i < (code_length + 1); i++) {
100003a0:	e03fee15 	stw	zero,-72(fp)
100003a4:	00001f06 	br	10000424 <uncompress+0x1b8>
//			 printf("    mask:        %02x\n", mask);
//			 printf("    bit:         %02x\n", bit);
//			 printf("    input:       %02x\n", *input);
//

			bit = (*input & mask) ? 1 : 0;
100003a8:	e0bffc17 	ldw	r2,-16(fp)
100003ac:	10800003 	ldbu	r2,0(r2)
100003b0:	10c03fcc 	andi	r3,r2,255
100003b4:	e0bff317 	ldw	r2,-52(fp)
100003b8:	1884703a 	and	r2,r3,r2
100003bc:	1004c03a 	cmpne	r2,r2,zero
100003c0:	10803fcc 	andi	r2,r2,255
100003c4:	e0bff915 	stw	r2,-28(fp)
			mask <<= 1;
100003c8:	e0bff317 	ldw	r2,-52(fp)
100003cc:	1085883a 	add	r2,r2,r2
100003d0:	e0bff315 	stw	r2,-52(fp)

			if (mask == 0x100) {
100003d4:	e0bff317 	ldw	r2,-52(fp)
100003d8:	10804018 	cmpnei	r2,r2,256
100003dc:	1000081e 	bne	r2,zero,10000400 <uncompress+0x194>
				mask = 0x01;
100003e0:	00800044 	movi	r2,1
100003e4:	e0bff315 	stw	r2,-52(fp)
				input++;
100003e8:	e0bffc17 	ldw	r2,-16(fp)
100003ec:	10800044 	addi	r2,r2,1
100003f0:	e0bffc15 	stw	r2,-16(fp)
				input_length--;
100003f4:	e0bffd17 	ldw	r2,-12(fp)
100003f8:	10bfffc4 	addi	r2,r2,-1
100003fc:	e0bffd15 	stw	r2,-12(fp)
			}

			code = code | (bit << i);
10000400:	e0fff917 	ldw	r3,-28(fp)
10000404:	e0bfee17 	ldw	r2,-72(fp)
10000408:	1884983a 	sll	r2,r3,r2
1000040c:	e0ffef17 	ldw	r3,-68(fp)
10000410:	1884b03a 	or	r2,r3,r2
10000414:	e0bfef15 	stw	r2,-68(fp)
	// TODO verify that the very last byte is clear_code + 1
	while (input_length) {
//		printf("main loop | code_length: %d\n", code_length);
		code = 0x0;
		// Always read one more bit than the code length
		for (i = 0; i < (code_length + 1); i++) {
10000418:	e0bfee17 	ldw	r2,-72(fp)
1000041c:	10800044 	addi	r2,r2,1
10000420:	e0bfee15 	stw	r2,-72(fp)
10000424:	e0bffb17 	ldw	r2,-20(fp)
10000428:	10800044 	addi	r2,r2,1
1000042c:	e0ffee17 	ldw	r3,-72(fp)
10000430:	18bfdd16 	blt	r3,r2,100003a8 <__alt_data_end+0xf80003a8>
			code = code | (bit << i);
		}
//        printf("new code: %02x\n", code);


		if (code == clear_code) {
10000434:	e0ffef17 	ldw	r3,-68(fp)
10000438:	e0bff617 	ldw	r2,-40(fp)
1000043c:	1880381e 	bne	r3,r2,10000520 <uncompress+0x2b4>
			code_length = reset_code_length;
10000440:	e0bff817 	ldw	r2,-32(fp)
10000444:	e0bffb15 	stw	r2,-20(fp)
			dictionary = (dictionary_entry_t *)realloc(dictionary,
													   sizeof(dictionary_entry_t) * (1 << (code_length + 1)));
10000448:	e0bffb17 	ldw	r2,-20(fp)
1000044c:	10800044 	addi	r2,r2,1
//        printf("new code: %02x\n", code);


		if (code == clear_code) {
			code_length = reset_code_length;
			dictionary = (dictionary_entry_t *)realloc(dictionary,
10000450:	00c00304 	movi	r3,12
10000454:	1884983a 	sll	r2,r3,r2
10000458:	100b883a 	mov	r5,r2
1000045c:	e13ff117 	ldw	r4,-60(fp)
10000460:	0003f200 	call	10003f20 <realloc>
10000464:	e0bff115 	stw	r2,-60(fp)
													   sizeof(dictionary_entry_t) * (1 << (code_length + 1)));

			for (dictionary_ind = 0;
10000468:	e03ff215 	stw	zero,-56(fp)
1000046c:	00001e06 	br	100004e8 <uncompress+0x27c>
				 dictionary_ind < (1 << code_length);
				 dictionary_ind++) {
				dictionary[dictionary_ind].byte = dictionary_ind;
10000470:	e0bff217 	ldw	r2,-56(fp)
10000474:	01400304 	movi	r5,12
10000478:	1009883a 	mov	r4,r2
1000047c:	00017e40 	call	100017e4 <__mulsi3>
10000480:	1007883a 	mov	r3,r2
10000484:	e0bff117 	ldw	r2,-60(fp)
10000488:	10c5883a 	add	r2,r2,r3
1000048c:	e0fff217 	ldw	r3,-56(fp)
10000490:	10c00005 	stb	r3,0(r2)
				// XXX this only works because prev is a 32-bit int32_t (> 12 bits)
				dictionary[dictionary_ind].prev = -1;
10000494:	e0bff217 	ldw	r2,-56(fp)
10000498:	01400304 	movi	r5,12
1000049c:	1009883a 	mov	r4,r2
100004a0:	00017e40 	call	100017e4 <__mulsi3>
100004a4:	1007883a 	mov	r3,r2
100004a8:	e0bff117 	ldw	r2,-60(fp)
100004ac:	10c5883a 	add	r2,r2,r3
100004b0:	00ffffc4 	movi	r3,-1
100004b4:	10c00115 	stw	r3,4(r2)
				dictionary[dictionary_ind].len = 1;
100004b8:	e0bff217 	ldw	r2,-56(fp)
100004bc:	01400304 	movi	r5,12
100004c0:	1009883a 	mov	r4,r2
100004c4:	00017e40 	call	100017e4 <__mulsi3>
100004c8:	1007883a 	mov	r3,r2
100004cc:	e0bff117 	ldw	r2,-60(fp)
100004d0:	10c5883a 	add	r2,r2,r3
100004d4:	00c00044 	movi	r3,1
100004d8:	10c00215 	stw	r3,8(r2)
			dictionary = (dictionary_entry_t *)realloc(dictionary,
													   sizeof(dictionary_entry_t) * (1 << (code_length + 1)));

			for (dictionary_ind = 0;
				 dictionary_ind < (1 << code_length);
				 dictionary_ind++) {
100004dc:	e0bff217 	ldw	r2,-56(fp)
100004e0:	10800044 	addi	r2,r2,1
100004e4:	e0bff215 	stw	r2,-56(fp)
			code_length = reset_code_length;
			dictionary = (dictionary_entry_t *)realloc(dictionary,
													   sizeof(dictionary_entry_t) * (1 << (code_length + 1)));

			for (dictionary_ind = 0;
				 dictionary_ind < (1 << code_length);
100004e8:	00c00044 	movi	r3,1
100004ec:	e0bffb17 	ldw	r2,-20(fp)
100004f0:	1884983a 	sll	r2,r3,r2
		if (code == clear_code) {
			code_length = reset_code_length;
			dictionary = (dictionary_entry_t *)realloc(dictionary,
													   sizeof(dictionary_entry_t) * (1 << (code_length + 1)));

			for (dictionary_ind = 0;
100004f4:	e0fff217 	ldw	r3,-56(fp)
100004f8:	18bfdd16 	blt	r3,r2,10000470 <__alt_data_end+0xf8000470>
				dictionary[dictionary_ind].byte = dictionary_ind;
				// XXX this only works because prev is a 32-bit int32_t (> 12 bits)
				dictionary[dictionary_ind].prev = -1;
				dictionary[dictionary_ind].len = 1;
			}
			dictionary_ind++;
100004fc:	e0bff217 	ldw	r2,-56(fp)
10000500:	10800044 	addi	r2,r2,1
10000504:	e0bff215 	stw	r2,-56(fp)
			dictionary_ind++;
10000508:	e0bff217 	ldw	r2,-56(fp)
1000050c:	10800044 	addi	r2,r2,1
10000510:	e0bff215 	stw	r2,-56(fp)
			prev = -1;
10000514:	00bfffc4 	movi	r2,-1
10000518:	e0bff015 	stw	r2,-64(fp)
			continue;
1000051c:	0000e706 	br	100008bc <uncompress+0x650>
		} else if (code == stop_code) {
10000520:	e0ffef17 	ldw	r3,-68(fp)
10000524:	e0bff717 	ldw	r2,-36(fp)
10000528:	18800d1e 	bne	r3,r2,10000560 <uncompress+0x2f4>
			if (input_length > 1) {
1000052c:	e0bffd17 	ldw	r2,-12(fp)
10000530:	10800090 	cmplti	r2,r2,2
10000534:	1000e41e 	bne	r2,zero,100008c8 <uncompress+0x65c>
				fprintf(stderr, "Malformed GIF (early stop code)\n");
10000538:	d0a00917 	ldw	r2,-32732(gp)
1000053c:	10800317 	ldw	r2,12(r2)
10000540:	100f883a 	mov	r7,r2
10000544:	01800804 	movi	r6,32
10000548:	01400044 	movi	r5,1
1000054c:	01040074 	movhi	r4,4097
10000550:	21092c04 	addi	r4,r4,9392
10000554:	00030cc0 	call	100030cc <fwrite>
				exit(0);
10000558:	0009883a 	mov	r4,zero
1000055c:	00018880 	call	10001888 <exit>
			break;
		}

		// Update the dictionary with this character plus the _entry_
		// (character or string) that came before it
		if ((prev > -1) && (code_length < 12)) {
10000560:	e0bff017 	ldw	r2,-64(fp)
10000564:	10009116 	blt	r2,zero,100007ac <uncompress+0x540>
10000568:	e0bffb17 	ldw	r2,-20(fp)
1000056c:	10800308 	cmpgei	r2,r2,12
10000570:	10008e1e 	bne	r2,zero,100007ac <uncompress+0x540>

			if (code > dictionary_ind) {
10000574:	e0bfef17 	ldw	r2,-68(fp)
10000578:	e0fff217 	ldw	r3,-56(fp)
1000057c:	18800a0e 	bge	r3,r2,100005a8 <uncompress+0x33c>
				fprintf(stderr, "code = %.02x, but dictionary_ind = %.02x\n",
10000580:	d0a00917 	ldw	r2,-32732(gp)
10000584:	10800317 	ldw	r2,12(r2)
10000588:	e1fff217 	ldw	r7,-56(fp)
1000058c:	e1bfef17 	ldw	r6,-68(fp)
10000590:	01440074 	movhi	r5,4097
10000594:	29493504 	addi	r5,r5,9428
10000598:	1009883a 	mov	r4,r2
1000059c:	00021ac0 	call	100021ac <fprintf>
						code, dictionary_ind);
				exit(0);
100005a0:	0009883a 	mov	r4,zero
100005a4:	00018880 	call	10001888 <exit>
			}

			// Special handling for KwKwK
			if (code == dictionary_ind) {
100005a8:	e0ffef17 	ldw	r3,-68(fp)
100005ac:	e0bff217 	ldw	r2,-56(fp)
100005b0:	1880271e 	bne	r3,r2,10000650 <uncompress+0x3e4>
				int32_t ptr = prev;
100005b4:	e0bff017 	ldw	r2,-64(fp)
100005b8:	e0bff415 	stw	r2,-48(fp)

				while (dictionary[ptr].prev != -1) {
100005bc:	00000906 	br	100005e4 <uncompress+0x378>
					ptr = dictionary[ptr].prev;
100005c0:	e0bff417 	ldw	r2,-48(fp)
100005c4:	01400304 	movi	r5,12
100005c8:	1009883a 	mov	r4,r2
100005cc:	00017e40 	call	100017e4 <__mulsi3>
100005d0:	1007883a 	mov	r3,r2
100005d4:	e0bff117 	ldw	r2,-60(fp)
100005d8:	10c5883a 	add	r2,r2,r3
100005dc:	10800117 	ldw	r2,4(r2)
100005e0:	e0bff415 	stw	r2,-48(fp)

			// Special handling for KwKwK
			if (code == dictionary_ind) {
				int32_t ptr = prev;

				while (dictionary[ptr].prev != -1) {
100005e4:	e0bff417 	ldw	r2,-48(fp)
100005e8:	01400304 	movi	r5,12
100005ec:	1009883a 	mov	r4,r2
100005f0:	00017e40 	call	100017e4 <__mulsi3>
100005f4:	1007883a 	mov	r3,r2
100005f8:	e0bff117 	ldw	r2,-60(fp)
100005fc:	10c5883a 	add	r2,r2,r3
10000600:	10800117 	ldw	r2,4(r2)
10000604:	10bfffd8 	cmpnei	r2,r2,-1
10000608:	103fed1e 	bne	r2,zero,100005c0 <__alt_data_end+0xf80005c0>
					ptr = dictionary[ptr].prev;
				}
				dictionary[dictionary_ind].byte = dictionary[ptr].byte;
1000060c:	e0bff217 	ldw	r2,-56(fp)
10000610:	01400304 	movi	r5,12
10000614:	1009883a 	mov	r4,r2
10000618:	00017e40 	call	100017e4 <__mulsi3>
1000061c:	1007883a 	mov	r3,r2
10000620:	e0bff117 	ldw	r2,-60(fp)
10000624:	10e1883a 	add	r16,r2,r3
10000628:	e0bff417 	ldw	r2,-48(fp)
1000062c:	01400304 	movi	r5,12
10000630:	1009883a 	mov	r4,r2
10000634:	00017e40 	call	100017e4 <__mulsi3>
10000638:	1007883a 	mov	r3,r2
1000063c:	e0bff117 	ldw	r2,-60(fp)
10000640:	10c5883a 	add	r2,r2,r3
10000644:	10800003 	ldbu	r2,0(r2)
10000648:	80800005 	stb	r2,0(r16)
1000064c:	00002606 	br	100006e8 <uncompress+0x47c>
			} else {
				int32_t ptr = code;
10000650:	e0bfef17 	ldw	r2,-68(fp)
10000654:	e0bff515 	stw	r2,-44(fp)
				while (dictionary[ptr].prev != -1) {
10000658:	00000906 	br	10000680 <uncompress+0x414>
					ptr = dictionary[ptr].prev;
1000065c:	e0bff517 	ldw	r2,-44(fp)
10000660:	01400304 	movi	r5,12
10000664:	1009883a 	mov	r4,r2
10000668:	00017e40 	call	100017e4 <__mulsi3>
1000066c:	1007883a 	mov	r3,r2
10000670:	e0bff117 	ldw	r2,-60(fp)
10000674:	10c5883a 	add	r2,r2,r3
10000678:	10800117 	ldw	r2,4(r2)
1000067c:	e0bff515 	stw	r2,-44(fp)
					ptr = dictionary[ptr].prev;
				}
				dictionary[dictionary_ind].byte = dictionary[ptr].byte;
			} else {
				int32_t ptr = code;
				while (dictionary[ptr].prev != -1) {
10000680:	e0bff517 	ldw	r2,-44(fp)
10000684:	01400304 	movi	r5,12
10000688:	1009883a 	mov	r4,r2
1000068c:	00017e40 	call	100017e4 <__mulsi3>
10000690:	1007883a 	mov	r3,r2
10000694:	e0bff117 	ldw	r2,-60(fp)
10000698:	10c5883a 	add	r2,r2,r3
1000069c:	10800117 	ldw	r2,4(r2)
100006a0:	10bfffd8 	cmpnei	r2,r2,-1
100006a4:	103fed1e 	bne	r2,zero,1000065c <__alt_data_end+0xf800065c>
					ptr = dictionary[ptr].prev;
				}
				dictionary[dictionary_ind].byte = dictionary[ptr].byte;
100006a8:	e0bff217 	ldw	r2,-56(fp)
100006ac:	01400304 	movi	r5,12
100006b0:	1009883a 	mov	r4,r2
100006b4:	00017e40 	call	100017e4 <__mulsi3>
100006b8:	1007883a 	mov	r3,r2
100006bc:	e0bff117 	ldw	r2,-60(fp)
100006c0:	10e1883a 	add	r16,r2,r3
100006c4:	e0bff517 	ldw	r2,-44(fp)
100006c8:	01400304 	movi	r5,12
100006cc:	1009883a 	mov	r4,r2
100006d0:	00017e40 	call	100017e4 <__mulsi3>
100006d4:	1007883a 	mov	r3,r2
100006d8:	e0bff117 	ldw	r2,-60(fp)
100006dc:	10c5883a 	add	r2,r2,r3
100006e0:	10800003 	ldbu	r2,0(r2)
100006e4:	80800005 	stb	r2,0(r16)
			}

			dictionary[dictionary_ind].prev = prev;
100006e8:	e0bff217 	ldw	r2,-56(fp)
100006ec:	01400304 	movi	r5,12
100006f0:	1009883a 	mov	r4,r2
100006f4:	00017e40 	call	100017e4 <__mulsi3>
100006f8:	1007883a 	mov	r3,r2
100006fc:	e0bff117 	ldw	r2,-60(fp)
10000700:	10c5883a 	add	r2,r2,r3
10000704:	e0fff017 	ldw	r3,-64(fp)
10000708:	10c00115 	stw	r3,4(r2)

			dictionary[dictionary_ind].len = dictionary[prev].len + 1;
1000070c:	e0bff217 	ldw	r2,-56(fp)
10000710:	01400304 	movi	r5,12
10000714:	1009883a 	mov	r4,r2
10000718:	00017e40 	call	100017e4 <__mulsi3>
1000071c:	1007883a 	mov	r3,r2
10000720:	e0bff117 	ldw	r2,-60(fp)
10000724:	10e1883a 	add	r16,r2,r3
10000728:	e0bff017 	ldw	r2,-64(fp)
1000072c:	01400304 	movi	r5,12
10000730:	1009883a 	mov	r4,r2
10000734:	00017e40 	call	100017e4 <__mulsi3>
10000738:	1007883a 	mov	r3,r2
1000073c:	e0bff117 	ldw	r2,-60(fp)
10000740:	10c5883a 	add	r2,r2,r3
10000744:	10800217 	ldw	r2,8(r2)
10000748:	10800044 	addi	r2,r2,1
1000074c:	80800215 	stw	r2,8(r16)

			dictionary_ind++;
10000750:	e0bff217 	ldw	r2,-56(fp)
10000754:	10800044 	addi	r2,r2,1
10000758:	e0bff215 	stw	r2,-56(fp)

			// GIF89a mandates that this stops at 12 bits
			if ((dictionary_ind == (1 << (code_length + 1))) &&
1000075c:	e0bffb17 	ldw	r2,-20(fp)
10000760:	10800044 	addi	r2,r2,1
10000764:	00c00044 	movi	r3,1
10000768:	1886983a 	sll	r3,r3,r2
1000076c:	e0bff217 	ldw	r2,-56(fp)
10000770:	18800e1e 	bne	r3,r2,100007ac <uncompress+0x540>
10000774:	e0bffb17 	ldw	r2,-20(fp)
10000778:	108002c8 	cmpgei	r2,r2,11
1000077c:	10000b1e 	bne	r2,zero,100007ac <uncompress+0x540>
				(code_length < 11)) {
				code_length++;
10000780:	e0bffb17 	ldw	r2,-20(fp)
10000784:	10800044 	addi	r2,r2,1
10000788:	e0bffb15 	stw	r2,-20(fp)

				dictionary = (dictionary_entry_t *)realloc(dictionary,
														   sizeof(dictionary_entry_t) * (1 << (code_length + 1)));
1000078c:	e0bffb17 	ldw	r2,-20(fp)
10000790:	10800044 	addi	r2,r2,1
			// GIF89a mandates that this stops at 12 bits
			if ((dictionary_ind == (1 << (code_length + 1))) &&
				(code_length < 11)) {
				code_length++;

				dictionary = (dictionary_entry_t *)realloc(dictionary,
10000794:	00c00304 	movi	r3,12
10000798:	1884983a 	sll	r2,r3,r2
1000079c:	100b883a 	mov	r5,r2
100007a0:	e13ff117 	ldw	r4,-60(fp)
100007a4:	0003f200 	call	10003f20 <realloc>
100007a8:	e0bff115 	stw	r2,-60(fp)
														   sizeof(dictionary_entry_t) * (1 << (code_length + 1)));
			}
		}

		prev = code;
100007ac:	e0bfef17 	ldw	r2,-68(fp)
100007b0:	e0bff015 	stw	r2,-64(fp)

		// Now copy the dictionary entry backwards int32_to "out"
		match_len = dictionary[code].len;
100007b4:	e0bfef17 	ldw	r2,-68(fp)
100007b8:	01400304 	movi	r5,12
100007bc:	1009883a 	mov	r4,r2
100007c0:	00017e40 	call	100017e4 <__mulsi3>
100007c4:	1007883a 	mov	r3,r2
100007c8:	e0bff117 	ldw	r2,-60(fp)
100007cc:	10c5883a 	add	r2,r2,r3
100007d0:	10800217 	ldw	r2,8(r2)
100007d4:	e0bffa15 	stw	r2,-24(fp)
		while (code != -1) {
100007d8:	00003106 	br	100008a0 <uncompress+0x634>
			out[dictionary[code].len - 1] = dictionary[code].byte;
100007dc:	e0bfef17 	ldw	r2,-68(fp)
100007e0:	01400304 	movi	r5,12
100007e4:	1009883a 	mov	r4,r2
100007e8:	00017e40 	call	100017e4 <__mulsi3>
100007ec:	1007883a 	mov	r3,r2
100007f0:	e0bff117 	ldw	r2,-60(fp)
100007f4:	10c5883a 	add	r2,r2,r3
100007f8:	10800217 	ldw	r2,8(r2)
100007fc:	10bfffc4 	addi	r2,r2,-1
10000800:	e0fffe17 	ldw	r3,-8(fp)
10000804:	18a1883a 	add	r16,r3,r2
10000808:	e0bfef17 	ldw	r2,-68(fp)
1000080c:	01400304 	movi	r5,12
10000810:	1009883a 	mov	r4,r2
10000814:	00017e40 	call	100017e4 <__mulsi3>
10000818:	1007883a 	mov	r3,r2
1000081c:	e0bff117 	ldw	r2,-60(fp)
10000820:	10c5883a 	add	r2,r2,r3
10000824:	10800003 	ldbu	r2,0(r2)
10000828:	80800005 	stb	r2,0(r16)
			if (dictionary[code].prev == code) {
1000082c:	e0bfef17 	ldw	r2,-68(fp)
10000830:	01400304 	movi	r5,12
10000834:	1009883a 	mov	r4,r2
10000838:	00017e40 	call	100017e4 <__mulsi3>
1000083c:	1007883a 	mov	r3,r2
10000840:	e0bff117 	ldw	r2,-60(fp)
10000844:	10c5883a 	add	r2,r2,r3
10000848:	10c00117 	ldw	r3,4(r2)
1000084c:	e0bfef17 	ldw	r2,-68(fp)
10000850:	18800a1e 	bne	r3,r2,1000087c <uncompress+0x610>
				fprintf(stderr, "internal error; self-reference.");
10000854:	d0a00917 	ldw	r2,-32732(gp)
10000858:	10800317 	ldw	r2,12(r2)
1000085c:	100f883a 	mov	r7,r2
10000860:	018007c4 	movi	r6,31
10000864:	01400044 	movi	r5,1
10000868:	01040074 	movhi	r4,4097
1000086c:	21094004 	addi	r4,r4,9472
10000870:	00030cc0 	call	100030cc <fwrite>
				exit(0);
10000874:	0009883a 	mov	r4,zero
10000878:	00018880 	call	10001888 <exit>
			}
			code = dictionary[code].prev;
1000087c:	e0bfef17 	ldw	r2,-68(fp)
10000880:	01400304 	movi	r5,12
10000884:	1009883a 	mov	r4,r2
10000888:	00017e40 	call	100017e4 <__mulsi3>
1000088c:	1007883a 	mov	r3,r2
10000890:	e0bff117 	ldw	r2,-60(fp)
10000894:	10c5883a 	add	r2,r2,r3
10000898:	10800117 	ldw	r2,4(r2)
1000089c:	e0bfef15 	stw	r2,-68(fp)

		prev = code;

		// Now copy the dictionary entry backwards int32_to "out"
		match_len = dictionary[code].len;
		while (code != -1) {
100008a0:	e0bfef17 	ldw	r2,-68(fp)
100008a4:	10bfffd8 	cmpnei	r2,r2,-1
100008a8:	103fcc1e 	bne	r2,zero,100007dc <__alt_data_end+0xf80007dc>
				exit(0);
			}
			code = dictionary[code].prev;
		}

		out += match_len;
100008ac:	e0bffa17 	ldw	r2,-24(fp)
100008b0:	e0fffe17 	ldw	r3,-8(fp)
100008b4:	1885883a 	add	r2,r3,r2
100008b8:	e0bffe15 	stw	r2,-8(fp)
	// 2^code_len + 1 is the special "end" code; don't give it an entry here
	dictionary_ind++;
	dictionary_ind++;

	// TODO verify that the very last byte is clear_code + 1
	while (input_length) {
100008bc:	e0bffd17 	ldw	r2,-12(fp)
100008c0:	103eb61e 	bne	r2,zero,1000039c <__alt_data_end+0xf800039c>
100008c4:	00000106 	br	100008cc <uncompress+0x660>
		} else if (code == stop_code) {
			if (input_length > 1) {
				fprintf(stderr, "Malformed GIF (early stop code)\n");
				exit(0);
			}
			break;
100008c8:	0001883a 	nop
			code = dictionary[code].prev;
		}

		out += match_len;
	}
	free(dictionary);
100008cc:	e13ff117 	ldw	r4,-60(fp)
100008d0:	00032d00 	call	100032d0 <free>
}
100008d4:	0001883a 	nop
100008d8:	e6ffff04 	addi	sp,fp,-4
100008dc:	dfc00217 	ldw	ra,8(sp)
100008e0:	df000117 	ldw	fp,4(sp)
100008e4:	dc000017 	ldw	r16,0(sp)
100008e8:	dec00304 	addi	sp,sp,12
100008ec:	f800283a 	ret

100008f0 <checkPacked>:
volatile static uint32_t *ocmptr = (uint32_t *)0x00001000;
static int ON_NIOS = 1;

unsigned char *fileptr;

void checkPacked() {
100008f0:	deffff04 	addi	sp,sp,-4
100008f4:	df000015 	stw	fp,0(sp)
100008f8:	d839883a 	mov	fp,sp
	assert(sizeof(HeaderBlock) == 6);
	assert(sizeof(LSD) == 7);
	assert(sizeof(GCE) == 6);
	assert(sizeof(imageDescriptor) == 10);
	assert(sizeof(colorTableEntry) == 3);
}
100008fc:	0001883a 	nop
10000900:	e037883a 	mov	sp,fp
10000904:	df000017 	ldw	fp,0(sp)
10000908:	dec00104 	addi	sp,sp,4
1000090c:	f800283a 	ret

10000910 <read>:

unsigned char *read(void *dest, int size, int segments, unsigned char *src) {
10000910:	defffa04 	addi	sp,sp,-24
10000914:	dfc00515 	stw	ra,20(sp)
10000918:	df000415 	stw	fp,16(sp)
1000091c:	df000404 	addi	fp,sp,16
10000920:	e13ffc15 	stw	r4,-16(fp)
10000924:	e17ffd15 	stw	r5,-12(fp)
10000928:	e1bffe15 	stw	r6,-8(fp)
1000092c:	e1ffff15 	stw	r7,-4(fp)
	memcpy(dest, src, size * segments);
10000930:	e17ffe17 	ldw	r5,-8(fp)
10000934:	e13ffd17 	ldw	r4,-12(fp)
10000938:	00017e40 	call	100017e4 <__mulsi3>
1000093c:	100d883a 	mov	r6,r2
10000940:	e17fff17 	ldw	r5,-4(fp)
10000944:	e13ffc17 	ldw	r4,-16(fp)
10000948:	0003af00 	call	10003af0 <memcpy>
	return src + size * segments;
1000094c:	e17ffe17 	ldw	r5,-8(fp)
10000950:	e13ffd17 	ldw	r4,-12(fp)
10000954:	00017e40 	call	100017e4 <__mulsi3>
10000958:	1007883a 	mov	r3,r2
1000095c:	e0bfff17 	ldw	r2,-4(fp)
10000960:	10c5883a 	add	r2,r2,r3
}
10000964:	e037883a 	mov	sp,fp
10000968:	dfc00117 	ldw	ra,4(sp)
1000096c:	df000017 	ldw	fp,0(sp)
10000970:	dec00204 	addi	sp,sp,8
10000974:	f800283a 	ret

10000978 <getch>:
//
unsigned char getch(unsigned char *ptr) {
10000978:	defffe04 	addi	sp,sp,-8
1000097c:	df000115 	stw	fp,4(sp)
10000980:	df000104 	addi	fp,sp,4
10000984:	e13fff15 	stw	r4,-4(fp)
	return *fileptr;
10000988:	d0a71b17 	ldw	r2,-25492(gp)
1000098c:	10800003 	ldbu	r2,0(r2)
}
10000990:	e037883a 	mov	sp,fp
10000994:	df000017 	ldw	fp,0(sp)
10000998:	dec00104 	addi	sp,sp,4
1000099c:	f800283a 	ret

100009a0 <seek>:

unsigned char *seek(unsigned char *ptr, int size) {
100009a0:	defffd04 	addi	sp,sp,-12
100009a4:	df000215 	stw	fp,8(sp)
100009a8:	df000204 	addi	fp,sp,8
100009ac:	e13ffe15 	stw	r4,-8(fp)
100009b0:	e17fff15 	stw	r5,-4(fp)
	ptr += size;
100009b4:	e0bfff17 	ldw	r2,-4(fp)
100009b8:	e0fffe17 	ldw	r3,-8(fp)
100009bc:	1885883a 	add	r2,r3,r2
100009c0:	e0bffe15 	stw	r2,-8(fp)
	return ptr;
100009c4:	e0bffe17 	ldw	r2,-8(fp)
}
100009c8:	e037883a 	mov	sp,fp
100009cc:	df000017 	ldw	fp,0(sp)
100009d0:	dec00104 	addi	sp,sp,4
100009d4:	f800283a 	ret

100009d8 <skipToTerm>:

void skipToTerm() {
100009d8:	defffe04 	addi	sp,sp,-8
100009dc:	dfc00115 	stw	ra,4(sp)
100009e0:	df000015 	stw	fp,0(sp)
100009e4:	d839883a 	mov	fp,sp
	while (getch(fileptr) != 0x00) {
100009e8:	00000306 	br	100009f8 <skipToTerm+0x20>
		fileptr++;
100009ec:	d0a71b17 	ldw	r2,-25492(gp)
100009f0:	10800044 	addi	r2,r2,1
100009f4:	d0a71b15 	stw	r2,-25492(gp)
	ptr += size;
	return ptr;
}

void skipToTerm() {
	while (getch(fileptr) != 0x00) {
100009f8:	d0a71b17 	ldw	r2,-25492(gp)
100009fc:	1009883a 	mov	r4,r2
10000a00:	00009780 	call	10000978 <getch>
10000a04:	10803fcc 	andi	r2,r2,255
10000a08:	103ff81e 	bne	r2,zero,100009ec <__alt_data_end+0xf80009ec>
		fileptr++;
	}
	printf("Skipping!\n");
10000a0c:	01040074 	movhi	r4,4097
10000a10:	21094804 	addi	r4,r4,9504
10000a14:	0003f0c0 	call	10003f0c <puts>

	fileptr++;
10000a18:	d0a71b17 	ldw	r2,-25492(gp)
10000a1c:	10800044 	addi	r2,r2,1
10000a20:	d0a71b15 	stw	r2,-25492(gp)
}
10000a24:	0001883a 	nop
10000a28:	e037883a 	mov	sp,fp
10000a2c:	dfc00117 	ldw	ra,4(sp)
10000a30:	df000017 	ldw	fp,0(sp)
10000a34:	dec00204 	addi	sp,sp,8
10000a38:	f800283a 	ret

10000a3c <writeSRAM>:

void writeSRAM() {
10000a3c:	defffc04 	addi	sp,sp,-16
10000a40:	dfc00315 	stw	ra,12(sp)
10000a44:	df000215 	stw	fp,8(sp)
10000a48:	df000204 	addi	fp,sp,8
	for (int i = 0; i < _gif_len; i++) {
10000a4c:	e03ffe15 	stw	zero,-8(fp)
10000a50:	00000c06 	br	10000a84 <writeSRAM+0x48>
		fileptr[i] = _gif[i];
10000a54:	d0e71b17 	ldw	r3,-25492(gp)
10000a58:	e0bffe17 	ldw	r2,-8(fp)
10000a5c:	1887883a 	add	r3,r3,r2
10000a60:	00840074 	movhi	r2,4097
10000a64:	108a8e04 	addi	r2,r2,10808
10000a68:	e13ffe17 	ldw	r4,-8(fp)
10000a6c:	1105883a 	add	r2,r2,r4
10000a70:	10800003 	ldbu	r2,0(r2)
10000a74:	18800005 	stb	r2,0(r3)

	fileptr++;
}

void writeSRAM() {
	for (int i = 0; i < _gif_len; i++) {
10000a78:	e0bffe17 	ldw	r2,-8(fp)
10000a7c:	10800044 	addi	r2,r2,1
10000a80:	e0bffe15 	stw	r2,-8(fp)
10000a84:	e0fffe17 	ldw	r3,-8(fp)
10000a88:	d0a00017 	ldw	r2,-32768(gp)
10000a8c:	18bff136 	bltu	r3,r2,10000a54 <__alt_data_end+0xf8000a54>
		fileptr[i] = _gif[i];
	}
	for (int i = 0; i < _gif_len; i++) {
10000a90:	e03fff15 	stw	zero,-4(fp)
10000a94:	00001706 	br	10000af4 <writeSRAM+0xb8>
		assert(fileptr[i] == _gif[i]);
10000a98:	d0e71b17 	ldw	r3,-25492(gp)
10000a9c:	e0bfff17 	ldw	r2,-4(fp)
10000aa0:	1885883a 	add	r2,r3,r2
10000aa4:	11000003 	ldbu	r4,0(r2)
10000aa8:	00840074 	movhi	r2,4097
10000aac:	108a8e04 	addi	r2,r2,10808
10000ab0:	e0ffff17 	ldw	r3,-4(fp)
10000ab4:	10c5883a 	add	r2,r2,r3
10000ab8:	10800003 	ldbu	r2,0(r2)
10000abc:	20c03fcc 	andi	r3,r4,255
10000ac0:	10803fcc 	andi	r2,r2,255
10000ac4:	18800826 	beq	r3,r2,10000ae8 <writeSRAM+0xac>
10000ac8:	01c40074 	movhi	r7,4097
10000acc:	39c94b04 	addi	r7,r7,9516
10000ad0:	01840074 	movhi	r6,4097
10000ad4:	3189b804 	addi	r6,r6,9952
10000ad8:	01400d44 	movi	r5,53
10000adc:	01040074 	movhi	r4,4097
10000ae0:	21095104 	addi	r4,r4,9540
10000ae4:	000180c0 	call	1000180c <__assert_func>

void writeSRAM() {
	for (int i = 0; i < _gif_len; i++) {
		fileptr[i] = _gif[i];
	}
	for (int i = 0; i < _gif_len; i++) {
10000ae8:	e0bfff17 	ldw	r2,-4(fp)
10000aec:	10800044 	addi	r2,r2,1
10000af0:	e0bfff15 	stw	r2,-4(fp)
10000af4:	e0ffff17 	ldw	r3,-4(fp)
10000af8:	d0a00017 	ldw	r2,-32768(gp)
10000afc:	18bfe636 	bltu	r3,r2,10000a98 <__alt_data_end+0xf8000a98>
		assert(fileptr[i] == _gif[i]);
	}
}
10000b00:	0001883a 	nop
10000b04:	e037883a 	mov	sp,fp
10000b08:	dfc00117 	ldw	ra,4(sp)
10000b0c:	df000017 	ldw	fp,0(sp)
10000b10:	dec00204 	addi	sp,sp,8
10000b14:	f800283a 	ret

10000b18 <eraseSRAM>:

void eraseSRAM() {
10000b18:	defffe04 	addi	sp,sp,-8
10000b1c:	df000115 	stw	fp,4(sp)
10000b20:	df000104 	addi	fp,sp,4
	static unsigned char *temp = (char *)0x00400000;
	for (int i = 0; i<2000000; i++) {
10000b24:	e03fff15 	stw	zero,-4(fp)
10000b28:	00000706 	br	10000b48 <eraseSRAM+0x30>
		temp[i] = 0x00;
10000b2c:	d0e00517 	ldw	r3,-32748(gp)
10000b30:	e0bfff17 	ldw	r2,-4(fp)
10000b34:	1885883a 	add	r2,r3,r2
10000b38:	10000005 	stb	zero,0(r2)
	}
}

void eraseSRAM() {
	static unsigned char *temp = (char *)0x00400000;
	for (int i = 0; i<2000000; i++) {
10000b3c:	e0bfff17 	ldw	r2,-4(fp)
10000b40:	10800044 	addi	r2,r2,1
10000b44:	e0bfff15 	stw	r2,-4(fp)
10000b48:	e0ffff17 	ldw	r3,-4(fp)
10000b4c:	008007f4 	movhi	r2,31
10000b50:	10a11fc4 	addi	r2,r2,-31617
10000b54:	10fff50e 	bge	r2,r3,10000b2c <__alt_data_end+0xf8000b2c>
		temp[i] = 0x00;
	}
	//Probably slow af
}
10000b58:	0001883a 	nop
10000b5c:	e037883a 	mov	sp,fp
10000b60:	df000017 	ldw	fp,0(sp)
10000b64:	dec00104 	addi	sp,sp,4
10000b68:	f800283a 	ret

10000b6c <getControl>:

void getControl() {
10000b6c:	deffff04 	addi	sp,sp,-4
10000b70:	df000015 	stw	fp,0(sp)
10000b74:	d839883a 	mov	fp,sp
	ocmptr[257] = 0;
10000b78:	d0a00317 	ldw	r2,-32756(gp)
10000b7c:	10810104 	addi	r2,r2,1028
10000b80:	10000015 	stw	zero,0(r2)
}
10000b84:	0001883a 	nop
10000b88:	e037883a 	mov	sp,fp
10000b8c:	df000017 	ldw	fp,0(sp)
10000b90:	dec00104 	addi	sp,sp,4
10000b94:	f800283a 	ret

10000b98 <main>:

int main() {
10000b98:	deffdf04 	addi	sp,sp,-132
10000b9c:	dfc02015 	stw	ra,128(sp)
10000ba0:	df001f15 	stw	fp,124(sp)
10000ba4:	dc001e15 	stw	r16,120(sp)
10000ba8:	df001f04 	addi	fp,sp,124
	checkPacked();
10000bac:	00008f00 	call	100008f0 <checkPacked>
	getControl();
10000bb0:	0000b6c0 	call	10000b6c <getControl>

	unsigned char *fileChunk = NULL;
10000bb4:	e03fe115 	stw	zero,-124(fp)

	if (!ON_NIOS) {
10000bb8:	d0a00417 	ldw	r2,-32752(gp)
10000bbc:	10002a1e 	bne	r2,zero,10000c68 <main+0xd0>
		FILE *f = NULL;
10000bc0:	e03fef15 	stw	zero,-68(fp)
		f = fopen("sampleanim2.gif", "rb");
10000bc4:	01440074 	movhi	r5,4097
10000bc8:	29495304 	addi	r5,r5,9548
10000bcc:	01040074 	movhi	r4,4097
10000bd0:	21095404 	addi	r4,r4,9552
10000bd4:	000216c0 	call	1000216c <fopen>
10000bd8:	e0bfef15 	stw	r2,-68(fp)
		if (f == NULL) {
10000bdc:	e0bfef17 	ldw	r2,-68(fp)
10000be0:	1000051e 	bne	r2,zero,10000bf8 <main+0x60>
			printf("File not load !\n");
10000be4:	01040074 	movhi	r4,4097
10000be8:	21095804 	addi	r4,r4,9568
10000bec:	0003f0c0 	call	10003f0c <puts>
			exit(0);
10000bf0:	0009883a 	mov	r4,zero
10000bf4:	00018880 	call	10001888 <exit>
		}
		fseek(f, 0, SEEK_END);
10000bf8:	01800084 	movi	r6,2
10000bfc:	000b883a 	mov	r5,zero
10000c00:	e13fef17 	ldw	r4,-68(fp)
10000c04:	00028780 	call	10002878 <fseek>
		long fsize = ftell(f);
10000c08:	e13fef17 	ldw	r4,-68(fp)
10000c0c:	0002d540 	call	10002d54 <ftell>
10000c10:	e0bff015 	stw	r2,-64(fp)
		fseek(f, 0, SEEK_SET);
10000c14:	000d883a 	mov	r6,zero
10000c18:	000b883a 	mov	r5,zero
10000c1c:	e13fef17 	ldw	r4,-68(fp)
10000c20:	00028780 	call	10002878 <fseek>

		fileChunk = malloc(fsize + 1);
10000c24:	e0bff017 	ldw	r2,-64(fp)
10000c28:	10800044 	addi	r2,r2,1
10000c2c:	1009883a 	mov	r4,r2
10000c30:	00032bc0 	call	100032bc <malloc>
10000c34:	e0bfe115 	stw	r2,-124(fp)
		fileptr = fileChunk;
10000c38:	e0bfe117 	ldw	r2,-124(fp)
10000c3c:	d0a71b15 	stw	r2,-25492(gp)
		fread(fileptr, 1, fsize, f);
10000c40:	d0a71b17 	ldw	r2,-25492(gp)
10000c44:	e0fff017 	ldw	r3,-64(fp)
10000c48:	e1ffef17 	ldw	r7,-68(fp)
10000c4c:	180d883a 	mov	r6,r3
10000c50:	01400044 	movi	r5,1
10000c54:	1009883a 	mov	r4,r2
10000c58:	000240c0 	call	1000240c <fread>
		fclose(f);
10000c5c:	e13fef17 	ldw	r4,-68(fp)
10000c60:	00019b00 	call	100019b0 <fclose>
10000c64:	00000306 	br	10000c74 <main+0xdc>
	} else {
		//Set pointer from SRAM
		fileptr = 0x00400050;
10000c68:	00801034 	movhi	r2,64
10000c6c:	10801404 	addi	r2,r2,80
10000c70:	d0a71b15 	stw	r2,-25492(gp)
	}
	 //Write SRAM if we want:
	 writeSRAM();
10000c74:	0000a3c0 	call	10000a3c <writeSRAM>
//		exit(0);

	HeaderBlock header;
	LSD descriptor;

	fileptr = read(&header, 1, sizeof(header), fileptr);
10000c78:	d0e71b17 	ldw	r3,-25492(gp)
10000c7c:	e0bff704 	addi	r2,fp,-36
10000c80:	180f883a 	mov	r7,r3
10000c84:	01800184 	movi	r6,6
10000c88:	01400044 	movi	r5,1
10000c8c:	1009883a 	mov	r4,r2
10000c90:	00009100 	call	10000910 <read>
10000c94:	d0a71b15 	stw	r2,-25492(gp)
	fileptr = read(&descriptor, 1, sizeof(descriptor), fileptr);
10000c98:	d0e71b17 	ldw	r3,-25492(gp)
10000c9c:	e0bff884 	addi	r2,fp,-30
10000ca0:	180f883a 	mov	r7,r3
10000ca4:	018001c4 	movi	r6,7
10000ca8:	01400044 	movi	r5,1
10000cac:	1009883a 	mov	r4,r2
10000cb0:	00009100 	call	10000910 <read>
10000cb4:	d0a71b15 	stw	r2,-25492(gp)
	for (int i = 0; i < 3; i++) {
10000cb8:	e03fe215 	stw	zero,-120(fp)
10000cbc:	00001706 	br	10000d1c <main+0x184>
		assert(header.signature[i] == VALID_HEADER[i]);
10000cc0:	e0fff704 	addi	r3,fp,-36
10000cc4:	e0bfe217 	ldw	r2,-120(fp)
10000cc8:	1885883a 	add	r2,r3,r2
10000ccc:	10800003 	ldbu	r2,0(r2)
10000cd0:	10c03fcc 	andi	r3,r2,255
10000cd4:	e13fe217 	ldw	r4,-120(fp)
10000cd8:	d0a00104 	addi	r2,gp,-32764
10000cdc:	2085883a 	add	r2,r4,r2
10000ce0:	10800003 	ldbu	r2,0(r2)
10000ce4:	10803fcc 	andi	r2,r2,255
10000ce8:	1080201c 	xori	r2,r2,128
10000cec:	10bfe004 	addi	r2,r2,-128
10000cf0:	18800726 	beq	r3,r2,10000d10 <main+0x178>
10000cf4:	01c40074 	movhi	r7,4097
10000cf8:	39c95c04 	addi	r7,r7,9584
10000cfc:	d1a00604 	addi	r6,gp,-32744
10000d00:	01401c44 	movi	r5,113
10000d04:	01040074 	movhi	r4,4097
10000d08:	21095104 	addi	r4,r4,9540
10000d0c:	000180c0 	call	1000180c <__assert_func>
	HeaderBlock header;
	LSD descriptor;

	fileptr = read(&header, 1, sizeof(header), fileptr);
	fileptr = read(&descriptor, 1, sizeof(descriptor), fileptr);
	for (int i = 0; i < 3; i++) {
10000d10:	e0bfe217 	ldw	r2,-120(fp)
10000d14:	10800044 	addi	r2,r2,1
10000d18:	e0bfe215 	stw	r2,-120(fp)
10000d1c:	e0bfe217 	ldw	r2,-120(fp)
10000d20:	108000d0 	cmplti	r2,r2,3
10000d24:	103fe61e 	bne	r2,zero,10000cc0 <__alt_data_end+0xf8000cc0>
		assert(header.signature[i] == VALID_HEADER[i]);
	}
	assert(descriptor.packedField.globalColorFlag);	 //For all intents we're going to need a global table
10000d28:	e0fff983 	ldbu	r3,-26(fp)
10000d2c:	00bfe004 	movi	r2,-128
10000d30:	1884703a 	and	r2,r3,r2
10000d34:	10803fcc 	andi	r2,r2,255
10000d38:	1000071e 	bne	r2,zero,10000d58 <main+0x1c0>
10000d3c:	01c40074 	movhi	r7,4097
10000d40:	39c96604 	addi	r7,r7,9624
10000d44:	d1a00604 	addi	r6,gp,-32744
10000d48:	01401cc4 	movi	r5,115
10000d4c:	01040074 	movhi	r4,4097
10000d50:	21095104 	addi	r4,r4,9540
10000d54:	000180c0 	call	1000180c <__assert_func>

	int readlGlobalColorSize = 0x2 << descriptor.packedField.globalColorSize;  // 2^(N+1) actual colors
10000d58:	e0bff98b 	ldhu	r2,-26(fp)
10000d5c:	108001cc 	andi	r2,r2,7
10000d60:	10803fcc 	andi	r2,r2,255
10000d64:	00c00084 	movi	r3,2
10000d68:	1884983a 	sll	r2,r3,r2
10000d6c:	e0bff115 	stw	r2,-60(fp)
	// printf("%d, %d\n", test, packed.actual_color_size);
	colorTableEntry *globalTable = (colorTableEntry *)
		malloc(readlGlobalColorSize * sizeof(colorTableEntry));	 // We can make this 256 for hardware
10000d70:	e0fff117 	ldw	r3,-60(fp)
10000d74:	1805883a 	mov	r2,r3
10000d78:	1085883a 	add	r2,r2,r2
10000d7c:	10c5883a 	add	r2,r2,r3
	}
	assert(descriptor.packedField.globalColorFlag);	 //For all intents we're going to need a global table

	int readlGlobalColorSize = 0x2 << descriptor.packedField.globalColorSize;  // 2^(N+1) actual colors
	// printf("%d, %d\n", test, packed.actual_color_size);
	colorTableEntry *globalTable = (colorTableEntry *)
10000d80:	1009883a 	mov	r4,r2
10000d84:	00032bc0 	call	100032bc <malloc>
10000d88:	e0bff215 	stw	r2,-56(fp)
		malloc(readlGlobalColorSize * sizeof(colorTableEntry));	 // We can make this 256 for hardware

	printf("Dimensions (Canvas): %dx%d\n", descriptor.canvasWidth, descriptor.canvasHeight);
10000d8c:	e0bff88b 	ldhu	r2,-30(fp)
10000d90:	10bfffcc 	andi	r2,r2,65535
10000d94:	e0fff90b 	ldhu	r3,-28(fp)
10000d98:	18ffffcc 	andi	r3,r3,65535
10000d9c:	180d883a 	mov	r6,r3
10000da0:	100b883a 	mov	r5,r2
10000da4:	01040074 	movhi	r4,4097
10000da8:	21097004 	addi	r4,r4,9664
10000dac:	0003df00 	call	10003df0 <printf>

	//Read global color table and print it
	fileptr = read(globalTable, 3, readlGlobalColorSize, fileptr);
10000db0:	d0a71b17 	ldw	r2,-25492(gp)
10000db4:	100f883a 	mov	r7,r2
10000db8:	e1bff117 	ldw	r6,-60(fp)
10000dbc:	014000c4 	movi	r5,3
10000dc0:	e13ff217 	ldw	r4,-56(fp)
10000dc4:	00009100 	call	10000910 <read>
10000dc8:	d0a71b15 	stw	r2,-25492(gp)

	for (int i = 0; i < readlGlobalColorSize; i++) {
10000dcc:	e03fe315 	stw	zero,-116(fp)
10000dd0:	00001f06 	br	10000e50 <main+0x2b8>
		printf("[#");
10000dd4:	01040074 	movhi	r4,4097
10000dd8:	21097704 	addi	r4,r4,9692
10000ddc:	0003df00 	call	10003df0 <printf>
		for (int j = 0; j < 3; j++) {
10000de0:	e03fe415 	stw	zero,-112(fp)
10000de4:	00001106 	br	10000e2c <main+0x294>
			printf("%02x", globalTable[i].RGB[j]);
10000de8:	e0ffe317 	ldw	r3,-116(fp)
10000dec:	1805883a 	mov	r2,r3
10000df0:	1085883a 	add	r2,r2,r2
10000df4:	10c5883a 	add	r2,r2,r3
10000df8:	e0fff217 	ldw	r3,-56(fp)
10000dfc:	1887883a 	add	r3,r3,r2
10000e00:	e0bfe417 	ldw	r2,-112(fp)
10000e04:	1885883a 	add	r2,r3,r2
10000e08:	10800003 	ldbu	r2,0(r2)
10000e0c:	10803fcc 	andi	r2,r2,255
10000e10:	100b883a 	mov	r5,r2
10000e14:	01040074 	movhi	r4,4097
10000e18:	21097804 	addi	r4,r4,9696
10000e1c:	0003df00 	call	10003df0 <printf>
	//Read global color table and print it
	fileptr = read(globalTable, 3, readlGlobalColorSize, fileptr);

	for (int i = 0; i < readlGlobalColorSize; i++) {
		printf("[#");
		for (int j = 0; j < 3; j++) {
10000e20:	e0bfe417 	ldw	r2,-112(fp)
10000e24:	10800044 	addi	r2,r2,1
10000e28:	e0bfe415 	stw	r2,-112(fp)
10000e2c:	e0bfe417 	ldw	r2,-112(fp)
10000e30:	108000d0 	cmplti	r2,r2,3
10000e34:	103fec1e 	bne	r2,zero,10000de8 <__alt_data_end+0xf8000de8>
			printf("%02x", globalTable[i].RGB[j]);
		}
		printf("],");
10000e38:	01040074 	movhi	r4,4097
10000e3c:	21097a04 	addi	r4,r4,9704
10000e40:	0003df00 	call	10003df0 <printf>
	printf("Dimensions (Canvas): %dx%d\n", descriptor.canvasWidth, descriptor.canvasHeight);

	//Read global color table and print it
	fileptr = read(globalTable, 3, readlGlobalColorSize, fileptr);

	for (int i = 0; i < readlGlobalColorSize; i++) {
10000e44:	e0bfe317 	ldw	r2,-116(fp)
10000e48:	10800044 	addi	r2,r2,1
10000e4c:	e0bfe315 	stw	r2,-116(fp)
10000e50:	e0ffe317 	ldw	r3,-116(fp)
10000e54:	e0bff117 	ldw	r2,-60(fp)
10000e58:	18bfde16 	blt	r3,r2,10000dd4 <__alt_data_end+0xf8000dd4>
		for (int j = 0; j < 3; j++) {
			printf("%02x", globalTable[i].RGB[j]);
		}
		printf("],");
	}
	printf("\n");
10000e5c:	01000284 	movi	r4,10
10000e60:	0003e340 	call	10003e34 <putchar>

	//////////////////////////////////////////////////

	int8_t totalFrameCount = 0;
10000e64:	e03fe505 	stb	zero,-108(fp)
	while (1) {
		GCE gce;
		imageDescriptor imgDesc;
		colorTableEntry *localTable = NULL;
10000e68:	e03fe615 	stw	zero,-104(fp)
		unsigned char c = *fileptr;
10000e6c:	d0a71b17 	ldw	r2,-25492(gp)
10000e70:	10800003 	ldbu	r2,0(r2)
10000e74:	e0bfe705 	stb	r2,-100(fp)
		fileptr++;
10000e78:	d0a71b17 	ldw	r2,-25492(gp)
10000e7c:	10800044 	addi	r2,r2,1
10000e80:	d0a71b15 	stw	r2,-25492(gp)

		while (c == 0x21) {
10000e84:	00007106 	br	1000104c <main+0x4b4>
			// We encountered a extension block...
			unsigned char label = getch(fileptr);
10000e88:	d0a71b17 	ldw	r2,-25492(gp)
10000e8c:	1009883a 	mov	r4,r2
10000e90:	00009780 	call	10000978 <getch>
10000e94:	e0bff305 	stb	r2,-52(fp)
			fileptr++;
10000e98:	d0a71b17 	ldw	r2,-25492(gp)
10000e9c:	10800044 	addi	r2,r2,1
10000ea0:	d0a71b15 	stw	r2,-25492(gp)
			switch (label) {
10000ea4:	e0bff303 	ldbu	r2,-52(fp)
10000ea8:	10c03fa0 	cmpeqi	r3,r2,254
10000eac:	18004f1e 	bne	r3,zero,10000fec <main+0x454>
10000eb0:	10c03fe0 	cmpeqi	r3,r2,255
10000eb4:	1800031e 	bne	r3,zero,10000ec4 <main+0x32c>
10000eb8:	10803e60 	cmpeqi	r2,r2,249
10000ebc:	10003f1e 	bne	r2,zero,10000fbc <main+0x424>
10000ec0:	00004c06 	br	10000ff4 <main+0x45c>
			case 0xFF: {
				// Application Extension
				printf("Loaded AEB\n");
10000ec4:	01040074 	movhi	r4,4097
10000ec8:	21097b04 	addi	r4,r4,9708
10000ecc:	0003f0c0 	call	10003f0c <puts>
				assert(getch(fileptr) == 0x0B);
10000ed0:	d0a71b17 	ldw	r2,-25492(gp)
10000ed4:	1009883a 	mov	r4,r2
10000ed8:	00009780 	call	10000978 <getch>
10000edc:	10803fcc 	andi	r2,r2,255
10000ee0:	108002e0 	cmpeqi	r2,r2,11
10000ee4:	1000071e 	bne	r2,zero,10000f04 <main+0x36c>
10000ee8:	01c40074 	movhi	r7,4097
10000eec:	39c97e04 	addi	r7,r7,9720
10000ef0:	d1a00604 	addi	r6,gp,-32744
10000ef4:	01402684 	movi	r5,154
10000ef8:	01040074 	movhi	r4,4097
10000efc:	21095104 	addi	r4,r4,9540
10000f00:	000180c0 	call	1000180c <__assert_func>
				fileptr++;
10000f04:	d0a71b17 	ldw	r2,-25492(gp)
10000f08:	10800044 	addi	r2,r2,1
10000f0c:	d0a71b15 	stw	r2,-25492(gp)
				fileptr = seek(fileptr, 11);
10000f10:	d0a71b17 	ldw	r2,-25492(gp)
10000f14:	014002c4 	movi	r5,11
10000f18:	1009883a 	mov	r4,r2
10000f1c:	00009a00 	call	100009a0 <seek>
10000f20:	d0a71b15 	stw	r2,-25492(gp)
				assert(getch(fileptr) == 0x03);
10000f24:	d0a71b17 	ldw	r2,-25492(gp)
10000f28:	1009883a 	mov	r4,r2
10000f2c:	00009780 	call	10000978 <getch>
10000f30:	10803fcc 	andi	r2,r2,255
10000f34:	108000e0 	cmpeqi	r2,r2,3
10000f38:	1000071e 	bne	r2,zero,10000f58 <main+0x3c0>
10000f3c:	01c40074 	movhi	r7,4097
10000f40:	39c98404 	addi	r7,r7,9744
10000f44:	d1a00604 	addi	r6,gp,-32744
10000f48:	01402744 	movi	r5,157
10000f4c:	01040074 	movhi	r4,4097
10000f50:	21095104 	addi	r4,r4,9540
10000f54:	000180c0 	call	1000180c <__assert_func>
				fileptr++;
10000f58:	d0a71b17 	ldw	r2,-25492(gp)
10000f5c:	10800044 	addi	r2,r2,1
10000f60:	d0a71b15 	stw	r2,-25492(gp)
				assert(getch(fileptr) == 0x01);
10000f64:	d0a71b17 	ldw	r2,-25492(gp)
10000f68:	1009883a 	mov	r4,r2
10000f6c:	00009780 	call	10000978 <getch>
10000f70:	10803fcc 	andi	r2,r2,255
10000f74:	10800060 	cmpeqi	r2,r2,1
10000f78:	1000071e 	bne	r2,zero,10000f98 <main+0x400>
10000f7c:	01c40074 	movhi	r7,4097
10000f80:	39c98a04 	addi	r7,r7,9768
10000f84:	d1a00604 	addi	r6,gp,-32744
10000f88:	014027c4 	movi	r5,159
10000f8c:	01040074 	movhi	r4,4097
10000f90:	21095104 	addi	r4,r4,9540
10000f94:	000180c0 	call	1000180c <__assert_func>
				fileptr++;
10000f98:	d0a71b17 	ldw	r2,-25492(gp)
10000f9c:	10800044 	addi	r2,r2,1
10000fa0:	d0a71b15 	stw	r2,-25492(gp)
				fileptr = seek(fileptr, 3);
10000fa4:	d0a71b17 	ldw	r2,-25492(gp)
10000fa8:	014000c4 	movi	r5,3
10000fac:	1009883a 	mov	r4,r2
10000fb0:	00009a00 	call	100009a0 <seek>
10000fb4:	d0a71b15 	stw	r2,-25492(gp)
				//Read repeat count if we care
				break;
10000fb8:	00001d06 	br	10001030 <main+0x498>
			}
			case 0xF9: {
				printf("Loaded GCE\n");
10000fbc:	01040074 	movhi	r4,4097
10000fc0:	21099004 	addi	r4,r4,9792
10000fc4:	0003f0c0 	call	10003f0c <puts>
				fileptr = read(&gce, 1, sizeof(gce), fileptr);
10000fc8:	d0e71b17 	ldw	r3,-25492(gp)
10000fcc:	e0bffa44 	addi	r2,fp,-23
10000fd0:	180f883a 	mov	r7,r3
10000fd4:	01800184 	movi	r6,6
10000fd8:	01400044 	movi	r5,1
10000fdc:	1009883a 	mov	r4,r2
10000fe0:	00009100 	call	10000910 <read>
10000fe4:	d0a71b15 	stw	r2,-25492(gp)
				break;
10000fe8:	00001106 	br	10001030 <main+0x498>
			}
			case 0xFE: {
				//Comment Extension
				skipToTerm();
10000fec:	00009d80 	call	100009d8 <skipToTerm>
				break;
10000ff0:	00000f06 	br	10001030 <main+0x498>
			}
			default: {
				unsigned char bytesToSkip = getch(fileptr);
10000ff4:	d0a71b17 	ldw	r2,-25492(gp)
10000ff8:	1009883a 	mov	r4,r2
10000ffc:	00009780 	call	10000978 <getch>
10001000:	e0bff345 	stb	r2,-51(fp)
				fileptr++;
10001004:	d0a71b17 	ldw	r2,-25492(gp)
10001008:	10800044 	addi	r2,r2,1
1000100c:	d0a71b15 	stw	r2,-25492(gp)
				fileptr = seek(fileptr, bytesToSkip);
10001010:	d0a71b17 	ldw	r2,-25492(gp)
10001014:	e0fff343 	ldbu	r3,-51(fp)
10001018:	180b883a 	mov	r5,r3
1000101c:	1009883a 	mov	r4,r2
10001020:	00009a00 	call	100009a0 <seek>
10001024:	d0a71b15 	stw	r2,-25492(gp)
				skipToTerm();
10001028:	00009d80 	call	100009d8 <skipToTerm>
				break;
1000102c:	0001883a 	nop
			}
			}
			c = getch(fileptr);
10001030:	d0a71b17 	ldw	r2,-25492(gp)
10001034:	1009883a 	mov	r4,r2
10001038:	00009780 	call	10000978 <getch>
1000103c:	e0bfe705 	stb	r2,-100(fp)
			fileptr++;
10001040:	d0a71b17 	ldw	r2,-25492(gp)
10001044:	10800044 	addi	r2,r2,1
10001048:	d0a71b15 	stw	r2,-25492(gp)
		imageDescriptor imgDesc;
		colorTableEntry *localTable = NULL;
		unsigned char c = *fileptr;
		fileptr++;

		while (c == 0x21) {
1000104c:	e0bfe703 	ldbu	r2,-100(fp)
10001050:	10800860 	cmpeqi	r2,r2,33
10001054:	103f8c1e 	bne	r2,zero,10000e88 <__alt_data_end+0xf8000e88>
			}
			}
			c = getch(fileptr);
			fileptr++;
		}
		fileptr--;
10001058:	d0a71b17 	ldw	r2,-25492(gp)
1000105c:	10bfffc4 	addi	r2,r2,-1
10001060:	d0a71b15 	stw	r2,-25492(gp)

		fileptr = read(&imgDesc, 1, sizeof(imgDesc), fileptr);
10001064:	d0e71b17 	ldw	r3,-25492(gp)
10001068:	e0bffbc4 	addi	r2,fp,-17
1000106c:	180f883a 	mov	r7,r3
10001070:	01800284 	movi	r6,10
10001074:	01400044 	movi	r5,1
10001078:	1009883a 	mov	r4,r2
1000107c:	00009100 	call	10000910 <read>
10001080:	d0a71b15 	stw	r2,-25492(gp)
		assert(imgDesc.imgSeperator == 0x2C);
10001084:	e0bffbc3 	ldbu	r2,-17(fp)
10001088:	10803fcc 	andi	r2,r2,255
1000108c:	10800b20 	cmpeqi	r2,r2,44
10001090:	1000071e 	bne	r2,zero,100010b0 <main+0x518>
10001094:	01c40074 	movhi	r7,4097
10001098:	39c99304 	addi	r7,r7,9804
1000109c:	d1a00604 	addi	r6,gp,-32744
100010a0:	01402f44 	movi	r5,189
100010a4:	01040074 	movhi	r4,4097
100010a8:	21095104 	addi	r4,r4,9540
100010ac:	000180c0 	call	1000180c <__assert_func>
		if (imgDesc.packedField.localColorFlag) {
100010b0:	e0fffe03 	ldbu	r3,-8(fp)
100010b4:	00bfe004 	movi	r2,-128
100010b8:	1884703a 	and	r2,r3,r2
100010bc:	10803fcc 	andi	r2,r2,255
100010c0:	10001726 	beq	r2,zero,10001120 <main+0x588>
			// Load a local color table
			printf("Local color table\n");
100010c4:	01040074 	movhi	r4,4097
100010c8:	21099b04 	addi	r4,r4,9836
100010cc:	0003f0c0 	call	10003f0c <puts>
			int realLocalColorSize = 0x2 << imgDesc.packedField.localColorSize;	 // 2^(N+1) actual colors
100010d0:	e0bffe03 	ldbu	r2,-8(fp)
100010d4:	108001cc 	andi	r2,r2,7
100010d8:	10803fcc 	andi	r2,r2,255
100010dc:	00c00084 	movi	r3,2
100010e0:	1884983a 	sll	r2,r3,r2
100010e4:	e0bff415 	stw	r2,-48(fp)
			localTable = (colorTableEntry *)
				malloc(realLocalColorSize * sizeof(colorTableEntry));
100010e8:	e0fff417 	ldw	r3,-48(fp)
100010ec:	1805883a 	mov	r2,r3
100010f0:	1085883a 	add	r2,r2,r2
100010f4:	10c5883a 	add	r2,r2,r3
		assert(imgDesc.imgSeperator == 0x2C);
		if (imgDesc.packedField.localColorFlag) {
			// Load a local color table
			printf("Local color table\n");
			int realLocalColorSize = 0x2 << imgDesc.packedField.localColorSize;	 // 2^(N+1) actual colors
			localTable = (colorTableEntry *)
100010f8:	1009883a 	mov	r4,r2
100010fc:	00032bc0 	call	100032bc <malloc>
10001100:	e0bfe615 	stw	r2,-104(fp)
				malloc(realLocalColorSize * sizeof(colorTableEntry));
			fileptr = read(localTable, 3, realLocalColorSize, fileptr);
10001104:	d0a71b17 	ldw	r2,-25492(gp)
10001108:	100f883a 	mov	r7,r2
1000110c:	e1bff417 	ldw	r6,-48(fp)
10001110:	014000c4 	movi	r5,3
10001114:	e13fe617 	ldw	r4,-104(fp)
10001118:	00009100 	call	10000910 <read>
1000111c:	d0a71b15 	stw	r2,-25492(gp)
		}

		//Let's yeet that image data into something
		unsigned char LZWMinCode = getch(fileptr);
10001120:	d0a71b17 	ldw	r2,-25492(gp)
10001124:	1009883a 	mov	r4,r2
10001128:	00009780 	call	10000978 <getch>
1000112c:	e0bff505 	stb	r2,-44(fp)
		fileptr++;
10001130:	d0a71b17 	ldw	r2,-25492(gp)
10001134:	10800044 	addi	r2,r2,1
10001138:	d0a71b15 	stw	r2,-25492(gp)
		printf("%02x\n", LZWMinCode);
1000113c:	e0bff503 	ldbu	r2,-44(fp)
10001140:	100b883a 	mov	r5,r2
10001144:	01040074 	movhi	r4,4097
10001148:	2109a004 	addi	r4,r4,9856
1000114c:	0003df00 	call	10003df0 <printf>
		unsigned char *data = NULL;
10001150:	e03fe815 	stw	zero,-96(fp)
		unsigned int dataSize = 0;
10001154:	e03fe915 	stw	zero,-92(fp)
		unsigned char bytesInSubblock = getch(fileptr);
10001158:	d0a71b17 	ldw	r2,-25492(gp)
1000115c:	1009883a 	mov	r4,r2
10001160:	00009780 	call	10000978 <getch>
10001164:	e0bfea05 	stb	r2,-88(fp)
		fileptr++;
10001168:	d0a71b17 	ldw	r2,-25492(gp)
1000116c:	10800044 	addi	r2,r2,1
10001170:	d0a71b15 	stw	r2,-25492(gp)
		while (bytesInSubblock) {
10001174:	00001d06 	br	100011ec <main+0x654>
			data = realloc(data, (sizeof(char) * (dataSize + bytesInSubblock)));
10001178:	e0ffea03 	ldbu	r3,-88(fp)
1000117c:	e0bfe917 	ldw	r2,-92(fp)
10001180:	1885883a 	add	r2,r3,r2
10001184:	100b883a 	mov	r5,r2
10001188:	e13fe817 	ldw	r4,-96(fp)
1000118c:	0003f200 	call	10003f20 <realloc>
10001190:	e0bfe815 	stw	r2,-96(fp)
			fileptr = read(data + dataSize, 1, bytesInSubblock, fileptr);
10001194:	e0ffe817 	ldw	r3,-96(fp)
10001198:	e0bfe917 	ldw	r2,-92(fp)
1000119c:	1885883a 	add	r2,r3,r2
100011a0:	e0ffea03 	ldbu	r3,-88(fp)
100011a4:	d1271b17 	ldw	r4,-25492(gp)
100011a8:	200f883a 	mov	r7,r4
100011ac:	180d883a 	mov	r6,r3
100011b0:	01400044 	movi	r5,1
100011b4:	1009883a 	mov	r4,r2
100011b8:	00009100 	call	10000910 <read>
100011bc:	d0a71b15 	stw	r2,-25492(gp)
			dataSize += bytesInSubblock;
100011c0:	e0bfea03 	ldbu	r2,-88(fp)
100011c4:	e0ffe917 	ldw	r3,-92(fp)
100011c8:	1885883a 	add	r2,r3,r2
100011cc:	e0bfe915 	stw	r2,-92(fp)
			bytesInSubblock = getch(fileptr);
100011d0:	d0a71b17 	ldw	r2,-25492(gp)
100011d4:	1009883a 	mov	r4,r2
100011d8:	00009780 	call	10000978 <getch>
100011dc:	e0bfea05 	stb	r2,-88(fp)
			fileptr++;
100011e0:	d0a71b17 	ldw	r2,-25492(gp)
100011e4:	10800044 	addi	r2,r2,1
100011e8:	d0a71b15 	stw	r2,-25492(gp)
		printf("%02x\n", LZWMinCode);
		unsigned char *data = NULL;
		unsigned int dataSize = 0;
		unsigned char bytesInSubblock = getch(fileptr);
		fileptr++;
		while (bytesInSubblock) {
100011ec:	e0bfea03 	ldbu	r2,-88(fp)
100011f0:	103fe11e 	bne	r2,zero,10001178 <__alt_data_end+0xf8001178>
		// 	if (!(i % 10)) {
		// 		printf("\n");
		// 	}
		// }
		// printf("\n");
		unsigned char *dataOut = malloc(imgDesc.imgHeight * imgDesc.imgWidth);
100011f4:	e0bffd83 	ldbu	r2,-10(fp)
100011f8:	e0fffdc3 	ldbu	r3,-9(fp)
100011fc:	1806923a 	slli	r3,r3,8
10001200:	1884b03a 	or	r2,r3,r2
10001204:	113fffcc 	andi	r4,r2,65535
10001208:	e0bffd03 	ldbu	r2,-12(fp)
1000120c:	e0fffd43 	ldbu	r3,-11(fp)
10001210:	1806923a 	slli	r3,r3,8
10001214:	1884b03a 	or	r2,r3,r2
10001218:	10bfffcc 	andi	r2,r2,65535
1000121c:	100b883a 	mov	r5,r2
10001220:	00017e40 	call	100017e4 <__mulsi3>
10001224:	1009883a 	mov	r4,r2
10001228:	00032bc0 	call	100032bc <malloc>
1000122c:	e0bff615 	stw	r2,-40(fp)
		//
		// // Write developed image frame to some sort of storage
		uncompress(LZWMinCode, data, dataSize, dataOut);
10001230:	e0bff503 	ldbu	r2,-44(fp)
10001234:	e0ffe917 	ldw	r3,-92(fp)
10001238:	e1fff617 	ldw	r7,-40(fp)
1000123c:	180d883a 	mov	r6,r3
10001240:	e17fe817 	ldw	r5,-96(fp)
10001244:	1009883a 	mov	r4,r2
10001248:	000026c0 	call	1000026c <uncompress>
		// 	}
		// 	printf("\033[38;5;%dm", dataOut[i]);
		// 	printf("%02x ", dataOut[i]);
		// 	printf("\033[0m");
		// }
		if (ON_NIOS) {
1000124c:	d0a00417 	ldw	r2,-32752(gp)
10001250:	10002326 	beq	r2,zero,100012e0 <main+0x748>
			memcpy(frameptr + imgDesc.imgHeight*imgDesc.imgWidth * totalFrameCount, dataOut, imgDesc.imgHeight * imgDesc.imgWidth);
10001254:	d4200217 	ldw	r16,-32760(gp)
10001258:	e0bffd83 	ldbu	r2,-10(fp)
1000125c:	e0fffdc3 	ldbu	r3,-9(fp)
10001260:	1806923a 	slli	r3,r3,8
10001264:	1884b03a 	or	r2,r3,r2
10001268:	113fffcc 	andi	r4,r2,65535
1000126c:	e0bffd03 	ldbu	r2,-12(fp)
10001270:	e0fffd43 	ldbu	r3,-11(fp)
10001274:	1806923a 	slli	r3,r3,8
10001278:	1884b03a 	or	r2,r3,r2
1000127c:	10bfffcc 	andi	r2,r2,65535
10001280:	100b883a 	mov	r5,r2
10001284:	00017e40 	call	100017e4 <__mulsi3>
10001288:	1007883a 	mov	r3,r2
1000128c:	e0bfe507 	ldb	r2,-108(fp)
10001290:	100b883a 	mov	r5,r2
10001294:	1809883a 	mov	r4,r3
10001298:	00017e40 	call	100017e4 <__mulsi3>
1000129c:	80a1883a 	add	r16,r16,r2
100012a0:	e0bffd83 	ldbu	r2,-10(fp)
100012a4:	e0fffdc3 	ldbu	r3,-9(fp)
100012a8:	1806923a 	slli	r3,r3,8
100012ac:	1884b03a 	or	r2,r3,r2
100012b0:	113fffcc 	andi	r4,r2,65535
100012b4:	e0bffd03 	ldbu	r2,-12(fp)
100012b8:	e0fffd43 	ldbu	r3,-11(fp)
100012bc:	1806923a 	slli	r3,r3,8
100012c0:	1884b03a 	or	r2,r3,r2
100012c4:	10bfffcc 	andi	r2,r2,65535
100012c8:	100b883a 	mov	r5,r2
100012cc:	00017e40 	call	100017e4 <__mulsi3>
100012d0:	100d883a 	mov	r6,r2
100012d4:	e17ff617 	ldw	r5,-40(fp)
100012d8:	8009883a 	mov	r4,r16
100012dc:	0003af00 	call	10003af0 <memcpy>
//		unsigned char * x = 0x00400000;
//		x[0] = 0x01;
//
//		x[1] = 0x01;
//		frameptr[0] = 0x00; //testing
		 for (int i = 0; i < imgDesc.imgHeight * imgDesc.imgWidth; i++) {
100012e0:	e03feb15 	stw	zero,-84(fp)
100012e4:	00001806 	br	10001348 <main+0x7b0>
		 	if (i % imgDesc.imgWidth == 0) {
100012e8:	e0bffd03 	ldbu	r2,-12(fp)
100012ec:	e0fffd43 	ldbu	r3,-11(fp)
100012f0:	1806923a 	slli	r3,r3,8
100012f4:	1884b03a 	or	r2,r3,r2
100012f8:	10ffffcc 	andi	r3,r2,65535
100012fc:	e0bfeb17 	ldw	r2,-84(fp)
10001300:	180b883a 	mov	r5,r3
10001304:	1009883a 	mov	r4,r2
10001308:	00016b40 	call	100016b4 <__modsi3>
1000130c:	1000021e 	bne	r2,zero,10001318 <main+0x780>
		 		printf("\n");
10001310:	01000284 	movi	r4,10
10001314:	0003e340 	call	10003e34 <putchar>
		 	}
//		 	printf("\033[38;5;%dm", dataOut[i]);
		 	printf("%02x ", frameptr[i]);
10001318:	d0e00217 	ldw	r3,-32760(gp)
1000131c:	e0bfeb17 	ldw	r2,-84(fp)
10001320:	1885883a 	add	r2,r3,r2
10001324:	10800003 	ldbu	r2,0(r2)
10001328:	10803fcc 	andi	r2,r2,255
1000132c:	100b883a 	mov	r5,r2
10001330:	01040074 	movhi	r4,4097
10001334:	2109a204 	addi	r4,r4,9864
10001338:	0003df00 	call	10003df0 <printf>
//		unsigned char * x = 0x00400000;
//		x[0] = 0x01;
//
//		x[1] = 0x01;
//		frameptr[0] = 0x00; //testing
		 for (int i = 0; i < imgDesc.imgHeight * imgDesc.imgWidth; i++) {
1000133c:	e0bfeb17 	ldw	r2,-84(fp)
10001340:	10800044 	addi	r2,r2,1
10001344:	e0bfeb15 	stw	r2,-84(fp)
10001348:	e0bffd83 	ldbu	r2,-10(fp)
1000134c:	e0fffdc3 	ldbu	r3,-9(fp)
10001350:	1806923a 	slli	r3,r3,8
10001354:	1884b03a 	or	r2,r3,r2
10001358:	113fffcc 	andi	r4,r2,65535
1000135c:	e0bffd03 	ldbu	r2,-12(fp)
10001360:	e0fffd43 	ldbu	r3,-11(fp)
10001364:	1806923a 	slli	r3,r3,8
10001368:	1884b03a 	or	r2,r3,r2
1000136c:	10bfffcc 	andi	r2,r2,65535
10001370:	100b883a 	mov	r5,r2
10001374:	00017e40 	call	100017e4 <__mulsi3>
10001378:	1007883a 	mov	r3,r2
1000137c:	e0bfeb17 	ldw	r2,-84(fp)
10001380:	10ffd916 	blt	r2,r3,100012e8 <__alt_data_end+0xf80012e8>
		// We should write: check if localColorFlag then use that to grab colors from data[i]
		// We also need to save the image dimensions and start cords.

		// Check if we're at end of file:
		// and break loop!
		c = getch(fileptr);
10001384:	d0a71b17 	ldw	r2,-25492(gp)
10001388:	1009883a 	mov	r4,r2
1000138c:	00009780 	call	10000978 <getch>
10001390:	e0bfe705 	stb	r2,-100(fp)

		printf("\nFrame done: %d | size: %dx%d\n", totalFrameCount, imgDesc.imgWidth, imgDesc.imgHeight);
10001394:	e13fe507 	ldb	r4,-108(fp)
10001398:	e0bffd03 	ldbu	r2,-12(fp)
1000139c:	e0fffd43 	ldbu	r3,-11(fp)
100013a0:	1806923a 	slli	r3,r3,8
100013a4:	1884b03a 	or	r2,r3,r2
100013a8:	117fffcc 	andi	r5,r2,65535
100013ac:	e0bffd83 	ldbu	r2,-10(fp)
100013b0:	e0fffdc3 	ldbu	r3,-9(fp)
100013b4:	1806923a 	slli	r3,r3,8
100013b8:	1884b03a 	or	r2,r3,r2
100013bc:	10bfffcc 	andi	r2,r2,65535
100013c0:	100f883a 	mov	r7,r2
100013c4:	280d883a 	mov	r6,r5
100013c8:	200b883a 	mov	r5,r4
100013cc:	01040074 	movhi	r4,4097
100013d0:	2109a404 	addi	r4,r4,9872
100013d4:	0003df00 	call	10003df0 <printf>

		free(localTable);
100013d8:	e13fe617 	ldw	r4,-104(fp)
100013dc:	00032d00 	call	100032d0 <free>
		free(data);
100013e0:	e13fe817 	ldw	r4,-96(fp)
100013e4:	00032d00 	call	100032d0 <free>
		free(dataOut);
100013e8:	e13ff617 	ldw	r4,-40(fp)
100013ec:	00032d00 	call	100032d0 <free>
		if (c == 0x3B) {
100013f0:	e0bfe703 	ldbu	r2,-100(fp)
100013f4:	10800ed8 	cmpnei	r2,r2,59
100013f8:	1000061e 	bne	r2,zero,10001414 <main+0x87c>
			printf("\nEOF found\n");
100013fc:	01040074 	movhi	r4,4097
10001400:	2109ac04 	addi	r4,r4,9904
10001404:	0003f0c0 	call	10003f0c <puts>
			break;
		}
		totalFrameCount++;
	}

	if (ON_NIOS) {
10001408:	d0a00417 	ldw	r2,-32752(gp)
1000140c:	1000051e 	bne	r2,zero,10001424 <main+0x88c>
10001410:	00007706 	br	100015f0 <main+0xa58>
		free(dataOut);
		if (c == 0x3B) {
			printf("\nEOF found\n");
			break;
		}
		totalFrameCount++;
10001414:	e0bfe503 	ldbu	r2,-108(fp)
10001418:	10800044 	addi	r2,r2,1
1000141c:	e0bfe505 	stb	r2,-108(fp)
	}
10001420:	003e9106 	br	10000e68 <__alt_data_end+0xf8000e68>

	if (ON_NIOS) {
		for (int i = 0; i < 258; i++) {
10001424:	e03fec15 	stw	zero,-80(fp)
10001428:	00000906 	br	10001450 <main+0x8b8>
			ocmptr[i] = 0;
1000142c:	d0e00317 	ldw	r3,-32756(gp)
10001430:	e0bfec17 	ldw	r2,-80(fp)
10001434:	1085883a 	add	r2,r2,r2
10001438:	1085883a 	add	r2,r2,r2
1000143c:	1885883a 	add	r2,r3,r2
10001440:	10000015 	stw	zero,0(r2)
		}
		totalFrameCount++;
	}

	if (ON_NIOS) {
		for (int i = 0; i < 258; i++) {
10001444:	e0bfec17 	ldw	r2,-80(fp)
10001448:	10800044 	addi	r2,r2,1
1000144c:	e0bfec15 	stw	r2,-80(fp)
10001450:	e0bfec17 	ldw	r2,-80(fp)
10001454:	10804090 	cmplti	r2,r2,258
10001458:	103ff41e 	bne	r2,zero,1000142c <__alt_data_end+0xf800142c>
//		}
//

//		ocmptr[255] = 0x0000ff00;

		for (int i = 0; i < readlGlobalColorSize; i++) {
1000145c:	e03fed15 	stw	zero,-76(fp)
10001460:	00003d06 	br	10001558 <main+0x9c0>
			for (int j = 0; j < 3; j++) {
10001464:	e03fee15 	stw	zero,-72(fp)
10001468:	00002a06 	br	10001514 <main+0x97c>
				ocmptr[i] += globalTable[i].RGB[j] << (24 - j * 8);
1000146c:	d0e00317 	ldw	r3,-32756(gp)
10001470:	e0bfed17 	ldw	r2,-76(fp)
10001474:	1085883a 	add	r2,r2,r2
10001478:	1085883a 	add	r2,r2,r2
1000147c:	1889883a 	add	r4,r3,r2
10001480:	d0e00317 	ldw	r3,-32756(gp)
10001484:	e0bfed17 	ldw	r2,-76(fp)
10001488:	1085883a 	add	r2,r2,r2
1000148c:	1085883a 	add	r2,r2,r2
10001490:	1885883a 	add	r2,r3,r2
10001494:	11400017 	ldw	r5,0(r2)
10001498:	e0ffed17 	ldw	r3,-76(fp)
1000149c:	1805883a 	mov	r2,r3
100014a0:	1085883a 	add	r2,r2,r2
100014a4:	10c5883a 	add	r2,r2,r3
100014a8:	e0fff217 	ldw	r3,-56(fp)
100014ac:	1887883a 	add	r3,r3,r2
100014b0:	e0bfee17 	ldw	r2,-72(fp)
100014b4:	1885883a 	add	r2,r3,r2
100014b8:	10800003 	ldbu	r2,0(r2)
100014bc:	10c03fcc 	andi	r3,r2,255
100014c0:	018000c4 	movi	r6,3
100014c4:	e0bfee17 	ldw	r2,-72(fp)
100014c8:	3085c83a 	sub	r2,r6,r2
100014cc:	100490fa 	slli	r2,r2,3
100014d0:	1884983a 	sll	r2,r3,r2
100014d4:	2885883a 	add	r2,r5,r2
100014d8:	20800015 	stw	r2,0(r4)
				printf("%d: %08x\n", i, ocmptr[i]);
100014dc:	d0e00317 	ldw	r3,-32756(gp)
100014e0:	e0bfed17 	ldw	r2,-76(fp)
100014e4:	1085883a 	add	r2,r2,r2
100014e8:	1085883a 	add	r2,r2,r2
100014ec:	1885883a 	add	r2,r3,r2
100014f0:	10800017 	ldw	r2,0(r2)
100014f4:	100d883a 	mov	r6,r2
100014f8:	e17fed17 	ldw	r5,-76(fp)
100014fc:	01040074 	movhi	r4,4097
10001500:	2109af04 	addi	r4,r4,9916
10001504:	0003df00 	call	10003df0 <printf>
//

//		ocmptr[255] = 0x0000ff00;

		for (int i = 0; i < readlGlobalColorSize; i++) {
			for (int j = 0; j < 3; j++) {
10001508:	e0bfee17 	ldw	r2,-72(fp)
1000150c:	10800044 	addi	r2,r2,1
10001510:	e0bfee15 	stw	r2,-72(fp)
10001514:	e0bfee17 	ldw	r2,-72(fp)
10001518:	108000d0 	cmplti	r2,r2,3
1000151c:	103fd31e 	bne	r2,zero,1000146c <__alt_data_end+0xf800146c>
				ocmptr[i] += globalTable[i].RGB[j] << (24 - j * 8);
				printf("%d: %08x\n", i, ocmptr[i]);

			}
			printf("final %d: %08x\n", i, ocmptr[i]);
10001520:	d0e00317 	ldw	r3,-32756(gp)
10001524:	e0bfed17 	ldw	r2,-76(fp)
10001528:	1085883a 	add	r2,r2,r2
1000152c:	1085883a 	add	r2,r2,r2
10001530:	1885883a 	add	r2,r3,r2
10001534:	10800017 	ldw	r2,0(r2)
10001538:	100d883a 	mov	r6,r2
1000153c:	e17fed17 	ldw	r5,-76(fp)
10001540:	01040074 	movhi	r4,4097
10001544:	2109b204 	addi	r4,r4,9928
10001548:	0003df00 	call	10003df0 <printf>
//		}
//

//		ocmptr[255] = 0x0000ff00;

		for (int i = 0; i < readlGlobalColorSize; i++) {
1000154c:	e0bfed17 	ldw	r2,-76(fp)
10001550:	10800044 	addi	r2,r2,1
10001554:	e0bfed15 	stw	r2,-76(fp)
10001558:	e0ffed17 	ldw	r3,-76(fp)
1000155c:	e0bff117 	ldw	r2,-60(fp)
10001560:	18bfc016 	blt	r3,r2,10001464 <__alt_data_end+0xf8001464>
//		ocmptr[256] = 0;
//		ocmptr[257] = 0;
//		ocmptr[255] = 0xffff0000; // testing
//		ocmptr[1] = 0xffffff00; // testing

		ocmptr[256] += descriptor.canvasWidth << 16;
10001564:	d0a00317 	ldw	r2,-32756(gp)
10001568:	10810004 	addi	r2,r2,1024
1000156c:	d0e00317 	ldw	r3,-32756(gp)
10001570:	18c10004 	addi	r3,r3,1024
10001574:	18c00017 	ldw	r3,0(r3)
10001578:	e13ff88b 	ldhu	r4,-30(fp)
1000157c:	213fffcc 	andi	r4,r4,65535
10001580:	2008943a 	slli	r4,r4,16
10001584:	1907883a 	add	r3,r3,r4
10001588:	10c00015 	stw	r3,0(r2)
		ocmptr[256] += descriptor.canvasHeight;
1000158c:	d0a00317 	ldw	r2,-32756(gp)
10001590:	10810004 	addi	r2,r2,1024
10001594:	d0e00317 	ldw	r3,-32756(gp)
10001598:	18c10004 	addi	r3,r3,1024
1000159c:	19000017 	ldw	r4,0(r3)
100015a0:	e0fff90b 	ldhu	r3,-28(fp)
100015a4:	18ffffcc 	andi	r3,r3,65535
100015a8:	20c7883a 	add	r3,r4,r3
100015ac:	10c00015 	stw	r3,0(r2)
		//011f
		//ff34
		ocmptr[257] += totalFrameCount << 24;  //last set of bytes
100015b0:	d0a00317 	ldw	r2,-32756(gp)
100015b4:	10810104 	addi	r2,r2,1028
100015b8:	d0e00317 	ldw	r3,-32756(gp)
100015bc:	18c10104 	addi	r3,r3,1028
100015c0:	18c00017 	ldw	r3,0(r3)
100015c4:	e13fe507 	ldb	r4,-108(fp)
100015c8:	2008963a 	slli	r4,r4,24
100015cc:	1907883a 	add	r3,r3,r4
100015d0:	10c00015 	stw	r3,0(r2)
		ocmptr[257] += 1;
100015d4:	d0a00317 	ldw	r2,-32756(gp)
100015d8:	10810104 	addi	r2,r2,1028
100015dc:	d0e00317 	ldw	r3,-32756(gp)
100015e0:	18c10104 	addi	r3,r3,1028
100015e4:	18c00017 	ldw	r3,0(r3)
100015e8:	18c00044 	addi	r3,r3,1
100015ec:	10c00015 	stw	r3,0(r2)
	}
	free(fileChunk);
100015f0:	e13fe117 	ldw	r4,-124(fp)
100015f4:	00032d00 	call	100032d0 <free>
	free(globalTable);
100015f8:	e13ff217 	ldw	r4,-56(fp)
100015fc:	00032d00 	call	100032d0 <free>
	printf("\n");
10001600:	01000284 	movi	r4,10
10001604:	0003e340 	call	10003e34 <putchar>
	printf("\nDONE\n");
10001608:	01040074 	movhi	r4,4097
1000160c:	2109b604 	addi	r4,r4,9944
10001610:	0003f0c0 	call	10003f0c <puts>
10001614:	0005883a 	mov	r2,zero
}
10001618:	e6ffff04 	addi	sp,fp,-4
1000161c:	dfc00217 	ldw	ra,8(sp)
10001620:	df000117 	ldw	fp,4(sp)
10001624:	dc000017 	ldw	r16,0(sp)
10001628:	dec00304 	addi	sp,sp,12
1000162c:	f800283a 	ret

10001630 <__divsi3>:
10001630:	20001b16 	blt	r4,zero,100016a0 <__divsi3+0x70>
10001634:	000f883a 	mov	r7,zero
10001638:	28001616 	blt	r5,zero,10001694 <__divsi3+0x64>
1000163c:	200d883a 	mov	r6,r4
10001640:	29001a2e 	bgeu	r5,r4,100016ac <__divsi3+0x7c>
10001644:	00800804 	movi	r2,32
10001648:	00c00044 	movi	r3,1
1000164c:	00000106 	br	10001654 <__divsi3+0x24>
10001650:	10000d26 	beq	r2,zero,10001688 <__divsi3+0x58>
10001654:	294b883a 	add	r5,r5,r5
10001658:	10bfffc4 	addi	r2,r2,-1
1000165c:	18c7883a 	add	r3,r3,r3
10001660:	293ffb36 	bltu	r5,r4,10001650 <__alt_data_end+0xf8001650>
10001664:	0005883a 	mov	r2,zero
10001668:	18000726 	beq	r3,zero,10001688 <__divsi3+0x58>
1000166c:	0005883a 	mov	r2,zero
10001670:	31400236 	bltu	r6,r5,1000167c <__divsi3+0x4c>
10001674:	314dc83a 	sub	r6,r6,r5
10001678:	10c4b03a 	or	r2,r2,r3
1000167c:	1806d07a 	srli	r3,r3,1
10001680:	280ad07a 	srli	r5,r5,1
10001684:	183ffa1e 	bne	r3,zero,10001670 <__alt_data_end+0xf8001670>
10001688:	38000126 	beq	r7,zero,10001690 <__divsi3+0x60>
1000168c:	0085c83a 	sub	r2,zero,r2
10001690:	f800283a 	ret
10001694:	014bc83a 	sub	r5,zero,r5
10001698:	39c0005c 	xori	r7,r7,1
1000169c:	003fe706 	br	1000163c <__alt_data_end+0xf800163c>
100016a0:	0109c83a 	sub	r4,zero,r4
100016a4:	01c00044 	movi	r7,1
100016a8:	003fe306 	br	10001638 <__alt_data_end+0xf8001638>
100016ac:	00c00044 	movi	r3,1
100016b0:	003fee06 	br	1000166c <__alt_data_end+0xf800166c>

100016b4 <__modsi3>:
100016b4:	20001716 	blt	r4,zero,10001714 <__modsi3+0x60>
100016b8:	000f883a 	mov	r7,zero
100016bc:	2005883a 	mov	r2,r4
100016c0:	28001216 	blt	r5,zero,1000170c <__modsi3+0x58>
100016c4:	2900162e 	bgeu	r5,r4,10001720 <__modsi3+0x6c>
100016c8:	01800804 	movi	r6,32
100016cc:	00c00044 	movi	r3,1
100016d0:	00000106 	br	100016d8 <__modsi3+0x24>
100016d4:	30000a26 	beq	r6,zero,10001700 <__modsi3+0x4c>
100016d8:	294b883a 	add	r5,r5,r5
100016dc:	31bfffc4 	addi	r6,r6,-1
100016e0:	18c7883a 	add	r3,r3,r3
100016e4:	293ffb36 	bltu	r5,r4,100016d4 <__alt_data_end+0xf80016d4>
100016e8:	18000526 	beq	r3,zero,10001700 <__modsi3+0x4c>
100016ec:	1806d07a 	srli	r3,r3,1
100016f0:	11400136 	bltu	r2,r5,100016f8 <__modsi3+0x44>
100016f4:	1145c83a 	sub	r2,r2,r5
100016f8:	280ad07a 	srli	r5,r5,1
100016fc:	183ffb1e 	bne	r3,zero,100016ec <__alt_data_end+0xf80016ec>
10001700:	38000126 	beq	r7,zero,10001708 <__modsi3+0x54>
10001704:	0085c83a 	sub	r2,zero,r2
10001708:	f800283a 	ret
1000170c:	014bc83a 	sub	r5,zero,r5
10001710:	003fec06 	br	100016c4 <__alt_data_end+0xf80016c4>
10001714:	0109c83a 	sub	r4,zero,r4
10001718:	01c00044 	movi	r7,1
1000171c:	003fe706 	br	100016bc <__alt_data_end+0xf80016bc>
10001720:	00c00044 	movi	r3,1
10001724:	003ff106 	br	100016ec <__alt_data_end+0xf80016ec>

10001728 <__udivsi3>:
10001728:	200d883a 	mov	r6,r4
1000172c:	2900152e 	bgeu	r5,r4,10001784 <__udivsi3+0x5c>
10001730:	28001416 	blt	r5,zero,10001784 <__udivsi3+0x5c>
10001734:	00800804 	movi	r2,32
10001738:	00c00044 	movi	r3,1
1000173c:	00000206 	br	10001748 <__udivsi3+0x20>
10001740:	10000e26 	beq	r2,zero,1000177c <__udivsi3+0x54>
10001744:	28000516 	blt	r5,zero,1000175c <__udivsi3+0x34>
10001748:	294b883a 	add	r5,r5,r5
1000174c:	10bfffc4 	addi	r2,r2,-1
10001750:	18c7883a 	add	r3,r3,r3
10001754:	293ffa36 	bltu	r5,r4,10001740 <__alt_data_end+0xf8001740>
10001758:	18000826 	beq	r3,zero,1000177c <__udivsi3+0x54>
1000175c:	0005883a 	mov	r2,zero
10001760:	31400236 	bltu	r6,r5,1000176c <__udivsi3+0x44>
10001764:	314dc83a 	sub	r6,r6,r5
10001768:	10c4b03a 	or	r2,r2,r3
1000176c:	1806d07a 	srli	r3,r3,1
10001770:	280ad07a 	srli	r5,r5,1
10001774:	183ffa1e 	bne	r3,zero,10001760 <__alt_data_end+0xf8001760>
10001778:	f800283a 	ret
1000177c:	0005883a 	mov	r2,zero
10001780:	f800283a 	ret
10001784:	00c00044 	movi	r3,1
10001788:	003ff406 	br	1000175c <__alt_data_end+0xf800175c>

1000178c <__umodsi3>:
1000178c:	2005883a 	mov	r2,r4
10001790:	2900122e 	bgeu	r5,r4,100017dc <__umodsi3+0x50>
10001794:	28001116 	blt	r5,zero,100017dc <__umodsi3+0x50>
10001798:	01800804 	movi	r6,32
1000179c:	00c00044 	movi	r3,1
100017a0:	00000206 	br	100017ac <__umodsi3+0x20>
100017a4:	30000c26 	beq	r6,zero,100017d8 <__umodsi3+0x4c>
100017a8:	28000516 	blt	r5,zero,100017c0 <__umodsi3+0x34>
100017ac:	294b883a 	add	r5,r5,r5
100017b0:	31bfffc4 	addi	r6,r6,-1
100017b4:	18c7883a 	add	r3,r3,r3
100017b8:	293ffa36 	bltu	r5,r4,100017a4 <__alt_data_end+0xf80017a4>
100017bc:	18000626 	beq	r3,zero,100017d8 <__umodsi3+0x4c>
100017c0:	1806d07a 	srli	r3,r3,1
100017c4:	11400136 	bltu	r2,r5,100017cc <__umodsi3+0x40>
100017c8:	1145c83a 	sub	r2,r2,r5
100017cc:	280ad07a 	srli	r5,r5,1
100017d0:	183ffb1e 	bne	r3,zero,100017c0 <__alt_data_end+0xf80017c0>
100017d4:	f800283a 	ret
100017d8:	f800283a 	ret
100017dc:	00c00044 	movi	r3,1
100017e0:	003ff706 	br	100017c0 <__alt_data_end+0xf80017c0>

100017e4 <__mulsi3>:
100017e4:	0005883a 	mov	r2,zero
100017e8:	20000726 	beq	r4,zero,10001808 <__mulsi3+0x24>
100017ec:	20c0004c 	andi	r3,r4,1
100017f0:	2008d07a 	srli	r4,r4,1
100017f4:	18000126 	beq	r3,zero,100017fc <__mulsi3+0x18>
100017f8:	1145883a 	add	r2,r2,r5
100017fc:	294b883a 	add	r5,r5,r5
10001800:	203ffa1e 	bne	r4,zero,100017ec <__alt_data_end+0xf80017ec>
10001804:	f800283a 	ret
10001808:	f800283a 	ret

1000180c <__assert_func>:
1000180c:	00840074 	movhi	r2,4097
10001810:	10915e04 	addi	r2,r2,17784
10001814:	10800017 	ldw	r2,0(r2)
10001818:	defffc04 	addi	sp,sp,-16
1000181c:	dfc00315 	stw	ra,12(sp)
10001820:	2015883a 	mov	r10,r4
10001824:	2811883a 	mov	r8,r5
10001828:	3813883a 	mov	r9,r7
1000182c:	11000317 	ldw	r4,12(r2)
10001830:	30000c26 	beq	r6,zero,10001864 <__assert_func+0x58>
10001834:	00c40074 	movhi	r3,4097
10001838:	18c9bb04 	addi	r3,r3,9964
1000183c:	3005883a 	mov	r2,r6
10001840:	01440074 	movhi	r5,4097
10001844:	2949bf04 	addi	r5,r5,9980
10001848:	500f883a 	mov	r7,r10
1000184c:	480d883a 	mov	r6,r9
10001850:	d8c00115 	stw	r3,4(sp)
10001854:	da000015 	stw	r8,0(sp)
10001858:	d8800215 	stw	r2,8(sp)
1000185c:	000203c0 	call	1000203c <fiprintf>
10001860:	00070080 	call	10007008 <abort>
10001864:	00c40074 	movhi	r3,4097
10001868:	18c9be04 	addi	r3,r3,9976
1000186c:	1805883a 	mov	r2,r3
10001870:	003ff306 	br	10001840 <__alt_data_end+0xf8001840>

10001874 <__assert>:
10001874:	deffff04 	addi	sp,sp,-4
10001878:	300f883a 	mov	r7,r6
1000187c:	000d883a 	mov	r6,zero
10001880:	dfc00015 	stw	ra,0(sp)
10001884:	000180c0 	call	1000180c <__assert_func>

10001888 <exit>:
10001888:	defffe04 	addi	sp,sp,-8
1000188c:	000b883a 	mov	r5,zero
10001890:	dc000015 	stw	r16,0(sp)
10001894:	dfc00115 	stw	ra,4(sp)
10001898:	2021883a 	mov	r16,r4
1000189c:	0006e880 	call	10006e88 <__call_exitprocs>
100018a0:	00840074 	movhi	r2,4097
100018a4:	10915d04 	addi	r2,r2,17780
100018a8:	11000017 	ldw	r4,0(r2)
100018ac:	20800f17 	ldw	r2,60(r4)
100018b0:	10000126 	beq	r2,zero,100018b8 <exit+0x30>
100018b4:	103ee83a 	callr	r2
100018b8:	8009883a 	mov	r4,r16
100018bc:	000fba80 	call	1000fba8 <_exit>

100018c0 <_fclose_r>:
100018c0:	28003926 	beq	r5,zero,100019a8 <_fclose_r+0xe8>
100018c4:	defffc04 	addi	sp,sp,-16
100018c8:	dc400115 	stw	r17,4(sp)
100018cc:	dc000015 	stw	r16,0(sp)
100018d0:	dfc00315 	stw	ra,12(sp)
100018d4:	dc800215 	stw	r18,8(sp)
100018d8:	2023883a 	mov	r17,r4
100018dc:	2821883a 	mov	r16,r5
100018e0:	20000226 	beq	r4,zero,100018ec <_fclose_r+0x2c>
100018e4:	20800e17 	ldw	r2,56(r4)
100018e8:	10002726 	beq	r2,zero,10001988 <_fclose_r+0xc8>
100018ec:	8080030f 	ldh	r2,12(r16)
100018f0:	1000071e 	bne	r2,zero,10001910 <_fclose_r+0x50>
100018f4:	0005883a 	mov	r2,zero
100018f8:	dfc00317 	ldw	ra,12(sp)
100018fc:	dc800217 	ldw	r18,8(sp)
10001900:	dc400117 	ldw	r17,4(sp)
10001904:	dc000017 	ldw	r16,0(sp)
10001908:	dec00404 	addi	sp,sp,16
1000190c:	f800283a 	ret
10001910:	800b883a 	mov	r5,r16
10001914:	8809883a 	mov	r4,r17
10001918:	00019c40 	call	100019c4 <__sflush_r>
1000191c:	1025883a 	mov	r18,r2
10001920:	80800b17 	ldw	r2,44(r16)
10001924:	10000426 	beq	r2,zero,10001938 <_fclose_r+0x78>
10001928:	81400717 	ldw	r5,28(r16)
1000192c:	8809883a 	mov	r4,r17
10001930:	103ee83a 	callr	r2
10001934:	10001616 	blt	r2,zero,10001990 <_fclose_r+0xd0>
10001938:	8080030b 	ldhu	r2,12(r16)
1000193c:	1080200c 	andi	r2,r2,128
10001940:	1000151e 	bne	r2,zero,10001998 <_fclose_r+0xd8>
10001944:	81400c17 	ldw	r5,48(r16)
10001948:	28000526 	beq	r5,zero,10001960 <_fclose_r+0xa0>
1000194c:	80801004 	addi	r2,r16,64
10001950:	28800226 	beq	r5,r2,1000195c <_fclose_r+0x9c>
10001954:	8809883a 	mov	r4,r17
10001958:	00025640 	call	10002564 <_free_r>
1000195c:	80000c15 	stw	zero,48(r16)
10001960:	81401117 	ldw	r5,68(r16)
10001964:	28000326 	beq	r5,zero,10001974 <_fclose_r+0xb4>
10001968:	8809883a 	mov	r4,r17
1000196c:	00025640 	call	10002564 <_free_r>
10001970:	80001115 	stw	zero,68(r16)
10001974:	0001fdc0 	call	10001fdc <__sfp_lock_acquire>
10001978:	8000030d 	sth	zero,12(r16)
1000197c:	0001fe00 	call	10001fe0 <__sfp_lock_release>
10001980:	9005883a 	mov	r2,r18
10001984:	003fdc06 	br	100018f8 <__alt_data_end+0xf80018f8>
10001988:	0001fcc0 	call	10001fcc <__sinit>
1000198c:	003fd706 	br	100018ec <__alt_data_end+0xf80018ec>
10001990:	04bfffc4 	movi	r18,-1
10001994:	003fe806 	br	10001938 <__alt_data_end+0xf8001938>
10001998:	81400417 	ldw	r5,16(r16)
1000199c:	8809883a 	mov	r4,r17
100019a0:	00025640 	call	10002564 <_free_r>
100019a4:	003fe706 	br	10001944 <__alt_data_end+0xf8001944>
100019a8:	0005883a 	mov	r2,zero
100019ac:	f800283a 	ret

100019b0 <fclose>:
100019b0:	00840074 	movhi	r2,4097
100019b4:	10915e04 	addi	r2,r2,17784
100019b8:	200b883a 	mov	r5,r4
100019bc:	11000017 	ldw	r4,0(r2)
100019c0:	00018c01 	jmpi	100018c0 <_fclose_r>

100019c4 <__sflush_r>:
100019c4:	2880030b 	ldhu	r2,12(r5)
100019c8:	defffb04 	addi	sp,sp,-20
100019cc:	dcc00315 	stw	r19,12(sp)
100019d0:	dc400115 	stw	r17,4(sp)
100019d4:	dfc00415 	stw	ra,16(sp)
100019d8:	dc800215 	stw	r18,8(sp)
100019dc:	dc000015 	stw	r16,0(sp)
100019e0:	10c0020c 	andi	r3,r2,8
100019e4:	2823883a 	mov	r17,r5
100019e8:	2027883a 	mov	r19,r4
100019ec:	1800311e 	bne	r3,zero,10001ab4 <__sflush_r+0xf0>
100019f0:	28c00117 	ldw	r3,4(r5)
100019f4:	10820014 	ori	r2,r2,2048
100019f8:	2880030d 	sth	r2,12(r5)
100019fc:	00c04b0e 	bge	zero,r3,10001b2c <__sflush_r+0x168>
10001a00:	8a000a17 	ldw	r8,40(r17)
10001a04:	40002326 	beq	r8,zero,10001a94 <__sflush_r+0xd0>
10001a08:	9c000017 	ldw	r16,0(r19)
10001a0c:	10c4000c 	andi	r3,r2,4096
10001a10:	98000015 	stw	zero,0(r19)
10001a14:	18004826 	beq	r3,zero,10001b38 <__sflush_r+0x174>
10001a18:	89801417 	ldw	r6,80(r17)
10001a1c:	10c0010c 	andi	r3,r2,4
10001a20:	18000626 	beq	r3,zero,10001a3c <__sflush_r+0x78>
10001a24:	88c00117 	ldw	r3,4(r17)
10001a28:	88800c17 	ldw	r2,48(r17)
10001a2c:	30cdc83a 	sub	r6,r6,r3
10001a30:	10000226 	beq	r2,zero,10001a3c <__sflush_r+0x78>
10001a34:	88800f17 	ldw	r2,60(r17)
10001a38:	308dc83a 	sub	r6,r6,r2
10001a3c:	89400717 	ldw	r5,28(r17)
10001a40:	000f883a 	mov	r7,zero
10001a44:	9809883a 	mov	r4,r19
10001a48:	403ee83a 	callr	r8
10001a4c:	00ffffc4 	movi	r3,-1
10001a50:	10c04426 	beq	r2,r3,10001b64 <__sflush_r+0x1a0>
10001a54:	88c0030b 	ldhu	r3,12(r17)
10001a58:	89000417 	ldw	r4,16(r17)
10001a5c:	88000115 	stw	zero,4(r17)
10001a60:	197dffcc 	andi	r5,r3,63487
10001a64:	8940030d 	sth	r5,12(r17)
10001a68:	89000015 	stw	r4,0(r17)
10001a6c:	18c4000c 	andi	r3,r3,4096
10001a70:	18002c1e 	bne	r3,zero,10001b24 <__sflush_r+0x160>
10001a74:	89400c17 	ldw	r5,48(r17)
10001a78:	9c000015 	stw	r16,0(r19)
10001a7c:	28000526 	beq	r5,zero,10001a94 <__sflush_r+0xd0>
10001a80:	88801004 	addi	r2,r17,64
10001a84:	28800226 	beq	r5,r2,10001a90 <__sflush_r+0xcc>
10001a88:	9809883a 	mov	r4,r19
10001a8c:	00025640 	call	10002564 <_free_r>
10001a90:	88000c15 	stw	zero,48(r17)
10001a94:	0005883a 	mov	r2,zero
10001a98:	dfc00417 	ldw	ra,16(sp)
10001a9c:	dcc00317 	ldw	r19,12(sp)
10001aa0:	dc800217 	ldw	r18,8(sp)
10001aa4:	dc400117 	ldw	r17,4(sp)
10001aa8:	dc000017 	ldw	r16,0(sp)
10001aac:	dec00504 	addi	sp,sp,20
10001ab0:	f800283a 	ret
10001ab4:	2c800417 	ldw	r18,16(r5)
10001ab8:	903ff626 	beq	r18,zero,10001a94 <__alt_data_end+0xf8001a94>
10001abc:	2c000017 	ldw	r16,0(r5)
10001ac0:	108000cc 	andi	r2,r2,3
10001ac4:	2c800015 	stw	r18,0(r5)
10001ac8:	84a1c83a 	sub	r16,r16,r18
10001acc:	1000131e 	bne	r2,zero,10001b1c <__sflush_r+0x158>
10001ad0:	28800517 	ldw	r2,20(r5)
10001ad4:	88800215 	stw	r2,8(r17)
10001ad8:	04000316 	blt	zero,r16,10001ae8 <__sflush_r+0x124>
10001adc:	003fed06 	br	10001a94 <__alt_data_end+0xf8001a94>
10001ae0:	90a5883a 	add	r18,r18,r2
10001ae4:	043feb0e 	bge	zero,r16,10001a94 <__alt_data_end+0xf8001a94>
10001ae8:	88800917 	ldw	r2,36(r17)
10001aec:	89400717 	ldw	r5,28(r17)
10001af0:	800f883a 	mov	r7,r16
10001af4:	900d883a 	mov	r6,r18
10001af8:	9809883a 	mov	r4,r19
10001afc:	103ee83a 	callr	r2
10001b00:	80a1c83a 	sub	r16,r16,r2
10001b04:	00bff616 	blt	zero,r2,10001ae0 <__alt_data_end+0xf8001ae0>
10001b08:	88c0030b 	ldhu	r3,12(r17)
10001b0c:	00bfffc4 	movi	r2,-1
10001b10:	18c01014 	ori	r3,r3,64
10001b14:	88c0030d 	sth	r3,12(r17)
10001b18:	003fdf06 	br	10001a98 <__alt_data_end+0xf8001a98>
10001b1c:	0005883a 	mov	r2,zero
10001b20:	003fec06 	br	10001ad4 <__alt_data_end+0xf8001ad4>
10001b24:	88801415 	stw	r2,80(r17)
10001b28:	003fd206 	br	10001a74 <__alt_data_end+0xf8001a74>
10001b2c:	28c00f17 	ldw	r3,60(r5)
10001b30:	00ffb316 	blt	zero,r3,10001a00 <__alt_data_end+0xf8001a00>
10001b34:	003fd706 	br	10001a94 <__alt_data_end+0xf8001a94>
10001b38:	89400717 	ldw	r5,28(r17)
10001b3c:	000d883a 	mov	r6,zero
10001b40:	01c00044 	movi	r7,1
10001b44:	9809883a 	mov	r4,r19
10001b48:	403ee83a 	callr	r8
10001b4c:	100d883a 	mov	r6,r2
10001b50:	00bfffc4 	movi	r2,-1
10001b54:	30801426 	beq	r6,r2,10001ba8 <__sflush_r+0x1e4>
10001b58:	8880030b 	ldhu	r2,12(r17)
10001b5c:	8a000a17 	ldw	r8,40(r17)
10001b60:	003fae06 	br	10001a1c <__alt_data_end+0xf8001a1c>
10001b64:	98c00017 	ldw	r3,0(r19)
10001b68:	183fba26 	beq	r3,zero,10001a54 <__alt_data_end+0xf8001a54>
10001b6c:	01000744 	movi	r4,29
10001b70:	19000626 	beq	r3,r4,10001b8c <__sflush_r+0x1c8>
10001b74:	01000584 	movi	r4,22
10001b78:	19000426 	beq	r3,r4,10001b8c <__sflush_r+0x1c8>
10001b7c:	88c0030b 	ldhu	r3,12(r17)
10001b80:	18c01014 	ori	r3,r3,64
10001b84:	88c0030d 	sth	r3,12(r17)
10001b88:	003fc306 	br	10001a98 <__alt_data_end+0xf8001a98>
10001b8c:	8880030b 	ldhu	r2,12(r17)
10001b90:	88c00417 	ldw	r3,16(r17)
10001b94:	88000115 	stw	zero,4(r17)
10001b98:	10bdffcc 	andi	r2,r2,63487
10001b9c:	8880030d 	sth	r2,12(r17)
10001ba0:	88c00015 	stw	r3,0(r17)
10001ba4:	003fb306 	br	10001a74 <__alt_data_end+0xf8001a74>
10001ba8:	98800017 	ldw	r2,0(r19)
10001bac:	103fea26 	beq	r2,zero,10001b58 <__alt_data_end+0xf8001b58>
10001bb0:	00c00744 	movi	r3,29
10001bb4:	10c00226 	beq	r2,r3,10001bc0 <__sflush_r+0x1fc>
10001bb8:	00c00584 	movi	r3,22
10001bbc:	10c0031e 	bne	r2,r3,10001bcc <__sflush_r+0x208>
10001bc0:	9c000015 	stw	r16,0(r19)
10001bc4:	0005883a 	mov	r2,zero
10001bc8:	003fb306 	br	10001a98 <__alt_data_end+0xf8001a98>
10001bcc:	88c0030b 	ldhu	r3,12(r17)
10001bd0:	3005883a 	mov	r2,r6
10001bd4:	18c01014 	ori	r3,r3,64
10001bd8:	88c0030d 	sth	r3,12(r17)
10001bdc:	003fae06 	br	10001a98 <__alt_data_end+0xf8001a98>

10001be0 <_fflush_r>:
10001be0:	defffd04 	addi	sp,sp,-12
10001be4:	dc000115 	stw	r16,4(sp)
10001be8:	dfc00215 	stw	ra,8(sp)
10001bec:	2021883a 	mov	r16,r4
10001bf0:	20000226 	beq	r4,zero,10001bfc <_fflush_r+0x1c>
10001bf4:	20800e17 	ldw	r2,56(r4)
10001bf8:	10000c26 	beq	r2,zero,10001c2c <_fflush_r+0x4c>
10001bfc:	2880030f 	ldh	r2,12(r5)
10001c00:	1000051e 	bne	r2,zero,10001c18 <_fflush_r+0x38>
10001c04:	0005883a 	mov	r2,zero
10001c08:	dfc00217 	ldw	ra,8(sp)
10001c0c:	dc000117 	ldw	r16,4(sp)
10001c10:	dec00304 	addi	sp,sp,12
10001c14:	f800283a 	ret
10001c18:	8009883a 	mov	r4,r16
10001c1c:	dfc00217 	ldw	ra,8(sp)
10001c20:	dc000117 	ldw	r16,4(sp)
10001c24:	dec00304 	addi	sp,sp,12
10001c28:	00019c41 	jmpi	100019c4 <__sflush_r>
10001c2c:	d9400015 	stw	r5,0(sp)
10001c30:	0001fcc0 	call	10001fcc <__sinit>
10001c34:	d9400017 	ldw	r5,0(sp)
10001c38:	003ff006 	br	10001bfc <__alt_data_end+0xf8001bfc>

10001c3c <fflush>:
10001c3c:	20000526 	beq	r4,zero,10001c54 <fflush+0x18>
10001c40:	00840074 	movhi	r2,4097
10001c44:	10915e04 	addi	r2,r2,17784
10001c48:	200b883a 	mov	r5,r4
10001c4c:	11000017 	ldw	r4,0(r2)
10001c50:	0001be01 	jmpi	10001be0 <_fflush_r>
10001c54:	00840074 	movhi	r2,4097
10001c58:	10915d04 	addi	r2,r2,17780
10001c5c:	11000017 	ldw	r4,0(r2)
10001c60:	01440034 	movhi	r5,4096
10001c64:	2946f804 	addi	r5,r5,7136
10001c68:	0002f2c1 	jmpi	10002f2c <_fwalk_reent>

10001c6c <__fp_unlock>:
10001c6c:	0005883a 	mov	r2,zero
10001c70:	f800283a 	ret

10001c74 <_cleanup_r>:
10001c74:	01440034 	movhi	r5,4096
10001c78:	29463004 	addi	r5,r5,6336
10001c7c:	0002f2c1 	jmpi	10002f2c <_fwalk_reent>

10001c80 <__sinit.part.1>:
10001c80:	defff704 	addi	sp,sp,-36
10001c84:	00c40034 	movhi	r3,4096
10001c88:	dfc00815 	stw	ra,32(sp)
10001c8c:	ddc00715 	stw	r23,28(sp)
10001c90:	dd800615 	stw	r22,24(sp)
10001c94:	dd400515 	stw	r21,20(sp)
10001c98:	dd000415 	stw	r20,16(sp)
10001c9c:	dcc00315 	stw	r19,12(sp)
10001ca0:	dc800215 	stw	r18,8(sp)
10001ca4:	dc400115 	stw	r17,4(sp)
10001ca8:	dc000015 	stw	r16,0(sp)
10001cac:	18c71d04 	addi	r3,r3,7284
10001cb0:	24000117 	ldw	r16,4(r4)
10001cb4:	20c00f15 	stw	r3,60(r4)
10001cb8:	2080bb04 	addi	r2,r4,748
10001cbc:	00c000c4 	movi	r3,3
10001cc0:	20c0b915 	stw	r3,740(r4)
10001cc4:	2080ba15 	stw	r2,744(r4)
10001cc8:	2000b815 	stw	zero,736(r4)
10001ccc:	05c00204 	movi	r23,8
10001cd0:	00800104 	movi	r2,4
10001cd4:	2025883a 	mov	r18,r4
10001cd8:	b80d883a 	mov	r6,r23
10001cdc:	81001704 	addi	r4,r16,92
10001ce0:	000b883a 	mov	r5,zero
10001ce4:	80000015 	stw	zero,0(r16)
10001ce8:	80000115 	stw	zero,4(r16)
10001cec:	80000215 	stw	zero,8(r16)
10001cf0:	8080030d 	sth	r2,12(r16)
10001cf4:	80001915 	stw	zero,100(r16)
10001cf8:	8000038d 	sth	zero,14(r16)
10001cfc:	80000415 	stw	zero,16(r16)
10001d00:	80000515 	stw	zero,20(r16)
10001d04:	80000615 	stw	zero,24(r16)
10001d08:	0003c380 	call	10003c38 <memset>
10001d0c:	05840034 	movhi	r22,4096
10001d10:	94400217 	ldw	r17,8(r18)
10001d14:	05440034 	movhi	r21,4096
10001d18:	05040034 	movhi	r20,4096
10001d1c:	04c40034 	movhi	r19,4096
10001d20:	b591b804 	addi	r22,r22,18144
10001d24:	ad51cf04 	addi	r21,r21,18236
10001d28:	a511ee04 	addi	r20,r20,18360
10001d2c:	9cd20504 	addi	r19,r19,18452
10001d30:	85800815 	stw	r22,32(r16)
10001d34:	85400915 	stw	r21,36(r16)
10001d38:	85000a15 	stw	r20,40(r16)
10001d3c:	84c00b15 	stw	r19,44(r16)
10001d40:	84000715 	stw	r16,28(r16)
10001d44:	00800284 	movi	r2,10
10001d48:	8880030d 	sth	r2,12(r17)
10001d4c:	00800044 	movi	r2,1
10001d50:	b80d883a 	mov	r6,r23
10001d54:	89001704 	addi	r4,r17,92
10001d58:	000b883a 	mov	r5,zero
10001d5c:	88000015 	stw	zero,0(r17)
10001d60:	88000115 	stw	zero,4(r17)
10001d64:	88000215 	stw	zero,8(r17)
10001d68:	88001915 	stw	zero,100(r17)
10001d6c:	8880038d 	sth	r2,14(r17)
10001d70:	88000415 	stw	zero,16(r17)
10001d74:	88000515 	stw	zero,20(r17)
10001d78:	88000615 	stw	zero,24(r17)
10001d7c:	0003c380 	call	10003c38 <memset>
10001d80:	94000317 	ldw	r16,12(r18)
10001d84:	00800484 	movi	r2,18
10001d88:	8c400715 	stw	r17,28(r17)
10001d8c:	8d800815 	stw	r22,32(r17)
10001d90:	8d400915 	stw	r21,36(r17)
10001d94:	8d000a15 	stw	r20,40(r17)
10001d98:	8cc00b15 	stw	r19,44(r17)
10001d9c:	8080030d 	sth	r2,12(r16)
10001da0:	00800084 	movi	r2,2
10001da4:	80000015 	stw	zero,0(r16)
10001da8:	80000115 	stw	zero,4(r16)
10001dac:	80000215 	stw	zero,8(r16)
10001db0:	80001915 	stw	zero,100(r16)
10001db4:	8080038d 	sth	r2,14(r16)
10001db8:	80000415 	stw	zero,16(r16)
10001dbc:	80000515 	stw	zero,20(r16)
10001dc0:	80000615 	stw	zero,24(r16)
10001dc4:	b80d883a 	mov	r6,r23
10001dc8:	000b883a 	mov	r5,zero
10001dcc:	81001704 	addi	r4,r16,92
10001dd0:	0003c380 	call	10003c38 <memset>
10001dd4:	00800044 	movi	r2,1
10001dd8:	84000715 	stw	r16,28(r16)
10001ddc:	85800815 	stw	r22,32(r16)
10001de0:	85400915 	stw	r21,36(r16)
10001de4:	85000a15 	stw	r20,40(r16)
10001de8:	84c00b15 	stw	r19,44(r16)
10001dec:	90800e15 	stw	r2,56(r18)
10001df0:	dfc00817 	ldw	ra,32(sp)
10001df4:	ddc00717 	ldw	r23,28(sp)
10001df8:	dd800617 	ldw	r22,24(sp)
10001dfc:	dd400517 	ldw	r21,20(sp)
10001e00:	dd000417 	ldw	r20,16(sp)
10001e04:	dcc00317 	ldw	r19,12(sp)
10001e08:	dc800217 	ldw	r18,8(sp)
10001e0c:	dc400117 	ldw	r17,4(sp)
10001e10:	dc000017 	ldw	r16,0(sp)
10001e14:	dec00904 	addi	sp,sp,36
10001e18:	f800283a 	ret

10001e1c <__fp_lock>:
10001e1c:	0005883a 	mov	r2,zero
10001e20:	f800283a 	ret

10001e24 <__sfmoreglue>:
10001e24:	defffc04 	addi	sp,sp,-16
10001e28:	dc800215 	stw	r18,8(sp)
10001e2c:	2825883a 	mov	r18,r5
10001e30:	dc000015 	stw	r16,0(sp)
10001e34:	01401a04 	movi	r5,104
10001e38:	2021883a 	mov	r16,r4
10001e3c:	913fffc4 	addi	r4,r18,-1
10001e40:	dfc00315 	stw	ra,12(sp)
10001e44:	dc400115 	stw	r17,4(sp)
10001e48:	00017e40 	call	100017e4 <__mulsi3>
10001e4c:	8009883a 	mov	r4,r16
10001e50:	11401d04 	addi	r5,r2,116
10001e54:	1023883a 	mov	r17,r2
10001e58:	00032e40 	call	100032e4 <_malloc_r>
10001e5c:	1021883a 	mov	r16,r2
10001e60:	10000726 	beq	r2,zero,10001e80 <__sfmoreglue+0x5c>
10001e64:	11000304 	addi	r4,r2,12
10001e68:	10000015 	stw	zero,0(r2)
10001e6c:	14800115 	stw	r18,4(r2)
10001e70:	11000215 	stw	r4,8(r2)
10001e74:	89801a04 	addi	r6,r17,104
10001e78:	000b883a 	mov	r5,zero
10001e7c:	0003c380 	call	10003c38 <memset>
10001e80:	8005883a 	mov	r2,r16
10001e84:	dfc00317 	ldw	ra,12(sp)
10001e88:	dc800217 	ldw	r18,8(sp)
10001e8c:	dc400117 	ldw	r17,4(sp)
10001e90:	dc000017 	ldw	r16,0(sp)
10001e94:	dec00404 	addi	sp,sp,16
10001e98:	f800283a 	ret

10001e9c <__sfp>:
10001e9c:	defffb04 	addi	sp,sp,-20
10001ea0:	dc000015 	stw	r16,0(sp)
10001ea4:	04040074 	movhi	r16,4097
10001ea8:	84115d04 	addi	r16,r16,17780
10001eac:	dcc00315 	stw	r19,12(sp)
10001eb0:	2027883a 	mov	r19,r4
10001eb4:	81000017 	ldw	r4,0(r16)
10001eb8:	dfc00415 	stw	ra,16(sp)
10001ebc:	dc800215 	stw	r18,8(sp)
10001ec0:	20800e17 	ldw	r2,56(r4)
10001ec4:	dc400115 	stw	r17,4(sp)
10001ec8:	1000021e 	bne	r2,zero,10001ed4 <__sfp+0x38>
10001ecc:	0001c800 	call	10001c80 <__sinit.part.1>
10001ed0:	81000017 	ldw	r4,0(r16)
10001ed4:	2480b804 	addi	r18,r4,736
10001ed8:	047fffc4 	movi	r17,-1
10001edc:	91000117 	ldw	r4,4(r18)
10001ee0:	94000217 	ldw	r16,8(r18)
10001ee4:	213fffc4 	addi	r4,r4,-1
10001ee8:	20000a16 	blt	r4,zero,10001f14 <__sfp+0x78>
10001eec:	8080030f 	ldh	r2,12(r16)
10001ef0:	10000c26 	beq	r2,zero,10001f24 <__sfp+0x88>
10001ef4:	80c01d04 	addi	r3,r16,116
10001ef8:	00000206 	br	10001f04 <__sfp+0x68>
10001efc:	18bfe60f 	ldh	r2,-104(r3)
10001f00:	10000826 	beq	r2,zero,10001f24 <__sfp+0x88>
10001f04:	213fffc4 	addi	r4,r4,-1
10001f08:	1c3ffd04 	addi	r16,r3,-12
10001f0c:	18c01a04 	addi	r3,r3,104
10001f10:	247ffa1e 	bne	r4,r17,10001efc <__alt_data_end+0xf8001efc>
10001f14:	90800017 	ldw	r2,0(r18)
10001f18:	10001d26 	beq	r2,zero,10001f90 <__sfp+0xf4>
10001f1c:	1025883a 	mov	r18,r2
10001f20:	003fee06 	br	10001edc <__alt_data_end+0xf8001edc>
10001f24:	00bfffc4 	movi	r2,-1
10001f28:	8080038d 	sth	r2,14(r16)
10001f2c:	00800044 	movi	r2,1
10001f30:	8080030d 	sth	r2,12(r16)
10001f34:	80001915 	stw	zero,100(r16)
10001f38:	80000015 	stw	zero,0(r16)
10001f3c:	80000215 	stw	zero,8(r16)
10001f40:	80000115 	stw	zero,4(r16)
10001f44:	80000415 	stw	zero,16(r16)
10001f48:	80000515 	stw	zero,20(r16)
10001f4c:	80000615 	stw	zero,24(r16)
10001f50:	01800204 	movi	r6,8
10001f54:	000b883a 	mov	r5,zero
10001f58:	81001704 	addi	r4,r16,92
10001f5c:	0003c380 	call	10003c38 <memset>
10001f60:	8005883a 	mov	r2,r16
10001f64:	80000c15 	stw	zero,48(r16)
10001f68:	80000d15 	stw	zero,52(r16)
10001f6c:	80001115 	stw	zero,68(r16)
10001f70:	80001215 	stw	zero,72(r16)
10001f74:	dfc00417 	ldw	ra,16(sp)
10001f78:	dcc00317 	ldw	r19,12(sp)
10001f7c:	dc800217 	ldw	r18,8(sp)
10001f80:	dc400117 	ldw	r17,4(sp)
10001f84:	dc000017 	ldw	r16,0(sp)
10001f88:	dec00504 	addi	sp,sp,20
10001f8c:	f800283a 	ret
10001f90:	01400104 	movi	r5,4
10001f94:	9809883a 	mov	r4,r19
10001f98:	0001e240 	call	10001e24 <__sfmoreglue>
10001f9c:	90800015 	stw	r2,0(r18)
10001fa0:	103fde1e 	bne	r2,zero,10001f1c <__alt_data_end+0xf8001f1c>
10001fa4:	00800304 	movi	r2,12
10001fa8:	98800015 	stw	r2,0(r19)
10001fac:	0005883a 	mov	r2,zero
10001fb0:	003ff006 	br	10001f74 <__alt_data_end+0xf8001f74>

10001fb4 <_cleanup>:
10001fb4:	00840074 	movhi	r2,4097
10001fb8:	10915d04 	addi	r2,r2,17780
10001fbc:	11000017 	ldw	r4,0(r2)
10001fc0:	01440034 	movhi	r5,4096
10001fc4:	29463004 	addi	r5,r5,6336
10001fc8:	0002f2c1 	jmpi	10002f2c <_fwalk_reent>

10001fcc <__sinit>:
10001fcc:	20800e17 	ldw	r2,56(r4)
10001fd0:	10000126 	beq	r2,zero,10001fd8 <__sinit+0xc>
10001fd4:	f800283a 	ret
10001fd8:	0001c801 	jmpi	10001c80 <__sinit.part.1>

10001fdc <__sfp_lock_acquire>:
10001fdc:	f800283a 	ret

10001fe0 <__sfp_lock_release>:
10001fe0:	f800283a 	ret

10001fe4 <__sinit_lock_acquire>:
10001fe4:	f800283a 	ret

10001fe8 <__sinit_lock_release>:
10001fe8:	f800283a 	ret

10001fec <__fp_lock_all>:
10001fec:	00840074 	movhi	r2,4097
10001ff0:	10915e04 	addi	r2,r2,17784
10001ff4:	11000017 	ldw	r4,0(r2)
10001ff8:	01440034 	movhi	r5,4096
10001ffc:	29478704 	addi	r5,r5,7708
10002000:	0002e681 	jmpi	10002e68 <_fwalk>

10002004 <__fp_unlock_all>:
10002004:	00840074 	movhi	r2,4097
10002008:	10915e04 	addi	r2,r2,17784
1000200c:	11000017 	ldw	r4,0(r2)
10002010:	01440034 	movhi	r5,4096
10002014:	29471b04 	addi	r5,r5,7276
10002018:	0002e681 	jmpi	10002e68 <_fwalk>

1000201c <_fiprintf_r>:
1000201c:	defffe04 	addi	sp,sp,-8
10002020:	dfc00015 	stw	ra,0(sp)
10002024:	d9c00115 	stw	r7,4(sp)
10002028:	d9c00104 	addi	r7,sp,4
1000202c:	00048b40 	call	100048b4 <_vfiprintf_r>
10002030:	dfc00017 	ldw	ra,0(sp)
10002034:	dec00204 	addi	sp,sp,8
10002038:	f800283a 	ret

1000203c <fiprintf>:
1000203c:	defffd04 	addi	sp,sp,-12
10002040:	2005883a 	mov	r2,r4
10002044:	dfc00015 	stw	ra,0(sp)
10002048:	d9800115 	stw	r6,4(sp)
1000204c:	d9c00215 	stw	r7,8(sp)
10002050:	00c40074 	movhi	r3,4097
10002054:	18d15e04 	addi	r3,r3,17784
10002058:	19000017 	ldw	r4,0(r3)
1000205c:	280d883a 	mov	r6,r5
10002060:	d9c00104 	addi	r7,sp,4
10002064:	100b883a 	mov	r5,r2
10002068:	00048b40 	call	100048b4 <_vfiprintf_r>
1000206c:	dfc00017 	ldw	ra,0(sp)
10002070:	dec00304 	addi	sp,sp,12
10002074:	f800283a 	ret

10002078 <_fopen_r>:
10002078:	defffa04 	addi	sp,sp,-24
1000207c:	3005883a 	mov	r2,r6
10002080:	dcc00415 	stw	r19,16(sp)
10002084:	d80d883a 	mov	r6,sp
10002088:	2827883a 	mov	r19,r5
1000208c:	100b883a 	mov	r5,r2
10002090:	dc800315 	stw	r18,12(sp)
10002094:	dfc00515 	stw	ra,20(sp)
10002098:	dc400215 	stw	r17,8(sp)
1000209c:	dc000115 	stw	r16,4(sp)
100020a0:	2025883a 	mov	r18,r4
100020a4:	00088d00 	call	100088d0 <__sflags>
100020a8:	10002726 	beq	r2,zero,10002148 <_fopen_r+0xd0>
100020ac:	9009883a 	mov	r4,r18
100020b0:	1023883a 	mov	r17,r2
100020b4:	0001e9c0 	call	10001e9c <__sfp>
100020b8:	1021883a 	mov	r16,r2
100020bc:	10002226 	beq	r2,zero,10002148 <_fopen_r+0xd0>
100020c0:	d9800017 	ldw	r6,0(sp)
100020c4:	01c06d84 	movi	r7,438
100020c8:	980b883a 	mov	r5,r19
100020cc:	9009883a 	mov	r4,r18
100020d0:	0003d600 	call	10003d60 <_open_r>
100020d4:	10001916 	blt	r2,zero,1000213c <_fopen_r+0xc4>
100020d8:	8080038d 	sth	r2,14(r16)
100020dc:	00840034 	movhi	r2,4096
100020e0:	1091b804 	addi	r2,r2,18144
100020e4:	80800815 	stw	r2,32(r16)
100020e8:	00840034 	movhi	r2,4096
100020ec:	1091cf04 	addi	r2,r2,18236
100020f0:	80800915 	stw	r2,36(r16)
100020f4:	00840034 	movhi	r2,4096
100020f8:	1091ee04 	addi	r2,r2,18360
100020fc:	80800a15 	stw	r2,40(r16)
10002100:	00840034 	movhi	r2,4096
10002104:	10920504 	addi	r2,r2,18452
10002108:	8440030d 	sth	r17,12(r16)
1000210c:	84000715 	stw	r16,28(r16)
10002110:	80800b15 	stw	r2,44(r16)
10002114:	8c40400c 	andi	r17,r17,256
10002118:	88000d1e 	bne	r17,zero,10002150 <_fopen_r+0xd8>
1000211c:	8005883a 	mov	r2,r16
10002120:	dfc00517 	ldw	ra,20(sp)
10002124:	dcc00417 	ldw	r19,16(sp)
10002128:	dc800317 	ldw	r18,12(sp)
1000212c:	dc400217 	ldw	r17,8(sp)
10002130:	dc000117 	ldw	r16,4(sp)
10002134:	dec00604 	addi	sp,sp,24
10002138:	f800283a 	ret
1000213c:	0001fdc0 	call	10001fdc <__sfp_lock_acquire>
10002140:	8000030d 	sth	zero,12(r16)
10002144:	0001fe00 	call	10001fe0 <__sfp_lock_release>
10002148:	0005883a 	mov	r2,zero
1000214c:	003ff406 	br	10002120 <__alt_data_end+0xf8002120>
10002150:	01c00084 	movi	r7,2
10002154:	000d883a 	mov	r6,zero
10002158:	800b883a 	mov	r5,r16
1000215c:	9009883a 	mov	r4,r18
10002160:	00028740 	call	10002874 <_fseek_r>
10002164:	8005883a 	mov	r2,r16
10002168:	003fed06 	br	10002120 <__alt_data_end+0xf8002120>

1000216c <fopen>:
1000216c:	00840074 	movhi	r2,4097
10002170:	10915e04 	addi	r2,r2,17784
10002174:	280d883a 	mov	r6,r5
10002178:	200b883a 	mov	r5,r4
1000217c:	11000017 	ldw	r4,0(r2)
10002180:	00020781 	jmpi	10002078 <_fopen_r>

10002184 <_fprintf_r>:
10002184:	defffe04 	addi	sp,sp,-8
10002188:	2809883a 	mov	r4,r5
1000218c:	300b883a 	mov	r5,r6
10002190:	dfc00015 	stw	ra,0(sp)
10002194:	d9c00115 	stw	r7,4(sp)
10002198:	d9800104 	addi	r6,sp,4
1000219c:	0006ba80 	call	10006ba8 <__vfprintf_internal>
100021a0:	dfc00017 	ldw	ra,0(sp)
100021a4:	dec00204 	addi	sp,sp,8
100021a8:	f800283a 	ret

100021ac <fprintf>:
100021ac:	defffd04 	addi	sp,sp,-12
100021b0:	dfc00015 	stw	ra,0(sp)
100021b4:	d9800115 	stw	r6,4(sp)
100021b8:	d9c00215 	stw	r7,8(sp)
100021bc:	d9800104 	addi	r6,sp,4
100021c0:	0006ba80 	call	10006ba8 <__vfprintf_internal>
100021c4:	dfc00017 	ldw	ra,0(sp)
100021c8:	dec00304 	addi	sp,sp,12
100021cc:	f800283a 	ret

100021d0 <_fread_r>:
100021d0:	defff404 	addi	sp,sp,-48
100021d4:	dd000615 	stw	r20,24(sp)
100021d8:	dcc00515 	stw	r19,20(sp)
100021dc:	2029883a 	mov	r20,r4
100021e0:	2827883a 	mov	r19,r5
100021e4:	3809883a 	mov	r4,r7
100021e8:	300b883a 	mov	r5,r6
100021ec:	ddc00915 	stw	r23,36(sp)
100021f0:	dd400715 	stw	r21,28(sp)
100021f4:	dc000215 	stw	r16,8(sp)
100021f8:	dfc00b15 	stw	ra,44(sp)
100021fc:	df000a15 	stw	fp,40(sp)
10002200:	dd800815 	stw	r22,32(sp)
10002204:	dc800415 	stw	r18,16(sp)
10002208:	dc400315 	stw	r17,12(sp)
1000220c:	302f883a 	mov	r23,r6
10002210:	382b883a 	mov	r21,r7
10002214:	00017e40 	call	100017e4 <__mulsi3>
10002218:	dc000c17 	ldw	r16,48(sp)
1000221c:	10003826 	beq	r2,zero,10002300 <_fread_r+0x130>
10002220:	102d883a 	mov	r22,r2
10002224:	a0000226 	beq	r20,zero,10002230 <_fread_r+0x60>
10002228:	a0800e17 	ldw	r2,56(r20)
1000222c:	10006e26 	beq	r2,zero,100023e8 <_fread_r+0x218>
10002230:	8080030b 	ldhu	r2,12(r16)
10002234:	10c8000c 	andi	r3,r2,8192
10002238:	1800061e 	bne	r3,zero,10002254 <_fread_r+0x84>
1000223c:	81001917 	ldw	r4,100(r16)
10002240:	00f7ffc4 	movi	r3,-8193
10002244:	10880014 	ori	r2,r2,8192
10002248:	20c6703a 	and	r3,r4,r3
1000224c:	8080030d 	sth	r2,12(r16)
10002250:	80c01915 	stw	r3,100(r16)
10002254:	84400117 	ldw	r17,4(r16)
10002258:	88005f16 	blt	r17,zero,100023d8 <_fread_r+0x208>
1000225c:	8809883a 	mov	r4,r17
10002260:	1080008c 	andi	r2,r2,2
10002264:	1000281e 	bne	r2,zero,10002308 <_fread_r+0x138>
10002268:	b025883a 	mov	r18,r22
1000226c:	00000b06 	br	1000229c <_fread_r+0xcc>
10002270:	0003af00 	call	10003af0 <memcpy>
10002274:	80800017 	ldw	r2,0(r16)
10002278:	9c67883a 	add	r19,r19,r17
1000227c:	9465c83a 	sub	r18,r18,r17
10002280:	1463883a 	add	r17,r2,r17
10002284:	800b883a 	mov	r5,r16
10002288:	a009883a 	mov	r4,r20
1000228c:	84400015 	stw	r17,0(r16)
10002290:	00044b80 	call	100044b8 <__srefill_r>
10002294:	10004c1e 	bne	r2,zero,100023c8 <_fread_r+0x1f8>
10002298:	84400117 	ldw	r17,4(r16)
1000229c:	880d883a 	mov	r6,r17
100022a0:	9809883a 	mov	r4,r19
100022a4:	81400017 	ldw	r5,0(r16)
100022a8:	8cbff136 	bltu	r17,r18,10002270 <__alt_data_end+0xf8002270>
100022ac:	900d883a 	mov	r6,r18
100022b0:	0003af00 	call	10003af0 <memcpy>
100022b4:	80c00117 	ldw	r3,4(r16)
100022b8:	81000017 	ldw	r4,0(r16)
100022bc:	a805883a 	mov	r2,r21
100022c0:	1c87c83a 	sub	r3,r3,r18
100022c4:	24a5883a 	add	r18,r4,r18
100022c8:	80c00115 	stw	r3,4(r16)
100022cc:	84800015 	stw	r18,0(r16)
100022d0:	dfc00b17 	ldw	ra,44(sp)
100022d4:	df000a17 	ldw	fp,40(sp)
100022d8:	ddc00917 	ldw	r23,36(sp)
100022dc:	dd800817 	ldw	r22,32(sp)
100022e0:	dd400717 	ldw	r21,28(sp)
100022e4:	dd000617 	ldw	r20,24(sp)
100022e8:	dcc00517 	ldw	r19,20(sp)
100022ec:	dc800417 	ldw	r18,16(sp)
100022f0:	dc400317 	ldw	r17,12(sp)
100022f4:	dc000217 	ldw	r16,8(sp)
100022f8:	dec00c04 	addi	sp,sp,48
100022fc:	f800283a 	ret
10002300:	0005883a 	mov	r2,zero
10002304:	003ff206 	br	100022d0 <__alt_data_end+0xf80022d0>
10002308:	b007883a 	mov	r3,r22
1000230c:	2580012e 	bgeu	r4,r22,10002314 <_fread_r+0x144>
10002310:	2007883a 	mov	r3,r4
10002314:	81400017 	ldw	r5,0(r16)
10002318:	180d883a 	mov	r6,r3
1000231c:	9809883a 	mov	r4,r19
10002320:	d8c00115 	stw	r3,4(sp)
10002324:	0003af00 	call	10003af0 <memcpy>
10002328:	d8c00117 	ldw	r3,4(sp)
1000232c:	84400017 	ldw	r17,0(r16)
10002330:	80800117 	ldw	r2,4(r16)
10002334:	81400c17 	ldw	r5,48(r16)
10002338:	88e3883a 	add	r17,r17,r3
1000233c:	10c5c83a 	sub	r2,r2,r3
10002340:	84400015 	stw	r17,0(r16)
10002344:	80800115 	stw	r2,4(r16)
10002348:	b0e5c83a 	sub	r18,r22,r3
1000234c:	28002c26 	beq	r5,zero,10002400 <_fread_r+0x230>
10002350:	90002c26 	beq	r18,zero,10002404 <_fread_r+0x234>
10002354:	80801004 	addi	r2,r16,64
10002358:	28800526 	beq	r5,r2,10002370 <_fread_r+0x1a0>
1000235c:	a009883a 	mov	r4,r20
10002360:	d8c00115 	stw	r3,4(sp)
10002364:	00025640 	call	10002564 <_free_r>
10002368:	d8c00117 	ldw	r3,4(sp)
1000236c:	84400017 	ldw	r17,0(r16)
10002370:	80000c15 	stw	zero,48(r16)
10002374:	80800517 	ldw	r2,20(r16)
10002378:	87000417 	ldw	fp,16(r16)
1000237c:	98e7883a 	add	r19,r19,r3
10002380:	d8800015 	stw	r2,0(sp)
10002384:	00000106 	br	1000238c <_fread_r+0x1bc>
10002388:	90001e26 	beq	r18,zero,10002404 <_fread_r+0x234>
1000238c:	84c00415 	stw	r19,16(r16)
10002390:	84800515 	stw	r18,20(r16)
10002394:	84c00015 	stw	r19,0(r16)
10002398:	a009883a 	mov	r4,r20
1000239c:	800b883a 	mov	r5,r16
100023a0:	00044b80 	call	100044b8 <__srefill_r>
100023a4:	d9000017 	ldw	r4,0(sp)
100023a8:	80c00117 	ldw	r3,4(r16)
100023ac:	87000415 	stw	fp,16(r16)
100023b0:	81000515 	stw	r4,20(r16)
100023b4:	84400015 	stw	r17,0(r16)
100023b8:	80000115 	stw	zero,4(r16)
100023bc:	90e5c83a 	sub	r18,r18,r3
100023c0:	98e7883a 	add	r19,r19,r3
100023c4:	103ff026 	beq	r2,zero,10002388 <__alt_data_end+0xf8002388>
100023c8:	b80b883a 	mov	r5,r23
100023cc:	b489c83a 	sub	r4,r22,r18
100023d0:	00017280 	call	10001728 <__udivsi3>
100023d4:	003fbe06 	br	100022d0 <__alt_data_end+0xf80022d0>
100023d8:	80000115 	stw	zero,4(r16)
100023dc:	0009883a 	mov	r4,zero
100023e0:	0023883a 	mov	r17,zero
100023e4:	003f9e06 	br	10002260 <__alt_data_end+0xf8002260>
100023e8:	a009883a 	mov	r4,r20
100023ec:	0001fcc0 	call	10001fcc <__sinit>
100023f0:	8080030b 	ldhu	r2,12(r16)
100023f4:	10c8000c 	andi	r3,r2,8192
100023f8:	183f961e 	bne	r3,zero,10002254 <__alt_data_end+0xf8002254>
100023fc:	003f8f06 	br	1000223c <__alt_data_end+0xf800223c>
10002400:	903fdc1e 	bne	r18,zero,10002374 <__alt_data_end+0xf8002374>
10002404:	a805883a 	mov	r2,r21
10002408:	003fb106 	br	100022d0 <__alt_data_end+0xf80022d0>

1000240c <fread>:
1000240c:	defffe04 	addi	sp,sp,-8
10002410:	00840074 	movhi	r2,4097
10002414:	d9c00015 	stw	r7,0(sp)
10002418:	10915e04 	addi	r2,r2,17784
1000241c:	300f883a 	mov	r7,r6
10002420:	280d883a 	mov	r6,r5
10002424:	200b883a 	mov	r5,r4
10002428:	11000017 	ldw	r4,0(r2)
1000242c:	dfc00115 	stw	ra,4(sp)
10002430:	00021d00 	call	100021d0 <_fread_r>
10002434:	dfc00117 	ldw	ra,4(sp)
10002438:	dec00204 	addi	sp,sp,8
1000243c:	f800283a 	ret

10002440 <_malloc_trim_r>:
10002440:	defffb04 	addi	sp,sp,-20
10002444:	dcc00315 	stw	r19,12(sp)
10002448:	04c40074 	movhi	r19,4097
1000244c:	dc800215 	stw	r18,8(sp)
10002450:	dc400115 	stw	r17,4(sp)
10002454:	dc000015 	stw	r16,0(sp)
10002458:	dfc00415 	stw	ra,16(sp)
1000245c:	2821883a 	mov	r16,r5
10002460:	9ccba904 	addi	r19,r19,11940
10002464:	2025883a 	mov	r18,r4
10002468:	00101c40 	call	100101c4 <__malloc_lock>
1000246c:	98800217 	ldw	r2,8(r19)
10002470:	14400117 	ldw	r17,4(r2)
10002474:	00bfff04 	movi	r2,-4
10002478:	88a2703a 	and	r17,r17,r2
1000247c:	8c21c83a 	sub	r16,r17,r16
10002480:	8403fbc4 	addi	r16,r16,4079
10002484:	8020d33a 	srli	r16,r16,12
10002488:	0083ffc4 	movi	r2,4095
1000248c:	843fffc4 	addi	r16,r16,-1
10002490:	8020933a 	slli	r16,r16,12
10002494:	1400060e 	bge	r2,r16,100024b0 <_malloc_trim_r+0x70>
10002498:	000b883a 	mov	r5,zero
1000249c:	9009883a 	mov	r4,r18
100024a0:	000468c0 	call	1000468c <_sbrk_r>
100024a4:	98c00217 	ldw	r3,8(r19)
100024a8:	1c47883a 	add	r3,r3,r17
100024ac:	10c00a26 	beq	r2,r3,100024d8 <_malloc_trim_r+0x98>
100024b0:	9009883a 	mov	r4,r18
100024b4:	00101e80 	call	100101e8 <__malloc_unlock>
100024b8:	0005883a 	mov	r2,zero
100024bc:	dfc00417 	ldw	ra,16(sp)
100024c0:	dcc00317 	ldw	r19,12(sp)
100024c4:	dc800217 	ldw	r18,8(sp)
100024c8:	dc400117 	ldw	r17,4(sp)
100024cc:	dc000017 	ldw	r16,0(sp)
100024d0:	dec00504 	addi	sp,sp,20
100024d4:	f800283a 	ret
100024d8:	040bc83a 	sub	r5,zero,r16
100024dc:	9009883a 	mov	r4,r18
100024e0:	000468c0 	call	1000468c <_sbrk_r>
100024e4:	00ffffc4 	movi	r3,-1
100024e8:	10c00d26 	beq	r2,r3,10002520 <_malloc_trim_r+0xe0>
100024ec:	00c40074 	movhi	r3,4097
100024f0:	18d87f04 	addi	r3,r3,25084
100024f4:	18800017 	ldw	r2,0(r3)
100024f8:	99000217 	ldw	r4,8(r19)
100024fc:	8c23c83a 	sub	r17,r17,r16
10002500:	8c400054 	ori	r17,r17,1
10002504:	1421c83a 	sub	r16,r2,r16
10002508:	24400115 	stw	r17,4(r4)
1000250c:	9009883a 	mov	r4,r18
10002510:	1c000015 	stw	r16,0(r3)
10002514:	00101e80 	call	100101e8 <__malloc_unlock>
10002518:	00800044 	movi	r2,1
1000251c:	003fe706 	br	100024bc <__alt_data_end+0xf80024bc>
10002520:	000b883a 	mov	r5,zero
10002524:	9009883a 	mov	r4,r18
10002528:	000468c0 	call	1000468c <_sbrk_r>
1000252c:	99000217 	ldw	r4,8(r19)
10002530:	014003c4 	movi	r5,15
10002534:	1107c83a 	sub	r3,r2,r4
10002538:	28ffdd0e 	bge	r5,r3,100024b0 <__alt_data_end+0xf80024b0>
1000253c:	01440074 	movhi	r5,4097
10002540:	29515f04 	addi	r5,r5,17788
10002544:	29400017 	ldw	r5,0(r5)
10002548:	18c00054 	ori	r3,r3,1
1000254c:	20c00115 	stw	r3,4(r4)
10002550:	00c40074 	movhi	r3,4097
10002554:	1145c83a 	sub	r2,r2,r5
10002558:	18d87f04 	addi	r3,r3,25084
1000255c:	18800015 	stw	r2,0(r3)
10002560:	003fd306 	br	100024b0 <__alt_data_end+0xf80024b0>

10002564 <_free_r>:
10002564:	28004126 	beq	r5,zero,1000266c <_free_r+0x108>
10002568:	defffd04 	addi	sp,sp,-12
1000256c:	dc400115 	stw	r17,4(sp)
10002570:	dc000015 	stw	r16,0(sp)
10002574:	2023883a 	mov	r17,r4
10002578:	2821883a 	mov	r16,r5
1000257c:	dfc00215 	stw	ra,8(sp)
10002580:	00101c40 	call	100101c4 <__malloc_lock>
10002584:	81ffff17 	ldw	r7,-4(r16)
10002588:	00bfff84 	movi	r2,-2
1000258c:	01040074 	movhi	r4,4097
10002590:	81bffe04 	addi	r6,r16,-8
10002594:	3884703a 	and	r2,r7,r2
10002598:	210ba904 	addi	r4,r4,11940
1000259c:	308b883a 	add	r5,r6,r2
100025a0:	2a400117 	ldw	r9,4(r5)
100025a4:	22000217 	ldw	r8,8(r4)
100025a8:	00ffff04 	movi	r3,-4
100025ac:	48c6703a 	and	r3,r9,r3
100025b0:	2a005726 	beq	r5,r8,10002710 <_free_r+0x1ac>
100025b4:	28c00115 	stw	r3,4(r5)
100025b8:	39c0004c 	andi	r7,r7,1
100025bc:	3800091e 	bne	r7,zero,100025e4 <_free_r+0x80>
100025c0:	823ffe17 	ldw	r8,-8(r16)
100025c4:	22400204 	addi	r9,r4,8
100025c8:	320dc83a 	sub	r6,r6,r8
100025cc:	31c00217 	ldw	r7,8(r6)
100025d0:	1205883a 	add	r2,r2,r8
100025d4:	3a406526 	beq	r7,r9,1000276c <_free_r+0x208>
100025d8:	32000317 	ldw	r8,12(r6)
100025dc:	3a000315 	stw	r8,12(r7)
100025e0:	41c00215 	stw	r7,8(r8)
100025e4:	28cf883a 	add	r7,r5,r3
100025e8:	39c00117 	ldw	r7,4(r7)
100025ec:	39c0004c 	andi	r7,r7,1
100025f0:	38003a26 	beq	r7,zero,100026dc <_free_r+0x178>
100025f4:	10c00054 	ori	r3,r2,1
100025f8:	30c00115 	stw	r3,4(r6)
100025fc:	3087883a 	add	r3,r6,r2
10002600:	18800015 	stw	r2,0(r3)
10002604:	00c07fc4 	movi	r3,511
10002608:	18801936 	bltu	r3,r2,10002670 <_free_r+0x10c>
1000260c:	1004d0fa 	srli	r2,r2,3
10002610:	01c00044 	movi	r7,1
10002614:	21400117 	ldw	r5,4(r4)
10002618:	10c00044 	addi	r3,r2,1
1000261c:	18c7883a 	add	r3,r3,r3
10002620:	1005d0ba 	srai	r2,r2,2
10002624:	18c7883a 	add	r3,r3,r3
10002628:	18c7883a 	add	r3,r3,r3
1000262c:	1907883a 	add	r3,r3,r4
10002630:	3884983a 	sll	r2,r7,r2
10002634:	19c00017 	ldw	r7,0(r3)
10002638:	1a3ffe04 	addi	r8,r3,-8
1000263c:	1144b03a 	or	r2,r2,r5
10002640:	32000315 	stw	r8,12(r6)
10002644:	31c00215 	stw	r7,8(r6)
10002648:	20800115 	stw	r2,4(r4)
1000264c:	19800015 	stw	r6,0(r3)
10002650:	39800315 	stw	r6,12(r7)
10002654:	8809883a 	mov	r4,r17
10002658:	dfc00217 	ldw	ra,8(sp)
1000265c:	dc400117 	ldw	r17,4(sp)
10002660:	dc000017 	ldw	r16,0(sp)
10002664:	dec00304 	addi	sp,sp,12
10002668:	00101e81 	jmpi	100101e8 <__malloc_unlock>
1000266c:	f800283a 	ret
10002670:	100ad27a 	srli	r5,r2,9
10002674:	00c00104 	movi	r3,4
10002678:	19404a36 	bltu	r3,r5,100027a4 <_free_r+0x240>
1000267c:	100ad1ba 	srli	r5,r2,6
10002680:	28c00e44 	addi	r3,r5,57
10002684:	18c7883a 	add	r3,r3,r3
10002688:	29400e04 	addi	r5,r5,56
1000268c:	18c7883a 	add	r3,r3,r3
10002690:	18c7883a 	add	r3,r3,r3
10002694:	1909883a 	add	r4,r3,r4
10002698:	20c00017 	ldw	r3,0(r4)
1000269c:	01c40074 	movhi	r7,4097
100026a0:	213ffe04 	addi	r4,r4,-8
100026a4:	39cba904 	addi	r7,r7,11940
100026a8:	20c04426 	beq	r4,r3,100027bc <_free_r+0x258>
100026ac:	01ffff04 	movi	r7,-4
100026b0:	19400117 	ldw	r5,4(r3)
100026b4:	29ca703a 	and	r5,r5,r7
100026b8:	1140022e 	bgeu	r2,r5,100026c4 <_free_r+0x160>
100026bc:	18c00217 	ldw	r3,8(r3)
100026c0:	20fffb1e 	bne	r4,r3,100026b0 <__alt_data_end+0xf80026b0>
100026c4:	19000317 	ldw	r4,12(r3)
100026c8:	31000315 	stw	r4,12(r6)
100026cc:	30c00215 	stw	r3,8(r6)
100026d0:	21800215 	stw	r6,8(r4)
100026d4:	19800315 	stw	r6,12(r3)
100026d8:	003fde06 	br	10002654 <__alt_data_end+0xf8002654>
100026dc:	29c00217 	ldw	r7,8(r5)
100026e0:	10c5883a 	add	r2,r2,r3
100026e4:	00c40074 	movhi	r3,4097
100026e8:	18cbab04 	addi	r3,r3,11948
100026ec:	38c03b26 	beq	r7,r3,100027dc <_free_r+0x278>
100026f0:	2a000317 	ldw	r8,12(r5)
100026f4:	11400054 	ori	r5,r2,1
100026f8:	3087883a 	add	r3,r6,r2
100026fc:	3a000315 	stw	r8,12(r7)
10002700:	41c00215 	stw	r7,8(r8)
10002704:	31400115 	stw	r5,4(r6)
10002708:	18800015 	stw	r2,0(r3)
1000270c:	003fbd06 	br	10002604 <__alt_data_end+0xf8002604>
10002710:	39c0004c 	andi	r7,r7,1
10002714:	10c5883a 	add	r2,r2,r3
10002718:	3800071e 	bne	r7,zero,10002738 <_free_r+0x1d4>
1000271c:	81fffe17 	ldw	r7,-8(r16)
10002720:	31cdc83a 	sub	r6,r6,r7
10002724:	30c00317 	ldw	r3,12(r6)
10002728:	31400217 	ldw	r5,8(r6)
1000272c:	11c5883a 	add	r2,r2,r7
10002730:	28c00315 	stw	r3,12(r5)
10002734:	19400215 	stw	r5,8(r3)
10002738:	10c00054 	ori	r3,r2,1
1000273c:	30c00115 	stw	r3,4(r6)
10002740:	00c40074 	movhi	r3,4097
10002744:	18d16004 	addi	r3,r3,17792
10002748:	18c00017 	ldw	r3,0(r3)
1000274c:	21800215 	stw	r6,8(r4)
10002750:	10ffc036 	bltu	r2,r3,10002654 <__alt_data_end+0xf8002654>
10002754:	00840074 	movhi	r2,4097
10002758:	10987404 	addi	r2,r2,25040
1000275c:	11400017 	ldw	r5,0(r2)
10002760:	8809883a 	mov	r4,r17
10002764:	00024400 	call	10002440 <_malloc_trim_r>
10002768:	003fba06 	br	10002654 <__alt_data_end+0xf8002654>
1000276c:	28c9883a 	add	r4,r5,r3
10002770:	21000117 	ldw	r4,4(r4)
10002774:	2100004c 	andi	r4,r4,1
10002778:	2000391e 	bne	r4,zero,10002860 <_free_r+0x2fc>
1000277c:	29c00217 	ldw	r7,8(r5)
10002780:	29000317 	ldw	r4,12(r5)
10002784:	1885883a 	add	r2,r3,r2
10002788:	10c00054 	ori	r3,r2,1
1000278c:	39000315 	stw	r4,12(r7)
10002790:	21c00215 	stw	r7,8(r4)
10002794:	30c00115 	stw	r3,4(r6)
10002798:	308d883a 	add	r6,r6,r2
1000279c:	30800015 	stw	r2,0(r6)
100027a0:	003fac06 	br	10002654 <__alt_data_end+0xf8002654>
100027a4:	00c00504 	movi	r3,20
100027a8:	19401536 	bltu	r3,r5,10002800 <_free_r+0x29c>
100027ac:	28c01704 	addi	r3,r5,92
100027b0:	18c7883a 	add	r3,r3,r3
100027b4:	294016c4 	addi	r5,r5,91
100027b8:	003fb406 	br	1000268c <__alt_data_end+0xf800268c>
100027bc:	280bd0ba 	srai	r5,r5,2
100027c0:	00c00044 	movi	r3,1
100027c4:	38800117 	ldw	r2,4(r7)
100027c8:	194a983a 	sll	r5,r3,r5
100027cc:	2007883a 	mov	r3,r4
100027d0:	2884b03a 	or	r2,r5,r2
100027d4:	38800115 	stw	r2,4(r7)
100027d8:	003fbb06 	br	100026c8 <__alt_data_end+0xf80026c8>
100027dc:	21800515 	stw	r6,20(r4)
100027e0:	21800415 	stw	r6,16(r4)
100027e4:	10c00054 	ori	r3,r2,1
100027e8:	31c00315 	stw	r7,12(r6)
100027ec:	31c00215 	stw	r7,8(r6)
100027f0:	30c00115 	stw	r3,4(r6)
100027f4:	308d883a 	add	r6,r6,r2
100027f8:	30800015 	stw	r2,0(r6)
100027fc:	003f9506 	br	10002654 <__alt_data_end+0xf8002654>
10002800:	00c01504 	movi	r3,84
10002804:	19400536 	bltu	r3,r5,1000281c <_free_r+0x2b8>
10002808:	100ad33a 	srli	r5,r2,12
1000280c:	28c01bc4 	addi	r3,r5,111
10002810:	18c7883a 	add	r3,r3,r3
10002814:	29401b84 	addi	r5,r5,110
10002818:	003f9c06 	br	1000268c <__alt_data_end+0xf800268c>
1000281c:	00c05504 	movi	r3,340
10002820:	19400536 	bltu	r3,r5,10002838 <_free_r+0x2d4>
10002824:	100ad3fa 	srli	r5,r2,15
10002828:	28c01e04 	addi	r3,r5,120
1000282c:	18c7883a 	add	r3,r3,r3
10002830:	29401dc4 	addi	r5,r5,119
10002834:	003f9506 	br	1000268c <__alt_data_end+0xf800268c>
10002838:	00c15504 	movi	r3,1364
1000283c:	19400536 	bltu	r3,r5,10002854 <_free_r+0x2f0>
10002840:	100ad4ba 	srli	r5,r2,18
10002844:	28c01f44 	addi	r3,r5,125
10002848:	18c7883a 	add	r3,r3,r3
1000284c:	29401f04 	addi	r5,r5,124
10002850:	003f8e06 	br	1000268c <__alt_data_end+0xf800268c>
10002854:	00c03f84 	movi	r3,254
10002858:	01401f84 	movi	r5,126
1000285c:	003f8b06 	br	1000268c <__alt_data_end+0xf800268c>
10002860:	10c00054 	ori	r3,r2,1
10002864:	30c00115 	stw	r3,4(r6)
10002868:	308d883a 	add	r6,r6,r2
1000286c:	30800015 	stw	r2,0(r6)
10002870:	003f7806 	br	10002654 <__alt_data_end+0xf8002654>

10002874 <_fseek_r>:
10002874:	00028941 	jmpi	10002894 <_fseeko_r>

10002878 <fseek>:
10002878:	00840074 	movhi	r2,4097
1000287c:	10915e04 	addi	r2,r2,17784
10002880:	300f883a 	mov	r7,r6
10002884:	280d883a 	mov	r6,r5
10002888:	200b883a 	mov	r5,r4
1000288c:	11000017 	ldw	r4,0(r2)
10002890:	00028941 	jmpi	10002894 <_fseeko_r>

10002894 <_fseeko_r>:
10002894:	deffe804 	addi	sp,sp,-96
10002898:	dd401415 	stw	r21,80(sp)
1000289c:	dc801115 	stw	r18,68(sp)
100028a0:	dc401015 	stw	r17,64(sp)
100028a4:	dc000f15 	stw	r16,60(sp)
100028a8:	dfc01715 	stw	ra,92(sp)
100028ac:	ddc01615 	stw	r23,88(sp)
100028b0:	dd801515 	stw	r22,84(sp)
100028b4:	dd001315 	stw	r20,76(sp)
100028b8:	dcc01215 	stw	r19,72(sp)
100028bc:	2023883a 	mov	r17,r4
100028c0:	2821883a 	mov	r16,r5
100028c4:	302b883a 	mov	r21,r6
100028c8:	3825883a 	mov	r18,r7
100028cc:	20000226 	beq	r4,zero,100028d8 <_fseeko_r+0x44>
100028d0:	20800e17 	ldw	r2,56(r4)
100028d4:	10005a26 	beq	r2,zero,10002a40 <_fseeko_r+0x1ac>
100028d8:	8080030b 	ldhu	r2,12(r16)
100028dc:	00c04204 	movi	r3,264
100028e0:	1080420c 	andi	r2,r2,264
100028e4:	10c05b26 	beq	r2,r3,10002a54 <_fseeko_r+0x1c0>
100028e8:	85000a17 	ldw	r20,40(r16)
100028ec:	a000f626 	beq	r20,zero,10002cc8 <_fseeko_r+0x434>
100028f0:	00800044 	movi	r2,1
100028f4:	90803e26 	beq	r18,r2,100029f0 <_fseeko_r+0x15c>
100028f8:	00800084 	movi	r2,2
100028fc:	90801026 	beq	r18,r2,10002940 <_fseeko_r+0xac>
10002900:	90000f26 	beq	r18,zero,10002940 <_fseeko_r+0xac>
10002904:	00800584 	movi	r2,22
10002908:	88800015 	stw	r2,0(r17)
1000290c:	04ffffc4 	movi	r19,-1
10002910:	9805883a 	mov	r2,r19
10002914:	dfc01717 	ldw	ra,92(sp)
10002918:	ddc01617 	ldw	r23,88(sp)
1000291c:	dd801517 	ldw	r22,84(sp)
10002920:	dd401417 	ldw	r21,80(sp)
10002924:	dd001317 	ldw	r20,76(sp)
10002928:	dcc01217 	ldw	r19,72(sp)
1000292c:	dc801117 	ldw	r18,68(sp)
10002930:	dc401017 	ldw	r17,64(sp)
10002934:	dc000f17 	ldw	r16,60(sp)
10002938:	dec01804 	addi	sp,sp,96
1000293c:	f800283a 	ret
10002940:	80800417 	ldw	r2,16(r16)
10002944:	002f883a 	mov	r23,zero
10002948:	0027883a 	mov	r19,zero
1000294c:	1000cb26 	beq	r2,zero,10002c7c <_fseeko_r+0x3e8>
10002950:	8080030b 	ldhu	r2,12(r16)
10002954:	10c2068c 	andi	r3,r2,2074
10002958:	1800071e 	bne	r3,zero,10002978 <_fseeko_r+0xe4>
1000295c:	10c1000c 	andi	r3,r2,1024
10002960:	1800451e 	bne	r3,zero,10002a78 <_fseeko_r+0x1e4>
10002964:	00c40034 	movhi	r3,4096
10002968:	18d1ee04 	addi	r3,r3,18360
1000296c:	a0c0b726 	beq	r20,r3,10002c4c <_fseeko_r+0x3b8>
10002970:	10820014 	ori	r2,r2,2048
10002974:	8080030d 	sth	r2,12(r16)
10002978:	800b883a 	mov	r5,r16
1000297c:	8809883a 	mov	r4,r17
10002980:	0001be00 	call	10001be0 <_fflush_r>
10002984:	1027883a 	mov	r19,r2
10002988:	103fe01e 	bne	r2,zero,1000290c <__alt_data_end+0xf800290c>
1000298c:	81400717 	ldw	r5,28(r16)
10002990:	900f883a 	mov	r7,r18
10002994:	a80d883a 	mov	r6,r21
10002998:	8809883a 	mov	r4,r17
1000299c:	a03ee83a 	callr	r20
100029a0:	00ffffc4 	movi	r3,-1
100029a4:	10ffd926 	beq	r2,r3,1000290c <__alt_data_end+0xf800290c>
100029a8:	81400c17 	ldw	r5,48(r16)
100029ac:	28000526 	beq	r5,zero,100029c4 <_fseeko_r+0x130>
100029b0:	80801004 	addi	r2,r16,64
100029b4:	28800226 	beq	r5,r2,100029c0 <_fseeko_r+0x12c>
100029b8:	8809883a 	mov	r4,r17
100029bc:	00025640 	call	10002564 <_free_r>
100029c0:	80000c15 	stw	zero,48(r16)
100029c4:	8080030b 	ldhu	r2,12(r16)
100029c8:	80c00417 	ldw	r3,16(r16)
100029cc:	80000115 	stw	zero,4(r16)
100029d0:	10bdf7cc 	andi	r2,r2,63455
100029d4:	80c00015 	stw	r3,0(r16)
100029d8:	8080030d 	sth	r2,12(r16)
100029dc:	01800204 	movi	r6,8
100029e0:	000b883a 	mov	r5,zero
100029e4:	81001704 	addi	r4,r16,92
100029e8:	0003c380 	call	10003c38 <memset>
100029ec:	003fc806 	br	10002910 <__alt_data_end+0xf8002910>
100029f0:	800b883a 	mov	r5,r16
100029f4:	8809883a 	mov	r4,r17
100029f8:	0001be00 	call	10001be0 <_fflush_r>
100029fc:	8080030b 	ldhu	r2,12(r16)
10002a00:	10c4000c 	andi	r3,r2,4096
10002a04:	18008726 	beq	r3,zero,10002c24 <_fseeko_r+0x390>
10002a08:	84c01417 	ldw	r19,80(r16)
10002a0c:	10c0010c 	andi	r3,r2,4
10002a10:	1800431e 	bne	r3,zero,10002b20 <_fseeko_r+0x28c>
10002a14:	1080020c 	andi	r2,r2,8
10002a18:	10008026 	beq	r2,zero,10002c1c <_fseeko_r+0x388>
10002a1c:	80c00017 	ldw	r3,0(r16)
10002a20:	80800417 	ldw	r2,16(r16)
10002a24:	18000226 	beq	r3,zero,10002a30 <_fseeko_r+0x19c>
10002a28:	1887c83a 	sub	r3,r3,r2
10002a2c:	98e7883a 	add	r19,r19,r3
10002a30:	aceb883a 	add	r21,r21,r19
10002a34:	05c00044 	movi	r23,1
10002a38:	0025883a 	mov	r18,zero
10002a3c:	003fc306 	br	1000294c <__alt_data_end+0xf800294c>
10002a40:	0001fcc0 	call	10001fcc <__sinit>
10002a44:	8080030b 	ldhu	r2,12(r16)
10002a48:	00c04204 	movi	r3,264
10002a4c:	1080420c 	andi	r2,r2,264
10002a50:	10ffa51e 	bne	r2,r3,100028e8 <__alt_data_end+0xf80028e8>
10002a54:	800b883a 	mov	r5,r16
10002a58:	8809883a 	mov	r4,r17
10002a5c:	0001be00 	call	10001be0 <_fflush_r>
10002a60:	003fa106 	br	100028e8 <__alt_data_end+0xf80028e8>
10002a64:	8080030b 	ldhu	r2,12(r16)
10002a68:	00c10004 	movi	r3,1024
10002a6c:	80c01315 	stw	r3,76(r16)
10002a70:	10c4b03a 	or	r2,r2,r3
10002a74:	8080030d 	sth	r2,12(r16)
10002a78:	9000311e 	bne	r18,zero,10002b40 <_fseeko_r+0x2ac>
10002a7c:	a82d883a 	mov	r22,r21
10002a80:	b800371e 	bne	r23,zero,10002b60 <_fseeko_r+0x2cc>
10002a84:	8080030b 	ldhu	r2,12(r16)
10002a88:	1084000c 	andi	r2,r2,4096
10002a8c:	10007f26 	beq	r2,zero,10002c8c <_fseeko_r+0x3f8>
10002a90:	80801417 	ldw	r2,80(r16)
10002a94:	81800117 	ldw	r6,4(r16)
10002a98:	81400c17 	ldw	r5,48(r16)
10002a9c:	11a7c83a 	sub	r19,r2,r6
10002aa0:	28008226 	beq	r5,zero,10002cac <_fseeko_r+0x418>
10002aa4:	81c00f17 	ldw	r7,60(r16)
10002aa8:	99e7c83a 	sub	r19,r19,r7
10002aac:	81000e17 	ldw	r4,56(r16)
10002ab0:	80800417 	ldw	r2,16(r16)
10002ab4:	99a7883a 	add	r19,r19,r6
10002ab8:	2087c83a 	sub	r3,r4,r2
10002abc:	98e7c83a 	sub	r19,r19,r3
10002ac0:	38c7883a 	add	r3,r7,r3
10002ac4:	b4c02b16 	blt	r22,r19,10002b74 <_fseeko_r+0x2e0>
10002ac8:	98c9883a 	add	r4,r19,r3
10002acc:	b100292e 	bgeu	r22,r4,10002b74 <_fseeko_r+0x2e0>
10002ad0:	b4e7c83a 	sub	r19,r22,r19
10002ad4:	14c5883a 	add	r2,r2,r19
10002ad8:	1ce7c83a 	sub	r19,r3,r19
10002adc:	80800015 	stw	r2,0(r16)
10002ae0:	84c00115 	stw	r19,4(r16)
10002ae4:	28000526 	beq	r5,zero,10002afc <_fseeko_r+0x268>
10002ae8:	80801004 	addi	r2,r16,64
10002aec:	28800226 	beq	r5,r2,10002af8 <_fseeko_r+0x264>
10002af0:	8809883a 	mov	r4,r17
10002af4:	00025640 	call	10002564 <_free_r>
10002af8:	80000c15 	stw	zero,48(r16)
10002afc:	8080030b 	ldhu	r2,12(r16)
10002b00:	01800204 	movi	r6,8
10002b04:	000b883a 	mov	r5,zero
10002b08:	10bff7cc 	andi	r2,r2,65503
10002b0c:	8080030d 	sth	r2,12(r16)
10002b10:	81001704 	addi	r4,r16,92
10002b14:	0003c380 	call	10003c38 <memset>
10002b18:	0027883a 	mov	r19,zero
10002b1c:	003f7c06 	br	10002910 <__alt_data_end+0xf8002910>
10002b20:	80c00117 	ldw	r3,4(r16)
10002b24:	80800c17 	ldw	r2,48(r16)
10002b28:	98e7c83a 	sub	r19,r19,r3
10002b2c:	10003b26 	beq	r2,zero,10002c1c <_fseeko_r+0x388>
10002b30:	80c00f17 	ldw	r3,60(r16)
10002b34:	80800417 	ldw	r2,16(r16)
10002b38:	98e7c83a 	sub	r19,r19,r3
10002b3c:	003fbc06 	br	10002a30 <__alt_data_end+0xf8002a30>
10002b40:	8140038f 	ldh	r5,14(r16)
10002b44:	d80d883a 	mov	r6,sp
10002b48:	8809883a 	mov	r4,r17
10002b4c:	0002cf40 	call	10002cf4 <_fstat_r>
10002b50:	103f891e 	bne	r2,zero,10002978 <__alt_data_end+0xf8002978>
10002b54:	dd800417 	ldw	r22,16(sp)
10002b58:	adad883a 	add	r22,r21,r22
10002b5c:	b83fc926 	beq	r23,zero,10002a84 <__alt_data_end+0xf8002a84>
10002b60:	81400c17 	ldw	r5,48(r16)
10002b64:	81800117 	ldw	r6,4(r16)
10002b68:	28005026 	beq	r5,zero,10002cac <_fseeko_r+0x418>
10002b6c:	81c00f17 	ldw	r7,60(r16)
10002b70:	003fce06 	br	10002aac <__alt_data_end+0xf8002aac>
10002b74:	84c01317 	ldw	r19,76(r16)
10002b78:	81400717 	ldw	r5,28(r16)
10002b7c:	000f883a 	mov	r7,zero
10002b80:	04e7c83a 	sub	r19,zero,r19
10002b84:	9da6703a 	and	r19,r19,r22
10002b88:	980d883a 	mov	r6,r19
10002b8c:	8809883a 	mov	r4,r17
10002b90:	a03ee83a 	callr	r20
10002b94:	00ffffc4 	movi	r3,-1
10002b98:	10ff7726 	beq	r2,r3,10002978 <__alt_data_end+0xf8002978>
10002b9c:	80800417 	ldw	r2,16(r16)
10002ba0:	81400c17 	ldw	r5,48(r16)
10002ba4:	80000115 	stw	zero,4(r16)
10002ba8:	80800015 	stw	r2,0(r16)
10002bac:	28000526 	beq	r5,zero,10002bc4 <_fseeko_r+0x330>
10002bb0:	80801004 	addi	r2,r16,64
10002bb4:	28800226 	beq	r5,r2,10002bc0 <_fseeko_r+0x32c>
10002bb8:	8809883a 	mov	r4,r17
10002bbc:	00025640 	call	10002564 <_free_r>
10002bc0:	80000c15 	stw	zero,48(r16)
10002bc4:	8080030b 	ldhu	r2,12(r16)
10002bc8:	b4e7c83a 	sub	r19,r22,r19
10002bcc:	10bff7cc 	andi	r2,r2,65503
10002bd0:	8080030d 	sth	r2,12(r16)
10002bd4:	98000b26 	beq	r19,zero,10002c04 <_fseeko_r+0x370>
10002bd8:	800b883a 	mov	r5,r16
10002bdc:	8809883a 	mov	r4,r17
10002be0:	00044b80 	call	100044b8 <__srefill_r>
10002be4:	103f641e 	bne	r2,zero,10002978 <__alt_data_end+0xf8002978>
10002be8:	80800117 	ldw	r2,4(r16)
10002bec:	14ff6236 	bltu	r2,r19,10002978 <__alt_data_end+0xf8002978>
10002bf0:	80c00017 	ldw	r3,0(r16)
10002bf4:	14c5c83a 	sub	r2,r2,r19
10002bf8:	80800115 	stw	r2,4(r16)
10002bfc:	1ce7883a 	add	r19,r3,r19
10002c00:	84c00015 	stw	r19,0(r16)
10002c04:	01800204 	movi	r6,8
10002c08:	000b883a 	mov	r5,zero
10002c0c:	81001704 	addi	r4,r16,92
10002c10:	0003c380 	call	10003c38 <memset>
10002c14:	0027883a 	mov	r19,zero
10002c18:	003f3d06 	br	10002910 <__alt_data_end+0xf8002910>
10002c1c:	80800417 	ldw	r2,16(r16)
10002c20:	003f8306 	br	10002a30 <__alt_data_end+0xf8002a30>
10002c24:	81400717 	ldw	r5,28(r16)
10002c28:	900f883a 	mov	r7,r18
10002c2c:	000d883a 	mov	r6,zero
10002c30:	8809883a 	mov	r4,r17
10002c34:	a03ee83a 	callr	r20
10002c38:	1027883a 	mov	r19,r2
10002c3c:	00bfffc4 	movi	r2,-1
10002c40:	98bf3226 	beq	r19,r2,1000290c <__alt_data_end+0xf800290c>
10002c44:	8080030b 	ldhu	r2,12(r16)
10002c48:	003f7006 	br	10002a0c <__alt_data_end+0xf8002a0c>
10002c4c:	8140038f 	ldh	r5,14(r16)
10002c50:	283f4716 	blt	r5,zero,10002970 <__alt_data_end+0xf8002970>
10002c54:	d80d883a 	mov	r6,sp
10002c58:	8809883a 	mov	r4,r17
10002c5c:	0002cf40 	call	10002cf4 <_fstat_r>
10002c60:	1000041e 	bne	r2,zero,10002c74 <_fseeko_r+0x3e0>
10002c64:	d8800117 	ldw	r2,4(sp)
10002c68:	00e00014 	movui	r3,32768
10002c6c:	10bc000c 	andi	r2,r2,61440
10002c70:	10ff7c26 	beq	r2,r3,10002a64 <__alt_data_end+0xf8002a64>
10002c74:	8080030b 	ldhu	r2,12(r16)
10002c78:	003f3d06 	br	10002970 <__alt_data_end+0xf8002970>
10002c7c:	800b883a 	mov	r5,r16
10002c80:	8809883a 	mov	r4,r17
10002c84:	00031000 	call	10003100 <__smakebuf_r>
10002c88:	003f3106 	br	10002950 <__alt_data_end+0xf8002950>
10002c8c:	81400717 	ldw	r5,28(r16)
10002c90:	01c00044 	movi	r7,1
10002c94:	000d883a 	mov	r6,zero
10002c98:	8809883a 	mov	r4,r17
10002c9c:	a03ee83a 	callr	r20
10002ca0:	00ffffc4 	movi	r3,-1
10002ca4:	10ff7b1e 	bne	r2,r3,10002a94 <__alt_data_end+0xf8002a94>
10002ca8:	003f3306 	br	10002978 <__alt_data_end+0xf8002978>
10002cac:	80c00017 	ldw	r3,0(r16)
10002cb0:	80800417 	ldw	r2,16(r16)
10002cb4:	000b883a 	mov	r5,zero
10002cb8:	1887c83a 	sub	r3,r3,r2
10002cbc:	98e7c83a 	sub	r19,r19,r3
10002cc0:	30c7883a 	add	r3,r6,r3
10002cc4:	003f7f06 	br	10002ac4 <__alt_data_end+0xf8002ac4>
10002cc8:	00800744 	movi	r2,29
10002ccc:	88800015 	stw	r2,0(r17)
10002cd0:	04ffffc4 	movi	r19,-1
10002cd4:	003f0e06 	br	10002910 <__alt_data_end+0xf8002910>

10002cd8 <fseeko>:
10002cd8:	00840074 	movhi	r2,4097
10002cdc:	10915e04 	addi	r2,r2,17784
10002ce0:	300f883a 	mov	r7,r6
10002ce4:	280d883a 	mov	r6,r5
10002ce8:	200b883a 	mov	r5,r4
10002cec:	11000017 	ldw	r4,0(r2)
10002cf0:	00028941 	jmpi	10002894 <_fseeko_r>

10002cf4 <_fstat_r>:
10002cf4:	defffd04 	addi	sp,sp,-12
10002cf8:	2805883a 	mov	r2,r5
10002cfc:	dc000015 	stw	r16,0(sp)
10002d00:	04040074 	movhi	r16,4097
10002d04:	dc400115 	stw	r17,4(sp)
10002d08:	84187104 	addi	r16,r16,25028
10002d0c:	2023883a 	mov	r17,r4
10002d10:	300b883a 	mov	r5,r6
10002d14:	1009883a 	mov	r4,r2
10002d18:	dfc00215 	stw	ra,8(sp)
10002d1c:	80000015 	stw	zero,0(r16)
10002d20:	000fc180 	call	1000fc18 <fstat>
10002d24:	00ffffc4 	movi	r3,-1
10002d28:	10c00526 	beq	r2,r3,10002d40 <_fstat_r+0x4c>
10002d2c:	dfc00217 	ldw	ra,8(sp)
10002d30:	dc400117 	ldw	r17,4(sp)
10002d34:	dc000017 	ldw	r16,0(sp)
10002d38:	dec00304 	addi	sp,sp,12
10002d3c:	f800283a 	ret
10002d40:	80c00017 	ldw	r3,0(r16)
10002d44:	183ff926 	beq	r3,zero,10002d2c <__alt_data_end+0xf8002d2c>
10002d48:	88c00015 	stw	r3,0(r17)
10002d4c:	003ff706 	br	10002d2c <__alt_data_end+0xf8002d2c>

10002d50 <_ftell_r>:
10002d50:	0002d681 	jmpi	10002d68 <_ftello_r>

10002d54 <ftell>:
10002d54:	00840074 	movhi	r2,4097
10002d58:	10915e04 	addi	r2,r2,17784
10002d5c:	200b883a 	mov	r5,r4
10002d60:	11000017 	ldw	r4,0(r2)
10002d64:	0002d681 	jmpi	10002d68 <_ftello_r>

10002d68 <_ftello_r>:
10002d68:	defffd04 	addi	sp,sp,-12
10002d6c:	dc400115 	stw	r17,4(sp)
10002d70:	dc000015 	stw	r16,0(sp)
10002d74:	dfc00215 	stw	ra,8(sp)
10002d78:	2023883a 	mov	r17,r4
10002d7c:	2821883a 	mov	r16,r5
10002d80:	20000226 	beq	r4,zero,10002d8c <_ftello_r+0x24>
10002d84:	20800e17 	ldw	r2,56(r4)
10002d88:	10002c26 	beq	r2,zero,10002e3c <_ftello_r+0xd4>
10002d8c:	80800a17 	ldw	r2,40(r16)
10002d90:	10002c26 	beq	r2,zero,10002e44 <_ftello_r+0xdc>
10002d94:	80c0030b 	ldhu	r3,12(r16)
10002d98:	1880020c 	andi	r2,r3,8
10002d9c:	1000221e 	bne	r2,zero,10002e28 <_ftello_r+0xc0>
10002da0:	1884000c 	andi	r2,r3,4096
10002da4:	10001626 	beq	r2,zero,10002e00 <_ftello_r+0x98>
10002da8:	80801417 	ldw	r2,80(r16)
10002dac:	1900010c 	andi	r4,r3,4
10002db0:	20000b26 	beq	r4,zero,10002de0 <_ftello_r+0x78>
10002db4:	81000117 	ldw	r4,4(r16)
10002db8:	80c00c17 	ldw	r3,48(r16)
10002dbc:	1105c83a 	sub	r2,r2,r4
10002dc0:	18000226 	beq	r3,zero,10002dcc <_ftello_r+0x64>
10002dc4:	80c00f17 	ldw	r3,60(r16)
10002dc8:	10c5c83a 	sub	r2,r2,r3
10002dcc:	dfc00217 	ldw	ra,8(sp)
10002dd0:	dc400117 	ldw	r17,4(sp)
10002dd4:	dc000017 	ldw	r16,0(sp)
10002dd8:	dec00304 	addi	sp,sp,12
10002ddc:	f800283a 	ret
10002de0:	18c0020c 	andi	r3,r3,8
10002de4:	183ff926 	beq	r3,zero,10002dcc <__alt_data_end+0xf8002dcc>
10002de8:	80c00017 	ldw	r3,0(r16)
10002dec:	183ff726 	beq	r3,zero,10002dcc <__alt_data_end+0xf8002dcc>
10002df0:	81000417 	ldw	r4,16(r16)
10002df4:	1907c83a 	sub	r3,r3,r4
10002df8:	1885883a 	add	r2,r3,r2
10002dfc:	003ff306 	br	10002dcc <__alt_data_end+0xf8002dcc>
10002e00:	80800a17 	ldw	r2,40(r16)
10002e04:	81400717 	ldw	r5,28(r16)
10002e08:	01c00044 	movi	r7,1
10002e0c:	000d883a 	mov	r6,zero
10002e10:	8809883a 	mov	r4,r17
10002e14:	103ee83a 	callr	r2
10002e18:	00ffffc4 	movi	r3,-1
10002e1c:	10ffeb26 	beq	r2,r3,10002dcc <__alt_data_end+0xf8002dcc>
10002e20:	80c0030b 	ldhu	r3,12(r16)
10002e24:	003fe106 	br	10002dac <__alt_data_end+0xf8002dac>
10002e28:	800b883a 	mov	r5,r16
10002e2c:	8809883a 	mov	r4,r17
10002e30:	0001be00 	call	10001be0 <_fflush_r>
10002e34:	80c0030b 	ldhu	r3,12(r16)
10002e38:	003fd906 	br	10002da0 <__alt_data_end+0xf8002da0>
10002e3c:	0001fcc0 	call	10001fcc <__sinit>
10002e40:	003fd206 	br	10002d8c <__alt_data_end+0xf8002d8c>
10002e44:	00800744 	movi	r2,29
10002e48:	88800015 	stw	r2,0(r17)
10002e4c:	00bfffc4 	movi	r2,-1
10002e50:	003fde06 	br	10002dcc <__alt_data_end+0xf8002dcc>

10002e54 <ftello>:
10002e54:	00840074 	movhi	r2,4097
10002e58:	10915e04 	addi	r2,r2,17784
10002e5c:	200b883a 	mov	r5,r4
10002e60:	11000017 	ldw	r4,0(r2)
10002e64:	0002d681 	jmpi	10002d68 <_ftello_r>

10002e68 <_fwalk>:
10002e68:	defff704 	addi	sp,sp,-36
10002e6c:	dd000415 	stw	r20,16(sp)
10002e70:	dfc00815 	stw	ra,32(sp)
10002e74:	ddc00715 	stw	r23,28(sp)
10002e78:	dd800615 	stw	r22,24(sp)
10002e7c:	dd400515 	stw	r21,20(sp)
10002e80:	dcc00315 	stw	r19,12(sp)
10002e84:	dc800215 	stw	r18,8(sp)
10002e88:	dc400115 	stw	r17,4(sp)
10002e8c:	dc000015 	stw	r16,0(sp)
10002e90:	2500b804 	addi	r20,r4,736
10002e94:	a0002326 	beq	r20,zero,10002f24 <_fwalk+0xbc>
10002e98:	282b883a 	mov	r21,r5
10002e9c:	002f883a 	mov	r23,zero
10002ea0:	05800044 	movi	r22,1
10002ea4:	04ffffc4 	movi	r19,-1
10002ea8:	a4400117 	ldw	r17,4(r20)
10002eac:	a4800217 	ldw	r18,8(r20)
10002eb0:	8c7fffc4 	addi	r17,r17,-1
10002eb4:	88000d16 	blt	r17,zero,10002eec <_fwalk+0x84>
10002eb8:	94000304 	addi	r16,r18,12
10002ebc:	94800384 	addi	r18,r18,14
10002ec0:	8080000b 	ldhu	r2,0(r16)
10002ec4:	8c7fffc4 	addi	r17,r17,-1
10002ec8:	813ffd04 	addi	r4,r16,-12
10002ecc:	b080042e 	bgeu	r22,r2,10002ee0 <_fwalk+0x78>
10002ed0:	9080000f 	ldh	r2,0(r18)
10002ed4:	14c00226 	beq	r2,r19,10002ee0 <_fwalk+0x78>
10002ed8:	a83ee83a 	callr	r21
10002edc:	b8aeb03a 	or	r23,r23,r2
10002ee0:	84001a04 	addi	r16,r16,104
10002ee4:	94801a04 	addi	r18,r18,104
10002ee8:	8cfff51e 	bne	r17,r19,10002ec0 <__alt_data_end+0xf8002ec0>
10002eec:	a5000017 	ldw	r20,0(r20)
10002ef0:	a03fed1e 	bne	r20,zero,10002ea8 <__alt_data_end+0xf8002ea8>
10002ef4:	b805883a 	mov	r2,r23
10002ef8:	dfc00817 	ldw	ra,32(sp)
10002efc:	ddc00717 	ldw	r23,28(sp)
10002f00:	dd800617 	ldw	r22,24(sp)
10002f04:	dd400517 	ldw	r21,20(sp)
10002f08:	dd000417 	ldw	r20,16(sp)
10002f0c:	dcc00317 	ldw	r19,12(sp)
10002f10:	dc800217 	ldw	r18,8(sp)
10002f14:	dc400117 	ldw	r17,4(sp)
10002f18:	dc000017 	ldw	r16,0(sp)
10002f1c:	dec00904 	addi	sp,sp,36
10002f20:	f800283a 	ret
10002f24:	002f883a 	mov	r23,zero
10002f28:	003ff206 	br	10002ef4 <__alt_data_end+0xf8002ef4>

10002f2c <_fwalk_reent>:
10002f2c:	defff704 	addi	sp,sp,-36
10002f30:	dd000415 	stw	r20,16(sp)
10002f34:	dfc00815 	stw	ra,32(sp)
10002f38:	ddc00715 	stw	r23,28(sp)
10002f3c:	dd800615 	stw	r22,24(sp)
10002f40:	dd400515 	stw	r21,20(sp)
10002f44:	dcc00315 	stw	r19,12(sp)
10002f48:	dc800215 	stw	r18,8(sp)
10002f4c:	dc400115 	stw	r17,4(sp)
10002f50:	dc000015 	stw	r16,0(sp)
10002f54:	2500b804 	addi	r20,r4,736
10002f58:	a0002326 	beq	r20,zero,10002fe8 <_fwalk_reent+0xbc>
10002f5c:	282b883a 	mov	r21,r5
10002f60:	2027883a 	mov	r19,r4
10002f64:	002f883a 	mov	r23,zero
10002f68:	05800044 	movi	r22,1
10002f6c:	04bfffc4 	movi	r18,-1
10002f70:	a4400117 	ldw	r17,4(r20)
10002f74:	a4000217 	ldw	r16,8(r20)
10002f78:	8c7fffc4 	addi	r17,r17,-1
10002f7c:	88000c16 	blt	r17,zero,10002fb0 <_fwalk_reent+0x84>
10002f80:	84000304 	addi	r16,r16,12
10002f84:	8080000b 	ldhu	r2,0(r16)
10002f88:	8c7fffc4 	addi	r17,r17,-1
10002f8c:	817ffd04 	addi	r5,r16,-12
10002f90:	b080052e 	bgeu	r22,r2,10002fa8 <_fwalk_reent+0x7c>
10002f94:	8080008f 	ldh	r2,2(r16)
10002f98:	9809883a 	mov	r4,r19
10002f9c:	14800226 	beq	r2,r18,10002fa8 <_fwalk_reent+0x7c>
10002fa0:	a83ee83a 	callr	r21
10002fa4:	b8aeb03a 	or	r23,r23,r2
10002fa8:	84001a04 	addi	r16,r16,104
10002fac:	8cbff51e 	bne	r17,r18,10002f84 <__alt_data_end+0xf8002f84>
10002fb0:	a5000017 	ldw	r20,0(r20)
10002fb4:	a03fee1e 	bne	r20,zero,10002f70 <__alt_data_end+0xf8002f70>
10002fb8:	b805883a 	mov	r2,r23
10002fbc:	dfc00817 	ldw	ra,32(sp)
10002fc0:	ddc00717 	ldw	r23,28(sp)
10002fc4:	dd800617 	ldw	r22,24(sp)
10002fc8:	dd400517 	ldw	r21,20(sp)
10002fcc:	dd000417 	ldw	r20,16(sp)
10002fd0:	dcc00317 	ldw	r19,12(sp)
10002fd4:	dc800217 	ldw	r18,8(sp)
10002fd8:	dc400117 	ldw	r17,4(sp)
10002fdc:	dc000017 	ldw	r16,0(sp)
10002fe0:	dec00904 	addi	sp,sp,36
10002fe4:	f800283a 	ret
10002fe8:	002f883a 	mov	r23,zero
10002fec:	003ff206 	br	10002fb8 <__alt_data_end+0xf8002fb8>

10002ff0 <_fwrite_r>:
10002ff0:	defff504 	addi	sp,sp,-44
10002ff4:	dc400715 	stw	r17,28(sp)
10002ff8:	d9400315 	stw	r5,12(sp)
10002ffc:	2023883a 	mov	r17,r4
10003000:	300b883a 	mov	r5,r6
10003004:	3809883a 	mov	r4,r7
10003008:	dcc00915 	stw	r19,36(sp)
1000300c:	dc800815 	stw	r18,32(sp)
10003010:	dc000615 	stw	r16,24(sp)
10003014:	dfc00a15 	stw	ra,40(sp)
10003018:	3027883a 	mov	r19,r6
1000301c:	3821883a 	mov	r16,r7
10003020:	00017e40 	call	100017e4 <__mulsi3>
10003024:	1025883a 	mov	r18,r2
10003028:	d8800415 	stw	r2,16(sp)
1000302c:	d8800215 	stw	r2,8(sp)
10003030:	d8800304 	addi	r2,sp,12
10003034:	d8800015 	stw	r2,0(sp)
10003038:	00800044 	movi	r2,1
1000303c:	d8800115 	stw	r2,4(sp)
10003040:	d9400b17 	ldw	r5,44(sp)
10003044:	88000226 	beq	r17,zero,10003050 <_fwrite_r+0x60>
10003048:	88800e17 	ldw	r2,56(r17)
1000304c:	10001a26 	beq	r2,zero,100030b8 <_fwrite_r+0xc8>
10003050:	2880030b 	ldhu	r2,12(r5)
10003054:	10c8000c 	andi	r3,r2,8192
10003058:	1800061e 	bne	r3,zero,10003074 <_fwrite_r+0x84>
1000305c:	29001917 	ldw	r4,100(r5)
10003060:	00f7ffc4 	movi	r3,-8193
10003064:	10880014 	ori	r2,r2,8192
10003068:	20c6703a 	and	r3,r4,r3
1000306c:	2880030d 	sth	r2,12(r5)
10003070:	28c01915 	stw	r3,100(r5)
10003074:	d80d883a 	mov	r6,sp
10003078:	8809883a 	mov	r4,r17
1000307c:	000897c0 	call	1000897c <__sfvwrite_r>
10003080:	10000b26 	beq	r2,zero,100030b0 <_fwrite_r+0xc0>
10003084:	d9000217 	ldw	r4,8(sp)
10003088:	980b883a 	mov	r5,r19
1000308c:	9109c83a 	sub	r4,r18,r4
10003090:	00017280 	call	10001728 <__udivsi3>
10003094:	dfc00a17 	ldw	ra,40(sp)
10003098:	dcc00917 	ldw	r19,36(sp)
1000309c:	dc800817 	ldw	r18,32(sp)
100030a0:	dc400717 	ldw	r17,28(sp)
100030a4:	dc000617 	ldw	r16,24(sp)
100030a8:	dec00b04 	addi	sp,sp,44
100030ac:	f800283a 	ret
100030b0:	8005883a 	mov	r2,r16
100030b4:	003ff706 	br	10003094 <__alt_data_end+0xf8003094>
100030b8:	8809883a 	mov	r4,r17
100030bc:	d9400515 	stw	r5,20(sp)
100030c0:	0001fcc0 	call	10001fcc <__sinit>
100030c4:	d9400517 	ldw	r5,20(sp)
100030c8:	003fe106 	br	10003050 <__alt_data_end+0xf8003050>

100030cc <fwrite>:
100030cc:	defffe04 	addi	sp,sp,-8
100030d0:	00840074 	movhi	r2,4097
100030d4:	d9c00015 	stw	r7,0(sp)
100030d8:	10915e04 	addi	r2,r2,17784
100030dc:	300f883a 	mov	r7,r6
100030e0:	280d883a 	mov	r6,r5
100030e4:	200b883a 	mov	r5,r4
100030e8:	11000017 	ldw	r4,0(r2)
100030ec:	dfc00115 	stw	ra,4(sp)
100030f0:	0002ff00 	call	10002ff0 <_fwrite_r>
100030f4:	dfc00117 	ldw	ra,4(sp)
100030f8:	dec00204 	addi	sp,sp,8
100030fc:	f800283a 	ret

10003100 <__smakebuf_r>:
10003100:	2880030b 	ldhu	r2,12(r5)
10003104:	10c0008c 	andi	r3,r2,2
10003108:	1800411e 	bne	r3,zero,10003210 <__smakebuf_r+0x110>
1000310c:	deffec04 	addi	sp,sp,-80
10003110:	dc000f15 	stw	r16,60(sp)
10003114:	2821883a 	mov	r16,r5
10003118:	2940038f 	ldh	r5,14(r5)
1000311c:	dc401015 	stw	r17,64(sp)
10003120:	dfc01315 	stw	ra,76(sp)
10003124:	dcc01215 	stw	r19,72(sp)
10003128:	dc801115 	stw	r18,68(sp)
1000312c:	2023883a 	mov	r17,r4
10003130:	28001c16 	blt	r5,zero,100031a4 <__smakebuf_r+0xa4>
10003134:	d80d883a 	mov	r6,sp
10003138:	0002cf40 	call	10002cf4 <_fstat_r>
1000313c:	10001816 	blt	r2,zero,100031a0 <__smakebuf_r+0xa0>
10003140:	d8800117 	ldw	r2,4(sp)
10003144:	00e00014 	movui	r3,32768
10003148:	10bc000c 	andi	r2,r2,61440
1000314c:	14c80020 	cmpeqi	r19,r2,8192
10003150:	10c03726 	beq	r2,r3,10003230 <__smakebuf_r+0x130>
10003154:	80c0030b 	ldhu	r3,12(r16)
10003158:	18c20014 	ori	r3,r3,2048
1000315c:	80c0030d 	sth	r3,12(r16)
10003160:	00c80004 	movi	r3,8192
10003164:	10c0521e 	bne	r2,r3,100032b0 <__smakebuf_r+0x1b0>
10003168:	8140038f 	ldh	r5,14(r16)
1000316c:	8809883a 	mov	r4,r17
10003170:	0008e440 	call	10008e44 <_isatty_r>
10003174:	10004c26 	beq	r2,zero,100032a8 <__smakebuf_r+0x1a8>
10003178:	8080030b 	ldhu	r2,12(r16)
1000317c:	80c010c4 	addi	r3,r16,67
10003180:	80c00015 	stw	r3,0(r16)
10003184:	10800054 	ori	r2,r2,1
10003188:	8080030d 	sth	r2,12(r16)
1000318c:	00800044 	movi	r2,1
10003190:	80c00415 	stw	r3,16(r16)
10003194:	80800515 	stw	r2,20(r16)
10003198:	04810004 	movi	r18,1024
1000319c:	00000706 	br	100031bc <__smakebuf_r+0xbc>
100031a0:	8080030b 	ldhu	r2,12(r16)
100031a4:	10c0200c 	andi	r3,r2,128
100031a8:	18001f1e 	bne	r3,zero,10003228 <__smakebuf_r+0x128>
100031ac:	04810004 	movi	r18,1024
100031b0:	10820014 	ori	r2,r2,2048
100031b4:	8080030d 	sth	r2,12(r16)
100031b8:	0027883a 	mov	r19,zero
100031bc:	900b883a 	mov	r5,r18
100031c0:	8809883a 	mov	r4,r17
100031c4:	00032e40 	call	100032e4 <_malloc_r>
100031c8:	10002c26 	beq	r2,zero,1000327c <__smakebuf_r+0x17c>
100031cc:	80c0030b 	ldhu	r3,12(r16)
100031d0:	01040034 	movhi	r4,4096
100031d4:	21071d04 	addi	r4,r4,7284
100031d8:	89000f15 	stw	r4,60(r17)
100031dc:	18c02014 	ori	r3,r3,128
100031e0:	80c0030d 	sth	r3,12(r16)
100031e4:	80800015 	stw	r2,0(r16)
100031e8:	80800415 	stw	r2,16(r16)
100031ec:	84800515 	stw	r18,20(r16)
100031f0:	98001a1e 	bne	r19,zero,1000325c <__smakebuf_r+0x15c>
100031f4:	dfc01317 	ldw	ra,76(sp)
100031f8:	dcc01217 	ldw	r19,72(sp)
100031fc:	dc801117 	ldw	r18,68(sp)
10003200:	dc401017 	ldw	r17,64(sp)
10003204:	dc000f17 	ldw	r16,60(sp)
10003208:	dec01404 	addi	sp,sp,80
1000320c:	f800283a 	ret
10003210:	288010c4 	addi	r2,r5,67
10003214:	28800015 	stw	r2,0(r5)
10003218:	28800415 	stw	r2,16(r5)
1000321c:	00800044 	movi	r2,1
10003220:	28800515 	stw	r2,20(r5)
10003224:	f800283a 	ret
10003228:	04801004 	movi	r18,64
1000322c:	003fe006 	br	100031b0 <__alt_data_end+0xf80031b0>
10003230:	81000a17 	ldw	r4,40(r16)
10003234:	00c40034 	movhi	r3,4096
10003238:	18d1ee04 	addi	r3,r3,18360
1000323c:	20ffc51e 	bne	r4,r3,10003154 <__alt_data_end+0xf8003154>
10003240:	8080030b 	ldhu	r2,12(r16)
10003244:	04810004 	movi	r18,1024
10003248:	84801315 	stw	r18,76(r16)
1000324c:	1484b03a 	or	r2,r2,r18
10003250:	8080030d 	sth	r2,12(r16)
10003254:	0027883a 	mov	r19,zero
10003258:	003fd806 	br	100031bc <__alt_data_end+0xf80031bc>
1000325c:	8140038f 	ldh	r5,14(r16)
10003260:	8809883a 	mov	r4,r17
10003264:	0008e440 	call	10008e44 <_isatty_r>
10003268:	103fe226 	beq	r2,zero,100031f4 <__alt_data_end+0xf80031f4>
1000326c:	8080030b 	ldhu	r2,12(r16)
10003270:	10800054 	ori	r2,r2,1
10003274:	8080030d 	sth	r2,12(r16)
10003278:	003fde06 	br	100031f4 <__alt_data_end+0xf80031f4>
1000327c:	8080030b 	ldhu	r2,12(r16)
10003280:	10c0800c 	andi	r3,r2,512
10003284:	183fdb1e 	bne	r3,zero,100031f4 <__alt_data_end+0xf80031f4>
10003288:	10800094 	ori	r2,r2,2
1000328c:	80c010c4 	addi	r3,r16,67
10003290:	8080030d 	sth	r2,12(r16)
10003294:	00800044 	movi	r2,1
10003298:	80c00015 	stw	r3,0(r16)
1000329c:	80c00415 	stw	r3,16(r16)
100032a0:	80800515 	stw	r2,20(r16)
100032a4:	003fd306 	br	100031f4 <__alt_data_end+0xf80031f4>
100032a8:	04810004 	movi	r18,1024
100032ac:	003fc306 	br	100031bc <__alt_data_end+0xf80031bc>
100032b0:	0027883a 	mov	r19,zero
100032b4:	04810004 	movi	r18,1024
100032b8:	003fc006 	br	100031bc <__alt_data_end+0xf80031bc>

100032bc <malloc>:
100032bc:	00840074 	movhi	r2,4097
100032c0:	10915e04 	addi	r2,r2,17784
100032c4:	200b883a 	mov	r5,r4
100032c8:	11000017 	ldw	r4,0(r2)
100032cc:	00032e41 	jmpi	100032e4 <_malloc_r>

100032d0 <free>:
100032d0:	00840074 	movhi	r2,4097
100032d4:	10915e04 	addi	r2,r2,17784
100032d8:	200b883a 	mov	r5,r4
100032dc:	11000017 	ldw	r4,0(r2)
100032e0:	00025641 	jmpi	10002564 <_free_r>

100032e4 <_malloc_r>:
100032e4:	defff504 	addi	sp,sp,-44
100032e8:	dc800315 	stw	r18,12(sp)
100032ec:	dfc00a15 	stw	ra,40(sp)
100032f0:	df000915 	stw	fp,36(sp)
100032f4:	ddc00815 	stw	r23,32(sp)
100032f8:	dd800715 	stw	r22,28(sp)
100032fc:	dd400615 	stw	r21,24(sp)
10003300:	dd000515 	stw	r20,20(sp)
10003304:	dcc00415 	stw	r19,16(sp)
10003308:	dc400215 	stw	r17,8(sp)
1000330c:	dc000115 	stw	r16,4(sp)
10003310:	288002c4 	addi	r2,r5,11
10003314:	00c00584 	movi	r3,22
10003318:	2025883a 	mov	r18,r4
1000331c:	18807f2e 	bgeu	r3,r2,1000351c <_malloc_r+0x238>
10003320:	047ffe04 	movi	r17,-8
10003324:	1462703a 	and	r17,r2,r17
10003328:	8800a316 	blt	r17,zero,100035b8 <_malloc_r+0x2d4>
1000332c:	8940a236 	bltu	r17,r5,100035b8 <_malloc_r+0x2d4>
10003330:	00101c40 	call	100101c4 <__malloc_lock>
10003334:	00807dc4 	movi	r2,503
10003338:	1441e92e 	bgeu	r2,r17,10003ae0 <_malloc_r+0x7fc>
1000333c:	8804d27a 	srli	r2,r17,9
10003340:	1000a126 	beq	r2,zero,100035c8 <_malloc_r+0x2e4>
10003344:	00c00104 	movi	r3,4
10003348:	18811e36 	bltu	r3,r2,100037c4 <_malloc_r+0x4e0>
1000334c:	8804d1ba 	srli	r2,r17,6
10003350:	12000e44 	addi	r8,r2,57
10003354:	11c00e04 	addi	r7,r2,56
10003358:	4209883a 	add	r4,r8,r8
1000335c:	04c40074 	movhi	r19,4097
10003360:	2109883a 	add	r4,r4,r4
10003364:	9ccba904 	addi	r19,r19,11940
10003368:	2109883a 	add	r4,r4,r4
1000336c:	9909883a 	add	r4,r19,r4
10003370:	24000117 	ldw	r16,4(r4)
10003374:	213ffe04 	addi	r4,r4,-8
10003378:	24009726 	beq	r4,r16,100035d8 <_malloc_r+0x2f4>
1000337c:	80800117 	ldw	r2,4(r16)
10003380:	01bfff04 	movi	r6,-4
10003384:	014003c4 	movi	r5,15
10003388:	1184703a 	and	r2,r2,r6
1000338c:	1447c83a 	sub	r3,r2,r17
10003390:	28c00716 	blt	r5,r3,100033b0 <_malloc_r+0xcc>
10003394:	1800920e 	bge	r3,zero,100035e0 <_malloc_r+0x2fc>
10003398:	84000317 	ldw	r16,12(r16)
1000339c:	24008e26 	beq	r4,r16,100035d8 <_malloc_r+0x2f4>
100033a0:	80800117 	ldw	r2,4(r16)
100033a4:	1184703a 	and	r2,r2,r6
100033a8:	1447c83a 	sub	r3,r2,r17
100033ac:	28fff90e 	bge	r5,r3,10003394 <__alt_data_end+0xf8003394>
100033b0:	3809883a 	mov	r4,r7
100033b4:	01840074 	movhi	r6,4097
100033b8:	9c000417 	ldw	r16,16(r19)
100033bc:	318ba904 	addi	r6,r6,11940
100033c0:	32000204 	addi	r8,r6,8
100033c4:	82013426 	beq	r16,r8,10003898 <_malloc_r+0x5b4>
100033c8:	80c00117 	ldw	r3,4(r16)
100033cc:	00bfff04 	movi	r2,-4
100033d0:	188e703a 	and	r7,r3,r2
100033d4:	3c45c83a 	sub	r2,r7,r17
100033d8:	00c003c4 	movi	r3,15
100033dc:	18811f16 	blt	r3,r2,1000385c <_malloc_r+0x578>
100033e0:	32000515 	stw	r8,20(r6)
100033e4:	32000415 	stw	r8,16(r6)
100033e8:	10007f0e 	bge	r2,zero,100035e8 <_malloc_r+0x304>
100033ec:	00807fc4 	movi	r2,511
100033f0:	11c0fd36 	bltu	r2,r7,100037e8 <_malloc_r+0x504>
100033f4:	3806d0fa 	srli	r3,r7,3
100033f8:	01c00044 	movi	r7,1
100033fc:	30800117 	ldw	r2,4(r6)
10003400:	19400044 	addi	r5,r3,1
10003404:	294b883a 	add	r5,r5,r5
10003408:	1807d0ba 	srai	r3,r3,2
1000340c:	294b883a 	add	r5,r5,r5
10003410:	294b883a 	add	r5,r5,r5
10003414:	298b883a 	add	r5,r5,r6
10003418:	38c6983a 	sll	r3,r7,r3
1000341c:	29c00017 	ldw	r7,0(r5)
10003420:	2a7ffe04 	addi	r9,r5,-8
10003424:	1886b03a 	or	r3,r3,r2
10003428:	82400315 	stw	r9,12(r16)
1000342c:	81c00215 	stw	r7,8(r16)
10003430:	30c00115 	stw	r3,4(r6)
10003434:	2c000015 	stw	r16,0(r5)
10003438:	3c000315 	stw	r16,12(r7)
1000343c:	2005d0ba 	srai	r2,r4,2
10003440:	01400044 	movi	r5,1
10003444:	288a983a 	sll	r5,r5,r2
10003448:	19406f36 	bltu	r3,r5,10003608 <_malloc_r+0x324>
1000344c:	28c4703a 	and	r2,r5,r3
10003450:	10000a1e 	bne	r2,zero,1000347c <_malloc_r+0x198>
10003454:	00bfff04 	movi	r2,-4
10003458:	294b883a 	add	r5,r5,r5
1000345c:	2088703a 	and	r4,r4,r2
10003460:	28c4703a 	and	r2,r5,r3
10003464:	21000104 	addi	r4,r4,4
10003468:	1000041e 	bne	r2,zero,1000347c <_malloc_r+0x198>
1000346c:	294b883a 	add	r5,r5,r5
10003470:	28c4703a 	and	r2,r5,r3
10003474:	21000104 	addi	r4,r4,4
10003478:	103ffc26 	beq	r2,zero,1000346c <__alt_data_end+0xf800346c>
1000347c:	02bfff04 	movi	r10,-4
10003480:	024003c4 	movi	r9,15
10003484:	21800044 	addi	r6,r4,1
10003488:	318d883a 	add	r6,r6,r6
1000348c:	318d883a 	add	r6,r6,r6
10003490:	318d883a 	add	r6,r6,r6
10003494:	998d883a 	add	r6,r19,r6
10003498:	333ffe04 	addi	r12,r6,-8
1000349c:	2017883a 	mov	r11,r4
100034a0:	31800104 	addi	r6,r6,4
100034a4:	34000017 	ldw	r16,0(r6)
100034a8:	31fffd04 	addi	r7,r6,-12
100034ac:	81c0041e 	bne	r16,r7,100034c0 <_malloc_r+0x1dc>
100034b0:	0000fb06 	br	100038a0 <_malloc_r+0x5bc>
100034b4:	1801030e 	bge	r3,zero,100038c4 <_malloc_r+0x5e0>
100034b8:	84000317 	ldw	r16,12(r16)
100034bc:	81c0f826 	beq	r16,r7,100038a0 <_malloc_r+0x5bc>
100034c0:	80800117 	ldw	r2,4(r16)
100034c4:	1284703a 	and	r2,r2,r10
100034c8:	1447c83a 	sub	r3,r2,r17
100034cc:	48fff90e 	bge	r9,r3,100034b4 <__alt_data_end+0xf80034b4>
100034d0:	80800317 	ldw	r2,12(r16)
100034d4:	81000217 	ldw	r4,8(r16)
100034d8:	89400054 	ori	r5,r17,1
100034dc:	81400115 	stw	r5,4(r16)
100034e0:	20800315 	stw	r2,12(r4)
100034e4:	11000215 	stw	r4,8(r2)
100034e8:	8463883a 	add	r17,r16,r17
100034ec:	9c400515 	stw	r17,20(r19)
100034f0:	9c400415 	stw	r17,16(r19)
100034f4:	18800054 	ori	r2,r3,1
100034f8:	88800115 	stw	r2,4(r17)
100034fc:	8a000315 	stw	r8,12(r17)
10003500:	8a000215 	stw	r8,8(r17)
10003504:	88e3883a 	add	r17,r17,r3
10003508:	88c00015 	stw	r3,0(r17)
1000350c:	9009883a 	mov	r4,r18
10003510:	00101e80 	call	100101e8 <__malloc_unlock>
10003514:	80800204 	addi	r2,r16,8
10003518:	00001b06 	br	10003588 <_malloc_r+0x2a4>
1000351c:	04400404 	movi	r17,16
10003520:	89402536 	bltu	r17,r5,100035b8 <_malloc_r+0x2d4>
10003524:	00101c40 	call	100101c4 <__malloc_lock>
10003528:	00800184 	movi	r2,6
1000352c:	01000084 	movi	r4,2
10003530:	04c40074 	movhi	r19,4097
10003534:	1085883a 	add	r2,r2,r2
10003538:	9ccba904 	addi	r19,r19,11940
1000353c:	1085883a 	add	r2,r2,r2
10003540:	9885883a 	add	r2,r19,r2
10003544:	14000117 	ldw	r16,4(r2)
10003548:	10fffe04 	addi	r3,r2,-8
1000354c:	80c0d926 	beq	r16,r3,100038b4 <_malloc_r+0x5d0>
10003550:	80c00117 	ldw	r3,4(r16)
10003554:	81000317 	ldw	r4,12(r16)
10003558:	00bfff04 	movi	r2,-4
1000355c:	1884703a 	and	r2,r3,r2
10003560:	81400217 	ldw	r5,8(r16)
10003564:	8085883a 	add	r2,r16,r2
10003568:	10c00117 	ldw	r3,4(r2)
1000356c:	29000315 	stw	r4,12(r5)
10003570:	21400215 	stw	r5,8(r4)
10003574:	18c00054 	ori	r3,r3,1
10003578:	10c00115 	stw	r3,4(r2)
1000357c:	9009883a 	mov	r4,r18
10003580:	00101e80 	call	100101e8 <__malloc_unlock>
10003584:	80800204 	addi	r2,r16,8
10003588:	dfc00a17 	ldw	ra,40(sp)
1000358c:	df000917 	ldw	fp,36(sp)
10003590:	ddc00817 	ldw	r23,32(sp)
10003594:	dd800717 	ldw	r22,28(sp)
10003598:	dd400617 	ldw	r21,24(sp)
1000359c:	dd000517 	ldw	r20,20(sp)
100035a0:	dcc00417 	ldw	r19,16(sp)
100035a4:	dc800317 	ldw	r18,12(sp)
100035a8:	dc400217 	ldw	r17,8(sp)
100035ac:	dc000117 	ldw	r16,4(sp)
100035b0:	dec00b04 	addi	sp,sp,44
100035b4:	f800283a 	ret
100035b8:	00800304 	movi	r2,12
100035bc:	90800015 	stw	r2,0(r18)
100035c0:	0005883a 	mov	r2,zero
100035c4:	003ff006 	br	10003588 <__alt_data_end+0xf8003588>
100035c8:	01002004 	movi	r4,128
100035cc:	02001004 	movi	r8,64
100035d0:	01c00fc4 	movi	r7,63
100035d4:	003f6106 	br	1000335c <__alt_data_end+0xf800335c>
100035d8:	4009883a 	mov	r4,r8
100035dc:	003f7506 	br	100033b4 <__alt_data_end+0xf80033b4>
100035e0:	81000317 	ldw	r4,12(r16)
100035e4:	003fde06 	br	10003560 <__alt_data_end+0xf8003560>
100035e8:	81c5883a 	add	r2,r16,r7
100035ec:	11400117 	ldw	r5,4(r2)
100035f0:	9009883a 	mov	r4,r18
100035f4:	29400054 	ori	r5,r5,1
100035f8:	11400115 	stw	r5,4(r2)
100035fc:	00101e80 	call	100101e8 <__malloc_unlock>
10003600:	80800204 	addi	r2,r16,8
10003604:	003fe006 	br	10003588 <__alt_data_end+0xf8003588>
10003608:	9c000217 	ldw	r16,8(r19)
1000360c:	00bfff04 	movi	r2,-4
10003610:	85800117 	ldw	r22,4(r16)
10003614:	b0ac703a 	and	r22,r22,r2
10003618:	b4400336 	bltu	r22,r17,10003628 <_malloc_r+0x344>
1000361c:	b445c83a 	sub	r2,r22,r17
10003620:	00c003c4 	movi	r3,15
10003624:	18805d16 	blt	r3,r2,1000379c <_malloc_r+0x4b8>
10003628:	05c40074 	movhi	r23,4097
1000362c:	00840074 	movhi	r2,4097
10003630:	10987404 	addi	r2,r2,25040
10003634:	bdd15f04 	addi	r23,r23,17788
10003638:	15400017 	ldw	r21,0(r2)
1000363c:	b8c00017 	ldw	r3,0(r23)
10003640:	00bfffc4 	movi	r2,-1
10003644:	858d883a 	add	r6,r16,r22
10003648:	8d6b883a 	add	r21,r17,r21
1000364c:	1880ea26 	beq	r3,r2,100039f8 <_malloc_r+0x714>
10003650:	ad4403c4 	addi	r21,r21,4111
10003654:	00bc0004 	movi	r2,-4096
10003658:	a8aa703a 	and	r21,r21,r2
1000365c:	a80b883a 	mov	r5,r21
10003660:	9009883a 	mov	r4,r18
10003664:	d9800015 	stw	r6,0(sp)
10003668:	000468c0 	call	1000468c <_sbrk_r>
1000366c:	1029883a 	mov	r20,r2
10003670:	00bfffc4 	movi	r2,-1
10003674:	d9800017 	ldw	r6,0(sp)
10003678:	a080e826 	beq	r20,r2,10003a1c <_malloc_r+0x738>
1000367c:	a180a636 	bltu	r20,r6,10003918 <_malloc_r+0x634>
10003680:	07040074 	movhi	fp,4097
10003684:	e7187f04 	addi	fp,fp,25084
10003688:	e0800017 	ldw	r2,0(fp)
1000368c:	a887883a 	add	r3,r21,r2
10003690:	e0c00015 	stw	r3,0(fp)
10003694:	3500e626 	beq	r6,r20,10003a30 <_malloc_r+0x74c>
10003698:	b9000017 	ldw	r4,0(r23)
1000369c:	00bfffc4 	movi	r2,-1
100036a0:	2080ee26 	beq	r4,r2,10003a5c <_malloc_r+0x778>
100036a4:	a185c83a 	sub	r2,r20,r6
100036a8:	10c5883a 	add	r2,r2,r3
100036ac:	e0800015 	stw	r2,0(fp)
100036b0:	a0c001cc 	andi	r3,r20,7
100036b4:	1800bc26 	beq	r3,zero,100039a8 <_malloc_r+0x6c4>
100036b8:	a0e9c83a 	sub	r20,r20,r3
100036bc:	00840204 	movi	r2,4104
100036c0:	a5000204 	addi	r20,r20,8
100036c4:	10c7c83a 	sub	r3,r2,r3
100036c8:	a545883a 	add	r2,r20,r21
100036cc:	1083ffcc 	andi	r2,r2,4095
100036d0:	18abc83a 	sub	r21,r3,r2
100036d4:	a80b883a 	mov	r5,r21
100036d8:	9009883a 	mov	r4,r18
100036dc:	000468c0 	call	1000468c <_sbrk_r>
100036e0:	00ffffc4 	movi	r3,-1
100036e4:	10c0e126 	beq	r2,r3,10003a6c <_malloc_r+0x788>
100036e8:	1505c83a 	sub	r2,r2,r20
100036ec:	1545883a 	add	r2,r2,r21
100036f0:	10800054 	ori	r2,r2,1
100036f4:	e0c00017 	ldw	r3,0(fp)
100036f8:	9d000215 	stw	r20,8(r19)
100036fc:	a0800115 	stw	r2,4(r20)
10003700:	a8c7883a 	add	r3,r21,r3
10003704:	e0c00015 	stw	r3,0(fp)
10003708:	84c00e26 	beq	r16,r19,10003744 <_malloc_r+0x460>
1000370c:	018003c4 	movi	r6,15
10003710:	3580a72e 	bgeu	r6,r22,100039b0 <_malloc_r+0x6cc>
10003714:	81400117 	ldw	r5,4(r16)
10003718:	013ffe04 	movi	r4,-8
1000371c:	b0bffd04 	addi	r2,r22,-12
10003720:	1104703a 	and	r2,r2,r4
10003724:	2900004c 	andi	r4,r5,1
10003728:	2088b03a 	or	r4,r4,r2
1000372c:	81000115 	stw	r4,4(r16)
10003730:	01400144 	movi	r5,5
10003734:	8089883a 	add	r4,r16,r2
10003738:	21400115 	stw	r5,4(r4)
1000373c:	21400215 	stw	r5,8(r4)
10003740:	3080cd36 	bltu	r6,r2,10003a78 <_malloc_r+0x794>
10003744:	00840074 	movhi	r2,4097
10003748:	10987304 	addi	r2,r2,25036
1000374c:	11000017 	ldw	r4,0(r2)
10003750:	20c0012e 	bgeu	r4,r3,10003758 <_malloc_r+0x474>
10003754:	10c00015 	stw	r3,0(r2)
10003758:	00840074 	movhi	r2,4097
1000375c:	10987204 	addi	r2,r2,25032
10003760:	11000017 	ldw	r4,0(r2)
10003764:	9c000217 	ldw	r16,8(r19)
10003768:	20c0012e 	bgeu	r4,r3,10003770 <_malloc_r+0x48c>
1000376c:	10c00015 	stw	r3,0(r2)
10003770:	80c00117 	ldw	r3,4(r16)
10003774:	00bfff04 	movi	r2,-4
10003778:	1886703a 	and	r3,r3,r2
1000377c:	1c45c83a 	sub	r2,r3,r17
10003780:	1c400236 	bltu	r3,r17,1000378c <_malloc_r+0x4a8>
10003784:	00c003c4 	movi	r3,15
10003788:	18800416 	blt	r3,r2,1000379c <_malloc_r+0x4b8>
1000378c:	9009883a 	mov	r4,r18
10003790:	00101e80 	call	100101e8 <__malloc_unlock>
10003794:	0005883a 	mov	r2,zero
10003798:	003f7b06 	br	10003588 <__alt_data_end+0xf8003588>
1000379c:	88c00054 	ori	r3,r17,1
100037a0:	80c00115 	stw	r3,4(r16)
100037a4:	8463883a 	add	r17,r16,r17
100037a8:	10800054 	ori	r2,r2,1
100037ac:	9c400215 	stw	r17,8(r19)
100037b0:	88800115 	stw	r2,4(r17)
100037b4:	9009883a 	mov	r4,r18
100037b8:	00101e80 	call	100101e8 <__malloc_unlock>
100037bc:	80800204 	addi	r2,r16,8
100037c0:	003f7106 	br	10003588 <__alt_data_end+0xf8003588>
100037c4:	00c00504 	movi	r3,20
100037c8:	18804a2e 	bgeu	r3,r2,100038f4 <_malloc_r+0x610>
100037cc:	00c01504 	movi	r3,84
100037d0:	18806e36 	bltu	r3,r2,1000398c <_malloc_r+0x6a8>
100037d4:	8804d33a 	srli	r2,r17,12
100037d8:	12001bc4 	addi	r8,r2,111
100037dc:	11c01b84 	addi	r7,r2,110
100037e0:	4209883a 	add	r4,r8,r8
100037e4:	003edd06 	br	1000335c <__alt_data_end+0xf800335c>
100037e8:	3804d27a 	srli	r2,r7,9
100037ec:	00c00104 	movi	r3,4
100037f0:	1880442e 	bgeu	r3,r2,10003904 <_malloc_r+0x620>
100037f4:	00c00504 	movi	r3,20
100037f8:	18808136 	bltu	r3,r2,10003a00 <_malloc_r+0x71c>
100037fc:	11401704 	addi	r5,r2,92
10003800:	10c016c4 	addi	r3,r2,91
10003804:	294b883a 	add	r5,r5,r5
10003808:	294b883a 	add	r5,r5,r5
1000380c:	294b883a 	add	r5,r5,r5
10003810:	994b883a 	add	r5,r19,r5
10003814:	28800017 	ldw	r2,0(r5)
10003818:	01840074 	movhi	r6,4097
1000381c:	297ffe04 	addi	r5,r5,-8
10003820:	318ba904 	addi	r6,r6,11940
10003824:	28806526 	beq	r5,r2,100039bc <_malloc_r+0x6d8>
10003828:	01bfff04 	movi	r6,-4
1000382c:	10c00117 	ldw	r3,4(r2)
10003830:	1986703a 	and	r3,r3,r6
10003834:	38c0022e 	bgeu	r7,r3,10003840 <_malloc_r+0x55c>
10003838:	10800217 	ldw	r2,8(r2)
1000383c:	28bffb1e 	bne	r5,r2,1000382c <__alt_data_end+0xf800382c>
10003840:	11400317 	ldw	r5,12(r2)
10003844:	98c00117 	ldw	r3,4(r19)
10003848:	81400315 	stw	r5,12(r16)
1000384c:	80800215 	stw	r2,8(r16)
10003850:	2c000215 	stw	r16,8(r5)
10003854:	14000315 	stw	r16,12(r2)
10003858:	003ef806 	br	1000343c <__alt_data_end+0xf800343c>
1000385c:	88c00054 	ori	r3,r17,1
10003860:	80c00115 	stw	r3,4(r16)
10003864:	8463883a 	add	r17,r16,r17
10003868:	34400515 	stw	r17,20(r6)
1000386c:	34400415 	stw	r17,16(r6)
10003870:	10c00054 	ori	r3,r2,1
10003874:	8a000315 	stw	r8,12(r17)
10003878:	8a000215 	stw	r8,8(r17)
1000387c:	88c00115 	stw	r3,4(r17)
10003880:	88a3883a 	add	r17,r17,r2
10003884:	88800015 	stw	r2,0(r17)
10003888:	9009883a 	mov	r4,r18
1000388c:	00101e80 	call	100101e8 <__malloc_unlock>
10003890:	80800204 	addi	r2,r16,8
10003894:	003f3c06 	br	10003588 <__alt_data_end+0xf8003588>
10003898:	30c00117 	ldw	r3,4(r6)
1000389c:	003ee706 	br	1000343c <__alt_data_end+0xf800343c>
100038a0:	5ac00044 	addi	r11,r11,1
100038a4:	588000cc 	andi	r2,r11,3
100038a8:	31800204 	addi	r6,r6,8
100038ac:	103efd1e 	bne	r2,zero,100034a4 <__alt_data_end+0xf80034a4>
100038b0:	00002406 	br	10003944 <_malloc_r+0x660>
100038b4:	14000317 	ldw	r16,12(r2)
100038b8:	143f251e 	bne	r2,r16,10003550 <__alt_data_end+0xf8003550>
100038bc:	21000084 	addi	r4,r4,2
100038c0:	003ebc06 	br	100033b4 <__alt_data_end+0xf80033b4>
100038c4:	8085883a 	add	r2,r16,r2
100038c8:	10c00117 	ldw	r3,4(r2)
100038cc:	81000317 	ldw	r4,12(r16)
100038d0:	81400217 	ldw	r5,8(r16)
100038d4:	18c00054 	ori	r3,r3,1
100038d8:	10c00115 	stw	r3,4(r2)
100038dc:	29000315 	stw	r4,12(r5)
100038e0:	21400215 	stw	r5,8(r4)
100038e4:	9009883a 	mov	r4,r18
100038e8:	00101e80 	call	100101e8 <__malloc_unlock>
100038ec:	80800204 	addi	r2,r16,8
100038f0:	003f2506 	br	10003588 <__alt_data_end+0xf8003588>
100038f4:	12001704 	addi	r8,r2,92
100038f8:	11c016c4 	addi	r7,r2,91
100038fc:	4209883a 	add	r4,r8,r8
10003900:	003e9606 	br	1000335c <__alt_data_end+0xf800335c>
10003904:	3804d1ba 	srli	r2,r7,6
10003908:	11400e44 	addi	r5,r2,57
1000390c:	10c00e04 	addi	r3,r2,56
10003910:	294b883a 	add	r5,r5,r5
10003914:	003fbc06 	br	10003808 <__alt_data_end+0xf8003808>
10003918:	84ff5926 	beq	r16,r19,10003680 <__alt_data_end+0xf8003680>
1000391c:	00840074 	movhi	r2,4097
10003920:	108ba904 	addi	r2,r2,11940
10003924:	14000217 	ldw	r16,8(r2)
10003928:	00bfff04 	movi	r2,-4
1000392c:	80c00117 	ldw	r3,4(r16)
10003930:	1886703a 	and	r3,r3,r2
10003934:	003f9106 	br	1000377c <__alt_data_end+0xf800377c>
10003938:	60800217 	ldw	r2,8(r12)
1000393c:	213fffc4 	addi	r4,r4,-1
10003940:	1300651e 	bne	r2,r12,10003ad8 <_malloc_r+0x7f4>
10003944:	208000cc 	andi	r2,r4,3
10003948:	633ffe04 	addi	r12,r12,-8
1000394c:	103ffa1e 	bne	r2,zero,10003938 <__alt_data_end+0xf8003938>
10003950:	98800117 	ldw	r2,4(r19)
10003954:	0146303a 	nor	r3,zero,r5
10003958:	1884703a 	and	r2,r3,r2
1000395c:	98800115 	stw	r2,4(r19)
10003960:	294b883a 	add	r5,r5,r5
10003964:	117f2836 	bltu	r2,r5,10003608 <__alt_data_end+0xf8003608>
10003968:	283f2726 	beq	r5,zero,10003608 <__alt_data_end+0xf8003608>
1000396c:	2886703a 	and	r3,r5,r2
10003970:	5809883a 	mov	r4,r11
10003974:	183ec31e 	bne	r3,zero,10003484 <__alt_data_end+0xf8003484>
10003978:	294b883a 	add	r5,r5,r5
1000397c:	2886703a 	and	r3,r5,r2
10003980:	21000104 	addi	r4,r4,4
10003984:	183ffc26 	beq	r3,zero,10003978 <__alt_data_end+0xf8003978>
10003988:	003ebe06 	br	10003484 <__alt_data_end+0xf8003484>
1000398c:	00c05504 	movi	r3,340
10003990:	18801236 	bltu	r3,r2,100039dc <_malloc_r+0x6f8>
10003994:	8804d3fa 	srli	r2,r17,15
10003998:	12001e04 	addi	r8,r2,120
1000399c:	11c01dc4 	addi	r7,r2,119
100039a0:	4209883a 	add	r4,r8,r8
100039a4:	003e6d06 	br	1000335c <__alt_data_end+0xf800335c>
100039a8:	00c40004 	movi	r3,4096
100039ac:	003f4606 	br	100036c8 <__alt_data_end+0xf80036c8>
100039b0:	00800044 	movi	r2,1
100039b4:	a0800115 	stw	r2,4(r20)
100039b8:	003f7406 	br	1000378c <__alt_data_end+0xf800378c>
100039bc:	1805d0ba 	srai	r2,r3,2
100039c0:	01c00044 	movi	r7,1
100039c4:	30c00117 	ldw	r3,4(r6)
100039c8:	388e983a 	sll	r7,r7,r2
100039cc:	2805883a 	mov	r2,r5
100039d0:	38c6b03a 	or	r3,r7,r3
100039d4:	30c00115 	stw	r3,4(r6)
100039d8:	003f9b06 	br	10003848 <__alt_data_end+0xf8003848>
100039dc:	00c15504 	movi	r3,1364
100039e0:	18801a36 	bltu	r3,r2,10003a4c <_malloc_r+0x768>
100039e4:	8804d4ba 	srli	r2,r17,18
100039e8:	12001f44 	addi	r8,r2,125
100039ec:	11c01f04 	addi	r7,r2,124
100039f0:	4209883a 	add	r4,r8,r8
100039f4:	003e5906 	br	1000335c <__alt_data_end+0xf800335c>
100039f8:	ad400404 	addi	r21,r21,16
100039fc:	003f1706 	br	1000365c <__alt_data_end+0xf800365c>
10003a00:	00c01504 	movi	r3,84
10003a04:	18802336 	bltu	r3,r2,10003a94 <_malloc_r+0x7b0>
10003a08:	3804d33a 	srli	r2,r7,12
10003a0c:	11401bc4 	addi	r5,r2,111
10003a10:	10c01b84 	addi	r3,r2,110
10003a14:	294b883a 	add	r5,r5,r5
10003a18:	003f7b06 	br	10003808 <__alt_data_end+0xf8003808>
10003a1c:	9c000217 	ldw	r16,8(r19)
10003a20:	00bfff04 	movi	r2,-4
10003a24:	80c00117 	ldw	r3,4(r16)
10003a28:	1886703a 	and	r3,r3,r2
10003a2c:	003f5306 	br	1000377c <__alt_data_end+0xf800377c>
10003a30:	3083ffcc 	andi	r2,r6,4095
10003a34:	103f181e 	bne	r2,zero,10003698 <__alt_data_end+0xf8003698>
10003a38:	99000217 	ldw	r4,8(r19)
10003a3c:	b545883a 	add	r2,r22,r21
10003a40:	10800054 	ori	r2,r2,1
10003a44:	20800115 	stw	r2,4(r4)
10003a48:	003f3e06 	br	10003744 <__alt_data_end+0xf8003744>
10003a4c:	01003f84 	movi	r4,254
10003a50:	02001fc4 	movi	r8,127
10003a54:	01c01f84 	movi	r7,126
10003a58:	003e4006 	br	1000335c <__alt_data_end+0xf800335c>
10003a5c:	00840074 	movhi	r2,4097
10003a60:	10915f04 	addi	r2,r2,17788
10003a64:	15000015 	stw	r20,0(r2)
10003a68:	003f1106 	br	100036b0 <__alt_data_end+0xf80036b0>
10003a6c:	00800044 	movi	r2,1
10003a70:	002b883a 	mov	r21,zero
10003a74:	003f1f06 	br	100036f4 <__alt_data_end+0xf80036f4>
10003a78:	81400204 	addi	r5,r16,8
10003a7c:	9009883a 	mov	r4,r18
10003a80:	00025640 	call	10002564 <_free_r>
10003a84:	00840074 	movhi	r2,4097
10003a88:	10987f04 	addi	r2,r2,25084
10003a8c:	10c00017 	ldw	r3,0(r2)
10003a90:	003f2c06 	br	10003744 <__alt_data_end+0xf8003744>
10003a94:	00c05504 	movi	r3,340
10003a98:	18800536 	bltu	r3,r2,10003ab0 <_malloc_r+0x7cc>
10003a9c:	3804d3fa 	srli	r2,r7,15
10003aa0:	11401e04 	addi	r5,r2,120
10003aa4:	10c01dc4 	addi	r3,r2,119
10003aa8:	294b883a 	add	r5,r5,r5
10003aac:	003f5606 	br	10003808 <__alt_data_end+0xf8003808>
10003ab0:	00c15504 	movi	r3,1364
10003ab4:	18800536 	bltu	r3,r2,10003acc <_malloc_r+0x7e8>
10003ab8:	3804d4ba 	srli	r2,r7,18
10003abc:	11401f44 	addi	r5,r2,125
10003ac0:	10c01f04 	addi	r3,r2,124
10003ac4:	294b883a 	add	r5,r5,r5
10003ac8:	003f4f06 	br	10003808 <__alt_data_end+0xf8003808>
10003acc:	01403f84 	movi	r5,254
10003ad0:	00c01f84 	movi	r3,126
10003ad4:	003f4c06 	br	10003808 <__alt_data_end+0xf8003808>
10003ad8:	98800117 	ldw	r2,4(r19)
10003adc:	003fa006 	br	10003960 <__alt_data_end+0xf8003960>
10003ae0:	8808d0fa 	srli	r4,r17,3
10003ae4:	20800044 	addi	r2,r4,1
10003ae8:	1085883a 	add	r2,r2,r2
10003aec:	003e9006 	br	10003530 <__alt_data_end+0xf8003530>

10003af0 <memcpy>:
10003af0:	defffd04 	addi	sp,sp,-12
10003af4:	dfc00215 	stw	ra,8(sp)
10003af8:	dc400115 	stw	r17,4(sp)
10003afc:	dc000015 	stw	r16,0(sp)
10003b00:	00c003c4 	movi	r3,15
10003b04:	2005883a 	mov	r2,r4
10003b08:	1980452e 	bgeu	r3,r6,10003c20 <memcpy+0x130>
10003b0c:	2906b03a 	or	r3,r5,r4
10003b10:	18c000cc 	andi	r3,r3,3
10003b14:	1800441e 	bne	r3,zero,10003c28 <memcpy+0x138>
10003b18:	347ffc04 	addi	r17,r6,-16
10003b1c:	8822d13a 	srli	r17,r17,4
10003b20:	28c00104 	addi	r3,r5,4
10003b24:	23400104 	addi	r13,r4,4
10003b28:	8820913a 	slli	r16,r17,4
10003b2c:	2b000204 	addi	r12,r5,8
10003b30:	22c00204 	addi	r11,r4,8
10003b34:	84000504 	addi	r16,r16,20
10003b38:	2a800304 	addi	r10,r5,12
10003b3c:	22400304 	addi	r9,r4,12
10003b40:	2c21883a 	add	r16,r5,r16
10003b44:	2811883a 	mov	r8,r5
10003b48:	200f883a 	mov	r7,r4
10003b4c:	41000017 	ldw	r4,0(r8)
10003b50:	1fc00017 	ldw	ra,0(r3)
10003b54:	63c00017 	ldw	r15,0(r12)
10003b58:	39000015 	stw	r4,0(r7)
10003b5c:	53800017 	ldw	r14,0(r10)
10003b60:	6fc00015 	stw	ra,0(r13)
10003b64:	5bc00015 	stw	r15,0(r11)
10003b68:	4b800015 	stw	r14,0(r9)
10003b6c:	18c00404 	addi	r3,r3,16
10003b70:	39c00404 	addi	r7,r7,16
10003b74:	42000404 	addi	r8,r8,16
10003b78:	6b400404 	addi	r13,r13,16
10003b7c:	63000404 	addi	r12,r12,16
10003b80:	5ac00404 	addi	r11,r11,16
10003b84:	52800404 	addi	r10,r10,16
10003b88:	4a400404 	addi	r9,r9,16
10003b8c:	1c3fef1e 	bne	r3,r16,10003b4c <__alt_data_end+0xf8003b4c>
10003b90:	89c00044 	addi	r7,r17,1
10003b94:	380e913a 	slli	r7,r7,4
10003b98:	310003cc 	andi	r4,r6,15
10003b9c:	02c000c4 	movi	r11,3
10003ba0:	11c7883a 	add	r3,r2,r7
10003ba4:	29cb883a 	add	r5,r5,r7
10003ba8:	5900212e 	bgeu	r11,r4,10003c30 <memcpy+0x140>
10003bac:	1813883a 	mov	r9,r3
10003bb0:	2811883a 	mov	r8,r5
10003bb4:	200f883a 	mov	r7,r4
10003bb8:	42800017 	ldw	r10,0(r8)
10003bbc:	4a400104 	addi	r9,r9,4
10003bc0:	39ffff04 	addi	r7,r7,-4
10003bc4:	4abfff15 	stw	r10,-4(r9)
10003bc8:	42000104 	addi	r8,r8,4
10003bcc:	59fffa36 	bltu	r11,r7,10003bb8 <__alt_data_end+0xf8003bb8>
10003bd0:	213fff04 	addi	r4,r4,-4
10003bd4:	2008d0ba 	srli	r4,r4,2
10003bd8:	318000cc 	andi	r6,r6,3
10003bdc:	21000044 	addi	r4,r4,1
10003be0:	2109883a 	add	r4,r4,r4
10003be4:	2109883a 	add	r4,r4,r4
10003be8:	1907883a 	add	r3,r3,r4
10003bec:	290b883a 	add	r5,r5,r4
10003bf0:	30000626 	beq	r6,zero,10003c0c <memcpy+0x11c>
10003bf4:	198d883a 	add	r6,r3,r6
10003bf8:	29c00003 	ldbu	r7,0(r5)
10003bfc:	18c00044 	addi	r3,r3,1
10003c00:	29400044 	addi	r5,r5,1
10003c04:	19ffffc5 	stb	r7,-1(r3)
10003c08:	19bffb1e 	bne	r3,r6,10003bf8 <__alt_data_end+0xf8003bf8>
10003c0c:	dfc00217 	ldw	ra,8(sp)
10003c10:	dc400117 	ldw	r17,4(sp)
10003c14:	dc000017 	ldw	r16,0(sp)
10003c18:	dec00304 	addi	sp,sp,12
10003c1c:	f800283a 	ret
10003c20:	2007883a 	mov	r3,r4
10003c24:	003ff206 	br	10003bf0 <__alt_data_end+0xf8003bf0>
10003c28:	2007883a 	mov	r3,r4
10003c2c:	003ff106 	br	10003bf4 <__alt_data_end+0xf8003bf4>
10003c30:	200d883a 	mov	r6,r4
10003c34:	003fee06 	br	10003bf0 <__alt_data_end+0xf8003bf0>

10003c38 <memset>:
10003c38:	20c000cc 	andi	r3,r4,3
10003c3c:	2005883a 	mov	r2,r4
10003c40:	18004426 	beq	r3,zero,10003d54 <memset+0x11c>
10003c44:	31ffffc4 	addi	r7,r6,-1
10003c48:	30004026 	beq	r6,zero,10003d4c <memset+0x114>
10003c4c:	2813883a 	mov	r9,r5
10003c50:	200d883a 	mov	r6,r4
10003c54:	2007883a 	mov	r3,r4
10003c58:	00000406 	br	10003c6c <memset+0x34>
10003c5c:	3a3fffc4 	addi	r8,r7,-1
10003c60:	31800044 	addi	r6,r6,1
10003c64:	38003926 	beq	r7,zero,10003d4c <memset+0x114>
10003c68:	400f883a 	mov	r7,r8
10003c6c:	18c00044 	addi	r3,r3,1
10003c70:	32400005 	stb	r9,0(r6)
10003c74:	1a0000cc 	andi	r8,r3,3
10003c78:	403ff81e 	bne	r8,zero,10003c5c <__alt_data_end+0xf8003c5c>
10003c7c:	010000c4 	movi	r4,3
10003c80:	21c02d2e 	bgeu	r4,r7,10003d38 <memset+0x100>
10003c84:	29003fcc 	andi	r4,r5,255
10003c88:	200c923a 	slli	r6,r4,8
10003c8c:	3108b03a 	or	r4,r6,r4
10003c90:	200c943a 	slli	r6,r4,16
10003c94:	218cb03a 	or	r6,r4,r6
10003c98:	010003c4 	movi	r4,15
10003c9c:	21c0182e 	bgeu	r4,r7,10003d00 <memset+0xc8>
10003ca0:	3b3ffc04 	addi	r12,r7,-16
10003ca4:	6018d13a 	srli	r12,r12,4
10003ca8:	1a000104 	addi	r8,r3,4
10003cac:	1ac00204 	addi	r11,r3,8
10003cb0:	6008913a 	slli	r4,r12,4
10003cb4:	1a800304 	addi	r10,r3,12
10003cb8:	1813883a 	mov	r9,r3
10003cbc:	21000504 	addi	r4,r4,20
10003cc0:	1909883a 	add	r4,r3,r4
10003cc4:	49800015 	stw	r6,0(r9)
10003cc8:	41800015 	stw	r6,0(r8)
10003ccc:	59800015 	stw	r6,0(r11)
10003cd0:	51800015 	stw	r6,0(r10)
10003cd4:	42000404 	addi	r8,r8,16
10003cd8:	4a400404 	addi	r9,r9,16
10003cdc:	5ac00404 	addi	r11,r11,16
10003ce0:	52800404 	addi	r10,r10,16
10003ce4:	413ff71e 	bne	r8,r4,10003cc4 <__alt_data_end+0xf8003cc4>
10003ce8:	63000044 	addi	r12,r12,1
10003cec:	6018913a 	slli	r12,r12,4
10003cf0:	39c003cc 	andi	r7,r7,15
10003cf4:	010000c4 	movi	r4,3
10003cf8:	1b07883a 	add	r3,r3,r12
10003cfc:	21c00e2e 	bgeu	r4,r7,10003d38 <memset+0x100>
10003d00:	1813883a 	mov	r9,r3
10003d04:	3811883a 	mov	r8,r7
10003d08:	010000c4 	movi	r4,3
10003d0c:	49800015 	stw	r6,0(r9)
10003d10:	423fff04 	addi	r8,r8,-4
10003d14:	4a400104 	addi	r9,r9,4
10003d18:	223ffc36 	bltu	r4,r8,10003d0c <__alt_data_end+0xf8003d0c>
10003d1c:	393fff04 	addi	r4,r7,-4
10003d20:	2008d0ba 	srli	r4,r4,2
10003d24:	39c000cc 	andi	r7,r7,3
10003d28:	21000044 	addi	r4,r4,1
10003d2c:	2109883a 	add	r4,r4,r4
10003d30:	2109883a 	add	r4,r4,r4
10003d34:	1907883a 	add	r3,r3,r4
10003d38:	38000526 	beq	r7,zero,10003d50 <memset+0x118>
10003d3c:	19cf883a 	add	r7,r3,r7
10003d40:	19400005 	stb	r5,0(r3)
10003d44:	18c00044 	addi	r3,r3,1
10003d48:	38fffd1e 	bne	r7,r3,10003d40 <__alt_data_end+0xf8003d40>
10003d4c:	f800283a 	ret
10003d50:	f800283a 	ret
10003d54:	2007883a 	mov	r3,r4
10003d58:	300f883a 	mov	r7,r6
10003d5c:	003fc706 	br	10003c7c <__alt_data_end+0xf8003c7c>

10003d60 <_open_r>:
10003d60:	defffd04 	addi	sp,sp,-12
10003d64:	2805883a 	mov	r2,r5
10003d68:	dc000015 	stw	r16,0(sp)
10003d6c:	04040074 	movhi	r16,4097
10003d70:	dc400115 	stw	r17,4(sp)
10003d74:	300b883a 	mov	r5,r6
10003d78:	84187104 	addi	r16,r16,25028
10003d7c:	2023883a 	mov	r17,r4
10003d80:	380d883a 	mov	r6,r7
10003d84:	1009883a 	mov	r4,r2
10003d88:	dfc00215 	stw	ra,8(sp)
10003d8c:	80000015 	stw	zero,0(r16)
10003d90:	00103340 	call	10010334 <open>
10003d94:	00ffffc4 	movi	r3,-1
10003d98:	10c00526 	beq	r2,r3,10003db0 <_open_r+0x50>
10003d9c:	dfc00217 	ldw	ra,8(sp)
10003da0:	dc400117 	ldw	r17,4(sp)
10003da4:	dc000017 	ldw	r16,0(sp)
10003da8:	dec00304 	addi	sp,sp,12
10003dac:	f800283a 	ret
10003db0:	80c00017 	ldw	r3,0(r16)
10003db4:	183ff926 	beq	r3,zero,10003d9c <__alt_data_end+0xf8003d9c>
10003db8:	88c00015 	stw	r3,0(r17)
10003dbc:	003ff706 	br	10003d9c <__alt_data_end+0xf8003d9c>

10003dc0 <_printf_r>:
10003dc0:	defffd04 	addi	sp,sp,-12
10003dc4:	2805883a 	mov	r2,r5
10003dc8:	dfc00015 	stw	ra,0(sp)
10003dcc:	d9800115 	stw	r6,4(sp)
10003dd0:	d9c00215 	stw	r7,8(sp)
10003dd4:	21400217 	ldw	r5,8(r4)
10003dd8:	d9c00104 	addi	r7,sp,4
10003ddc:	100d883a 	mov	r6,r2
10003de0:	00048cc0 	call	100048cc <___vfprintf_internal_r>
10003de4:	dfc00017 	ldw	ra,0(sp)
10003de8:	dec00304 	addi	sp,sp,12
10003dec:	f800283a 	ret

10003df0 <printf>:
10003df0:	defffc04 	addi	sp,sp,-16
10003df4:	dfc00015 	stw	ra,0(sp)
10003df8:	d9400115 	stw	r5,4(sp)
10003dfc:	d9800215 	stw	r6,8(sp)
10003e00:	d9c00315 	stw	r7,12(sp)
10003e04:	00840074 	movhi	r2,4097
10003e08:	10915e04 	addi	r2,r2,17784
10003e0c:	10800017 	ldw	r2,0(r2)
10003e10:	200b883a 	mov	r5,r4
10003e14:	d9800104 	addi	r6,sp,4
10003e18:	11000217 	ldw	r4,8(r2)
10003e1c:	0006ba80 	call	10006ba8 <__vfprintf_internal>
10003e20:	dfc00017 	ldw	ra,0(sp)
10003e24:	dec00404 	addi	sp,sp,16
10003e28:	f800283a 	ret

10003e2c <_putchar_r>:
10003e2c:	21800217 	ldw	r6,8(r4)
10003e30:	000a2cc1 	jmpi	1000a2cc <_putc_r>

10003e34 <putchar>:
10003e34:	00840074 	movhi	r2,4097
10003e38:	10915e04 	addi	r2,r2,17784
10003e3c:	200b883a 	mov	r5,r4
10003e40:	11000017 	ldw	r4,0(r2)
10003e44:	21800217 	ldw	r6,8(r4)
10003e48:	000a2cc1 	jmpi	1000a2cc <_putc_r>

10003e4c <_puts_r>:
10003e4c:	defff604 	addi	sp,sp,-40
10003e50:	dc000715 	stw	r16,28(sp)
10003e54:	2021883a 	mov	r16,r4
10003e58:	2809883a 	mov	r4,r5
10003e5c:	dc400815 	stw	r17,32(sp)
10003e60:	dfc00915 	stw	ra,36(sp)
10003e64:	2823883a 	mov	r17,r5
10003e68:	000481c0 	call	1000481c <strlen>
10003e6c:	10c00044 	addi	r3,r2,1
10003e70:	d8800115 	stw	r2,4(sp)
10003e74:	00840074 	movhi	r2,4097
10003e78:	1089cc04 	addi	r2,r2,10032
10003e7c:	d8800215 	stw	r2,8(sp)
10003e80:	00800044 	movi	r2,1
10003e84:	d8800315 	stw	r2,12(sp)
10003e88:	00800084 	movi	r2,2
10003e8c:	dc400015 	stw	r17,0(sp)
10003e90:	d8c00615 	stw	r3,24(sp)
10003e94:	dec00415 	stw	sp,16(sp)
10003e98:	d8800515 	stw	r2,20(sp)
10003e9c:	80000226 	beq	r16,zero,10003ea8 <_puts_r+0x5c>
10003ea0:	80800e17 	ldw	r2,56(r16)
10003ea4:	10001426 	beq	r2,zero,10003ef8 <_puts_r+0xac>
10003ea8:	81400217 	ldw	r5,8(r16)
10003eac:	2880030b 	ldhu	r2,12(r5)
10003eb0:	10c8000c 	andi	r3,r2,8192
10003eb4:	1800061e 	bne	r3,zero,10003ed0 <_puts_r+0x84>
10003eb8:	29001917 	ldw	r4,100(r5)
10003ebc:	00f7ffc4 	movi	r3,-8193
10003ec0:	10880014 	ori	r2,r2,8192
10003ec4:	20c6703a 	and	r3,r4,r3
10003ec8:	2880030d 	sth	r2,12(r5)
10003ecc:	28c01915 	stw	r3,100(r5)
10003ed0:	d9800404 	addi	r6,sp,16
10003ed4:	8009883a 	mov	r4,r16
10003ed8:	000897c0 	call	1000897c <__sfvwrite_r>
10003edc:	1000091e 	bne	r2,zero,10003f04 <_puts_r+0xb8>
10003ee0:	00800284 	movi	r2,10
10003ee4:	dfc00917 	ldw	ra,36(sp)
10003ee8:	dc400817 	ldw	r17,32(sp)
10003eec:	dc000717 	ldw	r16,28(sp)
10003ef0:	dec00a04 	addi	sp,sp,40
10003ef4:	f800283a 	ret
10003ef8:	8009883a 	mov	r4,r16
10003efc:	0001fcc0 	call	10001fcc <__sinit>
10003f00:	003fe906 	br	10003ea8 <__alt_data_end+0xf8003ea8>
10003f04:	00bfffc4 	movi	r2,-1
10003f08:	003ff606 	br	10003ee4 <__alt_data_end+0xf8003ee4>

10003f0c <puts>:
10003f0c:	00840074 	movhi	r2,4097
10003f10:	10915e04 	addi	r2,r2,17784
10003f14:	200b883a 	mov	r5,r4
10003f18:	11000017 	ldw	r4,0(r2)
10003f1c:	0003e4c1 	jmpi	10003e4c <_puts_r>

10003f20 <realloc>:
10003f20:	00840074 	movhi	r2,4097
10003f24:	10915e04 	addi	r2,r2,17784
10003f28:	280d883a 	mov	r6,r5
10003f2c:	200b883a 	mov	r5,r4
10003f30:	11000017 	ldw	r4,0(r2)
10003f34:	0003f381 	jmpi	10003f38 <_realloc_r>

10003f38 <_realloc_r>:
10003f38:	defff604 	addi	sp,sp,-40
10003f3c:	dc800215 	stw	r18,8(sp)
10003f40:	dfc00915 	stw	ra,36(sp)
10003f44:	df000815 	stw	fp,32(sp)
10003f48:	ddc00715 	stw	r23,28(sp)
10003f4c:	dd800615 	stw	r22,24(sp)
10003f50:	dd400515 	stw	r21,20(sp)
10003f54:	dd000415 	stw	r20,16(sp)
10003f58:	dcc00315 	stw	r19,12(sp)
10003f5c:	dc400115 	stw	r17,4(sp)
10003f60:	dc000015 	stw	r16,0(sp)
10003f64:	3025883a 	mov	r18,r6
10003f68:	2800b726 	beq	r5,zero,10004248 <_realloc_r+0x310>
10003f6c:	282b883a 	mov	r21,r5
10003f70:	2029883a 	mov	r20,r4
10003f74:	00101c40 	call	100101c4 <__malloc_lock>
10003f78:	a8bfff17 	ldw	r2,-4(r21)
10003f7c:	043fff04 	movi	r16,-4
10003f80:	90c002c4 	addi	r3,r18,11
10003f84:	01000584 	movi	r4,22
10003f88:	acfffe04 	addi	r19,r21,-8
10003f8c:	1420703a 	and	r16,r2,r16
10003f90:	20c0332e 	bgeu	r4,r3,10004060 <_realloc_r+0x128>
10003f94:	047ffe04 	movi	r17,-8
10003f98:	1c62703a 	and	r17,r3,r17
10003f9c:	8807883a 	mov	r3,r17
10003fa0:	88005816 	blt	r17,zero,10004104 <_realloc_r+0x1cc>
10003fa4:	8c805736 	bltu	r17,r18,10004104 <_realloc_r+0x1cc>
10003fa8:	80c0300e 	bge	r16,r3,1000406c <_realloc_r+0x134>
10003fac:	07040074 	movhi	fp,4097
10003fb0:	e70ba904 	addi	fp,fp,11940
10003fb4:	e1c00217 	ldw	r7,8(fp)
10003fb8:	9c09883a 	add	r4,r19,r16
10003fbc:	22000117 	ldw	r8,4(r4)
10003fc0:	21c06326 	beq	r4,r7,10004150 <_realloc_r+0x218>
10003fc4:	017fff84 	movi	r5,-2
10003fc8:	414a703a 	and	r5,r8,r5
10003fcc:	214b883a 	add	r5,r4,r5
10003fd0:	29800117 	ldw	r6,4(r5)
10003fd4:	3180004c 	andi	r6,r6,1
10003fd8:	30003f26 	beq	r6,zero,100040d8 <_realloc_r+0x1a0>
10003fdc:	1080004c 	andi	r2,r2,1
10003fe0:	10008326 	beq	r2,zero,100041f0 <_realloc_r+0x2b8>
10003fe4:	900b883a 	mov	r5,r18
10003fe8:	a009883a 	mov	r4,r20
10003fec:	00032e40 	call	100032e4 <_malloc_r>
10003ff0:	1025883a 	mov	r18,r2
10003ff4:	10011e26 	beq	r2,zero,10004470 <_realloc_r+0x538>
10003ff8:	a93fff17 	ldw	r4,-4(r21)
10003ffc:	10fffe04 	addi	r3,r2,-8
10004000:	00bfff84 	movi	r2,-2
10004004:	2084703a 	and	r2,r4,r2
10004008:	9885883a 	add	r2,r19,r2
1000400c:	1880ee26 	beq	r3,r2,100043c8 <_realloc_r+0x490>
10004010:	81bfff04 	addi	r6,r16,-4
10004014:	00800904 	movi	r2,36
10004018:	1180b836 	bltu	r2,r6,100042fc <_realloc_r+0x3c4>
1000401c:	00c004c4 	movi	r3,19
10004020:	19809636 	bltu	r3,r6,1000427c <_realloc_r+0x344>
10004024:	9005883a 	mov	r2,r18
10004028:	a807883a 	mov	r3,r21
1000402c:	19000017 	ldw	r4,0(r3)
10004030:	11000015 	stw	r4,0(r2)
10004034:	19000117 	ldw	r4,4(r3)
10004038:	11000115 	stw	r4,4(r2)
1000403c:	18c00217 	ldw	r3,8(r3)
10004040:	10c00215 	stw	r3,8(r2)
10004044:	a80b883a 	mov	r5,r21
10004048:	a009883a 	mov	r4,r20
1000404c:	00025640 	call	10002564 <_free_r>
10004050:	a009883a 	mov	r4,r20
10004054:	00101e80 	call	100101e8 <__malloc_unlock>
10004058:	9005883a 	mov	r2,r18
1000405c:	00001206 	br	100040a8 <_realloc_r+0x170>
10004060:	00c00404 	movi	r3,16
10004064:	1823883a 	mov	r17,r3
10004068:	003fce06 	br	10003fa4 <__alt_data_end+0xf8003fa4>
1000406c:	a825883a 	mov	r18,r21
10004070:	8445c83a 	sub	r2,r16,r17
10004074:	00c003c4 	movi	r3,15
10004078:	18802636 	bltu	r3,r2,10004114 <_realloc_r+0x1dc>
1000407c:	99800117 	ldw	r6,4(r19)
10004080:	9c07883a 	add	r3,r19,r16
10004084:	3180004c 	andi	r6,r6,1
10004088:	3420b03a 	or	r16,r6,r16
1000408c:	9c000115 	stw	r16,4(r19)
10004090:	18800117 	ldw	r2,4(r3)
10004094:	10800054 	ori	r2,r2,1
10004098:	18800115 	stw	r2,4(r3)
1000409c:	a009883a 	mov	r4,r20
100040a0:	00101e80 	call	100101e8 <__malloc_unlock>
100040a4:	9005883a 	mov	r2,r18
100040a8:	dfc00917 	ldw	ra,36(sp)
100040ac:	df000817 	ldw	fp,32(sp)
100040b0:	ddc00717 	ldw	r23,28(sp)
100040b4:	dd800617 	ldw	r22,24(sp)
100040b8:	dd400517 	ldw	r21,20(sp)
100040bc:	dd000417 	ldw	r20,16(sp)
100040c0:	dcc00317 	ldw	r19,12(sp)
100040c4:	dc800217 	ldw	r18,8(sp)
100040c8:	dc400117 	ldw	r17,4(sp)
100040cc:	dc000017 	ldw	r16,0(sp)
100040d0:	dec00a04 	addi	sp,sp,40
100040d4:	f800283a 	ret
100040d8:	017fff04 	movi	r5,-4
100040dc:	414a703a 	and	r5,r8,r5
100040e0:	814d883a 	add	r6,r16,r5
100040e4:	30c01f16 	blt	r6,r3,10004164 <_realloc_r+0x22c>
100040e8:	20800317 	ldw	r2,12(r4)
100040ec:	20c00217 	ldw	r3,8(r4)
100040f0:	a825883a 	mov	r18,r21
100040f4:	3021883a 	mov	r16,r6
100040f8:	18800315 	stw	r2,12(r3)
100040fc:	10c00215 	stw	r3,8(r2)
10004100:	003fdb06 	br	10004070 <__alt_data_end+0xf8004070>
10004104:	00800304 	movi	r2,12
10004108:	a0800015 	stw	r2,0(r20)
1000410c:	0005883a 	mov	r2,zero
10004110:	003fe506 	br	100040a8 <__alt_data_end+0xf80040a8>
10004114:	98c00117 	ldw	r3,4(r19)
10004118:	9c4b883a 	add	r5,r19,r17
1000411c:	11000054 	ori	r4,r2,1
10004120:	18c0004c 	andi	r3,r3,1
10004124:	1c62b03a 	or	r17,r3,r17
10004128:	9c400115 	stw	r17,4(r19)
1000412c:	29000115 	stw	r4,4(r5)
10004130:	2885883a 	add	r2,r5,r2
10004134:	10c00117 	ldw	r3,4(r2)
10004138:	29400204 	addi	r5,r5,8
1000413c:	a009883a 	mov	r4,r20
10004140:	18c00054 	ori	r3,r3,1
10004144:	10c00115 	stw	r3,4(r2)
10004148:	00025640 	call	10002564 <_free_r>
1000414c:	003fd306 	br	1000409c <__alt_data_end+0xf800409c>
10004150:	017fff04 	movi	r5,-4
10004154:	414a703a 	and	r5,r8,r5
10004158:	89800404 	addi	r6,r17,16
1000415c:	8151883a 	add	r8,r16,r5
10004160:	4180590e 	bge	r8,r6,100042c8 <_realloc_r+0x390>
10004164:	1080004c 	andi	r2,r2,1
10004168:	103f9e1e 	bne	r2,zero,10003fe4 <__alt_data_end+0xf8003fe4>
1000416c:	adbffe17 	ldw	r22,-8(r21)
10004170:	00bfff04 	movi	r2,-4
10004174:	9dadc83a 	sub	r22,r19,r22
10004178:	b1800117 	ldw	r6,4(r22)
1000417c:	3084703a 	and	r2,r6,r2
10004180:	20002026 	beq	r4,zero,10004204 <_realloc_r+0x2cc>
10004184:	80af883a 	add	r23,r16,r2
10004188:	b96f883a 	add	r23,r23,r5
1000418c:	21c05f26 	beq	r4,r7,1000430c <_realloc_r+0x3d4>
10004190:	b8c01c16 	blt	r23,r3,10004204 <_realloc_r+0x2cc>
10004194:	20800317 	ldw	r2,12(r4)
10004198:	20c00217 	ldw	r3,8(r4)
1000419c:	81bfff04 	addi	r6,r16,-4
100041a0:	01000904 	movi	r4,36
100041a4:	18800315 	stw	r2,12(r3)
100041a8:	10c00215 	stw	r3,8(r2)
100041ac:	b0c00217 	ldw	r3,8(r22)
100041b0:	b0800317 	ldw	r2,12(r22)
100041b4:	b4800204 	addi	r18,r22,8
100041b8:	18800315 	stw	r2,12(r3)
100041bc:	10c00215 	stw	r3,8(r2)
100041c0:	21801b36 	bltu	r4,r6,10004230 <_realloc_r+0x2f8>
100041c4:	008004c4 	movi	r2,19
100041c8:	1180352e 	bgeu	r2,r6,100042a0 <_realloc_r+0x368>
100041cc:	a8800017 	ldw	r2,0(r21)
100041d0:	b0800215 	stw	r2,8(r22)
100041d4:	a8800117 	ldw	r2,4(r21)
100041d8:	b0800315 	stw	r2,12(r22)
100041dc:	008006c4 	movi	r2,27
100041e0:	11807f36 	bltu	r2,r6,100043e0 <_realloc_r+0x4a8>
100041e4:	b0800404 	addi	r2,r22,16
100041e8:	ad400204 	addi	r21,r21,8
100041ec:	00002d06 	br	100042a4 <_realloc_r+0x36c>
100041f0:	adbffe17 	ldw	r22,-8(r21)
100041f4:	00bfff04 	movi	r2,-4
100041f8:	9dadc83a 	sub	r22,r19,r22
100041fc:	b1000117 	ldw	r4,4(r22)
10004200:	2084703a 	and	r2,r4,r2
10004204:	b03f7726 	beq	r22,zero,10003fe4 <__alt_data_end+0xf8003fe4>
10004208:	80af883a 	add	r23,r16,r2
1000420c:	b8ff7516 	blt	r23,r3,10003fe4 <__alt_data_end+0xf8003fe4>
10004210:	b0800317 	ldw	r2,12(r22)
10004214:	b0c00217 	ldw	r3,8(r22)
10004218:	81bfff04 	addi	r6,r16,-4
1000421c:	01000904 	movi	r4,36
10004220:	18800315 	stw	r2,12(r3)
10004224:	10c00215 	stw	r3,8(r2)
10004228:	b4800204 	addi	r18,r22,8
1000422c:	21bfe52e 	bgeu	r4,r6,100041c4 <__alt_data_end+0xf80041c4>
10004230:	a80b883a 	mov	r5,r21
10004234:	9009883a 	mov	r4,r18
10004238:	00090b80 	call	100090b8 <memmove>
1000423c:	b821883a 	mov	r16,r23
10004240:	b027883a 	mov	r19,r22
10004244:	003f8a06 	br	10004070 <__alt_data_end+0xf8004070>
10004248:	300b883a 	mov	r5,r6
1000424c:	dfc00917 	ldw	ra,36(sp)
10004250:	df000817 	ldw	fp,32(sp)
10004254:	ddc00717 	ldw	r23,28(sp)
10004258:	dd800617 	ldw	r22,24(sp)
1000425c:	dd400517 	ldw	r21,20(sp)
10004260:	dd000417 	ldw	r20,16(sp)
10004264:	dcc00317 	ldw	r19,12(sp)
10004268:	dc800217 	ldw	r18,8(sp)
1000426c:	dc400117 	ldw	r17,4(sp)
10004270:	dc000017 	ldw	r16,0(sp)
10004274:	dec00a04 	addi	sp,sp,40
10004278:	00032e41 	jmpi	100032e4 <_malloc_r>
1000427c:	a8c00017 	ldw	r3,0(r21)
10004280:	90c00015 	stw	r3,0(r18)
10004284:	a8c00117 	ldw	r3,4(r21)
10004288:	90c00115 	stw	r3,4(r18)
1000428c:	00c006c4 	movi	r3,27
10004290:	19804536 	bltu	r3,r6,100043a8 <_realloc_r+0x470>
10004294:	90800204 	addi	r2,r18,8
10004298:	a8c00204 	addi	r3,r21,8
1000429c:	003f6306 	br	1000402c <__alt_data_end+0xf800402c>
100042a0:	9005883a 	mov	r2,r18
100042a4:	a8c00017 	ldw	r3,0(r21)
100042a8:	b821883a 	mov	r16,r23
100042ac:	b027883a 	mov	r19,r22
100042b0:	10c00015 	stw	r3,0(r2)
100042b4:	a8c00117 	ldw	r3,4(r21)
100042b8:	10c00115 	stw	r3,4(r2)
100042bc:	a8c00217 	ldw	r3,8(r21)
100042c0:	10c00215 	stw	r3,8(r2)
100042c4:	003f6a06 	br	10004070 <__alt_data_end+0xf8004070>
100042c8:	9c67883a 	add	r19,r19,r17
100042cc:	4445c83a 	sub	r2,r8,r17
100042d0:	e4c00215 	stw	r19,8(fp)
100042d4:	10800054 	ori	r2,r2,1
100042d8:	98800115 	stw	r2,4(r19)
100042dc:	a8bfff17 	ldw	r2,-4(r21)
100042e0:	a009883a 	mov	r4,r20
100042e4:	1080004c 	andi	r2,r2,1
100042e8:	1462b03a 	or	r17,r2,r17
100042ec:	ac7fff15 	stw	r17,-4(r21)
100042f0:	00101e80 	call	100101e8 <__malloc_unlock>
100042f4:	a805883a 	mov	r2,r21
100042f8:	003f6b06 	br	100040a8 <__alt_data_end+0xf80040a8>
100042fc:	a80b883a 	mov	r5,r21
10004300:	9009883a 	mov	r4,r18
10004304:	00090b80 	call	100090b8 <memmove>
10004308:	003f4e06 	br	10004044 <__alt_data_end+0xf8004044>
1000430c:	89000404 	addi	r4,r17,16
10004310:	b93fbc16 	blt	r23,r4,10004204 <__alt_data_end+0xf8004204>
10004314:	b0800317 	ldw	r2,12(r22)
10004318:	b0c00217 	ldw	r3,8(r22)
1000431c:	81bfff04 	addi	r6,r16,-4
10004320:	01000904 	movi	r4,36
10004324:	18800315 	stw	r2,12(r3)
10004328:	10c00215 	stw	r3,8(r2)
1000432c:	b4800204 	addi	r18,r22,8
10004330:	21804336 	bltu	r4,r6,10004440 <_realloc_r+0x508>
10004334:	008004c4 	movi	r2,19
10004338:	11803f2e 	bgeu	r2,r6,10004438 <_realloc_r+0x500>
1000433c:	a8800017 	ldw	r2,0(r21)
10004340:	b0800215 	stw	r2,8(r22)
10004344:	a8800117 	ldw	r2,4(r21)
10004348:	b0800315 	stw	r2,12(r22)
1000434c:	008006c4 	movi	r2,27
10004350:	11803f36 	bltu	r2,r6,10004450 <_realloc_r+0x518>
10004354:	b0800404 	addi	r2,r22,16
10004358:	ad400204 	addi	r21,r21,8
1000435c:	a8c00017 	ldw	r3,0(r21)
10004360:	10c00015 	stw	r3,0(r2)
10004364:	a8c00117 	ldw	r3,4(r21)
10004368:	10c00115 	stw	r3,4(r2)
1000436c:	a8c00217 	ldw	r3,8(r21)
10004370:	10c00215 	stw	r3,8(r2)
10004374:	b447883a 	add	r3,r22,r17
10004378:	bc45c83a 	sub	r2,r23,r17
1000437c:	e0c00215 	stw	r3,8(fp)
10004380:	10800054 	ori	r2,r2,1
10004384:	18800115 	stw	r2,4(r3)
10004388:	b0800117 	ldw	r2,4(r22)
1000438c:	a009883a 	mov	r4,r20
10004390:	1080004c 	andi	r2,r2,1
10004394:	1462b03a 	or	r17,r2,r17
10004398:	b4400115 	stw	r17,4(r22)
1000439c:	00101e80 	call	100101e8 <__malloc_unlock>
100043a0:	9005883a 	mov	r2,r18
100043a4:	003f4006 	br	100040a8 <__alt_data_end+0xf80040a8>
100043a8:	a8c00217 	ldw	r3,8(r21)
100043ac:	90c00215 	stw	r3,8(r18)
100043b0:	a8c00317 	ldw	r3,12(r21)
100043b4:	90c00315 	stw	r3,12(r18)
100043b8:	30801126 	beq	r6,r2,10004400 <_realloc_r+0x4c8>
100043bc:	90800404 	addi	r2,r18,16
100043c0:	a8c00404 	addi	r3,r21,16
100043c4:	003f1906 	br	1000402c <__alt_data_end+0xf800402c>
100043c8:	90ffff17 	ldw	r3,-4(r18)
100043cc:	00bfff04 	movi	r2,-4
100043d0:	a825883a 	mov	r18,r21
100043d4:	1884703a 	and	r2,r3,r2
100043d8:	80a1883a 	add	r16,r16,r2
100043dc:	003f2406 	br	10004070 <__alt_data_end+0xf8004070>
100043e0:	a8800217 	ldw	r2,8(r21)
100043e4:	b0800415 	stw	r2,16(r22)
100043e8:	a8800317 	ldw	r2,12(r21)
100043ec:	b0800515 	stw	r2,20(r22)
100043f0:	31000a26 	beq	r6,r4,1000441c <_realloc_r+0x4e4>
100043f4:	b0800604 	addi	r2,r22,24
100043f8:	ad400404 	addi	r21,r21,16
100043fc:	003fa906 	br	100042a4 <__alt_data_end+0xf80042a4>
10004400:	a9000417 	ldw	r4,16(r21)
10004404:	90800604 	addi	r2,r18,24
10004408:	a8c00604 	addi	r3,r21,24
1000440c:	91000415 	stw	r4,16(r18)
10004410:	a9000517 	ldw	r4,20(r21)
10004414:	91000515 	stw	r4,20(r18)
10004418:	003f0406 	br	1000402c <__alt_data_end+0xf800402c>
1000441c:	a8c00417 	ldw	r3,16(r21)
10004420:	ad400604 	addi	r21,r21,24
10004424:	b0800804 	addi	r2,r22,32
10004428:	b0c00615 	stw	r3,24(r22)
1000442c:	a8ffff17 	ldw	r3,-4(r21)
10004430:	b0c00715 	stw	r3,28(r22)
10004434:	003f9b06 	br	100042a4 <__alt_data_end+0xf80042a4>
10004438:	9005883a 	mov	r2,r18
1000443c:	003fc706 	br	1000435c <__alt_data_end+0xf800435c>
10004440:	a80b883a 	mov	r5,r21
10004444:	9009883a 	mov	r4,r18
10004448:	00090b80 	call	100090b8 <memmove>
1000444c:	003fc906 	br	10004374 <__alt_data_end+0xf8004374>
10004450:	a8800217 	ldw	r2,8(r21)
10004454:	b0800415 	stw	r2,16(r22)
10004458:	a8800317 	ldw	r2,12(r21)
1000445c:	b0800515 	stw	r2,20(r22)
10004460:	31000726 	beq	r6,r4,10004480 <_realloc_r+0x548>
10004464:	b0800604 	addi	r2,r22,24
10004468:	ad400404 	addi	r21,r21,16
1000446c:	003fbb06 	br	1000435c <__alt_data_end+0xf800435c>
10004470:	a009883a 	mov	r4,r20
10004474:	00101e80 	call	100101e8 <__malloc_unlock>
10004478:	0005883a 	mov	r2,zero
1000447c:	003f0a06 	br	100040a8 <__alt_data_end+0xf80040a8>
10004480:	a8c00417 	ldw	r3,16(r21)
10004484:	ad400604 	addi	r21,r21,24
10004488:	b0800804 	addi	r2,r22,32
1000448c:	b0c00615 	stw	r3,24(r22)
10004490:	a8ffff17 	ldw	r3,-4(r21)
10004494:	b0c00715 	stw	r3,28(r22)
10004498:	003fb006 	br	1000435c <__alt_data_end+0xf800435c>

1000449c <lflush>:
1000449c:	2080030b 	ldhu	r2,12(r4)
100044a0:	00c00244 	movi	r3,9
100044a4:	1080024c 	andi	r2,r2,9
100044a8:	10c00226 	beq	r2,r3,100044b4 <lflush+0x18>
100044ac:	0005883a 	mov	r2,zero
100044b0:	f800283a 	ret
100044b4:	0001c3c1 	jmpi	10001c3c <fflush>

100044b8 <__srefill_r>:
100044b8:	defffc04 	addi	sp,sp,-16
100044bc:	dc400115 	stw	r17,4(sp)
100044c0:	dc000015 	stw	r16,0(sp)
100044c4:	dfc00315 	stw	ra,12(sp)
100044c8:	dc800215 	stw	r18,8(sp)
100044cc:	2023883a 	mov	r17,r4
100044d0:	2821883a 	mov	r16,r5
100044d4:	20000226 	beq	r4,zero,100044e0 <__srefill_r+0x28>
100044d8:	20800e17 	ldw	r2,56(r4)
100044dc:	10003c26 	beq	r2,zero,100045d0 <__srefill_r+0x118>
100044e0:	80c0030b 	ldhu	r3,12(r16)
100044e4:	1908000c 	andi	r4,r3,8192
100044e8:	1805883a 	mov	r2,r3
100044ec:	2000071e 	bne	r4,zero,1000450c <__srefill_r+0x54>
100044f0:	81001917 	ldw	r4,100(r16)
100044f4:	18880014 	ori	r2,r3,8192
100044f8:	00f7ffc4 	movi	r3,-8193
100044fc:	20c8703a 	and	r4,r4,r3
10004500:	8080030d 	sth	r2,12(r16)
10004504:	1007883a 	mov	r3,r2
10004508:	81001915 	stw	r4,100(r16)
1000450c:	80000115 	stw	zero,4(r16)
10004510:	1100080c 	andi	r4,r2,32
10004514:	2000571e 	bne	r4,zero,10004674 <__srefill_r+0x1bc>
10004518:	1100010c 	andi	r4,r2,4
1000451c:	20001f26 	beq	r4,zero,1000459c <__srefill_r+0xe4>
10004520:	81400c17 	ldw	r5,48(r16)
10004524:	28000826 	beq	r5,zero,10004548 <__srefill_r+0x90>
10004528:	80801004 	addi	r2,r16,64
1000452c:	28800226 	beq	r5,r2,10004538 <__srefill_r+0x80>
10004530:	8809883a 	mov	r4,r17
10004534:	00025640 	call	10002564 <_free_r>
10004538:	80800f17 	ldw	r2,60(r16)
1000453c:	80000c15 	stw	zero,48(r16)
10004540:	80800115 	stw	r2,4(r16)
10004544:	1000391e 	bne	r2,zero,1000462c <__srefill_r+0x174>
10004548:	80800417 	ldw	r2,16(r16)
1000454c:	10004b26 	beq	r2,zero,1000467c <__srefill_r+0x1c4>
10004550:	8480030b 	ldhu	r18,12(r16)
10004554:	908000cc 	andi	r2,r18,3
10004558:	10001f1e 	bne	r2,zero,100045d8 <__srefill_r+0x120>
1000455c:	81800417 	ldw	r6,16(r16)
10004560:	80800817 	ldw	r2,32(r16)
10004564:	81c00517 	ldw	r7,20(r16)
10004568:	81400717 	ldw	r5,28(r16)
1000456c:	81800015 	stw	r6,0(r16)
10004570:	8809883a 	mov	r4,r17
10004574:	103ee83a 	callr	r2
10004578:	80800115 	stw	r2,4(r16)
1000457c:	00800e0e 	bge	zero,r2,100045b8 <__srefill_r+0x100>
10004580:	0005883a 	mov	r2,zero
10004584:	dfc00317 	ldw	ra,12(sp)
10004588:	dc800217 	ldw	r18,8(sp)
1000458c:	dc400117 	ldw	r17,4(sp)
10004590:	dc000017 	ldw	r16,0(sp)
10004594:	dec00404 	addi	sp,sp,16
10004598:	f800283a 	ret
1000459c:	1100040c 	andi	r4,r2,16
100045a0:	20003026 	beq	r4,zero,10004664 <__srefill_r+0x1ac>
100045a4:	1080020c 	andi	r2,r2,8
100045a8:	1000241e 	bne	r2,zero,1000463c <__srefill_r+0x184>
100045ac:	18c00114 	ori	r3,r3,4
100045b0:	80c0030d 	sth	r3,12(r16)
100045b4:	003fe406 	br	10004548 <__alt_data_end+0xf8004548>
100045b8:	80c0030b 	ldhu	r3,12(r16)
100045bc:	1000161e 	bne	r2,zero,10004618 <__srefill_r+0x160>
100045c0:	18c00814 	ori	r3,r3,32
100045c4:	00bfffc4 	movi	r2,-1
100045c8:	80c0030d 	sth	r3,12(r16)
100045cc:	003fed06 	br	10004584 <__alt_data_end+0xf8004584>
100045d0:	0001fcc0 	call	10001fcc <__sinit>
100045d4:	003fc206 	br	100044e0 <__alt_data_end+0xf80044e0>
100045d8:	00840074 	movhi	r2,4097
100045dc:	10915d04 	addi	r2,r2,17780
100045e0:	11000017 	ldw	r4,0(r2)
100045e4:	01440034 	movhi	r5,4096
100045e8:	00800044 	movi	r2,1
100045ec:	29512704 	addi	r5,r5,17564
100045f0:	8080030d 	sth	r2,12(r16)
100045f4:	0002e680 	call	10002e68 <_fwalk>
100045f8:	00800244 	movi	r2,9
100045fc:	8480030d 	sth	r18,12(r16)
10004600:	9480024c 	andi	r18,r18,9
10004604:	90bfd51e 	bne	r18,r2,1000455c <__alt_data_end+0xf800455c>
10004608:	800b883a 	mov	r5,r16
1000460c:	8809883a 	mov	r4,r17
10004610:	00019c40 	call	100019c4 <__sflush_r>
10004614:	003fd106 	br	1000455c <__alt_data_end+0xf800455c>
10004618:	18c01014 	ori	r3,r3,64
1000461c:	80000115 	stw	zero,4(r16)
10004620:	00bfffc4 	movi	r2,-1
10004624:	80c0030d 	sth	r3,12(r16)
10004628:	003fd606 	br	10004584 <__alt_data_end+0xf8004584>
1000462c:	80c00e17 	ldw	r3,56(r16)
10004630:	0005883a 	mov	r2,zero
10004634:	80c00015 	stw	r3,0(r16)
10004638:	003fd206 	br	10004584 <__alt_data_end+0xf8004584>
1000463c:	800b883a 	mov	r5,r16
10004640:	8809883a 	mov	r4,r17
10004644:	0001be00 	call	10001be0 <_fflush_r>
10004648:	10000a1e 	bne	r2,zero,10004674 <__srefill_r+0x1bc>
1000464c:	8080030b 	ldhu	r2,12(r16)
10004650:	00fffdc4 	movi	r3,-9
10004654:	80000215 	stw	zero,8(r16)
10004658:	1886703a 	and	r3,r3,r2
1000465c:	80000615 	stw	zero,24(r16)
10004660:	003fd206 	br	100045ac <__alt_data_end+0xf80045ac>
10004664:	00800244 	movi	r2,9
10004668:	88800015 	stw	r2,0(r17)
1000466c:	18c01014 	ori	r3,r3,64
10004670:	80c0030d 	sth	r3,12(r16)
10004674:	00bfffc4 	movi	r2,-1
10004678:	003fc206 	br	10004584 <__alt_data_end+0xf8004584>
1000467c:	800b883a 	mov	r5,r16
10004680:	8809883a 	mov	r4,r17
10004684:	00031000 	call	10003100 <__smakebuf_r>
10004688:	003fb106 	br	10004550 <__alt_data_end+0xf8004550>

1000468c <_sbrk_r>:
1000468c:	defffd04 	addi	sp,sp,-12
10004690:	dc000015 	stw	r16,0(sp)
10004694:	04040074 	movhi	r16,4097
10004698:	dc400115 	stw	r17,4(sp)
1000469c:	84187104 	addi	r16,r16,25028
100046a0:	2023883a 	mov	r17,r4
100046a4:	2809883a 	mov	r4,r5
100046a8:	dfc00215 	stw	ra,8(sp)
100046ac:	80000015 	stw	zero,0(r16)
100046b0:	00105140 	call	10010514 <sbrk>
100046b4:	00ffffc4 	movi	r3,-1
100046b8:	10c00526 	beq	r2,r3,100046d0 <_sbrk_r+0x44>
100046bc:	dfc00217 	ldw	ra,8(sp)
100046c0:	dc400117 	ldw	r17,4(sp)
100046c4:	dc000017 	ldw	r16,0(sp)
100046c8:	dec00304 	addi	sp,sp,12
100046cc:	f800283a 	ret
100046d0:	80c00017 	ldw	r3,0(r16)
100046d4:	183ff926 	beq	r3,zero,100046bc <__alt_data_end+0xf80046bc>
100046d8:	88c00015 	stw	r3,0(r17)
100046dc:	003ff706 	br	100046bc <__alt_data_end+0xf80046bc>

100046e0 <__sread>:
100046e0:	defffe04 	addi	sp,sp,-8
100046e4:	dc000015 	stw	r16,0(sp)
100046e8:	2821883a 	mov	r16,r5
100046ec:	2940038f 	ldh	r5,14(r5)
100046f0:	dfc00115 	stw	ra,4(sp)
100046f4:	000a4340 	call	1000a434 <_read_r>
100046f8:	10000716 	blt	r2,zero,10004718 <__sread+0x38>
100046fc:	80c01417 	ldw	r3,80(r16)
10004700:	1887883a 	add	r3,r3,r2
10004704:	80c01415 	stw	r3,80(r16)
10004708:	dfc00117 	ldw	ra,4(sp)
1000470c:	dc000017 	ldw	r16,0(sp)
10004710:	dec00204 	addi	sp,sp,8
10004714:	f800283a 	ret
10004718:	80c0030b 	ldhu	r3,12(r16)
1000471c:	18fbffcc 	andi	r3,r3,61439
10004720:	80c0030d 	sth	r3,12(r16)
10004724:	dfc00117 	ldw	ra,4(sp)
10004728:	dc000017 	ldw	r16,0(sp)
1000472c:	dec00204 	addi	sp,sp,8
10004730:	f800283a 	ret

10004734 <__seofread>:
10004734:	0005883a 	mov	r2,zero
10004738:	f800283a 	ret

1000473c <__swrite>:
1000473c:	2880030b 	ldhu	r2,12(r5)
10004740:	defffb04 	addi	sp,sp,-20
10004744:	dcc00315 	stw	r19,12(sp)
10004748:	dc800215 	stw	r18,8(sp)
1000474c:	dc400115 	stw	r17,4(sp)
10004750:	dc000015 	stw	r16,0(sp)
10004754:	dfc00415 	stw	ra,16(sp)
10004758:	10c0400c 	andi	r3,r2,256
1000475c:	2821883a 	mov	r16,r5
10004760:	2023883a 	mov	r17,r4
10004764:	3025883a 	mov	r18,r6
10004768:	3827883a 	mov	r19,r7
1000476c:	18000526 	beq	r3,zero,10004784 <__swrite+0x48>
10004770:	2940038f 	ldh	r5,14(r5)
10004774:	01c00084 	movi	r7,2
10004778:	000d883a 	mov	r6,zero
1000477c:	0008f740 	call	10008f74 <_lseek_r>
10004780:	8080030b 	ldhu	r2,12(r16)
10004784:	8140038f 	ldh	r5,14(r16)
10004788:	10bbffcc 	andi	r2,r2,61439
1000478c:	980f883a 	mov	r7,r19
10004790:	900d883a 	mov	r6,r18
10004794:	8809883a 	mov	r4,r17
10004798:	8080030d 	sth	r2,12(r16)
1000479c:	dfc00417 	ldw	ra,16(sp)
100047a0:	dcc00317 	ldw	r19,12(sp)
100047a4:	dc800217 	ldw	r18,8(sp)
100047a8:	dc400117 	ldw	r17,4(sp)
100047ac:	dc000017 	ldw	r16,0(sp)
100047b0:	dec00504 	addi	sp,sp,20
100047b4:	0006c801 	jmpi	10006c80 <_write_r>

100047b8 <__sseek>:
100047b8:	defffe04 	addi	sp,sp,-8
100047bc:	dc000015 	stw	r16,0(sp)
100047c0:	2821883a 	mov	r16,r5
100047c4:	2940038f 	ldh	r5,14(r5)
100047c8:	dfc00115 	stw	ra,4(sp)
100047cc:	0008f740 	call	10008f74 <_lseek_r>
100047d0:	00ffffc4 	movi	r3,-1
100047d4:	10c00826 	beq	r2,r3,100047f8 <__sseek+0x40>
100047d8:	80c0030b 	ldhu	r3,12(r16)
100047dc:	80801415 	stw	r2,80(r16)
100047e0:	18c40014 	ori	r3,r3,4096
100047e4:	80c0030d 	sth	r3,12(r16)
100047e8:	dfc00117 	ldw	ra,4(sp)
100047ec:	dc000017 	ldw	r16,0(sp)
100047f0:	dec00204 	addi	sp,sp,8
100047f4:	f800283a 	ret
100047f8:	80c0030b 	ldhu	r3,12(r16)
100047fc:	18fbffcc 	andi	r3,r3,61439
10004800:	80c0030d 	sth	r3,12(r16)
10004804:	dfc00117 	ldw	ra,4(sp)
10004808:	dc000017 	ldw	r16,0(sp)
1000480c:	dec00204 	addi	sp,sp,8
10004810:	f800283a 	ret

10004814 <__sclose>:
10004814:	2940038f 	ldh	r5,14(r5)
10004818:	0006e341 	jmpi	10006e34 <_close_r>

1000481c <strlen>:
1000481c:	208000cc 	andi	r2,r4,3
10004820:	10002026 	beq	r2,zero,100048a4 <strlen+0x88>
10004824:	20800007 	ldb	r2,0(r4)
10004828:	10002026 	beq	r2,zero,100048ac <strlen+0x90>
1000482c:	2005883a 	mov	r2,r4
10004830:	00000206 	br	1000483c <strlen+0x20>
10004834:	10c00007 	ldb	r3,0(r2)
10004838:	18001826 	beq	r3,zero,1000489c <strlen+0x80>
1000483c:	10800044 	addi	r2,r2,1
10004840:	10c000cc 	andi	r3,r2,3
10004844:	183ffb1e 	bne	r3,zero,10004834 <__alt_data_end+0xf8004834>
10004848:	10c00017 	ldw	r3,0(r2)
1000484c:	01ffbff4 	movhi	r7,65279
10004850:	39ffbfc4 	addi	r7,r7,-257
10004854:	00ca303a 	nor	r5,zero,r3
10004858:	01a02074 	movhi	r6,32897
1000485c:	19c7883a 	add	r3,r3,r7
10004860:	31a02004 	addi	r6,r6,-32640
10004864:	1946703a 	and	r3,r3,r5
10004868:	1986703a 	and	r3,r3,r6
1000486c:	1800091e 	bne	r3,zero,10004894 <strlen+0x78>
10004870:	10800104 	addi	r2,r2,4
10004874:	10c00017 	ldw	r3,0(r2)
10004878:	19cb883a 	add	r5,r3,r7
1000487c:	00c6303a 	nor	r3,zero,r3
10004880:	28c6703a 	and	r3,r5,r3
10004884:	1986703a 	and	r3,r3,r6
10004888:	183ff926 	beq	r3,zero,10004870 <__alt_data_end+0xf8004870>
1000488c:	00000106 	br	10004894 <strlen+0x78>
10004890:	10800044 	addi	r2,r2,1
10004894:	10c00007 	ldb	r3,0(r2)
10004898:	183ffd1e 	bne	r3,zero,10004890 <__alt_data_end+0xf8004890>
1000489c:	1105c83a 	sub	r2,r2,r4
100048a0:	f800283a 	ret
100048a4:	2005883a 	mov	r2,r4
100048a8:	003fe706 	br	10004848 <__alt_data_end+0xf8004848>
100048ac:	0005883a 	mov	r2,zero
100048b0:	f800283a 	ret

100048b4 <_vfiprintf_r>:
100048b4:	deffff04 	addi	sp,sp,-4
100048b8:	dfc00015 	stw	ra,0(sp)
100048bc:	000a9fc0 	call	1000a9fc <___vfiprintf_internal_r>
100048c0:	dfc00017 	ldw	ra,0(sp)
100048c4:	dec00104 	addi	sp,sp,4
100048c8:	f800283a 	ret

100048cc <___vfprintf_internal_r>:
100048cc:	deffb804 	addi	sp,sp,-288
100048d0:	dfc04715 	stw	ra,284(sp)
100048d4:	ddc04515 	stw	r23,276(sp)
100048d8:	dd404315 	stw	r21,268(sp)
100048dc:	d9002d15 	stw	r4,180(sp)
100048e0:	282f883a 	mov	r23,r5
100048e4:	302b883a 	mov	r21,r6
100048e8:	d9c02e15 	stw	r7,184(sp)
100048ec:	df004615 	stw	fp,280(sp)
100048f0:	dd804415 	stw	r22,272(sp)
100048f4:	dd004215 	stw	r20,264(sp)
100048f8:	dcc04115 	stw	r19,260(sp)
100048fc:	dc804015 	stw	r18,256(sp)
10004900:	dc403f15 	stw	r17,252(sp)
10004904:	dc003e15 	stw	r16,248(sp)
10004908:	0008f440 	call	10008f44 <_localeconv_r>
1000490c:	10800017 	ldw	r2,0(r2)
10004910:	1009883a 	mov	r4,r2
10004914:	d8803415 	stw	r2,208(sp)
10004918:	000481c0 	call	1000481c <strlen>
1000491c:	d8803715 	stw	r2,220(sp)
10004920:	d8802d17 	ldw	r2,180(sp)
10004924:	10000226 	beq	r2,zero,10004930 <___vfprintf_internal_r+0x64>
10004928:	10800e17 	ldw	r2,56(r2)
1000492c:	1000fb26 	beq	r2,zero,10004d1c <___vfprintf_internal_r+0x450>
10004930:	b880030b 	ldhu	r2,12(r23)
10004934:	10c8000c 	andi	r3,r2,8192
10004938:	1800061e 	bne	r3,zero,10004954 <___vfprintf_internal_r+0x88>
1000493c:	b9001917 	ldw	r4,100(r23)
10004940:	00f7ffc4 	movi	r3,-8193
10004944:	10880014 	ori	r2,r2,8192
10004948:	20c6703a 	and	r3,r4,r3
1000494c:	b880030d 	sth	r2,12(r23)
10004950:	b8c01915 	stw	r3,100(r23)
10004954:	10c0020c 	andi	r3,r2,8
10004958:	1800c326 	beq	r3,zero,10004c68 <___vfprintf_internal_r+0x39c>
1000495c:	b8c00417 	ldw	r3,16(r23)
10004960:	1800c126 	beq	r3,zero,10004c68 <___vfprintf_internal_r+0x39c>
10004964:	1080068c 	andi	r2,r2,26
10004968:	00c00284 	movi	r3,10
1000496c:	10c0c626 	beq	r2,r3,10004c88 <___vfprintf_internal_r+0x3bc>
10004970:	d8c00404 	addi	r3,sp,16
10004974:	05040074 	movhi	r20,4097
10004978:	d9001e04 	addi	r4,sp,120
1000497c:	a509dd84 	addi	r20,r20,10102
10004980:	d8c01e15 	stw	r3,120(sp)
10004984:	d8002015 	stw	zero,128(sp)
10004988:	d8001f15 	stw	zero,124(sp)
1000498c:	d8003315 	stw	zero,204(sp)
10004990:	d8003615 	stw	zero,216(sp)
10004994:	d8003815 	stw	zero,224(sp)
10004998:	1811883a 	mov	r8,r3
1000499c:	d8003915 	stw	zero,228(sp)
100049a0:	d8003a15 	stw	zero,232(sp)
100049a4:	d8002f15 	stw	zero,188(sp)
100049a8:	d9002815 	stw	r4,160(sp)
100049ac:	a8800007 	ldb	r2,0(r21)
100049b0:	10028b26 	beq	r2,zero,100053e0 <___vfprintf_internal_r+0xb14>
100049b4:	00c00944 	movi	r3,37
100049b8:	a823883a 	mov	r17,r21
100049bc:	10c0021e 	bne	r2,r3,100049c8 <___vfprintf_internal_r+0xfc>
100049c0:	00001406 	br	10004a14 <___vfprintf_internal_r+0x148>
100049c4:	10c00326 	beq	r2,r3,100049d4 <___vfprintf_internal_r+0x108>
100049c8:	8c400044 	addi	r17,r17,1
100049cc:	88800007 	ldb	r2,0(r17)
100049d0:	103ffc1e 	bne	r2,zero,100049c4 <__alt_data_end+0xf80049c4>
100049d4:	8d61c83a 	sub	r16,r17,r21
100049d8:	80000e26 	beq	r16,zero,10004a14 <___vfprintf_internal_r+0x148>
100049dc:	d8c02017 	ldw	r3,128(sp)
100049e0:	d8801f17 	ldw	r2,124(sp)
100049e4:	45400015 	stw	r21,0(r8)
100049e8:	1c07883a 	add	r3,r3,r16
100049ec:	10800044 	addi	r2,r2,1
100049f0:	d8c02015 	stw	r3,128(sp)
100049f4:	44000115 	stw	r16,4(r8)
100049f8:	d8801f15 	stw	r2,124(sp)
100049fc:	00c001c4 	movi	r3,7
10004a00:	1880a916 	blt	r3,r2,10004ca8 <___vfprintf_internal_r+0x3dc>
10004a04:	42000204 	addi	r8,r8,8
10004a08:	d9402f17 	ldw	r5,188(sp)
10004a0c:	2c0b883a 	add	r5,r5,r16
10004a10:	d9402f15 	stw	r5,188(sp)
10004a14:	88800007 	ldb	r2,0(r17)
10004a18:	1000aa26 	beq	r2,zero,10004cc4 <___vfprintf_internal_r+0x3f8>
10004a1c:	8d400044 	addi	r21,r17,1
10004a20:	8c400047 	ldb	r17,1(r17)
10004a24:	0021883a 	mov	r16,zero
10004a28:	00bfffc4 	movi	r2,-1
10004a2c:	0025883a 	mov	r18,zero
10004a30:	dc002905 	stb	r16,164(sp)
10004a34:	d8002785 	stb	zero,158(sp)
10004a38:	d8002b05 	stb	zero,172(sp)
10004a3c:	d8802a15 	stw	r2,168(sp)
10004a40:	d8003115 	stw	zero,196(sp)
10004a44:	04c01604 	movi	r19,88
10004a48:	05800244 	movi	r22,9
10004a4c:	9021883a 	mov	r16,r18
10004a50:	4039883a 	mov	fp,r8
10004a54:	ad400044 	addi	r21,r21,1
10004a58:	88bff804 	addi	r2,r17,-32
10004a5c:	98833236 	bltu	r19,r2,10005728 <___vfprintf_internal_r+0xe5c>
10004a60:	100490ba 	slli	r2,r2,2
10004a64:	00c40034 	movhi	r3,4096
10004a68:	18d29e04 	addi	r3,r3,19064
10004a6c:	10c5883a 	add	r2,r2,r3
10004a70:	10800017 	ldw	r2,0(r2)
10004a74:	1000683a 	jmp	r2
10004a78:	10005620 	cmpeqi	zero,r2,344
10004a7c:	10005728 	cmpgeui	zero,r2,348
10004a80:	10005728 	cmpgeui	zero,r2,348
10004a84:	10005640 	call	11000564 <_gp+0xfe4010>
10004a88:	10005728 	cmpgeui	zero,r2,348
10004a8c:	10005728 	cmpgeui	zero,r2,348
10004a90:	10005728 	cmpgeui	zero,r2,348
10004a94:	10005728 	cmpgeui	zero,r2,348
10004a98:	10005728 	cmpgeui	zero,r2,348
10004a9c:	10005728 	cmpgeui	zero,r2,348
10004aa0:	10004d28 	cmpgeui	zero,r2,308
10004aa4:	10005530 	cmpltui	zero,r2,340
10004aa8:	10005728 	cmpgeui	zero,r2,348
10004aac:	10004bec 	andhi	zero,r2,303
10004ab0:	10004d4c 	andi	zero,r2,309
10004ab4:	10005728 	cmpgeui	zero,r2,348
10004ab8:	10004d9c 	xori	zero,r2,310
10004abc:	10004da8 	cmpgeui	zero,r2,310
10004ac0:	10004da8 	cmpgeui	zero,r2,310
10004ac4:	10004da8 	cmpgeui	zero,r2,310
10004ac8:	10004da8 	cmpgeui	zero,r2,310
10004acc:	10004da8 	cmpgeui	zero,r2,310
10004ad0:	10004da8 	cmpgeui	zero,r2,310
10004ad4:	10004da8 	cmpgeui	zero,r2,310
10004ad8:	10004da8 	cmpgeui	zero,r2,310
10004adc:	10004da8 	cmpgeui	zero,r2,310
10004ae0:	10005728 	cmpgeui	zero,r2,348
10004ae4:	10005728 	cmpgeui	zero,r2,348
10004ae8:	10005728 	cmpgeui	zero,r2,348
10004aec:	10005728 	cmpgeui	zero,r2,348
10004af0:	10005728 	cmpgeui	zero,r2,348
10004af4:	10005728 	cmpgeui	zero,r2,348
10004af8:	10005728 	cmpgeui	zero,r2,348
10004afc:	10005728 	cmpgeui	zero,r2,348
10004b00:	10005728 	cmpgeui	zero,r2,348
10004b04:	10005728 	cmpgeui	zero,r2,348
10004b08:	10004de4 	muli	zero,r2,311
10004b0c:	10004eac 	andhi	zero,r2,314
10004b10:	10005728 	cmpgeui	zero,r2,348
10004b14:	10004eac 	andhi	zero,r2,314
10004b18:	10005728 	cmpgeui	zero,r2,348
10004b1c:	10005728 	cmpgeui	zero,r2,348
10004b20:	10005728 	cmpgeui	zero,r2,348
10004b24:	10005728 	cmpgeui	zero,r2,348
10004b28:	10004f58 	cmpnei	zero,r2,317
10004b2c:	10005728 	cmpgeui	zero,r2,348
10004b30:	10005728 	cmpgeui	zero,r2,348
10004b34:	10004f64 	muli	zero,r2,317
10004b38:	10005728 	cmpgeui	zero,r2,348
10004b3c:	10005728 	cmpgeui	zero,r2,348
10004b40:	10005728 	cmpgeui	zero,r2,348
10004b44:	10005728 	cmpgeui	zero,r2,348
10004b48:	10005728 	cmpgeui	zero,r2,348
10004b4c:	100053e8 	cmpgeui	zero,r2,335
10004b50:	10005728 	cmpgeui	zero,r2,348
10004b54:	10005728 	cmpgeui	zero,r2,348
10004b58:	10005454 	ori	zero,r2,337
10004b5c:	10005728 	cmpgeui	zero,r2,348
10004b60:	10005728 	cmpgeui	zero,r2,348
10004b64:	10005728 	cmpgeui	zero,r2,348
10004b68:	10005728 	cmpgeui	zero,r2,348
10004b6c:	10005728 	cmpgeui	zero,r2,348
10004b70:	10005728 	cmpgeui	zero,r2,348
10004b74:	10005728 	cmpgeui	zero,r2,348
10004b78:	10005728 	cmpgeui	zero,r2,348
10004b7c:	10005728 	cmpgeui	zero,r2,348
10004b80:	10005728 	cmpgeui	zero,r2,348
10004b84:	100056cc 	andi	zero,r2,347
10004b88:	1000564c 	andi	zero,r2,345
10004b8c:	10004eac 	andhi	zero,r2,314
10004b90:	10004eac 	andhi	zero,r2,314
10004b94:	10004eac 	andhi	zero,r2,314
10004b98:	1000566c 	andhi	zero,r2,345
10004b9c:	1000564c 	andi	zero,r2,345
10004ba0:	10005728 	cmpgeui	zero,r2,348
10004ba4:	10005728 	cmpgeui	zero,r2,348
10004ba8:	10005678 	rdprs	zero,r2,345
10004bac:	10005728 	cmpgeui	zero,r2,348
10004bb0:	1000568c 	andi	zero,r2,346
10004bb4:	10005510 	cmplti	zero,r2,340
10004bb8:	10004bf8 	rdprs	zero,r2,303
10004bbc:	10005548 	cmpgei	zero,r2,341
10004bc0:	10005728 	cmpgeui	zero,r2,348
10004bc4:	10005554 	ori	zero,r2,341
10004bc8:	10005728 	cmpgeui	zero,r2,348
10004bcc:	100055b8 	rdprs	zero,r2,342
10004bd0:	10005728 	cmpgeui	zero,r2,348
10004bd4:	10005728 	cmpgeui	zero,r2,348
10004bd8:	100055d8 	cmpnei	zero,r2,343
10004bdc:	d8c03117 	ldw	r3,196(sp)
10004be0:	d8802e15 	stw	r2,184(sp)
10004be4:	00c7c83a 	sub	r3,zero,r3
10004be8:	d8c03115 	stw	r3,196(sp)
10004bec:	84000114 	ori	r16,r16,4
10004bf0:	ac400007 	ldb	r17,0(r21)
10004bf4:	003f9706 	br	10004a54 <__alt_data_end+0xf8004a54>
10004bf8:	00800c04 	movi	r2,48
10004bfc:	d8802705 	stb	r2,156(sp)
10004c00:	00801e04 	movi	r2,120
10004c04:	d8802745 	stb	r2,157(sp)
10004c08:	d9002a17 	ldw	r4,168(sp)
10004c0c:	d8802e17 	ldw	r2,184(sp)
10004c10:	d8002785 	stb	zero,158(sp)
10004c14:	e011883a 	mov	r8,fp
10004c18:	10c00104 	addi	r3,r2,4
10004c1c:	14c00017 	ldw	r19,0(r2)
10004c20:	002d883a 	mov	r22,zero
10004c24:	80800094 	ori	r2,r16,2
10004c28:	2002ca16 	blt	r4,zero,10005754 <___vfprintf_internal_r+0xe88>
10004c2c:	00bfdfc4 	movi	r2,-129
10004c30:	80a4703a 	and	r18,r16,r2
10004c34:	d8c02e15 	stw	r3,184(sp)
10004c38:	94800094 	ori	r18,r18,2
10004c3c:	9802b41e 	bne	r19,zero,10005710 <___vfprintf_internal_r+0xe44>
10004c40:	01440074 	movhi	r5,4097
10004c44:	2949d604 	addi	r5,r5,10072
10004c48:	d9403915 	stw	r5,228(sp)
10004c4c:	04401e04 	movi	r17,120
10004c50:	d8802a17 	ldw	r2,168(sp)
10004c54:	0039883a 	mov	fp,zero
10004c58:	1001fa26 	beq	r2,zero,10005444 <___vfprintf_internal_r+0xb78>
10004c5c:	0027883a 	mov	r19,zero
10004c60:	002d883a 	mov	r22,zero
10004c64:	00021906 	br	100054cc <___vfprintf_internal_r+0xc00>
10004c68:	d9002d17 	ldw	r4,180(sp)
10004c6c:	b80b883a 	mov	r5,r23
10004c70:	0006ce00 	call	10006ce0 <__swsetup_r>
10004c74:	1005dc1e 	bne	r2,zero,100063e8 <___vfprintf_internal_r+0x1b1c>
10004c78:	b880030b 	ldhu	r2,12(r23)
10004c7c:	00c00284 	movi	r3,10
10004c80:	1080068c 	andi	r2,r2,26
10004c84:	10ff3a1e 	bne	r2,r3,10004970 <__alt_data_end+0xf8004970>
10004c88:	b880038f 	ldh	r2,14(r23)
10004c8c:	103f3816 	blt	r2,zero,10004970 <__alt_data_end+0xf8004970>
10004c90:	d9c02e17 	ldw	r7,184(sp)
10004c94:	d9002d17 	ldw	r4,180(sp)
10004c98:	a80d883a 	mov	r6,r21
10004c9c:	b80b883a 	mov	r5,r23
10004ca0:	0006bc40 	call	10006bc4 <__sbprintf>
10004ca4:	00001106 	br	10004cec <___vfprintf_internal_r+0x420>
10004ca8:	d9002d17 	ldw	r4,180(sp)
10004cac:	d9801e04 	addi	r6,sp,120
10004cb0:	b80b883a 	mov	r5,r23
10004cb4:	000a9e40 	call	1000a9e4 <__sprint_r>
10004cb8:	1000081e 	bne	r2,zero,10004cdc <___vfprintf_internal_r+0x410>
10004cbc:	da000404 	addi	r8,sp,16
10004cc0:	003f5106 	br	10004a08 <__alt_data_end+0xf8004a08>
10004cc4:	d8802017 	ldw	r2,128(sp)
10004cc8:	10000426 	beq	r2,zero,10004cdc <___vfprintf_internal_r+0x410>
10004ccc:	d9002d17 	ldw	r4,180(sp)
10004cd0:	d9801e04 	addi	r6,sp,120
10004cd4:	b80b883a 	mov	r5,r23
10004cd8:	000a9e40 	call	1000a9e4 <__sprint_r>
10004cdc:	b880030b 	ldhu	r2,12(r23)
10004ce0:	1080100c 	andi	r2,r2,64
10004ce4:	1005c01e 	bne	r2,zero,100063e8 <___vfprintf_internal_r+0x1b1c>
10004ce8:	d8802f17 	ldw	r2,188(sp)
10004cec:	dfc04717 	ldw	ra,284(sp)
10004cf0:	df004617 	ldw	fp,280(sp)
10004cf4:	ddc04517 	ldw	r23,276(sp)
10004cf8:	dd804417 	ldw	r22,272(sp)
10004cfc:	dd404317 	ldw	r21,268(sp)
10004d00:	dd004217 	ldw	r20,264(sp)
10004d04:	dcc04117 	ldw	r19,260(sp)
10004d08:	dc804017 	ldw	r18,256(sp)
10004d0c:	dc403f17 	ldw	r17,252(sp)
10004d10:	dc003e17 	ldw	r16,248(sp)
10004d14:	dec04804 	addi	sp,sp,288
10004d18:	f800283a 	ret
10004d1c:	d9002d17 	ldw	r4,180(sp)
10004d20:	0001fcc0 	call	10001fcc <__sinit>
10004d24:	003f0206 	br	10004930 <__alt_data_end+0xf8004930>
10004d28:	d9002e17 	ldw	r4,184(sp)
10004d2c:	d9402e17 	ldw	r5,184(sp)
10004d30:	21000017 	ldw	r4,0(r4)
10004d34:	28800104 	addi	r2,r5,4
10004d38:	d9003115 	stw	r4,196(sp)
10004d3c:	203fa716 	blt	r4,zero,10004bdc <__alt_data_end+0xf8004bdc>
10004d40:	d8802e15 	stw	r2,184(sp)
10004d44:	ac400007 	ldb	r17,0(r21)
10004d48:	003f4206 	br	10004a54 <__alt_data_end+0xf8004a54>
10004d4c:	ac400007 	ldb	r17,0(r21)
10004d50:	01000a84 	movi	r4,42
10004d54:	a8c00044 	addi	r3,r21,1
10004d58:	89075826 	beq	r17,r4,10006abc <___vfprintf_internal_r+0x21f0>
10004d5c:	8cbff404 	addi	r18,r17,-48
10004d60:	b486ae36 	bltu	r22,r18,1000681c <___vfprintf_internal_r+0x1f50>
10004d64:	0009883a 	mov	r4,zero
10004d68:	1823883a 	mov	r17,r3
10004d6c:	01400284 	movi	r5,10
10004d70:	00017e40 	call	100017e4 <__mulsi3>
10004d74:	88c00007 	ldb	r3,0(r17)
10004d78:	1489883a 	add	r4,r2,r18
10004d7c:	8d400044 	addi	r21,r17,1
10004d80:	1cbff404 	addi	r18,r3,-48
10004d84:	a823883a 	mov	r17,r21
10004d88:	b4bff82e 	bgeu	r22,r18,10004d6c <__alt_data_end+0xf8004d6c>
10004d8c:	1823883a 	mov	r17,r3
10004d90:	2005f616 	blt	r4,zero,1000656c <___vfprintf_internal_r+0x1ca0>
10004d94:	d9002a15 	stw	r4,168(sp)
10004d98:	003f2f06 	br	10004a58 <__alt_data_end+0xf8004a58>
10004d9c:	84002014 	ori	r16,r16,128
10004da0:	ac400007 	ldb	r17,0(r21)
10004da4:	003f2b06 	br	10004a54 <__alt_data_end+0xf8004a54>
10004da8:	8cbff404 	addi	r18,r17,-48
10004dac:	d8003115 	stw	zero,196(sp)
10004db0:	0009883a 	mov	r4,zero
10004db4:	a823883a 	mov	r17,r21
10004db8:	01400284 	movi	r5,10
10004dbc:	00017e40 	call	100017e4 <__mulsi3>
10004dc0:	88c00007 	ldb	r3,0(r17)
10004dc4:	9089883a 	add	r4,r18,r2
10004dc8:	ad400044 	addi	r21,r21,1
10004dcc:	1cbff404 	addi	r18,r3,-48
10004dd0:	a823883a 	mov	r17,r21
10004dd4:	b4bff82e 	bgeu	r22,r18,10004db8 <__alt_data_end+0xf8004db8>
10004dd8:	1823883a 	mov	r17,r3
10004ddc:	d9003115 	stw	r4,196(sp)
10004de0:	003f1d06 	br	10004a58 <__alt_data_end+0xf8004a58>
10004de4:	8025883a 	mov	r18,r16
10004de8:	dc002903 	ldbu	r16,164(sp)
10004dec:	e011883a 	mov	r8,fp
10004df0:	84003fcc 	andi	r16,r16,255
10004df4:	8007531e 	bne	r16,zero,10006b44 <___vfprintf_internal_r+0x2278>
10004df8:	94800414 	ori	r18,r18,16
10004dfc:	9080080c 	andi	r2,r18,32
10004e00:	1003a326 	beq	r2,zero,10005c90 <___vfprintf_internal_r+0x13c4>
10004e04:	d9002e17 	ldw	r4,184(sp)
10004e08:	20800117 	ldw	r2,4(r4)
10004e0c:	24c00017 	ldw	r19,0(r4)
10004e10:	21000204 	addi	r4,r4,8
10004e14:	d9002e15 	stw	r4,184(sp)
10004e18:	102d883a 	mov	r22,r2
10004e1c:	10047316 	blt	r2,zero,10005fec <___vfprintf_internal_r+0x1720>
10004e20:	d9002a17 	ldw	r4,168(sp)
10004e24:	df002783 	ldbu	fp,158(sp)
10004e28:	2003e416 	blt	r4,zero,10005dbc <___vfprintf_internal_r+0x14f0>
10004e2c:	00ffdfc4 	movi	r3,-129
10004e30:	9d84b03a 	or	r2,r19,r22
10004e34:	90e4703a 	and	r18,r18,r3
10004e38:	10018026 	beq	r2,zero,1000543c <___vfprintf_internal_r+0xb70>
10004e3c:	b003ab26 	beq	r22,zero,10005cec <___vfprintf_internal_r+0x1420>
10004e40:	dc402915 	stw	r17,164(sp)
10004e44:	dc001e04 	addi	r16,sp,120
10004e48:	b023883a 	mov	r17,r22
10004e4c:	402d883a 	mov	r22,r8
10004e50:	9809883a 	mov	r4,r19
10004e54:	880b883a 	mov	r5,r17
10004e58:	01800284 	movi	r6,10
10004e5c:	000f883a 	mov	r7,zero
10004e60:	000cc000 	call	1000cc00 <__umoddi3>
10004e64:	10800c04 	addi	r2,r2,48
10004e68:	843fffc4 	addi	r16,r16,-1
10004e6c:	9809883a 	mov	r4,r19
10004e70:	880b883a 	mov	r5,r17
10004e74:	80800005 	stb	r2,0(r16)
10004e78:	01800284 	movi	r6,10
10004e7c:	000f883a 	mov	r7,zero
10004e80:	000c6040 	call	1000c604 <__udivdi3>
10004e84:	1027883a 	mov	r19,r2
10004e88:	10c4b03a 	or	r2,r2,r3
10004e8c:	1823883a 	mov	r17,r3
10004e90:	103fef1e 	bne	r2,zero,10004e50 <__alt_data_end+0xf8004e50>
10004e94:	d8c02817 	ldw	r3,160(sp)
10004e98:	dc402917 	ldw	r17,164(sp)
10004e9c:	b011883a 	mov	r8,r22
10004ea0:	1c07c83a 	sub	r3,r3,r16
10004ea4:	d8c02b15 	stw	r3,172(sp)
10004ea8:	00005f06 	br	10005028 <___vfprintf_internal_r+0x75c>
10004eac:	8025883a 	mov	r18,r16
10004eb0:	dc002903 	ldbu	r16,164(sp)
10004eb4:	e011883a 	mov	r8,fp
10004eb8:	84003fcc 	andi	r16,r16,255
10004ebc:	80071e1e 	bne	r16,zero,10006b38 <___vfprintf_internal_r+0x226c>
10004ec0:	9080020c 	andi	r2,r18,8
10004ec4:	1004af26 	beq	r2,zero,10006184 <___vfprintf_internal_r+0x18b8>
10004ec8:	d9002e17 	ldw	r4,184(sp)
10004ecc:	d9402e17 	ldw	r5,184(sp)
10004ed0:	d8802e17 	ldw	r2,184(sp)
10004ed4:	21000017 	ldw	r4,0(r4)
10004ed8:	29400117 	ldw	r5,4(r5)
10004edc:	10800204 	addi	r2,r2,8
10004ee0:	d9003615 	stw	r4,216(sp)
10004ee4:	d9403815 	stw	r5,224(sp)
10004ee8:	d8802e15 	stw	r2,184(sp)
10004eec:	d9003617 	ldw	r4,216(sp)
10004ef0:	d9403817 	ldw	r5,224(sp)
10004ef4:	da003d15 	stw	r8,244(sp)
10004ef8:	04000044 	movi	r16,1
10004efc:	000a4940 	call	1000a494 <__fpclassifyd>
10004f00:	da003d17 	ldw	r8,244(sp)
10004f04:	1404441e 	bne	r2,r16,10006018 <___vfprintf_internal_r+0x174c>
10004f08:	d9003617 	ldw	r4,216(sp)
10004f0c:	d9403817 	ldw	r5,224(sp)
10004f10:	000d883a 	mov	r6,zero
10004f14:	000f883a 	mov	r7,zero
10004f18:	000e5a40 	call	1000e5a4 <__ledf2>
10004f1c:	da003d17 	ldw	r8,244(sp)
10004f20:	1005e316 	blt	r2,zero,100066b0 <___vfprintf_internal_r+0x1de4>
10004f24:	df002783 	ldbu	fp,158(sp)
10004f28:	008011c4 	movi	r2,71
10004f2c:	1445580e 	bge	r2,r17,10006490 <___vfprintf_internal_r+0x1bc4>
10004f30:	04040074 	movhi	r16,4097
10004f34:	8409ce04 	addi	r16,r16,10040
10004f38:	00c000c4 	movi	r3,3
10004f3c:	00bfdfc4 	movi	r2,-129
10004f40:	d8c02915 	stw	r3,164(sp)
10004f44:	90a4703a 	and	r18,r18,r2
10004f48:	d8c02b15 	stw	r3,172(sp)
10004f4c:	d8002a15 	stw	zero,168(sp)
10004f50:	d8003215 	stw	zero,200(sp)
10004f54:	00003a06 	br	10005040 <___vfprintf_internal_r+0x774>
10004f58:	84000214 	ori	r16,r16,8
10004f5c:	ac400007 	ldb	r17,0(r21)
10004f60:	003ebc06 	br	10004a54 <__alt_data_end+0xf8004a54>
10004f64:	8025883a 	mov	r18,r16
10004f68:	dc002903 	ldbu	r16,164(sp)
10004f6c:	e011883a 	mov	r8,fp
10004f70:	84003fcc 	andi	r16,r16,255
10004f74:	8007001e 	bne	r16,zero,10006b78 <___vfprintf_internal_r+0x22ac>
10004f78:	94800414 	ori	r18,r18,16
10004f7c:	9080080c 	andi	r2,r18,32
10004f80:	1002fa26 	beq	r2,zero,10005b6c <___vfprintf_internal_r+0x12a0>
10004f84:	d9002e17 	ldw	r4,184(sp)
10004f88:	d9402a17 	ldw	r5,168(sp)
10004f8c:	d8002785 	stb	zero,158(sp)
10004f90:	20800204 	addi	r2,r4,8
10004f94:	24c00017 	ldw	r19,0(r4)
10004f98:	25800117 	ldw	r22,4(r4)
10004f9c:	2804b116 	blt	r5,zero,10006264 <___vfprintf_internal_r+0x1998>
10004fa0:	013fdfc4 	movi	r4,-129
10004fa4:	9d86b03a 	or	r3,r19,r22
10004fa8:	d8802e15 	stw	r2,184(sp)
10004fac:	9124703a 	and	r18,r18,r4
10004fb0:	1802fb1e 	bne	r3,zero,10005ba0 <___vfprintf_internal_r+0x12d4>
10004fb4:	d8c02a17 	ldw	r3,168(sp)
10004fb8:	0039883a 	mov	fp,zero
10004fbc:	1805e526 	beq	r3,zero,10006754 <___vfprintf_internal_r+0x1e88>
10004fc0:	0027883a 	mov	r19,zero
10004fc4:	002d883a 	mov	r22,zero
10004fc8:	dc001e04 	addi	r16,sp,120
10004fcc:	9806d0fa 	srli	r3,r19,3
10004fd0:	b008977a 	slli	r4,r22,29
10004fd4:	b02cd0fa 	srli	r22,r22,3
10004fd8:	9cc001cc 	andi	r19,r19,7
10004fdc:	98800c04 	addi	r2,r19,48
10004fe0:	843fffc4 	addi	r16,r16,-1
10004fe4:	20e6b03a 	or	r19,r4,r3
10004fe8:	80800005 	stb	r2,0(r16)
10004fec:	9d86b03a 	or	r3,r19,r22
10004ff0:	183ff61e 	bne	r3,zero,10004fcc <__alt_data_end+0xf8004fcc>
10004ff4:	90c0004c 	andi	r3,r18,1
10004ff8:	18014126 	beq	r3,zero,10005500 <___vfprintf_internal_r+0xc34>
10004ffc:	10803fcc 	andi	r2,r2,255
10005000:	1080201c 	xori	r2,r2,128
10005004:	10bfe004 	addi	r2,r2,-128
10005008:	00c00c04 	movi	r3,48
1000500c:	10c13c26 	beq	r2,r3,10005500 <___vfprintf_internal_r+0xc34>
10005010:	80ffffc5 	stb	r3,-1(r16)
10005014:	d8c02817 	ldw	r3,160(sp)
10005018:	80bfffc4 	addi	r2,r16,-1
1000501c:	1021883a 	mov	r16,r2
10005020:	1887c83a 	sub	r3,r3,r2
10005024:	d8c02b15 	stw	r3,172(sp)
10005028:	d8802b17 	ldw	r2,172(sp)
1000502c:	d9002a17 	ldw	r4,168(sp)
10005030:	1100010e 	bge	r2,r4,10005038 <___vfprintf_internal_r+0x76c>
10005034:	2005883a 	mov	r2,r4
10005038:	d8802915 	stw	r2,164(sp)
1000503c:	d8003215 	stw	zero,200(sp)
10005040:	e7003fcc 	andi	fp,fp,255
10005044:	e700201c 	xori	fp,fp,128
10005048:	e73fe004 	addi	fp,fp,-128
1000504c:	e0000326 	beq	fp,zero,1000505c <___vfprintf_internal_r+0x790>
10005050:	d8c02917 	ldw	r3,164(sp)
10005054:	18c00044 	addi	r3,r3,1
10005058:	d8c02915 	stw	r3,164(sp)
1000505c:	90c0008c 	andi	r3,r18,2
10005060:	d8c02c15 	stw	r3,176(sp)
10005064:	18000326 	beq	r3,zero,10005074 <___vfprintf_internal_r+0x7a8>
10005068:	d8c02917 	ldw	r3,164(sp)
1000506c:	18c00084 	addi	r3,r3,2
10005070:	d8c02915 	stw	r3,164(sp)
10005074:	90c0210c 	andi	r3,r18,132
10005078:	d8c03015 	stw	r3,192(sp)
1000507c:	1801c51e 	bne	r3,zero,10005794 <___vfprintf_internal_r+0xec8>
10005080:	d9003117 	ldw	r4,196(sp)
10005084:	d8c02917 	ldw	r3,164(sp)
10005088:	20e7c83a 	sub	r19,r4,r3
1000508c:	04c1c10e 	bge	zero,r19,10005794 <___vfprintf_internal_r+0xec8>
10005090:	02400404 	movi	r9,16
10005094:	d8c02017 	ldw	r3,128(sp)
10005098:	d8801f17 	ldw	r2,124(sp)
1000509c:	4cc52f0e 	bge	r9,r19,1000655c <___vfprintf_internal_r+0x1c90>
100050a0:	01440074 	movhi	r5,4097
100050a4:	2949e184 	addi	r5,r5,10118
100050a8:	dc403b15 	stw	r17,236(sp)
100050ac:	d9403515 	stw	r5,212(sp)
100050b0:	9823883a 	mov	r17,r19
100050b4:	482d883a 	mov	r22,r9
100050b8:	9027883a 	mov	r19,r18
100050bc:	070001c4 	movi	fp,7
100050c0:	8025883a 	mov	r18,r16
100050c4:	dc002d17 	ldw	r16,180(sp)
100050c8:	00000306 	br	100050d8 <___vfprintf_internal_r+0x80c>
100050cc:	8c7ffc04 	addi	r17,r17,-16
100050d0:	42000204 	addi	r8,r8,8
100050d4:	b440130e 	bge	r22,r17,10005124 <___vfprintf_internal_r+0x858>
100050d8:	01040074 	movhi	r4,4097
100050dc:	18c00404 	addi	r3,r3,16
100050e0:	10800044 	addi	r2,r2,1
100050e4:	2109e184 	addi	r4,r4,10118
100050e8:	41000015 	stw	r4,0(r8)
100050ec:	45800115 	stw	r22,4(r8)
100050f0:	d8c02015 	stw	r3,128(sp)
100050f4:	d8801f15 	stw	r2,124(sp)
100050f8:	e0bff40e 	bge	fp,r2,100050cc <__alt_data_end+0xf80050cc>
100050fc:	d9801e04 	addi	r6,sp,120
10005100:	b80b883a 	mov	r5,r23
10005104:	8009883a 	mov	r4,r16
10005108:	000a9e40 	call	1000a9e4 <__sprint_r>
1000510c:	103ef31e 	bne	r2,zero,10004cdc <__alt_data_end+0xf8004cdc>
10005110:	8c7ffc04 	addi	r17,r17,-16
10005114:	d8c02017 	ldw	r3,128(sp)
10005118:	d8801f17 	ldw	r2,124(sp)
1000511c:	da000404 	addi	r8,sp,16
10005120:	b47fed16 	blt	r22,r17,100050d8 <__alt_data_end+0xf80050d8>
10005124:	9021883a 	mov	r16,r18
10005128:	9825883a 	mov	r18,r19
1000512c:	8827883a 	mov	r19,r17
10005130:	dc403b17 	ldw	r17,236(sp)
10005134:	d9403517 	ldw	r5,212(sp)
10005138:	98c7883a 	add	r3,r19,r3
1000513c:	10800044 	addi	r2,r2,1
10005140:	41400015 	stw	r5,0(r8)
10005144:	44c00115 	stw	r19,4(r8)
10005148:	d8c02015 	stw	r3,128(sp)
1000514c:	d8801f15 	stw	r2,124(sp)
10005150:	010001c4 	movi	r4,7
10005154:	2082c516 	blt	r4,r2,10005c6c <___vfprintf_internal_r+0x13a0>
10005158:	df002787 	ldb	fp,158(sp)
1000515c:	42000204 	addi	r8,r8,8
10005160:	e0000c26 	beq	fp,zero,10005194 <___vfprintf_internal_r+0x8c8>
10005164:	d8801f17 	ldw	r2,124(sp)
10005168:	d9002784 	addi	r4,sp,158
1000516c:	18c00044 	addi	r3,r3,1
10005170:	10800044 	addi	r2,r2,1
10005174:	41000015 	stw	r4,0(r8)
10005178:	01000044 	movi	r4,1
1000517c:	41000115 	stw	r4,4(r8)
10005180:	d8c02015 	stw	r3,128(sp)
10005184:	d8801f15 	stw	r2,124(sp)
10005188:	010001c4 	movi	r4,7
1000518c:	20825e16 	blt	r4,r2,10005b08 <___vfprintf_internal_r+0x123c>
10005190:	42000204 	addi	r8,r8,8
10005194:	d8802c17 	ldw	r2,176(sp)
10005198:	10000c26 	beq	r2,zero,100051cc <___vfprintf_internal_r+0x900>
1000519c:	d8801f17 	ldw	r2,124(sp)
100051a0:	d9002704 	addi	r4,sp,156
100051a4:	18c00084 	addi	r3,r3,2
100051a8:	10800044 	addi	r2,r2,1
100051ac:	41000015 	stw	r4,0(r8)
100051b0:	01000084 	movi	r4,2
100051b4:	41000115 	stw	r4,4(r8)
100051b8:	d8c02015 	stw	r3,128(sp)
100051bc:	d8801f15 	stw	r2,124(sp)
100051c0:	010001c4 	movi	r4,7
100051c4:	20825816 	blt	r4,r2,10005b28 <___vfprintf_internal_r+0x125c>
100051c8:	42000204 	addi	r8,r8,8
100051cc:	d9003017 	ldw	r4,192(sp)
100051d0:	00802004 	movi	r2,128
100051d4:	2081bb26 	beq	r4,r2,100058c4 <___vfprintf_internal_r+0xff8>
100051d8:	d9402a17 	ldw	r5,168(sp)
100051dc:	d8802b17 	ldw	r2,172(sp)
100051e0:	28adc83a 	sub	r22,r5,r2
100051e4:	0580310e 	bge	zero,r22,100052ac <___vfprintf_internal_r+0x9e0>
100051e8:	07000404 	movi	fp,16
100051ec:	d8801f17 	ldw	r2,124(sp)
100051f0:	e584360e 	bge	fp,r22,100062cc <___vfprintf_internal_r+0x1a00>
100051f4:	01440074 	movhi	r5,4097
100051f8:	2949dd84 	addi	r5,r5,10102
100051fc:	dc402a15 	stw	r17,168(sp)
10005200:	d9402c15 	stw	r5,176(sp)
10005204:	b023883a 	mov	r17,r22
10005208:	04c001c4 	movi	r19,7
1000520c:	a82d883a 	mov	r22,r21
10005210:	902b883a 	mov	r21,r18
10005214:	8025883a 	mov	r18,r16
10005218:	dc002d17 	ldw	r16,180(sp)
1000521c:	00000306 	br	1000522c <___vfprintf_internal_r+0x960>
10005220:	8c7ffc04 	addi	r17,r17,-16
10005224:	42000204 	addi	r8,r8,8
10005228:	e440110e 	bge	fp,r17,10005270 <___vfprintf_internal_r+0x9a4>
1000522c:	18c00404 	addi	r3,r3,16
10005230:	10800044 	addi	r2,r2,1
10005234:	45000015 	stw	r20,0(r8)
10005238:	47000115 	stw	fp,4(r8)
1000523c:	d8c02015 	stw	r3,128(sp)
10005240:	d8801f15 	stw	r2,124(sp)
10005244:	98bff60e 	bge	r19,r2,10005220 <__alt_data_end+0xf8005220>
10005248:	d9801e04 	addi	r6,sp,120
1000524c:	b80b883a 	mov	r5,r23
10005250:	8009883a 	mov	r4,r16
10005254:	000a9e40 	call	1000a9e4 <__sprint_r>
10005258:	103ea01e 	bne	r2,zero,10004cdc <__alt_data_end+0xf8004cdc>
1000525c:	8c7ffc04 	addi	r17,r17,-16
10005260:	d8c02017 	ldw	r3,128(sp)
10005264:	d8801f17 	ldw	r2,124(sp)
10005268:	da000404 	addi	r8,sp,16
1000526c:	e47fef16 	blt	fp,r17,1000522c <__alt_data_end+0xf800522c>
10005270:	9021883a 	mov	r16,r18
10005274:	a825883a 	mov	r18,r21
10005278:	b02b883a 	mov	r21,r22
1000527c:	882d883a 	mov	r22,r17
10005280:	dc402a17 	ldw	r17,168(sp)
10005284:	d9002c17 	ldw	r4,176(sp)
10005288:	1d87883a 	add	r3,r3,r22
1000528c:	10800044 	addi	r2,r2,1
10005290:	41000015 	stw	r4,0(r8)
10005294:	45800115 	stw	r22,4(r8)
10005298:	d8c02015 	stw	r3,128(sp)
1000529c:	d8801f15 	stw	r2,124(sp)
100052a0:	010001c4 	movi	r4,7
100052a4:	20821016 	blt	r4,r2,10005ae8 <___vfprintf_internal_r+0x121c>
100052a8:	42000204 	addi	r8,r8,8
100052ac:	9080400c 	andi	r2,r18,256
100052b0:	10013a1e 	bne	r2,zero,1000579c <___vfprintf_internal_r+0xed0>
100052b4:	d9402b17 	ldw	r5,172(sp)
100052b8:	d8801f17 	ldw	r2,124(sp)
100052bc:	44000015 	stw	r16,0(r8)
100052c0:	1947883a 	add	r3,r3,r5
100052c4:	10800044 	addi	r2,r2,1
100052c8:	41400115 	stw	r5,4(r8)
100052cc:	d8c02015 	stw	r3,128(sp)
100052d0:	d8801f15 	stw	r2,124(sp)
100052d4:	010001c4 	movi	r4,7
100052d8:	2081f516 	blt	r4,r2,10005ab0 <___vfprintf_internal_r+0x11e4>
100052dc:	42000204 	addi	r8,r8,8
100052e0:	9480010c 	andi	r18,r18,4
100052e4:	90003226 	beq	r18,zero,100053b0 <___vfprintf_internal_r+0xae4>
100052e8:	d9403117 	ldw	r5,196(sp)
100052ec:	d8802917 	ldw	r2,164(sp)
100052f0:	28a1c83a 	sub	r16,r5,r2
100052f4:	04002e0e 	bge	zero,r16,100053b0 <___vfprintf_internal_r+0xae4>
100052f8:	04400404 	movi	r17,16
100052fc:	d8801f17 	ldw	r2,124(sp)
10005300:	8c04c40e 	bge	r17,r16,10006614 <___vfprintf_internal_r+0x1d48>
10005304:	01440074 	movhi	r5,4097
10005308:	2949e184 	addi	r5,r5,10118
1000530c:	d9403515 	stw	r5,212(sp)
10005310:	048001c4 	movi	r18,7
10005314:	dcc02d17 	ldw	r19,180(sp)
10005318:	00000306 	br	10005328 <___vfprintf_internal_r+0xa5c>
1000531c:	843ffc04 	addi	r16,r16,-16
10005320:	42000204 	addi	r8,r8,8
10005324:	8c00130e 	bge	r17,r16,10005374 <___vfprintf_internal_r+0xaa8>
10005328:	01040074 	movhi	r4,4097
1000532c:	18c00404 	addi	r3,r3,16
10005330:	10800044 	addi	r2,r2,1
10005334:	2109e184 	addi	r4,r4,10118
10005338:	41000015 	stw	r4,0(r8)
1000533c:	44400115 	stw	r17,4(r8)
10005340:	d8c02015 	stw	r3,128(sp)
10005344:	d8801f15 	stw	r2,124(sp)
10005348:	90bff40e 	bge	r18,r2,1000531c <__alt_data_end+0xf800531c>
1000534c:	d9801e04 	addi	r6,sp,120
10005350:	b80b883a 	mov	r5,r23
10005354:	9809883a 	mov	r4,r19
10005358:	000a9e40 	call	1000a9e4 <__sprint_r>
1000535c:	103e5f1e 	bne	r2,zero,10004cdc <__alt_data_end+0xf8004cdc>
10005360:	843ffc04 	addi	r16,r16,-16
10005364:	d8c02017 	ldw	r3,128(sp)
10005368:	d8801f17 	ldw	r2,124(sp)
1000536c:	da000404 	addi	r8,sp,16
10005370:	8c3fed16 	blt	r17,r16,10005328 <__alt_data_end+0xf8005328>
10005374:	d9403517 	ldw	r5,212(sp)
10005378:	1c07883a 	add	r3,r3,r16
1000537c:	10800044 	addi	r2,r2,1
10005380:	41400015 	stw	r5,0(r8)
10005384:	44000115 	stw	r16,4(r8)
10005388:	d8c02015 	stw	r3,128(sp)
1000538c:	d8801f15 	stw	r2,124(sp)
10005390:	010001c4 	movi	r4,7
10005394:	2080060e 	bge	r4,r2,100053b0 <___vfprintf_internal_r+0xae4>
10005398:	d9002d17 	ldw	r4,180(sp)
1000539c:	d9801e04 	addi	r6,sp,120
100053a0:	b80b883a 	mov	r5,r23
100053a4:	000a9e40 	call	1000a9e4 <__sprint_r>
100053a8:	103e4c1e 	bne	r2,zero,10004cdc <__alt_data_end+0xf8004cdc>
100053ac:	d8c02017 	ldw	r3,128(sp)
100053b0:	d8803117 	ldw	r2,196(sp)
100053b4:	d9002917 	ldw	r4,164(sp)
100053b8:	1100010e 	bge	r2,r4,100053c0 <___vfprintf_internal_r+0xaf4>
100053bc:	2005883a 	mov	r2,r4
100053c0:	d9402f17 	ldw	r5,188(sp)
100053c4:	288b883a 	add	r5,r5,r2
100053c8:	d9402f15 	stw	r5,188(sp)
100053cc:	1801c01e 	bne	r3,zero,10005ad0 <___vfprintf_internal_r+0x1204>
100053d0:	a8800007 	ldb	r2,0(r21)
100053d4:	d8001f15 	stw	zero,124(sp)
100053d8:	da000404 	addi	r8,sp,16
100053dc:	103d751e 	bne	r2,zero,100049b4 <__alt_data_end+0xf80049b4>
100053e0:	a823883a 	mov	r17,r21
100053e4:	003d8b06 	br	10004a14 <__alt_data_end+0xf8004a14>
100053e8:	8025883a 	mov	r18,r16
100053ec:	dc002903 	ldbu	r16,164(sp)
100053f0:	e011883a 	mov	r8,fp
100053f4:	84003fcc 	andi	r16,r16,255
100053f8:	8005e51e 	bne	r16,zero,10006b90 <___vfprintf_internal_r+0x22c4>
100053fc:	94800414 	ori	r18,r18,16
10005400:	9080080c 	andi	r2,r18,32
10005404:	10022b26 	beq	r2,zero,10005cb4 <___vfprintf_internal_r+0x13e8>
10005408:	d9002e17 	ldw	r4,184(sp)
1000540c:	d9402a17 	ldw	r5,168(sp)
10005410:	d8002785 	stb	zero,158(sp)
10005414:	20c00204 	addi	r3,r4,8
10005418:	24c00017 	ldw	r19,0(r4)
1000541c:	25800117 	ldw	r22,4(r4)
10005420:	28042e16 	blt	r5,zero,100064dc <___vfprintf_internal_r+0x1c10>
10005424:	013fdfc4 	movi	r4,-129
10005428:	9d84b03a 	or	r2,r19,r22
1000542c:	d8c02e15 	stw	r3,184(sp)
10005430:	9124703a 	and	r18,r18,r4
10005434:	0039883a 	mov	fp,zero
10005438:	103e801e 	bne	r2,zero,10004e3c <__alt_data_end+0xf8004e3c>
1000543c:	d9002a17 	ldw	r4,168(sp)
10005440:	2002e01e 	bne	r4,zero,10005fc4 <___vfprintf_internal_r+0x16f8>
10005444:	d8002a15 	stw	zero,168(sp)
10005448:	d8002b15 	stw	zero,172(sp)
1000544c:	dc001e04 	addi	r16,sp,120
10005450:	003ef506 	br	10005028 <__alt_data_end+0xf8005028>
10005454:	8025883a 	mov	r18,r16
10005458:	dc002903 	ldbu	r16,164(sp)
1000545c:	e011883a 	mov	r8,fp
10005460:	84003fcc 	andi	r16,r16,255
10005464:	8005ba1e 	bne	r16,zero,10006b50 <___vfprintf_internal_r+0x2284>
10005468:	01040074 	movhi	r4,4097
1000546c:	2109d104 	addi	r4,r4,10052
10005470:	d9003915 	stw	r4,228(sp)
10005474:	9080080c 	andi	r2,r18,32
10005478:	10006126 	beq	r2,zero,10005600 <___vfprintf_internal_r+0xd34>
1000547c:	d9402e17 	ldw	r5,184(sp)
10005480:	2cc00017 	ldw	r19,0(r5)
10005484:	2d800117 	ldw	r22,4(r5)
10005488:	29400204 	addi	r5,r5,8
1000548c:	d9402e15 	stw	r5,184(sp)
10005490:	9080004c 	andi	r2,r18,1
10005494:	1001ac26 	beq	r2,zero,10005b48 <___vfprintf_internal_r+0x127c>
10005498:	9d84b03a 	or	r2,r19,r22
1000549c:	10038526 	beq	r2,zero,100062b4 <___vfprintf_internal_r+0x19e8>
100054a0:	d8c02a17 	ldw	r3,168(sp)
100054a4:	00800c04 	movi	r2,48
100054a8:	d8802705 	stb	r2,156(sp)
100054ac:	dc402745 	stb	r17,157(sp)
100054b0:	d8002785 	stb	zero,158(sp)
100054b4:	90800094 	ori	r2,r18,2
100054b8:	18047916 	blt	r3,zero,100066a0 <___vfprintf_internal_r+0x1dd4>
100054bc:	00bfdfc4 	movi	r2,-129
100054c0:	90a4703a 	and	r18,r18,r2
100054c4:	94800094 	ori	r18,r18,2
100054c8:	0039883a 	mov	fp,zero
100054cc:	d9003917 	ldw	r4,228(sp)
100054d0:	dc001e04 	addi	r16,sp,120
100054d4:	988003cc 	andi	r2,r19,15
100054d8:	b006973a 	slli	r3,r22,28
100054dc:	2085883a 	add	r2,r4,r2
100054e0:	9826d13a 	srli	r19,r19,4
100054e4:	10800003 	ldbu	r2,0(r2)
100054e8:	b02cd13a 	srli	r22,r22,4
100054ec:	843fffc4 	addi	r16,r16,-1
100054f0:	1ce6b03a 	or	r19,r3,r19
100054f4:	80800005 	stb	r2,0(r16)
100054f8:	9d84b03a 	or	r2,r19,r22
100054fc:	103ff51e 	bne	r2,zero,100054d4 <__alt_data_end+0xf80054d4>
10005500:	d8c02817 	ldw	r3,160(sp)
10005504:	1c07c83a 	sub	r3,r3,r16
10005508:	d8c02b15 	stw	r3,172(sp)
1000550c:	003ec606 	br	10005028 <__alt_data_end+0xf8005028>
10005510:	8025883a 	mov	r18,r16
10005514:	dc002903 	ldbu	r16,164(sp)
10005518:	e011883a 	mov	r8,fp
1000551c:	84003fcc 	andi	r16,r16,255
10005520:	803e9626 	beq	r16,zero,10004f7c <__alt_data_end+0xf8004f7c>
10005524:	d8c02b03 	ldbu	r3,172(sp)
10005528:	d8c02785 	stb	r3,158(sp)
1000552c:	003e9306 	br	10004f7c <__alt_data_end+0xf8004f7c>
10005530:	00c00044 	movi	r3,1
10005534:	d8c02905 	stb	r3,164(sp)
10005538:	00c00ac4 	movi	r3,43
1000553c:	d8c02b05 	stb	r3,172(sp)
10005540:	ac400007 	ldb	r17,0(r21)
10005544:	003d4306 	br	10004a54 <__alt_data_end+0xf8004a54>
10005548:	84000814 	ori	r16,r16,32
1000554c:	ac400007 	ldb	r17,0(r21)
10005550:	003d4006 	br	10004a54 <__alt_data_end+0xf8004a54>
10005554:	d8802e17 	ldw	r2,184(sp)
10005558:	8025883a 	mov	r18,r16
1000555c:	d8002785 	stb	zero,158(sp)
10005560:	14000017 	ldw	r16,0(r2)
10005564:	e011883a 	mov	r8,fp
10005568:	14c00104 	addi	r19,r2,4
1000556c:	80042d26 	beq	r16,zero,10006624 <___vfprintf_internal_r+0x1d58>
10005570:	d8c02a17 	ldw	r3,168(sp)
10005574:	1803e416 	blt	r3,zero,10006508 <___vfprintf_internal_r+0x1c3c>
10005578:	180d883a 	mov	r6,r3
1000557c:	000b883a 	mov	r5,zero
10005580:	8009883a 	mov	r4,r16
10005584:	df003d15 	stw	fp,244(sp)
10005588:	0008fd40 	call	10008fd4 <memchr>
1000558c:	da003d17 	ldw	r8,244(sp)
10005590:	10046826 	beq	r2,zero,10006734 <___vfprintf_internal_r+0x1e68>
10005594:	1405c83a 	sub	r2,r2,r16
10005598:	d8802b15 	stw	r2,172(sp)
1000559c:	1003e016 	blt	r2,zero,10006520 <___vfprintf_internal_r+0x1c54>
100055a0:	df002783 	ldbu	fp,158(sp)
100055a4:	d8802915 	stw	r2,164(sp)
100055a8:	dcc02e15 	stw	r19,184(sp)
100055ac:	d8002a15 	stw	zero,168(sp)
100055b0:	d8003215 	stw	zero,200(sp)
100055b4:	003ea206 	br	10005040 <__alt_data_end+0xf8005040>
100055b8:	8025883a 	mov	r18,r16
100055bc:	dc002903 	ldbu	r16,164(sp)
100055c0:	e011883a 	mov	r8,fp
100055c4:	84003fcc 	andi	r16,r16,255
100055c8:	803f8d26 	beq	r16,zero,10005400 <__alt_data_end+0xf8005400>
100055cc:	d8c02b03 	ldbu	r3,172(sp)
100055d0:	d8c02785 	stb	r3,158(sp)
100055d4:	003f8a06 	br	10005400 <__alt_data_end+0xf8005400>
100055d8:	8025883a 	mov	r18,r16
100055dc:	dc002903 	ldbu	r16,164(sp)
100055e0:	e011883a 	mov	r8,fp
100055e4:	84003fcc 	andi	r16,r16,255
100055e8:	8005661e 	bne	r16,zero,10006b84 <___vfprintf_internal_r+0x22b8>
100055ec:	01040074 	movhi	r4,4097
100055f0:	2109d604 	addi	r4,r4,10072
100055f4:	d9003915 	stw	r4,228(sp)
100055f8:	9080080c 	andi	r2,r18,32
100055fc:	103f9f1e 	bne	r2,zero,1000547c <__alt_data_end+0xf800547c>
10005600:	9080040c 	andi	r2,r18,16
10005604:	1002eb26 	beq	r2,zero,100061b4 <___vfprintf_internal_r+0x18e8>
10005608:	d8802e17 	ldw	r2,184(sp)
1000560c:	002d883a 	mov	r22,zero
10005610:	14c00017 	ldw	r19,0(r2)
10005614:	10800104 	addi	r2,r2,4
10005618:	d8802e15 	stw	r2,184(sp)
1000561c:	003f9c06 	br	10005490 <__alt_data_end+0xf8005490>
10005620:	d8802b07 	ldb	r2,172(sp)
10005624:	1002e11e 	bne	r2,zero,100061ac <___vfprintf_internal_r+0x18e0>
10005628:	00c00044 	movi	r3,1
1000562c:	d8c02905 	stb	r3,164(sp)
10005630:	00c00804 	movi	r3,32
10005634:	d8c02b05 	stb	r3,172(sp)
10005638:	ac400007 	ldb	r17,0(r21)
1000563c:	003d0506 	br	10004a54 <__alt_data_end+0xf8004a54>
10005640:	84000054 	ori	r16,r16,1
10005644:	ac400007 	ldb	r17,0(r21)
10005648:	003d0206 	br	10004a54 <__alt_data_end+0xf8004a54>
1000564c:	8025883a 	mov	r18,r16
10005650:	dc002903 	ldbu	r16,164(sp)
10005654:	e011883a 	mov	r8,fp
10005658:	84003fcc 	andi	r16,r16,255
1000565c:	803de726 	beq	r16,zero,10004dfc <__alt_data_end+0xf8004dfc>
10005660:	d8c02b03 	ldbu	r3,172(sp)
10005664:	d8c02785 	stb	r3,158(sp)
10005668:	003de406 	br	10004dfc <__alt_data_end+0xf8004dfc>
1000566c:	84001014 	ori	r16,r16,64
10005670:	ac400007 	ldb	r17,0(r21)
10005674:	003cf706 	br	10004a54 <__alt_data_end+0xf8004a54>
10005678:	ac400007 	ldb	r17,0(r21)
1000567c:	00801b04 	movi	r2,108
10005680:	88838f26 	beq	r17,r2,100064c0 <___vfprintf_internal_r+0x1bf4>
10005684:	84000414 	ori	r16,r16,16
10005688:	003cf206 	br	10004a54 <__alt_data_end+0xf8004a54>
1000568c:	8025883a 	mov	r18,r16
10005690:	dc002903 	ldbu	r16,164(sp)
10005694:	e011883a 	mov	r8,fp
10005698:	84003fcc 	andi	r16,r16,255
1000569c:	80053f1e 	bne	r16,zero,10006b9c <___vfprintf_internal_r+0x22d0>
100056a0:	9080080c 	andi	r2,r18,32
100056a4:	1002d226 	beq	r2,zero,100061f0 <___vfprintf_internal_r+0x1924>
100056a8:	d9002e17 	ldw	r4,184(sp)
100056ac:	d9402f17 	ldw	r5,188(sp)
100056b0:	20800017 	ldw	r2,0(r4)
100056b4:	2807d7fa 	srai	r3,r5,31
100056b8:	21000104 	addi	r4,r4,4
100056bc:	d9002e15 	stw	r4,184(sp)
100056c0:	11400015 	stw	r5,0(r2)
100056c4:	10c00115 	stw	r3,4(r2)
100056c8:	003cb806 	br	100049ac <__alt_data_end+0xf80049ac>
100056cc:	d8c02e17 	ldw	r3,184(sp)
100056d0:	d9002e17 	ldw	r4,184(sp)
100056d4:	8025883a 	mov	r18,r16
100056d8:	18800017 	ldw	r2,0(r3)
100056dc:	21000104 	addi	r4,r4,4
100056e0:	00c00044 	movi	r3,1
100056e4:	e011883a 	mov	r8,fp
100056e8:	d8c02915 	stw	r3,164(sp)
100056ec:	d8002785 	stb	zero,158(sp)
100056f0:	d8801405 	stb	r2,80(sp)
100056f4:	d9002e15 	stw	r4,184(sp)
100056f8:	d8c02b15 	stw	r3,172(sp)
100056fc:	d8002a15 	stw	zero,168(sp)
10005700:	d8003215 	stw	zero,200(sp)
10005704:	dc001404 	addi	r16,sp,80
10005708:	0039883a 	mov	fp,zero
1000570c:	003e5306 	br	1000505c <__alt_data_end+0xf800505c>
10005710:	01040074 	movhi	r4,4097
10005714:	2109d604 	addi	r4,r4,10072
10005718:	0039883a 	mov	fp,zero
1000571c:	d9003915 	stw	r4,228(sp)
10005720:	04401e04 	movi	r17,120
10005724:	003f6906 	br	100054cc <__alt_data_end+0xf80054cc>
10005728:	8025883a 	mov	r18,r16
1000572c:	dc002903 	ldbu	r16,164(sp)
10005730:	e011883a 	mov	r8,fp
10005734:	84003fcc 	andi	r16,r16,255
10005738:	8005081e 	bne	r16,zero,10006b5c <___vfprintf_internal_r+0x2290>
1000573c:	883d6126 	beq	r17,zero,10004cc4 <__alt_data_end+0xf8004cc4>
10005740:	00c00044 	movi	r3,1
10005744:	d8c02915 	stw	r3,164(sp)
10005748:	dc401405 	stb	r17,80(sp)
1000574c:	d8002785 	stb	zero,158(sp)
10005750:	003fe906 	br	100056f8 <__alt_data_end+0xf80056f8>
10005754:	01440074 	movhi	r5,4097
10005758:	2949d604 	addi	r5,r5,10072
1000575c:	d9403915 	stw	r5,228(sp)
10005760:	d8c02e15 	stw	r3,184(sp)
10005764:	1025883a 	mov	r18,r2
10005768:	04401e04 	movi	r17,120
1000576c:	9d84b03a 	or	r2,r19,r22
10005770:	1000fc1e 	bne	r2,zero,10005b64 <___vfprintf_internal_r+0x1298>
10005774:	0039883a 	mov	fp,zero
10005778:	00800084 	movi	r2,2
1000577c:	10803fcc 	andi	r2,r2,255
10005780:	00c00044 	movi	r3,1
10005784:	10c20f26 	beq	r2,r3,10005fc4 <___vfprintf_internal_r+0x16f8>
10005788:	00c00084 	movi	r3,2
1000578c:	10fd3326 	beq	r2,r3,10004c5c <__alt_data_end+0xf8004c5c>
10005790:	003e0b06 	br	10004fc0 <__alt_data_end+0xf8004fc0>
10005794:	d8c02017 	ldw	r3,128(sp)
10005798:	003e7106 	br	10005160 <__alt_data_end+0xf8005160>
1000579c:	00801944 	movi	r2,101
100057a0:	14407e0e 	bge	r2,r17,1000599c <___vfprintf_internal_r+0x10d0>
100057a4:	d9003617 	ldw	r4,216(sp)
100057a8:	d9403817 	ldw	r5,224(sp)
100057ac:	000d883a 	mov	r6,zero
100057b0:	000f883a 	mov	r7,zero
100057b4:	d8c03c15 	stw	r3,240(sp)
100057b8:	da003d15 	stw	r8,244(sp)
100057bc:	000e4400 	call	1000e440 <__eqdf2>
100057c0:	d8c03c17 	ldw	r3,240(sp)
100057c4:	da003d17 	ldw	r8,244(sp)
100057c8:	1000f71e 	bne	r2,zero,10005ba8 <___vfprintf_internal_r+0x12dc>
100057cc:	d8801f17 	ldw	r2,124(sp)
100057d0:	01040074 	movhi	r4,4097
100057d4:	2109dd04 	addi	r4,r4,10100
100057d8:	18c00044 	addi	r3,r3,1
100057dc:	10800044 	addi	r2,r2,1
100057e0:	41000015 	stw	r4,0(r8)
100057e4:	01000044 	movi	r4,1
100057e8:	41000115 	stw	r4,4(r8)
100057ec:	d8c02015 	stw	r3,128(sp)
100057f0:	d8801f15 	stw	r2,124(sp)
100057f4:	010001c4 	movi	r4,7
100057f8:	2082b816 	blt	r4,r2,100062dc <___vfprintf_internal_r+0x1a10>
100057fc:	42000204 	addi	r8,r8,8
10005800:	d8802617 	ldw	r2,152(sp)
10005804:	d9403317 	ldw	r5,204(sp)
10005808:	11400216 	blt	r2,r5,10005814 <___vfprintf_internal_r+0xf48>
1000580c:	9080004c 	andi	r2,r18,1
10005810:	103eb326 	beq	r2,zero,100052e0 <__alt_data_end+0xf80052e0>
10005814:	d8803717 	ldw	r2,220(sp)
10005818:	d9003417 	ldw	r4,208(sp)
1000581c:	d9403717 	ldw	r5,220(sp)
10005820:	1887883a 	add	r3,r3,r2
10005824:	d8801f17 	ldw	r2,124(sp)
10005828:	41000015 	stw	r4,0(r8)
1000582c:	41400115 	stw	r5,4(r8)
10005830:	10800044 	addi	r2,r2,1
10005834:	d8c02015 	stw	r3,128(sp)
10005838:	d8801f15 	stw	r2,124(sp)
1000583c:	010001c4 	movi	r4,7
10005840:	20832916 	blt	r4,r2,100064e8 <___vfprintf_internal_r+0x1c1c>
10005844:	42000204 	addi	r8,r8,8
10005848:	d8803317 	ldw	r2,204(sp)
1000584c:	143fffc4 	addi	r16,r2,-1
10005850:	043ea30e 	bge	zero,r16,100052e0 <__alt_data_end+0xf80052e0>
10005854:	04400404 	movi	r17,16
10005858:	d8801f17 	ldw	r2,124(sp)
1000585c:	8c00880e 	bge	r17,r16,10005a80 <___vfprintf_internal_r+0x11b4>
10005860:	01440074 	movhi	r5,4097
10005864:	2949dd84 	addi	r5,r5,10102
10005868:	d9402c15 	stw	r5,176(sp)
1000586c:	058001c4 	movi	r22,7
10005870:	dcc02d17 	ldw	r19,180(sp)
10005874:	00000306 	br	10005884 <___vfprintf_internal_r+0xfb8>
10005878:	42000204 	addi	r8,r8,8
1000587c:	843ffc04 	addi	r16,r16,-16
10005880:	8c00820e 	bge	r17,r16,10005a8c <___vfprintf_internal_r+0x11c0>
10005884:	18c00404 	addi	r3,r3,16
10005888:	10800044 	addi	r2,r2,1
1000588c:	45000015 	stw	r20,0(r8)
10005890:	44400115 	stw	r17,4(r8)
10005894:	d8c02015 	stw	r3,128(sp)
10005898:	d8801f15 	stw	r2,124(sp)
1000589c:	b0bff60e 	bge	r22,r2,10005878 <__alt_data_end+0xf8005878>
100058a0:	d9801e04 	addi	r6,sp,120
100058a4:	b80b883a 	mov	r5,r23
100058a8:	9809883a 	mov	r4,r19
100058ac:	000a9e40 	call	1000a9e4 <__sprint_r>
100058b0:	103d0a1e 	bne	r2,zero,10004cdc <__alt_data_end+0xf8004cdc>
100058b4:	d8c02017 	ldw	r3,128(sp)
100058b8:	d8801f17 	ldw	r2,124(sp)
100058bc:	da000404 	addi	r8,sp,16
100058c0:	003fee06 	br	1000587c <__alt_data_end+0xf800587c>
100058c4:	d9403117 	ldw	r5,196(sp)
100058c8:	d8802917 	ldw	r2,164(sp)
100058cc:	28adc83a 	sub	r22,r5,r2
100058d0:	05be410e 	bge	zero,r22,100051d8 <__alt_data_end+0xf80051d8>
100058d4:	07000404 	movi	fp,16
100058d8:	d8801f17 	ldw	r2,124(sp)
100058dc:	e5838f0e 	bge	fp,r22,1000671c <___vfprintf_internal_r+0x1e50>
100058e0:	01440074 	movhi	r5,4097
100058e4:	2949dd84 	addi	r5,r5,10102
100058e8:	dc403015 	stw	r17,192(sp)
100058ec:	d9402c15 	stw	r5,176(sp)
100058f0:	b023883a 	mov	r17,r22
100058f4:	04c001c4 	movi	r19,7
100058f8:	a82d883a 	mov	r22,r21
100058fc:	902b883a 	mov	r21,r18
10005900:	8025883a 	mov	r18,r16
10005904:	dc002d17 	ldw	r16,180(sp)
10005908:	00000306 	br	10005918 <___vfprintf_internal_r+0x104c>
1000590c:	8c7ffc04 	addi	r17,r17,-16
10005910:	42000204 	addi	r8,r8,8
10005914:	e440110e 	bge	fp,r17,1000595c <___vfprintf_internal_r+0x1090>
10005918:	18c00404 	addi	r3,r3,16
1000591c:	10800044 	addi	r2,r2,1
10005920:	45000015 	stw	r20,0(r8)
10005924:	47000115 	stw	fp,4(r8)
10005928:	d8c02015 	stw	r3,128(sp)
1000592c:	d8801f15 	stw	r2,124(sp)
10005930:	98bff60e 	bge	r19,r2,1000590c <__alt_data_end+0xf800590c>
10005934:	d9801e04 	addi	r6,sp,120
10005938:	b80b883a 	mov	r5,r23
1000593c:	8009883a 	mov	r4,r16
10005940:	000a9e40 	call	1000a9e4 <__sprint_r>
10005944:	103ce51e 	bne	r2,zero,10004cdc <__alt_data_end+0xf8004cdc>
10005948:	8c7ffc04 	addi	r17,r17,-16
1000594c:	d8c02017 	ldw	r3,128(sp)
10005950:	d8801f17 	ldw	r2,124(sp)
10005954:	da000404 	addi	r8,sp,16
10005958:	e47fef16 	blt	fp,r17,10005918 <__alt_data_end+0xf8005918>
1000595c:	9021883a 	mov	r16,r18
10005960:	a825883a 	mov	r18,r21
10005964:	b02b883a 	mov	r21,r22
10005968:	882d883a 	mov	r22,r17
1000596c:	dc403017 	ldw	r17,192(sp)
10005970:	d9002c17 	ldw	r4,176(sp)
10005974:	1d87883a 	add	r3,r3,r22
10005978:	10800044 	addi	r2,r2,1
1000597c:	41000015 	stw	r4,0(r8)
10005980:	45800115 	stw	r22,4(r8)
10005984:	d8c02015 	stw	r3,128(sp)
10005988:	d8801f15 	stw	r2,124(sp)
1000598c:	010001c4 	movi	r4,7
10005990:	20818e16 	blt	r4,r2,10005fcc <___vfprintf_internal_r+0x1700>
10005994:	42000204 	addi	r8,r8,8
10005998:	003e0f06 	br	100051d8 <__alt_data_end+0xf80051d8>
1000599c:	d9403317 	ldw	r5,204(sp)
100059a0:	00800044 	movi	r2,1
100059a4:	18c00044 	addi	r3,r3,1
100059a8:	1141530e 	bge	r2,r5,10005ef8 <___vfprintf_internal_r+0x162c>
100059ac:	dc401f17 	ldw	r17,124(sp)
100059b0:	00800044 	movi	r2,1
100059b4:	40800115 	stw	r2,4(r8)
100059b8:	8c400044 	addi	r17,r17,1
100059bc:	44000015 	stw	r16,0(r8)
100059c0:	d8c02015 	stw	r3,128(sp)
100059c4:	dc401f15 	stw	r17,124(sp)
100059c8:	008001c4 	movi	r2,7
100059cc:	14416b16 	blt	r2,r17,10005f7c <___vfprintf_internal_r+0x16b0>
100059d0:	42000204 	addi	r8,r8,8
100059d4:	d8803717 	ldw	r2,220(sp)
100059d8:	d9003417 	ldw	r4,208(sp)
100059dc:	8c400044 	addi	r17,r17,1
100059e0:	10c7883a 	add	r3,r2,r3
100059e4:	40800115 	stw	r2,4(r8)
100059e8:	41000015 	stw	r4,0(r8)
100059ec:	d8c02015 	stw	r3,128(sp)
100059f0:	dc401f15 	stw	r17,124(sp)
100059f4:	008001c4 	movi	r2,7
100059f8:	14416916 	blt	r2,r17,10005fa0 <___vfprintf_internal_r+0x16d4>
100059fc:	45800204 	addi	r22,r8,8
10005a00:	d9003617 	ldw	r4,216(sp)
10005a04:	d9403817 	ldw	r5,224(sp)
10005a08:	000d883a 	mov	r6,zero
10005a0c:	000f883a 	mov	r7,zero
10005a10:	d8c03c15 	stw	r3,240(sp)
10005a14:	000e4400 	call	1000e440 <__eqdf2>
10005a18:	d8c03c17 	ldw	r3,240(sp)
10005a1c:	1000bc26 	beq	r2,zero,10005d10 <___vfprintf_internal_r+0x1444>
10005a20:	d9403317 	ldw	r5,204(sp)
10005a24:	84000044 	addi	r16,r16,1
10005a28:	8c400044 	addi	r17,r17,1
10005a2c:	28bfffc4 	addi	r2,r5,-1
10005a30:	1887883a 	add	r3,r3,r2
10005a34:	b0800115 	stw	r2,4(r22)
10005a38:	b4000015 	stw	r16,0(r22)
10005a3c:	d8c02015 	stw	r3,128(sp)
10005a40:	dc401f15 	stw	r17,124(sp)
10005a44:	008001c4 	movi	r2,7
10005a48:	14414316 	blt	r2,r17,10005f58 <___vfprintf_internal_r+0x168c>
10005a4c:	b5800204 	addi	r22,r22,8
10005a50:	d9003a17 	ldw	r4,232(sp)
10005a54:	df0022c4 	addi	fp,sp,139
10005a58:	8c400044 	addi	r17,r17,1
10005a5c:	20c7883a 	add	r3,r4,r3
10005a60:	b7000015 	stw	fp,0(r22)
10005a64:	b1000115 	stw	r4,4(r22)
10005a68:	d8c02015 	stw	r3,128(sp)
10005a6c:	dc401f15 	stw	r17,124(sp)
10005a70:	008001c4 	movi	r2,7
10005a74:	14400e16 	blt	r2,r17,10005ab0 <___vfprintf_internal_r+0x11e4>
10005a78:	b2000204 	addi	r8,r22,8
10005a7c:	003e1806 	br	100052e0 <__alt_data_end+0xf80052e0>
10005a80:	01040074 	movhi	r4,4097
10005a84:	2109dd84 	addi	r4,r4,10102
10005a88:	d9002c15 	stw	r4,176(sp)
10005a8c:	d9002c17 	ldw	r4,176(sp)
10005a90:	1c07883a 	add	r3,r3,r16
10005a94:	44000115 	stw	r16,4(r8)
10005a98:	41000015 	stw	r4,0(r8)
10005a9c:	10800044 	addi	r2,r2,1
10005aa0:	d8c02015 	stw	r3,128(sp)
10005aa4:	d8801f15 	stw	r2,124(sp)
10005aa8:	010001c4 	movi	r4,7
10005aac:	20be0b0e 	bge	r4,r2,100052dc <__alt_data_end+0xf80052dc>
10005ab0:	d9002d17 	ldw	r4,180(sp)
10005ab4:	d9801e04 	addi	r6,sp,120
10005ab8:	b80b883a 	mov	r5,r23
10005abc:	000a9e40 	call	1000a9e4 <__sprint_r>
10005ac0:	103c861e 	bne	r2,zero,10004cdc <__alt_data_end+0xf8004cdc>
10005ac4:	d8c02017 	ldw	r3,128(sp)
10005ac8:	da000404 	addi	r8,sp,16
10005acc:	003e0406 	br	100052e0 <__alt_data_end+0xf80052e0>
10005ad0:	d9002d17 	ldw	r4,180(sp)
10005ad4:	d9801e04 	addi	r6,sp,120
10005ad8:	b80b883a 	mov	r5,r23
10005adc:	000a9e40 	call	1000a9e4 <__sprint_r>
10005ae0:	103e3b26 	beq	r2,zero,100053d0 <__alt_data_end+0xf80053d0>
10005ae4:	003c7d06 	br	10004cdc <__alt_data_end+0xf8004cdc>
10005ae8:	d9002d17 	ldw	r4,180(sp)
10005aec:	d9801e04 	addi	r6,sp,120
10005af0:	b80b883a 	mov	r5,r23
10005af4:	000a9e40 	call	1000a9e4 <__sprint_r>
10005af8:	103c781e 	bne	r2,zero,10004cdc <__alt_data_end+0xf8004cdc>
10005afc:	d8c02017 	ldw	r3,128(sp)
10005b00:	da000404 	addi	r8,sp,16
10005b04:	003de906 	br	100052ac <__alt_data_end+0xf80052ac>
10005b08:	d9002d17 	ldw	r4,180(sp)
10005b0c:	d9801e04 	addi	r6,sp,120
10005b10:	b80b883a 	mov	r5,r23
10005b14:	000a9e40 	call	1000a9e4 <__sprint_r>
10005b18:	103c701e 	bne	r2,zero,10004cdc <__alt_data_end+0xf8004cdc>
10005b1c:	d8c02017 	ldw	r3,128(sp)
10005b20:	da000404 	addi	r8,sp,16
10005b24:	003d9b06 	br	10005194 <__alt_data_end+0xf8005194>
10005b28:	d9002d17 	ldw	r4,180(sp)
10005b2c:	d9801e04 	addi	r6,sp,120
10005b30:	b80b883a 	mov	r5,r23
10005b34:	000a9e40 	call	1000a9e4 <__sprint_r>
10005b38:	103c681e 	bne	r2,zero,10004cdc <__alt_data_end+0xf8004cdc>
10005b3c:	d8c02017 	ldw	r3,128(sp)
10005b40:	da000404 	addi	r8,sp,16
10005b44:	003da106 	br	100051cc <__alt_data_end+0xf80051cc>
10005b48:	d9402a17 	ldw	r5,168(sp)
10005b4c:	d8002785 	stb	zero,158(sp)
10005b50:	283f0616 	blt	r5,zero,1000576c <__alt_data_end+0xf800576c>
10005b54:	00ffdfc4 	movi	r3,-129
10005b58:	9d84b03a 	or	r2,r19,r22
10005b5c:	90e4703a 	and	r18,r18,r3
10005b60:	103c3b26 	beq	r2,zero,10004c50 <__alt_data_end+0xf8004c50>
10005b64:	0039883a 	mov	fp,zero
10005b68:	003e5806 	br	100054cc <__alt_data_end+0xf80054cc>
10005b6c:	9080040c 	andi	r2,r18,16
10005b70:	1001b326 	beq	r2,zero,10006240 <___vfprintf_internal_r+0x1974>
10005b74:	d8c02e17 	ldw	r3,184(sp)
10005b78:	d9002a17 	ldw	r4,168(sp)
10005b7c:	d8002785 	stb	zero,158(sp)
10005b80:	18800104 	addi	r2,r3,4
10005b84:	1cc00017 	ldw	r19,0(r3)
10005b88:	002d883a 	mov	r22,zero
10005b8c:	2001b516 	blt	r4,zero,10006264 <___vfprintf_internal_r+0x1998>
10005b90:	00ffdfc4 	movi	r3,-129
10005b94:	d8802e15 	stw	r2,184(sp)
10005b98:	90e4703a 	and	r18,r18,r3
10005b9c:	983d0526 	beq	r19,zero,10004fb4 <__alt_data_end+0xf8004fb4>
10005ba0:	0039883a 	mov	fp,zero
10005ba4:	003d0806 	br	10004fc8 <__alt_data_end+0xf8004fc8>
10005ba8:	dc402617 	ldw	r17,152(sp)
10005bac:	0441d30e 	bge	zero,r17,100062fc <___vfprintf_internal_r+0x1a30>
10005bb0:	dc403217 	ldw	r17,200(sp)
10005bb4:	d8803317 	ldw	r2,204(sp)
10005bb8:	1440010e 	bge	r2,r17,10005bc0 <___vfprintf_internal_r+0x12f4>
10005bbc:	1023883a 	mov	r17,r2
10005bc0:	04400a0e 	bge	zero,r17,10005bec <___vfprintf_internal_r+0x1320>
10005bc4:	d8801f17 	ldw	r2,124(sp)
10005bc8:	1c47883a 	add	r3,r3,r17
10005bcc:	44000015 	stw	r16,0(r8)
10005bd0:	10800044 	addi	r2,r2,1
10005bd4:	44400115 	stw	r17,4(r8)
10005bd8:	d8c02015 	stw	r3,128(sp)
10005bdc:	d8801f15 	stw	r2,124(sp)
10005be0:	010001c4 	movi	r4,7
10005be4:	20826516 	blt	r4,r2,1000657c <___vfprintf_internal_r+0x1cb0>
10005be8:	42000204 	addi	r8,r8,8
10005bec:	88026116 	blt	r17,zero,10006574 <___vfprintf_internal_r+0x1ca8>
10005bf0:	d9003217 	ldw	r4,200(sp)
10005bf4:	2463c83a 	sub	r17,r4,r17
10005bf8:	04407b0e 	bge	zero,r17,10005de8 <___vfprintf_internal_r+0x151c>
10005bfc:	05800404 	movi	r22,16
10005c00:	d8801f17 	ldw	r2,124(sp)
10005c04:	b4419d0e 	bge	r22,r17,1000627c <___vfprintf_internal_r+0x19b0>
10005c08:	01040074 	movhi	r4,4097
10005c0c:	2109dd84 	addi	r4,r4,10102
10005c10:	d9002c15 	stw	r4,176(sp)
10005c14:	070001c4 	movi	fp,7
10005c18:	dcc02d17 	ldw	r19,180(sp)
10005c1c:	00000306 	br	10005c2c <___vfprintf_internal_r+0x1360>
10005c20:	42000204 	addi	r8,r8,8
10005c24:	8c7ffc04 	addi	r17,r17,-16
10005c28:	b441970e 	bge	r22,r17,10006288 <___vfprintf_internal_r+0x19bc>
10005c2c:	18c00404 	addi	r3,r3,16
10005c30:	10800044 	addi	r2,r2,1
10005c34:	45000015 	stw	r20,0(r8)
10005c38:	45800115 	stw	r22,4(r8)
10005c3c:	d8c02015 	stw	r3,128(sp)
10005c40:	d8801f15 	stw	r2,124(sp)
10005c44:	e0bff60e 	bge	fp,r2,10005c20 <__alt_data_end+0xf8005c20>
10005c48:	d9801e04 	addi	r6,sp,120
10005c4c:	b80b883a 	mov	r5,r23
10005c50:	9809883a 	mov	r4,r19
10005c54:	000a9e40 	call	1000a9e4 <__sprint_r>
10005c58:	103c201e 	bne	r2,zero,10004cdc <__alt_data_end+0xf8004cdc>
10005c5c:	d8c02017 	ldw	r3,128(sp)
10005c60:	d8801f17 	ldw	r2,124(sp)
10005c64:	da000404 	addi	r8,sp,16
10005c68:	003fee06 	br	10005c24 <__alt_data_end+0xf8005c24>
10005c6c:	d9002d17 	ldw	r4,180(sp)
10005c70:	d9801e04 	addi	r6,sp,120
10005c74:	b80b883a 	mov	r5,r23
10005c78:	000a9e40 	call	1000a9e4 <__sprint_r>
10005c7c:	103c171e 	bne	r2,zero,10004cdc <__alt_data_end+0xf8004cdc>
10005c80:	d8c02017 	ldw	r3,128(sp)
10005c84:	df002787 	ldb	fp,158(sp)
10005c88:	da000404 	addi	r8,sp,16
10005c8c:	003d3406 	br	10005160 <__alt_data_end+0xf8005160>
10005c90:	9080040c 	andi	r2,r18,16
10005c94:	10016126 	beq	r2,zero,1000621c <___vfprintf_internal_r+0x1950>
10005c98:	d9402e17 	ldw	r5,184(sp)
10005c9c:	2cc00017 	ldw	r19,0(r5)
10005ca0:	29400104 	addi	r5,r5,4
10005ca4:	d9402e15 	stw	r5,184(sp)
10005ca8:	982dd7fa 	srai	r22,r19,31
10005cac:	b005883a 	mov	r2,r22
10005cb0:	003c5a06 	br	10004e1c <__alt_data_end+0xf8004e1c>
10005cb4:	9080040c 	andi	r2,r18,16
10005cb8:	10003526 	beq	r2,zero,10005d90 <___vfprintf_internal_r+0x14c4>
10005cbc:	d8c02e17 	ldw	r3,184(sp)
10005cc0:	d9002a17 	ldw	r4,168(sp)
10005cc4:	d8002785 	stb	zero,158(sp)
10005cc8:	18800104 	addi	r2,r3,4
10005ccc:	1cc00017 	ldw	r19,0(r3)
10005cd0:	002d883a 	mov	r22,zero
10005cd4:	20003716 	blt	r4,zero,10005db4 <___vfprintf_internal_r+0x14e8>
10005cd8:	00ffdfc4 	movi	r3,-129
10005cdc:	d8802e15 	stw	r2,184(sp)
10005ce0:	90e4703a 	and	r18,r18,r3
10005ce4:	0039883a 	mov	fp,zero
10005ce8:	983dd426 	beq	r19,zero,1000543c <__alt_data_end+0xf800543c>
10005cec:	00800244 	movi	r2,9
10005cf0:	14fc5336 	bltu	r2,r19,10004e40 <__alt_data_end+0xf8004e40>
10005cf4:	d8c02817 	ldw	r3,160(sp)
10005cf8:	dc001dc4 	addi	r16,sp,119
10005cfc:	9cc00c04 	addi	r19,r19,48
10005d00:	1c07c83a 	sub	r3,r3,r16
10005d04:	dcc01dc5 	stb	r19,119(sp)
10005d08:	d8c02b15 	stw	r3,172(sp)
10005d0c:	003cc606 	br	10005028 <__alt_data_end+0xf8005028>
10005d10:	d8803317 	ldw	r2,204(sp)
10005d14:	143fffc4 	addi	r16,r2,-1
10005d18:	043f4d0e 	bge	zero,r16,10005a50 <__alt_data_end+0xf8005a50>
10005d1c:	07000404 	movi	fp,16
10005d20:	e400810e 	bge	fp,r16,10005f28 <___vfprintf_internal_r+0x165c>
10005d24:	01440074 	movhi	r5,4097
10005d28:	2949dd84 	addi	r5,r5,10102
10005d2c:	d9402c15 	stw	r5,176(sp)
10005d30:	01c001c4 	movi	r7,7
10005d34:	dcc02d17 	ldw	r19,180(sp)
10005d38:	00000306 	br	10005d48 <___vfprintf_internal_r+0x147c>
10005d3c:	b5800204 	addi	r22,r22,8
10005d40:	843ffc04 	addi	r16,r16,-16
10005d44:	e4007b0e 	bge	fp,r16,10005f34 <___vfprintf_internal_r+0x1668>
10005d48:	18c00404 	addi	r3,r3,16
10005d4c:	8c400044 	addi	r17,r17,1
10005d50:	b5000015 	stw	r20,0(r22)
10005d54:	b7000115 	stw	fp,4(r22)
10005d58:	d8c02015 	stw	r3,128(sp)
10005d5c:	dc401f15 	stw	r17,124(sp)
10005d60:	3c7ff60e 	bge	r7,r17,10005d3c <__alt_data_end+0xf8005d3c>
10005d64:	d9801e04 	addi	r6,sp,120
10005d68:	b80b883a 	mov	r5,r23
10005d6c:	9809883a 	mov	r4,r19
10005d70:	d9c03c15 	stw	r7,240(sp)
10005d74:	000a9e40 	call	1000a9e4 <__sprint_r>
10005d78:	d9c03c17 	ldw	r7,240(sp)
10005d7c:	103bd71e 	bne	r2,zero,10004cdc <__alt_data_end+0xf8004cdc>
10005d80:	d8c02017 	ldw	r3,128(sp)
10005d84:	dc401f17 	ldw	r17,124(sp)
10005d88:	dd800404 	addi	r22,sp,16
10005d8c:	003fec06 	br	10005d40 <__alt_data_end+0xf8005d40>
10005d90:	9080100c 	andi	r2,r18,64
10005d94:	d8002785 	stb	zero,158(sp)
10005d98:	10010e26 	beq	r2,zero,100061d4 <___vfprintf_internal_r+0x1908>
10005d9c:	d9402e17 	ldw	r5,184(sp)
10005da0:	d8c02a17 	ldw	r3,168(sp)
10005da4:	002d883a 	mov	r22,zero
10005da8:	28800104 	addi	r2,r5,4
10005dac:	2cc0000b 	ldhu	r19,0(r5)
10005db0:	183fc90e 	bge	r3,zero,10005cd8 <__alt_data_end+0xf8005cd8>
10005db4:	d8802e15 	stw	r2,184(sp)
10005db8:	0039883a 	mov	fp,zero
10005dbc:	9d84b03a 	or	r2,r19,r22
10005dc0:	103c1e1e 	bne	r2,zero,10004e3c <__alt_data_end+0xf8004e3c>
10005dc4:	00800044 	movi	r2,1
10005dc8:	003e6c06 	br	1000577c <__alt_data_end+0xf800577c>
10005dcc:	d9002d17 	ldw	r4,180(sp)
10005dd0:	d9801e04 	addi	r6,sp,120
10005dd4:	b80b883a 	mov	r5,r23
10005dd8:	000a9e40 	call	1000a9e4 <__sprint_r>
10005ddc:	103bbf1e 	bne	r2,zero,10004cdc <__alt_data_end+0xf8004cdc>
10005de0:	d8c02017 	ldw	r3,128(sp)
10005de4:	da000404 	addi	r8,sp,16
10005de8:	d9003217 	ldw	r4,200(sp)
10005dec:	d8802617 	ldw	r2,152(sp)
10005df0:	d9403317 	ldw	r5,204(sp)
10005df4:	8123883a 	add	r17,r16,r4
10005df8:	11400216 	blt	r2,r5,10005e04 <___vfprintf_internal_r+0x1538>
10005dfc:	9100004c 	andi	r4,r18,1
10005e00:	20000d26 	beq	r4,zero,10005e38 <___vfprintf_internal_r+0x156c>
10005e04:	d9003717 	ldw	r4,220(sp)
10005e08:	d9403417 	ldw	r5,208(sp)
10005e0c:	1907883a 	add	r3,r3,r4
10005e10:	d9001f17 	ldw	r4,124(sp)
10005e14:	41400015 	stw	r5,0(r8)
10005e18:	d9403717 	ldw	r5,220(sp)
10005e1c:	21000044 	addi	r4,r4,1
10005e20:	d8c02015 	stw	r3,128(sp)
10005e24:	41400115 	stw	r5,4(r8)
10005e28:	d9001f15 	stw	r4,124(sp)
10005e2c:	014001c4 	movi	r5,7
10005e30:	2901e816 	blt	r5,r4,100065d4 <___vfprintf_internal_r+0x1d08>
10005e34:	42000204 	addi	r8,r8,8
10005e38:	d9003317 	ldw	r4,204(sp)
10005e3c:	8121883a 	add	r16,r16,r4
10005e40:	2085c83a 	sub	r2,r4,r2
10005e44:	8461c83a 	sub	r16,r16,r17
10005e48:	1400010e 	bge	r2,r16,10005e50 <___vfprintf_internal_r+0x1584>
10005e4c:	1021883a 	mov	r16,r2
10005e50:	04000a0e 	bge	zero,r16,10005e7c <___vfprintf_internal_r+0x15b0>
10005e54:	d9001f17 	ldw	r4,124(sp)
10005e58:	1c07883a 	add	r3,r3,r16
10005e5c:	44400015 	stw	r17,0(r8)
10005e60:	21000044 	addi	r4,r4,1
10005e64:	44000115 	stw	r16,4(r8)
10005e68:	d8c02015 	stw	r3,128(sp)
10005e6c:	d9001f15 	stw	r4,124(sp)
10005e70:	014001c4 	movi	r5,7
10005e74:	2901fb16 	blt	r5,r4,10006664 <___vfprintf_internal_r+0x1d98>
10005e78:	42000204 	addi	r8,r8,8
10005e7c:	8001f716 	blt	r16,zero,1000665c <___vfprintf_internal_r+0x1d90>
10005e80:	1421c83a 	sub	r16,r2,r16
10005e84:	043d160e 	bge	zero,r16,100052e0 <__alt_data_end+0xf80052e0>
10005e88:	04400404 	movi	r17,16
10005e8c:	d8801f17 	ldw	r2,124(sp)
10005e90:	8c3efb0e 	bge	r17,r16,10005a80 <__alt_data_end+0xf8005a80>
10005e94:	01440074 	movhi	r5,4097
10005e98:	2949dd84 	addi	r5,r5,10102
10005e9c:	d9402c15 	stw	r5,176(sp)
10005ea0:	058001c4 	movi	r22,7
10005ea4:	dcc02d17 	ldw	r19,180(sp)
10005ea8:	00000306 	br	10005eb8 <___vfprintf_internal_r+0x15ec>
10005eac:	42000204 	addi	r8,r8,8
10005eb0:	843ffc04 	addi	r16,r16,-16
10005eb4:	8c3ef50e 	bge	r17,r16,10005a8c <__alt_data_end+0xf8005a8c>
10005eb8:	18c00404 	addi	r3,r3,16
10005ebc:	10800044 	addi	r2,r2,1
10005ec0:	45000015 	stw	r20,0(r8)
10005ec4:	44400115 	stw	r17,4(r8)
10005ec8:	d8c02015 	stw	r3,128(sp)
10005ecc:	d8801f15 	stw	r2,124(sp)
10005ed0:	b0bff60e 	bge	r22,r2,10005eac <__alt_data_end+0xf8005eac>
10005ed4:	d9801e04 	addi	r6,sp,120
10005ed8:	b80b883a 	mov	r5,r23
10005edc:	9809883a 	mov	r4,r19
10005ee0:	000a9e40 	call	1000a9e4 <__sprint_r>
10005ee4:	103b7d1e 	bne	r2,zero,10004cdc <__alt_data_end+0xf8004cdc>
10005ee8:	d8c02017 	ldw	r3,128(sp)
10005eec:	d8801f17 	ldw	r2,124(sp)
10005ef0:	da000404 	addi	r8,sp,16
10005ef4:	003fee06 	br	10005eb0 <__alt_data_end+0xf8005eb0>
10005ef8:	9088703a 	and	r4,r18,r2
10005efc:	203eab1e 	bne	r4,zero,100059ac <__alt_data_end+0xf80059ac>
10005f00:	dc401f17 	ldw	r17,124(sp)
10005f04:	40800115 	stw	r2,4(r8)
10005f08:	44000015 	stw	r16,0(r8)
10005f0c:	8c400044 	addi	r17,r17,1
10005f10:	d8c02015 	stw	r3,128(sp)
10005f14:	dc401f15 	stw	r17,124(sp)
10005f18:	008001c4 	movi	r2,7
10005f1c:	14400e16 	blt	r2,r17,10005f58 <___vfprintf_internal_r+0x168c>
10005f20:	45800204 	addi	r22,r8,8
10005f24:	003eca06 	br	10005a50 <__alt_data_end+0xf8005a50>
10005f28:	01040074 	movhi	r4,4097
10005f2c:	2109dd84 	addi	r4,r4,10102
10005f30:	d9002c15 	stw	r4,176(sp)
10005f34:	d8802c17 	ldw	r2,176(sp)
10005f38:	1c07883a 	add	r3,r3,r16
10005f3c:	8c400044 	addi	r17,r17,1
10005f40:	b0800015 	stw	r2,0(r22)
10005f44:	b4000115 	stw	r16,4(r22)
10005f48:	d8c02015 	stw	r3,128(sp)
10005f4c:	dc401f15 	stw	r17,124(sp)
10005f50:	008001c4 	movi	r2,7
10005f54:	147ebd0e 	bge	r2,r17,10005a4c <__alt_data_end+0xf8005a4c>
10005f58:	d9002d17 	ldw	r4,180(sp)
10005f5c:	d9801e04 	addi	r6,sp,120
10005f60:	b80b883a 	mov	r5,r23
10005f64:	000a9e40 	call	1000a9e4 <__sprint_r>
10005f68:	103b5c1e 	bne	r2,zero,10004cdc <__alt_data_end+0xf8004cdc>
10005f6c:	d8c02017 	ldw	r3,128(sp)
10005f70:	dc401f17 	ldw	r17,124(sp)
10005f74:	dd800404 	addi	r22,sp,16
10005f78:	003eb506 	br	10005a50 <__alt_data_end+0xf8005a50>
10005f7c:	d9002d17 	ldw	r4,180(sp)
10005f80:	d9801e04 	addi	r6,sp,120
10005f84:	b80b883a 	mov	r5,r23
10005f88:	000a9e40 	call	1000a9e4 <__sprint_r>
10005f8c:	103b531e 	bne	r2,zero,10004cdc <__alt_data_end+0xf8004cdc>
10005f90:	d8c02017 	ldw	r3,128(sp)
10005f94:	dc401f17 	ldw	r17,124(sp)
10005f98:	da000404 	addi	r8,sp,16
10005f9c:	003e8d06 	br	100059d4 <__alt_data_end+0xf80059d4>
10005fa0:	d9002d17 	ldw	r4,180(sp)
10005fa4:	d9801e04 	addi	r6,sp,120
10005fa8:	b80b883a 	mov	r5,r23
10005fac:	000a9e40 	call	1000a9e4 <__sprint_r>
10005fb0:	103b4a1e 	bne	r2,zero,10004cdc <__alt_data_end+0xf8004cdc>
10005fb4:	d8c02017 	ldw	r3,128(sp)
10005fb8:	dc401f17 	ldw	r17,124(sp)
10005fbc:	dd800404 	addi	r22,sp,16
10005fc0:	003e8f06 	br	10005a00 <__alt_data_end+0xf8005a00>
10005fc4:	0027883a 	mov	r19,zero
10005fc8:	003f4a06 	br	10005cf4 <__alt_data_end+0xf8005cf4>
10005fcc:	d9002d17 	ldw	r4,180(sp)
10005fd0:	d9801e04 	addi	r6,sp,120
10005fd4:	b80b883a 	mov	r5,r23
10005fd8:	000a9e40 	call	1000a9e4 <__sprint_r>
10005fdc:	103b3f1e 	bne	r2,zero,10004cdc <__alt_data_end+0xf8004cdc>
10005fe0:	d8c02017 	ldw	r3,128(sp)
10005fe4:	da000404 	addi	r8,sp,16
10005fe8:	003c7b06 	br	100051d8 <__alt_data_end+0xf80051d8>
10005fec:	d9402a17 	ldw	r5,168(sp)
10005ff0:	04e7c83a 	sub	r19,zero,r19
10005ff4:	07000b44 	movi	fp,45
10005ff8:	9804c03a 	cmpne	r2,r19,zero
10005ffc:	05adc83a 	sub	r22,zero,r22
10006000:	df002785 	stb	fp,158(sp)
10006004:	b0adc83a 	sub	r22,r22,r2
10006008:	28017b16 	blt	r5,zero,100065f8 <___vfprintf_internal_r+0x1d2c>
1000600c:	00bfdfc4 	movi	r2,-129
10006010:	90a4703a 	and	r18,r18,r2
10006014:	003b8906 	br	10004e3c <__alt_data_end+0xf8004e3c>
10006018:	d9003617 	ldw	r4,216(sp)
1000601c:	d9403817 	ldw	r5,224(sp)
10006020:	da003d15 	stw	r8,244(sp)
10006024:	000a4940 	call	1000a494 <__fpclassifyd>
10006028:	da003d17 	ldw	r8,244(sp)
1000602c:	1000f026 	beq	r2,zero,100063f0 <___vfprintf_internal_r+0x1b24>
10006030:	d9002a17 	ldw	r4,168(sp)
10006034:	05bff7c4 	movi	r22,-33
10006038:	00bfffc4 	movi	r2,-1
1000603c:	8dac703a 	and	r22,r17,r22
10006040:	20820026 	beq	r4,r2,10006844 <___vfprintf_internal_r+0x1f78>
10006044:	008011c4 	movi	r2,71
10006048:	b081f726 	beq	r22,r2,10006828 <___vfprintf_internal_r+0x1f5c>
1000604c:	d9003817 	ldw	r4,224(sp)
10006050:	90c04014 	ori	r3,r18,256
10006054:	d8c02c15 	stw	r3,176(sp)
10006058:	20021516 	blt	r4,zero,100068b0 <___vfprintf_internal_r+0x1fe4>
1000605c:	dcc03817 	ldw	r19,224(sp)
10006060:	d8002905 	stb	zero,164(sp)
10006064:	00801984 	movi	r2,102
10006068:	8881f926 	beq	r17,r2,10006850 <___vfprintf_internal_r+0x1f84>
1000606c:	00801184 	movi	r2,70
10006070:	88821c26 	beq	r17,r2,100068e4 <___vfprintf_internal_r+0x2018>
10006074:	00801144 	movi	r2,69
10006078:	b081ef26 	beq	r22,r2,10006838 <___vfprintf_internal_r+0x1f6c>
1000607c:	d8c02a17 	ldw	r3,168(sp)
10006080:	d8802104 	addi	r2,sp,132
10006084:	d8800315 	stw	r2,12(sp)
10006088:	d9403617 	ldw	r5,216(sp)
1000608c:	d8802504 	addi	r2,sp,148
10006090:	d9002d17 	ldw	r4,180(sp)
10006094:	d8800215 	stw	r2,8(sp)
10006098:	d8802604 	addi	r2,sp,152
1000609c:	d8c00015 	stw	r3,0(sp)
100060a0:	d8800115 	stw	r2,4(sp)
100060a4:	01c00084 	movi	r7,2
100060a8:	980d883a 	mov	r6,r19
100060ac:	d8c03c15 	stw	r3,240(sp)
100060b0:	da003d15 	stw	r8,244(sp)
100060b4:	00072480 	call	10007248 <_dtoa_r>
100060b8:	1021883a 	mov	r16,r2
100060bc:	008019c4 	movi	r2,103
100060c0:	d8c03c17 	ldw	r3,240(sp)
100060c4:	da003d17 	ldw	r8,244(sp)
100060c8:	88817126 	beq	r17,r2,10006690 <___vfprintf_internal_r+0x1dc4>
100060cc:	008011c4 	movi	r2,71
100060d0:	88829126 	beq	r17,r2,10006b18 <___vfprintf_internal_r+0x224c>
100060d4:	80f9883a 	add	fp,r16,r3
100060d8:	d9003617 	ldw	r4,216(sp)
100060dc:	000d883a 	mov	r6,zero
100060e0:	000f883a 	mov	r7,zero
100060e4:	980b883a 	mov	r5,r19
100060e8:	da003d15 	stw	r8,244(sp)
100060ec:	000e4400 	call	1000e440 <__eqdf2>
100060f0:	da003d17 	ldw	r8,244(sp)
100060f4:	10018d26 	beq	r2,zero,1000672c <___vfprintf_internal_r+0x1e60>
100060f8:	d8802117 	ldw	r2,132(sp)
100060fc:	1700062e 	bgeu	r2,fp,10006118 <___vfprintf_internal_r+0x184c>
10006100:	01000c04 	movi	r4,48
10006104:	10c00044 	addi	r3,r2,1
10006108:	d8c02115 	stw	r3,132(sp)
1000610c:	11000005 	stb	r4,0(r2)
10006110:	d8802117 	ldw	r2,132(sp)
10006114:	173ffb36 	bltu	r2,fp,10006104 <__alt_data_end+0xf8006104>
10006118:	1405c83a 	sub	r2,r2,r16
1000611c:	d8803315 	stw	r2,204(sp)
10006120:	008011c4 	movi	r2,71
10006124:	b0817626 	beq	r22,r2,10006700 <___vfprintf_internal_r+0x1e34>
10006128:	00801944 	movi	r2,101
1000612c:	1442800e 	bge	r2,r17,10006b30 <___vfprintf_internal_r+0x2264>
10006130:	d8c02617 	ldw	r3,152(sp)
10006134:	00801984 	movi	r2,102
10006138:	d8c03215 	stw	r3,200(sp)
1000613c:	8881fe26 	beq	r17,r2,10006938 <___vfprintf_internal_r+0x206c>
10006140:	d8c03217 	ldw	r3,200(sp)
10006144:	d9003317 	ldw	r4,204(sp)
10006148:	1901dd16 	blt	r3,r4,100068c0 <___vfprintf_internal_r+0x1ff4>
1000614c:	9480004c 	andi	r18,r18,1
10006150:	90022b1e 	bne	r18,zero,10006a00 <___vfprintf_internal_r+0x2134>
10006154:	1805883a 	mov	r2,r3
10006158:	18028316 	blt	r3,zero,10006b68 <___vfprintf_internal_r+0x229c>
1000615c:	d8c03217 	ldw	r3,200(sp)
10006160:	044019c4 	movi	r17,103
10006164:	d8c02b15 	stw	r3,172(sp)
10006168:	df002907 	ldb	fp,164(sp)
1000616c:	e001531e 	bne	fp,zero,100066bc <___vfprintf_internal_r+0x1df0>
10006170:	df002783 	ldbu	fp,158(sp)
10006174:	d8802915 	stw	r2,164(sp)
10006178:	dc802c17 	ldw	r18,176(sp)
1000617c:	d8002a15 	stw	zero,168(sp)
10006180:	003baf06 	br	10005040 <__alt_data_end+0xf8005040>
10006184:	d8c02e17 	ldw	r3,184(sp)
10006188:	d9002e17 	ldw	r4,184(sp)
1000618c:	d9402e17 	ldw	r5,184(sp)
10006190:	18c00017 	ldw	r3,0(r3)
10006194:	21000117 	ldw	r4,4(r4)
10006198:	29400204 	addi	r5,r5,8
1000619c:	d8c03615 	stw	r3,216(sp)
100061a0:	d9003815 	stw	r4,224(sp)
100061a4:	d9402e15 	stw	r5,184(sp)
100061a8:	003b5006 	br	10004eec <__alt_data_end+0xf8004eec>
100061ac:	ac400007 	ldb	r17,0(r21)
100061b0:	003a2806 	br	10004a54 <__alt_data_end+0xf8004a54>
100061b4:	9080100c 	andi	r2,r18,64
100061b8:	1000a826 	beq	r2,zero,1000645c <___vfprintf_internal_r+0x1b90>
100061bc:	d8c02e17 	ldw	r3,184(sp)
100061c0:	002d883a 	mov	r22,zero
100061c4:	1cc0000b 	ldhu	r19,0(r3)
100061c8:	18c00104 	addi	r3,r3,4
100061cc:	d8c02e15 	stw	r3,184(sp)
100061d0:	003caf06 	br	10005490 <__alt_data_end+0xf8005490>
100061d4:	d9002e17 	ldw	r4,184(sp)
100061d8:	d9402a17 	ldw	r5,168(sp)
100061dc:	002d883a 	mov	r22,zero
100061e0:	20800104 	addi	r2,r4,4
100061e4:	24c00017 	ldw	r19,0(r4)
100061e8:	283ebb0e 	bge	r5,zero,10005cd8 <__alt_data_end+0xf8005cd8>
100061ec:	003ef106 	br	10005db4 <__alt_data_end+0xf8005db4>
100061f0:	9080040c 	andi	r2,r18,16
100061f4:	1000921e 	bne	r2,zero,10006440 <___vfprintf_internal_r+0x1b74>
100061f8:	9480100c 	andi	r18,r18,64
100061fc:	90013926 	beq	r18,zero,100066e4 <___vfprintf_internal_r+0x1e18>
10006200:	d9402e17 	ldw	r5,184(sp)
10006204:	d8c02f17 	ldw	r3,188(sp)
10006208:	28800017 	ldw	r2,0(r5)
1000620c:	29400104 	addi	r5,r5,4
10006210:	d9402e15 	stw	r5,184(sp)
10006214:	10c0000d 	sth	r3,0(r2)
10006218:	0039e406 	br	100049ac <__alt_data_end+0xf80049ac>
1000621c:	9080100c 	andi	r2,r18,64
10006220:	10008026 	beq	r2,zero,10006424 <___vfprintf_internal_r+0x1b58>
10006224:	d8802e17 	ldw	r2,184(sp)
10006228:	14c0000f 	ldh	r19,0(r2)
1000622c:	10800104 	addi	r2,r2,4
10006230:	d8802e15 	stw	r2,184(sp)
10006234:	982dd7fa 	srai	r22,r19,31
10006238:	b005883a 	mov	r2,r22
1000623c:	003af706 	br	10004e1c <__alt_data_end+0xf8004e1c>
10006240:	9080100c 	andi	r2,r18,64
10006244:	d8002785 	stb	zero,158(sp)
10006248:	10008a1e 	bne	r2,zero,10006474 <___vfprintf_internal_r+0x1ba8>
1000624c:	d9002e17 	ldw	r4,184(sp)
10006250:	d9402a17 	ldw	r5,168(sp)
10006254:	002d883a 	mov	r22,zero
10006258:	20800104 	addi	r2,r4,4
1000625c:	24c00017 	ldw	r19,0(r4)
10006260:	283e4b0e 	bge	r5,zero,10005b90 <__alt_data_end+0xf8005b90>
10006264:	9d86b03a 	or	r3,r19,r22
10006268:	d8802e15 	stw	r2,184(sp)
1000626c:	183e4c1e 	bne	r3,zero,10005ba0 <__alt_data_end+0xf8005ba0>
10006270:	0039883a 	mov	fp,zero
10006274:	0005883a 	mov	r2,zero
10006278:	003d4006 	br	1000577c <__alt_data_end+0xf800577c>
1000627c:	01440074 	movhi	r5,4097
10006280:	2949dd84 	addi	r5,r5,10102
10006284:	d9402c15 	stw	r5,176(sp)
10006288:	d9402c17 	ldw	r5,176(sp)
1000628c:	1c47883a 	add	r3,r3,r17
10006290:	10800044 	addi	r2,r2,1
10006294:	41400015 	stw	r5,0(r8)
10006298:	44400115 	stw	r17,4(r8)
1000629c:	d8c02015 	stw	r3,128(sp)
100062a0:	d8801f15 	stw	r2,124(sp)
100062a4:	010001c4 	movi	r4,7
100062a8:	20bec816 	blt	r4,r2,10005dcc <__alt_data_end+0xf8005dcc>
100062ac:	42000204 	addi	r8,r8,8
100062b0:	003ecd06 	br	10005de8 <__alt_data_end+0xf8005de8>
100062b4:	d9002a17 	ldw	r4,168(sp)
100062b8:	d8002785 	stb	zero,158(sp)
100062bc:	203d2d16 	blt	r4,zero,10005774 <__alt_data_end+0xf8005774>
100062c0:	00bfdfc4 	movi	r2,-129
100062c4:	90a4703a 	and	r18,r18,r2
100062c8:	003a6106 	br	10004c50 <__alt_data_end+0xf8004c50>
100062cc:	01040074 	movhi	r4,4097
100062d0:	2109dd84 	addi	r4,r4,10102
100062d4:	d9002c15 	stw	r4,176(sp)
100062d8:	003bea06 	br	10005284 <__alt_data_end+0xf8005284>
100062dc:	d9002d17 	ldw	r4,180(sp)
100062e0:	d9801e04 	addi	r6,sp,120
100062e4:	b80b883a 	mov	r5,r23
100062e8:	000a9e40 	call	1000a9e4 <__sprint_r>
100062ec:	103a7b1e 	bne	r2,zero,10004cdc <__alt_data_end+0xf8004cdc>
100062f0:	d8c02017 	ldw	r3,128(sp)
100062f4:	da000404 	addi	r8,sp,16
100062f8:	003d4106 	br	10005800 <__alt_data_end+0xf8005800>
100062fc:	d8801f17 	ldw	r2,124(sp)
10006300:	01440074 	movhi	r5,4097
10006304:	01000044 	movi	r4,1
10006308:	18c00044 	addi	r3,r3,1
1000630c:	10800044 	addi	r2,r2,1
10006310:	2949dd04 	addi	r5,r5,10100
10006314:	41000115 	stw	r4,4(r8)
10006318:	41400015 	stw	r5,0(r8)
1000631c:	d8c02015 	stw	r3,128(sp)
10006320:	d8801f15 	stw	r2,124(sp)
10006324:	010001c4 	movi	r4,7
10006328:	20805c16 	blt	r4,r2,1000649c <___vfprintf_internal_r+0x1bd0>
1000632c:	42000204 	addi	r8,r8,8
10006330:	8800041e 	bne	r17,zero,10006344 <___vfprintf_internal_r+0x1a78>
10006334:	d8803317 	ldw	r2,204(sp)
10006338:	1000021e 	bne	r2,zero,10006344 <___vfprintf_internal_r+0x1a78>
1000633c:	9080004c 	andi	r2,r18,1
10006340:	103be726 	beq	r2,zero,100052e0 <__alt_data_end+0xf80052e0>
10006344:	d9003717 	ldw	r4,220(sp)
10006348:	d8801f17 	ldw	r2,124(sp)
1000634c:	d9403417 	ldw	r5,208(sp)
10006350:	20c7883a 	add	r3,r4,r3
10006354:	10800044 	addi	r2,r2,1
10006358:	41000115 	stw	r4,4(r8)
1000635c:	41400015 	stw	r5,0(r8)
10006360:	d8c02015 	stw	r3,128(sp)
10006364:	d8801f15 	stw	r2,124(sp)
10006368:	010001c4 	movi	r4,7
1000636c:	20812116 	blt	r4,r2,100067f4 <___vfprintf_internal_r+0x1f28>
10006370:	42000204 	addi	r8,r8,8
10006374:	0463c83a 	sub	r17,zero,r17
10006378:	0440730e 	bge	zero,r17,10006548 <___vfprintf_internal_r+0x1c7c>
1000637c:	05800404 	movi	r22,16
10006380:	b440860e 	bge	r22,r17,1000659c <___vfprintf_internal_r+0x1cd0>
10006384:	01440074 	movhi	r5,4097
10006388:	2949dd84 	addi	r5,r5,10102
1000638c:	d9402c15 	stw	r5,176(sp)
10006390:	070001c4 	movi	fp,7
10006394:	dcc02d17 	ldw	r19,180(sp)
10006398:	00000306 	br	100063a8 <___vfprintf_internal_r+0x1adc>
1000639c:	42000204 	addi	r8,r8,8
100063a0:	8c7ffc04 	addi	r17,r17,-16
100063a4:	b440800e 	bge	r22,r17,100065a8 <___vfprintf_internal_r+0x1cdc>
100063a8:	18c00404 	addi	r3,r3,16
100063ac:	10800044 	addi	r2,r2,1
100063b0:	45000015 	stw	r20,0(r8)
100063b4:	45800115 	stw	r22,4(r8)
100063b8:	d8c02015 	stw	r3,128(sp)
100063bc:	d8801f15 	stw	r2,124(sp)
100063c0:	e0bff60e 	bge	fp,r2,1000639c <__alt_data_end+0xf800639c>
100063c4:	d9801e04 	addi	r6,sp,120
100063c8:	b80b883a 	mov	r5,r23
100063cc:	9809883a 	mov	r4,r19
100063d0:	000a9e40 	call	1000a9e4 <__sprint_r>
100063d4:	103a411e 	bne	r2,zero,10004cdc <__alt_data_end+0xf8004cdc>
100063d8:	d8c02017 	ldw	r3,128(sp)
100063dc:	d8801f17 	ldw	r2,124(sp)
100063e0:	da000404 	addi	r8,sp,16
100063e4:	003fee06 	br	100063a0 <__alt_data_end+0xf80063a0>
100063e8:	00bfffc4 	movi	r2,-1
100063ec:	003a3f06 	br	10004cec <__alt_data_end+0xf8004cec>
100063f0:	008011c4 	movi	r2,71
100063f4:	1440b816 	blt	r2,r17,100066d8 <___vfprintf_internal_r+0x1e0c>
100063f8:	04040074 	movhi	r16,4097
100063fc:	8409cf04 	addi	r16,r16,10044
10006400:	00c000c4 	movi	r3,3
10006404:	00bfdfc4 	movi	r2,-129
10006408:	d8c02915 	stw	r3,164(sp)
1000640c:	90a4703a 	and	r18,r18,r2
10006410:	df002783 	ldbu	fp,158(sp)
10006414:	d8c02b15 	stw	r3,172(sp)
10006418:	d8002a15 	stw	zero,168(sp)
1000641c:	d8003215 	stw	zero,200(sp)
10006420:	003b0706 	br	10005040 <__alt_data_end+0xf8005040>
10006424:	d8c02e17 	ldw	r3,184(sp)
10006428:	1cc00017 	ldw	r19,0(r3)
1000642c:	18c00104 	addi	r3,r3,4
10006430:	d8c02e15 	stw	r3,184(sp)
10006434:	982dd7fa 	srai	r22,r19,31
10006438:	b005883a 	mov	r2,r22
1000643c:	003a7706 	br	10004e1c <__alt_data_end+0xf8004e1c>
10006440:	d8c02e17 	ldw	r3,184(sp)
10006444:	d9002f17 	ldw	r4,188(sp)
10006448:	18800017 	ldw	r2,0(r3)
1000644c:	18c00104 	addi	r3,r3,4
10006450:	d8c02e15 	stw	r3,184(sp)
10006454:	11000015 	stw	r4,0(r2)
10006458:	00395406 	br	100049ac <__alt_data_end+0xf80049ac>
1000645c:	d9002e17 	ldw	r4,184(sp)
10006460:	002d883a 	mov	r22,zero
10006464:	24c00017 	ldw	r19,0(r4)
10006468:	21000104 	addi	r4,r4,4
1000646c:	d9002e15 	stw	r4,184(sp)
10006470:	003c0706 	br	10005490 <__alt_data_end+0xf8005490>
10006474:	d9402e17 	ldw	r5,184(sp)
10006478:	d8c02a17 	ldw	r3,168(sp)
1000647c:	002d883a 	mov	r22,zero
10006480:	28800104 	addi	r2,r5,4
10006484:	2cc0000b 	ldhu	r19,0(r5)
10006488:	183dc10e 	bge	r3,zero,10005b90 <__alt_data_end+0xf8005b90>
1000648c:	003f7506 	br	10006264 <__alt_data_end+0xf8006264>
10006490:	04040074 	movhi	r16,4097
10006494:	8409cd04 	addi	r16,r16,10036
10006498:	003aa706 	br	10004f38 <__alt_data_end+0xf8004f38>
1000649c:	d9002d17 	ldw	r4,180(sp)
100064a0:	d9801e04 	addi	r6,sp,120
100064a4:	b80b883a 	mov	r5,r23
100064a8:	000a9e40 	call	1000a9e4 <__sprint_r>
100064ac:	103a0b1e 	bne	r2,zero,10004cdc <__alt_data_end+0xf8004cdc>
100064b0:	dc402617 	ldw	r17,152(sp)
100064b4:	d8c02017 	ldw	r3,128(sp)
100064b8:	da000404 	addi	r8,sp,16
100064bc:	003f9c06 	br	10006330 <__alt_data_end+0xf8006330>
100064c0:	ac400043 	ldbu	r17,1(r21)
100064c4:	84000814 	ori	r16,r16,32
100064c8:	ad400044 	addi	r21,r21,1
100064cc:	8c403fcc 	andi	r17,r17,255
100064d0:	8c40201c 	xori	r17,r17,128
100064d4:	8c7fe004 	addi	r17,r17,-128
100064d8:	00395e06 	br	10004a54 <__alt_data_end+0xf8004a54>
100064dc:	d8c02e15 	stw	r3,184(sp)
100064e0:	0039883a 	mov	fp,zero
100064e4:	003e3506 	br	10005dbc <__alt_data_end+0xf8005dbc>
100064e8:	d9002d17 	ldw	r4,180(sp)
100064ec:	d9801e04 	addi	r6,sp,120
100064f0:	b80b883a 	mov	r5,r23
100064f4:	000a9e40 	call	1000a9e4 <__sprint_r>
100064f8:	1039f81e 	bne	r2,zero,10004cdc <__alt_data_end+0xf8004cdc>
100064fc:	d8c02017 	ldw	r3,128(sp)
10006500:	da000404 	addi	r8,sp,16
10006504:	003cd006 	br	10005848 <__alt_data_end+0xf8005848>
10006508:	8009883a 	mov	r4,r16
1000650c:	df003d15 	stw	fp,244(sp)
10006510:	000481c0 	call	1000481c <strlen>
10006514:	d8802b15 	stw	r2,172(sp)
10006518:	da003d17 	ldw	r8,244(sp)
1000651c:	103c200e 	bge	r2,zero,100055a0 <__alt_data_end+0xf80055a0>
10006520:	0005883a 	mov	r2,zero
10006524:	003c1e06 	br	100055a0 <__alt_data_end+0xf80055a0>
10006528:	d9002d17 	ldw	r4,180(sp)
1000652c:	d9801e04 	addi	r6,sp,120
10006530:	b80b883a 	mov	r5,r23
10006534:	000a9e40 	call	1000a9e4 <__sprint_r>
10006538:	1039e81e 	bne	r2,zero,10004cdc <__alt_data_end+0xf8004cdc>
1000653c:	d8c02017 	ldw	r3,128(sp)
10006540:	d8801f17 	ldw	r2,124(sp)
10006544:	da000404 	addi	r8,sp,16
10006548:	d9403317 	ldw	r5,204(sp)
1000654c:	10800044 	addi	r2,r2,1
10006550:	44000015 	stw	r16,0(r8)
10006554:	28c7883a 	add	r3,r5,r3
10006558:	003b5b06 	br	100052c8 <__alt_data_end+0xf80052c8>
1000655c:	01040074 	movhi	r4,4097
10006560:	2109e184 	addi	r4,r4,10118
10006564:	d9003515 	stw	r4,212(sp)
10006568:	003af206 	br	10005134 <__alt_data_end+0xf8005134>
1000656c:	013fffc4 	movi	r4,-1
10006570:	003a0806 	br	10004d94 <__alt_data_end+0xf8004d94>
10006574:	0023883a 	mov	r17,zero
10006578:	003d9d06 	br	10005bf0 <__alt_data_end+0xf8005bf0>
1000657c:	d9002d17 	ldw	r4,180(sp)
10006580:	d9801e04 	addi	r6,sp,120
10006584:	b80b883a 	mov	r5,r23
10006588:	000a9e40 	call	1000a9e4 <__sprint_r>
1000658c:	1039d31e 	bne	r2,zero,10004cdc <__alt_data_end+0xf8004cdc>
10006590:	d8c02017 	ldw	r3,128(sp)
10006594:	da000404 	addi	r8,sp,16
10006598:	003d9406 	br	10005bec <__alt_data_end+0xf8005bec>
1000659c:	01040074 	movhi	r4,4097
100065a0:	2109dd84 	addi	r4,r4,10102
100065a4:	d9002c15 	stw	r4,176(sp)
100065a8:	d9002c17 	ldw	r4,176(sp)
100065ac:	1c47883a 	add	r3,r3,r17
100065b0:	10800044 	addi	r2,r2,1
100065b4:	41000015 	stw	r4,0(r8)
100065b8:	44400115 	stw	r17,4(r8)
100065bc:	d8c02015 	stw	r3,128(sp)
100065c0:	d8801f15 	stw	r2,124(sp)
100065c4:	010001c4 	movi	r4,7
100065c8:	20bfd716 	blt	r4,r2,10006528 <__alt_data_end+0xf8006528>
100065cc:	42000204 	addi	r8,r8,8
100065d0:	003fdd06 	br	10006548 <__alt_data_end+0xf8006548>
100065d4:	d9002d17 	ldw	r4,180(sp)
100065d8:	d9801e04 	addi	r6,sp,120
100065dc:	b80b883a 	mov	r5,r23
100065e0:	000a9e40 	call	1000a9e4 <__sprint_r>
100065e4:	1039bd1e 	bne	r2,zero,10004cdc <__alt_data_end+0xf8004cdc>
100065e8:	d8802617 	ldw	r2,152(sp)
100065ec:	d8c02017 	ldw	r3,128(sp)
100065f0:	da000404 	addi	r8,sp,16
100065f4:	003e1006 	br	10005e38 <__alt_data_end+0xf8005e38>
100065f8:	00800044 	movi	r2,1
100065fc:	10803fcc 	andi	r2,r2,255
10006600:	00c00044 	movi	r3,1
10006604:	10fa0d26 	beq	r2,r3,10004e3c <__alt_data_end+0xf8004e3c>
10006608:	00c00084 	movi	r3,2
1000660c:	10fbaf26 	beq	r2,r3,100054cc <__alt_data_end+0xf80054cc>
10006610:	003a6d06 	br	10004fc8 <__alt_data_end+0xf8004fc8>
10006614:	01040074 	movhi	r4,4097
10006618:	2109e184 	addi	r4,r4,10118
1000661c:	d9003515 	stw	r4,212(sp)
10006620:	003b5406 	br	10005374 <__alt_data_end+0xf8005374>
10006624:	d8802a17 	ldw	r2,168(sp)
10006628:	00c00184 	movi	r3,6
1000662c:	1880012e 	bgeu	r3,r2,10006634 <___vfprintf_internal_r+0x1d68>
10006630:	1805883a 	mov	r2,r3
10006634:	d8802b15 	stw	r2,172(sp)
10006638:	1000ef16 	blt	r2,zero,100069f8 <___vfprintf_internal_r+0x212c>
1000663c:	04040074 	movhi	r16,4097
10006640:	d8802915 	stw	r2,164(sp)
10006644:	dcc02e15 	stw	r19,184(sp)
10006648:	d8002a15 	stw	zero,168(sp)
1000664c:	d8003215 	stw	zero,200(sp)
10006650:	8409db04 	addi	r16,r16,10092
10006654:	0039883a 	mov	fp,zero
10006658:	003a8006 	br	1000505c <__alt_data_end+0xf800505c>
1000665c:	0021883a 	mov	r16,zero
10006660:	003e0706 	br	10005e80 <__alt_data_end+0xf8005e80>
10006664:	d9002d17 	ldw	r4,180(sp)
10006668:	d9801e04 	addi	r6,sp,120
1000666c:	b80b883a 	mov	r5,r23
10006670:	000a9e40 	call	1000a9e4 <__sprint_r>
10006674:	1039991e 	bne	r2,zero,10004cdc <__alt_data_end+0xf8004cdc>
10006678:	d8802617 	ldw	r2,152(sp)
1000667c:	d9403317 	ldw	r5,204(sp)
10006680:	d8c02017 	ldw	r3,128(sp)
10006684:	da000404 	addi	r8,sp,16
10006688:	2885c83a 	sub	r2,r5,r2
1000668c:	003dfb06 	br	10005e7c <__alt_data_end+0xf8005e7c>
10006690:	9080004c 	andi	r2,r18,1
10006694:	103e8f1e 	bne	r2,zero,100060d4 <__alt_data_end+0xf80060d4>
10006698:	d8802117 	ldw	r2,132(sp)
1000669c:	003e9e06 	br	10006118 <__alt_data_end+0xf8006118>
100066a0:	1025883a 	mov	r18,r2
100066a4:	0039883a 	mov	fp,zero
100066a8:	00800084 	movi	r2,2
100066ac:	003fd306 	br	100065fc <__alt_data_end+0xf80065fc>
100066b0:	07000b44 	movi	fp,45
100066b4:	df002785 	stb	fp,158(sp)
100066b8:	003a1b06 	br	10004f28 <__alt_data_end+0xf8004f28>
100066bc:	00c00b44 	movi	r3,45
100066c0:	d8c02785 	stb	r3,158(sp)
100066c4:	d8802915 	stw	r2,164(sp)
100066c8:	dc802c17 	ldw	r18,176(sp)
100066cc:	d8002a15 	stw	zero,168(sp)
100066d0:	07000b44 	movi	fp,45
100066d4:	003a5e06 	br	10005050 <__alt_data_end+0xf8005050>
100066d8:	04040074 	movhi	r16,4097
100066dc:	8409d004 	addi	r16,r16,10048
100066e0:	003f4706 	br	10006400 <__alt_data_end+0xf8006400>
100066e4:	d9002e17 	ldw	r4,184(sp)
100066e8:	d9402f17 	ldw	r5,188(sp)
100066ec:	20800017 	ldw	r2,0(r4)
100066f0:	21000104 	addi	r4,r4,4
100066f4:	d9002e15 	stw	r4,184(sp)
100066f8:	11400015 	stw	r5,0(r2)
100066fc:	0038ab06 	br	100049ac <__alt_data_end+0xf80049ac>
10006700:	dd802617 	ldw	r22,152(sp)
10006704:	00bfff44 	movi	r2,-3
10006708:	b0801c16 	blt	r22,r2,1000677c <___vfprintf_internal_r+0x1eb0>
1000670c:	d9402a17 	ldw	r5,168(sp)
10006710:	2d801a16 	blt	r5,r22,1000677c <___vfprintf_internal_r+0x1eb0>
10006714:	dd803215 	stw	r22,200(sp)
10006718:	003e8906 	br	10006140 <__alt_data_end+0xf8006140>
1000671c:	01040074 	movhi	r4,4097
10006720:	2109dd84 	addi	r4,r4,10102
10006724:	d9002c15 	stw	r4,176(sp)
10006728:	003c9106 	br	10005970 <__alt_data_end+0xf8005970>
1000672c:	e005883a 	mov	r2,fp
10006730:	003e7906 	br	10006118 <__alt_data_end+0xf8006118>
10006734:	d9002a17 	ldw	r4,168(sp)
10006738:	df002783 	ldbu	fp,158(sp)
1000673c:	dcc02e15 	stw	r19,184(sp)
10006740:	d9002915 	stw	r4,164(sp)
10006744:	d9002b15 	stw	r4,172(sp)
10006748:	d8002a15 	stw	zero,168(sp)
1000674c:	d8003215 	stw	zero,200(sp)
10006750:	003a3b06 	br	10005040 <__alt_data_end+0xf8005040>
10006754:	9080004c 	andi	r2,r18,1
10006758:	0039883a 	mov	fp,zero
1000675c:	10000426 	beq	r2,zero,10006770 <___vfprintf_internal_r+0x1ea4>
10006760:	00800c04 	movi	r2,48
10006764:	dc001dc4 	addi	r16,sp,119
10006768:	d8801dc5 	stb	r2,119(sp)
1000676c:	003b6406 	br	10005500 <__alt_data_end+0xf8005500>
10006770:	d8002b15 	stw	zero,172(sp)
10006774:	dc001e04 	addi	r16,sp,120
10006778:	003a2b06 	br	10005028 <__alt_data_end+0xf8005028>
1000677c:	8c7fff84 	addi	r17,r17,-2
10006780:	b5bfffc4 	addi	r22,r22,-1
10006784:	dd802615 	stw	r22,152(sp)
10006788:	dc4022c5 	stb	r17,139(sp)
1000678c:	b000bf16 	blt	r22,zero,10006a8c <___vfprintf_internal_r+0x21c0>
10006790:	00800ac4 	movi	r2,43
10006794:	d8802305 	stb	r2,140(sp)
10006798:	00800244 	movi	r2,9
1000679c:	15807016 	blt	r2,r22,10006960 <___vfprintf_internal_r+0x2094>
100067a0:	00800c04 	movi	r2,48
100067a4:	b5800c04 	addi	r22,r22,48
100067a8:	d8802345 	stb	r2,141(sp)
100067ac:	dd802385 	stb	r22,142(sp)
100067b0:	d88023c4 	addi	r2,sp,143
100067b4:	df0022c4 	addi	fp,sp,139
100067b8:	d8c03317 	ldw	r3,204(sp)
100067bc:	1739c83a 	sub	fp,r2,fp
100067c0:	d9003317 	ldw	r4,204(sp)
100067c4:	e0c7883a 	add	r3,fp,r3
100067c8:	df003a15 	stw	fp,232(sp)
100067cc:	d8c02b15 	stw	r3,172(sp)
100067d0:	00800044 	movi	r2,1
100067d4:	1100b30e 	bge	r2,r4,10006aa4 <___vfprintf_internal_r+0x21d8>
100067d8:	d8c02b17 	ldw	r3,172(sp)
100067dc:	18c00044 	addi	r3,r3,1
100067e0:	d8c02b15 	stw	r3,172(sp)
100067e4:	1805883a 	mov	r2,r3
100067e8:	1800ac16 	blt	r3,zero,10006a9c <___vfprintf_internal_r+0x21d0>
100067ec:	d8003215 	stw	zero,200(sp)
100067f0:	003e5d06 	br	10006168 <__alt_data_end+0xf8006168>
100067f4:	d9002d17 	ldw	r4,180(sp)
100067f8:	d9801e04 	addi	r6,sp,120
100067fc:	b80b883a 	mov	r5,r23
10006800:	000a9e40 	call	1000a9e4 <__sprint_r>
10006804:	1039351e 	bne	r2,zero,10004cdc <__alt_data_end+0xf8004cdc>
10006808:	dc402617 	ldw	r17,152(sp)
1000680c:	d8c02017 	ldw	r3,128(sp)
10006810:	d8801f17 	ldw	r2,124(sp)
10006814:	da000404 	addi	r8,sp,16
10006818:	003ed606 	br	10006374 <__alt_data_end+0xf8006374>
1000681c:	182b883a 	mov	r21,r3
10006820:	d8002a15 	stw	zero,168(sp)
10006824:	00388c06 	br	10004a58 <__alt_data_end+0xf8004a58>
10006828:	d8802a17 	ldw	r2,168(sp)
1000682c:	103e071e 	bne	r2,zero,1000604c <__alt_data_end+0xf800604c>
10006830:	dc002a15 	stw	r16,168(sp)
10006834:	003e0506 	br	1000604c <__alt_data_end+0xf800604c>
10006838:	d9002a17 	ldw	r4,168(sp)
1000683c:	20c00044 	addi	r3,r4,1
10006840:	003e0f06 	br	10006080 <__alt_data_end+0xf8006080>
10006844:	01400184 	movi	r5,6
10006848:	d9402a15 	stw	r5,168(sp)
1000684c:	003dff06 	br	1000604c <__alt_data_end+0xf800604c>
10006850:	d8802104 	addi	r2,sp,132
10006854:	d8800315 	stw	r2,12(sp)
10006858:	d8802504 	addi	r2,sp,148
1000685c:	d8800215 	stw	r2,8(sp)
10006860:	d8802604 	addi	r2,sp,152
10006864:	d8800115 	stw	r2,4(sp)
10006868:	d8802a17 	ldw	r2,168(sp)
1000686c:	d9403617 	ldw	r5,216(sp)
10006870:	d9002d17 	ldw	r4,180(sp)
10006874:	d8800015 	stw	r2,0(sp)
10006878:	01c000c4 	movi	r7,3
1000687c:	980d883a 	mov	r6,r19
10006880:	da003d15 	stw	r8,244(sp)
10006884:	00072480 	call	10007248 <_dtoa_r>
10006888:	d8c02a17 	ldw	r3,168(sp)
1000688c:	da003d17 	ldw	r8,244(sp)
10006890:	1021883a 	mov	r16,r2
10006894:	10f9883a 	add	fp,r2,r3
10006898:	81000007 	ldb	r4,0(r16)
1000689c:	00800c04 	movi	r2,48
100068a0:	20805e26 	beq	r4,r2,10006a1c <___vfprintf_internal_r+0x2150>
100068a4:	d8c02617 	ldw	r3,152(sp)
100068a8:	e0f9883a 	add	fp,fp,r3
100068ac:	003e0a06 	br	100060d8 <__alt_data_end+0xf80060d8>
100068b0:	00c00b44 	movi	r3,45
100068b4:	24e0003c 	xorhi	r19,r4,32768
100068b8:	d8c02905 	stb	r3,164(sp)
100068bc:	003de906 	br	10006064 <__alt_data_end+0xf8006064>
100068c0:	d8c03217 	ldw	r3,200(sp)
100068c4:	00c07a0e 	bge	zero,r3,10006ab0 <___vfprintf_internal_r+0x21e4>
100068c8:	00800044 	movi	r2,1
100068cc:	d9003317 	ldw	r4,204(sp)
100068d0:	1105883a 	add	r2,r2,r4
100068d4:	d8802b15 	stw	r2,172(sp)
100068d8:	10004e16 	blt	r2,zero,10006a14 <___vfprintf_internal_r+0x2148>
100068dc:	044019c4 	movi	r17,103
100068e0:	003e2106 	br	10006168 <__alt_data_end+0xf8006168>
100068e4:	d9002a17 	ldw	r4,168(sp)
100068e8:	d8802104 	addi	r2,sp,132
100068ec:	d8800315 	stw	r2,12(sp)
100068f0:	d9000015 	stw	r4,0(sp)
100068f4:	d8802504 	addi	r2,sp,148
100068f8:	d9403617 	ldw	r5,216(sp)
100068fc:	d9002d17 	ldw	r4,180(sp)
10006900:	d8800215 	stw	r2,8(sp)
10006904:	d8802604 	addi	r2,sp,152
10006908:	d8800115 	stw	r2,4(sp)
1000690c:	01c000c4 	movi	r7,3
10006910:	980d883a 	mov	r6,r19
10006914:	da003d15 	stw	r8,244(sp)
10006918:	00072480 	call	10007248 <_dtoa_r>
1000691c:	d8c02a17 	ldw	r3,168(sp)
10006920:	da003d17 	ldw	r8,244(sp)
10006924:	1021883a 	mov	r16,r2
10006928:	00801184 	movi	r2,70
1000692c:	80f9883a 	add	fp,r16,r3
10006930:	88bfd926 	beq	r17,r2,10006898 <__alt_data_end+0xf8006898>
10006934:	003de806 	br	100060d8 <__alt_data_end+0xf80060d8>
10006938:	d9002a17 	ldw	r4,168(sp)
1000693c:	00c04d0e 	bge	zero,r3,10006a74 <___vfprintf_internal_r+0x21a8>
10006940:	2000441e 	bne	r4,zero,10006a54 <___vfprintf_internal_r+0x2188>
10006944:	9480004c 	andi	r18,r18,1
10006948:	9000421e 	bne	r18,zero,10006a54 <___vfprintf_internal_r+0x2188>
1000694c:	1805883a 	mov	r2,r3
10006950:	18006f16 	blt	r3,zero,10006b10 <___vfprintf_internal_r+0x2244>
10006954:	d8c03217 	ldw	r3,200(sp)
10006958:	d8c02b15 	stw	r3,172(sp)
1000695c:	003e0206 	br	10006168 <__alt_data_end+0xf8006168>
10006960:	df0022c4 	addi	fp,sp,139
10006964:	dc002a15 	stw	r16,168(sp)
10006968:	4027883a 	mov	r19,r8
1000696c:	e021883a 	mov	r16,fp
10006970:	b009883a 	mov	r4,r22
10006974:	01400284 	movi	r5,10
10006978:	00016b40 	call	100016b4 <__modsi3>
1000697c:	10800c04 	addi	r2,r2,48
10006980:	843fffc4 	addi	r16,r16,-1
10006984:	b009883a 	mov	r4,r22
10006988:	01400284 	movi	r5,10
1000698c:	80800005 	stb	r2,0(r16)
10006990:	00016300 	call	10001630 <__divsi3>
10006994:	102d883a 	mov	r22,r2
10006998:	00800244 	movi	r2,9
1000699c:	15bff416 	blt	r2,r22,10006970 <__alt_data_end+0xf8006970>
100069a0:	9811883a 	mov	r8,r19
100069a4:	b0800c04 	addi	r2,r22,48
100069a8:	8027883a 	mov	r19,r16
100069ac:	997fffc4 	addi	r5,r19,-1
100069b0:	98bfffc5 	stb	r2,-1(r19)
100069b4:	dc002a17 	ldw	r16,168(sp)
100069b8:	2f006d2e 	bgeu	r5,fp,10006b70 <___vfprintf_internal_r+0x22a4>
100069bc:	d9c02384 	addi	r7,sp,142
100069c0:	3ccfc83a 	sub	r7,r7,r19
100069c4:	d9002344 	addi	r4,sp,141
100069c8:	e1cf883a 	add	r7,fp,r7
100069cc:	00000106 	br	100069d4 <___vfprintf_internal_r+0x2108>
100069d0:	28800003 	ldbu	r2,0(r5)
100069d4:	20800005 	stb	r2,0(r4)
100069d8:	21000044 	addi	r4,r4,1
100069dc:	29400044 	addi	r5,r5,1
100069e0:	393ffb1e 	bne	r7,r4,100069d0 <__alt_data_end+0xf80069d0>
100069e4:	d8802304 	addi	r2,sp,140
100069e8:	14c5c83a 	sub	r2,r2,r19
100069ec:	d8c02344 	addi	r3,sp,141
100069f0:	1885883a 	add	r2,r3,r2
100069f4:	003f7006 	br	100067b8 <__alt_data_end+0xf80067b8>
100069f8:	0005883a 	mov	r2,zero
100069fc:	003f0f06 	br	1000663c <__alt_data_end+0xf800663c>
10006a00:	d8c03217 	ldw	r3,200(sp)
10006a04:	18c00044 	addi	r3,r3,1
10006a08:	d8c02b15 	stw	r3,172(sp)
10006a0c:	1805883a 	mov	r2,r3
10006a10:	183fb20e 	bge	r3,zero,100068dc <__alt_data_end+0xf80068dc>
10006a14:	0005883a 	mov	r2,zero
10006a18:	003fb006 	br	100068dc <__alt_data_end+0xf80068dc>
10006a1c:	d9003617 	ldw	r4,216(sp)
10006a20:	000d883a 	mov	r6,zero
10006a24:	000f883a 	mov	r7,zero
10006a28:	980b883a 	mov	r5,r19
10006a2c:	d8c03c15 	stw	r3,240(sp)
10006a30:	da003d15 	stw	r8,244(sp)
10006a34:	000e4400 	call	1000e440 <__eqdf2>
10006a38:	d8c03c17 	ldw	r3,240(sp)
10006a3c:	da003d17 	ldw	r8,244(sp)
10006a40:	103f9826 	beq	r2,zero,100068a4 <__alt_data_end+0xf80068a4>
10006a44:	00800044 	movi	r2,1
10006a48:	10c7c83a 	sub	r3,r2,r3
10006a4c:	d8c02615 	stw	r3,152(sp)
10006a50:	003f9506 	br	100068a8 <__alt_data_end+0xf80068a8>
10006a54:	d9002a17 	ldw	r4,168(sp)
10006a58:	d8c03217 	ldw	r3,200(sp)
10006a5c:	20800044 	addi	r2,r4,1
10006a60:	1885883a 	add	r2,r3,r2
10006a64:	d8802b15 	stw	r2,172(sp)
10006a68:	103dbf0e 	bge	r2,zero,10006168 <__alt_data_end+0xf8006168>
10006a6c:	0005883a 	mov	r2,zero
10006a70:	003dbd06 	br	10006168 <__alt_data_end+0xf8006168>
10006a74:	2000201e 	bne	r4,zero,10006af8 <___vfprintf_internal_r+0x222c>
10006a78:	9480004c 	andi	r18,r18,1
10006a7c:	90001e1e 	bne	r18,zero,10006af8 <___vfprintf_internal_r+0x222c>
10006a80:	00800044 	movi	r2,1
10006a84:	d8802b15 	stw	r2,172(sp)
10006a88:	003db706 	br	10006168 <__alt_data_end+0xf8006168>
10006a8c:	00800b44 	movi	r2,45
10006a90:	05adc83a 	sub	r22,zero,r22
10006a94:	d8802305 	stb	r2,140(sp)
10006a98:	003f3f06 	br	10006798 <__alt_data_end+0xf8006798>
10006a9c:	0005883a 	mov	r2,zero
10006aa0:	003f5206 	br	100067ec <__alt_data_end+0xf80067ec>
10006aa4:	90a4703a 	and	r18,r18,r2
10006aa8:	903f4e26 	beq	r18,zero,100067e4 <__alt_data_end+0xf80067e4>
10006aac:	003f4a06 	br	100067d8 <__alt_data_end+0xf80067d8>
10006ab0:	00800084 	movi	r2,2
10006ab4:	10c5c83a 	sub	r2,r2,r3
10006ab8:	003f8406 	br	100068cc <__alt_data_end+0xf80068cc>
10006abc:	d9402e17 	ldw	r5,184(sp)
10006ac0:	d9002e17 	ldw	r4,184(sp)
10006ac4:	ac400043 	ldbu	r17,1(r21)
10006ac8:	29400017 	ldw	r5,0(r5)
10006acc:	20800104 	addi	r2,r4,4
10006ad0:	d8802e15 	stw	r2,184(sp)
10006ad4:	d9402a15 	stw	r5,168(sp)
10006ad8:	182b883a 	mov	r21,r3
10006adc:	283e7b0e 	bge	r5,zero,100064cc <__alt_data_end+0xf80064cc>
10006ae0:	8c403fcc 	andi	r17,r17,255
10006ae4:	017fffc4 	movi	r5,-1
10006ae8:	8c40201c 	xori	r17,r17,128
10006aec:	d9402a15 	stw	r5,168(sp)
10006af0:	8c7fe004 	addi	r17,r17,-128
10006af4:	0037d706 	br	10004a54 <__alt_data_end+0xf8004a54>
10006af8:	d8c02a17 	ldw	r3,168(sp)
10006afc:	18c00084 	addi	r3,r3,2
10006b00:	d8c02b15 	stw	r3,172(sp)
10006b04:	1805883a 	mov	r2,r3
10006b08:	183d970e 	bge	r3,zero,10006168 <__alt_data_end+0xf8006168>
10006b0c:	003fd706 	br	10006a6c <__alt_data_end+0xf8006a6c>
10006b10:	0005883a 	mov	r2,zero
10006b14:	003f8f06 	br	10006954 <__alt_data_end+0xf8006954>
10006b18:	9080004c 	andi	r2,r18,1
10006b1c:	103f821e 	bne	r2,zero,10006928 <__alt_data_end+0xf8006928>
10006b20:	d8802117 	ldw	r2,132(sp)
10006b24:	1405c83a 	sub	r2,r2,r16
10006b28:	d8803315 	stw	r2,204(sp)
10006b2c:	b47ef426 	beq	r22,r17,10006700 <__alt_data_end+0xf8006700>
10006b30:	dd802617 	ldw	r22,152(sp)
10006b34:	003f1206 	br	10006780 <__alt_data_end+0xf8006780>
10006b38:	d8c02b03 	ldbu	r3,172(sp)
10006b3c:	d8c02785 	stb	r3,158(sp)
10006b40:	0038df06 	br	10004ec0 <__alt_data_end+0xf8004ec0>
10006b44:	d8c02b03 	ldbu	r3,172(sp)
10006b48:	d8c02785 	stb	r3,158(sp)
10006b4c:	0038aa06 	br	10004df8 <__alt_data_end+0xf8004df8>
10006b50:	d8c02b03 	ldbu	r3,172(sp)
10006b54:	d8c02785 	stb	r3,158(sp)
10006b58:	003a4306 	br	10005468 <__alt_data_end+0xf8005468>
10006b5c:	d8c02b03 	ldbu	r3,172(sp)
10006b60:	d8c02785 	stb	r3,158(sp)
10006b64:	003af506 	br	1000573c <__alt_data_end+0xf800573c>
10006b68:	0005883a 	mov	r2,zero
10006b6c:	003d7b06 	br	1000615c <__alt_data_end+0xf800615c>
10006b70:	d8802344 	addi	r2,sp,141
10006b74:	003f1006 	br	100067b8 <__alt_data_end+0xf80067b8>
10006b78:	d8c02b03 	ldbu	r3,172(sp)
10006b7c:	d8c02785 	stb	r3,158(sp)
10006b80:	0038fd06 	br	10004f78 <__alt_data_end+0xf8004f78>
10006b84:	d8c02b03 	ldbu	r3,172(sp)
10006b88:	d8c02785 	stb	r3,158(sp)
10006b8c:	003a9706 	br	100055ec <__alt_data_end+0xf80055ec>
10006b90:	d8c02b03 	ldbu	r3,172(sp)
10006b94:	d8c02785 	stb	r3,158(sp)
10006b98:	003a1806 	br	100053fc <__alt_data_end+0xf80053fc>
10006b9c:	d8c02b03 	ldbu	r3,172(sp)
10006ba0:	d8c02785 	stb	r3,158(sp)
10006ba4:	003abe06 	br	100056a0 <__alt_data_end+0xf80056a0>

10006ba8 <__vfprintf_internal>:
10006ba8:	00840074 	movhi	r2,4097
10006bac:	10915e04 	addi	r2,r2,17784
10006bb0:	300f883a 	mov	r7,r6
10006bb4:	280d883a 	mov	r6,r5
10006bb8:	200b883a 	mov	r5,r4
10006bbc:	11000017 	ldw	r4,0(r2)
10006bc0:	00048cc1 	jmpi	100048cc <___vfprintf_internal_r>

10006bc4 <__sbprintf>:
10006bc4:	2880030b 	ldhu	r2,12(r5)
10006bc8:	2ac01917 	ldw	r11,100(r5)
10006bcc:	2a80038b 	ldhu	r10,14(r5)
10006bd0:	2a400717 	ldw	r9,28(r5)
10006bd4:	2a000917 	ldw	r8,36(r5)
10006bd8:	defee204 	addi	sp,sp,-1144
10006bdc:	00c10004 	movi	r3,1024
10006be0:	dc011a15 	stw	r16,1128(sp)
10006be4:	10bfff4c 	andi	r2,r2,65533
10006be8:	2821883a 	mov	r16,r5
10006bec:	d8cb883a 	add	r5,sp,r3
10006bf0:	dc811c15 	stw	r18,1136(sp)
10006bf4:	dc411b15 	stw	r17,1132(sp)
10006bf8:	dfc11d15 	stw	ra,1140(sp)
10006bfc:	2025883a 	mov	r18,r4
10006c00:	d881030d 	sth	r2,1036(sp)
10006c04:	dac11915 	stw	r11,1124(sp)
10006c08:	da81038d 	sth	r10,1038(sp)
10006c0c:	da410715 	stw	r9,1052(sp)
10006c10:	da010915 	stw	r8,1060(sp)
10006c14:	dec10015 	stw	sp,1024(sp)
10006c18:	dec10415 	stw	sp,1040(sp)
10006c1c:	d8c10215 	stw	r3,1032(sp)
10006c20:	d8c10515 	stw	r3,1044(sp)
10006c24:	d8010615 	stw	zero,1048(sp)
10006c28:	00048cc0 	call	100048cc <___vfprintf_internal_r>
10006c2c:	1023883a 	mov	r17,r2
10006c30:	10000416 	blt	r2,zero,10006c44 <__sbprintf+0x80>
10006c34:	d9410004 	addi	r5,sp,1024
10006c38:	9009883a 	mov	r4,r18
10006c3c:	0001be00 	call	10001be0 <_fflush_r>
10006c40:	10000d1e 	bne	r2,zero,10006c78 <__sbprintf+0xb4>
10006c44:	d881030b 	ldhu	r2,1036(sp)
10006c48:	1080100c 	andi	r2,r2,64
10006c4c:	10000326 	beq	r2,zero,10006c5c <__sbprintf+0x98>
10006c50:	8080030b 	ldhu	r2,12(r16)
10006c54:	10801014 	ori	r2,r2,64
10006c58:	8080030d 	sth	r2,12(r16)
10006c5c:	8805883a 	mov	r2,r17
10006c60:	dfc11d17 	ldw	ra,1140(sp)
10006c64:	dc811c17 	ldw	r18,1136(sp)
10006c68:	dc411b17 	ldw	r17,1132(sp)
10006c6c:	dc011a17 	ldw	r16,1128(sp)
10006c70:	dec11e04 	addi	sp,sp,1144
10006c74:	f800283a 	ret
10006c78:	047fffc4 	movi	r17,-1
10006c7c:	003ff106 	br	10006c44 <__alt_data_end+0xf8006c44>

10006c80 <_write_r>:
10006c80:	defffd04 	addi	sp,sp,-12
10006c84:	2805883a 	mov	r2,r5
10006c88:	dc000015 	stw	r16,0(sp)
10006c8c:	04040074 	movhi	r16,4097
10006c90:	dc400115 	stw	r17,4(sp)
10006c94:	300b883a 	mov	r5,r6
10006c98:	84187104 	addi	r16,r16,25028
10006c9c:	2023883a 	mov	r17,r4
10006ca0:	380d883a 	mov	r6,r7
10006ca4:	1009883a 	mov	r4,r2
10006ca8:	dfc00215 	stw	ra,8(sp)
10006cac:	80000015 	stw	zero,0(r16)
10006cb0:	00106000 	call	10010600 <write>
10006cb4:	00ffffc4 	movi	r3,-1
10006cb8:	10c00526 	beq	r2,r3,10006cd0 <_write_r+0x50>
10006cbc:	dfc00217 	ldw	ra,8(sp)
10006cc0:	dc400117 	ldw	r17,4(sp)
10006cc4:	dc000017 	ldw	r16,0(sp)
10006cc8:	dec00304 	addi	sp,sp,12
10006ccc:	f800283a 	ret
10006cd0:	80c00017 	ldw	r3,0(r16)
10006cd4:	183ff926 	beq	r3,zero,10006cbc <__alt_data_end+0xf8006cbc>
10006cd8:	88c00015 	stw	r3,0(r17)
10006cdc:	003ff706 	br	10006cbc <__alt_data_end+0xf8006cbc>

10006ce0 <__swsetup_r>:
10006ce0:	00840074 	movhi	r2,4097
10006ce4:	defffd04 	addi	sp,sp,-12
10006ce8:	10915e04 	addi	r2,r2,17784
10006cec:	dc400115 	stw	r17,4(sp)
10006cf0:	2023883a 	mov	r17,r4
10006cf4:	11000017 	ldw	r4,0(r2)
10006cf8:	dc000015 	stw	r16,0(sp)
10006cfc:	dfc00215 	stw	ra,8(sp)
10006d00:	2821883a 	mov	r16,r5
10006d04:	20000226 	beq	r4,zero,10006d10 <__swsetup_r+0x30>
10006d08:	20800e17 	ldw	r2,56(r4)
10006d0c:	10003126 	beq	r2,zero,10006dd4 <__swsetup_r+0xf4>
10006d10:	8080030b 	ldhu	r2,12(r16)
10006d14:	10c0020c 	andi	r3,r2,8
10006d18:	1009883a 	mov	r4,r2
10006d1c:	18000f26 	beq	r3,zero,10006d5c <__swsetup_r+0x7c>
10006d20:	80c00417 	ldw	r3,16(r16)
10006d24:	18001526 	beq	r3,zero,10006d7c <__swsetup_r+0x9c>
10006d28:	1100004c 	andi	r4,r2,1
10006d2c:	20001c1e 	bne	r4,zero,10006da0 <__swsetup_r+0xc0>
10006d30:	1080008c 	andi	r2,r2,2
10006d34:	1000291e 	bne	r2,zero,10006ddc <__swsetup_r+0xfc>
10006d38:	80800517 	ldw	r2,20(r16)
10006d3c:	80800215 	stw	r2,8(r16)
10006d40:	18001c26 	beq	r3,zero,10006db4 <__swsetup_r+0xd4>
10006d44:	0005883a 	mov	r2,zero
10006d48:	dfc00217 	ldw	ra,8(sp)
10006d4c:	dc400117 	ldw	r17,4(sp)
10006d50:	dc000017 	ldw	r16,0(sp)
10006d54:	dec00304 	addi	sp,sp,12
10006d58:	f800283a 	ret
10006d5c:	2080040c 	andi	r2,r4,16
10006d60:	10002e26 	beq	r2,zero,10006e1c <__swsetup_r+0x13c>
10006d64:	2080010c 	andi	r2,r4,4
10006d68:	10001e1e 	bne	r2,zero,10006de4 <__swsetup_r+0x104>
10006d6c:	80c00417 	ldw	r3,16(r16)
10006d70:	20800214 	ori	r2,r4,8
10006d74:	8080030d 	sth	r2,12(r16)
10006d78:	183feb1e 	bne	r3,zero,10006d28 <__alt_data_end+0xf8006d28>
10006d7c:	1100a00c 	andi	r4,r2,640
10006d80:	01408004 	movi	r5,512
10006d84:	217fe826 	beq	r4,r5,10006d28 <__alt_data_end+0xf8006d28>
10006d88:	800b883a 	mov	r5,r16
10006d8c:	8809883a 	mov	r4,r17
10006d90:	00031000 	call	10003100 <__smakebuf_r>
10006d94:	8080030b 	ldhu	r2,12(r16)
10006d98:	80c00417 	ldw	r3,16(r16)
10006d9c:	003fe206 	br	10006d28 <__alt_data_end+0xf8006d28>
10006da0:	80800517 	ldw	r2,20(r16)
10006da4:	80000215 	stw	zero,8(r16)
10006da8:	0085c83a 	sub	r2,zero,r2
10006dac:	80800615 	stw	r2,24(r16)
10006db0:	183fe41e 	bne	r3,zero,10006d44 <__alt_data_end+0xf8006d44>
10006db4:	80c0030b 	ldhu	r3,12(r16)
10006db8:	0005883a 	mov	r2,zero
10006dbc:	1900200c 	andi	r4,r3,128
10006dc0:	203fe126 	beq	r4,zero,10006d48 <__alt_data_end+0xf8006d48>
10006dc4:	18c01014 	ori	r3,r3,64
10006dc8:	80c0030d 	sth	r3,12(r16)
10006dcc:	00bfffc4 	movi	r2,-1
10006dd0:	003fdd06 	br	10006d48 <__alt_data_end+0xf8006d48>
10006dd4:	0001fcc0 	call	10001fcc <__sinit>
10006dd8:	003fcd06 	br	10006d10 <__alt_data_end+0xf8006d10>
10006ddc:	0005883a 	mov	r2,zero
10006de0:	003fd606 	br	10006d3c <__alt_data_end+0xf8006d3c>
10006de4:	81400c17 	ldw	r5,48(r16)
10006de8:	28000626 	beq	r5,zero,10006e04 <__swsetup_r+0x124>
10006dec:	80801004 	addi	r2,r16,64
10006df0:	28800326 	beq	r5,r2,10006e00 <__swsetup_r+0x120>
10006df4:	8809883a 	mov	r4,r17
10006df8:	00025640 	call	10002564 <_free_r>
10006dfc:	8100030b 	ldhu	r4,12(r16)
10006e00:	80000c15 	stw	zero,48(r16)
10006e04:	80c00417 	ldw	r3,16(r16)
10006e08:	00bff6c4 	movi	r2,-37
10006e0c:	1108703a 	and	r4,r2,r4
10006e10:	80000115 	stw	zero,4(r16)
10006e14:	80c00015 	stw	r3,0(r16)
10006e18:	003fd506 	br	10006d70 <__alt_data_end+0xf8006d70>
10006e1c:	00800244 	movi	r2,9
10006e20:	88800015 	stw	r2,0(r17)
10006e24:	20801014 	ori	r2,r4,64
10006e28:	8080030d 	sth	r2,12(r16)
10006e2c:	00bfffc4 	movi	r2,-1
10006e30:	003fc506 	br	10006d48 <__alt_data_end+0xf8006d48>

10006e34 <_close_r>:
10006e34:	defffd04 	addi	sp,sp,-12
10006e38:	dc000015 	stw	r16,0(sp)
10006e3c:	04040074 	movhi	r16,4097
10006e40:	dc400115 	stw	r17,4(sp)
10006e44:	84187104 	addi	r16,r16,25028
10006e48:	2023883a 	mov	r17,r4
10006e4c:	2809883a 	mov	r4,r5
10006e50:	dfc00215 	stw	ra,8(sp)
10006e54:	80000015 	stw	zero,0(r16)
10006e58:	000faa40 	call	1000faa4 <close>
10006e5c:	00ffffc4 	movi	r3,-1
10006e60:	10c00526 	beq	r2,r3,10006e78 <_close_r+0x44>
10006e64:	dfc00217 	ldw	ra,8(sp)
10006e68:	dc400117 	ldw	r17,4(sp)
10006e6c:	dc000017 	ldw	r16,0(sp)
10006e70:	dec00304 	addi	sp,sp,12
10006e74:	f800283a 	ret
10006e78:	80c00017 	ldw	r3,0(r16)
10006e7c:	183ff926 	beq	r3,zero,10006e64 <__alt_data_end+0xf8006e64>
10006e80:	88c00015 	stw	r3,0(r17)
10006e84:	003ff706 	br	10006e64 <__alt_data_end+0xf8006e64>

10006e88 <__call_exitprocs>:
10006e88:	defff504 	addi	sp,sp,-44
10006e8c:	df000915 	stw	fp,36(sp)
10006e90:	dd400615 	stw	r21,24(sp)
10006e94:	dc800315 	stw	r18,12(sp)
10006e98:	dfc00a15 	stw	ra,40(sp)
10006e9c:	ddc00815 	stw	r23,32(sp)
10006ea0:	dd800715 	stw	r22,28(sp)
10006ea4:	dd000515 	stw	r20,20(sp)
10006ea8:	dcc00415 	stw	r19,16(sp)
10006eac:	dc400215 	stw	r17,8(sp)
10006eb0:	dc000115 	stw	r16,4(sp)
10006eb4:	d9000015 	stw	r4,0(sp)
10006eb8:	2839883a 	mov	fp,r5
10006ebc:	04800044 	movi	r18,1
10006ec0:	057fffc4 	movi	r21,-1
10006ec4:	00840074 	movhi	r2,4097
10006ec8:	10915d04 	addi	r2,r2,17780
10006ecc:	12000017 	ldw	r8,0(r2)
10006ed0:	45005217 	ldw	r20,328(r8)
10006ed4:	44c05204 	addi	r19,r8,328
10006ed8:	a0001c26 	beq	r20,zero,10006f4c <__call_exitprocs+0xc4>
10006edc:	a0800117 	ldw	r2,4(r20)
10006ee0:	15ffffc4 	addi	r23,r2,-1
10006ee4:	b8000d16 	blt	r23,zero,10006f1c <__call_exitprocs+0x94>
10006ee8:	14000044 	addi	r16,r2,1
10006eec:	8421883a 	add	r16,r16,r16
10006ef0:	8421883a 	add	r16,r16,r16
10006ef4:	84402004 	addi	r17,r16,128
10006ef8:	a463883a 	add	r17,r20,r17
10006efc:	a421883a 	add	r16,r20,r16
10006f00:	e0001e26 	beq	fp,zero,10006f7c <__call_exitprocs+0xf4>
10006f04:	80804017 	ldw	r2,256(r16)
10006f08:	e0801c26 	beq	fp,r2,10006f7c <__call_exitprocs+0xf4>
10006f0c:	bdffffc4 	addi	r23,r23,-1
10006f10:	843fff04 	addi	r16,r16,-4
10006f14:	8c7fff04 	addi	r17,r17,-4
10006f18:	bd7ff91e 	bne	r23,r21,10006f00 <__alt_data_end+0xf8006f00>
10006f1c:	00840034 	movhi	r2,4096
10006f20:	108cb404 	addi	r2,r2,13008
10006f24:	10000926 	beq	r2,zero,10006f4c <__call_exitprocs+0xc4>
10006f28:	a0800117 	ldw	r2,4(r20)
10006f2c:	1000301e 	bne	r2,zero,10006ff0 <__call_exitprocs+0x168>
10006f30:	a0800017 	ldw	r2,0(r20)
10006f34:	10003226 	beq	r2,zero,10007000 <__call_exitprocs+0x178>
10006f38:	a009883a 	mov	r4,r20
10006f3c:	98800015 	stw	r2,0(r19)
10006f40:	00032d00 	call	100032d0 <free>
10006f44:	9d000017 	ldw	r20,0(r19)
10006f48:	a03fe41e 	bne	r20,zero,10006edc <__alt_data_end+0xf8006edc>
10006f4c:	dfc00a17 	ldw	ra,40(sp)
10006f50:	df000917 	ldw	fp,36(sp)
10006f54:	ddc00817 	ldw	r23,32(sp)
10006f58:	dd800717 	ldw	r22,28(sp)
10006f5c:	dd400617 	ldw	r21,24(sp)
10006f60:	dd000517 	ldw	r20,20(sp)
10006f64:	dcc00417 	ldw	r19,16(sp)
10006f68:	dc800317 	ldw	r18,12(sp)
10006f6c:	dc400217 	ldw	r17,8(sp)
10006f70:	dc000117 	ldw	r16,4(sp)
10006f74:	dec00b04 	addi	sp,sp,44
10006f78:	f800283a 	ret
10006f7c:	a0800117 	ldw	r2,4(r20)
10006f80:	80c00017 	ldw	r3,0(r16)
10006f84:	10bfffc4 	addi	r2,r2,-1
10006f88:	15c01426 	beq	r2,r23,10006fdc <__call_exitprocs+0x154>
10006f8c:	80000015 	stw	zero,0(r16)
10006f90:	183fde26 	beq	r3,zero,10006f0c <__alt_data_end+0xf8006f0c>
10006f94:	95c8983a 	sll	r4,r18,r23
10006f98:	a0806217 	ldw	r2,392(r20)
10006f9c:	a5800117 	ldw	r22,4(r20)
10006fa0:	2084703a 	and	r2,r4,r2
10006fa4:	10000b26 	beq	r2,zero,10006fd4 <__call_exitprocs+0x14c>
10006fa8:	a0806317 	ldw	r2,396(r20)
10006fac:	2088703a 	and	r4,r4,r2
10006fb0:	20000c1e 	bne	r4,zero,10006fe4 <__call_exitprocs+0x15c>
10006fb4:	89400017 	ldw	r5,0(r17)
10006fb8:	d9000017 	ldw	r4,0(sp)
10006fbc:	183ee83a 	callr	r3
10006fc0:	a0800117 	ldw	r2,4(r20)
10006fc4:	15bfbf1e 	bne	r2,r22,10006ec4 <__alt_data_end+0xf8006ec4>
10006fc8:	98800017 	ldw	r2,0(r19)
10006fcc:	153fcf26 	beq	r2,r20,10006f0c <__alt_data_end+0xf8006f0c>
10006fd0:	003fbc06 	br	10006ec4 <__alt_data_end+0xf8006ec4>
10006fd4:	183ee83a 	callr	r3
10006fd8:	003ff906 	br	10006fc0 <__alt_data_end+0xf8006fc0>
10006fdc:	a5c00115 	stw	r23,4(r20)
10006fe0:	003feb06 	br	10006f90 <__alt_data_end+0xf8006f90>
10006fe4:	89000017 	ldw	r4,0(r17)
10006fe8:	183ee83a 	callr	r3
10006fec:	003ff406 	br	10006fc0 <__alt_data_end+0xf8006fc0>
10006ff0:	a0800017 	ldw	r2,0(r20)
10006ff4:	a027883a 	mov	r19,r20
10006ff8:	1029883a 	mov	r20,r2
10006ffc:	003fb606 	br	10006ed8 <__alt_data_end+0xf8006ed8>
10007000:	0005883a 	mov	r2,zero
10007004:	003ffb06 	br	10006ff4 <__alt_data_end+0xf8006ff4>

10007008 <abort>:
10007008:	deffff04 	addi	sp,sp,-4
1000700c:	01000184 	movi	r4,6
10007010:	dfc00015 	stw	ra,0(sp)
10007014:	000a75c0 	call	1000a75c <raise>
10007018:	01000044 	movi	r4,1
1000701c:	000fba80 	call	1000fba8 <_exit>

10007020 <quorem>:
10007020:	defff204 	addi	sp,sp,-56
10007024:	ddc00b15 	stw	r23,44(sp)
10007028:	20800417 	ldw	r2,16(r4)
1000702c:	2dc00417 	ldw	r23,16(r5)
10007030:	dfc00d15 	stw	ra,52(sp)
10007034:	df000c15 	stw	fp,48(sp)
10007038:	dd800a15 	stw	r22,40(sp)
1000703c:	dd400915 	stw	r21,36(sp)
10007040:	dd000815 	stw	r20,32(sp)
10007044:	dcc00715 	stw	r19,28(sp)
10007048:	dc800615 	stw	r18,24(sp)
1000704c:	dc400515 	stw	r17,20(sp)
10007050:	dc000415 	stw	r16,16(sp)
10007054:	15c07a16 	blt	r2,r23,10007240 <quorem+0x220>
10007058:	bdffffc4 	addi	r23,r23,-1
1000705c:	bde9883a 	add	r20,r23,r23
10007060:	28c00504 	addi	r3,r5,20
10007064:	a529883a 	add	r20,r20,r20
10007068:	1d39883a 	add	fp,r3,r20
1000706c:	24c00504 	addi	r19,r4,20
10007070:	d9400215 	stw	r5,8(sp)
10007074:	9d29883a 	add	r20,r19,r20
10007078:	e1400017 	ldw	r5,0(fp)
1000707c:	d9000015 	stw	r4,0(sp)
10007080:	a1000017 	ldw	r4,0(r20)
10007084:	29400044 	addi	r5,r5,1
10007088:	d8c00115 	stw	r3,4(sp)
1000708c:	dd000315 	stw	r20,12(sp)
10007090:	00017280 	call	10001728 <__udivsi3>
10007094:	1025883a 	mov	r18,r2
10007098:	10003026 	beq	r2,zero,1000715c <quorem+0x13c>
1000709c:	dc400117 	ldw	r17,4(sp)
100070a0:	9829883a 	mov	r20,r19
100070a4:	002d883a 	mov	r22,zero
100070a8:	0021883a 	mov	r16,zero
100070ac:	8d400017 	ldw	r21,0(r17)
100070b0:	900b883a 	mov	r5,r18
100070b4:	8c400104 	addi	r17,r17,4
100070b8:	a93fffcc 	andi	r4,r21,65535
100070bc:	00017e40 	call	100017e4 <__mulsi3>
100070c0:	a808d43a 	srli	r4,r21,16
100070c4:	900b883a 	mov	r5,r18
100070c8:	15ad883a 	add	r22,r2,r22
100070cc:	00017e40 	call	100017e4 <__mulsi3>
100070d0:	a1000017 	ldw	r4,0(r20)
100070d4:	b00cd43a 	srli	r6,r22,16
100070d8:	b0ffffcc 	andi	r3,r22,65535
100070dc:	217fffcc 	andi	r5,r4,65535
100070e0:	2c21883a 	add	r16,r5,r16
100070e4:	80c7c83a 	sub	r3,r16,r3
100070e8:	2008d43a 	srli	r4,r4,16
100070ec:	1185883a 	add	r2,r2,r6
100070f0:	1821d43a 	srai	r16,r3,16
100070f4:	117fffcc 	andi	r5,r2,65535
100070f8:	2149c83a 	sub	r4,r4,r5
100070fc:	2421883a 	add	r16,r4,r16
10007100:	8008943a 	slli	r4,r16,16
10007104:	18ffffcc 	andi	r3,r3,65535
10007108:	102cd43a 	srli	r22,r2,16
1000710c:	20c8b03a 	or	r4,r4,r3
10007110:	a1000015 	stw	r4,0(r20)
10007114:	8021d43a 	srai	r16,r16,16
10007118:	a5000104 	addi	r20,r20,4
1000711c:	e47fe32e 	bgeu	fp,r17,100070ac <__alt_data_end+0xf80070ac>
10007120:	d8c00317 	ldw	r3,12(sp)
10007124:	18800017 	ldw	r2,0(r3)
10007128:	10000c1e 	bne	r2,zero,1000715c <quorem+0x13c>
1000712c:	18bfff04 	addi	r2,r3,-4
10007130:	9880082e 	bgeu	r19,r2,10007154 <quorem+0x134>
10007134:	18ffff17 	ldw	r3,-4(r3)
10007138:	18000326 	beq	r3,zero,10007148 <quorem+0x128>
1000713c:	00000506 	br	10007154 <quorem+0x134>
10007140:	10c00017 	ldw	r3,0(r2)
10007144:	1800031e 	bne	r3,zero,10007154 <quorem+0x134>
10007148:	10bfff04 	addi	r2,r2,-4
1000714c:	bdffffc4 	addi	r23,r23,-1
10007150:	98bffb36 	bltu	r19,r2,10007140 <__alt_data_end+0xf8007140>
10007154:	d8c00017 	ldw	r3,0(sp)
10007158:	1dc00415 	stw	r23,16(r3)
1000715c:	d9400217 	ldw	r5,8(sp)
10007160:	d9000017 	ldw	r4,0(sp)
10007164:	0009b980 	call	10009b98 <__mcmp>
10007168:	10002816 	blt	r2,zero,1000720c <quorem+0x1ec>
1000716c:	dc400117 	ldw	r17,4(sp)
10007170:	94800044 	addi	r18,r18,1
10007174:	980d883a 	mov	r6,r19
10007178:	0007883a 	mov	r3,zero
1000717c:	31000017 	ldw	r4,0(r6)
10007180:	89400017 	ldw	r5,0(r17)
10007184:	31800104 	addi	r6,r6,4
10007188:	20bfffcc 	andi	r2,r4,65535
1000718c:	10c7883a 	add	r3,r2,r3
10007190:	28bfffcc 	andi	r2,r5,65535
10007194:	1885c83a 	sub	r2,r3,r2
10007198:	280ad43a 	srli	r5,r5,16
1000719c:	2008d43a 	srli	r4,r4,16
100071a0:	1007d43a 	srai	r3,r2,16
100071a4:	10bfffcc 	andi	r2,r2,65535
100071a8:	2149c83a 	sub	r4,r4,r5
100071ac:	20c9883a 	add	r4,r4,r3
100071b0:	200a943a 	slli	r5,r4,16
100071b4:	8c400104 	addi	r17,r17,4
100071b8:	2007d43a 	srai	r3,r4,16
100071bc:	2884b03a 	or	r2,r5,r2
100071c0:	30bfff15 	stw	r2,-4(r6)
100071c4:	e47fed2e 	bgeu	fp,r17,1000717c <__alt_data_end+0xf800717c>
100071c8:	bdc5883a 	add	r2,r23,r23
100071cc:	1085883a 	add	r2,r2,r2
100071d0:	9887883a 	add	r3,r19,r2
100071d4:	18800017 	ldw	r2,0(r3)
100071d8:	10000c1e 	bne	r2,zero,1000720c <quorem+0x1ec>
100071dc:	18bfff04 	addi	r2,r3,-4
100071e0:	9880082e 	bgeu	r19,r2,10007204 <quorem+0x1e4>
100071e4:	18ffff17 	ldw	r3,-4(r3)
100071e8:	18000326 	beq	r3,zero,100071f8 <quorem+0x1d8>
100071ec:	00000506 	br	10007204 <quorem+0x1e4>
100071f0:	10c00017 	ldw	r3,0(r2)
100071f4:	1800031e 	bne	r3,zero,10007204 <quorem+0x1e4>
100071f8:	10bfff04 	addi	r2,r2,-4
100071fc:	bdffffc4 	addi	r23,r23,-1
10007200:	98bffb36 	bltu	r19,r2,100071f0 <__alt_data_end+0xf80071f0>
10007204:	d8c00017 	ldw	r3,0(sp)
10007208:	1dc00415 	stw	r23,16(r3)
1000720c:	9005883a 	mov	r2,r18
10007210:	dfc00d17 	ldw	ra,52(sp)
10007214:	df000c17 	ldw	fp,48(sp)
10007218:	ddc00b17 	ldw	r23,44(sp)
1000721c:	dd800a17 	ldw	r22,40(sp)
10007220:	dd400917 	ldw	r21,36(sp)
10007224:	dd000817 	ldw	r20,32(sp)
10007228:	dcc00717 	ldw	r19,28(sp)
1000722c:	dc800617 	ldw	r18,24(sp)
10007230:	dc400517 	ldw	r17,20(sp)
10007234:	dc000417 	ldw	r16,16(sp)
10007238:	dec00e04 	addi	sp,sp,56
1000723c:	f800283a 	ret
10007240:	0005883a 	mov	r2,zero
10007244:	003ff206 	br	10007210 <__alt_data_end+0xf8007210>

10007248 <_dtoa_r>:
10007248:	20801017 	ldw	r2,64(r4)
1000724c:	deffde04 	addi	sp,sp,-136
10007250:	df002015 	stw	fp,128(sp)
10007254:	dcc01b15 	stw	r19,108(sp)
10007258:	dc801a15 	stw	r18,104(sp)
1000725c:	dc401915 	stw	r17,100(sp)
10007260:	dc001815 	stw	r16,96(sp)
10007264:	dfc02115 	stw	ra,132(sp)
10007268:	ddc01f15 	stw	r23,124(sp)
1000726c:	dd801e15 	stw	r22,120(sp)
10007270:	dd401d15 	stw	r21,116(sp)
10007274:	dd001c15 	stw	r20,112(sp)
10007278:	d9c00315 	stw	r7,12(sp)
1000727c:	2039883a 	mov	fp,r4
10007280:	3023883a 	mov	r17,r6
10007284:	2825883a 	mov	r18,r5
10007288:	dc002417 	ldw	r16,144(sp)
1000728c:	3027883a 	mov	r19,r6
10007290:	10000826 	beq	r2,zero,100072b4 <_dtoa_r+0x6c>
10007294:	21801117 	ldw	r6,68(r4)
10007298:	00c00044 	movi	r3,1
1000729c:	100b883a 	mov	r5,r2
100072a0:	1986983a 	sll	r3,r3,r6
100072a4:	11800115 	stw	r6,4(r2)
100072a8:	10c00215 	stw	r3,8(r2)
100072ac:	00092bc0 	call	100092bc <_Bfree>
100072b0:	e0001015 	stw	zero,64(fp)
100072b4:	88002e16 	blt	r17,zero,10007370 <_dtoa_r+0x128>
100072b8:	80000015 	stw	zero,0(r16)
100072bc:	889ffc2c 	andhi	r2,r17,32752
100072c0:	00dffc34 	movhi	r3,32752
100072c4:	10c01c26 	beq	r2,r3,10007338 <_dtoa_r+0xf0>
100072c8:	000d883a 	mov	r6,zero
100072cc:	000f883a 	mov	r7,zero
100072d0:	9009883a 	mov	r4,r18
100072d4:	980b883a 	mov	r5,r19
100072d8:	000e4400 	call	1000e440 <__eqdf2>
100072dc:	10002b1e 	bne	r2,zero,1000738c <_dtoa_r+0x144>
100072e0:	d9c02317 	ldw	r7,140(sp)
100072e4:	00800044 	movi	r2,1
100072e8:	38800015 	stw	r2,0(r7)
100072ec:	d8802517 	ldw	r2,148(sp)
100072f0:	10019e26 	beq	r2,zero,1000796c <_dtoa_r+0x724>
100072f4:	d8c02517 	ldw	r3,148(sp)
100072f8:	00840074 	movhi	r2,4097
100072fc:	1089dd44 	addi	r2,r2,10101
10007300:	18800015 	stw	r2,0(r3)
10007304:	10bfffc4 	addi	r2,r2,-1
10007308:	dfc02117 	ldw	ra,132(sp)
1000730c:	df002017 	ldw	fp,128(sp)
10007310:	ddc01f17 	ldw	r23,124(sp)
10007314:	dd801e17 	ldw	r22,120(sp)
10007318:	dd401d17 	ldw	r21,116(sp)
1000731c:	dd001c17 	ldw	r20,112(sp)
10007320:	dcc01b17 	ldw	r19,108(sp)
10007324:	dc801a17 	ldw	r18,104(sp)
10007328:	dc401917 	ldw	r17,100(sp)
1000732c:	dc001817 	ldw	r16,96(sp)
10007330:	dec02204 	addi	sp,sp,136
10007334:	f800283a 	ret
10007338:	d8c02317 	ldw	r3,140(sp)
1000733c:	0089c3c4 	movi	r2,9999
10007340:	18800015 	stw	r2,0(r3)
10007344:	90017726 	beq	r18,zero,10007924 <_dtoa_r+0x6dc>
10007348:	00840074 	movhi	r2,4097
1000734c:	1089e904 	addi	r2,r2,10148
10007350:	d9002517 	ldw	r4,148(sp)
10007354:	203fec26 	beq	r4,zero,10007308 <__alt_data_end+0xf8007308>
10007358:	10c000c7 	ldb	r3,3(r2)
1000735c:	1801781e 	bne	r3,zero,10007940 <_dtoa_r+0x6f8>
10007360:	10c000c4 	addi	r3,r2,3
10007364:	d9802517 	ldw	r6,148(sp)
10007368:	30c00015 	stw	r3,0(r6)
1000736c:	003fe606 	br	10007308 <__alt_data_end+0xf8007308>
10007370:	04e00034 	movhi	r19,32768
10007374:	9cffffc4 	addi	r19,r19,-1
10007378:	00800044 	movi	r2,1
1000737c:	8ce6703a 	and	r19,r17,r19
10007380:	80800015 	stw	r2,0(r16)
10007384:	9823883a 	mov	r17,r19
10007388:	003fcc06 	br	100072bc <__alt_data_end+0xf80072bc>
1000738c:	d8800204 	addi	r2,sp,8
10007390:	d8800015 	stw	r2,0(sp)
10007394:	d9c00104 	addi	r7,sp,4
10007398:	900b883a 	mov	r5,r18
1000739c:	980d883a 	mov	r6,r19
100073a0:	e009883a 	mov	r4,fp
100073a4:	8820d53a 	srli	r16,r17,20
100073a8:	0009f640 	call	10009f64 <__d2b>
100073ac:	d8800915 	stw	r2,36(sp)
100073b0:	8001651e 	bne	r16,zero,10007948 <_dtoa_r+0x700>
100073b4:	dd800217 	ldw	r22,8(sp)
100073b8:	dc000117 	ldw	r16,4(sp)
100073bc:	00800804 	movi	r2,32
100073c0:	b421883a 	add	r16,r22,r16
100073c4:	80c10c84 	addi	r3,r16,1074
100073c8:	10c2d10e 	bge	r2,r3,10007f10 <_dtoa_r+0xcc8>
100073cc:	00801004 	movi	r2,64
100073d0:	81010484 	addi	r4,r16,1042
100073d4:	10c7c83a 	sub	r3,r2,r3
100073d8:	9108d83a 	srl	r4,r18,r4
100073dc:	88e2983a 	sll	r17,r17,r3
100073e0:	2448b03a 	or	r4,r4,r17
100073e4:	000f95c0 	call	1000f95c <__floatunsidf>
100073e8:	017f8434 	movhi	r5,65040
100073ec:	01800044 	movi	r6,1
100073f0:	1009883a 	mov	r4,r2
100073f4:	194b883a 	add	r5,r3,r5
100073f8:	843fffc4 	addi	r16,r16,-1
100073fc:	d9801115 	stw	r6,68(sp)
10007400:	000d883a 	mov	r6,zero
10007404:	01cffe34 	movhi	r7,16376
10007408:	000ef040 	call	1000ef04 <__subdf3>
1000740c:	0198dbf4 	movhi	r6,25455
10007410:	01cff4f4 	movhi	r7,16339
10007414:	3190d844 	addi	r6,r6,17249
10007418:	39e1e9c4 	addi	r7,r7,-30809
1000741c:	1009883a 	mov	r4,r2
10007420:	180b883a 	mov	r5,r3
10007424:	000e6980 	call	1000e698 <__muldf3>
10007428:	01a2d874 	movhi	r6,35681
1000742c:	01cff1f4 	movhi	r7,16327
10007430:	31b22cc4 	addi	r6,r6,-14157
10007434:	39e28a04 	addi	r7,r7,-30168
10007438:	180b883a 	mov	r5,r3
1000743c:	1009883a 	mov	r4,r2
10007440:	000d1c40 	call	1000d1c4 <__adddf3>
10007444:	8009883a 	mov	r4,r16
10007448:	1029883a 	mov	r20,r2
1000744c:	1823883a 	mov	r17,r3
10007450:	000f8800 	call	1000f880 <__floatsidf>
10007454:	019427f4 	movhi	r6,20639
10007458:	01cff4f4 	movhi	r7,16339
1000745c:	319e7ec4 	addi	r6,r6,31227
10007460:	39d104c4 	addi	r7,r7,17427
10007464:	1009883a 	mov	r4,r2
10007468:	180b883a 	mov	r5,r3
1000746c:	000e6980 	call	1000e698 <__muldf3>
10007470:	100d883a 	mov	r6,r2
10007474:	180f883a 	mov	r7,r3
10007478:	a009883a 	mov	r4,r20
1000747c:	880b883a 	mov	r5,r17
10007480:	000d1c40 	call	1000d1c4 <__adddf3>
10007484:	1009883a 	mov	r4,r2
10007488:	180b883a 	mov	r5,r3
1000748c:	1029883a 	mov	r20,r2
10007490:	1823883a 	mov	r17,r3
10007494:	000f8000 	call	1000f800 <__fixdfsi>
10007498:	000d883a 	mov	r6,zero
1000749c:	000f883a 	mov	r7,zero
100074a0:	a009883a 	mov	r4,r20
100074a4:	880b883a 	mov	r5,r17
100074a8:	d8800515 	stw	r2,20(sp)
100074ac:	000e5a40 	call	1000e5a4 <__ledf2>
100074b0:	10028716 	blt	r2,zero,10007ed0 <_dtoa_r+0xc88>
100074b4:	d8c00517 	ldw	r3,20(sp)
100074b8:	00800584 	movi	r2,22
100074bc:	10c27536 	bltu	r2,r3,10007e94 <_dtoa_r+0xc4c>
100074c0:	180490fa 	slli	r2,r3,3
100074c4:	00c40074 	movhi	r3,4097
100074c8:	18ca0404 	addi	r3,r3,10256
100074cc:	1885883a 	add	r2,r3,r2
100074d0:	11000017 	ldw	r4,0(r2)
100074d4:	11400117 	ldw	r5,4(r2)
100074d8:	900d883a 	mov	r6,r18
100074dc:	980f883a 	mov	r7,r19
100074e0:	000e4c80 	call	1000e4c8 <__gedf2>
100074e4:	00828d0e 	bge	zero,r2,10007f1c <_dtoa_r+0xcd4>
100074e8:	d9000517 	ldw	r4,20(sp)
100074ec:	d8000e15 	stw	zero,56(sp)
100074f0:	213fffc4 	addi	r4,r4,-1
100074f4:	d9000515 	stw	r4,20(sp)
100074f8:	b42dc83a 	sub	r22,r22,r16
100074fc:	b5bfffc4 	addi	r22,r22,-1
10007500:	b0026f16 	blt	r22,zero,10007ec0 <_dtoa_r+0xc78>
10007504:	d8000815 	stw	zero,32(sp)
10007508:	d9c00517 	ldw	r7,20(sp)
1000750c:	38026416 	blt	r7,zero,10007ea0 <_dtoa_r+0xc58>
10007510:	b1ed883a 	add	r22,r22,r7
10007514:	d9c00d15 	stw	r7,52(sp)
10007518:	d8000a15 	stw	zero,40(sp)
1000751c:	d9800317 	ldw	r6,12(sp)
10007520:	00800244 	movi	r2,9
10007524:	11811436 	bltu	r2,r6,10007978 <_dtoa_r+0x730>
10007528:	00800144 	movi	r2,5
1000752c:	1184e10e 	bge	r2,r6,100088b4 <_dtoa_r+0x166c>
10007530:	31bfff04 	addi	r6,r6,-4
10007534:	d9800315 	stw	r6,12(sp)
10007538:	0023883a 	mov	r17,zero
1000753c:	d9800317 	ldw	r6,12(sp)
10007540:	008000c4 	movi	r2,3
10007544:	30836726 	beq	r6,r2,100082e4 <_dtoa_r+0x109c>
10007548:	1183410e 	bge	r2,r6,10008250 <_dtoa_r+0x1008>
1000754c:	d9c00317 	ldw	r7,12(sp)
10007550:	00800104 	movi	r2,4
10007554:	38827c26 	beq	r7,r2,10007f48 <_dtoa_r+0xd00>
10007558:	00800144 	movi	r2,5
1000755c:	3884c41e 	bne	r7,r2,10008870 <_dtoa_r+0x1628>
10007560:	00800044 	movi	r2,1
10007564:	d8800b15 	stw	r2,44(sp)
10007568:	d8c00517 	ldw	r3,20(sp)
1000756c:	d9002217 	ldw	r4,136(sp)
10007570:	1907883a 	add	r3,r3,r4
10007574:	19800044 	addi	r6,r3,1
10007578:	d8c00c15 	stw	r3,48(sp)
1000757c:	d9800615 	stw	r6,24(sp)
10007580:	0183a40e 	bge	zero,r6,10008414 <_dtoa_r+0x11cc>
10007584:	d9800617 	ldw	r6,24(sp)
10007588:	3021883a 	mov	r16,r6
1000758c:	e0001115 	stw	zero,68(fp)
10007590:	008005c4 	movi	r2,23
10007594:	1184c92e 	bgeu	r2,r6,100088bc <_dtoa_r+0x1674>
10007598:	00c00044 	movi	r3,1
1000759c:	00800104 	movi	r2,4
100075a0:	1085883a 	add	r2,r2,r2
100075a4:	11000504 	addi	r4,r2,20
100075a8:	180b883a 	mov	r5,r3
100075ac:	18c00044 	addi	r3,r3,1
100075b0:	313ffb2e 	bgeu	r6,r4,100075a0 <__alt_data_end+0xf80075a0>
100075b4:	e1401115 	stw	r5,68(fp)
100075b8:	e009883a 	mov	r4,fp
100075bc:	00092140 	call	10009214 <_Balloc>
100075c0:	d8800715 	stw	r2,28(sp)
100075c4:	e0801015 	stw	r2,64(fp)
100075c8:	00800384 	movi	r2,14
100075cc:	1400f736 	bltu	r2,r16,100079ac <_dtoa_r+0x764>
100075d0:	8800f626 	beq	r17,zero,100079ac <_dtoa_r+0x764>
100075d4:	d9c00517 	ldw	r7,20(sp)
100075d8:	01c39a0e 	bge	zero,r7,10008444 <_dtoa_r+0x11fc>
100075dc:	388003cc 	andi	r2,r7,15
100075e0:	100490fa 	slli	r2,r2,3
100075e4:	382bd13a 	srai	r21,r7,4
100075e8:	00c40074 	movhi	r3,4097
100075ec:	18ca0404 	addi	r3,r3,10256
100075f0:	1885883a 	add	r2,r3,r2
100075f4:	a8c0040c 	andi	r3,r21,16
100075f8:	12400017 	ldw	r9,0(r2)
100075fc:	12000117 	ldw	r8,4(r2)
10007600:	18037926 	beq	r3,zero,100083e8 <_dtoa_r+0x11a0>
10007604:	00840074 	movhi	r2,4097
10007608:	1089fa04 	addi	r2,r2,10216
1000760c:	11800817 	ldw	r6,32(r2)
10007610:	11c00917 	ldw	r7,36(r2)
10007614:	9009883a 	mov	r4,r18
10007618:	980b883a 	mov	r5,r19
1000761c:	da001715 	stw	r8,92(sp)
10007620:	da401615 	stw	r9,88(sp)
10007624:	000da700 	call	1000da70 <__divdf3>
10007628:	da001717 	ldw	r8,92(sp)
1000762c:	da401617 	ldw	r9,88(sp)
10007630:	ad4003cc 	andi	r21,r21,15
10007634:	040000c4 	movi	r16,3
10007638:	1023883a 	mov	r17,r2
1000763c:	1829883a 	mov	r20,r3
10007640:	a8001126 	beq	r21,zero,10007688 <_dtoa_r+0x440>
10007644:	05c40074 	movhi	r23,4097
10007648:	bdc9fa04 	addi	r23,r23,10216
1000764c:	4805883a 	mov	r2,r9
10007650:	4007883a 	mov	r3,r8
10007654:	a980004c 	andi	r6,r21,1
10007658:	1009883a 	mov	r4,r2
1000765c:	a82bd07a 	srai	r21,r21,1
10007660:	180b883a 	mov	r5,r3
10007664:	30000426 	beq	r6,zero,10007678 <_dtoa_r+0x430>
10007668:	b9800017 	ldw	r6,0(r23)
1000766c:	b9c00117 	ldw	r7,4(r23)
10007670:	84000044 	addi	r16,r16,1
10007674:	000e6980 	call	1000e698 <__muldf3>
10007678:	bdc00204 	addi	r23,r23,8
1000767c:	a83ff51e 	bne	r21,zero,10007654 <__alt_data_end+0xf8007654>
10007680:	1013883a 	mov	r9,r2
10007684:	1811883a 	mov	r8,r3
10007688:	480d883a 	mov	r6,r9
1000768c:	400f883a 	mov	r7,r8
10007690:	8809883a 	mov	r4,r17
10007694:	a00b883a 	mov	r5,r20
10007698:	000da700 	call	1000da70 <__divdf3>
1000769c:	d8800f15 	stw	r2,60(sp)
100076a0:	d8c01015 	stw	r3,64(sp)
100076a4:	d8c00e17 	ldw	r3,56(sp)
100076a8:	18000626 	beq	r3,zero,100076c4 <_dtoa_r+0x47c>
100076ac:	d9000f17 	ldw	r4,60(sp)
100076b0:	d9401017 	ldw	r5,64(sp)
100076b4:	000d883a 	mov	r6,zero
100076b8:	01cffc34 	movhi	r7,16368
100076bc:	000e5a40 	call	1000e5a4 <__ledf2>
100076c0:	10040b16 	blt	r2,zero,100086f0 <_dtoa_r+0x14a8>
100076c4:	8009883a 	mov	r4,r16
100076c8:	000f8800 	call	1000f880 <__floatsidf>
100076cc:	d9800f17 	ldw	r6,60(sp)
100076d0:	d9c01017 	ldw	r7,64(sp)
100076d4:	1009883a 	mov	r4,r2
100076d8:	180b883a 	mov	r5,r3
100076dc:	000e6980 	call	1000e698 <__muldf3>
100076e0:	000d883a 	mov	r6,zero
100076e4:	01d00734 	movhi	r7,16412
100076e8:	1009883a 	mov	r4,r2
100076ec:	180b883a 	mov	r5,r3
100076f0:	000d1c40 	call	1000d1c4 <__adddf3>
100076f4:	1021883a 	mov	r16,r2
100076f8:	d8800617 	ldw	r2,24(sp)
100076fc:	047f3034 	movhi	r17,64704
10007700:	1c63883a 	add	r17,r3,r17
10007704:	10031826 	beq	r2,zero,10008368 <_dtoa_r+0x1120>
10007708:	d8c00517 	ldw	r3,20(sp)
1000770c:	db000617 	ldw	r12,24(sp)
10007710:	d8c01315 	stw	r3,76(sp)
10007714:	d9000b17 	ldw	r4,44(sp)
10007718:	20038f26 	beq	r4,zero,10008558 <_dtoa_r+0x1310>
1000771c:	60bfffc4 	addi	r2,r12,-1
10007720:	100490fa 	slli	r2,r2,3
10007724:	00c40074 	movhi	r3,4097
10007728:	18ca0404 	addi	r3,r3,10256
1000772c:	1885883a 	add	r2,r3,r2
10007730:	11800017 	ldw	r6,0(r2)
10007734:	11c00117 	ldw	r7,4(r2)
10007738:	d8800717 	ldw	r2,28(sp)
1000773c:	0009883a 	mov	r4,zero
10007740:	014ff834 	movhi	r5,16352
10007744:	db001615 	stw	r12,88(sp)
10007748:	15c00044 	addi	r23,r2,1
1000774c:	000da700 	call	1000da70 <__divdf3>
10007750:	800d883a 	mov	r6,r16
10007754:	880f883a 	mov	r7,r17
10007758:	1009883a 	mov	r4,r2
1000775c:	180b883a 	mov	r5,r3
10007760:	000ef040 	call	1000ef04 <__subdf3>
10007764:	d9401017 	ldw	r5,64(sp)
10007768:	d9000f17 	ldw	r4,60(sp)
1000776c:	102b883a 	mov	r21,r2
10007770:	d8c01215 	stw	r3,72(sp)
10007774:	000f8000 	call	1000f800 <__fixdfsi>
10007778:	1009883a 	mov	r4,r2
1000777c:	1029883a 	mov	r20,r2
10007780:	000f8800 	call	1000f880 <__floatsidf>
10007784:	d9000f17 	ldw	r4,60(sp)
10007788:	d9401017 	ldw	r5,64(sp)
1000778c:	100d883a 	mov	r6,r2
10007790:	180f883a 	mov	r7,r3
10007794:	000ef040 	call	1000ef04 <__subdf3>
10007798:	1823883a 	mov	r17,r3
1000779c:	d8c00717 	ldw	r3,28(sp)
100077a0:	d9401217 	ldw	r5,72(sp)
100077a4:	a2000c04 	addi	r8,r20,48
100077a8:	1021883a 	mov	r16,r2
100077ac:	1a000005 	stb	r8,0(r3)
100077b0:	800d883a 	mov	r6,r16
100077b4:	880f883a 	mov	r7,r17
100077b8:	a809883a 	mov	r4,r21
100077bc:	4029883a 	mov	r20,r8
100077c0:	000e4c80 	call	1000e4c8 <__gedf2>
100077c4:	00841d16 	blt	zero,r2,1000883c <_dtoa_r+0x15f4>
100077c8:	800d883a 	mov	r6,r16
100077cc:	880f883a 	mov	r7,r17
100077d0:	0009883a 	mov	r4,zero
100077d4:	014ffc34 	movhi	r5,16368
100077d8:	000ef040 	call	1000ef04 <__subdf3>
100077dc:	d9401217 	ldw	r5,72(sp)
100077e0:	100d883a 	mov	r6,r2
100077e4:	180f883a 	mov	r7,r3
100077e8:	a809883a 	mov	r4,r21
100077ec:	000e4c80 	call	1000e4c8 <__gedf2>
100077f0:	db001617 	ldw	r12,88(sp)
100077f4:	00840e16 	blt	zero,r2,10008830 <_dtoa_r+0x15e8>
100077f8:	00800044 	movi	r2,1
100077fc:	13006b0e 	bge	r2,r12,100079ac <_dtoa_r+0x764>
10007800:	d9000717 	ldw	r4,28(sp)
10007804:	dd800f15 	stw	r22,60(sp)
10007808:	dcc01015 	stw	r19,64(sp)
1000780c:	2319883a 	add	r12,r4,r12
10007810:	dcc01217 	ldw	r19,72(sp)
10007814:	602d883a 	mov	r22,r12
10007818:	dc801215 	stw	r18,72(sp)
1000781c:	b825883a 	mov	r18,r23
10007820:	00000906 	br	10007848 <_dtoa_r+0x600>
10007824:	000ef040 	call	1000ef04 <__subdf3>
10007828:	a80d883a 	mov	r6,r21
1000782c:	980f883a 	mov	r7,r19
10007830:	1009883a 	mov	r4,r2
10007834:	180b883a 	mov	r5,r3
10007838:	000e5a40 	call	1000e5a4 <__ledf2>
1000783c:	1003e816 	blt	r2,zero,100087e0 <_dtoa_r+0x1598>
10007840:	b825883a 	mov	r18,r23
10007844:	bd83e926 	beq	r23,r22,100087ec <_dtoa_r+0x15a4>
10007848:	a809883a 	mov	r4,r21
1000784c:	980b883a 	mov	r5,r19
10007850:	000d883a 	mov	r6,zero
10007854:	01d00934 	movhi	r7,16420
10007858:	000e6980 	call	1000e698 <__muldf3>
1000785c:	000d883a 	mov	r6,zero
10007860:	01d00934 	movhi	r7,16420
10007864:	8009883a 	mov	r4,r16
10007868:	880b883a 	mov	r5,r17
1000786c:	102b883a 	mov	r21,r2
10007870:	1827883a 	mov	r19,r3
10007874:	000e6980 	call	1000e698 <__muldf3>
10007878:	180b883a 	mov	r5,r3
1000787c:	1009883a 	mov	r4,r2
10007880:	1821883a 	mov	r16,r3
10007884:	1023883a 	mov	r17,r2
10007888:	000f8000 	call	1000f800 <__fixdfsi>
1000788c:	1009883a 	mov	r4,r2
10007890:	1029883a 	mov	r20,r2
10007894:	000f8800 	call	1000f880 <__floatsidf>
10007898:	8809883a 	mov	r4,r17
1000789c:	800b883a 	mov	r5,r16
100078a0:	100d883a 	mov	r6,r2
100078a4:	180f883a 	mov	r7,r3
100078a8:	000ef040 	call	1000ef04 <__subdf3>
100078ac:	a5000c04 	addi	r20,r20,48
100078b0:	a80d883a 	mov	r6,r21
100078b4:	980f883a 	mov	r7,r19
100078b8:	1009883a 	mov	r4,r2
100078bc:	180b883a 	mov	r5,r3
100078c0:	95000005 	stb	r20,0(r18)
100078c4:	1021883a 	mov	r16,r2
100078c8:	1823883a 	mov	r17,r3
100078cc:	000e5a40 	call	1000e5a4 <__ledf2>
100078d0:	bdc00044 	addi	r23,r23,1
100078d4:	800d883a 	mov	r6,r16
100078d8:	880f883a 	mov	r7,r17
100078dc:	0009883a 	mov	r4,zero
100078e0:	014ffc34 	movhi	r5,16368
100078e4:	103fcf0e 	bge	r2,zero,10007824 <__alt_data_end+0xf8007824>
100078e8:	d8c01317 	ldw	r3,76(sp)
100078ec:	d8c00515 	stw	r3,20(sp)
100078f0:	d9400917 	ldw	r5,36(sp)
100078f4:	e009883a 	mov	r4,fp
100078f8:	00092bc0 	call	100092bc <_Bfree>
100078fc:	d9000517 	ldw	r4,20(sp)
10007900:	d9802317 	ldw	r6,140(sp)
10007904:	d9c02517 	ldw	r7,148(sp)
10007908:	b8000005 	stb	zero,0(r23)
1000790c:	20800044 	addi	r2,r4,1
10007910:	30800015 	stw	r2,0(r6)
10007914:	3802aa26 	beq	r7,zero,100083c0 <_dtoa_r+0x1178>
10007918:	3dc00015 	stw	r23,0(r7)
1000791c:	d8800717 	ldw	r2,28(sp)
10007920:	003e7906 	br	10007308 <__alt_data_end+0xf8007308>
10007924:	00800434 	movhi	r2,16
10007928:	10bfffc4 	addi	r2,r2,-1
1000792c:	88a2703a 	and	r17,r17,r2
10007930:	883e851e 	bne	r17,zero,10007348 <__alt_data_end+0xf8007348>
10007934:	00840074 	movhi	r2,4097
10007938:	1089e604 	addi	r2,r2,10136
1000793c:	003e8406 	br	10007350 <__alt_data_end+0xf8007350>
10007940:	10c00204 	addi	r3,r2,8
10007944:	003e8706 	br	10007364 <__alt_data_end+0xf8007364>
10007948:	01400434 	movhi	r5,16
1000794c:	297fffc4 	addi	r5,r5,-1
10007950:	994a703a 	and	r5,r19,r5
10007954:	9009883a 	mov	r4,r18
10007958:	843f0044 	addi	r16,r16,-1023
1000795c:	294ffc34 	orhi	r5,r5,16368
10007960:	dd800217 	ldw	r22,8(sp)
10007964:	d8001115 	stw	zero,68(sp)
10007968:	003ea506 	br	10007400 <__alt_data_end+0xf8007400>
1000796c:	00840074 	movhi	r2,4097
10007970:	1089dd04 	addi	r2,r2,10100
10007974:	003e6406 	br	10007308 <__alt_data_end+0xf8007308>
10007978:	e0001115 	stw	zero,68(fp)
1000797c:	000b883a 	mov	r5,zero
10007980:	e009883a 	mov	r4,fp
10007984:	00092140 	call	10009214 <_Balloc>
10007988:	01bfffc4 	movi	r6,-1
1000798c:	01c00044 	movi	r7,1
10007990:	d8800715 	stw	r2,28(sp)
10007994:	d9800c15 	stw	r6,48(sp)
10007998:	e0801015 	stw	r2,64(fp)
1000799c:	d8000315 	stw	zero,12(sp)
100079a0:	d9c00b15 	stw	r7,44(sp)
100079a4:	d9800615 	stw	r6,24(sp)
100079a8:	d8002215 	stw	zero,136(sp)
100079ac:	d8800117 	ldw	r2,4(sp)
100079b0:	10008916 	blt	r2,zero,10007bd8 <_dtoa_r+0x990>
100079b4:	d9000517 	ldw	r4,20(sp)
100079b8:	00c00384 	movi	r3,14
100079bc:	19008616 	blt	r3,r4,10007bd8 <_dtoa_r+0x990>
100079c0:	200490fa 	slli	r2,r4,3
100079c4:	00c40074 	movhi	r3,4097
100079c8:	d9802217 	ldw	r6,136(sp)
100079cc:	18ca0404 	addi	r3,r3,10256
100079d0:	1885883a 	add	r2,r3,r2
100079d4:	14000017 	ldw	r16,0(r2)
100079d8:	14400117 	ldw	r17,4(r2)
100079dc:	30016316 	blt	r6,zero,10007f6c <_dtoa_r+0xd24>
100079e0:	800d883a 	mov	r6,r16
100079e4:	880f883a 	mov	r7,r17
100079e8:	9009883a 	mov	r4,r18
100079ec:	980b883a 	mov	r5,r19
100079f0:	000da700 	call	1000da70 <__divdf3>
100079f4:	180b883a 	mov	r5,r3
100079f8:	1009883a 	mov	r4,r2
100079fc:	000f8000 	call	1000f800 <__fixdfsi>
10007a00:	1009883a 	mov	r4,r2
10007a04:	102b883a 	mov	r21,r2
10007a08:	000f8800 	call	1000f880 <__floatsidf>
10007a0c:	800d883a 	mov	r6,r16
10007a10:	880f883a 	mov	r7,r17
10007a14:	1009883a 	mov	r4,r2
10007a18:	180b883a 	mov	r5,r3
10007a1c:	000e6980 	call	1000e698 <__muldf3>
10007a20:	100d883a 	mov	r6,r2
10007a24:	180f883a 	mov	r7,r3
10007a28:	9009883a 	mov	r4,r18
10007a2c:	980b883a 	mov	r5,r19
10007a30:	000ef040 	call	1000ef04 <__subdf3>
10007a34:	d9c00717 	ldw	r7,28(sp)
10007a38:	1009883a 	mov	r4,r2
10007a3c:	a8800c04 	addi	r2,r21,48
10007a40:	38800005 	stb	r2,0(r7)
10007a44:	3dc00044 	addi	r23,r7,1
10007a48:	d9c00617 	ldw	r7,24(sp)
10007a4c:	01800044 	movi	r6,1
10007a50:	180b883a 	mov	r5,r3
10007a54:	2005883a 	mov	r2,r4
10007a58:	39803826 	beq	r7,r6,10007b3c <_dtoa_r+0x8f4>
10007a5c:	000d883a 	mov	r6,zero
10007a60:	01d00934 	movhi	r7,16420
10007a64:	000e6980 	call	1000e698 <__muldf3>
10007a68:	000d883a 	mov	r6,zero
10007a6c:	000f883a 	mov	r7,zero
10007a70:	1009883a 	mov	r4,r2
10007a74:	180b883a 	mov	r5,r3
10007a78:	1025883a 	mov	r18,r2
10007a7c:	1827883a 	mov	r19,r3
10007a80:	000e4400 	call	1000e440 <__eqdf2>
10007a84:	103f9a26 	beq	r2,zero,100078f0 <__alt_data_end+0xf80078f0>
10007a88:	d9c00617 	ldw	r7,24(sp)
10007a8c:	d8c00717 	ldw	r3,28(sp)
10007a90:	b829883a 	mov	r20,r23
10007a94:	38bfffc4 	addi	r2,r7,-1
10007a98:	18ad883a 	add	r22,r3,r2
10007a9c:	00000a06 	br	10007ac8 <_dtoa_r+0x880>
10007aa0:	000e6980 	call	1000e698 <__muldf3>
10007aa4:	000d883a 	mov	r6,zero
10007aa8:	000f883a 	mov	r7,zero
10007aac:	1009883a 	mov	r4,r2
10007ab0:	180b883a 	mov	r5,r3
10007ab4:	1025883a 	mov	r18,r2
10007ab8:	1827883a 	mov	r19,r3
10007abc:	b829883a 	mov	r20,r23
10007ac0:	000e4400 	call	1000e440 <__eqdf2>
10007ac4:	103f8a26 	beq	r2,zero,100078f0 <__alt_data_end+0xf80078f0>
10007ac8:	800d883a 	mov	r6,r16
10007acc:	880f883a 	mov	r7,r17
10007ad0:	9009883a 	mov	r4,r18
10007ad4:	980b883a 	mov	r5,r19
10007ad8:	000da700 	call	1000da70 <__divdf3>
10007adc:	180b883a 	mov	r5,r3
10007ae0:	1009883a 	mov	r4,r2
10007ae4:	000f8000 	call	1000f800 <__fixdfsi>
10007ae8:	1009883a 	mov	r4,r2
10007aec:	102b883a 	mov	r21,r2
10007af0:	000f8800 	call	1000f880 <__floatsidf>
10007af4:	800d883a 	mov	r6,r16
10007af8:	880f883a 	mov	r7,r17
10007afc:	1009883a 	mov	r4,r2
10007b00:	180b883a 	mov	r5,r3
10007b04:	000e6980 	call	1000e698 <__muldf3>
10007b08:	100d883a 	mov	r6,r2
10007b0c:	180f883a 	mov	r7,r3
10007b10:	9009883a 	mov	r4,r18
10007b14:	980b883a 	mov	r5,r19
10007b18:	000ef040 	call	1000ef04 <__subdf3>
10007b1c:	aa000c04 	addi	r8,r21,48
10007b20:	a2000005 	stb	r8,0(r20)
10007b24:	000d883a 	mov	r6,zero
10007b28:	01d00934 	movhi	r7,16420
10007b2c:	1009883a 	mov	r4,r2
10007b30:	180b883a 	mov	r5,r3
10007b34:	a5c00044 	addi	r23,r20,1
10007b38:	b53fd91e 	bne	r22,r20,10007aa0 <__alt_data_end+0xf8007aa0>
10007b3c:	100d883a 	mov	r6,r2
10007b40:	180f883a 	mov	r7,r3
10007b44:	1009883a 	mov	r4,r2
10007b48:	180b883a 	mov	r5,r3
10007b4c:	000d1c40 	call	1000d1c4 <__adddf3>
10007b50:	100d883a 	mov	r6,r2
10007b54:	180f883a 	mov	r7,r3
10007b58:	8009883a 	mov	r4,r16
10007b5c:	880b883a 	mov	r5,r17
10007b60:	1027883a 	mov	r19,r2
10007b64:	1825883a 	mov	r18,r3
10007b68:	000e5a40 	call	1000e5a4 <__ledf2>
10007b6c:	10000816 	blt	r2,zero,10007b90 <_dtoa_r+0x948>
10007b70:	980d883a 	mov	r6,r19
10007b74:	900f883a 	mov	r7,r18
10007b78:	8009883a 	mov	r4,r16
10007b7c:	880b883a 	mov	r5,r17
10007b80:	000e4400 	call	1000e440 <__eqdf2>
10007b84:	103f5a1e 	bne	r2,zero,100078f0 <__alt_data_end+0xf80078f0>
10007b88:	ad40004c 	andi	r21,r21,1
10007b8c:	a83f5826 	beq	r21,zero,100078f0 <__alt_data_end+0xf80078f0>
10007b90:	bd3fffc3 	ldbu	r20,-1(r23)
10007b94:	b8bfffc4 	addi	r2,r23,-1
10007b98:	1007883a 	mov	r3,r2
10007b9c:	01400e44 	movi	r5,57
10007ba0:	d9800717 	ldw	r6,28(sp)
10007ba4:	00000506 	br	10007bbc <_dtoa_r+0x974>
10007ba8:	18ffffc4 	addi	r3,r3,-1
10007bac:	11824726 	beq	r2,r6,100084cc <_dtoa_r+0x1284>
10007bb0:	1d000003 	ldbu	r20,0(r3)
10007bb4:	102f883a 	mov	r23,r2
10007bb8:	10bfffc4 	addi	r2,r2,-1
10007bbc:	a1003fcc 	andi	r4,r20,255
10007bc0:	2100201c 	xori	r4,r4,128
10007bc4:	213fe004 	addi	r4,r4,-128
10007bc8:	217ff726 	beq	r4,r5,10007ba8 <__alt_data_end+0xf8007ba8>
10007bcc:	a2000044 	addi	r8,r20,1
10007bd0:	12000005 	stb	r8,0(r2)
10007bd4:	003f4606 	br	100078f0 <__alt_data_end+0xf80078f0>
10007bd8:	d9000b17 	ldw	r4,44(sp)
10007bdc:	2000c826 	beq	r4,zero,10007f00 <_dtoa_r+0xcb8>
10007be0:	d9800317 	ldw	r6,12(sp)
10007be4:	00c00044 	movi	r3,1
10007be8:	1980f90e 	bge	r3,r6,10007fd0 <_dtoa_r+0xd88>
10007bec:	d8800617 	ldw	r2,24(sp)
10007bf0:	d8c00a17 	ldw	r3,40(sp)
10007bf4:	157fffc4 	addi	r21,r2,-1
10007bf8:	1d41f316 	blt	r3,r21,100083c8 <_dtoa_r+0x1180>
10007bfc:	1d6bc83a 	sub	r21,r3,r21
10007c00:	d9c00617 	ldw	r7,24(sp)
10007c04:	3802aa16 	blt	r7,zero,100086b0 <_dtoa_r+0x1468>
10007c08:	dd000817 	ldw	r20,32(sp)
10007c0c:	d8800617 	ldw	r2,24(sp)
10007c10:	d8c00817 	ldw	r3,32(sp)
10007c14:	01400044 	movi	r5,1
10007c18:	e009883a 	mov	r4,fp
10007c1c:	1887883a 	add	r3,r3,r2
10007c20:	d8c00815 	stw	r3,32(sp)
10007c24:	b0ad883a 	add	r22,r22,r2
10007c28:	00096480 	call	10009648 <__i2b>
10007c2c:	1023883a 	mov	r17,r2
10007c30:	a0000826 	beq	r20,zero,10007c54 <_dtoa_r+0xa0c>
10007c34:	0580070e 	bge	zero,r22,10007c54 <_dtoa_r+0xa0c>
10007c38:	a005883a 	mov	r2,r20
10007c3c:	b500b916 	blt	r22,r20,10007f24 <_dtoa_r+0xcdc>
10007c40:	d9000817 	ldw	r4,32(sp)
10007c44:	a0a9c83a 	sub	r20,r20,r2
10007c48:	b0adc83a 	sub	r22,r22,r2
10007c4c:	2089c83a 	sub	r4,r4,r2
10007c50:	d9000815 	stw	r4,32(sp)
10007c54:	d9800a17 	ldw	r6,40(sp)
10007c58:	0181810e 	bge	zero,r6,10008260 <_dtoa_r+0x1018>
10007c5c:	d9c00b17 	ldw	r7,44(sp)
10007c60:	3800b326 	beq	r7,zero,10007f30 <_dtoa_r+0xce8>
10007c64:	a800b226 	beq	r21,zero,10007f30 <_dtoa_r+0xce8>
10007c68:	880b883a 	mov	r5,r17
10007c6c:	a80d883a 	mov	r6,r21
10007c70:	e009883a 	mov	r4,fp
10007c74:	00099100 	call	10009910 <__pow5mult>
10007c78:	d9800917 	ldw	r6,36(sp)
10007c7c:	100b883a 	mov	r5,r2
10007c80:	e009883a 	mov	r4,fp
10007c84:	1023883a 	mov	r17,r2
10007c88:	00096840 	call	10009684 <__multiply>
10007c8c:	1021883a 	mov	r16,r2
10007c90:	d8800a17 	ldw	r2,40(sp)
10007c94:	d9400917 	ldw	r5,36(sp)
10007c98:	e009883a 	mov	r4,fp
10007c9c:	1545c83a 	sub	r2,r2,r21
10007ca0:	d8800a15 	stw	r2,40(sp)
10007ca4:	00092bc0 	call	100092bc <_Bfree>
10007ca8:	d8c00a17 	ldw	r3,40(sp)
10007cac:	18009f1e 	bne	r3,zero,10007f2c <_dtoa_r+0xce4>
10007cb0:	05c00044 	movi	r23,1
10007cb4:	e009883a 	mov	r4,fp
10007cb8:	b80b883a 	mov	r5,r23
10007cbc:	00096480 	call	10009648 <__i2b>
10007cc0:	d9000d17 	ldw	r4,52(sp)
10007cc4:	102b883a 	mov	r21,r2
10007cc8:	2000ce26 	beq	r4,zero,10008004 <_dtoa_r+0xdbc>
10007ccc:	200d883a 	mov	r6,r4
10007cd0:	100b883a 	mov	r5,r2
10007cd4:	e009883a 	mov	r4,fp
10007cd8:	00099100 	call	10009910 <__pow5mult>
10007cdc:	d9800317 	ldw	r6,12(sp)
10007ce0:	102b883a 	mov	r21,r2
10007ce4:	b981810e 	bge	r23,r6,100082ec <_dtoa_r+0x10a4>
10007ce8:	0027883a 	mov	r19,zero
10007cec:	a8800417 	ldw	r2,16(r21)
10007cf0:	05c00804 	movi	r23,32
10007cf4:	10800104 	addi	r2,r2,4
10007cf8:	1085883a 	add	r2,r2,r2
10007cfc:	1085883a 	add	r2,r2,r2
10007d00:	a885883a 	add	r2,r21,r2
10007d04:	11000017 	ldw	r4,0(r2)
10007d08:	00095300 	call	10009530 <__hi0bits>
10007d0c:	b885c83a 	sub	r2,r23,r2
10007d10:	1585883a 	add	r2,r2,r22
10007d14:	108007cc 	andi	r2,r2,31
10007d18:	1000b326 	beq	r2,zero,10007fe8 <_dtoa_r+0xda0>
10007d1c:	00c00804 	movi	r3,32
10007d20:	1887c83a 	sub	r3,r3,r2
10007d24:	01000104 	movi	r4,4
10007d28:	20c2cd0e 	bge	r4,r3,10008860 <_dtoa_r+0x1618>
10007d2c:	00c00704 	movi	r3,28
10007d30:	1885c83a 	sub	r2,r3,r2
10007d34:	d8c00817 	ldw	r3,32(sp)
10007d38:	a0a9883a 	add	r20,r20,r2
10007d3c:	b0ad883a 	add	r22,r22,r2
10007d40:	1887883a 	add	r3,r3,r2
10007d44:	d8c00815 	stw	r3,32(sp)
10007d48:	d9800817 	ldw	r6,32(sp)
10007d4c:	0180040e 	bge	zero,r6,10007d60 <_dtoa_r+0xb18>
10007d50:	800b883a 	mov	r5,r16
10007d54:	e009883a 	mov	r4,fp
10007d58:	0009a500 	call	10009a50 <__lshift>
10007d5c:	1021883a 	mov	r16,r2
10007d60:	0580050e 	bge	zero,r22,10007d78 <_dtoa_r+0xb30>
10007d64:	a80b883a 	mov	r5,r21
10007d68:	b00d883a 	mov	r6,r22
10007d6c:	e009883a 	mov	r4,fp
10007d70:	0009a500 	call	10009a50 <__lshift>
10007d74:	102b883a 	mov	r21,r2
10007d78:	d9c00e17 	ldw	r7,56(sp)
10007d7c:	3801211e 	bne	r7,zero,10008204 <_dtoa_r+0xfbc>
10007d80:	d9800617 	ldw	r6,24(sp)
10007d84:	0181380e 	bge	zero,r6,10008268 <_dtoa_r+0x1020>
10007d88:	d8c00b17 	ldw	r3,44(sp)
10007d8c:	1800ab1e 	bne	r3,zero,1000803c <_dtoa_r+0xdf4>
10007d90:	dc800717 	ldw	r18,28(sp)
10007d94:	dcc00617 	ldw	r19,24(sp)
10007d98:	9029883a 	mov	r20,r18
10007d9c:	00000206 	br	10007da8 <_dtoa_r+0xb60>
10007da0:	00092e40 	call	100092e4 <__multadd>
10007da4:	1021883a 	mov	r16,r2
10007da8:	a80b883a 	mov	r5,r21
10007dac:	8009883a 	mov	r4,r16
10007db0:	00070200 	call	10007020 <quorem>
10007db4:	10800c04 	addi	r2,r2,48
10007db8:	90800005 	stb	r2,0(r18)
10007dbc:	94800044 	addi	r18,r18,1
10007dc0:	9507c83a 	sub	r3,r18,r20
10007dc4:	000f883a 	mov	r7,zero
10007dc8:	01800284 	movi	r6,10
10007dcc:	800b883a 	mov	r5,r16
10007dd0:	e009883a 	mov	r4,fp
10007dd4:	1cfff216 	blt	r3,r19,10007da0 <__alt_data_end+0xf8007da0>
10007dd8:	1011883a 	mov	r8,r2
10007ddc:	d8800617 	ldw	r2,24(sp)
10007de0:	0082370e 	bge	zero,r2,100086c0 <_dtoa_r+0x1478>
10007de4:	d9000717 	ldw	r4,28(sp)
10007de8:	0025883a 	mov	r18,zero
10007dec:	20af883a 	add	r23,r4,r2
10007df0:	01800044 	movi	r6,1
10007df4:	800b883a 	mov	r5,r16
10007df8:	e009883a 	mov	r4,fp
10007dfc:	da001715 	stw	r8,92(sp)
10007e00:	0009a500 	call	10009a50 <__lshift>
10007e04:	a80b883a 	mov	r5,r21
10007e08:	1009883a 	mov	r4,r2
10007e0c:	d8800915 	stw	r2,36(sp)
10007e10:	0009b980 	call	10009b98 <__mcmp>
10007e14:	da001717 	ldw	r8,92(sp)
10007e18:	0081800e 	bge	zero,r2,1000841c <_dtoa_r+0x11d4>
10007e1c:	b93fffc3 	ldbu	r4,-1(r23)
10007e20:	b8bfffc4 	addi	r2,r23,-1
10007e24:	1007883a 	mov	r3,r2
10007e28:	01800e44 	movi	r6,57
10007e2c:	d9c00717 	ldw	r7,28(sp)
10007e30:	00000506 	br	10007e48 <_dtoa_r+0xc00>
10007e34:	18ffffc4 	addi	r3,r3,-1
10007e38:	11c12326 	beq	r2,r7,100082c8 <_dtoa_r+0x1080>
10007e3c:	19000003 	ldbu	r4,0(r3)
10007e40:	102f883a 	mov	r23,r2
10007e44:	10bfffc4 	addi	r2,r2,-1
10007e48:	21403fcc 	andi	r5,r4,255
10007e4c:	2940201c 	xori	r5,r5,128
10007e50:	297fe004 	addi	r5,r5,-128
10007e54:	29bff726 	beq	r5,r6,10007e34 <__alt_data_end+0xf8007e34>
10007e58:	21000044 	addi	r4,r4,1
10007e5c:	11000005 	stb	r4,0(r2)
10007e60:	a80b883a 	mov	r5,r21
10007e64:	e009883a 	mov	r4,fp
10007e68:	00092bc0 	call	100092bc <_Bfree>
10007e6c:	883ea026 	beq	r17,zero,100078f0 <__alt_data_end+0xf80078f0>
10007e70:	90000426 	beq	r18,zero,10007e84 <_dtoa_r+0xc3c>
10007e74:	94400326 	beq	r18,r17,10007e84 <_dtoa_r+0xc3c>
10007e78:	900b883a 	mov	r5,r18
10007e7c:	e009883a 	mov	r4,fp
10007e80:	00092bc0 	call	100092bc <_Bfree>
10007e84:	880b883a 	mov	r5,r17
10007e88:	e009883a 	mov	r4,fp
10007e8c:	00092bc0 	call	100092bc <_Bfree>
10007e90:	003e9706 	br	100078f0 <__alt_data_end+0xf80078f0>
10007e94:	01800044 	movi	r6,1
10007e98:	d9800e15 	stw	r6,56(sp)
10007e9c:	003d9606 	br	100074f8 <__alt_data_end+0xf80074f8>
10007ea0:	d8800817 	ldw	r2,32(sp)
10007ea4:	d8c00517 	ldw	r3,20(sp)
10007ea8:	d8000d15 	stw	zero,52(sp)
10007eac:	10c5c83a 	sub	r2,r2,r3
10007eb0:	00c9c83a 	sub	r4,zero,r3
10007eb4:	d8800815 	stw	r2,32(sp)
10007eb8:	d9000a15 	stw	r4,40(sp)
10007ebc:	003d9706 	br	1000751c <__alt_data_end+0xf800751c>
10007ec0:	05adc83a 	sub	r22,zero,r22
10007ec4:	dd800815 	stw	r22,32(sp)
10007ec8:	002d883a 	mov	r22,zero
10007ecc:	003d8e06 	br	10007508 <__alt_data_end+0xf8007508>
10007ed0:	d9000517 	ldw	r4,20(sp)
10007ed4:	000f8800 	call	1000f880 <__floatsidf>
10007ed8:	100d883a 	mov	r6,r2
10007edc:	180f883a 	mov	r7,r3
10007ee0:	a009883a 	mov	r4,r20
10007ee4:	880b883a 	mov	r5,r17
10007ee8:	000e4400 	call	1000e440 <__eqdf2>
10007eec:	103d7126 	beq	r2,zero,100074b4 <__alt_data_end+0xf80074b4>
10007ef0:	d9c00517 	ldw	r7,20(sp)
10007ef4:	39ffffc4 	addi	r7,r7,-1
10007ef8:	d9c00515 	stw	r7,20(sp)
10007efc:	003d6d06 	br	100074b4 <__alt_data_end+0xf80074b4>
10007f00:	dd400a17 	ldw	r21,40(sp)
10007f04:	dd000817 	ldw	r20,32(sp)
10007f08:	0023883a 	mov	r17,zero
10007f0c:	003f4806 	br	10007c30 <__alt_data_end+0xf8007c30>
10007f10:	10e3c83a 	sub	r17,r2,r3
10007f14:	9448983a 	sll	r4,r18,r17
10007f18:	003d3206 	br	100073e4 <__alt_data_end+0xf80073e4>
10007f1c:	d8000e15 	stw	zero,56(sp)
10007f20:	003d7506 	br	100074f8 <__alt_data_end+0xf80074f8>
10007f24:	b005883a 	mov	r2,r22
10007f28:	003f4506 	br	10007c40 <__alt_data_end+0xf8007c40>
10007f2c:	dc000915 	stw	r16,36(sp)
10007f30:	d9800a17 	ldw	r6,40(sp)
10007f34:	d9400917 	ldw	r5,36(sp)
10007f38:	e009883a 	mov	r4,fp
10007f3c:	00099100 	call	10009910 <__pow5mult>
10007f40:	1021883a 	mov	r16,r2
10007f44:	003f5a06 	br	10007cb0 <__alt_data_end+0xf8007cb0>
10007f48:	01c00044 	movi	r7,1
10007f4c:	d9c00b15 	stw	r7,44(sp)
10007f50:	d8802217 	ldw	r2,136(sp)
10007f54:	0081280e 	bge	zero,r2,100083f8 <_dtoa_r+0x11b0>
10007f58:	100d883a 	mov	r6,r2
10007f5c:	1021883a 	mov	r16,r2
10007f60:	d8800c15 	stw	r2,48(sp)
10007f64:	d8800615 	stw	r2,24(sp)
10007f68:	003d8806 	br	1000758c <__alt_data_end+0xf800758c>
10007f6c:	d8800617 	ldw	r2,24(sp)
10007f70:	00be9b16 	blt	zero,r2,100079e0 <__alt_data_end+0xf80079e0>
10007f74:	10010f1e 	bne	r2,zero,100083b4 <_dtoa_r+0x116c>
10007f78:	880b883a 	mov	r5,r17
10007f7c:	000d883a 	mov	r6,zero
10007f80:	01d00534 	movhi	r7,16404
10007f84:	8009883a 	mov	r4,r16
10007f88:	000e6980 	call	1000e698 <__muldf3>
10007f8c:	900d883a 	mov	r6,r18
10007f90:	980f883a 	mov	r7,r19
10007f94:	1009883a 	mov	r4,r2
10007f98:	180b883a 	mov	r5,r3
10007f9c:	000e4c80 	call	1000e4c8 <__gedf2>
10007fa0:	002b883a 	mov	r21,zero
10007fa4:	0023883a 	mov	r17,zero
10007fa8:	1000bf16 	blt	r2,zero,100082a8 <_dtoa_r+0x1060>
10007fac:	d9802217 	ldw	r6,136(sp)
10007fb0:	ddc00717 	ldw	r23,28(sp)
10007fb4:	018c303a 	nor	r6,zero,r6
10007fb8:	d9800515 	stw	r6,20(sp)
10007fbc:	a80b883a 	mov	r5,r21
10007fc0:	e009883a 	mov	r4,fp
10007fc4:	00092bc0 	call	100092bc <_Bfree>
10007fc8:	883e4926 	beq	r17,zero,100078f0 <__alt_data_end+0xf80078f0>
10007fcc:	003fad06 	br	10007e84 <__alt_data_end+0xf8007e84>
10007fd0:	d9c01117 	ldw	r7,68(sp)
10007fd4:	3801bc26 	beq	r7,zero,100086c8 <_dtoa_r+0x1480>
10007fd8:	10810cc4 	addi	r2,r2,1075
10007fdc:	dd400a17 	ldw	r21,40(sp)
10007fe0:	dd000817 	ldw	r20,32(sp)
10007fe4:	003f0a06 	br	10007c10 <__alt_data_end+0xf8007c10>
10007fe8:	00800704 	movi	r2,28
10007fec:	d9000817 	ldw	r4,32(sp)
10007ff0:	a0a9883a 	add	r20,r20,r2
10007ff4:	b0ad883a 	add	r22,r22,r2
10007ff8:	2089883a 	add	r4,r4,r2
10007ffc:	d9000815 	stw	r4,32(sp)
10008000:	003f5106 	br	10007d48 <__alt_data_end+0xf8007d48>
10008004:	d8c00317 	ldw	r3,12(sp)
10008008:	b8c1fc0e 	bge	r23,r3,100087fc <_dtoa_r+0x15b4>
1000800c:	0027883a 	mov	r19,zero
10008010:	b805883a 	mov	r2,r23
10008014:	003f3e06 	br	10007d10 <__alt_data_end+0xf8007d10>
10008018:	880b883a 	mov	r5,r17
1000801c:	e009883a 	mov	r4,fp
10008020:	000f883a 	mov	r7,zero
10008024:	01800284 	movi	r6,10
10008028:	00092e40 	call	100092e4 <__multadd>
1000802c:	d9000c17 	ldw	r4,48(sp)
10008030:	1023883a 	mov	r17,r2
10008034:	0102040e 	bge	zero,r4,10008848 <_dtoa_r+0x1600>
10008038:	d9000615 	stw	r4,24(sp)
1000803c:	0500050e 	bge	zero,r20,10008054 <_dtoa_r+0xe0c>
10008040:	880b883a 	mov	r5,r17
10008044:	a00d883a 	mov	r6,r20
10008048:	e009883a 	mov	r4,fp
1000804c:	0009a500 	call	10009a50 <__lshift>
10008050:	1023883a 	mov	r17,r2
10008054:	9801241e 	bne	r19,zero,100084e8 <_dtoa_r+0x12a0>
10008058:	8829883a 	mov	r20,r17
1000805c:	d9000617 	ldw	r4,24(sp)
10008060:	dcc00717 	ldw	r19,28(sp)
10008064:	9480004c 	andi	r18,r18,1
10008068:	20bfffc4 	addi	r2,r4,-1
1000806c:	9885883a 	add	r2,r19,r2
10008070:	d8800415 	stw	r2,16(sp)
10008074:	dc800615 	stw	r18,24(sp)
10008078:	a80b883a 	mov	r5,r21
1000807c:	8009883a 	mov	r4,r16
10008080:	00070200 	call	10007020 <quorem>
10008084:	880b883a 	mov	r5,r17
10008088:	8009883a 	mov	r4,r16
1000808c:	102f883a 	mov	r23,r2
10008090:	0009b980 	call	10009b98 <__mcmp>
10008094:	a80b883a 	mov	r5,r21
10008098:	a00d883a 	mov	r6,r20
1000809c:	e009883a 	mov	r4,fp
100080a0:	102d883a 	mov	r22,r2
100080a4:	0009bf80 	call	10009bf8 <__mdiff>
100080a8:	1007883a 	mov	r3,r2
100080ac:	10800317 	ldw	r2,12(r2)
100080b0:	bc800c04 	addi	r18,r23,48
100080b4:	180b883a 	mov	r5,r3
100080b8:	10004e1e 	bne	r2,zero,100081f4 <_dtoa_r+0xfac>
100080bc:	8009883a 	mov	r4,r16
100080c0:	d8c01615 	stw	r3,88(sp)
100080c4:	0009b980 	call	10009b98 <__mcmp>
100080c8:	d8c01617 	ldw	r3,88(sp)
100080cc:	e009883a 	mov	r4,fp
100080d0:	d8801615 	stw	r2,88(sp)
100080d4:	180b883a 	mov	r5,r3
100080d8:	00092bc0 	call	100092bc <_Bfree>
100080dc:	d8801617 	ldw	r2,88(sp)
100080e0:	1000041e 	bne	r2,zero,100080f4 <_dtoa_r+0xeac>
100080e4:	d9800317 	ldw	r6,12(sp)
100080e8:	3000021e 	bne	r6,zero,100080f4 <_dtoa_r+0xeac>
100080ec:	d8c00617 	ldw	r3,24(sp)
100080f0:	18003726 	beq	r3,zero,100081d0 <_dtoa_r+0xf88>
100080f4:	b0002016 	blt	r22,zero,10008178 <_dtoa_r+0xf30>
100080f8:	b000041e 	bne	r22,zero,1000810c <_dtoa_r+0xec4>
100080fc:	d9000317 	ldw	r4,12(sp)
10008100:	2000021e 	bne	r4,zero,1000810c <_dtoa_r+0xec4>
10008104:	d8c00617 	ldw	r3,24(sp)
10008108:	18001b26 	beq	r3,zero,10008178 <_dtoa_r+0xf30>
1000810c:	00810716 	blt	zero,r2,1000852c <_dtoa_r+0x12e4>
10008110:	d8c00417 	ldw	r3,16(sp)
10008114:	9d800044 	addi	r22,r19,1
10008118:	9c800005 	stb	r18,0(r19)
1000811c:	b02f883a 	mov	r23,r22
10008120:	98c10626 	beq	r19,r3,1000853c <_dtoa_r+0x12f4>
10008124:	800b883a 	mov	r5,r16
10008128:	000f883a 	mov	r7,zero
1000812c:	01800284 	movi	r6,10
10008130:	e009883a 	mov	r4,fp
10008134:	00092e40 	call	100092e4 <__multadd>
10008138:	1021883a 	mov	r16,r2
1000813c:	000f883a 	mov	r7,zero
10008140:	01800284 	movi	r6,10
10008144:	880b883a 	mov	r5,r17
10008148:	e009883a 	mov	r4,fp
1000814c:	8d002526 	beq	r17,r20,100081e4 <_dtoa_r+0xf9c>
10008150:	00092e40 	call	100092e4 <__multadd>
10008154:	a00b883a 	mov	r5,r20
10008158:	000f883a 	mov	r7,zero
1000815c:	01800284 	movi	r6,10
10008160:	e009883a 	mov	r4,fp
10008164:	1023883a 	mov	r17,r2
10008168:	00092e40 	call	100092e4 <__multadd>
1000816c:	1029883a 	mov	r20,r2
10008170:	b027883a 	mov	r19,r22
10008174:	003fc006 	br	10008078 <__alt_data_end+0xf8008078>
10008178:	9011883a 	mov	r8,r18
1000817c:	00800e0e 	bge	zero,r2,100081b8 <_dtoa_r+0xf70>
10008180:	800b883a 	mov	r5,r16
10008184:	01800044 	movi	r6,1
10008188:	e009883a 	mov	r4,fp
1000818c:	da001715 	stw	r8,92(sp)
10008190:	0009a500 	call	10009a50 <__lshift>
10008194:	a80b883a 	mov	r5,r21
10008198:	1009883a 	mov	r4,r2
1000819c:	1021883a 	mov	r16,r2
100081a0:	0009b980 	call	10009b98 <__mcmp>
100081a4:	da001717 	ldw	r8,92(sp)
100081a8:	0081960e 	bge	zero,r2,10008804 <_dtoa_r+0x15bc>
100081ac:	00800e44 	movi	r2,57
100081b0:	40817026 	beq	r8,r2,10008774 <_dtoa_r+0x152c>
100081b4:	ba000c44 	addi	r8,r23,49
100081b8:	8825883a 	mov	r18,r17
100081bc:	9dc00044 	addi	r23,r19,1
100081c0:	9a000005 	stb	r8,0(r19)
100081c4:	a023883a 	mov	r17,r20
100081c8:	dc000915 	stw	r16,36(sp)
100081cc:	003f2406 	br	10007e60 <__alt_data_end+0xf8007e60>
100081d0:	00800e44 	movi	r2,57
100081d4:	9011883a 	mov	r8,r18
100081d8:	90816626 	beq	r18,r2,10008774 <_dtoa_r+0x152c>
100081dc:	05bff516 	blt	zero,r22,100081b4 <__alt_data_end+0xf80081b4>
100081e0:	003ff506 	br	100081b8 <__alt_data_end+0xf80081b8>
100081e4:	00092e40 	call	100092e4 <__multadd>
100081e8:	1023883a 	mov	r17,r2
100081ec:	1029883a 	mov	r20,r2
100081f0:	003fdf06 	br	10008170 <__alt_data_end+0xf8008170>
100081f4:	e009883a 	mov	r4,fp
100081f8:	00092bc0 	call	100092bc <_Bfree>
100081fc:	00800044 	movi	r2,1
10008200:	003fbc06 	br	100080f4 <__alt_data_end+0xf80080f4>
10008204:	a80b883a 	mov	r5,r21
10008208:	8009883a 	mov	r4,r16
1000820c:	0009b980 	call	10009b98 <__mcmp>
10008210:	103edb0e 	bge	r2,zero,10007d80 <__alt_data_end+0xf8007d80>
10008214:	800b883a 	mov	r5,r16
10008218:	000f883a 	mov	r7,zero
1000821c:	01800284 	movi	r6,10
10008220:	e009883a 	mov	r4,fp
10008224:	00092e40 	call	100092e4 <__multadd>
10008228:	1021883a 	mov	r16,r2
1000822c:	d8800517 	ldw	r2,20(sp)
10008230:	d8c00b17 	ldw	r3,44(sp)
10008234:	10bfffc4 	addi	r2,r2,-1
10008238:	d8800515 	stw	r2,20(sp)
1000823c:	183f761e 	bne	r3,zero,10008018 <__alt_data_end+0xf8008018>
10008240:	d9000c17 	ldw	r4,48(sp)
10008244:	0101730e 	bge	zero,r4,10008814 <_dtoa_r+0x15cc>
10008248:	d9000615 	stw	r4,24(sp)
1000824c:	003ed006 	br	10007d90 <__alt_data_end+0xf8007d90>
10008250:	00800084 	movi	r2,2
10008254:	3081861e 	bne	r6,r2,10008870 <_dtoa_r+0x1628>
10008258:	d8000b15 	stw	zero,44(sp)
1000825c:	003f3c06 	br	10007f50 <__alt_data_end+0xf8007f50>
10008260:	dc000917 	ldw	r16,36(sp)
10008264:	003e9206 	br	10007cb0 <__alt_data_end+0xf8007cb0>
10008268:	d9c00317 	ldw	r7,12(sp)
1000826c:	00800084 	movi	r2,2
10008270:	11fec50e 	bge	r2,r7,10007d88 <__alt_data_end+0xf8007d88>
10008274:	d9000617 	ldw	r4,24(sp)
10008278:	20013c1e 	bne	r4,zero,1000876c <_dtoa_r+0x1524>
1000827c:	a80b883a 	mov	r5,r21
10008280:	000f883a 	mov	r7,zero
10008284:	01800144 	movi	r6,5
10008288:	e009883a 	mov	r4,fp
1000828c:	00092e40 	call	100092e4 <__multadd>
10008290:	100b883a 	mov	r5,r2
10008294:	8009883a 	mov	r4,r16
10008298:	102b883a 	mov	r21,r2
1000829c:	0009b980 	call	10009b98 <__mcmp>
100082a0:	dc000915 	stw	r16,36(sp)
100082a4:	00bf410e 	bge	zero,r2,10007fac <__alt_data_end+0xf8007fac>
100082a8:	d9c00717 	ldw	r7,28(sp)
100082ac:	00800c44 	movi	r2,49
100082b0:	38800005 	stb	r2,0(r7)
100082b4:	d8800517 	ldw	r2,20(sp)
100082b8:	3dc00044 	addi	r23,r7,1
100082bc:	10800044 	addi	r2,r2,1
100082c0:	d8800515 	stw	r2,20(sp)
100082c4:	003f3d06 	br	10007fbc <__alt_data_end+0xf8007fbc>
100082c8:	d9800517 	ldw	r6,20(sp)
100082cc:	d9c00717 	ldw	r7,28(sp)
100082d0:	00800c44 	movi	r2,49
100082d4:	31800044 	addi	r6,r6,1
100082d8:	d9800515 	stw	r6,20(sp)
100082dc:	38800005 	stb	r2,0(r7)
100082e0:	003edf06 	br	10007e60 <__alt_data_end+0xf8007e60>
100082e4:	d8000b15 	stw	zero,44(sp)
100082e8:	003c9f06 	br	10007568 <__alt_data_end+0xf8007568>
100082ec:	903e7e1e 	bne	r18,zero,10007ce8 <__alt_data_end+0xf8007ce8>
100082f0:	00800434 	movhi	r2,16
100082f4:	10bfffc4 	addi	r2,r2,-1
100082f8:	9884703a 	and	r2,r19,r2
100082fc:	1000ea1e 	bne	r2,zero,100086a8 <_dtoa_r+0x1460>
10008300:	9cdffc2c 	andhi	r19,r19,32752
10008304:	9800e826 	beq	r19,zero,100086a8 <_dtoa_r+0x1460>
10008308:	d9c00817 	ldw	r7,32(sp)
1000830c:	b5800044 	addi	r22,r22,1
10008310:	04c00044 	movi	r19,1
10008314:	39c00044 	addi	r7,r7,1
10008318:	d9c00815 	stw	r7,32(sp)
1000831c:	d8800d17 	ldw	r2,52(sp)
10008320:	103e721e 	bne	r2,zero,10007cec <__alt_data_end+0xf8007cec>
10008324:	00800044 	movi	r2,1
10008328:	003e7906 	br	10007d10 <__alt_data_end+0xf8007d10>
1000832c:	8009883a 	mov	r4,r16
10008330:	000f8800 	call	1000f880 <__floatsidf>
10008334:	d9800f17 	ldw	r6,60(sp)
10008338:	d9c01017 	ldw	r7,64(sp)
1000833c:	1009883a 	mov	r4,r2
10008340:	180b883a 	mov	r5,r3
10008344:	000e6980 	call	1000e698 <__muldf3>
10008348:	000d883a 	mov	r6,zero
1000834c:	01d00734 	movhi	r7,16412
10008350:	1009883a 	mov	r4,r2
10008354:	180b883a 	mov	r5,r3
10008358:	000d1c40 	call	1000d1c4 <__adddf3>
1000835c:	047f3034 	movhi	r17,64704
10008360:	1021883a 	mov	r16,r2
10008364:	1c63883a 	add	r17,r3,r17
10008368:	d9000f17 	ldw	r4,60(sp)
1000836c:	d9401017 	ldw	r5,64(sp)
10008370:	000d883a 	mov	r6,zero
10008374:	01d00534 	movhi	r7,16404
10008378:	000ef040 	call	1000ef04 <__subdf3>
1000837c:	800d883a 	mov	r6,r16
10008380:	880f883a 	mov	r7,r17
10008384:	1009883a 	mov	r4,r2
10008388:	180b883a 	mov	r5,r3
1000838c:	102b883a 	mov	r21,r2
10008390:	1829883a 	mov	r20,r3
10008394:	000e4c80 	call	1000e4c8 <__gedf2>
10008398:	00806c16 	blt	zero,r2,1000854c <_dtoa_r+0x1304>
1000839c:	89e0003c 	xorhi	r7,r17,32768
100083a0:	800d883a 	mov	r6,r16
100083a4:	a809883a 	mov	r4,r21
100083a8:	a00b883a 	mov	r5,r20
100083ac:	000e5a40 	call	1000e5a4 <__ledf2>
100083b0:	103d7e0e 	bge	r2,zero,100079ac <__alt_data_end+0xf80079ac>
100083b4:	002b883a 	mov	r21,zero
100083b8:	0023883a 	mov	r17,zero
100083bc:	003efb06 	br	10007fac <__alt_data_end+0xf8007fac>
100083c0:	d8800717 	ldw	r2,28(sp)
100083c4:	003bd006 	br	10007308 <__alt_data_end+0xf8007308>
100083c8:	d9000a17 	ldw	r4,40(sp)
100083cc:	d9800d17 	ldw	r6,52(sp)
100083d0:	dd400a15 	stw	r21,40(sp)
100083d4:	a905c83a 	sub	r2,r21,r4
100083d8:	308d883a 	add	r6,r6,r2
100083dc:	d9800d15 	stw	r6,52(sp)
100083e0:	002b883a 	mov	r21,zero
100083e4:	003e0606 	br	10007c00 <__alt_data_end+0xf8007c00>
100083e8:	9023883a 	mov	r17,r18
100083ec:	9829883a 	mov	r20,r19
100083f0:	04000084 	movi	r16,2
100083f4:	003c9206 	br	10007640 <__alt_data_end+0xf8007640>
100083f8:	04000044 	movi	r16,1
100083fc:	dc000c15 	stw	r16,48(sp)
10008400:	dc000615 	stw	r16,24(sp)
10008404:	dc002215 	stw	r16,136(sp)
10008408:	e0001115 	stw	zero,68(fp)
1000840c:	000b883a 	mov	r5,zero
10008410:	003c6906 	br	100075b8 <__alt_data_end+0xf80075b8>
10008414:	3021883a 	mov	r16,r6
10008418:	003ffb06 	br	10008408 <__alt_data_end+0xf8008408>
1000841c:	1000021e 	bne	r2,zero,10008428 <_dtoa_r+0x11e0>
10008420:	4200004c 	andi	r8,r8,1
10008424:	403e7d1e 	bne	r8,zero,10007e1c <__alt_data_end+0xf8007e1c>
10008428:	01000c04 	movi	r4,48
1000842c:	00000106 	br	10008434 <_dtoa_r+0x11ec>
10008430:	102f883a 	mov	r23,r2
10008434:	b8bfffc4 	addi	r2,r23,-1
10008438:	10c00007 	ldb	r3,0(r2)
1000843c:	193ffc26 	beq	r3,r4,10008430 <__alt_data_end+0xf8008430>
10008440:	003e8706 	br	10007e60 <__alt_data_end+0xf8007e60>
10008444:	d8800517 	ldw	r2,20(sp)
10008448:	00a3c83a 	sub	r17,zero,r2
1000844c:	8800a426 	beq	r17,zero,100086e0 <_dtoa_r+0x1498>
10008450:	888003cc 	andi	r2,r17,15
10008454:	100490fa 	slli	r2,r2,3
10008458:	00c40074 	movhi	r3,4097
1000845c:	18ca0404 	addi	r3,r3,10256
10008460:	1885883a 	add	r2,r3,r2
10008464:	11800017 	ldw	r6,0(r2)
10008468:	11c00117 	ldw	r7,4(r2)
1000846c:	9009883a 	mov	r4,r18
10008470:	980b883a 	mov	r5,r19
10008474:	8823d13a 	srai	r17,r17,4
10008478:	000e6980 	call	1000e698 <__muldf3>
1000847c:	d8800f15 	stw	r2,60(sp)
10008480:	d8c01015 	stw	r3,64(sp)
10008484:	8800e826 	beq	r17,zero,10008828 <_dtoa_r+0x15e0>
10008488:	05040074 	movhi	r20,4097
1000848c:	a509fa04 	addi	r20,r20,10216
10008490:	04000084 	movi	r16,2
10008494:	8980004c 	andi	r6,r17,1
10008498:	1009883a 	mov	r4,r2
1000849c:	8823d07a 	srai	r17,r17,1
100084a0:	180b883a 	mov	r5,r3
100084a4:	30000426 	beq	r6,zero,100084b8 <_dtoa_r+0x1270>
100084a8:	a1800017 	ldw	r6,0(r20)
100084ac:	a1c00117 	ldw	r7,4(r20)
100084b0:	84000044 	addi	r16,r16,1
100084b4:	000e6980 	call	1000e698 <__muldf3>
100084b8:	a5000204 	addi	r20,r20,8
100084bc:	883ff51e 	bne	r17,zero,10008494 <__alt_data_end+0xf8008494>
100084c0:	d8800f15 	stw	r2,60(sp)
100084c4:	d8c01015 	stw	r3,64(sp)
100084c8:	003c7606 	br	100076a4 <__alt_data_end+0xf80076a4>
100084cc:	00c00c04 	movi	r3,48
100084d0:	10c00005 	stb	r3,0(r2)
100084d4:	d8c00517 	ldw	r3,20(sp)
100084d8:	bd3fffc3 	ldbu	r20,-1(r23)
100084dc:	18c00044 	addi	r3,r3,1
100084e0:	d8c00515 	stw	r3,20(sp)
100084e4:	003db906 	br	10007bcc <__alt_data_end+0xf8007bcc>
100084e8:	89400117 	ldw	r5,4(r17)
100084ec:	e009883a 	mov	r4,fp
100084f0:	00092140 	call	10009214 <_Balloc>
100084f4:	89800417 	ldw	r6,16(r17)
100084f8:	89400304 	addi	r5,r17,12
100084fc:	11000304 	addi	r4,r2,12
10008500:	31800084 	addi	r6,r6,2
10008504:	318d883a 	add	r6,r6,r6
10008508:	318d883a 	add	r6,r6,r6
1000850c:	1027883a 	mov	r19,r2
10008510:	0003af00 	call	10003af0 <memcpy>
10008514:	01800044 	movi	r6,1
10008518:	980b883a 	mov	r5,r19
1000851c:	e009883a 	mov	r4,fp
10008520:	0009a500 	call	10009a50 <__lshift>
10008524:	1029883a 	mov	r20,r2
10008528:	003ecc06 	br	1000805c <__alt_data_end+0xf800805c>
1000852c:	00800e44 	movi	r2,57
10008530:	90809026 	beq	r18,r2,10008774 <_dtoa_r+0x152c>
10008534:	92000044 	addi	r8,r18,1
10008538:	003f1f06 	br	100081b8 <__alt_data_end+0xf80081b8>
1000853c:	9011883a 	mov	r8,r18
10008540:	8825883a 	mov	r18,r17
10008544:	a023883a 	mov	r17,r20
10008548:	003e2906 	br	10007df0 <__alt_data_end+0xf8007df0>
1000854c:	002b883a 	mov	r21,zero
10008550:	0023883a 	mov	r17,zero
10008554:	003f5406 	br	100082a8 <__alt_data_end+0xf80082a8>
10008558:	61bfffc4 	addi	r6,r12,-1
1000855c:	300490fa 	slli	r2,r6,3
10008560:	00c40074 	movhi	r3,4097
10008564:	18ca0404 	addi	r3,r3,10256
10008568:	1885883a 	add	r2,r3,r2
1000856c:	11000017 	ldw	r4,0(r2)
10008570:	11400117 	ldw	r5,4(r2)
10008574:	d8800717 	ldw	r2,28(sp)
10008578:	880f883a 	mov	r7,r17
1000857c:	d9801215 	stw	r6,72(sp)
10008580:	800d883a 	mov	r6,r16
10008584:	db001615 	stw	r12,88(sp)
10008588:	15c00044 	addi	r23,r2,1
1000858c:	000e6980 	call	1000e698 <__muldf3>
10008590:	d9401017 	ldw	r5,64(sp)
10008594:	d9000f17 	ldw	r4,60(sp)
10008598:	d8c01515 	stw	r3,84(sp)
1000859c:	d8801415 	stw	r2,80(sp)
100085a0:	000f8000 	call	1000f800 <__fixdfsi>
100085a4:	1009883a 	mov	r4,r2
100085a8:	1021883a 	mov	r16,r2
100085ac:	000f8800 	call	1000f880 <__floatsidf>
100085b0:	d9000f17 	ldw	r4,60(sp)
100085b4:	d9401017 	ldw	r5,64(sp)
100085b8:	100d883a 	mov	r6,r2
100085bc:	180f883a 	mov	r7,r3
100085c0:	000ef040 	call	1000ef04 <__subdf3>
100085c4:	1829883a 	mov	r20,r3
100085c8:	d8c00717 	ldw	r3,28(sp)
100085cc:	84000c04 	addi	r16,r16,48
100085d0:	1023883a 	mov	r17,r2
100085d4:	1c000005 	stb	r16,0(r3)
100085d8:	db001617 	ldw	r12,88(sp)
100085dc:	00800044 	movi	r2,1
100085e0:	60802226 	beq	r12,r2,1000866c <_dtoa_r+0x1424>
100085e4:	d9c00717 	ldw	r7,28(sp)
100085e8:	8805883a 	mov	r2,r17
100085ec:	b82b883a 	mov	r21,r23
100085f0:	3b19883a 	add	r12,r7,r12
100085f4:	6023883a 	mov	r17,r12
100085f8:	a007883a 	mov	r3,r20
100085fc:	dc800f15 	stw	r18,60(sp)
10008600:	000d883a 	mov	r6,zero
10008604:	01d00934 	movhi	r7,16420
10008608:	1009883a 	mov	r4,r2
1000860c:	180b883a 	mov	r5,r3
10008610:	000e6980 	call	1000e698 <__muldf3>
10008614:	180b883a 	mov	r5,r3
10008618:	1009883a 	mov	r4,r2
1000861c:	1829883a 	mov	r20,r3
10008620:	1025883a 	mov	r18,r2
10008624:	000f8000 	call	1000f800 <__fixdfsi>
10008628:	1009883a 	mov	r4,r2
1000862c:	1021883a 	mov	r16,r2
10008630:	000f8800 	call	1000f880 <__floatsidf>
10008634:	100d883a 	mov	r6,r2
10008638:	180f883a 	mov	r7,r3
1000863c:	9009883a 	mov	r4,r18
10008640:	a00b883a 	mov	r5,r20
10008644:	84000c04 	addi	r16,r16,48
10008648:	000ef040 	call	1000ef04 <__subdf3>
1000864c:	ad400044 	addi	r21,r21,1
10008650:	ac3fffc5 	stb	r16,-1(r21)
10008654:	ac7fea1e 	bne	r21,r17,10008600 <__alt_data_end+0xf8008600>
10008658:	1023883a 	mov	r17,r2
1000865c:	d8801217 	ldw	r2,72(sp)
10008660:	dc800f17 	ldw	r18,60(sp)
10008664:	1829883a 	mov	r20,r3
10008668:	b8af883a 	add	r23,r23,r2
1000866c:	d9001417 	ldw	r4,80(sp)
10008670:	d9401517 	ldw	r5,84(sp)
10008674:	000d883a 	mov	r6,zero
10008678:	01cff834 	movhi	r7,16352
1000867c:	000d1c40 	call	1000d1c4 <__adddf3>
10008680:	880d883a 	mov	r6,r17
10008684:	a00f883a 	mov	r7,r20
10008688:	1009883a 	mov	r4,r2
1000868c:	180b883a 	mov	r5,r3
10008690:	000e5a40 	call	1000e5a4 <__ledf2>
10008694:	10003e0e 	bge	r2,zero,10008790 <_dtoa_r+0x1548>
10008698:	d9001317 	ldw	r4,76(sp)
1000869c:	bd3fffc3 	ldbu	r20,-1(r23)
100086a0:	d9000515 	stw	r4,20(sp)
100086a4:	003d3b06 	br	10007b94 <__alt_data_end+0xf8007b94>
100086a8:	0027883a 	mov	r19,zero
100086ac:	003f1b06 	br	1000831c <__alt_data_end+0xf800831c>
100086b0:	d8800817 	ldw	r2,32(sp)
100086b4:	11e9c83a 	sub	r20,r2,r7
100086b8:	0005883a 	mov	r2,zero
100086bc:	003d5406 	br	10007c10 <__alt_data_end+0xf8007c10>
100086c0:	00800044 	movi	r2,1
100086c4:	003dc706 	br	10007de4 <__alt_data_end+0xf8007de4>
100086c8:	d8c00217 	ldw	r3,8(sp)
100086cc:	00800d84 	movi	r2,54
100086d0:	dd400a17 	ldw	r21,40(sp)
100086d4:	10c5c83a 	sub	r2,r2,r3
100086d8:	dd000817 	ldw	r20,32(sp)
100086dc:	003d4c06 	br	10007c10 <__alt_data_end+0xf8007c10>
100086e0:	dc800f15 	stw	r18,60(sp)
100086e4:	dcc01015 	stw	r19,64(sp)
100086e8:	04000084 	movi	r16,2
100086ec:	003bed06 	br	100076a4 <__alt_data_end+0xf80076a4>
100086f0:	d9000617 	ldw	r4,24(sp)
100086f4:	203f0d26 	beq	r4,zero,1000832c <__alt_data_end+0xf800832c>
100086f8:	d9800c17 	ldw	r6,48(sp)
100086fc:	01bcab0e 	bge	zero,r6,100079ac <__alt_data_end+0xf80079ac>
10008700:	d9401017 	ldw	r5,64(sp)
10008704:	d9000f17 	ldw	r4,60(sp)
10008708:	000d883a 	mov	r6,zero
1000870c:	01d00934 	movhi	r7,16420
10008710:	000e6980 	call	1000e698 <__muldf3>
10008714:	81000044 	addi	r4,r16,1
10008718:	d8800f15 	stw	r2,60(sp)
1000871c:	d8c01015 	stw	r3,64(sp)
10008720:	000f8800 	call	1000f880 <__floatsidf>
10008724:	d9800f17 	ldw	r6,60(sp)
10008728:	d9c01017 	ldw	r7,64(sp)
1000872c:	1009883a 	mov	r4,r2
10008730:	180b883a 	mov	r5,r3
10008734:	000e6980 	call	1000e698 <__muldf3>
10008738:	01d00734 	movhi	r7,16412
1000873c:	000d883a 	mov	r6,zero
10008740:	1009883a 	mov	r4,r2
10008744:	180b883a 	mov	r5,r3
10008748:	000d1c40 	call	1000d1c4 <__adddf3>
1000874c:	d9c00517 	ldw	r7,20(sp)
10008750:	047f3034 	movhi	r17,64704
10008754:	1021883a 	mov	r16,r2
10008758:	39ffffc4 	addi	r7,r7,-1
1000875c:	d9c01315 	stw	r7,76(sp)
10008760:	1c63883a 	add	r17,r3,r17
10008764:	db000c17 	ldw	r12,48(sp)
10008768:	003bea06 	br	10007714 <__alt_data_end+0xf8007714>
1000876c:	dc000915 	stw	r16,36(sp)
10008770:	003e0e06 	br	10007fac <__alt_data_end+0xf8007fac>
10008774:	01000e44 	movi	r4,57
10008778:	8825883a 	mov	r18,r17
1000877c:	9dc00044 	addi	r23,r19,1
10008780:	99000005 	stb	r4,0(r19)
10008784:	a023883a 	mov	r17,r20
10008788:	dc000915 	stw	r16,36(sp)
1000878c:	003da406 	br	10007e20 <__alt_data_end+0xf8007e20>
10008790:	d9801417 	ldw	r6,80(sp)
10008794:	d9c01517 	ldw	r7,84(sp)
10008798:	0009883a 	mov	r4,zero
1000879c:	014ff834 	movhi	r5,16352
100087a0:	000ef040 	call	1000ef04 <__subdf3>
100087a4:	880d883a 	mov	r6,r17
100087a8:	a00f883a 	mov	r7,r20
100087ac:	1009883a 	mov	r4,r2
100087b0:	180b883a 	mov	r5,r3
100087b4:	000e4c80 	call	1000e4c8 <__gedf2>
100087b8:	00bc7c0e 	bge	zero,r2,100079ac <__alt_data_end+0xf80079ac>
100087bc:	01000c04 	movi	r4,48
100087c0:	00000106 	br	100087c8 <_dtoa_r+0x1580>
100087c4:	102f883a 	mov	r23,r2
100087c8:	b8bfffc4 	addi	r2,r23,-1
100087cc:	10c00007 	ldb	r3,0(r2)
100087d0:	193ffc26 	beq	r3,r4,100087c4 <__alt_data_end+0xf80087c4>
100087d4:	d9801317 	ldw	r6,76(sp)
100087d8:	d9800515 	stw	r6,20(sp)
100087dc:	003c4406 	br	100078f0 <__alt_data_end+0xf80078f0>
100087e0:	d9801317 	ldw	r6,76(sp)
100087e4:	d9800515 	stw	r6,20(sp)
100087e8:	003cea06 	br	10007b94 <__alt_data_end+0xf8007b94>
100087ec:	dd800f17 	ldw	r22,60(sp)
100087f0:	dcc01017 	ldw	r19,64(sp)
100087f4:	dc801217 	ldw	r18,72(sp)
100087f8:	003c6c06 	br	100079ac <__alt_data_end+0xf80079ac>
100087fc:	903e031e 	bne	r18,zero,1000800c <__alt_data_end+0xf800800c>
10008800:	003ebb06 	br	100082f0 <__alt_data_end+0xf80082f0>
10008804:	103e6c1e 	bne	r2,zero,100081b8 <__alt_data_end+0xf80081b8>
10008808:	4080004c 	andi	r2,r8,1
1000880c:	103e6a26 	beq	r2,zero,100081b8 <__alt_data_end+0xf80081b8>
10008810:	003e6606 	br	100081ac <__alt_data_end+0xf80081ac>
10008814:	d8c00317 	ldw	r3,12(sp)
10008818:	00800084 	movi	r2,2
1000881c:	10c02916 	blt	r2,r3,100088c4 <_dtoa_r+0x167c>
10008820:	d9000c17 	ldw	r4,48(sp)
10008824:	003e8806 	br	10008248 <__alt_data_end+0xf8008248>
10008828:	04000084 	movi	r16,2
1000882c:	003b9d06 	br	100076a4 <__alt_data_end+0xf80076a4>
10008830:	d9001317 	ldw	r4,76(sp)
10008834:	d9000515 	stw	r4,20(sp)
10008838:	003cd606 	br	10007b94 <__alt_data_end+0xf8007b94>
1000883c:	d8801317 	ldw	r2,76(sp)
10008840:	d8800515 	stw	r2,20(sp)
10008844:	003c2a06 	br	100078f0 <__alt_data_end+0xf80078f0>
10008848:	d9800317 	ldw	r6,12(sp)
1000884c:	00800084 	movi	r2,2
10008850:	11801516 	blt	r2,r6,100088a8 <_dtoa_r+0x1660>
10008854:	d9c00c17 	ldw	r7,48(sp)
10008858:	d9c00615 	stw	r7,24(sp)
1000885c:	003df706 	br	1000803c <__alt_data_end+0xf800803c>
10008860:	193d3926 	beq	r3,r4,10007d48 <__alt_data_end+0xf8007d48>
10008864:	00c00f04 	movi	r3,60
10008868:	1885c83a 	sub	r2,r3,r2
1000886c:	003ddf06 	br	10007fec <__alt_data_end+0xf8007fec>
10008870:	e009883a 	mov	r4,fp
10008874:	e0001115 	stw	zero,68(fp)
10008878:	000b883a 	mov	r5,zero
1000887c:	00092140 	call	10009214 <_Balloc>
10008880:	d8800715 	stw	r2,28(sp)
10008884:	d8c00717 	ldw	r3,28(sp)
10008888:	00bfffc4 	movi	r2,-1
1000888c:	01000044 	movi	r4,1
10008890:	d8800c15 	stw	r2,48(sp)
10008894:	e0c01015 	stw	r3,64(fp)
10008898:	d9000b15 	stw	r4,44(sp)
1000889c:	d8800615 	stw	r2,24(sp)
100088a0:	d8002215 	stw	zero,136(sp)
100088a4:	003c4106 	br	100079ac <__alt_data_end+0xf80079ac>
100088a8:	d8c00c17 	ldw	r3,48(sp)
100088ac:	d8c00615 	stw	r3,24(sp)
100088b0:	003e7006 	br	10008274 <__alt_data_end+0xf8008274>
100088b4:	04400044 	movi	r17,1
100088b8:	003b2006 	br	1000753c <__alt_data_end+0xf800753c>
100088bc:	000b883a 	mov	r5,zero
100088c0:	003b3d06 	br	100075b8 <__alt_data_end+0xf80075b8>
100088c4:	d8800c17 	ldw	r2,48(sp)
100088c8:	d8800615 	stw	r2,24(sp)
100088cc:	003e6906 	br	10008274 <__alt_data_end+0xf8008274>

100088d0 <__sflags>:
100088d0:	28800007 	ldb	r2,0(r5)
100088d4:	00c01c84 	movi	r3,114
100088d8:	10c02426 	beq	r2,r3,1000896c <__sflags+0x9c>
100088dc:	00c01dc4 	movi	r3,119
100088e0:	10c01e26 	beq	r2,r3,1000895c <__sflags+0x8c>
100088e4:	00c01844 	movi	r3,97
100088e8:	10c00426 	beq	r2,r3,100088fc <__sflags+0x2c>
100088ec:	00800584 	movi	r2,22
100088f0:	20800015 	stw	r2,0(r4)
100088f4:	0005883a 	mov	r2,zero
100088f8:	f800283a 	ret
100088fc:	02c08204 	movi	r11,520
10008900:	01000044 	movi	r4,1
10008904:	00804204 	movi	r2,264
10008908:	01c00ac4 	movi	r7,43
1000890c:	02bff8c4 	movi	r10,-29
10008910:	027fff04 	movi	r9,-4
10008914:	02001e04 	movi	r8,120
10008918:	29400044 	addi	r5,r5,1
1000891c:	28c00007 	ldb	r3,0(r5)
10008920:	18000626 	beq	r3,zero,1000893c <__sflags+0x6c>
10008924:	19c00826 	beq	r3,r7,10008948 <__sflags+0x78>
10008928:	1a3ffb1e 	bne	r3,r8,10008918 <__alt_data_end+0xf8008918>
1000892c:	29400044 	addi	r5,r5,1
10008930:	28c00007 	ldb	r3,0(r5)
10008934:	21020014 	ori	r4,r4,2048
10008938:	183ffa1e 	bne	r3,zero,10008924 <__alt_data_end+0xf8008924>
1000893c:	22c8b03a 	or	r4,r4,r11
10008940:	31000015 	stw	r4,0(r6)
10008944:	f800283a 	ret
10008948:	1284703a 	and	r2,r2,r10
1000894c:	2248703a 	and	r4,r4,r9
10008950:	10800414 	ori	r2,r2,16
10008954:	21000094 	ori	r4,r4,2
10008958:	003fef06 	br	10008918 <__alt_data_end+0xf8008918>
1000895c:	02c18004 	movi	r11,1536
10008960:	01000044 	movi	r4,1
10008964:	00800204 	movi	r2,8
10008968:	003fe706 	br	10008908 <__alt_data_end+0xf8008908>
1000896c:	0017883a 	mov	r11,zero
10008970:	0009883a 	mov	r4,zero
10008974:	00800104 	movi	r2,4
10008978:	003fe306 	br	10008908 <__alt_data_end+0xf8008908>

1000897c <__sfvwrite_r>:
1000897c:	30800217 	ldw	r2,8(r6)
10008980:	10006726 	beq	r2,zero,10008b20 <__sfvwrite_r+0x1a4>
10008984:	28c0030b 	ldhu	r3,12(r5)
10008988:	defff404 	addi	sp,sp,-48
1000898c:	dd400715 	stw	r21,28(sp)
10008990:	dd000615 	stw	r20,24(sp)
10008994:	dc000215 	stw	r16,8(sp)
10008998:	dfc00b15 	stw	ra,44(sp)
1000899c:	df000a15 	stw	fp,40(sp)
100089a0:	ddc00915 	stw	r23,36(sp)
100089a4:	dd800815 	stw	r22,32(sp)
100089a8:	dcc00515 	stw	r19,20(sp)
100089ac:	dc800415 	stw	r18,16(sp)
100089b0:	dc400315 	stw	r17,12(sp)
100089b4:	1880020c 	andi	r2,r3,8
100089b8:	2821883a 	mov	r16,r5
100089bc:	202b883a 	mov	r21,r4
100089c0:	3029883a 	mov	r20,r6
100089c4:	10002726 	beq	r2,zero,10008a64 <__sfvwrite_r+0xe8>
100089c8:	28800417 	ldw	r2,16(r5)
100089cc:	10002526 	beq	r2,zero,10008a64 <__sfvwrite_r+0xe8>
100089d0:	1880008c 	andi	r2,r3,2
100089d4:	a4400017 	ldw	r17,0(r20)
100089d8:	10002a26 	beq	r2,zero,10008a84 <__sfvwrite_r+0x108>
100089dc:	05a00034 	movhi	r22,32768
100089e0:	0027883a 	mov	r19,zero
100089e4:	0025883a 	mov	r18,zero
100089e8:	b5bf0004 	addi	r22,r22,-1024
100089ec:	980d883a 	mov	r6,r19
100089f0:	a809883a 	mov	r4,r21
100089f4:	90004626 	beq	r18,zero,10008b10 <__sfvwrite_r+0x194>
100089f8:	900f883a 	mov	r7,r18
100089fc:	b480022e 	bgeu	r22,r18,10008a08 <__sfvwrite_r+0x8c>
10008a00:	01e00034 	movhi	r7,32768
10008a04:	39ff0004 	addi	r7,r7,-1024
10008a08:	80800917 	ldw	r2,36(r16)
10008a0c:	81400717 	ldw	r5,28(r16)
10008a10:	103ee83a 	callr	r2
10008a14:	00805a0e 	bge	zero,r2,10008b80 <__sfvwrite_r+0x204>
10008a18:	a0c00217 	ldw	r3,8(r20)
10008a1c:	98a7883a 	add	r19,r19,r2
10008a20:	90a5c83a 	sub	r18,r18,r2
10008a24:	1885c83a 	sub	r2,r3,r2
10008a28:	a0800215 	stw	r2,8(r20)
10008a2c:	103fef1e 	bne	r2,zero,100089ec <__alt_data_end+0xf80089ec>
10008a30:	0005883a 	mov	r2,zero
10008a34:	dfc00b17 	ldw	ra,44(sp)
10008a38:	df000a17 	ldw	fp,40(sp)
10008a3c:	ddc00917 	ldw	r23,36(sp)
10008a40:	dd800817 	ldw	r22,32(sp)
10008a44:	dd400717 	ldw	r21,28(sp)
10008a48:	dd000617 	ldw	r20,24(sp)
10008a4c:	dcc00517 	ldw	r19,20(sp)
10008a50:	dc800417 	ldw	r18,16(sp)
10008a54:	dc400317 	ldw	r17,12(sp)
10008a58:	dc000217 	ldw	r16,8(sp)
10008a5c:	dec00c04 	addi	sp,sp,48
10008a60:	f800283a 	ret
10008a64:	800b883a 	mov	r5,r16
10008a68:	a809883a 	mov	r4,r21
10008a6c:	0006ce00 	call	10006ce0 <__swsetup_r>
10008a70:	1000ee1e 	bne	r2,zero,10008e2c <__sfvwrite_r+0x4b0>
10008a74:	80c0030b 	ldhu	r3,12(r16)
10008a78:	a4400017 	ldw	r17,0(r20)
10008a7c:	1880008c 	andi	r2,r3,2
10008a80:	103fd61e 	bne	r2,zero,100089dc <__alt_data_end+0xf80089dc>
10008a84:	1880004c 	andi	r2,r3,1
10008a88:	1000421e 	bne	r2,zero,10008b94 <__sfvwrite_r+0x218>
10008a8c:	0039883a 	mov	fp,zero
10008a90:	0025883a 	mov	r18,zero
10008a94:	90001a26 	beq	r18,zero,10008b00 <__sfvwrite_r+0x184>
10008a98:	1880800c 	andi	r2,r3,512
10008a9c:	84c00217 	ldw	r19,8(r16)
10008aa0:	10002126 	beq	r2,zero,10008b28 <__sfvwrite_r+0x1ac>
10008aa4:	982f883a 	mov	r23,r19
10008aa8:	94c09636 	bltu	r18,r19,10008d04 <__sfvwrite_r+0x388>
10008aac:	1881200c 	andi	r2,r3,1152
10008ab0:	1000a11e 	bne	r2,zero,10008d38 <__sfvwrite_r+0x3bc>
10008ab4:	81000017 	ldw	r4,0(r16)
10008ab8:	b80d883a 	mov	r6,r23
10008abc:	e00b883a 	mov	r5,fp
10008ac0:	00090b80 	call	100090b8 <memmove>
10008ac4:	80c00217 	ldw	r3,8(r16)
10008ac8:	81000017 	ldw	r4,0(r16)
10008acc:	9005883a 	mov	r2,r18
10008ad0:	1ce7c83a 	sub	r19,r3,r19
10008ad4:	25cf883a 	add	r7,r4,r23
10008ad8:	84c00215 	stw	r19,8(r16)
10008adc:	81c00015 	stw	r7,0(r16)
10008ae0:	a0c00217 	ldw	r3,8(r20)
10008ae4:	e0b9883a 	add	fp,fp,r2
10008ae8:	90a5c83a 	sub	r18,r18,r2
10008aec:	18a7c83a 	sub	r19,r3,r2
10008af0:	a4c00215 	stw	r19,8(r20)
10008af4:	983fce26 	beq	r19,zero,10008a30 <__alt_data_end+0xf8008a30>
10008af8:	80c0030b 	ldhu	r3,12(r16)
10008afc:	903fe61e 	bne	r18,zero,10008a98 <__alt_data_end+0xf8008a98>
10008b00:	8f000017 	ldw	fp,0(r17)
10008b04:	8c800117 	ldw	r18,4(r17)
10008b08:	8c400204 	addi	r17,r17,8
10008b0c:	003fe106 	br	10008a94 <__alt_data_end+0xf8008a94>
10008b10:	8cc00017 	ldw	r19,0(r17)
10008b14:	8c800117 	ldw	r18,4(r17)
10008b18:	8c400204 	addi	r17,r17,8
10008b1c:	003fb306 	br	100089ec <__alt_data_end+0xf80089ec>
10008b20:	0005883a 	mov	r2,zero
10008b24:	f800283a 	ret
10008b28:	81000017 	ldw	r4,0(r16)
10008b2c:	80800417 	ldw	r2,16(r16)
10008b30:	11005a36 	bltu	r2,r4,10008c9c <__sfvwrite_r+0x320>
10008b34:	85c00517 	ldw	r23,20(r16)
10008b38:	95c05836 	bltu	r18,r23,10008c9c <__sfvwrite_r+0x320>
10008b3c:	00a00034 	movhi	r2,32768
10008b40:	10bfffc4 	addi	r2,r2,-1
10008b44:	9009883a 	mov	r4,r18
10008b48:	1480012e 	bgeu	r2,r18,10008b50 <__sfvwrite_r+0x1d4>
10008b4c:	1009883a 	mov	r4,r2
10008b50:	b80b883a 	mov	r5,r23
10008b54:	00016300 	call	10001630 <__divsi3>
10008b58:	b80b883a 	mov	r5,r23
10008b5c:	1009883a 	mov	r4,r2
10008b60:	00017e40 	call	100017e4 <__mulsi3>
10008b64:	81400717 	ldw	r5,28(r16)
10008b68:	80c00917 	ldw	r3,36(r16)
10008b6c:	100f883a 	mov	r7,r2
10008b70:	e00d883a 	mov	r6,fp
10008b74:	a809883a 	mov	r4,r21
10008b78:	183ee83a 	callr	r3
10008b7c:	00bfd816 	blt	zero,r2,10008ae0 <__alt_data_end+0xf8008ae0>
10008b80:	8080030b 	ldhu	r2,12(r16)
10008b84:	10801014 	ori	r2,r2,64
10008b88:	8080030d 	sth	r2,12(r16)
10008b8c:	00bfffc4 	movi	r2,-1
10008b90:	003fa806 	br	10008a34 <__alt_data_end+0xf8008a34>
10008b94:	0027883a 	mov	r19,zero
10008b98:	0011883a 	mov	r8,zero
10008b9c:	0039883a 	mov	fp,zero
10008ba0:	0025883a 	mov	r18,zero
10008ba4:	90001f26 	beq	r18,zero,10008c24 <__sfvwrite_r+0x2a8>
10008ba8:	40005a26 	beq	r8,zero,10008d14 <__sfvwrite_r+0x398>
10008bac:	982d883a 	mov	r22,r19
10008bb0:	94c0012e 	bgeu	r18,r19,10008bb8 <__sfvwrite_r+0x23c>
10008bb4:	902d883a 	mov	r22,r18
10008bb8:	81000017 	ldw	r4,0(r16)
10008bbc:	80800417 	ldw	r2,16(r16)
10008bc0:	b02f883a 	mov	r23,r22
10008bc4:	81c00517 	ldw	r7,20(r16)
10008bc8:	1100032e 	bgeu	r2,r4,10008bd8 <__sfvwrite_r+0x25c>
10008bcc:	80c00217 	ldw	r3,8(r16)
10008bd0:	38c7883a 	add	r3,r7,r3
10008bd4:	1d801816 	blt	r3,r22,10008c38 <__sfvwrite_r+0x2bc>
10008bd8:	b1c03e16 	blt	r22,r7,10008cd4 <__sfvwrite_r+0x358>
10008bdc:	80800917 	ldw	r2,36(r16)
10008be0:	81400717 	ldw	r5,28(r16)
10008be4:	e00d883a 	mov	r6,fp
10008be8:	da000115 	stw	r8,4(sp)
10008bec:	a809883a 	mov	r4,r21
10008bf0:	103ee83a 	callr	r2
10008bf4:	102f883a 	mov	r23,r2
10008bf8:	da000117 	ldw	r8,4(sp)
10008bfc:	00bfe00e 	bge	zero,r2,10008b80 <__alt_data_end+0xf8008b80>
10008c00:	9de7c83a 	sub	r19,r19,r23
10008c04:	98001f26 	beq	r19,zero,10008c84 <__sfvwrite_r+0x308>
10008c08:	a0800217 	ldw	r2,8(r20)
10008c0c:	e5f9883a 	add	fp,fp,r23
10008c10:	95e5c83a 	sub	r18,r18,r23
10008c14:	15efc83a 	sub	r23,r2,r23
10008c18:	a5c00215 	stw	r23,8(r20)
10008c1c:	b83f8426 	beq	r23,zero,10008a30 <__alt_data_end+0xf8008a30>
10008c20:	903fe11e 	bne	r18,zero,10008ba8 <__alt_data_end+0xf8008ba8>
10008c24:	8f000017 	ldw	fp,0(r17)
10008c28:	8c800117 	ldw	r18,4(r17)
10008c2c:	0011883a 	mov	r8,zero
10008c30:	8c400204 	addi	r17,r17,8
10008c34:	003fdb06 	br	10008ba4 <__alt_data_end+0xf8008ba4>
10008c38:	180d883a 	mov	r6,r3
10008c3c:	e00b883a 	mov	r5,fp
10008c40:	da000115 	stw	r8,4(sp)
10008c44:	d8c00015 	stw	r3,0(sp)
10008c48:	00090b80 	call	100090b8 <memmove>
10008c4c:	d8c00017 	ldw	r3,0(sp)
10008c50:	80800017 	ldw	r2,0(r16)
10008c54:	800b883a 	mov	r5,r16
10008c58:	a809883a 	mov	r4,r21
10008c5c:	10c5883a 	add	r2,r2,r3
10008c60:	80800015 	stw	r2,0(r16)
10008c64:	d8c00015 	stw	r3,0(sp)
10008c68:	0001be00 	call	10001be0 <_fflush_r>
10008c6c:	d8c00017 	ldw	r3,0(sp)
10008c70:	da000117 	ldw	r8,4(sp)
10008c74:	103fc21e 	bne	r2,zero,10008b80 <__alt_data_end+0xf8008b80>
10008c78:	182f883a 	mov	r23,r3
10008c7c:	9de7c83a 	sub	r19,r19,r23
10008c80:	983fe11e 	bne	r19,zero,10008c08 <__alt_data_end+0xf8008c08>
10008c84:	800b883a 	mov	r5,r16
10008c88:	a809883a 	mov	r4,r21
10008c8c:	0001be00 	call	10001be0 <_fflush_r>
10008c90:	103fbb1e 	bne	r2,zero,10008b80 <__alt_data_end+0xf8008b80>
10008c94:	0011883a 	mov	r8,zero
10008c98:	003fdb06 	br	10008c08 <__alt_data_end+0xf8008c08>
10008c9c:	94c0012e 	bgeu	r18,r19,10008ca4 <__sfvwrite_r+0x328>
10008ca0:	9027883a 	mov	r19,r18
10008ca4:	980d883a 	mov	r6,r19
10008ca8:	e00b883a 	mov	r5,fp
10008cac:	00090b80 	call	100090b8 <memmove>
10008cb0:	80800217 	ldw	r2,8(r16)
10008cb4:	80c00017 	ldw	r3,0(r16)
10008cb8:	14c5c83a 	sub	r2,r2,r19
10008cbc:	1cc7883a 	add	r3,r3,r19
10008cc0:	80800215 	stw	r2,8(r16)
10008cc4:	80c00015 	stw	r3,0(r16)
10008cc8:	10004326 	beq	r2,zero,10008dd8 <__sfvwrite_r+0x45c>
10008ccc:	9805883a 	mov	r2,r19
10008cd0:	003f8306 	br	10008ae0 <__alt_data_end+0xf8008ae0>
10008cd4:	b00d883a 	mov	r6,r22
10008cd8:	e00b883a 	mov	r5,fp
10008cdc:	da000115 	stw	r8,4(sp)
10008ce0:	00090b80 	call	100090b8 <memmove>
10008ce4:	80800217 	ldw	r2,8(r16)
10008ce8:	80c00017 	ldw	r3,0(r16)
10008cec:	da000117 	ldw	r8,4(sp)
10008cf0:	1585c83a 	sub	r2,r2,r22
10008cf4:	1dad883a 	add	r22,r3,r22
10008cf8:	80800215 	stw	r2,8(r16)
10008cfc:	85800015 	stw	r22,0(r16)
10008d00:	003fbf06 	br	10008c00 <__alt_data_end+0xf8008c00>
10008d04:	81000017 	ldw	r4,0(r16)
10008d08:	9027883a 	mov	r19,r18
10008d0c:	902f883a 	mov	r23,r18
10008d10:	003f6906 	br	10008ab8 <__alt_data_end+0xf8008ab8>
10008d14:	900d883a 	mov	r6,r18
10008d18:	01400284 	movi	r5,10
10008d1c:	e009883a 	mov	r4,fp
10008d20:	0008fd40 	call	10008fd4 <memchr>
10008d24:	10003e26 	beq	r2,zero,10008e20 <__sfvwrite_r+0x4a4>
10008d28:	10800044 	addi	r2,r2,1
10008d2c:	1727c83a 	sub	r19,r2,fp
10008d30:	02000044 	movi	r8,1
10008d34:	003f9d06 	br	10008bac <__alt_data_end+0xf8008bac>
10008d38:	80800517 	ldw	r2,20(r16)
10008d3c:	81400417 	ldw	r5,16(r16)
10008d40:	81c00017 	ldw	r7,0(r16)
10008d44:	10a7883a 	add	r19,r2,r2
10008d48:	9885883a 	add	r2,r19,r2
10008d4c:	1026d7fa 	srli	r19,r2,31
10008d50:	396dc83a 	sub	r22,r7,r5
10008d54:	b1000044 	addi	r4,r22,1
10008d58:	9885883a 	add	r2,r19,r2
10008d5c:	1027d07a 	srai	r19,r2,1
10008d60:	2485883a 	add	r2,r4,r18
10008d64:	980d883a 	mov	r6,r19
10008d68:	9880022e 	bgeu	r19,r2,10008d74 <__sfvwrite_r+0x3f8>
10008d6c:	1027883a 	mov	r19,r2
10008d70:	100d883a 	mov	r6,r2
10008d74:	18c1000c 	andi	r3,r3,1024
10008d78:	18001c26 	beq	r3,zero,10008dec <__sfvwrite_r+0x470>
10008d7c:	300b883a 	mov	r5,r6
10008d80:	a809883a 	mov	r4,r21
10008d84:	00032e40 	call	100032e4 <_malloc_r>
10008d88:	102f883a 	mov	r23,r2
10008d8c:	10002926 	beq	r2,zero,10008e34 <__sfvwrite_r+0x4b8>
10008d90:	81400417 	ldw	r5,16(r16)
10008d94:	b00d883a 	mov	r6,r22
10008d98:	1009883a 	mov	r4,r2
10008d9c:	0003af00 	call	10003af0 <memcpy>
10008da0:	8080030b 	ldhu	r2,12(r16)
10008da4:	00fedfc4 	movi	r3,-1153
10008da8:	10c4703a 	and	r2,r2,r3
10008dac:	10802014 	ori	r2,r2,128
10008db0:	8080030d 	sth	r2,12(r16)
10008db4:	bd89883a 	add	r4,r23,r22
10008db8:	9d8fc83a 	sub	r7,r19,r22
10008dbc:	85c00415 	stw	r23,16(r16)
10008dc0:	84c00515 	stw	r19,20(r16)
10008dc4:	81000015 	stw	r4,0(r16)
10008dc8:	9027883a 	mov	r19,r18
10008dcc:	81c00215 	stw	r7,8(r16)
10008dd0:	902f883a 	mov	r23,r18
10008dd4:	003f3806 	br	10008ab8 <__alt_data_end+0xf8008ab8>
10008dd8:	800b883a 	mov	r5,r16
10008ddc:	a809883a 	mov	r4,r21
10008de0:	0001be00 	call	10001be0 <_fflush_r>
10008de4:	103fb926 	beq	r2,zero,10008ccc <__alt_data_end+0xf8008ccc>
10008de8:	003f6506 	br	10008b80 <__alt_data_end+0xf8008b80>
10008dec:	a809883a 	mov	r4,r21
10008df0:	0003f380 	call	10003f38 <_realloc_r>
10008df4:	102f883a 	mov	r23,r2
10008df8:	103fee1e 	bne	r2,zero,10008db4 <__alt_data_end+0xf8008db4>
10008dfc:	81400417 	ldw	r5,16(r16)
10008e00:	a809883a 	mov	r4,r21
10008e04:	00025640 	call	10002564 <_free_r>
10008e08:	8080030b 	ldhu	r2,12(r16)
10008e0c:	00ffdfc4 	movi	r3,-129
10008e10:	1884703a 	and	r2,r3,r2
10008e14:	00c00304 	movi	r3,12
10008e18:	a8c00015 	stw	r3,0(r21)
10008e1c:	003f5906 	br	10008b84 <__alt_data_end+0xf8008b84>
10008e20:	94c00044 	addi	r19,r18,1
10008e24:	02000044 	movi	r8,1
10008e28:	003f6006 	br	10008bac <__alt_data_end+0xf8008bac>
10008e2c:	00bfffc4 	movi	r2,-1
10008e30:	003f0006 	br	10008a34 <__alt_data_end+0xf8008a34>
10008e34:	00800304 	movi	r2,12
10008e38:	a8800015 	stw	r2,0(r21)
10008e3c:	8080030b 	ldhu	r2,12(r16)
10008e40:	003f5006 	br	10008b84 <__alt_data_end+0xf8008b84>

10008e44 <_isatty_r>:
10008e44:	defffd04 	addi	sp,sp,-12
10008e48:	dc000015 	stw	r16,0(sp)
10008e4c:	04040074 	movhi	r16,4097
10008e50:	dc400115 	stw	r17,4(sp)
10008e54:	84187104 	addi	r16,r16,25028
10008e58:	2023883a 	mov	r17,r4
10008e5c:	2809883a 	mov	r4,r5
10008e60:	dfc00215 	stw	ra,8(sp)
10008e64:	80000015 	stw	zero,0(r16)
10008e68:	000fd2c0 	call	1000fd2c <isatty>
10008e6c:	00ffffc4 	movi	r3,-1
10008e70:	10c00526 	beq	r2,r3,10008e88 <_isatty_r+0x44>
10008e74:	dfc00217 	ldw	ra,8(sp)
10008e78:	dc400117 	ldw	r17,4(sp)
10008e7c:	dc000017 	ldw	r16,0(sp)
10008e80:	dec00304 	addi	sp,sp,12
10008e84:	f800283a 	ret
10008e88:	80c00017 	ldw	r3,0(r16)
10008e8c:	183ff926 	beq	r3,zero,10008e74 <__alt_data_end+0xf8008e74>
10008e90:	88c00015 	stw	r3,0(r17)
10008e94:	003ff706 	br	10008e74 <__alt_data_end+0xf8008e74>

10008e98 <_setlocale_r>:
10008e98:	30001b26 	beq	r6,zero,10008f08 <_setlocale_r+0x70>
10008e9c:	01440074 	movhi	r5,4097
10008ea0:	defffe04 	addi	sp,sp,-8
10008ea4:	2949ea04 	addi	r5,r5,10152
10008ea8:	3009883a 	mov	r4,r6
10008eac:	dc000015 	stw	r16,0(sp)
10008eb0:	dfc00115 	stw	ra,4(sp)
10008eb4:	3021883a 	mov	r16,r6
10008eb8:	000a80c0 	call	1000a80c <strcmp>
10008ebc:	1000061e 	bne	r2,zero,10008ed8 <_setlocale_r+0x40>
10008ec0:	00840074 	movhi	r2,4097
10008ec4:	1089cb04 	addi	r2,r2,10028
10008ec8:	dfc00117 	ldw	ra,4(sp)
10008ecc:	dc000017 	ldw	r16,0(sp)
10008ed0:	dec00204 	addi	sp,sp,8
10008ed4:	f800283a 	ret
10008ed8:	01440074 	movhi	r5,4097
10008edc:	2949cb04 	addi	r5,r5,10028
10008ee0:	8009883a 	mov	r4,r16
10008ee4:	000a80c0 	call	1000a80c <strcmp>
10008ee8:	103ff526 	beq	r2,zero,10008ec0 <__alt_data_end+0xf8008ec0>
10008eec:	01440074 	movhi	r5,4097
10008ef0:	2949be04 	addi	r5,r5,9976
10008ef4:	8009883a 	mov	r4,r16
10008ef8:	000a80c0 	call	1000a80c <strcmp>
10008efc:	103ff026 	beq	r2,zero,10008ec0 <__alt_data_end+0xf8008ec0>
10008f00:	0005883a 	mov	r2,zero
10008f04:	003ff006 	br	10008ec8 <__alt_data_end+0xf8008ec8>
10008f08:	00840074 	movhi	r2,4097
10008f0c:	1089cb04 	addi	r2,r2,10028
10008f10:	f800283a 	ret

10008f14 <__locale_charset>:
10008f14:	00840074 	movhi	r2,4097
10008f18:	108cb304 	addi	r2,r2,13004
10008f1c:	f800283a 	ret

10008f20 <__locale_mb_cur_max>:
10008f20:	00840074 	movhi	r2,4097
10008f24:	10916104 	addi	r2,r2,17796
10008f28:	10800017 	ldw	r2,0(r2)
10008f2c:	f800283a 	ret

10008f30 <__locale_msgcharset>:
10008f30:	00840074 	movhi	r2,4097
10008f34:	108cab04 	addi	r2,r2,12972
10008f38:	f800283a 	ret

10008f3c <__locale_cjk_lang>:
10008f3c:	0005883a 	mov	r2,zero
10008f40:	f800283a 	ret

10008f44 <_localeconv_r>:
10008f44:	00840074 	movhi	r2,4097
10008f48:	108cbb04 	addi	r2,r2,13036
10008f4c:	f800283a 	ret

10008f50 <setlocale>:
10008f50:	00840074 	movhi	r2,4097
10008f54:	10915e04 	addi	r2,r2,17784
10008f58:	280d883a 	mov	r6,r5
10008f5c:	200b883a 	mov	r5,r4
10008f60:	11000017 	ldw	r4,0(r2)
10008f64:	0008e981 	jmpi	10008e98 <_setlocale_r>

10008f68 <localeconv>:
10008f68:	00840074 	movhi	r2,4097
10008f6c:	108cbb04 	addi	r2,r2,13036
10008f70:	f800283a 	ret

10008f74 <_lseek_r>:
10008f74:	defffd04 	addi	sp,sp,-12
10008f78:	2805883a 	mov	r2,r5
10008f7c:	dc000015 	stw	r16,0(sp)
10008f80:	04040074 	movhi	r16,4097
10008f84:	dc400115 	stw	r17,4(sp)
10008f88:	300b883a 	mov	r5,r6
10008f8c:	84187104 	addi	r16,r16,25028
10008f90:	2023883a 	mov	r17,r4
10008f94:	380d883a 	mov	r6,r7
10008f98:	1009883a 	mov	r4,r2
10008f9c:	dfc00215 	stw	ra,8(sp)
10008fa0:	80000015 	stw	zero,0(r16)
10008fa4:	001006c0 	call	1001006c <lseek>
10008fa8:	00ffffc4 	movi	r3,-1
10008fac:	10c00526 	beq	r2,r3,10008fc4 <_lseek_r+0x50>
10008fb0:	dfc00217 	ldw	ra,8(sp)
10008fb4:	dc400117 	ldw	r17,4(sp)
10008fb8:	dc000017 	ldw	r16,0(sp)
10008fbc:	dec00304 	addi	sp,sp,12
10008fc0:	f800283a 	ret
10008fc4:	80c00017 	ldw	r3,0(r16)
10008fc8:	183ff926 	beq	r3,zero,10008fb0 <__alt_data_end+0xf8008fb0>
10008fcc:	88c00015 	stw	r3,0(r17)
10008fd0:	003ff706 	br	10008fb0 <__alt_data_end+0xf8008fb0>

10008fd4 <memchr>:
10008fd4:	208000cc 	andi	r2,r4,3
10008fd8:	280f883a 	mov	r7,r5
10008fdc:	10003426 	beq	r2,zero,100090b0 <memchr+0xdc>
10008fe0:	30bfffc4 	addi	r2,r6,-1
10008fe4:	30001a26 	beq	r6,zero,10009050 <memchr+0x7c>
10008fe8:	20c00003 	ldbu	r3,0(r4)
10008fec:	29803fcc 	andi	r6,r5,255
10008ff0:	30c0051e 	bne	r6,r3,10009008 <memchr+0x34>
10008ff4:	00001806 	br	10009058 <memchr+0x84>
10008ff8:	10001526 	beq	r2,zero,10009050 <memchr+0x7c>
10008ffc:	20c00003 	ldbu	r3,0(r4)
10009000:	10bfffc4 	addi	r2,r2,-1
10009004:	30c01426 	beq	r6,r3,10009058 <memchr+0x84>
10009008:	21000044 	addi	r4,r4,1
1000900c:	20c000cc 	andi	r3,r4,3
10009010:	183ff91e 	bne	r3,zero,10008ff8 <__alt_data_end+0xf8008ff8>
10009014:	020000c4 	movi	r8,3
10009018:	40801136 	bltu	r8,r2,10009060 <memchr+0x8c>
1000901c:	10000c26 	beq	r2,zero,10009050 <memchr+0x7c>
10009020:	20c00003 	ldbu	r3,0(r4)
10009024:	29403fcc 	andi	r5,r5,255
10009028:	28c00b26 	beq	r5,r3,10009058 <memchr+0x84>
1000902c:	20c00044 	addi	r3,r4,1
10009030:	39803fcc 	andi	r6,r7,255
10009034:	2089883a 	add	r4,r4,r2
10009038:	00000306 	br	10009048 <memchr+0x74>
1000903c:	18c00044 	addi	r3,r3,1
10009040:	197fffc3 	ldbu	r5,-1(r3)
10009044:	31400526 	beq	r6,r5,1000905c <memchr+0x88>
10009048:	1805883a 	mov	r2,r3
1000904c:	20fffb1e 	bne	r4,r3,1000903c <__alt_data_end+0xf800903c>
10009050:	0005883a 	mov	r2,zero
10009054:	f800283a 	ret
10009058:	2005883a 	mov	r2,r4
1000905c:	f800283a 	ret
10009060:	28c03fcc 	andi	r3,r5,255
10009064:	1812923a 	slli	r9,r3,8
10009068:	02ffbff4 	movhi	r11,65279
1000906c:	02a02074 	movhi	r10,32897
10009070:	48d2b03a 	or	r9,r9,r3
10009074:	4806943a 	slli	r3,r9,16
10009078:	5affbfc4 	addi	r11,r11,-257
1000907c:	52a02004 	addi	r10,r10,-32640
10009080:	48d2b03a 	or	r9,r9,r3
10009084:	20c00017 	ldw	r3,0(r4)
10009088:	48c6f03a 	xor	r3,r9,r3
1000908c:	1acd883a 	add	r6,r3,r11
10009090:	00c6303a 	nor	r3,zero,r3
10009094:	30c6703a 	and	r3,r6,r3
10009098:	1a86703a 	and	r3,r3,r10
1000909c:	183fe01e 	bne	r3,zero,10009020 <__alt_data_end+0xf8009020>
100090a0:	10bfff04 	addi	r2,r2,-4
100090a4:	21000104 	addi	r4,r4,4
100090a8:	40bff636 	bltu	r8,r2,10009084 <__alt_data_end+0xf8009084>
100090ac:	003fdb06 	br	1000901c <__alt_data_end+0xf800901c>
100090b0:	3005883a 	mov	r2,r6
100090b4:	003fd706 	br	10009014 <__alt_data_end+0xf8009014>

100090b8 <memmove>:
100090b8:	2005883a 	mov	r2,r4
100090bc:	29000b2e 	bgeu	r5,r4,100090ec <memmove+0x34>
100090c0:	298f883a 	add	r7,r5,r6
100090c4:	21c0092e 	bgeu	r4,r7,100090ec <memmove+0x34>
100090c8:	2187883a 	add	r3,r4,r6
100090cc:	198bc83a 	sub	r5,r3,r6
100090d0:	30004826 	beq	r6,zero,100091f4 <memmove+0x13c>
100090d4:	39ffffc4 	addi	r7,r7,-1
100090d8:	39000003 	ldbu	r4,0(r7)
100090dc:	18ffffc4 	addi	r3,r3,-1
100090e0:	19000005 	stb	r4,0(r3)
100090e4:	28fffb1e 	bne	r5,r3,100090d4 <__alt_data_end+0xf80090d4>
100090e8:	f800283a 	ret
100090ec:	00c003c4 	movi	r3,15
100090f0:	1980412e 	bgeu	r3,r6,100091f8 <memmove+0x140>
100090f4:	2886b03a 	or	r3,r5,r2
100090f8:	18c000cc 	andi	r3,r3,3
100090fc:	1800401e 	bne	r3,zero,10009200 <memmove+0x148>
10009100:	33fffc04 	addi	r15,r6,-16
10009104:	781ed13a 	srli	r15,r15,4
10009108:	28c00104 	addi	r3,r5,4
1000910c:	13400104 	addi	r13,r2,4
10009110:	781c913a 	slli	r14,r15,4
10009114:	2b000204 	addi	r12,r5,8
10009118:	12c00204 	addi	r11,r2,8
1000911c:	73800504 	addi	r14,r14,20
10009120:	2a800304 	addi	r10,r5,12
10009124:	12400304 	addi	r9,r2,12
10009128:	2b9d883a 	add	r14,r5,r14
1000912c:	2811883a 	mov	r8,r5
10009130:	100f883a 	mov	r7,r2
10009134:	41000017 	ldw	r4,0(r8)
10009138:	39c00404 	addi	r7,r7,16
1000913c:	18c00404 	addi	r3,r3,16
10009140:	393ffc15 	stw	r4,-16(r7)
10009144:	193ffc17 	ldw	r4,-16(r3)
10009148:	6b400404 	addi	r13,r13,16
1000914c:	5ac00404 	addi	r11,r11,16
10009150:	693ffc15 	stw	r4,-16(r13)
10009154:	61000017 	ldw	r4,0(r12)
10009158:	4a400404 	addi	r9,r9,16
1000915c:	42000404 	addi	r8,r8,16
10009160:	593ffc15 	stw	r4,-16(r11)
10009164:	51000017 	ldw	r4,0(r10)
10009168:	63000404 	addi	r12,r12,16
1000916c:	52800404 	addi	r10,r10,16
10009170:	493ffc15 	stw	r4,-16(r9)
10009174:	1bbfef1e 	bne	r3,r14,10009134 <__alt_data_end+0xf8009134>
10009178:	79000044 	addi	r4,r15,1
1000917c:	2008913a 	slli	r4,r4,4
10009180:	328003cc 	andi	r10,r6,15
10009184:	02c000c4 	movi	r11,3
10009188:	1107883a 	add	r3,r2,r4
1000918c:	290b883a 	add	r5,r5,r4
10009190:	5a801e2e 	bgeu	r11,r10,1000920c <memmove+0x154>
10009194:	1813883a 	mov	r9,r3
10009198:	2811883a 	mov	r8,r5
1000919c:	500f883a 	mov	r7,r10
100091a0:	41000017 	ldw	r4,0(r8)
100091a4:	4a400104 	addi	r9,r9,4
100091a8:	39ffff04 	addi	r7,r7,-4
100091ac:	493fff15 	stw	r4,-4(r9)
100091b0:	42000104 	addi	r8,r8,4
100091b4:	59fffa36 	bltu	r11,r7,100091a0 <__alt_data_end+0xf80091a0>
100091b8:	513fff04 	addi	r4,r10,-4
100091bc:	2008d0ba 	srli	r4,r4,2
100091c0:	318000cc 	andi	r6,r6,3
100091c4:	21000044 	addi	r4,r4,1
100091c8:	2109883a 	add	r4,r4,r4
100091cc:	2109883a 	add	r4,r4,r4
100091d0:	1907883a 	add	r3,r3,r4
100091d4:	290b883a 	add	r5,r5,r4
100091d8:	30000b26 	beq	r6,zero,10009208 <memmove+0x150>
100091dc:	198d883a 	add	r6,r3,r6
100091e0:	29c00003 	ldbu	r7,0(r5)
100091e4:	18c00044 	addi	r3,r3,1
100091e8:	29400044 	addi	r5,r5,1
100091ec:	19ffffc5 	stb	r7,-1(r3)
100091f0:	19bffb1e 	bne	r3,r6,100091e0 <__alt_data_end+0xf80091e0>
100091f4:	f800283a 	ret
100091f8:	1007883a 	mov	r3,r2
100091fc:	003ff606 	br	100091d8 <__alt_data_end+0xf80091d8>
10009200:	1007883a 	mov	r3,r2
10009204:	003ff506 	br	100091dc <__alt_data_end+0xf80091dc>
10009208:	f800283a 	ret
1000920c:	500d883a 	mov	r6,r10
10009210:	003ff106 	br	100091d8 <__alt_data_end+0xf80091d8>

10009214 <_Balloc>:
10009214:	20801317 	ldw	r2,76(r4)
10009218:	defffc04 	addi	sp,sp,-16
1000921c:	dc400115 	stw	r17,4(sp)
10009220:	dc000015 	stw	r16,0(sp)
10009224:	dfc00315 	stw	ra,12(sp)
10009228:	dc800215 	stw	r18,8(sp)
1000922c:	2023883a 	mov	r17,r4
10009230:	2821883a 	mov	r16,r5
10009234:	10000f26 	beq	r2,zero,10009274 <_Balloc+0x60>
10009238:	8407883a 	add	r3,r16,r16
1000923c:	18c7883a 	add	r3,r3,r3
10009240:	10c7883a 	add	r3,r2,r3
10009244:	18800017 	ldw	r2,0(r3)
10009248:	10001126 	beq	r2,zero,10009290 <_Balloc+0x7c>
1000924c:	11000017 	ldw	r4,0(r2)
10009250:	19000015 	stw	r4,0(r3)
10009254:	10000415 	stw	zero,16(r2)
10009258:	10000315 	stw	zero,12(r2)
1000925c:	dfc00317 	ldw	ra,12(sp)
10009260:	dc800217 	ldw	r18,8(sp)
10009264:	dc400117 	ldw	r17,4(sp)
10009268:	dc000017 	ldw	r16,0(sp)
1000926c:	dec00404 	addi	sp,sp,16
10009270:	f800283a 	ret
10009274:	01800844 	movi	r6,33
10009278:	01400104 	movi	r5,4
1000927c:	000c1380 	call	1000c138 <_calloc_r>
10009280:	88801315 	stw	r2,76(r17)
10009284:	103fec1e 	bne	r2,zero,10009238 <__alt_data_end+0xf8009238>
10009288:	0005883a 	mov	r2,zero
1000928c:	003ff306 	br	1000925c <__alt_data_end+0xf800925c>
10009290:	01400044 	movi	r5,1
10009294:	2c24983a 	sll	r18,r5,r16
10009298:	8809883a 	mov	r4,r17
1000929c:	91800144 	addi	r6,r18,5
100092a0:	318d883a 	add	r6,r6,r6
100092a4:	318d883a 	add	r6,r6,r6
100092a8:	000c1380 	call	1000c138 <_calloc_r>
100092ac:	103ff626 	beq	r2,zero,10009288 <__alt_data_end+0xf8009288>
100092b0:	14000115 	stw	r16,4(r2)
100092b4:	14800215 	stw	r18,8(r2)
100092b8:	003fe606 	br	10009254 <__alt_data_end+0xf8009254>

100092bc <_Bfree>:
100092bc:	28000826 	beq	r5,zero,100092e0 <_Bfree+0x24>
100092c0:	28c00117 	ldw	r3,4(r5)
100092c4:	20801317 	ldw	r2,76(r4)
100092c8:	18c7883a 	add	r3,r3,r3
100092cc:	18c7883a 	add	r3,r3,r3
100092d0:	10c5883a 	add	r2,r2,r3
100092d4:	10c00017 	ldw	r3,0(r2)
100092d8:	28c00015 	stw	r3,0(r5)
100092dc:	11400015 	stw	r5,0(r2)
100092e0:	f800283a 	ret

100092e4 <__multadd>:
100092e4:	defff704 	addi	sp,sp,-36
100092e8:	dc800215 	stw	r18,8(sp)
100092ec:	2c800417 	ldw	r18,16(r5)
100092f0:	dd800615 	stw	r22,24(sp)
100092f4:	dd400515 	stw	r21,20(sp)
100092f8:	dd000415 	stw	r20,16(sp)
100092fc:	dcc00315 	stw	r19,12(sp)
10009300:	dc400115 	stw	r17,4(sp)
10009304:	dc000015 	stw	r16,0(sp)
10009308:	dfc00815 	stw	ra,32(sp)
1000930c:	ddc00715 	stw	r23,28(sp)
10009310:	2827883a 	mov	r19,r5
10009314:	2029883a 	mov	r20,r4
10009318:	3023883a 	mov	r17,r6
1000931c:	3821883a 	mov	r16,r7
10009320:	2d400504 	addi	r21,r5,20
10009324:	002d883a 	mov	r22,zero
10009328:	adc00017 	ldw	r23,0(r21)
1000932c:	880b883a 	mov	r5,r17
10009330:	ad400104 	addi	r21,r21,4
10009334:	b93fffcc 	andi	r4,r23,65535
10009338:	00017e40 	call	100017e4 <__mulsi3>
1000933c:	b808d43a 	srli	r4,r23,16
10009340:	880b883a 	mov	r5,r17
10009344:	1421883a 	add	r16,r2,r16
10009348:	00017e40 	call	100017e4 <__mulsi3>
1000934c:	800ed43a 	srli	r7,r16,16
10009350:	80ffffcc 	andi	r3,r16,65535
10009354:	b5800044 	addi	r22,r22,1
10009358:	11c5883a 	add	r2,r2,r7
1000935c:	100e943a 	slli	r7,r2,16
10009360:	1020d43a 	srli	r16,r2,16
10009364:	38c7883a 	add	r3,r7,r3
10009368:	a8ffff15 	stw	r3,-4(r21)
1000936c:	b4bfee16 	blt	r22,r18,10009328 <__alt_data_end+0xf8009328>
10009370:	80000926 	beq	r16,zero,10009398 <__multadd+0xb4>
10009374:	98800217 	ldw	r2,8(r19)
10009378:	9080130e 	bge	r18,r2,100093c8 <__multadd+0xe4>
1000937c:	90800144 	addi	r2,r18,5
10009380:	1085883a 	add	r2,r2,r2
10009384:	1085883a 	add	r2,r2,r2
10009388:	9885883a 	add	r2,r19,r2
1000938c:	14000015 	stw	r16,0(r2)
10009390:	94800044 	addi	r18,r18,1
10009394:	9c800415 	stw	r18,16(r19)
10009398:	9805883a 	mov	r2,r19
1000939c:	dfc00817 	ldw	ra,32(sp)
100093a0:	ddc00717 	ldw	r23,28(sp)
100093a4:	dd800617 	ldw	r22,24(sp)
100093a8:	dd400517 	ldw	r21,20(sp)
100093ac:	dd000417 	ldw	r20,16(sp)
100093b0:	dcc00317 	ldw	r19,12(sp)
100093b4:	dc800217 	ldw	r18,8(sp)
100093b8:	dc400117 	ldw	r17,4(sp)
100093bc:	dc000017 	ldw	r16,0(sp)
100093c0:	dec00904 	addi	sp,sp,36
100093c4:	f800283a 	ret
100093c8:	99400117 	ldw	r5,4(r19)
100093cc:	a009883a 	mov	r4,r20
100093d0:	29400044 	addi	r5,r5,1
100093d4:	00092140 	call	10009214 <_Balloc>
100093d8:	99800417 	ldw	r6,16(r19)
100093dc:	99400304 	addi	r5,r19,12
100093e0:	11000304 	addi	r4,r2,12
100093e4:	31800084 	addi	r6,r6,2
100093e8:	318d883a 	add	r6,r6,r6
100093ec:	318d883a 	add	r6,r6,r6
100093f0:	1023883a 	mov	r17,r2
100093f4:	0003af00 	call	10003af0 <memcpy>
100093f8:	98000a26 	beq	r19,zero,10009424 <__multadd+0x140>
100093fc:	98c00117 	ldw	r3,4(r19)
10009400:	a0801317 	ldw	r2,76(r20)
10009404:	18c7883a 	add	r3,r3,r3
10009408:	18c7883a 	add	r3,r3,r3
1000940c:	10c5883a 	add	r2,r2,r3
10009410:	10c00017 	ldw	r3,0(r2)
10009414:	98c00015 	stw	r3,0(r19)
10009418:	14c00015 	stw	r19,0(r2)
1000941c:	8827883a 	mov	r19,r17
10009420:	003fd606 	br	1000937c <__alt_data_end+0xf800937c>
10009424:	8827883a 	mov	r19,r17
10009428:	003fd406 	br	1000937c <__alt_data_end+0xf800937c>

1000942c <__s2b>:
1000942c:	defff904 	addi	sp,sp,-28
10009430:	dc400115 	stw	r17,4(sp)
10009434:	dc000015 	stw	r16,0(sp)
10009438:	2023883a 	mov	r17,r4
1000943c:	2821883a 	mov	r16,r5
10009440:	39000204 	addi	r4,r7,8
10009444:	01400244 	movi	r5,9
10009448:	dcc00315 	stw	r19,12(sp)
1000944c:	dc800215 	stw	r18,8(sp)
10009450:	dfc00615 	stw	ra,24(sp)
10009454:	dd400515 	stw	r21,20(sp)
10009458:	dd000415 	stw	r20,16(sp)
1000945c:	3825883a 	mov	r18,r7
10009460:	3027883a 	mov	r19,r6
10009464:	00016300 	call	10001630 <__divsi3>
10009468:	00c00044 	movi	r3,1
1000946c:	000b883a 	mov	r5,zero
10009470:	1880030e 	bge	r3,r2,10009480 <__s2b+0x54>
10009474:	18c7883a 	add	r3,r3,r3
10009478:	29400044 	addi	r5,r5,1
1000947c:	18bffd16 	blt	r3,r2,10009474 <__alt_data_end+0xf8009474>
10009480:	8809883a 	mov	r4,r17
10009484:	00092140 	call	10009214 <_Balloc>
10009488:	d8c00717 	ldw	r3,28(sp)
1000948c:	10c00515 	stw	r3,20(r2)
10009490:	00c00044 	movi	r3,1
10009494:	10c00415 	stw	r3,16(r2)
10009498:	00c00244 	movi	r3,9
1000949c:	1cc0210e 	bge	r3,r19,10009524 <__s2b+0xf8>
100094a0:	80eb883a 	add	r21,r16,r3
100094a4:	a829883a 	mov	r20,r21
100094a8:	84e1883a 	add	r16,r16,r19
100094ac:	a1c00007 	ldb	r7,0(r20)
100094b0:	01800284 	movi	r6,10
100094b4:	a5000044 	addi	r20,r20,1
100094b8:	100b883a 	mov	r5,r2
100094bc:	39fff404 	addi	r7,r7,-48
100094c0:	8809883a 	mov	r4,r17
100094c4:	00092e40 	call	100092e4 <__multadd>
100094c8:	a43ff81e 	bne	r20,r16,100094ac <__alt_data_end+0xf80094ac>
100094cc:	ace1883a 	add	r16,r21,r19
100094d0:	843ffe04 	addi	r16,r16,-8
100094d4:	9c800a0e 	bge	r19,r18,10009500 <__s2b+0xd4>
100094d8:	94e5c83a 	sub	r18,r18,r19
100094dc:	84a5883a 	add	r18,r16,r18
100094e0:	81c00007 	ldb	r7,0(r16)
100094e4:	01800284 	movi	r6,10
100094e8:	84000044 	addi	r16,r16,1
100094ec:	100b883a 	mov	r5,r2
100094f0:	39fff404 	addi	r7,r7,-48
100094f4:	8809883a 	mov	r4,r17
100094f8:	00092e40 	call	100092e4 <__multadd>
100094fc:	84bff81e 	bne	r16,r18,100094e0 <__alt_data_end+0xf80094e0>
10009500:	dfc00617 	ldw	ra,24(sp)
10009504:	dd400517 	ldw	r21,20(sp)
10009508:	dd000417 	ldw	r20,16(sp)
1000950c:	dcc00317 	ldw	r19,12(sp)
10009510:	dc800217 	ldw	r18,8(sp)
10009514:	dc400117 	ldw	r17,4(sp)
10009518:	dc000017 	ldw	r16,0(sp)
1000951c:	dec00704 	addi	sp,sp,28
10009520:	f800283a 	ret
10009524:	84000284 	addi	r16,r16,10
10009528:	1827883a 	mov	r19,r3
1000952c:	003fe906 	br	100094d4 <__alt_data_end+0xf80094d4>

10009530 <__hi0bits>:
10009530:	20bfffec 	andhi	r2,r4,65535
10009534:	1000141e 	bne	r2,zero,10009588 <__hi0bits+0x58>
10009538:	2008943a 	slli	r4,r4,16
1000953c:	00800404 	movi	r2,16
10009540:	20ffc02c 	andhi	r3,r4,65280
10009544:	1800021e 	bne	r3,zero,10009550 <__hi0bits+0x20>
10009548:	2008923a 	slli	r4,r4,8
1000954c:	10800204 	addi	r2,r2,8
10009550:	20fc002c 	andhi	r3,r4,61440
10009554:	1800021e 	bne	r3,zero,10009560 <__hi0bits+0x30>
10009558:	2008913a 	slli	r4,r4,4
1000955c:	10800104 	addi	r2,r2,4
10009560:	20f0002c 	andhi	r3,r4,49152
10009564:	1800031e 	bne	r3,zero,10009574 <__hi0bits+0x44>
10009568:	2109883a 	add	r4,r4,r4
1000956c:	10800084 	addi	r2,r2,2
10009570:	2109883a 	add	r4,r4,r4
10009574:	20000316 	blt	r4,zero,10009584 <__hi0bits+0x54>
10009578:	2110002c 	andhi	r4,r4,16384
1000957c:	2000041e 	bne	r4,zero,10009590 <__hi0bits+0x60>
10009580:	00800804 	movi	r2,32
10009584:	f800283a 	ret
10009588:	0005883a 	mov	r2,zero
1000958c:	003fec06 	br	10009540 <__alt_data_end+0xf8009540>
10009590:	10800044 	addi	r2,r2,1
10009594:	f800283a 	ret

10009598 <__lo0bits>:
10009598:	20c00017 	ldw	r3,0(r4)
1000959c:	188001cc 	andi	r2,r3,7
100095a0:	10000826 	beq	r2,zero,100095c4 <__lo0bits+0x2c>
100095a4:	1880004c 	andi	r2,r3,1
100095a8:	1000211e 	bne	r2,zero,10009630 <__lo0bits+0x98>
100095ac:	1880008c 	andi	r2,r3,2
100095b0:	1000211e 	bne	r2,zero,10009638 <__lo0bits+0xa0>
100095b4:	1806d0ba 	srli	r3,r3,2
100095b8:	00800084 	movi	r2,2
100095bc:	20c00015 	stw	r3,0(r4)
100095c0:	f800283a 	ret
100095c4:	18bfffcc 	andi	r2,r3,65535
100095c8:	10001326 	beq	r2,zero,10009618 <__lo0bits+0x80>
100095cc:	0005883a 	mov	r2,zero
100095d0:	19403fcc 	andi	r5,r3,255
100095d4:	2800021e 	bne	r5,zero,100095e0 <__lo0bits+0x48>
100095d8:	1806d23a 	srli	r3,r3,8
100095dc:	10800204 	addi	r2,r2,8
100095e0:	194003cc 	andi	r5,r3,15
100095e4:	2800021e 	bne	r5,zero,100095f0 <__lo0bits+0x58>
100095e8:	1806d13a 	srli	r3,r3,4
100095ec:	10800104 	addi	r2,r2,4
100095f0:	194000cc 	andi	r5,r3,3
100095f4:	2800021e 	bne	r5,zero,10009600 <__lo0bits+0x68>
100095f8:	1806d0ba 	srli	r3,r3,2
100095fc:	10800084 	addi	r2,r2,2
10009600:	1940004c 	andi	r5,r3,1
10009604:	2800081e 	bne	r5,zero,10009628 <__lo0bits+0x90>
10009608:	1806d07a 	srli	r3,r3,1
1000960c:	1800051e 	bne	r3,zero,10009624 <__lo0bits+0x8c>
10009610:	00800804 	movi	r2,32
10009614:	f800283a 	ret
10009618:	1806d43a 	srli	r3,r3,16
1000961c:	00800404 	movi	r2,16
10009620:	003feb06 	br	100095d0 <__alt_data_end+0xf80095d0>
10009624:	10800044 	addi	r2,r2,1
10009628:	20c00015 	stw	r3,0(r4)
1000962c:	f800283a 	ret
10009630:	0005883a 	mov	r2,zero
10009634:	f800283a 	ret
10009638:	1806d07a 	srli	r3,r3,1
1000963c:	00800044 	movi	r2,1
10009640:	20c00015 	stw	r3,0(r4)
10009644:	f800283a 	ret

10009648 <__i2b>:
10009648:	defffd04 	addi	sp,sp,-12
1000964c:	dc000015 	stw	r16,0(sp)
10009650:	04000044 	movi	r16,1
10009654:	dc400115 	stw	r17,4(sp)
10009658:	2823883a 	mov	r17,r5
1000965c:	800b883a 	mov	r5,r16
10009660:	dfc00215 	stw	ra,8(sp)
10009664:	00092140 	call	10009214 <_Balloc>
10009668:	14400515 	stw	r17,20(r2)
1000966c:	14000415 	stw	r16,16(r2)
10009670:	dfc00217 	ldw	ra,8(sp)
10009674:	dc400117 	ldw	r17,4(sp)
10009678:	dc000017 	ldw	r16,0(sp)
1000967c:	dec00304 	addi	sp,sp,12
10009680:	f800283a 	ret

10009684 <__multiply>:
10009684:	deffef04 	addi	sp,sp,-68
10009688:	dc400815 	stw	r17,32(sp)
1000968c:	dc000715 	stw	r16,28(sp)
10009690:	34400417 	ldw	r17,16(r6)
10009694:	2c000417 	ldw	r16,16(r5)
10009698:	dd800d15 	stw	r22,52(sp)
1000969c:	dc800915 	stw	r18,36(sp)
100096a0:	dfc01015 	stw	ra,64(sp)
100096a4:	df000f15 	stw	fp,60(sp)
100096a8:	ddc00e15 	stw	r23,56(sp)
100096ac:	dd400c15 	stw	r21,48(sp)
100096b0:	dd000b15 	stw	r20,44(sp)
100096b4:	dcc00a15 	stw	r19,40(sp)
100096b8:	2825883a 	mov	r18,r5
100096bc:	302d883a 	mov	r22,r6
100096c0:	8440050e 	bge	r16,r17,100096d8 <__multiply+0x54>
100096c4:	8007883a 	mov	r3,r16
100096c8:	3025883a 	mov	r18,r6
100096cc:	8821883a 	mov	r16,r17
100096d0:	282d883a 	mov	r22,r5
100096d4:	1823883a 	mov	r17,r3
100096d8:	90800217 	ldw	r2,8(r18)
100096dc:	8447883a 	add	r3,r16,r17
100096e0:	d8c00215 	stw	r3,8(sp)
100096e4:	91400117 	ldw	r5,4(r18)
100096e8:	10c0010e 	bge	r2,r3,100096f0 <__multiply+0x6c>
100096ec:	29400044 	addi	r5,r5,1
100096f0:	00092140 	call	10009214 <_Balloc>
100096f4:	d8c00217 	ldw	r3,8(sp)
100096f8:	d8800615 	stw	r2,24(sp)
100096fc:	18eb883a 	add	r21,r3,r3
10009700:	ad6b883a 	add	r21,r21,r21
10009704:	10c00504 	addi	r3,r2,20
10009708:	1d6b883a 	add	r21,r3,r21
1000970c:	d8c00115 	stw	r3,4(sp)
10009710:	dd400315 	stw	r21,12(sp)
10009714:	1805883a 	mov	r2,r3
10009718:	1d40042e 	bgeu	r3,r21,1000972c <__multiply+0xa8>
1000971c:	d8c00317 	ldw	r3,12(sp)
10009720:	10000015 	stw	zero,0(r2)
10009724:	10800104 	addi	r2,r2,4
10009728:	10fffc36 	bltu	r2,r3,1000971c <__alt_data_end+0xf800971c>
1000972c:	8c63883a 	add	r17,r17,r17
10009730:	b5800504 	addi	r22,r22,20
10009734:	8c63883a 	add	r17,r17,r17
10009738:	94800504 	addi	r18,r18,20
1000973c:	8421883a 	add	r16,r16,r16
10009740:	b463883a 	add	r17,r22,r17
10009744:	8421883a 	add	r16,r16,r16
10009748:	dd800015 	stw	r22,0(sp)
1000974c:	dc800415 	stw	r18,16(sp)
10009750:	dc400515 	stw	r17,20(sp)
10009754:	9429883a 	add	r20,r18,r16
10009758:	b4404f2e 	bgeu	r22,r17,10009898 <__multiply+0x214>
1000975c:	d8c00017 	ldw	r3,0(sp)
10009760:	1c800017 	ldw	r18,0(r3)
10009764:	947fffcc 	andi	r17,r18,65535
10009768:	88001e26 	beq	r17,zero,100097e4 <__multiply+0x160>
1000976c:	dd800117 	ldw	r22,4(sp)
10009770:	dd400417 	ldw	r21,16(sp)
10009774:	0027883a 	mov	r19,zero
10009778:	ac800017 	ldw	r18,0(r21)
1000977c:	b4000017 	ldw	r16,0(r22)
10009780:	880b883a 	mov	r5,r17
10009784:	913fffcc 	andi	r4,r18,65535
10009788:	00017e40 	call	100017e4 <__mulsi3>
1000978c:	9008d43a 	srli	r4,r18,16
10009790:	84bfffcc 	andi	r18,r16,65535
10009794:	1485883a 	add	r2,r2,r18
10009798:	14e5883a 	add	r18,r2,r19
1000979c:	8020d43a 	srli	r16,r16,16
100097a0:	9026d43a 	srli	r19,r18,16
100097a4:	880b883a 	mov	r5,r17
100097a8:	00017e40 	call	100017e4 <__mulsi3>
100097ac:	1405883a 	add	r2,r2,r16
100097b0:	14e1883a 	add	r16,r2,r19
100097b4:	90ffffcc 	andi	r3,r18,65535
100097b8:	8024943a 	slli	r18,r16,16
100097bc:	ad400104 	addi	r21,r21,4
100097c0:	b005883a 	mov	r2,r22
100097c4:	90c6b03a 	or	r3,r18,r3
100097c8:	b0c00015 	stw	r3,0(r22)
100097cc:	8026d43a 	srli	r19,r16,16
100097d0:	b5800104 	addi	r22,r22,4
100097d4:	ad3fe836 	bltu	r21,r20,10009778 <__alt_data_end+0xf8009778>
100097d8:	d8c00017 	ldw	r3,0(sp)
100097dc:	14c00115 	stw	r19,4(r2)
100097e0:	1c800017 	ldw	r18,0(r3)
100097e4:	9024d43a 	srli	r18,r18,16
100097e8:	90002226 	beq	r18,zero,10009874 <__multiply+0x1f0>
100097ec:	d8c00117 	ldw	r3,4(sp)
100097f0:	dd800417 	ldw	r22,16(sp)
100097f4:	002f883a 	mov	r23,zero
100097f8:	1f000017 	ldw	fp,0(r3)
100097fc:	1823883a 	mov	r17,r3
10009800:	182b883a 	mov	r21,r3
10009804:	e021883a 	mov	r16,fp
10009808:	00000106 	br	10009810 <__multiply+0x18c>
1000980c:	982b883a 	mov	r21,r19
10009810:	b100000b 	ldhu	r4,0(r22)
10009814:	8020d43a 	srli	r16,r16,16
10009818:	900b883a 	mov	r5,r18
1000981c:	00017e40 	call	100017e4 <__mulsi3>
10009820:	1405883a 	add	r2,r2,r16
10009824:	15ef883a 	add	r23,r2,r23
10009828:	b804943a 	slli	r2,r23,16
1000982c:	e0ffffcc 	andi	r3,fp,65535
10009830:	8c400104 	addi	r17,r17,4
10009834:	10c6b03a 	or	r3,r2,r3
10009838:	88ffff15 	stw	r3,-4(r17)
1000983c:	b5800104 	addi	r22,r22,4
10009840:	b13fff17 	ldw	r4,-4(r22)
10009844:	acc00104 	addi	r19,r21,4
10009848:	900b883a 	mov	r5,r18
1000984c:	2008d43a 	srli	r4,r4,16
10009850:	9c000017 	ldw	r16,0(r19)
10009854:	00017e40 	call	100017e4 <__mulsi3>
10009858:	b806d43a 	srli	r3,r23,16
1000985c:	813fffcc 	andi	r4,r16,65535
10009860:	1105883a 	add	r2,r2,r4
10009864:	10f9883a 	add	fp,r2,r3
10009868:	e02ed43a 	srli	r23,fp,16
1000986c:	b53fe736 	bltu	r22,r20,1000980c <__alt_data_end+0xf800980c>
10009870:	af000115 	stw	fp,4(r21)
10009874:	d8c00017 	ldw	r3,0(sp)
10009878:	d9000517 	ldw	r4,20(sp)
1000987c:	18c00104 	addi	r3,r3,4
10009880:	d8c00015 	stw	r3,0(sp)
10009884:	d8c00117 	ldw	r3,4(sp)
10009888:	18c00104 	addi	r3,r3,4
1000988c:	d8c00115 	stw	r3,4(sp)
10009890:	d8c00017 	ldw	r3,0(sp)
10009894:	193fb136 	bltu	r3,r4,1000975c <__alt_data_end+0xf800975c>
10009898:	d8c00217 	ldw	r3,8(sp)
1000989c:	00c00c0e 	bge	zero,r3,100098d0 <__multiply+0x24c>
100098a0:	d8c00317 	ldw	r3,12(sp)
100098a4:	18bfff17 	ldw	r2,-4(r3)
100098a8:	1d7fff04 	addi	r21,r3,-4
100098ac:	10000326 	beq	r2,zero,100098bc <__multiply+0x238>
100098b0:	00000706 	br	100098d0 <__multiply+0x24c>
100098b4:	a8800017 	ldw	r2,0(r21)
100098b8:	1000051e 	bne	r2,zero,100098d0 <__multiply+0x24c>
100098bc:	d8c00217 	ldw	r3,8(sp)
100098c0:	ad7fff04 	addi	r21,r21,-4
100098c4:	18ffffc4 	addi	r3,r3,-1
100098c8:	d8c00215 	stw	r3,8(sp)
100098cc:	183ff91e 	bne	r3,zero,100098b4 <__alt_data_end+0xf80098b4>
100098d0:	d8c00617 	ldw	r3,24(sp)
100098d4:	d9000217 	ldw	r4,8(sp)
100098d8:	1805883a 	mov	r2,r3
100098dc:	19000415 	stw	r4,16(r3)
100098e0:	dfc01017 	ldw	ra,64(sp)
100098e4:	df000f17 	ldw	fp,60(sp)
100098e8:	ddc00e17 	ldw	r23,56(sp)
100098ec:	dd800d17 	ldw	r22,52(sp)
100098f0:	dd400c17 	ldw	r21,48(sp)
100098f4:	dd000b17 	ldw	r20,44(sp)
100098f8:	dcc00a17 	ldw	r19,40(sp)
100098fc:	dc800917 	ldw	r18,36(sp)
10009900:	dc400817 	ldw	r17,32(sp)
10009904:	dc000717 	ldw	r16,28(sp)
10009908:	dec01104 	addi	sp,sp,68
1000990c:	f800283a 	ret

10009910 <__pow5mult>:
10009910:	defffa04 	addi	sp,sp,-24
10009914:	dcc00315 	stw	r19,12(sp)
10009918:	dc000015 	stw	r16,0(sp)
1000991c:	dfc00515 	stw	ra,20(sp)
10009920:	dd000415 	stw	r20,16(sp)
10009924:	dc800215 	stw	r18,8(sp)
10009928:	dc400115 	stw	r17,4(sp)
1000992c:	308000cc 	andi	r2,r6,3
10009930:	3021883a 	mov	r16,r6
10009934:	2027883a 	mov	r19,r4
10009938:	10002f1e 	bne	r2,zero,100099f8 <__pow5mult+0xe8>
1000993c:	2825883a 	mov	r18,r5
10009940:	8021d0ba 	srai	r16,r16,2
10009944:	80001a26 	beq	r16,zero,100099b0 <__pow5mult+0xa0>
10009948:	9c401217 	ldw	r17,72(r19)
1000994c:	8800061e 	bne	r17,zero,10009968 <__pow5mult+0x58>
10009950:	00003406 	br	10009a24 <__pow5mult+0x114>
10009954:	8021d07a 	srai	r16,r16,1
10009958:	80001526 	beq	r16,zero,100099b0 <__pow5mult+0xa0>
1000995c:	88800017 	ldw	r2,0(r17)
10009960:	10001c26 	beq	r2,zero,100099d4 <__pow5mult+0xc4>
10009964:	1023883a 	mov	r17,r2
10009968:	8080004c 	andi	r2,r16,1
1000996c:	103ff926 	beq	r2,zero,10009954 <__alt_data_end+0xf8009954>
10009970:	880d883a 	mov	r6,r17
10009974:	900b883a 	mov	r5,r18
10009978:	9809883a 	mov	r4,r19
1000997c:	00096840 	call	10009684 <__multiply>
10009980:	90001b26 	beq	r18,zero,100099f0 <__pow5mult+0xe0>
10009984:	91000117 	ldw	r4,4(r18)
10009988:	98c01317 	ldw	r3,76(r19)
1000998c:	8021d07a 	srai	r16,r16,1
10009990:	2109883a 	add	r4,r4,r4
10009994:	2109883a 	add	r4,r4,r4
10009998:	1907883a 	add	r3,r3,r4
1000999c:	19000017 	ldw	r4,0(r3)
100099a0:	91000015 	stw	r4,0(r18)
100099a4:	1c800015 	stw	r18,0(r3)
100099a8:	1025883a 	mov	r18,r2
100099ac:	803feb1e 	bne	r16,zero,1000995c <__alt_data_end+0xf800995c>
100099b0:	9005883a 	mov	r2,r18
100099b4:	dfc00517 	ldw	ra,20(sp)
100099b8:	dd000417 	ldw	r20,16(sp)
100099bc:	dcc00317 	ldw	r19,12(sp)
100099c0:	dc800217 	ldw	r18,8(sp)
100099c4:	dc400117 	ldw	r17,4(sp)
100099c8:	dc000017 	ldw	r16,0(sp)
100099cc:	dec00604 	addi	sp,sp,24
100099d0:	f800283a 	ret
100099d4:	880d883a 	mov	r6,r17
100099d8:	880b883a 	mov	r5,r17
100099dc:	9809883a 	mov	r4,r19
100099e0:	00096840 	call	10009684 <__multiply>
100099e4:	88800015 	stw	r2,0(r17)
100099e8:	10000015 	stw	zero,0(r2)
100099ec:	003fdd06 	br	10009964 <__alt_data_end+0xf8009964>
100099f0:	1025883a 	mov	r18,r2
100099f4:	003fd706 	br	10009954 <__alt_data_end+0xf8009954>
100099f8:	10bfffc4 	addi	r2,r2,-1
100099fc:	1085883a 	add	r2,r2,r2
10009a00:	00c40074 	movhi	r3,4097
10009a04:	18c9ed04 	addi	r3,r3,10164
10009a08:	1085883a 	add	r2,r2,r2
10009a0c:	1885883a 	add	r2,r3,r2
10009a10:	11800017 	ldw	r6,0(r2)
10009a14:	000f883a 	mov	r7,zero
10009a18:	00092e40 	call	100092e4 <__multadd>
10009a1c:	1025883a 	mov	r18,r2
10009a20:	003fc706 	br	10009940 <__alt_data_end+0xf8009940>
10009a24:	05000044 	movi	r20,1
10009a28:	a00b883a 	mov	r5,r20
10009a2c:	9809883a 	mov	r4,r19
10009a30:	00092140 	call	10009214 <_Balloc>
10009a34:	1023883a 	mov	r17,r2
10009a38:	00809c44 	movi	r2,625
10009a3c:	88800515 	stw	r2,20(r17)
10009a40:	8d000415 	stw	r20,16(r17)
10009a44:	9c401215 	stw	r17,72(r19)
10009a48:	88000015 	stw	zero,0(r17)
10009a4c:	003fc606 	br	10009968 <__alt_data_end+0xf8009968>

10009a50 <__lshift>:
10009a50:	defff904 	addi	sp,sp,-28
10009a54:	dd400515 	stw	r21,20(sp)
10009a58:	dcc00315 	stw	r19,12(sp)
10009a5c:	302bd17a 	srai	r21,r6,5
10009a60:	2cc00417 	ldw	r19,16(r5)
10009a64:	28800217 	ldw	r2,8(r5)
10009a68:	dd000415 	stw	r20,16(sp)
10009a6c:	ace7883a 	add	r19,r21,r19
10009a70:	dc800215 	stw	r18,8(sp)
10009a74:	dc400115 	stw	r17,4(sp)
10009a78:	dc000015 	stw	r16,0(sp)
10009a7c:	dfc00615 	stw	ra,24(sp)
10009a80:	9c000044 	addi	r16,r19,1
10009a84:	2823883a 	mov	r17,r5
10009a88:	3029883a 	mov	r20,r6
10009a8c:	2025883a 	mov	r18,r4
10009a90:	29400117 	ldw	r5,4(r5)
10009a94:	1400030e 	bge	r2,r16,10009aa4 <__lshift+0x54>
10009a98:	1085883a 	add	r2,r2,r2
10009a9c:	29400044 	addi	r5,r5,1
10009aa0:	143ffd16 	blt	r2,r16,10009a98 <__alt_data_end+0xf8009a98>
10009aa4:	9009883a 	mov	r4,r18
10009aa8:	00092140 	call	10009214 <_Balloc>
10009aac:	10c00504 	addi	r3,r2,20
10009ab0:	0540070e 	bge	zero,r21,10009ad0 <__lshift+0x80>
10009ab4:	ad6b883a 	add	r21,r21,r21
10009ab8:	ad6b883a 	add	r21,r21,r21
10009abc:	1809883a 	mov	r4,r3
10009ac0:	1d47883a 	add	r3,r3,r21
10009ac4:	20000015 	stw	zero,0(r4)
10009ac8:	21000104 	addi	r4,r4,4
10009acc:	193ffd1e 	bne	r3,r4,10009ac4 <__alt_data_end+0xf8009ac4>
10009ad0:	8a000417 	ldw	r8,16(r17)
10009ad4:	89000504 	addi	r4,r17,20
10009ad8:	a18007cc 	andi	r6,r20,31
10009adc:	4211883a 	add	r8,r8,r8
10009ae0:	4211883a 	add	r8,r8,r8
10009ae4:	2211883a 	add	r8,r4,r8
10009ae8:	30002326 	beq	r6,zero,10009b78 <__lshift+0x128>
10009aec:	02400804 	movi	r9,32
10009af0:	4993c83a 	sub	r9,r9,r6
10009af4:	000b883a 	mov	r5,zero
10009af8:	21c00017 	ldw	r7,0(r4)
10009afc:	1815883a 	mov	r10,r3
10009b00:	18c00104 	addi	r3,r3,4
10009b04:	398e983a 	sll	r7,r7,r6
10009b08:	21000104 	addi	r4,r4,4
10009b0c:	394ab03a 	or	r5,r7,r5
10009b10:	197fff15 	stw	r5,-4(r3)
10009b14:	217fff17 	ldw	r5,-4(r4)
10009b18:	2a4ad83a 	srl	r5,r5,r9
10009b1c:	223ff636 	bltu	r4,r8,10009af8 <__alt_data_end+0xf8009af8>
10009b20:	51400115 	stw	r5,4(r10)
10009b24:	28001a1e 	bne	r5,zero,10009b90 <__lshift+0x140>
10009b28:	843fffc4 	addi	r16,r16,-1
10009b2c:	14000415 	stw	r16,16(r2)
10009b30:	88000826 	beq	r17,zero,10009b54 <__lshift+0x104>
10009b34:	89000117 	ldw	r4,4(r17)
10009b38:	90c01317 	ldw	r3,76(r18)
10009b3c:	2109883a 	add	r4,r4,r4
10009b40:	2109883a 	add	r4,r4,r4
10009b44:	1907883a 	add	r3,r3,r4
10009b48:	19000017 	ldw	r4,0(r3)
10009b4c:	89000015 	stw	r4,0(r17)
10009b50:	1c400015 	stw	r17,0(r3)
10009b54:	dfc00617 	ldw	ra,24(sp)
10009b58:	dd400517 	ldw	r21,20(sp)
10009b5c:	dd000417 	ldw	r20,16(sp)
10009b60:	dcc00317 	ldw	r19,12(sp)
10009b64:	dc800217 	ldw	r18,8(sp)
10009b68:	dc400117 	ldw	r17,4(sp)
10009b6c:	dc000017 	ldw	r16,0(sp)
10009b70:	dec00704 	addi	sp,sp,28
10009b74:	f800283a 	ret
10009b78:	21400017 	ldw	r5,0(r4)
10009b7c:	18c00104 	addi	r3,r3,4
10009b80:	21000104 	addi	r4,r4,4
10009b84:	197fff15 	stw	r5,-4(r3)
10009b88:	223ffb36 	bltu	r4,r8,10009b78 <__alt_data_end+0xf8009b78>
10009b8c:	003fe606 	br	10009b28 <__alt_data_end+0xf8009b28>
10009b90:	9c000084 	addi	r16,r19,2
10009b94:	003fe406 	br	10009b28 <__alt_data_end+0xf8009b28>

10009b98 <__mcmp>:
10009b98:	20800417 	ldw	r2,16(r4)
10009b9c:	28c00417 	ldw	r3,16(r5)
10009ba0:	10c5c83a 	sub	r2,r2,r3
10009ba4:	1000111e 	bne	r2,zero,10009bec <__mcmp+0x54>
10009ba8:	18c7883a 	add	r3,r3,r3
10009bac:	18c7883a 	add	r3,r3,r3
10009bb0:	21000504 	addi	r4,r4,20
10009bb4:	29400504 	addi	r5,r5,20
10009bb8:	20c5883a 	add	r2,r4,r3
10009bbc:	28cb883a 	add	r5,r5,r3
10009bc0:	00000106 	br	10009bc8 <__mcmp+0x30>
10009bc4:	20800a2e 	bgeu	r4,r2,10009bf0 <__mcmp+0x58>
10009bc8:	10bfff04 	addi	r2,r2,-4
10009bcc:	297fff04 	addi	r5,r5,-4
10009bd0:	11800017 	ldw	r6,0(r2)
10009bd4:	28c00017 	ldw	r3,0(r5)
10009bd8:	30fffa26 	beq	r6,r3,10009bc4 <__alt_data_end+0xf8009bc4>
10009bdc:	30c00236 	bltu	r6,r3,10009be8 <__mcmp+0x50>
10009be0:	00800044 	movi	r2,1
10009be4:	f800283a 	ret
10009be8:	00bfffc4 	movi	r2,-1
10009bec:	f800283a 	ret
10009bf0:	0005883a 	mov	r2,zero
10009bf4:	f800283a 	ret

10009bf8 <__mdiff>:
10009bf8:	28c00417 	ldw	r3,16(r5)
10009bfc:	30800417 	ldw	r2,16(r6)
10009c00:	defffa04 	addi	sp,sp,-24
10009c04:	dcc00315 	stw	r19,12(sp)
10009c08:	dc800215 	stw	r18,8(sp)
10009c0c:	dfc00515 	stw	ra,20(sp)
10009c10:	dd000415 	stw	r20,16(sp)
10009c14:	dc400115 	stw	r17,4(sp)
10009c18:	dc000015 	stw	r16,0(sp)
10009c1c:	1887c83a 	sub	r3,r3,r2
10009c20:	2825883a 	mov	r18,r5
10009c24:	3027883a 	mov	r19,r6
10009c28:	1800141e 	bne	r3,zero,10009c7c <__mdiff+0x84>
10009c2c:	1085883a 	add	r2,r2,r2
10009c30:	1085883a 	add	r2,r2,r2
10009c34:	2a000504 	addi	r8,r5,20
10009c38:	34000504 	addi	r16,r6,20
10009c3c:	4087883a 	add	r3,r8,r2
10009c40:	8085883a 	add	r2,r16,r2
10009c44:	00000106 	br	10009c4c <__mdiff+0x54>
10009c48:	40c0592e 	bgeu	r8,r3,10009db0 <__mdiff+0x1b8>
10009c4c:	18ffff04 	addi	r3,r3,-4
10009c50:	10bfff04 	addi	r2,r2,-4
10009c54:	19c00017 	ldw	r7,0(r3)
10009c58:	11400017 	ldw	r5,0(r2)
10009c5c:	397ffa26 	beq	r7,r5,10009c48 <__alt_data_end+0xf8009c48>
10009c60:	3940592e 	bgeu	r7,r5,10009dc8 <__mdiff+0x1d0>
10009c64:	9005883a 	mov	r2,r18
10009c68:	4023883a 	mov	r17,r8
10009c6c:	9825883a 	mov	r18,r19
10009c70:	05000044 	movi	r20,1
10009c74:	1027883a 	mov	r19,r2
10009c78:	00000406 	br	10009c8c <__mdiff+0x94>
10009c7c:	18005616 	blt	r3,zero,10009dd8 <__mdiff+0x1e0>
10009c80:	34400504 	addi	r17,r6,20
10009c84:	2c000504 	addi	r16,r5,20
10009c88:	0029883a 	mov	r20,zero
10009c8c:	91400117 	ldw	r5,4(r18)
10009c90:	00092140 	call	10009214 <_Balloc>
10009c94:	92400417 	ldw	r9,16(r18)
10009c98:	9b000417 	ldw	r12,16(r19)
10009c9c:	12c00504 	addi	r11,r2,20
10009ca0:	4a51883a 	add	r8,r9,r9
10009ca4:	6319883a 	add	r12,r12,r12
10009ca8:	4211883a 	add	r8,r8,r8
10009cac:	6319883a 	add	r12,r12,r12
10009cb0:	15000315 	stw	r20,12(r2)
10009cb4:	8211883a 	add	r8,r16,r8
10009cb8:	8b19883a 	add	r12,r17,r12
10009cbc:	0007883a 	mov	r3,zero
10009cc0:	81400017 	ldw	r5,0(r16)
10009cc4:	89c00017 	ldw	r7,0(r17)
10009cc8:	59800104 	addi	r6,r11,4
10009ccc:	293fffcc 	andi	r4,r5,65535
10009cd0:	20c7883a 	add	r3,r4,r3
10009cd4:	393fffcc 	andi	r4,r7,65535
10009cd8:	1909c83a 	sub	r4,r3,r4
10009cdc:	280ad43a 	srli	r5,r5,16
10009ce0:	380ed43a 	srli	r7,r7,16
10009ce4:	2007d43a 	srai	r3,r4,16
10009ce8:	213fffcc 	andi	r4,r4,65535
10009cec:	29cbc83a 	sub	r5,r5,r7
10009cf0:	28c7883a 	add	r3,r5,r3
10009cf4:	180a943a 	slli	r5,r3,16
10009cf8:	8c400104 	addi	r17,r17,4
10009cfc:	84000104 	addi	r16,r16,4
10009d00:	2908b03a 	or	r4,r5,r4
10009d04:	59000015 	stw	r4,0(r11)
10009d08:	1807d43a 	srai	r3,r3,16
10009d0c:	3015883a 	mov	r10,r6
10009d10:	3017883a 	mov	r11,r6
10009d14:	8b3fea36 	bltu	r17,r12,10009cc0 <__alt_data_end+0xf8009cc0>
10009d18:	8200162e 	bgeu	r16,r8,10009d74 <__mdiff+0x17c>
10009d1c:	8017883a 	mov	r11,r16
10009d20:	59400017 	ldw	r5,0(r11)
10009d24:	31800104 	addi	r6,r6,4
10009d28:	5ac00104 	addi	r11,r11,4
10009d2c:	293fffcc 	andi	r4,r5,65535
10009d30:	20c7883a 	add	r3,r4,r3
10009d34:	280ed43a 	srli	r7,r5,16
10009d38:	180bd43a 	srai	r5,r3,16
10009d3c:	193fffcc 	andi	r4,r3,65535
10009d40:	3947883a 	add	r3,r7,r5
10009d44:	180a943a 	slli	r5,r3,16
10009d48:	1807d43a 	srai	r3,r3,16
10009d4c:	2908b03a 	or	r4,r5,r4
10009d50:	313fff15 	stw	r4,-4(r6)
10009d54:	5a3ff236 	bltu	r11,r8,10009d20 <__alt_data_end+0xf8009d20>
10009d58:	0406303a 	nor	r3,zero,r16
10009d5c:	1a07883a 	add	r3,r3,r8
10009d60:	1806d0ba 	srli	r3,r3,2
10009d64:	18c00044 	addi	r3,r3,1
10009d68:	18c7883a 	add	r3,r3,r3
10009d6c:	18c7883a 	add	r3,r3,r3
10009d70:	50d5883a 	add	r10,r10,r3
10009d74:	50ffff04 	addi	r3,r10,-4
10009d78:	2000041e 	bne	r4,zero,10009d8c <__mdiff+0x194>
10009d7c:	18ffff04 	addi	r3,r3,-4
10009d80:	19000017 	ldw	r4,0(r3)
10009d84:	4a7fffc4 	addi	r9,r9,-1
10009d88:	203ffc26 	beq	r4,zero,10009d7c <__alt_data_end+0xf8009d7c>
10009d8c:	12400415 	stw	r9,16(r2)
10009d90:	dfc00517 	ldw	ra,20(sp)
10009d94:	dd000417 	ldw	r20,16(sp)
10009d98:	dcc00317 	ldw	r19,12(sp)
10009d9c:	dc800217 	ldw	r18,8(sp)
10009da0:	dc400117 	ldw	r17,4(sp)
10009da4:	dc000017 	ldw	r16,0(sp)
10009da8:	dec00604 	addi	sp,sp,24
10009dac:	f800283a 	ret
10009db0:	000b883a 	mov	r5,zero
10009db4:	00092140 	call	10009214 <_Balloc>
10009db8:	00c00044 	movi	r3,1
10009dbc:	10c00415 	stw	r3,16(r2)
10009dc0:	10000515 	stw	zero,20(r2)
10009dc4:	003ff206 	br	10009d90 <__alt_data_end+0xf8009d90>
10009dc8:	8023883a 	mov	r17,r16
10009dcc:	0029883a 	mov	r20,zero
10009dd0:	4021883a 	mov	r16,r8
10009dd4:	003fad06 	br	10009c8c <__alt_data_end+0xf8009c8c>
10009dd8:	9005883a 	mov	r2,r18
10009ddc:	94400504 	addi	r17,r18,20
10009de0:	9c000504 	addi	r16,r19,20
10009de4:	9825883a 	mov	r18,r19
10009de8:	05000044 	movi	r20,1
10009dec:	1027883a 	mov	r19,r2
10009df0:	003fa606 	br	10009c8c <__alt_data_end+0xf8009c8c>

10009df4 <__ulp>:
10009df4:	295ffc2c 	andhi	r5,r5,32752
10009df8:	00bf3034 	movhi	r2,64704
10009dfc:	2887883a 	add	r3,r5,r2
10009e00:	00c0020e 	bge	zero,r3,10009e0c <__ulp+0x18>
10009e04:	0005883a 	mov	r2,zero
10009e08:	f800283a 	ret
10009e0c:	00c7c83a 	sub	r3,zero,r3
10009e10:	1807d53a 	srai	r3,r3,20
10009e14:	008004c4 	movi	r2,19
10009e18:	10c00b0e 	bge	r2,r3,10009e48 <__ulp+0x54>
10009e1c:	18bffb04 	addi	r2,r3,-20
10009e20:	01000784 	movi	r4,30
10009e24:	0007883a 	mov	r3,zero
10009e28:	20800516 	blt	r4,r2,10009e40 <__ulp+0x4c>
10009e2c:	010007c4 	movi	r4,31
10009e30:	2089c83a 	sub	r4,r4,r2
10009e34:	00800044 	movi	r2,1
10009e38:	1104983a 	sll	r2,r2,r4
10009e3c:	f800283a 	ret
10009e40:	00800044 	movi	r2,1
10009e44:	f800283a 	ret
10009e48:	01400234 	movhi	r5,8
10009e4c:	28c7d83a 	sra	r3,r5,r3
10009e50:	0005883a 	mov	r2,zero
10009e54:	f800283a 	ret

10009e58 <__b2d>:
10009e58:	defffa04 	addi	sp,sp,-24
10009e5c:	dc000015 	stw	r16,0(sp)
10009e60:	24000417 	ldw	r16,16(r4)
10009e64:	dc400115 	stw	r17,4(sp)
10009e68:	24400504 	addi	r17,r4,20
10009e6c:	8421883a 	add	r16,r16,r16
10009e70:	8421883a 	add	r16,r16,r16
10009e74:	8c21883a 	add	r16,r17,r16
10009e78:	dc800215 	stw	r18,8(sp)
10009e7c:	84bfff17 	ldw	r18,-4(r16)
10009e80:	dd000415 	stw	r20,16(sp)
10009e84:	dcc00315 	stw	r19,12(sp)
10009e88:	9009883a 	mov	r4,r18
10009e8c:	2829883a 	mov	r20,r5
10009e90:	dfc00515 	stw	ra,20(sp)
10009e94:	00095300 	call	10009530 <__hi0bits>
10009e98:	00c00804 	movi	r3,32
10009e9c:	1889c83a 	sub	r4,r3,r2
10009ea0:	a1000015 	stw	r4,0(r20)
10009ea4:	01000284 	movi	r4,10
10009ea8:	84ffff04 	addi	r19,r16,-4
10009eac:	20801216 	blt	r4,r2,10009ef8 <__b2d+0xa0>
10009eb0:	018002c4 	movi	r6,11
10009eb4:	308dc83a 	sub	r6,r6,r2
10009eb8:	9186d83a 	srl	r3,r18,r6
10009ebc:	18cffc34 	orhi	r3,r3,16368
10009ec0:	8cc0212e 	bgeu	r17,r19,10009f48 <__b2d+0xf0>
10009ec4:	813ffe17 	ldw	r4,-8(r16)
10009ec8:	218cd83a 	srl	r6,r4,r6
10009ecc:	10800544 	addi	r2,r2,21
10009ed0:	9084983a 	sll	r2,r18,r2
10009ed4:	1184b03a 	or	r2,r2,r6
10009ed8:	dfc00517 	ldw	ra,20(sp)
10009edc:	dd000417 	ldw	r20,16(sp)
10009ee0:	dcc00317 	ldw	r19,12(sp)
10009ee4:	dc800217 	ldw	r18,8(sp)
10009ee8:	dc400117 	ldw	r17,4(sp)
10009eec:	dc000017 	ldw	r16,0(sp)
10009ef0:	dec00604 	addi	sp,sp,24
10009ef4:	f800283a 	ret
10009ef8:	8cc00f2e 	bgeu	r17,r19,10009f38 <__b2d+0xe0>
10009efc:	117ffd44 	addi	r5,r2,-11
10009f00:	80bffe17 	ldw	r2,-8(r16)
10009f04:	28000e26 	beq	r5,zero,10009f40 <__b2d+0xe8>
10009f08:	1949c83a 	sub	r4,r3,r5
10009f0c:	9164983a 	sll	r18,r18,r5
10009f10:	1106d83a 	srl	r3,r2,r4
10009f14:	81bffe04 	addi	r6,r16,-8
10009f18:	948ffc34 	orhi	r18,r18,16368
10009f1c:	90c6b03a 	or	r3,r18,r3
10009f20:	89800e2e 	bgeu	r17,r6,10009f5c <__b2d+0x104>
10009f24:	81bffd17 	ldw	r6,-12(r16)
10009f28:	1144983a 	sll	r2,r2,r5
10009f2c:	310ad83a 	srl	r5,r6,r4
10009f30:	2884b03a 	or	r2,r5,r2
10009f34:	003fe806 	br	10009ed8 <__alt_data_end+0xf8009ed8>
10009f38:	10bffd44 	addi	r2,r2,-11
10009f3c:	1000041e 	bne	r2,zero,10009f50 <__b2d+0xf8>
10009f40:	90cffc34 	orhi	r3,r18,16368
10009f44:	003fe406 	br	10009ed8 <__alt_data_end+0xf8009ed8>
10009f48:	000d883a 	mov	r6,zero
10009f4c:	003fdf06 	br	10009ecc <__alt_data_end+0xf8009ecc>
10009f50:	90a4983a 	sll	r18,r18,r2
10009f54:	0005883a 	mov	r2,zero
10009f58:	003ff906 	br	10009f40 <__alt_data_end+0xf8009f40>
10009f5c:	1144983a 	sll	r2,r2,r5
10009f60:	003fdd06 	br	10009ed8 <__alt_data_end+0xf8009ed8>

10009f64 <__d2b>:
10009f64:	defff804 	addi	sp,sp,-32
10009f68:	dc000215 	stw	r16,8(sp)
10009f6c:	3021883a 	mov	r16,r6
10009f70:	dc400315 	stw	r17,12(sp)
10009f74:	8022907a 	slli	r17,r16,1
10009f78:	dd000615 	stw	r20,24(sp)
10009f7c:	2829883a 	mov	r20,r5
10009f80:	01400044 	movi	r5,1
10009f84:	dcc00515 	stw	r19,20(sp)
10009f88:	dc800415 	stw	r18,16(sp)
10009f8c:	dfc00715 	stw	ra,28(sp)
10009f90:	3825883a 	mov	r18,r7
10009f94:	8822d57a 	srli	r17,r17,21
10009f98:	00092140 	call	10009214 <_Balloc>
10009f9c:	1027883a 	mov	r19,r2
10009fa0:	00800434 	movhi	r2,16
10009fa4:	10bfffc4 	addi	r2,r2,-1
10009fa8:	808c703a 	and	r6,r16,r2
10009fac:	88000126 	beq	r17,zero,10009fb4 <__d2b+0x50>
10009fb0:	31800434 	orhi	r6,r6,16
10009fb4:	d9800015 	stw	r6,0(sp)
10009fb8:	a0002426 	beq	r20,zero,1000a04c <__d2b+0xe8>
10009fbc:	d9000104 	addi	r4,sp,4
10009fc0:	dd000115 	stw	r20,4(sp)
10009fc4:	00095980 	call	10009598 <__lo0bits>
10009fc8:	d8c00017 	ldw	r3,0(sp)
10009fcc:	10002f1e 	bne	r2,zero,1000a08c <__d2b+0x128>
10009fd0:	d9000117 	ldw	r4,4(sp)
10009fd4:	99000515 	stw	r4,20(r19)
10009fd8:	1821003a 	cmpeq	r16,r3,zero
10009fdc:	01000084 	movi	r4,2
10009fe0:	2421c83a 	sub	r16,r4,r16
10009fe4:	98c00615 	stw	r3,24(r19)
10009fe8:	9c000415 	stw	r16,16(r19)
10009fec:	88001f1e 	bne	r17,zero,1000a06c <__d2b+0x108>
10009ff0:	10bef384 	addi	r2,r2,-1074
10009ff4:	90800015 	stw	r2,0(r18)
10009ff8:	00900034 	movhi	r2,16384
10009ffc:	10bfffc4 	addi	r2,r2,-1
1000a000:	8085883a 	add	r2,r16,r2
1000a004:	1085883a 	add	r2,r2,r2
1000a008:	1085883a 	add	r2,r2,r2
1000a00c:	9885883a 	add	r2,r19,r2
1000a010:	11000517 	ldw	r4,20(r2)
1000a014:	8020917a 	slli	r16,r16,5
1000a018:	00095300 	call	10009530 <__hi0bits>
1000a01c:	d8c00817 	ldw	r3,32(sp)
1000a020:	8085c83a 	sub	r2,r16,r2
1000a024:	18800015 	stw	r2,0(r3)
1000a028:	9805883a 	mov	r2,r19
1000a02c:	dfc00717 	ldw	ra,28(sp)
1000a030:	dd000617 	ldw	r20,24(sp)
1000a034:	dcc00517 	ldw	r19,20(sp)
1000a038:	dc800417 	ldw	r18,16(sp)
1000a03c:	dc400317 	ldw	r17,12(sp)
1000a040:	dc000217 	ldw	r16,8(sp)
1000a044:	dec00804 	addi	sp,sp,32
1000a048:	f800283a 	ret
1000a04c:	d809883a 	mov	r4,sp
1000a050:	00095980 	call	10009598 <__lo0bits>
1000a054:	d8c00017 	ldw	r3,0(sp)
1000a058:	04000044 	movi	r16,1
1000a05c:	9c000415 	stw	r16,16(r19)
1000a060:	98c00515 	stw	r3,20(r19)
1000a064:	10800804 	addi	r2,r2,32
1000a068:	883fe126 	beq	r17,zero,10009ff0 <__alt_data_end+0xf8009ff0>
1000a06c:	00c00d44 	movi	r3,53
1000a070:	8c7ef344 	addi	r17,r17,-1075
1000a074:	88a3883a 	add	r17,r17,r2
1000a078:	1885c83a 	sub	r2,r3,r2
1000a07c:	d8c00817 	ldw	r3,32(sp)
1000a080:	94400015 	stw	r17,0(r18)
1000a084:	18800015 	stw	r2,0(r3)
1000a088:	003fe706 	br	1000a028 <__alt_data_end+0xf800a028>
1000a08c:	01000804 	movi	r4,32
1000a090:	2089c83a 	sub	r4,r4,r2
1000a094:	1908983a 	sll	r4,r3,r4
1000a098:	d9400117 	ldw	r5,4(sp)
1000a09c:	1886d83a 	srl	r3,r3,r2
1000a0a0:	2148b03a 	or	r4,r4,r5
1000a0a4:	99000515 	stw	r4,20(r19)
1000a0a8:	d8c00015 	stw	r3,0(sp)
1000a0ac:	003fca06 	br	10009fd8 <__alt_data_end+0xf8009fd8>

1000a0b0 <__ratio>:
1000a0b0:	defff904 	addi	sp,sp,-28
1000a0b4:	dc400315 	stw	r17,12(sp)
1000a0b8:	2823883a 	mov	r17,r5
1000a0bc:	d9400104 	addi	r5,sp,4
1000a0c0:	dfc00615 	stw	ra,24(sp)
1000a0c4:	dcc00515 	stw	r19,20(sp)
1000a0c8:	dc800415 	stw	r18,16(sp)
1000a0cc:	2027883a 	mov	r19,r4
1000a0d0:	dc000215 	stw	r16,8(sp)
1000a0d4:	0009e580 	call	10009e58 <__b2d>
1000a0d8:	d80b883a 	mov	r5,sp
1000a0dc:	8809883a 	mov	r4,r17
1000a0e0:	1025883a 	mov	r18,r2
1000a0e4:	1821883a 	mov	r16,r3
1000a0e8:	0009e580 	call	10009e58 <__b2d>
1000a0ec:	8a000417 	ldw	r8,16(r17)
1000a0f0:	99000417 	ldw	r4,16(r19)
1000a0f4:	d9400117 	ldw	r5,4(sp)
1000a0f8:	2209c83a 	sub	r4,r4,r8
1000a0fc:	2010917a 	slli	r8,r4,5
1000a100:	d9000017 	ldw	r4,0(sp)
1000a104:	2909c83a 	sub	r4,r5,r4
1000a108:	4109883a 	add	r4,r8,r4
1000a10c:	01000e0e 	bge	zero,r4,1000a148 <__ratio+0x98>
1000a110:	2008953a 	slli	r4,r4,20
1000a114:	2421883a 	add	r16,r4,r16
1000a118:	100d883a 	mov	r6,r2
1000a11c:	180f883a 	mov	r7,r3
1000a120:	9009883a 	mov	r4,r18
1000a124:	800b883a 	mov	r5,r16
1000a128:	000da700 	call	1000da70 <__divdf3>
1000a12c:	dfc00617 	ldw	ra,24(sp)
1000a130:	dcc00517 	ldw	r19,20(sp)
1000a134:	dc800417 	ldw	r18,16(sp)
1000a138:	dc400317 	ldw	r17,12(sp)
1000a13c:	dc000217 	ldw	r16,8(sp)
1000a140:	dec00704 	addi	sp,sp,28
1000a144:	f800283a 	ret
1000a148:	2008953a 	slli	r4,r4,20
1000a14c:	1907c83a 	sub	r3,r3,r4
1000a150:	003ff106 	br	1000a118 <__alt_data_end+0xf800a118>

1000a154 <_mprec_log10>:
1000a154:	defffe04 	addi	sp,sp,-8
1000a158:	dc000015 	stw	r16,0(sp)
1000a15c:	dfc00115 	stw	ra,4(sp)
1000a160:	008005c4 	movi	r2,23
1000a164:	2021883a 	mov	r16,r4
1000a168:	11000d0e 	bge	r2,r4,1000a1a0 <_mprec_log10+0x4c>
1000a16c:	0005883a 	mov	r2,zero
1000a170:	00cffc34 	movhi	r3,16368
1000a174:	843fffc4 	addi	r16,r16,-1
1000a178:	000d883a 	mov	r6,zero
1000a17c:	01d00934 	movhi	r7,16420
1000a180:	1009883a 	mov	r4,r2
1000a184:	180b883a 	mov	r5,r3
1000a188:	000e6980 	call	1000e698 <__muldf3>
1000a18c:	803ff91e 	bne	r16,zero,1000a174 <__alt_data_end+0xf800a174>
1000a190:	dfc00117 	ldw	ra,4(sp)
1000a194:	dc000017 	ldw	r16,0(sp)
1000a198:	dec00204 	addi	sp,sp,8
1000a19c:	f800283a 	ret
1000a1a0:	202090fa 	slli	r16,r4,3
1000a1a4:	00840074 	movhi	r2,4097
1000a1a8:	108a0404 	addi	r2,r2,10256
1000a1ac:	1421883a 	add	r16,r2,r16
1000a1b0:	80800017 	ldw	r2,0(r16)
1000a1b4:	80c00117 	ldw	r3,4(r16)
1000a1b8:	dfc00117 	ldw	ra,4(sp)
1000a1bc:	dc000017 	ldw	r16,0(sp)
1000a1c0:	dec00204 	addi	sp,sp,8
1000a1c4:	f800283a 	ret

1000a1c8 <__copybits>:
1000a1c8:	297fffc4 	addi	r5,r5,-1
1000a1cc:	280fd17a 	srai	r7,r5,5
1000a1d0:	30c00417 	ldw	r3,16(r6)
1000a1d4:	30800504 	addi	r2,r6,20
1000a1d8:	39c00044 	addi	r7,r7,1
1000a1dc:	18c7883a 	add	r3,r3,r3
1000a1e0:	39cf883a 	add	r7,r7,r7
1000a1e4:	18c7883a 	add	r3,r3,r3
1000a1e8:	39cf883a 	add	r7,r7,r7
1000a1ec:	10c7883a 	add	r3,r2,r3
1000a1f0:	21cf883a 	add	r7,r4,r7
1000a1f4:	10c00d2e 	bgeu	r2,r3,1000a22c <__copybits+0x64>
1000a1f8:	200b883a 	mov	r5,r4
1000a1fc:	12000017 	ldw	r8,0(r2)
1000a200:	29400104 	addi	r5,r5,4
1000a204:	10800104 	addi	r2,r2,4
1000a208:	2a3fff15 	stw	r8,-4(r5)
1000a20c:	10fffb36 	bltu	r2,r3,1000a1fc <__alt_data_end+0xf800a1fc>
1000a210:	1985c83a 	sub	r2,r3,r6
1000a214:	10bffac4 	addi	r2,r2,-21
1000a218:	1004d0ba 	srli	r2,r2,2
1000a21c:	10800044 	addi	r2,r2,1
1000a220:	1085883a 	add	r2,r2,r2
1000a224:	1085883a 	add	r2,r2,r2
1000a228:	2089883a 	add	r4,r4,r2
1000a22c:	21c0032e 	bgeu	r4,r7,1000a23c <__copybits+0x74>
1000a230:	20000015 	stw	zero,0(r4)
1000a234:	21000104 	addi	r4,r4,4
1000a238:	21fffd36 	bltu	r4,r7,1000a230 <__alt_data_end+0xf800a230>
1000a23c:	f800283a 	ret

1000a240 <__any_on>:
1000a240:	20c00417 	ldw	r3,16(r4)
1000a244:	2805d17a 	srai	r2,r5,5
1000a248:	21000504 	addi	r4,r4,20
1000a24c:	18800d0e 	bge	r3,r2,1000a284 <__any_on+0x44>
1000a250:	18c7883a 	add	r3,r3,r3
1000a254:	18c7883a 	add	r3,r3,r3
1000a258:	20c7883a 	add	r3,r4,r3
1000a25c:	20c0192e 	bgeu	r4,r3,1000a2c4 <__any_on+0x84>
1000a260:	18bfff17 	ldw	r2,-4(r3)
1000a264:	18ffff04 	addi	r3,r3,-4
1000a268:	1000041e 	bne	r2,zero,1000a27c <__any_on+0x3c>
1000a26c:	20c0142e 	bgeu	r4,r3,1000a2c0 <__any_on+0x80>
1000a270:	18ffff04 	addi	r3,r3,-4
1000a274:	19400017 	ldw	r5,0(r3)
1000a278:	283ffc26 	beq	r5,zero,1000a26c <__alt_data_end+0xf800a26c>
1000a27c:	00800044 	movi	r2,1
1000a280:	f800283a 	ret
1000a284:	10c00a0e 	bge	r2,r3,1000a2b0 <__any_on+0x70>
1000a288:	1085883a 	add	r2,r2,r2
1000a28c:	1085883a 	add	r2,r2,r2
1000a290:	294007cc 	andi	r5,r5,31
1000a294:	2087883a 	add	r3,r4,r2
1000a298:	283ff026 	beq	r5,zero,1000a25c <__alt_data_end+0xf800a25c>
1000a29c:	19800017 	ldw	r6,0(r3)
1000a2a0:	3144d83a 	srl	r2,r6,r5
1000a2a4:	114a983a 	sll	r5,r2,r5
1000a2a8:	317ff41e 	bne	r6,r5,1000a27c <__alt_data_end+0xf800a27c>
1000a2ac:	003feb06 	br	1000a25c <__alt_data_end+0xf800a25c>
1000a2b0:	1085883a 	add	r2,r2,r2
1000a2b4:	1085883a 	add	r2,r2,r2
1000a2b8:	2087883a 	add	r3,r4,r2
1000a2bc:	003fe706 	br	1000a25c <__alt_data_end+0xf800a25c>
1000a2c0:	f800283a 	ret
1000a2c4:	0005883a 	mov	r2,zero
1000a2c8:	f800283a 	ret

1000a2cc <_putc_r>:
1000a2cc:	defffc04 	addi	sp,sp,-16
1000a2d0:	dc000215 	stw	r16,8(sp)
1000a2d4:	dfc00315 	stw	ra,12(sp)
1000a2d8:	2021883a 	mov	r16,r4
1000a2dc:	20000226 	beq	r4,zero,1000a2e8 <_putc_r+0x1c>
1000a2e0:	20800e17 	ldw	r2,56(r4)
1000a2e4:	10001b26 	beq	r2,zero,1000a354 <_putc_r+0x88>
1000a2e8:	30800217 	ldw	r2,8(r6)
1000a2ec:	10bfffc4 	addi	r2,r2,-1
1000a2f0:	30800215 	stw	r2,8(r6)
1000a2f4:	10000a16 	blt	r2,zero,1000a320 <_putc_r+0x54>
1000a2f8:	30800017 	ldw	r2,0(r6)
1000a2fc:	11400005 	stb	r5,0(r2)
1000a300:	30800017 	ldw	r2,0(r6)
1000a304:	10c00044 	addi	r3,r2,1
1000a308:	30c00015 	stw	r3,0(r6)
1000a30c:	10800003 	ldbu	r2,0(r2)
1000a310:	dfc00317 	ldw	ra,12(sp)
1000a314:	dc000217 	ldw	r16,8(sp)
1000a318:	dec00404 	addi	sp,sp,16
1000a31c:	f800283a 	ret
1000a320:	30c00617 	ldw	r3,24(r6)
1000a324:	10c00616 	blt	r2,r3,1000a340 <_putc_r+0x74>
1000a328:	30800017 	ldw	r2,0(r6)
1000a32c:	00c00284 	movi	r3,10
1000a330:	11400005 	stb	r5,0(r2)
1000a334:	30800017 	ldw	r2,0(r6)
1000a338:	11400003 	ldbu	r5,0(r2)
1000a33c:	28fff11e 	bne	r5,r3,1000a304 <__alt_data_end+0xf800a304>
1000a340:	8009883a 	mov	r4,r16
1000a344:	dfc00317 	ldw	ra,12(sp)
1000a348:	dc000217 	ldw	r16,8(sp)
1000a34c:	dec00404 	addi	sp,sp,16
1000a350:	000bfe01 	jmpi	1000bfe0 <__swbuf_r>
1000a354:	d9400015 	stw	r5,0(sp)
1000a358:	d9800115 	stw	r6,4(sp)
1000a35c:	0001fcc0 	call	10001fcc <__sinit>
1000a360:	d9800117 	ldw	r6,4(sp)
1000a364:	d9400017 	ldw	r5,0(sp)
1000a368:	003fdf06 	br	1000a2e8 <__alt_data_end+0xf800a2e8>

1000a36c <putc>:
1000a36c:	00840074 	movhi	r2,4097
1000a370:	defffc04 	addi	sp,sp,-16
1000a374:	10915e04 	addi	r2,r2,17784
1000a378:	dc000115 	stw	r16,4(sp)
1000a37c:	14000017 	ldw	r16,0(r2)
1000a380:	dc400215 	stw	r17,8(sp)
1000a384:	dfc00315 	stw	ra,12(sp)
1000a388:	2023883a 	mov	r17,r4
1000a38c:	80000226 	beq	r16,zero,1000a398 <putc+0x2c>
1000a390:	80800e17 	ldw	r2,56(r16)
1000a394:	10001a26 	beq	r2,zero,1000a400 <putc+0x94>
1000a398:	28800217 	ldw	r2,8(r5)
1000a39c:	10bfffc4 	addi	r2,r2,-1
1000a3a0:	28800215 	stw	r2,8(r5)
1000a3a4:	10000b16 	blt	r2,zero,1000a3d4 <putc+0x68>
1000a3a8:	28800017 	ldw	r2,0(r5)
1000a3ac:	14400005 	stb	r17,0(r2)
1000a3b0:	28800017 	ldw	r2,0(r5)
1000a3b4:	10c00044 	addi	r3,r2,1
1000a3b8:	28c00015 	stw	r3,0(r5)
1000a3bc:	10800003 	ldbu	r2,0(r2)
1000a3c0:	dfc00317 	ldw	ra,12(sp)
1000a3c4:	dc400217 	ldw	r17,8(sp)
1000a3c8:	dc000117 	ldw	r16,4(sp)
1000a3cc:	dec00404 	addi	sp,sp,16
1000a3d0:	f800283a 	ret
1000a3d4:	28c00617 	ldw	r3,24(r5)
1000a3d8:	10c00e16 	blt	r2,r3,1000a414 <putc+0xa8>
1000a3dc:	28800017 	ldw	r2,0(r5)
1000a3e0:	01000284 	movi	r4,10
1000a3e4:	14400005 	stb	r17,0(r2)
1000a3e8:	28800017 	ldw	r2,0(r5)
1000a3ec:	10c00003 	ldbu	r3,0(r2)
1000a3f0:	193ff01e 	bne	r3,r4,1000a3b4 <__alt_data_end+0xf800a3b4>
1000a3f4:	280d883a 	mov	r6,r5
1000a3f8:	180b883a 	mov	r5,r3
1000a3fc:	00000706 	br	1000a41c <putc+0xb0>
1000a400:	8009883a 	mov	r4,r16
1000a404:	d9400015 	stw	r5,0(sp)
1000a408:	0001fcc0 	call	10001fcc <__sinit>
1000a40c:	d9400017 	ldw	r5,0(sp)
1000a410:	003fe106 	br	1000a398 <__alt_data_end+0xf800a398>
1000a414:	280d883a 	mov	r6,r5
1000a418:	880b883a 	mov	r5,r17
1000a41c:	8009883a 	mov	r4,r16
1000a420:	dfc00317 	ldw	ra,12(sp)
1000a424:	dc400217 	ldw	r17,8(sp)
1000a428:	dc000117 	ldw	r16,4(sp)
1000a42c:	dec00404 	addi	sp,sp,16
1000a430:	000bfe01 	jmpi	1000bfe0 <__swbuf_r>

1000a434 <_read_r>:
1000a434:	defffd04 	addi	sp,sp,-12
1000a438:	2805883a 	mov	r2,r5
1000a43c:	dc000015 	stw	r16,0(sp)
1000a440:	04040074 	movhi	r16,4097
1000a444:	dc400115 	stw	r17,4(sp)
1000a448:	300b883a 	mov	r5,r6
1000a44c:	84187104 	addi	r16,r16,25028
1000a450:	2023883a 	mov	r17,r4
1000a454:	380d883a 	mov	r6,r7
1000a458:	1009883a 	mov	r4,r2
1000a45c:	dfc00215 	stw	ra,8(sp)
1000a460:	80000015 	stw	zero,0(r16)
1000a464:	00009100 	call	10000910 <read>
1000a468:	00ffffc4 	movi	r3,-1
1000a46c:	10c00526 	beq	r2,r3,1000a484 <_read_r+0x50>
1000a470:	dfc00217 	ldw	ra,8(sp)
1000a474:	dc400117 	ldw	r17,4(sp)
1000a478:	dc000017 	ldw	r16,0(sp)
1000a47c:	dec00304 	addi	sp,sp,12
1000a480:	f800283a 	ret
1000a484:	80c00017 	ldw	r3,0(r16)
1000a488:	183ff926 	beq	r3,zero,1000a470 <__alt_data_end+0xf800a470>
1000a48c:	88c00015 	stw	r3,0(r17)
1000a490:	003ff706 	br	1000a470 <__alt_data_end+0xf800a470>

1000a494 <__fpclassifyd>:
1000a494:	00a00034 	movhi	r2,32768
1000a498:	10bfffc4 	addi	r2,r2,-1
1000a49c:	2884703a 	and	r2,r5,r2
1000a4a0:	10000726 	beq	r2,zero,1000a4c0 <__fpclassifyd+0x2c>
1000a4a4:	00fffc34 	movhi	r3,65520
1000a4a8:	019ff834 	movhi	r6,32736
1000a4ac:	28c7883a 	add	r3,r5,r3
1000a4b0:	31bfffc4 	addi	r6,r6,-1
1000a4b4:	30c00536 	bltu	r6,r3,1000a4cc <__fpclassifyd+0x38>
1000a4b8:	00800104 	movi	r2,4
1000a4bc:	f800283a 	ret
1000a4c0:	2000021e 	bne	r4,zero,1000a4cc <__fpclassifyd+0x38>
1000a4c4:	00800084 	movi	r2,2
1000a4c8:	f800283a 	ret
1000a4cc:	00dffc34 	movhi	r3,32752
1000a4d0:	019ff834 	movhi	r6,32736
1000a4d4:	28cb883a 	add	r5,r5,r3
1000a4d8:	31bfffc4 	addi	r6,r6,-1
1000a4dc:	317ff62e 	bgeu	r6,r5,1000a4b8 <__alt_data_end+0xf800a4b8>
1000a4e0:	01400434 	movhi	r5,16
1000a4e4:	297fffc4 	addi	r5,r5,-1
1000a4e8:	28800236 	bltu	r5,r2,1000a4f4 <__fpclassifyd+0x60>
1000a4ec:	008000c4 	movi	r2,3
1000a4f0:	f800283a 	ret
1000a4f4:	10c00226 	beq	r2,r3,1000a500 <__fpclassifyd+0x6c>
1000a4f8:	0005883a 	mov	r2,zero
1000a4fc:	f800283a 	ret
1000a500:	2005003a 	cmpeq	r2,r4,zero
1000a504:	f800283a 	ret

1000a508 <_init_signal_r>:
1000a508:	2080b717 	ldw	r2,732(r4)
1000a50c:	10000226 	beq	r2,zero,1000a518 <_init_signal_r+0x10>
1000a510:	0005883a 	mov	r2,zero
1000a514:	f800283a 	ret
1000a518:	defffe04 	addi	sp,sp,-8
1000a51c:	01402004 	movi	r5,128
1000a520:	dc000015 	stw	r16,0(sp)
1000a524:	dfc00115 	stw	ra,4(sp)
1000a528:	2021883a 	mov	r16,r4
1000a52c:	00032e40 	call	100032e4 <_malloc_r>
1000a530:	8080b715 	stw	r2,732(r16)
1000a534:	10000d26 	beq	r2,zero,1000a56c <_init_signal_r+0x64>
1000a538:	0007883a 	mov	r3,zero
1000a53c:	01002004 	movi	r4,128
1000a540:	00000106 	br	1000a548 <_init_signal_r+0x40>
1000a544:	8080b717 	ldw	r2,732(r16)
1000a548:	10c5883a 	add	r2,r2,r3
1000a54c:	10000015 	stw	zero,0(r2)
1000a550:	18c00104 	addi	r3,r3,4
1000a554:	193ffb1e 	bne	r3,r4,1000a544 <__alt_data_end+0xf800a544>
1000a558:	0005883a 	mov	r2,zero
1000a55c:	dfc00117 	ldw	ra,4(sp)
1000a560:	dc000017 	ldw	r16,0(sp)
1000a564:	dec00204 	addi	sp,sp,8
1000a568:	f800283a 	ret
1000a56c:	00bfffc4 	movi	r2,-1
1000a570:	003ffa06 	br	1000a55c <__alt_data_end+0xf800a55c>

1000a574 <_signal_r>:
1000a574:	00c007c4 	movi	r3,31
1000a578:	19401536 	bltu	r3,r5,1000a5d0 <_signal_r+0x5c>
1000a57c:	2080b717 	ldw	r2,732(r4)
1000a580:	defffc04 	addi	sp,sp,-16
1000a584:	dc800215 	stw	r18,8(sp)
1000a588:	dc400115 	stw	r17,4(sp)
1000a58c:	dc000015 	stw	r16,0(sp)
1000a590:	dfc00315 	stw	ra,12(sp)
1000a594:	3023883a 	mov	r17,r6
1000a598:	2021883a 	mov	r16,r4
1000a59c:	2825883a 	mov	r18,r5
1000a5a0:	10000f26 	beq	r2,zero,1000a5e0 <_signal_r+0x6c>
1000a5a4:	948b883a 	add	r5,r18,r18
1000a5a8:	294b883a 	add	r5,r5,r5
1000a5ac:	114b883a 	add	r5,r2,r5
1000a5b0:	28800017 	ldw	r2,0(r5)
1000a5b4:	2c400015 	stw	r17,0(r5)
1000a5b8:	dfc00317 	ldw	ra,12(sp)
1000a5bc:	dc800217 	ldw	r18,8(sp)
1000a5c0:	dc400117 	ldw	r17,4(sp)
1000a5c4:	dc000017 	ldw	r16,0(sp)
1000a5c8:	dec00404 	addi	sp,sp,16
1000a5cc:	f800283a 	ret
1000a5d0:	00c00584 	movi	r3,22
1000a5d4:	20c00015 	stw	r3,0(r4)
1000a5d8:	00bfffc4 	movi	r2,-1
1000a5dc:	f800283a 	ret
1000a5e0:	000a5080 	call	1000a508 <_init_signal_r>
1000a5e4:	1000021e 	bne	r2,zero,1000a5f0 <_signal_r+0x7c>
1000a5e8:	8080b717 	ldw	r2,732(r16)
1000a5ec:	003fed06 	br	1000a5a4 <__alt_data_end+0xf800a5a4>
1000a5f0:	00bfffc4 	movi	r2,-1
1000a5f4:	003ff006 	br	1000a5b8 <__alt_data_end+0xf800a5b8>

1000a5f8 <_raise_r>:
1000a5f8:	008007c4 	movi	r2,31
1000a5fc:	11402936 	bltu	r2,r5,1000a6a4 <_raise_r+0xac>
1000a600:	20c0b717 	ldw	r3,732(r4)
1000a604:	defffd04 	addi	sp,sp,-12
1000a608:	dc400115 	stw	r17,4(sp)
1000a60c:	dc000015 	stw	r16,0(sp)
1000a610:	dfc00215 	stw	ra,8(sp)
1000a614:	2021883a 	mov	r16,r4
1000a618:	2823883a 	mov	r17,r5
1000a61c:	18001726 	beq	r3,zero,1000a67c <_raise_r+0x84>
1000a620:	2945883a 	add	r2,r5,r5
1000a624:	1085883a 	add	r2,r2,r2
1000a628:	1887883a 	add	r3,r3,r2
1000a62c:	19800017 	ldw	r6,0(r3)
1000a630:	30001226 	beq	r6,zero,1000a67c <_raise_r+0x84>
1000a634:	00800044 	movi	r2,1
1000a638:	30800e26 	beq	r6,r2,1000a674 <_raise_r+0x7c>
1000a63c:	013fffc4 	movi	r4,-1
1000a640:	31000926 	beq	r6,r4,1000a668 <_raise_r+0x70>
1000a644:	18000015 	stw	zero,0(r3)
1000a648:	2809883a 	mov	r4,r5
1000a64c:	303ee83a 	callr	r6
1000a650:	0005883a 	mov	r2,zero
1000a654:	dfc00217 	ldw	ra,8(sp)
1000a658:	dc400117 	ldw	r17,4(sp)
1000a65c:	dc000017 	ldw	r16,0(sp)
1000a660:	dec00304 	addi	sp,sp,12
1000a664:	f800283a 	ret
1000a668:	00c00584 	movi	r3,22
1000a66c:	80c00015 	stw	r3,0(r16)
1000a670:	003ff806 	br	1000a654 <__alt_data_end+0xf800a654>
1000a674:	0005883a 	mov	r2,zero
1000a678:	003ff606 	br	1000a654 <__alt_data_end+0xf800a654>
1000a67c:	8009883a 	mov	r4,r16
1000a680:	000a8080 	call	1000a808 <_getpid_r>
1000a684:	880d883a 	mov	r6,r17
1000a688:	100b883a 	mov	r5,r2
1000a68c:	8009883a 	mov	r4,r16
1000a690:	dfc00217 	ldw	ra,8(sp)
1000a694:	dc400117 	ldw	r17,4(sp)
1000a698:	dc000017 	ldw	r16,0(sp)
1000a69c:	dec00304 	addi	sp,sp,12
1000a6a0:	000a7ac1 	jmpi	1000a7ac <_kill_r>
1000a6a4:	00800584 	movi	r2,22
1000a6a8:	20800015 	stw	r2,0(r4)
1000a6ac:	00bfffc4 	movi	r2,-1
1000a6b0:	f800283a 	ret

1000a6b4 <__sigtramp_r>:
1000a6b4:	008007c4 	movi	r2,31
1000a6b8:	11402436 	bltu	r2,r5,1000a74c <__sigtramp_r+0x98>
1000a6bc:	20c0b717 	ldw	r3,732(r4)
1000a6c0:	defffd04 	addi	sp,sp,-12
1000a6c4:	dc400115 	stw	r17,4(sp)
1000a6c8:	dc000015 	stw	r16,0(sp)
1000a6cc:	dfc00215 	stw	ra,8(sp)
1000a6d0:	2021883a 	mov	r16,r4
1000a6d4:	2823883a 	mov	r17,r5
1000a6d8:	18001826 	beq	r3,zero,1000a73c <__sigtramp_r+0x88>
1000a6dc:	8c45883a 	add	r2,r17,r17
1000a6e0:	1085883a 	add	r2,r2,r2
1000a6e4:	1885883a 	add	r2,r3,r2
1000a6e8:	10c00017 	ldw	r3,0(r2)
1000a6ec:	18001126 	beq	r3,zero,1000a734 <__sigtramp_r+0x80>
1000a6f0:	013fffc4 	movi	r4,-1
1000a6f4:	19000d26 	beq	r3,r4,1000a72c <__sigtramp_r+0x78>
1000a6f8:	01000044 	movi	r4,1
1000a6fc:	19000926 	beq	r3,r4,1000a724 <__sigtramp_r+0x70>
1000a700:	10000015 	stw	zero,0(r2)
1000a704:	8809883a 	mov	r4,r17
1000a708:	183ee83a 	callr	r3
1000a70c:	0005883a 	mov	r2,zero
1000a710:	dfc00217 	ldw	ra,8(sp)
1000a714:	dc400117 	ldw	r17,4(sp)
1000a718:	dc000017 	ldw	r16,0(sp)
1000a71c:	dec00304 	addi	sp,sp,12
1000a720:	f800283a 	ret
1000a724:	008000c4 	movi	r2,3
1000a728:	003ff906 	br	1000a710 <__alt_data_end+0xf800a710>
1000a72c:	00800084 	movi	r2,2
1000a730:	003ff706 	br	1000a710 <__alt_data_end+0xf800a710>
1000a734:	00800044 	movi	r2,1
1000a738:	003ff506 	br	1000a710 <__alt_data_end+0xf800a710>
1000a73c:	000a5080 	call	1000a508 <_init_signal_r>
1000a740:	1000041e 	bne	r2,zero,1000a754 <__sigtramp_r+0xa0>
1000a744:	80c0b717 	ldw	r3,732(r16)
1000a748:	003fe406 	br	1000a6dc <__alt_data_end+0xf800a6dc>
1000a74c:	00bfffc4 	movi	r2,-1
1000a750:	f800283a 	ret
1000a754:	00bfffc4 	movi	r2,-1
1000a758:	003fed06 	br	1000a710 <__alt_data_end+0xf800a710>

1000a75c <raise>:
1000a75c:	00840074 	movhi	r2,4097
1000a760:	10915e04 	addi	r2,r2,17784
1000a764:	200b883a 	mov	r5,r4
1000a768:	11000017 	ldw	r4,0(r2)
1000a76c:	000a5f81 	jmpi	1000a5f8 <_raise_r>

1000a770 <signal>:
1000a770:	00840074 	movhi	r2,4097
1000a774:	10915e04 	addi	r2,r2,17784
1000a778:	280d883a 	mov	r6,r5
1000a77c:	200b883a 	mov	r5,r4
1000a780:	11000017 	ldw	r4,0(r2)
1000a784:	000a5741 	jmpi	1000a574 <_signal_r>

1000a788 <_init_signal>:
1000a788:	00840074 	movhi	r2,4097
1000a78c:	10915e04 	addi	r2,r2,17784
1000a790:	11000017 	ldw	r4,0(r2)
1000a794:	000a5081 	jmpi	1000a508 <_init_signal_r>

1000a798 <__sigtramp>:
1000a798:	00840074 	movhi	r2,4097
1000a79c:	10915e04 	addi	r2,r2,17784
1000a7a0:	200b883a 	mov	r5,r4
1000a7a4:	11000017 	ldw	r4,0(r2)
1000a7a8:	000a6b41 	jmpi	1000a6b4 <__sigtramp_r>

1000a7ac <_kill_r>:
1000a7ac:	defffd04 	addi	sp,sp,-12
1000a7b0:	2805883a 	mov	r2,r5
1000a7b4:	dc000015 	stw	r16,0(sp)
1000a7b8:	04040074 	movhi	r16,4097
1000a7bc:	dc400115 	stw	r17,4(sp)
1000a7c0:	84187104 	addi	r16,r16,25028
1000a7c4:	2023883a 	mov	r17,r4
1000a7c8:	300b883a 	mov	r5,r6
1000a7cc:	1009883a 	mov	r4,r2
1000a7d0:	dfc00215 	stw	ra,8(sp)
1000a7d4:	80000015 	stw	zero,0(r16)
1000a7d8:	000fe140 	call	1000fe14 <kill>
1000a7dc:	00ffffc4 	movi	r3,-1
1000a7e0:	10c00526 	beq	r2,r3,1000a7f8 <_kill_r+0x4c>
1000a7e4:	dfc00217 	ldw	ra,8(sp)
1000a7e8:	dc400117 	ldw	r17,4(sp)
1000a7ec:	dc000017 	ldw	r16,0(sp)
1000a7f0:	dec00304 	addi	sp,sp,12
1000a7f4:	f800283a 	ret
1000a7f8:	80c00017 	ldw	r3,0(r16)
1000a7fc:	183ff926 	beq	r3,zero,1000a7e4 <__alt_data_end+0xf800a7e4>
1000a800:	88c00015 	stw	r3,0(r17)
1000a804:	003ff706 	br	1000a7e4 <__alt_data_end+0xf800a7e4>

1000a808 <_getpid_r>:
1000a808:	000fcd01 	jmpi	1000fcd0 <getpid>

1000a80c <strcmp>:
1000a80c:	2144b03a 	or	r2,r4,r5
1000a810:	108000cc 	andi	r2,r2,3
1000a814:	1000171e 	bne	r2,zero,1000a874 <strcmp+0x68>
1000a818:	20800017 	ldw	r2,0(r4)
1000a81c:	28c00017 	ldw	r3,0(r5)
1000a820:	10c0141e 	bne	r2,r3,1000a874 <strcmp+0x68>
1000a824:	027fbff4 	movhi	r9,65279
1000a828:	4a7fbfc4 	addi	r9,r9,-257
1000a82c:	0086303a 	nor	r3,zero,r2
1000a830:	02202074 	movhi	r8,32897
1000a834:	1245883a 	add	r2,r2,r9
1000a838:	42202004 	addi	r8,r8,-32640
1000a83c:	10c4703a 	and	r2,r2,r3
1000a840:	1204703a 	and	r2,r2,r8
1000a844:	10000226 	beq	r2,zero,1000a850 <strcmp+0x44>
1000a848:	00002306 	br	1000a8d8 <strcmp+0xcc>
1000a84c:	1000221e 	bne	r2,zero,1000a8d8 <strcmp+0xcc>
1000a850:	21000104 	addi	r4,r4,4
1000a854:	20c00017 	ldw	r3,0(r4)
1000a858:	29400104 	addi	r5,r5,4
1000a85c:	29800017 	ldw	r6,0(r5)
1000a860:	1a4f883a 	add	r7,r3,r9
1000a864:	00c4303a 	nor	r2,zero,r3
1000a868:	3884703a 	and	r2,r7,r2
1000a86c:	1204703a 	and	r2,r2,r8
1000a870:	19bff626 	beq	r3,r6,1000a84c <__alt_data_end+0xf800a84c>
1000a874:	20800003 	ldbu	r2,0(r4)
1000a878:	10c03fcc 	andi	r3,r2,255
1000a87c:	18c0201c 	xori	r3,r3,128
1000a880:	18ffe004 	addi	r3,r3,-128
1000a884:	18000c26 	beq	r3,zero,1000a8b8 <strcmp+0xac>
1000a888:	29800007 	ldb	r6,0(r5)
1000a88c:	19800326 	beq	r3,r6,1000a89c <strcmp+0x90>
1000a890:	00001306 	br	1000a8e0 <strcmp+0xd4>
1000a894:	29800007 	ldb	r6,0(r5)
1000a898:	11800b1e 	bne	r2,r6,1000a8c8 <strcmp+0xbc>
1000a89c:	21000044 	addi	r4,r4,1
1000a8a0:	20c00003 	ldbu	r3,0(r4)
1000a8a4:	29400044 	addi	r5,r5,1
1000a8a8:	18803fcc 	andi	r2,r3,255
1000a8ac:	1080201c 	xori	r2,r2,128
1000a8b0:	10bfe004 	addi	r2,r2,-128
1000a8b4:	103ff71e 	bne	r2,zero,1000a894 <__alt_data_end+0xf800a894>
1000a8b8:	0007883a 	mov	r3,zero
1000a8bc:	28800003 	ldbu	r2,0(r5)
1000a8c0:	1885c83a 	sub	r2,r3,r2
1000a8c4:	f800283a 	ret
1000a8c8:	28800003 	ldbu	r2,0(r5)
1000a8cc:	18c03fcc 	andi	r3,r3,255
1000a8d0:	1885c83a 	sub	r2,r3,r2
1000a8d4:	f800283a 	ret
1000a8d8:	0005883a 	mov	r2,zero
1000a8dc:	f800283a 	ret
1000a8e0:	10c03fcc 	andi	r3,r2,255
1000a8e4:	003ff506 	br	1000a8bc <__alt_data_end+0xf800a8bc>

1000a8e8 <__sprint_r.part.0>:
1000a8e8:	28801917 	ldw	r2,100(r5)
1000a8ec:	defff604 	addi	sp,sp,-40
1000a8f0:	dd400515 	stw	r21,20(sp)
1000a8f4:	dfc00915 	stw	ra,36(sp)
1000a8f8:	df000815 	stw	fp,32(sp)
1000a8fc:	ddc00715 	stw	r23,28(sp)
1000a900:	dd800615 	stw	r22,24(sp)
1000a904:	dd000415 	stw	r20,16(sp)
1000a908:	dcc00315 	stw	r19,12(sp)
1000a90c:	dc800215 	stw	r18,8(sp)
1000a910:	dc400115 	stw	r17,4(sp)
1000a914:	dc000015 	stw	r16,0(sp)
1000a918:	1088000c 	andi	r2,r2,8192
1000a91c:	302b883a 	mov	r21,r6
1000a920:	10002e26 	beq	r2,zero,1000a9dc <__sprint_r.part.0+0xf4>
1000a924:	30800217 	ldw	r2,8(r6)
1000a928:	35800017 	ldw	r22,0(r6)
1000a92c:	10002926 	beq	r2,zero,1000a9d4 <__sprint_r.part.0+0xec>
1000a930:	2827883a 	mov	r19,r5
1000a934:	2029883a 	mov	r20,r4
1000a938:	b5c00104 	addi	r23,r22,4
1000a93c:	04bfffc4 	movi	r18,-1
1000a940:	bc400017 	ldw	r17,0(r23)
1000a944:	b4000017 	ldw	r16,0(r22)
1000a948:	0039883a 	mov	fp,zero
1000a94c:	8822d0ba 	srli	r17,r17,2
1000a950:	8800031e 	bne	r17,zero,1000a960 <__sprint_r.part.0+0x78>
1000a954:	00001806 	br	1000a9b8 <__sprint_r.part.0+0xd0>
1000a958:	84000104 	addi	r16,r16,4
1000a95c:	8f001526 	beq	r17,fp,1000a9b4 <__sprint_r.part.0+0xcc>
1000a960:	81400017 	ldw	r5,0(r16)
1000a964:	980d883a 	mov	r6,r19
1000a968:	a009883a 	mov	r4,r20
1000a96c:	000c3780 	call	1000c378 <_fputwc_r>
1000a970:	e7000044 	addi	fp,fp,1
1000a974:	14bff81e 	bne	r2,r18,1000a958 <__alt_data_end+0xf800a958>
1000a978:	9005883a 	mov	r2,r18
1000a97c:	a8000215 	stw	zero,8(r21)
1000a980:	a8000115 	stw	zero,4(r21)
1000a984:	dfc00917 	ldw	ra,36(sp)
1000a988:	df000817 	ldw	fp,32(sp)
1000a98c:	ddc00717 	ldw	r23,28(sp)
1000a990:	dd800617 	ldw	r22,24(sp)
1000a994:	dd400517 	ldw	r21,20(sp)
1000a998:	dd000417 	ldw	r20,16(sp)
1000a99c:	dcc00317 	ldw	r19,12(sp)
1000a9a0:	dc800217 	ldw	r18,8(sp)
1000a9a4:	dc400117 	ldw	r17,4(sp)
1000a9a8:	dc000017 	ldw	r16,0(sp)
1000a9ac:	dec00a04 	addi	sp,sp,40
1000a9b0:	f800283a 	ret
1000a9b4:	a8800217 	ldw	r2,8(r21)
1000a9b8:	8c63883a 	add	r17,r17,r17
1000a9bc:	8c63883a 	add	r17,r17,r17
1000a9c0:	1445c83a 	sub	r2,r2,r17
1000a9c4:	a8800215 	stw	r2,8(r21)
1000a9c8:	b5800204 	addi	r22,r22,8
1000a9cc:	bdc00204 	addi	r23,r23,8
1000a9d0:	103fdb1e 	bne	r2,zero,1000a940 <__alt_data_end+0xf800a940>
1000a9d4:	0005883a 	mov	r2,zero
1000a9d8:	003fe806 	br	1000a97c <__alt_data_end+0xf800a97c>
1000a9dc:	000897c0 	call	1000897c <__sfvwrite_r>
1000a9e0:	003fe606 	br	1000a97c <__alt_data_end+0xf800a97c>

1000a9e4 <__sprint_r>:
1000a9e4:	30c00217 	ldw	r3,8(r6)
1000a9e8:	18000126 	beq	r3,zero,1000a9f0 <__sprint_r+0xc>
1000a9ec:	000a8e81 	jmpi	1000a8e8 <__sprint_r.part.0>
1000a9f0:	30000115 	stw	zero,4(r6)
1000a9f4:	0005883a 	mov	r2,zero
1000a9f8:	f800283a 	ret

1000a9fc <___vfiprintf_internal_r>:
1000a9fc:	deffca04 	addi	sp,sp,-216
1000aa00:	dd403115 	stw	r21,196(sp)
1000aa04:	dfc03515 	stw	ra,212(sp)
1000aa08:	df003415 	stw	fp,208(sp)
1000aa0c:	ddc03315 	stw	r23,204(sp)
1000aa10:	dd803215 	stw	r22,200(sp)
1000aa14:	dd003015 	stw	r20,192(sp)
1000aa18:	dcc02f15 	stw	r19,188(sp)
1000aa1c:	dc802e15 	stw	r18,184(sp)
1000aa20:	dc402d15 	stw	r17,180(sp)
1000aa24:	dc002c15 	stw	r16,176(sp)
1000aa28:	d9002115 	stw	r4,132(sp)
1000aa2c:	d9402015 	stw	r5,128(sp)
1000aa30:	d9c02215 	stw	r7,136(sp)
1000aa34:	302b883a 	mov	r21,r6
1000aa38:	20000226 	beq	r4,zero,1000aa44 <___vfiprintf_internal_r+0x48>
1000aa3c:	20800e17 	ldw	r2,56(r4)
1000aa40:	1000cf26 	beq	r2,zero,1000ad80 <___vfiprintf_internal_r+0x384>
1000aa44:	d8c02017 	ldw	r3,128(sp)
1000aa48:	1880030b 	ldhu	r2,12(r3)
1000aa4c:	10c8000c 	andi	r3,r2,8192
1000aa50:	1800071e 	bne	r3,zero,1000aa70 <___vfiprintf_internal_r+0x74>
1000aa54:	d9402017 	ldw	r5,128(sp)
1000aa58:	00f7ffc4 	movi	r3,-8193
1000aa5c:	10880014 	ori	r2,r2,8192
1000aa60:	29001917 	ldw	r4,100(r5)
1000aa64:	2880030d 	sth	r2,12(r5)
1000aa68:	20c6703a 	and	r3,r4,r3
1000aa6c:	28c01915 	stw	r3,100(r5)
1000aa70:	10c0020c 	andi	r3,r2,8
1000aa74:	1800a526 	beq	r3,zero,1000ad0c <___vfiprintf_internal_r+0x310>
1000aa78:	d9002017 	ldw	r4,128(sp)
1000aa7c:	20c00417 	ldw	r3,16(r4)
1000aa80:	1800a226 	beq	r3,zero,1000ad0c <___vfiprintf_internal_r+0x310>
1000aa84:	1080068c 	andi	r2,r2,26
1000aa88:	00c00284 	movi	r3,10
1000aa8c:	10c0a826 	beq	r2,r3,1000ad30 <___vfiprintf_internal_r+0x334>
1000aa90:	d9001a04 	addi	r4,sp,104
1000aa94:	d94019c4 	addi	r5,sp,103
1000aa98:	04840074 	movhi	r18,4097
1000aa9c:	2145c83a 	sub	r2,r4,r5
1000aaa0:	948a3604 	addi	r18,r18,10456
1000aaa4:	d9001e15 	stw	r4,120(sp)
1000aaa8:	d9401f15 	stw	r5,124(sp)
1000aaac:	dec01a15 	stw	sp,104(sp)
1000aab0:	d8001c15 	stw	zero,112(sp)
1000aab4:	d8001b15 	stw	zero,108(sp)
1000aab8:	d811883a 	mov	r8,sp
1000aabc:	d8002615 	stw	zero,152(sp)
1000aac0:	d8002415 	stw	zero,144(sp)
1000aac4:	d8802815 	stw	r2,160(sp)
1000aac8:	a82d883a 	mov	r22,r21
1000aacc:	b0800007 	ldb	r2,0(r22)
1000aad0:	10040d26 	beq	r2,zero,1000bb08 <___vfiprintf_internal_r+0x110c>
1000aad4:	00c00944 	movi	r3,37
1000aad8:	b029883a 	mov	r20,r22
1000aadc:	10c0021e 	bne	r2,r3,1000aae8 <___vfiprintf_internal_r+0xec>
1000aae0:	00001606 	br	1000ab3c <___vfiprintf_internal_r+0x140>
1000aae4:	10c00326 	beq	r2,r3,1000aaf4 <___vfiprintf_internal_r+0xf8>
1000aae8:	a5000044 	addi	r20,r20,1
1000aaec:	a0800007 	ldb	r2,0(r20)
1000aaf0:	103ffc1e 	bne	r2,zero,1000aae4 <__alt_data_end+0xf800aae4>
1000aaf4:	a5a1c83a 	sub	r16,r20,r22
1000aaf8:	80001026 	beq	r16,zero,1000ab3c <___vfiprintf_internal_r+0x140>
1000aafc:	d8c01c17 	ldw	r3,112(sp)
1000ab00:	d8801b17 	ldw	r2,108(sp)
1000ab04:	45800015 	stw	r22,0(r8)
1000ab08:	80c7883a 	add	r3,r16,r3
1000ab0c:	10800044 	addi	r2,r2,1
1000ab10:	44000115 	stw	r16,4(r8)
1000ab14:	d8c01c15 	stw	r3,112(sp)
1000ab18:	d8801b15 	stw	r2,108(sp)
1000ab1c:	010001c4 	movi	r4,7
1000ab20:	2080750e 	bge	r4,r2,1000acf8 <___vfiprintf_internal_r+0x2fc>
1000ab24:	1803951e 	bne	r3,zero,1000b97c <___vfiprintf_internal_r+0xf80>
1000ab28:	d8c02417 	ldw	r3,144(sp)
1000ab2c:	d8001b15 	stw	zero,108(sp)
1000ab30:	d811883a 	mov	r8,sp
1000ab34:	1c07883a 	add	r3,r3,r16
1000ab38:	d8c02415 	stw	r3,144(sp)
1000ab3c:	a0800007 	ldb	r2,0(r20)
1000ab40:	1002e026 	beq	r2,zero,1000b6c4 <___vfiprintf_internal_r+0xcc8>
1000ab44:	a5800044 	addi	r22,r20,1
1000ab48:	a0c00047 	ldb	r3,1(r20)
1000ab4c:	d8001d85 	stb	zero,118(sp)
1000ab50:	0027883a 	mov	r19,zero
1000ab54:	d8002305 	stb	zero,140(sp)
1000ab58:	043fffc4 	movi	r16,-1
1000ab5c:	d8002515 	stw	zero,148(sp)
1000ab60:	0023883a 	mov	r17,zero
1000ab64:	05001604 	movi	r20,88
1000ab68:	05400244 	movi	r21,9
1000ab6c:	402f883a 	mov	r23,r8
1000ab70:	b5800044 	addi	r22,r22,1
1000ab74:	18bff804 	addi	r2,r3,-32
1000ab78:	a0827736 	bltu	r20,r2,1000b558 <___vfiprintf_internal_r+0xb5c>
1000ab7c:	100490ba 	slli	r2,r2,2
1000ab80:	01040074 	movhi	r4,4097
1000ab84:	212ae504 	addi	r4,r4,-21612
1000ab88:	1105883a 	add	r2,r2,r4
1000ab8c:	10800017 	ldw	r2,0(r2)
1000ab90:	1000683a 	jmp	r2
1000ab94:	1000b258 	cmpnei	zero,r2,713
1000ab98:	1000b558 	cmpnei	zero,r2,725
1000ab9c:	1000b558 	cmpnei	zero,r2,725
1000aba0:	1000b274 	orhi	zero,r2,713
1000aba4:	1000b558 	cmpnei	zero,r2,725
1000aba8:	1000b558 	cmpnei	zero,r2,725
1000abac:	1000b558 	cmpnei	zero,r2,725
1000abb0:	1000b558 	cmpnei	zero,r2,725
1000abb4:	1000b558 	cmpnei	zero,r2,725
1000abb8:	1000b558 	cmpnei	zero,r2,725
1000abbc:	1000b47c 	xorhi	zero,r2,721
1000abc0:	1000b4a0 	cmpeqi	zero,r2,722
1000abc4:	1000b558 	cmpnei	zero,r2,725
1000abc8:	1000ad98 	cmpnei	zero,r2,694
1000abcc:	1000b4b4 	orhi	zero,r2,722
1000abd0:	1000b558 	cmpnei	zero,r2,725
1000abd4:	1000b280 	call	11000b28 <_gp+0xfe45d4>
1000abd8:	1000b28c 	andi	zero,r2,714
1000abdc:	1000b28c 	andi	zero,r2,714
1000abe0:	1000b28c 	andi	zero,r2,714
1000abe4:	1000b28c 	andi	zero,r2,714
1000abe8:	1000b28c 	andi	zero,r2,714
1000abec:	1000b28c 	andi	zero,r2,714
1000abf0:	1000b28c 	andi	zero,r2,714
1000abf4:	1000b28c 	andi	zero,r2,714
1000abf8:	1000b28c 	andi	zero,r2,714
1000abfc:	1000b558 	cmpnei	zero,r2,725
1000ac00:	1000b558 	cmpnei	zero,r2,725
1000ac04:	1000b558 	cmpnei	zero,r2,725
1000ac08:	1000b558 	cmpnei	zero,r2,725
1000ac0c:	1000b558 	cmpnei	zero,r2,725
1000ac10:	1000b558 	cmpnei	zero,r2,725
1000ac14:	1000b558 	cmpnei	zero,r2,725
1000ac18:	1000b558 	cmpnei	zero,r2,725
1000ac1c:	1000b558 	cmpnei	zero,r2,725
1000ac20:	1000b558 	cmpnei	zero,r2,725
1000ac24:	1000b2cc 	andi	zero,r2,715
1000ac28:	1000b558 	cmpnei	zero,r2,725
1000ac2c:	1000b558 	cmpnei	zero,r2,725
1000ac30:	1000b558 	cmpnei	zero,r2,725
1000ac34:	1000b558 	cmpnei	zero,r2,725
1000ac38:	1000b558 	cmpnei	zero,r2,725
1000ac3c:	1000b558 	cmpnei	zero,r2,725
1000ac40:	1000b558 	cmpnei	zero,r2,725
1000ac44:	1000b558 	cmpnei	zero,r2,725
1000ac48:	1000b558 	cmpnei	zero,r2,725
1000ac4c:	1000b558 	cmpnei	zero,r2,725
1000ac50:	1000b308 	cmpgei	zero,r2,716
1000ac54:	1000b558 	cmpnei	zero,r2,725
1000ac58:	1000b558 	cmpnei	zero,r2,725
1000ac5c:	1000b558 	cmpnei	zero,r2,725
1000ac60:	1000b558 	cmpnei	zero,r2,725
1000ac64:	1000b558 	cmpnei	zero,r2,725
1000ac68:	1000b364 	muli	zero,r2,717
1000ac6c:	1000b558 	cmpnei	zero,r2,725
1000ac70:	1000b558 	cmpnei	zero,r2,725
1000ac74:	1000b3d8 	cmpnei	zero,r2,719
1000ac78:	1000b558 	cmpnei	zero,r2,725
1000ac7c:	1000b558 	cmpnei	zero,r2,725
1000ac80:	1000b558 	cmpnei	zero,r2,725
1000ac84:	1000b558 	cmpnei	zero,r2,725
1000ac88:	1000b558 	cmpnei	zero,r2,725
1000ac8c:	1000b558 	cmpnei	zero,r2,725
1000ac90:	1000b558 	cmpnei	zero,r2,725
1000ac94:	1000b558 	cmpnei	zero,r2,725
1000ac98:	1000b558 	cmpnei	zero,r2,725
1000ac9c:	1000b558 	cmpnei	zero,r2,725
1000aca0:	1000b180 	call	11000b18 <_gp+0xfe45c4>
1000aca4:	1000b1b0 	cmpltui	zero,r2,710
1000aca8:	1000b558 	cmpnei	zero,r2,725
1000acac:	1000b558 	cmpnei	zero,r2,725
1000acb0:	1000b558 	cmpnei	zero,r2,725
1000acb4:	1000b500 	call	11000b50 <_gp+0xfe45fc>
1000acb8:	1000b1b0 	cmpltui	zero,r2,710
1000acbc:	1000b558 	cmpnei	zero,r2,725
1000acc0:	1000b558 	cmpnei	zero,r2,725
1000acc4:	1000b058 	cmpnei	zero,r2,705
1000acc8:	1000b558 	cmpnei	zero,r2,725
1000accc:	1000b06c 	andhi	zero,r2,705
1000acd0:	1000b0a4 	muli	zero,r2,706
1000acd4:	1000ada4 	muli	zero,r2,694
1000acd8:	1000b04c 	andi	zero,r2,705
1000acdc:	1000b558 	cmpnei	zero,r2,725
1000ace0:	1000b418 	cmpnei	zero,r2,720
1000ace4:	1000b558 	cmpnei	zero,r2,725
1000ace8:	1000b464 	muli	zero,r2,721
1000acec:	1000b558 	cmpnei	zero,r2,725
1000acf0:	1000b558 	cmpnei	zero,r2,725
1000acf4:	1000b128 	cmpgeui	zero,r2,708
1000acf8:	42000204 	addi	r8,r8,8
1000acfc:	d8c02417 	ldw	r3,144(sp)
1000ad00:	1c07883a 	add	r3,r3,r16
1000ad04:	d8c02415 	stw	r3,144(sp)
1000ad08:	003f8c06 	br	1000ab3c <__alt_data_end+0xf800ab3c>
1000ad0c:	d9402017 	ldw	r5,128(sp)
1000ad10:	d9002117 	ldw	r4,132(sp)
1000ad14:	0006ce00 	call	10006ce0 <__swsetup_r>
1000ad18:	1003c11e 	bne	r2,zero,1000bc20 <___vfiprintf_internal_r+0x1224>
1000ad1c:	d9402017 	ldw	r5,128(sp)
1000ad20:	00c00284 	movi	r3,10
1000ad24:	2880030b 	ldhu	r2,12(r5)
1000ad28:	1080068c 	andi	r2,r2,26
1000ad2c:	10ff581e 	bne	r2,r3,1000aa90 <__alt_data_end+0xf800aa90>
1000ad30:	d8c02017 	ldw	r3,128(sp)
1000ad34:	1880038f 	ldh	r2,14(r3)
1000ad38:	103f5516 	blt	r2,zero,1000aa90 <__alt_data_end+0xf800aa90>
1000ad3c:	d9c02217 	ldw	r7,136(sp)
1000ad40:	d9002117 	ldw	r4,132(sp)
1000ad44:	a80d883a 	mov	r6,r21
1000ad48:	180b883a 	mov	r5,r3
1000ad4c:	000bf240 	call	1000bf24 <__sbprintf>
1000ad50:	dfc03517 	ldw	ra,212(sp)
1000ad54:	df003417 	ldw	fp,208(sp)
1000ad58:	ddc03317 	ldw	r23,204(sp)
1000ad5c:	dd803217 	ldw	r22,200(sp)
1000ad60:	dd403117 	ldw	r21,196(sp)
1000ad64:	dd003017 	ldw	r20,192(sp)
1000ad68:	dcc02f17 	ldw	r19,188(sp)
1000ad6c:	dc802e17 	ldw	r18,184(sp)
1000ad70:	dc402d17 	ldw	r17,180(sp)
1000ad74:	dc002c17 	ldw	r16,176(sp)
1000ad78:	dec03604 	addi	sp,sp,216
1000ad7c:	f800283a 	ret
1000ad80:	0001fcc0 	call	10001fcc <__sinit>
1000ad84:	003f2f06 	br	1000aa44 <__alt_data_end+0xf800aa44>
1000ad88:	d8c02517 	ldw	r3,148(sp)
1000ad8c:	d8802215 	stw	r2,136(sp)
1000ad90:	00c7c83a 	sub	r3,zero,r3
1000ad94:	d8c02515 	stw	r3,148(sp)
1000ad98:	8c400114 	ori	r17,r17,4
1000ad9c:	b0c00007 	ldb	r3,0(r22)
1000ada0:	003f7306 	br	1000ab70 <__alt_data_end+0xf800ab70>
1000ada4:	00800c04 	movi	r2,48
1000ada8:	d9402217 	ldw	r5,136(sp)
1000adac:	d8801d05 	stb	r2,116(sp)
1000adb0:	00801e04 	movi	r2,120
1000adb4:	d8801d45 	stb	r2,117(sp)
1000adb8:	d8001d85 	stb	zero,118(sp)
1000adbc:	b811883a 	mov	r8,r23
1000adc0:	28c00104 	addi	r3,r5,4
1000adc4:	2cc00017 	ldw	r19,0(r5)
1000adc8:	0029883a 	mov	r20,zero
1000adcc:	88800094 	ori	r2,r17,2
1000add0:	80032516 	blt	r16,zero,1000ba68 <___vfiprintf_internal_r+0x106c>
1000add4:	00bfdfc4 	movi	r2,-129
1000add8:	88a2703a 	and	r17,r17,r2
1000addc:	d8c02215 	stw	r3,136(sp)
1000ade0:	8c400094 	ori	r17,r17,2
1000ade4:	98032a1e 	bne	r19,zero,1000ba90 <___vfiprintf_internal_r+0x1094>
1000ade8:	00840074 	movhi	r2,4097
1000adec:	1089d604 	addi	r2,r2,10072
1000adf0:	d8802615 	stw	r2,152(sp)
1000adf4:	002b883a 	mov	r21,zero
1000adf8:	8001741e 	bne	r16,zero,1000b3cc <___vfiprintf_internal_r+0x9d0>
1000adfc:	0021883a 	mov	r16,zero
1000ae00:	0029883a 	mov	r20,zero
1000ae04:	ddc01a04 	addi	r23,sp,104
1000ae08:	8027883a 	mov	r19,r16
1000ae0c:	8500010e 	bge	r16,r20,1000ae14 <___vfiprintf_internal_r+0x418>
1000ae10:	a027883a 	mov	r19,r20
1000ae14:	ad403fcc 	andi	r21,r21,255
1000ae18:	ad40201c 	xori	r21,r21,128
1000ae1c:	ad7fe004 	addi	r21,r21,-128
1000ae20:	a8000126 	beq	r21,zero,1000ae28 <___vfiprintf_internal_r+0x42c>
1000ae24:	9cc00044 	addi	r19,r19,1
1000ae28:	89c0008c 	andi	r7,r17,2
1000ae2c:	38000126 	beq	r7,zero,1000ae34 <___vfiprintf_internal_r+0x438>
1000ae30:	9cc00084 	addi	r19,r19,2
1000ae34:	88c0210c 	andi	r3,r17,132
1000ae38:	1801dd1e 	bne	r3,zero,1000b5b0 <___vfiprintf_internal_r+0xbb4>
1000ae3c:	d9402517 	ldw	r5,148(sp)
1000ae40:	2cebc83a 	sub	r21,r5,r19
1000ae44:	0541da0e 	bge	zero,r21,1000b5b0 <___vfiprintf_internal_r+0xbb4>
1000ae48:	07000404 	movi	fp,16
1000ae4c:	d8801c17 	ldw	r2,112(sp)
1000ae50:	e543be0e 	bge	fp,r21,1000bd4c <___vfiprintf_internal_r+0x1350>
1000ae54:	01440074 	movhi	r5,4097
1000ae58:	294a3a04 	addi	r5,r5,10472
1000ae5c:	dc002715 	stw	r16,156(sp)
1000ae60:	d9801b17 	ldw	r6,108(sp)
1000ae64:	a821883a 	mov	r16,r21
1000ae68:	d9402315 	stw	r5,140(sp)
1000ae6c:	028001c4 	movi	r10,7
1000ae70:	d9c02915 	stw	r7,164(sp)
1000ae74:	182b883a 	mov	r21,r3
1000ae78:	00000506 	br	1000ae90 <___vfiprintf_internal_r+0x494>
1000ae7c:	31000084 	addi	r4,r6,2
1000ae80:	42000204 	addi	r8,r8,8
1000ae84:	180d883a 	mov	r6,r3
1000ae88:	843ffc04 	addi	r16,r16,-16
1000ae8c:	e4000f0e 	bge	fp,r16,1000aecc <___vfiprintf_internal_r+0x4d0>
1000ae90:	01040074 	movhi	r4,4097
1000ae94:	10800404 	addi	r2,r2,16
1000ae98:	30c00044 	addi	r3,r6,1
1000ae9c:	210a3a04 	addi	r4,r4,10472
1000aea0:	41000015 	stw	r4,0(r8)
1000aea4:	47000115 	stw	fp,4(r8)
1000aea8:	d8801c15 	stw	r2,112(sp)
1000aeac:	d8c01b15 	stw	r3,108(sp)
1000aeb0:	50fff20e 	bge	r10,r3,1000ae7c <__alt_data_end+0xf800ae7c>
1000aeb4:	1001b21e 	bne	r2,zero,1000b580 <___vfiprintf_internal_r+0xb84>
1000aeb8:	843ffc04 	addi	r16,r16,-16
1000aebc:	000d883a 	mov	r6,zero
1000aec0:	01000044 	movi	r4,1
1000aec4:	d811883a 	mov	r8,sp
1000aec8:	e43ff116 	blt	fp,r16,1000ae90 <__alt_data_end+0xf800ae90>
1000aecc:	a807883a 	mov	r3,r21
1000aed0:	d9c02917 	ldw	r7,164(sp)
1000aed4:	802b883a 	mov	r21,r16
1000aed8:	dc002717 	ldw	r16,156(sp)
1000aedc:	d9402317 	ldw	r5,140(sp)
1000aee0:	a885883a 	add	r2,r21,r2
1000aee4:	45400115 	stw	r21,4(r8)
1000aee8:	41400015 	stw	r5,0(r8)
1000aeec:	d8801c15 	stw	r2,112(sp)
1000aef0:	d9001b15 	stw	r4,108(sp)
1000aef4:	014001c4 	movi	r5,7
1000aef8:	29026216 	blt	r5,r4,1000b884 <___vfiprintf_internal_r+0xe88>
1000aefc:	d9801d87 	ldb	r6,118(sp)
1000af00:	42000204 	addi	r8,r8,8
1000af04:	21400044 	addi	r5,r4,1
1000af08:	3001ae1e 	bne	r6,zero,1000b5c4 <___vfiprintf_internal_r+0xbc8>
1000af0c:	3801bb26 	beq	r7,zero,1000b5fc <___vfiprintf_internal_r+0xc00>
1000af10:	d9001d04 	addi	r4,sp,116
1000af14:	10800084 	addi	r2,r2,2
1000af18:	41000015 	stw	r4,0(r8)
1000af1c:	01000084 	movi	r4,2
1000af20:	41000115 	stw	r4,4(r8)
1000af24:	d8801c15 	stw	r2,112(sp)
1000af28:	d9401b15 	stw	r5,108(sp)
1000af2c:	010001c4 	movi	r4,7
1000af30:	2142680e 	bge	r4,r5,1000b8d4 <___vfiprintf_internal_r+0xed8>
1000af34:	1002b11e 	bne	r2,zero,1000b9fc <___vfiprintf_internal_r+0x1000>
1000af38:	01802004 	movi	r6,128
1000af3c:	01400044 	movi	r5,1
1000af40:	0009883a 	mov	r4,zero
1000af44:	d811883a 	mov	r8,sp
1000af48:	1981ae1e 	bne	r3,r6,1000b604 <___vfiprintf_internal_r+0xc08>
1000af4c:	d8c02517 	ldw	r3,148(sp)
1000af50:	1cf9c83a 	sub	fp,r3,r19
1000af54:	0701ab0e 	bge	zero,fp,1000b604 <___vfiprintf_internal_r+0xc08>
1000af58:	05400404 	movi	r21,16
1000af5c:	af03a90e 	bge	r21,fp,1000be04 <___vfiprintf_internal_r+0x1408>
1000af60:	01440074 	movhi	r5,4097
1000af64:	294a3604 	addi	r5,r5,10456
1000af68:	d9402315 	stw	r5,140(sp)
1000af6c:	01c001c4 	movi	r7,7
1000af70:	00000506 	br	1000af88 <___vfiprintf_internal_r+0x58c>
1000af74:	21800084 	addi	r6,r4,2
1000af78:	42000204 	addi	r8,r8,8
1000af7c:	1809883a 	mov	r4,r3
1000af80:	e73ffc04 	addi	fp,fp,-16
1000af84:	af000d0e 	bge	r21,fp,1000afbc <___vfiprintf_internal_r+0x5c0>
1000af88:	10800404 	addi	r2,r2,16
1000af8c:	20c00044 	addi	r3,r4,1
1000af90:	44800015 	stw	r18,0(r8)
1000af94:	45400115 	stw	r21,4(r8)
1000af98:	d8801c15 	stw	r2,112(sp)
1000af9c:	d8c01b15 	stw	r3,108(sp)
1000afa0:	38fff40e 	bge	r7,r3,1000af74 <__alt_data_end+0xf800af74>
1000afa4:	10022b1e 	bne	r2,zero,1000b854 <___vfiprintf_internal_r+0xe58>
1000afa8:	e73ffc04 	addi	fp,fp,-16
1000afac:	01800044 	movi	r6,1
1000afb0:	0009883a 	mov	r4,zero
1000afb4:	d811883a 	mov	r8,sp
1000afb8:	af3ff316 	blt	r21,fp,1000af88 <__alt_data_end+0xf800af88>
1000afbc:	d8c02317 	ldw	r3,140(sp)
1000afc0:	1705883a 	add	r2,r2,fp
1000afc4:	47000115 	stw	fp,4(r8)
1000afc8:	40c00015 	stw	r3,0(r8)
1000afcc:	d8801c15 	stw	r2,112(sp)
1000afd0:	d9801b15 	stw	r6,108(sp)
1000afd4:	00c001c4 	movi	r3,7
1000afd8:	19829416 	blt	r3,r6,1000ba2c <___vfiprintf_internal_r+0x1030>
1000afdc:	8521c83a 	sub	r16,r16,r20
1000afe0:	42000204 	addi	r8,r8,8
1000afe4:	31400044 	addi	r5,r6,1
1000afe8:	3009883a 	mov	r4,r6
1000afec:	04018716 	blt	zero,r16,1000b60c <___vfiprintf_internal_r+0xc10>
1000aff0:	a085883a 	add	r2,r20,r2
1000aff4:	45c00015 	stw	r23,0(r8)
1000aff8:	45000115 	stw	r20,4(r8)
1000affc:	d8801c15 	stw	r2,112(sp)
1000b000:	d9401b15 	stw	r5,108(sp)
1000b004:	00c001c4 	movi	r3,7
1000b008:	1941c20e 	bge	r3,r5,1000b714 <___vfiprintf_internal_r+0xd18>
1000b00c:	1002531e 	bne	r2,zero,1000b95c <___vfiprintf_internal_r+0xf60>
1000b010:	d8001b15 	stw	zero,108(sp)
1000b014:	8c40010c 	andi	r17,r17,4
1000b018:	88023226 	beq	r17,zero,1000b8e4 <___vfiprintf_internal_r+0xee8>
1000b01c:	d9002517 	ldw	r4,148(sp)
1000b020:	24e3c83a 	sub	r17,r4,r19
1000b024:	04432916 	blt	zero,r17,1000bccc <___vfiprintf_internal_r+0x12d0>
1000b028:	d8802517 	ldw	r2,148(sp)
1000b02c:	14c0010e 	bge	r2,r19,1000b034 <___vfiprintf_internal_r+0x638>
1000b030:	9805883a 	mov	r2,r19
1000b034:	d8c02417 	ldw	r3,144(sp)
1000b038:	1887883a 	add	r3,r3,r2
1000b03c:	d8c02415 	stw	r3,144(sp)
1000b040:	d8001b15 	stw	zero,108(sp)
1000b044:	d811883a 	mov	r8,sp
1000b048:	003ea006 	br	1000aacc <__alt_data_end+0xf800aacc>
1000b04c:	8c400814 	ori	r17,r17,32
1000b050:	b0c00007 	ldb	r3,0(r22)
1000b054:	003ec606 	br	1000ab70 <__alt_data_end+0xf800ab70>
1000b058:	b0c00007 	ldb	r3,0(r22)
1000b05c:	00801b04 	movi	r2,108
1000b060:	18832026 	beq	r3,r2,1000bce4 <___vfiprintf_internal_r+0x12e8>
1000b064:	8c400414 	ori	r17,r17,16
1000b068:	003ec106 	br	1000ab70 <__alt_data_end+0xf800ab70>
1000b06c:	9cc03fcc 	andi	r19,r19,255
1000b070:	b811883a 	mov	r8,r23
1000b074:	9803981e 	bne	r19,zero,1000bed8 <___vfiprintf_internal_r+0x14dc>
1000b078:	8880080c 	andi	r2,r17,32
1000b07c:	1002be26 	beq	r2,zero,1000bb78 <___vfiprintf_internal_r+0x117c>
1000b080:	d9002217 	ldw	r4,136(sp)
1000b084:	d9402417 	ldw	r5,144(sp)
1000b088:	20800017 	ldw	r2,0(r4)
1000b08c:	2807d7fa 	srai	r3,r5,31
1000b090:	21000104 	addi	r4,r4,4
1000b094:	d9002215 	stw	r4,136(sp)
1000b098:	11400015 	stw	r5,0(r2)
1000b09c:	10c00115 	stw	r3,4(r2)
1000b0a0:	003e8a06 	br	1000aacc <__alt_data_end+0xf800aacc>
1000b0a4:	9cc03fcc 	andi	r19,r19,255
1000b0a8:	b811883a 	mov	r8,r23
1000b0ac:	9803871e 	bne	r19,zero,1000becc <___vfiprintf_internal_r+0x14d0>
1000b0b0:	8880080c 	andi	r2,r17,32
1000b0b4:	10009a26 	beq	r2,zero,1000b320 <___vfiprintf_internal_r+0x924>
1000b0b8:	d9002217 	ldw	r4,136(sp)
1000b0bc:	d8001d85 	stb	zero,118(sp)
1000b0c0:	20800204 	addi	r2,r4,8
1000b0c4:	24c00017 	ldw	r19,0(r4)
1000b0c8:	25000117 	ldw	r20,4(r4)
1000b0cc:	8002a416 	blt	r16,zero,1000bb60 <___vfiprintf_internal_r+0x1164>
1000b0d0:	013fdfc4 	movi	r4,-129
1000b0d4:	9d06b03a 	or	r3,r19,r20
1000b0d8:	d8802215 	stw	r2,136(sp)
1000b0dc:	8922703a 	and	r17,r17,r4
1000b0e0:	18009b26 	beq	r3,zero,1000b350 <___vfiprintf_internal_r+0x954>
1000b0e4:	002b883a 	mov	r21,zero
1000b0e8:	ddc01a04 	addi	r23,sp,104
1000b0ec:	9806d0fa 	srli	r3,r19,3
1000b0f0:	a008977a 	slli	r4,r20,29
1000b0f4:	a028d0fa 	srli	r20,r20,3
1000b0f8:	9cc001cc 	andi	r19,r19,7
1000b0fc:	98800c04 	addi	r2,r19,48
1000b100:	bdffffc4 	addi	r23,r23,-1
1000b104:	20e6b03a 	or	r19,r4,r3
1000b108:	b8800005 	stb	r2,0(r23)
1000b10c:	9d06b03a 	or	r3,r19,r20
1000b110:	183ff61e 	bne	r3,zero,1000b0ec <__alt_data_end+0xf800b0ec>
1000b114:	88c0004c 	andi	r3,r17,1
1000b118:	18021f1e 	bne	r3,zero,1000b998 <___vfiprintf_internal_r+0xf9c>
1000b11c:	d9401e17 	ldw	r5,120(sp)
1000b120:	2de9c83a 	sub	r20,r5,r23
1000b124:	003f3806 	br	1000ae08 <__alt_data_end+0xf800ae08>
1000b128:	9cc03fcc 	andi	r19,r19,255
1000b12c:	b811883a 	mov	r8,r23
1000b130:	98034f1e 	bne	r19,zero,1000be70 <___vfiprintf_internal_r+0x1474>
1000b134:	00840074 	movhi	r2,4097
1000b138:	1089d604 	addi	r2,r2,10072
1000b13c:	d8802615 	stw	r2,152(sp)
1000b140:	8880080c 	andi	r2,r17,32
1000b144:	1000ac26 	beq	r2,zero,1000b3f8 <___vfiprintf_internal_r+0x9fc>
1000b148:	d9002217 	ldw	r4,136(sp)
1000b14c:	24c00017 	ldw	r19,0(r4)
1000b150:	25000117 	ldw	r20,4(r4)
1000b154:	21000204 	addi	r4,r4,8
1000b158:	d9002215 	stw	r4,136(sp)
1000b15c:	8880004c 	andi	r2,r17,1
1000b160:	1001e726 	beq	r2,zero,1000b900 <___vfiprintf_internal_r+0xf04>
1000b164:	9d04b03a 	or	r2,r19,r20
1000b168:	10025c1e 	bne	r2,zero,1000badc <___vfiprintf_internal_r+0x10e0>
1000b16c:	d8001d85 	stb	zero,118(sp)
1000b170:	80024416 	blt	r16,zero,1000ba84 <___vfiprintf_internal_r+0x1088>
1000b174:	00bfdfc4 	movi	r2,-129
1000b178:	88a2703a 	and	r17,r17,r2
1000b17c:	003f1d06 	br	1000adf4 <__alt_data_end+0xf800adf4>
1000b180:	d8c02217 	ldw	r3,136(sp)
1000b184:	04c00044 	movi	r19,1
1000b188:	b811883a 	mov	r8,r23
1000b18c:	18800017 	ldw	r2,0(r3)
1000b190:	18c00104 	addi	r3,r3,4
1000b194:	d8001d85 	stb	zero,118(sp)
1000b198:	d8801005 	stb	r2,64(sp)
1000b19c:	d8c02215 	stw	r3,136(sp)
1000b1a0:	9829883a 	mov	r20,r19
1000b1a4:	ddc01004 	addi	r23,sp,64
1000b1a8:	0021883a 	mov	r16,zero
1000b1ac:	003f1e06 	br	1000ae28 <__alt_data_end+0xf800ae28>
1000b1b0:	9cc03fcc 	andi	r19,r19,255
1000b1b4:	b811883a 	mov	r8,r23
1000b1b8:	9803331e 	bne	r19,zero,1000be88 <___vfiprintf_internal_r+0x148c>
1000b1bc:	8880080c 	andi	r2,r17,32
1000b1c0:	10004826 	beq	r2,zero,1000b2e4 <___vfiprintf_internal_r+0x8e8>
1000b1c4:	d9002217 	ldw	r4,136(sp)
1000b1c8:	20800117 	ldw	r2,4(r4)
1000b1cc:	24c00017 	ldw	r19,0(r4)
1000b1d0:	21000204 	addi	r4,r4,8
1000b1d4:	d9002215 	stw	r4,136(sp)
1000b1d8:	1029883a 	mov	r20,r2
1000b1dc:	10024c16 	blt	r2,zero,1000bb10 <___vfiprintf_internal_r+0x1114>
1000b1e0:	dd401d83 	ldbu	r21,118(sp)
1000b1e4:	80007116 	blt	r16,zero,1000b3ac <___vfiprintf_internal_r+0x9b0>
1000b1e8:	00ffdfc4 	movi	r3,-129
1000b1ec:	9d04b03a 	or	r2,r19,r20
1000b1f0:	88e2703a 	and	r17,r17,r3
1000b1f4:	1000d126 	beq	r2,zero,1000b53c <___vfiprintf_internal_r+0xb40>
1000b1f8:	a0023526 	beq	r20,zero,1000bad0 <___vfiprintf_internal_r+0x10d4>
1000b1fc:	ddc01a04 	addi	r23,sp,104
1000b200:	4039883a 	mov	fp,r8
1000b204:	9809883a 	mov	r4,r19
1000b208:	a00b883a 	mov	r5,r20
1000b20c:	01800284 	movi	r6,10
1000b210:	000f883a 	mov	r7,zero
1000b214:	000cc000 	call	1000cc00 <__umoddi3>
1000b218:	10800c04 	addi	r2,r2,48
1000b21c:	bdffffc4 	addi	r23,r23,-1
1000b220:	9809883a 	mov	r4,r19
1000b224:	a00b883a 	mov	r5,r20
1000b228:	b8800005 	stb	r2,0(r23)
1000b22c:	01800284 	movi	r6,10
1000b230:	000f883a 	mov	r7,zero
1000b234:	000c6040 	call	1000c604 <__udivdi3>
1000b238:	1027883a 	mov	r19,r2
1000b23c:	10c4b03a 	or	r2,r2,r3
1000b240:	1829883a 	mov	r20,r3
1000b244:	103fef1e 	bne	r2,zero,1000b204 <__alt_data_end+0xf800b204>
1000b248:	d9001e17 	ldw	r4,120(sp)
1000b24c:	e011883a 	mov	r8,fp
1000b250:	25e9c83a 	sub	r20,r4,r23
1000b254:	003eec06 	br	1000ae08 <__alt_data_end+0xf800ae08>
1000b258:	d8802307 	ldb	r2,140(sp)
1000b25c:	1002361e 	bne	r2,zero,1000bb38 <___vfiprintf_internal_r+0x113c>
1000b260:	00c00804 	movi	r3,32
1000b264:	d8c02305 	stb	r3,140(sp)
1000b268:	04c00044 	movi	r19,1
1000b26c:	b0c00007 	ldb	r3,0(r22)
1000b270:	003e3f06 	br	1000ab70 <__alt_data_end+0xf800ab70>
1000b274:	8c400054 	ori	r17,r17,1
1000b278:	b0c00007 	ldb	r3,0(r22)
1000b27c:	003e3c06 	br	1000ab70 <__alt_data_end+0xf800ab70>
1000b280:	8c402014 	ori	r17,r17,128
1000b284:	b0c00007 	ldb	r3,0(r22)
1000b288:	003e3906 	br	1000ab70 <__alt_data_end+0xf800ab70>
1000b28c:	dc002715 	stw	r16,156(sp)
1000b290:	d8002515 	stw	zero,148(sp)
1000b294:	1f3ff404 	addi	fp,r3,-48
1000b298:	0009883a 	mov	r4,zero
1000b29c:	b021883a 	mov	r16,r22
1000b2a0:	01400284 	movi	r5,10
1000b2a4:	00017e40 	call	100017e4 <__mulsi3>
1000b2a8:	80c00007 	ldb	r3,0(r16)
1000b2ac:	e089883a 	add	r4,fp,r2
1000b2b0:	b5800044 	addi	r22,r22,1
1000b2b4:	1f3ff404 	addi	fp,r3,-48
1000b2b8:	b021883a 	mov	r16,r22
1000b2bc:	af3ff82e 	bgeu	r21,fp,1000b2a0 <__alt_data_end+0xf800b2a0>
1000b2c0:	d9002515 	stw	r4,148(sp)
1000b2c4:	dc002717 	ldw	r16,156(sp)
1000b2c8:	003e2a06 	br	1000ab74 <__alt_data_end+0xf800ab74>
1000b2cc:	9cc03fcc 	andi	r19,r19,255
1000b2d0:	b811883a 	mov	r8,r23
1000b2d4:	9802e91e 	bne	r19,zero,1000be7c <___vfiprintf_internal_r+0x1480>
1000b2d8:	8c400414 	ori	r17,r17,16
1000b2dc:	8880080c 	andi	r2,r17,32
1000b2e0:	103fb81e 	bne	r2,zero,1000b1c4 <__alt_data_end+0xf800b1c4>
1000b2e4:	8880040c 	andi	r2,r17,16
1000b2e8:	10022e26 	beq	r2,zero,1000bba4 <___vfiprintf_internal_r+0x11a8>
1000b2ec:	d9402217 	ldw	r5,136(sp)
1000b2f0:	2cc00017 	ldw	r19,0(r5)
1000b2f4:	29400104 	addi	r5,r5,4
1000b2f8:	d9402215 	stw	r5,136(sp)
1000b2fc:	9829d7fa 	srai	r20,r19,31
1000b300:	a005883a 	mov	r2,r20
1000b304:	003fb506 	br	1000b1dc <__alt_data_end+0xf800b1dc>
1000b308:	9cc03fcc 	andi	r19,r19,255
1000b30c:	b811883a 	mov	r8,r23
1000b310:	9802fa1e 	bne	r19,zero,1000befc <___vfiprintf_internal_r+0x1500>
1000b314:	8c400414 	ori	r17,r17,16
1000b318:	8880080c 	andi	r2,r17,32
1000b31c:	103f661e 	bne	r2,zero,1000b0b8 <__alt_data_end+0xf800b0b8>
1000b320:	8880040c 	andi	r2,r17,16
1000b324:	10020626 	beq	r2,zero,1000bb40 <___vfiprintf_internal_r+0x1144>
1000b328:	d9402217 	ldw	r5,136(sp)
1000b32c:	d8001d85 	stb	zero,118(sp)
1000b330:	0029883a 	mov	r20,zero
1000b334:	28800104 	addi	r2,r5,4
1000b338:	2cc00017 	ldw	r19,0(r5)
1000b33c:	80020816 	blt	r16,zero,1000bb60 <___vfiprintf_internal_r+0x1164>
1000b340:	00ffdfc4 	movi	r3,-129
1000b344:	d8802215 	stw	r2,136(sp)
1000b348:	88e2703a 	and	r17,r17,r3
1000b34c:	983f651e 	bne	r19,zero,1000b0e4 <__alt_data_end+0xf800b0e4>
1000b350:	002b883a 	mov	r21,zero
1000b354:	8002cf26 	beq	r16,zero,1000be94 <___vfiprintf_internal_r+0x1498>
1000b358:	0027883a 	mov	r19,zero
1000b35c:	0029883a 	mov	r20,zero
1000b360:	003f6106 	br	1000b0e8 <__alt_data_end+0xf800b0e8>
1000b364:	9cc03fcc 	andi	r19,r19,255
1000b368:	b811883a 	mov	r8,r23
1000b36c:	9802e01e 	bne	r19,zero,1000bef0 <___vfiprintf_internal_r+0x14f4>
1000b370:	8c400414 	ori	r17,r17,16
1000b374:	8880080c 	andi	r2,r17,32
1000b378:	1000641e 	bne	r2,zero,1000b50c <___vfiprintf_internal_r+0xb10>
1000b37c:	8880040c 	andi	r2,r17,16
1000b380:	1001c81e 	bne	r2,zero,1000baa4 <___vfiprintf_internal_r+0x10a8>
1000b384:	8880100c 	andi	r2,r17,64
1000b388:	d8001d85 	stb	zero,118(sp)
1000b38c:	1002281e 	bne	r2,zero,1000bc30 <___vfiprintf_internal_r+0x1234>
1000b390:	d9002217 	ldw	r4,136(sp)
1000b394:	0029883a 	mov	r20,zero
1000b398:	20800104 	addi	r2,r4,4
1000b39c:	24c00017 	ldw	r19,0(r4)
1000b3a0:	8001c60e 	bge	r16,zero,1000babc <___vfiprintf_internal_r+0x10c0>
1000b3a4:	d8802215 	stw	r2,136(sp)
1000b3a8:	002b883a 	mov	r21,zero
1000b3ac:	9d04b03a 	or	r2,r19,r20
1000b3b0:	103f911e 	bne	r2,zero,1000b1f8 <__alt_data_end+0xf800b1f8>
1000b3b4:	00800044 	movi	r2,1
1000b3b8:	10803fcc 	andi	r2,r2,255
1000b3bc:	00c00044 	movi	r3,1
1000b3c0:	10c05f26 	beq	r2,r3,1000b540 <___vfiprintf_internal_r+0xb44>
1000b3c4:	00c00084 	movi	r3,2
1000b3c8:	10ffe31e 	bne	r2,r3,1000b358 <__alt_data_end+0xf800b358>
1000b3cc:	0027883a 	mov	r19,zero
1000b3d0:	0029883a 	mov	r20,zero
1000b3d4:	00015106 	br	1000b91c <___vfiprintf_internal_r+0xf20>
1000b3d8:	9cc03fcc 	andi	r19,r19,255
1000b3dc:	b811883a 	mov	r8,r23
1000b3e0:	9802c01e 	bne	r19,zero,1000bee4 <___vfiprintf_internal_r+0x14e8>
1000b3e4:	01440074 	movhi	r5,4097
1000b3e8:	2949d104 	addi	r5,r5,10052
1000b3ec:	d9402615 	stw	r5,152(sp)
1000b3f0:	8880080c 	andi	r2,r17,32
1000b3f4:	103f541e 	bne	r2,zero,1000b148 <__alt_data_end+0xf800b148>
1000b3f8:	8880040c 	andi	r2,r17,16
1000b3fc:	1001f226 	beq	r2,zero,1000bbc8 <___vfiprintf_internal_r+0x11cc>
1000b400:	d9402217 	ldw	r5,136(sp)
1000b404:	0029883a 	mov	r20,zero
1000b408:	2cc00017 	ldw	r19,0(r5)
1000b40c:	29400104 	addi	r5,r5,4
1000b410:	d9402215 	stw	r5,136(sp)
1000b414:	003f5106 	br	1000b15c <__alt_data_end+0xf800b15c>
1000b418:	d8c02217 	ldw	r3,136(sp)
1000b41c:	b811883a 	mov	r8,r23
1000b420:	d8001d85 	stb	zero,118(sp)
1000b424:	1dc00017 	ldw	r23,0(r3)
1000b428:	1f000104 	addi	fp,r3,4
1000b42c:	b8025926 	beq	r23,zero,1000bd94 <___vfiprintf_internal_r+0x1398>
1000b430:	80023316 	blt	r16,zero,1000bd00 <___vfiprintf_internal_r+0x1304>
1000b434:	800d883a 	mov	r6,r16
1000b438:	000b883a 	mov	r5,zero
1000b43c:	b809883a 	mov	r4,r23
1000b440:	da002a15 	stw	r8,168(sp)
1000b444:	0008fd40 	call	10008fd4 <memchr>
1000b448:	da002a17 	ldw	r8,168(sp)
1000b44c:	10026826 	beq	r2,zero,1000bdf0 <___vfiprintf_internal_r+0x13f4>
1000b450:	15e9c83a 	sub	r20,r2,r23
1000b454:	dd401d83 	ldbu	r21,118(sp)
1000b458:	df002215 	stw	fp,136(sp)
1000b45c:	0021883a 	mov	r16,zero
1000b460:	003e6906 	br	1000ae08 <__alt_data_end+0xf800ae08>
1000b464:	9cc03fcc 	andi	r19,r19,255
1000b468:	b811883a 	mov	r8,r23
1000b46c:	983fc126 	beq	r19,zero,1000b374 <__alt_data_end+0xf800b374>
1000b470:	d8c02303 	ldbu	r3,140(sp)
1000b474:	d8c01d85 	stb	r3,118(sp)
1000b478:	003fbe06 	br	1000b374 <__alt_data_end+0xf800b374>
1000b47c:	d9002217 	ldw	r4,136(sp)
1000b480:	d9402217 	ldw	r5,136(sp)
1000b484:	21000017 	ldw	r4,0(r4)
1000b488:	28800104 	addi	r2,r5,4
1000b48c:	d9002515 	stw	r4,148(sp)
1000b490:	203e3d16 	blt	r4,zero,1000ad88 <__alt_data_end+0xf800ad88>
1000b494:	d8802215 	stw	r2,136(sp)
1000b498:	b0c00007 	ldb	r3,0(r22)
1000b49c:	003db406 	br	1000ab70 <__alt_data_end+0xf800ab70>
1000b4a0:	00c00ac4 	movi	r3,43
1000b4a4:	d8c02305 	stb	r3,140(sp)
1000b4a8:	04c00044 	movi	r19,1
1000b4ac:	b0c00007 	ldb	r3,0(r22)
1000b4b0:	003daf06 	br	1000ab70 <__alt_data_end+0xf800ab70>
1000b4b4:	b0c00007 	ldb	r3,0(r22)
1000b4b8:	01000a84 	movi	r4,42
1000b4bc:	b4000044 	addi	r16,r22,1
1000b4c0:	19025e26 	beq	r3,r4,1000be3c <___vfiprintf_internal_r+0x1440>
1000b4c4:	1f3ff404 	addi	fp,r3,-48
1000b4c8:	0009883a 	mov	r4,zero
1000b4cc:	af025236 	bltu	r21,fp,1000be18 <___vfiprintf_internal_r+0x141c>
1000b4d0:	01400284 	movi	r5,10
1000b4d4:	00017e40 	call	100017e4 <__mulsi3>
1000b4d8:	80c00007 	ldb	r3,0(r16)
1000b4dc:	1709883a 	add	r4,r2,fp
1000b4e0:	85800044 	addi	r22,r16,1
1000b4e4:	1f3ff404 	addi	fp,r3,-48
1000b4e8:	b021883a 	mov	r16,r22
1000b4ec:	af3ff82e 	bgeu	r21,fp,1000b4d0 <__alt_data_end+0xf800b4d0>
1000b4f0:	2021883a 	mov	r16,r4
1000b4f4:	203d9f0e 	bge	r4,zero,1000ab74 <__alt_data_end+0xf800ab74>
1000b4f8:	043fffc4 	movi	r16,-1
1000b4fc:	003d9d06 	br	1000ab74 <__alt_data_end+0xf800ab74>
1000b500:	8c401014 	ori	r17,r17,64
1000b504:	b0c00007 	ldb	r3,0(r22)
1000b508:	003d9906 	br	1000ab70 <__alt_data_end+0xf800ab70>
1000b50c:	d9002217 	ldw	r4,136(sp)
1000b510:	d8001d85 	stb	zero,118(sp)
1000b514:	20c00204 	addi	r3,r4,8
1000b518:	24c00017 	ldw	r19,0(r4)
1000b51c:	25000117 	ldw	r20,4(r4)
1000b520:	8001e716 	blt	r16,zero,1000bcc0 <___vfiprintf_internal_r+0x12c4>
1000b524:	013fdfc4 	movi	r4,-129
1000b528:	9d04b03a 	or	r2,r19,r20
1000b52c:	d8c02215 	stw	r3,136(sp)
1000b530:	8922703a 	and	r17,r17,r4
1000b534:	002b883a 	mov	r21,zero
1000b538:	103f2f1e 	bne	r2,zero,1000b1f8 <__alt_data_end+0xf800b1f8>
1000b53c:	803e2f26 	beq	r16,zero,1000adfc <__alt_data_end+0xf800adfc>
1000b540:	0027883a 	mov	r19,zero
1000b544:	9cc00c04 	addi	r19,r19,48
1000b548:	dcc019c5 	stb	r19,103(sp)
1000b54c:	dd002817 	ldw	r20,160(sp)
1000b550:	ddc019c4 	addi	r23,sp,103
1000b554:	003e2c06 	br	1000ae08 <__alt_data_end+0xf800ae08>
1000b558:	9cc03fcc 	andi	r19,r19,255
1000b55c:	b811883a 	mov	r8,r23
1000b560:	9802571e 	bne	r19,zero,1000bec0 <___vfiprintf_internal_r+0x14c4>
1000b564:	18005726 	beq	r3,zero,1000b6c4 <___vfiprintf_internal_r+0xcc8>
1000b568:	04c00044 	movi	r19,1
1000b56c:	d8c01005 	stb	r3,64(sp)
1000b570:	d8001d85 	stb	zero,118(sp)
1000b574:	9829883a 	mov	r20,r19
1000b578:	ddc01004 	addi	r23,sp,64
1000b57c:	003f0a06 	br	1000b1a8 <__alt_data_end+0xf800b1a8>
1000b580:	d9402017 	ldw	r5,128(sp)
1000b584:	d9002117 	ldw	r4,132(sp)
1000b588:	d9801a04 	addi	r6,sp,104
1000b58c:	da802a15 	stw	r10,168(sp)
1000b590:	000a8e80 	call	1000a8e8 <__sprint_r.part.0>
1000b594:	da802a17 	ldw	r10,168(sp)
1000b598:	1000501e 	bne	r2,zero,1000b6dc <___vfiprintf_internal_r+0xce0>
1000b59c:	d9801b17 	ldw	r6,108(sp)
1000b5a0:	d8801c17 	ldw	r2,112(sp)
1000b5a4:	d811883a 	mov	r8,sp
1000b5a8:	31000044 	addi	r4,r6,1
1000b5ac:	003e3606 	br	1000ae88 <__alt_data_end+0xf800ae88>
1000b5b0:	d9001b17 	ldw	r4,108(sp)
1000b5b4:	d8801c17 	ldw	r2,112(sp)
1000b5b8:	21400044 	addi	r5,r4,1
1000b5bc:	d9801d87 	ldb	r6,118(sp)
1000b5c0:	303e5226 	beq	r6,zero,1000af0c <__alt_data_end+0xf800af0c>
1000b5c4:	01800044 	movi	r6,1
1000b5c8:	d9001d84 	addi	r4,sp,118
1000b5cc:	1185883a 	add	r2,r2,r6
1000b5d0:	41000015 	stw	r4,0(r8)
1000b5d4:	41800115 	stw	r6,4(r8)
1000b5d8:	d8801c15 	stw	r2,112(sp)
1000b5dc:	d9401b15 	stw	r5,108(sp)
1000b5e0:	010001c4 	movi	r4,7
1000b5e4:	2140b00e 	bge	r4,r5,1000b8a8 <___vfiprintf_internal_r+0xeac>
1000b5e8:	1000f61e 	bne	r2,zero,1000b9c4 <___vfiprintf_internal_r+0xfc8>
1000b5ec:	3800b31e 	bne	r7,zero,1000b8bc <___vfiprintf_internal_r+0xec0>
1000b5f0:	0009883a 	mov	r4,zero
1000b5f4:	300b883a 	mov	r5,r6
1000b5f8:	d811883a 	mov	r8,sp
1000b5fc:	01802004 	movi	r6,128
1000b600:	19be5226 	beq	r3,r6,1000af4c <__alt_data_end+0xf800af4c>
1000b604:	8521c83a 	sub	r16,r16,r20
1000b608:	043e790e 	bge	zero,r16,1000aff0 <__alt_data_end+0xf800aff0>
1000b60c:	05400404 	movi	r21,16
1000b610:	ac01b00e 	bge	r21,r16,1000bcd4 <___vfiprintf_internal_r+0x12d8>
1000b614:	01440074 	movhi	r5,4097
1000b618:	294a3604 	addi	r5,r5,10456
1000b61c:	d9402315 	stw	r5,140(sp)
1000b620:	070001c4 	movi	fp,7
1000b624:	00000506 	br	1000b63c <___vfiprintf_internal_r+0xc40>
1000b628:	21400084 	addi	r5,r4,2
1000b62c:	42000204 	addi	r8,r8,8
1000b630:	1809883a 	mov	r4,r3
1000b634:	843ffc04 	addi	r16,r16,-16
1000b638:	ac000d0e 	bge	r21,r16,1000b670 <___vfiprintf_internal_r+0xc74>
1000b63c:	10800404 	addi	r2,r2,16
1000b640:	20c00044 	addi	r3,r4,1
1000b644:	44800015 	stw	r18,0(r8)
1000b648:	45400115 	stw	r21,4(r8)
1000b64c:	d8801c15 	stw	r2,112(sp)
1000b650:	d8c01b15 	stw	r3,108(sp)
1000b654:	e0fff40e 	bge	fp,r3,1000b628 <__alt_data_end+0xf800b628>
1000b658:	1000101e 	bne	r2,zero,1000b69c <___vfiprintf_internal_r+0xca0>
1000b65c:	843ffc04 	addi	r16,r16,-16
1000b660:	01400044 	movi	r5,1
1000b664:	0009883a 	mov	r4,zero
1000b668:	d811883a 	mov	r8,sp
1000b66c:	ac3ff316 	blt	r21,r16,1000b63c <__alt_data_end+0xf800b63c>
1000b670:	d8c02317 	ldw	r3,140(sp)
1000b674:	1405883a 	add	r2,r2,r16
1000b678:	44000115 	stw	r16,4(r8)
1000b67c:	40c00015 	stw	r3,0(r8)
1000b680:	d8801c15 	stw	r2,112(sp)
1000b684:	d9401b15 	stw	r5,108(sp)
1000b688:	00c001c4 	movi	r3,7
1000b68c:	19401916 	blt	r3,r5,1000b6f4 <___vfiprintf_internal_r+0xcf8>
1000b690:	42000204 	addi	r8,r8,8
1000b694:	29400044 	addi	r5,r5,1
1000b698:	003e5506 	br	1000aff0 <__alt_data_end+0xf800aff0>
1000b69c:	d9402017 	ldw	r5,128(sp)
1000b6a0:	d9002117 	ldw	r4,132(sp)
1000b6a4:	d9801a04 	addi	r6,sp,104
1000b6a8:	000a8e80 	call	1000a8e8 <__sprint_r.part.0>
1000b6ac:	10000b1e 	bne	r2,zero,1000b6dc <___vfiprintf_internal_r+0xce0>
1000b6b0:	d9001b17 	ldw	r4,108(sp)
1000b6b4:	d8801c17 	ldw	r2,112(sp)
1000b6b8:	d811883a 	mov	r8,sp
1000b6bc:	21400044 	addi	r5,r4,1
1000b6c0:	003fdc06 	br	1000b634 <__alt_data_end+0xf800b634>
1000b6c4:	d8801c17 	ldw	r2,112(sp)
1000b6c8:	10000426 	beq	r2,zero,1000b6dc <___vfiprintf_internal_r+0xce0>
1000b6cc:	d9402017 	ldw	r5,128(sp)
1000b6d0:	d9002117 	ldw	r4,132(sp)
1000b6d4:	d9801a04 	addi	r6,sp,104
1000b6d8:	000a8e80 	call	1000a8e8 <__sprint_r.part.0>
1000b6dc:	d9402017 	ldw	r5,128(sp)
1000b6e0:	2880030b 	ldhu	r2,12(r5)
1000b6e4:	1080100c 	andi	r2,r2,64
1000b6e8:	10014d1e 	bne	r2,zero,1000bc20 <___vfiprintf_internal_r+0x1224>
1000b6ec:	d8802417 	ldw	r2,144(sp)
1000b6f0:	003d9706 	br	1000ad50 <__alt_data_end+0xf800ad50>
1000b6f4:	1000d21e 	bne	r2,zero,1000ba40 <___vfiprintf_internal_r+0x1044>
1000b6f8:	00c00044 	movi	r3,1
1000b6fc:	a005883a 	mov	r2,r20
1000b700:	ddc00015 	stw	r23,0(sp)
1000b704:	dd000115 	stw	r20,4(sp)
1000b708:	dd001c15 	stw	r20,112(sp)
1000b70c:	d8c01b15 	stw	r3,108(sp)
1000b710:	d811883a 	mov	r8,sp
1000b714:	42000204 	addi	r8,r8,8
1000b718:	8c40010c 	andi	r17,r17,4
1000b71c:	88004026 	beq	r17,zero,1000b820 <___vfiprintf_internal_r+0xe24>
1000b720:	d9002517 	ldw	r4,148(sp)
1000b724:	24e3c83a 	sub	r17,r4,r19
1000b728:	04403d0e 	bge	zero,r17,1000b820 <___vfiprintf_internal_r+0xe24>
1000b72c:	04000404 	movi	r16,16
1000b730:	8441a90e 	bge	r16,r17,1000bdd8 <___vfiprintf_internal_r+0x13dc>
1000b734:	00c40074 	movhi	r3,4097
1000b738:	18ca3a04 	addi	r3,r3,10472
1000b73c:	d9001b17 	ldw	r4,108(sp)
1000b740:	d8c02315 	stw	r3,140(sp)
1000b744:	050001c4 	movi	r20,7
1000b748:	dd402117 	ldw	r21,132(sp)
1000b74c:	ddc02017 	ldw	r23,128(sp)
1000b750:	00000506 	br	1000b768 <___vfiprintf_internal_r+0xd6c>
1000b754:	21400084 	addi	r5,r4,2
1000b758:	42000204 	addi	r8,r8,8
1000b75c:	1809883a 	mov	r4,r3
1000b760:	8c7ffc04 	addi	r17,r17,-16
1000b764:	84400f0e 	bge	r16,r17,1000b7a4 <___vfiprintf_internal_r+0xda8>
1000b768:	01440074 	movhi	r5,4097
1000b76c:	10800404 	addi	r2,r2,16
1000b770:	20c00044 	addi	r3,r4,1
1000b774:	294a3a04 	addi	r5,r5,10472
1000b778:	41400015 	stw	r5,0(r8)
1000b77c:	44000115 	stw	r16,4(r8)
1000b780:	d8801c15 	stw	r2,112(sp)
1000b784:	d8c01b15 	stw	r3,108(sp)
1000b788:	a0fff20e 	bge	r20,r3,1000b754 <__alt_data_end+0xf800b754>
1000b78c:	1000141e 	bne	r2,zero,1000b7e0 <___vfiprintf_internal_r+0xde4>
1000b790:	8c7ffc04 	addi	r17,r17,-16
1000b794:	01400044 	movi	r5,1
1000b798:	0009883a 	mov	r4,zero
1000b79c:	d811883a 	mov	r8,sp
1000b7a0:	847ff116 	blt	r16,r17,1000b768 <__alt_data_end+0xf800b768>
1000b7a4:	d8c02317 	ldw	r3,140(sp)
1000b7a8:	1445883a 	add	r2,r2,r17
1000b7ac:	44400115 	stw	r17,4(r8)
1000b7b0:	40c00015 	stw	r3,0(r8)
1000b7b4:	d8801c15 	stw	r2,112(sp)
1000b7b8:	d9401b15 	stw	r5,108(sp)
1000b7bc:	00c001c4 	movi	r3,7
1000b7c0:	1940170e 	bge	r3,r5,1000b820 <___vfiprintf_internal_r+0xe24>
1000b7c4:	1000101e 	bne	r2,zero,1000b808 <___vfiprintf_internal_r+0xe0c>
1000b7c8:	d8802517 	ldw	r2,148(sp)
1000b7cc:	14c11616 	blt	r2,r19,1000bc28 <___vfiprintf_internal_r+0x122c>
1000b7d0:	d9002417 	ldw	r4,144(sp)
1000b7d4:	2089883a 	add	r4,r4,r2
1000b7d8:	d9002415 	stw	r4,144(sp)
1000b7dc:	003e1806 	br	1000b040 <__alt_data_end+0xf800b040>
1000b7e0:	d9801a04 	addi	r6,sp,104
1000b7e4:	b80b883a 	mov	r5,r23
1000b7e8:	a809883a 	mov	r4,r21
1000b7ec:	000a8e80 	call	1000a8e8 <__sprint_r.part.0>
1000b7f0:	103fba1e 	bne	r2,zero,1000b6dc <__alt_data_end+0xf800b6dc>
1000b7f4:	d9001b17 	ldw	r4,108(sp)
1000b7f8:	d8801c17 	ldw	r2,112(sp)
1000b7fc:	d811883a 	mov	r8,sp
1000b800:	21400044 	addi	r5,r4,1
1000b804:	003fd606 	br	1000b760 <__alt_data_end+0xf800b760>
1000b808:	d9402017 	ldw	r5,128(sp)
1000b80c:	d9002117 	ldw	r4,132(sp)
1000b810:	d9801a04 	addi	r6,sp,104
1000b814:	000a8e80 	call	1000a8e8 <__sprint_r.part.0>
1000b818:	103fb01e 	bne	r2,zero,1000b6dc <__alt_data_end+0xf800b6dc>
1000b81c:	d8801c17 	ldw	r2,112(sp)
1000b820:	d8c02517 	ldw	r3,148(sp)
1000b824:	1cc0010e 	bge	r3,r19,1000b82c <___vfiprintf_internal_r+0xe30>
1000b828:	9807883a 	mov	r3,r19
1000b82c:	d9002417 	ldw	r4,144(sp)
1000b830:	20c9883a 	add	r4,r4,r3
1000b834:	d9002415 	stw	r4,144(sp)
1000b838:	103e0126 	beq	r2,zero,1000b040 <__alt_data_end+0xf800b040>
1000b83c:	d9402017 	ldw	r5,128(sp)
1000b840:	d9002117 	ldw	r4,132(sp)
1000b844:	d9801a04 	addi	r6,sp,104
1000b848:	000a8e80 	call	1000a8e8 <__sprint_r.part.0>
1000b84c:	103dfc26 	beq	r2,zero,1000b040 <__alt_data_end+0xf800b040>
1000b850:	003fa206 	br	1000b6dc <__alt_data_end+0xf800b6dc>
1000b854:	d9402017 	ldw	r5,128(sp)
1000b858:	d9002117 	ldw	r4,132(sp)
1000b85c:	d9801a04 	addi	r6,sp,104
1000b860:	d9c02b15 	stw	r7,172(sp)
1000b864:	000a8e80 	call	1000a8e8 <__sprint_r.part.0>
1000b868:	d9c02b17 	ldw	r7,172(sp)
1000b86c:	103f9b1e 	bne	r2,zero,1000b6dc <__alt_data_end+0xf800b6dc>
1000b870:	d9001b17 	ldw	r4,108(sp)
1000b874:	d8801c17 	ldw	r2,112(sp)
1000b878:	d811883a 	mov	r8,sp
1000b87c:	21800044 	addi	r6,r4,1
1000b880:	003dbf06 	br	1000af80 <__alt_data_end+0xf800af80>
1000b884:	1000d81e 	bne	r2,zero,1000bbe8 <___vfiprintf_internal_r+0x11ec>
1000b888:	d9001d87 	ldb	r4,118(sp)
1000b88c:	20000a26 	beq	r4,zero,1000b8b8 <___vfiprintf_internal_r+0xebc>
1000b890:	00800044 	movi	r2,1
1000b894:	d9001d84 	addi	r4,sp,118
1000b898:	100b883a 	mov	r5,r2
1000b89c:	d9000015 	stw	r4,0(sp)
1000b8a0:	d8800115 	stw	r2,4(sp)
1000b8a4:	d811883a 	mov	r8,sp
1000b8a8:	2809883a 	mov	r4,r5
1000b8ac:	42000204 	addi	r8,r8,8
1000b8b0:	29400044 	addi	r5,r5,1
1000b8b4:	003d9506 	br	1000af0c <__alt_data_end+0xf800af0c>
1000b8b8:	3800fd26 	beq	r7,zero,1000bcb0 <___vfiprintf_internal_r+0x12b4>
1000b8bc:	00800084 	movi	r2,2
1000b8c0:	d9001d04 	addi	r4,sp,116
1000b8c4:	d9000015 	stw	r4,0(sp)
1000b8c8:	d8800115 	stw	r2,4(sp)
1000b8cc:	01400044 	movi	r5,1
1000b8d0:	d811883a 	mov	r8,sp
1000b8d4:	2809883a 	mov	r4,r5
1000b8d8:	42000204 	addi	r8,r8,8
1000b8dc:	29400044 	addi	r5,r5,1
1000b8e0:	003f4606 	br	1000b5fc <__alt_data_end+0xf800b5fc>
1000b8e4:	d8802517 	ldw	r2,148(sp)
1000b8e8:	14c0010e 	bge	r2,r19,1000b8f0 <___vfiprintf_internal_r+0xef4>
1000b8ec:	9805883a 	mov	r2,r19
1000b8f0:	d9402417 	ldw	r5,144(sp)
1000b8f4:	288b883a 	add	r5,r5,r2
1000b8f8:	d9402415 	stw	r5,144(sp)
1000b8fc:	003dd006 	br	1000b040 <__alt_data_end+0xf800b040>
1000b900:	d8001d85 	stb	zero,118(sp)
1000b904:	80005d16 	blt	r16,zero,1000ba7c <___vfiprintf_internal_r+0x1080>
1000b908:	00ffdfc4 	movi	r3,-129
1000b90c:	9d04b03a 	or	r2,r19,r20
1000b910:	88e2703a 	and	r17,r17,r3
1000b914:	103d3726 	beq	r2,zero,1000adf4 <__alt_data_end+0xf800adf4>
1000b918:	002b883a 	mov	r21,zero
1000b91c:	d9002617 	ldw	r4,152(sp)
1000b920:	ddc01a04 	addi	r23,sp,104
1000b924:	988003cc 	andi	r2,r19,15
1000b928:	a006973a 	slli	r3,r20,28
1000b92c:	2085883a 	add	r2,r4,r2
1000b930:	9826d13a 	srli	r19,r19,4
1000b934:	10800003 	ldbu	r2,0(r2)
1000b938:	a028d13a 	srli	r20,r20,4
1000b93c:	bdffffc4 	addi	r23,r23,-1
1000b940:	1ce6b03a 	or	r19,r3,r19
1000b944:	b8800005 	stb	r2,0(r23)
1000b948:	9d04b03a 	or	r2,r19,r20
1000b94c:	103ff51e 	bne	r2,zero,1000b924 <__alt_data_end+0xf800b924>
1000b950:	d8801e17 	ldw	r2,120(sp)
1000b954:	15e9c83a 	sub	r20,r2,r23
1000b958:	003d2b06 	br	1000ae08 <__alt_data_end+0xf800ae08>
1000b95c:	d9402017 	ldw	r5,128(sp)
1000b960:	d9002117 	ldw	r4,132(sp)
1000b964:	d9801a04 	addi	r6,sp,104
1000b968:	000a8e80 	call	1000a8e8 <__sprint_r.part.0>
1000b96c:	103f5b1e 	bne	r2,zero,1000b6dc <__alt_data_end+0xf800b6dc>
1000b970:	d8801c17 	ldw	r2,112(sp)
1000b974:	d811883a 	mov	r8,sp
1000b978:	003f6706 	br	1000b718 <__alt_data_end+0xf800b718>
1000b97c:	d9402017 	ldw	r5,128(sp)
1000b980:	d9002117 	ldw	r4,132(sp)
1000b984:	d9801a04 	addi	r6,sp,104
1000b988:	000a8e80 	call	1000a8e8 <__sprint_r.part.0>
1000b98c:	103f531e 	bne	r2,zero,1000b6dc <__alt_data_end+0xf800b6dc>
1000b990:	d811883a 	mov	r8,sp
1000b994:	003cd906 	br	1000acfc <__alt_data_end+0xf800acfc>
1000b998:	10803fcc 	andi	r2,r2,255
1000b99c:	1080201c 	xori	r2,r2,128
1000b9a0:	10bfe004 	addi	r2,r2,-128
1000b9a4:	00c00c04 	movi	r3,48
1000b9a8:	10ffe926 	beq	r2,r3,1000b950 <__alt_data_end+0xf800b950>
1000b9ac:	b8ffffc5 	stb	r3,-1(r23)
1000b9b0:	d8c01e17 	ldw	r3,120(sp)
1000b9b4:	b8bfffc4 	addi	r2,r23,-1
1000b9b8:	102f883a 	mov	r23,r2
1000b9bc:	18a9c83a 	sub	r20,r3,r2
1000b9c0:	003d1106 	br	1000ae08 <__alt_data_end+0xf800ae08>
1000b9c4:	d9402017 	ldw	r5,128(sp)
1000b9c8:	d9002117 	ldw	r4,132(sp)
1000b9cc:	d9801a04 	addi	r6,sp,104
1000b9d0:	d8c02a15 	stw	r3,168(sp)
1000b9d4:	d9c02b15 	stw	r7,172(sp)
1000b9d8:	000a8e80 	call	1000a8e8 <__sprint_r.part.0>
1000b9dc:	d8c02a17 	ldw	r3,168(sp)
1000b9e0:	d9c02b17 	ldw	r7,172(sp)
1000b9e4:	103f3d1e 	bne	r2,zero,1000b6dc <__alt_data_end+0xf800b6dc>
1000b9e8:	d9001b17 	ldw	r4,108(sp)
1000b9ec:	d8801c17 	ldw	r2,112(sp)
1000b9f0:	d811883a 	mov	r8,sp
1000b9f4:	21400044 	addi	r5,r4,1
1000b9f8:	003d4406 	br	1000af0c <__alt_data_end+0xf800af0c>
1000b9fc:	d9402017 	ldw	r5,128(sp)
1000ba00:	d9002117 	ldw	r4,132(sp)
1000ba04:	d9801a04 	addi	r6,sp,104
1000ba08:	d8c02a15 	stw	r3,168(sp)
1000ba0c:	000a8e80 	call	1000a8e8 <__sprint_r.part.0>
1000ba10:	d8c02a17 	ldw	r3,168(sp)
1000ba14:	103f311e 	bne	r2,zero,1000b6dc <__alt_data_end+0xf800b6dc>
1000ba18:	d9001b17 	ldw	r4,108(sp)
1000ba1c:	d8801c17 	ldw	r2,112(sp)
1000ba20:	d811883a 	mov	r8,sp
1000ba24:	21400044 	addi	r5,r4,1
1000ba28:	003ef406 	br	1000b5fc <__alt_data_end+0xf800b5fc>
1000ba2c:	1000bd1e 	bne	r2,zero,1000bd24 <___vfiprintf_internal_r+0x1328>
1000ba30:	01400044 	movi	r5,1
1000ba34:	0009883a 	mov	r4,zero
1000ba38:	d811883a 	mov	r8,sp
1000ba3c:	003ef106 	br	1000b604 <__alt_data_end+0xf800b604>
1000ba40:	d9402017 	ldw	r5,128(sp)
1000ba44:	d9002117 	ldw	r4,132(sp)
1000ba48:	d9801a04 	addi	r6,sp,104
1000ba4c:	000a8e80 	call	1000a8e8 <__sprint_r.part.0>
1000ba50:	103f221e 	bne	r2,zero,1000b6dc <__alt_data_end+0xf800b6dc>
1000ba54:	d9401b17 	ldw	r5,108(sp)
1000ba58:	d8801c17 	ldw	r2,112(sp)
1000ba5c:	d811883a 	mov	r8,sp
1000ba60:	29400044 	addi	r5,r5,1
1000ba64:	003d6206 	br	1000aff0 <__alt_data_end+0xf800aff0>
1000ba68:	01440074 	movhi	r5,4097
1000ba6c:	2949d604 	addi	r5,r5,10072
1000ba70:	d9402615 	stw	r5,152(sp)
1000ba74:	d8c02215 	stw	r3,136(sp)
1000ba78:	1023883a 	mov	r17,r2
1000ba7c:	9d04b03a 	or	r2,r19,r20
1000ba80:	103fa51e 	bne	r2,zero,1000b918 <__alt_data_end+0xf800b918>
1000ba84:	002b883a 	mov	r21,zero
1000ba88:	00800084 	movi	r2,2
1000ba8c:	003e4a06 	br	1000b3b8 <__alt_data_end+0xf800b3b8>
1000ba90:	01440074 	movhi	r5,4097
1000ba94:	2949d604 	addi	r5,r5,10072
1000ba98:	002b883a 	mov	r21,zero
1000ba9c:	d9402615 	stw	r5,152(sp)
1000baa0:	003f9e06 	br	1000b91c <__alt_data_end+0xf800b91c>
1000baa4:	d9402217 	ldw	r5,136(sp)
1000baa8:	d8001d85 	stb	zero,118(sp)
1000baac:	0029883a 	mov	r20,zero
1000bab0:	28800104 	addi	r2,r5,4
1000bab4:	2cc00017 	ldw	r19,0(r5)
1000bab8:	803e3a16 	blt	r16,zero,1000b3a4 <__alt_data_end+0xf800b3a4>
1000babc:	00ffdfc4 	movi	r3,-129
1000bac0:	d8802215 	stw	r2,136(sp)
1000bac4:	88e2703a 	and	r17,r17,r3
1000bac8:	002b883a 	mov	r21,zero
1000bacc:	983e9b26 	beq	r19,zero,1000b53c <__alt_data_end+0xf800b53c>
1000bad0:	00800244 	movi	r2,9
1000bad4:	14fdc936 	bltu	r2,r19,1000b1fc <__alt_data_end+0xf800b1fc>
1000bad8:	003e9a06 	br	1000b544 <__alt_data_end+0xf800b544>
1000badc:	00800c04 	movi	r2,48
1000bae0:	d8c01d45 	stb	r3,117(sp)
1000bae4:	d8801d05 	stb	r2,116(sp)
1000bae8:	d8001d85 	stb	zero,118(sp)
1000baec:	88c00094 	ori	r3,r17,2
1000baf0:	80009c16 	blt	r16,zero,1000bd64 <___vfiprintf_internal_r+0x1368>
1000baf4:	00bfdfc4 	movi	r2,-129
1000baf8:	88a2703a 	and	r17,r17,r2
1000bafc:	8c400094 	ori	r17,r17,2
1000bb00:	002b883a 	mov	r21,zero
1000bb04:	003f8506 	br	1000b91c <__alt_data_end+0xf800b91c>
1000bb08:	b029883a 	mov	r20,r22
1000bb0c:	003c0b06 	br	1000ab3c <__alt_data_end+0xf800ab3c>
1000bb10:	04e7c83a 	sub	r19,zero,r19
1000bb14:	05400b44 	movi	r21,45
1000bb18:	9804c03a 	cmpne	r2,r19,zero
1000bb1c:	0529c83a 	sub	r20,zero,r20
1000bb20:	dd401d85 	stb	r21,118(sp)
1000bb24:	a0a9c83a 	sub	r20,r20,r2
1000bb28:	80009716 	blt	r16,zero,1000bd88 <___vfiprintf_internal_r+0x138c>
1000bb2c:	00bfdfc4 	movi	r2,-129
1000bb30:	88a2703a 	and	r17,r17,r2
1000bb34:	003db006 	br	1000b1f8 <__alt_data_end+0xf800b1f8>
1000bb38:	b0c00007 	ldb	r3,0(r22)
1000bb3c:	003c0c06 	br	1000ab70 <__alt_data_end+0xf800ab70>
1000bb40:	8880100c 	andi	r2,r17,64
1000bb44:	d8001d85 	stb	zero,118(sp)
1000bb48:	1000461e 	bne	r2,zero,1000bc64 <___vfiprintf_internal_r+0x1268>
1000bb4c:	d9002217 	ldw	r4,136(sp)
1000bb50:	0029883a 	mov	r20,zero
1000bb54:	20800104 	addi	r2,r4,4
1000bb58:	24c00017 	ldw	r19,0(r4)
1000bb5c:	803df80e 	bge	r16,zero,1000b340 <__alt_data_end+0xf800b340>
1000bb60:	9d06b03a 	or	r3,r19,r20
1000bb64:	d8802215 	stw	r2,136(sp)
1000bb68:	183d5e1e 	bne	r3,zero,1000b0e4 <__alt_data_end+0xf800b0e4>
1000bb6c:	002b883a 	mov	r21,zero
1000bb70:	0005883a 	mov	r2,zero
1000bb74:	003e1006 	br	1000b3b8 <__alt_data_end+0xf800b3b8>
1000bb78:	8880040c 	andi	r2,r17,16
1000bb7c:	1000321e 	bne	r2,zero,1000bc48 <___vfiprintf_internal_r+0x124c>
1000bb80:	8c40100c 	andi	r17,r17,64
1000bb84:	88008d26 	beq	r17,zero,1000bdbc <___vfiprintf_internal_r+0x13c0>
1000bb88:	d9402217 	ldw	r5,136(sp)
1000bb8c:	d8c02417 	ldw	r3,144(sp)
1000bb90:	28800017 	ldw	r2,0(r5)
1000bb94:	29400104 	addi	r5,r5,4
1000bb98:	d9402215 	stw	r5,136(sp)
1000bb9c:	10c0000d 	sth	r3,0(r2)
1000bba0:	003bca06 	br	1000aacc <__alt_data_end+0xf800aacc>
1000bba4:	8880100c 	andi	r2,r17,64
1000bba8:	10003a26 	beq	r2,zero,1000bc94 <___vfiprintf_internal_r+0x1298>
1000bbac:	d8802217 	ldw	r2,136(sp)
1000bbb0:	14c0000f 	ldh	r19,0(r2)
1000bbb4:	10800104 	addi	r2,r2,4
1000bbb8:	d8802215 	stw	r2,136(sp)
1000bbbc:	9829d7fa 	srai	r20,r19,31
1000bbc0:	a005883a 	mov	r2,r20
1000bbc4:	003d8506 	br	1000b1dc <__alt_data_end+0xf800b1dc>
1000bbc8:	8880100c 	andi	r2,r17,64
1000bbcc:	10002b26 	beq	r2,zero,1000bc7c <___vfiprintf_internal_r+0x1280>
1000bbd0:	d8802217 	ldw	r2,136(sp)
1000bbd4:	0029883a 	mov	r20,zero
1000bbd8:	14c0000b 	ldhu	r19,0(r2)
1000bbdc:	10800104 	addi	r2,r2,4
1000bbe0:	d8802215 	stw	r2,136(sp)
1000bbe4:	003d5d06 	br	1000b15c <__alt_data_end+0xf800b15c>
1000bbe8:	d9402017 	ldw	r5,128(sp)
1000bbec:	d9002117 	ldw	r4,132(sp)
1000bbf0:	d9801a04 	addi	r6,sp,104
1000bbf4:	d8c02a15 	stw	r3,168(sp)
1000bbf8:	d9c02b15 	stw	r7,172(sp)
1000bbfc:	000a8e80 	call	1000a8e8 <__sprint_r.part.0>
1000bc00:	d8c02a17 	ldw	r3,168(sp)
1000bc04:	d9c02b17 	ldw	r7,172(sp)
1000bc08:	103eb41e 	bne	r2,zero,1000b6dc <__alt_data_end+0xf800b6dc>
1000bc0c:	d9001b17 	ldw	r4,108(sp)
1000bc10:	d8801c17 	ldw	r2,112(sp)
1000bc14:	d811883a 	mov	r8,sp
1000bc18:	21400044 	addi	r5,r4,1
1000bc1c:	003e6706 	br	1000b5bc <__alt_data_end+0xf800b5bc>
1000bc20:	00bfffc4 	movi	r2,-1
1000bc24:	003c4a06 	br	1000ad50 <__alt_data_end+0xf800ad50>
1000bc28:	9805883a 	mov	r2,r19
1000bc2c:	003ee806 	br	1000b7d0 <__alt_data_end+0xf800b7d0>
1000bc30:	d8c02217 	ldw	r3,136(sp)
1000bc34:	0029883a 	mov	r20,zero
1000bc38:	18800104 	addi	r2,r3,4
1000bc3c:	1cc0000b 	ldhu	r19,0(r3)
1000bc40:	803f9e0e 	bge	r16,zero,1000babc <__alt_data_end+0xf800babc>
1000bc44:	003dd706 	br	1000b3a4 <__alt_data_end+0xf800b3a4>
1000bc48:	d8c02217 	ldw	r3,136(sp)
1000bc4c:	d9002417 	ldw	r4,144(sp)
1000bc50:	18800017 	ldw	r2,0(r3)
1000bc54:	18c00104 	addi	r3,r3,4
1000bc58:	d8c02215 	stw	r3,136(sp)
1000bc5c:	11000015 	stw	r4,0(r2)
1000bc60:	003b9a06 	br	1000aacc <__alt_data_end+0xf800aacc>
1000bc64:	d8c02217 	ldw	r3,136(sp)
1000bc68:	0029883a 	mov	r20,zero
1000bc6c:	18800104 	addi	r2,r3,4
1000bc70:	1cc0000b 	ldhu	r19,0(r3)
1000bc74:	803db20e 	bge	r16,zero,1000b340 <__alt_data_end+0xf800b340>
1000bc78:	003fb906 	br	1000bb60 <__alt_data_end+0xf800bb60>
1000bc7c:	d9002217 	ldw	r4,136(sp)
1000bc80:	0029883a 	mov	r20,zero
1000bc84:	24c00017 	ldw	r19,0(r4)
1000bc88:	21000104 	addi	r4,r4,4
1000bc8c:	d9002215 	stw	r4,136(sp)
1000bc90:	003d3206 	br	1000b15c <__alt_data_end+0xf800b15c>
1000bc94:	d8c02217 	ldw	r3,136(sp)
1000bc98:	1cc00017 	ldw	r19,0(r3)
1000bc9c:	18c00104 	addi	r3,r3,4
1000bca0:	d8c02215 	stw	r3,136(sp)
1000bca4:	9829d7fa 	srai	r20,r19,31
1000bca8:	a005883a 	mov	r2,r20
1000bcac:	003d4b06 	br	1000b1dc <__alt_data_end+0xf800b1dc>
1000bcb0:	0009883a 	mov	r4,zero
1000bcb4:	01400044 	movi	r5,1
1000bcb8:	d811883a 	mov	r8,sp
1000bcbc:	003e4f06 	br	1000b5fc <__alt_data_end+0xf800b5fc>
1000bcc0:	d8c02215 	stw	r3,136(sp)
1000bcc4:	002b883a 	mov	r21,zero
1000bcc8:	003db806 	br	1000b3ac <__alt_data_end+0xf800b3ac>
1000bccc:	d811883a 	mov	r8,sp
1000bcd0:	003e9606 	br	1000b72c <__alt_data_end+0xf800b72c>
1000bcd4:	01040074 	movhi	r4,4097
1000bcd8:	210a3604 	addi	r4,r4,10456
1000bcdc:	d9002315 	stw	r4,140(sp)
1000bce0:	003e6306 	br	1000b670 <__alt_data_end+0xf800b670>
1000bce4:	b0c00043 	ldbu	r3,1(r22)
1000bce8:	8c400814 	ori	r17,r17,32
1000bcec:	b5800044 	addi	r22,r22,1
1000bcf0:	18c03fcc 	andi	r3,r3,255
1000bcf4:	18c0201c 	xori	r3,r3,128
1000bcf8:	18ffe004 	addi	r3,r3,-128
1000bcfc:	003b9c06 	br	1000ab70 <__alt_data_end+0xf800ab70>
1000bd00:	b809883a 	mov	r4,r23
1000bd04:	da002a15 	stw	r8,168(sp)
1000bd08:	000481c0 	call	1000481c <strlen>
1000bd0c:	1029883a 	mov	r20,r2
1000bd10:	dd401d83 	ldbu	r21,118(sp)
1000bd14:	df002215 	stw	fp,136(sp)
1000bd18:	0021883a 	mov	r16,zero
1000bd1c:	da002a17 	ldw	r8,168(sp)
1000bd20:	003c3906 	br	1000ae08 <__alt_data_end+0xf800ae08>
1000bd24:	d9402017 	ldw	r5,128(sp)
1000bd28:	d9002117 	ldw	r4,132(sp)
1000bd2c:	d9801a04 	addi	r6,sp,104
1000bd30:	000a8e80 	call	1000a8e8 <__sprint_r.part.0>
1000bd34:	103e691e 	bne	r2,zero,1000b6dc <__alt_data_end+0xf800b6dc>
1000bd38:	d9001b17 	ldw	r4,108(sp)
1000bd3c:	d8801c17 	ldw	r2,112(sp)
1000bd40:	d811883a 	mov	r8,sp
1000bd44:	21400044 	addi	r5,r4,1
1000bd48:	003e2e06 	br	1000b604 <__alt_data_end+0xf800b604>
1000bd4c:	01040074 	movhi	r4,4097
1000bd50:	210a3a04 	addi	r4,r4,10472
1000bd54:	d9002315 	stw	r4,140(sp)
1000bd58:	d9001b17 	ldw	r4,108(sp)
1000bd5c:	21000044 	addi	r4,r4,1
1000bd60:	003c5e06 	br	1000aedc <__alt_data_end+0xf800aedc>
1000bd64:	002b883a 	mov	r21,zero
1000bd68:	00800084 	movi	r2,2
1000bd6c:	10803fcc 	andi	r2,r2,255
1000bd70:	01000044 	movi	r4,1
1000bd74:	11002b26 	beq	r2,r4,1000be24 <___vfiprintf_internal_r+0x1428>
1000bd78:	01000084 	movi	r4,2
1000bd7c:	11002b1e 	bne	r2,r4,1000be2c <___vfiprintf_internal_r+0x1430>
1000bd80:	1823883a 	mov	r17,r3
1000bd84:	003ee506 	br	1000b91c <__alt_data_end+0xf800b91c>
1000bd88:	8807883a 	mov	r3,r17
1000bd8c:	00800044 	movi	r2,1
1000bd90:	003ff606 	br	1000bd6c <__alt_data_end+0xf800bd6c>
1000bd94:	00800184 	movi	r2,6
1000bd98:	1400012e 	bgeu	r2,r16,1000bda0 <___vfiprintf_internal_r+0x13a4>
1000bd9c:	1021883a 	mov	r16,r2
1000bda0:	8029883a 	mov	r20,r16
1000bda4:	8027883a 	mov	r19,r16
1000bda8:	80002216 	blt	r16,zero,1000be34 <___vfiprintf_internal_r+0x1438>
1000bdac:	05c40074 	movhi	r23,4097
1000bdb0:	df002215 	stw	fp,136(sp)
1000bdb4:	bdc9db04 	addi	r23,r23,10092
1000bdb8:	003cfb06 	br	1000b1a8 <__alt_data_end+0xf800b1a8>
1000bdbc:	d9002217 	ldw	r4,136(sp)
1000bdc0:	d9402417 	ldw	r5,144(sp)
1000bdc4:	20800017 	ldw	r2,0(r4)
1000bdc8:	21000104 	addi	r4,r4,4
1000bdcc:	d9002215 	stw	r4,136(sp)
1000bdd0:	11400015 	stw	r5,0(r2)
1000bdd4:	003b3d06 	br	1000aacc <__alt_data_end+0xf800aacc>
1000bdd8:	01440074 	movhi	r5,4097
1000bddc:	294a3a04 	addi	r5,r5,10472
1000bde0:	d9402315 	stw	r5,140(sp)
1000bde4:	d9401b17 	ldw	r5,108(sp)
1000bde8:	29400044 	addi	r5,r5,1
1000bdec:	003e6d06 	br	1000b7a4 <__alt_data_end+0xf800b7a4>
1000bdf0:	8029883a 	mov	r20,r16
1000bdf4:	dd401d83 	ldbu	r21,118(sp)
1000bdf8:	df002215 	stw	fp,136(sp)
1000bdfc:	0021883a 	mov	r16,zero
1000be00:	003c0106 	br	1000ae08 <__alt_data_end+0xf800ae08>
1000be04:	00c40074 	movhi	r3,4097
1000be08:	18ca3604 	addi	r3,r3,10456
1000be0c:	d8c02315 	stw	r3,140(sp)
1000be10:	280d883a 	mov	r6,r5
1000be14:	003c6906 	br	1000afbc <__alt_data_end+0xf800afbc>
1000be18:	802d883a 	mov	r22,r16
1000be1c:	0021883a 	mov	r16,zero
1000be20:	003b5406 	br	1000ab74 <__alt_data_end+0xf800ab74>
1000be24:	1823883a 	mov	r17,r3
1000be28:	003cf306 	br	1000b1f8 <__alt_data_end+0xf800b1f8>
1000be2c:	1823883a 	mov	r17,r3
1000be30:	003cad06 	br	1000b0e8 <__alt_data_end+0xf800b0e8>
1000be34:	0027883a 	mov	r19,zero
1000be38:	003fdc06 	br	1000bdac <__alt_data_end+0xf800bdac>
1000be3c:	d9402217 	ldw	r5,136(sp)
1000be40:	8005883a 	mov	r2,r16
1000be44:	b0c00043 	ldbu	r3,1(r22)
1000be48:	2c000017 	ldw	r16,0(r5)
1000be4c:	29000104 	addi	r4,r5,4
1000be50:	d9002215 	stw	r4,136(sp)
1000be54:	102d883a 	mov	r22,r2
1000be58:	803fa50e 	bge	r16,zero,1000bcf0 <__alt_data_end+0xf800bcf0>
1000be5c:	18c03fcc 	andi	r3,r3,255
1000be60:	18c0201c 	xori	r3,r3,128
1000be64:	043fffc4 	movi	r16,-1
1000be68:	18ffe004 	addi	r3,r3,-128
1000be6c:	003b4006 	br	1000ab70 <__alt_data_end+0xf800ab70>
1000be70:	d9402303 	ldbu	r5,140(sp)
1000be74:	d9401d85 	stb	r5,118(sp)
1000be78:	003cae06 	br	1000b134 <__alt_data_end+0xf800b134>
1000be7c:	d8c02303 	ldbu	r3,140(sp)
1000be80:	d8c01d85 	stb	r3,118(sp)
1000be84:	003d1406 	br	1000b2d8 <__alt_data_end+0xf800b2d8>
1000be88:	d8c02303 	ldbu	r3,140(sp)
1000be8c:	d8c01d85 	stb	r3,118(sp)
1000be90:	003cca06 	br	1000b1bc <__alt_data_end+0xf800b1bc>
1000be94:	8880004c 	andi	r2,r17,1
1000be98:	002b883a 	mov	r21,zero
1000be9c:	10000526 	beq	r2,zero,1000beb4 <___vfiprintf_internal_r+0x14b8>
1000bea0:	00800c04 	movi	r2,48
1000bea4:	d88019c5 	stb	r2,103(sp)
1000bea8:	dd002817 	ldw	r20,160(sp)
1000beac:	ddc019c4 	addi	r23,sp,103
1000beb0:	003bd506 	br	1000ae08 <__alt_data_end+0xf800ae08>
1000beb4:	0029883a 	mov	r20,zero
1000beb8:	ddc01a04 	addi	r23,sp,104
1000bebc:	003bd206 	br	1000ae08 <__alt_data_end+0xf800ae08>
1000bec0:	d9002303 	ldbu	r4,140(sp)
1000bec4:	d9001d85 	stb	r4,118(sp)
1000bec8:	003da606 	br	1000b564 <__alt_data_end+0xf800b564>
1000becc:	d8c02303 	ldbu	r3,140(sp)
1000bed0:	d8c01d85 	stb	r3,118(sp)
1000bed4:	003c7606 	br	1000b0b0 <__alt_data_end+0xf800b0b0>
1000bed8:	d8c02303 	ldbu	r3,140(sp)
1000bedc:	d8c01d85 	stb	r3,118(sp)
1000bee0:	003c6506 	br	1000b078 <__alt_data_end+0xf800b078>
1000bee4:	d9002303 	ldbu	r4,140(sp)
1000bee8:	d9001d85 	stb	r4,118(sp)
1000beec:	003d3d06 	br	1000b3e4 <__alt_data_end+0xf800b3e4>
1000bef0:	d8c02303 	ldbu	r3,140(sp)
1000bef4:	d8c01d85 	stb	r3,118(sp)
1000bef8:	003d1d06 	br	1000b370 <__alt_data_end+0xf800b370>
1000befc:	d8c02303 	ldbu	r3,140(sp)
1000bf00:	d8c01d85 	stb	r3,118(sp)
1000bf04:	003d0306 	br	1000b314 <__alt_data_end+0xf800b314>

1000bf08 <__vfiprintf_internal>:
1000bf08:	00840074 	movhi	r2,4097
1000bf0c:	10915e04 	addi	r2,r2,17784
1000bf10:	300f883a 	mov	r7,r6
1000bf14:	280d883a 	mov	r6,r5
1000bf18:	200b883a 	mov	r5,r4
1000bf1c:	11000017 	ldw	r4,0(r2)
1000bf20:	000a9fc1 	jmpi	1000a9fc <___vfiprintf_internal_r>

1000bf24 <__sbprintf>:
1000bf24:	2880030b 	ldhu	r2,12(r5)
1000bf28:	2ac01917 	ldw	r11,100(r5)
1000bf2c:	2a80038b 	ldhu	r10,14(r5)
1000bf30:	2a400717 	ldw	r9,28(r5)
1000bf34:	2a000917 	ldw	r8,36(r5)
1000bf38:	defee204 	addi	sp,sp,-1144
1000bf3c:	00c10004 	movi	r3,1024
1000bf40:	dc011a15 	stw	r16,1128(sp)
1000bf44:	10bfff4c 	andi	r2,r2,65533
1000bf48:	2821883a 	mov	r16,r5
1000bf4c:	d8cb883a 	add	r5,sp,r3
1000bf50:	dc811c15 	stw	r18,1136(sp)
1000bf54:	dc411b15 	stw	r17,1132(sp)
1000bf58:	dfc11d15 	stw	ra,1140(sp)
1000bf5c:	2025883a 	mov	r18,r4
1000bf60:	d881030d 	sth	r2,1036(sp)
1000bf64:	dac11915 	stw	r11,1124(sp)
1000bf68:	da81038d 	sth	r10,1038(sp)
1000bf6c:	da410715 	stw	r9,1052(sp)
1000bf70:	da010915 	stw	r8,1060(sp)
1000bf74:	dec10015 	stw	sp,1024(sp)
1000bf78:	dec10415 	stw	sp,1040(sp)
1000bf7c:	d8c10215 	stw	r3,1032(sp)
1000bf80:	d8c10515 	stw	r3,1044(sp)
1000bf84:	d8010615 	stw	zero,1048(sp)
1000bf88:	000a9fc0 	call	1000a9fc <___vfiprintf_internal_r>
1000bf8c:	1023883a 	mov	r17,r2
1000bf90:	10000416 	blt	r2,zero,1000bfa4 <__sbprintf+0x80>
1000bf94:	d9410004 	addi	r5,sp,1024
1000bf98:	9009883a 	mov	r4,r18
1000bf9c:	0001be00 	call	10001be0 <_fflush_r>
1000bfa0:	10000d1e 	bne	r2,zero,1000bfd8 <__sbprintf+0xb4>
1000bfa4:	d881030b 	ldhu	r2,1036(sp)
1000bfa8:	1080100c 	andi	r2,r2,64
1000bfac:	10000326 	beq	r2,zero,1000bfbc <__sbprintf+0x98>
1000bfb0:	8080030b 	ldhu	r2,12(r16)
1000bfb4:	10801014 	ori	r2,r2,64
1000bfb8:	8080030d 	sth	r2,12(r16)
1000bfbc:	8805883a 	mov	r2,r17
1000bfc0:	dfc11d17 	ldw	ra,1140(sp)
1000bfc4:	dc811c17 	ldw	r18,1136(sp)
1000bfc8:	dc411b17 	ldw	r17,1132(sp)
1000bfcc:	dc011a17 	ldw	r16,1128(sp)
1000bfd0:	dec11e04 	addi	sp,sp,1144
1000bfd4:	f800283a 	ret
1000bfd8:	047fffc4 	movi	r17,-1
1000bfdc:	003ff106 	br	1000bfa4 <__alt_data_end+0xf800bfa4>

1000bfe0 <__swbuf_r>:
1000bfe0:	defffb04 	addi	sp,sp,-20
1000bfe4:	dcc00315 	stw	r19,12(sp)
1000bfe8:	dc800215 	stw	r18,8(sp)
1000bfec:	dc000015 	stw	r16,0(sp)
1000bff0:	dfc00415 	stw	ra,16(sp)
1000bff4:	dc400115 	stw	r17,4(sp)
1000bff8:	2025883a 	mov	r18,r4
1000bffc:	2827883a 	mov	r19,r5
1000c000:	3021883a 	mov	r16,r6
1000c004:	20000226 	beq	r4,zero,1000c010 <__swbuf_r+0x30>
1000c008:	20800e17 	ldw	r2,56(r4)
1000c00c:	10004226 	beq	r2,zero,1000c118 <__swbuf_r+0x138>
1000c010:	80800617 	ldw	r2,24(r16)
1000c014:	8100030b 	ldhu	r4,12(r16)
1000c018:	80800215 	stw	r2,8(r16)
1000c01c:	2080020c 	andi	r2,r4,8
1000c020:	10003626 	beq	r2,zero,1000c0fc <__swbuf_r+0x11c>
1000c024:	80c00417 	ldw	r3,16(r16)
1000c028:	18003426 	beq	r3,zero,1000c0fc <__swbuf_r+0x11c>
1000c02c:	2088000c 	andi	r2,r4,8192
1000c030:	9c403fcc 	andi	r17,r19,255
1000c034:	10001a26 	beq	r2,zero,1000c0a0 <__swbuf_r+0xc0>
1000c038:	80800017 	ldw	r2,0(r16)
1000c03c:	81000517 	ldw	r4,20(r16)
1000c040:	10c7c83a 	sub	r3,r2,r3
1000c044:	1900200e 	bge	r3,r4,1000c0c8 <__swbuf_r+0xe8>
1000c048:	18c00044 	addi	r3,r3,1
1000c04c:	81000217 	ldw	r4,8(r16)
1000c050:	11400044 	addi	r5,r2,1
1000c054:	81400015 	stw	r5,0(r16)
1000c058:	213fffc4 	addi	r4,r4,-1
1000c05c:	81000215 	stw	r4,8(r16)
1000c060:	14c00005 	stb	r19,0(r2)
1000c064:	80800517 	ldw	r2,20(r16)
1000c068:	10c01e26 	beq	r2,r3,1000c0e4 <__swbuf_r+0x104>
1000c06c:	8080030b 	ldhu	r2,12(r16)
1000c070:	1080004c 	andi	r2,r2,1
1000c074:	10000226 	beq	r2,zero,1000c080 <__swbuf_r+0xa0>
1000c078:	00800284 	movi	r2,10
1000c07c:	88801926 	beq	r17,r2,1000c0e4 <__swbuf_r+0x104>
1000c080:	8805883a 	mov	r2,r17
1000c084:	dfc00417 	ldw	ra,16(sp)
1000c088:	dcc00317 	ldw	r19,12(sp)
1000c08c:	dc800217 	ldw	r18,8(sp)
1000c090:	dc400117 	ldw	r17,4(sp)
1000c094:	dc000017 	ldw	r16,0(sp)
1000c098:	dec00504 	addi	sp,sp,20
1000c09c:	f800283a 	ret
1000c0a0:	81401917 	ldw	r5,100(r16)
1000c0a4:	00b7ffc4 	movi	r2,-8193
1000c0a8:	21080014 	ori	r4,r4,8192
1000c0ac:	2884703a 	and	r2,r5,r2
1000c0b0:	80801915 	stw	r2,100(r16)
1000c0b4:	80800017 	ldw	r2,0(r16)
1000c0b8:	8100030d 	sth	r4,12(r16)
1000c0bc:	81000517 	ldw	r4,20(r16)
1000c0c0:	10c7c83a 	sub	r3,r2,r3
1000c0c4:	193fe016 	blt	r3,r4,1000c048 <__alt_data_end+0xf800c048>
1000c0c8:	800b883a 	mov	r5,r16
1000c0cc:	9009883a 	mov	r4,r18
1000c0d0:	0001be00 	call	10001be0 <_fflush_r>
1000c0d4:	1000071e 	bne	r2,zero,1000c0f4 <__swbuf_r+0x114>
1000c0d8:	80800017 	ldw	r2,0(r16)
1000c0dc:	00c00044 	movi	r3,1
1000c0e0:	003fda06 	br	1000c04c <__alt_data_end+0xf800c04c>
1000c0e4:	800b883a 	mov	r5,r16
1000c0e8:	9009883a 	mov	r4,r18
1000c0ec:	0001be00 	call	10001be0 <_fflush_r>
1000c0f0:	103fe326 	beq	r2,zero,1000c080 <__alt_data_end+0xf800c080>
1000c0f4:	00bfffc4 	movi	r2,-1
1000c0f8:	003fe206 	br	1000c084 <__alt_data_end+0xf800c084>
1000c0fc:	800b883a 	mov	r5,r16
1000c100:	9009883a 	mov	r4,r18
1000c104:	0006ce00 	call	10006ce0 <__swsetup_r>
1000c108:	103ffa1e 	bne	r2,zero,1000c0f4 <__alt_data_end+0xf800c0f4>
1000c10c:	8100030b 	ldhu	r4,12(r16)
1000c110:	80c00417 	ldw	r3,16(r16)
1000c114:	003fc506 	br	1000c02c <__alt_data_end+0xf800c02c>
1000c118:	0001fcc0 	call	10001fcc <__sinit>
1000c11c:	003fbc06 	br	1000c010 <__alt_data_end+0xf800c010>

1000c120 <__swbuf>:
1000c120:	00840074 	movhi	r2,4097
1000c124:	10915e04 	addi	r2,r2,17784
1000c128:	280d883a 	mov	r6,r5
1000c12c:	200b883a 	mov	r5,r4
1000c130:	11000017 	ldw	r4,0(r2)
1000c134:	000bfe01 	jmpi	1000bfe0 <__swbuf_r>

1000c138 <_calloc_r>:
1000c138:	defffe04 	addi	sp,sp,-8
1000c13c:	2805883a 	mov	r2,r5
1000c140:	dc000015 	stw	r16,0(sp)
1000c144:	300b883a 	mov	r5,r6
1000c148:	2021883a 	mov	r16,r4
1000c14c:	1009883a 	mov	r4,r2
1000c150:	dfc00115 	stw	ra,4(sp)
1000c154:	00017e40 	call	100017e4 <__mulsi3>
1000c158:	100b883a 	mov	r5,r2
1000c15c:	8009883a 	mov	r4,r16
1000c160:	00032e40 	call	100032e4 <_malloc_r>
1000c164:	10002926 	beq	r2,zero,1000c20c <_calloc_r+0xd4>
1000c168:	11bfff17 	ldw	r6,-4(r2)
1000c16c:	1021883a 	mov	r16,r2
1000c170:	00bfff04 	movi	r2,-4
1000c174:	308c703a 	and	r6,r6,r2
1000c178:	00c00904 	movi	r3,36
1000c17c:	308d883a 	add	r6,r6,r2
1000c180:	19801636 	bltu	r3,r6,1000c1dc <_calloc_r+0xa4>
1000c184:	008004c4 	movi	r2,19
1000c188:	11800b2e 	bgeu	r2,r6,1000c1b8 <_calloc_r+0x80>
1000c18c:	80000015 	stw	zero,0(r16)
1000c190:	80000115 	stw	zero,4(r16)
1000c194:	008006c4 	movi	r2,27
1000c198:	11801a2e 	bgeu	r2,r6,1000c204 <_calloc_r+0xcc>
1000c19c:	80000215 	stw	zero,8(r16)
1000c1a0:	80000315 	stw	zero,12(r16)
1000c1a4:	30c0151e 	bne	r6,r3,1000c1fc <_calloc_r+0xc4>
1000c1a8:	80000415 	stw	zero,16(r16)
1000c1ac:	80800604 	addi	r2,r16,24
1000c1b0:	80000515 	stw	zero,20(r16)
1000c1b4:	00000106 	br	1000c1bc <_calloc_r+0x84>
1000c1b8:	8005883a 	mov	r2,r16
1000c1bc:	10000015 	stw	zero,0(r2)
1000c1c0:	10000115 	stw	zero,4(r2)
1000c1c4:	10000215 	stw	zero,8(r2)
1000c1c8:	8005883a 	mov	r2,r16
1000c1cc:	dfc00117 	ldw	ra,4(sp)
1000c1d0:	dc000017 	ldw	r16,0(sp)
1000c1d4:	dec00204 	addi	sp,sp,8
1000c1d8:	f800283a 	ret
1000c1dc:	000b883a 	mov	r5,zero
1000c1e0:	8009883a 	mov	r4,r16
1000c1e4:	0003c380 	call	10003c38 <memset>
1000c1e8:	8005883a 	mov	r2,r16
1000c1ec:	dfc00117 	ldw	ra,4(sp)
1000c1f0:	dc000017 	ldw	r16,0(sp)
1000c1f4:	dec00204 	addi	sp,sp,8
1000c1f8:	f800283a 	ret
1000c1fc:	80800404 	addi	r2,r16,16
1000c200:	003fee06 	br	1000c1bc <__alt_data_end+0xf800c1bc>
1000c204:	80800204 	addi	r2,r16,8
1000c208:	003fec06 	br	1000c1bc <__alt_data_end+0xf800c1bc>
1000c20c:	0005883a 	mov	r2,zero
1000c210:	003fee06 	br	1000c1cc <__alt_data_end+0xf800c1cc>

1000c214 <__fputwc>:
1000c214:	defff804 	addi	sp,sp,-32
1000c218:	dcc00415 	stw	r19,16(sp)
1000c21c:	dc800315 	stw	r18,12(sp)
1000c220:	dc000115 	stw	r16,4(sp)
1000c224:	dfc00715 	stw	ra,28(sp)
1000c228:	dd400615 	stw	r21,24(sp)
1000c22c:	dd000515 	stw	r20,20(sp)
1000c230:	dc400215 	stw	r17,8(sp)
1000c234:	2027883a 	mov	r19,r4
1000c238:	2825883a 	mov	r18,r5
1000c23c:	3021883a 	mov	r16,r6
1000c240:	0008f200 	call	10008f20 <__locale_mb_cur_max>
1000c244:	00c00044 	movi	r3,1
1000c248:	10c03e26 	beq	r2,r3,1000c344 <__fputwc+0x130>
1000c24c:	81c01704 	addi	r7,r16,92
1000c250:	900d883a 	mov	r6,r18
1000c254:	d80b883a 	mov	r5,sp
1000c258:	9809883a 	mov	r4,r19
1000c25c:	000c41c0 	call	1000c41c <_wcrtomb_r>
1000c260:	1029883a 	mov	r20,r2
1000c264:	00bfffc4 	movi	r2,-1
1000c268:	a0802026 	beq	r20,r2,1000c2ec <__fputwc+0xd8>
1000c26c:	d9400003 	ldbu	r5,0(sp)
1000c270:	a0001c26 	beq	r20,zero,1000c2e4 <__fputwc+0xd0>
1000c274:	0023883a 	mov	r17,zero
1000c278:	05400284 	movi	r21,10
1000c27c:	00000906 	br	1000c2a4 <__fputwc+0x90>
1000c280:	80800017 	ldw	r2,0(r16)
1000c284:	11400005 	stb	r5,0(r2)
1000c288:	80c00017 	ldw	r3,0(r16)
1000c28c:	18c00044 	addi	r3,r3,1
1000c290:	80c00015 	stw	r3,0(r16)
1000c294:	8c400044 	addi	r17,r17,1
1000c298:	dc45883a 	add	r2,sp,r17
1000c29c:	8d00112e 	bgeu	r17,r20,1000c2e4 <__fputwc+0xd0>
1000c2a0:	11400003 	ldbu	r5,0(r2)
1000c2a4:	80c00217 	ldw	r3,8(r16)
1000c2a8:	18ffffc4 	addi	r3,r3,-1
1000c2ac:	80c00215 	stw	r3,8(r16)
1000c2b0:	183ff30e 	bge	r3,zero,1000c280 <__alt_data_end+0xf800c280>
1000c2b4:	80800617 	ldw	r2,24(r16)
1000c2b8:	18801916 	blt	r3,r2,1000c320 <__fputwc+0x10c>
1000c2bc:	80800017 	ldw	r2,0(r16)
1000c2c0:	11400005 	stb	r5,0(r2)
1000c2c4:	80800017 	ldw	r2,0(r16)
1000c2c8:	10c00003 	ldbu	r3,0(r2)
1000c2cc:	10800044 	addi	r2,r2,1
1000c2d0:	1d402326 	beq	r3,r21,1000c360 <__fputwc+0x14c>
1000c2d4:	80800015 	stw	r2,0(r16)
1000c2d8:	8c400044 	addi	r17,r17,1
1000c2dc:	dc45883a 	add	r2,sp,r17
1000c2e0:	8d3fef36 	bltu	r17,r20,1000c2a0 <__alt_data_end+0xf800c2a0>
1000c2e4:	9005883a 	mov	r2,r18
1000c2e8:	00000406 	br	1000c2fc <__fputwc+0xe8>
1000c2ec:	80c0030b 	ldhu	r3,12(r16)
1000c2f0:	a005883a 	mov	r2,r20
1000c2f4:	18c01014 	ori	r3,r3,64
1000c2f8:	80c0030d 	sth	r3,12(r16)
1000c2fc:	dfc00717 	ldw	ra,28(sp)
1000c300:	dd400617 	ldw	r21,24(sp)
1000c304:	dd000517 	ldw	r20,20(sp)
1000c308:	dcc00417 	ldw	r19,16(sp)
1000c30c:	dc800317 	ldw	r18,12(sp)
1000c310:	dc400217 	ldw	r17,8(sp)
1000c314:	dc000117 	ldw	r16,4(sp)
1000c318:	dec00804 	addi	sp,sp,32
1000c31c:	f800283a 	ret
1000c320:	800d883a 	mov	r6,r16
1000c324:	29403fcc 	andi	r5,r5,255
1000c328:	9809883a 	mov	r4,r19
1000c32c:	000bfe00 	call	1000bfe0 <__swbuf_r>
1000c330:	10bfffe0 	cmpeqi	r2,r2,-1
1000c334:	10803fcc 	andi	r2,r2,255
1000c338:	103fd626 	beq	r2,zero,1000c294 <__alt_data_end+0xf800c294>
1000c33c:	00bfffc4 	movi	r2,-1
1000c340:	003fee06 	br	1000c2fc <__alt_data_end+0xf800c2fc>
1000c344:	90ffffc4 	addi	r3,r18,-1
1000c348:	01003f84 	movi	r4,254
1000c34c:	20ffbf36 	bltu	r4,r3,1000c24c <__alt_data_end+0xf800c24c>
1000c350:	900b883a 	mov	r5,r18
1000c354:	dc800005 	stb	r18,0(sp)
1000c358:	1029883a 	mov	r20,r2
1000c35c:	003fc506 	br	1000c274 <__alt_data_end+0xf800c274>
1000c360:	800d883a 	mov	r6,r16
1000c364:	a80b883a 	mov	r5,r21
1000c368:	9809883a 	mov	r4,r19
1000c36c:	000bfe00 	call	1000bfe0 <__swbuf_r>
1000c370:	10bfffe0 	cmpeqi	r2,r2,-1
1000c374:	003fef06 	br	1000c334 <__alt_data_end+0xf800c334>

1000c378 <_fputwc_r>:
1000c378:	3080030b 	ldhu	r2,12(r6)
1000c37c:	10c8000c 	andi	r3,r2,8192
1000c380:	1800051e 	bne	r3,zero,1000c398 <_fputwc_r+0x20>
1000c384:	30c01917 	ldw	r3,100(r6)
1000c388:	10880014 	ori	r2,r2,8192
1000c38c:	3080030d 	sth	r2,12(r6)
1000c390:	18880014 	ori	r2,r3,8192
1000c394:	30801915 	stw	r2,100(r6)
1000c398:	000c2141 	jmpi	1000c214 <__fputwc>

1000c39c <fputwc>:
1000c39c:	00840074 	movhi	r2,4097
1000c3a0:	defffc04 	addi	sp,sp,-16
1000c3a4:	10915e04 	addi	r2,r2,17784
1000c3a8:	dc000115 	stw	r16,4(sp)
1000c3ac:	14000017 	ldw	r16,0(r2)
1000c3b0:	dc400215 	stw	r17,8(sp)
1000c3b4:	dfc00315 	stw	ra,12(sp)
1000c3b8:	2023883a 	mov	r17,r4
1000c3bc:	80000226 	beq	r16,zero,1000c3c8 <fputwc+0x2c>
1000c3c0:	80800e17 	ldw	r2,56(r16)
1000c3c4:	10001026 	beq	r2,zero,1000c408 <fputwc+0x6c>
1000c3c8:	2880030b 	ldhu	r2,12(r5)
1000c3cc:	10c8000c 	andi	r3,r2,8192
1000c3d0:	1800051e 	bne	r3,zero,1000c3e8 <fputwc+0x4c>
1000c3d4:	28c01917 	ldw	r3,100(r5)
1000c3d8:	10880014 	ori	r2,r2,8192
1000c3dc:	2880030d 	sth	r2,12(r5)
1000c3e0:	18880014 	ori	r2,r3,8192
1000c3e4:	28801915 	stw	r2,100(r5)
1000c3e8:	280d883a 	mov	r6,r5
1000c3ec:	8009883a 	mov	r4,r16
1000c3f0:	880b883a 	mov	r5,r17
1000c3f4:	dfc00317 	ldw	ra,12(sp)
1000c3f8:	dc400217 	ldw	r17,8(sp)
1000c3fc:	dc000117 	ldw	r16,4(sp)
1000c400:	dec00404 	addi	sp,sp,16
1000c404:	000c2141 	jmpi	1000c214 <__fputwc>
1000c408:	8009883a 	mov	r4,r16
1000c40c:	d9400015 	stw	r5,0(sp)
1000c410:	0001fcc0 	call	10001fcc <__sinit>
1000c414:	d9400017 	ldw	r5,0(sp)
1000c418:	003feb06 	br	1000c3c8 <__alt_data_end+0xf800c3c8>

1000c41c <_wcrtomb_r>:
1000c41c:	defff604 	addi	sp,sp,-40
1000c420:	00840074 	movhi	r2,4097
1000c424:	dc800815 	stw	r18,32(sp)
1000c428:	dc400715 	stw	r17,28(sp)
1000c42c:	dc000615 	stw	r16,24(sp)
1000c430:	10916204 	addi	r2,r2,17800
1000c434:	dfc00915 	stw	ra,36(sp)
1000c438:	2021883a 	mov	r16,r4
1000c43c:	3823883a 	mov	r17,r7
1000c440:	14800017 	ldw	r18,0(r2)
1000c444:	28001426 	beq	r5,zero,1000c498 <_wcrtomb_r+0x7c>
1000c448:	d9400415 	stw	r5,16(sp)
1000c44c:	d9800515 	stw	r6,20(sp)
1000c450:	0008f140 	call	10008f14 <__locale_charset>
1000c454:	d9800517 	ldw	r6,20(sp)
1000c458:	d9400417 	ldw	r5,16(sp)
1000c45c:	100f883a 	mov	r7,r2
1000c460:	dc400015 	stw	r17,0(sp)
1000c464:	8009883a 	mov	r4,r16
1000c468:	903ee83a 	callr	r18
1000c46c:	00ffffc4 	movi	r3,-1
1000c470:	10c0031e 	bne	r2,r3,1000c480 <_wcrtomb_r+0x64>
1000c474:	88000015 	stw	zero,0(r17)
1000c478:	00c02284 	movi	r3,138
1000c47c:	80c00015 	stw	r3,0(r16)
1000c480:	dfc00917 	ldw	ra,36(sp)
1000c484:	dc800817 	ldw	r18,32(sp)
1000c488:	dc400717 	ldw	r17,28(sp)
1000c48c:	dc000617 	ldw	r16,24(sp)
1000c490:	dec00a04 	addi	sp,sp,40
1000c494:	f800283a 	ret
1000c498:	0008f140 	call	10008f14 <__locale_charset>
1000c49c:	100f883a 	mov	r7,r2
1000c4a0:	dc400015 	stw	r17,0(sp)
1000c4a4:	000d883a 	mov	r6,zero
1000c4a8:	d9400104 	addi	r5,sp,4
1000c4ac:	8009883a 	mov	r4,r16
1000c4b0:	903ee83a 	callr	r18
1000c4b4:	003fed06 	br	1000c46c <__alt_data_end+0xf800c46c>

1000c4b8 <wcrtomb>:
1000c4b8:	defff604 	addi	sp,sp,-40
1000c4bc:	00840074 	movhi	r2,4097
1000c4c0:	dc800615 	stw	r18,24(sp)
1000c4c4:	dc400515 	stw	r17,20(sp)
1000c4c8:	10915e04 	addi	r2,r2,17784
1000c4cc:	dfc00915 	stw	ra,36(sp)
1000c4d0:	dd000815 	stw	r20,32(sp)
1000c4d4:	dcc00715 	stw	r19,28(sp)
1000c4d8:	dc000415 	stw	r16,16(sp)
1000c4dc:	3025883a 	mov	r18,r6
1000c4e0:	14400017 	ldw	r17,0(r2)
1000c4e4:	20001926 	beq	r4,zero,1000c54c <wcrtomb+0x94>
1000c4e8:	00840074 	movhi	r2,4097
1000c4ec:	10916204 	addi	r2,r2,17800
1000c4f0:	15000017 	ldw	r20,0(r2)
1000c4f4:	2021883a 	mov	r16,r4
1000c4f8:	2827883a 	mov	r19,r5
1000c4fc:	0008f140 	call	10008f14 <__locale_charset>
1000c500:	100f883a 	mov	r7,r2
1000c504:	dc800015 	stw	r18,0(sp)
1000c508:	980d883a 	mov	r6,r19
1000c50c:	800b883a 	mov	r5,r16
1000c510:	8809883a 	mov	r4,r17
1000c514:	a03ee83a 	callr	r20
1000c518:	00ffffc4 	movi	r3,-1
1000c51c:	10c0031e 	bne	r2,r3,1000c52c <wcrtomb+0x74>
1000c520:	90000015 	stw	zero,0(r18)
1000c524:	00c02284 	movi	r3,138
1000c528:	88c00015 	stw	r3,0(r17)
1000c52c:	dfc00917 	ldw	ra,36(sp)
1000c530:	dd000817 	ldw	r20,32(sp)
1000c534:	dcc00717 	ldw	r19,28(sp)
1000c538:	dc800617 	ldw	r18,24(sp)
1000c53c:	dc400517 	ldw	r17,20(sp)
1000c540:	dc000417 	ldw	r16,16(sp)
1000c544:	dec00a04 	addi	sp,sp,40
1000c548:	f800283a 	ret
1000c54c:	00840074 	movhi	r2,4097
1000c550:	10916204 	addi	r2,r2,17800
1000c554:	14000017 	ldw	r16,0(r2)
1000c558:	0008f140 	call	10008f14 <__locale_charset>
1000c55c:	100f883a 	mov	r7,r2
1000c560:	dc800015 	stw	r18,0(sp)
1000c564:	000d883a 	mov	r6,zero
1000c568:	d9400104 	addi	r5,sp,4
1000c56c:	8809883a 	mov	r4,r17
1000c570:	803ee83a 	callr	r16
1000c574:	003fe806 	br	1000c518 <__alt_data_end+0xf800c518>

1000c578 <__ascii_wctomb>:
1000c578:	28000526 	beq	r5,zero,1000c590 <__ascii_wctomb+0x18>
1000c57c:	00803fc4 	movi	r2,255
1000c580:	11800536 	bltu	r2,r6,1000c598 <__ascii_wctomb+0x20>
1000c584:	29800005 	stb	r6,0(r5)
1000c588:	00800044 	movi	r2,1
1000c58c:	f800283a 	ret
1000c590:	0005883a 	mov	r2,zero
1000c594:	f800283a 	ret
1000c598:	00802284 	movi	r2,138
1000c59c:	20800015 	stw	r2,0(r4)
1000c5a0:	00bfffc4 	movi	r2,-1
1000c5a4:	f800283a 	ret

1000c5a8 <_wctomb_r>:
1000c5a8:	00840074 	movhi	r2,4097
1000c5ac:	defff904 	addi	sp,sp,-28
1000c5b0:	10916204 	addi	r2,r2,17800
1000c5b4:	dfc00615 	stw	ra,24(sp)
1000c5b8:	dc400515 	stw	r17,20(sp)
1000c5bc:	dc000415 	stw	r16,16(sp)
1000c5c0:	3823883a 	mov	r17,r7
1000c5c4:	14000017 	ldw	r16,0(r2)
1000c5c8:	d9000115 	stw	r4,4(sp)
1000c5cc:	d9400215 	stw	r5,8(sp)
1000c5d0:	d9800315 	stw	r6,12(sp)
1000c5d4:	0008f140 	call	10008f14 <__locale_charset>
1000c5d8:	d9800317 	ldw	r6,12(sp)
1000c5dc:	d9400217 	ldw	r5,8(sp)
1000c5e0:	d9000117 	ldw	r4,4(sp)
1000c5e4:	100f883a 	mov	r7,r2
1000c5e8:	dc400015 	stw	r17,0(sp)
1000c5ec:	803ee83a 	callr	r16
1000c5f0:	dfc00617 	ldw	ra,24(sp)
1000c5f4:	dc400517 	ldw	r17,20(sp)
1000c5f8:	dc000417 	ldw	r16,16(sp)
1000c5fc:	dec00704 	addi	sp,sp,28
1000c600:	f800283a 	ret

1000c604 <__udivdi3>:
1000c604:	defff404 	addi	sp,sp,-48
1000c608:	dcc00515 	stw	r19,20(sp)
1000c60c:	dc000215 	stw	r16,8(sp)
1000c610:	dfc00b15 	stw	ra,44(sp)
1000c614:	df000a15 	stw	fp,40(sp)
1000c618:	ddc00915 	stw	r23,36(sp)
1000c61c:	dd800815 	stw	r22,32(sp)
1000c620:	dd400715 	stw	r21,28(sp)
1000c624:	dd000615 	stw	r20,24(sp)
1000c628:	dc800415 	stw	r18,16(sp)
1000c62c:	dc400315 	stw	r17,12(sp)
1000c630:	2027883a 	mov	r19,r4
1000c634:	2821883a 	mov	r16,r5
1000c638:	3800461e 	bne	r7,zero,1000c754 <__udivdi3+0x150>
1000c63c:	3023883a 	mov	r17,r6
1000c640:	2025883a 	mov	r18,r4
1000c644:	2980572e 	bgeu	r5,r6,1000c7a4 <__udivdi3+0x1a0>
1000c648:	00bfffd4 	movui	r2,65535
1000c64c:	282d883a 	mov	r22,r5
1000c650:	1180b236 	bltu	r2,r6,1000c91c <__udivdi3+0x318>
1000c654:	00803fc4 	movi	r2,255
1000c658:	1185803a 	cmpltu	r2,r2,r6
1000c65c:	100490fa 	slli	r2,r2,3
1000c660:	3086d83a 	srl	r3,r6,r2
1000c664:	01040074 	movhi	r4,4097
1000c668:	210a3e04 	addi	r4,r4,10488
1000c66c:	20c7883a 	add	r3,r4,r3
1000c670:	18c00003 	ldbu	r3,0(r3)
1000c674:	1885883a 	add	r2,r3,r2
1000c678:	00c00804 	movi	r3,32
1000c67c:	1887c83a 	sub	r3,r3,r2
1000c680:	18000526 	beq	r3,zero,1000c698 <__udivdi3+0x94>
1000c684:	80e0983a 	sll	r16,r16,r3
1000c688:	9884d83a 	srl	r2,r19,r2
1000c68c:	30e2983a 	sll	r17,r6,r3
1000c690:	98e4983a 	sll	r18,r19,r3
1000c694:	142cb03a 	or	r22,r2,r16
1000c698:	882ad43a 	srli	r21,r17,16
1000c69c:	b009883a 	mov	r4,r22
1000c6a0:	8d3fffcc 	andi	r20,r17,65535
1000c6a4:	a80b883a 	mov	r5,r21
1000c6a8:	000178c0 	call	1000178c <__umodsi3>
1000c6ac:	b009883a 	mov	r4,r22
1000c6b0:	a80b883a 	mov	r5,r21
1000c6b4:	1027883a 	mov	r19,r2
1000c6b8:	00017280 	call	10001728 <__udivsi3>
1000c6bc:	100b883a 	mov	r5,r2
1000c6c0:	a009883a 	mov	r4,r20
1000c6c4:	102d883a 	mov	r22,r2
1000c6c8:	00017e40 	call	100017e4 <__mulsi3>
1000c6cc:	9826943a 	slli	r19,r19,16
1000c6d0:	9006d43a 	srli	r3,r18,16
1000c6d4:	1cc6b03a 	or	r3,r3,r19
1000c6d8:	1880052e 	bgeu	r3,r2,1000c6f0 <__udivdi3+0xec>
1000c6dc:	1c47883a 	add	r3,r3,r17
1000c6e0:	b13fffc4 	addi	r4,r22,-1
1000c6e4:	1c400136 	bltu	r3,r17,1000c6ec <__udivdi3+0xe8>
1000c6e8:	18814236 	bltu	r3,r2,1000cbf4 <__udivdi3+0x5f0>
1000c6ec:	202d883a 	mov	r22,r4
1000c6f0:	18a1c83a 	sub	r16,r3,r2
1000c6f4:	8009883a 	mov	r4,r16
1000c6f8:	a80b883a 	mov	r5,r21
1000c6fc:	000178c0 	call	1000178c <__umodsi3>
1000c700:	1027883a 	mov	r19,r2
1000c704:	8009883a 	mov	r4,r16
1000c708:	a80b883a 	mov	r5,r21
1000c70c:	9826943a 	slli	r19,r19,16
1000c710:	00017280 	call	10001728 <__udivsi3>
1000c714:	100b883a 	mov	r5,r2
1000c718:	a009883a 	mov	r4,r20
1000c71c:	94bfffcc 	andi	r18,r18,65535
1000c720:	1021883a 	mov	r16,r2
1000c724:	94e4b03a 	or	r18,r18,r19
1000c728:	00017e40 	call	100017e4 <__mulsi3>
1000c72c:	9080052e 	bgeu	r18,r2,1000c744 <__udivdi3+0x140>
1000c730:	8ca5883a 	add	r18,r17,r18
1000c734:	80ffffc4 	addi	r3,r16,-1
1000c738:	94410c36 	bltu	r18,r17,1000cb6c <__udivdi3+0x568>
1000c73c:	90810b2e 	bgeu	r18,r2,1000cb6c <__udivdi3+0x568>
1000c740:	843fff84 	addi	r16,r16,-2
1000c744:	b004943a 	slli	r2,r22,16
1000c748:	0007883a 	mov	r3,zero
1000c74c:	1404b03a 	or	r2,r2,r16
1000c750:	00005e06 	br	1000c8cc <__udivdi3+0x2c8>
1000c754:	29c05b36 	bltu	r5,r7,1000c8c4 <__udivdi3+0x2c0>
1000c758:	00bfffd4 	movui	r2,65535
1000c75c:	11c0672e 	bgeu	r2,r7,1000c8fc <__udivdi3+0x2f8>
1000c760:	00804034 	movhi	r2,256
1000c764:	10bfffc4 	addi	r2,r2,-1
1000c768:	11c10a36 	bltu	r2,r7,1000cb94 <__udivdi3+0x590>
1000c76c:	00800404 	movi	r2,16
1000c770:	3886d83a 	srl	r3,r7,r2
1000c774:	01040074 	movhi	r4,4097
1000c778:	210a3e04 	addi	r4,r4,10488
1000c77c:	20c7883a 	add	r3,r4,r3
1000c780:	18c00003 	ldbu	r3,0(r3)
1000c784:	05c00804 	movi	r23,32
1000c788:	1885883a 	add	r2,r3,r2
1000c78c:	b8afc83a 	sub	r23,r23,r2
1000c790:	b800671e 	bne	r23,zero,1000c930 <__udivdi3+0x32c>
1000c794:	3c010536 	bltu	r7,r16,1000cbac <__udivdi3+0x5a8>
1000c798:	9985403a 	cmpgeu	r2,r19,r6
1000c79c:	0007883a 	mov	r3,zero
1000c7a0:	00004a06 	br	1000c8cc <__udivdi3+0x2c8>
1000c7a4:	3000041e 	bne	r6,zero,1000c7b8 <__udivdi3+0x1b4>
1000c7a8:	000b883a 	mov	r5,zero
1000c7ac:	01000044 	movi	r4,1
1000c7b0:	00017280 	call	10001728 <__udivsi3>
1000c7b4:	1023883a 	mov	r17,r2
1000c7b8:	00bfffd4 	movui	r2,65535
1000c7bc:	1440532e 	bgeu	r2,r17,1000c90c <__udivdi3+0x308>
1000c7c0:	00804034 	movhi	r2,256
1000c7c4:	10bfffc4 	addi	r2,r2,-1
1000c7c8:	1440f436 	bltu	r2,r17,1000cb9c <__udivdi3+0x598>
1000c7cc:	00800404 	movi	r2,16
1000c7d0:	8886d83a 	srl	r3,r17,r2
1000c7d4:	01040074 	movhi	r4,4097
1000c7d8:	210a3e04 	addi	r4,r4,10488
1000c7dc:	20c7883a 	add	r3,r4,r3
1000c7e0:	18c00003 	ldbu	r3,0(r3)
1000c7e4:	1885883a 	add	r2,r3,r2
1000c7e8:	00c00804 	movi	r3,32
1000c7ec:	1887c83a 	sub	r3,r3,r2
1000c7f0:	1800a51e 	bne	r3,zero,1000ca88 <__udivdi3+0x484>
1000c7f4:	882ad43a 	srli	r21,r17,16
1000c7f8:	8461c83a 	sub	r16,r16,r17
1000c7fc:	8d3fffcc 	andi	r20,r17,65535
1000c800:	00c00044 	movi	r3,1
1000c804:	a80b883a 	mov	r5,r21
1000c808:	8009883a 	mov	r4,r16
1000c80c:	d8c00115 	stw	r3,4(sp)
1000c810:	000178c0 	call	1000178c <__umodsi3>
1000c814:	a80b883a 	mov	r5,r21
1000c818:	8009883a 	mov	r4,r16
1000c81c:	1027883a 	mov	r19,r2
1000c820:	00017280 	call	10001728 <__udivsi3>
1000c824:	a00b883a 	mov	r5,r20
1000c828:	1009883a 	mov	r4,r2
1000c82c:	102d883a 	mov	r22,r2
1000c830:	00017e40 	call	100017e4 <__mulsi3>
1000c834:	9826943a 	slli	r19,r19,16
1000c838:	900ed43a 	srli	r7,r18,16
1000c83c:	d8c00117 	ldw	r3,4(sp)
1000c840:	3cceb03a 	or	r7,r7,r19
1000c844:	3880052e 	bgeu	r7,r2,1000c85c <__udivdi3+0x258>
1000c848:	3c4f883a 	add	r7,r7,r17
1000c84c:	b13fffc4 	addi	r4,r22,-1
1000c850:	3c400136 	bltu	r7,r17,1000c858 <__udivdi3+0x254>
1000c854:	3880e436 	bltu	r7,r2,1000cbe8 <__udivdi3+0x5e4>
1000c858:	202d883a 	mov	r22,r4
1000c85c:	38a1c83a 	sub	r16,r7,r2
1000c860:	8009883a 	mov	r4,r16
1000c864:	a80b883a 	mov	r5,r21
1000c868:	d8c00115 	stw	r3,4(sp)
1000c86c:	000178c0 	call	1000178c <__umodsi3>
1000c870:	1027883a 	mov	r19,r2
1000c874:	8009883a 	mov	r4,r16
1000c878:	a80b883a 	mov	r5,r21
1000c87c:	9826943a 	slli	r19,r19,16
1000c880:	00017280 	call	10001728 <__udivsi3>
1000c884:	a00b883a 	mov	r5,r20
1000c888:	1009883a 	mov	r4,r2
1000c88c:	94bfffcc 	andi	r18,r18,65535
1000c890:	1021883a 	mov	r16,r2
1000c894:	94e4b03a 	or	r18,r18,r19
1000c898:	00017e40 	call	100017e4 <__mulsi3>
1000c89c:	d8c00117 	ldw	r3,4(sp)
1000c8a0:	9080052e 	bgeu	r18,r2,1000c8b8 <__udivdi3+0x2b4>
1000c8a4:	8ca5883a 	add	r18,r17,r18
1000c8a8:	813fffc4 	addi	r4,r16,-1
1000c8ac:	9440ad36 	bltu	r18,r17,1000cb64 <__udivdi3+0x560>
1000c8b0:	9080ac2e 	bgeu	r18,r2,1000cb64 <__udivdi3+0x560>
1000c8b4:	843fff84 	addi	r16,r16,-2
1000c8b8:	b004943a 	slli	r2,r22,16
1000c8bc:	1404b03a 	or	r2,r2,r16
1000c8c0:	00000206 	br	1000c8cc <__udivdi3+0x2c8>
1000c8c4:	0007883a 	mov	r3,zero
1000c8c8:	0005883a 	mov	r2,zero
1000c8cc:	dfc00b17 	ldw	ra,44(sp)
1000c8d0:	df000a17 	ldw	fp,40(sp)
1000c8d4:	ddc00917 	ldw	r23,36(sp)
1000c8d8:	dd800817 	ldw	r22,32(sp)
1000c8dc:	dd400717 	ldw	r21,28(sp)
1000c8e0:	dd000617 	ldw	r20,24(sp)
1000c8e4:	dcc00517 	ldw	r19,20(sp)
1000c8e8:	dc800417 	ldw	r18,16(sp)
1000c8ec:	dc400317 	ldw	r17,12(sp)
1000c8f0:	dc000217 	ldw	r16,8(sp)
1000c8f4:	dec00c04 	addi	sp,sp,48
1000c8f8:	f800283a 	ret
1000c8fc:	00803fc4 	movi	r2,255
1000c900:	11c5803a 	cmpltu	r2,r2,r7
1000c904:	100490fa 	slli	r2,r2,3
1000c908:	003f9906 	br	1000c770 <__alt_data_end+0xf800c770>
1000c90c:	00803fc4 	movi	r2,255
1000c910:	1445803a 	cmpltu	r2,r2,r17
1000c914:	100490fa 	slli	r2,r2,3
1000c918:	003fad06 	br	1000c7d0 <__alt_data_end+0xf800c7d0>
1000c91c:	00804034 	movhi	r2,256
1000c920:	10bfffc4 	addi	r2,r2,-1
1000c924:	11809f36 	bltu	r2,r6,1000cba4 <__udivdi3+0x5a0>
1000c928:	00800404 	movi	r2,16
1000c92c:	003f4c06 	br	1000c660 <__alt_data_end+0xf800c660>
1000c930:	3dce983a 	sll	r7,r7,r23
1000c934:	30b8d83a 	srl	fp,r6,r2
1000c938:	80a2d83a 	srl	r17,r16,r2
1000c93c:	35cc983a 	sll	r6,r6,r23
1000c940:	3f38b03a 	or	fp,r7,fp
1000c944:	e024d43a 	srli	r18,fp,16
1000c948:	9884d83a 	srl	r2,r19,r2
1000c94c:	85e0983a 	sll	r16,r16,r23
1000c950:	8809883a 	mov	r4,r17
1000c954:	900b883a 	mov	r5,r18
1000c958:	d9800015 	stw	r6,0(sp)
1000c95c:	1420b03a 	or	r16,r2,r16
1000c960:	000178c0 	call	1000178c <__umodsi3>
1000c964:	900b883a 	mov	r5,r18
1000c968:	8809883a 	mov	r4,r17
1000c96c:	1029883a 	mov	r20,r2
1000c970:	e5bfffcc 	andi	r22,fp,65535
1000c974:	00017280 	call	10001728 <__udivsi3>
1000c978:	100b883a 	mov	r5,r2
1000c97c:	b009883a 	mov	r4,r22
1000c980:	102b883a 	mov	r21,r2
1000c984:	00017e40 	call	100017e4 <__mulsi3>
1000c988:	a028943a 	slli	r20,r20,16
1000c98c:	8006d43a 	srli	r3,r16,16
1000c990:	1d06b03a 	or	r3,r3,r20
1000c994:	1880042e 	bgeu	r3,r2,1000c9a8 <__udivdi3+0x3a4>
1000c998:	1f07883a 	add	r3,r3,fp
1000c99c:	a93fffc4 	addi	r4,r21,-1
1000c9a0:	1f00892e 	bgeu	r3,fp,1000cbc8 <__udivdi3+0x5c4>
1000c9a4:	202b883a 	mov	r21,r4
1000c9a8:	18a3c83a 	sub	r17,r3,r2
1000c9ac:	8809883a 	mov	r4,r17
1000c9b0:	900b883a 	mov	r5,r18
1000c9b4:	000178c0 	call	1000178c <__umodsi3>
1000c9b8:	1029883a 	mov	r20,r2
1000c9bc:	8809883a 	mov	r4,r17
1000c9c0:	900b883a 	mov	r5,r18
1000c9c4:	a028943a 	slli	r20,r20,16
1000c9c8:	00017280 	call	10001728 <__udivsi3>
1000c9cc:	100b883a 	mov	r5,r2
1000c9d0:	b009883a 	mov	r4,r22
1000c9d4:	843fffcc 	andi	r16,r16,65535
1000c9d8:	1023883a 	mov	r17,r2
1000c9dc:	8520b03a 	or	r16,r16,r20
1000c9e0:	00017e40 	call	100017e4 <__mulsi3>
1000c9e4:	8080042e 	bgeu	r16,r2,1000c9f8 <__udivdi3+0x3f4>
1000c9e8:	8721883a 	add	r16,r16,fp
1000c9ec:	88ffffc4 	addi	r3,r17,-1
1000c9f0:	8700712e 	bgeu	r16,fp,1000cbb8 <__udivdi3+0x5b4>
1000c9f4:	1823883a 	mov	r17,r3
1000c9f8:	a80e943a 	slli	r7,r21,16
1000c9fc:	d8c00017 	ldw	r3,0(sp)
1000ca00:	80a1c83a 	sub	r16,r16,r2
1000ca04:	3c64b03a 	or	r18,r7,r17
1000ca08:	1d3fffcc 	andi	r20,r3,65535
1000ca0c:	9022d43a 	srli	r17,r18,16
1000ca10:	95bfffcc 	andi	r22,r18,65535
1000ca14:	a00b883a 	mov	r5,r20
1000ca18:	b009883a 	mov	r4,r22
1000ca1c:	182ad43a 	srli	r21,r3,16
1000ca20:	00017e40 	call	100017e4 <__mulsi3>
1000ca24:	a00b883a 	mov	r5,r20
1000ca28:	8809883a 	mov	r4,r17
1000ca2c:	1039883a 	mov	fp,r2
1000ca30:	00017e40 	call	100017e4 <__mulsi3>
1000ca34:	8809883a 	mov	r4,r17
1000ca38:	a80b883a 	mov	r5,r21
1000ca3c:	1029883a 	mov	r20,r2
1000ca40:	00017e40 	call	100017e4 <__mulsi3>
1000ca44:	a80b883a 	mov	r5,r21
1000ca48:	b009883a 	mov	r4,r22
1000ca4c:	1023883a 	mov	r17,r2
1000ca50:	00017e40 	call	100017e4 <__mulsi3>
1000ca54:	e006d43a 	srli	r3,fp,16
1000ca58:	1505883a 	add	r2,r2,r20
1000ca5c:	1887883a 	add	r3,r3,r2
1000ca60:	1d00022e 	bgeu	r3,r20,1000ca6c <__udivdi3+0x468>
1000ca64:	00800074 	movhi	r2,1
1000ca68:	88a3883a 	add	r17,r17,r2
1000ca6c:	1804d43a 	srli	r2,r3,16
1000ca70:	1463883a 	add	r17,r2,r17
1000ca74:	84404436 	bltu	r16,r17,1000cb88 <__udivdi3+0x584>
1000ca78:	84403e26 	beq	r16,r17,1000cb74 <__udivdi3+0x570>
1000ca7c:	9005883a 	mov	r2,r18
1000ca80:	0007883a 	mov	r3,zero
1000ca84:	003f9106 	br	1000c8cc <__alt_data_end+0xf800c8cc>
1000ca88:	88e2983a 	sll	r17,r17,r3
1000ca8c:	80aed83a 	srl	r23,r16,r2
1000ca90:	80e0983a 	sll	r16,r16,r3
1000ca94:	882ad43a 	srli	r21,r17,16
1000ca98:	9884d83a 	srl	r2,r19,r2
1000ca9c:	b809883a 	mov	r4,r23
1000caa0:	a80b883a 	mov	r5,r21
1000caa4:	98e4983a 	sll	r18,r19,r3
1000caa8:	142cb03a 	or	r22,r2,r16
1000caac:	000178c0 	call	1000178c <__umodsi3>
1000cab0:	b809883a 	mov	r4,r23
1000cab4:	a80b883a 	mov	r5,r21
1000cab8:	1027883a 	mov	r19,r2
1000cabc:	8d3fffcc 	andi	r20,r17,65535
1000cac0:	00017280 	call	10001728 <__udivsi3>
1000cac4:	a009883a 	mov	r4,r20
1000cac8:	100b883a 	mov	r5,r2
1000cacc:	102f883a 	mov	r23,r2
1000cad0:	00017e40 	call	100017e4 <__mulsi3>
1000cad4:	9826943a 	slli	r19,r19,16
1000cad8:	b008d43a 	srli	r4,r22,16
1000cadc:	24c8b03a 	or	r4,r4,r19
1000cae0:	2080062e 	bgeu	r4,r2,1000cafc <__udivdi3+0x4f8>
1000cae4:	2449883a 	add	r4,r4,r17
1000cae8:	b8ffffc4 	addi	r3,r23,-1
1000caec:	24403c36 	bltu	r4,r17,1000cbe0 <__udivdi3+0x5dc>
1000caf0:	20803b2e 	bgeu	r4,r2,1000cbe0 <__udivdi3+0x5dc>
1000caf4:	bdffff84 	addi	r23,r23,-2
1000caf8:	2449883a 	add	r4,r4,r17
1000cafc:	20a1c83a 	sub	r16,r4,r2
1000cb00:	a80b883a 	mov	r5,r21
1000cb04:	8009883a 	mov	r4,r16
1000cb08:	000178c0 	call	1000178c <__umodsi3>
1000cb0c:	a80b883a 	mov	r5,r21
1000cb10:	8009883a 	mov	r4,r16
1000cb14:	1027883a 	mov	r19,r2
1000cb18:	00017280 	call	10001728 <__udivsi3>
1000cb1c:	a009883a 	mov	r4,r20
1000cb20:	100b883a 	mov	r5,r2
1000cb24:	9826943a 	slli	r19,r19,16
1000cb28:	1039883a 	mov	fp,r2
1000cb2c:	00017e40 	call	100017e4 <__mulsi3>
1000cb30:	b13fffcc 	andi	r4,r22,65535
1000cb34:	24c8b03a 	or	r4,r4,r19
1000cb38:	2080062e 	bgeu	r4,r2,1000cb54 <__udivdi3+0x550>
1000cb3c:	2449883a 	add	r4,r4,r17
1000cb40:	e0ffffc4 	addi	r3,fp,-1
1000cb44:	24402436 	bltu	r4,r17,1000cbd8 <__udivdi3+0x5d4>
1000cb48:	2080232e 	bgeu	r4,r2,1000cbd8 <__udivdi3+0x5d4>
1000cb4c:	e73fff84 	addi	fp,fp,-2
1000cb50:	2449883a 	add	r4,r4,r17
1000cb54:	b82e943a 	slli	r23,r23,16
1000cb58:	20a1c83a 	sub	r16,r4,r2
1000cb5c:	bf06b03a 	or	r3,r23,fp
1000cb60:	003f2806 	br	1000c804 <__alt_data_end+0xf800c804>
1000cb64:	2021883a 	mov	r16,r4
1000cb68:	003f5306 	br	1000c8b8 <__alt_data_end+0xf800c8b8>
1000cb6c:	1821883a 	mov	r16,r3
1000cb70:	003ef406 	br	1000c744 <__alt_data_end+0xf800c744>
1000cb74:	1806943a 	slli	r3,r3,16
1000cb78:	9de6983a 	sll	r19,r19,r23
1000cb7c:	e73fffcc 	andi	fp,fp,65535
1000cb80:	1f07883a 	add	r3,r3,fp
1000cb84:	98ffbd2e 	bgeu	r19,r3,1000ca7c <__alt_data_end+0xf800ca7c>
1000cb88:	90bfffc4 	addi	r2,r18,-1
1000cb8c:	0007883a 	mov	r3,zero
1000cb90:	003f4e06 	br	1000c8cc <__alt_data_end+0xf800c8cc>
1000cb94:	00800604 	movi	r2,24
1000cb98:	003ef506 	br	1000c770 <__alt_data_end+0xf800c770>
1000cb9c:	00800604 	movi	r2,24
1000cba0:	003f0b06 	br	1000c7d0 <__alt_data_end+0xf800c7d0>
1000cba4:	00800604 	movi	r2,24
1000cba8:	003ead06 	br	1000c660 <__alt_data_end+0xf800c660>
1000cbac:	0007883a 	mov	r3,zero
1000cbb0:	00800044 	movi	r2,1
1000cbb4:	003f4506 	br	1000c8cc <__alt_data_end+0xf800c8cc>
1000cbb8:	80bf8e2e 	bgeu	r16,r2,1000c9f4 <__alt_data_end+0xf800c9f4>
1000cbbc:	8c7fff84 	addi	r17,r17,-2
1000cbc0:	8721883a 	add	r16,r16,fp
1000cbc4:	003f8c06 	br	1000c9f8 <__alt_data_end+0xf800c9f8>
1000cbc8:	18bf762e 	bgeu	r3,r2,1000c9a4 <__alt_data_end+0xf800c9a4>
1000cbcc:	ad7fff84 	addi	r21,r21,-2
1000cbd0:	1f07883a 	add	r3,r3,fp
1000cbd4:	003f7406 	br	1000c9a8 <__alt_data_end+0xf800c9a8>
1000cbd8:	1839883a 	mov	fp,r3
1000cbdc:	003fdd06 	br	1000cb54 <__alt_data_end+0xf800cb54>
1000cbe0:	182f883a 	mov	r23,r3
1000cbe4:	003fc506 	br	1000cafc <__alt_data_end+0xf800cafc>
1000cbe8:	b5bfff84 	addi	r22,r22,-2
1000cbec:	3c4f883a 	add	r7,r7,r17
1000cbf0:	003f1a06 	br	1000c85c <__alt_data_end+0xf800c85c>
1000cbf4:	b5bfff84 	addi	r22,r22,-2
1000cbf8:	1c47883a 	add	r3,r3,r17
1000cbfc:	003ebc06 	br	1000c6f0 <__alt_data_end+0xf800c6f0>

1000cc00 <__umoddi3>:
1000cc00:	defff304 	addi	sp,sp,-52
1000cc04:	df000b15 	stw	fp,44(sp)
1000cc08:	dc400415 	stw	r17,16(sp)
1000cc0c:	dc000315 	stw	r16,12(sp)
1000cc10:	dfc00c15 	stw	ra,48(sp)
1000cc14:	ddc00a15 	stw	r23,40(sp)
1000cc18:	dd800915 	stw	r22,36(sp)
1000cc1c:	dd400815 	stw	r21,32(sp)
1000cc20:	dd000715 	stw	r20,28(sp)
1000cc24:	dcc00615 	stw	r19,24(sp)
1000cc28:	dc800515 	stw	r18,20(sp)
1000cc2c:	2021883a 	mov	r16,r4
1000cc30:	2823883a 	mov	r17,r5
1000cc34:	2839883a 	mov	fp,r5
1000cc38:	3800401e 	bne	r7,zero,1000cd3c <__umoddi3+0x13c>
1000cc3c:	3027883a 	mov	r19,r6
1000cc40:	2029883a 	mov	r20,r4
1000cc44:	2980552e 	bgeu	r5,r6,1000cd9c <__umoddi3+0x19c>
1000cc48:	00bfffd4 	movui	r2,65535
1000cc4c:	1180a236 	bltu	r2,r6,1000ced8 <__umoddi3+0x2d8>
1000cc50:	01003fc4 	movi	r4,255
1000cc54:	2189803a 	cmpltu	r4,r4,r6
1000cc58:	200890fa 	slli	r4,r4,3
1000cc5c:	3104d83a 	srl	r2,r6,r4
1000cc60:	00c40074 	movhi	r3,4097
1000cc64:	18ca3e04 	addi	r3,r3,10488
1000cc68:	1885883a 	add	r2,r3,r2
1000cc6c:	10c00003 	ldbu	r3,0(r2)
1000cc70:	00800804 	movi	r2,32
1000cc74:	1909883a 	add	r4,r3,r4
1000cc78:	1125c83a 	sub	r18,r2,r4
1000cc7c:	90000526 	beq	r18,zero,1000cc94 <__umoddi3+0x94>
1000cc80:	8ca2983a 	sll	r17,r17,r18
1000cc84:	8108d83a 	srl	r4,r16,r4
1000cc88:	34a6983a 	sll	r19,r6,r18
1000cc8c:	84a8983a 	sll	r20,r16,r18
1000cc90:	2478b03a 	or	fp,r4,r17
1000cc94:	982cd43a 	srli	r22,r19,16
1000cc98:	e009883a 	mov	r4,fp
1000cc9c:	9dffffcc 	andi	r23,r19,65535
1000cca0:	b00b883a 	mov	r5,r22
1000cca4:	000178c0 	call	1000178c <__umodsi3>
1000cca8:	b00b883a 	mov	r5,r22
1000ccac:	e009883a 	mov	r4,fp
1000ccb0:	102b883a 	mov	r21,r2
1000ccb4:	00017280 	call	10001728 <__udivsi3>
1000ccb8:	100b883a 	mov	r5,r2
1000ccbc:	b809883a 	mov	r4,r23
1000ccc0:	00017e40 	call	100017e4 <__mulsi3>
1000ccc4:	a82a943a 	slli	r21,r21,16
1000ccc8:	a006d43a 	srli	r3,r20,16
1000cccc:	1d46b03a 	or	r3,r3,r21
1000ccd0:	1880032e 	bgeu	r3,r2,1000cce0 <__umoddi3+0xe0>
1000ccd4:	1cc7883a 	add	r3,r3,r19
1000ccd8:	1cc00136 	bltu	r3,r19,1000cce0 <__umoddi3+0xe0>
1000ccdc:	18813136 	bltu	r3,r2,1000d1a4 <__umoddi3+0x5a4>
1000cce0:	18a1c83a 	sub	r16,r3,r2
1000cce4:	b00b883a 	mov	r5,r22
1000cce8:	8009883a 	mov	r4,r16
1000ccec:	000178c0 	call	1000178c <__umodsi3>
1000ccf0:	b00b883a 	mov	r5,r22
1000ccf4:	8009883a 	mov	r4,r16
1000ccf8:	1023883a 	mov	r17,r2
1000ccfc:	00017280 	call	10001728 <__udivsi3>
1000cd00:	100b883a 	mov	r5,r2
1000cd04:	b809883a 	mov	r4,r23
1000cd08:	8822943a 	slli	r17,r17,16
1000cd0c:	00017e40 	call	100017e4 <__mulsi3>
1000cd10:	a0ffffcc 	andi	r3,r20,65535
1000cd14:	1c46b03a 	or	r3,r3,r17
1000cd18:	1880042e 	bgeu	r3,r2,1000cd2c <__umoddi3+0x12c>
1000cd1c:	1cc7883a 	add	r3,r3,r19
1000cd20:	1cc00236 	bltu	r3,r19,1000cd2c <__umoddi3+0x12c>
1000cd24:	1880012e 	bgeu	r3,r2,1000cd2c <__umoddi3+0x12c>
1000cd28:	1cc7883a 	add	r3,r3,r19
1000cd2c:	1885c83a 	sub	r2,r3,r2
1000cd30:	1484d83a 	srl	r2,r2,r18
1000cd34:	0007883a 	mov	r3,zero
1000cd38:	00005306 	br	1000ce88 <__umoddi3+0x288>
1000cd3c:	29c05036 	bltu	r5,r7,1000ce80 <__umoddi3+0x280>
1000cd40:	00bfffd4 	movui	r2,65535
1000cd44:	11c05c2e 	bgeu	r2,r7,1000ceb8 <__umoddi3+0x2b8>
1000cd48:	00804034 	movhi	r2,256
1000cd4c:	10bfffc4 	addi	r2,r2,-1
1000cd50:	11c10636 	bltu	r2,r7,1000d16c <__umoddi3+0x56c>
1000cd54:	01000404 	movi	r4,16
1000cd58:	3904d83a 	srl	r2,r7,r4
1000cd5c:	00c40074 	movhi	r3,4097
1000cd60:	18ca3e04 	addi	r3,r3,10488
1000cd64:	1885883a 	add	r2,r3,r2
1000cd68:	14c00003 	ldbu	r19,0(r2)
1000cd6c:	00c00804 	movi	r3,32
1000cd70:	9927883a 	add	r19,r19,r4
1000cd74:	1ce9c83a 	sub	r20,r3,r19
1000cd78:	a0005c1e 	bne	r20,zero,1000ceec <__umoddi3+0x2ec>
1000cd7c:	3c400136 	bltu	r7,r17,1000cd84 <__umoddi3+0x184>
1000cd80:	81810a36 	bltu	r16,r6,1000d1ac <__umoddi3+0x5ac>
1000cd84:	8185c83a 	sub	r2,r16,r6
1000cd88:	89e3c83a 	sub	r17,r17,r7
1000cd8c:	8089803a 	cmpltu	r4,r16,r2
1000cd90:	8939c83a 	sub	fp,r17,r4
1000cd94:	e007883a 	mov	r3,fp
1000cd98:	00003b06 	br	1000ce88 <__umoddi3+0x288>
1000cd9c:	3000041e 	bne	r6,zero,1000cdb0 <__umoddi3+0x1b0>
1000cda0:	000b883a 	mov	r5,zero
1000cda4:	01000044 	movi	r4,1
1000cda8:	00017280 	call	10001728 <__udivsi3>
1000cdac:	1027883a 	mov	r19,r2
1000cdb0:	00bfffd4 	movui	r2,65535
1000cdb4:	14c0442e 	bgeu	r2,r19,1000cec8 <__umoddi3+0x2c8>
1000cdb8:	00804034 	movhi	r2,256
1000cdbc:	10bfffc4 	addi	r2,r2,-1
1000cdc0:	14c0ec36 	bltu	r2,r19,1000d174 <__umoddi3+0x574>
1000cdc4:	00800404 	movi	r2,16
1000cdc8:	9886d83a 	srl	r3,r19,r2
1000cdcc:	01040074 	movhi	r4,4097
1000cdd0:	210a3e04 	addi	r4,r4,10488
1000cdd4:	20c7883a 	add	r3,r4,r3
1000cdd8:	18c00003 	ldbu	r3,0(r3)
1000cddc:	1887883a 	add	r3,r3,r2
1000cde0:	00800804 	movi	r2,32
1000cde4:	10e5c83a 	sub	r18,r2,r3
1000cde8:	9000ab1e 	bne	r18,zero,1000d098 <__umoddi3+0x498>
1000cdec:	982cd43a 	srli	r22,r19,16
1000cdf0:	8ce3c83a 	sub	r17,r17,r19
1000cdf4:	9dffffcc 	andi	r23,r19,65535
1000cdf8:	b00b883a 	mov	r5,r22
1000cdfc:	8809883a 	mov	r4,r17
1000ce00:	000178c0 	call	1000178c <__umodsi3>
1000ce04:	b00b883a 	mov	r5,r22
1000ce08:	8809883a 	mov	r4,r17
1000ce0c:	102b883a 	mov	r21,r2
1000ce10:	00017280 	call	10001728 <__udivsi3>
1000ce14:	b80b883a 	mov	r5,r23
1000ce18:	1009883a 	mov	r4,r2
1000ce1c:	00017e40 	call	100017e4 <__mulsi3>
1000ce20:	a82a943a 	slli	r21,r21,16
1000ce24:	a006d43a 	srli	r3,r20,16
1000ce28:	1d46b03a 	or	r3,r3,r21
1000ce2c:	1880042e 	bgeu	r3,r2,1000ce40 <__umoddi3+0x240>
1000ce30:	1cc7883a 	add	r3,r3,r19
1000ce34:	1cc00236 	bltu	r3,r19,1000ce40 <__umoddi3+0x240>
1000ce38:	1880012e 	bgeu	r3,r2,1000ce40 <__umoddi3+0x240>
1000ce3c:	1cc7883a 	add	r3,r3,r19
1000ce40:	18a1c83a 	sub	r16,r3,r2
1000ce44:	b00b883a 	mov	r5,r22
1000ce48:	8009883a 	mov	r4,r16
1000ce4c:	000178c0 	call	1000178c <__umodsi3>
1000ce50:	1023883a 	mov	r17,r2
1000ce54:	b00b883a 	mov	r5,r22
1000ce58:	8009883a 	mov	r4,r16
1000ce5c:	00017280 	call	10001728 <__udivsi3>
1000ce60:	8822943a 	slli	r17,r17,16
1000ce64:	b80b883a 	mov	r5,r23
1000ce68:	1009883a 	mov	r4,r2
1000ce6c:	00017e40 	call	100017e4 <__mulsi3>
1000ce70:	a53fffcc 	andi	r20,r20,65535
1000ce74:	a446b03a 	or	r3,r20,r17
1000ce78:	18bfac2e 	bgeu	r3,r2,1000cd2c <__alt_data_end+0xf800cd2c>
1000ce7c:	003fa706 	br	1000cd1c <__alt_data_end+0xf800cd1c>
1000ce80:	2005883a 	mov	r2,r4
1000ce84:	2807883a 	mov	r3,r5
1000ce88:	dfc00c17 	ldw	ra,48(sp)
1000ce8c:	df000b17 	ldw	fp,44(sp)
1000ce90:	ddc00a17 	ldw	r23,40(sp)
1000ce94:	dd800917 	ldw	r22,36(sp)
1000ce98:	dd400817 	ldw	r21,32(sp)
1000ce9c:	dd000717 	ldw	r20,28(sp)
1000cea0:	dcc00617 	ldw	r19,24(sp)
1000cea4:	dc800517 	ldw	r18,20(sp)
1000cea8:	dc400417 	ldw	r17,16(sp)
1000ceac:	dc000317 	ldw	r16,12(sp)
1000ceb0:	dec00d04 	addi	sp,sp,52
1000ceb4:	f800283a 	ret
1000ceb8:	04c03fc4 	movi	r19,255
1000cebc:	99c9803a 	cmpltu	r4,r19,r7
1000cec0:	200890fa 	slli	r4,r4,3
1000cec4:	003fa406 	br	1000cd58 <__alt_data_end+0xf800cd58>
1000cec8:	00803fc4 	movi	r2,255
1000cecc:	14c5803a 	cmpltu	r2,r2,r19
1000ced0:	100490fa 	slli	r2,r2,3
1000ced4:	003fbc06 	br	1000cdc8 <__alt_data_end+0xf800cdc8>
1000ced8:	00804034 	movhi	r2,256
1000cedc:	10bfffc4 	addi	r2,r2,-1
1000cee0:	1180a636 	bltu	r2,r6,1000d17c <__umoddi3+0x57c>
1000cee4:	01000404 	movi	r4,16
1000cee8:	003f5c06 	br	1000cc5c <__alt_data_end+0xf800cc5c>
1000ceec:	3d0e983a 	sll	r7,r7,r20
1000cef0:	34ead83a 	srl	r21,r6,r19
1000cef4:	8cc6d83a 	srl	r3,r17,r19
1000cef8:	8d10983a 	sll	r8,r17,r20
1000cefc:	3d6ab03a 	or	r21,r7,r21
1000cf00:	a82cd43a 	srli	r22,r21,16
1000cf04:	84e2d83a 	srl	r17,r16,r19
1000cf08:	1809883a 	mov	r4,r3
1000cf0c:	b00b883a 	mov	r5,r22
1000cf10:	8a22b03a 	or	r17,r17,r8
1000cf14:	3524983a 	sll	r18,r6,r20
1000cf18:	dc400015 	stw	r17,0(sp)
1000cf1c:	d8c00115 	stw	r3,4(sp)
1000cf20:	000178c0 	call	1000178c <__umodsi3>
1000cf24:	d8c00117 	ldw	r3,4(sp)
1000cf28:	b00b883a 	mov	r5,r22
1000cf2c:	1039883a 	mov	fp,r2
1000cf30:	1809883a 	mov	r4,r3
1000cf34:	00017280 	call	10001728 <__udivsi3>
1000cf38:	adffffcc 	andi	r23,r21,65535
1000cf3c:	100b883a 	mov	r5,r2
1000cf40:	b809883a 	mov	r4,r23
1000cf44:	1023883a 	mov	r17,r2
1000cf48:	00017e40 	call	100017e4 <__mulsi3>
1000cf4c:	d9400017 	ldw	r5,0(sp)
1000cf50:	e008943a 	slli	r4,fp,16
1000cf54:	8520983a 	sll	r16,r16,r20
1000cf58:	2806d43a 	srli	r3,r5,16
1000cf5c:	1906b03a 	or	r3,r3,r4
1000cf60:	1880042e 	bgeu	r3,r2,1000cf74 <__umoddi3+0x374>
1000cf64:	1d47883a 	add	r3,r3,r21
1000cf68:	893fffc4 	addi	r4,r17,-1
1000cf6c:	1d40892e 	bgeu	r3,r21,1000d194 <__umoddi3+0x594>
1000cf70:	2023883a 	mov	r17,r4
1000cf74:	18b9c83a 	sub	fp,r3,r2
1000cf78:	b00b883a 	mov	r5,r22
1000cf7c:	e009883a 	mov	r4,fp
1000cf80:	000178c0 	call	1000178c <__umodsi3>
1000cf84:	b00b883a 	mov	r5,r22
1000cf88:	e009883a 	mov	r4,fp
1000cf8c:	d8800215 	stw	r2,8(sp)
1000cf90:	00017280 	call	10001728 <__udivsi3>
1000cf94:	100b883a 	mov	r5,r2
1000cf98:	b809883a 	mov	r4,r23
1000cf9c:	102d883a 	mov	r22,r2
1000cfa0:	00017e40 	call	100017e4 <__mulsi3>
1000cfa4:	d9800217 	ldw	r6,8(sp)
1000cfa8:	d8c00017 	ldw	r3,0(sp)
1000cfac:	300c943a 	slli	r6,r6,16
1000cfb0:	1a3fffcc 	andi	r8,r3,65535
1000cfb4:	4190b03a 	or	r8,r8,r6
1000cfb8:	4080042e 	bgeu	r8,r2,1000cfcc <__umoddi3+0x3cc>
1000cfbc:	4551883a 	add	r8,r8,r21
1000cfc0:	b0ffffc4 	addi	r3,r22,-1
1000cfc4:	45406f2e 	bgeu	r8,r21,1000d184 <__umoddi3+0x584>
1000cfc8:	182d883a 	mov	r22,r3
1000cfcc:	880e943a 	slli	r7,r17,16
1000cfd0:	9006d43a 	srli	r3,r18,16
1000cfd4:	91bfffcc 	andi	r6,r18,65535
1000cfd8:	3dacb03a 	or	r22,r7,r22
1000cfdc:	b02ed43a 	srli	r23,r22,16
1000cfe0:	b5bfffcc 	andi	r22,r22,65535
1000cfe4:	300b883a 	mov	r5,r6
1000cfe8:	b009883a 	mov	r4,r22
1000cfec:	40a3c83a 	sub	r17,r8,r2
1000cff0:	d8c00115 	stw	r3,4(sp)
1000cff4:	d9800215 	stw	r6,8(sp)
1000cff8:	00017e40 	call	100017e4 <__mulsi3>
1000cffc:	d9800217 	ldw	r6,8(sp)
1000d000:	b809883a 	mov	r4,r23
1000d004:	1039883a 	mov	fp,r2
1000d008:	300b883a 	mov	r5,r6
1000d00c:	00017e40 	call	100017e4 <__mulsi3>
1000d010:	d8c00117 	ldw	r3,4(sp)
1000d014:	b809883a 	mov	r4,r23
1000d018:	d8800215 	stw	r2,8(sp)
1000d01c:	180b883a 	mov	r5,r3
1000d020:	00017e40 	call	100017e4 <__mulsi3>
1000d024:	d8c00117 	ldw	r3,4(sp)
1000d028:	b009883a 	mov	r4,r22
1000d02c:	102f883a 	mov	r23,r2
1000d030:	180b883a 	mov	r5,r3
1000d034:	00017e40 	call	100017e4 <__mulsi3>
1000d038:	d9800217 	ldw	r6,8(sp)
1000d03c:	e006d43a 	srli	r3,fp,16
1000d040:	1185883a 	add	r2,r2,r6
1000d044:	1885883a 	add	r2,r3,r2
1000d048:	1180022e 	bgeu	r2,r6,1000d054 <__umoddi3+0x454>
1000d04c:	00c00074 	movhi	r3,1
1000d050:	b8ef883a 	add	r23,r23,r3
1000d054:	1006d43a 	srli	r3,r2,16
1000d058:	1004943a 	slli	r2,r2,16
1000d05c:	e73fffcc 	andi	fp,fp,65535
1000d060:	1dc7883a 	add	r3,r3,r23
1000d064:	1739883a 	add	fp,r2,fp
1000d068:	88c03a36 	bltu	r17,r3,1000d154 <__umoddi3+0x554>
1000d06c:	88c05126 	beq	r17,r3,1000d1b4 <__umoddi3+0x5b4>
1000d070:	88c9c83a 	sub	r4,r17,r3
1000d074:	e00f883a 	mov	r7,fp
1000d078:	81cfc83a 	sub	r7,r16,r7
1000d07c:	81c7803a 	cmpltu	r3,r16,r7
1000d080:	20c7c83a 	sub	r3,r4,r3
1000d084:	1cc4983a 	sll	r2,r3,r19
1000d088:	3d0ed83a 	srl	r7,r7,r20
1000d08c:	1d06d83a 	srl	r3,r3,r20
1000d090:	11c4b03a 	or	r2,r2,r7
1000d094:	003f7c06 	br	1000ce88 <__alt_data_end+0xf800ce88>
1000d098:	9ca6983a 	sll	r19,r19,r18
1000d09c:	88f8d83a 	srl	fp,r17,r3
1000d0a0:	80c4d83a 	srl	r2,r16,r3
1000d0a4:	982cd43a 	srli	r22,r19,16
1000d0a8:	8ca2983a 	sll	r17,r17,r18
1000d0ac:	e009883a 	mov	r4,fp
1000d0b0:	b00b883a 	mov	r5,r22
1000d0b4:	146ab03a 	or	r21,r2,r17
1000d0b8:	000178c0 	call	1000178c <__umodsi3>
1000d0bc:	b00b883a 	mov	r5,r22
1000d0c0:	e009883a 	mov	r4,fp
1000d0c4:	1029883a 	mov	r20,r2
1000d0c8:	9dffffcc 	andi	r23,r19,65535
1000d0cc:	00017280 	call	10001728 <__udivsi3>
1000d0d0:	b809883a 	mov	r4,r23
1000d0d4:	100b883a 	mov	r5,r2
1000d0d8:	00017e40 	call	100017e4 <__mulsi3>
1000d0dc:	a008943a 	slli	r4,r20,16
1000d0e0:	a806d43a 	srli	r3,r21,16
1000d0e4:	84a8983a 	sll	r20,r16,r18
1000d0e8:	1906b03a 	or	r3,r3,r4
1000d0ec:	1880042e 	bgeu	r3,r2,1000d100 <__umoddi3+0x500>
1000d0f0:	1cc7883a 	add	r3,r3,r19
1000d0f4:	1cc00236 	bltu	r3,r19,1000d100 <__umoddi3+0x500>
1000d0f8:	1880012e 	bgeu	r3,r2,1000d100 <__umoddi3+0x500>
1000d0fc:	1cc7883a 	add	r3,r3,r19
1000d100:	18a3c83a 	sub	r17,r3,r2
1000d104:	b00b883a 	mov	r5,r22
1000d108:	8809883a 	mov	r4,r17
1000d10c:	000178c0 	call	1000178c <__umodsi3>
1000d110:	b00b883a 	mov	r5,r22
1000d114:	8809883a 	mov	r4,r17
1000d118:	1021883a 	mov	r16,r2
1000d11c:	00017280 	call	10001728 <__udivsi3>
1000d120:	100b883a 	mov	r5,r2
1000d124:	b809883a 	mov	r4,r23
1000d128:	8020943a 	slli	r16,r16,16
1000d12c:	00017e40 	call	100017e4 <__mulsi3>
1000d130:	a8ffffcc 	andi	r3,r21,65535
1000d134:	1c06b03a 	or	r3,r3,r16
1000d138:	1880042e 	bgeu	r3,r2,1000d14c <__umoddi3+0x54c>
1000d13c:	1cc7883a 	add	r3,r3,r19
1000d140:	1cc00236 	bltu	r3,r19,1000d14c <__umoddi3+0x54c>
1000d144:	1880012e 	bgeu	r3,r2,1000d14c <__umoddi3+0x54c>
1000d148:	1cc7883a 	add	r3,r3,r19
1000d14c:	18a3c83a 	sub	r17,r3,r2
1000d150:	003f2906 	br	1000cdf8 <__alt_data_end+0xf800cdf8>
1000d154:	e48fc83a 	sub	r7,fp,r18
1000d158:	1d49c83a 	sub	r4,r3,r21
1000d15c:	e1f9803a 	cmpltu	fp,fp,r7
1000d160:	2739c83a 	sub	fp,r4,fp
1000d164:	8f09c83a 	sub	r4,r17,fp
1000d168:	003fc306 	br	1000d078 <__alt_data_end+0xf800d078>
1000d16c:	01000604 	movi	r4,24
1000d170:	003ef906 	br	1000cd58 <__alt_data_end+0xf800cd58>
1000d174:	00800604 	movi	r2,24
1000d178:	003f1306 	br	1000cdc8 <__alt_data_end+0xf800cdc8>
1000d17c:	01000604 	movi	r4,24
1000d180:	003eb606 	br	1000cc5c <__alt_data_end+0xf800cc5c>
1000d184:	40bf902e 	bgeu	r8,r2,1000cfc8 <__alt_data_end+0xf800cfc8>
1000d188:	b5bfff84 	addi	r22,r22,-2
1000d18c:	4551883a 	add	r8,r8,r21
1000d190:	003f8e06 	br	1000cfcc <__alt_data_end+0xf800cfcc>
1000d194:	18bf762e 	bgeu	r3,r2,1000cf70 <__alt_data_end+0xf800cf70>
1000d198:	8c7fff84 	addi	r17,r17,-2
1000d19c:	1d47883a 	add	r3,r3,r21
1000d1a0:	003f7406 	br	1000cf74 <__alt_data_end+0xf800cf74>
1000d1a4:	1cc7883a 	add	r3,r3,r19
1000d1a8:	003ecd06 	br	1000cce0 <__alt_data_end+0xf800cce0>
1000d1ac:	8005883a 	mov	r2,r16
1000d1b0:	003ef806 	br	1000cd94 <__alt_data_end+0xf800cd94>
1000d1b4:	873fe736 	bltu	r16,fp,1000d154 <__alt_data_end+0xf800d154>
1000d1b8:	e00f883a 	mov	r7,fp
1000d1bc:	0009883a 	mov	r4,zero
1000d1c0:	003fad06 	br	1000d078 <__alt_data_end+0xf800d078>

1000d1c4 <__adddf3>:
1000d1c4:	02c00434 	movhi	r11,16
1000d1c8:	5affffc4 	addi	r11,r11,-1
1000d1cc:	2806d7fa 	srli	r3,r5,31
1000d1d0:	2ad4703a 	and	r10,r5,r11
1000d1d4:	3ad2703a 	and	r9,r7,r11
1000d1d8:	3804d53a 	srli	r2,r7,20
1000d1dc:	3018d77a 	srli	r12,r6,29
1000d1e0:	280ad53a 	srli	r5,r5,20
1000d1e4:	501490fa 	slli	r10,r10,3
1000d1e8:	2010d77a 	srli	r8,r4,29
1000d1ec:	481290fa 	slli	r9,r9,3
1000d1f0:	380ed7fa 	srli	r7,r7,31
1000d1f4:	defffb04 	addi	sp,sp,-20
1000d1f8:	dc800215 	stw	r18,8(sp)
1000d1fc:	dc400115 	stw	r17,4(sp)
1000d200:	dc000015 	stw	r16,0(sp)
1000d204:	dfc00415 	stw	ra,16(sp)
1000d208:	dcc00315 	stw	r19,12(sp)
1000d20c:	1c803fcc 	andi	r18,r3,255
1000d210:	2c01ffcc 	andi	r16,r5,2047
1000d214:	5210b03a 	or	r8,r10,r8
1000d218:	202290fa 	slli	r17,r4,3
1000d21c:	1081ffcc 	andi	r2,r2,2047
1000d220:	4b12b03a 	or	r9,r9,r12
1000d224:	300c90fa 	slli	r6,r6,3
1000d228:	91c07526 	beq	r18,r7,1000d400 <__adddf3+0x23c>
1000d22c:	8087c83a 	sub	r3,r16,r2
1000d230:	00c0ab0e 	bge	zero,r3,1000d4e0 <__adddf3+0x31c>
1000d234:	10002a1e 	bne	r2,zero,1000d2e0 <__adddf3+0x11c>
1000d238:	4984b03a 	or	r2,r9,r6
1000d23c:	1000961e 	bne	r2,zero,1000d498 <__adddf3+0x2d4>
1000d240:	888001cc 	andi	r2,r17,7
1000d244:	10000726 	beq	r2,zero,1000d264 <__adddf3+0xa0>
1000d248:	888003cc 	andi	r2,r17,15
1000d24c:	00c00104 	movi	r3,4
1000d250:	10c00426 	beq	r2,r3,1000d264 <__adddf3+0xa0>
1000d254:	88c7883a 	add	r3,r17,r3
1000d258:	1c63803a 	cmpltu	r17,r3,r17
1000d25c:	4451883a 	add	r8,r8,r17
1000d260:	1823883a 	mov	r17,r3
1000d264:	4080202c 	andhi	r2,r8,128
1000d268:	10005926 	beq	r2,zero,1000d3d0 <__adddf3+0x20c>
1000d26c:	84000044 	addi	r16,r16,1
1000d270:	0081ffc4 	movi	r2,2047
1000d274:	8080ba26 	beq	r16,r2,1000d560 <__adddf3+0x39c>
1000d278:	00bfe034 	movhi	r2,65408
1000d27c:	10bfffc4 	addi	r2,r2,-1
1000d280:	4090703a 	and	r8,r8,r2
1000d284:	4004977a 	slli	r2,r8,29
1000d288:	4010927a 	slli	r8,r8,9
1000d28c:	8822d0fa 	srli	r17,r17,3
1000d290:	8401ffcc 	andi	r16,r16,2047
1000d294:	4010d33a 	srli	r8,r8,12
1000d298:	9007883a 	mov	r3,r18
1000d29c:	1444b03a 	or	r2,r2,r17
1000d2a0:	8401ffcc 	andi	r16,r16,2047
1000d2a4:	8020953a 	slli	r16,r16,20
1000d2a8:	18c03fcc 	andi	r3,r3,255
1000d2ac:	01000434 	movhi	r4,16
1000d2b0:	213fffc4 	addi	r4,r4,-1
1000d2b4:	180697fa 	slli	r3,r3,31
1000d2b8:	4110703a 	and	r8,r8,r4
1000d2bc:	4410b03a 	or	r8,r8,r16
1000d2c0:	40c6b03a 	or	r3,r8,r3
1000d2c4:	dfc00417 	ldw	ra,16(sp)
1000d2c8:	dcc00317 	ldw	r19,12(sp)
1000d2cc:	dc800217 	ldw	r18,8(sp)
1000d2d0:	dc400117 	ldw	r17,4(sp)
1000d2d4:	dc000017 	ldw	r16,0(sp)
1000d2d8:	dec00504 	addi	sp,sp,20
1000d2dc:	f800283a 	ret
1000d2e0:	0081ffc4 	movi	r2,2047
1000d2e4:	80bfd626 	beq	r16,r2,1000d240 <__alt_data_end+0xf800d240>
1000d2e8:	4a402034 	orhi	r9,r9,128
1000d2ec:	00800e04 	movi	r2,56
1000d2f0:	10c09f16 	blt	r2,r3,1000d570 <__adddf3+0x3ac>
1000d2f4:	008007c4 	movi	r2,31
1000d2f8:	10c0c216 	blt	r2,r3,1000d604 <__adddf3+0x440>
1000d2fc:	00800804 	movi	r2,32
1000d300:	10c5c83a 	sub	r2,r2,r3
1000d304:	488a983a 	sll	r5,r9,r2
1000d308:	30c8d83a 	srl	r4,r6,r3
1000d30c:	3084983a 	sll	r2,r6,r2
1000d310:	48c6d83a 	srl	r3,r9,r3
1000d314:	290cb03a 	or	r6,r5,r4
1000d318:	1004c03a 	cmpne	r2,r2,zero
1000d31c:	308cb03a 	or	r6,r6,r2
1000d320:	898dc83a 	sub	r6,r17,r6
1000d324:	89a3803a 	cmpltu	r17,r17,r6
1000d328:	40d1c83a 	sub	r8,r8,r3
1000d32c:	4451c83a 	sub	r8,r8,r17
1000d330:	3023883a 	mov	r17,r6
1000d334:	4080202c 	andhi	r2,r8,128
1000d338:	10002326 	beq	r2,zero,1000d3c8 <__adddf3+0x204>
1000d33c:	04c02034 	movhi	r19,128
1000d340:	9cffffc4 	addi	r19,r19,-1
1000d344:	44e6703a 	and	r19,r8,r19
1000d348:	98007626 	beq	r19,zero,1000d524 <__adddf3+0x360>
1000d34c:	9809883a 	mov	r4,r19
1000d350:	000fa040 	call	1000fa04 <__clzsi2>
1000d354:	10fffe04 	addi	r3,r2,-8
1000d358:	010007c4 	movi	r4,31
1000d35c:	20c07716 	blt	r4,r3,1000d53c <__adddf3+0x378>
1000d360:	00800804 	movi	r2,32
1000d364:	10c5c83a 	sub	r2,r2,r3
1000d368:	8884d83a 	srl	r2,r17,r2
1000d36c:	98d0983a 	sll	r8,r19,r3
1000d370:	88e2983a 	sll	r17,r17,r3
1000d374:	1204b03a 	or	r2,r2,r8
1000d378:	1c007416 	blt	r3,r16,1000d54c <__adddf3+0x388>
1000d37c:	1c21c83a 	sub	r16,r3,r16
1000d380:	82000044 	addi	r8,r16,1
1000d384:	00c007c4 	movi	r3,31
1000d388:	1a009116 	blt	r3,r8,1000d5d0 <__adddf3+0x40c>
1000d38c:	00c00804 	movi	r3,32
1000d390:	1a07c83a 	sub	r3,r3,r8
1000d394:	8a08d83a 	srl	r4,r17,r8
1000d398:	88e2983a 	sll	r17,r17,r3
1000d39c:	10c6983a 	sll	r3,r2,r3
1000d3a0:	1210d83a 	srl	r8,r2,r8
1000d3a4:	8804c03a 	cmpne	r2,r17,zero
1000d3a8:	1906b03a 	or	r3,r3,r4
1000d3ac:	18a2b03a 	or	r17,r3,r2
1000d3b0:	0021883a 	mov	r16,zero
1000d3b4:	003fa206 	br	1000d240 <__alt_data_end+0xf800d240>
1000d3b8:	1890b03a 	or	r8,r3,r2
1000d3bc:	40017d26 	beq	r8,zero,1000d9b4 <__adddf3+0x7f0>
1000d3c0:	1011883a 	mov	r8,r2
1000d3c4:	1823883a 	mov	r17,r3
1000d3c8:	888001cc 	andi	r2,r17,7
1000d3cc:	103f9e1e 	bne	r2,zero,1000d248 <__alt_data_end+0xf800d248>
1000d3d0:	4004977a 	slli	r2,r8,29
1000d3d4:	8822d0fa 	srli	r17,r17,3
1000d3d8:	4010d0fa 	srli	r8,r8,3
1000d3dc:	9007883a 	mov	r3,r18
1000d3e0:	1444b03a 	or	r2,r2,r17
1000d3e4:	0101ffc4 	movi	r4,2047
1000d3e8:	81002426 	beq	r16,r4,1000d47c <__adddf3+0x2b8>
1000d3ec:	8120703a 	and	r16,r16,r4
1000d3f0:	01000434 	movhi	r4,16
1000d3f4:	213fffc4 	addi	r4,r4,-1
1000d3f8:	4110703a 	and	r8,r8,r4
1000d3fc:	003fa806 	br	1000d2a0 <__alt_data_end+0xf800d2a0>
1000d400:	8089c83a 	sub	r4,r16,r2
1000d404:	01005e0e 	bge	zero,r4,1000d580 <__adddf3+0x3bc>
1000d408:	10002b26 	beq	r2,zero,1000d4b8 <__adddf3+0x2f4>
1000d40c:	0081ffc4 	movi	r2,2047
1000d410:	80bf8b26 	beq	r16,r2,1000d240 <__alt_data_end+0xf800d240>
1000d414:	4a402034 	orhi	r9,r9,128
1000d418:	00800e04 	movi	r2,56
1000d41c:	1100a40e 	bge	r2,r4,1000d6b0 <__adddf3+0x4ec>
1000d420:	498cb03a 	or	r6,r9,r6
1000d424:	300ac03a 	cmpne	r5,r6,zero
1000d428:	0013883a 	mov	r9,zero
1000d42c:	2c4b883a 	add	r5,r5,r17
1000d430:	2c63803a 	cmpltu	r17,r5,r17
1000d434:	4a11883a 	add	r8,r9,r8
1000d438:	8a11883a 	add	r8,r17,r8
1000d43c:	2823883a 	mov	r17,r5
1000d440:	4080202c 	andhi	r2,r8,128
1000d444:	103fe026 	beq	r2,zero,1000d3c8 <__alt_data_end+0xf800d3c8>
1000d448:	84000044 	addi	r16,r16,1
1000d44c:	0081ffc4 	movi	r2,2047
1000d450:	8080d226 	beq	r16,r2,1000d79c <__adddf3+0x5d8>
1000d454:	00bfe034 	movhi	r2,65408
1000d458:	10bfffc4 	addi	r2,r2,-1
1000d45c:	4090703a 	and	r8,r8,r2
1000d460:	880ad07a 	srli	r5,r17,1
1000d464:	400897fa 	slli	r4,r8,31
1000d468:	88c0004c 	andi	r3,r17,1
1000d46c:	28e2b03a 	or	r17,r5,r3
1000d470:	4010d07a 	srli	r8,r8,1
1000d474:	2462b03a 	or	r17,r4,r17
1000d478:	003f7106 	br	1000d240 <__alt_data_end+0xf800d240>
1000d47c:	4088b03a 	or	r4,r8,r2
1000d480:	20014526 	beq	r4,zero,1000d998 <__adddf3+0x7d4>
1000d484:	01000434 	movhi	r4,16
1000d488:	42000234 	orhi	r8,r8,8
1000d48c:	213fffc4 	addi	r4,r4,-1
1000d490:	4110703a 	and	r8,r8,r4
1000d494:	003f8206 	br	1000d2a0 <__alt_data_end+0xf800d2a0>
1000d498:	18ffffc4 	addi	r3,r3,-1
1000d49c:	1800491e 	bne	r3,zero,1000d5c4 <__adddf3+0x400>
1000d4a0:	898bc83a 	sub	r5,r17,r6
1000d4a4:	8963803a 	cmpltu	r17,r17,r5
1000d4a8:	4251c83a 	sub	r8,r8,r9
1000d4ac:	4451c83a 	sub	r8,r8,r17
1000d4b0:	2823883a 	mov	r17,r5
1000d4b4:	003f9f06 	br	1000d334 <__alt_data_end+0xf800d334>
1000d4b8:	4984b03a 	or	r2,r9,r6
1000d4bc:	103f6026 	beq	r2,zero,1000d240 <__alt_data_end+0xf800d240>
1000d4c0:	213fffc4 	addi	r4,r4,-1
1000d4c4:	2000931e 	bne	r4,zero,1000d714 <__adddf3+0x550>
1000d4c8:	898d883a 	add	r6,r17,r6
1000d4cc:	3463803a 	cmpltu	r17,r6,r17
1000d4d0:	4251883a 	add	r8,r8,r9
1000d4d4:	8a11883a 	add	r8,r17,r8
1000d4d8:	3023883a 	mov	r17,r6
1000d4dc:	003fd806 	br	1000d440 <__alt_data_end+0xf800d440>
1000d4e0:	1800541e 	bne	r3,zero,1000d634 <__adddf3+0x470>
1000d4e4:	80800044 	addi	r2,r16,1
1000d4e8:	1081ffcc 	andi	r2,r2,2047
1000d4ec:	00c00044 	movi	r3,1
1000d4f0:	1880a00e 	bge	r3,r2,1000d774 <__adddf3+0x5b0>
1000d4f4:	8989c83a 	sub	r4,r17,r6
1000d4f8:	8905803a 	cmpltu	r2,r17,r4
1000d4fc:	4267c83a 	sub	r19,r8,r9
1000d500:	98a7c83a 	sub	r19,r19,r2
1000d504:	9880202c 	andhi	r2,r19,128
1000d508:	10006326 	beq	r2,zero,1000d698 <__adddf3+0x4d4>
1000d50c:	3463c83a 	sub	r17,r6,r17
1000d510:	4a07c83a 	sub	r3,r9,r8
1000d514:	344d803a 	cmpltu	r6,r6,r17
1000d518:	19a7c83a 	sub	r19,r3,r6
1000d51c:	3825883a 	mov	r18,r7
1000d520:	983f8a1e 	bne	r19,zero,1000d34c <__alt_data_end+0xf800d34c>
1000d524:	8809883a 	mov	r4,r17
1000d528:	000fa040 	call	1000fa04 <__clzsi2>
1000d52c:	10800804 	addi	r2,r2,32
1000d530:	10fffe04 	addi	r3,r2,-8
1000d534:	010007c4 	movi	r4,31
1000d538:	20ff890e 	bge	r4,r3,1000d360 <__alt_data_end+0xf800d360>
1000d53c:	10bff604 	addi	r2,r2,-40
1000d540:	8884983a 	sll	r2,r17,r2
1000d544:	0023883a 	mov	r17,zero
1000d548:	1c3f8c0e 	bge	r3,r16,1000d37c <__alt_data_end+0xf800d37c>
1000d54c:	023fe034 	movhi	r8,65408
1000d550:	423fffc4 	addi	r8,r8,-1
1000d554:	80e1c83a 	sub	r16,r16,r3
1000d558:	1210703a 	and	r8,r2,r8
1000d55c:	003f3806 	br	1000d240 <__alt_data_end+0xf800d240>
1000d560:	9007883a 	mov	r3,r18
1000d564:	0011883a 	mov	r8,zero
1000d568:	0005883a 	mov	r2,zero
1000d56c:	003f4c06 	br	1000d2a0 <__alt_data_end+0xf800d2a0>
1000d570:	498cb03a 	or	r6,r9,r6
1000d574:	300cc03a 	cmpne	r6,r6,zero
1000d578:	0007883a 	mov	r3,zero
1000d57c:	003f6806 	br	1000d320 <__alt_data_end+0xf800d320>
1000d580:	20009c1e 	bne	r4,zero,1000d7f4 <__adddf3+0x630>
1000d584:	80800044 	addi	r2,r16,1
1000d588:	1141ffcc 	andi	r5,r2,2047
1000d58c:	01000044 	movi	r4,1
1000d590:	2140670e 	bge	r4,r5,1000d730 <__adddf3+0x56c>
1000d594:	0101ffc4 	movi	r4,2047
1000d598:	11007f26 	beq	r2,r4,1000d798 <__adddf3+0x5d4>
1000d59c:	898d883a 	add	r6,r17,r6
1000d5a0:	4247883a 	add	r3,r8,r9
1000d5a4:	3451803a 	cmpltu	r8,r6,r17
1000d5a8:	40d1883a 	add	r8,r8,r3
1000d5ac:	402297fa 	slli	r17,r8,31
1000d5b0:	300cd07a 	srli	r6,r6,1
1000d5b4:	4010d07a 	srli	r8,r8,1
1000d5b8:	1021883a 	mov	r16,r2
1000d5bc:	89a2b03a 	or	r17,r17,r6
1000d5c0:	003f1f06 	br	1000d240 <__alt_data_end+0xf800d240>
1000d5c4:	0081ffc4 	movi	r2,2047
1000d5c8:	80bf481e 	bne	r16,r2,1000d2ec <__alt_data_end+0xf800d2ec>
1000d5cc:	003f1c06 	br	1000d240 <__alt_data_end+0xf800d240>
1000d5d0:	843ff844 	addi	r16,r16,-31
1000d5d4:	01000804 	movi	r4,32
1000d5d8:	1406d83a 	srl	r3,r2,r16
1000d5dc:	41005026 	beq	r8,r4,1000d720 <__adddf3+0x55c>
1000d5e0:	01001004 	movi	r4,64
1000d5e4:	2211c83a 	sub	r8,r4,r8
1000d5e8:	1204983a 	sll	r2,r2,r8
1000d5ec:	88a2b03a 	or	r17,r17,r2
1000d5f0:	8822c03a 	cmpne	r17,r17,zero
1000d5f4:	1c62b03a 	or	r17,r3,r17
1000d5f8:	0011883a 	mov	r8,zero
1000d5fc:	0021883a 	mov	r16,zero
1000d600:	003f7106 	br	1000d3c8 <__alt_data_end+0xf800d3c8>
1000d604:	193ff804 	addi	r4,r3,-32
1000d608:	00800804 	movi	r2,32
1000d60c:	4908d83a 	srl	r4,r9,r4
1000d610:	18804526 	beq	r3,r2,1000d728 <__adddf3+0x564>
1000d614:	00801004 	movi	r2,64
1000d618:	10c5c83a 	sub	r2,r2,r3
1000d61c:	4886983a 	sll	r3,r9,r2
1000d620:	198cb03a 	or	r6,r3,r6
1000d624:	300cc03a 	cmpne	r6,r6,zero
1000d628:	218cb03a 	or	r6,r4,r6
1000d62c:	0007883a 	mov	r3,zero
1000d630:	003f3b06 	br	1000d320 <__alt_data_end+0xf800d320>
1000d634:	80002a26 	beq	r16,zero,1000d6e0 <__adddf3+0x51c>
1000d638:	0101ffc4 	movi	r4,2047
1000d63c:	11006826 	beq	r2,r4,1000d7e0 <__adddf3+0x61c>
1000d640:	00c7c83a 	sub	r3,zero,r3
1000d644:	42002034 	orhi	r8,r8,128
1000d648:	01000e04 	movi	r4,56
1000d64c:	20c07c16 	blt	r4,r3,1000d840 <__adddf3+0x67c>
1000d650:	010007c4 	movi	r4,31
1000d654:	20c0da16 	blt	r4,r3,1000d9c0 <__adddf3+0x7fc>
1000d658:	01000804 	movi	r4,32
1000d65c:	20c9c83a 	sub	r4,r4,r3
1000d660:	4114983a 	sll	r10,r8,r4
1000d664:	88cad83a 	srl	r5,r17,r3
1000d668:	8908983a 	sll	r4,r17,r4
1000d66c:	40c6d83a 	srl	r3,r8,r3
1000d670:	5162b03a 	or	r17,r10,r5
1000d674:	2008c03a 	cmpne	r4,r4,zero
1000d678:	8922b03a 	or	r17,r17,r4
1000d67c:	3463c83a 	sub	r17,r6,r17
1000d680:	48c7c83a 	sub	r3,r9,r3
1000d684:	344d803a 	cmpltu	r6,r6,r17
1000d688:	1991c83a 	sub	r8,r3,r6
1000d68c:	1021883a 	mov	r16,r2
1000d690:	3825883a 	mov	r18,r7
1000d694:	003f2706 	br	1000d334 <__alt_data_end+0xf800d334>
1000d698:	24d0b03a 	or	r8,r4,r19
1000d69c:	40001b1e 	bne	r8,zero,1000d70c <__adddf3+0x548>
1000d6a0:	0005883a 	mov	r2,zero
1000d6a4:	0007883a 	mov	r3,zero
1000d6a8:	0021883a 	mov	r16,zero
1000d6ac:	003f4d06 	br	1000d3e4 <__alt_data_end+0xf800d3e4>
1000d6b0:	008007c4 	movi	r2,31
1000d6b4:	11003c16 	blt	r2,r4,1000d7a8 <__adddf3+0x5e4>
1000d6b8:	00800804 	movi	r2,32
1000d6bc:	1105c83a 	sub	r2,r2,r4
1000d6c0:	488e983a 	sll	r7,r9,r2
1000d6c4:	310ad83a 	srl	r5,r6,r4
1000d6c8:	3084983a 	sll	r2,r6,r2
1000d6cc:	4912d83a 	srl	r9,r9,r4
1000d6d0:	394ab03a 	or	r5,r7,r5
1000d6d4:	1004c03a 	cmpne	r2,r2,zero
1000d6d8:	288ab03a 	or	r5,r5,r2
1000d6dc:	003f5306 	br	1000d42c <__alt_data_end+0xf800d42c>
1000d6e0:	4448b03a 	or	r4,r8,r17
1000d6e4:	20003e26 	beq	r4,zero,1000d7e0 <__adddf3+0x61c>
1000d6e8:	00c6303a 	nor	r3,zero,r3
1000d6ec:	18003a1e 	bne	r3,zero,1000d7d8 <__adddf3+0x614>
1000d6f0:	3463c83a 	sub	r17,r6,r17
1000d6f4:	4a07c83a 	sub	r3,r9,r8
1000d6f8:	344d803a 	cmpltu	r6,r6,r17
1000d6fc:	1991c83a 	sub	r8,r3,r6
1000d700:	1021883a 	mov	r16,r2
1000d704:	3825883a 	mov	r18,r7
1000d708:	003f0a06 	br	1000d334 <__alt_data_end+0xf800d334>
1000d70c:	2023883a 	mov	r17,r4
1000d710:	003f0d06 	br	1000d348 <__alt_data_end+0xf800d348>
1000d714:	0081ffc4 	movi	r2,2047
1000d718:	80bf3f1e 	bne	r16,r2,1000d418 <__alt_data_end+0xf800d418>
1000d71c:	003ec806 	br	1000d240 <__alt_data_end+0xf800d240>
1000d720:	0005883a 	mov	r2,zero
1000d724:	003fb106 	br	1000d5ec <__alt_data_end+0xf800d5ec>
1000d728:	0007883a 	mov	r3,zero
1000d72c:	003fbc06 	br	1000d620 <__alt_data_end+0xf800d620>
1000d730:	4444b03a 	or	r2,r8,r17
1000d734:	8000871e 	bne	r16,zero,1000d954 <__adddf3+0x790>
1000d738:	1000ba26 	beq	r2,zero,1000da24 <__adddf3+0x860>
1000d73c:	4984b03a 	or	r2,r9,r6
1000d740:	103ebf26 	beq	r2,zero,1000d240 <__alt_data_end+0xf800d240>
1000d744:	8985883a 	add	r2,r17,r6
1000d748:	4247883a 	add	r3,r8,r9
1000d74c:	1451803a 	cmpltu	r8,r2,r17
1000d750:	40d1883a 	add	r8,r8,r3
1000d754:	40c0202c 	andhi	r3,r8,128
1000d758:	1023883a 	mov	r17,r2
1000d75c:	183f1a26 	beq	r3,zero,1000d3c8 <__alt_data_end+0xf800d3c8>
1000d760:	00bfe034 	movhi	r2,65408
1000d764:	10bfffc4 	addi	r2,r2,-1
1000d768:	2021883a 	mov	r16,r4
1000d76c:	4090703a 	and	r8,r8,r2
1000d770:	003eb306 	br	1000d240 <__alt_data_end+0xf800d240>
1000d774:	4444b03a 	or	r2,r8,r17
1000d778:	8000291e 	bne	r16,zero,1000d820 <__adddf3+0x65c>
1000d77c:	10004b1e 	bne	r2,zero,1000d8ac <__adddf3+0x6e8>
1000d780:	4990b03a 	or	r8,r9,r6
1000d784:	40008b26 	beq	r8,zero,1000d9b4 <__adddf3+0x7f0>
1000d788:	4811883a 	mov	r8,r9
1000d78c:	3023883a 	mov	r17,r6
1000d790:	3825883a 	mov	r18,r7
1000d794:	003eaa06 	br	1000d240 <__alt_data_end+0xf800d240>
1000d798:	1021883a 	mov	r16,r2
1000d79c:	0011883a 	mov	r8,zero
1000d7a0:	0005883a 	mov	r2,zero
1000d7a4:	003f0f06 	br	1000d3e4 <__alt_data_end+0xf800d3e4>
1000d7a8:	217ff804 	addi	r5,r4,-32
1000d7ac:	00800804 	movi	r2,32
1000d7b0:	494ad83a 	srl	r5,r9,r5
1000d7b4:	20807d26 	beq	r4,r2,1000d9ac <__adddf3+0x7e8>
1000d7b8:	00801004 	movi	r2,64
1000d7bc:	1109c83a 	sub	r4,r2,r4
1000d7c0:	4912983a 	sll	r9,r9,r4
1000d7c4:	498cb03a 	or	r6,r9,r6
1000d7c8:	300cc03a 	cmpne	r6,r6,zero
1000d7cc:	298ab03a 	or	r5,r5,r6
1000d7d0:	0013883a 	mov	r9,zero
1000d7d4:	003f1506 	br	1000d42c <__alt_data_end+0xf800d42c>
1000d7d8:	0101ffc4 	movi	r4,2047
1000d7dc:	113f9a1e 	bne	r2,r4,1000d648 <__alt_data_end+0xf800d648>
1000d7e0:	4811883a 	mov	r8,r9
1000d7e4:	3023883a 	mov	r17,r6
1000d7e8:	1021883a 	mov	r16,r2
1000d7ec:	3825883a 	mov	r18,r7
1000d7f0:	003e9306 	br	1000d240 <__alt_data_end+0xf800d240>
1000d7f4:	8000161e 	bne	r16,zero,1000d850 <__adddf3+0x68c>
1000d7f8:	444ab03a 	or	r5,r8,r17
1000d7fc:	28005126 	beq	r5,zero,1000d944 <__adddf3+0x780>
1000d800:	0108303a 	nor	r4,zero,r4
1000d804:	20004d1e 	bne	r4,zero,1000d93c <__adddf3+0x778>
1000d808:	89a3883a 	add	r17,r17,r6
1000d80c:	4253883a 	add	r9,r8,r9
1000d810:	898d803a 	cmpltu	r6,r17,r6
1000d814:	3251883a 	add	r8,r6,r9
1000d818:	1021883a 	mov	r16,r2
1000d81c:	003f0806 	br	1000d440 <__alt_data_end+0xf800d440>
1000d820:	1000301e 	bne	r2,zero,1000d8e4 <__adddf3+0x720>
1000d824:	4984b03a 	or	r2,r9,r6
1000d828:	10007126 	beq	r2,zero,1000d9f0 <__adddf3+0x82c>
1000d82c:	4811883a 	mov	r8,r9
1000d830:	3023883a 	mov	r17,r6
1000d834:	3825883a 	mov	r18,r7
1000d838:	0401ffc4 	movi	r16,2047
1000d83c:	003e8006 	br	1000d240 <__alt_data_end+0xf800d240>
1000d840:	4462b03a 	or	r17,r8,r17
1000d844:	8822c03a 	cmpne	r17,r17,zero
1000d848:	0007883a 	mov	r3,zero
1000d84c:	003f8b06 	br	1000d67c <__alt_data_end+0xf800d67c>
1000d850:	0141ffc4 	movi	r5,2047
1000d854:	11403b26 	beq	r2,r5,1000d944 <__adddf3+0x780>
1000d858:	0109c83a 	sub	r4,zero,r4
1000d85c:	42002034 	orhi	r8,r8,128
1000d860:	01400e04 	movi	r5,56
1000d864:	29006716 	blt	r5,r4,1000da04 <__adddf3+0x840>
1000d868:	014007c4 	movi	r5,31
1000d86c:	29007016 	blt	r5,r4,1000da30 <__adddf3+0x86c>
1000d870:	01400804 	movi	r5,32
1000d874:	290bc83a 	sub	r5,r5,r4
1000d878:	4154983a 	sll	r10,r8,r5
1000d87c:	890ed83a 	srl	r7,r17,r4
1000d880:	894a983a 	sll	r5,r17,r5
1000d884:	4108d83a 	srl	r4,r8,r4
1000d888:	51e2b03a 	or	r17,r10,r7
1000d88c:	280ac03a 	cmpne	r5,r5,zero
1000d890:	8962b03a 	or	r17,r17,r5
1000d894:	89a3883a 	add	r17,r17,r6
1000d898:	2253883a 	add	r9,r4,r9
1000d89c:	898d803a 	cmpltu	r6,r17,r6
1000d8a0:	3251883a 	add	r8,r6,r9
1000d8a4:	1021883a 	mov	r16,r2
1000d8a8:	003ee506 	br	1000d440 <__alt_data_end+0xf800d440>
1000d8ac:	4984b03a 	or	r2,r9,r6
1000d8b0:	103e6326 	beq	r2,zero,1000d240 <__alt_data_end+0xf800d240>
1000d8b4:	8987c83a 	sub	r3,r17,r6
1000d8b8:	88c9803a 	cmpltu	r4,r17,r3
1000d8bc:	4245c83a 	sub	r2,r8,r9
1000d8c0:	1105c83a 	sub	r2,r2,r4
1000d8c4:	1100202c 	andhi	r4,r2,128
1000d8c8:	203ebb26 	beq	r4,zero,1000d3b8 <__alt_data_end+0xf800d3b8>
1000d8cc:	3463c83a 	sub	r17,r6,r17
1000d8d0:	4a07c83a 	sub	r3,r9,r8
1000d8d4:	344d803a 	cmpltu	r6,r6,r17
1000d8d8:	1991c83a 	sub	r8,r3,r6
1000d8dc:	3825883a 	mov	r18,r7
1000d8e0:	003e5706 	br	1000d240 <__alt_data_end+0xf800d240>
1000d8e4:	4984b03a 	or	r2,r9,r6
1000d8e8:	10002e26 	beq	r2,zero,1000d9a4 <__adddf3+0x7e0>
1000d8ec:	4004d0fa 	srli	r2,r8,3
1000d8f0:	8822d0fa 	srli	r17,r17,3
1000d8f4:	4010977a 	slli	r8,r8,29
1000d8f8:	10c0022c 	andhi	r3,r2,8
1000d8fc:	4462b03a 	or	r17,r8,r17
1000d900:	18000826 	beq	r3,zero,1000d924 <__adddf3+0x760>
1000d904:	4808d0fa 	srli	r4,r9,3
1000d908:	20c0022c 	andhi	r3,r4,8
1000d90c:	1800051e 	bne	r3,zero,1000d924 <__adddf3+0x760>
1000d910:	300cd0fa 	srli	r6,r6,3
1000d914:	4806977a 	slli	r3,r9,29
1000d918:	2005883a 	mov	r2,r4
1000d91c:	3825883a 	mov	r18,r7
1000d920:	19a2b03a 	or	r17,r3,r6
1000d924:	8810d77a 	srli	r8,r17,29
1000d928:	100490fa 	slli	r2,r2,3
1000d92c:	882290fa 	slli	r17,r17,3
1000d930:	0401ffc4 	movi	r16,2047
1000d934:	4090b03a 	or	r8,r8,r2
1000d938:	003e4106 	br	1000d240 <__alt_data_end+0xf800d240>
1000d93c:	0141ffc4 	movi	r5,2047
1000d940:	117fc71e 	bne	r2,r5,1000d860 <__alt_data_end+0xf800d860>
1000d944:	4811883a 	mov	r8,r9
1000d948:	3023883a 	mov	r17,r6
1000d94c:	1021883a 	mov	r16,r2
1000d950:	003e3b06 	br	1000d240 <__alt_data_end+0xf800d240>
1000d954:	10002f26 	beq	r2,zero,1000da14 <__adddf3+0x850>
1000d958:	4984b03a 	or	r2,r9,r6
1000d95c:	10001126 	beq	r2,zero,1000d9a4 <__adddf3+0x7e0>
1000d960:	4004d0fa 	srli	r2,r8,3
1000d964:	8822d0fa 	srli	r17,r17,3
1000d968:	4010977a 	slli	r8,r8,29
1000d96c:	10c0022c 	andhi	r3,r2,8
1000d970:	4462b03a 	or	r17,r8,r17
1000d974:	183feb26 	beq	r3,zero,1000d924 <__alt_data_end+0xf800d924>
1000d978:	4808d0fa 	srli	r4,r9,3
1000d97c:	20c0022c 	andhi	r3,r4,8
1000d980:	183fe81e 	bne	r3,zero,1000d924 <__alt_data_end+0xf800d924>
1000d984:	300cd0fa 	srli	r6,r6,3
1000d988:	4806977a 	slli	r3,r9,29
1000d98c:	2005883a 	mov	r2,r4
1000d990:	19a2b03a 	or	r17,r3,r6
1000d994:	003fe306 	br	1000d924 <__alt_data_end+0xf800d924>
1000d998:	0011883a 	mov	r8,zero
1000d99c:	0005883a 	mov	r2,zero
1000d9a0:	003e3f06 	br	1000d2a0 <__alt_data_end+0xf800d2a0>
1000d9a4:	0401ffc4 	movi	r16,2047
1000d9a8:	003e2506 	br	1000d240 <__alt_data_end+0xf800d240>
1000d9ac:	0013883a 	mov	r9,zero
1000d9b0:	003f8406 	br	1000d7c4 <__alt_data_end+0xf800d7c4>
1000d9b4:	0005883a 	mov	r2,zero
1000d9b8:	0007883a 	mov	r3,zero
1000d9bc:	003e8906 	br	1000d3e4 <__alt_data_end+0xf800d3e4>
1000d9c0:	197ff804 	addi	r5,r3,-32
1000d9c4:	01000804 	movi	r4,32
1000d9c8:	414ad83a 	srl	r5,r8,r5
1000d9cc:	19002426 	beq	r3,r4,1000da60 <__adddf3+0x89c>
1000d9d0:	01001004 	movi	r4,64
1000d9d4:	20c7c83a 	sub	r3,r4,r3
1000d9d8:	40c6983a 	sll	r3,r8,r3
1000d9dc:	1c46b03a 	or	r3,r3,r17
1000d9e0:	1806c03a 	cmpne	r3,r3,zero
1000d9e4:	28e2b03a 	or	r17,r5,r3
1000d9e8:	0007883a 	mov	r3,zero
1000d9ec:	003f2306 	br	1000d67c <__alt_data_end+0xf800d67c>
1000d9f0:	0007883a 	mov	r3,zero
1000d9f4:	5811883a 	mov	r8,r11
1000d9f8:	00bfffc4 	movi	r2,-1
1000d9fc:	0401ffc4 	movi	r16,2047
1000da00:	003e7806 	br	1000d3e4 <__alt_data_end+0xf800d3e4>
1000da04:	4462b03a 	or	r17,r8,r17
1000da08:	8822c03a 	cmpne	r17,r17,zero
1000da0c:	0009883a 	mov	r4,zero
1000da10:	003fa006 	br	1000d894 <__alt_data_end+0xf800d894>
1000da14:	4811883a 	mov	r8,r9
1000da18:	3023883a 	mov	r17,r6
1000da1c:	0401ffc4 	movi	r16,2047
1000da20:	003e0706 	br	1000d240 <__alt_data_end+0xf800d240>
1000da24:	4811883a 	mov	r8,r9
1000da28:	3023883a 	mov	r17,r6
1000da2c:	003e0406 	br	1000d240 <__alt_data_end+0xf800d240>
1000da30:	21fff804 	addi	r7,r4,-32
1000da34:	01400804 	movi	r5,32
1000da38:	41ced83a 	srl	r7,r8,r7
1000da3c:	21400a26 	beq	r4,r5,1000da68 <__adddf3+0x8a4>
1000da40:	01401004 	movi	r5,64
1000da44:	2909c83a 	sub	r4,r5,r4
1000da48:	4108983a 	sll	r4,r8,r4
1000da4c:	2448b03a 	or	r4,r4,r17
1000da50:	2008c03a 	cmpne	r4,r4,zero
1000da54:	3922b03a 	or	r17,r7,r4
1000da58:	0009883a 	mov	r4,zero
1000da5c:	003f8d06 	br	1000d894 <__alt_data_end+0xf800d894>
1000da60:	0007883a 	mov	r3,zero
1000da64:	003fdd06 	br	1000d9dc <__alt_data_end+0xf800d9dc>
1000da68:	0009883a 	mov	r4,zero
1000da6c:	003ff706 	br	1000da4c <__alt_data_end+0xf800da4c>

1000da70 <__divdf3>:
1000da70:	defff004 	addi	sp,sp,-64
1000da74:	dc800815 	stw	r18,32(sp)
1000da78:	2824d53a 	srli	r18,r5,20
1000da7c:	dd800c15 	stw	r22,48(sp)
1000da80:	282cd7fa 	srli	r22,r5,31
1000da84:	dc000615 	stw	r16,24(sp)
1000da88:	04000434 	movhi	r16,16
1000da8c:	843fffc4 	addi	r16,r16,-1
1000da90:	dfc00f15 	stw	ra,60(sp)
1000da94:	df000e15 	stw	fp,56(sp)
1000da98:	ddc00d15 	stw	r23,52(sp)
1000da9c:	dd400b15 	stw	r21,44(sp)
1000daa0:	dd000a15 	stw	r20,40(sp)
1000daa4:	dcc00915 	stw	r19,36(sp)
1000daa8:	dc400715 	stw	r17,28(sp)
1000daac:	9481ffcc 	andi	r18,r18,2047
1000dab0:	2c20703a 	and	r16,r5,r16
1000dab4:	b2003fcc 	andi	r8,r22,255
1000dab8:	90006126 	beq	r18,zero,1000dc40 <__divdf3+0x1d0>
1000dabc:	0081ffc4 	movi	r2,2047
1000dac0:	202b883a 	mov	r21,r4
1000dac4:	90803726 	beq	r18,r2,1000dba4 <__divdf3+0x134>
1000dac8:	80800434 	orhi	r2,r16,16
1000dacc:	100490fa 	slli	r2,r2,3
1000dad0:	2020d77a 	srli	r16,r4,29
1000dad4:	202a90fa 	slli	r21,r4,3
1000dad8:	94bf0044 	addi	r18,r18,-1023
1000dadc:	80a0b03a 	or	r16,r16,r2
1000dae0:	0013883a 	mov	r9,zero
1000dae4:	000b883a 	mov	r5,zero
1000dae8:	3806d53a 	srli	r3,r7,20
1000daec:	382ed7fa 	srli	r23,r7,31
1000daf0:	04400434 	movhi	r17,16
1000daf4:	8c7fffc4 	addi	r17,r17,-1
1000daf8:	18c1ffcc 	andi	r3,r3,2047
1000dafc:	3029883a 	mov	r20,r6
1000db00:	3c62703a 	and	r17,r7,r17
1000db04:	bf003fcc 	andi	fp,r23,255
1000db08:	18006e26 	beq	r3,zero,1000dcc4 <__divdf3+0x254>
1000db0c:	0081ffc4 	movi	r2,2047
1000db10:	18806626 	beq	r3,r2,1000dcac <__divdf3+0x23c>
1000db14:	88800434 	orhi	r2,r17,16
1000db18:	100490fa 	slli	r2,r2,3
1000db1c:	3022d77a 	srli	r17,r6,29
1000db20:	302890fa 	slli	r20,r6,3
1000db24:	18ff0044 	addi	r3,r3,-1023
1000db28:	88a2b03a 	or	r17,r17,r2
1000db2c:	000f883a 	mov	r7,zero
1000db30:	b5e6f03a 	xor	r19,r22,r23
1000db34:	3a4cb03a 	or	r6,r7,r9
1000db38:	008003c4 	movi	r2,15
1000db3c:	9809883a 	mov	r4,r19
1000db40:	90c7c83a 	sub	r3,r18,r3
1000db44:	9cc03fcc 	andi	r19,r19,255
1000db48:	11809636 	bltu	r2,r6,1000dda4 <__divdf3+0x334>
1000db4c:	300c90ba 	slli	r6,r6,2
1000db50:	00840074 	movhi	r2,4097
1000db54:	10b6d904 	addi	r2,r2,-9372
1000db58:	308d883a 	add	r6,r6,r2
1000db5c:	30800017 	ldw	r2,0(r6)
1000db60:	1000683a 	jmp	r2
1000db64:	1000dda4 	muli	zero,r2,886
1000db68:	1000dbdc 	xori	zero,r2,879
1000db6c:	1000dd94 	ori	zero,r2,886
1000db70:	1000dbd0 	cmplti	zero,r2,879
1000db74:	1000dd94 	ori	zero,r2,886
1000db78:	1000dd68 	cmpgeui	zero,r2,885
1000db7c:	1000dd94 	ori	zero,r2,886
1000db80:	1000dbd0 	cmplti	zero,r2,879
1000db84:	1000dbdc 	xori	zero,r2,879
1000db88:	1000dbdc 	xori	zero,r2,879
1000db8c:	1000dd68 	cmpgeui	zero,r2,885
1000db90:	1000dbd0 	cmplti	zero,r2,879
1000db94:	1000dbc0 	call	11000dbc <_gp+0xfe4868>
1000db98:	1000dbc0 	call	11000dbc <_gp+0xfe4868>
1000db9c:	1000dbc0 	call	11000dbc <_gp+0xfe4868>
1000dba0:	1000e12c 	andhi	zero,r2,900
1000dba4:	2404b03a 	or	r2,r4,r16
1000dba8:	10006c1e 	bne	r2,zero,1000dd5c <__divdf3+0x2ec>
1000dbac:	02400204 	movi	r9,8
1000dbb0:	0021883a 	mov	r16,zero
1000dbb4:	002b883a 	mov	r21,zero
1000dbb8:	01400084 	movi	r5,2
1000dbbc:	003fca06 	br	1000dae8 <__alt_data_end+0xf800dae8>
1000dbc0:	8023883a 	mov	r17,r16
1000dbc4:	a829883a 	mov	r20,r21
1000dbc8:	4039883a 	mov	fp,r8
1000dbcc:	280f883a 	mov	r7,r5
1000dbd0:	00800084 	movi	r2,2
1000dbd4:	3881601e 	bne	r7,r2,1000e158 <__divdf3+0x6e8>
1000dbd8:	e027883a 	mov	r19,fp
1000dbdc:	9900004c 	andi	r4,r19,1
1000dbe0:	0081ffc4 	movi	r2,2047
1000dbe4:	0021883a 	mov	r16,zero
1000dbe8:	002b883a 	mov	r21,zero
1000dbec:	1004953a 	slli	r2,r2,20
1000dbf0:	20c03fcc 	andi	r3,r4,255
1000dbf4:	01400434 	movhi	r5,16
1000dbf8:	297fffc4 	addi	r5,r5,-1
1000dbfc:	180697fa 	slli	r3,r3,31
1000dc00:	8160703a 	and	r16,r16,r5
1000dc04:	80a0b03a 	or	r16,r16,r2
1000dc08:	80c6b03a 	or	r3,r16,r3
1000dc0c:	a805883a 	mov	r2,r21
1000dc10:	dfc00f17 	ldw	ra,60(sp)
1000dc14:	df000e17 	ldw	fp,56(sp)
1000dc18:	ddc00d17 	ldw	r23,52(sp)
1000dc1c:	dd800c17 	ldw	r22,48(sp)
1000dc20:	dd400b17 	ldw	r21,44(sp)
1000dc24:	dd000a17 	ldw	r20,40(sp)
1000dc28:	dcc00917 	ldw	r19,36(sp)
1000dc2c:	dc800817 	ldw	r18,32(sp)
1000dc30:	dc400717 	ldw	r17,28(sp)
1000dc34:	dc000617 	ldw	r16,24(sp)
1000dc38:	dec01004 	addi	sp,sp,64
1000dc3c:	f800283a 	ret
1000dc40:	2404b03a 	or	r2,r4,r16
1000dc44:	2023883a 	mov	r17,r4
1000dc48:	10003f26 	beq	r2,zero,1000dd48 <__divdf3+0x2d8>
1000dc4c:	80015e26 	beq	r16,zero,1000e1c8 <__divdf3+0x758>
1000dc50:	8009883a 	mov	r4,r16
1000dc54:	d9800215 	stw	r6,8(sp)
1000dc58:	d9c00515 	stw	r7,20(sp)
1000dc5c:	da000415 	stw	r8,16(sp)
1000dc60:	000fa040 	call	1000fa04 <__clzsi2>
1000dc64:	d9800217 	ldw	r6,8(sp)
1000dc68:	d9c00517 	ldw	r7,20(sp)
1000dc6c:	da000417 	ldw	r8,16(sp)
1000dc70:	113ffd44 	addi	r4,r2,-11
1000dc74:	00c00704 	movi	r3,28
1000dc78:	19014f16 	blt	r3,r4,1000e1b8 <__divdf3+0x748>
1000dc7c:	00c00744 	movi	r3,29
1000dc80:	157ffe04 	addi	r21,r2,-8
1000dc84:	1907c83a 	sub	r3,r3,r4
1000dc88:	8560983a 	sll	r16,r16,r21
1000dc8c:	88c6d83a 	srl	r3,r17,r3
1000dc90:	8d6a983a 	sll	r21,r17,r21
1000dc94:	1c20b03a 	or	r16,r3,r16
1000dc98:	1080fcc4 	addi	r2,r2,1011
1000dc9c:	00a5c83a 	sub	r18,zero,r2
1000dca0:	0013883a 	mov	r9,zero
1000dca4:	000b883a 	mov	r5,zero
1000dca8:	003f8f06 	br	1000dae8 <__alt_data_end+0xf800dae8>
1000dcac:	3444b03a 	or	r2,r6,r17
1000dcb0:	1000231e 	bne	r2,zero,1000dd40 <__divdf3+0x2d0>
1000dcb4:	0023883a 	mov	r17,zero
1000dcb8:	0029883a 	mov	r20,zero
1000dcbc:	01c00084 	movi	r7,2
1000dcc0:	003f9b06 	br	1000db30 <__alt_data_end+0xf800db30>
1000dcc4:	3444b03a 	or	r2,r6,r17
1000dcc8:	10001926 	beq	r2,zero,1000dd30 <__divdf3+0x2c0>
1000dccc:	88014b26 	beq	r17,zero,1000e1fc <__divdf3+0x78c>
1000dcd0:	8809883a 	mov	r4,r17
1000dcd4:	d9400115 	stw	r5,4(sp)
1000dcd8:	d9800215 	stw	r6,8(sp)
1000dcdc:	da000415 	stw	r8,16(sp)
1000dce0:	da400315 	stw	r9,12(sp)
1000dce4:	000fa040 	call	1000fa04 <__clzsi2>
1000dce8:	d9400117 	ldw	r5,4(sp)
1000dcec:	d9800217 	ldw	r6,8(sp)
1000dcf0:	da000417 	ldw	r8,16(sp)
1000dcf4:	da400317 	ldw	r9,12(sp)
1000dcf8:	113ffd44 	addi	r4,r2,-11
1000dcfc:	00c00704 	movi	r3,28
1000dd00:	19013a16 	blt	r3,r4,1000e1ec <__divdf3+0x77c>
1000dd04:	00c00744 	movi	r3,29
1000dd08:	153ffe04 	addi	r20,r2,-8
1000dd0c:	1907c83a 	sub	r3,r3,r4
1000dd10:	8d22983a 	sll	r17,r17,r20
1000dd14:	30c6d83a 	srl	r3,r6,r3
1000dd18:	3528983a 	sll	r20,r6,r20
1000dd1c:	1c62b03a 	or	r17,r3,r17
1000dd20:	1080fcc4 	addi	r2,r2,1011
1000dd24:	0087c83a 	sub	r3,zero,r2
1000dd28:	000f883a 	mov	r7,zero
1000dd2c:	003f8006 	br	1000db30 <__alt_data_end+0xf800db30>
1000dd30:	0023883a 	mov	r17,zero
1000dd34:	0029883a 	mov	r20,zero
1000dd38:	01c00044 	movi	r7,1
1000dd3c:	003f7c06 	br	1000db30 <__alt_data_end+0xf800db30>
1000dd40:	01c000c4 	movi	r7,3
1000dd44:	003f7a06 	br	1000db30 <__alt_data_end+0xf800db30>
1000dd48:	02400104 	movi	r9,4
1000dd4c:	0021883a 	mov	r16,zero
1000dd50:	002b883a 	mov	r21,zero
1000dd54:	01400044 	movi	r5,1
1000dd58:	003f6306 	br	1000dae8 <__alt_data_end+0xf800dae8>
1000dd5c:	02400304 	movi	r9,12
1000dd60:	014000c4 	movi	r5,3
1000dd64:	003f6006 	br	1000dae8 <__alt_data_end+0xf800dae8>
1000dd68:	04000434 	movhi	r16,16
1000dd6c:	0009883a 	mov	r4,zero
1000dd70:	843fffc4 	addi	r16,r16,-1
1000dd74:	057fffc4 	movi	r21,-1
1000dd78:	0081ffc4 	movi	r2,2047
1000dd7c:	003f9b06 	br	1000dbec <__alt_data_end+0xf800dbec>
1000dd80:	00c00044 	movi	r3,1
1000dd84:	1887c83a 	sub	r3,r3,r2
1000dd88:	01000e04 	movi	r4,56
1000dd8c:	20c1530e 	bge	r4,r3,1000e2dc <__divdf3+0x86c>
1000dd90:	9900004c 	andi	r4,r19,1
1000dd94:	0005883a 	mov	r2,zero
1000dd98:	0021883a 	mov	r16,zero
1000dd9c:	002b883a 	mov	r21,zero
1000dda0:	003f9206 	br	1000dbec <__alt_data_end+0xf800dbec>
1000dda4:	8c012e36 	bltu	r17,r16,1000e260 <__divdf3+0x7f0>
1000dda8:	84412c26 	beq	r16,r17,1000e25c <__divdf3+0x7ec>
1000ddac:	a82f883a 	mov	r23,r21
1000ddb0:	18ffffc4 	addi	r3,r3,-1
1000ddb4:	002b883a 	mov	r21,zero
1000ddb8:	a004d63a 	srli	r2,r20,24
1000ddbc:	8822923a 	slli	r17,r17,8
1000ddc0:	a028923a 	slli	r20,r20,8
1000ddc4:	8009883a 	mov	r4,r16
1000ddc8:	88acb03a 	or	r22,r17,r2
1000ddcc:	dd000015 	stw	r20,0(sp)
1000ddd0:	b028d43a 	srli	r20,r22,16
1000ddd4:	d8c00215 	stw	r3,8(sp)
1000ddd8:	b4bfffcc 	andi	r18,r22,65535
1000dddc:	a00b883a 	mov	r5,r20
1000dde0:	00017280 	call	10001728 <__udivsi3>
1000dde4:	100b883a 	mov	r5,r2
1000dde8:	9009883a 	mov	r4,r18
1000ddec:	1023883a 	mov	r17,r2
1000ddf0:	00017e40 	call	100017e4 <__mulsi3>
1000ddf4:	8009883a 	mov	r4,r16
1000ddf8:	a00b883a 	mov	r5,r20
1000ddfc:	1039883a 	mov	fp,r2
1000de00:	000178c0 	call	1000178c <__umodsi3>
1000de04:	1004943a 	slli	r2,r2,16
1000de08:	b808d43a 	srli	r4,r23,16
1000de0c:	d8c00217 	ldw	r3,8(sp)
1000de10:	2084b03a 	or	r2,r4,r2
1000de14:	1700062e 	bgeu	r2,fp,1000de30 <__divdf3+0x3c0>
1000de18:	1585883a 	add	r2,r2,r22
1000de1c:	893fffc4 	addi	r4,r17,-1
1000de20:	15811d36 	bltu	r2,r22,1000e298 <__divdf3+0x828>
1000de24:	17011c2e 	bgeu	r2,fp,1000e298 <__divdf3+0x828>
1000de28:	8c7fff84 	addi	r17,r17,-2
1000de2c:	1585883a 	add	r2,r2,r22
1000de30:	1739c83a 	sub	fp,r2,fp
1000de34:	a00b883a 	mov	r5,r20
1000de38:	e009883a 	mov	r4,fp
1000de3c:	d8c00215 	stw	r3,8(sp)
1000de40:	00017280 	call	10001728 <__udivsi3>
1000de44:	100b883a 	mov	r5,r2
1000de48:	9009883a 	mov	r4,r18
1000de4c:	1021883a 	mov	r16,r2
1000de50:	00017e40 	call	100017e4 <__mulsi3>
1000de54:	a00b883a 	mov	r5,r20
1000de58:	e009883a 	mov	r4,fp
1000de5c:	d8800415 	stw	r2,16(sp)
1000de60:	000178c0 	call	1000178c <__umodsi3>
1000de64:	1004943a 	slli	r2,r2,16
1000de68:	da000417 	ldw	r8,16(sp)
1000de6c:	bdffffcc 	andi	r23,r23,65535
1000de70:	b884b03a 	or	r2,r23,r2
1000de74:	d8c00217 	ldw	r3,8(sp)
1000de78:	1200062e 	bgeu	r2,r8,1000de94 <__divdf3+0x424>
1000de7c:	1585883a 	add	r2,r2,r22
1000de80:	813fffc4 	addi	r4,r16,-1
1000de84:	15810236 	bltu	r2,r22,1000e290 <__divdf3+0x820>
1000de88:	1201012e 	bgeu	r2,r8,1000e290 <__divdf3+0x820>
1000de8c:	843fff84 	addi	r16,r16,-2
1000de90:	1585883a 	add	r2,r2,r22
1000de94:	8822943a 	slli	r17,r17,16
1000de98:	d9800017 	ldw	r6,0(sp)
1000de9c:	1211c83a 	sub	r8,r2,r8
1000dea0:	8c22b03a 	or	r17,r17,r16
1000dea4:	373fffcc 	andi	fp,r6,65535
1000dea8:	8abfffcc 	andi	r10,r17,65535
1000deac:	8820d43a 	srli	r16,r17,16
1000deb0:	5009883a 	mov	r4,r10
1000deb4:	e00b883a 	mov	r5,fp
1000deb8:	302ed43a 	srli	r23,r6,16
1000debc:	d8c00215 	stw	r3,8(sp)
1000dec0:	da000415 	stw	r8,16(sp)
1000dec4:	da800115 	stw	r10,4(sp)
1000dec8:	00017e40 	call	100017e4 <__mulsi3>
1000decc:	800b883a 	mov	r5,r16
1000ded0:	e009883a 	mov	r4,fp
1000ded4:	d8800515 	stw	r2,20(sp)
1000ded8:	00017e40 	call	100017e4 <__mulsi3>
1000dedc:	8009883a 	mov	r4,r16
1000dee0:	b80b883a 	mov	r5,r23
1000dee4:	d8800315 	stw	r2,12(sp)
1000dee8:	00017e40 	call	100017e4 <__mulsi3>
1000deec:	da800117 	ldw	r10,4(sp)
1000def0:	b80b883a 	mov	r5,r23
1000def4:	1021883a 	mov	r16,r2
1000def8:	5009883a 	mov	r4,r10
1000defc:	00017e40 	call	100017e4 <__mulsi3>
1000df00:	d9c00517 	ldw	r7,20(sp)
1000df04:	da400317 	ldw	r9,12(sp)
1000df08:	d8c00217 	ldw	r3,8(sp)
1000df0c:	3808d43a 	srli	r4,r7,16
1000df10:	1245883a 	add	r2,r2,r9
1000df14:	da000417 	ldw	r8,16(sp)
1000df18:	2085883a 	add	r2,r4,r2
1000df1c:	1240022e 	bgeu	r2,r9,1000df28 <__divdf3+0x4b8>
1000df20:	01000074 	movhi	r4,1
1000df24:	8121883a 	add	r16,r16,r4
1000df28:	1008d43a 	srli	r4,r2,16
1000df2c:	1004943a 	slli	r2,r2,16
1000df30:	39ffffcc 	andi	r7,r7,65535
1000df34:	2409883a 	add	r4,r4,r16
1000df38:	11c5883a 	add	r2,r2,r7
1000df3c:	4100bb36 	bltu	r8,r4,1000e22c <__divdf3+0x7bc>
1000df40:	4100d726 	beq	r8,r4,1000e2a0 <__divdf3+0x830>
1000df44:	4109c83a 	sub	r4,r8,r4
1000df48:	a8a1c83a 	sub	r16,r21,r2
1000df4c:	ac2b803a 	cmpltu	r21,r21,r16
1000df50:	256bc83a 	sub	r21,r4,r21
1000df54:	b540d926 	beq	r22,r21,1000e2bc <__divdf3+0x84c>
1000df58:	a00b883a 	mov	r5,r20
1000df5c:	a809883a 	mov	r4,r21
1000df60:	d8c00215 	stw	r3,8(sp)
1000df64:	00017280 	call	10001728 <__udivsi3>
1000df68:	100b883a 	mov	r5,r2
1000df6c:	9009883a 	mov	r4,r18
1000df70:	d8800515 	stw	r2,20(sp)
1000df74:	00017e40 	call	100017e4 <__mulsi3>
1000df78:	a809883a 	mov	r4,r21
1000df7c:	a00b883a 	mov	r5,r20
1000df80:	d8800415 	stw	r2,16(sp)
1000df84:	000178c0 	call	1000178c <__umodsi3>
1000df88:	1004943a 	slli	r2,r2,16
1000df8c:	8008d43a 	srli	r4,r16,16
1000df90:	da000417 	ldw	r8,16(sp)
1000df94:	d8c00217 	ldw	r3,8(sp)
1000df98:	2084b03a 	or	r2,r4,r2
1000df9c:	d9c00517 	ldw	r7,20(sp)
1000dfa0:	1200062e 	bgeu	r2,r8,1000dfbc <__divdf3+0x54c>
1000dfa4:	1585883a 	add	r2,r2,r22
1000dfa8:	393fffc4 	addi	r4,r7,-1
1000dfac:	1580c536 	bltu	r2,r22,1000e2c4 <__divdf3+0x854>
1000dfb0:	1200c42e 	bgeu	r2,r8,1000e2c4 <__divdf3+0x854>
1000dfb4:	39ffff84 	addi	r7,r7,-2
1000dfb8:	1585883a 	add	r2,r2,r22
1000dfbc:	122bc83a 	sub	r21,r2,r8
1000dfc0:	a00b883a 	mov	r5,r20
1000dfc4:	a809883a 	mov	r4,r21
1000dfc8:	d8c00215 	stw	r3,8(sp)
1000dfcc:	d9c00515 	stw	r7,20(sp)
1000dfd0:	00017280 	call	10001728 <__udivsi3>
1000dfd4:	9009883a 	mov	r4,r18
1000dfd8:	100b883a 	mov	r5,r2
1000dfdc:	d8800415 	stw	r2,16(sp)
1000dfe0:	00017e40 	call	100017e4 <__mulsi3>
1000dfe4:	a809883a 	mov	r4,r21
1000dfe8:	a00b883a 	mov	r5,r20
1000dfec:	1025883a 	mov	r18,r2
1000dff0:	000178c0 	call	1000178c <__umodsi3>
1000dff4:	1004943a 	slli	r2,r2,16
1000dff8:	813fffcc 	andi	r4,r16,65535
1000dffc:	d8c00217 	ldw	r3,8(sp)
1000e000:	20a0b03a 	or	r16,r4,r2
1000e004:	d9c00517 	ldw	r7,20(sp)
1000e008:	da000417 	ldw	r8,16(sp)
1000e00c:	8480062e 	bgeu	r16,r18,1000e028 <__divdf3+0x5b8>
1000e010:	85a1883a 	add	r16,r16,r22
1000e014:	40bfffc4 	addi	r2,r8,-1
1000e018:	8580ac36 	bltu	r16,r22,1000e2cc <__divdf3+0x85c>
1000e01c:	8480ab2e 	bgeu	r16,r18,1000e2cc <__divdf3+0x85c>
1000e020:	423fff84 	addi	r8,r8,-2
1000e024:	85a1883a 	add	r16,r16,r22
1000e028:	3804943a 	slli	r2,r7,16
1000e02c:	84a1c83a 	sub	r16,r16,r18
1000e030:	e009883a 	mov	r4,fp
1000e034:	1228b03a 	or	r20,r2,r8
1000e038:	a1ffffcc 	andi	r7,r20,65535
1000e03c:	a024d43a 	srli	r18,r20,16
1000e040:	380b883a 	mov	r5,r7
1000e044:	d8c00215 	stw	r3,8(sp)
1000e048:	d9c00515 	stw	r7,20(sp)
1000e04c:	00017e40 	call	100017e4 <__mulsi3>
1000e050:	900b883a 	mov	r5,r18
1000e054:	e009883a 	mov	r4,fp
1000e058:	102b883a 	mov	r21,r2
1000e05c:	00017e40 	call	100017e4 <__mulsi3>
1000e060:	900b883a 	mov	r5,r18
1000e064:	b809883a 	mov	r4,r23
1000e068:	1039883a 	mov	fp,r2
1000e06c:	00017e40 	call	100017e4 <__mulsi3>
1000e070:	d9c00517 	ldw	r7,20(sp)
1000e074:	b80b883a 	mov	r5,r23
1000e078:	1025883a 	mov	r18,r2
1000e07c:	3809883a 	mov	r4,r7
1000e080:	00017e40 	call	100017e4 <__mulsi3>
1000e084:	a808d43a 	srli	r4,r21,16
1000e088:	1705883a 	add	r2,r2,fp
1000e08c:	d8c00217 	ldw	r3,8(sp)
1000e090:	2085883a 	add	r2,r4,r2
1000e094:	1700022e 	bgeu	r2,fp,1000e0a0 <__divdf3+0x630>
1000e098:	01000074 	movhi	r4,1
1000e09c:	9125883a 	add	r18,r18,r4
1000e0a0:	1008d43a 	srli	r4,r2,16
1000e0a4:	1004943a 	slli	r2,r2,16
1000e0a8:	ad7fffcc 	andi	r21,r21,65535
1000e0ac:	2489883a 	add	r4,r4,r18
1000e0b0:	1545883a 	add	r2,r2,r21
1000e0b4:	81003836 	bltu	r16,r4,1000e198 <__divdf3+0x728>
1000e0b8:	81003626 	beq	r16,r4,1000e194 <__divdf3+0x724>
1000e0bc:	a5000054 	ori	r20,r20,1
1000e0c0:	1880ffc4 	addi	r2,r3,1023
1000e0c4:	00bf2e0e 	bge	zero,r2,1000dd80 <__alt_data_end+0xf800dd80>
1000e0c8:	a10001cc 	andi	r4,r20,7
1000e0cc:	20000726 	beq	r4,zero,1000e0ec <__divdf3+0x67c>
1000e0d0:	a10003cc 	andi	r4,r20,15
1000e0d4:	01400104 	movi	r5,4
1000e0d8:	21400426 	beq	r4,r5,1000e0ec <__divdf3+0x67c>
1000e0dc:	a149883a 	add	r4,r20,r5
1000e0e0:	2529803a 	cmpltu	r20,r4,r20
1000e0e4:	8d23883a 	add	r17,r17,r20
1000e0e8:	2029883a 	mov	r20,r4
1000e0ec:	8900402c 	andhi	r4,r17,256
1000e0f0:	20000426 	beq	r4,zero,1000e104 <__divdf3+0x694>
1000e0f4:	18810004 	addi	r2,r3,1024
1000e0f8:	00ffc034 	movhi	r3,65280
1000e0fc:	18ffffc4 	addi	r3,r3,-1
1000e100:	88e2703a 	and	r17,r17,r3
1000e104:	00c1ff84 	movi	r3,2046
1000e108:	18beb416 	blt	r3,r2,1000dbdc <__alt_data_end+0xf800dbdc>
1000e10c:	a028d0fa 	srli	r20,r20,3
1000e110:	882a977a 	slli	r21,r17,29
1000e114:	8820927a 	slli	r16,r17,9
1000e118:	1081ffcc 	andi	r2,r2,2047
1000e11c:	ad2ab03a 	or	r21,r21,r20
1000e120:	8020d33a 	srli	r16,r16,12
1000e124:	9900004c 	andi	r4,r19,1
1000e128:	003eb006 	br	1000dbec <__alt_data_end+0xf800dbec>
1000e12c:	8080022c 	andhi	r2,r16,8
1000e130:	10001226 	beq	r2,zero,1000e17c <__divdf3+0x70c>
1000e134:	8880022c 	andhi	r2,r17,8
1000e138:	1000101e 	bne	r2,zero,1000e17c <__divdf3+0x70c>
1000e13c:	00800434 	movhi	r2,16
1000e140:	8c000234 	orhi	r16,r17,8
1000e144:	10bfffc4 	addi	r2,r2,-1
1000e148:	b809883a 	mov	r4,r23
1000e14c:	80a0703a 	and	r16,r16,r2
1000e150:	a02b883a 	mov	r21,r20
1000e154:	003f0806 	br	1000dd78 <__alt_data_end+0xf800dd78>
1000e158:	008000c4 	movi	r2,3
1000e15c:	3880b126 	beq	r7,r2,1000e424 <__divdf3+0x9b4>
1000e160:	00800044 	movi	r2,1
1000e164:	38805b1e 	bne	r7,r2,1000e2d4 <__divdf3+0x864>
1000e168:	e009883a 	mov	r4,fp
1000e16c:	0005883a 	mov	r2,zero
1000e170:	0021883a 	mov	r16,zero
1000e174:	002b883a 	mov	r21,zero
1000e178:	003e9c06 	br	1000dbec <__alt_data_end+0xf800dbec>
1000e17c:	00800434 	movhi	r2,16
1000e180:	84000234 	orhi	r16,r16,8
1000e184:	10bfffc4 	addi	r2,r2,-1
1000e188:	b009883a 	mov	r4,r22
1000e18c:	80a0703a 	and	r16,r16,r2
1000e190:	003ef906 	br	1000dd78 <__alt_data_end+0xf800dd78>
1000e194:	103fca26 	beq	r2,zero,1000e0c0 <__alt_data_end+0xf800e0c0>
1000e198:	b421883a 	add	r16,r22,r16
1000e19c:	a17fffc4 	addi	r5,r20,-1
1000e1a0:	8580422e 	bgeu	r16,r22,1000e2ac <__divdf3+0x83c>
1000e1a4:	2829883a 	mov	r20,r5
1000e1a8:	813fc41e 	bne	r16,r4,1000e0bc <__alt_data_end+0xf800e0bc>
1000e1ac:	d9800017 	ldw	r6,0(sp)
1000e1b0:	30bfc21e 	bne	r6,r2,1000e0bc <__alt_data_end+0xf800e0bc>
1000e1b4:	003fc206 	br	1000e0c0 <__alt_data_end+0xf800e0c0>
1000e1b8:	143ff604 	addi	r16,r2,-40
1000e1bc:	8c20983a 	sll	r16,r17,r16
1000e1c0:	002b883a 	mov	r21,zero
1000e1c4:	003eb406 	br	1000dc98 <__alt_data_end+0xf800dc98>
1000e1c8:	d9800215 	stw	r6,8(sp)
1000e1cc:	d9c00515 	stw	r7,20(sp)
1000e1d0:	da000415 	stw	r8,16(sp)
1000e1d4:	000fa040 	call	1000fa04 <__clzsi2>
1000e1d8:	10800804 	addi	r2,r2,32
1000e1dc:	da000417 	ldw	r8,16(sp)
1000e1e0:	d9c00517 	ldw	r7,20(sp)
1000e1e4:	d9800217 	ldw	r6,8(sp)
1000e1e8:	003ea106 	br	1000dc70 <__alt_data_end+0xf800dc70>
1000e1ec:	147ff604 	addi	r17,r2,-40
1000e1f0:	3462983a 	sll	r17,r6,r17
1000e1f4:	0029883a 	mov	r20,zero
1000e1f8:	003ec906 	br	1000dd20 <__alt_data_end+0xf800dd20>
1000e1fc:	3009883a 	mov	r4,r6
1000e200:	d9400115 	stw	r5,4(sp)
1000e204:	d9800215 	stw	r6,8(sp)
1000e208:	da000415 	stw	r8,16(sp)
1000e20c:	da400315 	stw	r9,12(sp)
1000e210:	000fa040 	call	1000fa04 <__clzsi2>
1000e214:	10800804 	addi	r2,r2,32
1000e218:	da400317 	ldw	r9,12(sp)
1000e21c:	da000417 	ldw	r8,16(sp)
1000e220:	d9800217 	ldw	r6,8(sp)
1000e224:	d9400117 	ldw	r5,4(sp)
1000e228:	003eb306 	br	1000dcf8 <__alt_data_end+0xf800dcf8>
1000e22c:	d9800017 	ldw	r6,0(sp)
1000e230:	a9ab883a 	add	r21,r21,r6
1000e234:	a98b803a 	cmpltu	r5,r21,r6
1000e238:	2d8b883a 	add	r5,r5,r22
1000e23c:	2a11883a 	add	r8,r5,r8
1000e240:	897fffc4 	addi	r5,r17,-1
1000e244:	b2000c2e 	bgeu	r22,r8,1000e278 <__divdf3+0x808>
1000e248:	41003f36 	bltu	r8,r4,1000e348 <__divdf3+0x8d8>
1000e24c:	22006c26 	beq	r4,r8,1000e400 <__divdf3+0x990>
1000e250:	4109c83a 	sub	r4,r8,r4
1000e254:	2823883a 	mov	r17,r5
1000e258:	003f3b06 	br	1000df48 <__alt_data_end+0xf800df48>
1000e25c:	ad3ed336 	bltu	r21,r20,1000ddac <__alt_data_end+0xf800ddac>
1000e260:	a804d07a 	srli	r2,r21,1
1000e264:	802e97fa 	slli	r23,r16,31
1000e268:	a82a97fa 	slli	r21,r21,31
1000e26c:	8020d07a 	srli	r16,r16,1
1000e270:	b8aeb03a 	or	r23,r23,r2
1000e274:	003ed006 	br	1000ddb8 <__alt_data_end+0xf800ddb8>
1000e278:	b23ff51e 	bne	r22,r8,1000e250 <__alt_data_end+0xf800e250>
1000e27c:	d9800017 	ldw	r6,0(sp)
1000e280:	a9bff12e 	bgeu	r21,r6,1000e248 <__alt_data_end+0xf800e248>
1000e284:	b109c83a 	sub	r4,r22,r4
1000e288:	2823883a 	mov	r17,r5
1000e28c:	003f2e06 	br	1000df48 <__alt_data_end+0xf800df48>
1000e290:	2021883a 	mov	r16,r4
1000e294:	003eff06 	br	1000de94 <__alt_data_end+0xf800de94>
1000e298:	2023883a 	mov	r17,r4
1000e29c:	003ee406 	br	1000de30 <__alt_data_end+0xf800de30>
1000e2a0:	a8bfe236 	bltu	r21,r2,1000e22c <__alt_data_end+0xf800e22c>
1000e2a4:	0009883a 	mov	r4,zero
1000e2a8:	003f2706 	br	1000df48 <__alt_data_end+0xf800df48>
1000e2ac:	81002d36 	bltu	r16,r4,1000e364 <__divdf3+0x8f4>
1000e2b0:	24005626 	beq	r4,r16,1000e40c <__divdf3+0x99c>
1000e2b4:	2829883a 	mov	r20,r5
1000e2b8:	003f8006 	br	1000e0bc <__alt_data_end+0xf800e0bc>
1000e2bc:	053fffc4 	movi	r20,-1
1000e2c0:	003f7f06 	br	1000e0c0 <__alt_data_end+0xf800e0c0>
1000e2c4:	200f883a 	mov	r7,r4
1000e2c8:	003f3c06 	br	1000dfbc <__alt_data_end+0xf800dfbc>
1000e2cc:	1011883a 	mov	r8,r2
1000e2d0:	003f5506 	br	1000e028 <__alt_data_end+0xf800e028>
1000e2d4:	e027883a 	mov	r19,fp
1000e2d8:	003f7906 	br	1000e0c0 <__alt_data_end+0xf800e0c0>
1000e2dc:	010007c4 	movi	r4,31
1000e2e0:	20c02816 	blt	r4,r3,1000e384 <__divdf3+0x914>
1000e2e4:	00800804 	movi	r2,32
1000e2e8:	10c5c83a 	sub	r2,r2,r3
1000e2ec:	888a983a 	sll	r5,r17,r2
1000e2f0:	a0c8d83a 	srl	r4,r20,r3
1000e2f4:	a084983a 	sll	r2,r20,r2
1000e2f8:	88e2d83a 	srl	r17,r17,r3
1000e2fc:	2906b03a 	or	r3,r5,r4
1000e300:	1004c03a 	cmpne	r2,r2,zero
1000e304:	1886b03a 	or	r3,r3,r2
1000e308:	188001cc 	andi	r2,r3,7
1000e30c:	10000726 	beq	r2,zero,1000e32c <__divdf3+0x8bc>
1000e310:	188003cc 	andi	r2,r3,15
1000e314:	01000104 	movi	r4,4
1000e318:	11000426 	beq	r2,r4,1000e32c <__divdf3+0x8bc>
1000e31c:	1805883a 	mov	r2,r3
1000e320:	10c00104 	addi	r3,r2,4
1000e324:	1885803a 	cmpltu	r2,r3,r2
1000e328:	88a3883a 	add	r17,r17,r2
1000e32c:	8880202c 	andhi	r2,r17,128
1000e330:	10002926 	beq	r2,zero,1000e3d8 <__divdf3+0x968>
1000e334:	9900004c 	andi	r4,r19,1
1000e338:	00800044 	movi	r2,1
1000e33c:	0021883a 	mov	r16,zero
1000e340:	002b883a 	mov	r21,zero
1000e344:	003e2906 	br	1000dbec <__alt_data_end+0xf800dbec>
1000e348:	d9800017 	ldw	r6,0(sp)
1000e34c:	8c7fff84 	addi	r17,r17,-2
1000e350:	a9ab883a 	add	r21,r21,r6
1000e354:	a98b803a 	cmpltu	r5,r21,r6
1000e358:	2d8b883a 	add	r5,r5,r22
1000e35c:	2a11883a 	add	r8,r5,r8
1000e360:	003ef806 	br	1000df44 <__alt_data_end+0xf800df44>
1000e364:	d9800017 	ldw	r6,0(sp)
1000e368:	318f883a 	add	r7,r6,r6
1000e36c:	398b803a 	cmpltu	r5,r7,r6
1000e370:	2d8d883a 	add	r6,r5,r22
1000e374:	81a1883a 	add	r16,r16,r6
1000e378:	a17fff84 	addi	r5,r20,-2
1000e37c:	d9c00015 	stw	r7,0(sp)
1000e380:	003f8806 	br	1000e1a4 <__alt_data_end+0xf800e1a4>
1000e384:	013ff844 	movi	r4,-31
1000e388:	2085c83a 	sub	r2,r4,r2
1000e38c:	8888d83a 	srl	r4,r17,r2
1000e390:	00800804 	movi	r2,32
1000e394:	18802126 	beq	r3,r2,1000e41c <__divdf3+0x9ac>
1000e398:	04001004 	movi	r16,64
1000e39c:	80c7c83a 	sub	r3,r16,r3
1000e3a0:	88e0983a 	sll	r16,r17,r3
1000e3a4:	8504b03a 	or	r2,r16,r20
1000e3a8:	1004c03a 	cmpne	r2,r2,zero
1000e3ac:	2084b03a 	or	r2,r4,r2
1000e3b0:	144001cc 	andi	r17,r2,7
1000e3b4:	88000d1e 	bne	r17,zero,1000e3ec <__divdf3+0x97c>
1000e3b8:	0021883a 	mov	r16,zero
1000e3bc:	102ad0fa 	srli	r21,r2,3
1000e3c0:	9900004c 	andi	r4,r19,1
1000e3c4:	0005883a 	mov	r2,zero
1000e3c8:	ac6ab03a 	or	r21,r21,r17
1000e3cc:	003e0706 	br	1000dbec <__alt_data_end+0xf800dbec>
1000e3d0:	1007883a 	mov	r3,r2
1000e3d4:	0023883a 	mov	r17,zero
1000e3d8:	8820927a 	slli	r16,r17,9
1000e3dc:	1805883a 	mov	r2,r3
1000e3e0:	8822977a 	slli	r17,r17,29
1000e3e4:	8020d33a 	srli	r16,r16,12
1000e3e8:	003ff406 	br	1000e3bc <__alt_data_end+0xf800e3bc>
1000e3ec:	10c003cc 	andi	r3,r2,15
1000e3f0:	01000104 	movi	r4,4
1000e3f4:	193ff626 	beq	r3,r4,1000e3d0 <__alt_data_end+0xf800e3d0>
1000e3f8:	0023883a 	mov	r17,zero
1000e3fc:	003fc806 	br	1000e320 <__alt_data_end+0xf800e320>
1000e400:	a8bfd136 	bltu	r21,r2,1000e348 <__alt_data_end+0xf800e348>
1000e404:	2823883a 	mov	r17,r5
1000e408:	003fa606 	br	1000e2a4 <__alt_data_end+0xf800e2a4>
1000e40c:	d9800017 	ldw	r6,0(sp)
1000e410:	30bfd436 	bltu	r6,r2,1000e364 <__alt_data_end+0xf800e364>
1000e414:	2829883a 	mov	r20,r5
1000e418:	003f6406 	br	1000e1ac <__alt_data_end+0xf800e1ac>
1000e41c:	0021883a 	mov	r16,zero
1000e420:	003fe006 	br	1000e3a4 <__alt_data_end+0xf800e3a4>
1000e424:	00800434 	movhi	r2,16
1000e428:	8c000234 	orhi	r16,r17,8
1000e42c:	10bfffc4 	addi	r2,r2,-1
1000e430:	e009883a 	mov	r4,fp
1000e434:	80a0703a 	and	r16,r16,r2
1000e438:	a02b883a 	mov	r21,r20
1000e43c:	003e4e06 	br	1000dd78 <__alt_data_end+0xf800dd78>

1000e440 <__eqdf2>:
1000e440:	2804d53a 	srli	r2,r5,20
1000e444:	3806d53a 	srli	r3,r7,20
1000e448:	02000434 	movhi	r8,16
1000e44c:	423fffc4 	addi	r8,r8,-1
1000e450:	1081ffcc 	andi	r2,r2,2047
1000e454:	0281ffc4 	movi	r10,2047
1000e458:	2a12703a 	and	r9,r5,r8
1000e45c:	18c1ffcc 	andi	r3,r3,2047
1000e460:	3a10703a 	and	r8,r7,r8
1000e464:	280ad7fa 	srli	r5,r5,31
1000e468:	380ed7fa 	srli	r7,r7,31
1000e46c:	12801026 	beq	r2,r10,1000e4b0 <__eqdf2+0x70>
1000e470:	0281ffc4 	movi	r10,2047
1000e474:	1a800a26 	beq	r3,r10,1000e4a0 <__eqdf2+0x60>
1000e478:	10c00226 	beq	r2,r3,1000e484 <__eqdf2+0x44>
1000e47c:	00800044 	movi	r2,1
1000e480:	f800283a 	ret
1000e484:	4a3ffd1e 	bne	r9,r8,1000e47c <__alt_data_end+0xf800e47c>
1000e488:	21bffc1e 	bne	r4,r6,1000e47c <__alt_data_end+0xf800e47c>
1000e48c:	29c00c26 	beq	r5,r7,1000e4c0 <__eqdf2+0x80>
1000e490:	103ffa1e 	bne	r2,zero,1000e47c <__alt_data_end+0xf800e47c>
1000e494:	2244b03a 	or	r2,r4,r9
1000e498:	1004c03a 	cmpne	r2,r2,zero
1000e49c:	f800283a 	ret
1000e4a0:	3214b03a 	or	r10,r6,r8
1000e4a4:	503ff426 	beq	r10,zero,1000e478 <__alt_data_end+0xf800e478>
1000e4a8:	00800044 	movi	r2,1
1000e4ac:	f800283a 	ret
1000e4b0:	2254b03a 	or	r10,r4,r9
1000e4b4:	503fee26 	beq	r10,zero,1000e470 <__alt_data_end+0xf800e470>
1000e4b8:	00800044 	movi	r2,1
1000e4bc:	f800283a 	ret
1000e4c0:	0005883a 	mov	r2,zero
1000e4c4:	f800283a 	ret

1000e4c8 <__gedf2>:
1000e4c8:	2804d53a 	srli	r2,r5,20
1000e4cc:	3806d53a 	srli	r3,r7,20
1000e4d0:	02000434 	movhi	r8,16
1000e4d4:	423fffc4 	addi	r8,r8,-1
1000e4d8:	1081ffcc 	andi	r2,r2,2047
1000e4dc:	0241ffc4 	movi	r9,2047
1000e4e0:	2a14703a 	and	r10,r5,r8
1000e4e4:	18c1ffcc 	andi	r3,r3,2047
1000e4e8:	3a10703a 	and	r8,r7,r8
1000e4ec:	280ad7fa 	srli	r5,r5,31
1000e4f0:	380ed7fa 	srli	r7,r7,31
1000e4f4:	12401d26 	beq	r2,r9,1000e56c <__gedf2+0xa4>
1000e4f8:	0241ffc4 	movi	r9,2047
1000e4fc:	1a401226 	beq	r3,r9,1000e548 <__gedf2+0x80>
1000e500:	1000081e 	bne	r2,zero,1000e524 <__gedf2+0x5c>
1000e504:	2296b03a 	or	r11,r4,r10
1000e508:	5813003a 	cmpeq	r9,r11,zero
1000e50c:	1800091e 	bne	r3,zero,1000e534 <__gedf2+0x6c>
1000e510:	3218b03a 	or	r12,r6,r8
1000e514:	6000071e 	bne	r12,zero,1000e534 <__gedf2+0x6c>
1000e518:	0005883a 	mov	r2,zero
1000e51c:	5800101e 	bne	r11,zero,1000e560 <__gedf2+0x98>
1000e520:	f800283a 	ret
1000e524:	18000c1e 	bne	r3,zero,1000e558 <__gedf2+0x90>
1000e528:	3212b03a 	or	r9,r6,r8
1000e52c:	48000c26 	beq	r9,zero,1000e560 <__gedf2+0x98>
1000e530:	0013883a 	mov	r9,zero
1000e534:	39c03fcc 	andi	r7,r7,255
1000e538:	48000826 	beq	r9,zero,1000e55c <__gedf2+0x94>
1000e53c:	38000926 	beq	r7,zero,1000e564 <__gedf2+0x9c>
1000e540:	00800044 	movi	r2,1
1000e544:	f800283a 	ret
1000e548:	3212b03a 	or	r9,r6,r8
1000e54c:	483fec26 	beq	r9,zero,1000e500 <__alt_data_end+0xf800e500>
1000e550:	00bfff84 	movi	r2,-2
1000e554:	f800283a 	ret
1000e558:	39c03fcc 	andi	r7,r7,255
1000e55c:	29c00626 	beq	r5,r7,1000e578 <__gedf2+0xb0>
1000e560:	283ff726 	beq	r5,zero,1000e540 <__alt_data_end+0xf800e540>
1000e564:	00bfffc4 	movi	r2,-1
1000e568:	f800283a 	ret
1000e56c:	2292b03a 	or	r9,r4,r10
1000e570:	483fe126 	beq	r9,zero,1000e4f8 <__alt_data_end+0xf800e4f8>
1000e574:	003ff606 	br	1000e550 <__alt_data_end+0xf800e550>
1000e578:	18bff916 	blt	r3,r2,1000e560 <__alt_data_end+0xf800e560>
1000e57c:	10c00316 	blt	r2,r3,1000e58c <__gedf2+0xc4>
1000e580:	42bff736 	bltu	r8,r10,1000e560 <__alt_data_end+0xf800e560>
1000e584:	52000326 	beq	r10,r8,1000e594 <__gedf2+0xcc>
1000e588:	5200042e 	bgeu	r10,r8,1000e59c <__gedf2+0xd4>
1000e58c:	283fec1e 	bne	r5,zero,1000e540 <__alt_data_end+0xf800e540>
1000e590:	003ff406 	br	1000e564 <__alt_data_end+0xf800e564>
1000e594:	313ff236 	bltu	r6,r4,1000e560 <__alt_data_end+0xf800e560>
1000e598:	21bffc36 	bltu	r4,r6,1000e58c <__alt_data_end+0xf800e58c>
1000e59c:	0005883a 	mov	r2,zero
1000e5a0:	f800283a 	ret

1000e5a4 <__ledf2>:
1000e5a4:	2804d53a 	srli	r2,r5,20
1000e5a8:	3810d53a 	srli	r8,r7,20
1000e5ac:	00c00434 	movhi	r3,16
1000e5b0:	18ffffc4 	addi	r3,r3,-1
1000e5b4:	1081ffcc 	andi	r2,r2,2047
1000e5b8:	0241ffc4 	movi	r9,2047
1000e5bc:	28d4703a 	and	r10,r5,r3
1000e5c0:	4201ffcc 	andi	r8,r8,2047
1000e5c4:	38c6703a 	and	r3,r7,r3
1000e5c8:	280ad7fa 	srli	r5,r5,31
1000e5cc:	380ed7fa 	srli	r7,r7,31
1000e5d0:	12401f26 	beq	r2,r9,1000e650 <__ledf2+0xac>
1000e5d4:	0241ffc4 	movi	r9,2047
1000e5d8:	42401426 	beq	r8,r9,1000e62c <__ledf2+0x88>
1000e5dc:	1000091e 	bne	r2,zero,1000e604 <__ledf2+0x60>
1000e5e0:	2296b03a 	or	r11,r4,r10
1000e5e4:	5813003a 	cmpeq	r9,r11,zero
1000e5e8:	29403fcc 	andi	r5,r5,255
1000e5ec:	40000a1e 	bne	r8,zero,1000e618 <__ledf2+0x74>
1000e5f0:	30d8b03a 	or	r12,r6,r3
1000e5f4:	6000081e 	bne	r12,zero,1000e618 <__ledf2+0x74>
1000e5f8:	0005883a 	mov	r2,zero
1000e5fc:	5800111e 	bne	r11,zero,1000e644 <__ledf2+0xa0>
1000e600:	f800283a 	ret
1000e604:	29403fcc 	andi	r5,r5,255
1000e608:	40000c1e 	bne	r8,zero,1000e63c <__ledf2+0x98>
1000e60c:	30d2b03a 	or	r9,r6,r3
1000e610:	48000c26 	beq	r9,zero,1000e644 <__ledf2+0xa0>
1000e614:	0013883a 	mov	r9,zero
1000e618:	39c03fcc 	andi	r7,r7,255
1000e61c:	48000826 	beq	r9,zero,1000e640 <__ledf2+0x9c>
1000e620:	38001126 	beq	r7,zero,1000e668 <__ledf2+0xc4>
1000e624:	00800044 	movi	r2,1
1000e628:	f800283a 	ret
1000e62c:	30d2b03a 	or	r9,r6,r3
1000e630:	483fea26 	beq	r9,zero,1000e5dc <__alt_data_end+0xf800e5dc>
1000e634:	00800084 	movi	r2,2
1000e638:	f800283a 	ret
1000e63c:	39c03fcc 	andi	r7,r7,255
1000e640:	39400726 	beq	r7,r5,1000e660 <__ledf2+0xbc>
1000e644:	2800081e 	bne	r5,zero,1000e668 <__ledf2+0xc4>
1000e648:	00800044 	movi	r2,1
1000e64c:	f800283a 	ret
1000e650:	2292b03a 	or	r9,r4,r10
1000e654:	483fdf26 	beq	r9,zero,1000e5d4 <__alt_data_end+0xf800e5d4>
1000e658:	00800084 	movi	r2,2
1000e65c:	f800283a 	ret
1000e660:	4080030e 	bge	r8,r2,1000e670 <__ledf2+0xcc>
1000e664:	383fef26 	beq	r7,zero,1000e624 <__alt_data_end+0xf800e624>
1000e668:	00bfffc4 	movi	r2,-1
1000e66c:	f800283a 	ret
1000e670:	123feb16 	blt	r2,r8,1000e620 <__alt_data_end+0xf800e620>
1000e674:	1abff336 	bltu	r3,r10,1000e644 <__alt_data_end+0xf800e644>
1000e678:	50c00326 	beq	r10,r3,1000e688 <__ledf2+0xe4>
1000e67c:	50c0042e 	bgeu	r10,r3,1000e690 <__ledf2+0xec>
1000e680:	283fe81e 	bne	r5,zero,1000e624 <__alt_data_end+0xf800e624>
1000e684:	003ff806 	br	1000e668 <__alt_data_end+0xf800e668>
1000e688:	313fee36 	bltu	r6,r4,1000e644 <__alt_data_end+0xf800e644>
1000e68c:	21bffc36 	bltu	r4,r6,1000e680 <__alt_data_end+0xf800e680>
1000e690:	0005883a 	mov	r2,zero
1000e694:	f800283a 	ret

1000e698 <__muldf3>:
1000e698:	deffee04 	addi	sp,sp,-72
1000e69c:	dd000c15 	stw	r20,48(sp)
1000e6a0:	2828d53a 	srli	r20,r5,20
1000e6a4:	ddc00f15 	stw	r23,60(sp)
1000e6a8:	282ed7fa 	srli	r23,r5,31
1000e6ac:	dc000815 	stw	r16,32(sp)
1000e6b0:	04000434 	movhi	r16,16
1000e6b4:	dcc00b15 	stw	r19,44(sp)
1000e6b8:	843fffc4 	addi	r16,r16,-1
1000e6bc:	dfc01115 	stw	ra,68(sp)
1000e6c0:	df001015 	stw	fp,64(sp)
1000e6c4:	dd800e15 	stw	r22,56(sp)
1000e6c8:	dd400d15 	stw	r21,52(sp)
1000e6cc:	dc800a15 	stw	r18,40(sp)
1000e6d0:	dc400915 	stw	r17,36(sp)
1000e6d4:	a501ffcc 	andi	r20,r20,2047
1000e6d8:	2c20703a 	and	r16,r5,r16
1000e6dc:	b827883a 	mov	r19,r23
1000e6e0:	ba403fcc 	andi	r9,r23,255
1000e6e4:	a0006026 	beq	r20,zero,1000e868 <__muldf3+0x1d0>
1000e6e8:	0081ffc4 	movi	r2,2047
1000e6ec:	202d883a 	mov	r22,r4
1000e6f0:	a0803626 	beq	r20,r2,1000e7cc <__muldf3+0x134>
1000e6f4:	84000434 	orhi	r16,r16,16
1000e6f8:	200ad77a 	srli	r5,r4,29
1000e6fc:	800490fa 	slli	r2,r16,3
1000e700:	202c90fa 	slli	r22,r4,3
1000e704:	a53f0044 	addi	r20,r20,-1023
1000e708:	28a0b03a 	or	r16,r5,r2
1000e70c:	002b883a 	mov	r21,zero
1000e710:	000b883a 	mov	r5,zero
1000e714:	3804d53a 	srli	r2,r7,20
1000e718:	3838d7fa 	srli	fp,r7,31
1000e71c:	04400434 	movhi	r17,16
1000e720:	8c7fffc4 	addi	r17,r17,-1
1000e724:	1081ffcc 	andi	r2,r2,2047
1000e728:	3025883a 	mov	r18,r6
1000e72c:	3c62703a 	and	r17,r7,r17
1000e730:	e2803fcc 	andi	r10,fp,255
1000e734:	10006d26 	beq	r2,zero,1000e8ec <__muldf3+0x254>
1000e738:	00c1ffc4 	movi	r3,2047
1000e73c:	10c06526 	beq	r2,r3,1000e8d4 <__muldf3+0x23c>
1000e740:	8c400434 	orhi	r17,r17,16
1000e744:	300ed77a 	srli	r7,r6,29
1000e748:	880690fa 	slli	r3,r17,3
1000e74c:	302490fa 	slli	r18,r6,3
1000e750:	10bf0044 	addi	r2,r2,-1023
1000e754:	38e2b03a 	or	r17,r7,r3
1000e758:	000f883a 	mov	r7,zero
1000e75c:	a087883a 	add	r3,r20,r2
1000e760:	010003c4 	movi	r4,15
1000e764:	3d44b03a 	or	r2,r7,r21
1000e768:	e5ccf03a 	xor	r6,fp,r23
1000e76c:	1a000044 	addi	r8,r3,1
1000e770:	20809b36 	bltu	r4,r2,1000e9e0 <__muldf3+0x348>
1000e774:	100490ba 	slli	r2,r2,2
1000e778:	01040074 	movhi	r4,4097
1000e77c:	2139e304 	addi	r4,r4,-6260
1000e780:	1105883a 	add	r2,r2,r4
1000e784:	10800017 	ldw	r2,0(r2)
1000e788:	1000683a 	jmp	r2
1000e78c:	1000e9e0 	cmpeqi	zero,r2,935
1000e790:	1000e7ec 	andhi	zero,r2,927
1000e794:	1000e7ec 	andhi	zero,r2,927
1000e798:	1000e7e8 	cmpgeui	zero,r2,927
1000e79c:	1000e9bc 	xorhi	zero,r2,934
1000e7a0:	1000e9bc 	xorhi	zero,r2,934
1000e7a4:	1000e9a4 	muli	zero,r2,934
1000e7a8:	1000e7e8 	cmpgeui	zero,r2,927
1000e7ac:	1000e9bc 	xorhi	zero,r2,934
1000e7b0:	1000e9a4 	muli	zero,r2,934
1000e7b4:	1000e9bc 	xorhi	zero,r2,934
1000e7b8:	1000e7e8 	cmpgeui	zero,r2,927
1000e7bc:	1000e9cc 	andi	zero,r2,935
1000e7c0:	1000e9cc 	andi	zero,r2,935
1000e7c4:	1000e9cc 	andi	zero,r2,935
1000e7c8:	1000ed2c 	andhi	zero,r2,948
1000e7cc:	2404b03a 	or	r2,r4,r16
1000e7d0:	1000711e 	bne	r2,zero,1000e998 <__muldf3+0x300>
1000e7d4:	05400204 	movi	r21,8
1000e7d8:	0021883a 	mov	r16,zero
1000e7dc:	002d883a 	mov	r22,zero
1000e7e0:	01400084 	movi	r5,2
1000e7e4:	003fcb06 	br	1000e714 <__alt_data_end+0xf800e714>
1000e7e8:	500d883a 	mov	r6,r10
1000e7ec:	00800084 	movi	r2,2
1000e7f0:	38805926 	beq	r7,r2,1000e958 <__muldf3+0x2c0>
1000e7f4:	008000c4 	movi	r2,3
1000e7f8:	3881bb26 	beq	r7,r2,1000eee8 <__muldf3+0x850>
1000e7fc:	00800044 	movi	r2,1
1000e800:	3881961e 	bne	r7,r2,1000ee5c <__muldf3+0x7c4>
1000e804:	3027883a 	mov	r19,r6
1000e808:	0005883a 	mov	r2,zero
1000e80c:	0021883a 	mov	r16,zero
1000e810:	002d883a 	mov	r22,zero
1000e814:	1004953a 	slli	r2,r2,20
1000e818:	98c03fcc 	andi	r3,r19,255
1000e81c:	04400434 	movhi	r17,16
1000e820:	8c7fffc4 	addi	r17,r17,-1
1000e824:	180697fa 	slli	r3,r3,31
1000e828:	8460703a 	and	r16,r16,r17
1000e82c:	80a0b03a 	or	r16,r16,r2
1000e830:	80c6b03a 	or	r3,r16,r3
1000e834:	b005883a 	mov	r2,r22
1000e838:	dfc01117 	ldw	ra,68(sp)
1000e83c:	df001017 	ldw	fp,64(sp)
1000e840:	ddc00f17 	ldw	r23,60(sp)
1000e844:	dd800e17 	ldw	r22,56(sp)
1000e848:	dd400d17 	ldw	r21,52(sp)
1000e84c:	dd000c17 	ldw	r20,48(sp)
1000e850:	dcc00b17 	ldw	r19,44(sp)
1000e854:	dc800a17 	ldw	r18,40(sp)
1000e858:	dc400917 	ldw	r17,36(sp)
1000e85c:	dc000817 	ldw	r16,32(sp)
1000e860:	dec01204 	addi	sp,sp,72
1000e864:	f800283a 	ret
1000e868:	2404b03a 	or	r2,r4,r16
1000e86c:	202b883a 	mov	r21,r4
1000e870:	10004426 	beq	r2,zero,1000e984 <__muldf3+0x2ec>
1000e874:	80015126 	beq	r16,zero,1000edbc <__muldf3+0x724>
1000e878:	8009883a 	mov	r4,r16
1000e87c:	d9800715 	stw	r6,28(sp)
1000e880:	d9c00215 	stw	r7,8(sp)
1000e884:	da400415 	stw	r9,16(sp)
1000e888:	000fa040 	call	1000fa04 <__clzsi2>
1000e88c:	d9800717 	ldw	r6,28(sp)
1000e890:	d9c00217 	ldw	r7,8(sp)
1000e894:	da400417 	ldw	r9,16(sp)
1000e898:	113ffd44 	addi	r4,r2,-11
1000e89c:	00c00704 	movi	r3,28
1000e8a0:	19014216 	blt	r3,r4,1000edac <__muldf3+0x714>
1000e8a4:	00c00744 	movi	r3,29
1000e8a8:	15bffe04 	addi	r22,r2,-8
1000e8ac:	1907c83a 	sub	r3,r3,r4
1000e8b0:	85a0983a 	sll	r16,r16,r22
1000e8b4:	a8c6d83a 	srl	r3,r21,r3
1000e8b8:	adac983a 	sll	r22,r21,r22
1000e8bc:	1c20b03a 	or	r16,r3,r16
1000e8c0:	1080fcc4 	addi	r2,r2,1011
1000e8c4:	00a9c83a 	sub	r20,zero,r2
1000e8c8:	002b883a 	mov	r21,zero
1000e8cc:	000b883a 	mov	r5,zero
1000e8d0:	003f9006 	br	1000e714 <__alt_data_end+0xf800e714>
1000e8d4:	3446b03a 	or	r3,r6,r17
1000e8d8:	1800281e 	bne	r3,zero,1000e97c <__muldf3+0x2e4>
1000e8dc:	0023883a 	mov	r17,zero
1000e8e0:	0025883a 	mov	r18,zero
1000e8e4:	01c00084 	movi	r7,2
1000e8e8:	003f9c06 	br	1000e75c <__alt_data_end+0xf800e75c>
1000e8ec:	3446b03a 	or	r3,r6,r17
1000e8f0:	18001e26 	beq	r3,zero,1000e96c <__muldf3+0x2d4>
1000e8f4:	88012126 	beq	r17,zero,1000ed7c <__muldf3+0x6e4>
1000e8f8:	8809883a 	mov	r4,r17
1000e8fc:	d9400215 	stw	r5,8(sp)
1000e900:	d9800715 	stw	r6,28(sp)
1000e904:	da400415 	stw	r9,16(sp)
1000e908:	da800315 	stw	r10,12(sp)
1000e90c:	000fa040 	call	1000fa04 <__clzsi2>
1000e910:	d9400217 	ldw	r5,8(sp)
1000e914:	d9800717 	ldw	r6,28(sp)
1000e918:	da400417 	ldw	r9,16(sp)
1000e91c:	da800317 	ldw	r10,12(sp)
1000e920:	113ffd44 	addi	r4,r2,-11
1000e924:	00c00704 	movi	r3,28
1000e928:	19011016 	blt	r3,r4,1000ed6c <__muldf3+0x6d4>
1000e92c:	00c00744 	movi	r3,29
1000e930:	14bffe04 	addi	r18,r2,-8
1000e934:	1907c83a 	sub	r3,r3,r4
1000e938:	8ca2983a 	sll	r17,r17,r18
1000e93c:	30c6d83a 	srl	r3,r6,r3
1000e940:	34a4983a 	sll	r18,r6,r18
1000e944:	1c62b03a 	or	r17,r3,r17
1000e948:	1080fcc4 	addi	r2,r2,1011
1000e94c:	0085c83a 	sub	r2,zero,r2
1000e950:	000f883a 	mov	r7,zero
1000e954:	003f8106 	br	1000e75c <__alt_data_end+0xf800e75c>
1000e958:	3027883a 	mov	r19,r6
1000e95c:	0081ffc4 	movi	r2,2047
1000e960:	0021883a 	mov	r16,zero
1000e964:	002d883a 	mov	r22,zero
1000e968:	003faa06 	br	1000e814 <__alt_data_end+0xf800e814>
1000e96c:	0023883a 	mov	r17,zero
1000e970:	0025883a 	mov	r18,zero
1000e974:	01c00044 	movi	r7,1
1000e978:	003f7806 	br	1000e75c <__alt_data_end+0xf800e75c>
1000e97c:	01c000c4 	movi	r7,3
1000e980:	003f7606 	br	1000e75c <__alt_data_end+0xf800e75c>
1000e984:	05400104 	movi	r21,4
1000e988:	0021883a 	mov	r16,zero
1000e98c:	002d883a 	mov	r22,zero
1000e990:	01400044 	movi	r5,1
1000e994:	003f5f06 	br	1000e714 <__alt_data_end+0xf800e714>
1000e998:	05400304 	movi	r21,12
1000e99c:	014000c4 	movi	r5,3
1000e9a0:	003f5c06 	br	1000e714 <__alt_data_end+0xf800e714>
1000e9a4:	04000434 	movhi	r16,16
1000e9a8:	0027883a 	mov	r19,zero
1000e9ac:	843fffc4 	addi	r16,r16,-1
1000e9b0:	05bfffc4 	movi	r22,-1
1000e9b4:	0081ffc4 	movi	r2,2047
1000e9b8:	003f9606 	br	1000e814 <__alt_data_end+0xf800e814>
1000e9bc:	8023883a 	mov	r17,r16
1000e9c0:	b025883a 	mov	r18,r22
1000e9c4:	280f883a 	mov	r7,r5
1000e9c8:	003f8806 	br	1000e7ec <__alt_data_end+0xf800e7ec>
1000e9cc:	8023883a 	mov	r17,r16
1000e9d0:	b025883a 	mov	r18,r22
1000e9d4:	480d883a 	mov	r6,r9
1000e9d8:	280f883a 	mov	r7,r5
1000e9dc:	003f8306 	br	1000e7ec <__alt_data_end+0xf800e7ec>
1000e9e0:	b026d43a 	srli	r19,r22,16
1000e9e4:	902ed43a 	srli	r23,r18,16
1000e9e8:	b5bfffcc 	andi	r22,r22,65535
1000e9ec:	94bfffcc 	andi	r18,r18,65535
1000e9f0:	b00b883a 	mov	r5,r22
1000e9f4:	9009883a 	mov	r4,r18
1000e9f8:	d8c00515 	stw	r3,20(sp)
1000e9fc:	d9800715 	stw	r6,28(sp)
1000ea00:	da000615 	stw	r8,24(sp)
1000ea04:	00017e40 	call	100017e4 <__mulsi3>
1000ea08:	980b883a 	mov	r5,r19
1000ea0c:	9009883a 	mov	r4,r18
1000ea10:	1029883a 	mov	r20,r2
1000ea14:	00017e40 	call	100017e4 <__mulsi3>
1000ea18:	b80b883a 	mov	r5,r23
1000ea1c:	9809883a 	mov	r4,r19
1000ea20:	102b883a 	mov	r21,r2
1000ea24:	00017e40 	call	100017e4 <__mulsi3>
1000ea28:	b809883a 	mov	r4,r23
1000ea2c:	b00b883a 	mov	r5,r22
1000ea30:	1039883a 	mov	fp,r2
1000ea34:	00017e40 	call	100017e4 <__mulsi3>
1000ea38:	a008d43a 	srli	r4,r20,16
1000ea3c:	1545883a 	add	r2,r2,r21
1000ea40:	d8c00517 	ldw	r3,20(sp)
1000ea44:	2085883a 	add	r2,r4,r2
1000ea48:	d9800717 	ldw	r6,28(sp)
1000ea4c:	da000617 	ldw	r8,24(sp)
1000ea50:	1540022e 	bgeu	r2,r21,1000ea5c <__muldf3+0x3c4>
1000ea54:	01000074 	movhi	r4,1
1000ea58:	e139883a 	add	fp,fp,r4
1000ea5c:	100e943a 	slli	r7,r2,16
1000ea60:	1004d43a 	srli	r2,r2,16
1000ea64:	882ad43a 	srli	r21,r17,16
1000ea68:	a53fffcc 	andi	r20,r20,65535
1000ea6c:	8c7fffcc 	andi	r17,r17,65535
1000ea70:	3d29883a 	add	r20,r7,r20
1000ea74:	b00b883a 	mov	r5,r22
1000ea78:	8809883a 	mov	r4,r17
1000ea7c:	d8c00515 	stw	r3,20(sp)
1000ea80:	d9800715 	stw	r6,28(sp)
1000ea84:	da000615 	stw	r8,24(sp)
1000ea88:	dd000115 	stw	r20,4(sp)
1000ea8c:	d8800015 	stw	r2,0(sp)
1000ea90:	00017e40 	call	100017e4 <__mulsi3>
1000ea94:	980b883a 	mov	r5,r19
1000ea98:	8809883a 	mov	r4,r17
1000ea9c:	d8800215 	stw	r2,8(sp)
1000eaa0:	00017e40 	call	100017e4 <__mulsi3>
1000eaa4:	9809883a 	mov	r4,r19
1000eaa8:	a80b883a 	mov	r5,r21
1000eaac:	1029883a 	mov	r20,r2
1000eab0:	00017e40 	call	100017e4 <__mulsi3>
1000eab4:	b00b883a 	mov	r5,r22
1000eab8:	a809883a 	mov	r4,r21
1000eabc:	d8800415 	stw	r2,16(sp)
1000eac0:	00017e40 	call	100017e4 <__mulsi3>
1000eac4:	d9c00217 	ldw	r7,8(sp)
1000eac8:	1505883a 	add	r2,r2,r20
1000eacc:	d8c00517 	ldw	r3,20(sp)
1000ead0:	3826d43a 	srli	r19,r7,16
1000ead4:	d9800717 	ldw	r6,28(sp)
1000ead8:	da000617 	ldw	r8,24(sp)
1000eadc:	9885883a 	add	r2,r19,r2
1000eae0:	da400417 	ldw	r9,16(sp)
1000eae4:	1500022e 	bgeu	r2,r20,1000eaf0 <__muldf3+0x458>
1000eae8:	01000074 	movhi	r4,1
1000eaec:	4913883a 	add	r9,r9,r4
1000eaf0:	1028d43a 	srli	r20,r2,16
1000eaf4:	1004943a 	slli	r2,r2,16
1000eaf8:	802cd43a 	srli	r22,r16,16
1000eafc:	843fffcc 	andi	r16,r16,65535
1000eb00:	3cffffcc 	andi	r19,r7,65535
1000eb04:	9009883a 	mov	r4,r18
1000eb08:	800b883a 	mov	r5,r16
1000eb0c:	a269883a 	add	r20,r20,r9
1000eb10:	d8c00515 	stw	r3,20(sp)
1000eb14:	d9800715 	stw	r6,28(sp)
1000eb18:	da000615 	stw	r8,24(sp)
1000eb1c:	14e7883a 	add	r19,r2,r19
1000eb20:	00017e40 	call	100017e4 <__mulsi3>
1000eb24:	9009883a 	mov	r4,r18
1000eb28:	b00b883a 	mov	r5,r22
1000eb2c:	d8800315 	stw	r2,12(sp)
1000eb30:	00017e40 	call	100017e4 <__mulsi3>
1000eb34:	b809883a 	mov	r4,r23
1000eb38:	b00b883a 	mov	r5,r22
1000eb3c:	d8800215 	stw	r2,8(sp)
1000eb40:	00017e40 	call	100017e4 <__mulsi3>
1000eb44:	b80b883a 	mov	r5,r23
1000eb48:	8009883a 	mov	r4,r16
1000eb4c:	d8800415 	stw	r2,16(sp)
1000eb50:	00017e40 	call	100017e4 <__mulsi3>
1000eb54:	da800317 	ldw	r10,12(sp)
1000eb58:	d9c00217 	ldw	r7,8(sp)
1000eb5c:	d9000017 	ldw	r4,0(sp)
1000eb60:	502ed43a 	srli	r23,r10,16
1000eb64:	11c5883a 	add	r2,r2,r7
1000eb68:	24e5883a 	add	r18,r4,r19
1000eb6c:	b885883a 	add	r2,r23,r2
1000eb70:	d8c00517 	ldw	r3,20(sp)
1000eb74:	d9800717 	ldw	r6,28(sp)
1000eb78:	da000617 	ldw	r8,24(sp)
1000eb7c:	da400417 	ldw	r9,16(sp)
1000eb80:	11c0022e 	bgeu	r2,r7,1000eb8c <__muldf3+0x4f4>
1000eb84:	01000074 	movhi	r4,1
1000eb88:	4913883a 	add	r9,r9,r4
1000eb8c:	100ed43a 	srli	r7,r2,16
1000eb90:	1004943a 	slli	r2,r2,16
1000eb94:	55ffffcc 	andi	r23,r10,65535
1000eb98:	3a53883a 	add	r9,r7,r9
1000eb9c:	8809883a 	mov	r4,r17
1000eba0:	800b883a 	mov	r5,r16
1000eba4:	d8c00515 	stw	r3,20(sp)
1000eba8:	d9800715 	stw	r6,28(sp)
1000ebac:	da000615 	stw	r8,24(sp)
1000ebb0:	da400415 	stw	r9,16(sp)
1000ebb4:	15ef883a 	add	r23,r2,r23
1000ebb8:	00017e40 	call	100017e4 <__mulsi3>
1000ebbc:	8809883a 	mov	r4,r17
1000ebc0:	b00b883a 	mov	r5,r22
1000ebc4:	d8800215 	stw	r2,8(sp)
1000ebc8:	00017e40 	call	100017e4 <__mulsi3>
1000ebcc:	b00b883a 	mov	r5,r22
1000ebd0:	a809883a 	mov	r4,r21
1000ebd4:	d8800315 	stw	r2,12(sp)
1000ebd8:	00017e40 	call	100017e4 <__mulsi3>
1000ebdc:	8009883a 	mov	r4,r16
1000ebe0:	a80b883a 	mov	r5,r21
1000ebe4:	1023883a 	mov	r17,r2
1000ebe8:	00017e40 	call	100017e4 <__mulsi3>
1000ebec:	d9c00217 	ldw	r7,8(sp)
1000ebf0:	da800317 	ldw	r10,12(sp)
1000ebf4:	d8c00517 	ldw	r3,20(sp)
1000ebf8:	3808d43a 	srli	r4,r7,16
1000ebfc:	1285883a 	add	r2,r2,r10
1000ec00:	d9800717 	ldw	r6,28(sp)
1000ec04:	2085883a 	add	r2,r4,r2
1000ec08:	da000617 	ldw	r8,24(sp)
1000ec0c:	da400417 	ldw	r9,16(sp)
1000ec10:	1280022e 	bgeu	r2,r10,1000ec1c <__muldf3+0x584>
1000ec14:	01000074 	movhi	r4,1
1000ec18:	8923883a 	add	r17,r17,r4
1000ec1c:	1008943a 	slli	r4,r2,16
1000ec20:	39ffffcc 	andi	r7,r7,65535
1000ec24:	e4b9883a 	add	fp,fp,r18
1000ec28:	21cf883a 	add	r7,r4,r7
1000ec2c:	e4e7803a 	cmpltu	r19,fp,r19
1000ec30:	3d0f883a 	add	r7,r7,r20
1000ec34:	bf39883a 	add	fp,r23,fp
1000ec38:	99c9883a 	add	r4,r19,r7
1000ec3c:	e5ef803a 	cmpltu	r23,fp,r23
1000ec40:	490b883a 	add	r5,r9,r4
1000ec44:	1004d43a 	srli	r2,r2,16
1000ec48:	b965883a 	add	r18,r23,r5
1000ec4c:	24c9803a 	cmpltu	r4,r4,r19
1000ec50:	3d29803a 	cmpltu	r20,r7,r20
1000ec54:	a128b03a 	or	r20,r20,r4
1000ec58:	95ef803a 	cmpltu	r23,r18,r23
1000ec5c:	2a53803a 	cmpltu	r9,r5,r9
1000ec60:	a0a9883a 	add	r20,r20,r2
1000ec64:	4deeb03a 	or	r23,r9,r23
1000ec68:	a5ef883a 	add	r23,r20,r23
1000ec6c:	bc63883a 	add	r17,r23,r17
1000ec70:	e004927a 	slli	r2,fp,9
1000ec74:	d9000117 	ldw	r4,4(sp)
1000ec78:	882e927a 	slli	r23,r17,9
1000ec7c:	9022d5fa 	srli	r17,r18,23
1000ec80:	e038d5fa 	srli	fp,fp,23
1000ec84:	1104b03a 	or	r2,r2,r4
1000ec88:	9024927a 	slli	r18,r18,9
1000ec8c:	1004c03a 	cmpne	r2,r2,zero
1000ec90:	bc62b03a 	or	r17,r23,r17
1000ec94:	1738b03a 	or	fp,r2,fp
1000ec98:	8880402c 	andhi	r2,r17,256
1000ec9c:	e4a4b03a 	or	r18,fp,r18
1000eca0:	10000726 	beq	r2,zero,1000ecc0 <__muldf3+0x628>
1000eca4:	9006d07a 	srli	r3,r18,1
1000eca8:	880497fa 	slli	r2,r17,31
1000ecac:	9480004c 	andi	r18,r18,1
1000ecb0:	8822d07a 	srli	r17,r17,1
1000ecb4:	1ca4b03a 	or	r18,r3,r18
1000ecb8:	14a4b03a 	or	r18,r2,r18
1000ecbc:	4007883a 	mov	r3,r8
1000ecc0:	1880ffc4 	addi	r2,r3,1023
1000ecc4:	0080460e 	bge	zero,r2,1000ede0 <__muldf3+0x748>
1000ecc8:	910001cc 	andi	r4,r18,7
1000eccc:	20000726 	beq	r4,zero,1000ecec <__muldf3+0x654>
1000ecd0:	910003cc 	andi	r4,r18,15
1000ecd4:	01400104 	movi	r5,4
1000ecd8:	21400426 	beq	r4,r5,1000ecec <__muldf3+0x654>
1000ecdc:	9149883a 	add	r4,r18,r5
1000ece0:	24a5803a 	cmpltu	r18,r4,r18
1000ece4:	8ca3883a 	add	r17,r17,r18
1000ece8:	2025883a 	mov	r18,r4
1000ecec:	8900402c 	andhi	r4,r17,256
1000ecf0:	20000426 	beq	r4,zero,1000ed04 <__muldf3+0x66c>
1000ecf4:	18810004 	addi	r2,r3,1024
1000ecf8:	00ffc034 	movhi	r3,65280
1000ecfc:	18ffffc4 	addi	r3,r3,-1
1000ed00:	88e2703a 	and	r17,r17,r3
1000ed04:	00c1ff84 	movi	r3,2046
1000ed08:	18bf1316 	blt	r3,r2,1000e958 <__alt_data_end+0xf800e958>
1000ed0c:	882c977a 	slli	r22,r17,29
1000ed10:	9024d0fa 	srli	r18,r18,3
1000ed14:	8822927a 	slli	r17,r17,9
1000ed18:	1081ffcc 	andi	r2,r2,2047
1000ed1c:	b4acb03a 	or	r22,r22,r18
1000ed20:	8820d33a 	srli	r16,r17,12
1000ed24:	3027883a 	mov	r19,r6
1000ed28:	003eba06 	br	1000e814 <__alt_data_end+0xf800e814>
1000ed2c:	8080022c 	andhi	r2,r16,8
1000ed30:	10000926 	beq	r2,zero,1000ed58 <__muldf3+0x6c0>
1000ed34:	8880022c 	andhi	r2,r17,8
1000ed38:	1000071e 	bne	r2,zero,1000ed58 <__muldf3+0x6c0>
1000ed3c:	00800434 	movhi	r2,16
1000ed40:	8c000234 	orhi	r16,r17,8
1000ed44:	10bfffc4 	addi	r2,r2,-1
1000ed48:	e027883a 	mov	r19,fp
1000ed4c:	80a0703a 	and	r16,r16,r2
1000ed50:	902d883a 	mov	r22,r18
1000ed54:	003f1706 	br	1000e9b4 <__alt_data_end+0xf800e9b4>
1000ed58:	00800434 	movhi	r2,16
1000ed5c:	84000234 	orhi	r16,r16,8
1000ed60:	10bfffc4 	addi	r2,r2,-1
1000ed64:	80a0703a 	and	r16,r16,r2
1000ed68:	003f1206 	br	1000e9b4 <__alt_data_end+0xf800e9b4>
1000ed6c:	147ff604 	addi	r17,r2,-40
1000ed70:	3462983a 	sll	r17,r6,r17
1000ed74:	0025883a 	mov	r18,zero
1000ed78:	003ef306 	br	1000e948 <__alt_data_end+0xf800e948>
1000ed7c:	3009883a 	mov	r4,r6
1000ed80:	d9400215 	stw	r5,8(sp)
1000ed84:	d9800715 	stw	r6,28(sp)
1000ed88:	da400415 	stw	r9,16(sp)
1000ed8c:	da800315 	stw	r10,12(sp)
1000ed90:	000fa040 	call	1000fa04 <__clzsi2>
1000ed94:	10800804 	addi	r2,r2,32
1000ed98:	da800317 	ldw	r10,12(sp)
1000ed9c:	da400417 	ldw	r9,16(sp)
1000eda0:	d9800717 	ldw	r6,28(sp)
1000eda4:	d9400217 	ldw	r5,8(sp)
1000eda8:	003edd06 	br	1000e920 <__alt_data_end+0xf800e920>
1000edac:	143ff604 	addi	r16,r2,-40
1000edb0:	ac20983a 	sll	r16,r21,r16
1000edb4:	002d883a 	mov	r22,zero
1000edb8:	003ec106 	br	1000e8c0 <__alt_data_end+0xf800e8c0>
1000edbc:	d9800715 	stw	r6,28(sp)
1000edc0:	d9c00215 	stw	r7,8(sp)
1000edc4:	da400415 	stw	r9,16(sp)
1000edc8:	000fa040 	call	1000fa04 <__clzsi2>
1000edcc:	10800804 	addi	r2,r2,32
1000edd0:	da400417 	ldw	r9,16(sp)
1000edd4:	d9c00217 	ldw	r7,8(sp)
1000edd8:	d9800717 	ldw	r6,28(sp)
1000eddc:	003eae06 	br	1000e898 <__alt_data_end+0xf800e898>
1000ede0:	00c00044 	movi	r3,1
1000ede4:	1887c83a 	sub	r3,r3,r2
1000ede8:	01000e04 	movi	r4,56
1000edec:	20fe8516 	blt	r4,r3,1000e804 <__alt_data_end+0xf800e804>
1000edf0:	010007c4 	movi	r4,31
1000edf4:	20c01b16 	blt	r4,r3,1000ee64 <__muldf3+0x7cc>
1000edf8:	00800804 	movi	r2,32
1000edfc:	10c5c83a 	sub	r2,r2,r3
1000ee00:	888a983a 	sll	r5,r17,r2
1000ee04:	90c8d83a 	srl	r4,r18,r3
1000ee08:	9084983a 	sll	r2,r18,r2
1000ee0c:	88e2d83a 	srl	r17,r17,r3
1000ee10:	2906b03a 	or	r3,r5,r4
1000ee14:	1004c03a 	cmpne	r2,r2,zero
1000ee18:	1886b03a 	or	r3,r3,r2
1000ee1c:	188001cc 	andi	r2,r3,7
1000ee20:	10000726 	beq	r2,zero,1000ee40 <__muldf3+0x7a8>
1000ee24:	188003cc 	andi	r2,r3,15
1000ee28:	01000104 	movi	r4,4
1000ee2c:	11000426 	beq	r2,r4,1000ee40 <__muldf3+0x7a8>
1000ee30:	1805883a 	mov	r2,r3
1000ee34:	10c00104 	addi	r3,r2,4
1000ee38:	1885803a 	cmpltu	r2,r3,r2
1000ee3c:	88a3883a 	add	r17,r17,r2
1000ee40:	8880202c 	andhi	r2,r17,128
1000ee44:	10001c26 	beq	r2,zero,1000eeb8 <__muldf3+0x820>
1000ee48:	3027883a 	mov	r19,r6
1000ee4c:	00800044 	movi	r2,1
1000ee50:	0021883a 	mov	r16,zero
1000ee54:	002d883a 	mov	r22,zero
1000ee58:	003e6e06 	br	1000e814 <__alt_data_end+0xf800e814>
1000ee5c:	4007883a 	mov	r3,r8
1000ee60:	003f9706 	br	1000ecc0 <__alt_data_end+0xf800ecc0>
1000ee64:	017ff844 	movi	r5,-31
1000ee68:	2885c83a 	sub	r2,r5,r2
1000ee6c:	888ad83a 	srl	r5,r17,r2
1000ee70:	00800804 	movi	r2,32
1000ee74:	18801a26 	beq	r3,r2,1000eee0 <__muldf3+0x848>
1000ee78:	01001004 	movi	r4,64
1000ee7c:	20c7c83a 	sub	r3,r4,r3
1000ee80:	88e2983a 	sll	r17,r17,r3
1000ee84:	8ca4b03a 	or	r18,r17,r18
1000ee88:	9004c03a 	cmpne	r2,r18,zero
1000ee8c:	2884b03a 	or	r2,r5,r2
1000ee90:	144001cc 	andi	r17,r2,7
1000ee94:	88000d1e 	bne	r17,zero,1000eecc <__muldf3+0x834>
1000ee98:	0021883a 	mov	r16,zero
1000ee9c:	102cd0fa 	srli	r22,r2,3
1000eea0:	3027883a 	mov	r19,r6
1000eea4:	0005883a 	mov	r2,zero
1000eea8:	b46cb03a 	or	r22,r22,r17
1000eeac:	003e5906 	br	1000e814 <__alt_data_end+0xf800e814>
1000eeb0:	1007883a 	mov	r3,r2
1000eeb4:	0023883a 	mov	r17,zero
1000eeb8:	8820927a 	slli	r16,r17,9
1000eebc:	1805883a 	mov	r2,r3
1000eec0:	8822977a 	slli	r17,r17,29
1000eec4:	8020d33a 	srli	r16,r16,12
1000eec8:	003ff406 	br	1000ee9c <__alt_data_end+0xf800ee9c>
1000eecc:	10c003cc 	andi	r3,r2,15
1000eed0:	01000104 	movi	r4,4
1000eed4:	193ff626 	beq	r3,r4,1000eeb0 <__alt_data_end+0xf800eeb0>
1000eed8:	0023883a 	mov	r17,zero
1000eedc:	003fd506 	br	1000ee34 <__alt_data_end+0xf800ee34>
1000eee0:	0023883a 	mov	r17,zero
1000eee4:	003fe706 	br	1000ee84 <__alt_data_end+0xf800ee84>
1000eee8:	00800434 	movhi	r2,16
1000eeec:	8c000234 	orhi	r16,r17,8
1000eef0:	10bfffc4 	addi	r2,r2,-1
1000eef4:	3027883a 	mov	r19,r6
1000eef8:	80a0703a 	and	r16,r16,r2
1000eefc:	902d883a 	mov	r22,r18
1000ef00:	003eac06 	br	1000e9b4 <__alt_data_end+0xf800e9b4>

1000ef04 <__subdf3>:
1000ef04:	02000434 	movhi	r8,16
1000ef08:	423fffc4 	addi	r8,r8,-1
1000ef0c:	defffb04 	addi	sp,sp,-20
1000ef10:	2a14703a 	and	r10,r5,r8
1000ef14:	3812d53a 	srli	r9,r7,20
1000ef18:	3a10703a 	and	r8,r7,r8
1000ef1c:	2006d77a 	srli	r3,r4,29
1000ef20:	3004d77a 	srli	r2,r6,29
1000ef24:	dc000015 	stw	r16,0(sp)
1000ef28:	501490fa 	slli	r10,r10,3
1000ef2c:	2820d53a 	srli	r16,r5,20
1000ef30:	401090fa 	slli	r8,r8,3
1000ef34:	dc800215 	stw	r18,8(sp)
1000ef38:	dc400115 	stw	r17,4(sp)
1000ef3c:	dfc00415 	stw	ra,16(sp)
1000ef40:	202290fa 	slli	r17,r4,3
1000ef44:	dcc00315 	stw	r19,12(sp)
1000ef48:	4a41ffcc 	andi	r9,r9,2047
1000ef4c:	0101ffc4 	movi	r4,2047
1000ef50:	2824d7fa 	srli	r18,r5,31
1000ef54:	8401ffcc 	andi	r16,r16,2047
1000ef58:	50c6b03a 	or	r3,r10,r3
1000ef5c:	380ed7fa 	srli	r7,r7,31
1000ef60:	408ab03a 	or	r5,r8,r2
1000ef64:	300c90fa 	slli	r6,r6,3
1000ef68:	49009626 	beq	r9,r4,1000f1c4 <__subdf3+0x2c0>
1000ef6c:	39c0005c 	xori	r7,r7,1
1000ef70:	8245c83a 	sub	r2,r16,r9
1000ef74:	3c807426 	beq	r7,r18,1000f148 <__subdf3+0x244>
1000ef78:	0080af0e 	bge	zero,r2,1000f238 <__subdf3+0x334>
1000ef7c:	48002a1e 	bne	r9,zero,1000f028 <__subdf3+0x124>
1000ef80:	2988b03a 	or	r4,r5,r6
1000ef84:	20009a1e 	bne	r4,zero,1000f1f0 <__subdf3+0x2ec>
1000ef88:	888001cc 	andi	r2,r17,7
1000ef8c:	10000726 	beq	r2,zero,1000efac <__subdf3+0xa8>
1000ef90:	888003cc 	andi	r2,r17,15
1000ef94:	01000104 	movi	r4,4
1000ef98:	11000426 	beq	r2,r4,1000efac <__subdf3+0xa8>
1000ef9c:	890b883a 	add	r5,r17,r4
1000efa0:	2c63803a 	cmpltu	r17,r5,r17
1000efa4:	1c47883a 	add	r3,r3,r17
1000efa8:	2823883a 	mov	r17,r5
1000efac:	1880202c 	andhi	r2,r3,128
1000efb0:	10005926 	beq	r2,zero,1000f118 <__subdf3+0x214>
1000efb4:	84000044 	addi	r16,r16,1
1000efb8:	0081ffc4 	movi	r2,2047
1000efbc:	8080be26 	beq	r16,r2,1000f2b8 <__subdf3+0x3b4>
1000efc0:	017fe034 	movhi	r5,65408
1000efc4:	297fffc4 	addi	r5,r5,-1
1000efc8:	1946703a 	and	r3,r3,r5
1000efcc:	1804977a 	slli	r2,r3,29
1000efd0:	1806927a 	slli	r3,r3,9
1000efd4:	8822d0fa 	srli	r17,r17,3
1000efd8:	8401ffcc 	andi	r16,r16,2047
1000efdc:	180ad33a 	srli	r5,r3,12
1000efe0:	9100004c 	andi	r4,r18,1
1000efe4:	1444b03a 	or	r2,r2,r17
1000efe8:	80c1ffcc 	andi	r3,r16,2047
1000efec:	1820953a 	slli	r16,r3,20
1000eff0:	20c03fcc 	andi	r3,r4,255
1000eff4:	180897fa 	slli	r4,r3,31
1000eff8:	00c00434 	movhi	r3,16
1000effc:	18ffffc4 	addi	r3,r3,-1
1000f000:	28c6703a 	and	r3,r5,r3
1000f004:	1c06b03a 	or	r3,r3,r16
1000f008:	1906b03a 	or	r3,r3,r4
1000f00c:	dfc00417 	ldw	ra,16(sp)
1000f010:	dcc00317 	ldw	r19,12(sp)
1000f014:	dc800217 	ldw	r18,8(sp)
1000f018:	dc400117 	ldw	r17,4(sp)
1000f01c:	dc000017 	ldw	r16,0(sp)
1000f020:	dec00504 	addi	sp,sp,20
1000f024:	f800283a 	ret
1000f028:	0101ffc4 	movi	r4,2047
1000f02c:	813fd626 	beq	r16,r4,1000ef88 <__alt_data_end+0xf800ef88>
1000f030:	29402034 	orhi	r5,r5,128
1000f034:	01000e04 	movi	r4,56
1000f038:	2080a316 	blt	r4,r2,1000f2c8 <__subdf3+0x3c4>
1000f03c:	010007c4 	movi	r4,31
1000f040:	2080c616 	blt	r4,r2,1000f35c <__subdf3+0x458>
1000f044:	01000804 	movi	r4,32
1000f048:	2089c83a 	sub	r4,r4,r2
1000f04c:	2910983a 	sll	r8,r5,r4
1000f050:	308ed83a 	srl	r7,r6,r2
1000f054:	3108983a 	sll	r4,r6,r4
1000f058:	2884d83a 	srl	r2,r5,r2
1000f05c:	41ccb03a 	or	r6,r8,r7
1000f060:	2008c03a 	cmpne	r4,r4,zero
1000f064:	310cb03a 	or	r6,r6,r4
1000f068:	898dc83a 	sub	r6,r17,r6
1000f06c:	89a3803a 	cmpltu	r17,r17,r6
1000f070:	1887c83a 	sub	r3,r3,r2
1000f074:	1c47c83a 	sub	r3,r3,r17
1000f078:	3023883a 	mov	r17,r6
1000f07c:	1880202c 	andhi	r2,r3,128
1000f080:	10002326 	beq	r2,zero,1000f110 <__subdf3+0x20c>
1000f084:	04c02034 	movhi	r19,128
1000f088:	9cffffc4 	addi	r19,r19,-1
1000f08c:	1ce6703a 	and	r19,r3,r19
1000f090:	98007a26 	beq	r19,zero,1000f27c <__subdf3+0x378>
1000f094:	9809883a 	mov	r4,r19
1000f098:	000fa040 	call	1000fa04 <__clzsi2>
1000f09c:	113ffe04 	addi	r4,r2,-8
1000f0a0:	00c007c4 	movi	r3,31
1000f0a4:	19007b16 	blt	r3,r4,1000f294 <__subdf3+0x390>
1000f0a8:	00800804 	movi	r2,32
1000f0ac:	1105c83a 	sub	r2,r2,r4
1000f0b0:	8884d83a 	srl	r2,r17,r2
1000f0b4:	9906983a 	sll	r3,r19,r4
1000f0b8:	8922983a 	sll	r17,r17,r4
1000f0bc:	10c4b03a 	or	r2,r2,r3
1000f0c0:	24007816 	blt	r4,r16,1000f2a4 <__subdf3+0x3a0>
1000f0c4:	2421c83a 	sub	r16,r4,r16
1000f0c8:	80c00044 	addi	r3,r16,1
1000f0cc:	010007c4 	movi	r4,31
1000f0d0:	20c09516 	blt	r4,r3,1000f328 <__subdf3+0x424>
1000f0d4:	01400804 	movi	r5,32
1000f0d8:	28cbc83a 	sub	r5,r5,r3
1000f0dc:	88c8d83a 	srl	r4,r17,r3
1000f0e0:	8962983a 	sll	r17,r17,r5
1000f0e4:	114a983a 	sll	r5,r2,r5
1000f0e8:	10c6d83a 	srl	r3,r2,r3
1000f0ec:	8804c03a 	cmpne	r2,r17,zero
1000f0f0:	290ab03a 	or	r5,r5,r4
1000f0f4:	28a2b03a 	or	r17,r5,r2
1000f0f8:	0021883a 	mov	r16,zero
1000f0fc:	003fa206 	br	1000ef88 <__alt_data_end+0xf800ef88>
1000f100:	2090b03a 	or	r8,r4,r2
1000f104:	40018e26 	beq	r8,zero,1000f740 <__subdf3+0x83c>
1000f108:	1007883a 	mov	r3,r2
1000f10c:	2023883a 	mov	r17,r4
1000f110:	888001cc 	andi	r2,r17,7
1000f114:	103f9e1e 	bne	r2,zero,1000ef90 <__alt_data_end+0xf800ef90>
1000f118:	1804977a 	slli	r2,r3,29
1000f11c:	8822d0fa 	srli	r17,r17,3
1000f120:	1810d0fa 	srli	r8,r3,3
1000f124:	9100004c 	andi	r4,r18,1
1000f128:	1444b03a 	or	r2,r2,r17
1000f12c:	00c1ffc4 	movi	r3,2047
1000f130:	80c02826 	beq	r16,r3,1000f1d4 <__subdf3+0x2d0>
1000f134:	01400434 	movhi	r5,16
1000f138:	297fffc4 	addi	r5,r5,-1
1000f13c:	80e0703a 	and	r16,r16,r3
1000f140:	414a703a 	and	r5,r8,r5
1000f144:	003fa806 	br	1000efe8 <__alt_data_end+0xf800efe8>
1000f148:	0080630e 	bge	zero,r2,1000f2d8 <__subdf3+0x3d4>
1000f14c:	48003026 	beq	r9,zero,1000f210 <__subdf3+0x30c>
1000f150:	0101ffc4 	movi	r4,2047
1000f154:	813f8c26 	beq	r16,r4,1000ef88 <__alt_data_end+0xf800ef88>
1000f158:	29402034 	orhi	r5,r5,128
1000f15c:	01000e04 	movi	r4,56
1000f160:	2080a90e 	bge	r4,r2,1000f408 <__subdf3+0x504>
1000f164:	298cb03a 	or	r6,r5,r6
1000f168:	3012c03a 	cmpne	r9,r6,zero
1000f16c:	0005883a 	mov	r2,zero
1000f170:	4c53883a 	add	r9,r9,r17
1000f174:	4c63803a 	cmpltu	r17,r9,r17
1000f178:	10c7883a 	add	r3,r2,r3
1000f17c:	88c7883a 	add	r3,r17,r3
1000f180:	4823883a 	mov	r17,r9
1000f184:	1880202c 	andhi	r2,r3,128
1000f188:	1000d026 	beq	r2,zero,1000f4cc <__subdf3+0x5c8>
1000f18c:	84000044 	addi	r16,r16,1
1000f190:	0081ffc4 	movi	r2,2047
1000f194:	8080fe26 	beq	r16,r2,1000f590 <__subdf3+0x68c>
1000f198:	00bfe034 	movhi	r2,65408
1000f19c:	10bfffc4 	addi	r2,r2,-1
1000f1a0:	1886703a 	and	r3,r3,r2
1000f1a4:	880ad07a 	srli	r5,r17,1
1000f1a8:	180497fa 	slli	r2,r3,31
1000f1ac:	8900004c 	andi	r4,r17,1
1000f1b0:	2922b03a 	or	r17,r5,r4
1000f1b4:	1806d07a 	srli	r3,r3,1
1000f1b8:	1462b03a 	or	r17,r2,r17
1000f1bc:	3825883a 	mov	r18,r7
1000f1c0:	003f7106 	br	1000ef88 <__alt_data_end+0xf800ef88>
1000f1c4:	2984b03a 	or	r2,r5,r6
1000f1c8:	103f6826 	beq	r2,zero,1000ef6c <__alt_data_end+0xf800ef6c>
1000f1cc:	39c03fcc 	andi	r7,r7,255
1000f1d0:	003f6706 	br	1000ef70 <__alt_data_end+0xf800ef70>
1000f1d4:	4086b03a 	or	r3,r8,r2
1000f1d8:	18015226 	beq	r3,zero,1000f724 <__subdf3+0x820>
1000f1dc:	00c00434 	movhi	r3,16
1000f1e0:	41400234 	orhi	r5,r8,8
1000f1e4:	18ffffc4 	addi	r3,r3,-1
1000f1e8:	28ca703a 	and	r5,r5,r3
1000f1ec:	003f7e06 	br	1000efe8 <__alt_data_end+0xf800efe8>
1000f1f0:	10bfffc4 	addi	r2,r2,-1
1000f1f4:	1000491e 	bne	r2,zero,1000f31c <__subdf3+0x418>
1000f1f8:	898fc83a 	sub	r7,r17,r6
1000f1fc:	89e3803a 	cmpltu	r17,r17,r7
1000f200:	1947c83a 	sub	r3,r3,r5
1000f204:	1c47c83a 	sub	r3,r3,r17
1000f208:	3823883a 	mov	r17,r7
1000f20c:	003f9b06 	br	1000f07c <__alt_data_end+0xf800f07c>
1000f210:	2988b03a 	or	r4,r5,r6
1000f214:	203f5c26 	beq	r4,zero,1000ef88 <__alt_data_end+0xf800ef88>
1000f218:	10bfffc4 	addi	r2,r2,-1
1000f21c:	1000931e 	bne	r2,zero,1000f46c <__subdf3+0x568>
1000f220:	898d883a 	add	r6,r17,r6
1000f224:	3463803a 	cmpltu	r17,r6,r17
1000f228:	1947883a 	add	r3,r3,r5
1000f22c:	88c7883a 	add	r3,r17,r3
1000f230:	3023883a 	mov	r17,r6
1000f234:	003fd306 	br	1000f184 <__alt_data_end+0xf800f184>
1000f238:	1000541e 	bne	r2,zero,1000f38c <__subdf3+0x488>
1000f23c:	80800044 	addi	r2,r16,1
1000f240:	1081ffcc 	andi	r2,r2,2047
1000f244:	01000044 	movi	r4,1
1000f248:	2080a20e 	bge	r4,r2,1000f4d4 <__subdf3+0x5d0>
1000f24c:	8989c83a 	sub	r4,r17,r6
1000f250:	8905803a 	cmpltu	r2,r17,r4
1000f254:	1967c83a 	sub	r19,r3,r5
1000f258:	98a7c83a 	sub	r19,r19,r2
1000f25c:	9880202c 	andhi	r2,r19,128
1000f260:	10006326 	beq	r2,zero,1000f3f0 <__subdf3+0x4ec>
1000f264:	3463c83a 	sub	r17,r6,r17
1000f268:	28c7c83a 	sub	r3,r5,r3
1000f26c:	344d803a 	cmpltu	r6,r6,r17
1000f270:	19a7c83a 	sub	r19,r3,r6
1000f274:	3825883a 	mov	r18,r7
1000f278:	983f861e 	bne	r19,zero,1000f094 <__alt_data_end+0xf800f094>
1000f27c:	8809883a 	mov	r4,r17
1000f280:	000fa040 	call	1000fa04 <__clzsi2>
1000f284:	10800804 	addi	r2,r2,32
1000f288:	113ffe04 	addi	r4,r2,-8
1000f28c:	00c007c4 	movi	r3,31
1000f290:	193f850e 	bge	r3,r4,1000f0a8 <__alt_data_end+0xf800f0a8>
1000f294:	10bff604 	addi	r2,r2,-40
1000f298:	8884983a 	sll	r2,r17,r2
1000f29c:	0023883a 	mov	r17,zero
1000f2a0:	243f880e 	bge	r4,r16,1000f0c4 <__alt_data_end+0xf800f0c4>
1000f2a4:	00ffe034 	movhi	r3,65408
1000f2a8:	18ffffc4 	addi	r3,r3,-1
1000f2ac:	8121c83a 	sub	r16,r16,r4
1000f2b0:	10c6703a 	and	r3,r2,r3
1000f2b4:	003f3406 	br	1000ef88 <__alt_data_end+0xf800ef88>
1000f2b8:	9100004c 	andi	r4,r18,1
1000f2bc:	000b883a 	mov	r5,zero
1000f2c0:	0005883a 	mov	r2,zero
1000f2c4:	003f4806 	br	1000efe8 <__alt_data_end+0xf800efe8>
1000f2c8:	298cb03a 	or	r6,r5,r6
1000f2cc:	300cc03a 	cmpne	r6,r6,zero
1000f2d0:	0005883a 	mov	r2,zero
1000f2d4:	003f6406 	br	1000f068 <__alt_data_end+0xf800f068>
1000f2d8:	10009a1e 	bne	r2,zero,1000f544 <__subdf3+0x640>
1000f2dc:	82400044 	addi	r9,r16,1
1000f2e0:	4881ffcc 	andi	r2,r9,2047
1000f2e4:	02800044 	movi	r10,1
1000f2e8:	5080670e 	bge	r10,r2,1000f488 <__subdf3+0x584>
1000f2ec:	0081ffc4 	movi	r2,2047
1000f2f0:	4880af26 	beq	r9,r2,1000f5b0 <__subdf3+0x6ac>
1000f2f4:	898d883a 	add	r6,r17,r6
1000f2f8:	1945883a 	add	r2,r3,r5
1000f2fc:	3447803a 	cmpltu	r3,r6,r17
1000f300:	1887883a 	add	r3,r3,r2
1000f304:	182297fa 	slli	r17,r3,31
1000f308:	300cd07a 	srli	r6,r6,1
1000f30c:	1806d07a 	srli	r3,r3,1
1000f310:	4821883a 	mov	r16,r9
1000f314:	89a2b03a 	or	r17,r17,r6
1000f318:	003f1b06 	br	1000ef88 <__alt_data_end+0xf800ef88>
1000f31c:	0101ffc4 	movi	r4,2047
1000f320:	813f441e 	bne	r16,r4,1000f034 <__alt_data_end+0xf800f034>
1000f324:	003f1806 	br	1000ef88 <__alt_data_end+0xf800ef88>
1000f328:	843ff844 	addi	r16,r16,-31
1000f32c:	01400804 	movi	r5,32
1000f330:	1408d83a 	srl	r4,r2,r16
1000f334:	19405026 	beq	r3,r5,1000f478 <__subdf3+0x574>
1000f338:	01401004 	movi	r5,64
1000f33c:	28c7c83a 	sub	r3,r5,r3
1000f340:	10c4983a 	sll	r2,r2,r3
1000f344:	88a2b03a 	or	r17,r17,r2
1000f348:	8822c03a 	cmpne	r17,r17,zero
1000f34c:	2462b03a 	or	r17,r4,r17
1000f350:	0007883a 	mov	r3,zero
1000f354:	0021883a 	mov	r16,zero
1000f358:	003f6d06 	br	1000f110 <__alt_data_end+0xf800f110>
1000f35c:	11fff804 	addi	r7,r2,-32
1000f360:	01000804 	movi	r4,32
1000f364:	29ced83a 	srl	r7,r5,r7
1000f368:	11004526 	beq	r2,r4,1000f480 <__subdf3+0x57c>
1000f36c:	01001004 	movi	r4,64
1000f370:	2089c83a 	sub	r4,r4,r2
1000f374:	2904983a 	sll	r2,r5,r4
1000f378:	118cb03a 	or	r6,r2,r6
1000f37c:	300cc03a 	cmpne	r6,r6,zero
1000f380:	398cb03a 	or	r6,r7,r6
1000f384:	0005883a 	mov	r2,zero
1000f388:	003f3706 	br	1000f068 <__alt_data_end+0xf800f068>
1000f38c:	80002a26 	beq	r16,zero,1000f438 <__subdf3+0x534>
1000f390:	0101ffc4 	movi	r4,2047
1000f394:	49006626 	beq	r9,r4,1000f530 <__subdf3+0x62c>
1000f398:	0085c83a 	sub	r2,zero,r2
1000f39c:	18c02034 	orhi	r3,r3,128
1000f3a0:	01000e04 	movi	r4,56
1000f3a4:	20807e16 	blt	r4,r2,1000f5a0 <__subdf3+0x69c>
1000f3a8:	010007c4 	movi	r4,31
1000f3ac:	2080e716 	blt	r4,r2,1000f74c <__subdf3+0x848>
1000f3b0:	01000804 	movi	r4,32
1000f3b4:	2089c83a 	sub	r4,r4,r2
1000f3b8:	1914983a 	sll	r10,r3,r4
1000f3bc:	8890d83a 	srl	r8,r17,r2
1000f3c0:	8908983a 	sll	r4,r17,r4
1000f3c4:	1884d83a 	srl	r2,r3,r2
1000f3c8:	5222b03a 	or	r17,r10,r8
1000f3cc:	2006c03a 	cmpne	r3,r4,zero
1000f3d0:	88e2b03a 	or	r17,r17,r3
1000f3d4:	3463c83a 	sub	r17,r6,r17
1000f3d8:	2885c83a 	sub	r2,r5,r2
1000f3dc:	344d803a 	cmpltu	r6,r6,r17
1000f3e0:	1187c83a 	sub	r3,r2,r6
1000f3e4:	4821883a 	mov	r16,r9
1000f3e8:	3825883a 	mov	r18,r7
1000f3ec:	003f2306 	br	1000f07c <__alt_data_end+0xf800f07c>
1000f3f0:	24d0b03a 	or	r8,r4,r19
1000f3f4:	40001b1e 	bne	r8,zero,1000f464 <__subdf3+0x560>
1000f3f8:	0005883a 	mov	r2,zero
1000f3fc:	0009883a 	mov	r4,zero
1000f400:	0021883a 	mov	r16,zero
1000f404:	003f4906 	br	1000f12c <__alt_data_end+0xf800f12c>
1000f408:	010007c4 	movi	r4,31
1000f40c:	20803a16 	blt	r4,r2,1000f4f8 <__subdf3+0x5f4>
1000f410:	01000804 	movi	r4,32
1000f414:	2089c83a 	sub	r4,r4,r2
1000f418:	2912983a 	sll	r9,r5,r4
1000f41c:	3090d83a 	srl	r8,r6,r2
1000f420:	3108983a 	sll	r4,r6,r4
1000f424:	2884d83a 	srl	r2,r5,r2
1000f428:	4a12b03a 	or	r9,r9,r8
1000f42c:	2008c03a 	cmpne	r4,r4,zero
1000f430:	4912b03a 	or	r9,r9,r4
1000f434:	003f4e06 	br	1000f170 <__alt_data_end+0xf800f170>
1000f438:	1c48b03a 	or	r4,r3,r17
1000f43c:	20003c26 	beq	r4,zero,1000f530 <__subdf3+0x62c>
1000f440:	0084303a 	nor	r2,zero,r2
1000f444:	1000381e 	bne	r2,zero,1000f528 <__subdf3+0x624>
1000f448:	3463c83a 	sub	r17,r6,r17
1000f44c:	28c5c83a 	sub	r2,r5,r3
1000f450:	344d803a 	cmpltu	r6,r6,r17
1000f454:	1187c83a 	sub	r3,r2,r6
1000f458:	4821883a 	mov	r16,r9
1000f45c:	3825883a 	mov	r18,r7
1000f460:	003f0606 	br	1000f07c <__alt_data_end+0xf800f07c>
1000f464:	2023883a 	mov	r17,r4
1000f468:	003f0906 	br	1000f090 <__alt_data_end+0xf800f090>
1000f46c:	0101ffc4 	movi	r4,2047
1000f470:	813f3a1e 	bne	r16,r4,1000f15c <__alt_data_end+0xf800f15c>
1000f474:	003ec406 	br	1000ef88 <__alt_data_end+0xf800ef88>
1000f478:	0005883a 	mov	r2,zero
1000f47c:	003fb106 	br	1000f344 <__alt_data_end+0xf800f344>
1000f480:	0005883a 	mov	r2,zero
1000f484:	003fbc06 	br	1000f378 <__alt_data_end+0xf800f378>
1000f488:	1c44b03a 	or	r2,r3,r17
1000f48c:	80008e1e 	bne	r16,zero,1000f6c8 <__subdf3+0x7c4>
1000f490:	1000c826 	beq	r2,zero,1000f7b4 <__subdf3+0x8b0>
1000f494:	2984b03a 	or	r2,r5,r6
1000f498:	103ebb26 	beq	r2,zero,1000ef88 <__alt_data_end+0xf800ef88>
1000f49c:	8989883a 	add	r4,r17,r6
1000f4a0:	1945883a 	add	r2,r3,r5
1000f4a4:	2447803a 	cmpltu	r3,r4,r17
1000f4a8:	1887883a 	add	r3,r3,r2
1000f4ac:	1880202c 	andhi	r2,r3,128
1000f4b0:	2023883a 	mov	r17,r4
1000f4b4:	103f1626 	beq	r2,zero,1000f110 <__alt_data_end+0xf800f110>
1000f4b8:	00bfe034 	movhi	r2,65408
1000f4bc:	10bfffc4 	addi	r2,r2,-1
1000f4c0:	5021883a 	mov	r16,r10
1000f4c4:	1886703a 	and	r3,r3,r2
1000f4c8:	003eaf06 	br	1000ef88 <__alt_data_end+0xf800ef88>
1000f4cc:	3825883a 	mov	r18,r7
1000f4d0:	003f0f06 	br	1000f110 <__alt_data_end+0xf800f110>
1000f4d4:	1c44b03a 	or	r2,r3,r17
1000f4d8:	8000251e 	bne	r16,zero,1000f570 <__subdf3+0x66c>
1000f4dc:	1000661e 	bne	r2,zero,1000f678 <__subdf3+0x774>
1000f4e0:	2990b03a 	or	r8,r5,r6
1000f4e4:	40009626 	beq	r8,zero,1000f740 <__subdf3+0x83c>
1000f4e8:	2807883a 	mov	r3,r5
1000f4ec:	3023883a 	mov	r17,r6
1000f4f0:	3825883a 	mov	r18,r7
1000f4f4:	003ea406 	br	1000ef88 <__alt_data_end+0xf800ef88>
1000f4f8:	127ff804 	addi	r9,r2,-32
1000f4fc:	01000804 	movi	r4,32
1000f500:	2a52d83a 	srl	r9,r5,r9
1000f504:	11008c26 	beq	r2,r4,1000f738 <__subdf3+0x834>
1000f508:	01001004 	movi	r4,64
1000f50c:	2085c83a 	sub	r2,r4,r2
1000f510:	2884983a 	sll	r2,r5,r2
1000f514:	118cb03a 	or	r6,r2,r6
1000f518:	300cc03a 	cmpne	r6,r6,zero
1000f51c:	4992b03a 	or	r9,r9,r6
1000f520:	0005883a 	mov	r2,zero
1000f524:	003f1206 	br	1000f170 <__alt_data_end+0xf800f170>
1000f528:	0101ffc4 	movi	r4,2047
1000f52c:	493f9c1e 	bne	r9,r4,1000f3a0 <__alt_data_end+0xf800f3a0>
1000f530:	2807883a 	mov	r3,r5
1000f534:	3023883a 	mov	r17,r6
1000f538:	4821883a 	mov	r16,r9
1000f53c:	3825883a 	mov	r18,r7
1000f540:	003e9106 	br	1000ef88 <__alt_data_end+0xf800ef88>
1000f544:	80001f1e 	bne	r16,zero,1000f5c4 <__subdf3+0x6c0>
1000f548:	1c48b03a 	or	r4,r3,r17
1000f54c:	20005a26 	beq	r4,zero,1000f6b8 <__subdf3+0x7b4>
1000f550:	0084303a 	nor	r2,zero,r2
1000f554:	1000561e 	bne	r2,zero,1000f6b0 <__subdf3+0x7ac>
1000f558:	89a3883a 	add	r17,r17,r6
1000f55c:	1945883a 	add	r2,r3,r5
1000f560:	898d803a 	cmpltu	r6,r17,r6
1000f564:	3087883a 	add	r3,r6,r2
1000f568:	4821883a 	mov	r16,r9
1000f56c:	003f0506 	br	1000f184 <__alt_data_end+0xf800f184>
1000f570:	10002b1e 	bne	r2,zero,1000f620 <__subdf3+0x71c>
1000f574:	2984b03a 	or	r2,r5,r6
1000f578:	10008026 	beq	r2,zero,1000f77c <__subdf3+0x878>
1000f57c:	2807883a 	mov	r3,r5
1000f580:	3023883a 	mov	r17,r6
1000f584:	3825883a 	mov	r18,r7
1000f588:	0401ffc4 	movi	r16,2047
1000f58c:	003e7e06 	br	1000ef88 <__alt_data_end+0xf800ef88>
1000f590:	3809883a 	mov	r4,r7
1000f594:	0011883a 	mov	r8,zero
1000f598:	0005883a 	mov	r2,zero
1000f59c:	003ee306 	br	1000f12c <__alt_data_end+0xf800f12c>
1000f5a0:	1c62b03a 	or	r17,r3,r17
1000f5a4:	8822c03a 	cmpne	r17,r17,zero
1000f5a8:	0005883a 	mov	r2,zero
1000f5ac:	003f8906 	br	1000f3d4 <__alt_data_end+0xf800f3d4>
1000f5b0:	3809883a 	mov	r4,r7
1000f5b4:	4821883a 	mov	r16,r9
1000f5b8:	0011883a 	mov	r8,zero
1000f5bc:	0005883a 	mov	r2,zero
1000f5c0:	003eda06 	br	1000f12c <__alt_data_end+0xf800f12c>
1000f5c4:	0101ffc4 	movi	r4,2047
1000f5c8:	49003b26 	beq	r9,r4,1000f6b8 <__subdf3+0x7b4>
1000f5cc:	0085c83a 	sub	r2,zero,r2
1000f5d0:	18c02034 	orhi	r3,r3,128
1000f5d4:	01000e04 	movi	r4,56
1000f5d8:	20806e16 	blt	r4,r2,1000f794 <__subdf3+0x890>
1000f5dc:	010007c4 	movi	r4,31
1000f5e0:	20807716 	blt	r4,r2,1000f7c0 <__subdf3+0x8bc>
1000f5e4:	01000804 	movi	r4,32
1000f5e8:	2089c83a 	sub	r4,r4,r2
1000f5ec:	1914983a 	sll	r10,r3,r4
1000f5f0:	8890d83a 	srl	r8,r17,r2
1000f5f4:	8908983a 	sll	r4,r17,r4
1000f5f8:	1884d83a 	srl	r2,r3,r2
1000f5fc:	5222b03a 	or	r17,r10,r8
1000f600:	2006c03a 	cmpne	r3,r4,zero
1000f604:	88e2b03a 	or	r17,r17,r3
1000f608:	89a3883a 	add	r17,r17,r6
1000f60c:	1145883a 	add	r2,r2,r5
1000f610:	898d803a 	cmpltu	r6,r17,r6
1000f614:	3087883a 	add	r3,r6,r2
1000f618:	4821883a 	mov	r16,r9
1000f61c:	003ed906 	br	1000f184 <__alt_data_end+0xf800f184>
1000f620:	2984b03a 	or	r2,r5,r6
1000f624:	10004226 	beq	r2,zero,1000f730 <__subdf3+0x82c>
1000f628:	1808d0fa 	srli	r4,r3,3
1000f62c:	8822d0fa 	srli	r17,r17,3
1000f630:	1806977a 	slli	r3,r3,29
1000f634:	2080022c 	andhi	r2,r4,8
1000f638:	1c62b03a 	or	r17,r3,r17
1000f63c:	10000826 	beq	r2,zero,1000f660 <__subdf3+0x75c>
1000f640:	2812d0fa 	srli	r9,r5,3
1000f644:	4880022c 	andhi	r2,r9,8
1000f648:	1000051e 	bne	r2,zero,1000f660 <__subdf3+0x75c>
1000f64c:	300cd0fa 	srli	r6,r6,3
1000f650:	2804977a 	slli	r2,r5,29
1000f654:	4809883a 	mov	r4,r9
1000f658:	3825883a 	mov	r18,r7
1000f65c:	11a2b03a 	or	r17,r2,r6
1000f660:	8806d77a 	srli	r3,r17,29
1000f664:	200890fa 	slli	r4,r4,3
1000f668:	882290fa 	slli	r17,r17,3
1000f66c:	0401ffc4 	movi	r16,2047
1000f670:	1906b03a 	or	r3,r3,r4
1000f674:	003e4406 	br	1000ef88 <__alt_data_end+0xf800ef88>
1000f678:	2984b03a 	or	r2,r5,r6
1000f67c:	103e4226 	beq	r2,zero,1000ef88 <__alt_data_end+0xf800ef88>
1000f680:	8989c83a 	sub	r4,r17,r6
1000f684:	8911803a 	cmpltu	r8,r17,r4
1000f688:	1945c83a 	sub	r2,r3,r5
1000f68c:	1205c83a 	sub	r2,r2,r8
1000f690:	1200202c 	andhi	r8,r2,128
1000f694:	403e9a26 	beq	r8,zero,1000f100 <__alt_data_end+0xf800f100>
1000f698:	3463c83a 	sub	r17,r6,r17
1000f69c:	28c5c83a 	sub	r2,r5,r3
1000f6a0:	344d803a 	cmpltu	r6,r6,r17
1000f6a4:	1187c83a 	sub	r3,r2,r6
1000f6a8:	3825883a 	mov	r18,r7
1000f6ac:	003e3606 	br	1000ef88 <__alt_data_end+0xf800ef88>
1000f6b0:	0101ffc4 	movi	r4,2047
1000f6b4:	493fc71e 	bne	r9,r4,1000f5d4 <__alt_data_end+0xf800f5d4>
1000f6b8:	2807883a 	mov	r3,r5
1000f6bc:	3023883a 	mov	r17,r6
1000f6c0:	4821883a 	mov	r16,r9
1000f6c4:	003e3006 	br	1000ef88 <__alt_data_end+0xf800ef88>
1000f6c8:	10003626 	beq	r2,zero,1000f7a4 <__subdf3+0x8a0>
1000f6cc:	2984b03a 	or	r2,r5,r6
1000f6d0:	10001726 	beq	r2,zero,1000f730 <__subdf3+0x82c>
1000f6d4:	1808d0fa 	srli	r4,r3,3
1000f6d8:	8822d0fa 	srli	r17,r17,3
1000f6dc:	1806977a 	slli	r3,r3,29
1000f6e0:	2080022c 	andhi	r2,r4,8
1000f6e4:	1c62b03a 	or	r17,r3,r17
1000f6e8:	10000726 	beq	r2,zero,1000f708 <__subdf3+0x804>
1000f6ec:	2812d0fa 	srli	r9,r5,3
1000f6f0:	4880022c 	andhi	r2,r9,8
1000f6f4:	1000041e 	bne	r2,zero,1000f708 <__subdf3+0x804>
1000f6f8:	300cd0fa 	srli	r6,r6,3
1000f6fc:	2804977a 	slli	r2,r5,29
1000f700:	4809883a 	mov	r4,r9
1000f704:	11a2b03a 	or	r17,r2,r6
1000f708:	8806d77a 	srli	r3,r17,29
1000f70c:	200890fa 	slli	r4,r4,3
1000f710:	882290fa 	slli	r17,r17,3
1000f714:	3825883a 	mov	r18,r7
1000f718:	1906b03a 	or	r3,r3,r4
1000f71c:	0401ffc4 	movi	r16,2047
1000f720:	003e1906 	br	1000ef88 <__alt_data_end+0xf800ef88>
1000f724:	000b883a 	mov	r5,zero
1000f728:	0005883a 	mov	r2,zero
1000f72c:	003e2e06 	br	1000efe8 <__alt_data_end+0xf800efe8>
1000f730:	0401ffc4 	movi	r16,2047
1000f734:	003e1406 	br	1000ef88 <__alt_data_end+0xf800ef88>
1000f738:	0005883a 	mov	r2,zero
1000f73c:	003f7506 	br	1000f514 <__alt_data_end+0xf800f514>
1000f740:	0005883a 	mov	r2,zero
1000f744:	0009883a 	mov	r4,zero
1000f748:	003e7806 	br	1000f12c <__alt_data_end+0xf800f12c>
1000f74c:	123ff804 	addi	r8,r2,-32
1000f750:	01000804 	movi	r4,32
1000f754:	1a10d83a 	srl	r8,r3,r8
1000f758:	11002526 	beq	r2,r4,1000f7f0 <__subdf3+0x8ec>
1000f75c:	01001004 	movi	r4,64
1000f760:	2085c83a 	sub	r2,r4,r2
1000f764:	1884983a 	sll	r2,r3,r2
1000f768:	1444b03a 	or	r2,r2,r17
1000f76c:	1004c03a 	cmpne	r2,r2,zero
1000f770:	40a2b03a 	or	r17,r8,r2
1000f774:	0005883a 	mov	r2,zero
1000f778:	003f1606 	br	1000f3d4 <__alt_data_end+0xf800f3d4>
1000f77c:	02000434 	movhi	r8,16
1000f780:	0009883a 	mov	r4,zero
1000f784:	423fffc4 	addi	r8,r8,-1
1000f788:	00bfffc4 	movi	r2,-1
1000f78c:	0401ffc4 	movi	r16,2047
1000f790:	003e6606 	br	1000f12c <__alt_data_end+0xf800f12c>
1000f794:	1c62b03a 	or	r17,r3,r17
1000f798:	8822c03a 	cmpne	r17,r17,zero
1000f79c:	0005883a 	mov	r2,zero
1000f7a0:	003f9906 	br	1000f608 <__alt_data_end+0xf800f608>
1000f7a4:	2807883a 	mov	r3,r5
1000f7a8:	3023883a 	mov	r17,r6
1000f7ac:	0401ffc4 	movi	r16,2047
1000f7b0:	003df506 	br	1000ef88 <__alt_data_end+0xf800ef88>
1000f7b4:	2807883a 	mov	r3,r5
1000f7b8:	3023883a 	mov	r17,r6
1000f7bc:	003df206 	br	1000ef88 <__alt_data_end+0xf800ef88>
1000f7c0:	123ff804 	addi	r8,r2,-32
1000f7c4:	01000804 	movi	r4,32
1000f7c8:	1a10d83a 	srl	r8,r3,r8
1000f7cc:	11000a26 	beq	r2,r4,1000f7f8 <__subdf3+0x8f4>
1000f7d0:	01001004 	movi	r4,64
1000f7d4:	2085c83a 	sub	r2,r4,r2
1000f7d8:	1884983a 	sll	r2,r3,r2
1000f7dc:	1444b03a 	or	r2,r2,r17
1000f7e0:	1004c03a 	cmpne	r2,r2,zero
1000f7e4:	40a2b03a 	or	r17,r8,r2
1000f7e8:	0005883a 	mov	r2,zero
1000f7ec:	003f8606 	br	1000f608 <__alt_data_end+0xf800f608>
1000f7f0:	0005883a 	mov	r2,zero
1000f7f4:	003fdc06 	br	1000f768 <__alt_data_end+0xf800f768>
1000f7f8:	0005883a 	mov	r2,zero
1000f7fc:	003ff706 	br	1000f7dc <__alt_data_end+0xf800f7dc>

1000f800 <__fixdfsi>:
1000f800:	280cd53a 	srli	r6,r5,20
1000f804:	00c00434 	movhi	r3,16
1000f808:	18ffffc4 	addi	r3,r3,-1
1000f80c:	3181ffcc 	andi	r6,r6,2047
1000f810:	01c0ff84 	movi	r7,1022
1000f814:	28c6703a 	and	r3,r5,r3
1000f818:	280ad7fa 	srli	r5,r5,31
1000f81c:	3980120e 	bge	r7,r6,1000f868 <__fixdfsi+0x68>
1000f820:	00810744 	movi	r2,1053
1000f824:	11800c16 	blt	r2,r6,1000f858 <__fixdfsi+0x58>
1000f828:	00810cc4 	movi	r2,1075
1000f82c:	1185c83a 	sub	r2,r2,r6
1000f830:	01c007c4 	movi	r7,31
1000f834:	18c00434 	orhi	r3,r3,16
1000f838:	38800d16 	blt	r7,r2,1000f870 <__fixdfsi+0x70>
1000f83c:	31befb44 	addi	r6,r6,-1043
1000f840:	2084d83a 	srl	r2,r4,r2
1000f844:	1986983a 	sll	r3,r3,r6
1000f848:	1884b03a 	or	r2,r3,r2
1000f84c:	28000726 	beq	r5,zero,1000f86c <__fixdfsi+0x6c>
1000f850:	0085c83a 	sub	r2,zero,r2
1000f854:	f800283a 	ret
1000f858:	00a00034 	movhi	r2,32768
1000f85c:	10bfffc4 	addi	r2,r2,-1
1000f860:	2885883a 	add	r2,r5,r2
1000f864:	f800283a 	ret
1000f868:	0005883a 	mov	r2,zero
1000f86c:	f800283a 	ret
1000f870:	008104c4 	movi	r2,1043
1000f874:	1185c83a 	sub	r2,r2,r6
1000f878:	1884d83a 	srl	r2,r3,r2
1000f87c:	003ff306 	br	1000f84c <__alt_data_end+0xf800f84c>

1000f880 <__floatsidf>:
1000f880:	defffd04 	addi	sp,sp,-12
1000f884:	dfc00215 	stw	ra,8(sp)
1000f888:	dc400115 	stw	r17,4(sp)
1000f88c:	dc000015 	stw	r16,0(sp)
1000f890:	20002b26 	beq	r4,zero,1000f940 <__floatsidf+0xc0>
1000f894:	2023883a 	mov	r17,r4
1000f898:	2020d7fa 	srli	r16,r4,31
1000f89c:	20002d16 	blt	r4,zero,1000f954 <__floatsidf+0xd4>
1000f8a0:	8809883a 	mov	r4,r17
1000f8a4:	000fa040 	call	1000fa04 <__clzsi2>
1000f8a8:	01410784 	movi	r5,1054
1000f8ac:	288bc83a 	sub	r5,r5,r2
1000f8b0:	01010cc4 	movi	r4,1075
1000f8b4:	2149c83a 	sub	r4,r4,r5
1000f8b8:	00c007c4 	movi	r3,31
1000f8bc:	1900160e 	bge	r3,r4,1000f918 <__floatsidf+0x98>
1000f8c0:	00c104c4 	movi	r3,1043
1000f8c4:	1947c83a 	sub	r3,r3,r5
1000f8c8:	88c6983a 	sll	r3,r17,r3
1000f8cc:	00800434 	movhi	r2,16
1000f8d0:	10bfffc4 	addi	r2,r2,-1
1000f8d4:	1886703a 	and	r3,r3,r2
1000f8d8:	2941ffcc 	andi	r5,r5,2047
1000f8dc:	800d883a 	mov	r6,r16
1000f8e0:	0005883a 	mov	r2,zero
1000f8e4:	280a953a 	slli	r5,r5,20
1000f8e8:	31803fcc 	andi	r6,r6,255
1000f8ec:	01000434 	movhi	r4,16
1000f8f0:	300c97fa 	slli	r6,r6,31
1000f8f4:	213fffc4 	addi	r4,r4,-1
1000f8f8:	1906703a 	and	r3,r3,r4
1000f8fc:	1946b03a 	or	r3,r3,r5
1000f900:	1986b03a 	or	r3,r3,r6
1000f904:	dfc00217 	ldw	ra,8(sp)
1000f908:	dc400117 	ldw	r17,4(sp)
1000f90c:	dc000017 	ldw	r16,0(sp)
1000f910:	dec00304 	addi	sp,sp,12
1000f914:	f800283a 	ret
1000f918:	00c002c4 	movi	r3,11
1000f91c:	1887c83a 	sub	r3,r3,r2
1000f920:	88c6d83a 	srl	r3,r17,r3
1000f924:	8904983a 	sll	r2,r17,r4
1000f928:	01000434 	movhi	r4,16
1000f92c:	213fffc4 	addi	r4,r4,-1
1000f930:	2941ffcc 	andi	r5,r5,2047
1000f934:	1906703a 	and	r3,r3,r4
1000f938:	800d883a 	mov	r6,r16
1000f93c:	003fe906 	br	1000f8e4 <__alt_data_end+0xf800f8e4>
1000f940:	000d883a 	mov	r6,zero
1000f944:	000b883a 	mov	r5,zero
1000f948:	0007883a 	mov	r3,zero
1000f94c:	0005883a 	mov	r2,zero
1000f950:	003fe406 	br	1000f8e4 <__alt_data_end+0xf800f8e4>
1000f954:	0123c83a 	sub	r17,zero,r4
1000f958:	003fd106 	br	1000f8a0 <__alt_data_end+0xf800f8a0>

1000f95c <__floatunsidf>:
1000f95c:	defffe04 	addi	sp,sp,-8
1000f960:	dc000015 	stw	r16,0(sp)
1000f964:	dfc00115 	stw	ra,4(sp)
1000f968:	2021883a 	mov	r16,r4
1000f96c:	20002226 	beq	r4,zero,1000f9f8 <__floatunsidf+0x9c>
1000f970:	000fa040 	call	1000fa04 <__clzsi2>
1000f974:	01010784 	movi	r4,1054
1000f978:	2089c83a 	sub	r4,r4,r2
1000f97c:	01810cc4 	movi	r6,1075
1000f980:	310dc83a 	sub	r6,r6,r4
1000f984:	00c007c4 	movi	r3,31
1000f988:	1980120e 	bge	r3,r6,1000f9d4 <__floatunsidf+0x78>
1000f98c:	00c104c4 	movi	r3,1043
1000f990:	1907c83a 	sub	r3,r3,r4
1000f994:	80ca983a 	sll	r5,r16,r3
1000f998:	00800434 	movhi	r2,16
1000f99c:	10bfffc4 	addi	r2,r2,-1
1000f9a0:	2101ffcc 	andi	r4,r4,2047
1000f9a4:	0021883a 	mov	r16,zero
1000f9a8:	288a703a 	and	r5,r5,r2
1000f9ac:	2008953a 	slli	r4,r4,20
1000f9b0:	00c00434 	movhi	r3,16
1000f9b4:	18ffffc4 	addi	r3,r3,-1
1000f9b8:	28c6703a 	and	r3,r5,r3
1000f9bc:	8005883a 	mov	r2,r16
1000f9c0:	1906b03a 	or	r3,r3,r4
1000f9c4:	dfc00117 	ldw	ra,4(sp)
1000f9c8:	dc000017 	ldw	r16,0(sp)
1000f9cc:	dec00204 	addi	sp,sp,8
1000f9d0:	f800283a 	ret
1000f9d4:	00c002c4 	movi	r3,11
1000f9d8:	188bc83a 	sub	r5,r3,r2
1000f9dc:	814ad83a 	srl	r5,r16,r5
1000f9e0:	00c00434 	movhi	r3,16
1000f9e4:	18ffffc4 	addi	r3,r3,-1
1000f9e8:	81a0983a 	sll	r16,r16,r6
1000f9ec:	2101ffcc 	andi	r4,r4,2047
1000f9f0:	28ca703a 	and	r5,r5,r3
1000f9f4:	003fed06 	br	1000f9ac <__alt_data_end+0xf800f9ac>
1000f9f8:	0009883a 	mov	r4,zero
1000f9fc:	000b883a 	mov	r5,zero
1000fa00:	003fea06 	br	1000f9ac <__alt_data_end+0xf800f9ac>

1000fa04 <__clzsi2>:
1000fa04:	00bfffd4 	movui	r2,65535
1000fa08:	11000536 	bltu	r2,r4,1000fa20 <__clzsi2+0x1c>
1000fa0c:	00803fc4 	movi	r2,255
1000fa10:	11000f36 	bltu	r2,r4,1000fa50 <__clzsi2+0x4c>
1000fa14:	00800804 	movi	r2,32
1000fa18:	0007883a 	mov	r3,zero
1000fa1c:	00000506 	br	1000fa34 <__clzsi2+0x30>
1000fa20:	00804034 	movhi	r2,256
1000fa24:	10bfffc4 	addi	r2,r2,-1
1000fa28:	11000c2e 	bgeu	r2,r4,1000fa5c <__clzsi2+0x58>
1000fa2c:	00800204 	movi	r2,8
1000fa30:	00c00604 	movi	r3,24
1000fa34:	20c8d83a 	srl	r4,r4,r3
1000fa38:	00c40074 	movhi	r3,4097
1000fa3c:	18ca3e04 	addi	r3,r3,10488
1000fa40:	1909883a 	add	r4,r3,r4
1000fa44:	20c00003 	ldbu	r3,0(r4)
1000fa48:	10c5c83a 	sub	r2,r2,r3
1000fa4c:	f800283a 	ret
1000fa50:	00800604 	movi	r2,24
1000fa54:	00c00204 	movi	r3,8
1000fa58:	003ff606 	br	1000fa34 <__alt_data_end+0xf800fa34>
1000fa5c:	00800404 	movi	r2,16
1000fa60:	1007883a 	mov	r3,r2
1000fa64:	003ff306 	br	1000fa34 <__alt_data_end+0xf800fa34>

1000fa68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fa68:	defffe04 	addi	sp,sp,-8
1000fa6c:	dfc00115 	stw	ra,4(sp)
1000fa70:	df000015 	stw	fp,0(sp)
1000fa74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fa78:	d0a01317 	ldw	r2,-32692(gp)
1000fa7c:	10000326 	beq	r2,zero,1000fa8c <alt_get_errno+0x24>
1000fa80:	d0a01317 	ldw	r2,-32692(gp)
1000fa84:	103ee83a 	callr	r2
1000fa88:	00000106 	br	1000fa90 <alt_get_errno+0x28>
1000fa8c:	d0a71c04 	addi	r2,gp,-25488
}
1000fa90:	e037883a 	mov	sp,fp
1000fa94:	dfc00117 	ldw	ra,4(sp)
1000fa98:	df000017 	ldw	fp,0(sp)
1000fa9c:	dec00204 	addi	sp,sp,8
1000faa0:	f800283a 	ret

1000faa4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000faa4:	defffb04 	addi	sp,sp,-20
1000faa8:	dfc00415 	stw	ra,16(sp)
1000faac:	df000315 	stw	fp,12(sp)
1000fab0:	df000304 	addi	fp,sp,12
1000fab4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000fab8:	e0bfff17 	ldw	r2,-4(fp)
1000fabc:	10000816 	blt	r2,zero,1000fae0 <close+0x3c>
1000fac0:	01400304 	movi	r5,12
1000fac4:	e13fff17 	ldw	r4,-4(fp)
1000fac8:	00017e40 	call	100017e4 <__mulsi3>
1000facc:	1007883a 	mov	r3,r2
1000fad0:	00840074 	movhi	r2,4097
1000fad4:	108cd304 	addi	r2,r2,13132
1000fad8:	1885883a 	add	r2,r3,r2
1000fadc:	00000106 	br	1000fae4 <close+0x40>
1000fae0:	0005883a 	mov	r2,zero
1000fae4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000fae8:	e0bffd17 	ldw	r2,-12(fp)
1000faec:	10001926 	beq	r2,zero,1000fb54 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000faf0:	e0bffd17 	ldw	r2,-12(fp)
1000faf4:	10800017 	ldw	r2,0(r2)
1000faf8:	10800417 	ldw	r2,16(r2)
1000fafc:	10000626 	beq	r2,zero,1000fb18 <close+0x74>
1000fb00:	e0bffd17 	ldw	r2,-12(fp)
1000fb04:	10800017 	ldw	r2,0(r2)
1000fb08:	10800417 	ldw	r2,16(r2)
1000fb0c:	e13ffd17 	ldw	r4,-12(fp)
1000fb10:	103ee83a 	callr	r2
1000fb14:	00000106 	br	1000fb1c <close+0x78>
1000fb18:	0005883a 	mov	r2,zero
1000fb1c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000fb20:	e13fff17 	ldw	r4,-4(fp)
1000fb24:	00104900 	call	10010490 <alt_release_fd>
    if (rval < 0)
1000fb28:	e0bffe17 	ldw	r2,-8(fp)
1000fb2c:	1000070e 	bge	r2,zero,1000fb4c <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000fb30:	000fa680 	call	1000fa68 <alt_get_errno>
1000fb34:	1007883a 	mov	r3,r2
1000fb38:	e0bffe17 	ldw	r2,-8(fp)
1000fb3c:	0085c83a 	sub	r2,zero,r2
1000fb40:	18800015 	stw	r2,0(r3)
      return -1;
1000fb44:	00bfffc4 	movi	r2,-1
1000fb48:	00000706 	br	1000fb68 <close+0xc4>
    }
    return 0;
1000fb4c:	0005883a 	mov	r2,zero
1000fb50:	00000506 	br	1000fb68 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000fb54:	000fa680 	call	1000fa68 <alt_get_errno>
1000fb58:	1007883a 	mov	r3,r2
1000fb5c:	00801444 	movi	r2,81
1000fb60:	18800015 	stw	r2,0(r3)
    return -1;
1000fb64:	00bfffc4 	movi	r2,-1
  }
}
1000fb68:	e037883a 	mov	sp,fp
1000fb6c:	dfc00117 	ldw	ra,4(sp)
1000fb70:	df000017 	ldw	fp,0(sp)
1000fb74:	dec00204 	addi	sp,sp,8
1000fb78:	f800283a 	ret

1000fb7c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000fb7c:	defffc04 	addi	sp,sp,-16
1000fb80:	df000315 	stw	fp,12(sp)
1000fb84:	df000304 	addi	fp,sp,12
1000fb88:	e13ffd15 	stw	r4,-12(fp)
1000fb8c:	e17ffe15 	stw	r5,-8(fp)
1000fb90:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000fb94:	e0bfff17 	ldw	r2,-4(fp)
}
1000fb98:	e037883a 	mov	sp,fp
1000fb9c:	df000017 	ldw	fp,0(sp)
1000fba0:	dec00104 	addi	sp,sp,4
1000fba4:	f800283a 	ret

1000fba8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1000fba8:	defffd04 	addi	sp,sp,-12
1000fbac:	df000215 	stw	fp,8(sp)
1000fbb0:	df000204 	addi	fp,sp,8
1000fbb4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1000fbb8:	0001883a 	nop
1000fbbc:	e0bfff17 	ldw	r2,-4(fp)
1000fbc0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
1000fbc4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1000fbc8:	10000226 	beq	r2,zero,1000fbd4 <_exit+0x2c>
    ALT_SIM_FAIL();
1000fbcc:	002af070 	cmpltui	zero,zero,43969
1000fbd0:	00000106 	br	1000fbd8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
1000fbd4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1000fbd8:	003fff06 	br	1000fbd8 <__alt_data_end+0xf800fbd8>

1000fbdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fbdc:	defffe04 	addi	sp,sp,-8
1000fbe0:	dfc00115 	stw	ra,4(sp)
1000fbe4:	df000015 	stw	fp,0(sp)
1000fbe8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fbec:	d0a01317 	ldw	r2,-32692(gp)
1000fbf0:	10000326 	beq	r2,zero,1000fc00 <alt_get_errno+0x24>
1000fbf4:	d0a01317 	ldw	r2,-32692(gp)
1000fbf8:	103ee83a 	callr	r2
1000fbfc:	00000106 	br	1000fc04 <alt_get_errno+0x28>
1000fc00:	d0a71c04 	addi	r2,gp,-25488
}
1000fc04:	e037883a 	mov	sp,fp
1000fc08:	dfc00117 	ldw	ra,4(sp)
1000fc0c:	df000017 	ldw	fp,0(sp)
1000fc10:	dec00204 	addi	sp,sp,8
1000fc14:	f800283a 	ret

1000fc18 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000fc18:	defffb04 	addi	sp,sp,-20
1000fc1c:	dfc00415 	stw	ra,16(sp)
1000fc20:	df000315 	stw	fp,12(sp)
1000fc24:	df000304 	addi	fp,sp,12
1000fc28:	e13ffe15 	stw	r4,-8(fp)
1000fc2c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fc30:	e0bffe17 	ldw	r2,-8(fp)
1000fc34:	10000816 	blt	r2,zero,1000fc58 <fstat+0x40>
1000fc38:	01400304 	movi	r5,12
1000fc3c:	e13ffe17 	ldw	r4,-8(fp)
1000fc40:	00017e40 	call	100017e4 <__mulsi3>
1000fc44:	1007883a 	mov	r3,r2
1000fc48:	00840074 	movhi	r2,4097
1000fc4c:	108cd304 	addi	r2,r2,13132
1000fc50:	1885883a 	add	r2,r3,r2
1000fc54:	00000106 	br	1000fc5c <fstat+0x44>
1000fc58:	0005883a 	mov	r2,zero
1000fc5c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000fc60:	e0bffd17 	ldw	r2,-12(fp)
1000fc64:	10001026 	beq	r2,zero,1000fca8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000fc68:	e0bffd17 	ldw	r2,-12(fp)
1000fc6c:	10800017 	ldw	r2,0(r2)
1000fc70:	10800817 	ldw	r2,32(r2)
1000fc74:	10000726 	beq	r2,zero,1000fc94 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000fc78:	e0bffd17 	ldw	r2,-12(fp)
1000fc7c:	10800017 	ldw	r2,0(r2)
1000fc80:	10800817 	ldw	r2,32(r2)
1000fc84:	e17fff17 	ldw	r5,-4(fp)
1000fc88:	e13ffd17 	ldw	r4,-12(fp)
1000fc8c:	103ee83a 	callr	r2
1000fc90:	00000a06 	br	1000fcbc <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000fc94:	e0bfff17 	ldw	r2,-4(fp)
1000fc98:	00c80004 	movi	r3,8192
1000fc9c:	10c00115 	stw	r3,4(r2)
      return 0;
1000fca0:	0005883a 	mov	r2,zero
1000fca4:	00000506 	br	1000fcbc <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000fca8:	000fbdc0 	call	1000fbdc <alt_get_errno>
1000fcac:	1007883a 	mov	r3,r2
1000fcb0:	00801444 	movi	r2,81
1000fcb4:	18800015 	stw	r2,0(r3)
    return -1;
1000fcb8:	00bfffc4 	movi	r2,-1
  }
}
1000fcbc:	e037883a 	mov	sp,fp
1000fcc0:	dfc00117 	ldw	ra,4(sp)
1000fcc4:	df000017 	ldw	fp,0(sp)
1000fcc8:	dec00204 	addi	sp,sp,8
1000fccc:	f800283a 	ret

1000fcd0 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
1000fcd0:	deffff04 	addi	sp,sp,-4
1000fcd4:	df000015 	stw	fp,0(sp)
1000fcd8:	d839883a 	mov	fp,sp
  return 0;
1000fcdc:	0005883a 	mov	r2,zero
}
1000fce0:	e037883a 	mov	sp,fp
1000fce4:	df000017 	ldw	fp,0(sp)
1000fce8:	dec00104 	addi	sp,sp,4
1000fcec:	f800283a 	ret

1000fcf0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fcf0:	defffe04 	addi	sp,sp,-8
1000fcf4:	dfc00115 	stw	ra,4(sp)
1000fcf8:	df000015 	stw	fp,0(sp)
1000fcfc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fd00:	d0a01317 	ldw	r2,-32692(gp)
1000fd04:	10000326 	beq	r2,zero,1000fd14 <alt_get_errno+0x24>
1000fd08:	d0a01317 	ldw	r2,-32692(gp)
1000fd0c:	103ee83a 	callr	r2
1000fd10:	00000106 	br	1000fd18 <alt_get_errno+0x28>
1000fd14:	d0a71c04 	addi	r2,gp,-25488
}
1000fd18:	e037883a 	mov	sp,fp
1000fd1c:	dfc00117 	ldw	ra,4(sp)
1000fd20:	df000017 	ldw	fp,0(sp)
1000fd24:	dec00204 	addi	sp,sp,8
1000fd28:	f800283a 	ret

1000fd2c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000fd2c:	deffed04 	addi	sp,sp,-76
1000fd30:	dfc01215 	stw	ra,72(sp)
1000fd34:	df001115 	stw	fp,68(sp)
1000fd38:	df001104 	addi	fp,sp,68
1000fd3c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fd40:	e0bfff17 	ldw	r2,-4(fp)
1000fd44:	10000816 	blt	r2,zero,1000fd68 <isatty+0x3c>
1000fd48:	01400304 	movi	r5,12
1000fd4c:	e13fff17 	ldw	r4,-4(fp)
1000fd50:	00017e40 	call	100017e4 <__mulsi3>
1000fd54:	1007883a 	mov	r3,r2
1000fd58:	00840074 	movhi	r2,4097
1000fd5c:	108cd304 	addi	r2,r2,13132
1000fd60:	1885883a 	add	r2,r3,r2
1000fd64:	00000106 	br	1000fd6c <isatty+0x40>
1000fd68:	0005883a 	mov	r2,zero
1000fd6c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000fd70:	e0bfef17 	ldw	r2,-68(fp)
1000fd74:	10000e26 	beq	r2,zero,1000fdb0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000fd78:	e0bfef17 	ldw	r2,-68(fp)
1000fd7c:	10800017 	ldw	r2,0(r2)
1000fd80:	10800817 	ldw	r2,32(r2)
1000fd84:	1000021e 	bne	r2,zero,1000fd90 <isatty+0x64>
    {
      return 1;
1000fd88:	00800044 	movi	r2,1
1000fd8c:	00000d06 	br	1000fdc4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000fd90:	e0bff004 	addi	r2,fp,-64
1000fd94:	100b883a 	mov	r5,r2
1000fd98:	e13fff17 	ldw	r4,-4(fp)
1000fd9c:	000fc180 	call	1000fc18 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000fda0:	e0bff117 	ldw	r2,-60(fp)
1000fda4:	10880020 	cmpeqi	r2,r2,8192
1000fda8:	10803fcc 	andi	r2,r2,255
1000fdac:	00000506 	br	1000fdc4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000fdb0:	000fcf00 	call	1000fcf0 <alt_get_errno>
1000fdb4:	1007883a 	mov	r3,r2
1000fdb8:	00801444 	movi	r2,81
1000fdbc:	18800015 	stw	r2,0(r3)
    return 0;
1000fdc0:	0005883a 	mov	r2,zero
  }
}
1000fdc4:	e037883a 	mov	sp,fp
1000fdc8:	dfc00117 	ldw	ra,4(sp)
1000fdcc:	df000017 	ldw	fp,0(sp)
1000fdd0:	dec00204 	addi	sp,sp,8
1000fdd4:	f800283a 	ret

1000fdd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fdd8:	defffe04 	addi	sp,sp,-8
1000fddc:	dfc00115 	stw	ra,4(sp)
1000fde0:	df000015 	stw	fp,0(sp)
1000fde4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fde8:	d0a01317 	ldw	r2,-32692(gp)
1000fdec:	10000326 	beq	r2,zero,1000fdfc <alt_get_errno+0x24>
1000fdf0:	d0a01317 	ldw	r2,-32692(gp)
1000fdf4:	103ee83a 	callr	r2
1000fdf8:	00000106 	br	1000fe00 <alt_get_errno+0x28>
1000fdfc:	d0a71c04 	addi	r2,gp,-25488
}
1000fe00:	e037883a 	mov	sp,fp
1000fe04:	dfc00117 	ldw	ra,4(sp)
1000fe08:	df000017 	ldw	fp,0(sp)
1000fe0c:	dec00204 	addi	sp,sp,8
1000fe10:	f800283a 	ret

1000fe14 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
1000fe14:	defffb04 	addi	sp,sp,-20
1000fe18:	dfc00415 	stw	ra,16(sp)
1000fe1c:	df000315 	stw	fp,12(sp)
1000fe20:	df000304 	addi	fp,sp,12
1000fe24:	e13ffe15 	stw	r4,-8(fp)
1000fe28:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
1000fe2c:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
1000fe30:	e0bffe17 	ldw	r2,-8(fp)
1000fe34:	00802f16 	blt	zero,r2,1000fef4 <kill+0xe0>
  {
    switch (sig)
1000fe38:	e0bfff17 	ldw	r2,-4(fp)
1000fe3c:	10800828 	cmpgeui	r2,r2,32
1000fe40:	1000291e 	bne	r2,zero,1000fee8 <kill+0xd4>
1000fe44:	e0bfff17 	ldw	r2,-4(fp)
1000fe48:	100690ba 	slli	r3,r2,2
1000fe4c:	00840074 	movhi	r2,4097
1000fe50:	10bf9804 	addi	r2,r2,-416
1000fe54:	1885883a 	add	r2,r3,r2
1000fe58:	10800017 	ldw	r2,0(r2)
1000fe5c:	1000683a 	jmp	r2
1000fe60:	1000ff08 	cmpgei	zero,r2,1020
1000fe64:	1000fee8 	cmpgeui	zero,r2,1019
1000fe68:	1000fee8 	cmpgeui	zero,r2,1019
1000fe6c:	1000fee0 	cmpeqi	zero,r2,1019
1000fe70:	1000fee0 	cmpeqi	zero,r2,1019
1000fe74:	1000fee0 	cmpeqi	zero,r2,1019
1000fe78:	1000fee0 	cmpeqi	zero,r2,1019
1000fe7c:	1000fee8 	cmpgeui	zero,r2,1019
1000fe80:	1000fee0 	cmpeqi	zero,r2,1019
1000fe84:	1000fee0 	cmpeqi	zero,r2,1019
1000fe88:	1000fee0 	cmpeqi	zero,r2,1019
1000fe8c:	1000fee0 	cmpeqi	zero,r2,1019
1000fe90:	1000fee0 	cmpeqi	zero,r2,1019
1000fe94:	1000fee0 	cmpeqi	zero,r2,1019
1000fe98:	1000fee0 	cmpeqi	zero,r2,1019
1000fe9c:	1000fee0 	cmpeqi	zero,r2,1019
1000fea0:	1000ff08 	cmpgei	zero,r2,1020
1000fea4:	1000fee8 	cmpgeui	zero,r2,1019
1000fea8:	1000fee8 	cmpgeui	zero,r2,1019
1000feac:	1000fee8 	cmpgeui	zero,r2,1019
1000feb0:	1000ff08 	cmpgei	zero,r2,1020
1000feb4:	1000fee8 	cmpgeui	zero,r2,1019
1000feb8:	1000fee8 	cmpgeui	zero,r2,1019
1000febc:	1000fee0 	cmpeqi	zero,r2,1019
1000fec0:	1000fee0 	cmpeqi	zero,r2,1019
1000fec4:	1000fee0 	cmpeqi	zero,r2,1019
1000fec8:	1000fee0 	cmpeqi	zero,r2,1019
1000fecc:	1000fee0 	cmpeqi	zero,r2,1019
1000fed0:	1000fee8 	cmpgeui	zero,r2,1019
1000fed4:	1000fee8 	cmpgeui	zero,r2,1019
1000fed8:	1000fee0 	cmpeqi	zero,r2,1019
1000fedc:	1000fee0 	cmpeqi	zero,r2,1019
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
1000fee0:	0009883a 	mov	r4,zero
1000fee4:	000fba80 	call	1000fba8 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
1000fee8:	00800584 	movi	r2,22
1000feec:	e0bffd15 	stw	r2,-12(fp)
1000fef0:	00000606 	br	1000ff0c <kill+0xf8>
    }
  }

  else if (pid > 0)
1000fef4:	e0bffe17 	ldw	r2,-8(fp)
1000fef8:	0080040e 	bge	zero,r2,1000ff0c <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
1000fefc:	008000c4 	movi	r2,3
1000ff00:	e0bffd15 	stw	r2,-12(fp)
1000ff04:	00000106 	br	1000ff0c <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
1000ff08:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
1000ff0c:	e0bffd17 	ldw	r2,-12(fp)
1000ff10:	10000626 	beq	r2,zero,1000ff2c <kill+0x118>
  {
    ALT_ERRNO = status;
1000ff14:	000fdd80 	call	1000fdd8 <alt_get_errno>
1000ff18:	1007883a 	mov	r3,r2
1000ff1c:	e0bffd17 	ldw	r2,-12(fp)
1000ff20:	18800015 	stw	r2,0(r3)
    return -1;
1000ff24:	00bfffc4 	movi	r2,-1
1000ff28:	00000106 	br	1000ff30 <kill+0x11c>
  }

  return 0;
1000ff2c:	0005883a 	mov	r2,zero
}
1000ff30:	e037883a 	mov	sp,fp
1000ff34:	dfc00117 	ldw	ra,4(sp)
1000ff38:	df000017 	ldw	fp,0(sp)
1000ff3c:	dec00204 	addi	sp,sp,8
1000ff40:	f800283a 	ret

1000ff44 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000ff44:	defffc04 	addi	sp,sp,-16
1000ff48:	df000315 	stw	fp,12(sp)
1000ff4c:	df000304 	addi	fp,sp,12
1000ff50:	e13ffd15 	stw	r4,-12(fp)
1000ff54:	e17ffe15 	stw	r5,-8(fp)
1000ff58:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000ff5c:	e0fffe17 	ldw	r3,-8(fp)
1000ff60:	e0bffd17 	ldw	r2,-12(fp)
1000ff64:	18800c26 	beq	r3,r2,1000ff98 <alt_load_section+0x54>
  {
    while( to != end )
1000ff68:	00000806 	br	1000ff8c <alt_load_section+0x48>
    {
      *to++ = *from++;
1000ff6c:	e0bffe17 	ldw	r2,-8(fp)
1000ff70:	10c00104 	addi	r3,r2,4
1000ff74:	e0fffe15 	stw	r3,-8(fp)
1000ff78:	e0fffd17 	ldw	r3,-12(fp)
1000ff7c:	19000104 	addi	r4,r3,4
1000ff80:	e13ffd15 	stw	r4,-12(fp)
1000ff84:	18c00017 	ldw	r3,0(r3)
1000ff88:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000ff8c:	e0fffe17 	ldw	r3,-8(fp)
1000ff90:	e0bfff17 	ldw	r2,-4(fp)
1000ff94:	18bff51e 	bne	r3,r2,1000ff6c <__alt_data_end+0xf800ff6c>
    {
      *to++ = *from++;
    }
  }
}
1000ff98:	0001883a 	nop
1000ff9c:	e037883a 	mov	sp,fp
1000ffa0:	df000017 	ldw	fp,0(sp)
1000ffa4:	dec00104 	addi	sp,sp,4
1000ffa8:	f800283a 	ret

1000ffac <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000ffac:	defffe04 	addi	sp,sp,-8
1000ffb0:	dfc00115 	stw	ra,4(sp)
1000ffb4:	df000015 	stw	fp,0(sp)
1000ffb8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000ffbc:	01840074 	movhi	r6,4097
1000ffc0:	31917f04 	addi	r6,r6,17916
1000ffc4:	01440074 	movhi	r5,4097
1000ffc8:	294a8e04 	addi	r5,r5,10808
1000ffcc:	01040074 	movhi	r4,4097
1000ffd0:	21117f04 	addi	r4,r4,17916
1000ffd4:	000ff440 	call	1000ff44 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000ffd8:	01840034 	movhi	r6,4096
1000ffdc:	31808c04 	addi	r6,r6,560
1000ffe0:	01440034 	movhi	r5,4096
1000ffe4:	29400804 	addi	r5,r5,32
1000ffe8:	01040034 	movhi	r4,4096
1000ffec:	21000804 	addi	r4,r4,32
1000fff0:	000ff440 	call	1000ff44 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000fff4:	01840074 	movhi	r6,4097
1000fff8:	318a8e04 	addi	r6,r6,10808
1000fffc:	01440074 	movhi	r5,4097
10010000:	29492904 	addi	r5,r5,9380
10010004:	01040074 	movhi	r4,4097
10010008:	21092904 	addi	r4,r4,9380
1001000c:	000ff440 	call	1000ff44 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10010010:	00117dc0 	call	100117dc <alt_dcache_flush_all>
  alt_icache_flush_all();
10010014:	0011c780 	call	10011c78 <alt_icache_flush_all>
}
10010018:	0001883a 	nop
1001001c:	e037883a 	mov	sp,fp
10010020:	dfc00117 	ldw	ra,4(sp)
10010024:	df000017 	ldw	fp,0(sp)
10010028:	dec00204 	addi	sp,sp,8
1001002c:	f800283a 	ret

10010030 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010030:	defffe04 	addi	sp,sp,-8
10010034:	dfc00115 	stw	ra,4(sp)
10010038:	df000015 	stw	fp,0(sp)
1001003c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010040:	d0a01317 	ldw	r2,-32692(gp)
10010044:	10000326 	beq	r2,zero,10010054 <alt_get_errno+0x24>
10010048:	d0a01317 	ldw	r2,-32692(gp)
1001004c:	103ee83a 	callr	r2
10010050:	00000106 	br	10010058 <alt_get_errno+0x28>
10010054:	d0a71c04 	addi	r2,gp,-25488
}
10010058:	e037883a 	mov	sp,fp
1001005c:	dfc00117 	ldw	ra,4(sp)
10010060:	df000017 	ldw	fp,0(sp)
10010064:	dec00204 	addi	sp,sp,8
10010068:	f800283a 	ret

1001006c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1001006c:	defff904 	addi	sp,sp,-28
10010070:	dfc00615 	stw	ra,24(sp)
10010074:	df000515 	stw	fp,20(sp)
10010078:	df000504 	addi	fp,sp,20
1001007c:	e13ffd15 	stw	r4,-12(fp)
10010080:	e17ffe15 	stw	r5,-8(fp)
10010084:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10010088:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1001008c:	e0bffd17 	ldw	r2,-12(fp)
10010090:	10000816 	blt	r2,zero,100100b4 <lseek+0x48>
10010094:	01400304 	movi	r5,12
10010098:	e13ffd17 	ldw	r4,-12(fp)
1001009c:	00017e40 	call	100017e4 <__mulsi3>
100100a0:	1007883a 	mov	r3,r2
100100a4:	00840074 	movhi	r2,4097
100100a8:	108cd304 	addi	r2,r2,13132
100100ac:	1885883a 	add	r2,r3,r2
100100b0:	00000106 	br	100100b8 <lseek+0x4c>
100100b4:	0005883a 	mov	r2,zero
100100b8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
100100bc:	e0bffc17 	ldw	r2,-16(fp)
100100c0:	10001026 	beq	r2,zero,10010104 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
100100c4:	e0bffc17 	ldw	r2,-16(fp)
100100c8:	10800017 	ldw	r2,0(r2)
100100cc:	10800717 	ldw	r2,28(r2)
100100d0:	10000926 	beq	r2,zero,100100f8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
100100d4:	e0bffc17 	ldw	r2,-16(fp)
100100d8:	10800017 	ldw	r2,0(r2)
100100dc:	10800717 	ldw	r2,28(r2)
100100e0:	e1bfff17 	ldw	r6,-4(fp)
100100e4:	e17ffe17 	ldw	r5,-8(fp)
100100e8:	e13ffc17 	ldw	r4,-16(fp)
100100ec:	103ee83a 	callr	r2
100100f0:	e0bffb15 	stw	r2,-20(fp)
100100f4:	00000506 	br	1001010c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
100100f8:	00bfde84 	movi	r2,-134
100100fc:	e0bffb15 	stw	r2,-20(fp)
10010100:	00000206 	br	1001010c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
10010104:	00bfebc4 	movi	r2,-81
10010108:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1001010c:	e0bffb17 	ldw	r2,-20(fp)
10010110:	1000070e 	bge	r2,zero,10010130 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
10010114:	00100300 	call	10010030 <alt_get_errno>
10010118:	1007883a 	mov	r3,r2
1001011c:	e0bffb17 	ldw	r2,-20(fp)
10010120:	0085c83a 	sub	r2,zero,r2
10010124:	18800015 	stw	r2,0(r3)
    rc = -1;
10010128:	00bfffc4 	movi	r2,-1
1001012c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10010130:	e0bffb17 	ldw	r2,-20(fp)
}
10010134:	e037883a 	mov	sp,fp
10010138:	dfc00117 	ldw	ra,4(sp)
1001013c:	df000017 	ldw	fp,0(sp)
10010140:	dec00204 	addi	sp,sp,8
10010144:	f800283a 	ret

10010148 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10010148:	defffd04 	addi	sp,sp,-12
1001014c:	dfc00215 	stw	ra,8(sp)
10010150:	df000115 	stw	fp,4(sp)
10010154:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10010158:	0009883a 	mov	r4,zero
1001015c:	00107340 	call	10010734 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10010160:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10010164:	001076c0 	call	1001076c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10010168:	01840074 	movhi	r6,4097
1001016c:	318a8104 	addi	r6,r6,10756
10010170:	01440074 	movhi	r5,4097
10010174:	294a8104 	addi	r5,r5,10756
10010178:	01040074 	movhi	r4,4097
1001017c:	210a8104 	addi	r4,r4,10756
10010180:	001201c0 	call	1001201c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10010184:	00118dc0 	call	100118dc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10010188:	01040074 	movhi	r4,4097
1001018c:	21064f04 	addi	r4,r4,6460
10010190:	00122fc0 	call	100122fc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10010194:	d0a72317 	ldw	r2,-25460(gp)
10010198:	d0e72417 	ldw	r3,-25456(gp)
1001019c:	d1272517 	ldw	r4,-25452(gp)
100101a0:	200d883a 	mov	r6,r4
100101a4:	180b883a 	mov	r5,r3
100101a8:	1009883a 	mov	r4,r2
100101ac:	0000b980 	call	10000b98 <main>
100101b0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
100101b4:	01000044 	movi	r4,1
100101b8:	000faa40 	call	1000faa4 <close>
  exit (result);
100101bc:	e13fff17 	ldw	r4,-4(fp)
100101c0:	00018880 	call	10001888 <exit>

100101c4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
100101c4:	defffe04 	addi	sp,sp,-8
100101c8:	df000115 	stw	fp,4(sp)
100101cc:	df000104 	addi	fp,sp,4
100101d0:	e13fff15 	stw	r4,-4(fp)
}
100101d4:	0001883a 	nop
100101d8:	e037883a 	mov	sp,fp
100101dc:	df000017 	ldw	fp,0(sp)
100101e0:	dec00104 	addi	sp,sp,4
100101e4:	f800283a 	ret

100101e8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
100101e8:	defffe04 	addi	sp,sp,-8
100101ec:	df000115 	stw	fp,4(sp)
100101f0:	df000104 	addi	fp,sp,4
100101f4:	e13fff15 	stw	r4,-4(fp)
}
100101f8:	0001883a 	nop
100101fc:	e037883a 	mov	sp,fp
10010200:	df000017 	ldw	fp,0(sp)
10010204:	dec00104 	addi	sp,sp,4
10010208:	f800283a 	ret

1001020c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001020c:	defffe04 	addi	sp,sp,-8
10010210:	dfc00115 	stw	ra,4(sp)
10010214:	df000015 	stw	fp,0(sp)
10010218:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001021c:	d0a01317 	ldw	r2,-32692(gp)
10010220:	10000326 	beq	r2,zero,10010230 <alt_get_errno+0x24>
10010224:	d0a01317 	ldw	r2,-32692(gp)
10010228:	103ee83a 	callr	r2
1001022c:	00000106 	br	10010234 <alt_get_errno+0x28>
10010230:	d0a71c04 	addi	r2,gp,-25488
}
10010234:	e037883a 	mov	sp,fp
10010238:	dfc00117 	ldw	ra,4(sp)
1001023c:	df000017 	ldw	fp,0(sp)
10010240:	dec00204 	addi	sp,sp,8
10010244:	f800283a 	ret

10010248 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10010248:	defffb04 	addi	sp,sp,-20
1001024c:	dfc00415 	stw	ra,16(sp)
10010250:	df000315 	stw	fp,12(sp)
10010254:	dc000215 	stw	r16,8(sp)
10010258:	df000304 	addi	fp,sp,12
1001025c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10010260:	e0bffe17 	ldw	r2,-8(fp)
10010264:	10800217 	ldw	r2,8(r2)
10010268:	10d00034 	orhi	r3,r2,16384
1001026c:	e0bffe17 	ldw	r2,-8(fp)
10010270:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10010274:	e03ffd15 	stw	zero,-12(fp)
10010278:	00002306 	br	10010308 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1001027c:	04040074 	movhi	r16,4097
10010280:	840cd304 	addi	r16,r16,13132
10010284:	e0bffd17 	ldw	r2,-12(fp)
10010288:	01400304 	movi	r5,12
1001028c:	1009883a 	mov	r4,r2
10010290:	00017e40 	call	100017e4 <__mulsi3>
10010294:	8085883a 	add	r2,r16,r2
10010298:	10c00017 	ldw	r3,0(r2)
1001029c:	e0bffe17 	ldw	r2,-8(fp)
100102a0:	10800017 	ldw	r2,0(r2)
100102a4:	1880151e 	bne	r3,r2,100102fc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100102a8:	04040074 	movhi	r16,4097
100102ac:	840cd304 	addi	r16,r16,13132
100102b0:	e0bffd17 	ldw	r2,-12(fp)
100102b4:	01400304 	movi	r5,12
100102b8:	1009883a 	mov	r4,r2
100102bc:	00017e40 	call	100017e4 <__mulsi3>
100102c0:	8085883a 	add	r2,r16,r2
100102c4:	10800204 	addi	r2,r2,8
100102c8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100102cc:	10000b0e 	bge	r2,zero,100102fc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
100102d0:	01400304 	movi	r5,12
100102d4:	e13ffd17 	ldw	r4,-12(fp)
100102d8:	00017e40 	call	100017e4 <__mulsi3>
100102dc:	1007883a 	mov	r3,r2
100102e0:	00840074 	movhi	r2,4097
100102e4:	108cd304 	addi	r2,r2,13132
100102e8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100102ec:	e0bffe17 	ldw	r2,-8(fp)
100102f0:	18800226 	beq	r3,r2,100102fc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
100102f4:	00bffcc4 	movi	r2,-13
100102f8:	00000806 	br	1001031c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100102fc:	e0bffd17 	ldw	r2,-12(fp)
10010300:	10800044 	addi	r2,r2,1
10010304:	e0bffd15 	stw	r2,-12(fp)
10010308:	d0a01217 	ldw	r2,-32696(gp)
1001030c:	1007883a 	mov	r3,r2
10010310:	e0bffd17 	ldw	r2,-12(fp)
10010314:	18bfd92e 	bgeu	r3,r2,1001027c <__alt_data_end+0xf801027c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10010318:	0005883a 	mov	r2,zero
}
1001031c:	e6ffff04 	addi	sp,fp,-4
10010320:	dfc00217 	ldw	ra,8(sp)
10010324:	df000117 	ldw	fp,4(sp)
10010328:	dc000017 	ldw	r16,0(sp)
1001032c:	dec00304 	addi	sp,sp,12
10010330:	f800283a 	ret

10010334 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10010334:	defff604 	addi	sp,sp,-40
10010338:	dfc00915 	stw	ra,36(sp)
1001033c:	df000815 	stw	fp,32(sp)
10010340:	df000804 	addi	fp,sp,32
10010344:	e13ffd15 	stw	r4,-12(fp)
10010348:	e17ffe15 	stw	r5,-8(fp)
1001034c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10010350:	00bfffc4 	movi	r2,-1
10010354:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10010358:	00bffb44 	movi	r2,-19
1001035c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10010360:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10010364:	d1601004 	addi	r5,gp,-32704
10010368:	e13ffd17 	ldw	r4,-12(fp)
1001036c:	001199c0 	call	1001199c <alt_find_dev>
10010370:	e0bff815 	stw	r2,-32(fp)
10010374:	e0bff817 	ldw	r2,-32(fp)
10010378:	1000051e 	bne	r2,zero,10010390 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1001037c:	e13ffd17 	ldw	r4,-12(fp)
10010380:	0011a2c0 	call	10011a2c <alt_find_file>
10010384:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10010388:	00800044 	movi	r2,1
1001038c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10010390:	e0bff817 	ldw	r2,-32(fp)
10010394:	10002b26 	beq	r2,zero,10010444 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
10010398:	e13ff817 	ldw	r4,-32(fp)
1001039c:	0011bb40 	call	10011bb4 <alt_get_fd>
100103a0:	e0bff915 	stw	r2,-28(fp)
100103a4:	e0bff917 	ldw	r2,-28(fp)
100103a8:	1000030e 	bge	r2,zero,100103b8 <open+0x84>
    {
      status = index;
100103ac:	e0bff917 	ldw	r2,-28(fp)
100103b0:	e0bffa15 	stw	r2,-24(fp)
100103b4:	00002506 	br	1001044c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
100103b8:	01400304 	movi	r5,12
100103bc:	e13ff917 	ldw	r4,-28(fp)
100103c0:	00017e40 	call	100017e4 <__mulsi3>
100103c4:	1007883a 	mov	r3,r2
100103c8:	00840074 	movhi	r2,4097
100103cc:	108cd304 	addi	r2,r2,13132
100103d0:	1885883a 	add	r2,r3,r2
100103d4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
100103d8:	e0fffe17 	ldw	r3,-8(fp)
100103dc:	00900034 	movhi	r2,16384
100103e0:	10bfffc4 	addi	r2,r2,-1
100103e4:	1886703a 	and	r3,r3,r2
100103e8:	e0bffc17 	ldw	r2,-16(fp)
100103ec:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
100103f0:	e0bffb17 	ldw	r2,-20(fp)
100103f4:	1000051e 	bne	r2,zero,1001040c <open+0xd8>
100103f8:	e13ffc17 	ldw	r4,-16(fp)
100103fc:	00102480 	call	10010248 <alt_file_locked>
10010400:	e0bffa15 	stw	r2,-24(fp)
10010404:	e0bffa17 	ldw	r2,-24(fp)
10010408:	10001016 	blt	r2,zero,1001044c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1001040c:	e0bff817 	ldw	r2,-32(fp)
10010410:	10800317 	ldw	r2,12(r2)
10010414:	10000826 	beq	r2,zero,10010438 <open+0x104>
10010418:	e0bff817 	ldw	r2,-32(fp)
1001041c:	10800317 	ldw	r2,12(r2)
10010420:	e1ffff17 	ldw	r7,-4(fp)
10010424:	e1bffe17 	ldw	r6,-8(fp)
10010428:	e17ffd17 	ldw	r5,-12(fp)
1001042c:	e13ffc17 	ldw	r4,-16(fp)
10010430:	103ee83a 	callr	r2
10010434:	00000106 	br	1001043c <open+0x108>
10010438:	0005883a 	mov	r2,zero
1001043c:	e0bffa15 	stw	r2,-24(fp)
10010440:	00000206 	br	1001044c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
10010444:	00bffb44 	movi	r2,-19
10010448:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1001044c:	e0bffa17 	ldw	r2,-24(fp)
10010450:	1000090e 	bge	r2,zero,10010478 <open+0x144>
  {
    alt_release_fd (index);  
10010454:	e13ff917 	ldw	r4,-28(fp)
10010458:	00104900 	call	10010490 <alt_release_fd>
    ALT_ERRNO = -status;
1001045c:	001020c0 	call	1001020c <alt_get_errno>
10010460:	1007883a 	mov	r3,r2
10010464:	e0bffa17 	ldw	r2,-24(fp)
10010468:	0085c83a 	sub	r2,zero,r2
1001046c:	18800015 	stw	r2,0(r3)
    return -1;
10010470:	00bfffc4 	movi	r2,-1
10010474:	00000106 	br	1001047c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
10010478:	e0bff917 	ldw	r2,-28(fp)
}
1001047c:	e037883a 	mov	sp,fp
10010480:	dfc00117 	ldw	ra,4(sp)
10010484:	df000017 	ldw	fp,0(sp)
10010488:	dec00204 	addi	sp,sp,8
1001048c:	f800283a 	ret

10010490 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10010490:	defffc04 	addi	sp,sp,-16
10010494:	dfc00315 	stw	ra,12(sp)
10010498:	df000215 	stw	fp,8(sp)
1001049c:	dc000115 	stw	r16,4(sp)
100104a0:	df000204 	addi	fp,sp,8
100104a4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
100104a8:	e0bffe17 	ldw	r2,-8(fp)
100104ac:	108000d0 	cmplti	r2,r2,3
100104b0:	1000111e 	bne	r2,zero,100104f8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
100104b4:	04040074 	movhi	r16,4097
100104b8:	840cd304 	addi	r16,r16,13132
100104bc:	e0bffe17 	ldw	r2,-8(fp)
100104c0:	01400304 	movi	r5,12
100104c4:	1009883a 	mov	r4,r2
100104c8:	00017e40 	call	100017e4 <__mulsi3>
100104cc:	8085883a 	add	r2,r16,r2
100104d0:	10800204 	addi	r2,r2,8
100104d4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
100104d8:	04040074 	movhi	r16,4097
100104dc:	840cd304 	addi	r16,r16,13132
100104e0:	e0bffe17 	ldw	r2,-8(fp)
100104e4:	01400304 	movi	r5,12
100104e8:	1009883a 	mov	r4,r2
100104ec:	00017e40 	call	100017e4 <__mulsi3>
100104f0:	8085883a 	add	r2,r16,r2
100104f4:	10000015 	stw	zero,0(r2)
  }
}
100104f8:	0001883a 	nop
100104fc:	e6ffff04 	addi	sp,fp,-4
10010500:	dfc00217 	ldw	ra,8(sp)
10010504:	df000117 	ldw	fp,4(sp)
10010508:	dc000017 	ldw	r16,0(sp)
1001050c:	dec00304 	addi	sp,sp,12
10010510:	f800283a 	ret

10010514 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10010514:	defff904 	addi	sp,sp,-28
10010518:	df000615 	stw	fp,24(sp)
1001051c:	df000604 	addi	fp,sp,24
10010520:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010524:	0005303a 	rdctl	r2,status
10010528:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001052c:	e0fffe17 	ldw	r3,-8(fp)
10010530:	00bfff84 	movi	r2,-2
10010534:	1884703a 	and	r2,r3,r2
10010538:	1001703a 	wrctl	status,r2
  
  return context;
1001053c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10010540:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10010544:	d0a01417 	ldw	r2,-32688(gp)
10010548:	10c000c4 	addi	r3,r2,3
1001054c:	00bfff04 	movi	r2,-4
10010550:	1884703a 	and	r2,r3,r2
10010554:	d0a01415 	stw	r2,-32688(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10010558:	d0e01417 	ldw	r3,-32688(gp)
1001055c:	e0bfff17 	ldw	r2,-4(fp)
10010560:	1887883a 	add	r3,r3,r2
10010564:	00860034 	movhi	r2,6144
10010568:	10800004 	addi	r2,r2,0
1001056c:	10c0062e 	bgeu	r2,r3,10010588 <sbrk+0x74>
10010570:	e0bffb17 	ldw	r2,-20(fp)
10010574:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010578:	e0bffa17 	ldw	r2,-24(fp)
1001057c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10010580:	00bfffc4 	movi	r2,-1
10010584:	00000b06 	br	100105b4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10010588:	d0a01417 	ldw	r2,-32688(gp)
1001058c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
10010590:	d0e01417 	ldw	r3,-32688(gp)
10010594:	e0bfff17 	ldw	r2,-4(fp)
10010598:	1885883a 	add	r2,r3,r2
1001059c:	d0a01415 	stw	r2,-32688(gp)
100105a0:	e0bffb17 	ldw	r2,-20(fp)
100105a4:	e0bffc15 	stw	r2,-16(fp)
100105a8:	e0bffc17 	ldw	r2,-16(fp)
100105ac:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
100105b0:	e0bffd17 	ldw	r2,-12(fp)
} 
100105b4:	e037883a 	mov	sp,fp
100105b8:	df000017 	ldw	fp,0(sp)
100105bc:	dec00104 	addi	sp,sp,4
100105c0:	f800283a 	ret

100105c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100105c4:	defffe04 	addi	sp,sp,-8
100105c8:	dfc00115 	stw	ra,4(sp)
100105cc:	df000015 	stw	fp,0(sp)
100105d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100105d4:	d0a01317 	ldw	r2,-32692(gp)
100105d8:	10000326 	beq	r2,zero,100105e8 <alt_get_errno+0x24>
100105dc:	d0a01317 	ldw	r2,-32692(gp)
100105e0:	103ee83a 	callr	r2
100105e4:	00000106 	br	100105ec <alt_get_errno+0x28>
100105e8:	d0a71c04 	addi	r2,gp,-25488
}
100105ec:	e037883a 	mov	sp,fp
100105f0:	dfc00117 	ldw	ra,4(sp)
100105f4:	df000017 	ldw	fp,0(sp)
100105f8:	dec00204 	addi	sp,sp,8
100105fc:	f800283a 	ret

10010600 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10010600:	defff904 	addi	sp,sp,-28
10010604:	dfc00615 	stw	ra,24(sp)
10010608:	df000515 	stw	fp,20(sp)
1001060c:	df000504 	addi	fp,sp,20
10010610:	e13ffd15 	stw	r4,-12(fp)
10010614:	e17ffe15 	stw	r5,-8(fp)
10010618:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1001061c:	e0bffd17 	ldw	r2,-12(fp)
10010620:	10000816 	blt	r2,zero,10010644 <write+0x44>
10010624:	01400304 	movi	r5,12
10010628:	e13ffd17 	ldw	r4,-12(fp)
1001062c:	00017e40 	call	100017e4 <__mulsi3>
10010630:	1007883a 	mov	r3,r2
10010634:	00840074 	movhi	r2,4097
10010638:	108cd304 	addi	r2,r2,13132
1001063c:	1885883a 	add	r2,r3,r2
10010640:	00000106 	br	10010648 <write+0x48>
10010644:	0005883a 	mov	r2,zero
10010648:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1001064c:	e0bffb17 	ldw	r2,-20(fp)
10010650:	10002126 	beq	r2,zero,100106d8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10010654:	e0bffb17 	ldw	r2,-20(fp)
10010658:	10800217 	ldw	r2,8(r2)
1001065c:	108000cc 	andi	r2,r2,3
10010660:	10001826 	beq	r2,zero,100106c4 <write+0xc4>
10010664:	e0bffb17 	ldw	r2,-20(fp)
10010668:	10800017 	ldw	r2,0(r2)
1001066c:	10800617 	ldw	r2,24(r2)
10010670:	10001426 	beq	r2,zero,100106c4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10010674:	e0bffb17 	ldw	r2,-20(fp)
10010678:	10800017 	ldw	r2,0(r2)
1001067c:	10800617 	ldw	r2,24(r2)
10010680:	e0ffff17 	ldw	r3,-4(fp)
10010684:	180d883a 	mov	r6,r3
10010688:	e17ffe17 	ldw	r5,-8(fp)
1001068c:	e13ffb17 	ldw	r4,-20(fp)
10010690:	103ee83a 	callr	r2
10010694:	e0bffc15 	stw	r2,-16(fp)
10010698:	e0bffc17 	ldw	r2,-16(fp)
1001069c:	1000070e 	bge	r2,zero,100106bc <write+0xbc>
      {
        ALT_ERRNO = -rval;
100106a0:	00105c40 	call	100105c4 <alt_get_errno>
100106a4:	1007883a 	mov	r3,r2
100106a8:	e0bffc17 	ldw	r2,-16(fp)
100106ac:	0085c83a 	sub	r2,zero,r2
100106b0:	18800015 	stw	r2,0(r3)
        return -1;
100106b4:	00bfffc4 	movi	r2,-1
100106b8:	00000c06 	br	100106ec <write+0xec>
      }
      return rval;
100106bc:	e0bffc17 	ldw	r2,-16(fp)
100106c0:	00000a06 	br	100106ec <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
100106c4:	00105c40 	call	100105c4 <alt_get_errno>
100106c8:	1007883a 	mov	r3,r2
100106cc:	00800344 	movi	r2,13
100106d0:	18800015 	stw	r2,0(r3)
100106d4:	00000406 	br	100106e8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
100106d8:	00105c40 	call	100105c4 <alt_get_errno>
100106dc:	1007883a 	mov	r3,r2
100106e0:	00801444 	movi	r2,81
100106e4:	18800015 	stw	r2,0(r3)
  }
  return -1;
100106e8:	00bfffc4 	movi	r2,-1
}
100106ec:	e037883a 	mov	sp,fp
100106f0:	dfc00117 	ldw	ra,4(sp)
100106f4:	df000017 	ldw	fp,0(sp)
100106f8:	dec00204 	addi	sp,sp,8
100106fc:	f800283a 	ret

10010700 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10010700:	defffd04 	addi	sp,sp,-12
10010704:	dfc00215 	stw	ra,8(sp)
10010708:	df000115 	stw	fp,4(sp)
1001070c:	df000104 	addi	fp,sp,4
10010710:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10010714:	d1601004 	addi	r5,gp,-32704
10010718:	e13fff17 	ldw	r4,-4(fp)
1001071c:	00118380 	call	10011838 <alt_dev_llist_insert>
}
10010720:	e037883a 	mov	sp,fp
10010724:	dfc00117 	ldw	ra,4(sp)
10010728:	df000017 	ldw	fp,0(sp)
1001072c:	dec00204 	addi	sp,sp,8
10010730:	f800283a 	ret

10010734 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10010734:	defffd04 	addi	sp,sp,-12
10010738:	dfc00215 	stw	ra,8(sp)
1001073c:	df000115 	stw	fp,4(sp)
10010740:	df000104 	addi	fp,sp,4
10010744:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10010748:	001223c0 	call	1001223c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1001074c:	00800044 	movi	r2,1
10010750:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10010754:	0001883a 	nop
10010758:	e037883a 	mov	sp,fp
1001075c:	dfc00117 	ldw	ra,4(sp)
10010760:	df000017 	ldw	fp,0(sp)
10010764:	dec00204 	addi	sp,sp,8
10010768:	f800283a 	ret

1001076c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1001076c:	defffe04 	addi	sp,sp,-8
10010770:	dfc00115 	stw	ra,4(sp)
10010774:	df000015 	stw	fp,0(sp)
10010778:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1001077c:	000d883a 	mov	r6,zero
10010780:	000b883a 	mov	r5,zero
10010784:	01040074 	movhi	r4,4097
10010788:	210d3d04 	addi	r4,r4,13556
1001078c:	00109280 	call	10010928 <altera_avalon_jtag_uart_init>
10010790:	01040074 	movhi	r4,4097
10010794:	210d3304 	addi	r4,r4,13516
10010798:	00107000 	call	10010700 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1001079c:	0001883a 	nop
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
100107a0:	01040074 	movhi	r4,4097
100107a4:	21114b04 	addi	r4,r4,17708
100107a8:	0011b340 	call	10011b34 <alt_fs_reg>
}
100107ac:	0001883a 	nop
100107b0:	e037883a 	mov	sp,fp
100107b4:	dfc00117 	ldw	ra,4(sp)
100107b8:	df000017 	ldw	fp,0(sp)
100107bc:	dec00204 	addi	sp,sp,8
100107c0:	f800283a 	ret

100107c4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
100107c4:	defffa04 	addi	sp,sp,-24
100107c8:	dfc00515 	stw	ra,20(sp)
100107cc:	df000415 	stw	fp,16(sp)
100107d0:	df000404 	addi	fp,sp,16
100107d4:	e13ffd15 	stw	r4,-12(fp)
100107d8:	e17ffe15 	stw	r5,-8(fp)
100107dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100107e0:	e0bffd17 	ldw	r2,-12(fp)
100107e4:	10800017 	ldw	r2,0(r2)
100107e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
100107ec:	e0bffc17 	ldw	r2,-16(fp)
100107f0:	10c00a04 	addi	r3,r2,40
100107f4:	e0bffd17 	ldw	r2,-12(fp)
100107f8:	10800217 	ldw	r2,8(r2)
100107fc:	100f883a 	mov	r7,r2
10010800:	e1bfff17 	ldw	r6,-4(fp)
10010804:	e17ffe17 	ldw	r5,-8(fp)
10010808:	1809883a 	mov	r4,r3
1001080c:	0010dec0 	call	10010dec <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10010810:	e037883a 	mov	sp,fp
10010814:	dfc00117 	ldw	ra,4(sp)
10010818:	df000017 	ldw	fp,0(sp)
1001081c:	dec00204 	addi	sp,sp,8
10010820:	f800283a 	ret

10010824 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10010824:	defffa04 	addi	sp,sp,-24
10010828:	dfc00515 	stw	ra,20(sp)
1001082c:	df000415 	stw	fp,16(sp)
10010830:	df000404 	addi	fp,sp,16
10010834:	e13ffd15 	stw	r4,-12(fp)
10010838:	e17ffe15 	stw	r5,-8(fp)
1001083c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010840:	e0bffd17 	ldw	r2,-12(fp)
10010844:	10800017 	ldw	r2,0(r2)
10010848:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1001084c:	e0bffc17 	ldw	r2,-16(fp)
10010850:	10c00a04 	addi	r3,r2,40
10010854:	e0bffd17 	ldw	r2,-12(fp)
10010858:	10800217 	ldw	r2,8(r2)
1001085c:	100f883a 	mov	r7,r2
10010860:	e1bfff17 	ldw	r6,-4(fp)
10010864:	e17ffe17 	ldw	r5,-8(fp)
10010868:	1809883a 	mov	r4,r3
1001086c:	00110080 	call	10011008 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10010870:	e037883a 	mov	sp,fp
10010874:	dfc00117 	ldw	ra,4(sp)
10010878:	df000017 	ldw	fp,0(sp)
1001087c:	dec00204 	addi	sp,sp,8
10010880:	f800283a 	ret

10010884 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10010884:	defffc04 	addi	sp,sp,-16
10010888:	dfc00315 	stw	ra,12(sp)
1001088c:	df000215 	stw	fp,8(sp)
10010890:	df000204 	addi	fp,sp,8
10010894:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010898:	e0bfff17 	ldw	r2,-4(fp)
1001089c:	10800017 	ldw	r2,0(r2)
100108a0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
100108a4:	e0bffe17 	ldw	r2,-8(fp)
100108a8:	10c00a04 	addi	r3,r2,40
100108ac:	e0bfff17 	ldw	r2,-4(fp)
100108b0:	10800217 	ldw	r2,8(r2)
100108b4:	100b883a 	mov	r5,r2
100108b8:	1809883a 	mov	r4,r3
100108bc:	0010c940 	call	10010c94 <altera_avalon_jtag_uart_close>
}
100108c0:	e037883a 	mov	sp,fp
100108c4:	dfc00117 	ldw	ra,4(sp)
100108c8:	df000017 	ldw	fp,0(sp)
100108cc:	dec00204 	addi	sp,sp,8
100108d0:	f800283a 	ret

100108d4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
100108d4:	defffa04 	addi	sp,sp,-24
100108d8:	dfc00515 	stw	ra,20(sp)
100108dc:	df000415 	stw	fp,16(sp)
100108e0:	df000404 	addi	fp,sp,16
100108e4:	e13ffd15 	stw	r4,-12(fp)
100108e8:	e17ffe15 	stw	r5,-8(fp)
100108ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
100108f0:	e0bffd17 	ldw	r2,-12(fp)
100108f4:	10800017 	ldw	r2,0(r2)
100108f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
100108fc:	e0bffc17 	ldw	r2,-16(fp)
10010900:	10800a04 	addi	r2,r2,40
10010904:	e1bfff17 	ldw	r6,-4(fp)
10010908:	e17ffe17 	ldw	r5,-8(fp)
1001090c:	1009883a 	mov	r4,r2
10010910:	0010cfc0 	call	10010cfc <altera_avalon_jtag_uart_ioctl>
}
10010914:	e037883a 	mov	sp,fp
10010918:	dfc00117 	ldw	ra,4(sp)
1001091c:	df000017 	ldw	fp,0(sp)
10010920:	dec00204 	addi	sp,sp,8
10010924:	f800283a 	ret

10010928 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10010928:	defffa04 	addi	sp,sp,-24
1001092c:	dfc00515 	stw	ra,20(sp)
10010930:	df000415 	stw	fp,16(sp)
10010934:	df000404 	addi	fp,sp,16
10010938:	e13ffd15 	stw	r4,-12(fp)
1001093c:	e17ffe15 	stw	r5,-8(fp)
10010940:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010944:	e0bffd17 	ldw	r2,-12(fp)
10010948:	00c00044 	movi	r3,1
1001094c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10010950:	e0bffd17 	ldw	r2,-12(fp)
10010954:	10800017 	ldw	r2,0(r2)
10010958:	10800104 	addi	r2,r2,4
1001095c:	1007883a 	mov	r3,r2
10010960:	e0bffd17 	ldw	r2,-12(fp)
10010964:	10800817 	ldw	r2,32(r2)
10010968:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1001096c:	e0bffe17 	ldw	r2,-8(fp)
10010970:	e0ffff17 	ldw	r3,-4(fp)
10010974:	d8000015 	stw	zero,0(sp)
10010978:	e1fffd17 	ldw	r7,-12(fp)
1001097c:	01840074 	movhi	r6,4097
10010980:	31827a04 	addi	r6,r6,2536
10010984:	180b883a 	mov	r5,r3
10010988:	1009883a 	mov	r4,r2
1001098c:	0011c980 	call	10011c98 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10010990:	e0bffd17 	ldw	r2,-12(fp)
10010994:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10010998:	e0bffd17 	ldw	r2,-12(fp)
1001099c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
100109a0:	d0e72717 	ldw	r3,-25444(gp)
100109a4:	e1fffd17 	ldw	r7,-12(fp)
100109a8:	01840074 	movhi	r6,4097
100109ac:	3182fd04 	addi	r6,r6,3060
100109b0:	180b883a 	mov	r5,r3
100109b4:	1009883a 	mov	r4,r2
100109b8:	00116b00 	call	100116b0 <alt_alarm_start>
100109bc:	1000040e 	bge	r2,zero,100109d0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
100109c0:	e0fffd17 	ldw	r3,-12(fp)
100109c4:	00a00034 	movhi	r2,32768
100109c8:	10bfffc4 	addi	r2,r2,-1
100109cc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
100109d0:	0001883a 	nop
100109d4:	e037883a 	mov	sp,fp
100109d8:	dfc00117 	ldw	ra,4(sp)
100109dc:	df000017 	ldw	fp,0(sp)
100109e0:	dec00204 	addi	sp,sp,8
100109e4:	f800283a 	ret

100109e8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
100109e8:	defff804 	addi	sp,sp,-32
100109ec:	df000715 	stw	fp,28(sp)
100109f0:	df000704 	addi	fp,sp,28
100109f4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
100109f8:	e0bfff17 	ldw	r2,-4(fp)
100109fc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10010a00:	e0bffb17 	ldw	r2,-20(fp)
10010a04:	10800017 	ldw	r2,0(r2)
10010a08:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010a0c:	e0bffc17 	ldw	r2,-16(fp)
10010a10:	10800104 	addi	r2,r2,4
10010a14:	10800037 	ldwio	r2,0(r2)
10010a18:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10010a1c:	e0bffd17 	ldw	r2,-12(fp)
10010a20:	1080c00c 	andi	r2,r2,768
10010a24:	10006d26 	beq	r2,zero,10010bdc <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10010a28:	e0bffd17 	ldw	r2,-12(fp)
10010a2c:	1080400c 	andi	r2,r2,256
10010a30:	10003526 	beq	r2,zero,10010b08 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10010a34:	00800074 	movhi	r2,1
10010a38:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010a3c:	e0bffb17 	ldw	r2,-20(fp)
10010a40:	10800a17 	ldw	r2,40(r2)
10010a44:	10800044 	addi	r2,r2,1
10010a48:	1081ffcc 	andi	r2,r2,2047
10010a4c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10010a50:	e0bffb17 	ldw	r2,-20(fp)
10010a54:	10c00b17 	ldw	r3,44(r2)
10010a58:	e0bffe17 	ldw	r2,-8(fp)
10010a5c:	18801526 	beq	r3,r2,10010ab4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10010a60:	e0bffc17 	ldw	r2,-16(fp)
10010a64:	10800037 	ldwio	r2,0(r2)
10010a68:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10010a6c:	e0bff917 	ldw	r2,-28(fp)
10010a70:	10a0000c 	andi	r2,r2,32768
10010a74:	10001126 	beq	r2,zero,10010abc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10010a78:	e0bffb17 	ldw	r2,-20(fp)
10010a7c:	10800a17 	ldw	r2,40(r2)
10010a80:	e0fff917 	ldw	r3,-28(fp)
10010a84:	1809883a 	mov	r4,r3
10010a88:	e0fffb17 	ldw	r3,-20(fp)
10010a8c:	1885883a 	add	r2,r3,r2
10010a90:	10800e04 	addi	r2,r2,56
10010a94:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010a98:	e0bffb17 	ldw	r2,-20(fp)
10010a9c:	10800a17 	ldw	r2,40(r2)
10010aa0:	10800044 	addi	r2,r2,1
10010aa4:	10c1ffcc 	andi	r3,r2,2047
10010aa8:	e0bffb17 	ldw	r2,-20(fp)
10010aac:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10010ab0:	003fe206 	br	10010a3c <__alt_data_end+0xf8010a3c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
10010ab4:	0001883a 	nop
10010ab8:	00000106 	br	10010ac0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10010abc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10010ac0:	e0bff917 	ldw	r2,-28(fp)
10010ac4:	10bfffec 	andhi	r2,r2,65535
10010ac8:	10000f26 	beq	r2,zero,10010b08 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010acc:	e0bffb17 	ldw	r2,-20(fp)
10010ad0:	10c00817 	ldw	r3,32(r2)
10010ad4:	00bfff84 	movi	r2,-2
10010ad8:	1886703a 	and	r3,r3,r2
10010adc:	e0bffb17 	ldw	r2,-20(fp)
10010ae0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10010ae4:	e0bffc17 	ldw	r2,-16(fp)
10010ae8:	10800104 	addi	r2,r2,4
10010aec:	1007883a 	mov	r3,r2
10010af0:	e0bffb17 	ldw	r2,-20(fp)
10010af4:	10800817 	ldw	r2,32(r2)
10010af8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010afc:	e0bffc17 	ldw	r2,-16(fp)
10010b00:	10800104 	addi	r2,r2,4
10010b04:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10010b08:	e0bffd17 	ldw	r2,-12(fp)
10010b0c:	1080800c 	andi	r2,r2,512
10010b10:	103fbe26 	beq	r2,zero,10010a0c <__alt_data_end+0xf8010a0c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10010b14:	e0bffd17 	ldw	r2,-12(fp)
10010b18:	1004d43a 	srli	r2,r2,16
10010b1c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10010b20:	00001406 	br	10010b74 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10010b24:	e0bffc17 	ldw	r2,-16(fp)
10010b28:	e0fffb17 	ldw	r3,-20(fp)
10010b2c:	18c00d17 	ldw	r3,52(r3)
10010b30:	e13ffb17 	ldw	r4,-20(fp)
10010b34:	20c7883a 	add	r3,r4,r3
10010b38:	18c20e04 	addi	r3,r3,2104
10010b3c:	18c00003 	ldbu	r3,0(r3)
10010b40:	18c03fcc 	andi	r3,r3,255
10010b44:	18c0201c 	xori	r3,r3,128
10010b48:	18ffe004 	addi	r3,r3,-128
10010b4c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010b50:	e0bffb17 	ldw	r2,-20(fp)
10010b54:	10800d17 	ldw	r2,52(r2)
10010b58:	10800044 	addi	r2,r2,1
10010b5c:	10c1ffcc 	andi	r3,r2,2047
10010b60:	e0bffb17 	ldw	r2,-20(fp)
10010b64:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10010b68:	e0bffa17 	ldw	r2,-24(fp)
10010b6c:	10bfffc4 	addi	r2,r2,-1
10010b70:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10010b74:	e0bffa17 	ldw	r2,-24(fp)
10010b78:	10000526 	beq	r2,zero,10010b90 <altera_avalon_jtag_uart_irq+0x1a8>
10010b7c:	e0bffb17 	ldw	r2,-20(fp)
10010b80:	10c00d17 	ldw	r3,52(r2)
10010b84:	e0bffb17 	ldw	r2,-20(fp)
10010b88:	10800c17 	ldw	r2,48(r2)
10010b8c:	18bfe51e 	bne	r3,r2,10010b24 <__alt_data_end+0xf8010b24>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10010b90:	e0bffa17 	ldw	r2,-24(fp)
10010b94:	103f9d26 	beq	r2,zero,10010a0c <__alt_data_end+0xf8010a0c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10010b98:	e0bffb17 	ldw	r2,-20(fp)
10010b9c:	10c00817 	ldw	r3,32(r2)
10010ba0:	00bfff44 	movi	r2,-3
10010ba4:	1886703a 	and	r3,r3,r2
10010ba8:	e0bffb17 	ldw	r2,-20(fp)
10010bac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010bb0:	e0bffb17 	ldw	r2,-20(fp)
10010bb4:	10800017 	ldw	r2,0(r2)
10010bb8:	10800104 	addi	r2,r2,4
10010bbc:	1007883a 	mov	r3,r2
10010bc0:	e0bffb17 	ldw	r2,-20(fp)
10010bc4:	10800817 	ldw	r2,32(r2)
10010bc8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010bcc:	e0bffc17 	ldw	r2,-16(fp)
10010bd0:	10800104 	addi	r2,r2,4
10010bd4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10010bd8:	003f8c06 	br	10010a0c <__alt_data_end+0xf8010a0c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10010bdc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10010be0:	0001883a 	nop
10010be4:	e037883a 	mov	sp,fp
10010be8:	df000017 	ldw	fp,0(sp)
10010bec:	dec00104 	addi	sp,sp,4
10010bf0:	f800283a 	ret

10010bf4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10010bf4:	defff804 	addi	sp,sp,-32
10010bf8:	df000715 	stw	fp,28(sp)
10010bfc:	df000704 	addi	fp,sp,28
10010c00:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10010c04:	e0bffb17 	ldw	r2,-20(fp)
10010c08:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10010c0c:	e0bff917 	ldw	r2,-28(fp)
10010c10:	10800017 	ldw	r2,0(r2)
10010c14:	10800104 	addi	r2,r2,4
10010c18:	10800037 	ldwio	r2,0(r2)
10010c1c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10010c20:	e0bffa17 	ldw	r2,-24(fp)
10010c24:	1081000c 	andi	r2,r2,1024
10010c28:	10000b26 	beq	r2,zero,10010c58 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10010c2c:	e0bff917 	ldw	r2,-28(fp)
10010c30:	10800017 	ldw	r2,0(r2)
10010c34:	10800104 	addi	r2,r2,4
10010c38:	1007883a 	mov	r3,r2
10010c3c:	e0bff917 	ldw	r2,-28(fp)
10010c40:	10800817 	ldw	r2,32(r2)
10010c44:	10810014 	ori	r2,r2,1024
10010c48:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10010c4c:	e0bff917 	ldw	r2,-28(fp)
10010c50:	10000915 	stw	zero,36(r2)
10010c54:	00000a06 	br	10010c80 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10010c58:	e0bff917 	ldw	r2,-28(fp)
10010c5c:	10c00917 	ldw	r3,36(r2)
10010c60:	00a00034 	movhi	r2,32768
10010c64:	10bfff04 	addi	r2,r2,-4
10010c68:	10c00536 	bltu	r2,r3,10010c80 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10010c6c:	e0bff917 	ldw	r2,-28(fp)
10010c70:	10800917 	ldw	r2,36(r2)
10010c74:	10c00044 	addi	r3,r2,1
10010c78:	e0bff917 	ldw	r2,-28(fp)
10010c7c:	10c00915 	stw	r3,36(r2)
10010c80:	d0a72717 	ldw	r2,-25444(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10010c84:	e037883a 	mov	sp,fp
10010c88:	df000017 	ldw	fp,0(sp)
10010c8c:	dec00104 	addi	sp,sp,4
10010c90:	f800283a 	ret

10010c94 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10010c94:	defffd04 	addi	sp,sp,-12
10010c98:	df000215 	stw	fp,8(sp)
10010c9c:	df000204 	addi	fp,sp,8
10010ca0:	e13ffe15 	stw	r4,-8(fp)
10010ca4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10010ca8:	00000506 	br	10010cc0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10010cac:	e0bfff17 	ldw	r2,-4(fp)
10010cb0:	1090000c 	andi	r2,r2,16384
10010cb4:	10000226 	beq	r2,zero,10010cc0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10010cb8:	00bffd44 	movi	r2,-11
10010cbc:	00000b06 	br	10010cec <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10010cc0:	e0bffe17 	ldw	r2,-8(fp)
10010cc4:	10c00d17 	ldw	r3,52(r2)
10010cc8:	e0bffe17 	ldw	r2,-8(fp)
10010ccc:	10800c17 	ldw	r2,48(r2)
10010cd0:	18800526 	beq	r3,r2,10010ce8 <altera_avalon_jtag_uart_close+0x54>
10010cd4:	e0bffe17 	ldw	r2,-8(fp)
10010cd8:	10c00917 	ldw	r3,36(r2)
10010cdc:	e0bffe17 	ldw	r2,-8(fp)
10010ce0:	10800117 	ldw	r2,4(r2)
10010ce4:	18bff136 	bltu	r3,r2,10010cac <__alt_data_end+0xf8010cac>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10010ce8:	0005883a 	mov	r2,zero
}
10010cec:	e037883a 	mov	sp,fp
10010cf0:	df000017 	ldw	fp,0(sp)
10010cf4:	dec00104 	addi	sp,sp,4
10010cf8:	f800283a 	ret

10010cfc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10010cfc:	defffa04 	addi	sp,sp,-24
10010d00:	df000515 	stw	fp,20(sp)
10010d04:	df000504 	addi	fp,sp,20
10010d08:	e13ffd15 	stw	r4,-12(fp)
10010d0c:	e17ffe15 	stw	r5,-8(fp)
10010d10:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10010d14:	00bff9c4 	movi	r2,-25
10010d18:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10010d1c:	e0bffe17 	ldw	r2,-8(fp)
10010d20:	10da8060 	cmpeqi	r3,r2,27137
10010d24:	1800031e 	bne	r3,zero,10010d34 <altera_avalon_jtag_uart_ioctl+0x38>
10010d28:	109a80a0 	cmpeqi	r2,r2,27138
10010d2c:	1000181e 	bne	r2,zero,10010d90 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10010d30:	00002906 	br	10010dd8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10010d34:	e0bffd17 	ldw	r2,-12(fp)
10010d38:	10c00117 	ldw	r3,4(r2)
10010d3c:	00a00034 	movhi	r2,32768
10010d40:	10bfffc4 	addi	r2,r2,-1
10010d44:	18802126 	beq	r3,r2,10010dcc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10010d48:	e0bfff17 	ldw	r2,-4(fp)
10010d4c:	10800017 	ldw	r2,0(r2)
10010d50:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10010d54:	e0bffc17 	ldw	r2,-16(fp)
10010d58:	10800090 	cmplti	r2,r2,2
10010d5c:	1000061e 	bne	r2,zero,10010d78 <altera_avalon_jtag_uart_ioctl+0x7c>
10010d60:	e0fffc17 	ldw	r3,-16(fp)
10010d64:	00a00034 	movhi	r2,32768
10010d68:	10bfffc4 	addi	r2,r2,-1
10010d6c:	18800226 	beq	r3,r2,10010d78 <altera_avalon_jtag_uart_ioctl+0x7c>
10010d70:	e0bffc17 	ldw	r2,-16(fp)
10010d74:	00000206 	br	10010d80 <altera_avalon_jtag_uart_ioctl+0x84>
10010d78:	00a00034 	movhi	r2,32768
10010d7c:	10bfff84 	addi	r2,r2,-2
10010d80:	e0fffd17 	ldw	r3,-12(fp)
10010d84:	18800115 	stw	r2,4(r3)
      rc = 0;
10010d88:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10010d8c:	00000f06 	br	10010dcc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10010d90:	e0bffd17 	ldw	r2,-12(fp)
10010d94:	10c00117 	ldw	r3,4(r2)
10010d98:	00a00034 	movhi	r2,32768
10010d9c:	10bfffc4 	addi	r2,r2,-1
10010da0:	18800c26 	beq	r3,r2,10010dd4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10010da4:	e0bffd17 	ldw	r2,-12(fp)
10010da8:	10c00917 	ldw	r3,36(r2)
10010dac:	e0bffd17 	ldw	r2,-12(fp)
10010db0:	10800117 	ldw	r2,4(r2)
10010db4:	1885803a 	cmpltu	r2,r3,r2
10010db8:	10c03fcc 	andi	r3,r2,255
10010dbc:	e0bfff17 	ldw	r2,-4(fp)
10010dc0:	10c00015 	stw	r3,0(r2)
      rc = 0;
10010dc4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10010dc8:	00000206 	br	10010dd4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10010dcc:	0001883a 	nop
10010dd0:	00000106 	br	10010dd8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10010dd4:	0001883a 	nop

  default:
    break;
  }

  return rc;
10010dd8:	e0bffb17 	ldw	r2,-20(fp)
}
10010ddc:	e037883a 	mov	sp,fp
10010de0:	df000017 	ldw	fp,0(sp)
10010de4:	dec00104 	addi	sp,sp,4
10010de8:	f800283a 	ret

10010dec <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10010dec:	defff304 	addi	sp,sp,-52
10010df0:	dfc00c15 	stw	ra,48(sp)
10010df4:	df000b15 	stw	fp,44(sp)
10010df8:	df000b04 	addi	fp,sp,44
10010dfc:	e13ffc15 	stw	r4,-16(fp)
10010e00:	e17ffd15 	stw	r5,-12(fp)
10010e04:	e1bffe15 	stw	r6,-8(fp)
10010e08:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10010e0c:	e0bffd17 	ldw	r2,-12(fp)
10010e10:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10010e14:	00004706 	br	10010f34 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10010e18:	e0bffc17 	ldw	r2,-16(fp)
10010e1c:	10800a17 	ldw	r2,40(r2)
10010e20:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10010e24:	e0bffc17 	ldw	r2,-16(fp)
10010e28:	10800b17 	ldw	r2,44(r2)
10010e2c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10010e30:	e0fff717 	ldw	r3,-36(fp)
10010e34:	e0bff817 	ldw	r2,-32(fp)
10010e38:	18800536 	bltu	r3,r2,10010e50 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10010e3c:	e0fff717 	ldw	r3,-36(fp)
10010e40:	e0bff817 	ldw	r2,-32(fp)
10010e44:	1885c83a 	sub	r2,r3,r2
10010e48:	e0bff615 	stw	r2,-40(fp)
10010e4c:	00000406 	br	10010e60 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10010e50:	00c20004 	movi	r3,2048
10010e54:	e0bff817 	ldw	r2,-32(fp)
10010e58:	1885c83a 	sub	r2,r3,r2
10010e5c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10010e60:	e0bff617 	ldw	r2,-40(fp)
10010e64:	10001e26 	beq	r2,zero,10010ee0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10010e68:	e0fffe17 	ldw	r3,-8(fp)
10010e6c:	e0bff617 	ldw	r2,-40(fp)
10010e70:	1880022e 	bgeu	r3,r2,10010e7c <altera_avalon_jtag_uart_read+0x90>
        n = space;
10010e74:	e0bffe17 	ldw	r2,-8(fp)
10010e78:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10010e7c:	e0bffc17 	ldw	r2,-16(fp)
10010e80:	10c00e04 	addi	r3,r2,56
10010e84:	e0bff817 	ldw	r2,-32(fp)
10010e88:	1885883a 	add	r2,r3,r2
10010e8c:	e1bff617 	ldw	r6,-40(fp)
10010e90:	100b883a 	mov	r5,r2
10010e94:	e13ff517 	ldw	r4,-44(fp)
10010e98:	0003af00 	call	10003af0 <memcpy>
      ptr   += n;
10010e9c:	e0fff517 	ldw	r3,-44(fp)
10010ea0:	e0bff617 	ldw	r2,-40(fp)
10010ea4:	1885883a 	add	r2,r3,r2
10010ea8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10010eac:	e0fffe17 	ldw	r3,-8(fp)
10010eb0:	e0bff617 	ldw	r2,-40(fp)
10010eb4:	1885c83a 	sub	r2,r3,r2
10010eb8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010ebc:	e0fff817 	ldw	r3,-32(fp)
10010ec0:	e0bff617 	ldw	r2,-40(fp)
10010ec4:	1885883a 	add	r2,r3,r2
10010ec8:	10c1ffcc 	andi	r3,r2,2047
10010ecc:	e0bffc17 	ldw	r2,-16(fp)
10010ed0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10010ed4:	e0bffe17 	ldw	r2,-8(fp)
10010ed8:	00bfcf16 	blt	zero,r2,10010e18 <__alt_data_end+0xf8010e18>
10010edc:	00000106 	br	10010ee4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10010ee0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10010ee4:	e0fff517 	ldw	r3,-44(fp)
10010ee8:	e0bffd17 	ldw	r2,-12(fp)
10010eec:	1880141e 	bne	r3,r2,10010f40 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10010ef0:	e0bfff17 	ldw	r2,-4(fp)
10010ef4:	1090000c 	andi	r2,r2,16384
10010ef8:	1000131e 	bne	r2,zero,10010f48 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10010efc:	0001883a 	nop
10010f00:	e0bffc17 	ldw	r2,-16(fp)
10010f04:	10c00a17 	ldw	r3,40(r2)
10010f08:	e0bff717 	ldw	r2,-36(fp)
10010f0c:	1880051e 	bne	r3,r2,10010f24 <altera_avalon_jtag_uart_read+0x138>
10010f10:	e0bffc17 	ldw	r2,-16(fp)
10010f14:	10c00917 	ldw	r3,36(r2)
10010f18:	e0bffc17 	ldw	r2,-16(fp)
10010f1c:	10800117 	ldw	r2,4(r2)
10010f20:	18bff736 	bltu	r3,r2,10010f00 <__alt_data_end+0xf8010f00>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10010f24:	e0bffc17 	ldw	r2,-16(fp)
10010f28:	10c00a17 	ldw	r3,40(r2)
10010f2c:	e0bff717 	ldw	r2,-36(fp)
10010f30:	18800726 	beq	r3,r2,10010f50 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10010f34:	e0bffe17 	ldw	r2,-8(fp)
10010f38:	00bfb716 	blt	zero,r2,10010e18 <__alt_data_end+0xf8010e18>
10010f3c:	00000506 	br	10010f54 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10010f40:	0001883a 	nop
10010f44:	00000306 	br	10010f54 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10010f48:	0001883a 	nop
10010f4c:	00000106 	br	10010f54 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10010f50:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10010f54:	e0fff517 	ldw	r3,-44(fp)
10010f58:	e0bffd17 	ldw	r2,-12(fp)
10010f5c:	18801826 	beq	r3,r2,10010fc0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010f60:	0005303a 	rdctl	r2,status
10010f64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010f68:	e0fffb17 	ldw	r3,-20(fp)
10010f6c:	00bfff84 	movi	r2,-2
10010f70:	1884703a 	and	r2,r3,r2
10010f74:	1001703a 	wrctl	status,r2
  
  return context;
10010f78:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10010f7c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010f80:	e0bffc17 	ldw	r2,-16(fp)
10010f84:	10800817 	ldw	r2,32(r2)
10010f88:	10c00054 	ori	r3,r2,1
10010f8c:	e0bffc17 	ldw	r2,-16(fp)
10010f90:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010f94:	e0bffc17 	ldw	r2,-16(fp)
10010f98:	10800017 	ldw	r2,0(r2)
10010f9c:	10800104 	addi	r2,r2,4
10010fa0:	1007883a 	mov	r3,r2
10010fa4:	e0bffc17 	ldw	r2,-16(fp)
10010fa8:	10800817 	ldw	r2,32(r2)
10010fac:	18800035 	stwio	r2,0(r3)
10010fb0:	e0bffa17 	ldw	r2,-24(fp)
10010fb4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010fb8:	e0bff917 	ldw	r2,-28(fp)
10010fbc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10010fc0:	e0fff517 	ldw	r3,-44(fp)
10010fc4:	e0bffd17 	ldw	r2,-12(fp)
10010fc8:	18800426 	beq	r3,r2,10010fdc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10010fcc:	e0fff517 	ldw	r3,-44(fp)
10010fd0:	e0bffd17 	ldw	r2,-12(fp)
10010fd4:	1885c83a 	sub	r2,r3,r2
10010fd8:	00000606 	br	10010ff4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10010fdc:	e0bfff17 	ldw	r2,-4(fp)
10010fe0:	1090000c 	andi	r2,r2,16384
10010fe4:	10000226 	beq	r2,zero,10010ff0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10010fe8:	00bffd44 	movi	r2,-11
10010fec:	00000106 	br	10010ff4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10010ff0:	00bffec4 	movi	r2,-5
}
10010ff4:	e037883a 	mov	sp,fp
10010ff8:	dfc00117 	ldw	ra,4(sp)
10010ffc:	df000017 	ldw	fp,0(sp)
10011000:	dec00204 	addi	sp,sp,8
10011004:	f800283a 	ret

10011008 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10011008:	defff304 	addi	sp,sp,-52
1001100c:	dfc00c15 	stw	ra,48(sp)
10011010:	df000b15 	stw	fp,44(sp)
10011014:	df000b04 	addi	fp,sp,44
10011018:	e13ffc15 	stw	r4,-16(fp)
1001101c:	e17ffd15 	stw	r5,-12(fp)
10011020:	e1bffe15 	stw	r6,-8(fp)
10011024:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10011028:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1001102c:	e0bffd17 	ldw	r2,-12(fp)
10011030:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10011034:	00003706 	br	10011114 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10011038:	e0bffc17 	ldw	r2,-16(fp)
1001103c:	10800c17 	ldw	r2,48(r2)
10011040:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10011044:	e0bffc17 	ldw	r2,-16(fp)
10011048:	10800d17 	ldw	r2,52(r2)
1001104c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10011050:	e0fff917 	ldw	r3,-28(fp)
10011054:	e0bff517 	ldw	r2,-44(fp)
10011058:	1880062e 	bgeu	r3,r2,10011074 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1001105c:	e0fff517 	ldw	r3,-44(fp)
10011060:	e0bff917 	ldw	r2,-28(fp)
10011064:	1885c83a 	sub	r2,r3,r2
10011068:	10bfffc4 	addi	r2,r2,-1
1001106c:	e0bff615 	stw	r2,-40(fp)
10011070:	00000b06 	br	100110a0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10011074:	e0bff517 	ldw	r2,-44(fp)
10011078:	10000526 	beq	r2,zero,10011090 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1001107c:	00c20004 	movi	r3,2048
10011080:	e0bff917 	ldw	r2,-28(fp)
10011084:	1885c83a 	sub	r2,r3,r2
10011088:	e0bff615 	stw	r2,-40(fp)
1001108c:	00000406 	br	100110a0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10011090:	00c1ffc4 	movi	r3,2047
10011094:	e0bff917 	ldw	r2,-28(fp)
10011098:	1885c83a 	sub	r2,r3,r2
1001109c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100110a0:	e0bff617 	ldw	r2,-40(fp)
100110a4:	10001e26 	beq	r2,zero,10011120 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
100110a8:	e0fffe17 	ldw	r3,-8(fp)
100110ac:	e0bff617 	ldw	r2,-40(fp)
100110b0:	1880022e 	bgeu	r3,r2,100110bc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
100110b4:	e0bffe17 	ldw	r2,-8(fp)
100110b8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
100110bc:	e0bffc17 	ldw	r2,-16(fp)
100110c0:	10c20e04 	addi	r3,r2,2104
100110c4:	e0bff917 	ldw	r2,-28(fp)
100110c8:	1885883a 	add	r2,r3,r2
100110cc:	e1bff617 	ldw	r6,-40(fp)
100110d0:	e17ffd17 	ldw	r5,-12(fp)
100110d4:	1009883a 	mov	r4,r2
100110d8:	0003af00 	call	10003af0 <memcpy>
      ptr   += n;
100110dc:	e0fffd17 	ldw	r3,-12(fp)
100110e0:	e0bff617 	ldw	r2,-40(fp)
100110e4:	1885883a 	add	r2,r3,r2
100110e8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
100110ec:	e0fffe17 	ldw	r3,-8(fp)
100110f0:	e0bff617 	ldw	r2,-40(fp)
100110f4:	1885c83a 	sub	r2,r3,r2
100110f8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100110fc:	e0fff917 	ldw	r3,-28(fp)
10011100:	e0bff617 	ldw	r2,-40(fp)
10011104:	1885883a 	add	r2,r3,r2
10011108:	10c1ffcc 	andi	r3,r2,2047
1001110c:	e0bffc17 	ldw	r2,-16(fp)
10011110:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10011114:	e0bffe17 	ldw	r2,-8(fp)
10011118:	00bfc716 	blt	zero,r2,10011038 <__alt_data_end+0xf8011038>
1001111c:	00000106 	br	10011124 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10011120:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011124:	0005303a 	rdctl	r2,status
10011128:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001112c:	e0fffb17 	ldw	r3,-20(fp)
10011130:	00bfff84 	movi	r2,-2
10011134:	1884703a 	and	r2,r3,r2
10011138:	1001703a 	wrctl	status,r2
  
  return context;
1001113c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10011140:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10011144:	e0bffc17 	ldw	r2,-16(fp)
10011148:	10800817 	ldw	r2,32(r2)
1001114c:	10c00094 	ori	r3,r2,2
10011150:	e0bffc17 	ldw	r2,-16(fp)
10011154:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10011158:	e0bffc17 	ldw	r2,-16(fp)
1001115c:	10800017 	ldw	r2,0(r2)
10011160:	10800104 	addi	r2,r2,4
10011164:	1007883a 	mov	r3,r2
10011168:	e0bffc17 	ldw	r2,-16(fp)
1001116c:	10800817 	ldw	r2,32(r2)
10011170:	18800035 	stwio	r2,0(r3)
10011174:	e0bffa17 	ldw	r2,-24(fp)
10011178:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001117c:	e0bff817 	ldw	r2,-32(fp)
10011180:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10011184:	e0bffe17 	ldw	r2,-8(fp)
10011188:	0080100e 	bge	zero,r2,100111cc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
1001118c:	e0bfff17 	ldw	r2,-4(fp)
10011190:	1090000c 	andi	r2,r2,16384
10011194:	1000101e 	bne	r2,zero,100111d8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10011198:	0001883a 	nop
1001119c:	e0bffc17 	ldw	r2,-16(fp)
100111a0:	10c00d17 	ldw	r3,52(r2)
100111a4:	e0bff517 	ldw	r2,-44(fp)
100111a8:	1880051e 	bne	r3,r2,100111c0 <altera_avalon_jtag_uart_write+0x1b8>
100111ac:	e0bffc17 	ldw	r2,-16(fp)
100111b0:	10c00917 	ldw	r3,36(r2)
100111b4:	e0bffc17 	ldw	r2,-16(fp)
100111b8:	10800117 	ldw	r2,4(r2)
100111bc:	18bff736 	bltu	r3,r2,1001119c <__alt_data_end+0xf801119c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
100111c0:	e0bffc17 	ldw	r2,-16(fp)
100111c4:	10800917 	ldw	r2,36(r2)
100111c8:	1000051e 	bne	r2,zero,100111e0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
100111cc:	e0bffe17 	ldw	r2,-8(fp)
100111d0:	00bfd016 	blt	zero,r2,10011114 <__alt_data_end+0xf8011114>
100111d4:	00000306 	br	100111e4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
100111d8:	0001883a 	nop
100111dc:	00000106 	br	100111e4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
100111e0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
100111e4:	e0fffd17 	ldw	r3,-12(fp)
100111e8:	e0bff717 	ldw	r2,-36(fp)
100111ec:	18800426 	beq	r3,r2,10011200 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
100111f0:	e0fffd17 	ldw	r3,-12(fp)
100111f4:	e0bff717 	ldw	r2,-36(fp)
100111f8:	1885c83a 	sub	r2,r3,r2
100111fc:	00000606 	br	10011218 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10011200:	e0bfff17 	ldw	r2,-4(fp)
10011204:	1090000c 	andi	r2,r2,16384
10011208:	10000226 	beq	r2,zero,10011214 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
1001120c:	00bffd44 	movi	r2,-11
10011210:	00000106 	br	10011218 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10011214:	00bffec4 	movi	r2,-5
}
10011218:	e037883a 	mov	sp,fp
1001121c:	dfc00117 	ldw	ra,4(sp)
10011220:	df000017 	ldw	fp,0(sp)
10011224:	dec00204 	addi	sp,sp,8
10011228:	f800283a 	ret

1001122c <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
1001122c:	defff404 	addi	sp,sp,-48
10011230:	df000b15 	stw	fp,44(sp)
10011234:	df000b04 	addi	fp,sp,44
10011238:	e13ffc15 	stw	r4,-16(fp)
1001123c:	e17ffd15 	stw	r5,-12(fp)
10011240:	e1bffe15 	stw	r6,-8(fp)
10011244:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
10011248:	e0bffc17 	ldw	r2,-16(fp)
1001124c:	10800017 	ldw	r2,0(r2)
10011250:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
10011254:	e0bff517 	ldw	r2,-44(fp)
10011258:	10800217 	ldw	r2,8(r2)
1001125c:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
10011260:	e0bff617 	ldw	r2,-40(fp)
10011264:	10bfffc4 	addi	r2,r2,-1
10011268:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
1001126c:	e0bffb17 	ldw	r2,-20(fp)
10011270:	10800044 	addi	r2,r2,1
10011274:	e0bffb15 	stw	r2,-20(fp)
10011278:	e0bffb17 	ldw	r2,-20(fp)
1001127c:	10800003 	ldbu	r2,0(r2)
10011280:	10803fcc 	andi	r2,r2,255
10011284:	1080201c 	xori	r2,r2,128
10011288:	10bfe004 	addi	r2,r2,-128
1001128c:	103ff71e 	bne	r2,zero,1001126c <__alt_data_end+0xf801126c>
    ;

  return ptr - string;
10011290:	e0fffb17 	ldw	r3,-20(fp)
10011294:	e0bff617 	ldw	r2,-40(fp)
10011298:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
1001129c:	10800044 	addi	r2,r2,1
100112a0:	1007883a 	mov	r3,r2
100112a4:	e0bffd17 	ldw	r2,-12(fp)
100112a8:	10c5883a 	add	r2,r2,r3
100112ac:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
100112b0:	d0a01504 	addi	r2,gp,-32684
100112b4:	1007883a 	mov	r3,r2
  r4 = (int)name;
100112b8:	e0bffd17 	ldw	r2,-12(fp)
100112bc:	1009883a 	mov	r4,r2
  r5 = flags;
100112c0:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
100112c4:	e1bfff17 	ldw	r6,-4(fp)
100112c8:	e0bffd17 	ldw	r2,-12(fp)
100112cc:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
100112d0:	e0bff917 	ldw	r2,-28(fp)
100112d4:	10bfffc4 	addi	r2,r2,-1
100112d8:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
100112dc:	e0bffa17 	ldw	r2,-24(fp)
100112e0:	10800044 	addi	r2,r2,1
100112e4:	e0bffa15 	stw	r2,-24(fp)
100112e8:	e0bffa17 	ldw	r2,-24(fp)
100112ec:	10800003 	ldbu	r2,0(r2)
100112f0:	10803fcc 	andi	r2,r2,255
100112f4:	1080201c 	xori	r2,r2,128
100112f8:	10bfe004 	addi	r2,r2,-128
100112fc:	103ff71e 	bne	r2,zero,100112dc <__alt_data_end+0xf80112dc>
    ;

  return ptr - string;
10011300:	e1fffa17 	ldw	r7,-24(fp)
10011304:	e0bff917 	ldw	r2,-28(fp)
10011308:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
1001130c:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
10011310:	003da07a 	break	1

  handle = (void *)r2;
10011314:	e0bff715 	stw	r2,-36(fp)
  error = r3;
10011318:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
1001131c:	e0bff817 	ldw	r2,-32(fp)
10011320:	1000031e 	bne	r2,zero,10011330 <alt_hostfs_open+0x104>
    fd->priv = handle;
10011324:	e0bffc17 	ldw	r2,-16(fp)
10011328:	e0fff717 	ldw	r3,-36(fp)
1001132c:	10c00115 	stw	r3,4(r2)

  return -error;
10011330:	e0bff817 	ldw	r2,-32(fp)
10011334:	0085c83a 	sub	r2,zero,r2
}
10011338:	e037883a 	mov	sp,fp
1001133c:	df000017 	ldw	fp,0(sp)
10011340:	dec00104 	addi	sp,sp,4
10011344:	f800283a 	ret

10011348 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
10011348:	defffd04 	addi	sp,sp,-12
1001134c:	df000215 	stw	fp,8(sp)
10011350:	df000204 	addi	fp,sp,8
10011354:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
10011358:	d0a01804 	addi	r2,gp,-32672
1001135c:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10011360:	e0bfff17 	ldw	r2,-4(fp)
10011364:	10800117 	ldw	r2,4(r2)
10011368:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
1001136c:	003da07a 	break	1

  error = r3;
10011370:	e0fffe15 	stw	r3,-8(fp)

  return -error;
10011374:	e0bffe17 	ldw	r2,-8(fp)
10011378:	0085c83a 	sub	r2,zero,r2
}
1001137c:	e037883a 	mov	sp,fp
10011380:	df000017 	ldw	fp,0(sp)
10011384:	dec00104 	addi	sp,sp,4
10011388:	f800283a 	ret

1001138c <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
1001138c:	defffa04 	addi	sp,sp,-24
10011390:	df000515 	stw	fp,20(sp)
10011394:	df000504 	addi	fp,sp,20
10011398:	e13ffd15 	stw	r4,-12(fp)
1001139c:	e17ffe15 	stw	r5,-8(fp)
100113a0:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
100113a4:	d0a01b04 	addi	r2,gp,-32660
100113a8:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
100113ac:	e0bffd17 	ldw	r2,-12(fp)
100113b0:	10800117 	ldw	r2,4(r2)
100113b4:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
100113b8:	e0bffe17 	ldw	r2,-8(fp)
100113bc:	100b883a 	mov	r5,r2
  r6 = len;
100113c0:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
100113c4:	003da07a 	break	1

  rc = r2;
100113c8:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
100113cc:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
100113d0:	e0bffc17 	ldw	r2,-16(fp)
100113d4:	10000326 	beq	r2,zero,100113e4 <alt_hostfs_read+0x58>
100113d8:	e0bffc17 	ldw	r2,-16(fp)
100113dc:	0085c83a 	sub	r2,zero,r2
100113e0:	00000106 	br	100113e8 <alt_hostfs_read+0x5c>
100113e4:	e0bffb17 	ldw	r2,-20(fp)
}
100113e8:	e037883a 	mov	sp,fp
100113ec:	df000017 	ldw	fp,0(sp)
100113f0:	dec00104 	addi	sp,sp,4
100113f4:	f800283a 	ret

100113f8 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
100113f8:	defffa04 	addi	sp,sp,-24
100113fc:	df000515 	stw	fp,20(sp)
10011400:	df000504 	addi	fp,sp,20
10011404:	e13ffd15 	stw	r4,-12(fp)
10011408:	e17ffe15 	stw	r5,-8(fp)
1001140c:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
10011410:	d0a01e04 	addi	r2,gp,-32648
10011414:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10011418:	e0bffd17 	ldw	r2,-12(fp)
1001141c:	10800117 	ldw	r2,4(r2)
10011420:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
10011424:	e0bffe17 	ldw	r2,-8(fp)
10011428:	100b883a 	mov	r5,r2
  r6 = len;
1001142c:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
10011430:	003da07a 	break	1

  rc = r2;
10011434:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
10011438:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
1001143c:	e0bffc17 	ldw	r2,-16(fp)
10011440:	10000326 	beq	r2,zero,10011450 <alt_hostfs_write+0x58>
10011444:	e0bffc17 	ldw	r2,-16(fp)
10011448:	0085c83a 	sub	r2,zero,r2
1001144c:	00000106 	br	10011454 <alt_hostfs_write+0x5c>
10011450:	e0bffb17 	ldw	r2,-20(fp)
}
10011454:	e037883a 	mov	sp,fp
10011458:	df000017 	ldw	fp,0(sp)
1001145c:	dec00104 	addi	sp,sp,4
10011460:	f800283a 	ret

10011464 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
10011464:	defffa04 	addi	sp,sp,-24
10011468:	df000515 	stw	fp,20(sp)
1001146c:	df000504 	addi	fp,sp,20
10011470:	e13ffd15 	stw	r4,-12(fp)
10011474:	e17ffe15 	stw	r5,-8(fp)
10011478:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
1001147c:	d0a02104 	addi	r2,gp,-32636
10011480:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10011484:	e0bffd17 	ldw	r2,-12(fp)
10011488:	10800117 	ldw	r2,4(r2)
1001148c:	1009883a 	mov	r4,r2
  r5 = ptr;
10011490:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
10011494:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
10011498:	003da07a 	break	1

  rc = r2;
1001149c:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
100114a0:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
100114a4:	e0bffc17 	ldw	r2,-16(fp)
100114a8:	10000326 	beq	r2,zero,100114b8 <alt_hostfs_seek+0x54>
100114ac:	e0bffc17 	ldw	r2,-16(fp)
100114b0:	0085c83a 	sub	r2,zero,r2
100114b4:	00000106 	br	100114bc <alt_hostfs_seek+0x58>
100114b8:	e0bffb17 	ldw	r2,-20(fp)
}
100114bc:	e037883a 	mov	sp,fp
100114c0:	df000017 	ldw	fp,0(sp)
100114c4:	dec00104 	addi	sp,sp,4
100114c8:	f800283a 	ret

100114cc <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
100114cc:	deffe904 	addi	sp,sp,-92
100114d0:	df001615 	stw	fp,88(sp)
100114d4:	df001604 	addi	fp,sp,88
100114d8:	e13ffe15 	stw	r4,-8(fp)
100114dc:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
100114e0:	d0a02404 	addi	r2,gp,-32624
100114e4:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
100114e8:	e0bffe17 	ldw	r2,-8(fp)
100114ec:	10800117 	ldw	r2,4(r2)
100114f0:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
100114f4:	e0bfee04 	addi	r2,fp,-72
100114f8:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
100114fc:	003da07a 	break	1

  rc = r2;
10011500:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
10011504:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
10011508:	e0bfec17 	ldw	r2,-80(fp)
1001150c:	1000621e 	bne	r2,zero,10011698 <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
10011510:	e0bfee04 	addi	r2,fp,-72
10011514:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
10011518:	e0bfea17 	ldw	r2,-88(fp)
1001151c:	10801004 	addi	r2,r2,64
10011520:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
10011524:	00001606 	br	10011580 <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10011528:	e0bfea17 	ldw	r2,-88(fp)
1001152c:	10800017 	ldw	r2,0(r2)
10011530:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
10011534:	e0bfea17 	ldw	r2,-88(fp)
10011538:	10800017 	ldw	r2,0(r2)
1001153c:	10803fec 	andhi	r2,r2,255
10011540:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10011544:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
10011548:	e0bfea17 	ldw	r2,-88(fp)
1001154c:	10800017 	ldw	r2,0(r2)
10011550:	10bfc00c 	andi	r2,r2,65280
10011554:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
10011558:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
1001155c:	e0bfea17 	ldw	r2,-88(fp)
10011560:	10800017 	ldw	r2,0(r2)
10011564:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
10011568:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
1001156c:	e0bfea17 	ldw	r2,-88(fp)
10011570:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
10011574:	e0bfea17 	ldw	r2,-88(fp)
10011578:	10800104 	addi	r2,r2,4
1001157c:	e0bfea15 	stw	r2,-88(fp)
10011580:	e0ffea17 	ldw	r3,-88(fp)
10011584:	e0bfed17 	ldw	r2,-76(fp)
10011588:	18bfe736 	bltu	r3,r2,10011528 <__alt_data_end+0xf8011528>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
1001158c:	e0bfff17 	ldw	r2,-4(fp)
10011590:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
10011594:	e0bfea17 	ldw	r2,-88(fp)
10011598:	10800f04 	addi	r2,r2,60
1001159c:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
100115a0:	00000506 	br	100115b8 <alt_hostfs_fstat+0xec>
      *ptr = 0;
100115a4:	e0bfea17 	ldw	r2,-88(fp)
100115a8:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
100115ac:	e0bfea17 	ldw	r2,-88(fp)
100115b0:	10800104 	addi	r2,r2,4
100115b4:	e0bfea15 	stw	r2,-88(fp)
100115b8:	e0ffea17 	ldw	r3,-88(fp)
100115bc:	e0bfed17 	ldw	r2,-76(fp)
100115c0:	18bff836 	bltu	r3,r2,100115a4 <__alt_data_end+0xf80115a4>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
100115c4:	e0bfee17 	ldw	r2,-72(fp)
100115c8:	1007883a 	mov	r3,r2
100115cc:	e0bfff17 	ldw	r2,-4(fp)
100115d0:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
100115d4:	e0bfef17 	ldw	r2,-68(fp)
100115d8:	1007883a 	mov	r3,r2
100115dc:	e0bfff17 	ldw	r2,-4(fp)
100115e0:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
100115e4:	e0fff017 	ldw	r3,-64(fp)
100115e8:	e0bfff17 	ldw	r2,-4(fp)
100115ec:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
100115f0:	e0bff117 	ldw	r2,-60(fp)
100115f4:	1007883a 	mov	r3,r2
100115f8:	e0bfff17 	ldw	r2,-4(fp)
100115fc:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
10011600:	e0bff217 	ldw	r2,-56(fp)
10011604:	1007883a 	mov	r3,r2
10011608:	e0bfff17 	ldw	r2,-4(fp)
1001160c:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
10011610:	e0bff317 	ldw	r2,-52(fp)
10011614:	1007883a 	mov	r3,r2
10011618:	e0bfff17 	ldw	r2,-4(fp)
1001161c:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
10011620:	e0bff417 	ldw	r2,-48(fp)
10011624:	1007883a 	mov	r3,r2
10011628:	e0bfff17 	ldw	r2,-4(fp)
1001162c:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
10011630:	e0bff617 	ldw	r2,-40(fp)
10011634:	1007883a 	mov	r3,r2
10011638:	e0bfff17 	ldw	r2,-4(fp)
1001163c:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
10011640:	e0bffb17 	ldw	r2,-20(fp)
10011644:	1007883a 	mov	r3,r2
10011648:	e0bfff17 	ldw	r2,-4(fp)
1001164c:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
10011650:	e0bffc17 	ldw	r2,-16(fp)
10011654:	1007883a 	mov	r3,r2
10011658:	e0bfff17 	ldw	r2,-4(fp)
1001165c:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
10011660:	e0bffd17 	ldw	r2,-12(fp)
10011664:	1007883a 	mov	r3,r2
10011668:	e0bfff17 	ldw	r2,-4(fp)
1001166c:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
10011670:	e0bff817 	ldw	r2,-32(fp)
10011674:	1007883a 	mov	r3,r2
10011678:	e0bfff17 	ldw	r2,-4(fp)
1001167c:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
10011680:	e0bffa17 	ldw	r2,-24(fp)
10011684:	1007883a 	mov	r3,r2
10011688:	e0bfff17 	ldw	r2,-4(fp)
1001168c:	10c00c15 	stw	r3,48(r2)

    return rc;
10011690:	e0bfeb17 	ldw	r2,-84(fp)
10011694:	00000206 	br	100116a0 <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
10011698:	e0bfec17 	ldw	r2,-80(fp)
1001169c:	0085c83a 	sub	r2,zero,r2
}
100116a0:	e037883a 	mov	sp,fp
100116a4:	df000017 	ldw	fp,0(sp)
100116a8:	dec00104 	addi	sp,sp,4
100116ac:	f800283a 	ret

100116b0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
100116b0:	defff504 	addi	sp,sp,-44
100116b4:	df000a15 	stw	fp,40(sp)
100116b8:	df000a04 	addi	fp,sp,40
100116bc:	e13ffc15 	stw	r4,-16(fp)
100116c0:	e17ffd15 	stw	r5,-12(fp)
100116c4:	e1bffe15 	stw	r6,-8(fp)
100116c8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
100116cc:	e03ff615 	stw	zero,-40(fp)
100116d0:	d0a72717 	ldw	r2,-25444(gp)
  
  if (alt_ticks_per_second ())
100116d4:	10003c26 	beq	r2,zero,100117c8 <alt_alarm_start+0x118>
  {
    if (alarm)
100116d8:	e0bffc17 	ldw	r2,-16(fp)
100116dc:	10003826 	beq	r2,zero,100117c0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
100116e0:	e0bffc17 	ldw	r2,-16(fp)
100116e4:	e0fffe17 	ldw	r3,-8(fp)
100116e8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
100116ec:	e0bffc17 	ldw	r2,-16(fp)
100116f0:	e0ffff17 	ldw	r3,-4(fp)
100116f4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100116f8:	0005303a 	rdctl	r2,status
100116fc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011700:	e0fff917 	ldw	r3,-28(fp)
10011704:	00bfff84 	movi	r2,-2
10011708:	1884703a 	and	r2,r3,r2
1001170c:	1001703a 	wrctl	status,r2
  
  return context;
10011710:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10011714:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10011718:	d0a72817 	ldw	r2,-25440(gp)
      
      current_nticks = alt_nticks();
1001171c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10011720:	e0fffd17 	ldw	r3,-12(fp)
10011724:	e0bff617 	ldw	r2,-40(fp)
10011728:	1885883a 	add	r2,r3,r2
1001172c:	10c00044 	addi	r3,r2,1
10011730:	e0bffc17 	ldw	r2,-16(fp)
10011734:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10011738:	e0bffc17 	ldw	r2,-16(fp)
1001173c:	10c00217 	ldw	r3,8(r2)
10011740:	e0bff617 	ldw	r2,-40(fp)
10011744:	1880042e 	bgeu	r3,r2,10011758 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10011748:	e0bffc17 	ldw	r2,-16(fp)
1001174c:	00c00044 	movi	r3,1
10011750:	10c00405 	stb	r3,16(r2)
10011754:	00000206 	br	10011760 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10011758:	e0bffc17 	ldw	r2,-16(fp)
1001175c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10011760:	e0bffc17 	ldw	r2,-16(fp)
10011764:	d0e02804 	addi	r3,gp,-32608
10011768:	e0fffa15 	stw	r3,-24(fp)
1001176c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10011770:	e0bffb17 	ldw	r2,-20(fp)
10011774:	e0fffa17 	ldw	r3,-24(fp)
10011778:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1001177c:	e0bffa17 	ldw	r2,-24(fp)
10011780:	10c00017 	ldw	r3,0(r2)
10011784:	e0bffb17 	ldw	r2,-20(fp)
10011788:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1001178c:	e0bffa17 	ldw	r2,-24(fp)
10011790:	10800017 	ldw	r2,0(r2)
10011794:	e0fffb17 	ldw	r3,-20(fp)
10011798:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1001179c:	e0bffa17 	ldw	r2,-24(fp)
100117a0:	e0fffb17 	ldw	r3,-20(fp)
100117a4:	10c00015 	stw	r3,0(r2)
100117a8:	e0bff817 	ldw	r2,-32(fp)
100117ac:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100117b0:	e0bff717 	ldw	r2,-36(fp)
100117b4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
100117b8:	0005883a 	mov	r2,zero
100117bc:	00000306 	br	100117cc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
100117c0:	00bffa84 	movi	r2,-22
100117c4:	00000106 	br	100117cc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
100117c8:	00bfde84 	movi	r2,-134
  }
}
100117cc:	e037883a 	mov	sp,fp
100117d0:	df000017 	ldw	fp,0(sp)
100117d4:	dec00104 	addi	sp,sp,4
100117d8:	f800283a 	ret

100117dc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
100117dc:	deffff04 	addi	sp,sp,-4
100117e0:	df000015 	stw	fp,0(sp)
100117e4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100117e8:	0001883a 	nop
100117ec:	e037883a 	mov	sp,fp
100117f0:	df000017 	ldw	fp,0(sp)
100117f4:	dec00104 	addi	sp,sp,4
100117f8:	f800283a 	ret

100117fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100117fc:	defffe04 	addi	sp,sp,-8
10011800:	dfc00115 	stw	ra,4(sp)
10011804:	df000015 	stw	fp,0(sp)
10011808:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001180c:	d0a01317 	ldw	r2,-32692(gp)
10011810:	10000326 	beq	r2,zero,10011820 <alt_get_errno+0x24>
10011814:	d0a01317 	ldw	r2,-32692(gp)
10011818:	103ee83a 	callr	r2
1001181c:	00000106 	br	10011824 <alt_get_errno+0x28>
10011820:	d0a71c04 	addi	r2,gp,-25488
}
10011824:	e037883a 	mov	sp,fp
10011828:	dfc00117 	ldw	ra,4(sp)
1001182c:	df000017 	ldw	fp,0(sp)
10011830:	dec00204 	addi	sp,sp,8
10011834:	f800283a 	ret

10011838 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10011838:	defffa04 	addi	sp,sp,-24
1001183c:	dfc00515 	stw	ra,20(sp)
10011840:	df000415 	stw	fp,16(sp)
10011844:	df000404 	addi	fp,sp,16
10011848:	e13ffe15 	stw	r4,-8(fp)
1001184c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10011850:	e0bffe17 	ldw	r2,-8(fp)
10011854:	10000326 	beq	r2,zero,10011864 <alt_dev_llist_insert+0x2c>
10011858:	e0bffe17 	ldw	r2,-8(fp)
1001185c:	10800217 	ldw	r2,8(r2)
10011860:	1000061e 	bne	r2,zero,1001187c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10011864:	00117fc0 	call	100117fc <alt_get_errno>
10011868:	1007883a 	mov	r3,r2
1001186c:	00800584 	movi	r2,22
10011870:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10011874:	00bffa84 	movi	r2,-22
10011878:	00001306 	br	100118c8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1001187c:	e0bffe17 	ldw	r2,-8(fp)
10011880:	e0ffff17 	ldw	r3,-4(fp)
10011884:	e0fffc15 	stw	r3,-16(fp)
10011888:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1001188c:	e0bffd17 	ldw	r2,-12(fp)
10011890:	e0fffc17 	ldw	r3,-16(fp)
10011894:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10011898:	e0bffc17 	ldw	r2,-16(fp)
1001189c:	10c00017 	ldw	r3,0(r2)
100118a0:	e0bffd17 	ldw	r2,-12(fp)
100118a4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100118a8:	e0bffc17 	ldw	r2,-16(fp)
100118ac:	10800017 	ldw	r2,0(r2)
100118b0:	e0fffd17 	ldw	r3,-12(fp)
100118b4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100118b8:	e0bffc17 	ldw	r2,-16(fp)
100118bc:	e0fffd17 	ldw	r3,-12(fp)
100118c0:	10c00015 	stw	r3,0(r2)

  return 0;  
100118c4:	0005883a 	mov	r2,zero
}
100118c8:	e037883a 	mov	sp,fp
100118cc:	dfc00117 	ldw	ra,4(sp)
100118d0:	df000017 	ldw	fp,0(sp)
100118d4:	dec00204 	addi	sp,sp,8
100118d8:	f800283a 	ret

100118dc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
100118dc:	defffd04 	addi	sp,sp,-12
100118e0:	dfc00215 	stw	ra,8(sp)
100118e4:	df000115 	stw	fp,4(sp)
100118e8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100118ec:	00840074 	movhi	r2,4097
100118f0:	10892804 	addi	r2,r2,9376
100118f4:	e0bfff15 	stw	r2,-4(fp)
100118f8:	00000606 	br	10011914 <_do_ctors+0x38>
        (*ctor) (); 
100118fc:	e0bfff17 	ldw	r2,-4(fp)
10011900:	10800017 	ldw	r2,0(r2)
10011904:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10011908:	e0bfff17 	ldw	r2,-4(fp)
1001190c:	10bfff04 	addi	r2,r2,-4
10011910:	e0bfff15 	stw	r2,-4(fp)
10011914:	e0ffff17 	ldw	r3,-4(fp)
10011918:	00840074 	movhi	r2,4097
1001191c:	10892904 	addi	r2,r2,9380
10011920:	18bff62e 	bgeu	r3,r2,100118fc <__alt_data_end+0xf80118fc>
        (*ctor) (); 
}
10011924:	0001883a 	nop
10011928:	e037883a 	mov	sp,fp
1001192c:	dfc00117 	ldw	ra,4(sp)
10011930:	df000017 	ldw	fp,0(sp)
10011934:	dec00204 	addi	sp,sp,8
10011938:	f800283a 	ret

1001193c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1001193c:	defffd04 	addi	sp,sp,-12
10011940:	dfc00215 	stw	ra,8(sp)
10011944:	df000115 	stw	fp,4(sp)
10011948:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1001194c:	00840074 	movhi	r2,4097
10011950:	10892804 	addi	r2,r2,9376
10011954:	e0bfff15 	stw	r2,-4(fp)
10011958:	00000606 	br	10011974 <_do_dtors+0x38>
        (*dtor) (); 
1001195c:	e0bfff17 	ldw	r2,-4(fp)
10011960:	10800017 	ldw	r2,0(r2)
10011964:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10011968:	e0bfff17 	ldw	r2,-4(fp)
1001196c:	10bfff04 	addi	r2,r2,-4
10011970:	e0bfff15 	stw	r2,-4(fp)
10011974:	e0ffff17 	ldw	r3,-4(fp)
10011978:	00840074 	movhi	r2,4097
1001197c:	10892904 	addi	r2,r2,9380
10011980:	18bff62e 	bgeu	r3,r2,1001195c <__alt_data_end+0xf801195c>
        (*dtor) (); 
}
10011984:	0001883a 	nop
10011988:	e037883a 	mov	sp,fp
1001198c:	dfc00117 	ldw	ra,4(sp)
10011990:	df000017 	ldw	fp,0(sp)
10011994:	dec00204 	addi	sp,sp,8
10011998:	f800283a 	ret

1001199c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1001199c:	defffa04 	addi	sp,sp,-24
100119a0:	dfc00515 	stw	ra,20(sp)
100119a4:	df000415 	stw	fp,16(sp)
100119a8:	df000404 	addi	fp,sp,16
100119ac:	e13ffe15 	stw	r4,-8(fp)
100119b0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
100119b4:	e0bfff17 	ldw	r2,-4(fp)
100119b8:	10800017 	ldw	r2,0(r2)
100119bc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
100119c0:	e13ffe17 	ldw	r4,-8(fp)
100119c4:	000481c0 	call	1000481c <strlen>
100119c8:	10800044 	addi	r2,r2,1
100119cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100119d0:	00000d06 	br	10011a08 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
100119d4:	e0bffc17 	ldw	r2,-16(fp)
100119d8:	10800217 	ldw	r2,8(r2)
100119dc:	e0fffd17 	ldw	r3,-12(fp)
100119e0:	180d883a 	mov	r6,r3
100119e4:	e17ffe17 	ldw	r5,-8(fp)
100119e8:	1009883a 	mov	r4,r2
100119ec:	00123100 	call	10012310 <memcmp>
100119f0:	1000021e 	bne	r2,zero,100119fc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
100119f4:	e0bffc17 	ldw	r2,-16(fp)
100119f8:	00000706 	br	10011a18 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
100119fc:	e0bffc17 	ldw	r2,-16(fp)
10011a00:	10800017 	ldw	r2,0(r2)
10011a04:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10011a08:	e0fffc17 	ldw	r3,-16(fp)
10011a0c:	e0bfff17 	ldw	r2,-4(fp)
10011a10:	18bff01e 	bne	r3,r2,100119d4 <__alt_data_end+0xf80119d4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10011a14:	0005883a 	mov	r2,zero
}
10011a18:	e037883a 	mov	sp,fp
10011a1c:	dfc00117 	ldw	ra,4(sp)
10011a20:	df000017 	ldw	fp,0(sp)
10011a24:	dec00204 	addi	sp,sp,8
10011a28:	f800283a 	ret

10011a2c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10011a2c:	defffb04 	addi	sp,sp,-20
10011a30:	dfc00415 	stw	ra,16(sp)
10011a34:	df000315 	stw	fp,12(sp)
10011a38:	df000304 	addi	fp,sp,12
10011a3c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10011a40:	d0a00e17 	ldw	r2,-32712(gp)
10011a44:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10011a48:	00003106 	br	10011b10 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10011a4c:	e0bffd17 	ldw	r2,-12(fp)
10011a50:	10800217 	ldw	r2,8(r2)
10011a54:	1009883a 	mov	r4,r2
10011a58:	000481c0 	call	1000481c <strlen>
10011a5c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10011a60:	e0bffd17 	ldw	r2,-12(fp)
10011a64:	10c00217 	ldw	r3,8(r2)
10011a68:	e0bffe17 	ldw	r2,-8(fp)
10011a6c:	10bfffc4 	addi	r2,r2,-1
10011a70:	1885883a 	add	r2,r3,r2
10011a74:	10800003 	ldbu	r2,0(r2)
10011a78:	10803fcc 	andi	r2,r2,255
10011a7c:	1080201c 	xori	r2,r2,128
10011a80:	10bfe004 	addi	r2,r2,-128
10011a84:	10800bd8 	cmpnei	r2,r2,47
10011a88:	1000031e 	bne	r2,zero,10011a98 <alt_find_file+0x6c>
    {
      len -= 1;
10011a8c:	e0bffe17 	ldw	r2,-8(fp)
10011a90:	10bfffc4 	addi	r2,r2,-1
10011a94:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10011a98:	e0bffe17 	ldw	r2,-8(fp)
10011a9c:	e0ffff17 	ldw	r3,-4(fp)
10011aa0:	1885883a 	add	r2,r3,r2
10011aa4:	10800003 	ldbu	r2,0(r2)
10011aa8:	10803fcc 	andi	r2,r2,255
10011aac:	1080201c 	xori	r2,r2,128
10011ab0:	10bfe004 	addi	r2,r2,-128
10011ab4:	10800be0 	cmpeqi	r2,r2,47
10011ab8:	1000081e 	bne	r2,zero,10011adc <alt_find_file+0xb0>
10011abc:	e0bffe17 	ldw	r2,-8(fp)
10011ac0:	e0ffff17 	ldw	r3,-4(fp)
10011ac4:	1885883a 	add	r2,r3,r2
10011ac8:	10800003 	ldbu	r2,0(r2)
10011acc:	10803fcc 	andi	r2,r2,255
10011ad0:	1080201c 	xori	r2,r2,128
10011ad4:	10bfe004 	addi	r2,r2,-128
10011ad8:	10000a1e 	bne	r2,zero,10011b04 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10011adc:	e0bffd17 	ldw	r2,-12(fp)
10011ae0:	10800217 	ldw	r2,8(r2)
10011ae4:	e0fffe17 	ldw	r3,-8(fp)
10011ae8:	180d883a 	mov	r6,r3
10011aec:	e17fff17 	ldw	r5,-4(fp)
10011af0:	1009883a 	mov	r4,r2
10011af4:	00123100 	call	10012310 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10011af8:	1000021e 	bne	r2,zero,10011b04 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10011afc:	e0bffd17 	ldw	r2,-12(fp)
10011b00:	00000706 	br	10011b20 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10011b04:	e0bffd17 	ldw	r2,-12(fp)
10011b08:	10800017 	ldw	r2,0(r2)
10011b0c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10011b10:	e0fffd17 	ldw	r3,-12(fp)
10011b14:	d0a00e04 	addi	r2,gp,-32712
10011b18:	18bfcc1e 	bne	r3,r2,10011a4c <__alt_data_end+0xf8011a4c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10011b1c:	0005883a 	mov	r2,zero
}
10011b20:	e037883a 	mov	sp,fp
10011b24:	dfc00117 	ldw	ra,4(sp)
10011b28:	df000017 	ldw	fp,0(sp)
10011b2c:	dec00204 	addi	sp,sp,8
10011b30:	f800283a 	ret

10011b34 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
10011b34:	defffc04 	addi	sp,sp,-16
10011b38:	df000315 	stw	fp,12(sp)
10011b3c:	df000304 	addi	fp,sp,12
10011b40:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
10011b44:	e0bfff17 	ldw	r2,-4(fp)
10011b48:	10800217 	ldw	r2,8(r2)
10011b4c:	1000021e 	bne	r2,zero,10011b58 <alt_fs_reg+0x24>
  {
    return -ENODEV;
10011b50:	00bffb44 	movi	r2,-19
10011b54:	00001306 	br	10011ba4 <alt_fs_reg+0x70>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
10011b58:	e0bfff17 	ldw	r2,-4(fp)
10011b5c:	d0e00e04 	addi	r3,gp,-32712
10011b60:	e0fffd15 	stw	r3,-12(fp)
10011b64:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10011b68:	e0bffe17 	ldw	r2,-8(fp)
10011b6c:	e0fffd17 	ldw	r3,-12(fp)
10011b70:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10011b74:	e0bffd17 	ldw	r2,-12(fp)
10011b78:	10c00017 	ldw	r3,0(r2)
10011b7c:	e0bffe17 	ldw	r2,-8(fp)
10011b80:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10011b84:	e0bffd17 	ldw	r2,-12(fp)
10011b88:	10800017 	ldw	r2,0(r2)
10011b8c:	e0fffe17 	ldw	r3,-8(fp)
10011b90:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10011b94:	e0bffd17 	ldw	r2,-12(fp)
10011b98:	e0fffe17 	ldw	r3,-8(fp)
10011b9c:	10c00015 	stw	r3,0(r2)

  return 0;
10011ba0:	0005883a 	mov	r2,zero
} 
10011ba4:	e037883a 	mov	sp,fp
10011ba8:	df000017 	ldw	fp,0(sp)
10011bac:	dec00104 	addi	sp,sp,4
10011bb0:	f800283a 	ret

10011bb4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10011bb4:	defffa04 	addi	sp,sp,-24
10011bb8:	dfc00515 	stw	ra,20(sp)
10011bbc:	df000415 	stw	fp,16(sp)
10011bc0:	dc000315 	stw	r16,12(sp)
10011bc4:	df000404 	addi	fp,sp,16
10011bc8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10011bcc:	00bffa04 	movi	r2,-24
10011bd0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10011bd4:	e03ffc15 	stw	zero,-16(fp)
10011bd8:	00001d06 	br	10011c50 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
10011bdc:	04040074 	movhi	r16,4097
10011be0:	840cd304 	addi	r16,r16,13132
10011be4:	e0bffc17 	ldw	r2,-16(fp)
10011be8:	01400304 	movi	r5,12
10011bec:	1009883a 	mov	r4,r2
10011bf0:	00017e40 	call	100017e4 <__mulsi3>
10011bf4:	8085883a 	add	r2,r16,r2
10011bf8:	10800017 	ldw	r2,0(r2)
10011bfc:	1000111e 	bne	r2,zero,10011c44 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
10011c00:	04040074 	movhi	r16,4097
10011c04:	840cd304 	addi	r16,r16,13132
10011c08:	e0bffc17 	ldw	r2,-16(fp)
10011c0c:	01400304 	movi	r5,12
10011c10:	1009883a 	mov	r4,r2
10011c14:	00017e40 	call	100017e4 <__mulsi3>
10011c18:	8085883a 	add	r2,r16,r2
10011c1c:	e0fffe17 	ldw	r3,-8(fp)
10011c20:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10011c24:	d0e01217 	ldw	r3,-32696(gp)
10011c28:	e0bffc17 	ldw	r2,-16(fp)
10011c2c:	1880020e 	bge	r3,r2,10011c38 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
10011c30:	e0bffc17 	ldw	r2,-16(fp)
10011c34:	d0a01215 	stw	r2,-32696(gp)
      }
      rc = i;
10011c38:	e0bffc17 	ldw	r2,-16(fp)
10011c3c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10011c40:	00000606 	br	10011c5c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10011c44:	e0bffc17 	ldw	r2,-16(fp)
10011c48:	10800044 	addi	r2,r2,1
10011c4c:	e0bffc15 	stw	r2,-16(fp)
10011c50:	e0bffc17 	ldw	r2,-16(fp)
10011c54:	10800810 	cmplti	r2,r2,32
10011c58:	103fe01e 	bne	r2,zero,10011bdc <__alt_data_end+0xf8011bdc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10011c5c:	e0bffd17 	ldw	r2,-12(fp)
}
10011c60:	e6ffff04 	addi	sp,fp,-4
10011c64:	dfc00217 	ldw	ra,8(sp)
10011c68:	df000117 	ldw	fp,4(sp)
10011c6c:	dc000017 	ldw	r16,0(sp)
10011c70:	dec00304 	addi	sp,sp,12
10011c74:	f800283a 	ret

10011c78 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10011c78:	deffff04 	addi	sp,sp,-4
10011c7c:	df000015 	stw	fp,0(sp)
10011c80:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10011c84:	0001883a 	nop
10011c88:	e037883a 	mov	sp,fp
10011c8c:	df000017 	ldw	fp,0(sp)
10011c90:	dec00104 	addi	sp,sp,4
10011c94:	f800283a 	ret

10011c98 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10011c98:	defff904 	addi	sp,sp,-28
10011c9c:	dfc00615 	stw	ra,24(sp)
10011ca0:	df000515 	stw	fp,20(sp)
10011ca4:	df000504 	addi	fp,sp,20
10011ca8:	e13ffc15 	stw	r4,-16(fp)
10011cac:	e17ffd15 	stw	r5,-12(fp)
10011cb0:	e1bffe15 	stw	r6,-8(fp)
10011cb4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10011cb8:	e0800217 	ldw	r2,8(fp)
10011cbc:	d8800015 	stw	r2,0(sp)
10011cc0:	e1ffff17 	ldw	r7,-4(fp)
10011cc4:	e1bffe17 	ldw	r6,-8(fp)
10011cc8:	e17ffd17 	ldw	r5,-12(fp)
10011ccc:	e13ffc17 	ldw	r4,-16(fp)
10011cd0:	0011e480 	call	10011e48 <alt_iic_isr_register>
}  
10011cd4:	e037883a 	mov	sp,fp
10011cd8:	dfc00117 	ldw	ra,4(sp)
10011cdc:	df000017 	ldw	fp,0(sp)
10011ce0:	dec00204 	addi	sp,sp,8
10011ce4:	f800283a 	ret

10011ce8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10011ce8:	defff904 	addi	sp,sp,-28
10011cec:	df000615 	stw	fp,24(sp)
10011cf0:	df000604 	addi	fp,sp,24
10011cf4:	e13ffe15 	stw	r4,-8(fp)
10011cf8:	e17fff15 	stw	r5,-4(fp)
10011cfc:	e0bfff17 	ldw	r2,-4(fp)
10011d00:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011d04:	0005303a 	rdctl	r2,status
10011d08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011d0c:	e0fffb17 	ldw	r3,-20(fp)
10011d10:	00bfff84 	movi	r2,-2
10011d14:	1884703a 	and	r2,r3,r2
10011d18:	1001703a 	wrctl	status,r2
  
  return context;
10011d1c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10011d20:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10011d24:	00c00044 	movi	r3,1
10011d28:	e0bffa17 	ldw	r2,-24(fp)
10011d2c:	1884983a 	sll	r2,r3,r2
10011d30:	1007883a 	mov	r3,r2
10011d34:	d0a72617 	ldw	r2,-25448(gp)
10011d38:	1884b03a 	or	r2,r3,r2
10011d3c:	d0a72615 	stw	r2,-25448(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10011d40:	d0a72617 	ldw	r2,-25448(gp)
10011d44:	100170fa 	wrctl	ienable,r2
10011d48:	e0bffc17 	ldw	r2,-16(fp)
10011d4c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011d50:	e0bffd17 	ldw	r2,-12(fp)
10011d54:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10011d58:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10011d5c:	0001883a 	nop
}
10011d60:	e037883a 	mov	sp,fp
10011d64:	df000017 	ldw	fp,0(sp)
10011d68:	dec00104 	addi	sp,sp,4
10011d6c:	f800283a 	ret

10011d70 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10011d70:	defff904 	addi	sp,sp,-28
10011d74:	df000615 	stw	fp,24(sp)
10011d78:	df000604 	addi	fp,sp,24
10011d7c:	e13ffe15 	stw	r4,-8(fp)
10011d80:	e17fff15 	stw	r5,-4(fp)
10011d84:	e0bfff17 	ldw	r2,-4(fp)
10011d88:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011d8c:	0005303a 	rdctl	r2,status
10011d90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011d94:	e0fffb17 	ldw	r3,-20(fp)
10011d98:	00bfff84 	movi	r2,-2
10011d9c:	1884703a 	and	r2,r3,r2
10011da0:	1001703a 	wrctl	status,r2
  
  return context;
10011da4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10011da8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10011dac:	00c00044 	movi	r3,1
10011db0:	e0bffa17 	ldw	r2,-24(fp)
10011db4:	1884983a 	sll	r2,r3,r2
10011db8:	0084303a 	nor	r2,zero,r2
10011dbc:	1007883a 	mov	r3,r2
10011dc0:	d0a72617 	ldw	r2,-25448(gp)
10011dc4:	1884703a 	and	r2,r3,r2
10011dc8:	d0a72615 	stw	r2,-25448(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10011dcc:	d0a72617 	ldw	r2,-25448(gp)
10011dd0:	100170fa 	wrctl	ienable,r2
10011dd4:	e0bffc17 	ldw	r2,-16(fp)
10011dd8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011ddc:	e0bffd17 	ldw	r2,-12(fp)
10011de0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10011de4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10011de8:	0001883a 	nop
}
10011dec:	e037883a 	mov	sp,fp
10011df0:	df000017 	ldw	fp,0(sp)
10011df4:	dec00104 	addi	sp,sp,4
10011df8:	f800283a 	ret

10011dfc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10011dfc:	defffc04 	addi	sp,sp,-16
10011e00:	df000315 	stw	fp,12(sp)
10011e04:	df000304 	addi	fp,sp,12
10011e08:	e13ffe15 	stw	r4,-8(fp)
10011e0c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10011e10:	000530fa 	rdctl	r2,ienable
10011e14:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10011e18:	00c00044 	movi	r3,1
10011e1c:	e0bfff17 	ldw	r2,-4(fp)
10011e20:	1884983a 	sll	r2,r3,r2
10011e24:	1007883a 	mov	r3,r2
10011e28:	e0bffd17 	ldw	r2,-12(fp)
10011e2c:	1884703a 	and	r2,r3,r2
10011e30:	1004c03a 	cmpne	r2,r2,zero
10011e34:	10803fcc 	andi	r2,r2,255
}
10011e38:	e037883a 	mov	sp,fp
10011e3c:	df000017 	ldw	fp,0(sp)
10011e40:	dec00104 	addi	sp,sp,4
10011e44:	f800283a 	ret

10011e48 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10011e48:	defff504 	addi	sp,sp,-44
10011e4c:	dfc00a15 	stw	ra,40(sp)
10011e50:	df000915 	stw	fp,36(sp)
10011e54:	df000904 	addi	fp,sp,36
10011e58:	e13ffc15 	stw	r4,-16(fp)
10011e5c:	e17ffd15 	stw	r5,-12(fp)
10011e60:	e1bffe15 	stw	r6,-8(fp)
10011e64:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10011e68:	00bffa84 	movi	r2,-22
10011e6c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10011e70:	e0bffd17 	ldw	r2,-12(fp)
10011e74:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10011e78:	e0bff817 	ldw	r2,-32(fp)
10011e7c:	10800808 	cmpgei	r2,r2,32
10011e80:	1000271e 	bne	r2,zero,10011f20 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011e84:	0005303a 	rdctl	r2,status
10011e88:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011e8c:	e0fffb17 	ldw	r3,-20(fp)
10011e90:	00bfff84 	movi	r2,-2
10011e94:	1884703a 	and	r2,r3,r2
10011e98:	1001703a 	wrctl	status,r2
  
  return context;
10011e9c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10011ea0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10011ea4:	00840074 	movhi	r2,4097
10011ea8:	10988904 	addi	r2,r2,25124
10011eac:	e0fff817 	ldw	r3,-32(fp)
10011eb0:	180690fa 	slli	r3,r3,3
10011eb4:	10c5883a 	add	r2,r2,r3
10011eb8:	e0fffe17 	ldw	r3,-8(fp)
10011ebc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10011ec0:	00840074 	movhi	r2,4097
10011ec4:	10988904 	addi	r2,r2,25124
10011ec8:	e0fff817 	ldw	r3,-32(fp)
10011ecc:	180690fa 	slli	r3,r3,3
10011ed0:	10c5883a 	add	r2,r2,r3
10011ed4:	10800104 	addi	r2,r2,4
10011ed8:	e0ffff17 	ldw	r3,-4(fp)
10011edc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10011ee0:	e0bffe17 	ldw	r2,-8(fp)
10011ee4:	10000526 	beq	r2,zero,10011efc <alt_iic_isr_register+0xb4>
10011ee8:	e0bff817 	ldw	r2,-32(fp)
10011eec:	100b883a 	mov	r5,r2
10011ef0:	e13ffc17 	ldw	r4,-16(fp)
10011ef4:	0011ce80 	call	10011ce8 <alt_ic_irq_enable>
10011ef8:	00000406 	br	10011f0c <alt_iic_isr_register+0xc4>
10011efc:	e0bff817 	ldw	r2,-32(fp)
10011f00:	100b883a 	mov	r5,r2
10011f04:	e13ffc17 	ldw	r4,-16(fp)
10011f08:	0011d700 	call	10011d70 <alt_ic_irq_disable>
10011f0c:	e0bff715 	stw	r2,-36(fp)
10011f10:	e0bffa17 	ldw	r2,-24(fp)
10011f14:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011f18:	e0bff917 	ldw	r2,-28(fp)
10011f1c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10011f20:	e0bff717 	ldw	r2,-36(fp)
}
10011f24:	e037883a 	mov	sp,fp
10011f28:	dfc00117 	ldw	ra,4(sp)
10011f2c:	df000017 	ldw	fp,0(sp)
10011f30:	dec00204 	addi	sp,sp,8
10011f34:	f800283a 	ret

10011f38 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10011f38:	defff804 	addi	sp,sp,-32
10011f3c:	dfc00715 	stw	ra,28(sp)
10011f40:	df000615 	stw	fp,24(sp)
10011f44:	dc000515 	stw	r16,20(sp)
10011f48:	df000604 	addi	fp,sp,24
10011f4c:	e13ffb15 	stw	r4,-20(fp)
10011f50:	e17ffc15 	stw	r5,-16(fp)
10011f54:	e1bffd15 	stw	r6,-12(fp)
10011f58:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10011f5c:	e1bffe17 	ldw	r6,-8(fp)
10011f60:	e17ffd17 	ldw	r5,-12(fp)
10011f64:	e13ffc17 	ldw	r4,-16(fp)
10011f68:	00103340 	call	10010334 <open>
10011f6c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10011f70:	e0bffa17 	ldw	r2,-24(fp)
10011f74:	10002216 	blt	r2,zero,10012000 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10011f78:	04040074 	movhi	r16,4097
10011f7c:	840cd304 	addi	r16,r16,13132
10011f80:	e0bffa17 	ldw	r2,-24(fp)
10011f84:	01400304 	movi	r5,12
10011f88:	1009883a 	mov	r4,r2
10011f8c:	00017e40 	call	100017e4 <__mulsi3>
10011f90:	8085883a 	add	r2,r16,r2
10011f94:	10c00017 	ldw	r3,0(r2)
10011f98:	e0bffb17 	ldw	r2,-20(fp)
10011f9c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10011fa0:	04040074 	movhi	r16,4097
10011fa4:	840cd304 	addi	r16,r16,13132
10011fa8:	e0bffa17 	ldw	r2,-24(fp)
10011fac:	01400304 	movi	r5,12
10011fb0:	1009883a 	mov	r4,r2
10011fb4:	00017e40 	call	100017e4 <__mulsi3>
10011fb8:	8085883a 	add	r2,r16,r2
10011fbc:	10800104 	addi	r2,r2,4
10011fc0:	10c00017 	ldw	r3,0(r2)
10011fc4:	e0bffb17 	ldw	r2,-20(fp)
10011fc8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10011fcc:	04040074 	movhi	r16,4097
10011fd0:	840cd304 	addi	r16,r16,13132
10011fd4:	e0bffa17 	ldw	r2,-24(fp)
10011fd8:	01400304 	movi	r5,12
10011fdc:	1009883a 	mov	r4,r2
10011fe0:	00017e40 	call	100017e4 <__mulsi3>
10011fe4:	8085883a 	add	r2,r16,r2
10011fe8:	10800204 	addi	r2,r2,8
10011fec:	10c00017 	ldw	r3,0(r2)
10011ff0:	e0bffb17 	ldw	r2,-20(fp)
10011ff4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10011ff8:	e13ffa17 	ldw	r4,-24(fp)
10011ffc:	00104900 	call	10010490 <alt_release_fd>
  }
} 
10012000:	0001883a 	nop
10012004:	e6ffff04 	addi	sp,fp,-4
10012008:	dfc00217 	ldw	ra,8(sp)
1001200c:	df000117 	ldw	fp,4(sp)
10012010:	dc000017 	ldw	r16,0(sp)
10012014:	dec00304 	addi	sp,sp,12
10012018:	f800283a 	ret

1001201c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1001201c:	defffb04 	addi	sp,sp,-20
10012020:	dfc00415 	stw	ra,16(sp)
10012024:	df000315 	stw	fp,12(sp)
10012028:	df000304 	addi	fp,sp,12
1001202c:	e13ffd15 	stw	r4,-12(fp)
10012030:	e17ffe15 	stw	r5,-8(fp)
10012034:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10012038:	01c07fc4 	movi	r7,511
1001203c:	01800044 	movi	r6,1
10012040:	e17ffd17 	ldw	r5,-12(fp)
10012044:	01040074 	movhi	r4,4097
10012048:	210cd604 	addi	r4,r4,13144
1001204c:	0011f380 	call	10011f38 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10012050:	01c07fc4 	movi	r7,511
10012054:	000d883a 	mov	r6,zero
10012058:	e17ffe17 	ldw	r5,-8(fp)
1001205c:	01040074 	movhi	r4,4097
10012060:	210cd304 	addi	r4,r4,13132
10012064:	0011f380 	call	10011f38 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10012068:	01c07fc4 	movi	r7,511
1001206c:	01800044 	movi	r6,1
10012070:	e17fff17 	ldw	r5,-4(fp)
10012074:	01040074 	movhi	r4,4097
10012078:	210cd904 	addi	r4,r4,13156
1001207c:	0011f380 	call	10011f38 <alt_open_fd>
}  
10012080:	0001883a 	nop
10012084:	e037883a 	mov	sp,fp
10012088:	dfc00117 	ldw	ra,4(sp)
1001208c:	df000017 	ldw	fp,0(sp)
10012090:	dec00204 	addi	sp,sp,8
10012094:	f800283a 	ret

10012098 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10012098:	defffa04 	addi	sp,sp,-24
1001209c:	df000515 	stw	fp,20(sp)
100120a0:	df000504 	addi	fp,sp,20
100120a4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100120a8:	0005303a 	rdctl	r2,status
100120ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100120b0:	e0fffc17 	ldw	r3,-16(fp)
100120b4:	00bfff84 	movi	r2,-2
100120b8:	1884703a 	and	r2,r3,r2
100120bc:	1001703a 	wrctl	status,r2
  
  return context;
100120c0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
100120c4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
100120c8:	e0bfff17 	ldw	r2,-4(fp)
100120cc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
100120d0:	e0bffd17 	ldw	r2,-12(fp)
100120d4:	10800017 	ldw	r2,0(r2)
100120d8:	e0fffd17 	ldw	r3,-12(fp)
100120dc:	18c00117 	ldw	r3,4(r3)
100120e0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
100120e4:	e0bffd17 	ldw	r2,-12(fp)
100120e8:	10800117 	ldw	r2,4(r2)
100120ec:	e0fffd17 	ldw	r3,-12(fp)
100120f0:	18c00017 	ldw	r3,0(r3)
100120f4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
100120f8:	e0bffd17 	ldw	r2,-12(fp)
100120fc:	e0fffd17 	ldw	r3,-12(fp)
10012100:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10012104:	e0bffd17 	ldw	r2,-12(fp)
10012108:	e0fffd17 	ldw	r3,-12(fp)
1001210c:	10c00015 	stw	r3,0(r2)
10012110:	e0bffb17 	ldw	r2,-20(fp)
10012114:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012118:	e0bffe17 	ldw	r2,-8(fp)
1001211c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10012120:	0001883a 	nop
10012124:	e037883a 	mov	sp,fp
10012128:	df000017 	ldw	fp,0(sp)
1001212c:	dec00104 	addi	sp,sp,4
10012130:	f800283a 	ret

10012134 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10012134:	defffb04 	addi	sp,sp,-20
10012138:	dfc00415 	stw	ra,16(sp)
1001213c:	df000315 	stw	fp,12(sp)
10012140:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10012144:	d0a02817 	ldw	r2,-32608(gp)
10012148:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1001214c:	d0a72817 	ldw	r2,-25440(gp)
10012150:	10800044 	addi	r2,r2,1
10012154:	d0a72815 	stw	r2,-25440(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10012158:	00002e06 	br	10012214 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1001215c:	e0bffd17 	ldw	r2,-12(fp)
10012160:	10800017 	ldw	r2,0(r2)
10012164:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10012168:	e0bffd17 	ldw	r2,-12(fp)
1001216c:	10800403 	ldbu	r2,16(r2)
10012170:	10803fcc 	andi	r2,r2,255
10012174:	10000426 	beq	r2,zero,10012188 <alt_tick+0x54>
10012178:	d0a72817 	ldw	r2,-25440(gp)
1001217c:	1000021e 	bne	r2,zero,10012188 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10012180:	e0bffd17 	ldw	r2,-12(fp)
10012184:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10012188:	e0bffd17 	ldw	r2,-12(fp)
1001218c:	10800217 	ldw	r2,8(r2)
10012190:	d0e72817 	ldw	r3,-25440(gp)
10012194:	18801d36 	bltu	r3,r2,1001220c <alt_tick+0xd8>
10012198:	e0bffd17 	ldw	r2,-12(fp)
1001219c:	10800403 	ldbu	r2,16(r2)
100121a0:	10803fcc 	andi	r2,r2,255
100121a4:	1000191e 	bne	r2,zero,1001220c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
100121a8:	e0bffd17 	ldw	r2,-12(fp)
100121ac:	10800317 	ldw	r2,12(r2)
100121b0:	e0fffd17 	ldw	r3,-12(fp)
100121b4:	18c00517 	ldw	r3,20(r3)
100121b8:	1809883a 	mov	r4,r3
100121bc:	103ee83a 	callr	r2
100121c0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
100121c4:	e0bfff17 	ldw	r2,-4(fp)
100121c8:	1000031e 	bne	r2,zero,100121d8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
100121cc:	e13ffd17 	ldw	r4,-12(fp)
100121d0:	00120980 	call	10012098 <alt_alarm_stop>
100121d4:	00000d06 	br	1001220c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
100121d8:	e0bffd17 	ldw	r2,-12(fp)
100121dc:	10c00217 	ldw	r3,8(r2)
100121e0:	e0bfff17 	ldw	r2,-4(fp)
100121e4:	1887883a 	add	r3,r3,r2
100121e8:	e0bffd17 	ldw	r2,-12(fp)
100121ec:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
100121f0:	e0bffd17 	ldw	r2,-12(fp)
100121f4:	10c00217 	ldw	r3,8(r2)
100121f8:	d0a72817 	ldw	r2,-25440(gp)
100121fc:	1880032e 	bgeu	r3,r2,1001220c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10012200:	e0bffd17 	ldw	r2,-12(fp)
10012204:	00c00044 	movi	r3,1
10012208:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1001220c:	e0bffe17 	ldw	r2,-8(fp)
10012210:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10012214:	e0fffd17 	ldw	r3,-12(fp)
10012218:	d0a02804 	addi	r2,gp,-32608
1001221c:	18bfcf1e 	bne	r3,r2,1001215c <__alt_data_end+0xf801215c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10012220:	0001883a 	nop
}
10012224:	0001883a 	nop
10012228:	e037883a 	mov	sp,fp
1001222c:	dfc00117 	ldw	ra,4(sp)
10012230:	df000017 	ldw	fp,0(sp)
10012234:	dec00204 	addi	sp,sp,8
10012238:	f800283a 	ret

1001223c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
1001223c:	deffff04 	addi	sp,sp,-4
10012240:	df000015 	stw	fp,0(sp)
10012244:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10012248:	000170fa 	wrctl	ienable,zero
}
1001224c:	0001883a 	nop
10012250:	e037883a 	mov	sp,fp
10012254:	df000017 	ldw	fp,0(sp)
10012258:	dec00104 	addi	sp,sp,4
1001225c:	f800283a 	ret

10012260 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10012260:	defffe04 	addi	sp,sp,-8
10012264:	df000115 	stw	fp,4(sp)
10012268:	df000104 	addi	fp,sp,4
1001226c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10012270:	e0bfff17 	ldw	r2,-4(fp)
10012274:	10bffe84 	addi	r2,r2,-6
10012278:	10c00428 	cmpgeui	r3,r2,16
1001227c:	18001a1e 	bne	r3,zero,100122e8 <alt_exception_cause_generated_bad_addr+0x88>
10012280:	100690ba 	slli	r3,r2,2
10012284:	00840074 	movhi	r2,4097
10012288:	1088a604 	addi	r2,r2,8856
1001228c:	1885883a 	add	r2,r3,r2
10012290:	10800017 	ldw	r2,0(r2)
10012294:	1000683a 	jmp	r2
10012298:	100122d8 	cmpnei	zero,r2,1163
1001229c:	100122d8 	cmpnei	zero,r2,1163
100122a0:	100122e8 	cmpgeui	zero,r2,1163
100122a4:	100122e8 	cmpgeui	zero,r2,1163
100122a8:	100122e8 	cmpgeui	zero,r2,1163
100122ac:	100122d8 	cmpnei	zero,r2,1163
100122b0:	100122e0 	cmpeqi	zero,r2,1163
100122b4:	100122e8 	cmpgeui	zero,r2,1163
100122b8:	100122d8 	cmpnei	zero,r2,1163
100122bc:	100122d8 	cmpnei	zero,r2,1163
100122c0:	100122e8 	cmpgeui	zero,r2,1163
100122c4:	100122d8 	cmpnei	zero,r2,1163
100122c8:	100122e0 	cmpeqi	zero,r2,1163
100122cc:	100122e8 	cmpgeui	zero,r2,1163
100122d0:	100122e8 	cmpgeui	zero,r2,1163
100122d4:	100122d8 	cmpnei	zero,r2,1163
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
100122d8:	00800044 	movi	r2,1
100122dc:	00000306 	br	100122ec <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
100122e0:	0005883a 	mov	r2,zero
100122e4:	00000106 	br	100122ec <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
100122e8:	0005883a 	mov	r2,zero
  }
}
100122ec:	e037883a 	mov	sp,fp
100122f0:	df000017 	ldw	fp,0(sp)
100122f4:	dec00104 	addi	sp,sp,4
100122f8:	f800283a 	ret

100122fc <atexit>:
100122fc:	200b883a 	mov	r5,r4
10012300:	000f883a 	mov	r7,zero
10012304:	000d883a 	mov	r6,zero
10012308:	0009883a 	mov	r4,zero
1001230c:	001238c1 	jmpi	1001238c <__register_exitproc>

10012310 <memcmp>:
10012310:	01c000c4 	movi	r7,3
10012314:	3980192e 	bgeu	r7,r6,1001237c <memcmp+0x6c>
10012318:	2144b03a 	or	r2,r4,r5
1001231c:	11c4703a 	and	r2,r2,r7
10012320:	10000f26 	beq	r2,zero,10012360 <memcmp+0x50>
10012324:	20800003 	ldbu	r2,0(r4)
10012328:	28c00003 	ldbu	r3,0(r5)
1001232c:	10c0151e 	bne	r2,r3,10012384 <memcmp+0x74>
10012330:	31bfff84 	addi	r6,r6,-2
10012334:	01ffffc4 	movi	r7,-1
10012338:	00000406 	br	1001234c <memcmp+0x3c>
1001233c:	20800003 	ldbu	r2,0(r4)
10012340:	28c00003 	ldbu	r3,0(r5)
10012344:	31bfffc4 	addi	r6,r6,-1
10012348:	10c00e1e 	bne	r2,r3,10012384 <memcmp+0x74>
1001234c:	21000044 	addi	r4,r4,1
10012350:	29400044 	addi	r5,r5,1
10012354:	31fff91e 	bne	r6,r7,1001233c <__alt_data_end+0xf801233c>
10012358:	0005883a 	mov	r2,zero
1001235c:	f800283a 	ret
10012360:	20c00017 	ldw	r3,0(r4)
10012364:	28800017 	ldw	r2,0(r5)
10012368:	18bfee1e 	bne	r3,r2,10012324 <__alt_data_end+0xf8012324>
1001236c:	31bfff04 	addi	r6,r6,-4
10012370:	21000104 	addi	r4,r4,4
10012374:	29400104 	addi	r5,r5,4
10012378:	39bff936 	bltu	r7,r6,10012360 <__alt_data_end+0xf8012360>
1001237c:	303fe91e 	bne	r6,zero,10012324 <__alt_data_end+0xf8012324>
10012380:	003ff506 	br	10012358 <__alt_data_end+0xf8012358>
10012384:	10c5c83a 	sub	r2,r2,r3
10012388:	f800283a 	ret

1001238c <__register_exitproc>:
1001238c:	defffa04 	addi	sp,sp,-24
10012390:	dc000315 	stw	r16,12(sp)
10012394:	04040074 	movhi	r16,4097
10012398:	84115d04 	addi	r16,r16,17780
1001239c:	80c00017 	ldw	r3,0(r16)
100123a0:	dc400415 	stw	r17,16(sp)
100123a4:	dfc00515 	stw	ra,20(sp)
100123a8:	18805217 	ldw	r2,328(r3)
100123ac:	2023883a 	mov	r17,r4
100123b0:	10003726 	beq	r2,zero,10012490 <__register_exitproc+0x104>
100123b4:	10c00117 	ldw	r3,4(r2)
100123b8:	010007c4 	movi	r4,31
100123bc:	20c00e16 	blt	r4,r3,100123f8 <__register_exitproc+0x6c>
100123c0:	1a000044 	addi	r8,r3,1
100123c4:	8800221e 	bne	r17,zero,10012450 <__register_exitproc+0xc4>
100123c8:	18c00084 	addi	r3,r3,2
100123cc:	18c7883a 	add	r3,r3,r3
100123d0:	18c7883a 	add	r3,r3,r3
100123d4:	12000115 	stw	r8,4(r2)
100123d8:	10c7883a 	add	r3,r2,r3
100123dc:	19400015 	stw	r5,0(r3)
100123e0:	0005883a 	mov	r2,zero
100123e4:	dfc00517 	ldw	ra,20(sp)
100123e8:	dc400417 	ldw	r17,16(sp)
100123ec:	dc000317 	ldw	r16,12(sp)
100123f0:	dec00604 	addi	sp,sp,24
100123f4:	f800283a 	ret
100123f8:	00840034 	movhi	r2,4096
100123fc:	108caf04 	addi	r2,r2,12988
10012400:	10002626 	beq	r2,zero,1001249c <__register_exitproc+0x110>
10012404:	01006404 	movi	r4,400
10012408:	d9400015 	stw	r5,0(sp)
1001240c:	d9800115 	stw	r6,4(sp)
10012410:	d9c00215 	stw	r7,8(sp)
10012414:	00032bc0 	call	100032bc <malloc>
10012418:	d9400017 	ldw	r5,0(sp)
1001241c:	d9800117 	ldw	r6,4(sp)
10012420:	d9c00217 	ldw	r7,8(sp)
10012424:	10001d26 	beq	r2,zero,1001249c <__register_exitproc+0x110>
10012428:	81000017 	ldw	r4,0(r16)
1001242c:	10000115 	stw	zero,4(r2)
10012430:	02000044 	movi	r8,1
10012434:	22405217 	ldw	r9,328(r4)
10012438:	0007883a 	mov	r3,zero
1001243c:	12400015 	stw	r9,0(r2)
10012440:	20805215 	stw	r2,328(r4)
10012444:	10006215 	stw	zero,392(r2)
10012448:	10006315 	stw	zero,396(r2)
1001244c:	883fde26 	beq	r17,zero,100123c8 <__alt_data_end+0xf80123c8>
10012450:	18c9883a 	add	r4,r3,r3
10012454:	2109883a 	add	r4,r4,r4
10012458:	1109883a 	add	r4,r2,r4
1001245c:	21802215 	stw	r6,136(r4)
10012460:	01800044 	movi	r6,1
10012464:	12406217 	ldw	r9,392(r2)
10012468:	30cc983a 	sll	r6,r6,r3
1001246c:	4992b03a 	or	r9,r9,r6
10012470:	12406215 	stw	r9,392(r2)
10012474:	21c04215 	stw	r7,264(r4)
10012478:	01000084 	movi	r4,2
1001247c:	893fd21e 	bne	r17,r4,100123c8 <__alt_data_end+0xf80123c8>
10012480:	11006317 	ldw	r4,396(r2)
10012484:	218cb03a 	or	r6,r4,r6
10012488:	11806315 	stw	r6,396(r2)
1001248c:	003fce06 	br	100123c8 <__alt_data_end+0xf80123c8>
10012490:	18805304 	addi	r2,r3,332
10012494:	18805215 	stw	r2,328(r3)
10012498:	003fc606 	br	100123b4 <__alt_data_end+0xf80123b4>
1001249c:	00bfffc4 	movi	r2,-1
100124a0:	003fd006 	br	100123e4 <__alt_data_end+0xf80123e4>
